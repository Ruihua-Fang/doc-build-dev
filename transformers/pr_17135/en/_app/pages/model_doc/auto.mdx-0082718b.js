import{S as uCt,i as _Ct,s as bCt,e as a,k as l,w as F,t as o,M as vCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as FCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as wPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function TCt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,T0,tf,qe,Xe,ai,Mn,M0,En,Cn,E0,ni,wn,C0,si,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),T0=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),M0=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),E0=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),C0=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var I9=s(p);m=r(I9,"NewModelConfig"),I9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var q9=s(oi);rf=r(q9,"model_type"),q9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var N9=s(ri);ti=r(N9,'"new-model"'),N9.forEach(t),T0=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),M0=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var j9=s(En);Cn=r(j9,"PreTrainedModel"),j9.forEach(t),E0=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var nf=s(ni);wn=r(nf,"config_class"),nf.forEach(t),C0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var D9=s(si);af=r(D9,"NewModelConfig"),D9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,rf),e(g,Kr),e(g,ri),e(ri,ti),e(g,T0),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,M0),e(qe,En),e(En,Cn),e(qe,E0),e(qe,ni),e(ni,wn),e(qe,C0),e(qe,si),e(si,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,T0,tf,qe,Xe,ai,Mn,M0,En,Cn,E0,ni,wn,C0,si,af,va,ze,Ae,I9,li,q9,N9,Eo,Fa,j9,nf,D9,CNe,bBe,ii,sf,lZ,w0,wNe,iZ,ANe,vBe,An,yNe,dZ,LNe,xNe,cZ,$Ne,kNe,FBe,A0,TBe,G9,SNe,MBe,lf,EBe,di,df,fZ,y0,RNe,mZ,BNe,CBe,Co,L0,PNe,x0,INe,O9,qNe,NNe,jNe,$0,DNe,gZ,GNe,ONe,VNe,Mr,k0,XNe,hZ,zNe,QNe,ci,WNe,pZ,HNe,UNe,uZ,JNe,YNe,KNe,A,cf,_Z,ZNe,eje,V9,oje,rje,tje,ff,bZ,aje,nje,X9,sje,lje,ije,mf,vZ,dje,cje,z9,fje,mje,gje,gf,FZ,hje,pje,Q9,uje,_je,bje,hf,TZ,vje,Fje,W9,Tje,Mje,Eje,pf,MZ,Cje,wje,H9,Aje,yje,Lje,uf,EZ,xje,$je,U9,kje,Sje,Rje,_f,CZ,Bje,Pje,J9,Ije,qje,Nje,bf,wZ,jje,Dje,Y9,Gje,Oje,Vje,vf,AZ,Xje,zje,K9,Qje,Wje,Hje,Ff,yZ,Uje,Jje,Z9,Yje,Kje,Zje,Tf,LZ,eDe,oDe,e$,rDe,tDe,aDe,Mf,xZ,nDe,sDe,o$,lDe,iDe,dDe,Ef,$Z,cDe,fDe,r$,mDe,gDe,hDe,Cf,kZ,pDe,uDe,t$,_De,bDe,vDe,wf,SZ,FDe,TDe,a$,MDe,EDe,CDe,Af,RZ,wDe,ADe,n$,yDe,LDe,xDe,yf,BZ,$De,kDe,s$,SDe,RDe,BDe,Lf,PZ,PDe,IDe,l$,qDe,NDe,jDe,xf,IZ,DDe,GDe,i$,ODe,VDe,XDe,$f,qZ,zDe,QDe,d$,WDe,HDe,UDe,kf,NZ,JDe,YDe,c$,KDe,ZDe,eGe,Sf,jZ,oGe,rGe,f$,tGe,aGe,nGe,Rf,DZ,sGe,lGe,m$,iGe,dGe,cGe,Bf,GZ,fGe,mGe,g$,gGe,hGe,pGe,Pf,OZ,uGe,_Ge,h$,bGe,vGe,FGe,If,VZ,TGe,MGe,p$,EGe,CGe,wGe,qf,XZ,AGe,yGe,u$,LGe,xGe,$Ge,Nf,zZ,kGe,SGe,_$,RGe,BGe,PGe,jf,QZ,IGe,qGe,b$,NGe,jGe,DGe,Df,WZ,GGe,OGe,v$,VGe,XGe,zGe,Gf,HZ,QGe,WGe,F$,HGe,UGe,JGe,Of,UZ,YGe,KGe,T$,ZGe,eOe,oOe,Vf,JZ,rOe,tOe,M$,aOe,nOe,sOe,Xf,YZ,lOe,iOe,E$,dOe,cOe,fOe,zf,KZ,mOe,gOe,C$,hOe,pOe,uOe,Qf,ZZ,_Oe,bOe,w$,vOe,FOe,TOe,Wf,eee,MOe,EOe,A$,COe,wOe,AOe,Hf,oee,yOe,LOe,y$,xOe,$Oe,kOe,Uf,ree,SOe,ROe,L$,BOe,POe,IOe,Jf,tee,qOe,NOe,x$,jOe,DOe,GOe,Yf,aee,OOe,VOe,$$,XOe,zOe,QOe,Kf,nee,WOe,HOe,k$,UOe,JOe,YOe,Zf,see,KOe,ZOe,S$,eVe,oVe,rVe,em,lee,tVe,aVe,R$,nVe,sVe,lVe,om,iee,iVe,dVe,B$,cVe,fVe,mVe,rm,dee,gVe,hVe,P$,pVe,uVe,_Ve,tm,cee,bVe,vVe,I$,FVe,TVe,MVe,am,fee,EVe,CVe,q$,wVe,AVe,yVe,nm,mee,LVe,xVe,N$,$Ve,kVe,SVe,sm,gee,RVe,BVe,j$,PVe,IVe,qVe,lm,hee,NVe,jVe,D$,DVe,GVe,OVe,im,pee,VVe,XVe,G$,zVe,QVe,WVe,dm,uee,HVe,UVe,O$,JVe,YVe,KVe,cm,_ee,ZVe,eXe,V$,oXe,rXe,tXe,fm,bee,aXe,nXe,X$,sXe,lXe,iXe,mm,vee,dXe,cXe,z$,fXe,mXe,gXe,gm,Fee,hXe,pXe,Q$,uXe,_Xe,bXe,hm,Tee,vXe,FXe,W$,TXe,MXe,EXe,pm,Mee,CXe,wXe,H$,AXe,yXe,LXe,um,Eee,xXe,$Xe,U$,kXe,SXe,RXe,_m,Cee,BXe,PXe,J$,IXe,qXe,NXe,bm,wee,jXe,DXe,Y$,GXe,OXe,VXe,vm,Aee,XXe,zXe,K$,QXe,WXe,HXe,Fm,yee,UXe,JXe,Z$,YXe,KXe,ZXe,Tm,Lee,eze,oze,ek,rze,tze,aze,Mm,xee,nze,sze,ok,lze,ize,dze,Em,$ee,cze,fze,rk,mze,gze,hze,Cm,kee,pze,uze,tk,_ze,bze,vze,wm,See,Fze,Tze,ak,Mze,Eze,Cze,Am,Ree,wze,Aze,nk,yze,Lze,xze,ym,Bee,$ze,kze,sk,Sze,Rze,Bze,Lm,Pee,Pze,Ize,lk,qze,Nze,jze,xm,Iee,Dze,Gze,ik,Oze,Vze,Xze,$m,qee,zze,Qze,dk,Wze,Hze,Uze,km,Nee,Jze,Yze,ck,Kze,Zze,eQe,Sm,jee,oQe,rQe,fk,tQe,aQe,nQe,Rm,Dee,sQe,lQe,mk,iQe,dQe,cQe,Bm,Gee,fQe,mQe,gk,gQe,hQe,pQe,Pm,Oee,uQe,_Qe,hk,bQe,vQe,FQe,Im,Vee,TQe,MQe,pk,EQe,CQe,wQe,qm,Xee,AQe,yQe,uk,LQe,xQe,$Qe,Nm,zee,kQe,SQe,_k,RQe,BQe,PQe,jm,Qee,IQe,qQe,bk,NQe,jQe,DQe,Dm,Wee,GQe,OQe,vk,VQe,XQe,zQe,Gm,Hee,QQe,WQe,Fk,HQe,UQe,JQe,Om,Uee,YQe,KQe,Tk,ZQe,eWe,oWe,Vm,Jee,rWe,tWe,Mk,aWe,nWe,sWe,Xm,Yee,lWe,iWe,Ek,dWe,cWe,fWe,zm,Kee,mWe,gWe,Ck,hWe,pWe,uWe,Qm,Zee,_We,bWe,wk,vWe,FWe,TWe,Wm,eoe,MWe,EWe,Ak,CWe,wWe,AWe,Hm,ooe,yWe,LWe,yk,xWe,$We,kWe,Um,roe,SWe,RWe,Lk,BWe,PWe,IWe,Jm,toe,qWe,NWe,xk,jWe,DWe,GWe,Ym,aoe,OWe,VWe,$k,XWe,zWe,QWe,Km,noe,WWe,HWe,kk,UWe,JWe,YWe,Zm,soe,KWe,ZWe,Sk,eHe,oHe,rHe,eg,loe,tHe,aHe,Rk,nHe,sHe,lHe,og,ioe,iHe,dHe,Bk,cHe,fHe,mHe,rg,doe,gHe,hHe,Pk,pHe,uHe,_He,tg,coe,bHe,vHe,Ik,FHe,THe,MHe,ag,foe,EHe,CHe,qk,wHe,AHe,yHe,ng,LHe,sg,S0,xHe,moe,$He,wBe,fi,lg,goe,R0,kHe,hoe,SHe,ABe,wo,B0,RHe,P0,BHe,Nk,PHe,IHe,qHe,I0,NHe,poe,jHe,DHe,GHe,Er,q0,OHe,uoe,VHe,XHe,Ta,zHe,_oe,QHe,WHe,boe,HHe,UHe,voe,JHe,YHe,KHe,k,yn,Foe,ZHe,eUe,jk,oUe,rUe,Dk,tUe,aUe,nUe,Ln,Toe,sUe,lUe,Gk,iUe,dUe,Ok,cUe,fUe,mUe,xn,Moe,gUe,hUe,Vk,pUe,uUe,Xk,_Ue,bUe,vUe,ig,Eoe,FUe,TUe,zk,MUe,EUe,CUe,$n,Coe,wUe,AUe,Qk,yUe,LUe,Wk,xUe,$Ue,kUe,dg,woe,SUe,RUe,Hk,BUe,PUe,IUe,cg,Aoe,qUe,NUe,Uk,jUe,DUe,GUe,fg,yoe,OUe,VUe,Jk,XUe,zUe,QUe,kn,Loe,WUe,HUe,Yk,UUe,JUe,Kk,YUe,KUe,ZUe,Sn,xoe,eJe,oJe,Zk,rJe,tJe,eS,aJe,nJe,sJe,Rn,$oe,lJe,iJe,oS,dJe,cJe,rS,fJe,mJe,gJe,mg,koe,hJe,pJe,tS,uJe,_Je,bJe,gg,Soe,vJe,FJe,aS,TJe,MJe,EJe,Bn,Roe,CJe,wJe,nS,AJe,yJe,sS,LJe,xJe,$Je,hg,Boe,kJe,SJe,lS,RJe,BJe,PJe,Pn,Poe,IJe,qJe,iS,NJe,jJe,dS,DJe,GJe,OJe,In,Ioe,VJe,XJe,cS,zJe,QJe,fS,WJe,HJe,UJe,qn,qoe,JJe,YJe,mS,KJe,ZJe,gS,eYe,oYe,rYe,pg,Noe,tYe,aYe,hS,nYe,sYe,lYe,Nn,joe,iYe,dYe,pS,cYe,fYe,uS,mYe,gYe,hYe,jn,Doe,pYe,uYe,_S,_Ye,bYe,bS,vYe,FYe,TYe,Dn,Goe,MYe,EYe,vS,CYe,wYe,FS,AYe,yYe,LYe,Gn,Ooe,xYe,$Ye,TS,kYe,SYe,MS,RYe,BYe,PYe,On,Voe,IYe,qYe,ES,NYe,jYe,CS,DYe,GYe,OYe,Vn,Xoe,VYe,XYe,wS,zYe,QYe,AS,WYe,HYe,UYe,ug,zoe,JYe,YYe,yS,KYe,ZYe,eKe,Xn,Qoe,oKe,rKe,LS,tKe,aKe,xS,nKe,sKe,lKe,_g,Woe,iKe,dKe,$S,cKe,fKe,mKe,zn,Hoe,gKe,hKe,kS,pKe,uKe,SS,_Ke,bKe,vKe,Qn,Uoe,FKe,TKe,RS,MKe,EKe,BS,CKe,wKe,AKe,Wn,Joe,yKe,LKe,PS,xKe,$Ke,IS,kKe,SKe,RKe,Hn,Yoe,BKe,PKe,qS,IKe,qKe,NS,NKe,jKe,DKe,Un,Koe,GKe,OKe,jS,VKe,XKe,DS,zKe,QKe,WKe,bg,Zoe,HKe,UKe,GS,JKe,YKe,KKe,Jn,ere,ZKe,eZe,OS,oZe,rZe,VS,tZe,aZe,nZe,Yn,ore,sZe,lZe,XS,iZe,dZe,zS,cZe,fZe,mZe,Kn,rre,gZe,hZe,QS,pZe,uZe,WS,_Ze,bZe,vZe,Zn,tre,FZe,TZe,HS,MZe,EZe,US,CZe,wZe,AZe,es,are,yZe,LZe,JS,xZe,$Ze,YS,kZe,SZe,RZe,os,nre,BZe,PZe,KS,IZe,qZe,ZS,NZe,jZe,DZe,vg,sre,GZe,OZe,eR,VZe,XZe,zZe,rs,lre,QZe,WZe,oR,HZe,UZe,rR,JZe,YZe,KZe,Fg,ire,ZZe,eeo,tR,oeo,reo,teo,Tg,dre,aeo,neo,aR,seo,leo,ieo,ts,cre,deo,ceo,nR,feo,meo,sR,geo,heo,peo,as,fre,ueo,_eo,lR,beo,veo,iR,Feo,Teo,Meo,ns,mre,Eeo,Ceo,dR,weo,Aeo,cR,yeo,Leo,xeo,Mg,gre,$eo,keo,fR,Seo,Reo,Beo,ss,hre,Peo,Ieo,mR,qeo,Neo,gR,jeo,Deo,Geo,ls,pre,Oeo,Veo,hR,Xeo,zeo,pR,Qeo,Weo,Heo,is,ure,Ueo,Jeo,uR,Yeo,Keo,_R,Zeo,eoo,ooo,ds,_re,roo,too,bR,aoo,noo,vR,soo,loo,ioo,cs,bre,doo,coo,FR,foo,moo,TR,goo,hoo,poo,fs,vre,uoo,_oo,MR,boo,voo,ER,Foo,Too,Moo,Eg,Fre,Eoo,Coo,CR,woo,Aoo,yoo,Cg,Tre,Loo,xoo,wR,$oo,koo,Soo,wg,Mre,Roo,Boo,AR,Poo,Ioo,qoo,Ag,Ere,Noo,joo,yR,Doo,Goo,Ooo,ms,Cre,Voo,Xoo,LR,zoo,Qoo,xR,Woo,Hoo,Uoo,yg,wre,Joo,Yoo,$R,Koo,Zoo,ero,gs,Are,oro,rro,kR,tro,aro,SR,nro,sro,lro,hs,yre,iro,dro,RR,cro,fro,BR,mro,gro,hro,ps,Lre,pro,uro,PR,_ro,bro,IR,vro,Fro,Tro,us,xre,Mro,Ero,qR,Cro,wro,NR,Aro,yro,Lro,_s,$re,xro,$ro,jR,kro,Sro,DR,Rro,Bro,Pro,bs,kre,Iro,qro,GR,Nro,jro,OR,Dro,Gro,Oro,Lg,Sre,Vro,Xro,VR,zro,Qro,Wro,xg,Rre,Hro,Uro,XR,Jro,Yro,Kro,vs,Bre,Zro,eto,zR,oto,rto,QR,tto,ato,nto,Fs,Pre,sto,lto,WR,ito,dto,HR,cto,fto,mto,Ts,Ire,gto,hto,UR,pto,uto,JR,_to,bto,vto,$g,qre,Fto,Tto,YR,Mto,Eto,Cto,kg,Nre,wto,Ato,KR,yto,Lto,xto,Sg,jre,$to,kto,ZR,Sto,Rto,Bto,Ms,Dre,Pto,Ito,eB,qto,Nto,oB,jto,Dto,Gto,Rg,Gre,Oto,Vto,rB,Xto,zto,Qto,Bg,Ore,Wto,Hto,tB,Uto,Jto,Yto,Es,Vre,Kto,Zto,aB,eao,oao,nB,rao,tao,aao,Pg,Xre,nao,sao,sB,lao,iao,dao,Ig,zre,cao,fao,lB,mao,gao,hao,Cs,Qre,pao,uao,iB,_ao,bao,dB,vao,Fao,Tao,ws,Wre,Mao,Eao,cB,Cao,wao,fB,Aao,yao,Lao,As,Hre,xao,$ao,mB,kao,Sao,gB,Rao,Bao,Pao,ys,Ure,Iao,qao,hB,Nao,jao,pB,Dao,Gao,Oao,qg,Vao,Ng,N0,Xao,Jre,zao,yBe,mi,jg,Yre,j0,Qao,Kre,Wao,LBe,Ao,D0,Hao,G0,Uao,uB,Jao,Yao,Kao,O0,Zao,Zre,eno,ono,rno,Qe,V0,tno,ete,ano,nno,Ma,sno,ote,lno,ino,rte,dno,cno,tte,fno,mno,gno,te,Dg,ate,hno,pno,_B,uno,_no,bno,Gg,nte,vno,Fno,bB,Tno,Mno,Eno,Og,ste,Cno,wno,vB,Ano,yno,Lno,Vg,lte,xno,$no,FB,kno,Sno,Rno,Xg,ite,Bno,Pno,TB,Ino,qno,Nno,zg,dte,jno,Dno,MB,Gno,Ono,Vno,Qg,cte,Xno,zno,EB,Qno,Wno,Hno,Wg,fte,Uno,Jno,CB,Yno,Kno,Zno,Hg,mte,eso,oso,wB,rso,tso,aso,Ug,gte,nso,sso,AB,lso,iso,dso,Jg,hte,cso,fso,yB,mso,gso,hso,Yg,pte,pso,uso,LB,_so,bso,vso,Kg,ute,Fso,Tso,xB,Mso,Eso,Cso,Zg,_te,wso,Aso,$B,yso,Lso,xso,eh,bte,$so,kso,kB,Sso,Rso,Bso,oh,vte,Pso,Iso,SB,qso,Nso,jso,rh,Fte,Dso,Gso,RB,Oso,Vso,Xso,th,Tte,zso,Qso,BB,Wso,Hso,Uso,ah,Mte,Jso,Yso,PB,Kso,Zso,elo,nh,Ete,olo,rlo,IB,tlo,alo,nlo,sh,Cte,slo,llo,qB,ilo,dlo,clo,lh,wte,flo,mlo,NB,glo,hlo,plo,ih,Ate,ulo,_lo,jB,blo,vlo,Flo,dh,yte,Tlo,Mlo,DB,Elo,Clo,wlo,ch,Alo,fh,ylo,mh,X0,Llo,Lte,xlo,xBe,gi,gh,xte,z0,$lo,$te,klo,$Be,yo,Q0,Slo,W0,Rlo,GB,Blo,Plo,Ilo,H0,qlo,kte,Nlo,jlo,Dlo,We,U0,Glo,Ste,Olo,Vlo,hi,Xlo,Rte,zlo,Qlo,Bte,Wlo,Hlo,Ulo,be,hh,Pte,Jlo,Ylo,OB,Klo,Zlo,eio,ph,Ite,oio,rio,VB,tio,aio,nio,uh,qte,sio,lio,XB,iio,dio,cio,_h,Nte,fio,mio,zB,gio,hio,pio,bh,jte,uio,_io,QB,bio,vio,Fio,vh,Dte,Tio,Mio,WB,Eio,Cio,wio,Fh,Gte,Aio,yio,HB,Lio,xio,$io,Th,Ote,kio,Sio,UB,Rio,Bio,Pio,Mh,Vte,Iio,qio,JB,Nio,jio,Dio,Eh,Xte,Gio,Oio,YB,Vio,Xio,zio,Ch,zte,Qio,Wio,KB,Hio,Uio,Jio,wh,Qte,Yio,Kio,ZB,Zio,edo,odo,Ah,Wte,rdo,tdo,eP,ado,ndo,sdo,yh,Hte,ldo,ido,oP,ddo,cdo,fdo,Lh,mdo,xh,gdo,$h,J0,hdo,Ute,pdo,kBe,pi,kh,Jte,Y0,udo,Yte,_do,SBe,Lo,K0,bdo,ui,vdo,rP,Fdo,Tdo,tP,Mdo,Edo,Cdo,Z0,wdo,Kte,Ado,ydo,Ldo,Zr,e6,xdo,Zte,$do,kdo,_i,Sdo,eae,Rdo,Bdo,aP,Pdo,Ido,qdo,Sh,Ndo,He,o6,jdo,oae,Ddo,Gdo,Ea,Odo,rae,Vdo,Xdo,tae,zdo,Qdo,aae,Wdo,Hdo,Udo,x,Rh,nae,Jdo,Ydo,nP,Kdo,Zdo,eco,Bh,sae,oco,rco,sP,tco,aco,nco,Ph,lae,sco,lco,lP,ico,dco,cco,Ih,iae,fco,mco,iP,gco,hco,pco,qh,dae,uco,_co,dP,bco,vco,Fco,Nh,cae,Tco,Mco,cP,Eco,Cco,wco,jh,fae,Aco,yco,fP,Lco,xco,$co,Dh,mae,kco,Sco,mP,Rco,Bco,Pco,Gh,gae,Ico,qco,gP,Nco,jco,Dco,Oh,hae,Gco,Oco,hP,Vco,Xco,zco,Vh,pae,Qco,Wco,pP,Hco,Uco,Jco,Xh,uae,Yco,Kco,uP,Zco,efo,ofo,zh,_ae,rfo,tfo,_P,afo,nfo,sfo,Qh,bae,lfo,ifo,bP,dfo,cfo,ffo,Wh,vae,mfo,gfo,vP,hfo,pfo,ufo,Hh,Fae,_fo,bfo,FP,vfo,Ffo,Tfo,Uh,Tae,Mfo,Efo,TP,Cfo,wfo,Afo,Jh,Mae,yfo,Lfo,MP,xfo,$fo,kfo,Yh,Eae,Sfo,Rfo,EP,Bfo,Pfo,Ifo,Kh,Cae,qfo,Nfo,CP,jfo,Dfo,Gfo,Zh,wae,Ofo,Vfo,wP,Xfo,zfo,Qfo,ep,Aae,Wfo,Hfo,AP,Ufo,Jfo,Yfo,op,yae,Kfo,Zfo,yP,emo,omo,rmo,rp,Lae,tmo,amo,LP,nmo,smo,lmo,tp,xae,imo,dmo,xP,cmo,fmo,mmo,ap,$ae,gmo,hmo,$P,pmo,umo,_mo,np,kae,bmo,vmo,kP,Fmo,Tmo,Mmo,sp,Sae,Emo,Cmo,SP,wmo,Amo,ymo,lp,Rae,Lmo,xmo,RP,$mo,kmo,Smo,ip,Bae,Rmo,Bmo,BP,Pmo,Imo,qmo,Ls,Pae,Nmo,jmo,PP,Dmo,Gmo,IP,Omo,Vmo,Xmo,dp,Iae,zmo,Qmo,qP,Wmo,Hmo,Umo,cp,qae,Jmo,Ymo,NP,Kmo,Zmo,ego,fp,Nae,ogo,rgo,jP,tgo,ago,ngo,mp,jae,sgo,lgo,DP,igo,dgo,cgo,gp,Dae,fgo,mgo,GP,ggo,hgo,pgo,hp,Gae,ugo,_go,OP,bgo,vgo,Fgo,pp,Oae,Tgo,Mgo,VP,Ego,Cgo,wgo,up,Vae,Ago,ygo,XP,Lgo,xgo,$go,_p,Xae,kgo,Sgo,zP,Rgo,Bgo,Pgo,bp,zae,Igo,qgo,QP,Ngo,jgo,Dgo,vp,Qae,Ggo,Ogo,WP,Vgo,Xgo,zgo,Fp,Wae,Qgo,Wgo,HP,Hgo,Ugo,Jgo,Tp,Hae,Ygo,Kgo,UP,Zgo,eho,oho,Mp,Uae,rho,tho,JP,aho,nho,sho,Ep,Jae,lho,iho,YP,dho,cho,fho,Cp,Yae,mho,gho,KP,hho,pho,uho,wp,Kae,_ho,bho,ZP,vho,Fho,Tho,Ap,Zae,Mho,Eho,eI,Cho,who,Aho,yp,ene,yho,Lho,oI,xho,$ho,kho,Lp,one,Sho,Rho,rI,Bho,Pho,Iho,xp,rne,qho,Nho,tI,jho,Dho,Gho,$p,tne,Oho,Vho,aI,Xho,zho,Qho,kp,ane,Who,Hho,nI,Uho,Jho,Yho,Sp,nne,Kho,Zho,sI,epo,opo,rpo,Rp,sne,tpo,apo,lI,npo,spo,lpo,Bp,lne,ipo,dpo,iI,cpo,fpo,mpo,Pp,ine,gpo,hpo,dI,ppo,upo,_po,Ip,dne,bpo,vpo,cI,Fpo,Tpo,Mpo,qp,cne,Epo,Cpo,fI,wpo,Apo,ypo,Np,fne,Lpo,xpo,mI,$po,kpo,Spo,jp,mne,Rpo,Bpo,gI,Ppo,Ipo,qpo,Dp,gne,Npo,jpo,hI,Dpo,Gpo,Opo,Gp,hne,Vpo,Xpo,pI,zpo,Qpo,Wpo,Op,pne,Hpo,Upo,uI,Jpo,Ypo,Kpo,Vp,une,Zpo,euo,_I,ouo,ruo,tuo,Xp,_ne,auo,nuo,bI,suo,luo,iuo,zp,bne,duo,cuo,vI,fuo,muo,guo,Qp,vne,huo,puo,FI,uuo,_uo,buo,Wp,Fne,vuo,Fuo,TI,Tuo,Muo,Euo,Hp,Tne,Cuo,wuo,MI,Auo,yuo,Luo,Up,Mne,xuo,$uo,EI,kuo,Suo,Ruo,Jp,Ene,Buo,Puo,CI,Iuo,quo,Nuo,Yp,Cne,juo,Duo,wI,Guo,Ouo,Vuo,Kp,wne,Xuo,zuo,AI,Quo,Wuo,Huo,Zp,Ane,Uuo,Juo,yI,Yuo,Kuo,Zuo,eu,yne,e_o,o_o,LI,r_o,t_o,a_o,ou,Lne,n_o,s_o,xI,l_o,i_o,d_o,ru,xne,c_o,f_o,$I,m_o,g_o,h_o,tu,$ne,p_o,u_o,kI,__o,b_o,v_o,au,kne,F_o,T_o,SI,M_o,E_o,C_o,nu,Sne,w_o,A_o,RI,y_o,L_o,x_o,su,Rne,$_o,k_o,BI,S_o,R_o,B_o,lu,Bne,P_o,I_o,PI,q_o,N_o,j_o,iu,Pne,D_o,G_o,II,O_o,V_o,X_o,du,Ine,z_o,Q_o,qI,W_o,H_o,U_o,cu,qne,J_o,Y_o,NI,K_o,Z_o,e1o,fu,Nne,o1o,r1o,jI,t1o,a1o,n1o,mu,jne,s1o,l1o,DI,i1o,d1o,c1o,gu,Dne,f1o,m1o,GI,g1o,h1o,p1o,hu,Gne,u1o,_1o,OI,b1o,v1o,F1o,pu,One,T1o,M1o,VI,E1o,C1o,w1o,uu,Vne,A1o,y1o,XI,L1o,x1o,$1o,_u,Xne,k1o,S1o,zI,R1o,B1o,P1o,bu,zne,I1o,q1o,QI,N1o,j1o,D1o,vu,G1o,Qne,O1o,V1o,Wne,X1o,z1o,Fu,RBe,bi,Tu,Hne,r6,Q1o,Une,W1o,BBe,xo,t6,H1o,vi,U1o,WI,J1o,Y1o,HI,K1o,Z1o,ebo,a6,obo,Jne,rbo,tbo,abo,et,n6,nbo,Yne,sbo,lbo,Fi,ibo,Kne,dbo,cbo,UI,fbo,mbo,gbo,Mu,hbo,Ue,s6,pbo,Zne,ubo,_bo,Ca,bbo,ese,vbo,Fbo,ose,Tbo,Mbo,rse,Ebo,Cbo,wbo,G,Eu,tse,Abo,ybo,JI,Lbo,xbo,$bo,Cu,ase,kbo,Sbo,YI,Rbo,Bbo,Pbo,wu,nse,Ibo,qbo,KI,Nbo,jbo,Dbo,Au,sse,Gbo,Obo,ZI,Vbo,Xbo,zbo,yu,lse,Qbo,Wbo,eq,Hbo,Ubo,Jbo,Lu,ise,Ybo,Kbo,oq,Zbo,e2o,o2o,xu,dse,r2o,t2o,rq,a2o,n2o,s2o,$u,cse,l2o,i2o,tq,d2o,c2o,f2o,ku,fse,m2o,g2o,aq,h2o,p2o,u2o,Su,mse,_2o,b2o,nq,v2o,F2o,T2o,Ru,gse,M2o,E2o,sq,C2o,w2o,A2o,Bu,hse,y2o,L2o,lq,x2o,$2o,k2o,Pu,pse,S2o,R2o,iq,B2o,P2o,I2o,Iu,use,q2o,N2o,dq,j2o,D2o,G2o,qu,_se,O2o,V2o,cq,X2o,z2o,Q2o,Nu,bse,W2o,H2o,fq,U2o,J2o,Y2o,ju,vse,K2o,Z2o,mq,e5o,o5o,r5o,Du,Fse,t5o,a5o,gq,n5o,s5o,l5o,Gu,Tse,i5o,d5o,hq,c5o,f5o,m5o,Ou,Mse,g5o,h5o,pq,p5o,u5o,_5o,Vu,Ese,b5o,v5o,uq,F5o,T5o,M5o,Xu,Cse,E5o,C5o,_q,w5o,A5o,y5o,zu,wse,L5o,x5o,bq,$5o,k5o,S5o,Qu,Ase,R5o,B5o,vq,P5o,I5o,q5o,Wu,yse,N5o,j5o,Fq,D5o,G5o,O5o,Hu,Lse,V5o,X5o,Tq,z5o,Q5o,W5o,Uu,xse,H5o,U5o,Mq,J5o,Y5o,K5o,Ju,$se,Z5o,e3o,Eq,o3o,r3o,t3o,Yu,kse,a3o,n3o,Cq,s3o,l3o,i3o,Ku,Sse,d3o,c3o,wq,f3o,m3o,g3o,Zu,Rse,h3o,p3o,Aq,u3o,_3o,b3o,e_,Bse,v3o,F3o,yq,T3o,M3o,E3o,o_,Pse,C3o,w3o,Lq,A3o,y3o,L3o,r_,Ise,x3o,$3o,xq,k3o,S3o,R3o,t_,qse,B3o,P3o,$q,I3o,q3o,N3o,a_,Nse,j3o,D3o,kq,G3o,O3o,V3o,n_,jse,X3o,z3o,Sq,Q3o,W3o,H3o,s_,Dse,U3o,J3o,Rq,Y3o,K3o,Z3o,l_,Gse,evo,ovo,Bq,rvo,tvo,avo,i_,nvo,Ose,svo,lvo,Vse,ivo,dvo,d_,PBe,Ti,c_,Xse,l6,cvo,zse,fvo,IBe,$o,i6,mvo,Mi,gvo,Pq,hvo,pvo,Iq,uvo,_vo,bvo,d6,vvo,Qse,Fvo,Tvo,Mvo,ot,c6,Evo,Wse,Cvo,wvo,Ei,Avo,Hse,yvo,Lvo,qq,xvo,$vo,kvo,f_,Svo,Je,f6,Rvo,Use,Bvo,Pvo,wa,Ivo,Jse,qvo,Nvo,Yse,jvo,Dvo,Kse,Gvo,Ovo,Vvo,z,m_,Zse,Xvo,zvo,Nq,Qvo,Wvo,Hvo,g_,ele,Uvo,Jvo,jq,Yvo,Kvo,Zvo,h_,ole,eFo,oFo,Dq,rFo,tFo,aFo,p_,rle,nFo,sFo,Gq,lFo,iFo,dFo,u_,tle,cFo,fFo,Oq,mFo,gFo,hFo,__,ale,pFo,uFo,Vq,_Fo,bFo,vFo,b_,nle,FFo,TFo,Xq,MFo,EFo,CFo,v_,sle,wFo,AFo,zq,yFo,LFo,xFo,F_,lle,$Fo,kFo,Qq,SFo,RFo,BFo,T_,ile,PFo,IFo,Wq,qFo,NFo,jFo,M_,dle,DFo,GFo,Hq,OFo,VFo,XFo,E_,cle,zFo,QFo,Uq,WFo,HFo,UFo,C_,fle,JFo,YFo,Jq,KFo,ZFo,eTo,w_,mle,oTo,rTo,Yq,tTo,aTo,nTo,A_,gle,sTo,lTo,Kq,iTo,dTo,cTo,y_,hle,fTo,mTo,Zq,gTo,hTo,pTo,L_,ple,uTo,_To,eN,bTo,vTo,FTo,x_,ule,TTo,MTo,oN,ETo,CTo,wTo,$_,_le,ATo,yTo,rN,LTo,xTo,$To,k_,ble,kTo,STo,tN,RTo,BTo,PTo,S_,vle,ITo,qTo,aN,NTo,jTo,DTo,R_,Fle,GTo,OTo,nN,VTo,XTo,zTo,B_,Tle,QTo,WTo,sN,HTo,UTo,JTo,P_,Mle,YTo,KTo,lN,ZTo,e7o,o7o,I_,Ele,r7o,t7o,iN,a7o,n7o,s7o,q_,Cle,l7o,i7o,dN,d7o,c7o,f7o,N_,wle,m7o,g7o,cN,h7o,p7o,u7o,j_,Ale,_7o,b7o,fN,v7o,F7o,T7o,D_,yle,M7o,E7o,mN,C7o,w7o,A7o,G_,Lle,y7o,L7o,gN,x7o,$7o,k7o,O_,xle,S7o,R7o,hN,B7o,P7o,I7o,V_,$le,q7o,N7o,pN,j7o,D7o,G7o,X_,kle,O7o,V7o,uN,X7o,z7o,Q7o,z_,Sle,W7o,H7o,_N,U7o,J7o,Y7o,Q_,Rle,K7o,Z7o,bN,eMo,oMo,rMo,W_,tMo,Ble,aMo,nMo,Ple,sMo,lMo,H_,qBe,Ci,U_,Ile,m6,iMo,qle,dMo,NBe,ko,g6,cMo,wi,fMo,vN,mMo,gMo,FN,hMo,pMo,uMo,h6,_Mo,Nle,bMo,vMo,FMo,rt,p6,TMo,jle,MMo,EMo,Ai,CMo,Dle,wMo,AMo,TN,yMo,LMo,xMo,J_,$Mo,Ye,u6,kMo,Gle,SMo,RMo,Aa,BMo,Ole,PMo,IMo,Vle,qMo,NMo,Xle,jMo,DMo,GMo,Q,Y_,zle,OMo,VMo,MN,XMo,zMo,QMo,K_,Qle,WMo,HMo,EN,UMo,JMo,YMo,Z_,Wle,KMo,ZMo,CN,e4o,o4o,r4o,e1,Hle,t4o,a4o,wN,n4o,s4o,l4o,o1,Ule,i4o,d4o,AN,c4o,f4o,m4o,r1,Jle,g4o,h4o,yN,p4o,u4o,_4o,t1,Yle,b4o,v4o,LN,F4o,T4o,M4o,a1,Kle,E4o,C4o,xN,w4o,A4o,y4o,n1,Zle,L4o,x4o,$N,$4o,k4o,S4o,s1,eie,R4o,B4o,kN,P4o,I4o,q4o,l1,oie,N4o,j4o,SN,D4o,G4o,O4o,i1,rie,V4o,X4o,RN,z4o,Q4o,W4o,d1,tie,H4o,U4o,BN,J4o,Y4o,K4o,c1,aie,Z4o,eEo,PN,oEo,rEo,tEo,f1,nie,aEo,nEo,IN,sEo,lEo,iEo,m1,sie,dEo,cEo,qN,fEo,mEo,gEo,g1,lie,hEo,pEo,NN,uEo,_Eo,bEo,h1,iie,vEo,FEo,jN,TEo,MEo,EEo,p1,die,CEo,wEo,DN,AEo,yEo,LEo,u1,cie,xEo,$Eo,GN,kEo,SEo,REo,_1,fie,BEo,PEo,ON,IEo,qEo,NEo,b1,mie,jEo,DEo,VN,GEo,OEo,VEo,v1,gie,XEo,zEo,XN,QEo,WEo,HEo,F1,hie,UEo,JEo,zN,YEo,KEo,ZEo,T1,pie,eCo,oCo,QN,rCo,tCo,aCo,M1,uie,nCo,sCo,WN,lCo,iCo,dCo,E1,_ie,cCo,fCo,HN,mCo,gCo,hCo,C1,bie,pCo,uCo,UN,_Co,bCo,vCo,w1,vie,FCo,TCo,JN,MCo,ECo,CCo,A1,Fie,wCo,ACo,YN,yCo,LCo,xCo,y1,Tie,$Co,kCo,Mie,SCo,RCo,BCo,L1,Eie,PCo,ICo,KN,qCo,NCo,jCo,x1,Cie,DCo,GCo,ZN,OCo,VCo,XCo,$1,wie,zCo,QCo,ej,WCo,HCo,UCo,k1,Aie,JCo,YCo,oj,KCo,ZCo,ewo,S1,owo,yie,rwo,two,Lie,awo,nwo,R1,jBe,yi,B1,xie,_6,swo,$ie,lwo,DBe,So,b6,iwo,Li,dwo,rj,cwo,fwo,tj,mwo,gwo,hwo,v6,pwo,kie,uwo,_wo,bwo,tt,F6,vwo,Sie,Fwo,Two,xi,Mwo,Rie,Ewo,Cwo,aj,wwo,Awo,ywo,P1,Lwo,Ke,T6,xwo,Bie,$wo,kwo,ya,Swo,Pie,Rwo,Bwo,Iie,Pwo,Iwo,qie,qwo,Nwo,jwo,he,I1,Nie,Dwo,Gwo,nj,Owo,Vwo,Xwo,q1,jie,zwo,Qwo,sj,Wwo,Hwo,Uwo,N1,Die,Jwo,Ywo,lj,Kwo,Zwo,eAo,j1,Gie,oAo,rAo,ij,tAo,aAo,nAo,D1,Oie,sAo,lAo,dj,iAo,dAo,cAo,G1,Vie,fAo,mAo,cj,gAo,hAo,pAo,O1,Xie,uAo,_Ao,fj,bAo,vAo,FAo,V1,zie,TAo,MAo,mj,EAo,CAo,wAo,X1,Qie,AAo,yAo,gj,LAo,xAo,$Ao,z1,Wie,kAo,SAo,hj,RAo,BAo,PAo,Q1,Hie,IAo,qAo,pj,NAo,jAo,DAo,W1,Uie,GAo,OAo,uj,VAo,XAo,zAo,H1,Jie,QAo,WAo,_j,HAo,UAo,JAo,U1,Yie,YAo,KAo,bj,ZAo,e0o,o0o,J1,Kie,r0o,t0o,vj,a0o,n0o,s0o,Y1,Zie,l0o,i0o,Fj,d0o,c0o,f0o,K1,ede,m0o,g0o,Tj,h0o,p0o,u0o,Z1,_0o,ode,b0o,v0o,rde,F0o,T0o,eb,GBe,$i,ob,tde,M6,M0o,ade,E0o,OBe,Ro,E6,C0o,ki,w0o,Mj,A0o,y0o,Ej,L0o,x0o,$0o,C6,k0o,nde,S0o,R0o,B0o,at,w6,P0o,sde,I0o,q0o,Si,N0o,lde,j0o,D0o,Cj,G0o,O0o,V0o,rb,X0o,Ze,A6,z0o,ide,Q0o,W0o,La,H0o,dde,U0o,J0o,cde,Y0o,K0o,fde,Z0o,e6o,o6o,q,tb,mde,r6o,t6o,wj,a6o,n6o,s6o,ab,gde,l6o,i6o,Aj,d6o,c6o,f6o,nb,hde,m6o,g6o,yj,h6o,p6o,u6o,sb,pde,_6o,b6o,Lj,v6o,F6o,T6o,lb,ude,M6o,E6o,xj,C6o,w6o,A6o,ib,_de,y6o,L6o,$j,x6o,$6o,k6o,db,bde,S6o,R6o,kj,B6o,P6o,I6o,cb,vde,q6o,N6o,Sj,j6o,D6o,G6o,fb,Fde,O6o,V6o,Rj,X6o,z6o,Q6o,mb,Tde,W6o,H6o,Bj,U6o,J6o,Y6o,gb,Mde,K6o,Z6o,Pj,eyo,oyo,ryo,hb,Ede,tyo,ayo,Ij,nyo,syo,lyo,pb,Cde,iyo,dyo,qj,cyo,fyo,myo,ub,wde,gyo,hyo,Nj,pyo,uyo,_yo,_b,Ade,byo,vyo,jj,Fyo,Tyo,Myo,bb,yde,Eyo,Cyo,Dj,wyo,Ayo,yyo,vb,Lde,Lyo,xyo,Gj,$yo,kyo,Syo,Fb,xde,Ryo,Byo,Oj,Pyo,Iyo,qyo,Tb,$de,Nyo,jyo,Vj,Dyo,Gyo,Oyo,Mb,kde,Vyo,Xyo,Xj,zyo,Qyo,Wyo,Eb,Sde,Hyo,Uyo,zj,Jyo,Yyo,Kyo,Cb,Rde,Zyo,eLo,Qj,oLo,rLo,tLo,wb,Bde,aLo,nLo,Wj,sLo,lLo,iLo,Ab,Pde,dLo,cLo,Hj,fLo,mLo,gLo,yb,Ide,hLo,pLo,Uj,uLo,_Lo,bLo,Lb,qde,vLo,FLo,Jj,TLo,MLo,ELo,xb,Nde,CLo,wLo,Yj,ALo,yLo,LLo,$b,jde,xLo,$Lo,Kj,kLo,SLo,RLo,kb,Dde,BLo,PLo,Zj,ILo,qLo,NLo,Sb,Gde,jLo,DLo,eD,GLo,OLo,VLo,Rb,Ode,XLo,zLo,oD,QLo,WLo,HLo,Bb,Vde,ULo,JLo,rD,YLo,KLo,ZLo,Pb,Xde,e8o,o8o,tD,r8o,t8o,a8o,Ib,zde,n8o,s8o,aD,l8o,i8o,d8o,qb,Qde,c8o,f8o,nD,m8o,g8o,h8o,Nb,Wde,p8o,u8o,sD,_8o,b8o,v8o,jb,Hde,F8o,T8o,lD,M8o,E8o,C8o,Db,Ude,w8o,A8o,iD,y8o,L8o,x8o,Gb,Jde,$8o,k8o,dD,S8o,R8o,B8o,Ob,Yde,P8o,I8o,cD,q8o,N8o,j8o,Vb,Kde,D8o,G8o,fD,O8o,V8o,X8o,Xb,Zde,z8o,Q8o,mD,W8o,H8o,U8o,zb,ece,J8o,Y8o,gD,K8o,Z8o,exo,Qb,oce,oxo,rxo,hD,txo,axo,nxo,Wb,rce,sxo,lxo,pD,ixo,dxo,cxo,Hb,tce,fxo,mxo,uD,gxo,hxo,pxo,Ub,ace,uxo,_xo,_D,bxo,vxo,Fxo,Jb,Txo,nce,Mxo,Exo,sce,Cxo,wxo,Yb,VBe,Ri,Kb,lce,y6,Axo,ice,yxo,XBe,Bo,L6,Lxo,Bi,xxo,bD,$xo,kxo,vD,Sxo,Rxo,Bxo,x6,Pxo,dce,Ixo,qxo,Nxo,nt,$6,jxo,cce,Dxo,Gxo,Pi,Oxo,fce,Vxo,Xxo,FD,zxo,Qxo,Wxo,Zb,Hxo,eo,k6,Uxo,mce,Jxo,Yxo,xa,Kxo,gce,Zxo,e9o,hce,o9o,r9o,pce,t9o,a9o,n9o,Y,e2,uce,s9o,l9o,TD,i9o,d9o,c9o,o2,_ce,f9o,m9o,MD,g9o,h9o,p9o,r2,bce,u9o,_9o,ED,b9o,v9o,F9o,t2,vce,T9o,M9o,CD,E9o,C9o,w9o,a2,Fce,A9o,y9o,wD,L9o,x9o,$9o,n2,Tce,k9o,S9o,AD,R9o,B9o,P9o,s2,Mce,I9o,q9o,yD,N9o,j9o,D9o,l2,Ece,G9o,O9o,LD,V9o,X9o,z9o,i2,Cce,Q9o,W9o,xD,H9o,U9o,J9o,d2,wce,Y9o,K9o,$D,Z9o,e$o,o$o,c2,Ace,r$o,t$o,kD,a$o,n$o,s$o,f2,yce,l$o,i$o,SD,d$o,c$o,f$o,m2,Lce,m$o,g$o,RD,h$o,p$o,u$o,g2,xce,_$o,b$o,BD,v$o,F$o,T$o,h2,$ce,M$o,E$o,PD,C$o,w$o,A$o,p2,kce,y$o,L$o,ID,x$o,$$o,k$o,u2,Sce,S$o,R$o,qD,B$o,P$o,I$o,_2,Rce,q$o,N$o,ND,j$o,D$o,G$o,b2,Bce,O$o,V$o,jD,X$o,z$o,Q$o,v2,Pce,W$o,H$o,DD,U$o,J$o,Y$o,F2,Ice,K$o,Z$o,GD,eko,oko,rko,T2,qce,tko,ako,OD,nko,sko,lko,M2,Nce,iko,dko,VD,cko,fko,mko,E2,jce,gko,hko,XD,pko,uko,_ko,C2,Dce,bko,vko,zD,Fko,Tko,Mko,w2,Gce,Eko,Cko,QD,wko,Ako,yko,A2,Oce,Lko,xko,WD,$ko,kko,Sko,y2,Vce,Rko,Bko,HD,Pko,Iko,qko,L2,Xce,Nko,jko,UD,Dko,Gko,Oko,x2,Vko,zce,Xko,zko,Qce,Qko,Wko,$2,zBe,Ii,k2,Wce,S6,Hko,Hce,Uko,QBe,Po,R6,Jko,qi,Yko,JD,Kko,Zko,YD,eSo,oSo,rSo,B6,tSo,Uce,aSo,nSo,sSo,st,P6,lSo,Jce,iSo,dSo,Ni,cSo,Yce,fSo,mSo,KD,gSo,hSo,pSo,S2,uSo,oo,I6,_So,Kce,bSo,vSo,$a,FSo,Zce,TSo,MSo,efe,ESo,CSo,ofe,wSo,ASo,ySo,Ur,R2,rfe,LSo,xSo,ZD,$So,kSo,SSo,B2,tfe,RSo,BSo,eG,PSo,ISo,qSo,P2,afe,NSo,jSo,oG,DSo,GSo,OSo,I2,nfe,VSo,XSo,rG,zSo,QSo,WSo,q2,sfe,HSo,USo,tG,JSo,YSo,KSo,N2,ZSo,lfe,eRo,oRo,ife,rRo,tRo,j2,WBe,ji,D2,dfe,q6,aRo,cfe,nRo,HBe,Io,N6,sRo,Di,lRo,aG,iRo,dRo,nG,cRo,fRo,mRo,j6,gRo,ffe,hRo,pRo,uRo,lt,D6,_Ro,mfe,bRo,vRo,Gi,FRo,gfe,TRo,MRo,sG,ERo,CRo,wRo,G2,ARo,ro,G6,yRo,hfe,LRo,xRo,ka,$Ro,pfe,kRo,SRo,ufe,RRo,BRo,_fe,PRo,IRo,qRo,U,O2,bfe,NRo,jRo,lG,DRo,GRo,ORo,V2,vfe,VRo,XRo,iG,zRo,QRo,WRo,X2,Ffe,HRo,URo,dG,JRo,YRo,KRo,z2,Tfe,ZRo,eBo,cG,oBo,rBo,tBo,Q2,Mfe,aBo,nBo,fG,sBo,lBo,iBo,W2,Efe,dBo,cBo,mG,fBo,mBo,gBo,H2,Cfe,hBo,pBo,gG,uBo,_Bo,bBo,U2,wfe,vBo,FBo,hG,TBo,MBo,EBo,J2,Afe,CBo,wBo,pG,ABo,yBo,LBo,Y2,yfe,xBo,$Bo,uG,kBo,SBo,RBo,K2,Lfe,BBo,PBo,_G,IBo,qBo,NBo,Z2,xfe,jBo,DBo,bG,GBo,OBo,VBo,e5,$fe,XBo,zBo,vG,QBo,WBo,HBo,o5,kfe,UBo,JBo,FG,YBo,KBo,ZBo,r5,Sfe,ePo,oPo,TG,rPo,tPo,aPo,t5,Rfe,nPo,sPo,MG,lPo,iPo,dPo,a5,Bfe,cPo,fPo,EG,mPo,gPo,hPo,n5,Pfe,pPo,uPo,CG,_Po,bPo,vPo,s5,Ife,FPo,TPo,wG,MPo,EPo,CPo,l5,qfe,wPo,APo,AG,yPo,LPo,xPo,i5,Nfe,$Po,kPo,yG,SPo,RPo,BPo,d5,jfe,PPo,IPo,LG,qPo,NPo,jPo,c5,Dfe,DPo,GPo,xG,OPo,VPo,XPo,f5,Gfe,zPo,QPo,$G,WPo,HPo,UPo,m5,Ofe,JPo,YPo,kG,KPo,ZPo,eIo,g5,Vfe,oIo,rIo,SG,tIo,aIo,nIo,h5,Xfe,sIo,lIo,RG,iIo,dIo,cIo,p5,zfe,fIo,mIo,BG,gIo,hIo,pIo,u5,Qfe,uIo,_Io,PG,bIo,vIo,FIo,_5,Wfe,TIo,MIo,IG,EIo,CIo,wIo,b5,Hfe,AIo,yIo,qG,LIo,xIo,$Io,v5,Ufe,kIo,SIo,NG,RIo,BIo,PIo,F5,Jfe,IIo,qIo,jG,NIo,jIo,DIo,T5,GIo,Yfe,OIo,VIo,Kfe,XIo,zIo,M5,UBe,Oi,E5,Zfe,O6,QIo,eme,WIo,JBe,qo,V6,HIo,Vi,UIo,DG,JIo,YIo,GG,KIo,ZIo,eqo,X6,oqo,ome,rqo,tqo,aqo,it,z6,nqo,rme,sqo,lqo,Xi,iqo,tme,dqo,cqo,OG,fqo,mqo,gqo,C5,hqo,to,Q6,pqo,ame,uqo,_qo,Sa,bqo,nme,vqo,Fqo,sme,Tqo,Mqo,lme,Eqo,Cqo,wqo,O,w5,ime,Aqo,yqo,VG,Lqo,xqo,$qo,A5,dme,kqo,Sqo,XG,Rqo,Bqo,Pqo,y5,cme,Iqo,qqo,zG,Nqo,jqo,Dqo,L5,fme,Gqo,Oqo,QG,Vqo,Xqo,zqo,x5,mme,Qqo,Wqo,WG,Hqo,Uqo,Jqo,$5,gme,Yqo,Kqo,HG,Zqo,eNo,oNo,k5,hme,rNo,tNo,UG,aNo,nNo,sNo,S5,pme,lNo,iNo,JG,dNo,cNo,fNo,R5,ume,mNo,gNo,YG,hNo,pNo,uNo,B5,_me,_No,bNo,KG,vNo,FNo,TNo,P5,bme,MNo,ENo,ZG,CNo,wNo,ANo,I5,vme,yNo,LNo,eO,xNo,$No,kNo,q5,Fme,SNo,RNo,oO,BNo,PNo,INo,N5,Tme,qNo,NNo,rO,jNo,DNo,GNo,j5,Mme,ONo,VNo,tO,XNo,zNo,QNo,D5,Eme,WNo,HNo,aO,UNo,JNo,YNo,G5,Cme,KNo,ZNo,nO,ejo,ojo,rjo,O5,wme,tjo,ajo,sO,njo,sjo,ljo,V5,Ame,ijo,djo,lO,cjo,fjo,mjo,X5,yme,gjo,hjo,iO,pjo,ujo,_jo,z5,Lme,bjo,vjo,dO,Fjo,Tjo,Mjo,Q5,xme,Ejo,Cjo,cO,wjo,Ajo,yjo,W5,$me,Ljo,xjo,fO,$jo,kjo,Sjo,H5,kme,Rjo,Bjo,mO,Pjo,Ijo,qjo,U5,Sme,Njo,jjo,gO,Djo,Gjo,Ojo,J5,Rme,Vjo,Xjo,hO,zjo,Qjo,Wjo,Y5,Bme,Hjo,Ujo,pO,Jjo,Yjo,Kjo,K5,Pme,Zjo,eDo,uO,oDo,rDo,tDo,Z5,Ime,aDo,nDo,_O,sDo,lDo,iDo,e3,qme,dDo,cDo,bO,fDo,mDo,gDo,o3,Nme,hDo,pDo,vO,uDo,_Do,bDo,r3,jme,vDo,FDo,FO,TDo,MDo,EDo,t3,Dme,CDo,wDo,TO,ADo,yDo,LDo,a3,Gme,xDo,$Do,MO,kDo,SDo,RDo,n3,Ome,BDo,PDo,EO,IDo,qDo,NDo,s3,Vme,jDo,DDo,CO,GDo,ODo,VDo,l3,Xme,XDo,zDo,wO,QDo,WDo,HDo,i3,zme,UDo,JDo,AO,YDo,KDo,ZDo,d3,Qme,eGo,oGo,yO,rGo,tGo,aGo,c3,nGo,Wme,sGo,lGo,Hme,iGo,dGo,f3,YBe,zi,m3,Ume,W6,cGo,Jme,fGo,KBe,No,H6,mGo,Qi,gGo,LO,hGo,pGo,xO,uGo,_Go,bGo,U6,vGo,Yme,FGo,TGo,MGo,dt,J6,EGo,Kme,CGo,wGo,Wi,AGo,Zme,yGo,LGo,$O,xGo,$Go,kGo,g3,SGo,ao,Y6,RGo,ege,BGo,PGo,Ra,IGo,oge,qGo,NGo,rge,jGo,DGo,tge,GGo,OGo,VGo,age,h3,nge,XGo,zGo,kO,QGo,WGo,HGo,p3,UGo,sge,JGo,YGo,lge,KGo,ZGo,u3,ZBe,Hi,_3,ige,K6,eOo,dge,oOo,ePe,jo,Z6,rOo,Ui,tOo,SO,aOo,nOo,RO,sOo,lOo,iOo,ey,dOo,cge,cOo,fOo,mOo,ct,oy,gOo,fge,hOo,pOo,Ji,uOo,mge,_Oo,bOo,BO,vOo,FOo,TOo,b3,MOo,no,ry,EOo,gge,COo,wOo,Ba,AOo,hge,yOo,LOo,pge,xOo,$Oo,uge,kOo,SOo,ROo,ve,v3,_ge,BOo,POo,PO,IOo,qOo,NOo,F3,bge,jOo,DOo,IO,GOo,OOo,VOo,T3,vge,XOo,zOo,qO,QOo,WOo,HOo,xs,Fge,UOo,JOo,NO,YOo,KOo,jO,ZOo,eVo,oVo,M3,Tge,rVo,tVo,DO,aVo,nVo,sVo,ft,Mge,lVo,iVo,GO,dVo,cVo,OO,fVo,mVo,VO,gVo,hVo,pVo,E3,Ege,uVo,_Vo,XO,bVo,vVo,FVo,C3,Cge,TVo,MVo,zO,EVo,CVo,wVo,w3,wge,AVo,yVo,QO,LVo,xVo,$Vo,A3,Age,kVo,SVo,WO,RVo,BVo,PVo,y3,yge,IVo,qVo,HO,NVo,jVo,DVo,L3,Lge,GVo,OVo,UO,VVo,XVo,zVo,x3,xge,QVo,WVo,JO,HVo,UVo,JVo,$3,YVo,$ge,KVo,ZVo,kge,eXo,oXo,k3,oPe,Yi,S3,Sge,ty,rXo,Rge,tXo,rPe,Do,ay,aXo,Ki,nXo,YO,sXo,lXo,KO,iXo,dXo,cXo,ny,fXo,Bge,mXo,gXo,hXo,mt,sy,pXo,Pge,uXo,_Xo,Zi,bXo,Ige,vXo,FXo,ZO,TXo,MXo,EXo,R3,CXo,so,ly,wXo,qge,AXo,yXo,Pa,LXo,Nge,xXo,$Xo,jge,kXo,SXo,Dge,RXo,BXo,PXo,Gge,B3,Oge,IXo,qXo,eV,NXo,jXo,DXo,P3,GXo,Vge,OXo,VXo,Xge,XXo,zXo,I3,tPe,ed,q3,zge,iy,QXo,Qge,WXo,aPe,Go,dy,HXo,od,UXo,oV,JXo,YXo,rV,KXo,ZXo,ezo,cy,ozo,Wge,rzo,tzo,azo,gt,fy,nzo,Hge,szo,lzo,rd,izo,Uge,dzo,czo,tV,fzo,mzo,gzo,N3,hzo,lo,my,pzo,Jge,uzo,_zo,Ia,bzo,Yge,vzo,Fzo,Kge,Tzo,Mzo,Zge,Ezo,Czo,wzo,Ne,j3,ehe,Azo,yzo,aV,Lzo,xzo,$zo,D3,ohe,kzo,Szo,nV,Rzo,Bzo,Pzo,G3,rhe,Izo,qzo,sV,Nzo,jzo,Dzo,O3,the,Gzo,Ozo,lV,Vzo,Xzo,zzo,V3,ahe,Qzo,Wzo,iV,Hzo,Uzo,Jzo,X3,nhe,Yzo,Kzo,dV,Zzo,eQo,oQo,z3,she,rQo,tQo,cV,aQo,nQo,sQo,Q3,lhe,lQo,iQo,fV,dQo,cQo,fQo,W3,mQo,ihe,gQo,hQo,dhe,pQo,uQo,H3,nPe,td,U3,che,gy,_Qo,fhe,bQo,sPe,Oo,hy,vQo,ad,FQo,mV,TQo,MQo,gV,EQo,CQo,wQo,py,AQo,mhe,yQo,LQo,xQo,ht,uy,$Qo,ghe,kQo,SQo,nd,RQo,hhe,BQo,PQo,hV,IQo,qQo,NQo,J3,jQo,io,_y,DQo,phe,GQo,OQo,qa,VQo,uhe,XQo,zQo,_he,QQo,WQo,bhe,HQo,UQo,JQo,Na,Y3,vhe,YQo,KQo,pV,ZQo,eWo,oWo,K3,Fhe,rWo,tWo,uV,aWo,nWo,sWo,Z3,The,lWo,iWo,_V,dWo,cWo,fWo,ev,Mhe,mWo,gWo,bV,hWo,pWo,uWo,ov,_Wo,Ehe,bWo,vWo,Che,FWo,TWo,rv,lPe,sd,tv,whe,by,MWo,Ahe,EWo,iPe,Vo,vy,CWo,ld,wWo,vV,AWo,yWo,FV,LWo,xWo,$Wo,Fy,kWo,yhe,SWo,RWo,BWo,pt,Ty,PWo,Lhe,IWo,qWo,id,NWo,xhe,jWo,DWo,TV,GWo,OWo,VWo,av,XWo,co,My,zWo,$he,QWo,WWo,ja,HWo,khe,UWo,JWo,She,YWo,KWo,Rhe,ZWo,eHo,oHo,je,nv,Bhe,rHo,tHo,MV,aHo,nHo,sHo,sv,Phe,lHo,iHo,EV,dHo,cHo,fHo,lv,Ihe,mHo,gHo,CV,hHo,pHo,uHo,iv,qhe,_Ho,bHo,wV,vHo,FHo,THo,dv,Nhe,MHo,EHo,AV,CHo,wHo,AHo,cv,jhe,yHo,LHo,yV,xHo,$Ho,kHo,fv,Dhe,SHo,RHo,LV,BHo,PHo,IHo,mv,Ghe,qHo,NHo,xV,jHo,DHo,GHo,gv,OHo,Ohe,VHo,XHo,Vhe,zHo,QHo,hv,dPe,dd,pv,Xhe,Ey,WHo,zhe,HHo,cPe,Xo,Cy,UHo,cd,JHo,$V,YHo,KHo,kV,ZHo,eUo,oUo,wy,rUo,Qhe,tUo,aUo,nUo,ut,Ay,sUo,Whe,lUo,iUo,fd,dUo,Hhe,cUo,fUo,SV,mUo,gUo,hUo,uv,pUo,fo,yy,uUo,Uhe,_Uo,bUo,Da,vUo,Jhe,FUo,TUo,Yhe,MUo,EUo,Khe,CUo,wUo,AUo,Ly,_v,Zhe,yUo,LUo,RV,xUo,$Uo,kUo,bv,epe,SUo,RUo,BV,BUo,PUo,IUo,vv,qUo,ope,NUo,jUo,rpe,DUo,GUo,Fv,fPe,md,Tv,tpe,xy,OUo,ape,VUo,mPe,zo,$y,XUo,gd,zUo,PV,QUo,WUo,IV,HUo,UUo,JUo,ky,YUo,npe,KUo,ZUo,eJo,_t,Sy,oJo,spe,rJo,tJo,hd,aJo,lpe,nJo,sJo,qV,lJo,iJo,dJo,Mv,cJo,mo,Ry,fJo,ipe,mJo,gJo,Ga,hJo,dpe,pJo,uJo,cpe,_Jo,bJo,fpe,vJo,FJo,TJo,Oa,Ev,mpe,MJo,EJo,NV,CJo,wJo,AJo,Cv,gpe,yJo,LJo,jV,xJo,$Jo,kJo,wv,hpe,SJo,RJo,DV,BJo,PJo,IJo,Av,ppe,qJo,NJo,GV,jJo,DJo,GJo,yv,OJo,upe,VJo,XJo,_pe,zJo,QJo,Lv,gPe,pd,xv,bpe,By,WJo,vpe,HJo,hPe,Qo,Py,UJo,ud,JJo,OV,YJo,KJo,VV,ZJo,eYo,oYo,Iy,rYo,Fpe,tYo,aYo,nYo,bt,qy,sYo,Tpe,lYo,iYo,_d,dYo,Mpe,cYo,fYo,XV,mYo,gYo,hYo,$v,pYo,go,Ny,uYo,Epe,_Yo,bYo,Va,vYo,Cpe,FYo,TYo,wpe,MYo,EYo,Ape,CYo,wYo,AYo,bd,kv,ype,yYo,LYo,zV,xYo,$Yo,kYo,Sv,Lpe,SYo,RYo,QV,BYo,PYo,IYo,Rv,xpe,qYo,NYo,WV,jYo,DYo,GYo,Bv,OYo,$pe,VYo,XYo,kpe,zYo,QYo,Pv,pPe,vd,Iv,Spe,jy,WYo,Rpe,HYo,uPe,Wo,Dy,UYo,Fd,JYo,HV,YYo,KYo,UV,ZYo,eKo,oKo,Gy,rKo,Bpe,tKo,aKo,nKo,vt,Oy,sKo,Ppe,lKo,iKo,Td,dKo,Ipe,cKo,fKo,JV,mKo,gKo,hKo,qv,pKo,ho,Vy,uKo,qpe,_Ko,bKo,Xa,vKo,Npe,FKo,TKo,jpe,MKo,EKo,Dpe,CKo,wKo,AKo,Xy,Nv,Gpe,yKo,LKo,YV,xKo,$Ko,kKo,jv,Ope,SKo,RKo,KV,BKo,PKo,IKo,Dv,qKo,Vpe,NKo,jKo,Xpe,DKo,GKo,Gv,_Pe,Md,Ov,zpe,zy,OKo,Qpe,VKo,bPe,Ho,Qy,XKo,Ed,zKo,ZV,QKo,WKo,eX,HKo,UKo,JKo,Wy,YKo,Wpe,KKo,ZKo,eZo,Ft,Hy,oZo,Hpe,rZo,tZo,Cd,aZo,Upe,nZo,sZo,oX,lZo,iZo,dZo,Vv,cZo,po,Uy,fZo,Jpe,mZo,gZo,za,hZo,Ype,pZo,uZo,Kpe,_Zo,bZo,Zpe,vZo,FZo,TZo,eue,Xv,oue,MZo,EZo,rX,CZo,wZo,AZo,zv,yZo,rue,LZo,xZo,tue,$Zo,kZo,Qv,vPe,wd,Wv,aue,Jy,SZo,nue,RZo,FPe,Uo,Yy,BZo,Ad,PZo,tX,IZo,qZo,aX,NZo,jZo,DZo,Ky,GZo,sue,OZo,VZo,XZo,Tt,Zy,zZo,lue,QZo,WZo,yd,HZo,iue,UZo,JZo,nX,YZo,KZo,ZZo,Hv,eer,uo,eL,oer,due,rer,ter,Qa,aer,cue,ner,ser,fue,ler,ier,mue,der,cer,fer,Wa,Uv,gue,mer,ger,sX,her,per,uer,Jv,hue,_er,ber,lX,ver,Fer,Ter,Yv,pue,Mer,Eer,iX,Cer,wer,Aer,Kv,uue,yer,Ler,dX,xer,$er,ker,Zv,Ser,_ue,Rer,Ber,bue,Per,Ier,eF,TPe,Ld,oF,vue,oL,qer,Fue,Ner,MPe,Jo,rL,jer,xd,Der,cX,Ger,Oer,fX,Ver,Xer,zer,tL,Qer,Tue,Wer,Her,Uer,Mt,aL,Jer,Mue,Yer,Ker,$d,Zer,Eue,eor,oor,mX,ror,tor,aor,rF,nor,_o,nL,sor,Cue,lor,ior,Ha,dor,wue,cor,mor,Aue,gor,hor,yue,por,uor,_or,Lue,tF,xue,bor,vor,gX,For,Tor,Mor,aF,Eor,$ue,Cor,wor,kue,Aor,yor,nF,EPe,kd,sF,Sue,sL,Lor,Rue,xor,CPe,Yo,lL,$or,Sd,kor,hX,Sor,Ror,pX,Bor,Por,Ior,iL,qor,Bue,Nor,jor,Dor,Et,dL,Gor,Pue,Oor,Vor,Rd,Xor,Iue,zor,Qor,uX,Wor,Hor,Uor,lF,Jor,Cr,cL,Yor,que,Kor,Zor,Ua,err,Nue,orr,rrr,jue,trr,arr,Due,nrr,srr,lrr,j,iF,Gue,irr,drr,_X,crr,frr,mrr,dF,Oue,grr,hrr,bX,prr,urr,_rr,cF,Vue,brr,vrr,vX,Frr,Trr,Mrr,fF,Xue,Err,Crr,FX,wrr,Arr,yrr,mF,zue,Lrr,xrr,TX,$rr,krr,Srr,gF,Que,Rrr,Brr,MX,Prr,Irr,qrr,hF,Wue,Nrr,jrr,EX,Drr,Grr,Orr,pF,Hue,Vrr,Xrr,CX,zrr,Qrr,Wrr,uF,Uue,Hrr,Urr,wX,Jrr,Yrr,Krr,_F,Jue,Zrr,etr,AX,otr,rtr,ttr,bF,Yue,atr,ntr,yX,str,ltr,itr,vF,Kue,dtr,ctr,LX,ftr,mtr,gtr,FF,Zue,htr,ptr,xX,utr,_tr,btr,TF,e_e,vtr,Ftr,$X,Ttr,Mtr,Etr,MF,o_e,Ctr,wtr,kX,Atr,ytr,Ltr,EF,r_e,xtr,$tr,SX,ktr,Str,Rtr,CF,t_e,Btr,Ptr,RX,Itr,qtr,Ntr,$s,a_e,jtr,Dtr,BX,Gtr,Otr,PX,Vtr,Xtr,ztr,wF,n_e,Qtr,Wtr,IX,Htr,Utr,Jtr,AF,s_e,Ytr,Ktr,qX,Ztr,ear,oar,yF,l_e,rar,tar,NX,aar,nar,sar,LF,i_e,lar,iar,jX,dar,car,far,xF,d_e,mar,gar,DX,har,par,uar,$F,c_e,_ar,bar,GX,Far,Tar,Mar,kF,f_e,Ear,Car,OX,war,Aar,yar,SF,m_e,Lar,xar,VX,$ar,kar,Sar,RF,g_e,Rar,Bar,XX,Par,Iar,qar,BF,h_e,Nar,jar,zX,Dar,Gar,Oar,PF,p_e,Var,Xar,QX,zar,Qar,War,IF,u_e,Har,Uar,WX,Jar,Yar,Kar,qF,__e,Zar,enr,HX,onr,rnr,tnr,NF,b_e,anr,nnr,UX,snr,lnr,inr,jF,v_e,dnr,cnr,JX,fnr,mnr,gnr,DF,F_e,hnr,pnr,YX,unr,_nr,bnr,GF,T_e,vnr,Fnr,KX,Tnr,Mnr,Enr,OF,M_e,Cnr,wnr,ZX,Anr,ynr,Lnr,VF,E_e,xnr,$nr,ez,knr,Snr,Rnr,XF,C_e,Bnr,Pnr,oz,Inr,qnr,Nnr,zF,w_e,jnr,Dnr,rz,Gnr,Onr,Vnr,QF,A_e,Xnr,znr,tz,Qnr,Wnr,Hnr,WF,y_e,Unr,Jnr,az,Ynr,Knr,Znr,HF,L_e,esr,osr,nz,rsr,tsr,asr,UF,x_e,nsr,ssr,sz,lsr,isr,dsr,JF,$_e,csr,fsr,lz,msr,gsr,hsr,YF,k_e,psr,usr,iz,_sr,bsr,vsr,KF,wPe,Bd,ZF,S_e,fL,Fsr,R_e,Tsr,APe,Ko,mL,Msr,Pd,Esr,dz,Csr,wsr,cz,Asr,ysr,Lsr,gL,xsr,B_e,$sr,ksr,Ssr,Ct,hL,Rsr,P_e,Bsr,Psr,Id,Isr,I_e,qsr,Nsr,fz,jsr,Dsr,Gsr,eT,Osr,wr,pL,Vsr,q_e,Xsr,zsr,Ja,Qsr,N_e,Wsr,Hsr,j_e,Usr,Jsr,D_e,Ysr,Ksr,Zsr,ne,oT,G_e,elr,olr,mz,rlr,tlr,alr,rT,O_e,nlr,slr,gz,llr,ilr,dlr,tT,V_e,clr,flr,hz,mlr,glr,hlr,aT,X_e,plr,ulr,pz,_lr,blr,vlr,nT,z_e,Flr,Tlr,uz,Mlr,Elr,Clr,sT,Q_e,wlr,Alr,_z,ylr,Llr,xlr,lT,W_e,$lr,klr,bz,Slr,Rlr,Blr,iT,H_e,Plr,Ilr,vz,qlr,Nlr,jlr,dT,U_e,Dlr,Glr,Fz,Olr,Vlr,Xlr,cT,J_e,zlr,Qlr,Tz,Wlr,Hlr,Ulr,fT,Y_e,Jlr,Ylr,Mz,Klr,Zlr,eir,mT,K_e,oir,rir,Ez,tir,air,nir,gT,Z_e,sir,lir,Cz,iir,dir,cir,hT,e1e,fir,mir,wz,gir,hir,pir,pT,o1e,uir,_ir,Az,bir,vir,Fir,uT,r1e,Tir,Mir,yz,Eir,Cir,wir,_T,t1e,Air,yir,Lz,Lir,xir,$ir,bT,a1e,kir,Sir,xz,Rir,Bir,Pir,vT,n1e,Iir,qir,$z,Nir,jir,Dir,FT,s1e,Gir,Oir,kz,Vir,Xir,zir,TT,l1e,Qir,Wir,Sz,Hir,Uir,Jir,MT,i1e,Yir,Kir,Rz,Zir,edr,odr,ET,d1e,rdr,tdr,Bz,adr,ndr,sdr,CT,yPe,qd,wT,c1e,uL,ldr,f1e,idr,LPe,Zo,_L,ddr,Nd,cdr,Pz,fdr,mdr,Iz,gdr,hdr,pdr,bL,udr,m1e,_dr,bdr,vdr,wt,vL,Fdr,g1e,Tdr,Mdr,jd,Edr,h1e,Cdr,wdr,qz,Adr,ydr,Ldr,AT,xdr,Ar,FL,$dr,p1e,kdr,Sdr,Ya,Rdr,u1e,Bdr,Pdr,_1e,Idr,qdr,b1e,Ndr,jdr,Ddr,Te,yT,v1e,Gdr,Odr,Nz,Vdr,Xdr,zdr,LT,F1e,Qdr,Wdr,jz,Hdr,Udr,Jdr,xT,T1e,Ydr,Kdr,Dz,Zdr,ecr,ocr,$T,M1e,rcr,tcr,Gz,acr,ncr,scr,kT,E1e,lcr,icr,Oz,dcr,ccr,fcr,ST,C1e,mcr,gcr,Vz,hcr,pcr,ucr,RT,w1e,_cr,bcr,Xz,vcr,Fcr,Tcr,BT,A1e,Mcr,Ecr,zz,Ccr,wcr,Acr,PT,y1e,ycr,Lcr,Qz,xcr,$cr,kcr,IT,L1e,Scr,Rcr,Wz,Bcr,Pcr,Icr,qT,x1e,qcr,Ncr,Hz,jcr,Dcr,Gcr,NT,$1e,Ocr,Vcr,Uz,Xcr,zcr,Qcr,jT,xPe,Dd,DT,k1e,TL,Wcr,S1e,Hcr,$Pe,er,ML,Ucr,Gd,Jcr,Jz,Ycr,Kcr,Yz,Zcr,efr,ofr,EL,rfr,R1e,tfr,afr,nfr,At,CL,sfr,B1e,lfr,ifr,Od,dfr,P1e,cfr,ffr,Kz,mfr,gfr,hfr,GT,pfr,yr,wL,ufr,I1e,_fr,bfr,Ka,vfr,q1e,Ffr,Tfr,N1e,Mfr,Efr,j1e,Cfr,wfr,Afr,Vd,OT,D1e,yfr,Lfr,Zz,xfr,$fr,kfr,VT,G1e,Sfr,Rfr,eQ,Bfr,Pfr,Ifr,XT,O1e,qfr,Nfr,oQ,jfr,Dfr,Gfr,zT,kPe,Xd,QT,V1e,AL,Ofr,X1e,Vfr,SPe,or,yL,Xfr,zd,zfr,rQ,Qfr,Wfr,tQ,Hfr,Ufr,Jfr,LL,Yfr,z1e,Kfr,Zfr,emr,yt,xL,omr,Q1e,rmr,tmr,Qd,amr,W1e,nmr,smr,aQ,lmr,imr,dmr,WT,cmr,Lr,$L,fmr,H1e,mmr,gmr,Za,hmr,U1e,pmr,umr,J1e,_mr,bmr,Y1e,vmr,Fmr,Tmr,ie,HT,K1e,Mmr,Emr,nQ,Cmr,wmr,Amr,UT,Z1e,ymr,Lmr,sQ,xmr,$mr,kmr,JT,ebe,Smr,Rmr,lQ,Bmr,Pmr,Imr,YT,obe,qmr,Nmr,iQ,jmr,Dmr,Gmr,KT,rbe,Omr,Vmr,dQ,Xmr,zmr,Qmr,ZT,tbe,Wmr,Hmr,cQ,Umr,Jmr,Ymr,e7,abe,Kmr,Zmr,fQ,egr,ogr,rgr,o7,nbe,tgr,agr,mQ,ngr,sgr,lgr,r7,sbe,igr,dgr,gQ,cgr,fgr,mgr,t7,lbe,ggr,hgr,hQ,pgr,ugr,_gr,a7,ibe,bgr,vgr,pQ,Fgr,Tgr,Mgr,n7,dbe,Egr,Cgr,uQ,wgr,Agr,ygr,s7,cbe,Lgr,xgr,_Q,$gr,kgr,Sgr,l7,fbe,Rgr,Bgr,bQ,Pgr,Igr,qgr,i7,mbe,Ngr,jgr,vQ,Dgr,Ggr,Ogr,d7,gbe,Vgr,Xgr,FQ,zgr,Qgr,Wgr,c7,hbe,Hgr,Ugr,TQ,Jgr,Ygr,Kgr,f7,pbe,Zgr,ehr,MQ,ohr,rhr,thr,m7,ube,ahr,nhr,EQ,shr,lhr,ihr,g7,_be,dhr,chr,CQ,fhr,mhr,ghr,h7,RPe,Wd,p7,bbe,kL,hhr,vbe,phr,BPe,rr,SL,uhr,Hd,_hr,wQ,bhr,vhr,AQ,Fhr,Thr,Mhr,RL,Ehr,Fbe,Chr,whr,Ahr,Lt,BL,yhr,Tbe,Lhr,xhr,Ud,$hr,Mbe,khr,Shr,yQ,Rhr,Bhr,Phr,u7,Ihr,xr,PL,qhr,Ebe,Nhr,jhr,en,Dhr,Cbe,Ghr,Ohr,wbe,Vhr,Xhr,Abe,zhr,Qhr,Whr,ye,_7,ybe,Hhr,Uhr,LQ,Jhr,Yhr,Khr,b7,Lbe,Zhr,epr,xQ,opr,rpr,tpr,v7,xbe,apr,npr,$Q,spr,lpr,ipr,F7,$be,dpr,cpr,kQ,fpr,mpr,gpr,T7,kbe,hpr,ppr,SQ,upr,_pr,bpr,M7,Sbe,vpr,Fpr,RQ,Tpr,Mpr,Epr,E7,Rbe,Cpr,wpr,BQ,Apr,ypr,Lpr,C7,Bbe,xpr,$pr,PQ,kpr,Spr,Rpr,w7,Pbe,Bpr,Ppr,IQ,Ipr,qpr,Npr,A7,Ibe,jpr,Dpr,qQ,Gpr,Opr,Vpr,y7,PPe,Jd,L7,qbe,IL,Xpr,Nbe,zpr,IPe,tr,qL,Qpr,Yd,Wpr,NQ,Hpr,Upr,jQ,Jpr,Ypr,Kpr,NL,Zpr,jbe,eur,our,rur,xt,jL,tur,Dbe,aur,nur,Kd,sur,Gbe,lur,iur,DQ,dur,cur,fur,x7,mur,$r,DL,gur,Obe,hur,pur,on,uur,Vbe,_ur,bur,Xbe,vur,Fur,zbe,Tur,Mur,Eur,Z,$7,Qbe,Cur,wur,GQ,Aur,yur,Lur,k7,Wbe,xur,$ur,OQ,kur,Sur,Rur,S7,Hbe,Bur,Pur,VQ,Iur,qur,Nur,R7,Ube,jur,Dur,XQ,Gur,Our,Vur,B7,Jbe,Xur,zur,zQ,Qur,Wur,Hur,P7,Ybe,Uur,Jur,QQ,Yur,Kur,Zur,I7,Kbe,e_r,o_r,WQ,r_r,t_r,a_r,q7,Zbe,n_r,s_r,HQ,l_r,i_r,d_r,N7,e2e,c_r,f_r,UQ,m_r,g_r,h_r,j7,o2e,p_r,u_r,JQ,__r,b_r,v_r,D7,r2e,F_r,T_r,YQ,M_r,E_r,C_r,G7,t2e,w_r,A_r,KQ,y_r,L_r,x_r,O7,a2e,$_r,k_r,ZQ,S_r,R_r,B_r,V7,n2e,P_r,I_r,eW,q_r,N_r,j_r,X7,s2e,D_r,G_r,oW,O_r,V_r,X_r,z7,l2e,z_r,Q_r,rW,W_r,H_r,U_r,Q7,i2e,J_r,Y_r,tW,K_r,Z_r,e1r,W7,d2e,o1r,r1r,aW,t1r,a1r,n1r,H7,c2e,s1r,l1r,nW,i1r,d1r,c1r,U7,f2e,f1r,m1r,sW,g1r,h1r,p1r,J7,m2e,u1r,_1r,lW,b1r,v1r,F1r,Y7,g2e,T1r,M1r,iW,E1r,C1r,w1r,K7,h2e,A1r,y1r,dW,L1r,x1r,$1r,Z7,p2e,k1r,S1r,cW,R1r,B1r,P1r,eM,u2e,I1r,q1r,fW,N1r,j1r,D1r,oM,_2e,G1r,O1r,mW,V1r,X1r,z1r,rM,qPe,Zd,tM,b2e,GL,Q1r,v2e,W1r,NPe,ar,OL,H1r,ec,U1r,gW,J1r,Y1r,hW,K1r,Z1r,ebr,VL,obr,F2e,rbr,tbr,abr,$t,XL,nbr,T2e,sbr,lbr,oc,ibr,M2e,dbr,cbr,pW,fbr,mbr,gbr,aM,hbr,kr,zL,pbr,E2e,ubr,_br,rn,bbr,C2e,vbr,Fbr,w2e,Tbr,Mbr,A2e,Ebr,Cbr,wbr,pe,nM,y2e,Abr,ybr,uW,Lbr,xbr,$br,sM,L2e,kbr,Sbr,_W,Rbr,Bbr,Pbr,lM,x2e,Ibr,qbr,bW,Nbr,jbr,Dbr,iM,$2e,Gbr,Obr,vW,Vbr,Xbr,zbr,dM,k2e,Qbr,Wbr,FW,Hbr,Ubr,Jbr,cM,S2e,Ybr,Kbr,TW,Zbr,e2r,o2r,fM,R2e,r2r,t2r,MW,a2r,n2r,s2r,mM,B2e,l2r,i2r,EW,d2r,c2r,f2r,gM,P2e,m2r,g2r,CW,h2r,p2r,u2r,hM,I2e,_2r,b2r,wW,v2r,F2r,T2r,pM,q2e,M2r,E2r,AW,C2r,w2r,A2r,uM,N2e,y2r,L2r,yW,x2r,$2r,k2r,_M,j2e,S2r,R2r,LW,B2r,P2r,I2r,bM,D2e,q2r,N2r,xW,j2r,D2r,G2r,vM,G2e,O2r,V2r,$W,X2r,z2r,Q2r,FM,O2e,W2r,H2r,kW,U2r,J2r,Y2r,TM,V2e,K2r,Z2r,SW,e5r,o5r,r5r,MM,jPe,rc,EM,X2e,QL,t5r,z2e,a5r,DPe,nr,WL,n5r,tc,s5r,RW,l5r,i5r,BW,d5r,c5r,f5r,HL,m5r,Q2e,g5r,h5r,p5r,kt,UL,u5r,W2e,_5r,b5r,ac,v5r,H2e,F5r,T5r,PW,M5r,E5r,C5r,CM,w5r,Sr,JL,A5r,U2e,y5r,L5r,tn,x5r,J2e,$5r,k5r,Y2e,S5r,R5r,K2e,B5r,P5r,I5r,Z2e,wM,e5e,q5r,N5r,IW,j5r,D5r,G5r,AM,GPe,nc,yM,o5e,YL,O5r,r5e,V5r,OPe,sr,KL,X5r,sc,z5r,qW,Q5r,W5r,NW,H5r,U5r,J5r,ZL,Y5r,t5e,K5r,Z5r,e3r,St,e8,o3r,a5e,r3r,t3r,lc,a3r,n5e,n3r,s3r,jW,l3r,i3r,d3r,LM,c3r,Rr,o8,f3r,s5e,m3r,g3r,an,h3r,l5e,p3r,u3r,i5e,_3r,b3r,d5e,v3r,F3r,T3r,de,xM,c5e,M3r,E3r,DW,C3r,w3r,A3r,$M,f5e,y3r,L3r,GW,x3r,$3r,k3r,kM,m5e,S3r,R3r,OW,B3r,P3r,I3r,SM,g5e,q3r,N3r,VW,j3r,D3r,G3r,RM,h5e,O3r,V3r,XW,X3r,z3r,Q3r,BM,p5e,W3r,H3r,zW,U3r,J3r,Y3r,PM,u5e,K3r,Z3r,QW,evr,ovr,rvr,IM,_5e,tvr,avr,WW,nvr,svr,lvr,qM,b5e,ivr,dvr,HW,cvr,fvr,mvr,NM,v5e,gvr,hvr,UW,pvr,uvr,_vr,jM,F5e,bvr,vvr,JW,Fvr,Tvr,Mvr,DM,T5e,Evr,Cvr,YW,wvr,Avr,yvr,GM,M5e,Lvr,xvr,KW,$vr,kvr,Svr,OM,E5e,Rvr,Bvr,ZW,Pvr,Ivr,qvr,VM,C5e,Nvr,jvr,eH,Dvr,Gvr,Ovr,XM,w5e,Vvr,Xvr,oH,zvr,Qvr,Wvr,zM,A5e,Hvr,Uvr,rH,Jvr,Yvr,Kvr,QM,y5e,Zvr,eFr,tH,oFr,rFr,tFr,WM,L5e,aFr,nFr,aH,sFr,lFr,iFr,HM,x5e,dFr,cFr,nH,fFr,mFr,gFr,UM,VPe,ic,JM,$5e,r8,hFr,k5e,pFr,XPe,lr,t8,uFr,dc,_Fr,sH,bFr,vFr,lH,FFr,TFr,MFr,a8,EFr,S5e,CFr,wFr,AFr,Rt,n8,yFr,R5e,LFr,xFr,cc,$Fr,B5e,kFr,SFr,iH,RFr,BFr,PFr,YM,IFr,Br,s8,qFr,P5e,NFr,jFr,nn,DFr,I5e,GFr,OFr,q5e,VFr,XFr,N5e,zFr,QFr,WFr,ce,KM,j5e,HFr,UFr,dH,JFr,YFr,KFr,ZM,D5e,ZFr,eTr,cH,oTr,rTr,tTr,e4,G5e,aTr,nTr,fH,sTr,lTr,iTr,o4,O5e,dTr,cTr,mH,fTr,mTr,gTr,r4,V5e,hTr,pTr,gH,uTr,_Tr,bTr,t4,X5e,vTr,FTr,hH,TTr,MTr,ETr,a4,z5e,CTr,wTr,pH,ATr,yTr,LTr,n4,Q5e,xTr,$Tr,uH,kTr,STr,RTr,s4,W5e,BTr,PTr,_H,ITr,qTr,NTr,l4,H5e,jTr,DTr,bH,GTr,OTr,VTr,i4,U5e,XTr,zTr,vH,QTr,WTr,HTr,d4,J5e,UTr,JTr,FH,YTr,KTr,ZTr,c4,Y5e,e7r,o7r,TH,r7r,t7r,a7r,f4,K5e,n7r,s7r,MH,l7r,i7r,d7r,m4,Z5e,c7r,f7r,EH,m7r,g7r,h7r,g4,e3e,p7r,u7r,CH,_7r,b7r,v7r,h4,o3e,F7r,T7r,wH,M7r,E7r,C7r,p4,r3e,w7r,A7r,AH,y7r,L7r,x7r,u4,t3e,$7r,k7r,yH,S7r,R7r,B7r,_4,a3e,P7r,I7r,LH,q7r,N7r,j7r,b4,zPe,fc,v4,n3e,l8,D7r,s3e,G7r,QPe,ir,i8,O7r,mc,V7r,xH,X7r,z7r,$H,Q7r,W7r,H7r,d8,U7r,l3e,J7r,Y7r,K7r,Bt,c8,Z7r,i3e,eMr,oMr,gc,rMr,d3e,tMr,aMr,kH,nMr,sMr,lMr,F4,iMr,Pr,f8,dMr,c3e,cMr,fMr,sn,mMr,f3e,gMr,hMr,m3e,pMr,uMr,g3e,_Mr,bMr,vMr,h3e,T4,p3e,FMr,TMr,SH,MMr,EMr,CMr,M4,WPe,hc,E4,u3e,m8,wMr,_3e,AMr,HPe,dr,g8,yMr,pc,LMr,RH,xMr,$Mr,BH,kMr,SMr,RMr,h8,BMr,b3e,PMr,IMr,qMr,Pt,p8,NMr,v3e,jMr,DMr,uc,GMr,F3e,OMr,VMr,PH,XMr,zMr,QMr,C4,WMr,Ir,u8,HMr,T3e,UMr,JMr,ln,YMr,M3e,KMr,ZMr,E3e,e4r,o4r,C3e,r4r,t4r,a4r,w3e,w4,A3e,n4r,s4r,IH,l4r,i4r,d4r,A4,UPe,_c,y4,y3e,_8,c4r,L3e,f4r,JPe,cr,b8,m4r,bc,g4r,qH,h4r,p4r,NH,u4r,_4r,b4r,v8,v4r,x3e,F4r,T4r,M4r,It,F8,E4r,$3e,C4r,w4r,vc,A4r,k3e,y4r,L4r,jH,x4r,$4r,k4r,L4,S4r,qr,T8,R4r,S3e,B4r,P4r,dn,I4r,R3e,q4r,N4r,B3e,j4r,D4r,P3e,G4r,O4r,V4r,oe,x4,I3e,X4r,z4r,DH,Q4r,W4r,H4r,$4,q3e,U4r,J4r,GH,Y4r,K4r,Z4r,k4,N3e,eEr,oEr,OH,rEr,tEr,aEr,S4,j3e,nEr,sEr,VH,lEr,iEr,dEr,R4,D3e,cEr,fEr,XH,mEr,gEr,hEr,B4,G3e,pEr,uEr,zH,_Er,bEr,vEr,P4,O3e,FEr,TEr,QH,MEr,EEr,CEr,I4,V3e,wEr,AEr,WH,yEr,LEr,xEr,q4,X3e,$Er,kEr,HH,SEr,REr,BEr,N4,z3e,PEr,IEr,UH,qEr,NEr,jEr,j4,Q3e,DEr,GEr,JH,OEr,VEr,XEr,D4,W3e,zEr,QEr,YH,WEr,HEr,UEr,G4,H3e,JEr,YEr,KH,KEr,ZEr,eCr,O4,U3e,oCr,rCr,ZH,tCr,aCr,nCr,V4,J3e,sCr,lCr,eU,iCr,dCr,cCr,X4,Y3e,fCr,mCr,oU,gCr,hCr,pCr,z4,K3e,uCr,_Cr,rU,bCr,vCr,FCr,Q4,Z3e,TCr,MCr,tU,ECr,CCr,wCr,W4,eve,ACr,yCr,aU,LCr,xCr,$Cr,H4,ove,kCr,SCr,nU,RCr,BCr,PCr,U4,rve,ICr,qCr,sU,NCr,jCr,DCr,J4,tve,GCr,OCr,lU,VCr,XCr,zCr,Y4,ave,QCr,WCr,iU,HCr,UCr,JCr,K4,nve,YCr,KCr,dU,ZCr,ewr,owr,Z4,sve,rwr,twr,cU,awr,nwr,swr,eE,YPe,Fc,oE,lve,M8,lwr,ive,iwr,KPe,fr,E8,dwr,Tc,cwr,fU,fwr,mwr,mU,gwr,hwr,pwr,C8,uwr,dve,_wr,bwr,vwr,qt,w8,Fwr,cve,Twr,Mwr,Mc,Ewr,fve,Cwr,wwr,gU,Awr,ywr,Lwr,rE,xwr,Nr,A8,$wr,mve,kwr,Swr,cn,Rwr,gve,Bwr,Pwr,hve,Iwr,qwr,pve,Nwr,jwr,Dwr,ke,tE,uve,Gwr,Owr,hU,Vwr,Xwr,zwr,aE,_ve,Qwr,Wwr,pU,Hwr,Uwr,Jwr,nE,bve,Ywr,Kwr,uU,Zwr,eAr,oAr,sE,vve,rAr,tAr,_U,aAr,nAr,sAr,lE,Fve,lAr,iAr,bU,dAr,cAr,fAr,iE,Tve,mAr,gAr,vU,hAr,pAr,uAr,dE,Mve,_Ar,bAr,FU,vAr,FAr,TAr,cE,Eve,MAr,EAr,TU,CAr,wAr,AAr,fE,Cve,yAr,LAr,MU,xAr,$Ar,kAr,mE,ZPe,Ec,gE,wve,y8,SAr,Ave,RAr,eIe,mr,L8,BAr,Cc,PAr,EU,IAr,qAr,CU,NAr,jAr,DAr,x8,GAr,yve,OAr,VAr,XAr,Nt,$8,zAr,Lve,QAr,WAr,wc,HAr,xve,UAr,JAr,wU,YAr,KAr,ZAr,hE,e0r,jr,k8,o0r,$ve,r0r,t0r,fn,a0r,kve,n0r,s0r,Sve,l0r,i0r,Rve,d0r,c0r,f0r,Me,pE,Bve,m0r,g0r,AU,h0r,p0r,u0r,uE,Pve,_0r,b0r,yU,v0r,F0r,T0r,_E,Ive,M0r,E0r,LU,C0r,w0r,A0r,bE,qve,y0r,L0r,xU,x0r,$0r,k0r,vE,Nve,S0r,R0r,$U,B0r,P0r,I0r,FE,jve,q0r,N0r,kU,j0r,D0r,G0r,TE,Dve,O0r,V0r,SU,X0r,z0r,Q0r,ME,Gve,W0r,H0r,RU,U0r,J0r,Y0r,EE,Ove,K0r,Z0r,BU,e6r,o6r,r6r,CE,Vve,t6r,a6r,PU,n6r,s6r,l6r,wE,Xve,i6r,d6r,IU,c6r,f6r,m6r,AE,zve,g6r,h6r,qU,p6r,u6r,_6r,yE,oIe,Ac,LE,Qve,S8,b6r,Wve,v6r,rIe,gr,R8,F6r,yc,T6r,NU,M6r,E6r,jU,C6r,w6r,A6r,B8,y6r,Hve,L6r,x6r,$6r,jt,P8,k6r,Uve,S6r,R6r,Lc,B6r,Jve,P6r,I6r,DU,q6r,N6r,j6r,xE,D6r,Dr,I8,G6r,Yve,O6r,V6r,mn,X6r,Kve,z6r,Q6r,Zve,W6r,H6r,eFe,U6r,J6r,Y6r,Le,$E,oFe,K6r,Z6r,GU,eyr,oyr,ryr,kE,rFe,tyr,ayr,OU,nyr,syr,lyr,SE,tFe,iyr,dyr,VU,cyr,fyr,myr,RE,aFe,gyr,hyr,XU,pyr,uyr,_yr,BE,nFe,byr,vyr,zU,Fyr,Tyr,Myr,PE,sFe,Eyr,Cyr,QU,wyr,Ayr,yyr,IE,lFe,Lyr,xyr,WU,$yr,kyr,Syr,qE,iFe,Ryr,Byr,HU,Pyr,Iyr,qyr,NE,dFe,Nyr,jyr,UU,Dyr,Gyr,Oyr,jE,cFe,Vyr,Xyr,JU,zyr,Qyr,Wyr,DE,tIe,xc,GE,fFe,q8,Hyr,mFe,Uyr,aIe,hr,N8,Jyr,$c,Yyr,YU,Kyr,Zyr,KU,eLr,oLr,rLr,j8,tLr,gFe,aLr,nLr,sLr,Dt,D8,lLr,hFe,iLr,dLr,kc,cLr,pFe,fLr,mLr,ZU,gLr,hLr,pLr,OE,uLr,Gr,G8,_Lr,uFe,bLr,vLr,gn,FLr,_Fe,TLr,MLr,bFe,ELr,CLr,vFe,wLr,ALr,yLr,Se,VE,FFe,LLr,xLr,eJ,$Lr,kLr,SLr,XE,TFe,RLr,BLr,oJ,PLr,ILr,qLr,zE,MFe,NLr,jLr,rJ,DLr,GLr,OLr,QE,EFe,VLr,XLr,tJ,zLr,QLr,WLr,WE,CFe,HLr,ULr,aJ,JLr,YLr,KLr,HE,wFe,ZLr,e8r,nJ,o8r,r8r,t8r,UE,AFe,a8r,n8r,sJ,s8r,l8r,i8r,JE,yFe,d8r,c8r,lJ,f8r,m8r,g8r,YE,LFe,h8r,p8r,iJ,u8r,_8r,b8r,KE,nIe,Sc,ZE,xFe,O8,v8r,$Fe,F8r,sIe,pr,V8,T8r,Rc,M8r,dJ,E8r,C8r,cJ,w8r,A8r,y8r,X8,L8r,kFe,x8r,$8r,k8r,Gt,z8,S8r,SFe,R8r,B8r,Bc,P8r,RFe,I8r,q8r,fJ,N8r,j8r,D8r,eC,G8r,Or,Q8,O8r,BFe,V8r,X8r,hn,z8r,PFe,Q8r,W8r,IFe,H8r,U8r,qFe,J8r,Y8r,K8r,xe,oC,NFe,Z8r,exr,mJ,oxr,rxr,txr,rC,jFe,axr,nxr,gJ,sxr,lxr,ixr,tC,DFe,dxr,cxr,hJ,fxr,mxr,gxr,aC,GFe,hxr,pxr,pJ,uxr,_xr,bxr,nC,OFe,vxr,Fxr,uJ,Txr,Mxr,Exr,sC,VFe,Cxr,wxr,_J,Axr,yxr,Lxr,lC,XFe,xxr,$xr,bJ,kxr,Sxr,Rxr,iC,zFe,Bxr,Pxr,vJ,Ixr,qxr,Nxr,dC,QFe,jxr,Dxr,FJ,Gxr,Oxr,Vxr,cC,WFe,Xxr,zxr,TJ,Qxr,Wxr,Hxr,fC,lIe,Pc,mC,HFe,W8,Uxr,UFe,Jxr,iIe,ur,H8,Yxr,Ic,Kxr,MJ,Zxr,e9r,EJ,o9r,r9r,t9r,U8,a9r,JFe,n9r,s9r,l9r,Ot,J8,i9r,YFe,d9r,c9r,qc,f9r,KFe,m9r,g9r,CJ,h9r,p9r,u9r,gC,_9r,Vr,Y8,b9r,ZFe,v9r,F9r,pn,T9r,eTe,M9r,E9r,oTe,C9r,w9r,rTe,A9r,y9r,L9r,$e,hC,tTe,x9r,$9r,wJ,k9r,S9r,R9r,pC,aTe,B9r,P9r,AJ,I9r,q9r,N9r,uC,nTe,j9r,D9r,yJ,G9r,O9r,V9r,_C,sTe,X9r,z9r,LJ,Q9r,W9r,H9r,bC,lTe,U9r,J9r,xJ,Y9r,K9r,Z9r,vC,iTe,e$r,o$r,$J,r$r,t$r,a$r,FC,dTe,n$r,s$r,kJ,l$r,i$r,d$r,TC,cTe,c$r,f$r,SJ,m$r,g$r,h$r,MC,fTe,p$r,u$r,RJ,_$r,b$r,v$r,EC,mTe,F$r,T$r,BJ,M$r,E$r,C$r,CC,dIe,Nc,wC,gTe,K8,w$r,hTe,A$r,cIe,_r,Z8,y$r,jc,L$r,PJ,x$r,$$r,IJ,k$r,S$r,R$r,ex,B$r,pTe,P$r,I$r,q$r,Vt,ox,N$r,uTe,j$r,D$r,Dc,G$r,_Te,O$r,V$r,qJ,X$r,z$r,Q$r,AC,W$r,Xr,rx,H$r,bTe,U$r,J$r,un,Y$r,vTe,K$r,Z$r,FTe,ekr,okr,TTe,rkr,tkr,akr,De,yC,MTe,nkr,skr,NJ,lkr,ikr,dkr,LC,ETe,ckr,fkr,jJ,mkr,gkr,hkr,xC,CTe,pkr,ukr,DJ,_kr,bkr,vkr,$C,wTe,Fkr,Tkr,GJ,Mkr,Ekr,Ckr,kC,ATe,wkr,Akr,OJ,ykr,Lkr,xkr,SC,yTe,$kr,kkr,VJ,Skr,Rkr,Bkr,RC,LTe,Pkr,Ikr,XJ,qkr,Nkr,jkr,BC,xTe,Dkr,Gkr,zJ,Okr,Vkr,Xkr,PC,fIe,Gc,IC,$Te,tx,zkr,kTe,Qkr,mIe,br,ax,Wkr,Oc,Hkr,QJ,Ukr,Jkr,WJ,Ykr,Kkr,Zkr,nx,eSr,STe,oSr,rSr,tSr,Xt,sx,aSr,RTe,nSr,sSr,Vc,lSr,BTe,iSr,dSr,HJ,cSr,fSr,mSr,qC,gSr,zr,lx,hSr,PTe,pSr,uSr,_n,_Sr,ITe,bSr,vSr,qTe,FSr,TSr,NTe,MSr,ESr,CSr,Ge,NC,jTe,wSr,ASr,UJ,ySr,LSr,xSr,jC,DTe,$Sr,kSr,JJ,SSr,RSr,BSr,DC,GTe,PSr,ISr,YJ,qSr,NSr,jSr,GC,OTe,DSr,GSr,KJ,OSr,VSr,XSr,OC,VTe,zSr,QSr,ZJ,WSr,HSr,USr,VC,XTe,JSr,YSr,eY,KSr,ZSr,eRr,XC,zTe,oRr,rRr,oY,tRr,aRr,nRr,zC,QTe,sRr,lRr,rY,iRr,dRr,cRr,QC,gIe,Xc,WC,WTe,ix,fRr,HTe,mRr,hIe,vr,dx,gRr,zc,hRr,tY,pRr,uRr,aY,_Rr,bRr,vRr,cx,FRr,UTe,TRr,MRr,ERr,zt,fx,CRr,JTe,wRr,ARr,Qc,yRr,YTe,LRr,xRr,nY,$Rr,kRr,SRr,HC,RRr,Qr,mx,BRr,KTe,PRr,IRr,bn,qRr,ZTe,NRr,jRr,e7e,DRr,GRr,o7e,ORr,VRr,XRr,r7e,UC,t7e,zRr,QRr,sY,WRr,HRr,URr,JC,pIe,Wc,YC,a7e,gx,JRr,n7e,YRr,uIe,Fr,hx,KRr,Hc,ZRr,lY,eBr,oBr,iY,rBr,tBr,aBr,px,nBr,s7e,sBr,lBr,iBr,Qt,ux,dBr,l7e,cBr,fBr,Uc,mBr,i7e,gBr,hBr,dY,pBr,uBr,_Br,KC,bBr,Wr,_x,vBr,d7e,FBr,TBr,vn,MBr,c7e,EBr,CBr,f7e,wBr,ABr,m7e,yBr,LBr,xBr,bx,ZC,g7e,$Br,kBr,cY,SBr,RBr,BBr,ew,h7e,PBr,IBr,fY,qBr,NBr,jBr,ow,_Ie,Jc,rw,p7e,vx,DBr,u7e,GBr,bIe,Tr,Fx,OBr,Yc,VBr,mY,XBr,zBr,gY,QBr,WBr,HBr,Tx,UBr,_7e,JBr,YBr,KBr,Wt,Mx,ZBr,b7e,ePr,oPr,Kc,rPr,v7e,tPr,aPr,hY,nPr,sPr,lPr,tw,iPr,Hr,Ex,dPr,F7e,cPr,fPr,Fn,mPr,T7e,gPr,hPr,M7e,pPr,uPr,E7e,_Pr,bPr,vPr,C7e,aw,w7e,FPr,TPr,pY,MPr,EPr,CPr,nw,vIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),w0=new ee({}),A0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new wPr({props:{warning:!0,$$slots:{default:[TCt]},$$scope:{ctx:L}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/configuration_auto.py#L563"}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/configuration_auto.py#L586"}}),ng=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),S0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/configuration_auto.py#L708"}}),R0=new ee({}),B0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/tokenization_auto.py#L377"}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17135/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/tokenization_auto.py#L391"}}),qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),N0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/tokenization_auto.py#L587"}}),j0=new ee({}),D0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),V0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17135/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),ch=new wPr({props:{$$slots:{default:[CCt]},$$scope:{ctx:L}}}),fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),X0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),z0=new ee({}),Q0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/processing_auto.py#L76"}}),U0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/processing_auto.py#L90"}}),Lh=new wPr({props:{$$slots:{default:[ACt]},$$scope:{ctx:L}}}),xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/processing_auto.py#L243"}}),Y0=new ee({}),K0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L717"}}),e6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Sh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),o6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Fu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),r6=new ee({}),t6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L724"}}),n6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Mu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),d_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),l6=new ee({}),i6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L739"}}),c6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),f_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),f6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),m6=new ee({}),g6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L746"}}),p6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),_6=new ee({}),b6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L753"}}),F6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),P1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),eb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),M6=new ee({}),E6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L762"}}),w6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),rb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),y6=new ee({}),L6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L796"}}),$6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),S6=new ee({}),R6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L803"}}),P6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),j2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),q6=new ee({}),N6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L789"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),G2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),O6=new ee({}),V6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L771"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),W6=new ee({}),H6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L778"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),K6=new ee({}),Z6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L812"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L851"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L858"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L881"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L865"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),av=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L872"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L890"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L897"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L844"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L819"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L826"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_auto.py#L835"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:L}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),F8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:L}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),w8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:L}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),$8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:L}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),P8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:L}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),D8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:L}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:L}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),J8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:L}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:L}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:L}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:L}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:L}}}),vx=new ee({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17135/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17135/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17135/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),rf=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),T0=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),M0=o("AutoConfig"),En=o(", "),Cn=a("a"),E0=o("AutoModel"),ni=o(`, and
`),wn=a("a"),C0=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),I9=o("will create a model that is an instance of "),li=a("a"),q9=o("BertModel"),N9=o("."),Eo=l(),Fa=a("p"),j9=o("There is one class of "),nf=a("code"),D9=o("AutoModel"),CNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bBe=l(),ii=a("h2"),sf=a("a"),lZ=a("span"),F(w0.$$.fragment),wNe=l(),iZ=a("span"),ANe=o("Extending the Auto Classes"),vBe=l(),An=a("p"),yNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dZ=a("code"),LNe=o("NewModel"),xNe=o(", make sure you have a "),cZ=a("code"),$Ne=o("NewModelConfig"),kNe=o(` then you can add those to the auto
classes like this:`),FBe=l(),F(A0.$$.fragment),TBe=l(),G9=a("p"),SNe=o("You will then be able to use the auto classes like you would usually do!"),MBe=l(),F(lf.$$.fragment),EBe=l(),di=a("h2"),df=a("a"),fZ=a("span"),F(y0.$$.fragment),RNe=l(),mZ=a("span"),BNe=o("AutoConfig"),CBe=l(),Co=a("div"),F(L0.$$.fragment),PNe=l(),x0=a("p"),INe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O9=a("a"),qNe=o("from_pretrained()"),NNe=o(" class method."),jNe=l(),$0=a("p"),DNe=o("This class cannot be instantiated directly using "),gZ=a("code"),GNe=o("__init__()"),ONe=o(" (throws an error)."),VNe=l(),Mr=a("div"),F(k0.$$.fragment),XNe=l(),hZ=a("p"),zNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),QNe=l(),ci=a("p"),WNe=o("The configuration class to instantiate is selected based on the "),pZ=a("code"),HNe=o("model_type"),UNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),uZ=a("code"),JNe=o("pretrained_model_name_or_path"),YNe=o(":"),KNe=l(),A=a("ul"),cf=a("li"),_Z=a("strong"),ZNe=o("albert"),eje=o(" \u2014 "),V9=a("a"),oje=o("AlbertConfig"),rje=o(" (ALBERT model)"),tje=l(),ff=a("li"),bZ=a("strong"),aje=o("bart"),nje=o(" \u2014 "),X9=a("a"),sje=o("BartConfig"),lje=o(" (BART model)"),ije=l(),mf=a("li"),vZ=a("strong"),dje=o("beit"),cje=o(" \u2014 "),z9=a("a"),fje=o("BeitConfig"),mje=o(" (BEiT model)"),gje=l(),gf=a("li"),FZ=a("strong"),hje=o("bert"),pje=o(" \u2014 "),Q9=a("a"),uje=o("BertConfig"),_je=o(" (BERT model)"),bje=l(),hf=a("li"),TZ=a("strong"),vje=o("bert-generation"),Fje=o(" \u2014 "),W9=a("a"),Tje=o("BertGenerationConfig"),Mje=o(" (Bert Generation model)"),Eje=l(),pf=a("li"),MZ=a("strong"),Cje=o("big_bird"),wje=o(" \u2014 "),H9=a("a"),Aje=o("BigBirdConfig"),yje=o(" (BigBird model)"),Lje=l(),uf=a("li"),EZ=a("strong"),xje=o("bigbird_pegasus"),$je=o(" \u2014 "),U9=a("a"),kje=o("BigBirdPegasusConfig"),Sje=o(" (BigBirdPegasus model)"),Rje=l(),_f=a("li"),CZ=a("strong"),Bje=o("blenderbot"),Pje=o(" \u2014 "),J9=a("a"),Ije=o("BlenderbotConfig"),qje=o(" (Blenderbot model)"),Nje=l(),bf=a("li"),wZ=a("strong"),jje=o("blenderbot-small"),Dje=o(" \u2014 "),Y9=a("a"),Gje=o("BlenderbotSmallConfig"),Oje=o(" (BlenderbotSmall model)"),Vje=l(),vf=a("li"),AZ=a("strong"),Xje=o("camembert"),zje=o(" \u2014 "),K9=a("a"),Qje=o("CamembertConfig"),Wje=o(" (CamemBERT model)"),Hje=l(),Ff=a("li"),yZ=a("strong"),Uje=o("canine"),Jje=o(" \u2014 "),Z9=a("a"),Yje=o("CanineConfig"),Kje=o(" (Canine model)"),Zje=l(),Tf=a("li"),LZ=a("strong"),eDe=o("clip"),oDe=o(" \u2014 "),e$=a("a"),rDe=o("CLIPConfig"),tDe=o(" (CLIP model)"),aDe=l(),Mf=a("li"),xZ=a("strong"),nDe=o("convbert"),sDe=o(" \u2014 "),o$=a("a"),lDe=o("ConvBertConfig"),iDe=o(" (ConvBERT model)"),dDe=l(),Ef=a("li"),$Z=a("strong"),cDe=o("convnext"),fDe=o(" \u2014 "),r$=a("a"),mDe=o("ConvNextConfig"),gDe=o(" (ConvNext model)"),hDe=l(),Cf=a("li"),kZ=a("strong"),pDe=o("ctrl"),uDe=o(" \u2014 "),t$=a("a"),_De=o("CTRLConfig"),bDe=o(" (CTRL model)"),vDe=l(),wf=a("li"),SZ=a("strong"),FDe=o("data2vec-audio"),TDe=o(" \u2014 "),a$=a("a"),MDe=o("Data2VecAudioConfig"),EDe=o(" (Data2VecAudio model)"),CDe=l(),Af=a("li"),RZ=a("strong"),wDe=o("data2vec-text"),ADe=o(" \u2014 "),n$=a("a"),yDe=o("Data2VecTextConfig"),LDe=o(" (Data2VecText model)"),xDe=l(),yf=a("li"),BZ=a("strong"),$De=o("data2vec-vision"),kDe=o(" \u2014 "),s$=a("a"),SDe=o("Data2VecVisionConfig"),RDe=o(" (Data2VecVision model)"),BDe=l(),Lf=a("li"),PZ=a("strong"),PDe=o("deberta"),IDe=o(" \u2014 "),l$=a("a"),qDe=o("DebertaConfig"),NDe=o(" (DeBERTa model)"),jDe=l(),xf=a("li"),IZ=a("strong"),DDe=o("deberta-v2"),GDe=o(" \u2014 "),i$=a("a"),ODe=o("DebertaV2Config"),VDe=o(" (DeBERTa-v2 model)"),XDe=l(),$f=a("li"),qZ=a("strong"),zDe=o("decision_transformer"),QDe=o(" \u2014 "),d$=a("a"),WDe=o("DecisionTransformerConfig"),HDe=o(" (Decision Transformer model)"),UDe=l(),kf=a("li"),NZ=a("strong"),JDe=o("deit"),YDe=o(" \u2014 "),c$=a("a"),KDe=o("DeiTConfig"),ZDe=o(" (DeiT model)"),eGe=l(),Sf=a("li"),jZ=a("strong"),oGe=o("detr"),rGe=o(" \u2014 "),f$=a("a"),tGe=o("DetrConfig"),aGe=o(" (DETR model)"),nGe=l(),Rf=a("li"),DZ=a("strong"),sGe=o("distilbert"),lGe=o(" \u2014 "),m$=a("a"),iGe=o("DistilBertConfig"),dGe=o(" (DistilBERT model)"),cGe=l(),Bf=a("li"),GZ=a("strong"),fGe=o("dpr"),mGe=o(" \u2014 "),g$=a("a"),gGe=o("DPRConfig"),hGe=o(" (DPR model)"),pGe=l(),Pf=a("li"),OZ=a("strong"),uGe=o("dpt"),_Ge=o(" \u2014 "),h$=a("a"),bGe=o("DPTConfig"),vGe=o(" (DPT model)"),FGe=l(),If=a("li"),VZ=a("strong"),TGe=o("electra"),MGe=o(" \u2014 "),p$=a("a"),EGe=o("ElectraConfig"),CGe=o(" (ELECTRA model)"),wGe=l(),qf=a("li"),XZ=a("strong"),AGe=o("encoder-decoder"),yGe=o(" \u2014 "),u$=a("a"),LGe=o("EncoderDecoderConfig"),xGe=o(" (Encoder decoder model)"),$Ge=l(),Nf=a("li"),zZ=a("strong"),kGe=o("flaubert"),SGe=o(" \u2014 "),_$=a("a"),RGe=o("FlaubertConfig"),BGe=o(" (FlauBERT model)"),PGe=l(),jf=a("li"),QZ=a("strong"),IGe=o("fnet"),qGe=o(" \u2014 "),b$=a("a"),NGe=o("FNetConfig"),jGe=o(" (FNet model)"),DGe=l(),Df=a("li"),WZ=a("strong"),GGe=o("fsmt"),OGe=o(" \u2014 "),v$=a("a"),VGe=o("FSMTConfig"),XGe=o(" (FairSeq Machine-Translation model)"),zGe=l(),Gf=a("li"),HZ=a("strong"),QGe=o("funnel"),WGe=o(" \u2014 "),F$=a("a"),HGe=o("FunnelConfig"),UGe=o(" (Funnel Transformer model)"),JGe=l(),Of=a("li"),UZ=a("strong"),YGe=o("glpn"),KGe=o(" \u2014 "),T$=a("a"),ZGe=o("GLPNConfig"),eOe=o(" (GLPN model)"),oOe=l(),Vf=a("li"),JZ=a("strong"),rOe=o("gpt2"),tOe=o(" \u2014 "),M$=a("a"),aOe=o("GPT2Config"),nOe=o(" (OpenAI GPT-2 model)"),sOe=l(),Xf=a("li"),YZ=a("strong"),lOe=o("gpt_neo"),iOe=o(" \u2014 "),E$=a("a"),dOe=o("GPTNeoConfig"),cOe=o(" (GPT Neo model)"),fOe=l(),zf=a("li"),KZ=a("strong"),mOe=o("gptj"),gOe=o(" \u2014 "),C$=a("a"),hOe=o("GPTJConfig"),pOe=o(" (GPT-J model)"),uOe=l(),Qf=a("li"),ZZ=a("strong"),_Oe=o("hubert"),bOe=o(" \u2014 "),w$=a("a"),vOe=o("HubertConfig"),FOe=o(" (Hubert model)"),TOe=l(),Wf=a("li"),eee=a("strong"),MOe=o("ibert"),EOe=o(" \u2014 "),A$=a("a"),COe=o("IBertConfig"),wOe=o(" (I-BERT model)"),AOe=l(),Hf=a("li"),oee=a("strong"),yOe=o("imagegpt"),LOe=o(" \u2014 "),y$=a("a"),xOe=o("ImageGPTConfig"),$Oe=o(" (ImageGPT model)"),kOe=l(),Uf=a("li"),ree=a("strong"),SOe=o("layoutlm"),ROe=o(" \u2014 "),L$=a("a"),BOe=o("LayoutLMConfig"),POe=o(" (LayoutLM model)"),IOe=l(),Jf=a("li"),tee=a("strong"),qOe=o("layoutlmv2"),NOe=o(" \u2014 "),x$=a("a"),jOe=o("LayoutLMv2Config"),DOe=o(" (LayoutLMv2 model)"),GOe=l(),Yf=a("li"),aee=a("strong"),OOe=o("led"),VOe=o(" \u2014 "),$$=a("a"),XOe=o("LEDConfig"),zOe=o(" (LED model)"),QOe=l(),Kf=a("li"),nee=a("strong"),WOe=o("longformer"),HOe=o(" \u2014 "),k$=a("a"),UOe=o("LongformerConfig"),JOe=o(" (Longformer model)"),YOe=l(),Zf=a("li"),see=a("strong"),KOe=o("luke"),ZOe=o(" \u2014 "),S$=a("a"),eVe=o("LukeConfig"),oVe=o(" (LUKE model)"),rVe=l(),em=a("li"),lee=a("strong"),tVe=o("lxmert"),aVe=o(" \u2014 "),R$=a("a"),nVe=o("LxmertConfig"),sVe=o(" (LXMERT model)"),lVe=l(),om=a("li"),iee=a("strong"),iVe=o("m2m_100"),dVe=o(" \u2014 "),B$=a("a"),cVe=o("M2M100Config"),fVe=o(" (M2M100 model)"),mVe=l(),rm=a("li"),dee=a("strong"),gVe=o("marian"),hVe=o(" \u2014 "),P$=a("a"),pVe=o("MarianConfig"),uVe=o(" (Marian model)"),_Ve=l(),tm=a("li"),cee=a("strong"),bVe=o("maskformer"),vVe=o(" \u2014 "),I$=a("a"),FVe=o("MaskFormerConfig"),TVe=o(" (MaskFormer model)"),MVe=l(),am=a("li"),fee=a("strong"),EVe=o("mbart"),CVe=o(" \u2014 "),q$=a("a"),wVe=o("MBartConfig"),AVe=o(" (mBART model)"),yVe=l(),nm=a("li"),mee=a("strong"),LVe=o("megatron-bert"),xVe=o(" \u2014 "),N$=a("a"),$Ve=o("MegatronBertConfig"),kVe=o(" (MegatronBert model)"),SVe=l(),sm=a("li"),gee=a("strong"),RVe=o("mobilebert"),BVe=o(" \u2014 "),j$=a("a"),PVe=o("MobileBertConfig"),IVe=o(" (MobileBERT model)"),qVe=l(),lm=a("li"),hee=a("strong"),NVe=o("mpnet"),jVe=o(" \u2014 "),D$=a("a"),DVe=o("MPNetConfig"),GVe=o(" (MPNet model)"),OVe=l(),im=a("li"),pee=a("strong"),VVe=o("mt5"),XVe=o(" \u2014 "),G$=a("a"),zVe=o("MT5Config"),QVe=o(" (mT5 model)"),WVe=l(),dm=a("li"),uee=a("strong"),HVe=o("nystromformer"),UVe=o(" \u2014 "),O$=a("a"),JVe=o("NystromformerConfig"),YVe=o(" (Nystromformer model)"),KVe=l(),cm=a("li"),_ee=a("strong"),ZVe=o("openai-gpt"),eXe=o(" \u2014 "),V$=a("a"),oXe=o("OpenAIGPTConfig"),rXe=o(" (OpenAI GPT model)"),tXe=l(),fm=a("li"),bee=a("strong"),aXe=o("pegasus"),nXe=o(" \u2014 "),X$=a("a"),sXe=o("PegasusConfig"),lXe=o(" (Pegasus model)"),iXe=l(),mm=a("li"),vee=a("strong"),dXe=o("perceiver"),cXe=o(" \u2014 "),z$=a("a"),fXe=o("PerceiverConfig"),mXe=o(" (Perceiver model)"),gXe=l(),gm=a("li"),Fee=a("strong"),hXe=o("plbart"),pXe=o(" \u2014 "),Q$=a("a"),uXe=o("PLBartConfig"),_Xe=o(" (PLBart model)"),bXe=l(),hm=a("li"),Tee=a("strong"),vXe=o("poolformer"),FXe=o(" \u2014 "),W$=a("a"),TXe=o("PoolFormerConfig"),MXe=o(" (PoolFormer model)"),EXe=l(),pm=a("li"),Mee=a("strong"),CXe=o("prophetnet"),wXe=o(" \u2014 "),H$=a("a"),AXe=o("ProphetNetConfig"),yXe=o(" (ProphetNet model)"),LXe=l(),um=a("li"),Eee=a("strong"),xXe=o("qdqbert"),$Xe=o(" \u2014 "),U$=a("a"),kXe=o("QDQBertConfig"),SXe=o(" (QDQBert model)"),RXe=l(),_m=a("li"),Cee=a("strong"),BXe=o("rag"),PXe=o(" \u2014 "),J$=a("a"),IXe=o("RagConfig"),qXe=o(" (RAG model)"),NXe=l(),bm=a("li"),wee=a("strong"),jXe=o("realm"),DXe=o(" \u2014 "),Y$=a("a"),GXe=o("RealmConfig"),OXe=o(" (Realm model)"),VXe=l(),vm=a("li"),Aee=a("strong"),XXe=o("reformer"),zXe=o(" \u2014 "),K$=a("a"),QXe=o("ReformerConfig"),WXe=o(" (Reformer model)"),HXe=l(),Fm=a("li"),yee=a("strong"),UXe=o("regnet"),JXe=o(" \u2014 "),Z$=a("a"),YXe=o("RegNetConfig"),KXe=o(" (RegNet model)"),ZXe=l(),Tm=a("li"),Lee=a("strong"),eze=o("rembert"),oze=o(" \u2014 "),ek=a("a"),rze=o("RemBertConfig"),tze=o(" (RemBERT model)"),aze=l(),Mm=a("li"),xee=a("strong"),nze=o("resnet"),sze=o(" \u2014 "),ok=a("a"),lze=o("ResNetConfig"),ize=o(" (ResNet model)"),dze=l(),Em=a("li"),$ee=a("strong"),cze=o("retribert"),fze=o(" \u2014 "),rk=a("a"),mze=o("RetriBertConfig"),gze=o(" (RetriBERT model)"),hze=l(),Cm=a("li"),kee=a("strong"),pze=o("roberta"),uze=o(" \u2014 "),tk=a("a"),_ze=o("RobertaConfig"),bze=o(" (RoBERTa model)"),vze=l(),wm=a("li"),See=a("strong"),Fze=o("roformer"),Tze=o(" \u2014 "),ak=a("a"),Mze=o("RoFormerConfig"),Eze=o(" (RoFormer model)"),Cze=l(),Am=a("li"),Ree=a("strong"),wze=o("segformer"),Aze=o(" \u2014 "),nk=a("a"),yze=o("SegformerConfig"),Lze=o(" (SegFormer model)"),xze=l(),ym=a("li"),Bee=a("strong"),$ze=o("sew"),kze=o(" \u2014 "),sk=a("a"),Sze=o("SEWConfig"),Rze=o(" (SEW model)"),Bze=l(),Lm=a("li"),Pee=a("strong"),Pze=o("sew-d"),Ize=o(" \u2014 "),lk=a("a"),qze=o("SEWDConfig"),Nze=o(" (SEW-D model)"),jze=l(),xm=a("li"),Iee=a("strong"),Dze=o("speech-encoder-decoder"),Gze=o(" \u2014 "),ik=a("a"),Oze=o("SpeechEncoderDecoderConfig"),Vze=o(" (Speech Encoder decoder model)"),Xze=l(),$m=a("li"),qee=a("strong"),zze=o("speech_to_text"),Qze=o(" \u2014 "),dk=a("a"),Wze=o("Speech2TextConfig"),Hze=o(" (Speech2Text model)"),Uze=l(),km=a("li"),Nee=a("strong"),Jze=o("speech_to_text_2"),Yze=o(" \u2014 "),ck=a("a"),Kze=o("Speech2Text2Config"),Zze=o(" (Speech2Text2 model)"),eQe=l(),Sm=a("li"),jee=a("strong"),oQe=o("splinter"),rQe=o(" \u2014 "),fk=a("a"),tQe=o("SplinterConfig"),aQe=o(" (Splinter model)"),nQe=l(),Rm=a("li"),Dee=a("strong"),sQe=o("squeezebert"),lQe=o(" \u2014 "),mk=a("a"),iQe=o("SqueezeBertConfig"),dQe=o(" (SqueezeBERT model)"),cQe=l(),Bm=a("li"),Gee=a("strong"),fQe=o("swin"),mQe=o(" \u2014 "),gk=a("a"),gQe=o("SwinConfig"),hQe=o(" (Swin model)"),pQe=l(),Pm=a("li"),Oee=a("strong"),uQe=o("t5"),_Qe=o(" \u2014 "),hk=a("a"),bQe=o("T5Config"),vQe=o(" (T5 model)"),FQe=l(),Im=a("li"),Vee=a("strong"),TQe=o("tapas"),MQe=o(" \u2014 "),pk=a("a"),EQe=o("TapasConfig"),CQe=o(" (TAPAS model)"),wQe=l(),qm=a("li"),Xee=a("strong"),AQe=o("tapex"),yQe=o(" \u2014 "),uk=a("a"),LQe=o("BartConfig"),xQe=o(" (TAPEX model)"),$Qe=l(),Nm=a("li"),zee=a("strong"),kQe=o("transfo-xl"),SQe=o(" \u2014 "),_k=a("a"),RQe=o("TransfoXLConfig"),BQe=o(" (Transformer-XL model)"),PQe=l(),jm=a("li"),Qee=a("strong"),IQe=o("trocr"),qQe=o(" \u2014 "),bk=a("a"),NQe=o("TrOCRConfig"),jQe=o(" (TrOCR model)"),DQe=l(),Dm=a("li"),Wee=a("strong"),GQe=o("unispeech"),OQe=o(" \u2014 "),vk=a("a"),VQe=o("UniSpeechConfig"),XQe=o(" (UniSpeech model)"),zQe=l(),Gm=a("li"),Hee=a("strong"),QQe=o("unispeech-sat"),WQe=o(" \u2014 "),Fk=a("a"),HQe=o("UniSpeechSatConfig"),UQe=o(" (UniSpeechSat model)"),JQe=l(),Om=a("li"),Uee=a("strong"),YQe=o("van"),KQe=o(" \u2014 "),Tk=a("a"),ZQe=o("VanConfig"),eWe=o(" (VAN model)"),oWe=l(),Vm=a("li"),Jee=a("strong"),rWe=o("vilt"),tWe=o(" \u2014 "),Mk=a("a"),aWe=o("ViltConfig"),nWe=o(" (ViLT model)"),sWe=l(),Xm=a("li"),Yee=a("strong"),lWe=o("vision-encoder-decoder"),iWe=o(" \u2014 "),Ek=a("a"),dWe=o("VisionEncoderDecoderConfig"),cWe=o(" (Vision Encoder decoder model)"),fWe=l(),zm=a("li"),Kee=a("strong"),mWe=o("vision-text-dual-encoder"),gWe=o(" \u2014 "),Ck=a("a"),hWe=o("VisionTextDualEncoderConfig"),pWe=o(" (VisionTextDualEncoder model)"),uWe=l(),Qm=a("li"),Zee=a("strong"),_We=o("visual_bert"),bWe=o(" \u2014 "),wk=a("a"),vWe=o("VisualBertConfig"),FWe=o(" (VisualBert model)"),TWe=l(),Wm=a("li"),eoe=a("strong"),MWe=o("vit"),EWe=o(" \u2014 "),Ak=a("a"),CWe=o("ViTConfig"),wWe=o(" (ViT model)"),AWe=l(),Hm=a("li"),ooe=a("strong"),yWe=o("vit_mae"),LWe=o(" \u2014 "),yk=a("a"),xWe=o("ViTMAEConfig"),$We=o(" (ViTMAE model)"),kWe=l(),Um=a("li"),roe=a("strong"),SWe=o("wav2vec2"),RWe=o(" \u2014 "),Lk=a("a"),BWe=o("Wav2Vec2Config"),PWe=o(" (Wav2Vec2 model)"),IWe=l(),Jm=a("li"),toe=a("strong"),qWe=o("wavlm"),NWe=o(" \u2014 "),xk=a("a"),jWe=o("WavLMConfig"),DWe=o(" (WavLM model)"),GWe=l(),Ym=a("li"),aoe=a("strong"),OWe=o("xglm"),VWe=o(" \u2014 "),$k=a("a"),XWe=o("XGLMConfig"),zWe=o(" (XGLM model)"),QWe=l(),Km=a("li"),noe=a("strong"),WWe=o("xlm"),HWe=o(" \u2014 "),kk=a("a"),UWe=o("XLMConfig"),JWe=o(" (XLM model)"),YWe=l(),Zm=a("li"),soe=a("strong"),KWe=o("xlm-prophetnet"),ZWe=o(" \u2014 "),Sk=a("a"),eHe=o("XLMProphetNetConfig"),oHe=o(" (XLMProphetNet model)"),rHe=l(),eg=a("li"),loe=a("strong"),tHe=o("xlm-roberta"),aHe=o(" \u2014 "),Rk=a("a"),nHe=o("XLMRobertaConfig"),sHe=o(" (XLM-RoBERTa model)"),lHe=l(),og=a("li"),ioe=a("strong"),iHe=o("xlm-roberta-xl"),dHe=o(" \u2014 "),Bk=a("a"),cHe=o("XLMRobertaXLConfig"),fHe=o(" (XLM-RoBERTa-XL model)"),mHe=l(),rg=a("li"),doe=a("strong"),gHe=o("xlnet"),hHe=o(" \u2014 "),Pk=a("a"),pHe=o("XLNetConfig"),uHe=o(" (XLNet model)"),_He=l(),tg=a("li"),coe=a("strong"),bHe=o("yolos"),vHe=o(" \u2014 "),Ik=a("a"),FHe=o("YolosConfig"),THe=o(" (YOLOS model)"),MHe=l(),ag=a("li"),foe=a("strong"),EHe=o("yoso"),CHe=o(" \u2014 "),qk=a("a"),wHe=o("YosoConfig"),AHe=o(" (YOSO model)"),yHe=l(),F(ng.$$.fragment),LHe=l(),sg=a("div"),F(S0.$$.fragment),xHe=l(),moe=a("p"),$He=o("Register a new configuration for this class."),wBe=l(),fi=a("h2"),lg=a("a"),goe=a("span"),F(R0.$$.fragment),kHe=l(),hoe=a("span"),SHe=o("AutoTokenizer"),ABe=l(),wo=a("div"),F(B0.$$.fragment),RHe=l(),P0=a("p"),BHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Nk=a("a"),PHe=o("AutoTokenizer.from_pretrained()"),IHe=o(" class method."),qHe=l(),I0=a("p"),NHe=o("This class cannot be instantiated directly using "),poe=a("code"),jHe=o("__init__()"),DHe=o(" (throws an error)."),GHe=l(),Er=a("div"),F(q0.$$.fragment),OHe=l(),uoe=a("p"),VHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XHe=l(),Ta=a("p"),zHe=o("The tokenizer class to instantiate is selected based on the "),_oe=a("code"),QHe=o("model_type"),WHe=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),HHe=o("pretrained_model_name_or_path"),UHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=a("code"),JHe=o("pretrained_model_name_or_path"),YHe=o(":"),KHe=l(),k=a("ul"),yn=a("li"),Foe=a("strong"),ZHe=o("albert"),eUe=o(" \u2014 "),jk=a("a"),oUe=o("AlbertTokenizer"),rUe=o(" or "),Dk=a("a"),tUe=o("AlbertTokenizerFast"),aUe=o(" (ALBERT model)"),nUe=l(),Ln=a("li"),Toe=a("strong"),sUe=o("bart"),lUe=o(" \u2014 "),Gk=a("a"),iUe=o("BartTokenizer"),dUe=o(" or "),Ok=a("a"),cUe=o("BartTokenizerFast"),fUe=o(" (BART model)"),mUe=l(),xn=a("li"),Moe=a("strong"),gUe=o("barthez"),hUe=o(" \u2014 "),Vk=a("a"),pUe=o("BarthezTokenizer"),uUe=o(" or "),Xk=a("a"),_Ue=o("BarthezTokenizerFast"),bUe=o(" (BARThez model)"),vUe=l(),ig=a("li"),Eoe=a("strong"),FUe=o("bartpho"),TUe=o(" \u2014 "),zk=a("a"),MUe=o("BartphoTokenizer"),EUe=o(" (BARTpho model)"),CUe=l(),$n=a("li"),Coe=a("strong"),wUe=o("bert"),AUe=o(" \u2014 "),Qk=a("a"),yUe=o("BertTokenizer"),LUe=o(" or "),Wk=a("a"),xUe=o("BertTokenizerFast"),$Ue=o(" (BERT model)"),kUe=l(),dg=a("li"),woe=a("strong"),SUe=o("bert-generation"),RUe=o(" \u2014 "),Hk=a("a"),BUe=o("BertGenerationTokenizer"),PUe=o(" (Bert Generation model)"),IUe=l(),cg=a("li"),Aoe=a("strong"),qUe=o("bert-japanese"),NUe=o(" \u2014 "),Uk=a("a"),jUe=o("BertJapaneseTokenizer"),DUe=o(" (BertJapanese model)"),GUe=l(),fg=a("li"),yoe=a("strong"),OUe=o("bertweet"),VUe=o(" \u2014 "),Jk=a("a"),XUe=o("BertweetTokenizer"),zUe=o(" (Bertweet model)"),QUe=l(),kn=a("li"),Loe=a("strong"),WUe=o("big_bird"),HUe=o(" \u2014 "),Yk=a("a"),UUe=o("BigBirdTokenizer"),JUe=o(" or "),Kk=a("a"),YUe=o("BigBirdTokenizerFast"),KUe=o(" (BigBird model)"),ZUe=l(),Sn=a("li"),xoe=a("strong"),eJe=o("bigbird_pegasus"),oJe=o(" \u2014 "),Zk=a("a"),rJe=o("PegasusTokenizer"),tJe=o(" or "),eS=a("a"),aJe=o("PegasusTokenizerFast"),nJe=o(" (BigBirdPegasus model)"),sJe=l(),Rn=a("li"),$oe=a("strong"),lJe=o("blenderbot"),iJe=o(" \u2014 "),oS=a("a"),dJe=o("BlenderbotTokenizer"),cJe=o(" or "),rS=a("a"),fJe=o("BlenderbotTokenizerFast"),mJe=o(" (Blenderbot model)"),gJe=l(),mg=a("li"),koe=a("strong"),hJe=o("blenderbot-small"),pJe=o(" \u2014 "),tS=a("a"),uJe=o("BlenderbotSmallTokenizer"),_Je=o(" (BlenderbotSmall model)"),bJe=l(),gg=a("li"),Soe=a("strong"),vJe=o("byt5"),FJe=o(" \u2014 "),aS=a("a"),TJe=o("ByT5Tokenizer"),MJe=o(" (ByT5 model)"),EJe=l(),Bn=a("li"),Roe=a("strong"),CJe=o("camembert"),wJe=o(" \u2014 "),nS=a("a"),AJe=o("CamembertTokenizer"),yJe=o(" or "),sS=a("a"),LJe=o("CamembertTokenizerFast"),xJe=o(" (CamemBERT model)"),$Je=l(),hg=a("li"),Boe=a("strong"),kJe=o("canine"),SJe=o(" \u2014 "),lS=a("a"),RJe=o("CanineTokenizer"),BJe=o(" (Canine model)"),PJe=l(),Pn=a("li"),Poe=a("strong"),IJe=o("clip"),qJe=o(" \u2014 "),iS=a("a"),NJe=o("CLIPTokenizer"),jJe=o(" or "),dS=a("a"),DJe=o("CLIPTokenizerFast"),GJe=o(" (CLIP model)"),OJe=l(),In=a("li"),Ioe=a("strong"),VJe=o("convbert"),XJe=o(" \u2014 "),cS=a("a"),zJe=o("ConvBertTokenizer"),QJe=o(" or "),fS=a("a"),WJe=o("ConvBertTokenizerFast"),HJe=o(" (ConvBERT model)"),UJe=l(),qn=a("li"),qoe=a("strong"),JJe=o("cpm"),YJe=o(" \u2014 "),mS=a("a"),KJe=o("CpmTokenizer"),ZJe=o(" or "),gS=a("a"),eYe=o("CpmTokenizerFast"),oYe=o(" (CPM model)"),rYe=l(),pg=a("li"),Noe=a("strong"),tYe=o("ctrl"),aYe=o(" \u2014 "),hS=a("a"),nYe=o("CTRLTokenizer"),sYe=o(" (CTRL model)"),lYe=l(),Nn=a("li"),joe=a("strong"),iYe=o("data2vec-text"),dYe=o(" \u2014 "),pS=a("a"),cYe=o("RobertaTokenizer"),fYe=o(" or "),uS=a("a"),mYe=o("RobertaTokenizerFast"),gYe=o(" (Data2VecText model)"),hYe=l(),jn=a("li"),Doe=a("strong"),pYe=o("deberta"),uYe=o(" \u2014 "),_S=a("a"),_Ye=o("DebertaTokenizer"),bYe=o(" or "),bS=a("a"),vYe=o("DebertaTokenizerFast"),FYe=o(" (DeBERTa model)"),TYe=l(),Dn=a("li"),Goe=a("strong"),MYe=o("deberta-v2"),EYe=o(" \u2014 "),vS=a("a"),CYe=o("DebertaV2Tokenizer"),wYe=o(" or "),FS=a("a"),AYe=o("DebertaV2TokenizerFast"),yYe=o(" (DeBERTa-v2 model)"),LYe=l(),Gn=a("li"),Ooe=a("strong"),xYe=o("distilbert"),$Ye=o(" \u2014 "),TS=a("a"),kYe=o("DistilBertTokenizer"),SYe=o(" or "),MS=a("a"),RYe=o("DistilBertTokenizerFast"),BYe=o(" (DistilBERT model)"),PYe=l(),On=a("li"),Voe=a("strong"),IYe=o("dpr"),qYe=o(" \u2014 "),ES=a("a"),NYe=o("DPRQuestionEncoderTokenizer"),jYe=o(" or "),CS=a("a"),DYe=o("DPRQuestionEncoderTokenizerFast"),GYe=o(" (DPR model)"),OYe=l(),Vn=a("li"),Xoe=a("strong"),VYe=o("electra"),XYe=o(" \u2014 "),wS=a("a"),zYe=o("ElectraTokenizer"),QYe=o(" or "),AS=a("a"),WYe=o("ElectraTokenizerFast"),HYe=o(" (ELECTRA model)"),UYe=l(),ug=a("li"),zoe=a("strong"),JYe=o("flaubert"),YYe=o(" \u2014 "),yS=a("a"),KYe=o("FlaubertTokenizer"),ZYe=o(" (FlauBERT model)"),eKe=l(),Xn=a("li"),Qoe=a("strong"),oKe=o("fnet"),rKe=o(" \u2014 "),LS=a("a"),tKe=o("FNetTokenizer"),aKe=o(" or "),xS=a("a"),nKe=o("FNetTokenizerFast"),sKe=o(" (FNet model)"),lKe=l(),_g=a("li"),Woe=a("strong"),iKe=o("fsmt"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("FSMTTokenizer"),fKe=o(" (FairSeq Machine-Translation model)"),mKe=l(),zn=a("li"),Hoe=a("strong"),gKe=o("funnel"),hKe=o(" \u2014 "),kS=a("a"),pKe=o("FunnelTokenizer"),uKe=o(" or "),SS=a("a"),_Ke=o("FunnelTokenizerFast"),bKe=o(" (Funnel Transformer model)"),vKe=l(),Qn=a("li"),Uoe=a("strong"),FKe=o("gpt2"),TKe=o(" \u2014 "),RS=a("a"),MKe=o("GPT2Tokenizer"),EKe=o(" or "),BS=a("a"),CKe=o("GPT2TokenizerFast"),wKe=o(" (OpenAI GPT-2 model)"),AKe=l(),Wn=a("li"),Joe=a("strong"),yKe=o("gpt_neo"),LKe=o(" \u2014 "),PS=a("a"),xKe=o("GPT2Tokenizer"),$Ke=o(" or "),IS=a("a"),kKe=o("GPT2TokenizerFast"),SKe=o(" (GPT Neo model)"),RKe=l(),Hn=a("li"),Yoe=a("strong"),BKe=o("gptj"),PKe=o(" \u2014 "),qS=a("a"),IKe=o("GPT2Tokenizer"),qKe=o(" or "),NS=a("a"),NKe=o("GPT2TokenizerFast"),jKe=o(" (GPT-J model)"),DKe=l(),Un=a("li"),Koe=a("strong"),GKe=o("herbert"),OKe=o(" \u2014 "),jS=a("a"),VKe=o("HerbertTokenizer"),XKe=o(" or "),DS=a("a"),zKe=o("HerbertTokenizerFast"),QKe=o(" (HerBERT model)"),WKe=l(),bg=a("li"),Zoe=a("strong"),HKe=o("hubert"),UKe=o(" \u2014 "),GS=a("a"),JKe=o("Wav2Vec2CTCTokenizer"),YKe=o(" (Hubert model)"),KKe=l(),Jn=a("li"),ere=a("strong"),ZKe=o("ibert"),eZe=o(" \u2014 "),OS=a("a"),oZe=o("RobertaTokenizer"),rZe=o(" or "),VS=a("a"),tZe=o("RobertaTokenizerFast"),aZe=o(" (I-BERT model)"),nZe=l(),Yn=a("li"),ore=a("strong"),sZe=o("layoutlm"),lZe=o(" \u2014 "),XS=a("a"),iZe=o("LayoutLMTokenizer"),dZe=o(" or "),zS=a("a"),cZe=o("LayoutLMTokenizerFast"),fZe=o(" (LayoutLM model)"),mZe=l(),Kn=a("li"),rre=a("strong"),gZe=o("layoutlmv2"),hZe=o(" \u2014 "),QS=a("a"),pZe=o("LayoutLMv2Tokenizer"),uZe=o(" or "),WS=a("a"),_Ze=o("LayoutLMv2TokenizerFast"),bZe=o(" (LayoutLMv2 model)"),vZe=l(),Zn=a("li"),tre=a("strong"),FZe=o("layoutxlm"),TZe=o(" \u2014 "),HS=a("a"),MZe=o("LayoutXLMTokenizer"),EZe=o(" or "),US=a("a"),CZe=o("LayoutXLMTokenizerFast"),wZe=o(" (LayoutXLM model)"),AZe=l(),es=a("li"),are=a("strong"),yZe=o("led"),LZe=o(" \u2014 "),JS=a("a"),xZe=o("LEDTokenizer"),$Ze=o(" or "),YS=a("a"),kZe=o("LEDTokenizerFast"),SZe=o(" (LED model)"),RZe=l(),os=a("li"),nre=a("strong"),BZe=o("longformer"),PZe=o(" \u2014 "),KS=a("a"),IZe=o("LongformerTokenizer"),qZe=o(" or "),ZS=a("a"),NZe=o("LongformerTokenizerFast"),jZe=o(" (Longformer model)"),DZe=l(),vg=a("li"),sre=a("strong"),GZe=o("luke"),OZe=o(" \u2014 "),eR=a("a"),VZe=o("LukeTokenizer"),XZe=o(" (LUKE model)"),zZe=l(),rs=a("li"),lre=a("strong"),QZe=o("lxmert"),WZe=o(" \u2014 "),oR=a("a"),HZe=o("LxmertTokenizer"),UZe=o(" or "),rR=a("a"),JZe=o("LxmertTokenizerFast"),YZe=o(" (LXMERT model)"),KZe=l(),Fg=a("li"),ire=a("strong"),ZZe=o("m2m_100"),eeo=o(" \u2014 "),tR=a("a"),oeo=o("M2M100Tokenizer"),reo=o(" (M2M100 model)"),teo=l(),Tg=a("li"),dre=a("strong"),aeo=o("marian"),neo=o(" \u2014 "),aR=a("a"),seo=o("MarianTokenizer"),leo=o(" (Marian model)"),ieo=l(),ts=a("li"),cre=a("strong"),deo=o("mbart"),ceo=o(" \u2014 "),nR=a("a"),feo=o("MBartTokenizer"),meo=o(" or "),sR=a("a"),geo=o("MBartTokenizerFast"),heo=o(" (mBART model)"),peo=l(),as=a("li"),fre=a("strong"),ueo=o("mbart50"),_eo=o(" \u2014 "),lR=a("a"),beo=o("MBart50Tokenizer"),veo=o(" or "),iR=a("a"),Feo=o("MBart50TokenizerFast"),Teo=o(" (mBART-50 model)"),Meo=l(),ns=a("li"),mre=a("strong"),Eeo=o("megatron-bert"),Ceo=o(" \u2014 "),dR=a("a"),weo=o("BertTokenizer"),Aeo=o(" or "),cR=a("a"),yeo=o("BertTokenizerFast"),Leo=o(" (MegatronBert model)"),xeo=l(),Mg=a("li"),gre=a("strong"),$eo=o("mluke"),keo=o(" \u2014 "),fR=a("a"),Seo=o("MLukeTokenizer"),Reo=o(" (mLUKE model)"),Beo=l(),ss=a("li"),hre=a("strong"),Peo=o("mobilebert"),Ieo=o(" \u2014 "),mR=a("a"),qeo=o("MobileBertTokenizer"),Neo=o(" or "),gR=a("a"),jeo=o("MobileBertTokenizerFast"),Deo=o(" (MobileBERT model)"),Geo=l(),ls=a("li"),pre=a("strong"),Oeo=o("mpnet"),Veo=o(" \u2014 "),hR=a("a"),Xeo=o("MPNetTokenizer"),zeo=o(" or "),pR=a("a"),Qeo=o("MPNetTokenizerFast"),Weo=o(" (MPNet model)"),Heo=l(),is=a("li"),ure=a("strong"),Ueo=o("mt5"),Jeo=o(" \u2014 "),uR=a("a"),Yeo=o("MT5Tokenizer"),Keo=o(" or "),_R=a("a"),Zeo=o("MT5TokenizerFast"),eoo=o(" (mT5 model)"),ooo=l(),ds=a("li"),_re=a("strong"),roo=o("nystromformer"),too=o(" \u2014 "),bR=a("a"),aoo=o("AlbertTokenizer"),noo=o(" or "),vR=a("a"),soo=o("AlbertTokenizerFast"),loo=o(" (Nystromformer model)"),ioo=l(),cs=a("li"),bre=a("strong"),doo=o("openai-gpt"),coo=o(" \u2014 "),FR=a("a"),foo=o("OpenAIGPTTokenizer"),moo=o(" or "),TR=a("a"),goo=o("OpenAIGPTTokenizerFast"),hoo=o(" (OpenAI GPT model)"),poo=l(),fs=a("li"),vre=a("strong"),uoo=o("pegasus"),_oo=o(" \u2014 "),MR=a("a"),boo=o("PegasusTokenizer"),voo=o(" or "),ER=a("a"),Foo=o("PegasusTokenizerFast"),Too=o(" (Pegasus model)"),Moo=l(),Eg=a("li"),Fre=a("strong"),Eoo=o("perceiver"),Coo=o(" \u2014 "),CR=a("a"),woo=o("PerceiverTokenizer"),Aoo=o(" (Perceiver model)"),yoo=l(),Cg=a("li"),Tre=a("strong"),Loo=o("phobert"),xoo=o(" \u2014 "),wR=a("a"),$oo=o("PhobertTokenizer"),koo=o(" (PhoBERT model)"),Soo=l(),wg=a("li"),Mre=a("strong"),Roo=o("plbart"),Boo=o(" \u2014 "),AR=a("a"),Poo=o("PLBartTokenizer"),Ioo=o(" (PLBart model)"),qoo=l(),Ag=a("li"),Ere=a("strong"),Noo=o("prophetnet"),joo=o(" \u2014 "),yR=a("a"),Doo=o("ProphetNetTokenizer"),Goo=o(" (ProphetNet model)"),Ooo=l(),ms=a("li"),Cre=a("strong"),Voo=o("qdqbert"),Xoo=o(" \u2014 "),LR=a("a"),zoo=o("BertTokenizer"),Qoo=o(" or "),xR=a("a"),Woo=o("BertTokenizerFast"),Hoo=o(" (QDQBert model)"),Uoo=l(),yg=a("li"),wre=a("strong"),Joo=o("rag"),Yoo=o(" \u2014 "),$R=a("a"),Koo=o("RagTokenizer"),Zoo=o(" (RAG model)"),ero=l(),gs=a("li"),Are=a("strong"),oro=o("realm"),rro=o(" \u2014 "),kR=a("a"),tro=o("RealmTokenizer"),aro=o(" or "),SR=a("a"),nro=o("RealmTokenizerFast"),sro=o(" (Realm model)"),lro=l(),hs=a("li"),yre=a("strong"),iro=o("reformer"),dro=o(" \u2014 "),RR=a("a"),cro=o("ReformerTokenizer"),fro=o(" or "),BR=a("a"),mro=o("ReformerTokenizerFast"),gro=o(" (Reformer model)"),hro=l(),ps=a("li"),Lre=a("strong"),pro=o("rembert"),uro=o(" \u2014 "),PR=a("a"),_ro=o("RemBertTokenizer"),bro=o(" or "),IR=a("a"),vro=o("RemBertTokenizerFast"),Fro=o(" (RemBERT model)"),Tro=l(),us=a("li"),xre=a("strong"),Mro=o("retribert"),Ero=o(" \u2014 "),qR=a("a"),Cro=o("RetriBertTokenizer"),wro=o(" or "),NR=a("a"),Aro=o("RetriBertTokenizerFast"),yro=o(" (RetriBERT model)"),Lro=l(),_s=a("li"),$re=a("strong"),xro=o("roberta"),$ro=o(" \u2014 "),jR=a("a"),kro=o("RobertaTokenizer"),Sro=o(" or "),DR=a("a"),Rro=o("RobertaTokenizerFast"),Bro=o(" (RoBERTa model)"),Pro=l(),bs=a("li"),kre=a("strong"),Iro=o("roformer"),qro=o(" \u2014 "),GR=a("a"),Nro=o("RoFormerTokenizer"),jro=o(" or "),OR=a("a"),Dro=o("RoFormerTokenizerFast"),Gro=o(" (RoFormer model)"),Oro=l(),Lg=a("li"),Sre=a("strong"),Vro=o("speech_to_text"),Xro=o(" \u2014 "),VR=a("a"),zro=o("Speech2TextTokenizer"),Qro=o(" (Speech2Text model)"),Wro=l(),xg=a("li"),Rre=a("strong"),Hro=o("speech_to_text_2"),Uro=o(" \u2014 "),XR=a("a"),Jro=o("Speech2Text2Tokenizer"),Yro=o(" (Speech2Text2 model)"),Kro=l(),vs=a("li"),Bre=a("strong"),Zro=o("splinter"),eto=o(" \u2014 "),zR=a("a"),oto=o("SplinterTokenizer"),rto=o(" or "),QR=a("a"),tto=o("SplinterTokenizerFast"),ato=o(" (Splinter model)"),nto=l(),Fs=a("li"),Pre=a("strong"),sto=o("squeezebert"),lto=o(" \u2014 "),WR=a("a"),ito=o("SqueezeBertTokenizer"),dto=o(" or "),HR=a("a"),cto=o("SqueezeBertTokenizerFast"),fto=o(" (SqueezeBERT model)"),mto=l(),Ts=a("li"),Ire=a("strong"),gto=o("t5"),hto=o(" \u2014 "),UR=a("a"),pto=o("T5Tokenizer"),uto=o(" or "),JR=a("a"),_to=o("T5TokenizerFast"),bto=o(" (T5 model)"),vto=l(),$g=a("li"),qre=a("strong"),Fto=o("tapas"),Tto=o(" \u2014 "),YR=a("a"),Mto=o("TapasTokenizer"),Eto=o(" (TAPAS model)"),Cto=l(),kg=a("li"),Nre=a("strong"),wto=o("tapex"),Ato=o(" \u2014 "),KR=a("a"),yto=o("TapexTokenizer"),Lto=o(" (TAPEX model)"),xto=l(),Sg=a("li"),jre=a("strong"),$to=o("transfo-xl"),kto=o(" \u2014 "),ZR=a("a"),Sto=o("TransfoXLTokenizer"),Rto=o(" (Transformer-XL model)"),Bto=l(),Ms=a("li"),Dre=a("strong"),Pto=o("visual_bert"),Ito=o(" \u2014 "),eB=a("a"),qto=o("BertTokenizer"),Nto=o(" or "),oB=a("a"),jto=o("BertTokenizerFast"),Dto=o(" (VisualBert model)"),Gto=l(),Rg=a("li"),Gre=a("strong"),Oto=o("wav2vec2"),Vto=o(" \u2014 "),rB=a("a"),Xto=o("Wav2Vec2CTCTokenizer"),zto=o(" (Wav2Vec2 model)"),Qto=l(),Bg=a("li"),Ore=a("strong"),Wto=o("wav2vec2_phoneme"),Hto=o(" \u2014 "),tB=a("a"),Uto=o("Wav2Vec2PhonemeCTCTokenizer"),Jto=o(" (Wav2Vec2Phoneme model)"),Yto=l(),Es=a("li"),Vre=a("strong"),Kto=o("xglm"),Zto=o(" \u2014 "),aB=a("a"),eao=o("XGLMTokenizer"),oao=o(" or "),nB=a("a"),rao=o("XGLMTokenizerFast"),tao=o(" (XGLM model)"),aao=l(),Pg=a("li"),Xre=a("strong"),nao=o("xlm"),sao=o(" \u2014 "),sB=a("a"),lao=o("XLMTokenizer"),iao=o(" (XLM model)"),dao=l(),Ig=a("li"),zre=a("strong"),cao=o("xlm-prophetnet"),fao=o(" \u2014 "),lB=a("a"),mao=o("XLMProphetNetTokenizer"),gao=o(" (XLMProphetNet model)"),hao=l(),Cs=a("li"),Qre=a("strong"),pao=o("xlm-roberta"),uao=o(" \u2014 "),iB=a("a"),_ao=o("XLMRobertaTokenizer"),bao=o(" or "),dB=a("a"),vao=o("XLMRobertaTokenizerFast"),Fao=o(" (XLM-RoBERTa model)"),Tao=l(),ws=a("li"),Wre=a("strong"),Mao=o("xlm-roberta-xl"),Eao=o(" \u2014 "),cB=a("a"),Cao=o("RobertaTokenizer"),wao=o(" or "),fB=a("a"),Aao=o("RobertaTokenizerFast"),yao=o(" (XLM-RoBERTa-XL model)"),Lao=l(),As=a("li"),Hre=a("strong"),xao=o("xlnet"),$ao=o(" \u2014 "),mB=a("a"),kao=o("XLNetTokenizer"),Sao=o(" or "),gB=a("a"),Rao=o("XLNetTokenizerFast"),Bao=o(" (XLNet model)"),Pao=l(),ys=a("li"),Ure=a("strong"),Iao=o("yoso"),qao=o(" \u2014 "),hB=a("a"),Nao=o("AlbertTokenizer"),jao=o(" or "),pB=a("a"),Dao=o("AlbertTokenizerFast"),Gao=o(" (YOSO model)"),Oao=l(),F(qg.$$.fragment),Vao=l(),Ng=a("div"),F(N0.$$.fragment),Xao=l(),Jre=a("p"),zao=o("Register a new tokenizer in this mapping."),yBe=l(),mi=a("h2"),jg=a("a"),Yre=a("span"),F(j0.$$.fragment),Qao=l(),Kre=a("span"),Wao=o("AutoFeatureExtractor"),LBe=l(),Ao=a("div"),F(D0.$$.fragment),Hao=l(),G0=a("p"),Uao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uB=a("a"),Jao=o("AutoFeatureExtractor.from_pretrained()"),Yao=o(" class method."),Kao=l(),O0=a("p"),Zao=o("This class cannot be instantiated directly using "),Zre=a("code"),eno=o("__init__()"),ono=o(" (throws an error)."),rno=l(),Qe=a("div"),F(V0.$$.fragment),tno=l(),ete=a("p"),ano=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nno=l(),Ma=a("p"),sno=o("The feature extractor class to instantiate is selected based on the "),ote=a("code"),lno=o("model_type"),ino=o(` property of the config object
(either passed as an argument or loaded from `),rte=a("code"),dno=o("pretrained_model_name_or_path"),cno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tte=a("code"),fno=o("pretrained_model_name_or_path"),mno=o(":"),gno=l(),te=a("ul"),Dg=a("li"),ate=a("strong"),hno=o("beit"),pno=o(" \u2014 "),_B=a("a"),uno=o("BeitFeatureExtractor"),_no=o(" (BEiT model)"),bno=l(),Gg=a("li"),nte=a("strong"),vno=o("clip"),Fno=o(" \u2014 "),bB=a("a"),Tno=o("CLIPFeatureExtractor"),Mno=o(" (CLIP model)"),Eno=l(),Og=a("li"),ste=a("strong"),Cno=o("convnext"),wno=o(" \u2014 "),vB=a("a"),Ano=o("ConvNextFeatureExtractor"),yno=o(" (ConvNext model)"),Lno=l(),Vg=a("li"),lte=a("strong"),xno=o("data2vec-audio"),$no=o(" \u2014 "),FB=a("a"),kno=o("Wav2Vec2FeatureExtractor"),Sno=o(" (Data2VecAudio model)"),Rno=l(),Xg=a("li"),ite=a("strong"),Bno=o("data2vec-vision"),Pno=o(" \u2014 "),TB=a("a"),Ino=o("BeitFeatureExtractor"),qno=o(" (Data2VecVision model)"),Nno=l(),zg=a("li"),dte=a("strong"),jno=o("deit"),Dno=o(" \u2014 "),MB=a("a"),Gno=o("DeiTFeatureExtractor"),Ono=o(" (DeiT model)"),Vno=l(),Qg=a("li"),cte=a("strong"),Xno=o("detr"),zno=o(" \u2014 "),EB=a("a"),Qno=o("DetrFeatureExtractor"),Wno=o(" (DETR model)"),Hno=l(),Wg=a("li"),fte=a("strong"),Uno=o("dpt"),Jno=o(" \u2014 "),CB=a("a"),Yno=o("DPTFeatureExtractor"),Kno=o(" (DPT model)"),Zno=l(),Hg=a("li"),mte=a("strong"),eso=o("glpn"),oso=o(" \u2014 "),wB=a("a"),rso=o("GLPNFeatureExtractor"),tso=o(" (GLPN model)"),aso=l(),Ug=a("li"),gte=a("strong"),nso=o("hubert"),sso=o(" \u2014 "),AB=a("a"),lso=o("Wav2Vec2FeatureExtractor"),iso=o(" (Hubert model)"),dso=l(),Jg=a("li"),hte=a("strong"),cso=o("layoutlmv2"),fso=o(" \u2014 "),yB=a("a"),mso=o("LayoutLMv2FeatureExtractor"),gso=o(" (LayoutLMv2 model)"),hso=l(),Yg=a("li"),pte=a("strong"),pso=o("maskformer"),uso=o(" \u2014 "),LB=a("a"),_so=o("MaskFormerFeatureExtractor"),bso=o(" (MaskFormer model)"),vso=l(),Kg=a("li"),ute=a("strong"),Fso=o("perceiver"),Tso=o(" \u2014 "),xB=a("a"),Mso=o("PerceiverFeatureExtractor"),Eso=o(" (Perceiver model)"),Cso=l(),Zg=a("li"),_te=a("strong"),wso=o("poolformer"),Aso=o(" \u2014 "),$B=a("a"),yso=o("PoolFormerFeatureExtractor"),Lso=o(" (PoolFormer model)"),xso=l(),eh=a("li"),bte=a("strong"),$so=o("regnet"),kso=o(" \u2014 "),kB=a("a"),Sso=o("ConvNextFeatureExtractor"),Rso=o(" (RegNet model)"),Bso=l(),oh=a("li"),vte=a("strong"),Pso=o("resnet"),Iso=o(" \u2014 "),SB=a("a"),qso=o("ConvNextFeatureExtractor"),Nso=o(" (ResNet model)"),jso=l(),rh=a("li"),Fte=a("strong"),Dso=o("segformer"),Gso=o(" \u2014 "),RB=a("a"),Oso=o("SegformerFeatureExtractor"),Vso=o(" (SegFormer model)"),Xso=l(),th=a("li"),Tte=a("strong"),zso=o("speech_to_text"),Qso=o(" \u2014 "),BB=a("a"),Wso=o("Speech2TextFeatureExtractor"),Hso=o(" (Speech2Text model)"),Uso=l(),ah=a("li"),Mte=a("strong"),Jso=o("swin"),Yso=o(" \u2014 "),PB=a("a"),Kso=o("ViTFeatureExtractor"),Zso=o(" (Swin model)"),elo=l(),nh=a("li"),Ete=a("strong"),olo=o("van"),rlo=o(" \u2014 "),IB=a("a"),tlo=o("ConvNextFeatureExtractor"),alo=o(" (VAN model)"),nlo=l(),sh=a("li"),Cte=a("strong"),slo=o("vit"),llo=o(" \u2014 "),qB=a("a"),ilo=o("ViTFeatureExtractor"),dlo=o(" (ViT model)"),clo=l(),lh=a("li"),wte=a("strong"),flo=o("vit_mae"),mlo=o(" \u2014 "),NB=a("a"),glo=o("ViTFeatureExtractor"),hlo=o(" (ViTMAE model)"),plo=l(),ih=a("li"),Ate=a("strong"),ulo=o("wav2vec2"),_lo=o(" \u2014 "),jB=a("a"),blo=o("Wav2Vec2FeatureExtractor"),vlo=o(" (Wav2Vec2 model)"),Flo=l(),dh=a("li"),yte=a("strong"),Tlo=o("yolos"),Mlo=o(" \u2014 "),DB=a("a"),Elo=o("YolosFeatureExtractor"),Clo=o(" (YOLOS model)"),wlo=l(),F(ch.$$.fragment),Alo=l(),F(fh.$$.fragment),ylo=l(),mh=a("div"),F(X0.$$.fragment),Llo=l(),Lte=a("p"),xlo=o("Register a new feature extractor for this class."),xBe=l(),gi=a("h2"),gh=a("a"),xte=a("span"),F(z0.$$.fragment),$lo=l(),$te=a("span"),klo=o("AutoProcessor"),$Be=l(),yo=a("div"),F(Q0.$$.fragment),Slo=l(),W0=a("p"),Rlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=a("a"),Blo=o("AutoProcessor.from_pretrained()"),Plo=o(" class method."),Ilo=l(),H0=a("p"),qlo=o("This class cannot be instantiated directly using "),kte=a("code"),Nlo=o("__init__()"),jlo=o(" (throws an error)."),Dlo=l(),We=a("div"),F(U0.$$.fragment),Glo=l(),Ste=a("p"),Olo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vlo=l(),hi=a("p"),Xlo=o("The processor class to instantiate is selected based on the "),Rte=a("code"),zlo=o("model_type"),Qlo=o(` property of the config object (either
passed as an argument or loaded from `),Bte=a("code"),Wlo=o("pretrained_model_name_or_path"),Hlo=o(" if possible):"),Ulo=l(),be=a("ul"),hh=a("li"),Pte=a("strong"),Jlo=o("clip"),Ylo=o(" \u2014 "),OB=a("a"),Klo=o("CLIPProcessor"),Zlo=o(" (CLIP model)"),eio=l(),ph=a("li"),Ite=a("strong"),oio=o("layoutlmv2"),rio=o(" \u2014 "),VB=a("a"),tio=o("LayoutLMv2Processor"),aio=o(" (LayoutLMv2 model)"),nio=l(),uh=a("li"),qte=a("strong"),sio=o("layoutxlm"),lio=o(" \u2014 "),XB=a("a"),iio=o("LayoutXLMProcessor"),dio=o(" (LayoutXLM model)"),cio=l(),_h=a("li"),Nte=a("strong"),fio=o("sew"),mio=o(" \u2014 "),zB=a("a"),gio=o("Wav2Vec2Processor"),hio=o(" (SEW model)"),pio=l(),bh=a("li"),jte=a("strong"),uio=o("sew-d"),_io=o(" \u2014 "),QB=a("a"),bio=o("Wav2Vec2Processor"),vio=o(" (SEW-D model)"),Fio=l(),vh=a("li"),Dte=a("strong"),Tio=o("speech_to_text"),Mio=o(" \u2014 "),WB=a("a"),Eio=o("Speech2TextProcessor"),Cio=o(" (Speech2Text model)"),wio=l(),Fh=a("li"),Gte=a("strong"),Aio=o("speech_to_text_2"),yio=o(" \u2014 "),HB=a("a"),Lio=o("Speech2Text2Processor"),xio=o(" (Speech2Text2 model)"),$io=l(),Th=a("li"),Ote=a("strong"),kio=o("trocr"),Sio=o(" \u2014 "),UB=a("a"),Rio=o("TrOCRProcessor"),Bio=o(" (TrOCR model)"),Pio=l(),Mh=a("li"),Vte=a("strong"),Iio=o("unispeech"),qio=o(" \u2014 "),JB=a("a"),Nio=o("Wav2Vec2Processor"),jio=o(" (UniSpeech model)"),Dio=l(),Eh=a("li"),Xte=a("strong"),Gio=o("unispeech-sat"),Oio=o(" \u2014 "),YB=a("a"),Vio=o("Wav2Vec2Processor"),Xio=o(" (UniSpeechSat model)"),zio=l(),Ch=a("li"),zte=a("strong"),Qio=o("vilt"),Wio=o(" \u2014 "),KB=a("a"),Hio=o("ViltProcessor"),Uio=o(" (ViLT model)"),Jio=l(),wh=a("li"),Qte=a("strong"),Yio=o("vision-text-dual-encoder"),Kio=o(" \u2014 "),ZB=a("a"),Zio=o("VisionTextDualEncoderProcessor"),edo=o(" (VisionTextDualEncoder model)"),odo=l(),Ah=a("li"),Wte=a("strong"),rdo=o("wav2vec2"),tdo=o(" \u2014 "),eP=a("a"),ado=o("Wav2Vec2Processor"),ndo=o(" (Wav2Vec2 model)"),sdo=l(),yh=a("li"),Hte=a("strong"),ldo=o("wavlm"),ido=o(" \u2014 "),oP=a("a"),ddo=o("Wav2Vec2Processor"),cdo=o(" (WavLM model)"),fdo=l(),F(Lh.$$.fragment),mdo=l(),F(xh.$$.fragment),gdo=l(),$h=a("div"),F(J0.$$.fragment),hdo=l(),Ute=a("p"),pdo=o("Register a new processor for this class."),kBe=l(),pi=a("h2"),kh=a("a"),Jte=a("span"),F(Y0.$$.fragment),udo=l(),Yte=a("span"),_do=o("AutoModel"),SBe=l(),Lo=a("div"),F(K0.$$.fragment),bdo=l(),ui=a("p"),vdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rP=a("a"),Fdo=o("from_pretrained()"),Tdo=o(" class method or the "),tP=a("a"),Mdo=o("from_config()"),Edo=o(` class
method.`),Cdo=l(),Z0=a("p"),wdo=o("This class cannot be instantiated directly using "),Kte=a("code"),Ado=o("__init__()"),ydo=o(" (throws an error)."),Ldo=l(),Zr=a("div"),F(e6.$$.fragment),xdo=l(),Zte=a("p"),$do=o("Instantiates one of the base model classes of the library from a configuration."),kdo=l(),_i=a("p"),Sdo=o(`Note:
Loading a model from its configuration file does `),eae=a("strong"),Rdo=o("not"),Bdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aP=a("a"),Pdo=o("from_pretrained()"),Ido=o(" to load the model weights."),qdo=l(),F(Sh.$$.fragment),Ndo=l(),He=a("div"),F(o6.$$.fragment),jdo=l(),oae=a("p"),Ddo=o("Instantiate one of the base model classes of the library from a pretrained model."),Gdo=l(),Ea=a("p"),Odo=o("The model class to instantiate is selected based on the "),rae=a("code"),Vdo=o("model_type"),Xdo=o(` property of the config object (either
passed as an argument or loaded from `),tae=a("code"),zdo=o("pretrained_model_name_or_path"),Qdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=a("code"),Wdo=o("pretrained_model_name_or_path"),Hdo=o(":"),Udo=l(),x=a("ul"),Rh=a("li"),nae=a("strong"),Jdo=o("albert"),Ydo=o(" \u2014 "),nP=a("a"),Kdo=o("AlbertModel"),Zdo=o(" (ALBERT model)"),eco=l(),Bh=a("li"),sae=a("strong"),oco=o("bart"),rco=o(" \u2014 "),sP=a("a"),tco=o("BartModel"),aco=o(" (BART model)"),nco=l(),Ph=a("li"),lae=a("strong"),sco=o("beit"),lco=o(" \u2014 "),lP=a("a"),ico=o("BeitModel"),dco=o(" (BEiT model)"),cco=l(),Ih=a("li"),iae=a("strong"),fco=o("bert"),mco=o(" \u2014 "),iP=a("a"),gco=o("BertModel"),hco=o(" (BERT model)"),pco=l(),qh=a("li"),dae=a("strong"),uco=o("bert-generation"),_co=o(" \u2014 "),dP=a("a"),bco=o("BertGenerationEncoder"),vco=o(" (Bert Generation model)"),Fco=l(),Nh=a("li"),cae=a("strong"),Tco=o("big_bird"),Mco=o(" \u2014 "),cP=a("a"),Eco=o("BigBirdModel"),Cco=o(" (BigBird model)"),wco=l(),jh=a("li"),fae=a("strong"),Aco=o("bigbird_pegasus"),yco=o(" \u2014 "),fP=a("a"),Lco=o("BigBirdPegasusModel"),xco=o(" (BigBirdPegasus model)"),$co=l(),Dh=a("li"),mae=a("strong"),kco=o("blenderbot"),Sco=o(" \u2014 "),mP=a("a"),Rco=o("BlenderbotModel"),Bco=o(" (Blenderbot model)"),Pco=l(),Gh=a("li"),gae=a("strong"),Ico=o("blenderbot-small"),qco=o(" \u2014 "),gP=a("a"),Nco=o("BlenderbotSmallModel"),jco=o(" (BlenderbotSmall model)"),Dco=l(),Oh=a("li"),hae=a("strong"),Gco=o("camembert"),Oco=o(" \u2014 "),hP=a("a"),Vco=o("CamembertModel"),Xco=o(" (CamemBERT model)"),zco=l(),Vh=a("li"),pae=a("strong"),Qco=o("canine"),Wco=o(" \u2014 "),pP=a("a"),Hco=o("CanineModel"),Uco=o(" (Canine model)"),Jco=l(),Xh=a("li"),uae=a("strong"),Yco=o("clip"),Kco=o(" \u2014 "),uP=a("a"),Zco=o("CLIPModel"),efo=o(" (CLIP model)"),ofo=l(),zh=a("li"),_ae=a("strong"),rfo=o("convbert"),tfo=o(" \u2014 "),_P=a("a"),afo=o("ConvBertModel"),nfo=o(" (ConvBERT model)"),sfo=l(),Qh=a("li"),bae=a("strong"),lfo=o("convnext"),ifo=o(" \u2014 "),bP=a("a"),dfo=o("ConvNextModel"),cfo=o(" (ConvNext model)"),ffo=l(),Wh=a("li"),vae=a("strong"),mfo=o("ctrl"),gfo=o(" \u2014 "),vP=a("a"),hfo=o("CTRLModel"),pfo=o(" (CTRL model)"),ufo=l(),Hh=a("li"),Fae=a("strong"),_fo=o("data2vec-audio"),bfo=o(" \u2014 "),FP=a("a"),vfo=o("Data2VecAudioModel"),Ffo=o(" (Data2VecAudio model)"),Tfo=l(),Uh=a("li"),Tae=a("strong"),Mfo=o("data2vec-text"),Efo=o(" \u2014 "),TP=a("a"),Cfo=o("Data2VecTextModel"),wfo=o(" (Data2VecText model)"),Afo=l(),Jh=a("li"),Mae=a("strong"),yfo=o("data2vec-vision"),Lfo=o(" \u2014 "),MP=a("a"),xfo=o("Data2VecVisionModel"),$fo=o(" (Data2VecVision model)"),kfo=l(),Yh=a("li"),Eae=a("strong"),Sfo=o("deberta"),Rfo=o(" \u2014 "),EP=a("a"),Bfo=o("DebertaModel"),Pfo=o(" (DeBERTa model)"),Ifo=l(),Kh=a("li"),Cae=a("strong"),qfo=o("deberta-v2"),Nfo=o(" \u2014 "),CP=a("a"),jfo=o("DebertaV2Model"),Dfo=o(" (DeBERTa-v2 model)"),Gfo=l(),Zh=a("li"),wae=a("strong"),Ofo=o("decision_transformer"),Vfo=o(" \u2014 "),wP=a("a"),Xfo=o("DecisionTransformerModel"),zfo=o(" (Decision Transformer model)"),Qfo=l(),ep=a("li"),Aae=a("strong"),Wfo=o("deit"),Hfo=o(" \u2014 "),AP=a("a"),Ufo=o("DeiTModel"),Jfo=o(" (DeiT model)"),Yfo=l(),op=a("li"),yae=a("strong"),Kfo=o("detr"),Zfo=o(" \u2014 "),yP=a("a"),emo=o("DetrModel"),omo=o(" (DETR model)"),rmo=l(),rp=a("li"),Lae=a("strong"),tmo=o("distilbert"),amo=o(" \u2014 "),LP=a("a"),nmo=o("DistilBertModel"),smo=o(" (DistilBERT model)"),lmo=l(),tp=a("li"),xae=a("strong"),imo=o("dpr"),dmo=o(" \u2014 "),xP=a("a"),cmo=o("DPRQuestionEncoder"),fmo=o(" (DPR model)"),mmo=l(),ap=a("li"),$ae=a("strong"),gmo=o("dpt"),hmo=o(" \u2014 "),$P=a("a"),pmo=o("DPTModel"),umo=o(" (DPT model)"),_mo=l(),np=a("li"),kae=a("strong"),bmo=o("electra"),vmo=o(" \u2014 "),kP=a("a"),Fmo=o("ElectraModel"),Tmo=o(" (ELECTRA model)"),Mmo=l(),sp=a("li"),Sae=a("strong"),Emo=o("flaubert"),Cmo=o(" \u2014 "),SP=a("a"),wmo=o("FlaubertModel"),Amo=o(" (FlauBERT model)"),ymo=l(),lp=a("li"),Rae=a("strong"),Lmo=o("fnet"),xmo=o(" \u2014 "),RP=a("a"),$mo=o("FNetModel"),kmo=o(" (FNet model)"),Smo=l(),ip=a("li"),Bae=a("strong"),Rmo=o("fsmt"),Bmo=o(" \u2014 "),BP=a("a"),Pmo=o("FSMTModel"),Imo=o(" (FairSeq Machine-Translation model)"),qmo=l(),Ls=a("li"),Pae=a("strong"),Nmo=o("funnel"),jmo=o(" \u2014 "),PP=a("a"),Dmo=o("FunnelModel"),Gmo=o(" or "),IP=a("a"),Omo=o("FunnelBaseModel"),Vmo=o(" (Funnel Transformer model)"),Xmo=l(),dp=a("li"),Iae=a("strong"),zmo=o("glpn"),Qmo=o(" \u2014 "),qP=a("a"),Wmo=o("GLPNModel"),Hmo=o(" (GLPN model)"),Umo=l(),cp=a("li"),qae=a("strong"),Jmo=o("gpt2"),Ymo=o(" \u2014 "),NP=a("a"),Kmo=o("GPT2Model"),Zmo=o(" (OpenAI GPT-2 model)"),ego=l(),fp=a("li"),Nae=a("strong"),ogo=o("gpt_neo"),rgo=o(" \u2014 "),jP=a("a"),tgo=o("GPTNeoModel"),ago=o(" (GPT Neo model)"),ngo=l(),mp=a("li"),jae=a("strong"),sgo=o("gptj"),lgo=o(" \u2014 "),DP=a("a"),igo=o("GPTJModel"),dgo=o(" (GPT-J model)"),cgo=l(),gp=a("li"),Dae=a("strong"),fgo=o("hubert"),mgo=o(" \u2014 "),GP=a("a"),ggo=o("HubertModel"),hgo=o(" (Hubert model)"),pgo=l(),hp=a("li"),Gae=a("strong"),ugo=o("ibert"),_go=o(" \u2014 "),OP=a("a"),bgo=o("IBertModel"),vgo=o(" (I-BERT model)"),Fgo=l(),pp=a("li"),Oae=a("strong"),Tgo=o("imagegpt"),Mgo=o(" \u2014 "),VP=a("a"),Ego=o("ImageGPTModel"),Cgo=o(" (ImageGPT model)"),wgo=l(),up=a("li"),Vae=a("strong"),Ago=o("layoutlm"),ygo=o(" \u2014 "),XP=a("a"),Lgo=o("LayoutLMModel"),xgo=o(" (LayoutLM model)"),$go=l(),_p=a("li"),Xae=a("strong"),kgo=o("layoutlmv2"),Sgo=o(" \u2014 "),zP=a("a"),Rgo=o("LayoutLMv2Model"),Bgo=o(" (LayoutLMv2 model)"),Pgo=l(),bp=a("li"),zae=a("strong"),Igo=o("led"),qgo=o(" \u2014 "),QP=a("a"),Ngo=o("LEDModel"),jgo=o(" (LED model)"),Dgo=l(),vp=a("li"),Qae=a("strong"),Ggo=o("longformer"),Ogo=o(" \u2014 "),WP=a("a"),Vgo=o("LongformerModel"),Xgo=o(" (Longformer model)"),zgo=l(),Fp=a("li"),Wae=a("strong"),Qgo=o("luke"),Wgo=o(" \u2014 "),HP=a("a"),Hgo=o("LukeModel"),Ugo=o(" (LUKE model)"),Jgo=l(),Tp=a("li"),Hae=a("strong"),Ygo=o("lxmert"),Kgo=o(" \u2014 "),UP=a("a"),Zgo=o("LxmertModel"),eho=o(" (LXMERT model)"),oho=l(),Mp=a("li"),Uae=a("strong"),rho=o("m2m_100"),tho=o(" \u2014 "),JP=a("a"),aho=o("M2M100Model"),nho=o(" (M2M100 model)"),sho=l(),Ep=a("li"),Jae=a("strong"),lho=o("marian"),iho=o(" \u2014 "),YP=a("a"),dho=o("MarianModel"),cho=o(" (Marian model)"),fho=l(),Cp=a("li"),Yae=a("strong"),mho=o("maskformer"),gho=o(" \u2014 "),KP=a("a"),hho=o("MaskFormerModel"),pho=o(" (MaskFormer model)"),uho=l(),wp=a("li"),Kae=a("strong"),_ho=o("mbart"),bho=o(" \u2014 "),ZP=a("a"),vho=o("MBartModel"),Fho=o(" (mBART model)"),Tho=l(),Ap=a("li"),Zae=a("strong"),Mho=o("megatron-bert"),Eho=o(" \u2014 "),eI=a("a"),Cho=o("MegatronBertModel"),who=o(" (MegatronBert model)"),Aho=l(),yp=a("li"),ene=a("strong"),yho=o("mobilebert"),Lho=o(" \u2014 "),oI=a("a"),xho=o("MobileBertModel"),$ho=o(" (MobileBERT model)"),kho=l(),Lp=a("li"),one=a("strong"),Sho=o("mpnet"),Rho=o(" \u2014 "),rI=a("a"),Bho=o("MPNetModel"),Pho=o(" (MPNet model)"),Iho=l(),xp=a("li"),rne=a("strong"),qho=o("mt5"),Nho=o(" \u2014 "),tI=a("a"),jho=o("MT5Model"),Dho=o(" (mT5 model)"),Gho=l(),$p=a("li"),tne=a("strong"),Oho=o("nystromformer"),Vho=o(" \u2014 "),aI=a("a"),Xho=o("NystromformerModel"),zho=o(" (Nystromformer model)"),Qho=l(),kp=a("li"),ane=a("strong"),Who=o("openai-gpt"),Hho=o(" \u2014 "),nI=a("a"),Uho=o("OpenAIGPTModel"),Jho=o(" (OpenAI GPT model)"),Yho=l(),Sp=a("li"),nne=a("strong"),Kho=o("pegasus"),Zho=o(" \u2014 "),sI=a("a"),epo=o("PegasusModel"),opo=o(" (Pegasus model)"),rpo=l(),Rp=a("li"),sne=a("strong"),tpo=o("perceiver"),apo=o(" \u2014 "),lI=a("a"),npo=o("PerceiverModel"),spo=o(" (Perceiver model)"),lpo=l(),Bp=a("li"),lne=a("strong"),ipo=o("plbart"),dpo=o(" \u2014 "),iI=a("a"),cpo=o("PLBartModel"),fpo=o(" (PLBart model)"),mpo=l(),Pp=a("li"),ine=a("strong"),gpo=o("poolformer"),hpo=o(" \u2014 "),dI=a("a"),ppo=o("PoolFormerModel"),upo=o(" (PoolFormer model)"),_po=l(),Ip=a("li"),dne=a("strong"),bpo=o("prophetnet"),vpo=o(" \u2014 "),cI=a("a"),Fpo=o("ProphetNetModel"),Tpo=o(" (ProphetNet model)"),Mpo=l(),qp=a("li"),cne=a("strong"),Epo=o("qdqbert"),Cpo=o(" \u2014 "),fI=a("a"),wpo=o("QDQBertModel"),Apo=o(" (QDQBert model)"),ypo=l(),Np=a("li"),fne=a("strong"),Lpo=o("reformer"),xpo=o(" \u2014 "),mI=a("a"),$po=o("ReformerModel"),kpo=o(" (Reformer model)"),Spo=l(),jp=a("li"),mne=a("strong"),Rpo=o("regnet"),Bpo=o(" \u2014 "),gI=a("a"),Ppo=o("RegNetModel"),Ipo=o(" (RegNet model)"),qpo=l(),Dp=a("li"),gne=a("strong"),Npo=o("rembert"),jpo=o(" \u2014 "),hI=a("a"),Dpo=o("RemBertModel"),Gpo=o(" (RemBERT model)"),Opo=l(),Gp=a("li"),hne=a("strong"),Vpo=o("resnet"),Xpo=o(" \u2014 "),pI=a("a"),zpo=o("ResNetModel"),Qpo=o(" (ResNet model)"),Wpo=l(),Op=a("li"),pne=a("strong"),Hpo=o("retribert"),Upo=o(" \u2014 "),uI=a("a"),Jpo=o("RetriBertModel"),Ypo=o(" (RetriBERT model)"),Kpo=l(),Vp=a("li"),une=a("strong"),Zpo=o("roberta"),euo=o(" \u2014 "),_I=a("a"),ouo=o("RobertaModel"),ruo=o(" (RoBERTa model)"),tuo=l(),Xp=a("li"),_ne=a("strong"),auo=o("roformer"),nuo=o(" \u2014 "),bI=a("a"),suo=o("RoFormerModel"),luo=o(" (RoFormer model)"),iuo=l(),zp=a("li"),bne=a("strong"),duo=o("segformer"),cuo=o(" \u2014 "),vI=a("a"),fuo=o("SegformerModel"),muo=o(" (SegFormer model)"),guo=l(),Qp=a("li"),vne=a("strong"),huo=o("sew"),puo=o(" \u2014 "),FI=a("a"),uuo=o("SEWModel"),_uo=o(" (SEW model)"),buo=l(),Wp=a("li"),Fne=a("strong"),vuo=o("sew-d"),Fuo=o(" \u2014 "),TI=a("a"),Tuo=o("SEWDModel"),Muo=o(" (SEW-D model)"),Euo=l(),Hp=a("li"),Tne=a("strong"),Cuo=o("speech_to_text"),wuo=o(" \u2014 "),MI=a("a"),Auo=o("Speech2TextModel"),yuo=o(" (Speech2Text model)"),Luo=l(),Up=a("li"),Mne=a("strong"),xuo=o("splinter"),$uo=o(" \u2014 "),EI=a("a"),kuo=o("SplinterModel"),Suo=o(" (Splinter model)"),Ruo=l(),Jp=a("li"),Ene=a("strong"),Buo=o("squeezebert"),Puo=o(" \u2014 "),CI=a("a"),Iuo=o("SqueezeBertModel"),quo=o(" (SqueezeBERT model)"),Nuo=l(),Yp=a("li"),Cne=a("strong"),juo=o("swin"),Duo=o(" \u2014 "),wI=a("a"),Guo=o("SwinModel"),Ouo=o(" (Swin model)"),Vuo=l(),Kp=a("li"),wne=a("strong"),Xuo=o("t5"),zuo=o(" \u2014 "),AI=a("a"),Quo=o("T5Model"),Wuo=o(" (T5 model)"),Huo=l(),Zp=a("li"),Ane=a("strong"),Uuo=o("tapas"),Juo=o(" \u2014 "),yI=a("a"),Yuo=o("TapasModel"),Kuo=o(" (TAPAS model)"),Zuo=l(),eu=a("li"),yne=a("strong"),e_o=o("transfo-xl"),o_o=o(" \u2014 "),LI=a("a"),r_o=o("TransfoXLModel"),t_o=o(" (Transformer-XL model)"),a_o=l(),ou=a("li"),Lne=a("strong"),n_o=o("unispeech"),s_o=o(" \u2014 "),xI=a("a"),l_o=o("UniSpeechModel"),i_o=o(" (UniSpeech model)"),d_o=l(),ru=a("li"),xne=a("strong"),c_o=o("unispeech-sat"),f_o=o(" \u2014 "),$I=a("a"),m_o=o("UniSpeechSatModel"),g_o=o(" (UniSpeechSat model)"),h_o=l(),tu=a("li"),$ne=a("strong"),p_o=o("van"),u_o=o(" \u2014 "),kI=a("a"),__o=o("VanModel"),b_o=o(" (VAN model)"),v_o=l(),au=a("li"),kne=a("strong"),F_o=o("vilt"),T_o=o(" \u2014 "),SI=a("a"),M_o=o("ViltModel"),E_o=o(" (ViLT model)"),C_o=l(),nu=a("li"),Sne=a("strong"),w_o=o("vision-text-dual-encoder"),A_o=o(" \u2014 "),RI=a("a"),y_o=o("VisionTextDualEncoderModel"),L_o=o(" (VisionTextDualEncoder model)"),x_o=l(),su=a("li"),Rne=a("strong"),$_o=o("visual_bert"),k_o=o(" \u2014 "),BI=a("a"),S_o=o("VisualBertModel"),R_o=o(" (VisualBert model)"),B_o=l(),lu=a("li"),Bne=a("strong"),P_o=o("vit"),I_o=o(" \u2014 "),PI=a("a"),q_o=o("ViTModel"),N_o=o(" (ViT model)"),j_o=l(),iu=a("li"),Pne=a("strong"),D_o=o("vit_mae"),G_o=o(" \u2014 "),II=a("a"),O_o=o("ViTMAEModel"),V_o=o(" (ViTMAE model)"),X_o=l(),du=a("li"),Ine=a("strong"),z_o=o("wav2vec2"),Q_o=o(" \u2014 "),qI=a("a"),W_o=o("Wav2Vec2Model"),H_o=o(" (Wav2Vec2 model)"),U_o=l(),cu=a("li"),qne=a("strong"),J_o=o("wavlm"),Y_o=o(" \u2014 "),NI=a("a"),K_o=o("WavLMModel"),Z_o=o(" (WavLM model)"),e1o=l(),fu=a("li"),Nne=a("strong"),o1o=o("xglm"),r1o=o(" \u2014 "),jI=a("a"),t1o=o("XGLMModel"),a1o=o(" (XGLM model)"),n1o=l(),mu=a("li"),jne=a("strong"),s1o=o("xlm"),l1o=o(" \u2014 "),DI=a("a"),i1o=o("XLMModel"),d1o=o(" (XLM model)"),c1o=l(),gu=a("li"),Dne=a("strong"),f1o=o("xlm-prophetnet"),m1o=o(" \u2014 "),GI=a("a"),g1o=o("XLMProphetNetModel"),h1o=o(" (XLMProphetNet model)"),p1o=l(),hu=a("li"),Gne=a("strong"),u1o=o("xlm-roberta"),_1o=o(" \u2014 "),OI=a("a"),b1o=o("XLMRobertaModel"),v1o=o(" (XLM-RoBERTa model)"),F1o=l(),pu=a("li"),One=a("strong"),T1o=o("xlm-roberta-xl"),M1o=o(" \u2014 "),VI=a("a"),E1o=o("XLMRobertaXLModel"),C1o=o(" (XLM-RoBERTa-XL model)"),w1o=l(),uu=a("li"),Vne=a("strong"),A1o=o("xlnet"),y1o=o(" \u2014 "),XI=a("a"),L1o=o("XLNetModel"),x1o=o(" (XLNet model)"),$1o=l(),_u=a("li"),Xne=a("strong"),k1o=o("yolos"),S1o=o(" \u2014 "),zI=a("a"),R1o=o("YolosModel"),B1o=o(" (YOLOS model)"),P1o=l(),bu=a("li"),zne=a("strong"),I1o=o("yoso"),q1o=o(" \u2014 "),QI=a("a"),N1o=o("YosoModel"),j1o=o(" (YOSO model)"),D1o=l(),vu=a("p"),G1o=o("The model is set in evaluation mode by default using "),Qne=a("code"),O1o=o("model.eval()"),V1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=a("code"),X1o=o("model.train()"),z1o=l(),F(Fu.$$.fragment),RBe=l(),bi=a("h2"),Tu=a("a"),Hne=a("span"),F(r6.$$.fragment),Q1o=l(),Une=a("span"),W1o=o("AutoModelForPreTraining"),BBe=l(),xo=a("div"),F(t6.$$.fragment),H1o=l(),vi=a("p"),U1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WI=a("a"),J1o=o("from_pretrained()"),Y1o=o(" class method or the "),HI=a("a"),K1o=o("from_config()"),Z1o=o(` class
method.`),ebo=l(),a6=a("p"),obo=o("This class cannot be instantiated directly using "),Jne=a("code"),rbo=o("__init__()"),tbo=o(" (throws an error)."),abo=l(),et=a("div"),F(n6.$$.fragment),nbo=l(),Yne=a("p"),sbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lbo=l(),Fi=a("p"),ibo=o(`Note:
Loading a model from its configuration file does `),Kne=a("strong"),dbo=o("not"),cbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=a("a"),fbo=o("from_pretrained()"),mbo=o(" to load the model weights."),gbo=l(),F(Mu.$$.fragment),hbo=l(),Ue=a("div"),F(s6.$$.fragment),pbo=l(),Zne=a("p"),ubo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_bo=l(),Ca=a("p"),bbo=o("The model class to instantiate is selected based on the "),ese=a("code"),vbo=o("model_type"),Fbo=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),Tbo=o("pretrained_model_name_or_path"),Mbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),Ebo=o("pretrained_model_name_or_path"),Cbo=o(":"),wbo=l(),G=a("ul"),Eu=a("li"),tse=a("strong"),Abo=o("albert"),ybo=o(" \u2014 "),JI=a("a"),Lbo=o("AlbertForPreTraining"),xbo=o(" (ALBERT model)"),$bo=l(),Cu=a("li"),ase=a("strong"),kbo=o("bart"),Sbo=o(" \u2014 "),YI=a("a"),Rbo=o("BartForConditionalGeneration"),Bbo=o(" (BART model)"),Pbo=l(),wu=a("li"),nse=a("strong"),Ibo=o("bert"),qbo=o(" \u2014 "),KI=a("a"),Nbo=o("BertForPreTraining"),jbo=o(" (BERT model)"),Dbo=l(),Au=a("li"),sse=a("strong"),Gbo=o("big_bird"),Obo=o(" \u2014 "),ZI=a("a"),Vbo=o("BigBirdForPreTraining"),Xbo=o(" (BigBird model)"),zbo=l(),yu=a("li"),lse=a("strong"),Qbo=o("camembert"),Wbo=o(" \u2014 "),eq=a("a"),Hbo=o("CamembertForMaskedLM"),Ubo=o(" (CamemBERT model)"),Jbo=l(),Lu=a("li"),ise=a("strong"),Ybo=o("ctrl"),Kbo=o(" \u2014 "),oq=a("a"),Zbo=o("CTRLLMHeadModel"),e2o=o(" (CTRL model)"),o2o=l(),xu=a("li"),dse=a("strong"),r2o=o("data2vec-text"),t2o=o(" \u2014 "),rq=a("a"),a2o=o("Data2VecTextForMaskedLM"),n2o=o(" (Data2VecText model)"),s2o=l(),$u=a("li"),cse=a("strong"),l2o=o("deberta"),i2o=o(" \u2014 "),tq=a("a"),d2o=o("DebertaForMaskedLM"),c2o=o(" (DeBERTa model)"),f2o=l(),ku=a("li"),fse=a("strong"),m2o=o("deberta-v2"),g2o=o(" \u2014 "),aq=a("a"),h2o=o("DebertaV2ForMaskedLM"),p2o=o(" (DeBERTa-v2 model)"),u2o=l(),Su=a("li"),mse=a("strong"),_2o=o("distilbert"),b2o=o(" \u2014 "),nq=a("a"),v2o=o("DistilBertForMaskedLM"),F2o=o(" (DistilBERT model)"),T2o=l(),Ru=a("li"),gse=a("strong"),M2o=o("electra"),E2o=o(" \u2014 "),sq=a("a"),C2o=o("ElectraForPreTraining"),w2o=o(" (ELECTRA model)"),A2o=l(),Bu=a("li"),hse=a("strong"),y2o=o("flaubert"),L2o=o(" \u2014 "),lq=a("a"),x2o=o("FlaubertWithLMHeadModel"),$2o=o(" (FlauBERT model)"),k2o=l(),Pu=a("li"),pse=a("strong"),S2o=o("fnet"),R2o=o(" \u2014 "),iq=a("a"),B2o=o("FNetForPreTraining"),P2o=o(" (FNet model)"),I2o=l(),Iu=a("li"),use=a("strong"),q2o=o("fsmt"),N2o=o(" \u2014 "),dq=a("a"),j2o=o("FSMTForConditionalGeneration"),D2o=o(" (FairSeq Machine-Translation model)"),G2o=l(),qu=a("li"),_se=a("strong"),O2o=o("funnel"),V2o=o(" \u2014 "),cq=a("a"),X2o=o("FunnelForPreTraining"),z2o=o(" (Funnel Transformer model)"),Q2o=l(),Nu=a("li"),bse=a("strong"),W2o=o("gpt2"),H2o=o(" \u2014 "),fq=a("a"),U2o=o("GPT2LMHeadModel"),J2o=o(" (OpenAI GPT-2 model)"),Y2o=l(),ju=a("li"),vse=a("strong"),K2o=o("ibert"),Z2o=o(" \u2014 "),mq=a("a"),e5o=o("IBertForMaskedLM"),o5o=o(" (I-BERT model)"),r5o=l(),Du=a("li"),Fse=a("strong"),t5o=o("layoutlm"),a5o=o(" \u2014 "),gq=a("a"),n5o=o("LayoutLMForMaskedLM"),s5o=o(" (LayoutLM model)"),l5o=l(),Gu=a("li"),Tse=a("strong"),i5o=o("longformer"),d5o=o(" \u2014 "),hq=a("a"),c5o=o("LongformerForMaskedLM"),f5o=o(" (Longformer model)"),m5o=l(),Ou=a("li"),Mse=a("strong"),g5o=o("lxmert"),h5o=o(" \u2014 "),pq=a("a"),p5o=o("LxmertForPreTraining"),u5o=o(" (LXMERT model)"),_5o=l(),Vu=a("li"),Ese=a("strong"),b5o=o("megatron-bert"),v5o=o(" \u2014 "),uq=a("a"),F5o=o("MegatronBertForPreTraining"),T5o=o(" (MegatronBert model)"),M5o=l(),Xu=a("li"),Cse=a("strong"),E5o=o("mobilebert"),C5o=o(" \u2014 "),_q=a("a"),w5o=o("MobileBertForPreTraining"),A5o=o(" (MobileBERT model)"),y5o=l(),zu=a("li"),wse=a("strong"),L5o=o("mpnet"),x5o=o(" \u2014 "),bq=a("a"),$5o=o("MPNetForMaskedLM"),k5o=o(" (MPNet model)"),S5o=l(),Qu=a("li"),Ase=a("strong"),R5o=o("openai-gpt"),B5o=o(" \u2014 "),vq=a("a"),P5o=o("OpenAIGPTLMHeadModel"),I5o=o(" (OpenAI GPT model)"),q5o=l(),Wu=a("li"),yse=a("strong"),N5o=o("retribert"),j5o=o(" \u2014 "),Fq=a("a"),D5o=o("RetriBertModel"),G5o=o(" (RetriBERT model)"),O5o=l(),Hu=a("li"),Lse=a("strong"),V5o=o("roberta"),X5o=o(" \u2014 "),Tq=a("a"),z5o=o("RobertaForMaskedLM"),Q5o=o(" (RoBERTa model)"),W5o=l(),Uu=a("li"),xse=a("strong"),H5o=o("squeezebert"),U5o=o(" \u2014 "),Mq=a("a"),J5o=o("SqueezeBertForMaskedLM"),Y5o=o(" (SqueezeBERT model)"),K5o=l(),Ju=a("li"),$se=a("strong"),Z5o=o("t5"),e3o=o(" \u2014 "),Eq=a("a"),o3o=o("T5ForConditionalGeneration"),r3o=o(" (T5 model)"),t3o=l(),Yu=a("li"),kse=a("strong"),a3o=o("tapas"),n3o=o(" \u2014 "),Cq=a("a"),s3o=o("TapasForMaskedLM"),l3o=o(" (TAPAS model)"),i3o=l(),Ku=a("li"),Sse=a("strong"),d3o=o("transfo-xl"),c3o=o(" \u2014 "),wq=a("a"),f3o=o("TransfoXLLMHeadModel"),m3o=o(" (Transformer-XL model)"),g3o=l(),Zu=a("li"),Rse=a("strong"),h3o=o("unispeech"),p3o=o(" \u2014 "),Aq=a("a"),u3o=o("UniSpeechForPreTraining"),_3o=o(" (UniSpeech model)"),b3o=l(),e_=a("li"),Bse=a("strong"),v3o=o("unispeech-sat"),F3o=o(" \u2014 "),yq=a("a"),T3o=o("UniSpeechSatForPreTraining"),M3o=o(" (UniSpeechSat model)"),E3o=l(),o_=a("li"),Pse=a("strong"),C3o=o("visual_bert"),w3o=o(" \u2014 "),Lq=a("a"),A3o=o("VisualBertForPreTraining"),y3o=o(" (VisualBert model)"),L3o=l(),r_=a("li"),Ise=a("strong"),x3o=o("vit_mae"),$3o=o(" \u2014 "),xq=a("a"),k3o=o("ViTMAEForPreTraining"),S3o=o(" (ViTMAE model)"),R3o=l(),t_=a("li"),qse=a("strong"),B3o=o("wav2vec2"),P3o=o(" \u2014 "),$q=a("a"),I3o=o("Wav2Vec2ForPreTraining"),q3o=o(" (Wav2Vec2 model)"),N3o=l(),a_=a("li"),Nse=a("strong"),j3o=o("xlm"),D3o=o(" \u2014 "),kq=a("a"),G3o=o("XLMWithLMHeadModel"),O3o=o(" (XLM model)"),V3o=l(),n_=a("li"),jse=a("strong"),X3o=o("xlm-roberta"),z3o=o(" \u2014 "),Sq=a("a"),Q3o=o("XLMRobertaForMaskedLM"),W3o=o(" (XLM-RoBERTa model)"),H3o=l(),s_=a("li"),Dse=a("strong"),U3o=o("xlm-roberta-xl"),J3o=o(" \u2014 "),Rq=a("a"),Y3o=o("XLMRobertaXLForMaskedLM"),K3o=o(" (XLM-RoBERTa-XL model)"),Z3o=l(),l_=a("li"),Gse=a("strong"),evo=o("xlnet"),ovo=o(" \u2014 "),Bq=a("a"),rvo=o("XLNetLMHeadModel"),tvo=o(" (XLNet model)"),avo=l(),i_=a("p"),nvo=o("The model is set in evaluation mode by default using "),Ose=a("code"),svo=o("model.eval()"),lvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=a("code"),ivo=o("model.train()"),dvo=l(),F(d_.$$.fragment),PBe=l(),Ti=a("h2"),c_=a("a"),Xse=a("span"),F(l6.$$.fragment),cvo=l(),zse=a("span"),fvo=o("AutoModelForCausalLM"),IBe=l(),$o=a("div"),F(i6.$$.fragment),mvo=l(),Mi=a("p"),gvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pq=a("a"),hvo=o("from_pretrained()"),pvo=o(" class method or the "),Iq=a("a"),uvo=o("from_config()"),_vo=o(` class
method.`),bvo=l(),d6=a("p"),vvo=o("This class cannot be instantiated directly using "),Qse=a("code"),Fvo=o("__init__()"),Tvo=o(" (throws an error)."),Mvo=l(),ot=a("div"),F(c6.$$.fragment),Evo=l(),Wse=a("p"),Cvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wvo=l(),Ei=a("p"),Avo=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),yvo=o("not"),Lvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=a("a"),xvo=o("from_pretrained()"),$vo=o(" to load the model weights."),kvo=l(),F(f_.$$.fragment),Svo=l(),Je=a("div"),F(f6.$$.fragment),Rvo=l(),Use=a("p"),Bvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pvo=l(),wa=a("p"),Ivo=o("The model class to instantiate is selected based on the "),Jse=a("code"),qvo=o("model_type"),Nvo=o(` property of the config object (either
passed as an argument or loaded from `),Yse=a("code"),jvo=o("pretrained_model_name_or_path"),Dvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=a("code"),Gvo=o("pretrained_model_name_or_path"),Ovo=o(":"),Vvo=l(),z=a("ul"),m_=a("li"),Zse=a("strong"),Xvo=o("bart"),zvo=o(" \u2014 "),Nq=a("a"),Qvo=o("BartForCausalLM"),Wvo=o(" (BART model)"),Hvo=l(),g_=a("li"),ele=a("strong"),Uvo=o("bert"),Jvo=o(" \u2014 "),jq=a("a"),Yvo=o("BertLMHeadModel"),Kvo=o(" (BERT model)"),Zvo=l(),h_=a("li"),ole=a("strong"),eFo=o("bert-generation"),oFo=o(" \u2014 "),Dq=a("a"),rFo=o("BertGenerationDecoder"),tFo=o(" (Bert Generation model)"),aFo=l(),p_=a("li"),rle=a("strong"),nFo=o("big_bird"),sFo=o(" \u2014 "),Gq=a("a"),lFo=o("BigBirdForCausalLM"),iFo=o(" (BigBird model)"),dFo=l(),u_=a("li"),tle=a("strong"),cFo=o("bigbird_pegasus"),fFo=o(" \u2014 "),Oq=a("a"),mFo=o("BigBirdPegasusForCausalLM"),gFo=o(" (BigBirdPegasus model)"),hFo=l(),__=a("li"),ale=a("strong"),pFo=o("blenderbot"),uFo=o(" \u2014 "),Vq=a("a"),_Fo=o("BlenderbotForCausalLM"),bFo=o(" (Blenderbot model)"),vFo=l(),b_=a("li"),nle=a("strong"),FFo=o("blenderbot-small"),TFo=o(" \u2014 "),Xq=a("a"),MFo=o("BlenderbotSmallForCausalLM"),EFo=o(" (BlenderbotSmall model)"),CFo=l(),v_=a("li"),sle=a("strong"),wFo=o("camembert"),AFo=o(" \u2014 "),zq=a("a"),yFo=o("CamembertForCausalLM"),LFo=o(" (CamemBERT model)"),xFo=l(),F_=a("li"),lle=a("strong"),$Fo=o("ctrl"),kFo=o(" \u2014 "),Qq=a("a"),SFo=o("CTRLLMHeadModel"),RFo=o(" (CTRL model)"),BFo=l(),T_=a("li"),ile=a("strong"),PFo=o("data2vec-text"),IFo=o(" \u2014 "),Wq=a("a"),qFo=o("Data2VecTextForCausalLM"),NFo=o(" (Data2VecText model)"),jFo=l(),M_=a("li"),dle=a("strong"),DFo=o("electra"),GFo=o(" \u2014 "),Hq=a("a"),OFo=o("ElectraForCausalLM"),VFo=o(" (ELECTRA model)"),XFo=l(),E_=a("li"),cle=a("strong"),zFo=o("gpt2"),QFo=o(" \u2014 "),Uq=a("a"),WFo=o("GPT2LMHeadModel"),HFo=o(" (OpenAI GPT-2 model)"),UFo=l(),C_=a("li"),fle=a("strong"),JFo=o("gpt_neo"),YFo=o(" \u2014 "),Jq=a("a"),KFo=o("GPTNeoForCausalLM"),ZFo=o(" (GPT Neo model)"),eTo=l(),w_=a("li"),mle=a("strong"),oTo=o("gptj"),rTo=o(" \u2014 "),Yq=a("a"),tTo=o("GPTJForCausalLM"),aTo=o(" (GPT-J model)"),nTo=l(),A_=a("li"),gle=a("strong"),sTo=o("marian"),lTo=o(" \u2014 "),Kq=a("a"),iTo=o("MarianForCausalLM"),dTo=o(" (Marian model)"),cTo=l(),y_=a("li"),hle=a("strong"),fTo=o("mbart"),mTo=o(" \u2014 "),Zq=a("a"),gTo=o("MBartForCausalLM"),hTo=o(" (mBART model)"),pTo=l(),L_=a("li"),ple=a("strong"),uTo=o("megatron-bert"),_To=o(" \u2014 "),eN=a("a"),bTo=o("MegatronBertForCausalLM"),vTo=o(" (MegatronBert model)"),FTo=l(),x_=a("li"),ule=a("strong"),TTo=o("openai-gpt"),MTo=o(" \u2014 "),oN=a("a"),ETo=o("OpenAIGPTLMHeadModel"),CTo=o(" (OpenAI GPT model)"),wTo=l(),$_=a("li"),_le=a("strong"),ATo=o("pegasus"),yTo=o(" \u2014 "),rN=a("a"),LTo=o("PegasusForCausalLM"),xTo=o(" (Pegasus model)"),$To=l(),k_=a("li"),ble=a("strong"),kTo=o("plbart"),STo=o(" \u2014 "),tN=a("a"),RTo=o("PLBartForCausalLM"),BTo=o(" (PLBart model)"),PTo=l(),S_=a("li"),vle=a("strong"),ITo=o("prophetnet"),qTo=o(" \u2014 "),aN=a("a"),NTo=o("ProphetNetForCausalLM"),jTo=o(" (ProphetNet model)"),DTo=l(),R_=a("li"),Fle=a("strong"),GTo=o("qdqbert"),OTo=o(" \u2014 "),nN=a("a"),VTo=o("QDQBertLMHeadModel"),XTo=o(" (QDQBert model)"),zTo=l(),B_=a("li"),Tle=a("strong"),QTo=o("reformer"),WTo=o(" \u2014 "),sN=a("a"),HTo=o("ReformerModelWithLMHead"),UTo=o(" (Reformer model)"),JTo=l(),P_=a("li"),Mle=a("strong"),YTo=o("rembert"),KTo=o(" \u2014 "),lN=a("a"),ZTo=o("RemBertForCausalLM"),e7o=o(" (RemBERT model)"),o7o=l(),I_=a("li"),Ele=a("strong"),r7o=o("roberta"),t7o=o(" \u2014 "),iN=a("a"),a7o=o("RobertaForCausalLM"),n7o=o(" (RoBERTa model)"),s7o=l(),q_=a("li"),Cle=a("strong"),l7o=o("roformer"),i7o=o(" \u2014 "),dN=a("a"),d7o=o("RoFormerForCausalLM"),c7o=o(" (RoFormer model)"),f7o=l(),N_=a("li"),wle=a("strong"),m7o=o("speech_to_text_2"),g7o=o(" \u2014 "),cN=a("a"),h7o=o("Speech2Text2ForCausalLM"),p7o=o(" (Speech2Text2 model)"),u7o=l(),j_=a("li"),Ale=a("strong"),_7o=o("transfo-xl"),b7o=o(" \u2014 "),fN=a("a"),v7o=o("TransfoXLLMHeadModel"),F7o=o(" (Transformer-XL model)"),T7o=l(),D_=a("li"),yle=a("strong"),M7o=o("trocr"),E7o=o(" \u2014 "),mN=a("a"),C7o=o("TrOCRForCausalLM"),w7o=o(" (TrOCR model)"),A7o=l(),G_=a("li"),Lle=a("strong"),y7o=o("xglm"),L7o=o(" \u2014 "),gN=a("a"),x7o=o("XGLMForCausalLM"),$7o=o(" (XGLM model)"),k7o=l(),O_=a("li"),xle=a("strong"),S7o=o("xlm"),R7o=o(" \u2014 "),hN=a("a"),B7o=o("XLMWithLMHeadModel"),P7o=o(" (XLM model)"),I7o=l(),V_=a("li"),$le=a("strong"),q7o=o("xlm-prophetnet"),N7o=o(" \u2014 "),pN=a("a"),j7o=o("XLMProphetNetForCausalLM"),D7o=o(" (XLMProphetNet model)"),G7o=l(),X_=a("li"),kle=a("strong"),O7o=o("xlm-roberta"),V7o=o(" \u2014 "),uN=a("a"),X7o=o("XLMRobertaForCausalLM"),z7o=o(" (XLM-RoBERTa model)"),Q7o=l(),z_=a("li"),Sle=a("strong"),W7o=o("xlm-roberta-xl"),H7o=o(" \u2014 "),_N=a("a"),U7o=o("XLMRobertaXLForCausalLM"),J7o=o(" (XLM-RoBERTa-XL model)"),Y7o=l(),Q_=a("li"),Rle=a("strong"),K7o=o("xlnet"),Z7o=o(" \u2014 "),bN=a("a"),eMo=o("XLNetLMHeadModel"),oMo=o(" (XLNet model)"),rMo=l(),W_=a("p"),tMo=o("The model is set in evaluation mode by default using "),Ble=a("code"),aMo=o("model.eval()"),nMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=a("code"),sMo=o("model.train()"),lMo=l(),F(H_.$$.fragment),qBe=l(),Ci=a("h2"),U_=a("a"),Ile=a("span"),F(m6.$$.fragment),iMo=l(),qle=a("span"),dMo=o("AutoModelForMaskedLM"),NBe=l(),ko=a("div"),F(g6.$$.fragment),cMo=l(),wi=a("p"),fMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vN=a("a"),mMo=o("from_pretrained()"),gMo=o(" class method or the "),FN=a("a"),hMo=o("from_config()"),pMo=o(` class
method.`),uMo=l(),h6=a("p"),_Mo=o("This class cannot be instantiated directly using "),Nle=a("code"),bMo=o("__init__()"),vMo=o(" (throws an error)."),FMo=l(),rt=a("div"),F(p6.$$.fragment),TMo=l(),jle=a("p"),MMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EMo=l(),Ai=a("p"),CMo=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),wMo=o("not"),AMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),yMo=o("from_pretrained()"),LMo=o(" to load the model weights."),xMo=l(),F(J_.$$.fragment),$Mo=l(),Ye=a("div"),F(u6.$$.fragment),kMo=l(),Gle=a("p"),SMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RMo=l(),Aa=a("p"),BMo=o("The model class to instantiate is selected based on the "),Ole=a("code"),PMo=o("model_type"),IMo=o(` property of the config object (either
passed as an argument or loaded from `),Vle=a("code"),qMo=o("pretrained_model_name_or_path"),NMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),jMo=o("pretrained_model_name_or_path"),DMo=o(":"),GMo=l(),Q=a("ul"),Y_=a("li"),zle=a("strong"),OMo=o("albert"),VMo=o(" \u2014 "),MN=a("a"),XMo=o("AlbertForMaskedLM"),zMo=o(" (ALBERT model)"),QMo=l(),K_=a("li"),Qle=a("strong"),WMo=o("bart"),HMo=o(" \u2014 "),EN=a("a"),UMo=o("BartForConditionalGeneration"),JMo=o(" (BART model)"),YMo=l(),Z_=a("li"),Wle=a("strong"),KMo=o("bert"),ZMo=o(" \u2014 "),CN=a("a"),e4o=o("BertForMaskedLM"),o4o=o(" (BERT model)"),r4o=l(),e1=a("li"),Hle=a("strong"),t4o=o("big_bird"),a4o=o(" \u2014 "),wN=a("a"),n4o=o("BigBirdForMaskedLM"),s4o=o(" (BigBird model)"),l4o=l(),o1=a("li"),Ule=a("strong"),i4o=o("camembert"),d4o=o(" \u2014 "),AN=a("a"),c4o=o("CamembertForMaskedLM"),f4o=o(" (CamemBERT model)"),m4o=l(),r1=a("li"),Jle=a("strong"),g4o=o("convbert"),h4o=o(" \u2014 "),yN=a("a"),p4o=o("ConvBertForMaskedLM"),u4o=o(" (ConvBERT model)"),_4o=l(),t1=a("li"),Yle=a("strong"),b4o=o("data2vec-text"),v4o=o(" \u2014 "),LN=a("a"),F4o=o("Data2VecTextForMaskedLM"),T4o=o(" (Data2VecText model)"),M4o=l(),a1=a("li"),Kle=a("strong"),E4o=o("deberta"),C4o=o(" \u2014 "),xN=a("a"),w4o=o("DebertaForMaskedLM"),A4o=o(" (DeBERTa model)"),y4o=l(),n1=a("li"),Zle=a("strong"),L4o=o("deberta-v2"),x4o=o(" \u2014 "),$N=a("a"),$4o=o("DebertaV2ForMaskedLM"),k4o=o(" (DeBERTa-v2 model)"),S4o=l(),s1=a("li"),eie=a("strong"),R4o=o("distilbert"),B4o=o(" \u2014 "),kN=a("a"),P4o=o("DistilBertForMaskedLM"),I4o=o(" (DistilBERT model)"),q4o=l(),l1=a("li"),oie=a("strong"),N4o=o("electra"),j4o=o(" \u2014 "),SN=a("a"),D4o=o("ElectraForMaskedLM"),G4o=o(" (ELECTRA model)"),O4o=l(),i1=a("li"),rie=a("strong"),V4o=o("flaubert"),X4o=o(" \u2014 "),RN=a("a"),z4o=o("FlaubertWithLMHeadModel"),Q4o=o(" (FlauBERT model)"),W4o=l(),d1=a("li"),tie=a("strong"),H4o=o("fnet"),U4o=o(" \u2014 "),BN=a("a"),J4o=o("FNetForMaskedLM"),Y4o=o(" (FNet model)"),K4o=l(),c1=a("li"),aie=a("strong"),Z4o=o("funnel"),eEo=o(" \u2014 "),PN=a("a"),oEo=o("FunnelForMaskedLM"),rEo=o(" (Funnel Transformer model)"),tEo=l(),f1=a("li"),nie=a("strong"),aEo=o("ibert"),nEo=o(" \u2014 "),IN=a("a"),sEo=o("IBertForMaskedLM"),lEo=o(" (I-BERT model)"),iEo=l(),m1=a("li"),sie=a("strong"),dEo=o("layoutlm"),cEo=o(" \u2014 "),qN=a("a"),fEo=o("LayoutLMForMaskedLM"),mEo=o(" (LayoutLM model)"),gEo=l(),g1=a("li"),lie=a("strong"),hEo=o("longformer"),pEo=o(" \u2014 "),NN=a("a"),uEo=o("LongformerForMaskedLM"),_Eo=o(" (Longformer model)"),bEo=l(),h1=a("li"),iie=a("strong"),vEo=o("mbart"),FEo=o(" \u2014 "),jN=a("a"),TEo=o("MBartForConditionalGeneration"),MEo=o(" (mBART model)"),EEo=l(),p1=a("li"),die=a("strong"),CEo=o("megatron-bert"),wEo=o(" \u2014 "),DN=a("a"),AEo=o("MegatronBertForMaskedLM"),yEo=o(" (MegatronBert model)"),LEo=l(),u1=a("li"),cie=a("strong"),xEo=o("mobilebert"),$Eo=o(" \u2014 "),GN=a("a"),kEo=o("MobileBertForMaskedLM"),SEo=o(" (MobileBERT model)"),REo=l(),_1=a("li"),fie=a("strong"),BEo=o("mpnet"),PEo=o(" \u2014 "),ON=a("a"),IEo=o("MPNetForMaskedLM"),qEo=o(" (MPNet model)"),NEo=l(),b1=a("li"),mie=a("strong"),jEo=o("nystromformer"),DEo=o(" \u2014 "),VN=a("a"),GEo=o("NystromformerForMaskedLM"),OEo=o(" (Nystromformer model)"),VEo=l(),v1=a("li"),gie=a("strong"),XEo=o("perceiver"),zEo=o(" \u2014 "),XN=a("a"),QEo=o("PerceiverForMaskedLM"),WEo=o(" (Perceiver model)"),HEo=l(),F1=a("li"),hie=a("strong"),UEo=o("qdqbert"),JEo=o(" \u2014 "),zN=a("a"),YEo=o("QDQBertForMaskedLM"),KEo=o(" (QDQBert model)"),ZEo=l(),T1=a("li"),pie=a("strong"),eCo=o("reformer"),oCo=o(" \u2014 "),QN=a("a"),rCo=o("ReformerForMaskedLM"),tCo=o(" (Reformer model)"),aCo=l(),M1=a("li"),uie=a("strong"),nCo=o("rembert"),sCo=o(" \u2014 "),WN=a("a"),lCo=o("RemBertForMaskedLM"),iCo=o(" (RemBERT model)"),dCo=l(),E1=a("li"),_ie=a("strong"),cCo=o("roberta"),fCo=o(" \u2014 "),HN=a("a"),mCo=o("RobertaForMaskedLM"),gCo=o(" (RoBERTa model)"),hCo=l(),C1=a("li"),bie=a("strong"),pCo=o("roformer"),uCo=o(" \u2014 "),UN=a("a"),_Co=o("RoFormerForMaskedLM"),bCo=o(" (RoFormer model)"),vCo=l(),w1=a("li"),vie=a("strong"),FCo=o("squeezebert"),TCo=o(" \u2014 "),JN=a("a"),MCo=o("SqueezeBertForMaskedLM"),ECo=o(" (SqueezeBERT model)"),CCo=l(),A1=a("li"),Fie=a("strong"),wCo=o("tapas"),ACo=o(" \u2014 "),YN=a("a"),yCo=o("TapasForMaskedLM"),LCo=o(" (TAPAS model)"),xCo=l(),y1=a("li"),Tie=a("strong"),$Co=o("wav2vec2"),kCo=o(" \u2014 "),Mie=a("code"),SCo=o("Wav2Vec2ForMaskedLM"),RCo=o(" (Wav2Vec2 model)"),BCo=l(),L1=a("li"),Eie=a("strong"),PCo=o("xlm"),ICo=o(" \u2014 "),KN=a("a"),qCo=o("XLMWithLMHeadModel"),NCo=o(" (XLM model)"),jCo=l(),x1=a("li"),Cie=a("strong"),DCo=o("xlm-roberta"),GCo=o(" \u2014 "),ZN=a("a"),OCo=o("XLMRobertaForMaskedLM"),VCo=o(" (XLM-RoBERTa model)"),XCo=l(),$1=a("li"),wie=a("strong"),zCo=o("xlm-roberta-xl"),QCo=o(" \u2014 "),ej=a("a"),WCo=o("XLMRobertaXLForMaskedLM"),HCo=o(" (XLM-RoBERTa-XL model)"),UCo=l(),k1=a("li"),Aie=a("strong"),JCo=o("yoso"),YCo=o(" \u2014 "),oj=a("a"),KCo=o("YosoForMaskedLM"),ZCo=o(" (YOSO model)"),ewo=l(),S1=a("p"),owo=o("The model is set in evaluation mode by default using "),yie=a("code"),rwo=o("model.eval()"),two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),awo=o("model.train()"),nwo=l(),F(R1.$$.fragment),jBe=l(),yi=a("h2"),B1=a("a"),xie=a("span"),F(_6.$$.fragment),swo=l(),$ie=a("span"),lwo=o("AutoModelForSeq2SeqLM"),DBe=l(),So=a("div"),F(b6.$$.fragment),iwo=l(),Li=a("p"),dwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rj=a("a"),cwo=o("from_pretrained()"),fwo=o(" class method or the "),tj=a("a"),mwo=o("from_config()"),gwo=o(` class
method.`),hwo=l(),v6=a("p"),pwo=o("This class cannot be instantiated directly using "),kie=a("code"),uwo=o("__init__()"),_wo=o(" (throws an error)."),bwo=l(),tt=a("div"),F(F6.$$.fragment),vwo=l(),Sie=a("p"),Fwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Two=l(),xi=a("p"),Mwo=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),Ewo=o("not"),Cwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=a("a"),wwo=o("from_pretrained()"),Awo=o(" to load the model weights."),ywo=l(),F(P1.$$.fragment),Lwo=l(),Ke=a("div"),F(T6.$$.fragment),xwo=l(),Bie=a("p"),$wo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kwo=l(),ya=a("p"),Swo=o("The model class to instantiate is selected based on the "),Pie=a("code"),Rwo=o("model_type"),Bwo=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),Pwo=o("pretrained_model_name_or_path"),Iwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),qwo=o("pretrained_model_name_or_path"),Nwo=o(":"),jwo=l(),he=a("ul"),I1=a("li"),Nie=a("strong"),Dwo=o("bart"),Gwo=o(" \u2014 "),nj=a("a"),Owo=o("BartForConditionalGeneration"),Vwo=o(" (BART model)"),Xwo=l(),q1=a("li"),jie=a("strong"),zwo=o("bigbird_pegasus"),Qwo=o(" \u2014 "),sj=a("a"),Wwo=o("BigBirdPegasusForConditionalGeneration"),Hwo=o(" (BigBirdPegasus model)"),Uwo=l(),N1=a("li"),Die=a("strong"),Jwo=o("blenderbot"),Ywo=o(" \u2014 "),lj=a("a"),Kwo=o("BlenderbotForConditionalGeneration"),Zwo=o(" (Blenderbot model)"),eAo=l(),j1=a("li"),Gie=a("strong"),oAo=o("blenderbot-small"),rAo=o(" \u2014 "),ij=a("a"),tAo=o("BlenderbotSmallForConditionalGeneration"),aAo=o(" (BlenderbotSmall model)"),nAo=l(),D1=a("li"),Oie=a("strong"),sAo=o("encoder-decoder"),lAo=o(" \u2014 "),dj=a("a"),iAo=o("EncoderDecoderModel"),dAo=o(" (Encoder decoder model)"),cAo=l(),G1=a("li"),Vie=a("strong"),fAo=o("fsmt"),mAo=o(" \u2014 "),cj=a("a"),gAo=o("FSMTForConditionalGeneration"),hAo=o(" (FairSeq Machine-Translation model)"),pAo=l(),O1=a("li"),Xie=a("strong"),uAo=o("led"),_Ao=o(" \u2014 "),fj=a("a"),bAo=o("LEDForConditionalGeneration"),vAo=o(" (LED model)"),FAo=l(),V1=a("li"),zie=a("strong"),TAo=o("m2m_100"),MAo=o(" \u2014 "),mj=a("a"),EAo=o("M2M100ForConditionalGeneration"),CAo=o(" (M2M100 model)"),wAo=l(),X1=a("li"),Qie=a("strong"),AAo=o("marian"),yAo=o(" \u2014 "),gj=a("a"),LAo=o("MarianMTModel"),xAo=o(" (Marian model)"),$Ao=l(),z1=a("li"),Wie=a("strong"),kAo=o("mbart"),SAo=o(" \u2014 "),hj=a("a"),RAo=o("MBartForConditionalGeneration"),BAo=o(" (mBART model)"),PAo=l(),Q1=a("li"),Hie=a("strong"),IAo=o("mt5"),qAo=o(" \u2014 "),pj=a("a"),NAo=o("MT5ForConditionalGeneration"),jAo=o(" (mT5 model)"),DAo=l(),W1=a("li"),Uie=a("strong"),GAo=o("pegasus"),OAo=o(" \u2014 "),uj=a("a"),VAo=o("PegasusForConditionalGeneration"),XAo=o(" (Pegasus model)"),zAo=l(),H1=a("li"),Jie=a("strong"),QAo=o("plbart"),WAo=o(" \u2014 "),_j=a("a"),HAo=o("PLBartForConditionalGeneration"),UAo=o(" (PLBart model)"),JAo=l(),U1=a("li"),Yie=a("strong"),YAo=o("prophetnet"),KAo=o(" \u2014 "),bj=a("a"),ZAo=o("ProphetNetForConditionalGeneration"),e0o=o(" (ProphetNet model)"),o0o=l(),J1=a("li"),Kie=a("strong"),r0o=o("t5"),t0o=o(" \u2014 "),vj=a("a"),a0o=o("T5ForConditionalGeneration"),n0o=o(" (T5 model)"),s0o=l(),Y1=a("li"),Zie=a("strong"),l0o=o("tapex"),i0o=o(" \u2014 "),Fj=a("a"),d0o=o("BartForConditionalGeneration"),c0o=o(" (TAPEX model)"),f0o=l(),K1=a("li"),ede=a("strong"),m0o=o("xlm-prophetnet"),g0o=o(" \u2014 "),Tj=a("a"),h0o=o("XLMProphetNetForConditionalGeneration"),p0o=o(" (XLMProphetNet model)"),u0o=l(),Z1=a("p"),_0o=o("The model is set in evaluation mode by default using "),ode=a("code"),b0o=o("model.eval()"),v0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),F0o=o("model.train()"),T0o=l(),F(eb.$$.fragment),GBe=l(),$i=a("h2"),ob=a("a"),tde=a("span"),F(M6.$$.fragment),M0o=l(),ade=a("span"),E0o=o("AutoModelForSequenceClassification"),OBe=l(),Ro=a("div"),F(E6.$$.fragment),C0o=l(),ki=a("p"),w0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mj=a("a"),A0o=o("from_pretrained()"),y0o=o(" class method or the "),Ej=a("a"),L0o=o("from_config()"),x0o=o(` class
method.`),$0o=l(),C6=a("p"),k0o=o("This class cannot be instantiated directly using "),nde=a("code"),S0o=o("__init__()"),R0o=o(" (throws an error)."),B0o=l(),at=a("div"),F(w6.$$.fragment),P0o=l(),sde=a("p"),I0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q0o=l(),Si=a("p"),N0o=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),j0o=o("not"),D0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),G0o=o("from_pretrained()"),O0o=o(" to load the model weights."),V0o=l(),F(rb.$$.fragment),X0o=l(),Ze=a("div"),F(A6.$$.fragment),z0o=l(),ide=a("p"),Q0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W0o=l(),La=a("p"),H0o=o("The model class to instantiate is selected based on the "),dde=a("code"),U0o=o("model_type"),J0o=o(` property of the config object (either
passed as an argument or loaded from `),cde=a("code"),Y0o=o("pretrained_model_name_or_path"),K0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=a("code"),Z0o=o("pretrained_model_name_or_path"),e6o=o(":"),o6o=l(),q=a("ul"),tb=a("li"),mde=a("strong"),r6o=o("albert"),t6o=o(" \u2014 "),wj=a("a"),a6o=o("AlbertForSequenceClassification"),n6o=o(" (ALBERT model)"),s6o=l(),ab=a("li"),gde=a("strong"),l6o=o("bart"),i6o=o(" \u2014 "),Aj=a("a"),d6o=o("BartForSequenceClassification"),c6o=o(" (BART model)"),f6o=l(),nb=a("li"),hde=a("strong"),m6o=o("bert"),g6o=o(" \u2014 "),yj=a("a"),h6o=o("BertForSequenceClassification"),p6o=o(" (BERT model)"),u6o=l(),sb=a("li"),pde=a("strong"),_6o=o("big_bird"),b6o=o(" \u2014 "),Lj=a("a"),v6o=o("BigBirdForSequenceClassification"),F6o=o(" (BigBird model)"),T6o=l(),lb=a("li"),ude=a("strong"),M6o=o("bigbird_pegasus"),E6o=o(" \u2014 "),xj=a("a"),C6o=o("BigBirdPegasusForSequenceClassification"),w6o=o(" (BigBirdPegasus model)"),A6o=l(),ib=a("li"),_de=a("strong"),y6o=o("camembert"),L6o=o(" \u2014 "),$j=a("a"),x6o=o("CamembertForSequenceClassification"),$6o=o(" (CamemBERT model)"),k6o=l(),db=a("li"),bde=a("strong"),S6o=o("canine"),R6o=o(" \u2014 "),kj=a("a"),B6o=o("CanineForSequenceClassification"),P6o=o(" (Canine model)"),I6o=l(),cb=a("li"),vde=a("strong"),q6o=o("convbert"),N6o=o(" \u2014 "),Sj=a("a"),j6o=o("ConvBertForSequenceClassification"),D6o=o(" (ConvBERT model)"),G6o=l(),fb=a("li"),Fde=a("strong"),O6o=o("ctrl"),V6o=o(" \u2014 "),Rj=a("a"),X6o=o("CTRLForSequenceClassification"),z6o=o(" (CTRL model)"),Q6o=l(),mb=a("li"),Tde=a("strong"),W6o=o("data2vec-text"),H6o=o(" \u2014 "),Bj=a("a"),U6o=o("Data2VecTextForSequenceClassification"),J6o=o(" (Data2VecText model)"),Y6o=l(),gb=a("li"),Mde=a("strong"),K6o=o("deberta"),Z6o=o(" \u2014 "),Pj=a("a"),eyo=o("DebertaForSequenceClassification"),oyo=o(" (DeBERTa model)"),ryo=l(),hb=a("li"),Ede=a("strong"),tyo=o("deberta-v2"),ayo=o(" \u2014 "),Ij=a("a"),nyo=o("DebertaV2ForSequenceClassification"),syo=o(" (DeBERTa-v2 model)"),lyo=l(),pb=a("li"),Cde=a("strong"),iyo=o("distilbert"),dyo=o(" \u2014 "),qj=a("a"),cyo=o("DistilBertForSequenceClassification"),fyo=o(" (DistilBERT model)"),myo=l(),ub=a("li"),wde=a("strong"),gyo=o("electra"),hyo=o(" \u2014 "),Nj=a("a"),pyo=o("ElectraForSequenceClassification"),uyo=o(" (ELECTRA model)"),_yo=l(),_b=a("li"),Ade=a("strong"),byo=o("flaubert"),vyo=o(" \u2014 "),jj=a("a"),Fyo=o("FlaubertForSequenceClassification"),Tyo=o(" (FlauBERT model)"),Myo=l(),bb=a("li"),yde=a("strong"),Eyo=o("fnet"),Cyo=o(" \u2014 "),Dj=a("a"),wyo=o("FNetForSequenceClassification"),Ayo=o(" (FNet model)"),yyo=l(),vb=a("li"),Lde=a("strong"),Lyo=o("funnel"),xyo=o(" \u2014 "),Gj=a("a"),$yo=o("FunnelForSequenceClassification"),kyo=o(" (Funnel Transformer model)"),Syo=l(),Fb=a("li"),xde=a("strong"),Ryo=o("gpt2"),Byo=o(" \u2014 "),Oj=a("a"),Pyo=o("GPT2ForSequenceClassification"),Iyo=o(" (OpenAI GPT-2 model)"),qyo=l(),Tb=a("li"),$de=a("strong"),Nyo=o("gpt_neo"),jyo=o(" \u2014 "),Vj=a("a"),Dyo=o("GPTNeoForSequenceClassification"),Gyo=o(" (GPT Neo model)"),Oyo=l(),Mb=a("li"),kde=a("strong"),Vyo=o("gptj"),Xyo=o(" \u2014 "),Xj=a("a"),zyo=o("GPTJForSequenceClassification"),Qyo=o(" (GPT-J model)"),Wyo=l(),Eb=a("li"),Sde=a("strong"),Hyo=o("ibert"),Uyo=o(" \u2014 "),zj=a("a"),Jyo=o("IBertForSequenceClassification"),Yyo=o(" (I-BERT model)"),Kyo=l(),Cb=a("li"),Rde=a("strong"),Zyo=o("layoutlm"),eLo=o(" \u2014 "),Qj=a("a"),oLo=o("LayoutLMForSequenceClassification"),rLo=o(" (LayoutLM model)"),tLo=l(),wb=a("li"),Bde=a("strong"),aLo=o("layoutlmv2"),nLo=o(" \u2014 "),Wj=a("a"),sLo=o("LayoutLMv2ForSequenceClassification"),lLo=o(" (LayoutLMv2 model)"),iLo=l(),Ab=a("li"),Pde=a("strong"),dLo=o("led"),cLo=o(" \u2014 "),Hj=a("a"),fLo=o("LEDForSequenceClassification"),mLo=o(" (LED model)"),gLo=l(),yb=a("li"),Ide=a("strong"),hLo=o("longformer"),pLo=o(" \u2014 "),Uj=a("a"),uLo=o("LongformerForSequenceClassification"),_Lo=o(" (Longformer model)"),bLo=l(),Lb=a("li"),qde=a("strong"),vLo=o("mbart"),FLo=o(" \u2014 "),Jj=a("a"),TLo=o("MBartForSequenceClassification"),MLo=o(" (mBART model)"),ELo=l(),xb=a("li"),Nde=a("strong"),CLo=o("megatron-bert"),wLo=o(" \u2014 "),Yj=a("a"),ALo=o("MegatronBertForSequenceClassification"),yLo=o(" (MegatronBert model)"),LLo=l(),$b=a("li"),jde=a("strong"),xLo=o("mobilebert"),$Lo=o(" \u2014 "),Kj=a("a"),kLo=o("MobileBertForSequenceClassification"),SLo=o(" (MobileBERT model)"),RLo=l(),kb=a("li"),Dde=a("strong"),BLo=o("mpnet"),PLo=o(" \u2014 "),Zj=a("a"),ILo=o("MPNetForSequenceClassification"),qLo=o(" (MPNet model)"),NLo=l(),Sb=a("li"),Gde=a("strong"),jLo=o("nystromformer"),DLo=o(" \u2014 "),eD=a("a"),GLo=o("NystromformerForSequenceClassification"),OLo=o(" (Nystromformer model)"),VLo=l(),Rb=a("li"),Ode=a("strong"),XLo=o("openai-gpt"),zLo=o(" \u2014 "),oD=a("a"),QLo=o("OpenAIGPTForSequenceClassification"),WLo=o(" (OpenAI GPT model)"),HLo=l(),Bb=a("li"),Vde=a("strong"),ULo=o("perceiver"),JLo=o(" \u2014 "),rD=a("a"),YLo=o("PerceiverForSequenceClassification"),KLo=o(" (Perceiver model)"),ZLo=l(),Pb=a("li"),Xde=a("strong"),e8o=o("plbart"),o8o=o(" \u2014 "),tD=a("a"),r8o=o("PLBartForSequenceClassification"),t8o=o(" (PLBart model)"),a8o=l(),Ib=a("li"),zde=a("strong"),n8o=o("qdqbert"),s8o=o(" \u2014 "),aD=a("a"),l8o=o("QDQBertForSequenceClassification"),i8o=o(" (QDQBert model)"),d8o=l(),qb=a("li"),Qde=a("strong"),c8o=o("reformer"),f8o=o(" \u2014 "),nD=a("a"),m8o=o("ReformerForSequenceClassification"),g8o=o(" (Reformer model)"),h8o=l(),Nb=a("li"),Wde=a("strong"),p8o=o("rembert"),u8o=o(" \u2014 "),sD=a("a"),_8o=o("RemBertForSequenceClassification"),b8o=o(" (RemBERT model)"),v8o=l(),jb=a("li"),Hde=a("strong"),F8o=o("roberta"),T8o=o(" \u2014 "),lD=a("a"),M8o=o("RobertaForSequenceClassification"),E8o=o(" (RoBERTa model)"),C8o=l(),Db=a("li"),Ude=a("strong"),w8o=o("roformer"),A8o=o(" \u2014 "),iD=a("a"),y8o=o("RoFormerForSequenceClassification"),L8o=o(" (RoFormer model)"),x8o=l(),Gb=a("li"),Jde=a("strong"),$8o=o("squeezebert"),k8o=o(" \u2014 "),dD=a("a"),S8o=o("SqueezeBertForSequenceClassification"),R8o=o(" (SqueezeBERT model)"),B8o=l(),Ob=a("li"),Yde=a("strong"),P8o=o("tapas"),I8o=o(" \u2014 "),cD=a("a"),q8o=o("TapasForSequenceClassification"),N8o=o(" (TAPAS model)"),j8o=l(),Vb=a("li"),Kde=a("strong"),D8o=o("tapex"),G8o=o(" \u2014 "),fD=a("a"),O8o=o("BartForSequenceClassification"),V8o=o(" (TAPEX model)"),X8o=l(),Xb=a("li"),Zde=a("strong"),z8o=o("transfo-xl"),Q8o=o(" \u2014 "),mD=a("a"),W8o=o("TransfoXLForSequenceClassification"),H8o=o(" (Transformer-XL model)"),U8o=l(),zb=a("li"),ece=a("strong"),J8o=o("xlm"),Y8o=o(" \u2014 "),gD=a("a"),K8o=o("XLMForSequenceClassification"),Z8o=o(" (XLM model)"),exo=l(),Qb=a("li"),oce=a("strong"),oxo=o("xlm-roberta"),rxo=o(" \u2014 "),hD=a("a"),txo=o("XLMRobertaForSequenceClassification"),axo=o(" (XLM-RoBERTa model)"),nxo=l(),Wb=a("li"),rce=a("strong"),sxo=o("xlm-roberta-xl"),lxo=o(" \u2014 "),pD=a("a"),ixo=o("XLMRobertaXLForSequenceClassification"),dxo=o(" (XLM-RoBERTa-XL model)"),cxo=l(),Hb=a("li"),tce=a("strong"),fxo=o("xlnet"),mxo=o(" \u2014 "),uD=a("a"),gxo=o("XLNetForSequenceClassification"),hxo=o(" (XLNet model)"),pxo=l(),Ub=a("li"),ace=a("strong"),uxo=o("yoso"),_xo=o(" \u2014 "),_D=a("a"),bxo=o("YosoForSequenceClassification"),vxo=o(" (YOSO model)"),Fxo=l(),Jb=a("p"),Txo=o("The model is set in evaluation mode by default using "),nce=a("code"),Mxo=o("model.eval()"),Exo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=a("code"),Cxo=o("model.train()"),wxo=l(),F(Yb.$$.fragment),VBe=l(),Ri=a("h2"),Kb=a("a"),lce=a("span"),F(y6.$$.fragment),Axo=l(),ice=a("span"),yxo=o("AutoModelForMultipleChoice"),XBe=l(),Bo=a("div"),F(L6.$$.fragment),Lxo=l(),Bi=a("p"),xxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bD=a("a"),$xo=o("from_pretrained()"),kxo=o(" class method or the "),vD=a("a"),Sxo=o("from_config()"),Rxo=o(` class
method.`),Bxo=l(),x6=a("p"),Pxo=o("This class cannot be instantiated directly using "),dce=a("code"),Ixo=o("__init__()"),qxo=o(" (throws an error)."),Nxo=l(),nt=a("div"),F($6.$$.fragment),jxo=l(),cce=a("p"),Dxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Gxo=l(),Pi=a("p"),Oxo=o(`Note:
Loading a model from its configuration file does `),fce=a("strong"),Vxo=o("not"),Xxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),zxo=o("from_pretrained()"),Qxo=o(" to load the model weights."),Wxo=l(),F(Zb.$$.fragment),Hxo=l(),eo=a("div"),F(k6.$$.fragment),Uxo=l(),mce=a("p"),Jxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yxo=l(),xa=a("p"),Kxo=o("The model class to instantiate is selected based on the "),gce=a("code"),Zxo=o("model_type"),e9o=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),o9o=o("pretrained_model_name_or_path"),r9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=a("code"),t9o=o("pretrained_model_name_or_path"),a9o=o(":"),n9o=l(),Y=a("ul"),e2=a("li"),uce=a("strong"),s9o=o("albert"),l9o=o(" \u2014 "),TD=a("a"),i9o=o("AlbertForMultipleChoice"),d9o=o(" (ALBERT model)"),c9o=l(),o2=a("li"),_ce=a("strong"),f9o=o("bert"),m9o=o(" \u2014 "),MD=a("a"),g9o=o("BertForMultipleChoice"),h9o=o(" (BERT model)"),p9o=l(),r2=a("li"),bce=a("strong"),u9o=o("big_bird"),_9o=o(" \u2014 "),ED=a("a"),b9o=o("BigBirdForMultipleChoice"),v9o=o(" (BigBird model)"),F9o=l(),t2=a("li"),vce=a("strong"),T9o=o("camembert"),M9o=o(" \u2014 "),CD=a("a"),E9o=o("CamembertForMultipleChoice"),C9o=o(" (CamemBERT model)"),w9o=l(),a2=a("li"),Fce=a("strong"),A9o=o("canine"),y9o=o(" \u2014 "),wD=a("a"),L9o=o("CanineForMultipleChoice"),x9o=o(" (Canine model)"),$9o=l(),n2=a("li"),Tce=a("strong"),k9o=o("convbert"),S9o=o(" \u2014 "),AD=a("a"),R9o=o("ConvBertForMultipleChoice"),B9o=o(" (ConvBERT model)"),P9o=l(),s2=a("li"),Mce=a("strong"),I9o=o("data2vec-text"),q9o=o(" \u2014 "),yD=a("a"),N9o=o("Data2VecTextForMultipleChoice"),j9o=o(" (Data2VecText model)"),D9o=l(),l2=a("li"),Ece=a("strong"),G9o=o("deberta-v2"),O9o=o(" \u2014 "),LD=a("a"),V9o=o("DebertaV2ForMultipleChoice"),X9o=o(" (DeBERTa-v2 model)"),z9o=l(),i2=a("li"),Cce=a("strong"),Q9o=o("distilbert"),W9o=o(" \u2014 "),xD=a("a"),H9o=o("DistilBertForMultipleChoice"),U9o=o(" (DistilBERT model)"),J9o=l(),d2=a("li"),wce=a("strong"),Y9o=o("electra"),K9o=o(" \u2014 "),$D=a("a"),Z9o=o("ElectraForMultipleChoice"),e$o=o(" (ELECTRA model)"),o$o=l(),c2=a("li"),Ace=a("strong"),r$o=o("flaubert"),t$o=o(" \u2014 "),kD=a("a"),a$o=o("FlaubertForMultipleChoice"),n$o=o(" (FlauBERT model)"),s$o=l(),f2=a("li"),yce=a("strong"),l$o=o("fnet"),i$o=o(" \u2014 "),SD=a("a"),d$o=o("FNetForMultipleChoice"),c$o=o(" (FNet model)"),f$o=l(),m2=a("li"),Lce=a("strong"),m$o=o("funnel"),g$o=o(" \u2014 "),RD=a("a"),h$o=o("FunnelForMultipleChoice"),p$o=o(" (Funnel Transformer model)"),u$o=l(),g2=a("li"),xce=a("strong"),_$o=o("ibert"),b$o=o(" \u2014 "),BD=a("a"),v$o=o("IBertForMultipleChoice"),F$o=o(" (I-BERT model)"),T$o=l(),h2=a("li"),$ce=a("strong"),M$o=o("longformer"),E$o=o(" \u2014 "),PD=a("a"),C$o=o("LongformerForMultipleChoice"),w$o=o(" (Longformer model)"),A$o=l(),p2=a("li"),kce=a("strong"),y$o=o("megatron-bert"),L$o=o(" \u2014 "),ID=a("a"),x$o=o("MegatronBertForMultipleChoice"),$$o=o(" (MegatronBert model)"),k$o=l(),u2=a("li"),Sce=a("strong"),S$o=o("mobilebert"),R$o=o(" \u2014 "),qD=a("a"),B$o=o("MobileBertForMultipleChoice"),P$o=o(" (MobileBERT model)"),I$o=l(),_2=a("li"),Rce=a("strong"),q$o=o("mpnet"),N$o=o(" \u2014 "),ND=a("a"),j$o=o("MPNetForMultipleChoice"),D$o=o(" (MPNet model)"),G$o=l(),b2=a("li"),Bce=a("strong"),O$o=o("nystromformer"),V$o=o(" \u2014 "),jD=a("a"),X$o=o("NystromformerForMultipleChoice"),z$o=o(" (Nystromformer model)"),Q$o=l(),v2=a("li"),Pce=a("strong"),W$o=o("qdqbert"),H$o=o(" \u2014 "),DD=a("a"),U$o=o("QDQBertForMultipleChoice"),J$o=o(" (QDQBert model)"),Y$o=l(),F2=a("li"),Ice=a("strong"),K$o=o("rembert"),Z$o=o(" \u2014 "),GD=a("a"),eko=o("RemBertForMultipleChoice"),oko=o(" (RemBERT model)"),rko=l(),T2=a("li"),qce=a("strong"),tko=o("roberta"),ako=o(" \u2014 "),OD=a("a"),nko=o("RobertaForMultipleChoice"),sko=o(" (RoBERTa model)"),lko=l(),M2=a("li"),Nce=a("strong"),iko=o("roformer"),dko=o(" \u2014 "),VD=a("a"),cko=o("RoFormerForMultipleChoice"),fko=o(" (RoFormer model)"),mko=l(),E2=a("li"),jce=a("strong"),gko=o("squeezebert"),hko=o(" \u2014 "),XD=a("a"),pko=o("SqueezeBertForMultipleChoice"),uko=o(" (SqueezeBERT model)"),_ko=l(),C2=a("li"),Dce=a("strong"),bko=o("xlm"),vko=o(" \u2014 "),zD=a("a"),Fko=o("XLMForMultipleChoice"),Tko=o(" (XLM model)"),Mko=l(),w2=a("li"),Gce=a("strong"),Eko=o("xlm-roberta"),Cko=o(" \u2014 "),QD=a("a"),wko=o("XLMRobertaForMultipleChoice"),Ako=o(" (XLM-RoBERTa model)"),yko=l(),A2=a("li"),Oce=a("strong"),Lko=o("xlm-roberta-xl"),xko=o(" \u2014 "),WD=a("a"),$ko=o("XLMRobertaXLForMultipleChoice"),kko=o(" (XLM-RoBERTa-XL model)"),Sko=l(),y2=a("li"),Vce=a("strong"),Rko=o("xlnet"),Bko=o(" \u2014 "),HD=a("a"),Pko=o("XLNetForMultipleChoice"),Iko=o(" (XLNet model)"),qko=l(),L2=a("li"),Xce=a("strong"),Nko=o("yoso"),jko=o(" \u2014 "),UD=a("a"),Dko=o("YosoForMultipleChoice"),Gko=o(" (YOSO model)"),Oko=l(),x2=a("p"),Vko=o("The model is set in evaluation mode by default using "),zce=a("code"),Xko=o("model.eval()"),zko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),Qko=o("model.train()"),Wko=l(),F($2.$$.fragment),zBe=l(),Ii=a("h2"),k2=a("a"),Wce=a("span"),F(S6.$$.fragment),Hko=l(),Hce=a("span"),Uko=o("AutoModelForNextSentencePrediction"),QBe=l(),Po=a("div"),F(R6.$$.fragment),Jko=l(),qi=a("p"),Yko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JD=a("a"),Kko=o("from_pretrained()"),Zko=o(" class method or the "),YD=a("a"),eSo=o("from_config()"),oSo=o(` class
method.`),rSo=l(),B6=a("p"),tSo=o("This class cannot be instantiated directly using "),Uce=a("code"),aSo=o("__init__()"),nSo=o(" (throws an error)."),sSo=l(),st=a("div"),F(P6.$$.fragment),lSo=l(),Jce=a("p"),iSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dSo=l(),Ni=a("p"),cSo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),fSo=o("not"),mSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),gSo=o("from_pretrained()"),hSo=o(" to load the model weights."),pSo=l(),F(S2.$$.fragment),uSo=l(),oo=a("div"),F(I6.$$.fragment),_So=l(),Kce=a("p"),bSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vSo=l(),$a=a("p"),FSo=o("The model class to instantiate is selected based on the "),Zce=a("code"),TSo=o("model_type"),MSo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),ESo=o("pretrained_model_name_or_path"),CSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),wSo=o("pretrained_model_name_or_path"),ASo=o(":"),ySo=l(),Ur=a("ul"),R2=a("li"),rfe=a("strong"),LSo=o("bert"),xSo=o(" \u2014 "),ZD=a("a"),$So=o("BertForNextSentencePrediction"),kSo=o(" (BERT model)"),SSo=l(),B2=a("li"),tfe=a("strong"),RSo=o("fnet"),BSo=o(" \u2014 "),eG=a("a"),PSo=o("FNetForNextSentencePrediction"),ISo=o(" (FNet model)"),qSo=l(),P2=a("li"),afe=a("strong"),NSo=o("megatron-bert"),jSo=o(" \u2014 "),oG=a("a"),DSo=o("MegatronBertForNextSentencePrediction"),GSo=o(" (MegatronBert model)"),OSo=l(),I2=a("li"),nfe=a("strong"),VSo=o("mobilebert"),XSo=o(" \u2014 "),rG=a("a"),zSo=o("MobileBertForNextSentencePrediction"),QSo=o(" (MobileBERT model)"),WSo=l(),q2=a("li"),sfe=a("strong"),HSo=o("qdqbert"),USo=o(" \u2014 "),tG=a("a"),JSo=o("QDQBertForNextSentencePrediction"),YSo=o(" (QDQBert model)"),KSo=l(),N2=a("p"),ZSo=o("The model is set in evaluation mode by default using "),lfe=a("code"),eRo=o("model.eval()"),oRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),rRo=o("model.train()"),tRo=l(),F(j2.$$.fragment),WBe=l(),ji=a("h2"),D2=a("a"),dfe=a("span"),F(q6.$$.fragment),aRo=l(),cfe=a("span"),nRo=o("AutoModelForTokenClassification"),HBe=l(),Io=a("div"),F(N6.$$.fragment),sRo=l(),Di=a("p"),lRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aG=a("a"),iRo=o("from_pretrained()"),dRo=o(" class method or the "),nG=a("a"),cRo=o("from_config()"),fRo=o(` class
method.`),mRo=l(),j6=a("p"),gRo=o("This class cannot be instantiated directly using "),ffe=a("code"),hRo=o("__init__()"),pRo=o(" (throws an error)."),uRo=l(),lt=a("div"),F(D6.$$.fragment),_Ro=l(),mfe=a("p"),bRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vRo=l(),Gi=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),TRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),ERo=o("from_pretrained()"),CRo=o(" to load the model weights."),wRo=l(),F(G2.$$.fragment),ARo=l(),ro=a("div"),F(G6.$$.fragment),yRo=l(),hfe=a("p"),LRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xRo=l(),ka=a("p"),$Ro=o("The model class to instantiate is selected based on the "),pfe=a("code"),kRo=o("model_type"),SRo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),RRo=o("pretrained_model_name_or_path"),BRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=a("code"),PRo=o("pretrained_model_name_or_path"),IRo=o(":"),qRo=l(),U=a("ul"),O2=a("li"),bfe=a("strong"),NRo=o("albert"),jRo=o(" \u2014 "),lG=a("a"),DRo=o("AlbertForTokenClassification"),GRo=o(" (ALBERT model)"),ORo=l(),V2=a("li"),vfe=a("strong"),VRo=o("bert"),XRo=o(" \u2014 "),iG=a("a"),zRo=o("BertForTokenClassification"),QRo=o(" (BERT model)"),WRo=l(),X2=a("li"),Ffe=a("strong"),HRo=o("big_bird"),URo=o(" \u2014 "),dG=a("a"),JRo=o("BigBirdForTokenClassification"),YRo=o(" (BigBird model)"),KRo=l(),z2=a("li"),Tfe=a("strong"),ZRo=o("camembert"),eBo=o(" \u2014 "),cG=a("a"),oBo=o("CamembertForTokenClassification"),rBo=o(" (CamemBERT model)"),tBo=l(),Q2=a("li"),Mfe=a("strong"),aBo=o("canine"),nBo=o(" \u2014 "),fG=a("a"),sBo=o("CanineForTokenClassification"),lBo=o(" (Canine model)"),iBo=l(),W2=a("li"),Efe=a("strong"),dBo=o("convbert"),cBo=o(" \u2014 "),mG=a("a"),fBo=o("ConvBertForTokenClassification"),mBo=o(" (ConvBERT model)"),gBo=l(),H2=a("li"),Cfe=a("strong"),hBo=o("data2vec-text"),pBo=o(" \u2014 "),gG=a("a"),uBo=o("Data2VecTextForTokenClassification"),_Bo=o(" (Data2VecText model)"),bBo=l(),U2=a("li"),wfe=a("strong"),vBo=o("deberta"),FBo=o(" \u2014 "),hG=a("a"),TBo=o("DebertaForTokenClassification"),MBo=o(" (DeBERTa model)"),EBo=l(),J2=a("li"),Afe=a("strong"),CBo=o("deberta-v2"),wBo=o(" \u2014 "),pG=a("a"),ABo=o("DebertaV2ForTokenClassification"),yBo=o(" (DeBERTa-v2 model)"),LBo=l(),Y2=a("li"),yfe=a("strong"),xBo=o("distilbert"),$Bo=o(" \u2014 "),uG=a("a"),kBo=o("DistilBertForTokenClassification"),SBo=o(" (DistilBERT model)"),RBo=l(),K2=a("li"),Lfe=a("strong"),BBo=o("electra"),PBo=o(" \u2014 "),_G=a("a"),IBo=o("ElectraForTokenClassification"),qBo=o(" (ELECTRA model)"),NBo=l(),Z2=a("li"),xfe=a("strong"),jBo=o("flaubert"),DBo=o(" \u2014 "),bG=a("a"),GBo=o("FlaubertForTokenClassification"),OBo=o(" (FlauBERT model)"),VBo=l(),e5=a("li"),$fe=a("strong"),XBo=o("fnet"),zBo=o(" \u2014 "),vG=a("a"),QBo=o("FNetForTokenClassification"),WBo=o(" (FNet model)"),HBo=l(),o5=a("li"),kfe=a("strong"),UBo=o("funnel"),JBo=o(" \u2014 "),FG=a("a"),YBo=o("FunnelForTokenClassification"),KBo=o(" (Funnel Transformer model)"),ZBo=l(),r5=a("li"),Sfe=a("strong"),ePo=o("gpt2"),oPo=o(" \u2014 "),TG=a("a"),rPo=o("GPT2ForTokenClassification"),tPo=o(" (OpenAI GPT-2 model)"),aPo=l(),t5=a("li"),Rfe=a("strong"),nPo=o("ibert"),sPo=o(" \u2014 "),MG=a("a"),lPo=o("IBertForTokenClassification"),iPo=o(" (I-BERT model)"),dPo=l(),a5=a("li"),Bfe=a("strong"),cPo=o("layoutlm"),fPo=o(" \u2014 "),EG=a("a"),mPo=o("LayoutLMForTokenClassification"),gPo=o(" (LayoutLM model)"),hPo=l(),n5=a("li"),Pfe=a("strong"),pPo=o("layoutlmv2"),uPo=o(" \u2014 "),CG=a("a"),_Po=o("LayoutLMv2ForTokenClassification"),bPo=o(" (LayoutLMv2 model)"),vPo=l(),s5=a("li"),Ife=a("strong"),FPo=o("longformer"),TPo=o(" \u2014 "),wG=a("a"),MPo=o("LongformerForTokenClassification"),EPo=o(" (Longformer model)"),CPo=l(),l5=a("li"),qfe=a("strong"),wPo=o("megatron-bert"),APo=o(" \u2014 "),AG=a("a"),yPo=o("MegatronBertForTokenClassification"),LPo=o(" (MegatronBert model)"),xPo=l(),i5=a("li"),Nfe=a("strong"),$Po=o("mobilebert"),kPo=o(" \u2014 "),yG=a("a"),SPo=o("MobileBertForTokenClassification"),RPo=o(" (MobileBERT model)"),BPo=l(),d5=a("li"),jfe=a("strong"),PPo=o("mpnet"),IPo=o(" \u2014 "),LG=a("a"),qPo=o("MPNetForTokenClassification"),NPo=o(" (MPNet model)"),jPo=l(),c5=a("li"),Dfe=a("strong"),DPo=o("nystromformer"),GPo=o(" \u2014 "),xG=a("a"),OPo=o("NystromformerForTokenClassification"),VPo=o(" (Nystromformer model)"),XPo=l(),f5=a("li"),Gfe=a("strong"),zPo=o("qdqbert"),QPo=o(" \u2014 "),$G=a("a"),WPo=o("QDQBertForTokenClassification"),HPo=o(" (QDQBert model)"),UPo=l(),m5=a("li"),Ofe=a("strong"),JPo=o("rembert"),YPo=o(" \u2014 "),kG=a("a"),KPo=o("RemBertForTokenClassification"),ZPo=o(" (RemBERT model)"),eIo=l(),g5=a("li"),Vfe=a("strong"),oIo=o("roberta"),rIo=o(" \u2014 "),SG=a("a"),tIo=o("RobertaForTokenClassification"),aIo=o(" (RoBERTa model)"),nIo=l(),h5=a("li"),Xfe=a("strong"),sIo=o("roformer"),lIo=o(" \u2014 "),RG=a("a"),iIo=o("RoFormerForTokenClassification"),dIo=o(" (RoFormer model)"),cIo=l(),p5=a("li"),zfe=a("strong"),fIo=o("squeezebert"),mIo=o(" \u2014 "),BG=a("a"),gIo=o("SqueezeBertForTokenClassification"),hIo=o(" (SqueezeBERT model)"),pIo=l(),u5=a("li"),Qfe=a("strong"),uIo=o("xlm"),_Io=o(" \u2014 "),PG=a("a"),bIo=o("XLMForTokenClassification"),vIo=o(" (XLM model)"),FIo=l(),_5=a("li"),Wfe=a("strong"),TIo=o("xlm-roberta"),MIo=o(" \u2014 "),IG=a("a"),EIo=o("XLMRobertaForTokenClassification"),CIo=o(" (XLM-RoBERTa model)"),wIo=l(),b5=a("li"),Hfe=a("strong"),AIo=o("xlm-roberta-xl"),yIo=o(" \u2014 "),qG=a("a"),LIo=o("XLMRobertaXLForTokenClassification"),xIo=o(" (XLM-RoBERTa-XL model)"),$Io=l(),v5=a("li"),Ufe=a("strong"),kIo=o("xlnet"),SIo=o(" \u2014 "),NG=a("a"),RIo=o("XLNetForTokenClassification"),BIo=o(" (XLNet model)"),PIo=l(),F5=a("li"),Jfe=a("strong"),IIo=o("yoso"),qIo=o(" \u2014 "),jG=a("a"),NIo=o("YosoForTokenClassification"),jIo=o(" (YOSO model)"),DIo=l(),T5=a("p"),GIo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),OIo=o("model.eval()"),VIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),XIo=o("model.train()"),zIo=l(),F(M5.$$.fragment),UBe=l(),Oi=a("h2"),E5=a("a"),Zfe=a("span"),F(O6.$$.fragment),QIo=l(),eme=a("span"),WIo=o("AutoModelForQuestionAnswering"),JBe=l(),qo=a("div"),F(V6.$$.fragment),HIo=l(),Vi=a("p"),UIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DG=a("a"),JIo=o("from_pretrained()"),YIo=o(" class method or the "),GG=a("a"),KIo=o("from_config()"),ZIo=o(` class
method.`),eqo=l(),X6=a("p"),oqo=o("This class cannot be instantiated directly using "),ome=a("code"),rqo=o("__init__()"),tqo=o(" (throws an error)."),aqo=l(),it=a("div"),F(z6.$$.fragment),nqo=l(),rme=a("p"),sqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lqo=l(),Xi=a("p"),iqo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),dqo=o("not"),cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),fqo=o("from_pretrained()"),mqo=o(" to load the model weights."),gqo=l(),F(C5.$$.fragment),hqo=l(),to=a("div"),F(Q6.$$.fragment),pqo=l(),ame=a("p"),uqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qo=l(),Sa=a("p"),bqo=o("The model class to instantiate is selected based on the "),nme=a("code"),vqo=o("model_type"),Fqo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),Tqo=o("pretrained_model_name_or_path"),Mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),Eqo=o("pretrained_model_name_or_path"),Cqo=o(":"),wqo=l(),O=a("ul"),w5=a("li"),ime=a("strong"),Aqo=o("albert"),yqo=o(" \u2014 "),VG=a("a"),Lqo=o("AlbertForQuestionAnswering"),xqo=o(" (ALBERT model)"),$qo=l(),A5=a("li"),dme=a("strong"),kqo=o("bart"),Sqo=o(" \u2014 "),XG=a("a"),Rqo=o("BartForQuestionAnswering"),Bqo=o(" (BART model)"),Pqo=l(),y5=a("li"),cme=a("strong"),Iqo=o("bert"),qqo=o(" \u2014 "),zG=a("a"),Nqo=o("BertForQuestionAnswering"),jqo=o(" (BERT model)"),Dqo=l(),L5=a("li"),fme=a("strong"),Gqo=o("big_bird"),Oqo=o(" \u2014 "),QG=a("a"),Vqo=o("BigBirdForQuestionAnswering"),Xqo=o(" (BigBird model)"),zqo=l(),x5=a("li"),mme=a("strong"),Qqo=o("bigbird_pegasus"),Wqo=o(" \u2014 "),WG=a("a"),Hqo=o("BigBirdPegasusForQuestionAnswering"),Uqo=o(" (BigBirdPegasus model)"),Jqo=l(),$5=a("li"),gme=a("strong"),Yqo=o("camembert"),Kqo=o(" \u2014 "),HG=a("a"),Zqo=o("CamembertForQuestionAnswering"),eNo=o(" (CamemBERT model)"),oNo=l(),k5=a("li"),hme=a("strong"),rNo=o("canine"),tNo=o(" \u2014 "),UG=a("a"),aNo=o("CanineForQuestionAnswering"),nNo=o(" (Canine model)"),sNo=l(),S5=a("li"),pme=a("strong"),lNo=o("convbert"),iNo=o(" \u2014 "),JG=a("a"),dNo=o("ConvBertForQuestionAnswering"),cNo=o(" (ConvBERT model)"),fNo=l(),R5=a("li"),ume=a("strong"),mNo=o("data2vec-text"),gNo=o(" \u2014 "),YG=a("a"),hNo=o("Data2VecTextForQuestionAnswering"),pNo=o(" (Data2VecText model)"),uNo=l(),B5=a("li"),_me=a("strong"),_No=o("deberta"),bNo=o(" \u2014 "),KG=a("a"),vNo=o("DebertaForQuestionAnswering"),FNo=o(" (DeBERTa model)"),TNo=l(),P5=a("li"),bme=a("strong"),MNo=o("deberta-v2"),ENo=o(" \u2014 "),ZG=a("a"),CNo=o("DebertaV2ForQuestionAnswering"),wNo=o(" (DeBERTa-v2 model)"),ANo=l(),I5=a("li"),vme=a("strong"),yNo=o("distilbert"),LNo=o(" \u2014 "),eO=a("a"),xNo=o("DistilBertForQuestionAnswering"),$No=o(" (DistilBERT model)"),kNo=l(),q5=a("li"),Fme=a("strong"),SNo=o("electra"),RNo=o(" \u2014 "),oO=a("a"),BNo=o("ElectraForQuestionAnswering"),PNo=o(" (ELECTRA model)"),INo=l(),N5=a("li"),Tme=a("strong"),qNo=o("flaubert"),NNo=o(" \u2014 "),rO=a("a"),jNo=o("FlaubertForQuestionAnsweringSimple"),DNo=o(" (FlauBERT model)"),GNo=l(),j5=a("li"),Mme=a("strong"),ONo=o("fnet"),VNo=o(" \u2014 "),tO=a("a"),XNo=o("FNetForQuestionAnswering"),zNo=o(" (FNet model)"),QNo=l(),D5=a("li"),Eme=a("strong"),WNo=o("funnel"),HNo=o(" \u2014 "),aO=a("a"),UNo=o("FunnelForQuestionAnswering"),JNo=o(" (Funnel Transformer model)"),YNo=l(),G5=a("li"),Cme=a("strong"),KNo=o("gptj"),ZNo=o(" \u2014 "),nO=a("a"),ejo=o("GPTJForQuestionAnswering"),ojo=o(" (GPT-J model)"),rjo=l(),O5=a("li"),wme=a("strong"),tjo=o("ibert"),ajo=o(" \u2014 "),sO=a("a"),njo=o("IBertForQuestionAnswering"),sjo=o(" (I-BERT model)"),ljo=l(),V5=a("li"),Ame=a("strong"),ijo=o("layoutlmv2"),djo=o(" \u2014 "),lO=a("a"),cjo=o("LayoutLMv2ForQuestionAnswering"),fjo=o(" (LayoutLMv2 model)"),mjo=l(),X5=a("li"),yme=a("strong"),gjo=o("led"),hjo=o(" \u2014 "),iO=a("a"),pjo=o("LEDForQuestionAnswering"),ujo=o(" (LED model)"),_jo=l(),z5=a("li"),Lme=a("strong"),bjo=o("longformer"),vjo=o(" \u2014 "),dO=a("a"),Fjo=o("LongformerForQuestionAnswering"),Tjo=o(" (Longformer model)"),Mjo=l(),Q5=a("li"),xme=a("strong"),Ejo=o("lxmert"),Cjo=o(" \u2014 "),cO=a("a"),wjo=o("LxmertForQuestionAnswering"),Ajo=o(" (LXMERT model)"),yjo=l(),W5=a("li"),$me=a("strong"),Ljo=o("mbart"),xjo=o(" \u2014 "),fO=a("a"),$jo=o("MBartForQuestionAnswering"),kjo=o(" (mBART model)"),Sjo=l(),H5=a("li"),kme=a("strong"),Rjo=o("megatron-bert"),Bjo=o(" \u2014 "),mO=a("a"),Pjo=o("MegatronBertForQuestionAnswering"),Ijo=o(" (MegatronBert model)"),qjo=l(),U5=a("li"),Sme=a("strong"),Njo=o("mobilebert"),jjo=o(" \u2014 "),gO=a("a"),Djo=o("MobileBertForQuestionAnswering"),Gjo=o(" (MobileBERT model)"),Ojo=l(),J5=a("li"),Rme=a("strong"),Vjo=o("mpnet"),Xjo=o(" \u2014 "),hO=a("a"),zjo=o("MPNetForQuestionAnswering"),Qjo=o(" (MPNet model)"),Wjo=l(),Y5=a("li"),Bme=a("strong"),Hjo=o("nystromformer"),Ujo=o(" \u2014 "),pO=a("a"),Jjo=o("NystromformerForQuestionAnswering"),Yjo=o(" (Nystromformer model)"),Kjo=l(),K5=a("li"),Pme=a("strong"),Zjo=o("qdqbert"),eDo=o(" \u2014 "),uO=a("a"),oDo=o("QDQBertForQuestionAnswering"),rDo=o(" (QDQBert model)"),tDo=l(),Z5=a("li"),Ime=a("strong"),aDo=o("reformer"),nDo=o(" \u2014 "),_O=a("a"),sDo=o("ReformerForQuestionAnswering"),lDo=o(" (Reformer model)"),iDo=l(),e3=a("li"),qme=a("strong"),dDo=o("rembert"),cDo=o(" \u2014 "),bO=a("a"),fDo=o("RemBertForQuestionAnswering"),mDo=o(" (RemBERT model)"),gDo=l(),o3=a("li"),Nme=a("strong"),hDo=o("roberta"),pDo=o(" \u2014 "),vO=a("a"),uDo=o("RobertaForQuestionAnswering"),_Do=o(" (RoBERTa model)"),bDo=l(),r3=a("li"),jme=a("strong"),vDo=o("roformer"),FDo=o(" \u2014 "),FO=a("a"),TDo=o("RoFormerForQuestionAnswering"),MDo=o(" (RoFormer model)"),EDo=l(),t3=a("li"),Dme=a("strong"),CDo=o("splinter"),wDo=o(" \u2014 "),TO=a("a"),ADo=o("SplinterForQuestionAnswering"),yDo=o(" (Splinter model)"),LDo=l(),a3=a("li"),Gme=a("strong"),xDo=o("squeezebert"),$Do=o(" \u2014 "),MO=a("a"),kDo=o("SqueezeBertForQuestionAnswering"),SDo=o(" (SqueezeBERT model)"),RDo=l(),n3=a("li"),Ome=a("strong"),BDo=o("xlm"),PDo=o(" \u2014 "),EO=a("a"),IDo=o("XLMForQuestionAnsweringSimple"),qDo=o(" (XLM model)"),NDo=l(),s3=a("li"),Vme=a("strong"),jDo=o("xlm-roberta"),DDo=o(" \u2014 "),CO=a("a"),GDo=o("XLMRobertaForQuestionAnswering"),ODo=o(" (XLM-RoBERTa model)"),VDo=l(),l3=a("li"),Xme=a("strong"),XDo=o("xlm-roberta-xl"),zDo=o(" \u2014 "),wO=a("a"),QDo=o("XLMRobertaXLForQuestionAnswering"),WDo=o(" (XLM-RoBERTa-XL model)"),HDo=l(),i3=a("li"),zme=a("strong"),UDo=o("xlnet"),JDo=o(" \u2014 "),AO=a("a"),YDo=o("XLNetForQuestionAnsweringSimple"),KDo=o(" (XLNet model)"),ZDo=l(),d3=a("li"),Qme=a("strong"),eGo=o("yoso"),oGo=o(" \u2014 "),yO=a("a"),rGo=o("YosoForQuestionAnswering"),tGo=o(" (YOSO model)"),aGo=l(),c3=a("p"),nGo=o("The model is set in evaluation mode by default using "),Wme=a("code"),sGo=o("model.eval()"),lGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),iGo=o("model.train()"),dGo=l(),F(f3.$$.fragment),YBe=l(),zi=a("h2"),m3=a("a"),Ume=a("span"),F(W6.$$.fragment),cGo=l(),Jme=a("span"),fGo=o("AutoModelForTableQuestionAnswering"),KBe=l(),No=a("div"),F(H6.$$.fragment),mGo=l(),Qi=a("p"),gGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LO=a("a"),hGo=o("from_pretrained()"),pGo=o(" class method or the "),xO=a("a"),uGo=o("from_config()"),_Go=o(` class
method.`),bGo=l(),U6=a("p"),vGo=o("This class cannot be instantiated directly using "),Yme=a("code"),FGo=o("__init__()"),TGo=o(" (throws an error)."),MGo=l(),dt=a("div"),F(J6.$$.fragment),EGo=l(),Kme=a("p"),CGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wGo=l(),Wi=a("p"),AGo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),yGo=o("not"),LGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),xGo=o("from_pretrained()"),$Go=o(" to load the model weights."),kGo=l(),F(g3.$$.fragment),SGo=l(),ao=a("div"),F(Y6.$$.fragment),RGo=l(),ege=a("p"),BGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),PGo=l(),Ra=a("p"),IGo=o("The model class to instantiate is selected based on the "),oge=a("code"),qGo=o("model_type"),NGo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),jGo=o("pretrained_model_name_or_path"),DGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),GGo=o("pretrained_model_name_or_path"),OGo=o(":"),VGo=l(),age=a("ul"),h3=a("li"),nge=a("strong"),XGo=o("tapas"),zGo=o(" \u2014 "),kO=a("a"),QGo=o("TapasForQuestionAnswering"),WGo=o(" (TAPAS model)"),HGo=l(),p3=a("p"),UGo=o("The model is set in evaluation mode by default using "),sge=a("code"),JGo=o("model.eval()"),YGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),KGo=o("model.train()"),ZGo=l(),F(u3.$$.fragment),ZBe=l(),Hi=a("h2"),_3=a("a"),ige=a("span"),F(K6.$$.fragment),eOo=l(),dge=a("span"),oOo=o("AutoModelForImageClassification"),ePe=l(),jo=a("div"),F(Z6.$$.fragment),rOo=l(),Ui=a("p"),tOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SO=a("a"),aOo=o("from_pretrained()"),nOo=o(" class method or the "),RO=a("a"),sOo=o("from_config()"),lOo=o(` class
method.`),iOo=l(),ey=a("p"),dOo=o("This class cannot be instantiated directly using "),cge=a("code"),cOo=o("__init__()"),fOo=o(" (throws an error)."),mOo=l(),ct=a("div"),F(oy.$$.fragment),gOo=l(),fge=a("p"),hOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pOo=l(),Ji=a("p"),uOo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),_Oo=o("not"),bOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),vOo=o("from_pretrained()"),FOo=o(" to load the model weights."),TOo=l(),F(b3.$$.fragment),MOo=l(),no=a("div"),F(ry.$$.fragment),EOo=l(),gge=a("p"),COo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wOo=l(),Ba=a("p"),AOo=o("The model class to instantiate is selected based on the "),hge=a("code"),yOo=o("model_type"),LOo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),xOo=o("pretrained_model_name_or_path"),$Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),kOo=o("pretrained_model_name_or_path"),SOo=o(":"),ROo=l(),ve=a("ul"),v3=a("li"),_ge=a("strong"),BOo=o("beit"),POo=o(" \u2014 "),PO=a("a"),IOo=o("BeitForImageClassification"),qOo=o(" (BEiT model)"),NOo=l(),F3=a("li"),bge=a("strong"),jOo=o("convnext"),DOo=o(" \u2014 "),IO=a("a"),GOo=o("ConvNextForImageClassification"),OOo=o(" (ConvNext model)"),VOo=l(),T3=a("li"),vge=a("strong"),XOo=o("data2vec-vision"),zOo=o(" \u2014 "),qO=a("a"),QOo=o("Data2VecVisionForImageClassification"),WOo=o(" (Data2VecVision model)"),HOo=l(),xs=a("li"),Fge=a("strong"),UOo=o("deit"),JOo=o(" \u2014 "),NO=a("a"),YOo=o("DeiTForImageClassification"),KOo=o(" or "),jO=a("a"),ZOo=o("DeiTForImageClassificationWithTeacher"),eVo=o(" (DeiT model)"),oVo=l(),M3=a("li"),Tge=a("strong"),rVo=o("imagegpt"),tVo=o(" \u2014 "),DO=a("a"),aVo=o("ImageGPTForImageClassification"),nVo=o(" (ImageGPT model)"),sVo=l(),ft=a("li"),Mge=a("strong"),lVo=o("perceiver"),iVo=o(" \u2014 "),GO=a("a"),dVo=o("PerceiverForImageClassificationLearned"),cVo=o(" or "),OO=a("a"),fVo=o("PerceiverForImageClassificationFourier"),mVo=o(" or "),VO=a("a"),gVo=o("PerceiverForImageClassificationConvProcessing"),hVo=o(" (Perceiver model)"),pVo=l(),E3=a("li"),Ege=a("strong"),uVo=o("poolformer"),_Vo=o(" \u2014 "),XO=a("a"),bVo=o("PoolFormerForImageClassification"),vVo=o(" (PoolFormer model)"),FVo=l(),C3=a("li"),Cge=a("strong"),TVo=o("regnet"),MVo=o(" \u2014 "),zO=a("a"),EVo=o("RegNetForImageClassification"),CVo=o(" (RegNet model)"),wVo=l(),w3=a("li"),wge=a("strong"),AVo=o("resnet"),yVo=o(" \u2014 "),QO=a("a"),LVo=o("ResNetForImageClassification"),xVo=o(" (ResNet model)"),$Vo=l(),A3=a("li"),Age=a("strong"),kVo=o("segformer"),SVo=o(" \u2014 "),WO=a("a"),RVo=o("SegformerForImageClassification"),BVo=o(" (SegFormer model)"),PVo=l(),y3=a("li"),yge=a("strong"),IVo=o("swin"),qVo=o(" \u2014 "),HO=a("a"),NVo=o("SwinForImageClassification"),jVo=o(" (Swin model)"),DVo=l(),L3=a("li"),Lge=a("strong"),GVo=o("van"),OVo=o(" \u2014 "),UO=a("a"),VVo=o("VanForImageClassification"),XVo=o(" (VAN model)"),zVo=l(),x3=a("li"),xge=a("strong"),QVo=o("vit"),WVo=o(" \u2014 "),JO=a("a"),HVo=o("ViTForImageClassification"),UVo=o(" (ViT model)"),JVo=l(),$3=a("p"),YVo=o("The model is set in evaluation mode by default using "),$ge=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),eXo=o("model.train()"),oXo=l(),F(k3.$$.fragment),oPe=l(),Yi=a("h2"),S3=a("a"),Sge=a("span"),F(ty.$$.fragment),rXo=l(),Rge=a("span"),tXo=o("AutoModelForVision2Seq"),rPe=l(),Do=a("div"),F(ay.$$.fragment),aXo=l(),Ki=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YO=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),KO=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),ny=a("p"),fXo=o("This class cannot be instantiated directly using "),Bge=a("code"),mXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),mt=a("div"),F(sy.$$.fragment),pXo=l(),Pge=a("p"),uXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Xo=l(),Zi=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),vXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),F(R3.$$.fragment),CXo=l(),so=a("div"),F(ly.$$.fragment),wXo=l(),qge=a("p"),AXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yXo=l(),Pa=a("p"),LXo=o("The model class to instantiate is selected based on the "),Nge=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),RXo=o("pretrained_model_name_or_path"),BXo=o(":"),PXo=l(),Gge=a("ul"),B3=a("li"),Oge=a("strong"),IXo=o("vision-encoder-decoder"),qXo=o(" \u2014 "),eV=a("a"),NXo=o("VisionEncoderDecoderModel"),jXo=o(" (Vision Encoder decoder model)"),DXo=l(),P3=a("p"),GXo=o("The model is set in evaluation mode by default using "),Vge=a("code"),OXo=o("model.eval()"),VXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),XXo=o("model.train()"),zXo=l(),F(I3.$$.fragment),tPe=l(),ed=a("h2"),q3=a("a"),zge=a("span"),F(iy.$$.fragment),QXo=l(),Qge=a("span"),WXo=o("AutoModelForAudioClassification"),aPe=l(),Go=a("div"),F(dy.$$.fragment),HXo=l(),od=a("p"),UXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oV=a("a"),JXo=o("from_pretrained()"),YXo=o(" class method or the "),rV=a("a"),KXo=o("from_config()"),ZXo=o(` class
method.`),ezo=l(),cy=a("p"),ozo=o("This class cannot be instantiated directly using "),Wge=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),gt=a("div"),F(fy.$$.fragment),nzo=l(),Hge=a("p"),szo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lzo=l(),rd=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),fzo=o("from_pretrained()"),mzo=o(" to load the model weights."),gzo=l(),F(N3.$$.fragment),hzo=l(),lo=a("div"),F(my.$$.fragment),pzo=l(),Jge=a("p"),uzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_zo=l(),Ia=a("p"),bzo=o("The model class to instantiate is selected based on the "),Yge=a("code"),vzo=o("model_type"),Fzo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Tzo=o("pretrained_model_name_or_path"),Mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Ezo=o("pretrained_model_name_or_path"),Czo=o(":"),wzo=l(),Ne=a("ul"),j3=a("li"),ehe=a("strong"),Azo=o("data2vec-audio"),yzo=o(" \u2014 "),aV=a("a"),Lzo=o("Data2VecAudioForSequenceClassification"),xzo=o(" (Data2VecAudio model)"),$zo=l(),D3=a("li"),ohe=a("strong"),kzo=o("hubert"),Szo=o(" \u2014 "),nV=a("a"),Rzo=o("HubertForSequenceClassification"),Bzo=o(" (Hubert model)"),Pzo=l(),G3=a("li"),rhe=a("strong"),Izo=o("sew"),qzo=o(" \u2014 "),sV=a("a"),Nzo=o("SEWForSequenceClassification"),jzo=o(" (SEW model)"),Dzo=l(),O3=a("li"),the=a("strong"),Gzo=o("sew-d"),Ozo=o(" \u2014 "),lV=a("a"),Vzo=o("SEWDForSequenceClassification"),Xzo=o(" (SEW-D model)"),zzo=l(),V3=a("li"),ahe=a("strong"),Qzo=o("unispeech"),Wzo=o(" \u2014 "),iV=a("a"),Hzo=o("UniSpeechForSequenceClassification"),Uzo=o(" (UniSpeech model)"),Jzo=l(),X3=a("li"),nhe=a("strong"),Yzo=o("unispeech-sat"),Kzo=o(" \u2014 "),dV=a("a"),Zzo=o("UniSpeechSatForSequenceClassification"),eQo=o(" (UniSpeechSat model)"),oQo=l(),z3=a("li"),she=a("strong"),rQo=o("wav2vec2"),tQo=o(" \u2014 "),cV=a("a"),aQo=o("Wav2Vec2ForSequenceClassification"),nQo=o(" (Wav2Vec2 model)"),sQo=l(),Q3=a("li"),lhe=a("strong"),lQo=o("wavlm"),iQo=o(" \u2014 "),fV=a("a"),dQo=o("WavLMForSequenceClassification"),cQo=o(" (WavLM model)"),fQo=l(),W3=a("p"),mQo=o("The model is set in evaluation mode by default using "),ihe=a("code"),gQo=o("model.eval()"),hQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),pQo=o("model.train()"),uQo=l(),F(H3.$$.fragment),nPe=l(),td=a("h2"),U3=a("a"),che=a("span"),F(gy.$$.fragment),_Qo=l(),fhe=a("span"),bQo=o("AutoModelForAudioFrameClassification"),sPe=l(),Oo=a("div"),F(hy.$$.fragment),vQo=l(),ad=a("p"),FQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mV=a("a"),TQo=o("from_pretrained()"),MQo=o(" class method or the "),gV=a("a"),EQo=o("from_config()"),CQo=o(` class
method.`),wQo=l(),py=a("p"),AQo=o("This class cannot be instantiated directly using "),mhe=a("code"),yQo=o("__init__()"),LQo=o(" (throws an error)."),xQo=l(),ht=a("div"),F(uy.$$.fragment),$Qo=l(),ghe=a("p"),kQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),SQo=l(),nd=a("p"),RQo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),BQo=o("not"),PQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),IQo=o("from_pretrained()"),qQo=o(" to load the model weights."),NQo=l(),F(J3.$$.fragment),jQo=l(),io=a("div"),F(_y.$$.fragment),DQo=l(),phe=a("p"),GQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OQo=l(),qa=a("p"),VQo=o("The model class to instantiate is selected based on the "),uhe=a("code"),XQo=o("model_type"),zQo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),QQo=o("pretrained_model_name_or_path"),WQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),HQo=o("pretrained_model_name_or_path"),UQo=o(":"),JQo=l(),Na=a("ul"),Y3=a("li"),vhe=a("strong"),YQo=o("data2vec-audio"),KQo=o(" \u2014 "),pV=a("a"),ZQo=o("Data2VecAudioForAudioFrameClassification"),eWo=o(" (Data2VecAudio model)"),oWo=l(),K3=a("li"),Fhe=a("strong"),rWo=o("unispeech-sat"),tWo=o(" \u2014 "),uV=a("a"),aWo=o("UniSpeechSatForAudioFrameClassification"),nWo=o(" (UniSpeechSat model)"),sWo=l(),Z3=a("li"),The=a("strong"),lWo=o("wav2vec2"),iWo=o(" \u2014 "),_V=a("a"),dWo=o("Wav2Vec2ForAudioFrameClassification"),cWo=o(" (Wav2Vec2 model)"),fWo=l(),ev=a("li"),Mhe=a("strong"),mWo=o("wavlm"),gWo=o(" \u2014 "),bV=a("a"),hWo=o("WavLMForAudioFrameClassification"),pWo=o(" (WavLM model)"),uWo=l(),ov=a("p"),_Wo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),bWo=o("model.eval()"),vWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),FWo=o("model.train()"),TWo=l(),F(rv.$$.fragment),lPe=l(),sd=a("h2"),tv=a("a"),whe=a("span"),F(by.$$.fragment),MWo=l(),Ahe=a("span"),EWo=o("AutoModelForCTC"),iPe=l(),Vo=a("div"),F(vy.$$.fragment),CWo=l(),ld=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vV=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),FV=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),$Wo=l(),Fy=a("p"),kWo=o("This class cannot be instantiated directly using "),yhe=a("code"),SWo=o("__init__()"),RWo=o(" (throws an error)."),BWo=l(),pt=a("div"),F(Ty.$$.fragment),PWo=l(),Lhe=a("p"),IWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qWo=l(),id=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),F(av.$$.fragment),XWo=l(),co=a("div"),F(My.$$.fragment),zWo=l(),$he=a("p"),QWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),WWo=l(),ja=a("p"),HWo=o("The model class to instantiate is selected based on the "),khe=a("code"),UWo=o("model_type"),JWo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),ZWo=o("pretrained_model_name_or_path"),eHo=o(":"),oHo=l(),je=a("ul"),nv=a("li"),Bhe=a("strong"),rHo=o("data2vec-audio"),tHo=o(" \u2014 "),MV=a("a"),aHo=o("Data2VecAudioForCTC"),nHo=o(" (Data2VecAudio model)"),sHo=l(),sv=a("li"),Phe=a("strong"),lHo=o("hubert"),iHo=o(" \u2014 "),EV=a("a"),dHo=o("HubertForCTC"),cHo=o(" (Hubert model)"),fHo=l(),lv=a("li"),Ihe=a("strong"),mHo=o("sew"),gHo=o(" \u2014 "),CV=a("a"),hHo=o("SEWForCTC"),pHo=o(" (SEW model)"),uHo=l(),iv=a("li"),qhe=a("strong"),_Ho=o("sew-d"),bHo=o(" \u2014 "),wV=a("a"),vHo=o("SEWDForCTC"),FHo=o(" (SEW-D model)"),THo=l(),dv=a("li"),Nhe=a("strong"),MHo=o("unispeech"),EHo=o(" \u2014 "),AV=a("a"),CHo=o("UniSpeechForCTC"),wHo=o(" (UniSpeech model)"),AHo=l(),cv=a("li"),jhe=a("strong"),yHo=o("unispeech-sat"),LHo=o(" \u2014 "),yV=a("a"),xHo=o("UniSpeechSatForCTC"),$Ho=o(" (UniSpeechSat model)"),kHo=l(),fv=a("li"),Dhe=a("strong"),SHo=o("wav2vec2"),RHo=o(" \u2014 "),LV=a("a"),BHo=o("Wav2Vec2ForCTC"),PHo=o(" (Wav2Vec2 model)"),IHo=l(),mv=a("li"),Ghe=a("strong"),qHo=o("wavlm"),NHo=o(" \u2014 "),xV=a("a"),jHo=o("WavLMForCTC"),DHo=o(" (WavLM model)"),GHo=l(),gv=a("p"),OHo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),zHo=o("model.train()"),QHo=l(),F(hv.$$.fragment),dPe=l(),dd=a("h2"),pv=a("a"),Xhe=a("span"),F(Ey.$$.fragment),WHo=l(),zhe=a("span"),HHo=o("AutoModelForSpeechSeq2Seq"),cPe=l(),Xo=a("div"),F(Cy.$$.fragment),UHo=l(),cd=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$V=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),kV=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),wy=a("p"),rUo=o("This class cannot be instantiated directly using "),Qhe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),ut=a("div"),F(Ay.$$.fragment),sUo=l(),Whe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iUo=l(),fd=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(uv.$$.fragment),pUo=l(),fo=a("div"),F(yy.$$.fragment),uUo=l(),Uhe=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bUo=l(),Da=a("p"),vUo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),Ly=a("ul"),_v=a("li"),Zhe=a("strong"),yUo=o("speech-encoder-decoder"),LUo=o(" \u2014 "),RV=a("a"),xUo=o("SpeechEncoderDecoderModel"),$Uo=o(" (Speech Encoder decoder model)"),kUo=l(),bv=a("li"),epe=a("strong"),SUo=o("speech_to_text"),RUo=o(" \u2014 "),BV=a("a"),BUo=o("Speech2TextForConditionalGeneration"),PUo=o(" (Speech2Text model)"),IUo=l(),vv=a("p"),qUo=o("The model is set in evaluation mode by default using "),ope=a("code"),NUo=o("model.eval()"),jUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),DUo=o("model.train()"),GUo=l(),F(Fv.$$.fragment),fPe=l(),md=a("h2"),Tv=a("a"),tpe=a("span"),F(xy.$$.fragment),OUo=l(),ape=a("span"),VUo=o("AutoModelForAudioXVector"),mPe=l(),zo=a("div"),F($y.$$.fragment),XUo=l(),gd=a("p"),zUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PV=a("a"),QUo=o("from_pretrained()"),WUo=o(" class method or the "),IV=a("a"),HUo=o("from_config()"),UUo=o(` class
method.`),JUo=l(),ky=a("p"),YUo=o("This class cannot be instantiated directly using "),npe=a("code"),KUo=o("__init__()"),ZUo=o(" (throws an error)."),eJo=l(),_t=a("div"),F(Sy.$$.fragment),oJo=l(),spe=a("p"),rJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tJo=l(),hd=a("p"),aJo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),nJo=o("not"),sJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),lJo=o("from_pretrained()"),iJo=o(" to load the model weights."),dJo=l(),F(Mv.$$.fragment),cJo=l(),mo=a("div"),F(Ry.$$.fragment),fJo=l(),ipe=a("p"),mJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gJo=l(),Ga=a("p"),hJo=o("The model class to instantiate is selected based on the "),dpe=a("code"),pJo=o("model_type"),uJo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(":"),TJo=l(),Oa=a("ul"),Ev=a("li"),mpe=a("strong"),MJo=o("data2vec-audio"),EJo=o(" \u2014 "),NV=a("a"),CJo=o("Data2VecAudioForXVector"),wJo=o(" (Data2VecAudio model)"),AJo=l(),Cv=a("li"),gpe=a("strong"),yJo=o("unispeech-sat"),LJo=o(" \u2014 "),jV=a("a"),xJo=o("UniSpeechSatForXVector"),$Jo=o(" (UniSpeechSat model)"),kJo=l(),wv=a("li"),hpe=a("strong"),SJo=o("wav2vec2"),RJo=o(" \u2014 "),DV=a("a"),BJo=o("Wav2Vec2ForXVector"),PJo=o(" (Wav2Vec2 model)"),IJo=l(),Av=a("li"),ppe=a("strong"),qJo=o("wavlm"),NJo=o(" \u2014 "),GV=a("a"),jJo=o("WavLMForXVector"),DJo=o(" (WavLM model)"),GJo=l(),yv=a("p"),OJo=o("The model is set in evaluation mode by default using "),upe=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),zJo=o("model.train()"),QJo=l(),F(Lv.$$.fragment),gPe=l(),pd=a("h2"),xv=a("a"),bpe=a("span"),F(By.$$.fragment),WJo=l(),vpe=a("span"),HJo=o("AutoModelForMaskedImageModeling"),hPe=l(),Qo=a("div"),F(Py.$$.fragment),UJo=l(),ud=a("p"),JJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OV=a("a"),YJo=o("from_pretrained()"),KJo=o(" class method or the "),VV=a("a"),ZJo=o("from_config()"),eYo=o(` class
method.`),oYo=l(),Iy=a("p"),rYo=o("This class cannot be instantiated directly using "),Fpe=a("code"),tYo=o("__init__()"),aYo=o(" (throws an error)."),nYo=l(),bt=a("div"),F(qy.$$.fragment),sYo=l(),Tpe=a("p"),lYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iYo=l(),_d=a("p"),dYo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),cYo=o("not"),fYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),mYo=o("from_pretrained()"),gYo=o(" to load the model weights."),hYo=l(),F($v.$$.fragment),pYo=l(),go=a("div"),F(Ny.$$.fragment),uYo=l(),Epe=a("p"),_Yo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),bYo=l(),Va=a("p"),vYo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),FYo=o("model_type"),TYo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(":"),AYo=l(),bd=a("ul"),kv=a("li"),ype=a("strong"),yYo=o("deit"),LYo=o(" \u2014 "),zV=a("a"),xYo=o("DeiTForMaskedImageModeling"),$Yo=o(" (DeiT model)"),kYo=l(),Sv=a("li"),Lpe=a("strong"),SYo=o("swin"),RYo=o(" \u2014 "),QV=a("a"),BYo=o("SwinForMaskedImageModeling"),PYo=o(" (Swin model)"),IYo=l(),Rv=a("li"),xpe=a("strong"),qYo=o("vit"),NYo=o(" \u2014 "),WV=a("a"),jYo=o("ViTForMaskedImageModeling"),DYo=o(" (ViT model)"),GYo=l(),Bv=a("p"),OYo=o("The model is set in evaluation mode by default using "),$pe=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),zYo=o("model.train()"),QYo=l(),F(Pv.$$.fragment),pPe=l(),vd=a("h2"),Iv=a("a"),Spe=a("span"),F(jy.$$.fragment),WYo=l(),Rpe=a("span"),HYo=o("AutoModelForObjectDetection"),uPe=l(),Wo=a("div"),F(Dy.$$.fragment),UYo=l(),Fd=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HV=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),UV=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),Gy=a("p"),rKo=o("This class cannot be instantiated directly using "),Bpe=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),vt=a("div"),F(Oy.$$.fragment),sKo=l(),Ppe=a("p"),lKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iKo=l(),Td=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),cKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),mKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),F(qv.$$.fragment),pKo=l(),ho=a("div"),F(Vy.$$.fragment),uKo=l(),qpe=a("p"),_Ko=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bKo=l(),Xa=a("p"),vKo=o("The model class to instantiate is selected based on the "),Npe=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),Xy=a("ul"),Nv=a("li"),Gpe=a("strong"),yKo=o("detr"),LKo=o(" \u2014 "),YV=a("a"),xKo=o("DetrForObjectDetection"),$Ko=o(" (DETR model)"),kKo=l(),jv=a("li"),Ope=a("strong"),SKo=o("yolos"),RKo=o(" \u2014 "),KV=a("a"),BKo=o("YolosForObjectDetection"),PKo=o(" (YOLOS model)"),IKo=l(),Dv=a("p"),qKo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),NKo=o("model.eval()"),jKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),DKo=o("model.train()"),GKo=l(),F(Gv.$$.fragment),_Pe=l(),Md=a("h2"),Ov=a("a"),zpe=a("span"),F(zy.$$.fragment),OKo=l(),Qpe=a("span"),VKo=o("AutoModelForImageSegmentation"),bPe=l(),Ho=a("div"),F(Qy.$$.fragment),XKo=l(),Ed=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZV=a("a"),QKo=o("from_pretrained()"),WKo=o(" class method or the "),eX=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),Wy=a("p"),YKo=o("This class cannot be instantiated directly using "),Wpe=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),Ft=a("div"),F(Hy.$$.fragment),oZo=l(),Hpe=a("p"),rZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),tZo=l(),Cd=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),F(Vv.$$.fragment),cZo=l(),po=a("div"),F(Uy.$$.fragment),fZo=l(),Jpe=a("p"),mZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gZo=l(),za=a("p"),hZo=o("The model class to instantiate is selected based on the "),Ype=a("code"),pZo=o("model_type"),uZo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),_Zo=o("pretrained_model_name_or_path"),bZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(":"),TZo=l(),eue=a("ul"),Xv=a("li"),oue=a("strong"),MZo=o("detr"),EZo=o(" \u2014 "),rX=a("a"),CZo=o("DetrForSegmentation"),wZo=o(" (DETR model)"),AZo=l(),zv=a("p"),yZo=o("The model is set in evaluation mode by default using "),rue=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),$Zo=o("model.train()"),kZo=l(),F(Qv.$$.fragment),vPe=l(),wd=a("h2"),Wv=a("a"),aue=a("span"),F(Jy.$$.fragment),SZo=l(),nue=a("span"),RZo=o("AutoModelForSemanticSegmentation"),FPe=l(),Uo=a("div"),F(Yy.$$.fragment),BZo=l(),Ad=a("p"),PZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tX=a("a"),IZo=o("from_pretrained()"),qZo=o(" class method or the "),aX=a("a"),NZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),Ky=a("p"),GZo=o("This class cannot be instantiated directly using "),sue=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),Tt=a("div"),F(Zy.$$.fragment),zZo=l(),lue=a("p"),QZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WZo=l(),yd=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(Hv.$$.fragment),eer=l(),uo=a("div"),F(eL.$$.fragment),oer=l(),due=a("p"),rer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ter=l(),Qa=a("p"),aer=o("The model class to instantiate is selected based on the "),cue=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),Wa=a("ul"),Uv=a("li"),gue=a("strong"),mer=o("beit"),ger=o(" \u2014 "),sX=a("a"),her=o("BeitForSemanticSegmentation"),per=o(" (BEiT model)"),uer=l(),Jv=a("li"),hue=a("strong"),_er=o("data2vec-vision"),ber=o(" \u2014 "),lX=a("a"),ver=o("Data2VecVisionForSemanticSegmentation"),Fer=o(" (Data2VecVision model)"),Ter=l(),Yv=a("li"),pue=a("strong"),Mer=o("dpt"),Eer=o(" \u2014 "),iX=a("a"),Cer=o("DPTForSemanticSegmentation"),wer=o(" (DPT model)"),Aer=l(),Kv=a("li"),uue=a("strong"),yer=o("segformer"),Ler=o(" \u2014 "),dX=a("a"),xer=o("SegformerForSemanticSegmentation"),$er=o(" (SegFormer model)"),ker=l(),Zv=a("p"),Ser=o("The model is set in evaluation mode by default using "),_ue=a("code"),Rer=o("model.eval()"),Ber=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),Per=o("model.train()"),Ier=l(),F(eF.$$.fragment),TPe=l(),Ld=a("h2"),oF=a("a"),vue=a("span"),F(oL.$$.fragment),qer=l(),Fue=a("span"),Ner=o("AutoModelForInstanceSegmentation"),MPe=l(),Jo=a("div"),F(rL.$$.fragment),jer=l(),xd=a("p"),Der=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cX=a("a"),Ger=o("from_pretrained()"),Oer=o(" class method or the "),fX=a("a"),Ver=o("from_config()"),Xer=o(` class
method.`),zer=l(),tL=a("p"),Qer=o("This class cannot be instantiated directly using "),Tue=a("code"),Wer=o("__init__()"),Her=o(" (throws an error)."),Uer=l(),Mt=a("div"),F(aL.$$.fragment),Jer=l(),Mue=a("p"),Yer=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ker=l(),$d=a("p"),Zer=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),eor=o("not"),oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),ror=o("from_pretrained()"),tor=o(" to load the model weights."),aor=l(),F(rF.$$.fragment),nor=l(),_o=a("div"),F(nL.$$.fragment),sor=l(),Cue=a("p"),lor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ior=l(),Ha=a("p"),dor=o("The model class to instantiate is selected based on the "),wue=a("code"),cor=o("model_type"),mor=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),por=o("pretrained_model_name_or_path"),uor=o(":"),_or=l(),Lue=a("ul"),tF=a("li"),xue=a("strong"),bor=o("maskformer"),vor=o(" \u2014 "),gX=a("a"),For=o("MaskFormerForInstanceSegmentation"),Tor=o(" (MaskFormer model)"),Mor=l(),aF=a("p"),Eor=o("The model is set in evaluation mode by default using "),$ue=a("code"),Cor=o("model.eval()"),wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),Aor=o("model.train()"),yor=l(),F(nF.$$.fragment),EPe=l(),kd=a("h2"),sF=a("a"),Sue=a("span"),F(sL.$$.fragment),Lor=l(),Rue=a("span"),xor=o("TFAutoModel"),CPe=l(),Yo=a("div"),F(lL.$$.fragment),$or=l(),Sd=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hX=a("a"),Sor=o("from_pretrained()"),Ror=o(" class method or the "),pX=a("a"),Bor=o("from_config()"),Por=o(` class
method.`),Ior=l(),iL=a("p"),qor=o("This class cannot be instantiated directly using "),Bue=a("code"),Nor=o("__init__()"),jor=o(" (throws an error)."),Dor=l(),Et=a("div"),F(dL.$$.fragment),Gor=l(),Pue=a("p"),Oor=o("Instantiates one of the base model classes of the library from a configuration."),Vor=l(),Rd=a("p"),Xor=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),zor=o("not"),Qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),Wor=o("from_pretrained()"),Hor=o(" to load the model weights."),Uor=l(),F(lF.$$.fragment),Jor=l(),Cr=a("div"),F(cL.$$.fragment),Yor=l(),que=a("p"),Kor=o("Instantiate one of the base model classes of the library from a pretrained model."),Zor=l(),Ua=a("p"),err=o("The model class to instantiate is selected based on the "),Nue=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),j=a("ul"),iF=a("li"),Gue=a("strong"),irr=o("albert"),drr=o(" \u2014 "),_X=a("a"),crr=o("TFAlbertModel"),frr=o(" (ALBERT model)"),mrr=l(),dF=a("li"),Oue=a("strong"),grr=o("bart"),hrr=o(" \u2014 "),bX=a("a"),prr=o("TFBartModel"),urr=o(" (BART model)"),_rr=l(),cF=a("li"),Vue=a("strong"),brr=o("bert"),vrr=o(" \u2014 "),vX=a("a"),Frr=o("TFBertModel"),Trr=o(" (BERT model)"),Mrr=l(),fF=a("li"),Xue=a("strong"),Err=o("blenderbot"),Crr=o(" \u2014 "),FX=a("a"),wrr=o("TFBlenderbotModel"),Arr=o(" (Blenderbot model)"),yrr=l(),mF=a("li"),zue=a("strong"),Lrr=o("blenderbot-small"),xrr=o(" \u2014 "),TX=a("a"),$rr=o("TFBlenderbotSmallModel"),krr=o(" (BlenderbotSmall model)"),Srr=l(),gF=a("li"),Que=a("strong"),Rrr=o("camembert"),Brr=o(" \u2014 "),MX=a("a"),Prr=o("TFCamembertModel"),Irr=o(" (CamemBERT model)"),qrr=l(),hF=a("li"),Wue=a("strong"),Nrr=o("clip"),jrr=o(" \u2014 "),EX=a("a"),Drr=o("TFCLIPModel"),Grr=o(" (CLIP model)"),Orr=l(),pF=a("li"),Hue=a("strong"),Vrr=o("convbert"),Xrr=o(" \u2014 "),CX=a("a"),zrr=o("TFConvBertModel"),Qrr=o(" (ConvBERT model)"),Wrr=l(),uF=a("li"),Uue=a("strong"),Hrr=o("convnext"),Urr=o(" \u2014 "),wX=a("a"),Jrr=o("TFConvNextModel"),Yrr=o(" (ConvNext model)"),Krr=l(),_F=a("li"),Jue=a("strong"),Zrr=o("ctrl"),etr=o(" \u2014 "),AX=a("a"),otr=o("TFCTRLModel"),rtr=o(" (CTRL model)"),ttr=l(),bF=a("li"),Yue=a("strong"),atr=o("data2vec-vision"),ntr=o(" \u2014 "),yX=a("a"),str=o("TFData2VecVisionModel"),ltr=o(" (Data2VecVision model)"),itr=l(),vF=a("li"),Kue=a("strong"),dtr=o("deberta"),ctr=o(" \u2014 "),LX=a("a"),ftr=o("TFDebertaModel"),mtr=o(" (DeBERTa model)"),gtr=l(),FF=a("li"),Zue=a("strong"),htr=o("deberta-v2"),ptr=o(" \u2014 "),xX=a("a"),utr=o("TFDebertaV2Model"),_tr=o(" (DeBERTa-v2 model)"),btr=l(),TF=a("li"),e_e=a("strong"),vtr=o("distilbert"),Ftr=o(" \u2014 "),$X=a("a"),Ttr=o("TFDistilBertModel"),Mtr=o(" (DistilBERT model)"),Etr=l(),MF=a("li"),o_e=a("strong"),Ctr=o("dpr"),wtr=o(" \u2014 "),kX=a("a"),Atr=o("TFDPRQuestionEncoder"),ytr=o(" (DPR model)"),Ltr=l(),EF=a("li"),r_e=a("strong"),xtr=o("electra"),$tr=o(" \u2014 "),SX=a("a"),ktr=o("TFElectraModel"),Str=o(" (ELECTRA model)"),Rtr=l(),CF=a("li"),t_e=a("strong"),Btr=o("flaubert"),Ptr=o(" \u2014 "),RX=a("a"),Itr=o("TFFlaubertModel"),qtr=o(" (FlauBERT model)"),Ntr=l(),$s=a("li"),a_e=a("strong"),jtr=o("funnel"),Dtr=o(" \u2014 "),BX=a("a"),Gtr=o("TFFunnelModel"),Otr=o(" or "),PX=a("a"),Vtr=o("TFFunnelBaseModel"),Xtr=o(" (Funnel Transformer model)"),ztr=l(),wF=a("li"),n_e=a("strong"),Qtr=o("gpt2"),Wtr=o(" \u2014 "),IX=a("a"),Htr=o("TFGPT2Model"),Utr=o(" (OpenAI GPT-2 model)"),Jtr=l(),AF=a("li"),s_e=a("strong"),Ytr=o("gptj"),Ktr=o(" \u2014 "),qX=a("a"),Ztr=o("TFGPTJModel"),ear=o(" (GPT-J model)"),oar=l(),yF=a("li"),l_e=a("strong"),rar=o("hubert"),tar=o(" \u2014 "),NX=a("a"),aar=o("TFHubertModel"),nar=o(" (Hubert model)"),sar=l(),LF=a("li"),i_e=a("strong"),lar=o("layoutlm"),iar=o(" \u2014 "),jX=a("a"),dar=o("TFLayoutLMModel"),car=o(" (LayoutLM model)"),far=l(),xF=a("li"),d_e=a("strong"),mar=o("led"),gar=o(" \u2014 "),DX=a("a"),har=o("TFLEDModel"),par=o(" (LED model)"),uar=l(),$F=a("li"),c_e=a("strong"),_ar=o("longformer"),bar=o(" \u2014 "),GX=a("a"),Far=o("TFLongformerModel"),Tar=o(" (Longformer model)"),Mar=l(),kF=a("li"),f_e=a("strong"),Ear=o("lxmert"),Car=o(" \u2014 "),OX=a("a"),war=o("TFLxmertModel"),Aar=o(" (LXMERT model)"),yar=l(),SF=a("li"),m_e=a("strong"),Lar=o("marian"),xar=o(" \u2014 "),VX=a("a"),$ar=o("TFMarianModel"),kar=o(" (Marian model)"),Sar=l(),RF=a("li"),g_e=a("strong"),Rar=o("mbart"),Bar=o(" \u2014 "),XX=a("a"),Par=o("TFMBartModel"),Iar=o(" (mBART model)"),qar=l(),BF=a("li"),h_e=a("strong"),Nar=o("mobilebert"),jar=o(" \u2014 "),zX=a("a"),Dar=o("TFMobileBertModel"),Gar=o(" (MobileBERT model)"),Oar=l(),PF=a("li"),p_e=a("strong"),Var=o("mpnet"),Xar=o(" \u2014 "),QX=a("a"),zar=o("TFMPNetModel"),Qar=o(" (MPNet model)"),War=l(),IF=a("li"),u_e=a("strong"),Har=o("mt5"),Uar=o(" \u2014 "),WX=a("a"),Jar=o("TFMT5Model"),Yar=o(" (mT5 model)"),Kar=l(),qF=a("li"),__e=a("strong"),Zar=o("openai-gpt"),enr=o(" \u2014 "),HX=a("a"),onr=o("TFOpenAIGPTModel"),rnr=o(" (OpenAI GPT model)"),tnr=l(),NF=a("li"),b_e=a("strong"),anr=o("pegasus"),nnr=o(" \u2014 "),UX=a("a"),snr=o("TFPegasusModel"),lnr=o(" (Pegasus model)"),inr=l(),jF=a("li"),v_e=a("strong"),dnr=o("rembert"),cnr=o(" \u2014 "),JX=a("a"),fnr=o("TFRemBertModel"),mnr=o(" (RemBERT model)"),gnr=l(),DF=a("li"),F_e=a("strong"),hnr=o("roberta"),pnr=o(" \u2014 "),YX=a("a"),unr=o("TFRobertaModel"),_nr=o(" (RoBERTa model)"),bnr=l(),GF=a("li"),T_e=a("strong"),vnr=o("roformer"),Fnr=o(" \u2014 "),KX=a("a"),Tnr=o("TFRoFormerModel"),Mnr=o(" (RoFormer model)"),Enr=l(),OF=a("li"),M_e=a("strong"),Cnr=o("speech_to_text"),wnr=o(" \u2014 "),ZX=a("a"),Anr=o("TFSpeech2TextModel"),ynr=o(" (Speech2Text model)"),Lnr=l(),VF=a("li"),E_e=a("strong"),xnr=o("t5"),$nr=o(" \u2014 "),ez=a("a"),knr=o("TFT5Model"),Snr=o(" (T5 model)"),Rnr=l(),XF=a("li"),C_e=a("strong"),Bnr=o("tapas"),Pnr=o(" \u2014 "),oz=a("a"),Inr=o("TFTapasModel"),qnr=o(" (TAPAS model)"),Nnr=l(),zF=a("li"),w_e=a("strong"),jnr=o("transfo-xl"),Dnr=o(" \u2014 "),rz=a("a"),Gnr=o("TFTransfoXLModel"),Onr=o(" (Transformer-XL model)"),Vnr=l(),QF=a("li"),A_e=a("strong"),Xnr=o("vit"),znr=o(" \u2014 "),tz=a("a"),Qnr=o("TFViTModel"),Wnr=o(" (ViT model)"),Hnr=l(),WF=a("li"),y_e=a("strong"),Unr=o("vit_mae"),Jnr=o(" \u2014 "),az=a("a"),Ynr=o("TFViTMAEModel"),Knr=o(" (ViTMAE model)"),Znr=l(),HF=a("li"),L_e=a("strong"),esr=o("wav2vec2"),osr=o(" \u2014 "),nz=a("a"),rsr=o("TFWav2Vec2Model"),tsr=o(" (Wav2Vec2 model)"),asr=l(),UF=a("li"),x_e=a("strong"),nsr=o("xlm"),ssr=o(" \u2014 "),sz=a("a"),lsr=o("TFXLMModel"),isr=o(" (XLM model)"),dsr=l(),JF=a("li"),$_e=a("strong"),csr=o("xlm-roberta"),fsr=o(" \u2014 "),lz=a("a"),msr=o("TFXLMRobertaModel"),gsr=o(" (XLM-RoBERTa model)"),hsr=l(),YF=a("li"),k_e=a("strong"),psr=o("xlnet"),usr=o(" \u2014 "),iz=a("a"),_sr=o("TFXLNetModel"),bsr=o(" (XLNet model)"),vsr=l(),F(KF.$$.fragment),wPe=l(),Bd=a("h2"),ZF=a("a"),S_e=a("span"),F(fL.$$.fragment),Fsr=l(),R_e=a("span"),Tsr=o("TFAutoModelForPreTraining"),APe=l(),Ko=a("div"),F(mL.$$.fragment),Msr=l(),Pd=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dz=a("a"),Csr=o("from_pretrained()"),wsr=o(" class method or the "),cz=a("a"),Asr=o("from_config()"),ysr=o(` class
method.`),Lsr=l(),gL=a("p"),xsr=o("This class cannot be instantiated directly using "),B_e=a("code"),$sr=o("__init__()"),ksr=o(" (throws an error)."),Ssr=l(),Ct=a("div"),F(hL.$$.fragment),Rsr=l(),P_e=a("p"),Bsr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Psr=l(),Id=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),qsr=o("not"),Nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),jsr=o("from_pretrained()"),Dsr=o(" to load the model weights."),Gsr=l(),F(eT.$$.fragment),Osr=l(),wr=a("div"),F(pL.$$.fragment),Vsr=l(),q_e=a("p"),Xsr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zsr=l(),Ja=a("p"),Qsr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Wsr=o("model_type"),Hsr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(":"),Zsr=l(),ne=a("ul"),oT=a("li"),G_e=a("strong"),elr=o("albert"),olr=o(" \u2014 "),mz=a("a"),rlr=o("TFAlbertForPreTraining"),tlr=o(" (ALBERT model)"),alr=l(),rT=a("li"),O_e=a("strong"),nlr=o("bart"),slr=o(" \u2014 "),gz=a("a"),llr=o("TFBartForConditionalGeneration"),ilr=o(" (BART model)"),dlr=l(),tT=a("li"),V_e=a("strong"),clr=o("bert"),flr=o(" \u2014 "),hz=a("a"),mlr=o("TFBertForPreTraining"),glr=o(" (BERT model)"),hlr=l(),aT=a("li"),X_e=a("strong"),plr=o("camembert"),ulr=o(" \u2014 "),pz=a("a"),_lr=o("TFCamembertForMaskedLM"),blr=o(" (CamemBERT model)"),vlr=l(),nT=a("li"),z_e=a("strong"),Flr=o("ctrl"),Tlr=o(" \u2014 "),uz=a("a"),Mlr=o("TFCTRLLMHeadModel"),Elr=o(" (CTRL model)"),Clr=l(),sT=a("li"),Q_e=a("strong"),wlr=o("distilbert"),Alr=o(" \u2014 "),_z=a("a"),ylr=o("TFDistilBertForMaskedLM"),Llr=o(" (DistilBERT model)"),xlr=l(),lT=a("li"),W_e=a("strong"),$lr=o("electra"),klr=o(" \u2014 "),bz=a("a"),Slr=o("TFElectraForPreTraining"),Rlr=o(" (ELECTRA model)"),Blr=l(),iT=a("li"),H_e=a("strong"),Plr=o("flaubert"),Ilr=o(" \u2014 "),vz=a("a"),qlr=o("TFFlaubertWithLMHeadModel"),Nlr=o(" (FlauBERT model)"),jlr=l(),dT=a("li"),U_e=a("strong"),Dlr=o("funnel"),Glr=o(" \u2014 "),Fz=a("a"),Olr=o("TFFunnelForPreTraining"),Vlr=o(" (Funnel Transformer model)"),Xlr=l(),cT=a("li"),J_e=a("strong"),zlr=o("gpt2"),Qlr=o(" \u2014 "),Tz=a("a"),Wlr=o("TFGPT2LMHeadModel"),Hlr=o(" (OpenAI GPT-2 model)"),Ulr=l(),fT=a("li"),Y_e=a("strong"),Jlr=o("layoutlm"),Ylr=o(" \u2014 "),Mz=a("a"),Klr=o("TFLayoutLMForMaskedLM"),Zlr=o(" (LayoutLM model)"),eir=l(),mT=a("li"),K_e=a("strong"),oir=o("lxmert"),rir=o(" \u2014 "),Ez=a("a"),tir=o("TFLxmertForPreTraining"),air=o(" (LXMERT model)"),nir=l(),gT=a("li"),Z_e=a("strong"),sir=o("mobilebert"),lir=o(" \u2014 "),Cz=a("a"),iir=o("TFMobileBertForPreTraining"),dir=o(" (MobileBERT model)"),cir=l(),hT=a("li"),e1e=a("strong"),fir=o("mpnet"),mir=o(" \u2014 "),wz=a("a"),gir=o("TFMPNetForMaskedLM"),hir=o(" (MPNet model)"),pir=l(),pT=a("li"),o1e=a("strong"),uir=o("openai-gpt"),_ir=o(" \u2014 "),Az=a("a"),bir=o("TFOpenAIGPTLMHeadModel"),vir=o(" (OpenAI GPT model)"),Fir=l(),uT=a("li"),r1e=a("strong"),Tir=o("roberta"),Mir=o(" \u2014 "),yz=a("a"),Eir=o("TFRobertaForMaskedLM"),Cir=o(" (RoBERTa model)"),wir=l(),_T=a("li"),t1e=a("strong"),Air=o("t5"),yir=o(" \u2014 "),Lz=a("a"),Lir=o("TFT5ForConditionalGeneration"),xir=o(" (T5 model)"),$ir=l(),bT=a("li"),a1e=a("strong"),kir=o("tapas"),Sir=o(" \u2014 "),xz=a("a"),Rir=o("TFTapasForMaskedLM"),Bir=o(" (TAPAS model)"),Pir=l(),vT=a("li"),n1e=a("strong"),Iir=o("transfo-xl"),qir=o(" \u2014 "),$z=a("a"),Nir=o("TFTransfoXLLMHeadModel"),jir=o(" (Transformer-XL model)"),Dir=l(),FT=a("li"),s1e=a("strong"),Gir=o("vit_mae"),Oir=o(" \u2014 "),kz=a("a"),Vir=o("TFViTMAEForPreTraining"),Xir=o(" (ViTMAE model)"),zir=l(),TT=a("li"),l1e=a("strong"),Qir=o("xlm"),Wir=o(" \u2014 "),Sz=a("a"),Hir=o("TFXLMWithLMHeadModel"),Uir=o(" (XLM model)"),Jir=l(),MT=a("li"),i1e=a("strong"),Yir=o("xlm-roberta"),Kir=o(" \u2014 "),Rz=a("a"),Zir=o("TFXLMRobertaForMaskedLM"),edr=o(" (XLM-RoBERTa model)"),odr=l(),ET=a("li"),d1e=a("strong"),rdr=o("xlnet"),tdr=o(" \u2014 "),Bz=a("a"),adr=o("TFXLNetLMHeadModel"),ndr=o(" (XLNet model)"),sdr=l(),F(CT.$$.fragment),yPe=l(),qd=a("h2"),wT=a("a"),c1e=a("span"),F(uL.$$.fragment),ldr=l(),f1e=a("span"),idr=o("TFAutoModelForCausalLM"),LPe=l(),Zo=a("div"),F(_L.$$.fragment),ddr=l(),Nd=a("p"),cdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pz=a("a"),fdr=o("from_pretrained()"),mdr=o(" class method or the "),Iz=a("a"),gdr=o("from_config()"),hdr=o(` class
method.`),pdr=l(),bL=a("p"),udr=o("This class cannot be instantiated directly using "),m1e=a("code"),_dr=o("__init__()"),bdr=o(" (throws an error)."),vdr=l(),wt=a("div"),F(vL.$$.fragment),Fdr=l(),g1e=a("p"),Tdr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mdr=l(),jd=a("p"),Edr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),Cdr=o("not"),wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Adr=o("from_pretrained()"),ydr=o(" to load the model weights."),Ldr=l(),F(AT.$$.fragment),xdr=l(),Ar=a("div"),F(FL.$$.fragment),$dr=l(),p1e=a("p"),kdr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Sdr=l(),Ya=a("p"),Rdr=o("The model class to instantiate is selected based on the "),u1e=a("code"),Bdr=o("model_type"),Pdr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Idr=o("pretrained_model_name_or_path"),qdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),Ndr=o("pretrained_model_name_or_path"),jdr=o(":"),Ddr=l(),Te=a("ul"),yT=a("li"),v1e=a("strong"),Gdr=o("bert"),Odr=o(" \u2014 "),Nz=a("a"),Vdr=o("TFBertLMHeadModel"),Xdr=o(" (BERT model)"),zdr=l(),LT=a("li"),F1e=a("strong"),Qdr=o("camembert"),Wdr=o(" \u2014 "),jz=a("a"),Hdr=o("TFCamembertForCausalLM"),Udr=o(" (CamemBERT model)"),Jdr=l(),xT=a("li"),T1e=a("strong"),Ydr=o("ctrl"),Kdr=o(" \u2014 "),Dz=a("a"),Zdr=o("TFCTRLLMHeadModel"),ecr=o(" (CTRL model)"),ocr=l(),$T=a("li"),M1e=a("strong"),rcr=o("gpt2"),tcr=o(" \u2014 "),Gz=a("a"),acr=o("TFGPT2LMHeadModel"),ncr=o(" (OpenAI GPT-2 model)"),scr=l(),kT=a("li"),E1e=a("strong"),lcr=o("gptj"),icr=o(" \u2014 "),Oz=a("a"),dcr=o("TFGPTJForCausalLM"),ccr=o(" (GPT-J model)"),fcr=l(),ST=a("li"),C1e=a("strong"),mcr=o("openai-gpt"),gcr=o(" \u2014 "),Vz=a("a"),hcr=o("TFOpenAIGPTLMHeadModel"),pcr=o(" (OpenAI GPT model)"),ucr=l(),RT=a("li"),w1e=a("strong"),_cr=o("rembert"),bcr=o(" \u2014 "),Xz=a("a"),vcr=o("TFRemBertForCausalLM"),Fcr=o(" (RemBERT model)"),Tcr=l(),BT=a("li"),A1e=a("strong"),Mcr=o("roberta"),Ecr=o(" \u2014 "),zz=a("a"),Ccr=o("TFRobertaForCausalLM"),wcr=o(" (RoBERTa model)"),Acr=l(),PT=a("li"),y1e=a("strong"),ycr=o("roformer"),Lcr=o(" \u2014 "),Qz=a("a"),xcr=o("TFRoFormerForCausalLM"),$cr=o(" (RoFormer model)"),kcr=l(),IT=a("li"),L1e=a("strong"),Scr=o("transfo-xl"),Rcr=o(" \u2014 "),Wz=a("a"),Bcr=o("TFTransfoXLLMHeadModel"),Pcr=o(" (Transformer-XL model)"),Icr=l(),qT=a("li"),x1e=a("strong"),qcr=o("xlm"),Ncr=o(" \u2014 "),Hz=a("a"),jcr=o("TFXLMWithLMHeadModel"),Dcr=o(" (XLM model)"),Gcr=l(),NT=a("li"),$1e=a("strong"),Ocr=o("xlnet"),Vcr=o(" \u2014 "),Uz=a("a"),Xcr=o("TFXLNetLMHeadModel"),zcr=o(" (XLNet model)"),Qcr=l(),F(jT.$$.fragment),xPe=l(),Dd=a("h2"),DT=a("a"),k1e=a("span"),F(TL.$$.fragment),Wcr=l(),S1e=a("span"),Hcr=o("TFAutoModelForImageClassification"),$Pe=l(),er=a("div"),F(ML.$$.fragment),Ucr=l(),Gd=a("p"),Jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jz=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" class method or the "),Yz=a("a"),Zcr=o("from_config()"),efr=o(` class
method.`),ofr=l(),EL=a("p"),rfr=o("This class cannot be instantiated directly using "),R1e=a("code"),tfr=o("__init__()"),afr=o(" (throws an error)."),nfr=l(),At=a("div"),F(CL.$$.fragment),sfr=l(),B1e=a("p"),lfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ifr=l(),Od=a("p"),dfr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),cfr=o("not"),ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),mfr=o("from_pretrained()"),gfr=o(" to load the model weights."),hfr=l(),F(GT.$$.fragment),pfr=l(),yr=a("div"),F(wL.$$.fragment),ufr=l(),I1e=a("p"),_fr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bfr=l(),Ka=a("p"),vfr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Ffr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(":"),Afr=l(),Vd=a("ul"),OT=a("li"),D1e=a("strong"),yfr=o("convnext"),Lfr=o(" \u2014 "),Zz=a("a"),xfr=o("TFConvNextForImageClassification"),$fr=o(" (ConvNext model)"),kfr=l(),VT=a("li"),G1e=a("strong"),Sfr=o("data2vec-vision"),Rfr=o(" \u2014 "),eQ=a("a"),Bfr=o("TFData2VecVisionForImageClassification"),Pfr=o(" (Data2VecVision model)"),Ifr=l(),XT=a("li"),O1e=a("strong"),qfr=o("vit"),Nfr=o(" \u2014 "),oQ=a("a"),jfr=o("TFViTForImageClassification"),Dfr=o(" (ViT model)"),Gfr=l(),F(zT.$$.fragment),kPe=l(),Xd=a("h2"),QT=a("a"),V1e=a("span"),F(AL.$$.fragment),Ofr=l(),X1e=a("span"),Vfr=o("TFAutoModelForMaskedLM"),SPe=l(),or=a("div"),F(yL.$$.fragment),Xfr=l(),zd=a("p"),zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rQ=a("a"),Qfr=o("from_pretrained()"),Wfr=o(" class method or the "),tQ=a("a"),Hfr=o("from_config()"),Ufr=o(` class
method.`),Jfr=l(),LL=a("p"),Yfr=o("This class cannot be instantiated directly using "),z1e=a("code"),Kfr=o("__init__()"),Zfr=o(" (throws an error)."),emr=l(),yt=a("div"),F(xL.$$.fragment),omr=l(),Q1e=a("p"),rmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tmr=l(),Qd=a("p"),amr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),nmr=o("not"),smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),lmr=o("from_pretrained()"),imr=o(" to load the model weights."),dmr=l(),F(WT.$$.fragment),cmr=l(),Lr=a("div"),F($L.$$.fragment),fmr=l(),H1e=a("p"),mmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gmr=l(),Za=a("p"),hmr=o("The model class to instantiate is selected based on the "),U1e=a("code"),pmr=o("model_type"),umr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),_mr=o("pretrained_model_name_or_path"),bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),vmr=o("pretrained_model_name_or_path"),Fmr=o(":"),Tmr=l(),ie=a("ul"),HT=a("li"),K1e=a("strong"),Mmr=o("albert"),Emr=o(" \u2014 "),nQ=a("a"),Cmr=o("TFAlbertForMaskedLM"),wmr=o(" (ALBERT model)"),Amr=l(),UT=a("li"),Z1e=a("strong"),ymr=o("bert"),Lmr=o(" \u2014 "),sQ=a("a"),xmr=o("TFBertForMaskedLM"),$mr=o(" (BERT model)"),kmr=l(),JT=a("li"),ebe=a("strong"),Smr=o("camembert"),Rmr=o(" \u2014 "),lQ=a("a"),Bmr=o("TFCamembertForMaskedLM"),Pmr=o(" (CamemBERT model)"),Imr=l(),YT=a("li"),obe=a("strong"),qmr=o("convbert"),Nmr=o(" \u2014 "),iQ=a("a"),jmr=o("TFConvBertForMaskedLM"),Dmr=o(" (ConvBERT model)"),Gmr=l(),KT=a("li"),rbe=a("strong"),Omr=o("deberta"),Vmr=o(" \u2014 "),dQ=a("a"),Xmr=o("TFDebertaForMaskedLM"),zmr=o(" (DeBERTa model)"),Qmr=l(),ZT=a("li"),tbe=a("strong"),Wmr=o("deberta-v2"),Hmr=o(" \u2014 "),cQ=a("a"),Umr=o("TFDebertaV2ForMaskedLM"),Jmr=o(" (DeBERTa-v2 model)"),Ymr=l(),e7=a("li"),abe=a("strong"),Kmr=o("distilbert"),Zmr=o(" \u2014 "),fQ=a("a"),egr=o("TFDistilBertForMaskedLM"),ogr=o(" (DistilBERT model)"),rgr=l(),o7=a("li"),nbe=a("strong"),tgr=o("electra"),agr=o(" \u2014 "),mQ=a("a"),ngr=o("TFElectraForMaskedLM"),sgr=o(" (ELECTRA model)"),lgr=l(),r7=a("li"),sbe=a("strong"),igr=o("flaubert"),dgr=o(" \u2014 "),gQ=a("a"),cgr=o("TFFlaubertWithLMHeadModel"),fgr=o(" (FlauBERT model)"),mgr=l(),t7=a("li"),lbe=a("strong"),ggr=o("funnel"),hgr=o(" \u2014 "),hQ=a("a"),pgr=o("TFFunnelForMaskedLM"),ugr=o(" (Funnel Transformer model)"),_gr=l(),a7=a("li"),ibe=a("strong"),bgr=o("layoutlm"),vgr=o(" \u2014 "),pQ=a("a"),Fgr=o("TFLayoutLMForMaskedLM"),Tgr=o(" (LayoutLM model)"),Mgr=l(),n7=a("li"),dbe=a("strong"),Egr=o("longformer"),Cgr=o(" \u2014 "),uQ=a("a"),wgr=o("TFLongformerForMaskedLM"),Agr=o(" (Longformer model)"),ygr=l(),s7=a("li"),cbe=a("strong"),Lgr=o("mobilebert"),xgr=o(" \u2014 "),_Q=a("a"),$gr=o("TFMobileBertForMaskedLM"),kgr=o(" (MobileBERT model)"),Sgr=l(),l7=a("li"),fbe=a("strong"),Rgr=o("mpnet"),Bgr=o(" \u2014 "),bQ=a("a"),Pgr=o("TFMPNetForMaskedLM"),Igr=o(" (MPNet model)"),qgr=l(),i7=a("li"),mbe=a("strong"),Ngr=o("rembert"),jgr=o(" \u2014 "),vQ=a("a"),Dgr=o("TFRemBertForMaskedLM"),Ggr=o(" (RemBERT model)"),Ogr=l(),d7=a("li"),gbe=a("strong"),Vgr=o("roberta"),Xgr=o(" \u2014 "),FQ=a("a"),zgr=o("TFRobertaForMaskedLM"),Qgr=o(" (RoBERTa model)"),Wgr=l(),c7=a("li"),hbe=a("strong"),Hgr=o("roformer"),Ugr=o(" \u2014 "),TQ=a("a"),Jgr=o("TFRoFormerForMaskedLM"),Ygr=o(" (RoFormer model)"),Kgr=l(),f7=a("li"),pbe=a("strong"),Zgr=o("tapas"),ehr=o(" \u2014 "),MQ=a("a"),ohr=o("TFTapasForMaskedLM"),rhr=o(" (TAPAS model)"),thr=l(),m7=a("li"),ube=a("strong"),ahr=o("xlm"),nhr=o(" \u2014 "),EQ=a("a"),shr=o("TFXLMWithLMHeadModel"),lhr=o(" (XLM model)"),ihr=l(),g7=a("li"),_be=a("strong"),dhr=o("xlm-roberta"),chr=o(" \u2014 "),CQ=a("a"),fhr=o("TFXLMRobertaForMaskedLM"),mhr=o(" (XLM-RoBERTa model)"),ghr=l(),F(h7.$$.fragment),RPe=l(),Wd=a("h2"),p7=a("a"),bbe=a("span"),F(kL.$$.fragment),hhr=l(),vbe=a("span"),phr=o("TFAutoModelForSeq2SeqLM"),BPe=l(),rr=a("div"),F(SL.$$.fragment),uhr=l(),Hd=a("p"),_hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wQ=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),AQ=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),RL=a("p"),Ehr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),Lt=a("div"),F(BL.$$.fragment),yhr=l(),Tbe=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xhr=l(),Ud=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Rhr=o("from_pretrained()"),Bhr=o(" to load the model weights."),Phr=l(),F(u7.$$.fragment),Ihr=l(),xr=a("div"),F(PL.$$.fragment),qhr=l(),Ebe=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jhr=l(),en=a("p"),Dhr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),zhr=o("pretrained_model_name_or_path"),Qhr=o(":"),Whr=l(),ye=a("ul"),_7=a("li"),ybe=a("strong"),Hhr=o("bart"),Uhr=o(" \u2014 "),LQ=a("a"),Jhr=o("TFBartForConditionalGeneration"),Yhr=o(" (BART model)"),Khr=l(),b7=a("li"),Lbe=a("strong"),Zhr=o("blenderbot"),epr=o(" \u2014 "),xQ=a("a"),opr=o("TFBlenderbotForConditionalGeneration"),rpr=o(" (Blenderbot model)"),tpr=l(),v7=a("li"),xbe=a("strong"),apr=o("blenderbot-small"),npr=o(" \u2014 "),$Q=a("a"),spr=o("TFBlenderbotSmallForConditionalGeneration"),lpr=o(" (BlenderbotSmall model)"),ipr=l(),F7=a("li"),$be=a("strong"),dpr=o("encoder-decoder"),cpr=o(" \u2014 "),kQ=a("a"),fpr=o("TFEncoderDecoderModel"),mpr=o(" (Encoder decoder model)"),gpr=l(),T7=a("li"),kbe=a("strong"),hpr=o("led"),ppr=o(" \u2014 "),SQ=a("a"),upr=o("TFLEDForConditionalGeneration"),_pr=o(" (LED model)"),bpr=l(),M7=a("li"),Sbe=a("strong"),vpr=o("marian"),Fpr=o(" \u2014 "),RQ=a("a"),Tpr=o("TFMarianMTModel"),Mpr=o(" (Marian model)"),Epr=l(),E7=a("li"),Rbe=a("strong"),Cpr=o("mbart"),wpr=o(" \u2014 "),BQ=a("a"),Apr=o("TFMBartForConditionalGeneration"),ypr=o(" (mBART model)"),Lpr=l(),C7=a("li"),Bbe=a("strong"),xpr=o("mt5"),$pr=o(" \u2014 "),PQ=a("a"),kpr=o("TFMT5ForConditionalGeneration"),Spr=o(" (mT5 model)"),Rpr=l(),w7=a("li"),Pbe=a("strong"),Bpr=o("pegasus"),Ppr=o(" \u2014 "),IQ=a("a"),Ipr=o("TFPegasusForConditionalGeneration"),qpr=o(" (Pegasus model)"),Npr=l(),A7=a("li"),Ibe=a("strong"),jpr=o("t5"),Dpr=o(" \u2014 "),qQ=a("a"),Gpr=o("TFT5ForConditionalGeneration"),Opr=o(" (T5 model)"),Vpr=l(),F(y7.$$.fragment),PPe=l(),Jd=a("h2"),L7=a("a"),qbe=a("span"),F(IL.$$.fragment),Xpr=l(),Nbe=a("span"),zpr=o("TFAutoModelForSequenceClassification"),IPe=l(),tr=a("div"),F(qL.$$.fragment),Qpr=l(),Yd=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NQ=a("a"),Hpr=o("from_pretrained()"),Upr=o(" class method or the "),jQ=a("a"),Jpr=o("from_config()"),Ypr=o(` class
method.`),Kpr=l(),NL=a("p"),Zpr=o("This class cannot be instantiated directly using "),jbe=a("code"),eur=o("__init__()"),our=o(" (throws an error)."),rur=l(),xt=a("div"),F(jL.$$.fragment),tur=l(),Dbe=a("p"),aur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nur=l(),Kd=a("p"),sur=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),lur=o("not"),iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),dur=o("from_pretrained()"),cur=o(" to load the model weights."),fur=l(),F(x7.$$.fragment),mur=l(),$r=a("div"),F(DL.$$.fragment),gur=l(),Obe=a("p"),hur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pur=l(),on=a("p"),uur=o("The model class to instantiate is selected based on the "),Vbe=a("code"),_ur=o("model_type"),bur=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(":"),Eur=l(),Z=a("ul"),$7=a("li"),Qbe=a("strong"),Cur=o("albert"),wur=o(" \u2014 "),GQ=a("a"),Aur=o("TFAlbertForSequenceClassification"),yur=o(" (ALBERT model)"),Lur=l(),k7=a("li"),Wbe=a("strong"),xur=o("bert"),$ur=o(" \u2014 "),OQ=a("a"),kur=o("TFBertForSequenceClassification"),Sur=o(" (BERT model)"),Rur=l(),S7=a("li"),Hbe=a("strong"),Bur=o("camembert"),Pur=o(" \u2014 "),VQ=a("a"),Iur=o("TFCamembertForSequenceClassification"),qur=o(" (CamemBERT model)"),Nur=l(),R7=a("li"),Ube=a("strong"),jur=o("convbert"),Dur=o(" \u2014 "),XQ=a("a"),Gur=o("TFConvBertForSequenceClassification"),Our=o(" (ConvBERT model)"),Vur=l(),B7=a("li"),Jbe=a("strong"),Xur=o("ctrl"),zur=o(" \u2014 "),zQ=a("a"),Qur=o("TFCTRLForSequenceClassification"),Wur=o(" (CTRL model)"),Hur=l(),P7=a("li"),Ybe=a("strong"),Uur=o("deberta"),Jur=o(" \u2014 "),QQ=a("a"),Yur=o("TFDebertaForSequenceClassification"),Kur=o(" (DeBERTa model)"),Zur=l(),I7=a("li"),Kbe=a("strong"),e_r=o("deberta-v2"),o_r=o(" \u2014 "),WQ=a("a"),r_r=o("TFDebertaV2ForSequenceClassification"),t_r=o(" (DeBERTa-v2 model)"),a_r=l(),q7=a("li"),Zbe=a("strong"),n_r=o("distilbert"),s_r=o(" \u2014 "),HQ=a("a"),l_r=o("TFDistilBertForSequenceClassification"),i_r=o(" (DistilBERT model)"),d_r=l(),N7=a("li"),e2e=a("strong"),c_r=o("electra"),f_r=o(" \u2014 "),UQ=a("a"),m_r=o("TFElectraForSequenceClassification"),g_r=o(" (ELECTRA model)"),h_r=l(),j7=a("li"),o2e=a("strong"),p_r=o("flaubert"),u_r=o(" \u2014 "),JQ=a("a"),__r=o("TFFlaubertForSequenceClassification"),b_r=o(" (FlauBERT model)"),v_r=l(),D7=a("li"),r2e=a("strong"),F_r=o("funnel"),T_r=o(" \u2014 "),YQ=a("a"),M_r=o("TFFunnelForSequenceClassification"),E_r=o(" (Funnel Transformer model)"),C_r=l(),G7=a("li"),t2e=a("strong"),w_r=o("gpt2"),A_r=o(" \u2014 "),KQ=a("a"),y_r=o("TFGPT2ForSequenceClassification"),L_r=o(" (OpenAI GPT-2 model)"),x_r=l(),O7=a("li"),a2e=a("strong"),$_r=o("gptj"),k_r=o(" \u2014 "),ZQ=a("a"),S_r=o("TFGPTJForSequenceClassification"),R_r=o(" (GPT-J model)"),B_r=l(),V7=a("li"),n2e=a("strong"),P_r=o("layoutlm"),I_r=o(" \u2014 "),eW=a("a"),q_r=o("TFLayoutLMForSequenceClassification"),N_r=o(" (LayoutLM model)"),j_r=l(),X7=a("li"),s2e=a("strong"),D_r=o("longformer"),G_r=o(" \u2014 "),oW=a("a"),O_r=o("TFLongformerForSequenceClassification"),V_r=o(" (Longformer model)"),X_r=l(),z7=a("li"),l2e=a("strong"),z_r=o("mobilebert"),Q_r=o(" \u2014 "),rW=a("a"),W_r=o("TFMobileBertForSequenceClassification"),H_r=o(" (MobileBERT model)"),U_r=l(),Q7=a("li"),i2e=a("strong"),J_r=o("mpnet"),Y_r=o(" \u2014 "),tW=a("a"),K_r=o("TFMPNetForSequenceClassification"),Z_r=o(" (MPNet model)"),e1r=l(),W7=a("li"),d2e=a("strong"),o1r=o("openai-gpt"),r1r=o(" \u2014 "),aW=a("a"),t1r=o("TFOpenAIGPTForSequenceClassification"),a1r=o(" (OpenAI GPT model)"),n1r=l(),H7=a("li"),c2e=a("strong"),s1r=o("rembert"),l1r=o(" \u2014 "),nW=a("a"),i1r=o("TFRemBertForSequenceClassification"),d1r=o(" (RemBERT model)"),c1r=l(),U7=a("li"),f2e=a("strong"),f1r=o("roberta"),m1r=o(" \u2014 "),sW=a("a"),g1r=o("TFRobertaForSequenceClassification"),h1r=o(" (RoBERTa model)"),p1r=l(),J7=a("li"),m2e=a("strong"),u1r=o("roformer"),_1r=o(" \u2014 "),lW=a("a"),b1r=o("TFRoFormerForSequenceClassification"),v1r=o(" (RoFormer model)"),F1r=l(),Y7=a("li"),g2e=a("strong"),T1r=o("tapas"),M1r=o(" \u2014 "),iW=a("a"),E1r=o("TFTapasForSequenceClassification"),C1r=o(" (TAPAS model)"),w1r=l(),K7=a("li"),h2e=a("strong"),A1r=o("transfo-xl"),y1r=o(" \u2014 "),dW=a("a"),L1r=o("TFTransfoXLForSequenceClassification"),x1r=o(" (Transformer-XL model)"),$1r=l(),Z7=a("li"),p2e=a("strong"),k1r=o("xlm"),S1r=o(" \u2014 "),cW=a("a"),R1r=o("TFXLMForSequenceClassification"),B1r=o(" (XLM model)"),P1r=l(),eM=a("li"),u2e=a("strong"),I1r=o("xlm-roberta"),q1r=o(" \u2014 "),fW=a("a"),N1r=o("TFXLMRobertaForSequenceClassification"),j1r=o(" (XLM-RoBERTa model)"),D1r=l(),oM=a("li"),_2e=a("strong"),G1r=o("xlnet"),O1r=o(" \u2014 "),mW=a("a"),V1r=o("TFXLNetForSequenceClassification"),X1r=o(" (XLNet model)"),z1r=l(),F(rM.$$.fragment),qPe=l(),Zd=a("h2"),tM=a("a"),b2e=a("span"),F(GL.$$.fragment),Q1r=l(),v2e=a("span"),W1r=o("TFAutoModelForMultipleChoice"),NPe=l(),ar=a("div"),F(OL.$$.fragment),H1r=l(),ec=a("p"),U1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gW=a("a"),J1r=o("from_pretrained()"),Y1r=o(" class method or the "),hW=a("a"),K1r=o("from_config()"),Z1r=o(` class
method.`),ebr=l(),VL=a("p"),obr=o("This class cannot be instantiated directly using "),F2e=a("code"),rbr=o("__init__()"),tbr=o(" (throws an error)."),abr=l(),$t=a("div"),F(XL.$$.fragment),nbr=l(),T2e=a("p"),sbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lbr=l(),oc=a("p"),ibr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),dbr=o("not"),cbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),fbr=o("from_pretrained()"),mbr=o(" to load the model weights."),gbr=l(),F(aM.$$.fragment),hbr=l(),kr=a("div"),F(zL.$$.fragment),pbr=l(),E2e=a("p"),ubr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_br=l(),rn=a("p"),bbr=o("The model class to instantiate is selected based on the "),C2e=a("code"),vbr=o("model_type"),Fbr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Tbr=o("pretrained_model_name_or_path"),Mbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(":"),wbr=l(),pe=a("ul"),nM=a("li"),y2e=a("strong"),Abr=o("albert"),ybr=o(" \u2014 "),uW=a("a"),Lbr=o("TFAlbertForMultipleChoice"),xbr=o(" (ALBERT model)"),$br=l(),sM=a("li"),L2e=a("strong"),kbr=o("bert"),Sbr=o(" \u2014 "),_W=a("a"),Rbr=o("TFBertForMultipleChoice"),Bbr=o(" (BERT model)"),Pbr=l(),lM=a("li"),x2e=a("strong"),Ibr=o("camembert"),qbr=o(" \u2014 "),bW=a("a"),Nbr=o("TFCamembertForMultipleChoice"),jbr=o(" (CamemBERT model)"),Dbr=l(),iM=a("li"),$2e=a("strong"),Gbr=o("convbert"),Obr=o(" \u2014 "),vW=a("a"),Vbr=o("TFConvBertForMultipleChoice"),Xbr=o(" (ConvBERT model)"),zbr=l(),dM=a("li"),k2e=a("strong"),Qbr=o("distilbert"),Wbr=o(" \u2014 "),FW=a("a"),Hbr=o("TFDistilBertForMultipleChoice"),Ubr=o(" (DistilBERT model)"),Jbr=l(),cM=a("li"),S2e=a("strong"),Ybr=o("electra"),Kbr=o(" \u2014 "),TW=a("a"),Zbr=o("TFElectraForMultipleChoice"),e2r=o(" (ELECTRA model)"),o2r=l(),fM=a("li"),R2e=a("strong"),r2r=o("flaubert"),t2r=o(" \u2014 "),MW=a("a"),a2r=o("TFFlaubertForMultipleChoice"),n2r=o(" (FlauBERT model)"),s2r=l(),mM=a("li"),B2e=a("strong"),l2r=o("funnel"),i2r=o(" \u2014 "),EW=a("a"),d2r=o("TFFunnelForMultipleChoice"),c2r=o(" (Funnel Transformer model)"),f2r=l(),gM=a("li"),P2e=a("strong"),m2r=o("longformer"),g2r=o(" \u2014 "),CW=a("a"),h2r=o("TFLongformerForMultipleChoice"),p2r=o(" (Longformer model)"),u2r=l(),hM=a("li"),I2e=a("strong"),_2r=o("mobilebert"),b2r=o(" \u2014 "),wW=a("a"),v2r=o("TFMobileBertForMultipleChoice"),F2r=o(" (MobileBERT model)"),T2r=l(),pM=a("li"),q2e=a("strong"),M2r=o("mpnet"),E2r=o(" \u2014 "),AW=a("a"),C2r=o("TFMPNetForMultipleChoice"),w2r=o(" (MPNet model)"),A2r=l(),uM=a("li"),N2e=a("strong"),y2r=o("rembert"),L2r=o(" \u2014 "),yW=a("a"),x2r=o("TFRemBertForMultipleChoice"),$2r=o(" (RemBERT model)"),k2r=l(),_M=a("li"),j2e=a("strong"),S2r=o("roberta"),R2r=o(" \u2014 "),LW=a("a"),B2r=o("TFRobertaForMultipleChoice"),P2r=o(" (RoBERTa model)"),I2r=l(),bM=a("li"),D2e=a("strong"),q2r=o("roformer"),N2r=o(" \u2014 "),xW=a("a"),j2r=o("TFRoFormerForMultipleChoice"),D2r=o(" (RoFormer model)"),G2r=l(),vM=a("li"),G2e=a("strong"),O2r=o("xlm"),V2r=o(" \u2014 "),$W=a("a"),X2r=o("TFXLMForMultipleChoice"),z2r=o(" (XLM model)"),Q2r=l(),FM=a("li"),O2e=a("strong"),W2r=o("xlm-roberta"),H2r=o(" \u2014 "),kW=a("a"),U2r=o("TFXLMRobertaForMultipleChoice"),J2r=o(" (XLM-RoBERTa model)"),Y2r=l(),TM=a("li"),V2e=a("strong"),K2r=o("xlnet"),Z2r=o(" \u2014 "),SW=a("a"),e5r=o("TFXLNetForMultipleChoice"),o5r=o(" (XLNet model)"),r5r=l(),F(MM.$$.fragment),jPe=l(),rc=a("h2"),EM=a("a"),X2e=a("span"),F(QL.$$.fragment),t5r=l(),z2e=a("span"),a5r=o("TFAutoModelForTableQuestionAnswering"),DPe=l(),nr=a("div"),F(WL.$$.fragment),n5r=l(),tc=a("p"),s5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RW=a("a"),l5r=o("from_pretrained()"),i5r=o(" class method or the "),BW=a("a"),d5r=o("from_config()"),c5r=o(` class
method.`),f5r=l(),HL=a("p"),m5r=o("This class cannot be instantiated directly using "),Q2e=a("code"),g5r=o("__init__()"),h5r=o(" (throws an error)."),p5r=l(),kt=a("div"),F(UL.$$.fragment),u5r=l(),W2e=a("p"),_5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),b5r=l(),ac=a("p"),v5r=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),F5r=o("not"),T5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),M5r=o("from_pretrained()"),E5r=o(" to load the model weights."),C5r=l(),F(CM.$$.fragment),w5r=l(),Sr=a("div"),F(JL.$$.fragment),A5r=l(),U2e=a("p"),y5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L5r=l(),tn=a("p"),x5r=o("The model class to instantiate is selected based on the "),J2e=a("code"),$5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),S5r=o("pretrained_model_name_or_path"),R5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),B5r=o("pretrained_model_name_or_path"),P5r=o(":"),I5r=l(),Z2e=a("ul"),wM=a("li"),e5e=a("strong"),q5r=o("tapas"),N5r=o(" \u2014 "),IW=a("a"),j5r=o("TFTapasForQuestionAnswering"),D5r=o(" (TAPAS model)"),G5r=l(),F(AM.$$.fragment),GPe=l(),nc=a("h2"),yM=a("a"),o5e=a("span"),F(YL.$$.fragment),O5r=l(),r5e=a("span"),V5r=o("TFAutoModelForTokenClassification"),OPe=l(),sr=a("div"),F(KL.$$.fragment),X5r=l(),sc=a("p"),z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qW=a("a"),Q5r=o("from_pretrained()"),W5r=o(" class method or the "),NW=a("a"),H5r=o("from_config()"),U5r=o(` class
method.`),J5r=l(),ZL=a("p"),Y5r=o("This class cannot be instantiated directly using "),t5e=a("code"),K5r=o("__init__()"),Z5r=o(" (throws an error)."),e3r=l(),St=a("div"),F(e8.$$.fragment),o3r=l(),a5e=a("p"),r3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t3r=l(),lc=a("p"),a3r=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),n3r=o("not"),s3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),l3r=o("from_pretrained()"),i3r=o(" to load the model weights."),d3r=l(),F(LM.$$.fragment),c3r=l(),Rr=a("div"),F(o8.$$.fragment),f3r=l(),s5e=a("p"),m3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),g3r=l(),an=a("p"),h3r=o("The model class to instantiate is selected based on the "),l5e=a("code"),p3r=o("model_type"),u3r=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),v3r=o("pretrained_model_name_or_path"),F3r=o(":"),T3r=l(),de=a("ul"),xM=a("li"),c5e=a("strong"),M3r=o("albert"),E3r=o(" \u2014 "),DW=a("a"),C3r=o("TFAlbertForTokenClassification"),w3r=o(" (ALBERT model)"),A3r=l(),$M=a("li"),f5e=a("strong"),y3r=o("bert"),L3r=o(" \u2014 "),GW=a("a"),x3r=o("TFBertForTokenClassification"),$3r=o(" (BERT model)"),k3r=l(),kM=a("li"),m5e=a("strong"),S3r=o("camembert"),R3r=o(" \u2014 "),OW=a("a"),B3r=o("TFCamembertForTokenClassification"),P3r=o(" (CamemBERT model)"),I3r=l(),SM=a("li"),g5e=a("strong"),q3r=o("convbert"),N3r=o(" \u2014 "),VW=a("a"),j3r=o("TFConvBertForTokenClassification"),D3r=o(" (ConvBERT model)"),G3r=l(),RM=a("li"),h5e=a("strong"),O3r=o("deberta"),V3r=o(" \u2014 "),XW=a("a"),X3r=o("TFDebertaForTokenClassification"),z3r=o(" (DeBERTa model)"),Q3r=l(),BM=a("li"),p5e=a("strong"),W3r=o("deberta-v2"),H3r=o(" \u2014 "),zW=a("a"),U3r=o("TFDebertaV2ForTokenClassification"),J3r=o(" (DeBERTa-v2 model)"),Y3r=l(),PM=a("li"),u5e=a("strong"),K3r=o("distilbert"),Z3r=o(" \u2014 "),QW=a("a"),evr=o("TFDistilBertForTokenClassification"),ovr=o(" (DistilBERT model)"),rvr=l(),IM=a("li"),_5e=a("strong"),tvr=o("electra"),avr=o(" \u2014 "),WW=a("a"),nvr=o("TFElectraForTokenClassification"),svr=o(" (ELECTRA model)"),lvr=l(),qM=a("li"),b5e=a("strong"),ivr=o("flaubert"),dvr=o(" \u2014 "),HW=a("a"),cvr=o("TFFlaubertForTokenClassification"),fvr=o(" (FlauBERT model)"),mvr=l(),NM=a("li"),v5e=a("strong"),gvr=o("funnel"),hvr=o(" \u2014 "),UW=a("a"),pvr=o("TFFunnelForTokenClassification"),uvr=o(" (Funnel Transformer model)"),_vr=l(),jM=a("li"),F5e=a("strong"),bvr=o("layoutlm"),vvr=o(" \u2014 "),JW=a("a"),Fvr=o("TFLayoutLMForTokenClassification"),Tvr=o(" (LayoutLM model)"),Mvr=l(),DM=a("li"),T5e=a("strong"),Evr=o("longformer"),Cvr=o(" \u2014 "),YW=a("a"),wvr=o("TFLongformerForTokenClassification"),Avr=o(" (Longformer model)"),yvr=l(),GM=a("li"),M5e=a("strong"),Lvr=o("mobilebert"),xvr=o(" \u2014 "),KW=a("a"),$vr=o("TFMobileBertForTokenClassification"),kvr=o(" (MobileBERT model)"),Svr=l(),OM=a("li"),E5e=a("strong"),Rvr=o("mpnet"),Bvr=o(" \u2014 "),ZW=a("a"),Pvr=o("TFMPNetForTokenClassification"),Ivr=o(" (MPNet model)"),qvr=l(),VM=a("li"),C5e=a("strong"),Nvr=o("rembert"),jvr=o(" \u2014 "),eH=a("a"),Dvr=o("TFRemBertForTokenClassification"),Gvr=o(" (RemBERT model)"),Ovr=l(),XM=a("li"),w5e=a("strong"),Vvr=o("roberta"),Xvr=o(" \u2014 "),oH=a("a"),zvr=o("TFRobertaForTokenClassification"),Qvr=o(" (RoBERTa model)"),Wvr=l(),zM=a("li"),A5e=a("strong"),Hvr=o("roformer"),Uvr=o(" \u2014 "),rH=a("a"),Jvr=o("TFRoFormerForTokenClassification"),Yvr=o(" (RoFormer model)"),Kvr=l(),QM=a("li"),y5e=a("strong"),Zvr=o("xlm"),eFr=o(" \u2014 "),tH=a("a"),oFr=o("TFXLMForTokenClassification"),rFr=o(" (XLM model)"),tFr=l(),WM=a("li"),L5e=a("strong"),aFr=o("xlm-roberta"),nFr=o(" \u2014 "),aH=a("a"),sFr=o("TFXLMRobertaForTokenClassification"),lFr=o(" (XLM-RoBERTa model)"),iFr=l(),HM=a("li"),x5e=a("strong"),dFr=o("xlnet"),cFr=o(" \u2014 "),nH=a("a"),fFr=o("TFXLNetForTokenClassification"),mFr=o(" (XLNet model)"),gFr=l(),F(UM.$$.fragment),VPe=l(),ic=a("h2"),JM=a("a"),$5e=a("span"),F(r8.$$.fragment),hFr=l(),k5e=a("span"),pFr=o("TFAutoModelForQuestionAnswering"),XPe=l(),lr=a("div"),F(t8.$$.fragment),uFr=l(),dc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=a("a"),bFr=o("from_pretrained()"),vFr=o(" class method or the "),lH=a("a"),FFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),a8=a("p"),EFr=o("This class cannot be instantiated directly using "),S5e=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Rt=a("div"),F(n8.$$.fragment),yFr=l(),R5e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xFr=l(),cc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),kFr=o("not"),SFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),RFr=o("from_pretrained()"),BFr=o(" to load the model weights."),PFr=l(),F(YM.$$.fragment),IFr=l(),Br=a("div"),F(s8.$$.fragment),qFr=l(),P5e=a("p"),NFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jFr=l(),nn=a("p"),DFr=o("The model class to instantiate is selected based on the "),I5e=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),VFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(":"),WFr=l(),ce=a("ul"),KM=a("li"),j5e=a("strong"),HFr=o("albert"),UFr=o(" \u2014 "),dH=a("a"),JFr=o("TFAlbertForQuestionAnswering"),YFr=o(" (ALBERT model)"),KFr=l(),ZM=a("li"),D5e=a("strong"),ZFr=o("bert"),eTr=o(" \u2014 "),cH=a("a"),oTr=o("TFBertForQuestionAnswering"),rTr=o(" (BERT model)"),tTr=l(),e4=a("li"),G5e=a("strong"),aTr=o("camembert"),nTr=o(" \u2014 "),fH=a("a"),sTr=o("TFCamembertForQuestionAnswering"),lTr=o(" (CamemBERT model)"),iTr=l(),o4=a("li"),O5e=a("strong"),dTr=o("convbert"),cTr=o(" \u2014 "),mH=a("a"),fTr=o("TFConvBertForQuestionAnswering"),mTr=o(" (ConvBERT model)"),gTr=l(),r4=a("li"),V5e=a("strong"),hTr=o("deberta"),pTr=o(" \u2014 "),gH=a("a"),uTr=o("TFDebertaForQuestionAnswering"),_Tr=o(" (DeBERTa model)"),bTr=l(),t4=a("li"),X5e=a("strong"),vTr=o("deberta-v2"),FTr=o(" \u2014 "),hH=a("a"),TTr=o("TFDebertaV2ForQuestionAnswering"),MTr=o(" (DeBERTa-v2 model)"),ETr=l(),a4=a("li"),z5e=a("strong"),CTr=o("distilbert"),wTr=o(" \u2014 "),pH=a("a"),ATr=o("TFDistilBertForQuestionAnswering"),yTr=o(" (DistilBERT model)"),LTr=l(),n4=a("li"),Q5e=a("strong"),xTr=o("electra"),$Tr=o(" \u2014 "),uH=a("a"),kTr=o("TFElectraForQuestionAnswering"),STr=o(" (ELECTRA model)"),RTr=l(),s4=a("li"),W5e=a("strong"),BTr=o("flaubert"),PTr=o(" \u2014 "),_H=a("a"),ITr=o("TFFlaubertForQuestionAnsweringSimple"),qTr=o(" (FlauBERT model)"),NTr=l(),l4=a("li"),H5e=a("strong"),jTr=o("funnel"),DTr=o(" \u2014 "),bH=a("a"),GTr=o("TFFunnelForQuestionAnswering"),OTr=o(" (Funnel Transformer model)"),VTr=l(),i4=a("li"),U5e=a("strong"),XTr=o("gptj"),zTr=o(" \u2014 "),vH=a("a"),QTr=o("TFGPTJForQuestionAnswering"),WTr=o(" (GPT-J model)"),HTr=l(),d4=a("li"),J5e=a("strong"),UTr=o("longformer"),JTr=o(" \u2014 "),FH=a("a"),YTr=o("TFLongformerForQuestionAnswering"),KTr=o(" (Longformer model)"),ZTr=l(),c4=a("li"),Y5e=a("strong"),e7r=o("mobilebert"),o7r=o(" \u2014 "),TH=a("a"),r7r=o("TFMobileBertForQuestionAnswering"),t7r=o(" (MobileBERT model)"),a7r=l(),f4=a("li"),K5e=a("strong"),n7r=o("mpnet"),s7r=o(" \u2014 "),MH=a("a"),l7r=o("TFMPNetForQuestionAnswering"),i7r=o(" (MPNet model)"),d7r=l(),m4=a("li"),Z5e=a("strong"),c7r=o("rembert"),f7r=o(" \u2014 "),EH=a("a"),m7r=o("TFRemBertForQuestionAnswering"),g7r=o(" (RemBERT model)"),h7r=l(),g4=a("li"),e3e=a("strong"),p7r=o("roberta"),u7r=o(" \u2014 "),CH=a("a"),_7r=o("TFRobertaForQuestionAnswering"),b7r=o(" (RoBERTa model)"),v7r=l(),h4=a("li"),o3e=a("strong"),F7r=o("roformer"),T7r=o(" \u2014 "),wH=a("a"),M7r=o("TFRoFormerForQuestionAnswering"),E7r=o(" (RoFormer model)"),C7r=l(),p4=a("li"),r3e=a("strong"),w7r=o("xlm"),A7r=o(" \u2014 "),AH=a("a"),y7r=o("TFXLMForQuestionAnsweringSimple"),L7r=o(" (XLM model)"),x7r=l(),u4=a("li"),t3e=a("strong"),$7r=o("xlm-roberta"),k7r=o(" \u2014 "),yH=a("a"),S7r=o("TFXLMRobertaForQuestionAnswering"),R7r=o(" (XLM-RoBERTa model)"),B7r=l(),_4=a("li"),a3e=a("strong"),P7r=o("xlnet"),I7r=o(" \u2014 "),LH=a("a"),q7r=o("TFXLNetForQuestionAnsweringSimple"),N7r=o(" (XLNet model)"),j7r=l(),F(b4.$$.fragment),zPe=l(),fc=a("h2"),v4=a("a"),n3e=a("span"),F(l8.$$.fragment),D7r=l(),s3e=a("span"),G7r=o("TFAutoModelForVision2Seq"),QPe=l(),ir=a("div"),F(i8.$$.fragment),O7r=l(),mc=a("p"),V7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xH=a("a"),X7r=o("from_pretrained()"),z7r=o(" class method or the "),$H=a("a"),Q7r=o("from_config()"),W7r=o(` class
method.`),H7r=l(),d8=a("p"),U7r=o("This class cannot be instantiated directly using "),l3e=a("code"),J7r=o("__init__()"),Y7r=o(" (throws an error)."),K7r=l(),Bt=a("div"),F(c8.$$.fragment),Z7r=l(),i3e=a("p"),eMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oMr=l(),gc=a("p"),rMr=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),tMr=o("not"),aMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),nMr=o("from_pretrained()"),sMr=o(" to load the model weights."),lMr=l(),F(F4.$$.fragment),iMr=l(),Pr=a("div"),F(f8.$$.fragment),dMr=l(),c3e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fMr=l(),sn=a("p"),mMr=o("The model class to instantiate is selected based on the "),f3e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),pMr=o("pretrained_model_name_or_path"),uMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=a("code"),_Mr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),h3e=a("ul"),T4=a("li"),p3e=a("strong"),FMr=o("vision-encoder-decoder"),TMr=o(" \u2014 "),SH=a("a"),MMr=o("TFVisionEncoderDecoderModel"),EMr=o(" (Vision Encoder decoder model)"),CMr=l(),F(M4.$$.fragment),WPe=l(),hc=a("h2"),E4=a("a"),u3e=a("span"),F(m8.$$.fragment),wMr=l(),_3e=a("span"),AMr=o("TFAutoModelForSpeechSeq2Seq"),HPe=l(),dr=a("div"),F(g8.$$.fragment),yMr=l(),pc=a("p"),LMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=a("a"),xMr=o("from_pretrained()"),$Mr=o(" class method or the "),BH=a("a"),kMr=o("from_config()"),SMr=o(` class
method.`),RMr=l(),h8=a("p"),BMr=o("This class cannot be instantiated directly using "),b3e=a("code"),PMr=o("__init__()"),IMr=o(" (throws an error)."),qMr=l(),Pt=a("div"),F(p8.$$.fragment),NMr=l(),v3e=a("p"),jMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DMr=l(),uc=a("p"),GMr=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),OMr=o("not"),VMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),XMr=o("from_pretrained()"),zMr=o(" to load the model weights."),QMr=l(),F(C4.$$.fragment),WMr=l(),Ir=a("div"),F(u8.$$.fragment),HMr=l(),T3e=a("p"),UMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JMr=l(),ln=a("p"),YMr=o("The model class to instantiate is selected based on the "),M3e=a("code"),KMr=o("model_type"),ZMr=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(":"),a4r=l(),w3e=a("ul"),w4=a("li"),A3e=a("strong"),n4r=o("speech_to_text"),s4r=o(" \u2014 "),IH=a("a"),l4r=o("TFSpeech2TextForConditionalGeneration"),i4r=o(" (Speech2Text model)"),d4r=l(),F(A4.$$.fragment),UPe=l(),_c=a("h2"),y4=a("a"),y3e=a("span"),F(_8.$$.fragment),c4r=l(),L3e=a("span"),f4r=o("FlaxAutoModel"),JPe=l(),cr=a("div"),F(b8.$$.fragment),m4r=l(),bc=a("p"),g4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qH=a("a"),h4r=o("from_pretrained()"),p4r=o(" class method or the "),NH=a("a"),u4r=o("from_config()"),_4r=o(` class
method.`),b4r=l(),v8=a("p"),v4r=o("This class cannot be instantiated directly using "),x3e=a("code"),F4r=o("__init__()"),T4r=o(" (throws an error)."),M4r=l(),It=a("div"),F(F8.$$.fragment),E4r=l(),$3e=a("p"),C4r=o("Instantiates one of the base model classes of the library from a configuration."),w4r=l(),vc=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),y4r=o("not"),L4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),x4r=o("from_pretrained()"),$4r=o(" to load the model weights."),k4r=l(),F(L4.$$.fragment),S4r=l(),qr=a("div"),F(T8.$$.fragment),R4r=l(),S3e=a("p"),B4r=o("Instantiate one of the base model classes of the library from a pretrained model."),P4r=l(),dn=a("p"),I4r=o("The model class to instantiate is selected based on the "),R3e=a("code"),q4r=o("model_type"),N4r=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(":"),V4r=l(),oe=a("ul"),x4=a("li"),I3e=a("strong"),X4r=o("albert"),z4r=o(" \u2014 "),DH=a("a"),Q4r=o("FlaxAlbertModel"),W4r=o(" (ALBERT model)"),H4r=l(),$4=a("li"),q3e=a("strong"),U4r=o("bart"),J4r=o(" \u2014 "),GH=a("a"),Y4r=o("FlaxBartModel"),K4r=o(" (BART model)"),Z4r=l(),k4=a("li"),N3e=a("strong"),eEr=o("beit"),oEr=o(" \u2014 "),OH=a("a"),rEr=o("FlaxBeitModel"),tEr=o(" (BEiT model)"),aEr=l(),S4=a("li"),j3e=a("strong"),nEr=o("bert"),sEr=o(" \u2014 "),VH=a("a"),lEr=o("FlaxBertModel"),iEr=o(" (BERT model)"),dEr=l(),R4=a("li"),D3e=a("strong"),cEr=o("big_bird"),fEr=o(" \u2014 "),XH=a("a"),mEr=o("FlaxBigBirdModel"),gEr=o(" (BigBird model)"),hEr=l(),B4=a("li"),G3e=a("strong"),pEr=o("blenderbot"),uEr=o(" \u2014 "),zH=a("a"),_Er=o("FlaxBlenderbotModel"),bEr=o(" (Blenderbot model)"),vEr=l(),P4=a("li"),O3e=a("strong"),FEr=o("blenderbot-small"),TEr=o(" \u2014 "),QH=a("a"),MEr=o("FlaxBlenderbotSmallModel"),EEr=o(" (BlenderbotSmall model)"),CEr=l(),I4=a("li"),V3e=a("strong"),wEr=o("clip"),AEr=o(" \u2014 "),WH=a("a"),yEr=o("FlaxCLIPModel"),LEr=o(" (CLIP model)"),xEr=l(),q4=a("li"),X3e=a("strong"),$Er=o("distilbert"),kEr=o(" \u2014 "),HH=a("a"),SEr=o("FlaxDistilBertModel"),REr=o(" (DistilBERT model)"),BEr=l(),N4=a("li"),z3e=a("strong"),PEr=o("electra"),IEr=o(" \u2014 "),UH=a("a"),qEr=o("FlaxElectraModel"),NEr=o(" (ELECTRA model)"),jEr=l(),j4=a("li"),Q3e=a("strong"),DEr=o("gpt2"),GEr=o(" \u2014 "),JH=a("a"),OEr=o("FlaxGPT2Model"),VEr=o(" (OpenAI GPT-2 model)"),XEr=l(),D4=a("li"),W3e=a("strong"),zEr=o("gpt_neo"),QEr=o(" \u2014 "),YH=a("a"),WEr=o("FlaxGPTNeoModel"),HEr=o(" (GPT Neo model)"),UEr=l(),G4=a("li"),H3e=a("strong"),JEr=o("gptj"),YEr=o(" \u2014 "),KH=a("a"),KEr=o("FlaxGPTJModel"),ZEr=o(" (GPT-J model)"),eCr=l(),O4=a("li"),U3e=a("strong"),oCr=o("marian"),rCr=o(" \u2014 "),ZH=a("a"),tCr=o("FlaxMarianModel"),aCr=o(" (Marian model)"),nCr=l(),V4=a("li"),J3e=a("strong"),sCr=o("mbart"),lCr=o(" \u2014 "),eU=a("a"),iCr=o("FlaxMBartModel"),dCr=o(" (mBART model)"),cCr=l(),X4=a("li"),Y3e=a("strong"),fCr=o("mt5"),mCr=o(" \u2014 "),oU=a("a"),gCr=o("FlaxMT5Model"),hCr=o(" (mT5 model)"),pCr=l(),z4=a("li"),K3e=a("strong"),uCr=o("pegasus"),_Cr=o(" \u2014 "),rU=a("a"),bCr=o("FlaxPegasusModel"),vCr=o(" (Pegasus model)"),FCr=l(),Q4=a("li"),Z3e=a("strong"),TCr=o("roberta"),MCr=o(" \u2014 "),tU=a("a"),ECr=o("FlaxRobertaModel"),CCr=o(" (RoBERTa model)"),wCr=l(),W4=a("li"),eve=a("strong"),ACr=o("roformer"),yCr=o(" \u2014 "),aU=a("a"),LCr=o("FlaxRoFormerModel"),xCr=o(" (RoFormer model)"),$Cr=l(),H4=a("li"),ove=a("strong"),kCr=o("t5"),SCr=o(" \u2014 "),nU=a("a"),RCr=o("FlaxT5Model"),BCr=o(" (T5 model)"),PCr=l(),U4=a("li"),rve=a("strong"),ICr=o("vision-text-dual-encoder"),qCr=o(" \u2014 "),sU=a("a"),NCr=o("FlaxVisionTextDualEncoderModel"),jCr=o(" (VisionTextDualEncoder model)"),DCr=l(),J4=a("li"),tve=a("strong"),GCr=o("vit"),OCr=o(" \u2014 "),lU=a("a"),VCr=o("FlaxViTModel"),XCr=o(" (ViT model)"),zCr=l(),Y4=a("li"),ave=a("strong"),QCr=o("wav2vec2"),WCr=o(" \u2014 "),iU=a("a"),HCr=o("FlaxWav2Vec2Model"),UCr=o(" (Wav2Vec2 model)"),JCr=l(),K4=a("li"),nve=a("strong"),YCr=o("xglm"),KCr=o(" \u2014 "),dU=a("a"),ZCr=o("FlaxXGLMModel"),ewr=o(" (XGLM model)"),owr=l(),Z4=a("li"),sve=a("strong"),rwr=o("xlm-roberta"),twr=o(" \u2014 "),cU=a("a"),awr=o("FlaxXLMRobertaModel"),nwr=o(" (XLM-RoBERTa model)"),swr=l(),F(eE.$$.fragment),YPe=l(),Fc=a("h2"),oE=a("a"),lve=a("span"),F(M8.$$.fragment),lwr=l(),ive=a("span"),iwr=o("FlaxAutoModelForCausalLM"),KPe=l(),fr=a("div"),F(E8.$$.fragment),dwr=l(),Tc=a("p"),cwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=a("a"),fwr=o("from_pretrained()"),mwr=o(" class method or the "),mU=a("a"),gwr=o("from_config()"),hwr=o(` class
method.`),pwr=l(),C8=a("p"),uwr=o("This class cannot be instantiated directly using "),dve=a("code"),_wr=o("__init__()"),bwr=o(" (throws an error)."),vwr=l(),qt=a("div"),F(w8.$$.fragment),Fwr=l(),cve=a("p"),Twr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mwr=l(),Mc=a("p"),Ewr=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),Cwr=o("not"),wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Awr=o("from_pretrained()"),ywr=o(" to load the model weights."),Lwr=l(),F(rE.$$.fragment),xwr=l(),Nr=a("div"),F(A8.$$.fragment),$wr=l(),mve=a("p"),kwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Swr=l(),cn=a("p"),Rwr=o("The model class to instantiate is selected based on the "),gve=a("code"),Bwr=o("model_type"),Pwr=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),Iwr=o("pretrained_model_name_or_path"),qwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),Nwr=o("pretrained_model_name_or_path"),jwr=o(":"),Dwr=l(),ke=a("ul"),tE=a("li"),uve=a("strong"),Gwr=o("bart"),Owr=o(" \u2014 "),hU=a("a"),Vwr=o("FlaxBartForCausalLM"),Xwr=o(" (BART model)"),zwr=l(),aE=a("li"),_ve=a("strong"),Qwr=o("bert"),Wwr=o(" \u2014 "),pU=a("a"),Hwr=o("FlaxBertForCausalLM"),Uwr=o(" (BERT model)"),Jwr=l(),nE=a("li"),bve=a("strong"),Ywr=o("big_bird"),Kwr=o(" \u2014 "),uU=a("a"),Zwr=o("FlaxBigBirdForCausalLM"),eAr=o(" (BigBird model)"),oAr=l(),sE=a("li"),vve=a("strong"),rAr=o("electra"),tAr=o(" \u2014 "),_U=a("a"),aAr=o("FlaxElectraForCausalLM"),nAr=o(" (ELECTRA model)"),sAr=l(),lE=a("li"),Fve=a("strong"),lAr=o("gpt2"),iAr=o(" \u2014 "),bU=a("a"),dAr=o("FlaxGPT2LMHeadModel"),cAr=o(" (OpenAI GPT-2 model)"),fAr=l(),iE=a("li"),Tve=a("strong"),mAr=o("gpt_neo"),gAr=o(" \u2014 "),vU=a("a"),hAr=o("FlaxGPTNeoForCausalLM"),pAr=o(" (GPT Neo model)"),uAr=l(),dE=a("li"),Mve=a("strong"),_Ar=o("gptj"),bAr=o(" \u2014 "),FU=a("a"),vAr=o("FlaxGPTJForCausalLM"),FAr=o(" (GPT-J model)"),TAr=l(),cE=a("li"),Eve=a("strong"),MAr=o("roberta"),EAr=o(" \u2014 "),TU=a("a"),CAr=o("FlaxRobertaForCausalLM"),wAr=o(" (RoBERTa model)"),AAr=l(),fE=a("li"),Cve=a("strong"),yAr=o("xglm"),LAr=o(" \u2014 "),MU=a("a"),xAr=o("FlaxXGLMForCausalLM"),$Ar=o(" (XGLM model)"),kAr=l(),F(mE.$$.fragment),ZPe=l(),Ec=a("h2"),gE=a("a"),wve=a("span"),F(y8.$$.fragment),SAr=l(),Ave=a("span"),RAr=o("FlaxAutoModelForPreTraining"),eIe=l(),mr=a("div"),F(L8.$$.fragment),BAr=l(),Cc=a("p"),PAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EU=a("a"),IAr=o("from_pretrained()"),qAr=o(" class method or the "),CU=a("a"),NAr=o("from_config()"),jAr=o(` class
method.`),DAr=l(),x8=a("p"),GAr=o("This class cannot be instantiated directly using "),yve=a("code"),OAr=o("__init__()"),VAr=o(" (throws an error)."),XAr=l(),Nt=a("div"),F($8.$$.fragment),zAr=l(),Lve=a("p"),QAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WAr=l(),wc=a("p"),HAr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),UAr=o("not"),JAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),YAr=o("from_pretrained()"),KAr=o(" to load the model weights."),ZAr=l(),F(hE.$$.fragment),e0r=l(),jr=a("div"),F(k8.$$.fragment),o0r=l(),$ve=a("p"),r0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t0r=l(),fn=a("p"),a0r=o("The model class to instantiate is selected based on the "),kve=a("code"),n0r=o("model_type"),s0r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(":"),f0r=l(),Me=a("ul"),pE=a("li"),Bve=a("strong"),m0r=o("albert"),g0r=o(" \u2014 "),AU=a("a"),h0r=o("FlaxAlbertForPreTraining"),p0r=o(" (ALBERT model)"),u0r=l(),uE=a("li"),Pve=a("strong"),_0r=o("bart"),b0r=o(" \u2014 "),yU=a("a"),v0r=o("FlaxBartForConditionalGeneration"),F0r=o(" (BART model)"),T0r=l(),_E=a("li"),Ive=a("strong"),M0r=o("bert"),E0r=o(" \u2014 "),LU=a("a"),C0r=o("FlaxBertForPreTraining"),w0r=o(" (BERT model)"),A0r=l(),bE=a("li"),qve=a("strong"),y0r=o("big_bird"),L0r=o(" \u2014 "),xU=a("a"),x0r=o("FlaxBigBirdForPreTraining"),$0r=o(" (BigBird model)"),k0r=l(),vE=a("li"),Nve=a("strong"),S0r=o("electra"),R0r=o(" \u2014 "),$U=a("a"),B0r=o("FlaxElectraForPreTraining"),P0r=o(" (ELECTRA model)"),I0r=l(),FE=a("li"),jve=a("strong"),q0r=o("mbart"),N0r=o(" \u2014 "),kU=a("a"),j0r=o("FlaxMBartForConditionalGeneration"),D0r=o(" (mBART model)"),G0r=l(),TE=a("li"),Dve=a("strong"),O0r=o("mt5"),V0r=o(" \u2014 "),SU=a("a"),X0r=o("FlaxMT5ForConditionalGeneration"),z0r=o(" (mT5 model)"),Q0r=l(),ME=a("li"),Gve=a("strong"),W0r=o("roberta"),H0r=o(" \u2014 "),RU=a("a"),U0r=o("FlaxRobertaForMaskedLM"),J0r=o(" (RoBERTa model)"),Y0r=l(),EE=a("li"),Ove=a("strong"),K0r=o("roformer"),Z0r=o(" \u2014 "),BU=a("a"),e6r=o("FlaxRoFormerForMaskedLM"),o6r=o(" (RoFormer model)"),r6r=l(),CE=a("li"),Vve=a("strong"),t6r=o("t5"),a6r=o(" \u2014 "),PU=a("a"),n6r=o("FlaxT5ForConditionalGeneration"),s6r=o(" (T5 model)"),l6r=l(),wE=a("li"),Xve=a("strong"),i6r=o("wav2vec2"),d6r=o(" \u2014 "),IU=a("a"),c6r=o("FlaxWav2Vec2ForPreTraining"),f6r=o(" (Wav2Vec2 model)"),m6r=l(),AE=a("li"),zve=a("strong"),g6r=o("xlm-roberta"),h6r=o(" \u2014 "),qU=a("a"),p6r=o("FlaxXLMRobertaForMaskedLM"),u6r=o(" (XLM-RoBERTa model)"),_6r=l(),F(yE.$$.fragment),oIe=l(),Ac=a("h2"),LE=a("a"),Qve=a("span"),F(S8.$$.fragment),b6r=l(),Wve=a("span"),v6r=o("FlaxAutoModelForMaskedLM"),rIe=l(),gr=a("div"),F(R8.$$.fragment),F6r=l(),yc=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NU=a("a"),M6r=o("from_pretrained()"),E6r=o(" class method or the "),jU=a("a"),C6r=o("from_config()"),w6r=o(` class
method.`),A6r=l(),B8=a("p"),y6r=o("This class cannot be instantiated directly using "),Hve=a("code"),L6r=o("__init__()"),x6r=o(" (throws an error)."),$6r=l(),jt=a("div"),F(P8.$$.fragment),k6r=l(),Uve=a("p"),S6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R6r=l(),Lc=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),P6r=o("not"),I6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),q6r=o("from_pretrained()"),N6r=o(" to load the model weights."),j6r=l(),F(xE.$$.fragment),D6r=l(),Dr=a("div"),F(I8.$$.fragment),G6r=l(),Yve=a("p"),O6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V6r=l(),mn=a("p"),X6r=o("The model class to instantiate is selected based on the "),Kve=a("code"),z6r=o("model_type"),Q6r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),W6r=o("pretrained_model_name_or_path"),H6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),U6r=o("pretrained_model_name_or_path"),J6r=o(":"),Y6r=l(),Le=a("ul"),$E=a("li"),oFe=a("strong"),K6r=o("albert"),Z6r=o(" \u2014 "),GU=a("a"),eyr=o("FlaxAlbertForMaskedLM"),oyr=o(" (ALBERT model)"),ryr=l(),kE=a("li"),rFe=a("strong"),tyr=o("bart"),ayr=o(" \u2014 "),OU=a("a"),nyr=o("FlaxBartForConditionalGeneration"),syr=o(" (BART model)"),lyr=l(),SE=a("li"),tFe=a("strong"),iyr=o("bert"),dyr=o(" \u2014 "),VU=a("a"),cyr=o("FlaxBertForMaskedLM"),fyr=o(" (BERT model)"),myr=l(),RE=a("li"),aFe=a("strong"),gyr=o("big_bird"),hyr=o(" \u2014 "),XU=a("a"),pyr=o("FlaxBigBirdForMaskedLM"),uyr=o(" (BigBird model)"),_yr=l(),BE=a("li"),nFe=a("strong"),byr=o("distilbert"),vyr=o(" \u2014 "),zU=a("a"),Fyr=o("FlaxDistilBertForMaskedLM"),Tyr=o(" (DistilBERT model)"),Myr=l(),PE=a("li"),sFe=a("strong"),Eyr=o("electra"),Cyr=o(" \u2014 "),QU=a("a"),wyr=o("FlaxElectraForMaskedLM"),Ayr=o(" (ELECTRA model)"),yyr=l(),IE=a("li"),lFe=a("strong"),Lyr=o("mbart"),xyr=o(" \u2014 "),WU=a("a"),$yr=o("FlaxMBartForConditionalGeneration"),kyr=o(" (mBART model)"),Syr=l(),qE=a("li"),iFe=a("strong"),Ryr=o("roberta"),Byr=o(" \u2014 "),HU=a("a"),Pyr=o("FlaxRobertaForMaskedLM"),Iyr=o(" (RoBERTa model)"),qyr=l(),NE=a("li"),dFe=a("strong"),Nyr=o("roformer"),jyr=o(" \u2014 "),UU=a("a"),Dyr=o("FlaxRoFormerForMaskedLM"),Gyr=o(" (RoFormer model)"),Oyr=l(),jE=a("li"),cFe=a("strong"),Vyr=o("xlm-roberta"),Xyr=o(" \u2014 "),JU=a("a"),zyr=o("FlaxXLMRobertaForMaskedLM"),Qyr=o(" (XLM-RoBERTa model)"),Wyr=l(),F(DE.$$.fragment),tIe=l(),xc=a("h2"),GE=a("a"),fFe=a("span"),F(q8.$$.fragment),Hyr=l(),mFe=a("span"),Uyr=o("FlaxAutoModelForSeq2SeqLM"),aIe=l(),hr=a("div"),F(N8.$$.fragment),Jyr=l(),$c=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YU=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),KU=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),j8=a("p"),tLr=o("This class cannot be instantiated directly using "),gFe=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Dt=a("div"),F(D8.$$.fragment),lLr=l(),hFe=a("p"),iLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dLr=l(),kc=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),pLr=l(),F(OE.$$.fragment),uLr=l(),Gr=a("div"),F(G8.$$.fragment),_Lr=l(),uFe=a("p"),bLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vLr=l(),gn=a("p"),FLr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),Se=a("ul"),VE=a("li"),FFe=a("strong"),LLr=o("bart"),xLr=o(" \u2014 "),eJ=a("a"),$Lr=o("FlaxBartForConditionalGeneration"),kLr=o(" (BART model)"),SLr=l(),XE=a("li"),TFe=a("strong"),RLr=o("blenderbot"),BLr=o(" \u2014 "),oJ=a("a"),PLr=o("FlaxBlenderbotForConditionalGeneration"),ILr=o(" (Blenderbot model)"),qLr=l(),zE=a("li"),MFe=a("strong"),NLr=o("blenderbot-small"),jLr=o(" \u2014 "),rJ=a("a"),DLr=o("FlaxBlenderbotSmallForConditionalGeneration"),GLr=o(" (BlenderbotSmall model)"),OLr=l(),QE=a("li"),EFe=a("strong"),VLr=o("encoder-decoder"),XLr=o(" \u2014 "),tJ=a("a"),zLr=o("FlaxEncoderDecoderModel"),QLr=o(" (Encoder decoder model)"),WLr=l(),WE=a("li"),CFe=a("strong"),HLr=o("marian"),ULr=o(" \u2014 "),aJ=a("a"),JLr=o("FlaxMarianMTModel"),YLr=o(" (Marian model)"),KLr=l(),HE=a("li"),wFe=a("strong"),ZLr=o("mbart"),e8r=o(" \u2014 "),nJ=a("a"),o8r=o("FlaxMBartForConditionalGeneration"),r8r=o(" (mBART model)"),t8r=l(),UE=a("li"),AFe=a("strong"),a8r=o("mt5"),n8r=o(" \u2014 "),sJ=a("a"),s8r=o("FlaxMT5ForConditionalGeneration"),l8r=o(" (mT5 model)"),i8r=l(),JE=a("li"),yFe=a("strong"),d8r=o("pegasus"),c8r=o(" \u2014 "),lJ=a("a"),f8r=o("FlaxPegasusForConditionalGeneration"),m8r=o(" (Pegasus model)"),g8r=l(),YE=a("li"),LFe=a("strong"),h8r=o("t5"),p8r=o(" \u2014 "),iJ=a("a"),u8r=o("FlaxT5ForConditionalGeneration"),_8r=o(" (T5 model)"),b8r=l(),F(KE.$$.fragment),nIe=l(),Sc=a("h2"),ZE=a("a"),xFe=a("span"),F(O8.$$.fragment),v8r=l(),$Fe=a("span"),F8r=o("FlaxAutoModelForSequenceClassification"),sIe=l(),pr=a("div"),F(V8.$$.fragment),T8r=l(),Rc=a("p"),M8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dJ=a("a"),E8r=o("from_pretrained()"),C8r=o(" class method or the "),cJ=a("a"),w8r=o("from_config()"),A8r=o(` class
method.`),y8r=l(),X8=a("p"),L8r=o("This class cannot be instantiated directly using "),kFe=a("code"),x8r=o("__init__()"),$8r=o(" (throws an error)."),k8r=l(),Gt=a("div"),F(z8.$$.fragment),S8r=l(),SFe=a("p"),R8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B8r=l(),Bc=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),I8r=o("not"),q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),N8r=o("from_pretrained()"),j8r=o(" to load the model weights."),D8r=l(),F(eC.$$.fragment),G8r=l(),Or=a("div"),F(Q8.$$.fragment),O8r=l(),BFe=a("p"),V8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X8r=l(),hn=a("p"),z8r=o("The model class to instantiate is selected based on the "),PFe=a("code"),Q8r=o("model_type"),W8r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),H8r=o("pretrained_model_name_or_path"),U8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(":"),K8r=l(),xe=a("ul"),oC=a("li"),NFe=a("strong"),Z8r=o("albert"),exr=o(" \u2014 "),mJ=a("a"),oxr=o("FlaxAlbertForSequenceClassification"),rxr=o(" (ALBERT model)"),txr=l(),rC=a("li"),jFe=a("strong"),axr=o("bart"),nxr=o(" \u2014 "),gJ=a("a"),sxr=o("FlaxBartForSequenceClassification"),lxr=o(" (BART model)"),ixr=l(),tC=a("li"),DFe=a("strong"),dxr=o("bert"),cxr=o(" \u2014 "),hJ=a("a"),fxr=o("FlaxBertForSequenceClassification"),mxr=o(" (BERT model)"),gxr=l(),aC=a("li"),GFe=a("strong"),hxr=o("big_bird"),pxr=o(" \u2014 "),pJ=a("a"),uxr=o("FlaxBigBirdForSequenceClassification"),_xr=o(" (BigBird model)"),bxr=l(),nC=a("li"),OFe=a("strong"),vxr=o("distilbert"),Fxr=o(" \u2014 "),uJ=a("a"),Txr=o("FlaxDistilBertForSequenceClassification"),Mxr=o(" (DistilBERT model)"),Exr=l(),sC=a("li"),VFe=a("strong"),Cxr=o("electra"),wxr=o(" \u2014 "),_J=a("a"),Axr=o("FlaxElectraForSequenceClassification"),yxr=o(" (ELECTRA model)"),Lxr=l(),lC=a("li"),XFe=a("strong"),xxr=o("mbart"),$xr=o(" \u2014 "),bJ=a("a"),kxr=o("FlaxMBartForSequenceClassification"),Sxr=o(" (mBART model)"),Rxr=l(),iC=a("li"),zFe=a("strong"),Bxr=o("roberta"),Pxr=o(" \u2014 "),vJ=a("a"),Ixr=o("FlaxRobertaForSequenceClassification"),qxr=o(" (RoBERTa model)"),Nxr=l(),dC=a("li"),QFe=a("strong"),jxr=o("roformer"),Dxr=o(" \u2014 "),FJ=a("a"),Gxr=o("FlaxRoFormerForSequenceClassification"),Oxr=o(" (RoFormer model)"),Vxr=l(),cC=a("li"),WFe=a("strong"),Xxr=o("xlm-roberta"),zxr=o(" \u2014 "),TJ=a("a"),Qxr=o("FlaxXLMRobertaForSequenceClassification"),Wxr=o(" (XLM-RoBERTa model)"),Hxr=l(),F(fC.$$.fragment),lIe=l(),Pc=a("h2"),mC=a("a"),HFe=a("span"),F(W8.$$.fragment),Uxr=l(),UFe=a("span"),Jxr=o("FlaxAutoModelForQuestionAnswering"),iIe=l(),ur=a("div"),F(H8.$$.fragment),Yxr=l(),Ic=a("p"),Kxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=a("a"),Zxr=o("from_pretrained()"),e9r=o(" class method or the "),EJ=a("a"),o9r=o("from_config()"),r9r=o(` class
method.`),t9r=l(),U8=a("p"),a9r=o("This class cannot be instantiated directly using "),JFe=a("code"),n9r=o("__init__()"),s9r=o(" (throws an error)."),l9r=l(),Ot=a("div"),F(J8.$$.fragment),i9r=l(),YFe=a("p"),d9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),c9r=l(),qc=a("p"),f9r=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),m9r=o("not"),g9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),h9r=o("from_pretrained()"),p9r=o(" to load the model weights."),u9r=l(),F(gC.$$.fragment),_9r=l(),Vr=a("div"),F(Y8.$$.fragment),b9r=l(),ZFe=a("p"),v9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),F9r=l(),pn=a("p"),T9r=o("The model class to instantiate is selected based on the "),eTe=a("code"),M9r=o("model_type"),E9r=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),C9r=o("pretrained_model_name_or_path"),w9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),A9r=o("pretrained_model_name_or_path"),y9r=o(":"),L9r=l(),$e=a("ul"),hC=a("li"),tTe=a("strong"),x9r=o("albert"),$9r=o(" \u2014 "),wJ=a("a"),k9r=o("FlaxAlbertForQuestionAnswering"),S9r=o(" (ALBERT model)"),R9r=l(),pC=a("li"),aTe=a("strong"),B9r=o("bart"),P9r=o(" \u2014 "),AJ=a("a"),I9r=o("FlaxBartForQuestionAnswering"),q9r=o(" (BART model)"),N9r=l(),uC=a("li"),nTe=a("strong"),j9r=o("bert"),D9r=o(" \u2014 "),yJ=a("a"),G9r=o("FlaxBertForQuestionAnswering"),O9r=o(" (BERT model)"),V9r=l(),_C=a("li"),sTe=a("strong"),X9r=o("big_bird"),z9r=o(" \u2014 "),LJ=a("a"),Q9r=o("FlaxBigBirdForQuestionAnswering"),W9r=o(" (BigBird model)"),H9r=l(),bC=a("li"),lTe=a("strong"),U9r=o("distilbert"),J9r=o(" \u2014 "),xJ=a("a"),Y9r=o("FlaxDistilBertForQuestionAnswering"),K9r=o(" (DistilBERT model)"),Z9r=l(),vC=a("li"),iTe=a("strong"),e$r=o("electra"),o$r=o(" \u2014 "),$J=a("a"),r$r=o("FlaxElectraForQuestionAnswering"),t$r=o(" (ELECTRA model)"),a$r=l(),FC=a("li"),dTe=a("strong"),n$r=o("mbart"),s$r=o(" \u2014 "),kJ=a("a"),l$r=o("FlaxMBartForQuestionAnswering"),i$r=o(" (mBART model)"),d$r=l(),TC=a("li"),cTe=a("strong"),c$r=o("roberta"),f$r=o(" \u2014 "),SJ=a("a"),m$r=o("FlaxRobertaForQuestionAnswering"),g$r=o(" (RoBERTa model)"),h$r=l(),MC=a("li"),fTe=a("strong"),p$r=o("roformer"),u$r=o(" \u2014 "),RJ=a("a"),_$r=o("FlaxRoFormerForQuestionAnswering"),b$r=o(" (RoFormer model)"),v$r=l(),EC=a("li"),mTe=a("strong"),F$r=o("xlm-roberta"),T$r=o(" \u2014 "),BJ=a("a"),M$r=o("FlaxXLMRobertaForQuestionAnswering"),E$r=o(" (XLM-RoBERTa model)"),C$r=l(),F(CC.$$.fragment),dIe=l(),Nc=a("h2"),wC=a("a"),gTe=a("span"),F(K8.$$.fragment),w$r=l(),hTe=a("span"),A$r=o("FlaxAutoModelForTokenClassification"),cIe=l(),_r=a("div"),F(Z8.$$.fragment),y$r=l(),jc=a("p"),L$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PJ=a("a"),x$r=o("from_pretrained()"),$$r=o(" class method or the "),IJ=a("a"),k$r=o("from_config()"),S$r=o(` class
method.`),R$r=l(),ex=a("p"),B$r=o("This class cannot be instantiated directly using "),pTe=a("code"),P$r=o("__init__()"),I$r=o(" (throws an error)."),q$r=l(),Vt=a("div"),F(ox.$$.fragment),N$r=l(),uTe=a("p"),j$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D$r=l(),Dc=a("p"),G$r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),O$r=o("not"),V$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),X$r=o("from_pretrained()"),z$r=o(" to load the model weights."),Q$r=l(),F(AC.$$.fragment),W$r=l(),Xr=a("div"),F(rx.$$.fragment),H$r=l(),bTe=a("p"),U$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J$r=l(),un=a("p"),Y$r=o("The model class to instantiate is selected based on the "),vTe=a("code"),K$r=o("model_type"),Z$r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),ekr=o("pretrained_model_name_or_path"),okr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(":"),akr=l(),De=a("ul"),yC=a("li"),MTe=a("strong"),nkr=o("albert"),skr=o(" \u2014 "),NJ=a("a"),lkr=o("FlaxAlbertForTokenClassification"),ikr=o(" (ALBERT model)"),dkr=l(),LC=a("li"),ETe=a("strong"),ckr=o("bert"),fkr=o(" \u2014 "),jJ=a("a"),mkr=o("FlaxBertForTokenClassification"),gkr=o(" (BERT model)"),hkr=l(),xC=a("li"),CTe=a("strong"),pkr=o("big_bird"),ukr=o(" \u2014 "),DJ=a("a"),_kr=o("FlaxBigBirdForTokenClassification"),bkr=o(" (BigBird model)"),vkr=l(),$C=a("li"),wTe=a("strong"),Fkr=o("distilbert"),Tkr=o(" \u2014 "),GJ=a("a"),Mkr=o("FlaxDistilBertForTokenClassification"),Ekr=o(" (DistilBERT model)"),Ckr=l(),kC=a("li"),ATe=a("strong"),wkr=o("electra"),Akr=o(" \u2014 "),OJ=a("a"),ykr=o("FlaxElectraForTokenClassification"),Lkr=o(" (ELECTRA model)"),xkr=l(),SC=a("li"),yTe=a("strong"),$kr=o("roberta"),kkr=o(" \u2014 "),VJ=a("a"),Skr=o("FlaxRobertaForTokenClassification"),Rkr=o(" (RoBERTa model)"),Bkr=l(),RC=a("li"),LTe=a("strong"),Pkr=o("roformer"),Ikr=o(" \u2014 "),XJ=a("a"),qkr=o("FlaxRoFormerForTokenClassification"),Nkr=o(" (RoFormer model)"),jkr=l(),BC=a("li"),xTe=a("strong"),Dkr=o("xlm-roberta"),Gkr=o(" \u2014 "),zJ=a("a"),Okr=o("FlaxXLMRobertaForTokenClassification"),Vkr=o(" (XLM-RoBERTa model)"),Xkr=l(),F(PC.$$.fragment),fIe=l(),Gc=a("h2"),IC=a("a"),$Te=a("span"),F(tx.$$.fragment),zkr=l(),kTe=a("span"),Qkr=o("FlaxAutoModelForMultipleChoice"),mIe=l(),br=a("div"),F(ax.$$.fragment),Wkr=l(),Oc=a("p"),Hkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" class method or the "),WJ=a("a"),Ykr=o("from_config()"),Kkr=o(` class
method.`),Zkr=l(),nx=a("p"),eSr=o("This class cannot be instantiated directly using "),STe=a("code"),oSr=o("__init__()"),rSr=o(" (throws an error)."),tSr=l(),Xt=a("div"),F(sx.$$.fragment),aSr=l(),RTe=a("p"),nSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sSr=l(),Vc=a("p"),lSr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),iSr=o("not"),dSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),cSr=o("from_pretrained()"),fSr=o(" to load the model weights."),mSr=l(),F(qC.$$.fragment),gSr=l(),zr=a("div"),F(lx.$$.fragment),hSr=l(),PTe=a("p"),pSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uSr=l(),_n=a("p"),_Sr=o("The model class to instantiate is selected based on the "),ITe=a("code"),bSr=o("model_type"),vSr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),FSr=o("pretrained_model_name_or_path"),TSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(":"),CSr=l(),Ge=a("ul"),NC=a("li"),jTe=a("strong"),wSr=o("albert"),ASr=o(" \u2014 "),UJ=a("a"),ySr=o("FlaxAlbertForMultipleChoice"),LSr=o(" (ALBERT model)"),xSr=l(),jC=a("li"),DTe=a("strong"),$Sr=o("bert"),kSr=o(" \u2014 "),JJ=a("a"),SSr=o("FlaxBertForMultipleChoice"),RSr=o(" (BERT model)"),BSr=l(),DC=a("li"),GTe=a("strong"),PSr=o("big_bird"),ISr=o(" \u2014 "),YJ=a("a"),qSr=o("FlaxBigBirdForMultipleChoice"),NSr=o(" (BigBird model)"),jSr=l(),GC=a("li"),OTe=a("strong"),DSr=o("distilbert"),GSr=o(" \u2014 "),KJ=a("a"),OSr=o("FlaxDistilBertForMultipleChoice"),VSr=o(" (DistilBERT model)"),XSr=l(),OC=a("li"),VTe=a("strong"),zSr=o("electra"),QSr=o(" \u2014 "),ZJ=a("a"),WSr=o("FlaxElectraForMultipleChoice"),HSr=o(" (ELECTRA model)"),USr=l(),VC=a("li"),XTe=a("strong"),JSr=o("roberta"),YSr=o(" \u2014 "),eY=a("a"),KSr=o("FlaxRobertaForMultipleChoice"),ZSr=o(" (RoBERTa model)"),eRr=l(),XC=a("li"),zTe=a("strong"),oRr=o("roformer"),rRr=o(" \u2014 "),oY=a("a"),tRr=o("FlaxRoFormerForMultipleChoice"),aRr=o(" (RoFormer model)"),nRr=l(),zC=a("li"),QTe=a("strong"),sRr=o("xlm-roberta"),lRr=o(" \u2014 "),rY=a("a"),iRr=o("FlaxXLMRobertaForMultipleChoice"),dRr=o(" (XLM-RoBERTa model)"),cRr=l(),F(QC.$$.fragment),gIe=l(),Xc=a("h2"),WC=a("a"),WTe=a("span"),F(ix.$$.fragment),fRr=l(),HTe=a("span"),mRr=o("FlaxAutoModelForNextSentencePrediction"),hIe=l(),vr=a("div"),F(dx.$$.fragment),gRr=l(),zc=a("p"),hRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=a("a"),pRr=o("from_pretrained()"),uRr=o(" class method or the "),aY=a("a"),_Rr=o("from_config()"),bRr=o(` class
method.`),vRr=l(),cx=a("p"),FRr=o("This class cannot be instantiated directly using "),UTe=a("code"),TRr=o("__init__()"),MRr=o(" (throws an error)."),ERr=l(),zt=a("div"),F(fx.$$.fragment),CRr=l(),JTe=a("p"),wRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ARr=l(),Qc=a("p"),yRr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),LRr=o("not"),xRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),$Rr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),F(HC.$$.fragment),RRr=l(),Qr=a("div"),F(mx.$$.fragment),BRr=l(),KTe=a("p"),PRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IRr=l(),bn=a("p"),qRr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),r7e=a("ul"),UC=a("li"),t7e=a("strong"),zRr=o("bert"),QRr=o(" \u2014 "),sY=a("a"),WRr=o("FlaxBertForNextSentencePrediction"),HRr=o(" (BERT model)"),URr=l(),F(JC.$$.fragment),pIe=l(),Wc=a("h2"),YC=a("a"),a7e=a("span"),F(gx.$$.fragment),JRr=l(),n7e=a("span"),YRr=o("FlaxAutoModelForImageClassification"),uIe=l(),Fr=a("div"),F(hx.$$.fragment),KRr=l(),Hc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=a("a"),eBr=o("from_pretrained()"),oBr=o(" class method or the "),iY=a("a"),rBr=o("from_config()"),tBr=o(` class
method.`),aBr=l(),px=a("p"),nBr=o("This class cannot be instantiated directly using "),s7e=a("code"),sBr=o("__init__()"),lBr=o(" (throws an error)."),iBr=l(),Qt=a("div"),F(ux.$$.fragment),dBr=l(),l7e=a("p"),cBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fBr=l(),Uc=a("p"),mBr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),gBr=o("not"),hBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),pBr=o("from_pretrained()"),uBr=o(" to load the model weights."),_Br=l(),F(KC.$$.fragment),bBr=l(),Wr=a("div"),F(_x.$$.fragment),vBr=l(),d7e=a("p"),FBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TBr=l(),vn=a("p"),MBr=o("The model class to instantiate is selected based on the "),c7e=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),yBr=o("pretrained_model_name_or_path"),LBr=o(":"),xBr=l(),bx=a("ul"),ZC=a("li"),g7e=a("strong"),$Br=o("beit"),kBr=o(" \u2014 "),cY=a("a"),SBr=o("FlaxBeitForImageClassification"),RBr=o(" (BEiT model)"),BBr=l(),ew=a("li"),h7e=a("strong"),PBr=o("vit"),IBr=o(" \u2014 "),fY=a("a"),qBr=o("FlaxViTForImageClassification"),NBr=o(" (ViT model)"),jBr=l(),F(ow.$$.fragment),_Ie=l(),Jc=a("h2"),rw=a("a"),p7e=a("span"),F(vx.$$.fragment),DBr=l(),u7e=a("span"),GBr=o("FlaxAutoModelForVision2Seq"),bIe=l(),Tr=a("div"),F(Fx.$$.fragment),OBr=l(),Yc=a("p"),VBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mY=a("a"),XBr=o("from_pretrained()"),zBr=o(" class method or the "),gY=a("a"),QBr=o("from_config()"),WBr=o(` class
method.`),HBr=l(),Tx=a("p"),UBr=o("This class cannot be instantiated directly using "),_7e=a("code"),JBr=o("__init__()"),YBr=o(" (throws an error)."),KBr=l(),Wt=a("div"),F(Mx.$$.fragment),ZBr=l(),b7e=a("p"),ePr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oPr=l(),Kc=a("p"),rPr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),tPr=o("not"),aPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),nPr=o("from_pretrained()"),sPr=o(" to load the model weights."),lPr=l(),F(tw.$$.fragment),iPr=l(),Hr=a("div"),F(Ex.$$.fragment),dPr=l(),F7e=a("p"),cPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fPr=l(),Fn=a("p"),mPr=o("The model class to instantiate is selected based on the "),T7e=a("code"),gPr=o("model_type"),hPr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),pPr=o("pretrained_model_name_or_path"),uPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(":"),vPr=l(),C7e=a("ul"),aw=a("li"),w7e=a("strong"),FPr=o("vision-encoder-decoder"),TPr=o(" \u2014 "),pY=a("a"),MPr=o("FlaxVisionEncoderDecoderModel"),EPr=o(" (Vision Encoder decoder model)"),CPr=l(),F(nw.$$.fragment),this.h()},l(f){const _=vCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Cx=s(p);m=n(Cx,"A",{id:!0,class:!0,href:!0});var A7e=s(m);u=n(A7e,"SPAN",{});var y7e=s(u);T(d.$$.fragment,y7e),y7e.forEach(t),A7e.forEach(t),h=i(Cx),Mo=n(Cx,"SPAN",{});var L7e=s(Mo);oi=r(L7e,"Auto Classes"),L7e.forEach(t),Cx.forEach(t),rf=i(f),Kr=n(f,"P",{});var wx=s(Kr);ri=r(wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(wx,"CODE",{});var x7e=s(ti);T0=r(x7e,"from_pretrained()"),x7e.forEach(t),tf=r(wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var $7e=s(Mn);M0=r($7e,"AutoConfig"),$7e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var k7e=s(Cn);E0=r(k7e,"AutoModel"),k7e.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var S7e=s(wn);C0=r(S7e,"AutoTokenizer"),S7e.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Ax=s(Ae);I9=r(Ax,"will create a model that is an instance of "),li=n(Ax,"A",{href:!0});var R7e=s(li);q9=r(R7e,"BertModel"),R7e.forEach(t),N9=r(Ax,"."),Ax.forEach(t),Eo=i(f),Fa=n(f,"P",{});var yx=s(Fa);j9=r(yx,"There is one class of "),nf=n(yx,"CODE",{});var B7e=s(nf);D9=r(B7e,"AutoModel"),B7e.forEach(t),CNe=r(yx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yx.forEach(t),bBe=i(f),ii=n(f,"H2",{class:!0});var Lx=s(ii);sf=n(Lx,"A",{id:!0,class:!0,href:!0});var P7e=s(sf);lZ=n(P7e,"SPAN",{});var I7e=s(lZ);T(w0.$$.fragment,I7e),I7e.forEach(t),P7e.forEach(t),wNe=i(Lx),iZ=n(Lx,"SPAN",{});var q7e=s(iZ);ANe=r(q7e,"Extending the Auto Classes"),q7e.forEach(t),Lx.forEach(t),vBe=i(f),An=n(f,"P",{});var Zc=s(An);yNe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dZ=n(Zc,"CODE",{});var N7e=s(dZ);LNe=r(N7e,"NewModel"),N7e.forEach(t),xNe=r(Zc,", make sure you have a "),cZ=n(Zc,"CODE",{});var j7e=s(cZ);$Ne=r(j7e,"NewModelConfig"),j7e.forEach(t),kNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),FBe=i(f),T(A0.$$.fragment,f),TBe=i(f),G9=n(f,"P",{});var D7e=s(G9);SNe=r(D7e,"You will then be able to use the auto classes like you would usually do!"),D7e.forEach(t),MBe=i(f),T(lf.$$.fragment,f),EBe=i(f),di=n(f,"H2",{class:!0});var xx=s(di);df=n(xx,"A",{id:!0,class:!0,href:!0});var G7e=s(df);fZ=n(G7e,"SPAN",{});var O7e=s(fZ);T(y0.$$.fragment,O7e),O7e.forEach(t),G7e.forEach(t),RNe=i(xx),mZ=n(xx,"SPAN",{});var V7e=s(mZ);BNe=r(V7e,"AutoConfig"),V7e.forEach(t),xx.forEach(t),CBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(L0.$$.fragment,Jr),PNe=i(Jr),x0=n(Jr,"P",{});var $x=s(x0);INe=r($x,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O9=n($x,"A",{href:!0});var X7e=s(O9);qNe=r(X7e,"from_pretrained()"),X7e.forEach(t),NNe=r($x," class method."),$x.forEach(t),jNe=i(Jr),$0=n(Jr,"P",{});var kx=s($0);DNe=r(kx,"This class cannot be instantiated directly using "),gZ=n(kx,"CODE",{});var z7e=s(gZ);GNe=r(z7e,"__init__()"),z7e.forEach(t),ONe=r(kx," (throws an error)."),kx.forEach(t),VNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(k0.$$.fragment,Yr),XNe=i(Yr),hZ=n(Yr,"P",{});var Q7e=s(hZ);zNe=r(Q7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Q7e.forEach(t),QNe=i(Yr),ci=n(Yr,"P",{});var ef=s(ci);WNe=r(ef,"The configuration class to instantiate is selected based on the "),pZ=n(ef,"CODE",{});var W7e=s(pZ);HNe=r(W7e,"model_type"),W7e.forEach(t),UNe=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),uZ=n(ef,"CODE",{});var H7e=s(uZ);JNe=r(H7e,"pretrained_model_name_or_path"),H7e.forEach(t),YNe=r(ef,":"),ef.forEach(t),KNe=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var sw=s(cf);_Z=n(sw,"STRONG",{});var U7e=s(_Z);ZNe=r(U7e,"albert"),U7e.forEach(t),eje=r(sw," \u2014 "),V9=n(sw,"A",{href:!0});var J7e=s(V9);oje=r(J7e,"AlbertConfig"),J7e.forEach(t),rje=r(sw," (ALBERT model)"),sw.forEach(t),tje=i(y),ff=n(y,"LI",{});var lw=s(ff);bZ=n(lw,"STRONG",{});var Y7e=s(bZ);aje=r(Y7e,"bart"),Y7e.forEach(t),nje=r(lw," \u2014 "),X9=n(lw,"A",{href:!0});var K7e=s(X9);sje=r(K7e,"BartConfig"),K7e.forEach(t),lje=r(lw," (BART model)"),lw.forEach(t),ije=i(y),mf=n(y,"LI",{});var iw=s(mf);vZ=n(iw,"STRONG",{});var Z7e=s(vZ);dje=r(Z7e,"beit"),Z7e.forEach(t),cje=r(iw," \u2014 "),z9=n(iw,"A",{href:!0});var eMe=s(z9);fje=r(eMe,"BeitConfig"),eMe.forEach(t),mje=r(iw," (BEiT model)"),iw.forEach(t),gje=i(y),gf=n(y,"LI",{});var dw=s(gf);FZ=n(dw,"STRONG",{});var oMe=s(FZ);hje=r(oMe,"bert"),oMe.forEach(t),pje=r(dw," \u2014 "),Q9=n(dw,"A",{href:!0});var rMe=s(Q9);uje=r(rMe,"BertConfig"),rMe.forEach(t),_je=r(dw," (BERT model)"),dw.forEach(t),bje=i(y),hf=n(y,"LI",{});var cw=s(hf);TZ=n(cw,"STRONG",{});var tMe=s(TZ);vje=r(tMe,"bert-generation"),tMe.forEach(t),Fje=r(cw," \u2014 "),W9=n(cw,"A",{href:!0});var aMe=s(W9);Tje=r(aMe,"BertGenerationConfig"),aMe.forEach(t),Mje=r(cw," (Bert Generation model)"),cw.forEach(t),Eje=i(y),pf=n(y,"LI",{});var fw=s(pf);MZ=n(fw,"STRONG",{});var nMe=s(MZ);Cje=r(nMe,"big_bird"),nMe.forEach(t),wje=r(fw," \u2014 "),H9=n(fw,"A",{href:!0});var sMe=s(H9);Aje=r(sMe,"BigBirdConfig"),sMe.forEach(t),yje=r(fw," (BigBird model)"),fw.forEach(t),Lje=i(y),uf=n(y,"LI",{});var mw=s(uf);EZ=n(mw,"STRONG",{});var lMe=s(EZ);xje=r(lMe,"bigbird_pegasus"),lMe.forEach(t),$je=r(mw," \u2014 "),U9=n(mw,"A",{href:!0});var iMe=s(U9);kje=r(iMe,"BigBirdPegasusConfig"),iMe.forEach(t),Sje=r(mw," (BigBirdPegasus model)"),mw.forEach(t),Rje=i(y),_f=n(y,"LI",{});var gw=s(_f);CZ=n(gw,"STRONG",{});var dMe=s(CZ);Bje=r(dMe,"blenderbot"),dMe.forEach(t),Pje=r(gw," \u2014 "),J9=n(gw,"A",{href:!0});var cMe=s(J9);Ije=r(cMe,"BlenderbotConfig"),cMe.forEach(t),qje=r(gw," (Blenderbot model)"),gw.forEach(t),Nje=i(y),bf=n(y,"LI",{});var hw=s(bf);wZ=n(hw,"STRONG",{});var fMe=s(wZ);jje=r(fMe,"blenderbot-small"),fMe.forEach(t),Dje=r(hw," \u2014 "),Y9=n(hw,"A",{href:!0});var mMe=s(Y9);Gje=r(mMe,"BlenderbotSmallConfig"),mMe.forEach(t),Oje=r(hw," (BlenderbotSmall model)"),hw.forEach(t),Vje=i(y),vf=n(y,"LI",{});var pw=s(vf);AZ=n(pw,"STRONG",{});var gMe=s(AZ);Xje=r(gMe,"camembert"),gMe.forEach(t),zje=r(pw," \u2014 "),K9=n(pw,"A",{href:!0});var hMe=s(K9);Qje=r(hMe,"CamembertConfig"),hMe.forEach(t),Wje=r(pw," (CamemBERT model)"),pw.forEach(t),Hje=i(y),Ff=n(y,"LI",{});var uw=s(Ff);yZ=n(uw,"STRONG",{});var pMe=s(yZ);Uje=r(pMe,"canine"),pMe.forEach(t),Jje=r(uw," \u2014 "),Z9=n(uw,"A",{href:!0});var uMe=s(Z9);Yje=r(uMe,"CanineConfig"),uMe.forEach(t),Kje=r(uw," (Canine model)"),uw.forEach(t),Zje=i(y),Tf=n(y,"LI",{});var _w=s(Tf);LZ=n(_w,"STRONG",{});var _Me=s(LZ);eDe=r(_Me,"clip"),_Me.forEach(t),oDe=r(_w," \u2014 "),e$=n(_w,"A",{href:!0});var bMe=s(e$);rDe=r(bMe,"CLIPConfig"),bMe.forEach(t),tDe=r(_w," (CLIP model)"),_w.forEach(t),aDe=i(y),Mf=n(y,"LI",{});var bw=s(Mf);xZ=n(bw,"STRONG",{});var vMe=s(xZ);nDe=r(vMe,"convbert"),vMe.forEach(t),sDe=r(bw," \u2014 "),o$=n(bw,"A",{href:!0});var FMe=s(o$);lDe=r(FMe,"ConvBertConfig"),FMe.forEach(t),iDe=r(bw," (ConvBERT model)"),bw.forEach(t),dDe=i(y),Ef=n(y,"LI",{});var vw=s(Ef);$Z=n(vw,"STRONG",{});var TMe=s($Z);cDe=r(TMe,"convnext"),TMe.forEach(t),fDe=r(vw," \u2014 "),r$=n(vw,"A",{href:!0});var MMe=s(r$);mDe=r(MMe,"ConvNextConfig"),MMe.forEach(t),gDe=r(vw," (ConvNext model)"),vw.forEach(t),hDe=i(y),Cf=n(y,"LI",{});var Fw=s(Cf);kZ=n(Fw,"STRONG",{});var EMe=s(kZ);pDe=r(EMe,"ctrl"),EMe.forEach(t),uDe=r(Fw," \u2014 "),t$=n(Fw,"A",{href:!0});var CMe=s(t$);_De=r(CMe,"CTRLConfig"),CMe.forEach(t),bDe=r(Fw," (CTRL model)"),Fw.forEach(t),vDe=i(y),wf=n(y,"LI",{});var Tw=s(wf);SZ=n(Tw,"STRONG",{});var wMe=s(SZ);FDe=r(wMe,"data2vec-audio"),wMe.forEach(t),TDe=r(Tw," \u2014 "),a$=n(Tw,"A",{href:!0});var AMe=s(a$);MDe=r(AMe,"Data2VecAudioConfig"),AMe.forEach(t),EDe=r(Tw," (Data2VecAudio model)"),Tw.forEach(t),CDe=i(y),Af=n(y,"LI",{});var Mw=s(Af);RZ=n(Mw,"STRONG",{});var yMe=s(RZ);wDe=r(yMe,"data2vec-text"),yMe.forEach(t),ADe=r(Mw," \u2014 "),n$=n(Mw,"A",{href:!0});var LMe=s(n$);yDe=r(LMe,"Data2VecTextConfig"),LMe.forEach(t),LDe=r(Mw," (Data2VecText model)"),Mw.forEach(t),xDe=i(y),yf=n(y,"LI",{});var Ew=s(yf);BZ=n(Ew,"STRONG",{});var xMe=s(BZ);$De=r(xMe,"data2vec-vision"),xMe.forEach(t),kDe=r(Ew," \u2014 "),s$=n(Ew,"A",{href:!0});var $Me=s(s$);SDe=r($Me,"Data2VecVisionConfig"),$Me.forEach(t),RDe=r(Ew," (Data2VecVision model)"),Ew.forEach(t),BDe=i(y),Lf=n(y,"LI",{});var Cw=s(Lf);PZ=n(Cw,"STRONG",{});var kMe=s(PZ);PDe=r(kMe,"deberta"),kMe.forEach(t),IDe=r(Cw," \u2014 "),l$=n(Cw,"A",{href:!0});var SMe=s(l$);qDe=r(SMe,"DebertaConfig"),SMe.forEach(t),NDe=r(Cw," (DeBERTa model)"),Cw.forEach(t),jDe=i(y),xf=n(y,"LI",{});var ww=s(xf);IZ=n(ww,"STRONG",{});var RMe=s(IZ);DDe=r(RMe,"deberta-v2"),RMe.forEach(t),GDe=r(ww," \u2014 "),i$=n(ww,"A",{href:!0});var BMe=s(i$);ODe=r(BMe,"DebertaV2Config"),BMe.forEach(t),VDe=r(ww," (DeBERTa-v2 model)"),ww.forEach(t),XDe=i(y),$f=n(y,"LI",{});var Aw=s($f);qZ=n(Aw,"STRONG",{});var PMe=s(qZ);zDe=r(PMe,"decision_transformer"),PMe.forEach(t),QDe=r(Aw," \u2014 "),d$=n(Aw,"A",{href:!0});var IMe=s(d$);WDe=r(IMe,"DecisionTransformerConfig"),IMe.forEach(t),HDe=r(Aw," (Decision Transformer model)"),Aw.forEach(t),UDe=i(y),kf=n(y,"LI",{});var yw=s(kf);NZ=n(yw,"STRONG",{});var qMe=s(NZ);JDe=r(qMe,"deit"),qMe.forEach(t),YDe=r(yw," \u2014 "),c$=n(yw,"A",{href:!0});var NMe=s(c$);KDe=r(NMe,"DeiTConfig"),NMe.forEach(t),ZDe=r(yw," (DeiT model)"),yw.forEach(t),eGe=i(y),Sf=n(y,"LI",{});var jMe=s(Sf);jZ=n(jMe,"STRONG",{});var APr=s(jZ);oGe=r(APr,"detr"),APr.forEach(t),rGe=r(jMe," \u2014 "),f$=n(jMe,"A",{href:!0});var yPr=s(f$);tGe=r(yPr,"DetrConfig"),yPr.forEach(t),aGe=r(jMe," (DETR model)"),jMe.forEach(t),nGe=i(y),Rf=n(y,"LI",{});var DMe=s(Rf);DZ=n(DMe,"STRONG",{});var LPr=s(DZ);sGe=r(LPr,"distilbert"),LPr.forEach(t),lGe=r(DMe," \u2014 "),m$=n(DMe,"A",{href:!0});var xPr=s(m$);iGe=r(xPr,"DistilBertConfig"),xPr.forEach(t),dGe=r(DMe," (DistilBERT model)"),DMe.forEach(t),cGe=i(y),Bf=n(y,"LI",{});var GMe=s(Bf);GZ=n(GMe,"STRONG",{});var $Pr=s(GZ);fGe=r($Pr,"dpr"),$Pr.forEach(t),mGe=r(GMe," \u2014 "),g$=n(GMe,"A",{href:!0});var kPr=s(g$);gGe=r(kPr,"DPRConfig"),kPr.forEach(t),hGe=r(GMe," (DPR model)"),GMe.forEach(t),pGe=i(y),Pf=n(y,"LI",{});var OMe=s(Pf);OZ=n(OMe,"STRONG",{});var SPr=s(OZ);uGe=r(SPr,"dpt"),SPr.forEach(t),_Ge=r(OMe," \u2014 "),h$=n(OMe,"A",{href:!0});var RPr=s(h$);bGe=r(RPr,"DPTConfig"),RPr.forEach(t),vGe=r(OMe," (DPT model)"),OMe.forEach(t),FGe=i(y),If=n(y,"LI",{});var VMe=s(If);VZ=n(VMe,"STRONG",{});var BPr=s(VZ);TGe=r(BPr,"electra"),BPr.forEach(t),MGe=r(VMe," \u2014 "),p$=n(VMe,"A",{href:!0});var PPr=s(p$);EGe=r(PPr,"ElectraConfig"),PPr.forEach(t),CGe=r(VMe," (ELECTRA model)"),VMe.forEach(t),wGe=i(y),qf=n(y,"LI",{});var XMe=s(qf);XZ=n(XMe,"STRONG",{});var IPr=s(XZ);AGe=r(IPr,"encoder-decoder"),IPr.forEach(t),yGe=r(XMe," \u2014 "),u$=n(XMe,"A",{href:!0});var qPr=s(u$);LGe=r(qPr,"EncoderDecoderConfig"),qPr.forEach(t),xGe=r(XMe," (Encoder decoder model)"),XMe.forEach(t),$Ge=i(y),Nf=n(y,"LI",{});var zMe=s(Nf);zZ=n(zMe,"STRONG",{});var NPr=s(zZ);kGe=r(NPr,"flaubert"),NPr.forEach(t),SGe=r(zMe," \u2014 "),_$=n(zMe,"A",{href:!0});var jPr=s(_$);RGe=r(jPr,"FlaubertConfig"),jPr.forEach(t),BGe=r(zMe," (FlauBERT model)"),zMe.forEach(t),PGe=i(y),jf=n(y,"LI",{});var QMe=s(jf);QZ=n(QMe,"STRONG",{});var DPr=s(QZ);IGe=r(DPr,"fnet"),DPr.forEach(t),qGe=r(QMe," \u2014 "),b$=n(QMe,"A",{href:!0});var GPr=s(b$);NGe=r(GPr,"FNetConfig"),GPr.forEach(t),jGe=r(QMe," (FNet model)"),QMe.forEach(t),DGe=i(y),Df=n(y,"LI",{});var WMe=s(Df);WZ=n(WMe,"STRONG",{});var OPr=s(WZ);GGe=r(OPr,"fsmt"),OPr.forEach(t),OGe=r(WMe," \u2014 "),v$=n(WMe,"A",{href:!0});var VPr=s(v$);VGe=r(VPr,"FSMTConfig"),VPr.forEach(t),XGe=r(WMe," (FairSeq Machine-Translation model)"),WMe.forEach(t),zGe=i(y),Gf=n(y,"LI",{});var HMe=s(Gf);HZ=n(HMe,"STRONG",{});var XPr=s(HZ);QGe=r(XPr,"funnel"),XPr.forEach(t),WGe=r(HMe," \u2014 "),F$=n(HMe,"A",{href:!0});var zPr=s(F$);HGe=r(zPr,"FunnelConfig"),zPr.forEach(t),UGe=r(HMe," (Funnel Transformer model)"),HMe.forEach(t),JGe=i(y),Of=n(y,"LI",{});var UMe=s(Of);UZ=n(UMe,"STRONG",{});var QPr=s(UZ);YGe=r(QPr,"glpn"),QPr.forEach(t),KGe=r(UMe," \u2014 "),T$=n(UMe,"A",{href:!0});var WPr=s(T$);ZGe=r(WPr,"GLPNConfig"),WPr.forEach(t),eOe=r(UMe," (GLPN model)"),UMe.forEach(t),oOe=i(y),Vf=n(y,"LI",{});var JMe=s(Vf);JZ=n(JMe,"STRONG",{});var HPr=s(JZ);rOe=r(HPr,"gpt2"),HPr.forEach(t),tOe=r(JMe," \u2014 "),M$=n(JMe,"A",{href:!0});var UPr=s(M$);aOe=r(UPr,"GPT2Config"),UPr.forEach(t),nOe=r(JMe," (OpenAI GPT-2 model)"),JMe.forEach(t),sOe=i(y),Xf=n(y,"LI",{});var YMe=s(Xf);YZ=n(YMe,"STRONG",{});var JPr=s(YZ);lOe=r(JPr,"gpt_neo"),JPr.forEach(t),iOe=r(YMe," \u2014 "),E$=n(YMe,"A",{href:!0});var YPr=s(E$);dOe=r(YPr,"GPTNeoConfig"),YPr.forEach(t),cOe=r(YMe," (GPT Neo model)"),YMe.forEach(t),fOe=i(y),zf=n(y,"LI",{});var KMe=s(zf);KZ=n(KMe,"STRONG",{});var KPr=s(KZ);mOe=r(KPr,"gptj"),KPr.forEach(t),gOe=r(KMe," \u2014 "),C$=n(KMe,"A",{href:!0});var ZPr=s(C$);hOe=r(ZPr,"GPTJConfig"),ZPr.forEach(t),pOe=r(KMe," (GPT-J model)"),KMe.forEach(t),uOe=i(y),Qf=n(y,"LI",{});var ZMe=s(Qf);ZZ=n(ZMe,"STRONG",{});var eIr=s(ZZ);_Oe=r(eIr,"hubert"),eIr.forEach(t),bOe=r(ZMe," \u2014 "),w$=n(ZMe,"A",{href:!0});var oIr=s(w$);vOe=r(oIr,"HubertConfig"),oIr.forEach(t),FOe=r(ZMe," (Hubert model)"),ZMe.forEach(t),TOe=i(y),Wf=n(y,"LI",{});var e4e=s(Wf);eee=n(e4e,"STRONG",{});var rIr=s(eee);MOe=r(rIr,"ibert"),rIr.forEach(t),EOe=r(e4e," \u2014 "),A$=n(e4e,"A",{href:!0});var tIr=s(A$);COe=r(tIr,"IBertConfig"),tIr.forEach(t),wOe=r(e4e," (I-BERT model)"),e4e.forEach(t),AOe=i(y),Hf=n(y,"LI",{});var o4e=s(Hf);oee=n(o4e,"STRONG",{});var aIr=s(oee);yOe=r(aIr,"imagegpt"),aIr.forEach(t),LOe=r(o4e," \u2014 "),y$=n(o4e,"A",{href:!0});var nIr=s(y$);xOe=r(nIr,"ImageGPTConfig"),nIr.forEach(t),$Oe=r(o4e," (ImageGPT model)"),o4e.forEach(t),kOe=i(y),Uf=n(y,"LI",{});var r4e=s(Uf);ree=n(r4e,"STRONG",{});var sIr=s(ree);SOe=r(sIr,"layoutlm"),sIr.forEach(t),ROe=r(r4e," \u2014 "),L$=n(r4e,"A",{href:!0});var lIr=s(L$);BOe=r(lIr,"LayoutLMConfig"),lIr.forEach(t),POe=r(r4e," (LayoutLM model)"),r4e.forEach(t),IOe=i(y),Jf=n(y,"LI",{});var t4e=s(Jf);tee=n(t4e,"STRONG",{});var iIr=s(tee);qOe=r(iIr,"layoutlmv2"),iIr.forEach(t),NOe=r(t4e," \u2014 "),x$=n(t4e,"A",{href:!0});var dIr=s(x$);jOe=r(dIr,"LayoutLMv2Config"),dIr.forEach(t),DOe=r(t4e," (LayoutLMv2 model)"),t4e.forEach(t),GOe=i(y),Yf=n(y,"LI",{});var a4e=s(Yf);aee=n(a4e,"STRONG",{});var cIr=s(aee);OOe=r(cIr,"led"),cIr.forEach(t),VOe=r(a4e," \u2014 "),$$=n(a4e,"A",{href:!0});var fIr=s($$);XOe=r(fIr,"LEDConfig"),fIr.forEach(t),zOe=r(a4e," (LED model)"),a4e.forEach(t),QOe=i(y),Kf=n(y,"LI",{});var n4e=s(Kf);nee=n(n4e,"STRONG",{});var mIr=s(nee);WOe=r(mIr,"longformer"),mIr.forEach(t),HOe=r(n4e," \u2014 "),k$=n(n4e,"A",{href:!0});var gIr=s(k$);UOe=r(gIr,"LongformerConfig"),gIr.forEach(t),JOe=r(n4e," (Longformer model)"),n4e.forEach(t),YOe=i(y),Zf=n(y,"LI",{});var s4e=s(Zf);see=n(s4e,"STRONG",{});var hIr=s(see);KOe=r(hIr,"luke"),hIr.forEach(t),ZOe=r(s4e," \u2014 "),S$=n(s4e,"A",{href:!0});var pIr=s(S$);eVe=r(pIr,"LukeConfig"),pIr.forEach(t),oVe=r(s4e," (LUKE model)"),s4e.forEach(t),rVe=i(y),em=n(y,"LI",{});var l4e=s(em);lee=n(l4e,"STRONG",{});var uIr=s(lee);tVe=r(uIr,"lxmert"),uIr.forEach(t),aVe=r(l4e," \u2014 "),R$=n(l4e,"A",{href:!0});var _Ir=s(R$);nVe=r(_Ir,"LxmertConfig"),_Ir.forEach(t),sVe=r(l4e," (LXMERT model)"),l4e.forEach(t),lVe=i(y),om=n(y,"LI",{});var i4e=s(om);iee=n(i4e,"STRONG",{});var bIr=s(iee);iVe=r(bIr,"m2m_100"),bIr.forEach(t),dVe=r(i4e," \u2014 "),B$=n(i4e,"A",{href:!0});var vIr=s(B$);cVe=r(vIr,"M2M100Config"),vIr.forEach(t),fVe=r(i4e," (M2M100 model)"),i4e.forEach(t),mVe=i(y),rm=n(y,"LI",{});var d4e=s(rm);dee=n(d4e,"STRONG",{});var FIr=s(dee);gVe=r(FIr,"marian"),FIr.forEach(t),hVe=r(d4e," \u2014 "),P$=n(d4e,"A",{href:!0});var TIr=s(P$);pVe=r(TIr,"MarianConfig"),TIr.forEach(t),uVe=r(d4e," (Marian model)"),d4e.forEach(t),_Ve=i(y),tm=n(y,"LI",{});var c4e=s(tm);cee=n(c4e,"STRONG",{});var MIr=s(cee);bVe=r(MIr,"maskformer"),MIr.forEach(t),vVe=r(c4e," \u2014 "),I$=n(c4e,"A",{href:!0});var EIr=s(I$);FVe=r(EIr,"MaskFormerConfig"),EIr.forEach(t),TVe=r(c4e," (MaskFormer model)"),c4e.forEach(t),MVe=i(y),am=n(y,"LI",{});var f4e=s(am);fee=n(f4e,"STRONG",{});var CIr=s(fee);EVe=r(CIr,"mbart"),CIr.forEach(t),CVe=r(f4e," \u2014 "),q$=n(f4e,"A",{href:!0});var wIr=s(q$);wVe=r(wIr,"MBartConfig"),wIr.forEach(t),AVe=r(f4e," (mBART model)"),f4e.forEach(t),yVe=i(y),nm=n(y,"LI",{});var m4e=s(nm);mee=n(m4e,"STRONG",{});var AIr=s(mee);LVe=r(AIr,"megatron-bert"),AIr.forEach(t),xVe=r(m4e," \u2014 "),N$=n(m4e,"A",{href:!0});var yIr=s(N$);$Ve=r(yIr,"MegatronBertConfig"),yIr.forEach(t),kVe=r(m4e," (MegatronBert model)"),m4e.forEach(t),SVe=i(y),sm=n(y,"LI",{});var g4e=s(sm);gee=n(g4e,"STRONG",{});var LIr=s(gee);RVe=r(LIr,"mobilebert"),LIr.forEach(t),BVe=r(g4e," \u2014 "),j$=n(g4e,"A",{href:!0});var xIr=s(j$);PVe=r(xIr,"MobileBertConfig"),xIr.forEach(t),IVe=r(g4e," (MobileBERT model)"),g4e.forEach(t),qVe=i(y),lm=n(y,"LI",{});var h4e=s(lm);hee=n(h4e,"STRONG",{});var $Ir=s(hee);NVe=r($Ir,"mpnet"),$Ir.forEach(t),jVe=r(h4e," \u2014 "),D$=n(h4e,"A",{href:!0});var kIr=s(D$);DVe=r(kIr,"MPNetConfig"),kIr.forEach(t),GVe=r(h4e," (MPNet model)"),h4e.forEach(t),OVe=i(y),im=n(y,"LI",{});var p4e=s(im);pee=n(p4e,"STRONG",{});var SIr=s(pee);VVe=r(SIr,"mt5"),SIr.forEach(t),XVe=r(p4e," \u2014 "),G$=n(p4e,"A",{href:!0});var RIr=s(G$);zVe=r(RIr,"MT5Config"),RIr.forEach(t),QVe=r(p4e," (mT5 model)"),p4e.forEach(t),WVe=i(y),dm=n(y,"LI",{});var u4e=s(dm);uee=n(u4e,"STRONG",{});var BIr=s(uee);HVe=r(BIr,"nystromformer"),BIr.forEach(t),UVe=r(u4e," \u2014 "),O$=n(u4e,"A",{href:!0});var PIr=s(O$);JVe=r(PIr,"NystromformerConfig"),PIr.forEach(t),YVe=r(u4e," (Nystromformer model)"),u4e.forEach(t),KVe=i(y),cm=n(y,"LI",{});var _4e=s(cm);_ee=n(_4e,"STRONG",{});var IIr=s(_ee);ZVe=r(IIr,"openai-gpt"),IIr.forEach(t),eXe=r(_4e," \u2014 "),V$=n(_4e,"A",{href:!0});var qIr=s(V$);oXe=r(qIr,"OpenAIGPTConfig"),qIr.forEach(t),rXe=r(_4e," (OpenAI GPT model)"),_4e.forEach(t),tXe=i(y),fm=n(y,"LI",{});var b4e=s(fm);bee=n(b4e,"STRONG",{});var NIr=s(bee);aXe=r(NIr,"pegasus"),NIr.forEach(t),nXe=r(b4e," \u2014 "),X$=n(b4e,"A",{href:!0});var jIr=s(X$);sXe=r(jIr,"PegasusConfig"),jIr.forEach(t),lXe=r(b4e," (Pegasus model)"),b4e.forEach(t),iXe=i(y),mm=n(y,"LI",{});var v4e=s(mm);vee=n(v4e,"STRONG",{});var DIr=s(vee);dXe=r(DIr,"perceiver"),DIr.forEach(t),cXe=r(v4e," \u2014 "),z$=n(v4e,"A",{href:!0});var GIr=s(z$);fXe=r(GIr,"PerceiverConfig"),GIr.forEach(t),mXe=r(v4e," (Perceiver model)"),v4e.forEach(t),gXe=i(y),gm=n(y,"LI",{});var F4e=s(gm);Fee=n(F4e,"STRONG",{});var OIr=s(Fee);hXe=r(OIr,"plbart"),OIr.forEach(t),pXe=r(F4e," \u2014 "),Q$=n(F4e,"A",{href:!0});var VIr=s(Q$);uXe=r(VIr,"PLBartConfig"),VIr.forEach(t),_Xe=r(F4e," (PLBart model)"),F4e.forEach(t),bXe=i(y),hm=n(y,"LI",{});var T4e=s(hm);Tee=n(T4e,"STRONG",{});var XIr=s(Tee);vXe=r(XIr,"poolformer"),XIr.forEach(t),FXe=r(T4e," \u2014 "),W$=n(T4e,"A",{href:!0});var zIr=s(W$);TXe=r(zIr,"PoolFormerConfig"),zIr.forEach(t),MXe=r(T4e," (PoolFormer model)"),T4e.forEach(t),EXe=i(y),pm=n(y,"LI",{});var M4e=s(pm);Mee=n(M4e,"STRONG",{});var QIr=s(Mee);CXe=r(QIr,"prophetnet"),QIr.forEach(t),wXe=r(M4e," \u2014 "),H$=n(M4e,"A",{href:!0});var WIr=s(H$);AXe=r(WIr,"ProphetNetConfig"),WIr.forEach(t),yXe=r(M4e," (ProphetNet model)"),M4e.forEach(t),LXe=i(y),um=n(y,"LI",{});var E4e=s(um);Eee=n(E4e,"STRONG",{});var HIr=s(Eee);xXe=r(HIr,"qdqbert"),HIr.forEach(t),$Xe=r(E4e," \u2014 "),U$=n(E4e,"A",{href:!0});var UIr=s(U$);kXe=r(UIr,"QDQBertConfig"),UIr.forEach(t),SXe=r(E4e," (QDQBert model)"),E4e.forEach(t),RXe=i(y),_m=n(y,"LI",{});var C4e=s(_m);Cee=n(C4e,"STRONG",{});var JIr=s(Cee);BXe=r(JIr,"rag"),JIr.forEach(t),PXe=r(C4e," \u2014 "),J$=n(C4e,"A",{href:!0});var YIr=s(J$);IXe=r(YIr,"RagConfig"),YIr.forEach(t),qXe=r(C4e," (RAG model)"),C4e.forEach(t),NXe=i(y),bm=n(y,"LI",{});var w4e=s(bm);wee=n(w4e,"STRONG",{});var KIr=s(wee);jXe=r(KIr,"realm"),KIr.forEach(t),DXe=r(w4e," \u2014 "),Y$=n(w4e,"A",{href:!0});var ZIr=s(Y$);GXe=r(ZIr,"RealmConfig"),ZIr.forEach(t),OXe=r(w4e," (Realm model)"),w4e.forEach(t),VXe=i(y),vm=n(y,"LI",{});var A4e=s(vm);Aee=n(A4e,"STRONG",{});var eqr=s(Aee);XXe=r(eqr,"reformer"),eqr.forEach(t),zXe=r(A4e," \u2014 "),K$=n(A4e,"A",{href:!0});var oqr=s(K$);QXe=r(oqr,"ReformerConfig"),oqr.forEach(t),WXe=r(A4e," (Reformer model)"),A4e.forEach(t),HXe=i(y),Fm=n(y,"LI",{});var y4e=s(Fm);yee=n(y4e,"STRONG",{});var rqr=s(yee);UXe=r(rqr,"regnet"),rqr.forEach(t),JXe=r(y4e," \u2014 "),Z$=n(y4e,"A",{href:!0});var tqr=s(Z$);YXe=r(tqr,"RegNetConfig"),tqr.forEach(t),KXe=r(y4e," (RegNet model)"),y4e.forEach(t),ZXe=i(y),Tm=n(y,"LI",{});var L4e=s(Tm);Lee=n(L4e,"STRONG",{});var aqr=s(Lee);eze=r(aqr,"rembert"),aqr.forEach(t),oze=r(L4e," \u2014 "),ek=n(L4e,"A",{href:!0});var nqr=s(ek);rze=r(nqr,"RemBertConfig"),nqr.forEach(t),tze=r(L4e," (RemBERT model)"),L4e.forEach(t),aze=i(y),Mm=n(y,"LI",{});var x4e=s(Mm);xee=n(x4e,"STRONG",{});var sqr=s(xee);nze=r(sqr,"resnet"),sqr.forEach(t),sze=r(x4e," \u2014 "),ok=n(x4e,"A",{href:!0});var lqr=s(ok);lze=r(lqr,"ResNetConfig"),lqr.forEach(t),ize=r(x4e," (ResNet model)"),x4e.forEach(t),dze=i(y),Em=n(y,"LI",{});var $4e=s(Em);$ee=n($4e,"STRONG",{});var iqr=s($ee);cze=r(iqr,"retribert"),iqr.forEach(t),fze=r($4e," \u2014 "),rk=n($4e,"A",{href:!0});var dqr=s(rk);mze=r(dqr,"RetriBertConfig"),dqr.forEach(t),gze=r($4e," (RetriBERT model)"),$4e.forEach(t),hze=i(y),Cm=n(y,"LI",{});var k4e=s(Cm);kee=n(k4e,"STRONG",{});var cqr=s(kee);pze=r(cqr,"roberta"),cqr.forEach(t),uze=r(k4e," \u2014 "),tk=n(k4e,"A",{href:!0});var fqr=s(tk);_ze=r(fqr,"RobertaConfig"),fqr.forEach(t),bze=r(k4e," (RoBERTa model)"),k4e.forEach(t),vze=i(y),wm=n(y,"LI",{});var S4e=s(wm);See=n(S4e,"STRONG",{});var mqr=s(See);Fze=r(mqr,"roformer"),mqr.forEach(t),Tze=r(S4e," \u2014 "),ak=n(S4e,"A",{href:!0});var gqr=s(ak);Mze=r(gqr,"RoFormerConfig"),gqr.forEach(t),Eze=r(S4e," (RoFormer model)"),S4e.forEach(t),Cze=i(y),Am=n(y,"LI",{});var R4e=s(Am);Ree=n(R4e,"STRONG",{});var hqr=s(Ree);wze=r(hqr,"segformer"),hqr.forEach(t),Aze=r(R4e," \u2014 "),nk=n(R4e,"A",{href:!0});var pqr=s(nk);yze=r(pqr,"SegformerConfig"),pqr.forEach(t),Lze=r(R4e," (SegFormer model)"),R4e.forEach(t),xze=i(y),ym=n(y,"LI",{});var B4e=s(ym);Bee=n(B4e,"STRONG",{});var uqr=s(Bee);$ze=r(uqr,"sew"),uqr.forEach(t),kze=r(B4e," \u2014 "),sk=n(B4e,"A",{href:!0});var _qr=s(sk);Sze=r(_qr,"SEWConfig"),_qr.forEach(t),Rze=r(B4e," (SEW model)"),B4e.forEach(t),Bze=i(y),Lm=n(y,"LI",{});var P4e=s(Lm);Pee=n(P4e,"STRONG",{});var bqr=s(Pee);Pze=r(bqr,"sew-d"),bqr.forEach(t),Ize=r(P4e," \u2014 "),lk=n(P4e,"A",{href:!0});var vqr=s(lk);qze=r(vqr,"SEWDConfig"),vqr.forEach(t),Nze=r(P4e," (SEW-D model)"),P4e.forEach(t),jze=i(y),xm=n(y,"LI",{});var I4e=s(xm);Iee=n(I4e,"STRONG",{});var Fqr=s(Iee);Dze=r(Fqr,"speech-encoder-decoder"),Fqr.forEach(t),Gze=r(I4e," \u2014 "),ik=n(I4e,"A",{href:!0});var Tqr=s(ik);Oze=r(Tqr,"SpeechEncoderDecoderConfig"),Tqr.forEach(t),Vze=r(I4e," (Speech Encoder decoder model)"),I4e.forEach(t),Xze=i(y),$m=n(y,"LI",{});var q4e=s($m);qee=n(q4e,"STRONG",{});var Mqr=s(qee);zze=r(Mqr,"speech_to_text"),Mqr.forEach(t),Qze=r(q4e," \u2014 "),dk=n(q4e,"A",{href:!0});var Eqr=s(dk);Wze=r(Eqr,"Speech2TextConfig"),Eqr.forEach(t),Hze=r(q4e," (Speech2Text model)"),q4e.forEach(t),Uze=i(y),km=n(y,"LI",{});var N4e=s(km);Nee=n(N4e,"STRONG",{});var Cqr=s(Nee);Jze=r(Cqr,"speech_to_text_2"),Cqr.forEach(t),Yze=r(N4e," \u2014 "),ck=n(N4e,"A",{href:!0});var wqr=s(ck);Kze=r(wqr,"Speech2Text2Config"),wqr.forEach(t),Zze=r(N4e," (Speech2Text2 model)"),N4e.forEach(t),eQe=i(y),Sm=n(y,"LI",{});var j4e=s(Sm);jee=n(j4e,"STRONG",{});var Aqr=s(jee);oQe=r(Aqr,"splinter"),Aqr.forEach(t),rQe=r(j4e," \u2014 "),fk=n(j4e,"A",{href:!0});var yqr=s(fk);tQe=r(yqr,"SplinterConfig"),yqr.forEach(t),aQe=r(j4e," (Splinter model)"),j4e.forEach(t),nQe=i(y),Rm=n(y,"LI",{});var D4e=s(Rm);Dee=n(D4e,"STRONG",{});var Lqr=s(Dee);sQe=r(Lqr,"squeezebert"),Lqr.forEach(t),lQe=r(D4e," \u2014 "),mk=n(D4e,"A",{href:!0});var xqr=s(mk);iQe=r(xqr,"SqueezeBertConfig"),xqr.forEach(t),dQe=r(D4e," (SqueezeBERT model)"),D4e.forEach(t),cQe=i(y),Bm=n(y,"LI",{});var G4e=s(Bm);Gee=n(G4e,"STRONG",{});var $qr=s(Gee);fQe=r($qr,"swin"),$qr.forEach(t),mQe=r(G4e," \u2014 "),gk=n(G4e,"A",{href:!0});var kqr=s(gk);gQe=r(kqr,"SwinConfig"),kqr.forEach(t),hQe=r(G4e," (Swin model)"),G4e.forEach(t),pQe=i(y),Pm=n(y,"LI",{});var O4e=s(Pm);Oee=n(O4e,"STRONG",{});var Sqr=s(Oee);uQe=r(Sqr,"t5"),Sqr.forEach(t),_Qe=r(O4e," \u2014 "),hk=n(O4e,"A",{href:!0});var Rqr=s(hk);bQe=r(Rqr,"T5Config"),Rqr.forEach(t),vQe=r(O4e," (T5 model)"),O4e.forEach(t),FQe=i(y),Im=n(y,"LI",{});var V4e=s(Im);Vee=n(V4e,"STRONG",{});var Bqr=s(Vee);TQe=r(Bqr,"tapas"),Bqr.forEach(t),MQe=r(V4e," \u2014 "),pk=n(V4e,"A",{href:!0});var Pqr=s(pk);EQe=r(Pqr,"TapasConfig"),Pqr.forEach(t),CQe=r(V4e," (TAPAS model)"),V4e.forEach(t),wQe=i(y),qm=n(y,"LI",{});var X4e=s(qm);Xee=n(X4e,"STRONG",{});var Iqr=s(Xee);AQe=r(Iqr,"tapex"),Iqr.forEach(t),yQe=r(X4e," \u2014 "),uk=n(X4e,"A",{href:!0});var qqr=s(uk);LQe=r(qqr,"BartConfig"),qqr.forEach(t),xQe=r(X4e," (TAPEX model)"),X4e.forEach(t),$Qe=i(y),Nm=n(y,"LI",{});var z4e=s(Nm);zee=n(z4e,"STRONG",{});var Nqr=s(zee);kQe=r(Nqr,"transfo-xl"),Nqr.forEach(t),SQe=r(z4e," \u2014 "),_k=n(z4e,"A",{href:!0});var jqr=s(_k);RQe=r(jqr,"TransfoXLConfig"),jqr.forEach(t),BQe=r(z4e," (Transformer-XL model)"),z4e.forEach(t),PQe=i(y),jm=n(y,"LI",{});var Q4e=s(jm);Qee=n(Q4e,"STRONG",{});var Dqr=s(Qee);IQe=r(Dqr,"trocr"),Dqr.forEach(t),qQe=r(Q4e," \u2014 "),bk=n(Q4e,"A",{href:!0});var Gqr=s(bk);NQe=r(Gqr,"TrOCRConfig"),Gqr.forEach(t),jQe=r(Q4e," (TrOCR model)"),Q4e.forEach(t),DQe=i(y),Dm=n(y,"LI",{});var W4e=s(Dm);Wee=n(W4e,"STRONG",{});var Oqr=s(Wee);GQe=r(Oqr,"unispeech"),Oqr.forEach(t),OQe=r(W4e," \u2014 "),vk=n(W4e,"A",{href:!0});var Vqr=s(vk);VQe=r(Vqr,"UniSpeechConfig"),Vqr.forEach(t),XQe=r(W4e," (UniSpeech model)"),W4e.forEach(t),zQe=i(y),Gm=n(y,"LI",{});var H4e=s(Gm);Hee=n(H4e,"STRONG",{});var Xqr=s(Hee);QQe=r(Xqr,"unispeech-sat"),Xqr.forEach(t),WQe=r(H4e," \u2014 "),Fk=n(H4e,"A",{href:!0});var zqr=s(Fk);HQe=r(zqr,"UniSpeechSatConfig"),zqr.forEach(t),UQe=r(H4e," (UniSpeechSat model)"),H4e.forEach(t),JQe=i(y),Om=n(y,"LI",{});var U4e=s(Om);Uee=n(U4e,"STRONG",{});var Qqr=s(Uee);YQe=r(Qqr,"van"),Qqr.forEach(t),KQe=r(U4e," \u2014 "),Tk=n(U4e,"A",{href:!0});var Wqr=s(Tk);ZQe=r(Wqr,"VanConfig"),Wqr.forEach(t),eWe=r(U4e," (VAN model)"),U4e.forEach(t),oWe=i(y),Vm=n(y,"LI",{});var J4e=s(Vm);Jee=n(J4e,"STRONG",{});var Hqr=s(Jee);rWe=r(Hqr,"vilt"),Hqr.forEach(t),tWe=r(J4e," \u2014 "),Mk=n(J4e,"A",{href:!0});var Uqr=s(Mk);aWe=r(Uqr,"ViltConfig"),Uqr.forEach(t),nWe=r(J4e," (ViLT model)"),J4e.forEach(t),sWe=i(y),Xm=n(y,"LI",{});var Y4e=s(Xm);Yee=n(Y4e,"STRONG",{});var Jqr=s(Yee);lWe=r(Jqr,"vision-encoder-decoder"),Jqr.forEach(t),iWe=r(Y4e," \u2014 "),Ek=n(Y4e,"A",{href:!0});var Yqr=s(Ek);dWe=r(Yqr,"VisionEncoderDecoderConfig"),Yqr.forEach(t),cWe=r(Y4e," (Vision Encoder decoder model)"),Y4e.forEach(t),fWe=i(y),zm=n(y,"LI",{});var K4e=s(zm);Kee=n(K4e,"STRONG",{});var Kqr=s(Kee);mWe=r(Kqr,"vision-text-dual-encoder"),Kqr.forEach(t),gWe=r(K4e," \u2014 "),Ck=n(K4e,"A",{href:!0});var Zqr=s(Ck);hWe=r(Zqr,"VisionTextDualEncoderConfig"),Zqr.forEach(t),pWe=r(K4e," (VisionTextDualEncoder model)"),K4e.forEach(t),uWe=i(y),Qm=n(y,"LI",{});var Z4e=s(Qm);Zee=n(Z4e,"STRONG",{});var eNr=s(Zee);_We=r(eNr,"visual_bert"),eNr.forEach(t),bWe=r(Z4e," \u2014 "),wk=n(Z4e,"A",{href:!0});var oNr=s(wk);vWe=r(oNr,"VisualBertConfig"),oNr.forEach(t),FWe=r(Z4e," (VisualBert model)"),Z4e.forEach(t),TWe=i(y),Wm=n(y,"LI",{});var eEe=s(Wm);eoe=n(eEe,"STRONG",{});var rNr=s(eoe);MWe=r(rNr,"vit"),rNr.forEach(t),EWe=r(eEe," \u2014 "),Ak=n(eEe,"A",{href:!0});var tNr=s(Ak);CWe=r(tNr,"ViTConfig"),tNr.forEach(t),wWe=r(eEe," (ViT model)"),eEe.forEach(t),AWe=i(y),Hm=n(y,"LI",{});var oEe=s(Hm);ooe=n(oEe,"STRONG",{});var aNr=s(ooe);yWe=r(aNr,"vit_mae"),aNr.forEach(t),LWe=r(oEe," \u2014 "),yk=n(oEe,"A",{href:!0});var nNr=s(yk);xWe=r(nNr,"ViTMAEConfig"),nNr.forEach(t),$We=r(oEe," (ViTMAE model)"),oEe.forEach(t),kWe=i(y),Um=n(y,"LI",{});var rEe=s(Um);roe=n(rEe,"STRONG",{});var sNr=s(roe);SWe=r(sNr,"wav2vec2"),sNr.forEach(t),RWe=r(rEe," \u2014 "),Lk=n(rEe,"A",{href:!0});var lNr=s(Lk);BWe=r(lNr,"Wav2Vec2Config"),lNr.forEach(t),PWe=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),IWe=i(y),Jm=n(y,"LI",{});var tEe=s(Jm);toe=n(tEe,"STRONG",{});var iNr=s(toe);qWe=r(iNr,"wavlm"),iNr.forEach(t),NWe=r(tEe," \u2014 "),xk=n(tEe,"A",{href:!0});var dNr=s(xk);jWe=r(dNr,"WavLMConfig"),dNr.forEach(t),DWe=r(tEe," (WavLM model)"),tEe.forEach(t),GWe=i(y),Ym=n(y,"LI",{});var aEe=s(Ym);aoe=n(aEe,"STRONG",{});var cNr=s(aoe);OWe=r(cNr,"xglm"),cNr.forEach(t),VWe=r(aEe," \u2014 "),$k=n(aEe,"A",{href:!0});var fNr=s($k);XWe=r(fNr,"XGLMConfig"),fNr.forEach(t),zWe=r(aEe," (XGLM model)"),aEe.forEach(t),QWe=i(y),Km=n(y,"LI",{});var nEe=s(Km);noe=n(nEe,"STRONG",{});var mNr=s(noe);WWe=r(mNr,"xlm"),mNr.forEach(t),HWe=r(nEe," \u2014 "),kk=n(nEe,"A",{href:!0});var gNr=s(kk);UWe=r(gNr,"XLMConfig"),gNr.forEach(t),JWe=r(nEe," (XLM model)"),nEe.forEach(t),YWe=i(y),Zm=n(y,"LI",{});var sEe=s(Zm);soe=n(sEe,"STRONG",{});var hNr=s(soe);KWe=r(hNr,"xlm-prophetnet"),hNr.forEach(t),ZWe=r(sEe," \u2014 "),Sk=n(sEe,"A",{href:!0});var pNr=s(Sk);eHe=r(pNr,"XLMProphetNetConfig"),pNr.forEach(t),oHe=r(sEe," (XLMProphetNet model)"),sEe.forEach(t),rHe=i(y),eg=n(y,"LI",{});var lEe=s(eg);loe=n(lEe,"STRONG",{});var uNr=s(loe);tHe=r(uNr,"xlm-roberta"),uNr.forEach(t),aHe=r(lEe," \u2014 "),Rk=n(lEe,"A",{href:!0});var _Nr=s(Rk);nHe=r(_Nr,"XLMRobertaConfig"),_Nr.forEach(t),sHe=r(lEe," (XLM-RoBERTa model)"),lEe.forEach(t),lHe=i(y),og=n(y,"LI",{});var iEe=s(og);ioe=n(iEe,"STRONG",{});var bNr=s(ioe);iHe=r(bNr,"xlm-roberta-xl"),bNr.forEach(t),dHe=r(iEe," \u2014 "),Bk=n(iEe,"A",{href:!0});var vNr=s(Bk);cHe=r(vNr,"XLMRobertaXLConfig"),vNr.forEach(t),fHe=r(iEe," (XLM-RoBERTa-XL model)"),iEe.forEach(t),mHe=i(y),rg=n(y,"LI",{});var dEe=s(rg);doe=n(dEe,"STRONG",{});var FNr=s(doe);gHe=r(FNr,"xlnet"),FNr.forEach(t),hHe=r(dEe," \u2014 "),Pk=n(dEe,"A",{href:!0});var TNr=s(Pk);pHe=r(TNr,"XLNetConfig"),TNr.forEach(t),uHe=r(dEe," (XLNet model)"),dEe.forEach(t),_He=i(y),tg=n(y,"LI",{});var cEe=s(tg);coe=n(cEe,"STRONG",{});var MNr=s(coe);bHe=r(MNr,"yolos"),MNr.forEach(t),vHe=r(cEe," \u2014 "),Ik=n(cEe,"A",{href:!0});var ENr=s(Ik);FHe=r(ENr,"YolosConfig"),ENr.forEach(t),THe=r(cEe," (YOLOS model)"),cEe.forEach(t),MHe=i(y),ag=n(y,"LI",{});var fEe=s(ag);foe=n(fEe,"STRONG",{});var CNr=s(foe);EHe=r(CNr,"yoso"),CNr.forEach(t),CHe=r(fEe," \u2014 "),qk=n(fEe,"A",{href:!0});var wNr=s(qk);wHe=r(wNr,"YosoConfig"),wNr.forEach(t),AHe=r(fEe," (YOSO model)"),fEe.forEach(t),y.forEach(t),yHe=i(Yr),T(ng.$$.fragment,Yr),Yr.forEach(t),LHe=i(Jr),sg=n(Jr,"DIV",{class:!0});var FIe=s(sg);T(S0.$$.fragment,FIe),xHe=i(FIe),moe=n(FIe,"P",{});var ANr=s(moe);$He=r(ANr,"Register a new configuration for this class."),ANr.forEach(t),FIe.forEach(t),Jr.forEach(t),wBe=i(f),fi=n(f,"H2",{class:!0});var TIe=s(fi);lg=n(TIe,"A",{id:!0,class:!0,href:!0});var yNr=s(lg);goe=n(yNr,"SPAN",{});var LNr=s(goe);T(R0.$$.fragment,LNr),LNr.forEach(t),yNr.forEach(t),kHe=i(TIe),hoe=n(TIe,"SPAN",{});var xNr=s(hoe);SHe=r(xNr,"AutoTokenizer"),xNr.forEach(t),TIe.forEach(t),ABe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T(B0.$$.fragment,ks),RHe=i(ks),P0=n(ks,"P",{});var MIe=s(P0);BHe=r(MIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Nk=n(MIe,"A",{href:!0});var $Nr=s(Nk);PHe=r($Nr,"AutoTokenizer.from_pretrained()"),$Nr.forEach(t),IHe=r(MIe," class method."),MIe.forEach(t),qHe=i(ks),I0=n(ks,"P",{});var EIe=s(I0);NHe=r(EIe,"This class cannot be instantiated directly using "),poe=n(EIe,"CODE",{});var kNr=s(poe);jHe=r(kNr,"__init__()"),kNr.forEach(t),DHe=r(EIe," (throws an error)."),EIe.forEach(t),GHe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(q0.$$.fragment,Ss),OHe=i(Ss),uoe=n(Ss,"P",{});var SNr=s(uoe);VHe=r(SNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SNr.forEach(t),XHe=i(Ss),Ta=n(Ss,"P",{});var Lw=s(Ta);zHe=r(Lw,"The tokenizer class to instantiate is selected based on the "),_oe=n(Lw,"CODE",{});var RNr=s(_oe);QHe=r(RNr,"model_type"),RNr.forEach(t),WHe=r(Lw,` property of the config object (either
passed as an argument or loaded from `),boe=n(Lw,"CODE",{});var BNr=s(boe);HHe=r(BNr,"pretrained_model_name_or_path"),BNr.forEach(t),UHe=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=n(Lw,"CODE",{});var PNr=s(voe);JHe=r(PNr,"pretrained_model_name_or_path"),PNr.forEach(t),YHe=r(Lw,":"),Lw.forEach(t),KHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var Sx=s(yn);Foe=n(Sx,"STRONG",{});var INr=s(Foe);ZHe=r(INr,"albert"),INr.forEach(t),eUe=r(Sx," \u2014 "),jk=n(Sx,"A",{href:!0});var qNr=s(jk);oUe=r(qNr,"AlbertTokenizer"),qNr.forEach(t),rUe=r(Sx," or "),Dk=n(Sx,"A",{href:!0});var NNr=s(Dk);tUe=r(NNr,"AlbertTokenizerFast"),NNr.forEach(t),aUe=r(Sx," (ALBERT model)"),Sx.forEach(t),nUe=i(S),Ln=n(S,"LI",{});var Rx=s(Ln);Toe=n(Rx,"STRONG",{});var jNr=s(Toe);sUe=r(jNr,"bart"),jNr.forEach(t),lUe=r(Rx," \u2014 "),Gk=n(Rx,"A",{href:!0});var DNr=s(Gk);iUe=r(DNr,"BartTokenizer"),DNr.forEach(t),dUe=r(Rx," or "),Ok=n(Rx,"A",{href:!0});var GNr=s(Ok);cUe=r(GNr,"BartTokenizerFast"),GNr.forEach(t),fUe=r(Rx," (BART model)"),Rx.forEach(t),mUe=i(S),xn=n(S,"LI",{});var Bx=s(xn);Moe=n(Bx,"STRONG",{});var ONr=s(Moe);gUe=r(ONr,"barthez"),ONr.forEach(t),hUe=r(Bx," \u2014 "),Vk=n(Bx,"A",{href:!0});var VNr=s(Vk);pUe=r(VNr,"BarthezTokenizer"),VNr.forEach(t),uUe=r(Bx," or "),Xk=n(Bx,"A",{href:!0});var XNr=s(Xk);_Ue=r(XNr,"BarthezTokenizerFast"),XNr.forEach(t),bUe=r(Bx," (BARThez model)"),Bx.forEach(t),vUe=i(S),ig=n(S,"LI",{});var mEe=s(ig);Eoe=n(mEe,"STRONG",{});var zNr=s(Eoe);FUe=r(zNr,"bartpho"),zNr.forEach(t),TUe=r(mEe," \u2014 "),zk=n(mEe,"A",{href:!0});var QNr=s(zk);MUe=r(QNr,"BartphoTokenizer"),QNr.forEach(t),EUe=r(mEe," (BARTpho model)"),mEe.forEach(t),CUe=i(S),$n=n(S,"LI",{});var Px=s($n);Coe=n(Px,"STRONG",{});var WNr=s(Coe);wUe=r(WNr,"bert"),WNr.forEach(t),AUe=r(Px," \u2014 "),Qk=n(Px,"A",{href:!0});var HNr=s(Qk);yUe=r(HNr,"BertTokenizer"),HNr.forEach(t),LUe=r(Px," or "),Wk=n(Px,"A",{href:!0});var UNr=s(Wk);xUe=r(UNr,"BertTokenizerFast"),UNr.forEach(t),$Ue=r(Px," (BERT model)"),Px.forEach(t),kUe=i(S),dg=n(S,"LI",{});var gEe=s(dg);woe=n(gEe,"STRONG",{});var JNr=s(woe);SUe=r(JNr,"bert-generation"),JNr.forEach(t),RUe=r(gEe," \u2014 "),Hk=n(gEe,"A",{href:!0});var YNr=s(Hk);BUe=r(YNr,"BertGenerationTokenizer"),YNr.forEach(t),PUe=r(gEe," (Bert Generation model)"),gEe.forEach(t),IUe=i(S),cg=n(S,"LI",{});var hEe=s(cg);Aoe=n(hEe,"STRONG",{});var KNr=s(Aoe);qUe=r(KNr,"bert-japanese"),KNr.forEach(t),NUe=r(hEe," \u2014 "),Uk=n(hEe,"A",{href:!0});var ZNr=s(Uk);jUe=r(ZNr,"BertJapaneseTokenizer"),ZNr.forEach(t),DUe=r(hEe," (BertJapanese model)"),hEe.forEach(t),GUe=i(S),fg=n(S,"LI",{});var pEe=s(fg);yoe=n(pEe,"STRONG",{});var ejr=s(yoe);OUe=r(ejr,"bertweet"),ejr.forEach(t),VUe=r(pEe," \u2014 "),Jk=n(pEe,"A",{href:!0});var ojr=s(Jk);XUe=r(ojr,"BertweetTokenizer"),ojr.forEach(t),zUe=r(pEe," (Bertweet model)"),pEe.forEach(t),QUe=i(S),kn=n(S,"LI",{});var Ix=s(kn);Loe=n(Ix,"STRONG",{});var rjr=s(Loe);WUe=r(rjr,"big_bird"),rjr.forEach(t),HUe=r(Ix," \u2014 "),Yk=n(Ix,"A",{href:!0});var tjr=s(Yk);UUe=r(tjr,"BigBirdTokenizer"),tjr.forEach(t),JUe=r(Ix," or "),Kk=n(Ix,"A",{href:!0});var ajr=s(Kk);YUe=r(ajr,"BigBirdTokenizerFast"),ajr.forEach(t),KUe=r(Ix," (BigBird model)"),Ix.forEach(t),ZUe=i(S),Sn=n(S,"LI",{});var qx=s(Sn);xoe=n(qx,"STRONG",{});var njr=s(xoe);eJe=r(njr,"bigbird_pegasus"),njr.forEach(t),oJe=r(qx," \u2014 "),Zk=n(qx,"A",{href:!0});var sjr=s(Zk);rJe=r(sjr,"PegasusTokenizer"),sjr.forEach(t),tJe=r(qx," or "),eS=n(qx,"A",{href:!0});var ljr=s(eS);aJe=r(ljr,"PegasusTokenizerFast"),ljr.forEach(t),nJe=r(qx," (BigBirdPegasus model)"),qx.forEach(t),sJe=i(S),Rn=n(S,"LI",{});var Nx=s(Rn);$oe=n(Nx,"STRONG",{});var ijr=s($oe);lJe=r(ijr,"blenderbot"),ijr.forEach(t),iJe=r(Nx," \u2014 "),oS=n(Nx,"A",{href:!0});var djr=s(oS);dJe=r(djr,"BlenderbotTokenizer"),djr.forEach(t),cJe=r(Nx," or "),rS=n(Nx,"A",{href:!0});var cjr=s(rS);fJe=r(cjr,"BlenderbotTokenizerFast"),cjr.forEach(t),mJe=r(Nx," (Blenderbot model)"),Nx.forEach(t),gJe=i(S),mg=n(S,"LI",{});var uEe=s(mg);koe=n(uEe,"STRONG",{});var fjr=s(koe);hJe=r(fjr,"blenderbot-small"),fjr.forEach(t),pJe=r(uEe," \u2014 "),tS=n(uEe,"A",{href:!0});var mjr=s(tS);uJe=r(mjr,"BlenderbotSmallTokenizer"),mjr.forEach(t),_Je=r(uEe," (BlenderbotSmall model)"),uEe.forEach(t),bJe=i(S),gg=n(S,"LI",{});var _Ee=s(gg);Soe=n(_Ee,"STRONG",{});var gjr=s(Soe);vJe=r(gjr,"byt5"),gjr.forEach(t),FJe=r(_Ee," \u2014 "),aS=n(_Ee,"A",{href:!0});var hjr=s(aS);TJe=r(hjr,"ByT5Tokenizer"),hjr.forEach(t),MJe=r(_Ee," (ByT5 model)"),_Ee.forEach(t),EJe=i(S),Bn=n(S,"LI",{});var jx=s(Bn);Roe=n(jx,"STRONG",{});var pjr=s(Roe);CJe=r(pjr,"camembert"),pjr.forEach(t),wJe=r(jx," \u2014 "),nS=n(jx,"A",{href:!0});var ujr=s(nS);AJe=r(ujr,"CamembertTokenizer"),ujr.forEach(t),yJe=r(jx," or "),sS=n(jx,"A",{href:!0});var _jr=s(sS);LJe=r(_jr,"CamembertTokenizerFast"),_jr.forEach(t),xJe=r(jx," (CamemBERT model)"),jx.forEach(t),$Je=i(S),hg=n(S,"LI",{});var bEe=s(hg);Boe=n(bEe,"STRONG",{});var bjr=s(Boe);kJe=r(bjr,"canine"),bjr.forEach(t),SJe=r(bEe," \u2014 "),lS=n(bEe,"A",{href:!0});var vjr=s(lS);RJe=r(vjr,"CanineTokenizer"),vjr.forEach(t),BJe=r(bEe," (Canine model)"),bEe.forEach(t),PJe=i(S),Pn=n(S,"LI",{});var Dx=s(Pn);Poe=n(Dx,"STRONG",{});var Fjr=s(Poe);IJe=r(Fjr,"clip"),Fjr.forEach(t),qJe=r(Dx," \u2014 "),iS=n(Dx,"A",{href:!0});var Tjr=s(iS);NJe=r(Tjr,"CLIPTokenizer"),Tjr.forEach(t),jJe=r(Dx," or "),dS=n(Dx,"A",{href:!0});var Mjr=s(dS);DJe=r(Mjr,"CLIPTokenizerFast"),Mjr.forEach(t),GJe=r(Dx," (CLIP model)"),Dx.forEach(t),OJe=i(S),In=n(S,"LI",{});var Gx=s(In);Ioe=n(Gx,"STRONG",{});var Ejr=s(Ioe);VJe=r(Ejr,"convbert"),Ejr.forEach(t),XJe=r(Gx," \u2014 "),cS=n(Gx,"A",{href:!0});var Cjr=s(cS);zJe=r(Cjr,"ConvBertTokenizer"),Cjr.forEach(t),QJe=r(Gx," or "),fS=n(Gx,"A",{href:!0});var wjr=s(fS);WJe=r(wjr,"ConvBertTokenizerFast"),wjr.forEach(t),HJe=r(Gx," (ConvBERT model)"),Gx.forEach(t),UJe=i(S),qn=n(S,"LI",{});var Ox=s(qn);qoe=n(Ox,"STRONG",{});var Ajr=s(qoe);JJe=r(Ajr,"cpm"),Ajr.forEach(t),YJe=r(Ox," \u2014 "),mS=n(Ox,"A",{href:!0});var yjr=s(mS);KJe=r(yjr,"CpmTokenizer"),yjr.forEach(t),ZJe=r(Ox," or "),gS=n(Ox,"A",{href:!0});var Ljr=s(gS);eYe=r(Ljr,"CpmTokenizerFast"),Ljr.forEach(t),oYe=r(Ox," (CPM model)"),Ox.forEach(t),rYe=i(S),pg=n(S,"LI",{});var vEe=s(pg);Noe=n(vEe,"STRONG",{});var xjr=s(Noe);tYe=r(xjr,"ctrl"),xjr.forEach(t),aYe=r(vEe," \u2014 "),hS=n(vEe,"A",{href:!0});var $jr=s(hS);nYe=r($jr,"CTRLTokenizer"),$jr.forEach(t),sYe=r(vEe," (CTRL model)"),vEe.forEach(t),lYe=i(S),Nn=n(S,"LI",{});var Vx=s(Nn);joe=n(Vx,"STRONG",{});var kjr=s(joe);iYe=r(kjr,"data2vec-text"),kjr.forEach(t),dYe=r(Vx," \u2014 "),pS=n(Vx,"A",{href:!0});var Sjr=s(pS);cYe=r(Sjr,"RobertaTokenizer"),Sjr.forEach(t),fYe=r(Vx," or "),uS=n(Vx,"A",{href:!0});var Rjr=s(uS);mYe=r(Rjr,"RobertaTokenizerFast"),Rjr.forEach(t),gYe=r(Vx," (Data2VecText model)"),Vx.forEach(t),hYe=i(S),jn=n(S,"LI",{});var Xx=s(jn);Doe=n(Xx,"STRONG",{});var Bjr=s(Doe);pYe=r(Bjr,"deberta"),Bjr.forEach(t),uYe=r(Xx," \u2014 "),_S=n(Xx,"A",{href:!0});var Pjr=s(_S);_Ye=r(Pjr,"DebertaTokenizer"),Pjr.forEach(t),bYe=r(Xx," or "),bS=n(Xx,"A",{href:!0});var Ijr=s(bS);vYe=r(Ijr,"DebertaTokenizerFast"),Ijr.forEach(t),FYe=r(Xx," (DeBERTa model)"),Xx.forEach(t),TYe=i(S),Dn=n(S,"LI",{});var zx=s(Dn);Goe=n(zx,"STRONG",{});var qjr=s(Goe);MYe=r(qjr,"deberta-v2"),qjr.forEach(t),EYe=r(zx," \u2014 "),vS=n(zx,"A",{href:!0});var Njr=s(vS);CYe=r(Njr,"DebertaV2Tokenizer"),Njr.forEach(t),wYe=r(zx," or "),FS=n(zx,"A",{href:!0});var jjr=s(FS);AYe=r(jjr,"DebertaV2TokenizerFast"),jjr.forEach(t),yYe=r(zx," (DeBERTa-v2 model)"),zx.forEach(t),LYe=i(S),Gn=n(S,"LI",{});var Qx=s(Gn);Ooe=n(Qx,"STRONG",{});var Djr=s(Ooe);xYe=r(Djr,"distilbert"),Djr.forEach(t),$Ye=r(Qx," \u2014 "),TS=n(Qx,"A",{href:!0});var Gjr=s(TS);kYe=r(Gjr,"DistilBertTokenizer"),Gjr.forEach(t),SYe=r(Qx," or "),MS=n(Qx,"A",{href:!0});var Ojr=s(MS);RYe=r(Ojr,"DistilBertTokenizerFast"),Ojr.forEach(t),BYe=r(Qx," (DistilBERT model)"),Qx.forEach(t),PYe=i(S),On=n(S,"LI",{});var Wx=s(On);Voe=n(Wx,"STRONG",{});var Vjr=s(Voe);IYe=r(Vjr,"dpr"),Vjr.forEach(t),qYe=r(Wx," \u2014 "),ES=n(Wx,"A",{href:!0});var Xjr=s(ES);NYe=r(Xjr,"DPRQuestionEncoderTokenizer"),Xjr.forEach(t),jYe=r(Wx," or "),CS=n(Wx,"A",{href:!0});var zjr=s(CS);DYe=r(zjr,"DPRQuestionEncoderTokenizerFast"),zjr.forEach(t),GYe=r(Wx," (DPR model)"),Wx.forEach(t),OYe=i(S),Vn=n(S,"LI",{});var Hx=s(Vn);Xoe=n(Hx,"STRONG",{});var Qjr=s(Xoe);VYe=r(Qjr,"electra"),Qjr.forEach(t),XYe=r(Hx," \u2014 "),wS=n(Hx,"A",{href:!0});var Wjr=s(wS);zYe=r(Wjr,"ElectraTokenizer"),Wjr.forEach(t),QYe=r(Hx," or "),AS=n(Hx,"A",{href:!0});var Hjr=s(AS);WYe=r(Hjr,"ElectraTokenizerFast"),Hjr.forEach(t),HYe=r(Hx," (ELECTRA model)"),Hx.forEach(t),UYe=i(S),ug=n(S,"LI",{});var FEe=s(ug);zoe=n(FEe,"STRONG",{});var Ujr=s(zoe);JYe=r(Ujr,"flaubert"),Ujr.forEach(t),YYe=r(FEe," \u2014 "),yS=n(FEe,"A",{href:!0});var Jjr=s(yS);KYe=r(Jjr,"FlaubertTokenizer"),Jjr.forEach(t),ZYe=r(FEe," (FlauBERT model)"),FEe.forEach(t),eKe=i(S),Xn=n(S,"LI",{});var Ux=s(Xn);Qoe=n(Ux,"STRONG",{});var Yjr=s(Qoe);oKe=r(Yjr,"fnet"),Yjr.forEach(t),rKe=r(Ux," \u2014 "),LS=n(Ux,"A",{href:!0});var Kjr=s(LS);tKe=r(Kjr,"FNetTokenizer"),Kjr.forEach(t),aKe=r(Ux," or "),xS=n(Ux,"A",{href:!0});var Zjr=s(xS);nKe=r(Zjr,"FNetTokenizerFast"),Zjr.forEach(t),sKe=r(Ux," (FNet model)"),Ux.forEach(t),lKe=i(S),_g=n(S,"LI",{});var TEe=s(_g);Woe=n(TEe,"STRONG",{});var eDr=s(Woe);iKe=r(eDr,"fsmt"),eDr.forEach(t),dKe=r(TEe," \u2014 "),$S=n(TEe,"A",{href:!0});var oDr=s($S);cKe=r(oDr,"FSMTTokenizer"),oDr.forEach(t),fKe=r(TEe," (FairSeq Machine-Translation model)"),TEe.forEach(t),mKe=i(S),zn=n(S,"LI",{});var Jx=s(zn);Hoe=n(Jx,"STRONG",{});var rDr=s(Hoe);gKe=r(rDr,"funnel"),rDr.forEach(t),hKe=r(Jx," \u2014 "),kS=n(Jx,"A",{href:!0});var tDr=s(kS);pKe=r(tDr,"FunnelTokenizer"),tDr.forEach(t),uKe=r(Jx," or "),SS=n(Jx,"A",{href:!0});var aDr=s(SS);_Ke=r(aDr,"FunnelTokenizerFast"),aDr.forEach(t),bKe=r(Jx," (Funnel Transformer model)"),Jx.forEach(t),vKe=i(S),Qn=n(S,"LI",{});var Yx=s(Qn);Uoe=n(Yx,"STRONG",{});var nDr=s(Uoe);FKe=r(nDr,"gpt2"),nDr.forEach(t),TKe=r(Yx," \u2014 "),RS=n(Yx,"A",{href:!0});var sDr=s(RS);MKe=r(sDr,"GPT2Tokenizer"),sDr.forEach(t),EKe=r(Yx," or "),BS=n(Yx,"A",{href:!0});var lDr=s(BS);CKe=r(lDr,"GPT2TokenizerFast"),lDr.forEach(t),wKe=r(Yx," (OpenAI GPT-2 model)"),Yx.forEach(t),AKe=i(S),Wn=n(S,"LI",{});var Kx=s(Wn);Joe=n(Kx,"STRONG",{});var iDr=s(Joe);yKe=r(iDr,"gpt_neo"),iDr.forEach(t),LKe=r(Kx," \u2014 "),PS=n(Kx,"A",{href:!0});var dDr=s(PS);xKe=r(dDr,"GPT2Tokenizer"),dDr.forEach(t),$Ke=r(Kx," or "),IS=n(Kx,"A",{href:!0});var cDr=s(IS);kKe=r(cDr,"GPT2TokenizerFast"),cDr.forEach(t),SKe=r(Kx," (GPT Neo model)"),Kx.forEach(t),RKe=i(S),Hn=n(S,"LI",{});var Zx=s(Hn);Yoe=n(Zx,"STRONG",{});var fDr=s(Yoe);BKe=r(fDr,"gptj"),fDr.forEach(t),PKe=r(Zx," \u2014 "),qS=n(Zx,"A",{href:!0});var mDr=s(qS);IKe=r(mDr,"GPT2Tokenizer"),mDr.forEach(t),qKe=r(Zx," or "),NS=n(Zx,"A",{href:!0});var gDr=s(NS);NKe=r(gDr,"GPT2TokenizerFast"),gDr.forEach(t),jKe=r(Zx," (GPT-J model)"),Zx.forEach(t),DKe=i(S),Un=n(S,"LI",{});var e9=s(Un);Koe=n(e9,"STRONG",{});var hDr=s(Koe);GKe=r(hDr,"herbert"),hDr.forEach(t),OKe=r(e9," \u2014 "),jS=n(e9,"A",{href:!0});var pDr=s(jS);VKe=r(pDr,"HerbertTokenizer"),pDr.forEach(t),XKe=r(e9," or "),DS=n(e9,"A",{href:!0});var uDr=s(DS);zKe=r(uDr,"HerbertTokenizerFast"),uDr.forEach(t),QKe=r(e9," (HerBERT model)"),e9.forEach(t),WKe=i(S),bg=n(S,"LI",{});var MEe=s(bg);Zoe=n(MEe,"STRONG",{});var _Dr=s(Zoe);HKe=r(_Dr,"hubert"),_Dr.forEach(t),UKe=r(MEe," \u2014 "),GS=n(MEe,"A",{href:!0});var bDr=s(GS);JKe=r(bDr,"Wav2Vec2CTCTokenizer"),bDr.forEach(t),YKe=r(MEe," (Hubert model)"),MEe.forEach(t),KKe=i(S),Jn=n(S,"LI",{});var o9=s(Jn);ere=n(o9,"STRONG",{});var vDr=s(ere);ZKe=r(vDr,"ibert"),vDr.forEach(t),eZe=r(o9," \u2014 "),OS=n(o9,"A",{href:!0});var FDr=s(OS);oZe=r(FDr,"RobertaTokenizer"),FDr.forEach(t),rZe=r(o9," or "),VS=n(o9,"A",{href:!0});var TDr=s(VS);tZe=r(TDr,"RobertaTokenizerFast"),TDr.forEach(t),aZe=r(o9," (I-BERT model)"),o9.forEach(t),nZe=i(S),Yn=n(S,"LI",{});var r9=s(Yn);ore=n(r9,"STRONG",{});var MDr=s(ore);sZe=r(MDr,"layoutlm"),MDr.forEach(t),lZe=r(r9," \u2014 "),XS=n(r9,"A",{href:!0});var EDr=s(XS);iZe=r(EDr,"LayoutLMTokenizer"),EDr.forEach(t),dZe=r(r9," or "),zS=n(r9,"A",{href:!0});var CDr=s(zS);cZe=r(CDr,"LayoutLMTokenizerFast"),CDr.forEach(t),fZe=r(r9," (LayoutLM model)"),r9.forEach(t),mZe=i(S),Kn=n(S,"LI",{});var t9=s(Kn);rre=n(t9,"STRONG",{});var wDr=s(rre);gZe=r(wDr,"layoutlmv2"),wDr.forEach(t),hZe=r(t9," \u2014 "),QS=n(t9,"A",{href:!0});var ADr=s(QS);pZe=r(ADr,"LayoutLMv2Tokenizer"),ADr.forEach(t),uZe=r(t9," or "),WS=n(t9,"A",{href:!0});var yDr=s(WS);_Ze=r(yDr,"LayoutLMv2TokenizerFast"),yDr.forEach(t),bZe=r(t9," (LayoutLMv2 model)"),t9.forEach(t),vZe=i(S),Zn=n(S,"LI",{});var a9=s(Zn);tre=n(a9,"STRONG",{});var LDr=s(tre);FZe=r(LDr,"layoutxlm"),LDr.forEach(t),TZe=r(a9," \u2014 "),HS=n(a9,"A",{href:!0});var xDr=s(HS);MZe=r(xDr,"LayoutXLMTokenizer"),xDr.forEach(t),EZe=r(a9," or "),US=n(a9,"A",{href:!0});var $Dr=s(US);CZe=r($Dr,"LayoutXLMTokenizerFast"),$Dr.forEach(t),wZe=r(a9," (LayoutXLM model)"),a9.forEach(t),AZe=i(S),es=n(S,"LI",{});var n9=s(es);are=n(n9,"STRONG",{});var kDr=s(are);yZe=r(kDr,"led"),kDr.forEach(t),LZe=r(n9," \u2014 "),JS=n(n9,"A",{href:!0});var SDr=s(JS);xZe=r(SDr,"LEDTokenizer"),SDr.forEach(t),$Ze=r(n9," or "),YS=n(n9,"A",{href:!0});var RDr=s(YS);kZe=r(RDr,"LEDTokenizerFast"),RDr.forEach(t),SZe=r(n9," (LED model)"),n9.forEach(t),RZe=i(S),os=n(S,"LI",{});var s9=s(os);nre=n(s9,"STRONG",{});var BDr=s(nre);BZe=r(BDr,"longformer"),BDr.forEach(t),PZe=r(s9," \u2014 "),KS=n(s9,"A",{href:!0});var PDr=s(KS);IZe=r(PDr,"LongformerTokenizer"),PDr.forEach(t),qZe=r(s9," or "),ZS=n(s9,"A",{href:!0});var IDr=s(ZS);NZe=r(IDr,"LongformerTokenizerFast"),IDr.forEach(t),jZe=r(s9," (Longformer model)"),s9.forEach(t),DZe=i(S),vg=n(S,"LI",{});var EEe=s(vg);sre=n(EEe,"STRONG",{});var qDr=s(sre);GZe=r(qDr,"luke"),qDr.forEach(t),OZe=r(EEe," \u2014 "),eR=n(EEe,"A",{href:!0});var NDr=s(eR);VZe=r(NDr,"LukeTokenizer"),NDr.forEach(t),XZe=r(EEe," (LUKE model)"),EEe.forEach(t),zZe=i(S),rs=n(S,"LI",{});var l9=s(rs);lre=n(l9,"STRONG",{});var jDr=s(lre);QZe=r(jDr,"lxmert"),jDr.forEach(t),WZe=r(l9," \u2014 "),oR=n(l9,"A",{href:!0});var DDr=s(oR);HZe=r(DDr,"LxmertTokenizer"),DDr.forEach(t),UZe=r(l9," or "),rR=n(l9,"A",{href:!0});var GDr=s(rR);JZe=r(GDr,"LxmertTokenizerFast"),GDr.forEach(t),YZe=r(l9," (LXMERT model)"),l9.forEach(t),KZe=i(S),Fg=n(S,"LI",{});var CEe=s(Fg);ire=n(CEe,"STRONG",{});var ODr=s(ire);ZZe=r(ODr,"m2m_100"),ODr.forEach(t),eeo=r(CEe," \u2014 "),tR=n(CEe,"A",{href:!0});var VDr=s(tR);oeo=r(VDr,"M2M100Tokenizer"),VDr.forEach(t),reo=r(CEe," (M2M100 model)"),CEe.forEach(t),teo=i(S),Tg=n(S,"LI",{});var wEe=s(Tg);dre=n(wEe,"STRONG",{});var XDr=s(dre);aeo=r(XDr,"marian"),XDr.forEach(t),neo=r(wEe," \u2014 "),aR=n(wEe,"A",{href:!0});var zDr=s(aR);seo=r(zDr,"MarianTokenizer"),zDr.forEach(t),leo=r(wEe," (Marian model)"),wEe.forEach(t),ieo=i(S),ts=n(S,"LI",{});var i9=s(ts);cre=n(i9,"STRONG",{});var QDr=s(cre);deo=r(QDr,"mbart"),QDr.forEach(t),ceo=r(i9," \u2014 "),nR=n(i9,"A",{href:!0});var WDr=s(nR);feo=r(WDr,"MBartTokenizer"),WDr.forEach(t),meo=r(i9," or "),sR=n(i9,"A",{href:!0});var HDr=s(sR);geo=r(HDr,"MBartTokenizerFast"),HDr.forEach(t),heo=r(i9," (mBART model)"),i9.forEach(t),peo=i(S),as=n(S,"LI",{});var d9=s(as);fre=n(d9,"STRONG",{});var UDr=s(fre);ueo=r(UDr,"mbart50"),UDr.forEach(t),_eo=r(d9," \u2014 "),lR=n(d9,"A",{href:!0});var JDr=s(lR);beo=r(JDr,"MBart50Tokenizer"),JDr.forEach(t),veo=r(d9," or "),iR=n(d9,"A",{href:!0});var YDr=s(iR);Feo=r(YDr,"MBart50TokenizerFast"),YDr.forEach(t),Teo=r(d9," (mBART-50 model)"),d9.forEach(t),Meo=i(S),ns=n(S,"LI",{});var c9=s(ns);mre=n(c9,"STRONG",{});var KDr=s(mre);Eeo=r(KDr,"megatron-bert"),KDr.forEach(t),Ceo=r(c9," \u2014 "),dR=n(c9,"A",{href:!0});var ZDr=s(dR);weo=r(ZDr,"BertTokenizer"),ZDr.forEach(t),Aeo=r(c9," or "),cR=n(c9,"A",{href:!0});var eGr=s(cR);yeo=r(eGr,"BertTokenizerFast"),eGr.forEach(t),Leo=r(c9," (MegatronBert model)"),c9.forEach(t),xeo=i(S),Mg=n(S,"LI",{});var AEe=s(Mg);gre=n(AEe,"STRONG",{});var oGr=s(gre);$eo=r(oGr,"mluke"),oGr.forEach(t),keo=r(AEe," \u2014 "),fR=n(AEe,"A",{href:!0});var rGr=s(fR);Seo=r(rGr,"MLukeTokenizer"),rGr.forEach(t),Reo=r(AEe," (mLUKE model)"),AEe.forEach(t),Beo=i(S),ss=n(S,"LI",{});var f9=s(ss);hre=n(f9,"STRONG",{});var tGr=s(hre);Peo=r(tGr,"mobilebert"),tGr.forEach(t),Ieo=r(f9," \u2014 "),mR=n(f9,"A",{href:!0});var aGr=s(mR);qeo=r(aGr,"MobileBertTokenizer"),aGr.forEach(t),Neo=r(f9," or "),gR=n(f9,"A",{href:!0});var nGr=s(gR);jeo=r(nGr,"MobileBertTokenizerFast"),nGr.forEach(t),Deo=r(f9," (MobileBERT model)"),f9.forEach(t),Geo=i(S),ls=n(S,"LI",{});var m9=s(ls);pre=n(m9,"STRONG",{});var sGr=s(pre);Oeo=r(sGr,"mpnet"),sGr.forEach(t),Veo=r(m9," \u2014 "),hR=n(m9,"A",{href:!0});var lGr=s(hR);Xeo=r(lGr,"MPNetTokenizer"),lGr.forEach(t),zeo=r(m9," or "),pR=n(m9,"A",{href:!0});var iGr=s(pR);Qeo=r(iGr,"MPNetTokenizerFast"),iGr.forEach(t),Weo=r(m9," (MPNet model)"),m9.forEach(t),Heo=i(S),is=n(S,"LI",{});var g9=s(is);ure=n(g9,"STRONG",{});var dGr=s(ure);Ueo=r(dGr,"mt5"),dGr.forEach(t),Jeo=r(g9," \u2014 "),uR=n(g9,"A",{href:!0});var cGr=s(uR);Yeo=r(cGr,"MT5Tokenizer"),cGr.forEach(t),Keo=r(g9," or "),_R=n(g9,"A",{href:!0});var fGr=s(_R);Zeo=r(fGr,"MT5TokenizerFast"),fGr.forEach(t),eoo=r(g9," (mT5 model)"),g9.forEach(t),ooo=i(S),ds=n(S,"LI",{});var h9=s(ds);_re=n(h9,"STRONG",{});var mGr=s(_re);roo=r(mGr,"nystromformer"),mGr.forEach(t),too=r(h9," \u2014 "),bR=n(h9,"A",{href:!0});var gGr=s(bR);aoo=r(gGr,"AlbertTokenizer"),gGr.forEach(t),noo=r(h9," or "),vR=n(h9,"A",{href:!0});var hGr=s(vR);soo=r(hGr,"AlbertTokenizerFast"),hGr.forEach(t),loo=r(h9," (Nystromformer model)"),h9.forEach(t),ioo=i(S),cs=n(S,"LI",{});var p9=s(cs);bre=n(p9,"STRONG",{});var pGr=s(bre);doo=r(pGr,"openai-gpt"),pGr.forEach(t),coo=r(p9," \u2014 "),FR=n(p9,"A",{href:!0});var uGr=s(FR);foo=r(uGr,"OpenAIGPTTokenizer"),uGr.forEach(t),moo=r(p9," or "),TR=n(p9,"A",{href:!0});var _Gr=s(TR);goo=r(_Gr,"OpenAIGPTTokenizerFast"),_Gr.forEach(t),hoo=r(p9," (OpenAI GPT model)"),p9.forEach(t),poo=i(S),fs=n(S,"LI",{});var u9=s(fs);vre=n(u9,"STRONG",{});var bGr=s(vre);uoo=r(bGr,"pegasus"),bGr.forEach(t),_oo=r(u9," \u2014 "),MR=n(u9,"A",{href:!0});var vGr=s(MR);boo=r(vGr,"PegasusTokenizer"),vGr.forEach(t),voo=r(u9," or "),ER=n(u9,"A",{href:!0});var FGr=s(ER);Foo=r(FGr,"PegasusTokenizerFast"),FGr.forEach(t),Too=r(u9," (Pegasus model)"),u9.forEach(t),Moo=i(S),Eg=n(S,"LI",{});var yEe=s(Eg);Fre=n(yEe,"STRONG",{});var TGr=s(Fre);Eoo=r(TGr,"perceiver"),TGr.forEach(t),Coo=r(yEe," \u2014 "),CR=n(yEe,"A",{href:!0});var MGr=s(CR);woo=r(MGr,"PerceiverTokenizer"),MGr.forEach(t),Aoo=r(yEe," (Perceiver model)"),yEe.forEach(t),yoo=i(S),Cg=n(S,"LI",{});var LEe=s(Cg);Tre=n(LEe,"STRONG",{});var EGr=s(Tre);Loo=r(EGr,"phobert"),EGr.forEach(t),xoo=r(LEe," \u2014 "),wR=n(LEe,"A",{href:!0});var CGr=s(wR);$oo=r(CGr,"PhobertTokenizer"),CGr.forEach(t),koo=r(LEe," (PhoBERT model)"),LEe.forEach(t),Soo=i(S),wg=n(S,"LI",{});var xEe=s(wg);Mre=n(xEe,"STRONG",{});var wGr=s(Mre);Roo=r(wGr,"plbart"),wGr.forEach(t),Boo=r(xEe," \u2014 "),AR=n(xEe,"A",{href:!0});var AGr=s(AR);Poo=r(AGr,"PLBartTokenizer"),AGr.forEach(t),Ioo=r(xEe," (PLBart model)"),xEe.forEach(t),qoo=i(S),Ag=n(S,"LI",{});var $Ee=s(Ag);Ere=n($Ee,"STRONG",{});var yGr=s(Ere);Noo=r(yGr,"prophetnet"),yGr.forEach(t),joo=r($Ee," \u2014 "),yR=n($Ee,"A",{href:!0});var LGr=s(yR);Doo=r(LGr,"ProphetNetTokenizer"),LGr.forEach(t),Goo=r($Ee," (ProphetNet model)"),$Ee.forEach(t),Ooo=i(S),ms=n(S,"LI",{});var _9=s(ms);Cre=n(_9,"STRONG",{});var xGr=s(Cre);Voo=r(xGr,"qdqbert"),xGr.forEach(t),Xoo=r(_9," \u2014 "),LR=n(_9,"A",{href:!0});var $Gr=s(LR);zoo=r($Gr,"BertTokenizer"),$Gr.forEach(t),Qoo=r(_9," or "),xR=n(_9,"A",{href:!0});var kGr=s(xR);Woo=r(kGr,"BertTokenizerFast"),kGr.forEach(t),Hoo=r(_9," (QDQBert model)"),_9.forEach(t),Uoo=i(S),yg=n(S,"LI",{});var kEe=s(yg);wre=n(kEe,"STRONG",{});var SGr=s(wre);Joo=r(SGr,"rag"),SGr.forEach(t),Yoo=r(kEe," \u2014 "),$R=n(kEe,"A",{href:!0});var RGr=s($R);Koo=r(RGr,"RagTokenizer"),RGr.forEach(t),Zoo=r(kEe," (RAG model)"),kEe.forEach(t),ero=i(S),gs=n(S,"LI",{});var b9=s(gs);Are=n(b9,"STRONG",{});var BGr=s(Are);oro=r(BGr,"realm"),BGr.forEach(t),rro=r(b9," \u2014 "),kR=n(b9,"A",{href:!0});var PGr=s(kR);tro=r(PGr,"RealmTokenizer"),PGr.forEach(t),aro=r(b9," or "),SR=n(b9,"A",{href:!0});var IGr=s(SR);nro=r(IGr,"RealmTokenizerFast"),IGr.forEach(t),sro=r(b9," (Realm model)"),b9.forEach(t),lro=i(S),hs=n(S,"LI",{});var v9=s(hs);yre=n(v9,"STRONG",{});var qGr=s(yre);iro=r(qGr,"reformer"),qGr.forEach(t),dro=r(v9," \u2014 "),RR=n(v9,"A",{href:!0});var NGr=s(RR);cro=r(NGr,"ReformerTokenizer"),NGr.forEach(t),fro=r(v9," or "),BR=n(v9,"A",{href:!0});var jGr=s(BR);mro=r(jGr,"ReformerTokenizerFast"),jGr.forEach(t),gro=r(v9," (Reformer model)"),v9.forEach(t),hro=i(S),ps=n(S,"LI",{});var F9=s(ps);Lre=n(F9,"STRONG",{});var DGr=s(Lre);pro=r(DGr,"rembert"),DGr.forEach(t),uro=r(F9," \u2014 "),PR=n(F9,"A",{href:!0});var GGr=s(PR);_ro=r(GGr,"RemBertTokenizer"),GGr.forEach(t),bro=r(F9," or "),IR=n(F9,"A",{href:!0});var OGr=s(IR);vro=r(OGr,"RemBertTokenizerFast"),OGr.forEach(t),Fro=r(F9," (RemBERT model)"),F9.forEach(t),Tro=i(S),us=n(S,"LI",{});var T9=s(us);xre=n(T9,"STRONG",{});var VGr=s(xre);Mro=r(VGr,"retribert"),VGr.forEach(t),Ero=r(T9," \u2014 "),qR=n(T9,"A",{href:!0});var XGr=s(qR);Cro=r(XGr,"RetriBertTokenizer"),XGr.forEach(t),wro=r(T9," or "),NR=n(T9,"A",{href:!0});var zGr=s(NR);Aro=r(zGr,"RetriBertTokenizerFast"),zGr.forEach(t),yro=r(T9," (RetriBERT model)"),T9.forEach(t),Lro=i(S),_s=n(S,"LI",{});var M9=s(_s);$re=n(M9,"STRONG",{});var QGr=s($re);xro=r(QGr,"roberta"),QGr.forEach(t),$ro=r(M9," \u2014 "),jR=n(M9,"A",{href:!0});var WGr=s(jR);kro=r(WGr,"RobertaTokenizer"),WGr.forEach(t),Sro=r(M9," or "),DR=n(M9,"A",{href:!0});var HGr=s(DR);Rro=r(HGr,"RobertaTokenizerFast"),HGr.forEach(t),Bro=r(M9," (RoBERTa model)"),M9.forEach(t),Pro=i(S),bs=n(S,"LI",{});var E9=s(bs);kre=n(E9,"STRONG",{});var UGr=s(kre);Iro=r(UGr,"roformer"),UGr.forEach(t),qro=r(E9," \u2014 "),GR=n(E9,"A",{href:!0});var JGr=s(GR);Nro=r(JGr,"RoFormerTokenizer"),JGr.forEach(t),jro=r(E9," or "),OR=n(E9,"A",{href:!0});var YGr=s(OR);Dro=r(YGr,"RoFormerTokenizerFast"),YGr.forEach(t),Gro=r(E9," (RoFormer model)"),E9.forEach(t),Oro=i(S),Lg=n(S,"LI",{});var SEe=s(Lg);Sre=n(SEe,"STRONG",{});var KGr=s(Sre);Vro=r(KGr,"speech_to_text"),KGr.forEach(t),Xro=r(SEe," \u2014 "),VR=n(SEe,"A",{href:!0});var ZGr=s(VR);zro=r(ZGr,"Speech2TextTokenizer"),ZGr.forEach(t),Qro=r(SEe," (Speech2Text model)"),SEe.forEach(t),Wro=i(S),xg=n(S,"LI",{});var REe=s(xg);Rre=n(REe,"STRONG",{});var eOr=s(Rre);Hro=r(eOr,"speech_to_text_2"),eOr.forEach(t),Uro=r(REe," \u2014 "),XR=n(REe,"A",{href:!0});var oOr=s(XR);Jro=r(oOr,"Speech2Text2Tokenizer"),oOr.forEach(t),Yro=r(REe," (Speech2Text2 model)"),REe.forEach(t),Kro=i(S),vs=n(S,"LI",{});var C9=s(vs);Bre=n(C9,"STRONG",{});var rOr=s(Bre);Zro=r(rOr,"splinter"),rOr.forEach(t),eto=r(C9," \u2014 "),zR=n(C9,"A",{href:!0});var tOr=s(zR);oto=r(tOr,"SplinterTokenizer"),tOr.forEach(t),rto=r(C9," or "),QR=n(C9,"A",{href:!0});var aOr=s(QR);tto=r(aOr,"SplinterTokenizerFast"),aOr.forEach(t),ato=r(C9," (Splinter model)"),C9.forEach(t),nto=i(S),Fs=n(S,"LI",{});var w9=s(Fs);Pre=n(w9,"STRONG",{});var nOr=s(Pre);sto=r(nOr,"squeezebert"),nOr.forEach(t),lto=r(w9," \u2014 "),WR=n(w9,"A",{href:!0});var sOr=s(WR);ito=r(sOr,"SqueezeBertTokenizer"),sOr.forEach(t),dto=r(w9," or "),HR=n(w9,"A",{href:!0});var lOr=s(HR);cto=r(lOr,"SqueezeBertTokenizerFast"),lOr.forEach(t),fto=r(w9," (SqueezeBERT model)"),w9.forEach(t),mto=i(S),Ts=n(S,"LI",{});var A9=s(Ts);Ire=n(A9,"STRONG",{});var iOr=s(Ire);gto=r(iOr,"t5"),iOr.forEach(t),hto=r(A9," \u2014 "),UR=n(A9,"A",{href:!0});var dOr=s(UR);pto=r(dOr,"T5Tokenizer"),dOr.forEach(t),uto=r(A9," or "),JR=n(A9,"A",{href:!0});var cOr=s(JR);_to=r(cOr,"T5TokenizerFast"),cOr.forEach(t),bto=r(A9," (T5 model)"),A9.forEach(t),vto=i(S),$g=n(S,"LI",{});var BEe=s($g);qre=n(BEe,"STRONG",{});var fOr=s(qre);Fto=r(fOr,"tapas"),fOr.forEach(t),Tto=r(BEe," \u2014 "),YR=n(BEe,"A",{href:!0});var mOr=s(YR);Mto=r(mOr,"TapasTokenizer"),mOr.forEach(t),Eto=r(BEe," (TAPAS model)"),BEe.forEach(t),Cto=i(S),kg=n(S,"LI",{});var PEe=s(kg);Nre=n(PEe,"STRONG",{});var gOr=s(Nre);wto=r(gOr,"tapex"),gOr.forEach(t),Ato=r(PEe," \u2014 "),KR=n(PEe,"A",{href:!0});var hOr=s(KR);yto=r(hOr,"TapexTokenizer"),hOr.forEach(t),Lto=r(PEe," (TAPEX model)"),PEe.forEach(t),xto=i(S),Sg=n(S,"LI",{});var IEe=s(Sg);jre=n(IEe,"STRONG",{});var pOr=s(jre);$to=r(pOr,"transfo-xl"),pOr.forEach(t),kto=r(IEe," \u2014 "),ZR=n(IEe,"A",{href:!0});var uOr=s(ZR);Sto=r(uOr,"TransfoXLTokenizer"),uOr.forEach(t),Rto=r(IEe," (Transformer-XL model)"),IEe.forEach(t),Bto=i(S),Ms=n(S,"LI",{});var y9=s(Ms);Dre=n(y9,"STRONG",{});var _Or=s(Dre);Pto=r(_Or,"visual_bert"),_Or.forEach(t),Ito=r(y9," \u2014 "),eB=n(y9,"A",{href:!0});var bOr=s(eB);qto=r(bOr,"BertTokenizer"),bOr.forEach(t),Nto=r(y9," or "),oB=n(y9,"A",{href:!0});var vOr=s(oB);jto=r(vOr,"BertTokenizerFast"),vOr.forEach(t),Dto=r(y9," (VisualBert model)"),y9.forEach(t),Gto=i(S),Rg=n(S,"LI",{});var qEe=s(Rg);Gre=n(qEe,"STRONG",{});var FOr=s(Gre);Oto=r(FOr,"wav2vec2"),FOr.forEach(t),Vto=r(qEe," \u2014 "),rB=n(qEe,"A",{href:!0});var TOr=s(rB);Xto=r(TOr,"Wav2Vec2CTCTokenizer"),TOr.forEach(t),zto=r(qEe," (Wav2Vec2 model)"),qEe.forEach(t),Qto=i(S),Bg=n(S,"LI",{});var NEe=s(Bg);Ore=n(NEe,"STRONG",{});var MOr=s(Ore);Wto=r(MOr,"wav2vec2_phoneme"),MOr.forEach(t),Hto=r(NEe," \u2014 "),tB=n(NEe,"A",{href:!0});var EOr=s(tB);Uto=r(EOr,"Wav2Vec2PhonemeCTCTokenizer"),EOr.forEach(t),Jto=r(NEe," (Wav2Vec2Phoneme model)"),NEe.forEach(t),Yto=i(S),Es=n(S,"LI",{});var L9=s(Es);Vre=n(L9,"STRONG",{});var COr=s(Vre);Kto=r(COr,"xglm"),COr.forEach(t),Zto=r(L9," \u2014 "),aB=n(L9,"A",{href:!0});var wOr=s(aB);eao=r(wOr,"XGLMTokenizer"),wOr.forEach(t),oao=r(L9," or "),nB=n(L9,"A",{href:!0});var AOr=s(nB);rao=r(AOr,"XGLMTokenizerFast"),AOr.forEach(t),tao=r(L9," (XGLM model)"),L9.forEach(t),aao=i(S),Pg=n(S,"LI",{});var jEe=s(Pg);Xre=n(jEe,"STRONG",{});var yOr=s(Xre);nao=r(yOr,"xlm"),yOr.forEach(t),sao=r(jEe," \u2014 "),sB=n(jEe,"A",{href:!0});var LOr=s(sB);lao=r(LOr,"XLMTokenizer"),LOr.forEach(t),iao=r(jEe," (XLM model)"),jEe.forEach(t),dao=i(S),Ig=n(S,"LI",{});var DEe=s(Ig);zre=n(DEe,"STRONG",{});var xOr=s(zre);cao=r(xOr,"xlm-prophetnet"),xOr.forEach(t),fao=r(DEe," \u2014 "),lB=n(DEe,"A",{href:!0});var $Or=s(lB);mao=r($Or,"XLMProphetNetTokenizer"),$Or.forEach(t),gao=r(DEe," (XLMProphetNet model)"),DEe.forEach(t),hao=i(S),Cs=n(S,"LI",{});var x9=s(Cs);Qre=n(x9,"STRONG",{});var kOr=s(Qre);pao=r(kOr,"xlm-roberta"),kOr.forEach(t),uao=r(x9," \u2014 "),iB=n(x9,"A",{href:!0});var SOr=s(iB);_ao=r(SOr,"XLMRobertaTokenizer"),SOr.forEach(t),bao=r(x9," or "),dB=n(x9,"A",{href:!0});var ROr=s(dB);vao=r(ROr,"XLMRobertaTokenizerFast"),ROr.forEach(t),Fao=r(x9," (XLM-RoBERTa model)"),x9.forEach(t),Tao=i(S),ws=n(S,"LI",{});var $9=s(ws);Wre=n($9,"STRONG",{});var BOr=s(Wre);Mao=r(BOr,"xlm-roberta-xl"),BOr.forEach(t),Eao=r($9," \u2014 "),cB=n($9,"A",{href:!0});var POr=s(cB);Cao=r(POr,"RobertaTokenizer"),POr.forEach(t),wao=r($9," or "),fB=n($9,"A",{href:!0});var IOr=s(fB);Aao=r(IOr,"RobertaTokenizerFast"),IOr.forEach(t),yao=r($9," (XLM-RoBERTa-XL model)"),$9.forEach(t),Lao=i(S),As=n(S,"LI",{});var k9=s(As);Hre=n(k9,"STRONG",{});var qOr=s(Hre);xao=r(qOr,"xlnet"),qOr.forEach(t),$ao=r(k9," \u2014 "),mB=n(k9,"A",{href:!0});var NOr=s(mB);kao=r(NOr,"XLNetTokenizer"),NOr.forEach(t),Sao=r(k9," or "),gB=n(k9,"A",{href:!0});var jOr=s(gB);Rao=r(jOr,"XLNetTokenizerFast"),jOr.forEach(t),Bao=r(k9," (XLNet model)"),k9.forEach(t),Pao=i(S),ys=n(S,"LI",{});var S9=s(ys);Ure=n(S9,"STRONG",{});var DOr=s(Ure);Iao=r(DOr,"yoso"),DOr.forEach(t),qao=r(S9," \u2014 "),hB=n(S9,"A",{href:!0});var GOr=s(hB);Nao=r(GOr,"AlbertTokenizer"),GOr.forEach(t),jao=r(S9," or "),pB=n(S9,"A",{href:!0});var OOr=s(pB);Dao=r(OOr,"AlbertTokenizerFast"),OOr.forEach(t),Gao=r(S9," (YOSO model)"),S9.forEach(t),S.forEach(t),Oao=i(Ss),T(qg.$$.fragment,Ss),Ss.forEach(t),Vao=i(ks),Ng=n(ks,"DIV",{class:!0});var CIe=s(Ng);T(N0.$$.fragment,CIe),Xao=i(CIe),Jre=n(CIe,"P",{});var VOr=s(Jre);zao=r(VOr,"Register a new tokenizer in this mapping."),VOr.forEach(t),CIe.forEach(t),ks.forEach(t),yBe=i(f),mi=n(f,"H2",{class:!0});var wIe=s(mi);jg=n(wIe,"A",{id:!0,class:!0,href:!0});var XOr=s(jg);Yre=n(XOr,"SPAN",{});var zOr=s(Yre);T(j0.$$.fragment,zOr),zOr.forEach(t),XOr.forEach(t),Qao=i(wIe),Kre=n(wIe,"SPAN",{});var QOr=s(Kre);Wao=r(QOr,"AutoFeatureExtractor"),QOr.forEach(t),wIe.forEach(t),LBe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(D0.$$.fragment,Rs),Hao=i(Rs),G0=n(Rs,"P",{});var AIe=s(G0);Uao=r(AIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uB=n(AIe,"A",{href:!0});var WOr=s(uB);Jao=r(WOr,"AutoFeatureExtractor.from_pretrained()"),WOr.forEach(t),Yao=r(AIe," class method."),AIe.forEach(t),Kao=i(Rs),O0=n(Rs,"P",{});var yIe=s(O0);Zao=r(yIe,"This class cannot be instantiated directly using "),Zre=n(yIe,"CODE",{});var HOr=s(Zre);eno=r(HOr,"__init__()"),HOr.forEach(t),ono=r(yIe," (throws an error)."),yIe.forEach(t),rno=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(V0.$$.fragment,Ht),tno=i(Ht),ete=n(Ht,"P",{});var UOr=s(ete);ano=r(UOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UOr.forEach(t),nno=i(Ht),Ma=n(Ht,"P",{});var xw=s(Ma);sno=r(xw,"The feature extractor class to instantiate is selected based on the "),ote=n(xw,"CODE",{});var JOr=s(ote);lno=r(JOr,"model_type"),JOr.forEach(t),ino=r(xw,` property of the config object
(either passed as an argument or loaded from `),rte=n(xw,"CODE",{});var YOr=s(rte);dno=r(YOr,"pretrained_model_name_or_path"),YOr.forEach(t),cno=r(xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tte=n(xw,"CODE",{});var KOr=s(tte);fno=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),mno=r(xw,":"),xw.forEach(t),gno=i(Ht),te=n(Ht,"UL",{});var se=s(te);Dg=n(se,"LI",{});var GEe=s(Dg);ate=n(GEe,"STRONG",{});var ZOr=s(ate);hno=r(ZOr,"beit"),ZOr.forEach(t),pno=r(GEe," \u2014 "),_B=n(GEe,"A",{href:!0});var eVr=s(_B);uno=r(eVr,"BeitFeatureExtractor"),eVr.forEach(t),_no=r(GEe," (BEiT model)"),GEe.forEach(t),bno=i(se),Gg=n(se,"LI",{});var OEe=s(Gg);nte=n(OEe,"STRONG",{});var oVr=s(nte);vno=r(oVr,"clip"),oVr.forEach(t),Fno=r(OEe," \u2014 "),bB=n(OEe,"A",{href:!0});var rVr=s(bB);Tno=r(rVr,"CLIPFeatureExtractor"),rVr.forEach(t),Mno=r(OEe," (CLIP model)"),OEe.forEach(t),Eno=i(se),Og=n(se,"LI",{});var VEe=s(Og);ste=n(VEe,"STRONG",{});var tVr=s(ste);Cno=r(tVr,"convnext"),tVr.forEach(t),wno=r(VEe," \u2014 "),vB=n(VEe,"A",{href:!0});var aVr=s(vB);Ano=r(aVr,"ConvNextFeatureExtractor"),aVr.forEach(t),yno=r(VEe," (ConvNext model)"),VEe.forEach(t),Lno=i(se),Vg=n(se,"LI",{});var XEe=s(Vg);lte=n(XEe,"STRONG",{});var nVr=s(lte);xno=r(nVr,"data2vec-audio"),nVr.forEach(t),$no=r(XEe," \u2014 "),FB=n(XEe,"A",{href:!0});var sVr=s(FB);kno=r(sVr,"Wav2Vec2FeatureExtractor"),sVr.forEach(t),Sno=r(XEe," (Data2VecAudio model)"),XEe.forEach(t),Rno=i(se),Xg=n(se,"LI",{});var zEe=s(Xg);ite=n(zEe,"STRONG",{});var lVr=s(ite);Bno=r(lVr,"data2vec-vision"),lVr.forEach(t),Pno=r(zEe," \u2014 "),TB=n(zEe,"A",{href:!0});var iVr=s(TB);Ino=r(iVr,"BeitFeatureExtractor"),iVr.forEach(t),qno=r(zEe," (Data2VecVision model)"),zEe.forEach(t),Nno=i(se),zg=n(se,"LI",{});var QEe=s(zg);dte=n(QEe,"STRONG",{});var dVr=s(dte);jno=r(dVr,"deit"),dVr.forEach(t),Dno=r(QEe," \u2014 "),MB=n(QEe,"A",{href:!0});var cVr=s(MB);Gno=r(cVr,"DeiTFeatureExtractor"),cVr.forEach(t),Ono=r(QEe," (DeiT model)"),QEe.forEach(t),Vno=i(se),Qg=n(se,"LI",{});var WEe=s(Qg);cte=n(WEe,"STRONG",{});var fVr=s(cte);Xno=r(fVr,"detr"),fVr.forEach(t),zno=r(WEe," \u2014 "),EB=n(WEe,"A",{href:!0});var mVr=s(EB);Qno=r(mVr,"DetrFeatureExtractor"),mVr.forEach(t),Wno=r(WEe," (DETR model)"),WEe.forEach(t),Hno=i(se),Wg=n(se,"LI",{});var HEe=s(Wg);fte=n(HEe,"STRONG",{});var gVr=s(fte);Uno=r(gVr,"dpt"),gVr.forEach(t),Jno=r(HEe," \u2014 "),CB=n(HEe,"A",{href:!0});var hVr=s(CB);Yno=r(hVr,"DPTFeatureExtractor"),hVr.forEach(t),Kno=r(HEe," (DPT model)"),HEe.forEach(t),Zno=i(se),Hg=n(se,"LI",{});var UEe=s(Hg);mte=n(UEe,"STRONG",{});var pVr=s(mte);eso=r(pVr,"glpn"),pVr.forEach(t),oso=r(UEe," \u2014 "),wB=n(UEe,"A",{href:!0});var uVr=s(wB);rso=r(uVr,"GLPNFeatureExtractor"),uVr.forEach(t),tso=r(UEe," (GLPN model)"),UEe.forEach(t),aso=i(se),Ug=n(se,"LI",{});var JEe=s(Ug);gte=n(JEe,"STRONG",{});var _Vr=s(gte);nso=r(_Vr,"hubert"),_Vr.forEach(t),sso=r(JEe," \u2014 "),AB=n(JEe,"A",{href:!0});var bVr=s(AB);lso=r(bVr,"Wav2Vec2FeatureExtractor"),bVr.forEach(t),iso=r(JEe," (Hubert model)"),JEe.forEach(t),dso=i(se),Jg=n(se,"LI",{});var YEe=s(Jg);hte=n(YEe,"STRONG",{});var vVr=s(hte);cso=r(vVr,"layoutlmv2"),vVr.forEach(t),fso=r(YEe," \u2014 "),yB=n(YEe,"A",{href:!0});var FVr=s(yB);mso=r(FVr,"LayoutLMv2FeatureExtractor"),FVr.forEach(t),gso=r(YEe," (LayoutLMv2 model)"),YEe.forEach(t),hso=i(se),Yg=n(se,"LI",{});var KEe=s(Yg);pte=n(KEe,"STRONG",{});var TVr=s(pte);pso=r(TVr,"maskformer"),TVr.forEach(t),uso=r(KEe," \u2014 "),LB=n(KEe,"A",{href:!0});var MVr=s(LB);_so=r(MVr,"MaskFormerFeatureExtractor"),MVr.forEach(t),bso=r(KEe," (MaskFormer model)"),KEe.forEach(t),vso=i(se),Kg=n(se,"LI",{});var ZEe=s(Kg);ute=n(ZEe,"STRONG",{});var EVr=s(ute);Fso=r(EVr,"perceiver"),EVr.forEach(t),Tso=r(ZEe," \u2014 "),xB=n(ZEe,"A",{href:!0});var CVr=s(xB);Mso=r(CVr,"PerceiverFeatureExtractor"),CVr.forEach(t),Eso=r(ZEe," (Perceiver model)"),ZEe.forEach(t),Cso=i(se),Zg=n(se,"LI",{});var eCe=s(Zg);_te=n(eCe,"STRONG",{});var wVr=s(_te);wso=r(wVr,"poolformer"),wVr.forEach(t),Aso=r(eCe," \u2014 "),$B=n(eCe,"A",{href:!0});var AVr=s($B);yso=r(AVr,"PoolFormerFeatureExtractor"),AVr.forEach(t),Lso=r(eCe," (PoolFormer model)"),eCe.forEach(t),xso=i(se),eh=n(se,"LI",{});var oCe=s(eh);bte=n(oCe,"STRONG",{});var yVr=s(bte);$so=r(yVr,"regnet"),yVr.forEach(t),kso=r(oCe," \u2014 "),kB=n(oCe,"A",{href:!0});var LVr=s(kB);Sso=r(LVr,"ConvNextFeatureExtractor"),LVr.forEach(t),Rso=r(oCe," (RegNet model)"),oCe.forEach(t),Bso=i(se),oh=n(se,"LI",{});var rCe=s(oh);vte=n(rCe,"STRONG",{});var xVr=s(vte);Pso=r(xVr,"resnet"),xVr.forEach(t),Iso=r(rCe," \u2014 "),SB=n(rCe,"A",{href:!0});var $Vr=s(SB);qso=r($Vr,"ConvNextFeatureExtractor"),$Vr.forEach(t),Nso=r(rCe," (ResNet model)"),rCe.forEach(t),jso=i(se),rh=n(se,"LI",{});var tCe=s(rh);Fte=n(tCe,"STRONG",{});var kVr=s(Fte);Dso=r(kVr,"segformer"),kVr.forEach(t),Gso=r(tCe," \u2014 "),RB=n(tCe,"A",{href:!0});var SVr=s(RB);Oso=r(SVr,"SegformerFeatureExtractor"),SVr.forEach(t),Vso=r(tCe," (SegFormer model)"),tCe.forEach(t),Xso=i(se),th=n(se,"LI",{});var aCe=s(th);Tte=n(aCe,"STRONG",{});var RVr=s(Tte);zso=r(RVr,"speech_to_text"),RVr.forEach(t),Qso=r(aCe," \u2014 "),BB=n(aCe,"A",{href:!0});var BVr=s(BB);Wso=r(BVr,"Speech2TextFeatureExtractor"),BVr.forEach(t),Hso=r(aCe," (Speech2Text model)"),aCe.forEach(t),Uso=i(se),ah=n(se,"LI",{});var nCe=s(ah);Mte=n(nCe,"STRONG",{});var PVr=s(Mte);Jso=r(PVr,"swin"),PVr.forEach(t),Yso=r(nCe," \u2014 "),PB=n(nCe,"A",{href:!0});var IVr=s(PB);Kso=r(IVr,"ViTFeatureExtractor"),IVr.forEach(t),Zso=r(nCe," (Swin model)"),nCe.forEach(t),elo=i(se),nh=n(se,"LI",{});var sCe=s(nh);Ete=n(sCe,"STRONG",{});var qVr=s(Ete);olo=r(qVr,"van"),qVr.forEach(t),rlo=r(sCe," \u2014 "),IB=n(sCe,"A",{href:!0});var NVr=s(IB);tlo=r(NVr,"ConvNextFeatureExtractor"),NVr.forEach(t),alo=r(sCe," (VAN model)"),sCe.forEach(t),nlo=i(se),sh=n(se,"LI",{});var lCe=s(sh);Cte=n(lCe,"STRONG",{});var jVr=s(Cte);slo=r(jVr,"vit"),jVr.forEach(t),llo=r(lCe," \u2014 "),qB=n(lCe,"A",{href:!0});var DVr=s(qB);ilo=r(DVr,"ViTFeatureExtractor"),DVr.forEach(t),dlo=r(lCe," (ViT model)"),lCe.forEach(t),clo=i(se),lh=n(se,"LI",{});var iCe=s(lh);wte=n(iCe,"STRONG",{});var GVr=s(wte);flo=r(GVr,"vit_mae"),GVr.forEach(t),mlo=r(iCe," \u2014 "),NB=n(iCe,"A",{href:!0});var OVr=s(NB);glo=r(OVr,"ViTFeatureExtractor"),OVr.forEach(t),hlo=r(iCe," (ViTMAE model)"),iCe.forEach(t),plo=i(se),ih=n(se,"LI",{});var dCe=s(ih);Ate=n(dCe,"STRONG",{});var VVr=s(Ate);ulo=r(VVr,"wav2vec2"),VVr.forEach(t),_lo=r(dCe," \u2014 "),jB=n(dCe,"A",{href:!0});var XVr=s(jB);blo=r(XVr,"Wav2Vec2FeatureExtractor"),XVr.forEach(t),vlo=r(dCe," (Wav2Vec2 model)"),dCe.forEach(t),Flo=i(se),dh=n(se,"LI",{});var cCe=s(dh);yte=n(cCe,"STRONG",{});var zVr=s(yte);Tlo=r(zVr,"yolos"),zVr.forEach(t),Mlo=r(cCe," \u2014 "),DB=n(cCe,"A",{href:!0});var QVr=s(DB);Elo=r(QVr,"YolosFeatureExtractor"),QVr.forEach(t),Clo=r(cCe," (YOLOS model)"),cCe.forEach(t),se.forEach(t),wlo=i(Ht),T(ch.$$.fragment,Ht),Alo=i(Ht),T(fh.$$.fragment,Ht),Ht.forEach(t),ylo=i(Rs),mh=n(Rs,"DIV",{class:!0});var LIe=s(mh);T(X0.$$.fragment,LIe),Llo=i(LIe),Lte=n(LIe,"P",{});var WVr=s(Lte);xlo=r(WVr,"Register a new feature extractor for this class."),WVr.forEach(t),LIe.forEach(t),Rs.forEach(t),xBe=i(f),gi=n(f,"H2",{class:!0});var xIe=s(gi);gh=n(xIe,"A",{id:!0,class:!0,href:!0});var HVr=s(gh);xte=n(HVr,"SPAN",{});var UVr=s(xte);T(z0.$$.fragment,UVr),UVr.forEach(t),HVr.forEach(t),$lo=i(xIe),$te=n(xIe,"SPAN",{});var JVr=s($te);klo=r(JVr,"AutoProcessor"),JVr.forEach(t),xIe.forEach(t),$Be=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(Q0.$$.fragment,Bs),Slo=i(Bs),W0=n(Bs,"P",{});var $Ie=s(W0);Rlo=r($Ie,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=n($Ie,"A",{href:!0});var YVr=s(GB);Blo=r(YVr,"AutoProcessor.from_pretrained()"),YVr.forEach(t),Plo=r($Ie," class method."),$Ie.forEach(t),Ilo=i(Bs),H0=n(Bs,"P",{});var kIe=s(H0);qlo=r(kIe,"This class cannot be instantiated directly using "),kte=n(kIe,"CODE",{});var KVr=s(kte);Nlo=r(KVr,"__init__()"),KVr.forEach(t),jlo=r(kIe," (throws an error)."),kIe.forEach(t),Dlo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(U0.$$.fragment,Ut),Glo=i(Ut),Ste=n(Ut,"P",{});var ZVr=s(Ste);Olo=r(ZVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ZVr.forEach(t),Vlo=i(Ut),hi=n(Ut,"P",{});var uY=s(hi);Xlo=r(uY,"The processor class to instantiate is selected based on the "),Rte=n(uY,"CODE",{});var eXr=s(Rte);zlo=r(eXr,"model_type"),eXr.forEach(t),Qlo=r(uY,` property of the config object (either
passed as an argument or loaded from `),Bte=n(uY,"CODE",{});var oXr=s(Bte);Wlo=r(oXr,"pretrained_model_name_or_path"),oXr.forEach(t),Hlo=r(uY," if possible):"),uY.forEach(t),Ulo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);hh=n(Fe,"LI",{});var fCe=s(hh);Pte=n(fCe,"STRONG",{});var rXr=s(Pte);Jlo=r(rXr,"clip"),rXr.forEach(t),Ylo=r(fCe," \u2014 "),OB=n(fCe,"A",{href:!0});var tXr=s(OB);Klo=r(tXr,"CLIPProcessor"),tXr.forEach(t),Zlo=r(fCe," (CLIP model)"),fCe.forEach(t),eio=i(Fe),ph=n(Fe,"LI",{});var mCe=s(ph);Ite=n(mCe,"STRONG",{});var aXr=s(Ite);oio=r(aXr,"layoutlmv2"),aXr.forEach(t),rio=r(mCe," \u2014 "),VB=n(mCe,"A",{href:!0});var nXr=s(VB);tio=r(nXr,"LayoutLMv2Processor"),nXr.forEach(t),aio=r(mCe," (LayoutLMv2 model)"),mCe.forEach(t),nio=i(Fe),uh=n(Fe,"LI",{});var gCe=s(uh);qte=n(gCe,"STRONG",{});var sXr=s(qte);sio=r(sXr,"layoutxlm"),sXr.forEach(t),lio=r(gCe," \u2014 "),XB=n(gCe,"A",{href:!0});var lXr=s(XB);iio=r(lXr,"LayoutXLMProcessor"),lXr.forEach(t),dio=r(gCe," (LayoutXLM model)"),gCe.forEach(t),cio=i(Fe),_h=n(Fe,"LI",{});var hCe=s(_h);Nte=n(hCe,"STRONG",{});var iXr=s(Nte);fio=r(iXr,"sew"),iXr.forEach(t),mio=r(hCe," \u2014 "),zB=n(hCe,"A",{href:!0});var dXr=s(zB);gio=r(dXr,"Wav2Vec2Processor"),dXr.forEach(t),hio=r(hCe," (SEW model)"),hCe.forEach(t),pio=i(Fe),bh=n(Fe,"LI",{});var pCe=s(bh);jte=n(pCe,"STRONG",{});var cXr=s(jte);uio=r(cXr,"sew-d"),cXr.forEach(t),_io=r(pCe," \u2014 "),QB=n(pCe,"A",{href:!0});var fXr=s(QB);bio=r(fXr,"Wav2Vec2Processor"),fXr.forEach(t),vio=r(pCe," (SEW-D model)"),pCe.forEach(t),Fio=i(Fe),vh=n(Fe,"LI",{});var uCe=s(vh);Dte=n(uCe,"STRONG",{});var mXr=s(Dte);Tio=r(mXr,"speech_to_text"),mXr.forEach(t),Mio=r(uCe," \u2014 "),WB=n(uCe,"A",{href:!0});var gXr=s(WB);Eio=r(gXr,"Speech2TextProcessor"),gXr.forEach(t),Cio=r(uCe," (Speech2Text model)"),uCe.forEach(t),wio=i(Fe),Fh=n(Fe,"LI",{});var _Ce=s(Fh);Gte=n(_Ce,"STRONG",{});var hXr=s(Gte);Aio=r(hXr,"speech_to_text_2"),hXr.forEach(t),yio=r(_Ce," \u2014 "),HB=n(_Ce,"A",{href:!0});var pXr=s(HB);Lio=r(pXr,"Speech2Text2Processor"),pXr.forEach(t),xio=r(_Ce," (Speech2Text2 model)"),_Ce.forEach(t),$io=i(Fe),Th=n(Fe,"LI",{});var bCe=s(Th);Ote=n(bCe,"STRONG",{});var uXr=s(Ote);kio=r(uXr,"trocr"),uXr.forEach(t),Sio=r(bCe," \u2014 "),UB=n(bCe,"A",{href:!0});var _Xr=s(UB);Rio=r(_Xr,"TrOCRProcessor"),_Xr.forEach(t),Bio=r(bCe," (TrOCR model)"),bCe.forEach(t),Pio=i(Fe),Mh=n(Fe,"LI",{});var vCe=s(Mh);Vte=n(vCe,"STRONG",{});var bXr=s(Vte);Iio=r(bXr,"unispeech"),bXr.forEach(t),qio=r(vCe," \u2014 "),JB=n(vCe,"A",{href:!0});var vXr=s(JB);Nio=r(vXr,"Wav2Vec2Processor"),vXr.forEach(t),jio=r(vCe," (UniSpeech model)"),vCe.forEach(t),Dio=i(Fe),Eh=n(Fe,"LI",{});var FCe=s(Eh);Xte=n(FCe,"STRONG",{});var FXr=s(Xte);Gio=r(FXr,"unispeech-sat"),FXr.forEach(t),Oio=r(FCe," \u2014 "),YB=n(FCe,"A",{href:!0});var TXr=s(YB);Vio=r(TXr,"Wav2Vec2Processor"),TXr.forEach(t),Xio=r(FCe," (UniSpeechSat model)"),FCe.forEach(t),zio=i(Fe),Ch=n(Fe,"LI",{});var TCe=s(Ch);zte=n(TCe,"STRONG",{});var MXr=s(zte);Qio=r(MXr,"vilt"),MXr.forEach(t),Wio=r(TCe," \u2014 "),KB=n(TCe,"A",{href:!0});var EXr=s(KB);Hio=r(EXr,"ViltProcessor"),EXr.forEach(t),Uio=r(TCe," (ViLT model)"),TCe.forEach(t),Jio=i(Fe),wh=n(Fe,"LI",{});var MCe=s(wh);Qte=n(MCe,"STRONG",{});var CXr=s(Qte);Yio=r(CXr,"vision-text-dual-encoder"),CXr.forEach(t),Kio=r(MCe," \u2014 "),ZB=n(MCe,"A",{href:!0});var wXr=s(ZB);Zio=r(wXr,"VisionTextDualEncoderProcessor"),wXr.forEach(t),edo=r(MCe," (VisionTextDualEncoder model)"),MCe.forEach(t),odo=i(Fe),Ah=n(Fe,"LI",{});var ECe=s(Ah);Wte=n(ECe,"STRONG",{});var AXr=s(Wte);rdo=r(AXr,"wav2vec2"),AXr.forEach(t),tdo=r(ECe," \u2014 "),eP=n(ECe,"A",{href:!0});var yXr=s(eP);ado=r(yXr,"Wav2Vec2Processor"),yXr.forEach(t),ndo=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),sdo=i(Fe),yh=n(Fe,"LI",{});var CCe=s(yh);Hte=n(CCe,"STRONG",{});var LXr=s(Hte);ldo=r(LXr,"wavlm"),LXr.forEach(t),ido=r(CCe," \u2014 "),oP=n(CCe,"A",{href:!0});var xXr=s(oP);ddo=r(xXr,"Wav2Vec2Processor"),xXr.forEach(t),cdo=r(CCe," (WavLM model)"),CCe.forEach(t),Fe.forEach(t),fdo=i(Ut),T(Lh.$$.fragment,Ut),mdo=i(Ut),T(xh.$$.fragment,Ut),Ut.forEach(t),gdo=i(Bs),$h=n(Bs,"DIV",{class:!0});var SIe=s($h);T(J0.$$.fragment,SIe),hdo=i(SIe),Ute=n(SIe,"P",{});var $Xr=s(Ute);pdo=r($Xr,"Register a new processor for this class."),$Xr.forEach(t),SIe.forEach(t),Bs.forEach(t),kBe=i(f),pi=n(f,"H2",{class:!0});var RIe=s(pi);kh=n(RIe,"A",{id:!0,class:!0,href:!0});var kXr=s(kh);Jte=n(kXr,"SPAN",{});var SXr=s(Jte);T(Y0.$$.fragment,SXr),SXr.forEach(t),kXr.forEach(t),udo=i(RIe),Yte=n(RIe,"SPAN",{});var RXr=s(Yte);_do=r(RXr,"AutoModel"),RXr.forEach(t),RIe.forEach(t),SBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(K0.$$.fragment,Ps),bdo=i(Ps),ui=n(Ps,"P",{});var _Y=s(ui);vdo=r(_Y,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rP=n(_Y,"A",{href:!0});var BXr=s(rP);Fdo=r(BXr,"from_pretrained()"),BXr.forEach(t),Tdo=r(_Y," class method or the "),tP=n(_Y,"A",{href:!0});var PXr=s(tP);Mdo=r(PXr,"from_config()"),PXr.forEach(t),Edo=r(_Y,` class
method.`),_Y.forEach(t),Cdo=i(Ps),Z0=n(Ps,"P",{});var BIe=s(Z0);wdo=r(BIe,"This class cannot be instantiated directly using "),Kte=n(BIe,"CODE",{});var IXr=s(Kte);Ado=r(IXr,"__init__()"),IXr.forEach(t),ydo=r(BIe," (throws an error)."),BIe.forEach(t),Ldo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var $w=s(Zr);T(e6.$$.fragment,$w),xdo=i($w),Zte=n($w,"P",{});var qXr=s(Zte);$do=r(qXr,"Instantiates one of the base model classes of the library from a configuration."),qXr.forEach(t),kdo=i($w),_i=n($w,"P",{});var bY=s(_i);Sdo=r(bY,`Note:
Loading a model from its configuration file does `),eae=n(bY,"STRONG",{});var NXr=s(eae);Rdo=r(NXr,"not"),NXr.forEach(t),Bdo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aP=n(bY,"A",{href:!0});var jXr=s(aP);Pdo=r(jXr,"from_pretrained()"),jXr.forEach(t),Ido=r(bY," to load the model weights."),bY.forEach(t),qdo=i($w),T(Sh.$$.fragment,$w),$w.forEach(t),Ndo=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(o6.$$.fragment,Jt),jdo=i(Jt),oae=n(Jt,"P",{});var DXr=s(oae);Ddo=r(DXr,"Instantiate one of the base model classes of the library from a pretrained model."),DXr.forEach(t),Gdo=i(Jt),Ea=n(Jt,"P",{});var kw=s(Ea);Odo=r(kw,"The model class to instantiate is selected based on the "),rae=n(kw,"CODE",{});var GXr=s(rae);Vdo=r(GXr,"model_type"),GXr.forEach(t),Xdo=r(kw,` property of the config object (either
passed as an argument or loaded from `),tae=n(kw,"CODE",{});var OXr=s(tae);zdo=r(OXr,"pretrained_model_name_or_path"),OXr.forEach(t),Qdo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=n(kw,"CODE",{});var VXr=s(aae);Wdo=r(VXr,"pretrained_model_name_or_path"),VXr.forEach(t),Hdo=r(kw,":"),kw.forEach(t),Udo=i(Jt),x=n(Jt,"UL",{});var $=s(x);Rh=n($,"LI",{});var wCe=s(Rh);nae=n(wCe,"STRONG",{});var XXr=s(nae);Jdo=r(XXr,"albert"),XXr.forEach(t),Ydo=r(wCe," \u2014 "),nP=n(wCe,"A",{href:!0});var zXr=s(nP);Kdo=r(zXr,"AlbertModel"),zXr.forEach(t),Zdo=r(wCe," (ALBERT model)"),wCe.forEach(t),eco=i($),Bh=n($,"LI",{});var ACe=s(Bh);sae=n(ACe,"STRONG",{});var QXr=s(sae);oco=r(QXr,"bart"),QXr.forEach(t),rco=r(ACe," \u2014 "),sP=n(ACe,"A",{href:!0});var WXr=s(sP);tco=r(WXr,"BartModel"),WXr.forEach(t),aco=r(ACe," (BART model)"),ACe.forEach(t),nco=i($),Ph=n($,"LI",{});var yCe=s(Ph);lae=n(yCe,"STRONG",{});var HXr=s(lae);sco=r(HXr,"beit"),HXr.forEach(t),lco=r(yCe," \u2014 "),lP=n(yCe,"A",{href:!0});var UXr=s(lP);ico=r(UXr,"BeitModel"),UXr.forEach(t),dco=r(yCe," (BEiT model)"),yCe.forEach(t),cco=i($),Ih=n($,"LI",{});var LCe=s(Ih);iae=n(LCe,"STRONG",{});var JXr=s(iae);fco=r(JXr,"bert"),JXr.forEach(t),mco=r(LCe," \u2014 "),iP=n(LCe,"A",{href:!0});var YXr=s(iP);gco=r(YXr,"BertModel"),YXr.forEach(t),hco=r(LCe," (BERT model)"),LCe.forEach(t),pco=i($),qh=n($,"LI",{});var xCe=s(qh);dae=n(xCe,"STRONG",{});var KXr=s(dae);uco=r(KXr,"bert-generation"),KXr.forEach(t),_co=r(xCe," \u2014 "),dP=n(xCe,"A",{href:!0});var ZXr=s(dP);bco=r(ZXr,"BertGenerationEncoder"),ZXr.forEach(t),vco=r(xCe," (Bert Generation model)"),xCe.forEach(t),Fco=i($),Nh=n($,"LI",{});var $Ce=s(Nh);cae=n($Ce,"STRONG",{});var ezr=s(cae);Tco=r(ezr,"big_bird"),ezr.forEach(t),Mco=r($Ce," \u2014 "),cP=n($Ce,"A",{href:!0});var ozr=s(cP);Eco=r(ozr,"BigBirdModel"),ozr.forEach(t),Cco=r($Ce," (BigBird model)"),$Ce.forEach(t),wco=i($),jh=n($,"LI",{});var kCe=s(jh);fae=n(kCe,"STRONG",{});var rzr=s(fae);Aco=r(rzr,"bigbird_pegasus"),rzr.forEach(t),yco=r(kCe," \u2014 "),fP=n(kCe,"A",{href:!0});var tzr=s(fP);Lco=r(tzr,"BigBirdPegasusModel"),tzr.forEach(t),xco=r(kCe," (BigBirdPegasus model)"),kCe.forEach(t),$co=i($),Dh=n($,"LI",{});var SCe=s(Dh);mae=n(SCe,"STRONG",{});var azr=s(mae);kco=r(azr,"blenderbot"),azr.forEach(t),Sco=r(SCe," \u2014 "),mP=n(SCe,"A",{href:!0});var nzr=s(mP);Rco=r(nzr,"BlenderbotModel"),nzr.forEach(t),Bco=r(SCe," (Blenderbot model)"),SCe.forEach(t),Pco=i($),Gh=n($,"LI",{});var RCe=s(Gh);gae=n(RCe,"STRONG",{});var szr=s(gae);Ico=r(szr,"blenderbot-small"),szr.forEach(t),qco=r(RCe," \u2014 "),gP=n(RCe,"A",{href:!0});var lzr=s(gP);Nco=r(lzr,"BlenderbotSmallModel"),lzr.forEach(t),jco=r(RCe," (BlenderbotSmall model)"),RCe.forEach(t),Dco=i($),Oh=n($,"LI",{});var BCe=s(Oh);hae=n(BCe,"STRONG",{});var izr=s(hae);Gco=r(izr,"camembert"),izr.forEach(t),Oco=r(BCe," \u2014 "),hP=n(BCe,"A",{href:!0});var dzr=s(hP);Vco=r(dzr,"CamembertModel"),dzr.forEach(t),Xco=r(BCe," (CamemBERT model)"),BCe.forEach(t),zco=i($),Vh=n($,"LI",{});var PCe=s(Vh);pae=n(PCe,"STRONG",{});var czr=s(pae);Qco=r(czr,"canine"),czr.forEach(t),Wco=r(PCe," \u2014 "),pP=n(PCe,"A",{href:!0});var fzr=s(pP);Hco=r(fzr,"CanineModel"),fzr.forEach(t),Uco=r(PCe," (Canine model)"),PCe.forEach(t),Jco=i($),Xh=n($,"LI",{});var ICe=s(Xh);uae=n(ICe,"STRONG",{});var mzr=s(uae);Yco=r(mzr,"clip"),mzr.forEach(t),Kco=r(ICe," \u2014 "),uP=n(ICe,"A",{href:!0});var gzr=s(uP);Zco=r(gzr,"CLIPModel"),gzr.forEach(t),efo=r(ICe," (CLIP model)"),ICe.forEach(t),ofo=i($),zh=n($,"LI",{});var qCe=s(zh);_ae=n(qCe,"STRONG",{});var hzr=s(_ae);rfo=r(hzr,"convbert"),hzr.forEach(t),tfo=r(qCe," \u2014 "),_P=n(qCe,"A",{href:!0});var pzr=s(_P);afo=r(pzr,"ConvBertModel"),pzr.forEach(t),nfo=r(qCe," (ConvBERT model)"),qCe.forEach(t),sfo=i($),Qh=n($,"LI",{});var NCe=s(Qh);bae=n(NCe,"STRONG",{});var uzr=s(bae);lfo=r(uzr,"convnext"),uzr.forEach(t),ifo=r(NCe," \u2014 "),bP=n(NCe,"A",{href:!0});var _zr=s(bP);dfo=r(_zr,"ConvNextModel"),_zr.forEach(t),cfo=r(NCe," (ConvNext model)"),NCe.forEach(t),ffo=i($),Wh=n($,"LI",{});var jCe=s(Wh);vae=n(jCe,"STRONG",{});var bzr=s(vae);mfo=r(bzr,"ctrl"),bzr.forEach(t),gfo=r(jCe," \u2014 "),vP=n(jCe,"A",{href:!0});var vzr=s(vP);hfo=r(vzr,"CTRLModel"),vzr.forEach(t),pfo=r(jCe," (CTRL model)"),jCe.forEach(t),ufo=i($),Hh=n($,"LI",{});var DCe=s(Hh);Fae=n(DCe,"STRONG",{});var Fzr=s(Fae);_fo=r(Fzr,"data2vec-audio"),Fzr.forEach(t),bfo=r(DCe," \u2014 "),FP=n(DCe,"A",{href:!0});var Tzr=s(FP);vfo=r(Tzr,"Data2VecAudioModel"),Tzr.forEach(t),Ffo=r(DCe," (Data2VecAudio model)"),DCe.forEach(t),Tfo=i($),Uh=n($,"LI",{});var GCe=s(Uh);Tae=n(GCe,"STRONG",{});var Mzr=s(Tae);Mfo=r(Mzr,"data2vec-text"),Mzr.forEach(t),Efo=r(GCe," \u2014 "),TP=n(GCe,"A",{href:!0});var Ezr=s(TP);Cfo=r(Ezr,"Data2VecTextModel"),Ezr.forEach(t),wfo=r(GCe," (Data2VecText model)"),GCe.forEach(t),Afo=i($),Jh=n($,"LI",{});var OCe=s(Jh);Mae=n(OCe,"STRONG",{});var Czr=s(Mae);yfo=r(Czr,"data2vec-vision"),Czr.forEach(t),Lfo=r(OCe," \u2014 "),MP=n(OCe,"A",{href:!0});var wzr=s(MP);xfo=r(wzr,"Data2VecVisionModel"),wzr.forEach(t),$fo=r(OCe," (Data2VecVision model)"),OCe.forEach(t),kfo=i($),Yh=n($,"LI",{});var VCe=s(Yh);Eae=n(VCe,"STRONG",{});var Azr=s(Eae);Sfo=r(Azr,"deberta"),Azr.forEach(t),Rfo=r(VCe," \u2014 "),EP=n(VCe,"A",{href:!0});var yzr=s(EP);Bfo=r(yzr,"DebertaModel"),yzr.forEach(t),Pfo=r(VCe," (DeBERTa model)"),VCe.forEach(t),Ifo=i($),Kh=n($,"LI",{});var XCe=s(Kh);Cae=n(XCe,"STRONG",{});var Lzr=s(Cae);qfo=r(Lzr,"deberta-v2"),Lzr.forEach(t),Nfo=r(XCe," \u2014 "),CP=n(XCe,"A",{href:!0});var xzr=s(CP);jfo=r(xzr,"DebertaV2Model"),xzr.forEach(t),Dfo=r(XCe," (DeBERTa-v2 model)"),XCe.forEach(t),Gfo=i($),Zh=n($,"LI",{});var zCe=s(Zh);wae=n(zCe,"STRONG",{});var $zr=s(wae);Ofo=r($zr,"decision_transformer"),$zr.forEach(t),Vfo=r(zCe," \u2014 "),wP=n(zCe,"A",{href:!0});var kzr=s(wP);Xfo=r(kzr,"DecisionTransformerModel"),kzr.forEach(t),zfo=r(zCe," (Decision Transformer model)"),zCe.forEach(t),Qfo=i($),ep=n($,"LI",{});var QCe=s(ep);Aae=n(QCe,"STRONG",{});var Szr=s(Aae);Wfo=r(Szr,"deit"),Szr.forEach(t),Hfo=r(QCe," \u2014 "),AP=n(QCe,"A",{href:!0});var Rzr=s(AP);Ufo=r(Rzr,"DeiTModel"),Rzr.forEach(t),Jfo=r(QCe," (DeiT model)"),QCe.forEach(t),Yfo=i($),op=n($,"LI",{});var WCe=s(op);yae=n(WCe,"STRONG",{});var Bzr=s(yae);Kfo=r(Bzr,"detr"),Bzr.forEach(t),Zfo=r(WCe," \u2014 "),yP=n(WCe,"A",{href:!0});var Pzr=s(yP);emo=r(Pzr,"DetrModel"),Pzr.forEach(t),omo=r(WCe," (DETR model)"),WCe.forEach(t),rmo=i($),rp=n($,"LI",{});var HCe=s(rp);Lae=n(HCe,"STRONG",{});var Izr=s(Lae);tmo=r(Izr,"distilbert"),Izr.forEach(t),amo=r(HCe," \u2014 "),LP=n(HCe,"A",{href:!0});var qzr=s(LP);nmo=r(qzr,"DistilBertModel"),qzr.forEach(t),smo=r(HCe," (DistilBERT model)"),HCe.forEach(t),lmo=i($),tp=n($,"LI",{});var UCe=s(tp);xae=n(UCe,"STRONG",{});var Nzr=s(xae);imo=r(Nzr,"dpr"),Nzr.forEach(t),dmo=r(UCe," \u2014 "),xP=n(UCe,"A",{href:!0});var jzr=s(xP);cmo=r(jzr,"DPRQuestionEncoder"),jzr.forEach(t),fmo=r(UCe," (DPR model)"),UCe.forEach(t),mmo=i($),ap=n($,"LI",{});var JCe=s(ap);$ae=n(JCe,"STRONG",{});var Dzr=s($ae);gmo=r(Dzr,"dpt"),Dzr.forEach(t),hmo=r(JCe," \u2014 "),$P=n(JCe,"A",{href:!0});var Gzr=s($P);pmo=r(Gzr,"DPTModel"),Gzr.forEach(t),umo=r(JCe," (DPT model)"),JCe.forEach(t),_mo=i($),np=n($,"LI",{});var YCe=s(np);kae=n(YCe,"STRONG",{});var Ozr=s(kae);bmo=r(Ozr,"electra"),Ozr.forEach(t),vmo=r(YCe," \u2014 "),kP=n(YCe,"A",{href:!0});var Vzr=s(kP);Fmo=r(Vzr,"ElectraModel"),Vzr.forEach(t),Tmo=r(YCe," (ELECTRA model)"),YCe.forEach(t),Mmo=i($),sp=n($,"LI",{});var KCe=s(sp);Sae=n(KCe,"STRONG",{});var Xzr=s(Sae);Emo=r(Xzr,"flaubert"),Xzr.forEach(t),Cmo=r(KCe," \u2014 "),SP=n(KCe,"A",{href:!0});var zzr=s(SP);wmo=r(zzr,"FlaubertModel"),zzr.forEach(t),Amo=r(KCe," (FlauBERT model)"),KCe.forEach(t),ymo=i($),lp=n($,"LI",{});var ZCe=s(lp);Rae=n(ZCe,"STRONG",{});var Qzr=s(Rae);Lmo=r(Qzr,"fnet"),Qzr.forEach(t),xmo=r(ZCe," \u2014 "),RP=n(ZCe,"A",{href:!0});var Wzr=s(RP);$mo=r(Wzr,"FNetModel"),Wzr.forEach(t),kmo=r(ZCe," (FNet model)"),ZCe.forEach(t),Smo=i($),ip=n($,"LI",{});var ewe=s(ip);Bae=n(ewe,"STRONG",{});var Hzr=s(Bae);Rmo=r(Hzr,"fsmt"),Hzr.forEach(t),Bmo=r(ewe," \u2014 "),BP=n(ewe,"A",{href:!0});var Uzr=s(BP);Pmo=r(Uzr,"FSMTModel"),Uzr.forEach(t),Imo=r(ewe," (FairSeq Machine-Translation model)"),ewe.forEach(t),qmo=i($),Ls=n($,"LI",{});var R9=s(Ls);Pae=n(R9,"STRONG",{});var Jzr=s(Pae);Nmo=r(Jzr,"funnel"),Jzr.forEach(t),jmo=r(R9," \u2014 "),PP=n(R9,"A",{href:!0});var Yzr=s(PP);Dmo=r(Yzr,"FunnelModel"),Yzr.forEach(t),Gmo=r(R9," or "),IP=n(R9,"A",{href:!0});var Kzr=s(IP);Omo=r(Kzr,"FunnelBaseModel"),Kzr.forEach(t),Vmo=r(R9," (Funnel Transformer model)"),R9.forEach(t),Xmo=i($),dp=n($,"LI",{});var owe=s(dp);Iae=n(owe,"STRONG",{});var Zzr=s(Iae);zmo=r(Zzr,"glpn"),Zzr.forEach(t),Qmo=r(owe," \u2014 "),qP=n(owe,"A",{href:!0});var eQr=s(qP);Wmo=r(eQr,"GLPNModel"),eQr.forEach(t),Hmo=r(owe," (GLPN model)"),owe.forEach(t),Umo=i($),cp=n($,"LI",{});var rwe=s(cp);qae=n(rwe,"STRONG",{});var oQr=s(qae);Jmo=r(oQr,"gpt2"),oQr.forEach(t),Ymo=r(rwe," \u2014 "),NP=n(rwe,"A",{href:!0});var rQr=s(NP);Kmo=r(rQr,"GPT2Model"),rQr.forEach(t),Zmo=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),ego=i($),fp=n($,"LI",{});var twe=s(fp);Nae=n(twe,"STRONG",{});var tQr=s(Nae);ogo=r(tQr,"gpt_neo"),tQr.forEach(t),rgo=r(twe," \u2014 "),jP=n(twe,"A",{href:!0});var aQr=s(jP);tgo=r(aQr,"GPTNeoModel"),aQr.forEach(t),ago=r(twe," (GPT Neo model)"),twe.forEach(t),ngo=i($),mp=n($,"LI",{});var awe=s(mp);jae=n(awe,"STRONG",{});var nQr=s(jae);sgo=r(nQr,"gptj"),nQr.forEach(t),lgo=r(awe," \u2014 "),DP=n(awe,"A",{href:!0});var sQr=s(DP);igo=r(sQr,"GPTJModel"),sQr.forEach(t),dgo=r(awe," (GPT-J model)"),awe.forEach(t),cgo=i($),gp=n($,"LI",{});var nwe=s(gp);Dae=n(nwe,"STRONG",{});var lQr=s(Dae);fgo=r(lQr,"hubert"),lQr.forEach(t),mgo=r(nwe," \u2014 "),GP=n(nwe,"A",{href:!0});var iQr=s(GP);ggo=r(iQr,"HubertModel"),iQr.forEach(t),hgo=r(nwe," (Hubert model)"),nwe.forEach(t),pgo=i($),hp=n($,"LI",{});var swe=s(hp);Gae=n(swe,"STRONG",{});var dQr=s(Gae);ugo=r(dQr,"ibert"),dQr.forEach(t),_go=r(swe," \u2014 "),OP=n(swe,"A",{href:!0});var cQr=s(OP);bgo=r(cQr,"IBertModel"),cQr.forEach(t),vgo=r(swe," (I-BERT model)"),swe.forEach(t),Fgo=i($),pp=n($,"LI",{});var lwe=s(pp);Oae=n(lwe,"STRONG",{});var fQr=s(Oae);Tgo=r(fQr,"imagegpt"),fQr.forEach(t),Mgo=r(lwe," \u2014 "),VP=n(lwe,"A",{href:!0});var mQr=s(VP);Ego=r(mQr,"ImageGPTModel"),mQr.forEach(t),Cgo=r(lwe," (ImageGPT model)"),lwe.forEach(t),wgo=i($),up=n($,"LI",{});var iwe=s(up);Vae=n(iwe,"STRONG",{});var gQr=s(Vae);Ago=r(gQr,"layoutlm"),gQr.forEach(t),ygo=r(iwe," \u2014 "),XP=n(iwe,"A",{href:!0});var hQr=s(XP);Lgo=r(hQr,"LayoutLMModel"),hQr.forEach(t),xgo=r(iwe," (LayoutLM model)"),iwe.forEach(t),$go=i($),_p=n($,"LI",{});var dwe=s(_p);Xae=n(dwe,"STRONG",{});var pQr=s(Xae);kgo=r(pQr,"layoutlmv2"),pQr.forEach(t),Sgo=r(dwe," \u2014 "),zP=n(dwe,"A",{href:!0});var uQr=s(zP);Rgo=r(uQr,"LayoutLMv2Model"),uQr.forEach(t),Bgo=r(dwe," (LayoutLMv2 model)"),dwe.forEach(t),Pgo=i($),bp=n($,"LI",{});var cwe=s(bp);zae=n(cwe,"STRONG",{});var _Qr=s(zae);Igo=r(_Qr,"led"),_Qr.forEach(t),qgo=r(cwe," \u2014 "),QP=n(cwe,"A",{href:!0});var bQr=s(QP);Ngo=r(bQr,"LEDModel"),bQr.forEach(t),jgo=r(cwe," (LED model)"),cwe.forEach(t),Dgo=i($),vp=n($,"LI",{});var fwe=s(vp);Qae=n(fwe,"STRONG",{});var vQr=s(Qae);Ggo=r(vQr,"longformer"),vQr.forEach(t),Ogo=r(fwe," \u2014 "),WP=n(fwe,"A",{href:!0});var FQr=s(WP);Vgo=r(FQr,"LongformerModel"),FQr.forEach(t),Xgo=r(fwe," (Longformer model)"),fwe.forEach(t),zgo=i($),Fp=n($,"LI",{});var mwe=s(Fp);Wae=n(mwe,"STRONG",{});var TQr=s(Wae);Qgo=r(TQr,"luke"),TQr.forEach(t),Wgo=r(mwe," \u2014 "),HP=n(mwe,"A",{href:!0});var MQr=s(HP);Hgo=r(MQr,"LukeModel"),MQr.forEach(t),Ugo=r(mwe," (LUKE model)"),mwe.forEach(t),Jgo=i($),Tp=n($,"LI",{});var gwe=s(Tp);Hae=n(gwe,"STRONG",{});var EQr=s(Hae);Ygo=r(EQr,"lxmert"),EQr.forEach(t),Kgo=r(gwe," \u2014 "),UP=n(gwe,"A",{href:!0});var CQr=s(UP);Zgo=r(CQr,"LxmertModel"),CQr.forEach(t),eho=r(gwe," (LXMERT model)"),gwe.forEach(t),oho=i($),Mp=n($,"LI",{});var hwe=s(Mp);Uae=n(hwe,"STRONG",{});var wQr=s(Uae);rho=r(wQr,"m2m_100"),wQr.forEach(t),tho=r(hwe," \u2014 "),JP=n(hwe,"A",{href:!0});var AQr=s(JP);aho=r(AQr,"M2M100Model"),AQr.forEach(t),nho=r(hwe," (M2M100 model)"),hwe.forEach(t),sho=i($),Ep=n($,"LI",{});var pwe=s(Ep);Jae=n(pwe,"STRONG",{});var yQr=s(Jae);lho=r(yQr,"marian"),yQr.forEach(t),iho=r(pwe," \u2014 "),YP=n(pwe,"A",{href:!0});var LQr=s(YP);dho=r(LQr,"MarianModel"),LQr.forEach(t),cho=r(pwe," (Marian model)"),pwe.forEach(t),fho=i($),Cp=n($,"LI",{});var uwe=s(Cp);Yae=n(uwe,"STRONG",{});var xQr=s(Yae);mho=r(xQr,"maskformer"),xQr.forEach(t),gho=r(uwe," \u2014 "),KP=n(uwe,"A",{href:!0});var $Qr=s(KP);hho=r($Qr,"MaskFormerModel"),$Qr.forEach(t),pho=r(uwe," (MaskFormer model)"),uwe.forEach(t),uho=i($),wp=n($,"LI",{});var _we=s(wp);Kae=n(_we,"STRONG",{});var kQr=s(Kae);_ho=r(kQr,"mbart"),kQr.forEach(t),bho=r(_we," \u2014 "),ZP=n(_we,"A",{href:!0});var SQr=s(ZP);vho=r(SQr,"MBartModel"),SQr.forEach(t),Fho=r(_we," (mBART model)"),_we.forEach(t),Tho=i($),Ap=n($,"LI",{});var bwe=s(Ap);Zae=n(bwe,"STRONG",{});var RQr=s(Zae);Mho=r(RQr,"megatron-bert"),RQr.forEach(t),Eho=r(bwe," \u2014 "),eI=n(bwe,"A",{href:!0});var BQr=s(eI);Cho=r(BQr,"MegatronBertModel"),BQr.forEach(t),who=r(bwe," (MegatronBert model)"),bwe.forEach(t),Aho=i($),yp=n($,"LI",{});var vwe=s(yp);ene=n(vwe,"STRONG",{});var PQr=s(ene);yho=r(PQr,"mobilebert"),PQr.forEach(t),Lho=r(vwe," \u2014 "),oI=n(vwe,"A",{href:!0});var IQr=s(oI);xho=r(IQr,"MobileBertModel"),IQr.forEach(t),$ho=r(vwe," (MobileBERT model)"),vwe.forEach(t),kho=i($),Lp=n($,"LI",{});var Fwe=s(Lp);one=n(Fwe,"STRONG",{});var qQr=s(one);Sho=r(qQr,"mpnet"),qQr.forEach(t),Rho=r(Fwe," \u2014 "),rI=n(Fwe,"A",{href:!0});var NQr=s(rI);Bho=r(NQr,"MPNetModel"),NQr.forEach(t),Pho=r(Fwe," (MPNet model)"),Fwe.forEach(t),Iho=i($),xp=n($,"LI",{});var Twe=s(xp);rne=n(Twe,"STRONG",{});var jQr=s(rne);qho=r(jQr,"mt5"),jQr.forEach(t),Nho=r(Twe," \u2014 "),tI=n(Twe,"A",{href:!0});var DQr=s(tI);jho=r(DQr,"MT5Model"),DQr.forEach(t),Dho=r(Twe," (mT5 model)"),Twe.forEach(t),Gho=i($),$p=n($,"LI",{});var Mwe=s($p);tne=n(Mwe,"STRONG",{});var GQr=s(tne);Oho=r(GQr,"nystromformer"),GQr.forEach(t),Vho=r(Mwe," \u2014 "),aI=n(Mwe,"A",{href:!0});var OQr=s(aI);Xho=r(OQr,"NystromformerModel"),OQr.forEach(t),zho=r(Mwe," (Nystromformer model)"),Mwe.forEach(t),Qho=i($),kp=n($,"LI",{});var Ewe=s(kp);ane=n(Ewe,"STRONG",{});var VQr=s(ane);Who=r(VQr,"openai-gpt"),VQr.forEach(t),Hho=r(Ewe," \u2014 "),nI=n(Ewe,"A",{href:!0});var XQr=s(nI);Uho=r(XQr,"OpenAIGPTModel"),XQr.forEach(t),Jho=r(Ewe," (OpenAI GPT model)"),Ewe.forEach(t),Yho=i($),Sp=n($,"LI",{});var Cwe=s(Sp);nne=n(Cwe,"STRONG",{});var zQr=s(nne);Kho=r(zQr,"pegasus"),zQr.forEach(t),Zho=r(Cwe," \u2014 "),sI=n(Cwe,"A",{href:!0});var QQr=s(sI);epo=r(QQr,"PegasusModel"),QQr.forEach(t),opo=r(Cwe," (Pegasus model)"),Cwe.forEach(t),rpo=i($),Rp=n($,"LI",{});var wwe=s(Rp);sne=n(wwe,"STRONG",{});var WQr=s(sne);tpo=r(WQr,"perceiver"),WQr.forEach(t),apo=r(wwe," \u2014 "),lI=n(wwe,"A",{href:!0});var HQr=s(lI);npo=r(HQr,"PerceiverModel"),HQr.forEach(t),spo=r(wwe," (Perceiver model)"),wwe.forEach(t),lpo=i($),Bp=n($,"LI",{});var Awe=s(Bp);lne=n(Awe,"STRONG",{});var UQr=s(lne);ipo=r(UQr,"plbart"),UQr.forEach(t),dpo=r(Awe," \u2014 "),iI=n(Awe,"A",{href:!0});var JQr=s(iI);cpo=r(JQr,"PLBartModel"),JQr.forEach(t),fpo=r(Awe," (PLBart model)"),Awe.forEach(t),mpo=i($),Pp=n($,"LI",{});var ywe=s(Pp);ine=n(ywe,"STRONG",{});var YQr=s(ine);gpo=r(YQr,"poolformer"),YQr.forEach(t),hpo=r(ywe," \u2014 "),dI=n(ywe,"A",{href:!0});var KQr=s(dI);ppo=r(KQr,"PoolFormerModel"),KQr.forEach(t),upo=r(ywe," (PoolFormer model)"),ywe.forEach(t),_po=i($),Ip=n($,"LI",{});var Lwe=s(Ip);dne=n(Lwe,"STRONG",{});var ZQr=s(dne);bpo=r(ZQr,"prophetnet"),ZQr.forEach(t),vpo=r(Lwe," \u2014 "),cI=n(Lwe,"A",{href:!0});var eWr=s(cI);Fpo=r(eWr,"ProphetNetModel"),eWr.forEach(t),Tpo=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),Mpo=i($),qp=n($,"LI",{});var xwe=s(qp);cne=n(xwe,"STRONG",{});var oWr=s(cne);Epo=r(oWr,"qdqbert"),oWr.forEach(t),Cpo=r(xwe," \u2014 "),fI=n(xwe,"A",{href:!0});var rWr=s(fI);wpo=r(rWr,"QDQBertModel"),rWr.forEach(t),Apo=r(xwe," (QDQBert model)"),xwe.forEach(t),ypo=i($),Np=n($,"LI",{});var $we=s(Np);fne=n($we,"STRONG",{});var tWr=s(fne);Lpo=r(tWr,"reformer"),tWr.forEach(t),xpo=r($we," \u2014 "),mI=n($we,"A",{href:!0});var aWr=s(mI);$po=r(aWr,"ReformerModel"),aWr.forEach(t),kpo=r($we," (Reformer model)"),$we.forEach(t),Spo=i($),jp=n($,"LI",{});var kwe=s(jp);mne=n(kwe,"STRONG",{});var nWr=s(mne);Rpo=r(nWr,"regnet"),nWr.forEach(t),Bpo=r(kwe," \u2014 "),gI=n(kwe,"A",{href:!0});var sWr=s(gI);Ppo=r(sWr,"RegNetModel"),sWr.forEach(t),Ipo=r(kwe," (RegNet model)"),kwe.forEach(t),qpo=i($),Dp=n($,"LI",{});var Swe=s(Dp);gne=n(Swe,"STRONG",{});var lWr=s(gne);Npo=r(lWr,"rembert"),lWr.forEach(t),jpo=r(Swe," \u2014 "),hI=n(Swe,"A",{href:!0});var iWr=s(hI);Dpo=r(iWr,"RemBertModel"),iWr.forEach(t),Gpo=r(Swe," (RemBERT model)"),Swe.forEach(t),Opo=i($),Gp=n($,"LI",{});var Rwe=s(Gp);hne=n(Rwe,"STRONG",{});var dWr=s(hne);Vpo=r(dWr,"resnet"),dWr.forEach(t),Xpo=r(Rwe," \u2014 "),pI=n(Rwe,"A",{href:!0});var cWr=s(pI);zpo=r(cWr,"ResNetModel"),cWr.forEach(t),Qpo=r(Rwe," (ResNet model)"),Rwe.forEach(t),Wpo=i($),Op=n($,"LI",{});var Bwe=s(Op);pne=n(Bwe,"STRONG",{});var fWr=s(pne);Hpo=r(fWr,"retribert"),fWr.forEach(t),Upo=r(Bwe," \u2014 "),uI=n(Bwe,"A",{href:!0});var mWr=s(uI);Jpo=r(mWr,"RetriBertModel"),mWr.forEach(t),Ypo=r(Bwe," (RetriBERT model)"),Bwe.forEach(t),Kpo=i($),Vp=n($,"LI",{});var Pwe=s(Vp);une=n(Pwe,"STRONG",{});var gWr=s(une);Zpo=r(gWr,"roberta"),gWr.forEach(t),euo=r(Pwe," \u2014 "),_I=n(Pwe,"A",{href:!0});var hWr=s(_I);ouo=r(hWr,"RobertaModel"),hWr.forEach(t),ruo=r(Pwe," (RoBERTa model)"),Pwe.forEach(t),tuo=i($),Xp=n($,"LI",{});var Iwe=s(Xp);_ne=n(Iwe,"STRONG",{});var pWr=s(_ne);auo=r(pWr,"roformer"),pWr.forEach(t),nuo=r(Iwe," \u2014 "),bI=n(Iwe,"A",{href:!0});var uWr=s(bI);suo=r(uWr,"RoFormerModel"),uWr.forEach(t),luo=r(Iwe," (RoFormer model)"),Iwe.forEach(t),iuo=i($),zp=n($,"LI",{});var qwe=s(zp);bne=n(qwe,"STRONG",{});var _Wr=s(bne);duo=r(_Wr,"segformer"),_Wr.forEach(t),cuo=r(qwe," \u2014 "),vI=n(qwe,"A",{href:!0});var bWr=s(vI);fuo=r(bWr,"SegformerModel"),bWr.forEach(t),muo=r(qwe," (SegFormer model)"),qwe.forEach(t),guo=i($),Qp=n($,"LI",{});var Nwe=s(Qp);vne=n(Nwe,"STRONG",{});var vWr=s(vne);huo=r(vWr,"sew"),vWr.forEach(t),puo=r(Nwe," \u2014 "),FI=n(Nwe,"A",{href:!0});var FWr=s(FI);uuo=r(FWr,"SEWModel"),FWr.forEach(t),_uo=r(Nwe," (SEW model)"),Nwe.forEach(t),buo=i($),Wp=n($,"LI",{});var jwe=s(Wp);Fne=n(jwe,"STRONG",{});var TWr=s(Fne);vuo=r(TWr,"sew-d"),TWr.forEach(t),Fuo=r(jwe," \u2014 "),TI=n(jwe,"A",{href:!0});var MWr=s(TI);Tuo=r(MWr,"SEWDModel"),MWr.forEach(t),Muo=r(jwe," (SEW-D model)"),jwe.forEach(t),Euo=i($),Hp=n($,"LI",{});var Dwe=s(Hp);Tne=n(Dwe,"STRONG",{});var EWr=s(Tne);Cuo=r(EWr,"speech_to_text"),EWr.forEach(t),wuo=r(Dwe," \u2014 "),MI=n(Dwe,"A",{href:!0});var CWr=s(MI);Auo=r(CWr,"Speech2TextModel"),CWr.forEach(t),yuo=r(Dwe," (Speech2Text model)"),Dwe.forEach(t),Luo=i($),Up=n($,"LI",{});var Gwe=s(Up);Mne=n(Gwe,"STRONG",{});var wWr=s(Mne);xuo=r(wWr,"splinter"),wWr.forEach(t),$uo=r(Gwe," \u2014 "),EI=n(Gwe,"A",{href:!0});var AWr=s(EI);kuo=r(AWr,"SplinterModel"),AWr.forEach(t),Suo=r(Gwe," (Splinter model)"),Gwe.forEach(t),Ruo=i($),Jp=n($,"LI",{});var Owe=s(Jp);Ene=n(Owe,"STRONG",{});var yWr=s(Ene);Buo=r(yWr,"squeezebert"),yWr.forEach(t),Puo=r(Owe," \u2014 "),CI=n(Owe,"A",{href:!0});var LWr=s(CI);Iuo=r(LWr,"SqueezeBertModel"),LWr.forEach(t),quo=r(Owe," (SqueezeBERT model)"),Owe.forEach(t),Nuo=i($),Yp=n($,"LI",{});var Vwe=s(Yp);Cne=n(Vwe,"STRONG",{});var xWr=s(Cne);juo=r(xWr,"swin"),xWr.forEach(t),Duo=r(Vwe," \u2014 "),wI=n(Vwe,"A",{href:!0});var $Wr=s(wI);Guo=r($Wr,"SwinModel"),$Wr.forEach(t),Ouo=r(Vwe," (Swin model)"),Vwe.forEach(t),Vuo=i($),Kp=n($,"LI",{});var Xwe=s(Kp);wne=n(Xwe,"STRONG",{});var kWr=s(wne);Xuo=r(kWr,"t5"),kWr.forEach(t),zuo=r(Xwe," \u2014 "),AI=n(Xwe,"A",{href:!0});var SWr=s(AI);Quo=r(SWr,"T5Model"),SWr.forEach(t),Wuo=r(Xwe," (T5 model)"),Xwe.forEach(t),Huo=i($),Zp=n($,"LI",{});var zwe=s(Zp);Ane=n(zwe,"STRONG",{});var RWr=s(Ane);Uuo=r(RWr,"tapas"),RWr.forEach(t),Juo=r(zwe," \u2014 "),yI=n(zwe,"A",{href:!0});var BWr=s(yI);Yuo=r(BWr,"TapasModel"),BWr.forEach(t),Kuo=r(zwe," (TAPAS model)"),zwe.forEach(t),Zuo=i($),eu=n($,"LI",{});var Qwe=s(eu);yne=n(Qwe,"STRONG",{});var PWr=s(yne);e_o=r(PWr,"transfo-xl"),PWr.forEach(t),o_o=r(Qwe," \u2014 "),LI=n(Qwe,"A",{href:!0});var IWr=s(LI);r_o=r(IWr,"TransfoXLModel"),IWr.forEach(t),t_o=r(Qwe," (Transformer-XL model)"),Qwe.forEach(t),a_o=i($),ou=n($,"LI",{});var Wwe=s(ou);Lne=n(Wwe,"STRONG",{});var qWr=s(Lne);n_o=r(qWr,"unispeech"),qWr.forEach(t),s_o=r(Wwe," \u2014 "),xI=n(Wwe,"A",{href:!0});var NWr=s(xI);l_o=r(NWr,"UniSpeechModel"),NWr.forEach(t),i_o=r(Wwe," (UniSpeech model)"),Wwe.forEach(t),d_o=i($),ru=n($,"LI",{});var Hwe=s(ru);xne=n(Hwe,"STRONG",{});var jWr=s(xne);c_o=r(jWr,"unispeech-sat"),jWr.forEach(t),f_o=r(Hwe," \u2014 "),$I=n(Hwe,"A",{href:!0});var DWr=s($I);m_o=r(DWr,"UniSpeechSatModel"),DWr.forEach(t),g_o=r(Hwe," (UniSpeechSat model)"),Hwe.forEach(t),h_o=i($),tu=n($,"LI",{});var Uwe=s(tu);$ne=n(Uwe,"STRONG",{});var GWr=s($ne);p_o=r(GWr,"van"),GWr.forEach(t),u_o=r(Uwe," \u2014 "),kI=n(Uwe,"A",{href:!0});var OWr=s(kI);__o=r(OWr,"VanModel"),OWr.forEach(t),b_o=r(Uwe," (VAN model)"),Uwe.forEach(t),v_o=i($),au=n($,"LI",{});var Jwe=s(au);kne=n(Jwe,"STRONG",{});var VWr=s(kne);F_o=r(VWr,"vilt"),VWr.forEach(t),T_o=r(Jwe," \u2014 "),SI=n(Jwe,"A",{href:!0});var XWr=s(SI);M_o=r(XWr,"ViltModel"),XWr.forEach(t),E_o=r(Jwe," (ViLT model)"),Jwe.forEach(t),C_o=i($),nu=n($,"LI",{});var Ywe=s(nu);Sne=n(Ywe,"STRONG",{});var zWr=s(Sne);w_o=r(zWr,"vision-text-dual-encoder"),zWr.forEach(t),A_o=r(Ywe," \u2014 "),RI=n(Ywe,"A",{href:!0});var QWr=s(RI);y_o=r(QWr,"VisionTextDualEncoderModel"),QWr.forEach(t),L_o=r(Ywe," (VisionTextDualEncoder model)"),Ywe.forEach(t),x_o=i($),su=n($,"LI",{});var Kwe=s(su);Rne=n(Kwe,"STRONG",{});var WWr=s(Rne);$_o=r(WWr,"visual_bert"),WWr.forEach(t),k_o=r(Kwe," \u2014 "),BI=n(Kwe,"A",{href:!0});var HWr=s(BI);S_o=r(HWr,"VisualBertModel"),HWr.forEach(t),R_o=r(Kwe," (VisualBert model)"),Kwe.forEach(t),B_o=i($),lu=n($,"LI",{});var Zwe=s(lu);Bne=n(Zwe,"STRONG",{});var UWr=s(Bne);P_o=r(UWr,"vit"),UWr.forEach(t),I_o=r(Zwe," \u2014 "),PI=n(Zwe,"A",{href:!0});var JWr=s(PI);q_o=r(JWr,"ViTModel"),JWr.forEach(t),N_o=r(Zwe," (ViT model)"),Zwe.forEach(t),j_o=i($),iu=n($,"LI",{});var eAe=s(iu);Pne=n(eAe,"STRONG",{});var YWr=s(Pne);D_o=r(YWr,"vit_mae"),YWr.forEach(t),G_o=r(eAe," \u2014 "),II=n(eAe,"A",{href:!0});var KWr=s(II);O_o=r(KWr,"ViTMAEModel"),KWr.forEach(t),V_o=r(eAe," (ViTMAE model)"),eAe.forEach(t),X_o=i($),du=n($,"LI",{});var oAe=s(du);Ine=n(oAe,"STRONG",{});var ZWr=s(Ine);z_o=r(ZWr,"wav2vec2"),ZWr.forEach(t),Q_o=r(oAe," \u2014 "),qI=n(oAe,"A",{href:!0});var eHr=s(qI);W_o=r(eHr,"Wav2Vec2Model"),eHr.forEach(t),H_o=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),U_o=i($),cu=n($,"LI",{});var rAe=s(cu);qne=n(rAe,"STRONG",{});var oHr=s(qne);J_o=r(oHr,"wavlm"),oHr.forEach(t),Y_o=r(rAe," \u2014 "),NI=n(rAe,"A",{href:!0});var rHr=s(NI);K_o=r(rHr,"WavLMModel"),rHr.forEach(t),Z_o=r(rAe," (WavLM model)"),rAe.forEach(t),e1o=i($),fu=n($,"LI",{});var tAe=s(fu);Nne=n(tAe,"STRONG",{});var tHr=s(Nne);o1o=r(tHr,"xglm"),tHr.forEach(t),r1o=r(tAe," \u2014 "),jI=n(tAe,"A",{href:!0});var aHr=s(jI);t1o=r(aHr,"XGLMModel"),aHr.forEach(t),a1o=r(tAe," (XGLM model)"),tAe.forEach(t),n1o=i($),mu=n($,"LI",{});var aAe=s(mu);jne=n(aAe,"STRONG",{});var nHr=s(jne);s1o=r(nHr,"xlm"),nHr.forEach(t),l1o=r(aAe," \u2014 "),DI=n(aAe,"A",{href:!0});var sHr=s(DI);i1o=r(sHr,"XLMModel"),sHr.forEach(t),d1o=r(aAe," (XLM model)"),aAe.forEach(t),c1o=i($),gu=n($,"LI",{});var nAe=s(gu);Dne=n(nAe,"STRONG",{});var lHr=s(Dne);f1o=r(lHr,"xlm-prophetnet"),lHr.forEach(t),m1o=r(nAe," \u2014 "),GI=n(nAe,"A",{href:!0});var iHr=s(GI);g1o=r(iHr,"XLMProphetNetModel"),iHr.forEach(t),h1o=r(nAe," (XLMProphetNet model)"),nAe.forEach(t),p1o=i($),hu=n($,"LI",{});var sAe=s(hu);Gne=n(sAe,"STRONG",{});var dHr=s(Gne);u1o=r(dHr,"xlm-roberta"),dHr.forEach(t),_1o=r(sAe," \u2014 "),OI=n(sAe,"A",{href:!0});var cHr=s(OI);b1o=r(cHr,"XLMRobertaModel"),cHr.forEach(t),v1o=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),F1o=i($),pu=n($,"LI",{});var lAe=s(pu);One=n(lAe,"STRONG",{});var fHr=s(One);T1o=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),M1o=r(lAe," \u2014 "),VI=n(lAe,"A",{href:!0});var mHr=s(VI);E1o=r(mHr,"XLMRobertaXLModel"),mHr.forEach(t),C1o=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),w1o=i($),uu=n($,"LI",{});var iAe=s(uu);Vne=n(iAe,"STRONG",{});var gHr=s(Vne);A1o=r(gHr,"xlnet"),gHr.forEach(t),y1o=r(iAe," \u2014 "),XI=n(iAe,"A",{href:!0});var hHr=s(XI);L1o=r(hHr,"XLNetModel"),hHr.forEach(t),x1o=r(iAe," (XLNet model)"),iAe.forEach(t),$1o=i($),_u=n($,"LI",{});var dAe=s(_u);Xne=n(dAe,"STRONG",{});var pHr=s(Xne);k1o=r(pHr,"yolos"),pHr.forEach(t),S1o=r(dAe," \u2014 "),zI=n(dAe,"A",{href:!0});var uHr=s(zI);R1o=r(uHr,"YolosModel"),uHr.forEach(t),B1o=r(dAe," (YOLOS model)"),dAe.forEach(t),P1o=i($),bu=n($,"LI",{});var cAe=s(bu);zne=n(cAe,"STRONG",{});var _Hr=s(zne);I1o=r(_Hr,"yoso"),_Hr.forEach(t),q1o=r(cAe," \u2014 "),QI=n(cAe,"A",{href:!0});var bHr=s(QI);N1o=r(bHr,"YosoModel"),bHr.forEach(t),j1o=r(cAe," (YOSO model)"),cAe.forEach(t),$.forEach(t),D1o=i(Jt),vu=n(Jt,"P",{});var fAe=s(vu);G1o=r(fAe,"The model is set in evaluation mode by default using "),Qne=n(fAe,"CODE",{});var vHr=s(Qne);O1o=r(vHr,"model.eval()"),vHr.forEach(t),V1o=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=n(fAe,"CODE",{});var FHr=s(Wne);X1o=r(FHr,"model.train()"),FHr.forEach(t),fAe.forEach(t),z1o=i(Jt),T(Fu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),RBe=i(f),bi=n(f,"H2",{class:!0});var PIe=s(bi);Tu=n(PIe,"A",{id:!0,class:!0,href:!0});var THr=s(Tu);Hne=n(THr,"SPAN",{});var MHr=s(Hne);T(r6.$$.fragment,MHr),MHr.forEach(t),THr.forEach(t),Q1o=i(PIe),Une=n(PIe,"SPAN",{});var EHr=s(Une);W1o=r(EHr,"AutoModelForPreTraining"),EHr.forEach(t),PIe.forEach(t),BBe=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(t6.$$.fragment,Is),H1o=i(Is),vi=n(Is,"P",{});var vY=s(vi);U1o=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WI=n(vY,"A",{href:!0});var CHr=s(WI);J1o=r(CHr,"from_pretrained()"),CHr.forEach(t),Y1o=r(vY," class method or the "),HI=n(vY,"A",{href:!0});var wHr=s(HI);K1o=r(wHr,"from_config()"),wHr.forEach(t),Z1o=r(vY,` class
method.`),vY.forEach(t),ebo=i(Is),a6=n(Is,"P",{});var IIe=s(a6);obo=r(IIe,"This class cannot be instantiated directly using "),Jne=n(IIe,"CODE",{});var AHr=s(Jne);rbo=r(AHr,"__init__()"),AHr.forEach(t),tbo=r(IIe," (throws an error)."),IIe.forEach(t),abo=i(Is),et=n(Is,"DIV",{class:!0});var Sw=s(et);T(n6.$$.fragment,Sw),nbo=i(Sw),Yne=n(Sw,"P",{});var yHr=s(Yne);sbo=r(yHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yHr.forEach(t),lbo=i(Sw),Fi=n(Sw,"P",{});var FY=s(Fi);ibo=r(FY,`Note:
Loading a model from its configuration file does `),Kne=n(FY,"STRONG",{});var LHr=s(Kne);dbo=r(LHr,"not"),LHr.forEach(t),cbo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=n(FY,"A",{href:!0});var xHr=s(UI);fbo=r(xHr,"from_pretrained()"),xHr.forEach(t),mbo=r(FY," to load the model weights."),FY.forEach(t),gbo=i(Sw),T(Mu.$$.fragment,Sw),Sw.forEach(t),hbo=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(s6.$$.fragment,Yt),pbo=i(Yt),Zne=n(Yt,"P",{});var $Hr=s(Zne);ubo=r($Hr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Hr.forEach(t),_bo=i(Yt),Ca=n(Yt,"P",{});var Rw=s(Ca);bbo=r(Rw,"The model class to instantiate is selected based on the "),ese=n(Rw,"CODE",{});var kHr=s(ese);vbo=r(kHr,"model_type"),kHr.forEach(t),Fbo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),ose=n(Rw,"CODE",{});var SHr=s(ose);Tbo=r(SHr,"pretrained_model_name_or_path"),SHr.forEach(t),Mbo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(Rw,"CODE",{});var RHr=s(rse);Ebo=r(RHr,"pretrained_model_name_or_path"),RHr.forEach(t),Cbo=r(Rw,":"),Rw.forEach(t),wbo=i(Yt),G=n(Yt,"UL",{});var V=s(G);Eu=n(V,"LI",{});var mAe=s(Eu);tse=n(mAe,"STRONG",{});var BHr=s(tse);Abo=r(BHr,"albert"),BHr.forEach(t),ybo=r(mAe," \u2014 "),JI=n(mAe,"A",{href:!0});var PHr=s(JI);Lbo=r(PHr,"AlbertForPreTraining"),PHr.forEach(t),xbo=r(mAe," (ALBERT model)"),mAe.forEach(t),$bo=i(V),Cu=n(V,"LI",{});var gAe=s(Cu);ase=n(gAe,"STRONG",{});var IHr=s(ase);kbo=r(IHr,"bart"),IHr.forEach(t),Sbo=r(gAe," \u2014 "),YI=n(gAe,"A",{href:!0});var qHr=s(YI);Rbo=r(qHr,"BartForConditionalGeneration"),qHr.forEach(t),Bbo=r(gAe," (BART model)"),gAe.forEach(t),Pbo=i(V),wu=n(V,"LI",{});var hAe=s(wu);nse=n(hAe,"STRONG",{});var NHr=s(nse);Ibo=r(NHr,"bert"),NHr.forEach(t),qbo=r(hAe," \u2014 "),KI=n(hAe,"A",{href:!0});var jHr=s(KI);Nbo=r(jHr,"BertForPreTraining"),jHr.forEach(t),jbo=r(hAe," (BERT model)"),hAe.forEach(t),Dbo=i(V),Au=n(V,"LI",{});var pAe=s(Au);sse=n(pAe,"STRONG",{});var DHr=s(sse);Gbo=r(DHr,"big_bird"),DHr.forEach(t),Obo=r(pAe," \u2014 "),ZI=n(pAe,"A",{href:!0});var GHr=s(ZI);Vbo=r(GHr,"BigBirdForPreTraining"),GHr.forEach(t),Xbo=r(pAe," (BigBird model)"),pAe.forEach(t),zbo=i(V),yu=n(V,"LI",{});var uAe=s(yu);lse=n(uAe,"STRONG",{});var OHr=s(lse);Qbo=r(OHr,"camembert"),OHr.forEach(t),Wbo=r(uAe," \u2014 "),eq=n(uAe,"A",{href:!0});var VHr=s(eq);Hbo=r(VHr,"CamembertForMaskedLM"),VHr.forEach(t),Ubo=r(uAe," (CamemBERT model)"),uAe.forEach(t),Jbo=i(V),Lu=n(V,"LI",{});var _Ae=s(Lu);ise=n(_Ae,"STRONG",{});var XHr=s(ise);Ybo=r(XHr,"ctrl"),XHr.forEach(t),Kbo=r(_Ae," \u2014 "),oq=n(_Ae,"A",{href:!0});var zHr=s(oq);Zbo=r(zHr,"CTRLLMHeadModel"),zHr.forEach(t),e2o=r(_Ae," (CTRL model)"),_Ae.forEach(t),o2o=i(V),xu=n(V,"LI",{});var bAe=s(xu);dse=n(bAe,"STRONG",{});var QHr=s(dse);r2o=r(QHr,"data2vec-text"),QHr.forEach(t),t2o=r(bAe," \u2014 "),rq=n(bAe,"A",{href:!0});var WHr=s(rq);a2o=r(WHr,"Data2VecTextForMaskedLM"),WHr.forEach(t),n2o=r(bAe," (Data2VecText model)"),bAe.forEach(t),s2o=i(V),$u=n(V,"LI",{});var vAe=s($u);cse=n(vAe,"STRONG",{});var HHr=s(cse);l2o=r(HHr,"deberta"),HHr.forEach(t),i2o=r(vAe," \u2014 "),tq=n(vAe,"A",{href:!0});var UHr=s(tq);d2o=r(UHr,"DebertaForMaskedLM"),UHr.forEach(t),c2o=r(vAe," (DeBERTa model)"),vAe.forEach(t),f2o=i(V),ku=n(V,"LI",{});var FAe=s(ku);fse=n(FAe,"STRONG",{});var JHr=s(fse);m2o=r(JHr,"deberta-v2"),JHr.forEach(t),g2o=r(FAe," \u2014 "),aq=n(FAe,"A",{href:!0});var YHr=s(aq);h2o=r(YHr,"DebertaV2ForMaskedLM"),YHr.forEach(t),p2o=r(FAe," (DeBERTa-v2 model)"),FAe.forEach(t),u2o=i(V),Su=n(V,"LI",{});var TAe=s(Su);mse=n(TAe,"STRONG",{});var KHr=s(mse);_2o=r(KHr,"distilbert"),KHr.forEach(t),b2o=r(TAe," \u2014 "),nq=n(TAe,"A",{href:!0});var ZHr=s(nq);v2o=r(ZHr,"DistilBertForMaskedLM"),ZHr.forEach(t),F2o=r(TAe," (DistilBERT model)"),TAe.forEach(t),T2o=i(V),Ru=n(V,"LI",{});var MAe=s(Ru);gse=n(MAe,"STRONG",{});var eUr=s(gse);M2o=r(eUr,"electra"),eUr.forEach(t),E2o=r(MAe," \u2014 "),sq=n(MAe,"A",{href:!0});var oUr=s(sq);C2o=r(oUr,"ElectraForPreTraining"),oUr.forEach(t),w2o=r(MAe," (ELECTRA model)"),MAe.forEach(t),A2o=i(V),Bu=n(V,"LI",{});var EAe=s(Bu);hse=n(EAe,"STRONG",{});var rUr=s(hse);y2o=r(rUr,"flaubert"),rUr.forEach(t),L2o=r(EAe," \u2014 "),lq=n(EAe,"A",{href:!0});var tUr=s(lq);x2o=r(tUr,"FlaubertWithLMHeadModel"),tUr.forEach(t),$2o=r(EAe," (FlauBERT model)"),EAe.forEach(t),k2o=i(V),Pu=n(V,"LI",{});var CAe=s(Pu);pse=n(CAe,"STRONG",{});var aUr=s(pse);S2o=r(aUr,"fnet"),aUr.forEach(t),R2o=r(CAe," \u2014 "),iq=n(CAe,"A",{href:!0});var nUr=s(iq);B2o=r(nUr,"FNetForPreTraining"),nUr.forEach(t),P2o=r(CAe," (FNet model)"),CAe.forEach(t),I2o=i(V),Iu=n(V,"LI",{});var wAe=s(Iu);use=n(wAe,"STRONG",{});var sUr=s(use);q2o=r(sUr,"fsmt"),sUr.forEach(t),N2o=r(wAe," \u2014 "),dq=n(wAe,"A",{href:!0});var lUr=s(dq);j2o=r(lUr,"FSMTForConditionalGeneration"),lUr.forEach(t),D2o=r(wAe," (FairSeq Machine-Translation model)"),wAe.forEach(t),G2o=i(V),qu=n(V,"LI",{});var AAe=s(qu);_se=n(AAe,"STRONG",{});var iUr=s(_se);O2o=r(iUr,"funnel"),iUr.forEach(t),V2o=r(AAe," \u2014 "),cq=n(AAe,"A",{href:!0});var dUr=s(cq);X2o=r(dUr,"FunnelForPreTraining"),dUr.forEach(t),z2o=r(AAe," (Funnel Transformer model)"),AAe.forEach(t),Q2o=i(V),Nu=n(V,"LI",{});var yAe=s(Nu);bse=n(yAe,"STRONG",{});var cUr=s(bse);W2o=r(cUr,"gpt2"),cUr.forEach(t),H2o=r(yAe," \u2014 "),fq=n(yAe,"A",{href:!0});var fUr=s(fq);U2o=r(fUr,"GPT2LMHeadModel"),fUr.forEach(t),J2o=r(yAe," (OpenAI GPT-2 model)"),yAe.forEach(t),Y2o=i(V),ju=n(V,"LI",{});var LAe=s(ju);vse=n(LAe,"STRONG",{});var mUr=s(vse);K2o=r(mUr,"ibert"),mUr.forEach(t),Z2o=r(LAe," \u2014 "),mq=n(LAe,"A",{href:!0});var gUr=s(mq);e5o=r(gUr,"IBertForMaskedLM"),gUr.forEach(t),o5o=r(LAe," (I-BERT model)"),LAe.forEach(t),r5o=i(V),Du=n(V,"LI",{});var xAe=s(Du);Fse=n(xAe,"STRONG",{});var hUr=s(Fse);t5o=r(hUr,"layoutlm"),hUr.forEach(t),a5o=r(xAe," \u2014 "),gq=n(xAe,"A",{href:!0});var pUr=s(gq);n5o=r(pUr,"LayoutLMForMaskedLM"),pUr.forEach(t),s5o=r(xAe," (LayoutLM model)"),xAe.forEach(t),l5o=i(V),Gu=n(V,"LI",{});var $Ae=s(Gu);Tse=n($Ae,"STRONG",{});var uUr=s(Tse);i5o=r(uUr,"longformer"),uUr.forEach(t),d5o=r($Ae," \u2014 "),hq=n($Ae,"A",{href:!0});var _Ur=s(hq);c5o=r(_Ur,"LongformerForMaskedLM"),_Ur.forEach(t),f5o=r($Ae," (Longformer model)"),$Ae.forEach(t),m5o=i(V),Ou=n(V,"LI",{});var kAe=s(Ou);Mse=n(kAe,"STRONG",{});var bUr=s(Mse);g5o=r(bUr,"lxmert"),bUr.forEach(t),h5o=r(kAe," \u2014 "),pq=n(kAe,"A",{href:!0});var vUr=s(pq);p5o=r(vUr,"LxmertForPreTraining"),vUr.forEach(t),u5o=r(kAe," (LXMERT model)"),kAe.forEach(t),_5o=i(V),Vu=n(V,"LI",{});var SAe=s(Vu);Ese=n(SAe,"STRONG",{});var FUr=s(Ese);b5o=r(FUr,"megatron-bert"),FUr.forEach(t),v5o=r(SAe," \u2014 "),uq=n(SAe,"A",{href:!0});var TUr=s(uq);F5o=r(TUr,"MegatronBertForPreTraining"),TUr.forEach(t),T5o=r(SAe," (MegatronBert model)"),SAe.forEach(t),M5o=i(V),Xu=n(V,"LI",{});var RAe=s(Xu);Cse=n(RAe,"STRONG",{});var MUr=s(Cse);E5o=r(MUr,"mobilebert"),MUr.forEach(t),C5o=r(RAe," \u2014 "),_q=n(RAe,"A",{href:!0});var EUr=s(_q);w5o=r(EUr,"MobileBertForPreTraining"),EUr.forEach(t),A5o=r(RAe," (MobileBERT model)"),RAe.forEach(t),y5o=i(V),zu=n(V,"LI",{});var BAe=s(zu);wse=n(BAe,"STRONG",{});var CUr=s(wse);L5o=r(CUr,"mpnet"),CUr.forEach(t),x5o=r(BAe," \u2014 "),bq=n(BAe,"A",{href:!0});var wUr=s(bq);$5o=r(wUr,"MPNetForMaskedLM"),wUr.forEach(t),k5o=r(BAe," (MPNet model)"),BAe.forEach(t),S5o=i(V),Qu=n(V,"LI",{});var PAe=s(Qu);Ase=n(PAe,"STRONG",{});var AUr=s(Ase);R5o=r(AUr,"openai-gpt"),AUr.forEach(t),B5o=r(PAe," \u2014 "),vq=n(PAe,"A",{href:!0});var yUr=s(vq);P5o=r(yUr,"OpenAIGPTLMHeadModel"),yUr.forEach(t),I5o=r(PAe," (OpenAI GPT model)"),PAe.forEach(t),q5o=i(V),Wu=n(V,"LI",{});var IAe=s(Wu);yse=n(IAe,"STRONG",{});var LUr=s(yse);N5o=r(LUr,"retribert"),LUr.forEach(t),j5o=r(IAe," \u2014 "),Fq=n(IAe,"A",{href:!0});var xUr=s(Fq);D5o=r(xUr,"RetriBertModel"),xUr.forEach(t),G5o=r(IAe," (RetriBERT model)"),IAe.forEach(t),O5o=i(V),Hu=n(V,"LI",{});var qAe=s(Hu);Lse=n(qAe,"STRONG",{});var $Ur=s(Lse);V5o=r($Ur,"roberta"),$Ur.forEach(t),X5o=r(qAe," \u2014 "),Tq=n(qAe,"A",{href:!0});var kUr=s(Tq);z5o=r(kUr,"RobertaForMaskedLM"),kUr.forEach(t),Q5o=r(qAe," (RoBERTa model)"),qAe.forEach(t),W5o=i(V),Uu=n(V,"LI",{});var NAe=s(Uu);xse=n(NAe,"STRONG",{});var SUr=s(xse);H5o=r(SUr,"squeezebert"),SUr.forEach(t),U5o=r(NAe," \u2014 "),Mq=n(NAe,"A",{href:!0});var RUr=s(Mq);J5o=r(RUr,"SqueezeBertForMaskedLM"),RUr.forEach(t),Y5o=r(NAe," (SqueezeBERT model)"),NAe.forEach(t),K5o=i(V),Ju=n(V,"LI",{});var jAe=s(Ju);$se=n(jAe,"STRONG",{});var BUr=s($se);Z5o=r(BUr,"t5"),BUr.forEach(t),e3o=r(jAe," \u2014 "),Eq=n(jAe,"A",{href:!0});var PUr=s(Eq);o3o=r(PUr,"T5ForConditionalGeneration"),PUr.forEach(t),r3o=r(jAe," (T5 model)"),jAe.forEach(t),t3o=i(V),Yu=n(V,"LI",{});var DAe=s(Yu);kse=n(DAe,"STRONG",{});var IUr=s(kse);a3o=r(IUr,"tapas"),IUr.forEach(t),n3o=r(DAe," \u2014 "),Cq=n(DAe,"A",{href:!0});var qUr=s(Cq);s3o=r(qUr,"TapasForMaskedLM"),qUr.forEach(t),l3o=r(DAe," (TAPAS model)"),DAe.forEach(t),i3o=i(V),Ku=n(V,"LI",{});var GAe=s(Ku);Sse=n(GAe,"STRONG",{});var NUr=s(Sse);d3o=r(NUr,"transfo-xl"),NUr.forEach(t),c3o=r(GAe," \u2014 "),wq=n(GAe,"A",{href:!0});var jUr=s(wq);f3o=r(jUr,"TransfoXLLMHeadModel"),jUr.forEach(t),m3o=r(GAe," (Transformer-XL model)"),GAe.forEach(t),g3o=i(V),Zu=n(V,"LI",{});var OAe=s(Zu);Rse=n(OAe,"STRONG",{});var DUr=s(Rse);h3o=r(DUr,"unispeech"),DUr.forEach(t),p3o=r(OAe," \u2014 "),Aq=n(OAe,"A",{href:!0});var GUr=s(Aq);u3o=r(GUr,"UniSpeechForPreTraining"),GUr.forEach(t),_3o=r(OAe," (UniSpeech model)"),OAe.forEach(t),b3o=i(V),e_=n(V,"LI",{});var VAe=s(e_);Bse=n(VAe,"STRONG",{});var OUr=s(Bse);v3o=r(OUr,"unispeech-sat"),OUr.forEach(t),F3o=r(VAe," \u2014 "),yq=n(VAe,"A",{href:!0});var VUr=s(yq);T3o=r(VUr,"UniSpeechSatForPreTraining"),VUr.forEach(t),M3o=r(VAe," (UniSpeechSat model)"),VAe.forEach(t),E3o=i(V),o_=n(V,"LI",{});var XAe=s(o_);Pse=n(XAe,"STRONG",{});var XUr=s(Pse);C3o=r(XUr,"visual_bert"),XUr.forEach(t),w3o=r(XAe," \u2014 "),Lq=n(XAe,"A",{href:!0});var zUr=s(Lq);A3o=r(zUr,"VisualBertForPreTraining"),zUr.forEach(t),y3o=r(XAe," (VisualBert model)"),XAe.forEach(t),L3o=i(V),r_=n(V,"LI",{});var zAe=s(r_);Ise=n(zAe,"STRONG",{});var QUr=s(Ise);x3o=r(QUr,"vit_mae"),QUr.forEach(t),$3o=r(zAe," \u2014 "),xq=n(zAe,"A",{href:!0});var WUr=s(xq);k3o=r(WUr,"ViTMAEForPreTraining"),WUr.forEach(t),S3o=r(zAe," (ViTMAE model)"),zAe.forEach(t),R3o=i(V),t_=n(V,"LI",{});var QAe=s(t_);qse=n(QAe,"STRONG",{});var HUr=s(qse);B3o=r(HUr,"wav2vec2"),HUr.forEach(t),P3o=r(QAe," \u2014 "),$q=n(QAe,"A",{href:!0});var UUr=s($q);I3o=r(UUr,"Wav2Vec2ForPreTraining"),UUr.forEach(t),q3o=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),N3o=i(V),a_=n(V,"LI",{});var WAe=s(a_);Nse=n(WAe,"STRONG",{});var JUr=s(Nse);j3o=r(JUr,"xlm"),JUr.forEach(t),D3o=r(WAe," \u2014 "),kq=n(WAe,"A",{href:!0});var YUr=s(kq);G3o=r(YUr,"XLMWithLMHeadModel"),YUr.forEach(t),O3o=r(WAe," (XLM model)"),WAe.forEach(t),V3o=i(V),n_=n(V,"LI",{});var HAe=s(n_);jse=n(HAe,"STRONG",{});var KUr=s(jse);X3o=r(KUr,"xlm-roberta"),KUr.forEach(t),z3o=r(HAe," \u2014 "),Sq=n(HAe,"A",{href:!0});var ZUr=s(Sq);Q3o=r(ZUr,"XLMRobertaForMaskedLM"),ZUr.forEach(t),W3o=r(HAe," (XLM-RoBERTa model)"),HAe.forEach(t),H3o=i(V),s_=n(V,"LI",{});var UAe=s(s_);Dse=n(UAe,"STRONG",{});var eJr=s(Dse);U3o=r(eJr,"xlm-roberta-xl"),eJr.forEach(t),J3o=r(UAe," \u2014 "),Rq=n(UAe,"A",{href:!0});var oJr=s(Rq);Y3o=r(oJr,"XLMRobertaXLForMaskedLM"),oJr.forEach(t),K3o=r(UAe," (XLM-RoBERTa-XL model)"),UAe.forEach(t),Z3o=i(V),l_=n(V,"LI",{});var JAe=s(l_);Gse=n(JAe,"STRONG",{});var rJr=s(Gse);evo=r(rJr,"xlnet"),rJr.forEach(t),ovo=r(JAe," \u2014 "),Bq=n(JAe,"A",{href:!0});var tJr=s(Bq);rvo=r(tJr,"XLNetLMHeadModel"),tJr.forEach(t),tvo=r(JAe," (XLNet model)"),JAe.forEach(t),V.forEach(t),avo=i(Yt),i_=n(Yt,"P",{});var YAe=s(i_);nvo=r(YAe,"The model is set in evaluation mode by default using "),Ose=n(YAe,"CODE",{});var aJr=s(Ose);svo=r(aJr,"model.eval()"),aJr.forEach(t),lvo=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=n(YAe,"CODE",{});var nJr=s(Vse);ivo=r(nJr,"model.train()"),nJr.forEach(t),YAe.forEach(t),dvo=i(Yt),T(d_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),PBe=i(f),Ti=n(f,"H2",{class:!0});var qIe=s(Ti);c_=n(qIe,"A",{id:!0,class:!0,href:!0});var sJr=s(c_);Xse=n(sJr,"SPAN",{});var lJr=s(Xse);T(l6.$$.fragment,lJr),lJr.forEach(t),sJr.forEach(t),cvo=i(qIe),zse=n(qIe,"SPAN",{});var iJr=s(zse);fvo=r(iJr,"AutoModelForCausalLM"),iJr.forEach(t),qIe.forEach(t),IBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(i6.$$.fragment,qs),mvo=i(qs),Mi=n(qs,"P",{});var TY=s(Mi);gvo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pq=n(TY,"A",{href:!0});var dJr=s(Pq);hvo=r(dJr,"from_pretrained()"),dJr.forEach(t),pvo=r(TY," class method or the "),Iq=n(TY,"A",{href:!0});var cJr=s(Iq);uvo=r(cJr,"from_config()"),cJr.forEach(t),_vo=r(TY,` class
method.`),TY.forEach(t),bvo=i(qs),d6=n(qs,"P",{});var NIe=s(d6);vvo=r(NIe,"This class cannot be instantiated directly using "),Qse=n(NIe,"CODE",{});var fJr=s(Qse);Fvo=r(fJr,"__init__()"),fJr.forEach(t),Tvo=r(NIe," (throws an error)."),NIe.forEach(t),Mvo=i(qs),ot=n(qs,"DIV",{class:!0});var Bw=s(ot);T(c6.$$.fragment,Bw),Evo=i(Bw),Wse=n(Bw,"P",{});var mJr=s(Wse);Cvo=r(mJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mJr.forEach(t),wvo=i(Bw),Ei=n(Bw,"P",{});var MY=s(Ei);Avo=r(MY,`Note:
Loading a model from its configuration file does `),Hse=n(MY,"STRONG",{});var gJr=s(Hse);yvo=r(gJr,"not"),gJr.forEach(t),Lvo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=n(MY,"A",{href:!0});var hJr=s(qq);xvo=r(hJr,"from_pretrained()"),hJr.forEach(t),$vo=r(MY," to load the model weights."),MY.forEach(t),kvo=i(Bw),T(f_.$$.fragment,Bw),Bw.forEach(t),Svo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(f6.$$.fragment,Kt),Rvo=i(Kt),Use=n(Kt,"P",{});var pJr=s(Use);Bvo=r(pJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pJr.forEach(t),Pvo=i(Kt),wa=n(Kt,"P",{});var Pw=s(wa);Ivo=r(Pw,"The model class to instantiate is selected based on the "),Jse=n(Pw,"CODE",{});var uJr=s(Jse);qvo=r(uJr,"model_type"),uJr.forEach(t),Nvo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Yse=n(Pw,"CODE",{});var _Jr=s(Yse);jvo=r(_Jr,"pretrained_model_name_or_path"),_Jr.forEach(t),Dvo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=n(Pw,"CODE",{});var bJr=s(Kse);Gvo=r(bJr,"pretrained_model_name_or_path"),bJr.forEach(t),Ovo=r(Pw,":"),Pw.forEach(t),Vvo=i(Kt),z=n(Kt,"UL",{});var W=s(z);m_=n(W,"LI",{});var KAe=s(m_);Zse=n(KAe,"STRONG",{});var vJr=s(Zse);Xvo=r(vJr,"bart"),vJr.forEach(t),zvo=r(KAe," \u2014 "),Nq=n(KAe,"A",{href:!0});var FJr=s(Nq);Qvo=r(FJr,"BartForCausalLM"),FJr.forEach(t),Wvo=r(KAe," (BART model)"),KAe.forEach(t),Hvo=i(W),g_=n(W,"LI",{});var ZAe=s(g_);ele=n(ZAe,"STRONG",{});var TJr=s(ele);Uvo=r(TJr,"bert"),TJr.forEach(t),Jvo=r(ZAe," \u2014 "),jq=n(ZAe,"A",{href:!0});var MJr=s(jq);Yvo=r(MJr,"BertLMHeadModel"),MJr.forEach(t),Kvo=r(ZAe," (BERT model)"),ZAe.forEach(t),Zvo=i(W),h_=n(W,"LI",{});var e0e=s(h_);ole=n(e0e,"STRONG",{});var EJr=s(ole);eFo=r(EJr,"bert-generation"),EJr.forEach(t),oFo=r(e0e," \u2014 "),Dq=n(e0e,"A",{href:!0});var CJr=s(Dq);rFo=r(CJr,"BertGenerationDecoder"),CJr.forEach(t),tFo=r(e0e," (Bert Generation model)"),e0e.forEach(t),aFo=i(W),p_=n(W,"LI",{});var o0e=s(p_);rle=n(o0e,"STRONG",{});var wJr=s(rle);nFo=r(wJr,"big_bird"),wJr.forEach(t),sFo=r(o0e," \u2014 "),Gq=n(o0e,"A",{href:!0});var AJr=s(Gq);lFo=r(AJr,"BigBirdForCausalLM"),AJr.forEach(t),iFo=r(o0e," (BigBird model)"),o0e.forEach(t),dFo=i(W),u_=n(W,"LI",{});var r0e=s(u_);tle=n(r0e,"STRONG",{});var yJr=s(tle);cFo=r(yJr,"bigbird_pegasus"),yJr.forEach(t),fFo=r(r0e," \u2014 "),Oq=n(r0e,"A",{href:!0});var LJr=s(Oq);mFo=r(LJr,"BigBirdPegasusForCausalLM"),LJr.forEach(t),gFo=r(r0e," (BigBirdPegasus model)"),r0e.forEach(t),hFo=i(W),__=n(W,"LI",{});var t0e=s(__);ale=n(t0e,"STRONG",{});var xJr=s(ale);pFo=r(xJr,"blenderbot"),xJr.forEach(t),uFo=r(t0e," \u2014 "),Vq=n(t0e,"A",{href:!0});var $Jr=s(Vq);_Fo=r($Jr,"BlenderbotForCausalLM"),$Jr.forEach(t),bFo=r(t0e," (Blenderbot model)"),t0e.forEach(t),vFo=i(W),b_=n(W,"LI",{});var a0e=s(b_);nle=n(a0e,"STRONG",{});var kJr=s(nle);FFo=r(kJr,"blenderbot-small"),kJr.forEach(t),TFo=r(a0e," \u2014 "),Xq=n(a0e,"A",{href:!0});var SJr=s(Xq);MFo=r(SJr,"BlenderbotSmallForCausalLM"),SJr.forEach(t),EFo=r(a0e," (BlenderbotSmall model)"),a0e.forEach(t),CFo=i(W),v_=n(W,"LI",{});var n0e=s(v_);sle=n(n0e,"STRONG",{});var RJr=s(sle);wFo=r(RJr,"camembert"),RJr.forEach(t),AFo=r(n0e," \u2014 "),zq=n(n0e,"A",{href:!0});var BJr=s(zq);yFo=r(BJr,"CamembertForCausalLM"),BJr.forEach(t),LFo=r(n0e," (CamemBERT model)"),n0e.forEach(t),xFo=i(W),F_=n(W,"LI",{});var s0e=s(F_);lle=n(s0e,"STRONG",{});var PJr=s(lle);$Fo=r(PJr,"ctrl"),PJr.forEach(t),kFo=r(s0e," \u2014 "),Qq=n(s0e,"A",{href:!0});var IJr=s(Qq);SFo=r(IJr,"CTRLLMHeadModel"),IJr.forEach(t),RFo=r(s0e," (CTRL model)"),s0e.forEach(t),BFo=i(W),T_=n(W,"LI",{});var l0e=s(T_);ile=n(l0e,"STRONG",{});var qJr=s(ile);PFo=r(qJr,"data2vec-text"),qJr.forEach(t),IFo=r(l0e," \u2014 "),Wq=n(l0e,"A",{href:!0});var NJr=s(Wq);qFo=r(NJr,"Data2VecTextForCausalLM"),NJr.forEach(t),NFo=r(l0e," (Data2VecText model)"),l0e.forEach(t),jFo=i(W),M_=n(W,"LI",{});var i0e=s(M_);dle=n(i0e,"STRONG",{});var jJr=s(dle);DFo=r(jJr,"electra"),jJr.forEach(t),GFo=r(i0e," \u2014 "),Hq=n(i0e,"A",{href:!0});var DJr=s(Hq);OFo=r(DJr,"ElectraForCausalLM"),DJr.forEach(t),VFo=r(i0e," (ELECTRA model)"),i0e.forEach(t),XFo=i(W),E_=n(W,"LI",{});var d0e=s(E_);cle=n(d0e,"STRONG",{});var GJr=s(cle);zFo=r(GJr,"gpt2"),GJr.forEach(t),QFo=r(d0e," \u2014 "),Uq=n(d0e,"A",{href:!0});var OJr=s(Uq);WFo=r(OJr,"GPT2LMHeadModel"),OJr.forEach(t),HFo=r(d0e," (OpenAI GPT-2 model)"),d0e.forEach(t),UFo=i(W),C_=n(W,"LI",{});var c0e=s(C_);fle=n(c0e,"STRONG",{});var VJr=s(fle);JFo=r(VJr,"gpt_neo"),VJr.forEach(t),YFo=r(c0e," \u2014 "),Jq=n(c0e,"A",{href:!0});var XJr=s(Jq);KFo=r(XJr,"GPTNeoForCausalLM"),XJr.forEach(t),ZFo=r(c0e," (GPT Neo model)"),c0e.forEach(t),eTo=i(W),w_=n(W,"LI",{});var f0e=s(w_);mle=n(f0e,"STRONG",{});var zJr=s(mle);oTo=r(zJr,"gptj"),zJr.forEach(t),rTo=r(f0e," \u2014 "),Yq=n(f0e,"A",{href:!0});var QJr=s(Yq);tTo=r(QJr,"GPTJForCausalLM"),QJr.forEach(t),aTo=r(f0e," (GPT-J model)"),f0e.forEach(t),nTo=i(W),A_=n(W,"LI",{});var m0e=s(A_);gle=n(m0e,"STRONG",{});var WJr=s(gle);sTo=r(WJr,"marian"),WJr.forEach(t),lTo=r(m0e," \u2014 "),Kq=n(m0e,"A",{href:!0});var HJr=s(Kq);iTo=r(HJr,"MarianForCausalLM"),HJr.forEach(t),dTo=r(m0e," (Marian model)"),m0e.forEach(t),cTo=i(W),y_=n(W,"LI",{});var g0e=s(y_);hle=n(g0e,"STRONG",{});var UJr=s(hle);fTo=r(UJr,"mbart"),UJr.forEach(t),mTo=r(g0e," \u2014 "),Zq=n(g0e,"A",{href:!0});var JJr=s(Zq);gTo=r(JJr,"MBartForCausalLM"),JJr.forEach(t),hTo=r(g0e," (mBART model)"),g0e.forEach(t),pTo=i(W),L_=n(W,"LI",{});var h0e=s(L_);ple=n(h0e,"STRONG",{});var YJr=s(ple);uTo=r(YJr,"megatron-bert"),YJr.forEach(t),_To=r(h0e," \u2014 "),eN=n(h0e,"A",{href:!0});var KJr=s(eN);bTo=r(KJr,"MegatronBertForCausalLM"),KJr.forEach(t),vTo=r(h0e," (MegatronBert model)"),h0e.forEach(t),FTo=i(W),x_=n(W,"LI",{});var p0e=s(x_);ule=n(p0e,"STRONG",{});var ZJr=s(ule);TTo=r(ZJr,"openai-gpt"),ZJr.forEach(t),MTo=r(p0e," \u2014 "),oN=n(p0e,"A",{href:!0});var eYr=s(oN);ETo=r(eYr,"OpenAIGPTLMHeadModel"),eYr.forEach(t),CTo=r(p0e," (OpenAI GPT model)"),p0e.forEach(t),wTo=i(W),$_=n(W,"LI",{});var u0e=s($_);_le=n(u0e,"STRONG",{});var oYr=s(_le);ATo=r(oYr,"pegasus"),oYr.forEach(t),yTo=r(u0e," \u2014 "),rN=n(u0e,"A",{href:!0});var rYr=s(rN);LTo=r(rYr,"PegasusForCausalLM"),rYr.forEach(t),xTo=r(u0e," (Pegasus model)"),u0e.forEach(t),$To=i(W),k_=n(W,"LI",{});var _0e=s(k_);ble=n(_0e,"STRONG",{});var tYr=s(ble);kTo=r(tYr,"plbart"),tYr.forEach(t),STo=r(_0e," \u2014 "),tN=n(_0e,"A",{href:!0});var aYr=s(tN);RTo=r(aYr,"PLBartForCausalLM"),aYr.forEach(t),BTo=r(_0e," (PLBart model)"),_0e.forEach(t),PTo=i(W),S_=n(W,"LI",{});var b0e=s(S_);vle=n(b0e,"STRONG",{});var nYr=s(vle);ITo=r(nYr,"prophetnet"),nYr.forEach(t),qTo=r(b0e," \u2014 "),aN=n(b0e,"A",{href:!0});var sYr=s(aN);NTo=r(sYr,"ProphetNetForCausalLM"),sYr.forEach(t),jTo=r(b0e," (ProphetNet model)"),b0e.forEach(t),DTo=i(W),R_=n(W,"LI",{});var v0e=s(R_);Fle=n(v0e,"STRONG",{});var lYr=s(Fle);GTo=r(lYr,"qdqbert"),lYr.forEach(t),OTo=r(v0e," \u2014 "),nN=n(v0e,"A",{href:!0});var iYr=s(nN);VTo=r(iYr,"QDQBertLMHeadModel"),iYr.forEach(t),XTo=r(v0e," (QDQBert model)"),v0e.forEach(t),zTo=i(W),B_=n(W,"LI",{});var F0e=s(B_);Tle=n(F0e,"STRONG",{});var dYr=s(Tle);QTo=r(dYr,"reformer"),dYr.forEach(t),WTo=r(F0e," \u2014 "),sN=n(F0e,"A",{href:!0});var cYr=s(sN);HTo=r(cYr,"ReformerModelWithLMHead"),cYr.forEach(t),UTo=r(F0e," (Reformer model)"),F0e.forEach(t),JTo=i(W),P_=n(W,"LI",{});var T0e=s(P_);Mle=n(T0e,"STRONG",{});var fYr=s(Mle);YTo=r(fYr,"rembert"),fYr.forEach(t),KTo=r(T0e," \u2014 "),lN=n(T0e,"A",{href:!0});var mYr=s(lN);ZTo=r(mYr,"RemBertForCausalLM"),mYr.forEach(t),e7o=r(T0e," (RemBERT model)"),T0e.forEach(t),o7o=i(W),I_=n(W,"LI",{});var M0e=s(I_);Ele=n(M0e,"STRONG",{});var gYr=s(Ele);r7o=r(gYr,"roberta"),gYr.forEach(t),t7o=r(M0e," \u2014 "),iN=n(M0e,"A",{href:!0});var hYr=s(iN);a7o=r(hYr,"RobertaForCausalLM"),hYr.forEach(t),n7o=r(M0e," (RoBERTa model)"),M0e.forEach(t),s7o=i(W),q_=n(W,"LI",{});var E0e=s(q_);Cle=n(E0e,"STRONG",{});var pYr=s(Cle);l7o=r(pYr,"roformer"),pYr.forEach(t),i7o=r(E0e," \u2014 "),dN=n(E0e,"A",{href:!0});var uYr=s(dN);d7o=r(uYr,"RoFormerForCausalLM"),uYr.forEach(t),c7o=r(E0e," (RoFormer model)"),E0e.forEach(t),f7o=i(W),N_=n(W,"LI",{});var C0e=s(N_);wle=n(C0e,"STRONG",{});var _Yr=s(wle);m7o=r(_Yr,"speech_to_text_2"),_Yr.forEach(t),g7o=r(C0e," \u2014 "),cN=n(C0e,"A",{href:!0});var bYr=s(cN);h7o=r(bYr,"Speech2Text2ForCausalLM"),bYr.forEach(t),p7o=r(C0e," (Speech2Text2 model)"),C0e.forEach(t),u7o=i(W),j_=n(W,"LI",{});var w0e=s(j_);Ale=n(w0e,"STRONG",{});var vYr=s(Ale);_7o=r(vYr,"transfo-xl"),vYr.forEach(t),b7o=r(w0e," \u2014 "),fN=n(w0e,"A",{href:!0});var FYr=s(fN);v7o=r(FYr,"TransfoXLLMHeadModel"),FYr.forEach(t),F7o=r(w0e," (Transformer-XL model)"),w0e.forEach(t),T7o=i(W),D_=n(W,"LI",{});var A0e=s(D_);yle=n(A0e,"STRONG",{});var TYr=s(yle);M7o=r(TYr,"trocr"),TYr.forEach(t),E7o=r(A0e," \u2014 "),mN=n(A0e,"A",{href:!0});var MYr=s(mN);C7o=r(MYr,"TrOCRForCausalLM"),MYr.forEach(t),w7o=r(A0e," (TrOCR model)"),A0e.forEach(t),A7o=i(W),G_=n(W,"LI",{});var y0e=s(G_);Lle=n(y0e,"STRONG",{});var EYr=s(Lle);y7o=r(EYr,"xglm"),EYr.forEach(t),L7o=r(y0e," \u2014 "),gN=n(y0e,"A",{href:!0});var CYr=s(gN);x7o=r(CYr,"XGLMForCausalLM"),CYr.forEach(t),$7o=r(y0e," (XGLM model)"),y0e.forEach(t),k7o=i(W),O_=n(W,"LI",{});var L0e=s(O_);xle=n(L0e,"STRONG",{});var wYr=s(xle);S7o=r(wYr,"xlm"),wYr.forEach(t),R7o=r(L0e," \u2014 "),hN=n(L0e,"A",{href:!0});var AYr=s(hN);B7o=r(AYr,"XLMWithLMHeadModel"),AYr.forEach(t),P7o=r(L0e," (XLM model)"),L0e.forEach(t),I7o=i(W),V_=n(W,"LI",{});var x0e=s(V_);$le=n(x0e,"STRONG",{});var yYr=s($le);q7o=r(yYr,"xlm-prophetnet"),yYr.forEach(t),N7o=r(x0e," \u2014 "),pN=n(x0e,"A",{href:!0});var LYr=s(pN);j7o=r(LYr,"XLMProphetNetForCausalLM"),LYr.forEach(t),D7o=r(x0e," (XLMProphetNet model)"),x0e.forEach(t),G7o=i(W),X_=n(W,"LI",{});var $0e=s(X_);kle=n($0e,"STRONG",{});var xYr=s(kle);O7o=r(xYr,"xlm-roberta"),xYr.forEach(t),V7o=r($0e," \u2014 "),uN=n($0e,"A",{href:!0});var $Yr=s(uN);X7o=r($Yr,"XLMRobertaForCausalLM"),$Yr.forEach(t),z7o=r($0e," (XLM-RoBERTa model)"),$0e.forEach(t),Q7o=i(W),z_=n(W,"LI",{});var k0e=s(z_);Sle=n(k0e,"STRONG",{});var kYr=s(Sle);W7o=r(kYr,"xlm-roberta-xl"),kYr.forEach(t),H7o=r(k0e," \u2014 "),_N=n(k0e,"A",{href:!0});var SYr=s(_N);U7o=r(SYr,"XLMRobertaXLForCausalLM"),SYr.forEach(t),J7o=r(k0e," (XLM-RoBERTa-XL model)"),k0e.forEach(t),Y7o=i(W),Q_=n(W,"LI",{});var S0e=s(Q_);Rle=n(S0e,"STRONG",{});var RYr=s(Rle);K7o=r(RYr,"xlnet"),RYr.forEach(t),Z7o=r(S0e," \u2014 "),bN=n(S0e,"A",{href:!0});var BYr=s(bN);eMo=r(BYr,"XLNetLMHeadModel"),BYr.forEach(t),oMo=r(S0e," (XLNet model)"),S0e.forEach(t),W.forEach(t),rMo=i(Kt),W_=n(Kt,"P",{});var R0e=s(W_);tMo=r(R0e,"The model is set in evaluation mode by default using "),Ble=n(R0e,"CODE",{});var PYr=s(Ble);aMo=r(PYr,"model.eval()"),PYr.forEach(t),nMo=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=n(R0e,"CODE",{});var IYr=s(Ple);sMo=r(IYr,"model.train()"),IYr.forEach(t),R0e.forEach(t),lMo=i(Kt),T(H_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),qBe=i(f),Ci=n(f,"H2",{class:!0});var jIe=s(Ci);U_=n(jIe,"A",{id:!0,class:!0,href:!0});var qYr=s(U_);Ile=n(qYr,"SPAN",{});var NYr=s(Ile);T(m6.$$.fragment,NYr),NYr.forEach(t),qYr.forEach(t),iMo=i(jIe),qle=n(jIe,"SPAN",{});var jYr=s(qle);dMo=r(jYr,"AutoModelForMaskedLM"),jYr.forEach(t),jIe.forEach(t),NBe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(g6.$$.fragment,Ns),cMo=i(Ns),wi=n(Ns,"P",{});var EY=s(wi);fMo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vN=n(EY,"A",{href:!0});var DYr=s(vN);mMo=r(DYr,"from_pretrained()"),DYr.forEach(t),gMo=r(EY," class method or the "),FN=n(EY,"A",{href:!0});var GYr=s(FN);hMo=r(GYr,"from_config()"),GYr.forEach(t),pMo=r(EY,` class
method.`),EY.forEach(t),uMo=i(Ns),h6=n(Ns,"P",{});var DIe=s(h6);_Mo=r(DIe,"This class cannot be instantiated directly using "),Nle=n(DIe,"CODE",{});var OYr=s(Nle);bMo=r(OYr,"__init__()"),OYr.forEach(t),vMo=r(DIe," (throws an error)."),DIe.forEach(t),FMo=i(Ns),rt=n(Ns,"DIV",{class:!0});var Iw=s(rt);T(p6.$$.fragment,Iw),TMo=i(Iw),jle=n(Iw,"P",{});var VYr=s(jle);MMo=r(VYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VYr.forEach(t),EMo=i(Iw),Ai=n(Iw,"P",{});var CY=s(Ai);CMo=r(CY,`Note:
Loading a model from its configuration file does `),Dle=n(CY,"STRONG",{});var XYr=s(Dle);wMo=r(XYr,"not"),XYr.forEach(t),AMo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(CY,"A",{href:!0});var zYr=s(TN);yMo=r(zYr,"from_pretrained()"),zYr.forEach(t),LMo=r(CY," to load the model weights."),CY.forEach(t),xMo=i(Iw),T(J_.$$.fragment,Iw),Iw.forEach(t),$Mo=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(u6.$$.fragment,Zt),kMo=i(Zt),Gle=n(Zt,"P",{});var QYr=s(Gle);SMo=r(QYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QYr.forEach(t),RMo=i(Zt),Aa=n(Zt,"P",{});var qw=s(Aa);BMo=r(qw,"The model class to instantiate is selected based on the "),Ole=n(qw,"CODE",{});var WYr=s(Ole);PMo=r(WYr,"model_type"),WYr.forEach(t),IMo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Vle=n(qw,"CODE",{});var HYr=s(Vle);qMo=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),NMo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(qw,"CODE",{});var UYr=s(Xle);jMo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),DMo=r(qw,":"),qw.forEach(t),GMo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);Y_=n(H,"LI",{});var B0e=s(Y_);zle=n(B0e,"STRONG",{});var JYr=s(zle);OMo=r(JYr,"albert"),JYr.forEach(t),VMo=r(B0e," \u2014 "),MN=n(B0e,"A",{href:!0});var YYr=s(MN);XMo=r(YYr,"AlbertForMaskedLM"),YYr.forEach(t),zMo=r(B0e," (ALBERT model)"),B0e.forEach(t),QMo=i(H),K_=n(H,"LI",{});var P0e=s(K_);Qle=n(P0e,"STRONG",{});var KYr=s(Qle);WMo=r(KYr,"bart"),KYr.forEach(t),HMo=r(P0e," \u2014 "),EN=n(P0e,"A",{href:!0});var ZYr=s(EN);UMo=r(ZYr,"BartForConditionalGeneration"),ZYr.forEach(t),JMo=r(P0e," (BART model)"),P0e.forEach(t),YMo=i(H),Z_=n(H,"LI",{});var I0e=s(Z_);Wle=n(I0e,"STRONG",{});var eKr=s(Wle);KMo=r(eKr,"bert"),eKr.forEach(t),ZMo=r(I0e," \u2014 "),CN=n(I0e,"A",{href:!0});var oKr=s(CN);e4o=r(oKr,"BertForMaskedLM"),oKr.forEach(t),o4o=r(I0e," (BERT model)"),I0e.forEach(t),r4o=i(H),e1=n(H,"LI",{});var q0e=s(e1);Hle=n(q0e,"STRONG",{});var rKr=s(Hle);t4o=r(rKr,"big_bird"),rKr.forEach(t),a4o=r(q0e," \u2014 "),wN=n(q0e,"A",{href:!0});var tKr=s(wN);n4o=r(tKr,"BigBirdForMaskedLM"),tKr.forEach(t),s4o=r(q0e," (BigBird model)"),q0e.forEach(t),l4o=i(H),o1=n(H,"LI",{});var N0e=s(o1);Ule=n(N0e,"STRONG",{});var aKr=s(Ule);i4o=r(aKr,"camembert"),aKr.forEach(t),d4o=r(N0e," \u2014 "),AN=n(N0e,"A",{href:!0});var nKr=s(AN);c4o=r(nKr,"CamembertForMaskedLM"),nKr.forEach(t),f4o=r(N0e," (CamemBERT model)"),N0e.forEach(t),m4o=i(H),r1=n(H,"LI",{});var j0e=s(r1);Jle=n(j0e,"STRONG",{});var sKr=s(Jle);g4o=r(sKr,"convbert"),sKr.forEach(t),h4o=r(j0e," \u2014 "),yN=n(j0e,"A",{href:!0});var lKr=s(yN);p4o=r(lKr,"ConvBertForMaskedLM"),lKr.forEach(t),u4o=r(j0e," (ConvBERT model)"),j0e.forEach(t),_4o=i(H),t1=n(H,"LI",{});var D0e=s(t1);Yle=n(D0e,"STRONG",{});var iKr=s(Yle);b4o=r(iKr,"data2vec-text"),iKr.forEach(t),v4o=r(D0e," \u2014 "),LN=n(D0e,"A",{href:!0});var dKr=s(LN);F4o=r(dKr,"Data2VecTextForMaskedLM"),dKr.forEach(t),T4o=r(D0e," (Data2VecText model)"),D0e.forEach(t),M4o=i(H),a1=n(H,"LI",{});var G0e=s(a1);Kle=n(G0e,"STRONG",{});var cKr=s(Kle);E4o=r(cKr,"deberta"),cKr.forEach(t),C4o=r(G0e," \u2014 "),xN=n(G0e,"A",{href:!0});var fKr=s(xN);w4o=r(fKr,"DebertaForMaskedLM"),fKr.forEach(t),A4o=r(G0e," (DeBERTa model)"),G0e.forEach(t),y4o=i(H),n1=n(H,"LI",{});var O0e=s(n1);Zle=n(O0e,"STRONG",{});var mKr=s(Zle);L4o=r(mKr,"deberta-v2"),mKr.forEach(t),x4o=r(O0e," \u2014 "),$N=n(O0e,"A",{href:!0});var gKr=s($N);$4o=r(gKr,"DebertaV2ForMaskedLM"),gKr.forEach(t),k4o=r(O0e," (DeBERTa-v2 model)"),O0e.forEach(t),S4o=i(H),s1=n(H,"LI",{});var V0e=s(s1);eie=n(V0e,"STRONG",{});var hKr=s(eie);R4o=r(hKr,"distilbert"),hKr.forEach(t),B4o=r(V0e," \u2014 "),kN=n(V0e,"A",{href:!0});var pKr=s(kN);P4o=r(pKr,"DistilBertForMaskedLM"),pKr.forEach(t),I4o=r(V0e," (DistilBERT model)"),V0e.forEach(t),q4o=i(H),l1=n(H,"LI",{});var X0e=s(l1);oie=n(X0e,"STRONG",{});var uKr=s(oie);N4o=r(uKr,"electra"),uKr.forEach(t),j4o=r(X0e," \u2014 "),SN=n(X0e,"A",{href:!0});var _Kr=s(SN);D4o=r(_Kr,"ElectraForMaskedLM"),_Kr.forEach(t),G4o=r(X0e," (ELECTRA model)"),X0e.forEach(t),O4o=i(H),i1=n(H,"LI",{});var z0e=s(i1);rie=n(z0e,"STRONG",{});var bKr=s(rie);V4o=r(bKr,"flaubert"),bKr.forEach(t),X4o=r(z0e," \u2014 "),RN=n(z0e,"A",{href:!0});var vKr=s(RN);z4o=r(vKr,"FlaubertWithLMHeadModel"),vKr.forEach(t),Q4o=r(z0e," (FlauBERT model)"),z0e.forEach(t),W4o=i(H),d1=n(H,"LI",{});var Q0e=s(d1);tie=n(Q0e,"STRONG",{});var FKr=s(tie);H4o=r(FKr,"fnet"),FKr.forEach(t),U4o=r(Q0e," \u2014 "),BN=n(Q0e,"A",{href:!0});var TKr=s(BN);J4o=r(TKr,"FNetForMaskedLM"),TKr.forEach(t),Y4o=r(Q0e," (FNet model)"),Q0e.forEach(t),K4o=i(H),c1=n(H,"LI",{});var W0e=s(c1);aie=n(W0e,"STRONG",{});var MKr=s(aie);Z4o=r(MKr,"funnel"),MKr.forEach(t),eEo=r(W0e," \u2014 "),PN=n(W0e,"A",{href:!0});var EKr=s(PN);oEo=r(EKr,"FunnelForMaskedLM"),EKr.forEach(t),rEo=r(W0e," (Funnel Transformer model)"),W0e.forEach(t),tEo=i(H),f1=n(H,"LI",{});var H0e=s(f1);nie=n(H0e,"STRONG",{});var CKr=s(nie);aEo=r(CKr,"ibert"),CKr.forEach(t),nEo=r(H0e," \u2014 "),IN=n(H0e,"A",{href:!0});var wKr=s(IN);sEo=r(wKr,"IBertForMaskedLM"),wKr.forEach(t),lEo=r(H0e," (I-BERT model)"),H0e.forEach(t),iEo=i(H),m1=n(H,"LI",{});var U0e=s(m1);sie=n(U0e,"STRONG",{});var AKr=s(sie);dEo=r(AKr,"layoutlm"),AKr.forEach(t),cEo=r(U0e," \u2014 "),qN=n(U0e,"A",{href:!0});var yKr=s(qN);fEo=r(yKr,"LayoutLMForMaskedLM"),yKr.forEach(t),mEo=r(U0e," (LayoutLM model)"),U0e.forEach(t),gEo=i(H),g1=n(H,"LI",{});var J0e=s(g1);lie=n(J0e,"STRONG",{});var LKr=s(lie);hEo=r(LKr,"longformer"),LKr.forEach(t),pEo=r(J0e," \u2014 "),NN=n(J0e,"A",{href:!0});var xKr=s(NN);uEo=r(xKr,"LongformerForMaskedLM"),xKr.forEach(t),_Eo=r(J0e," (Longformer model)"),J0e.forEach(t),bEo=i(H),h1=n(H,"LI",{});var Y0e=s(h1);iie=n(Y0e,"STRONG",{});var $Kr=s(iie);vEo=r($Kr,"mbart"),$Kr.forEach(t),FEo=r(Y0e," \u2014 "),jN=n(Y0e,"A",{href:!0});var kKr=s(jN);TEo=r(kKr,"MBartForConditionalGeneration"),kKr.forEach(t),MEo=r(Y0e," (mBART model)"),Y0e.forEach(t),EEo=i(H),p1=n(H,"LI",{});var K0e=s(p1);die=n(K0e,"STRONG",{});var SKr=s(die);CEo=r(SKr,"megatron-bert"),SKr.forEach(t),wEo=r(K0e," \u2014 "),DN=n(K0e,"A",{href:!0});var RKr=s(DN);AEo=r(RKr,"MegatronBertForMaskedLM"),RKr.forEach(t),yEo=r(K0e," (MegatronBert model)"),K0e.forEach(t),LEo=i(H),u1=n(H,"LI",{});var Z0e=s(u1);cie=n(Z0e,"STRONG",{});var BKr=s(cie);xEo=r(BKr,"mobilebert"),BKr.forEach(t),$Eo=r(Z0e," \u2014 "),GN=n(Z0e,"A",{href:!0});var PKr=s(GN);kEo=r(PKr,"MobileBertForMaskedLM"),PKr.forEach(t),SEo=r(Z0e," (MobileBERT model)"),Z0e.forEach(t),REo=i(H),_1=n(H,"LI",{});var e6e=s(_1);fie=n(e6e,"STRONG",{});var IKr=s(fie);BEo=r(IKr,"mpnet"),IKr.forEach(t),PEo=r(e6e," \u2014 "),ON=n(e6e,"A",{href:!0});var qKr=s(ON);IEo=r(qKr,"MPNetForMaskedLM"),qKr.forEach(t),qEo=r(e6e," (MPNet model)"),e6e.forEach(t),NEo=i(H),b1=n(H,"LI",{});var o6e=s(b1);mie=n(o6e,"STRONG",{});var NKr=s(mie);jEo=r(NKr,"nystromformer"),NKr.forEach(t),DEo=r(o6e," \u2014 "),VN=n(o6e,"A",{href:!0});var jKr=s(VN);GEo=r(jKr,"NystromformerForMaskedLM"),jKr.forEach(t),OEo=r(o6e," (Nystromformer model)"),o6e.forEach(t),VEo=i(H),v1=n(H,"LI",{});var r6e=s(v1);gie=n(r6e,"STRONG",{});var DKr=s(gie);XEo=r(DKr,"perceiver"),DKr.forEach(t),zEo=r(r6e," \u2014 "),XN=n(r6e,"A",{href:!0});var GKr=s(XN);QEo=r(GKr,"PerceiverForMaskedLM"),GKr.forEach(t),WEo=r(r6e," (Perceiver model)"),r6e.forEach(t),HEo=i(H),F1=n(H,"LI",{});var t6e=s(F1);hie=n(t6e,"STRONG",{});var OKr=s(hie);UEo=r(OKr,"qdqbert"),OKr.forEach(t),JEo=r(t6e," \u2014 "),zN=n(t6e,"A",{href:!0});var VKr=s(zN);YEo=r(VKr,"QDQBertForMaskedLM"),VKr.forEach(t),KEo=r(t6e," (QDQBert model)"),t6e.forEach(t),ZEo=i(H),T1=n(H,"LI",{});var a6e=s(T1);pie=n(a6e,"STRONG",{});var XKr=s(pie);eCo=r(XKr,"reformer"),XKr.forEach(t),oCo=r(a6e," \u2014 "),QN=n(a6e,"A",{href:!0});var zKr=s(QN);rCo=r(zKr,"ReformerForMaskedLM"),zKr.forEach(t),tCo=r(a6e," (Reformer model)"),a6e.forEach(t),aCo=i(H),M1=n(H,"LI",{});var n6e=s(M1);uie=n(n6e,"STRONG",{});var QKr=s(uie);nCo=r(QKr,"rembert"),QKr.forEach(t),sCo=r(n6e," \u2014 "),WN=n(n6e,"A",{href:!0});var WKr=s(WN);lCo=r(WKr,"RemBertForMaskedLM"),WKr.forEach(t),iCo=r(n6e," (RemBERT model)"),n6e.forEach(t),dCo=i(H),E1=n(H,"LI",{});var s6e=s(E1);_ie=n(s6e,"STRONG",{});var HKr=s(_ie);cCo=r(HKr,"roberta"),HKr.forEach(t),fCo=r(s6e," \u2014 "),HN=n(s6e,"A",{href:!0});var UKr=s(HN);mCo=r(UKr,"RobertaForMaskedLM"),UKr.forEach(t),gCo=r(s6e," (RoBERTa model)"),s6e.forEach(t),hCo=i(H),C1=n(H,"LI",{});var l6e=s(C1);bie=n(l6e,"STRONG",{});var JKr=s(bie);pCo=r(JKr,"roformer"),JKr.forEach(t),uCo=r(l6e," \u2014 "),UN=n(l6e,"A",{href:!0});var YKr=s(UN);_Co=r(YKr,"RoFormerForMaskedLM"),YKr.forEach(t),bCo=r(l6e," (RoFormer model)"),l6e.forEach(t),vCo=i(H),w1=n(H,"LI",{});var i6e=s(w1);vie=n(i6e,"STRONG",{});var KKr=s(vie);FCo=r(KKr,"squeezebert"),KKr.forEach(t),TCo=r(i6e," \u2014 "),JN=n(i6e,"A",{href:!0});var ZKr=s(JN);MCo=r(ZKr,"SqueezeBertForMaskedLM"),ZKr.forEach(t),ECo=r(i6e," (SqueezeBERT model)"),i6e.forEach(t),CCo=i(H),A1=n(H,"LI",{});var d6e=s(A1);Fie=n(d6e,"STRONG",{});var eZr=s(Fie);wCo=r(eZr,"tapas"),eZr.forEach(t),ACo=r(d6e," \u2014 "),YN=n(d6e,"A",{href:!0});var oZr=s(YN);yCo=r(oZr,"TapasForMaskedLM"),oZr.forEach(t),LCo=r(d6e," (TAPAS model)"),d6e.forEach(t),xCo=i(H),y1=n(H,"LI",{});var c6e=s(y1);Tie=n(c6e,"STRONG",{});var rZr=s(Tie);$Co=r(rZr,"wav2vec2"),rZr.forEach(t),kCo=r(c6e," \u2014 "),Mie=n(c6e,"CODE",{});var tZr=s(Mie);SCo=r(tZr,"Wav2Vec2ForMaskedLM"),tZr.forEach(t),RCo=r(c6e," (Wav2Vec2 model)"),c6e.forEach(t),BCo=i(H),L1=n(H,"LI",{});var f6e=s(L1);Eie=n(f6e,"STRONG",{});var aZr=s(Eie);PCo=r(aZr,"xlm"),aZr.forEach(t),ICo=r(f6e," \u2014 "),KN=n(f6e,"A",{href:!0});var nZr=s(KN);qCo=r(nZr,"XLMWithLMHeadModel"),nZr.forEach(t),NCo=r(f6e," (XLM model)"),f6e.forEach(t),jCo=i(H),x1=n(H,"LI",{});var m6e=s(x1);Cie=n(m6e,"STRONG",{});var sZr=s(Cie);DCo=r(sZr,"xlm-roberta"),sZr.forEach(t),GCo=r(m6e," \u2014 "),ZN=n(m6e,"A",{href:!0});var lZr=s(ZN);OCo=r(lZr,"XLMRobertaForMaskedLM"),lZr.forEach(t),VCo=r(m6e," (XLM-RoBERTa model)"),m6e.forEach(t),XCo=i(H),$1=n(H,"LI",{});var g6e=s($1);wie=n(g6e,"STRONG",{});var iZr=s(wie);zCo=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),QCo=r(g6e," \u2014 "),ej=n(g6e,"A",{href:!0});var dZr=s(ej);WCo=r(dZr,"XLMRobertaXLForMaskedLM"),dZr.forEach(t),HCo=r(g6e," (XLM-RoBERTa-XL model)"),g6e.forEach(t),UCo=i(H),k1=n(H,"LI",{});var h6e=s(k1);Aie=n(h6e,"STRONG",{});var cZr=s(Aie);JCo=r(cZr,"yoso"),cZr.forEach(t),YCo=r(h6e," \u2014 "),oj=n(h6e,"A",{href:!0});var fZr=s(oj);KCo=r(fZr,"YosoForMaskedLM"),fZr.forEach(t),ZCo=r(h6e," (YOSO model)"),h6e.forEach(t),H.forEach(t),ewo=i(Zt),S1=n(Zt,"P",{});var p6e=s(S1);owo=r(p6e,"The model is set in evaluation mode by default using "),yie=n(p6e,"CODE",{});var mZr=s(yie);rwo=r(mZr,"model.eval()"),mZr.forEach(t),two=r(p6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(p6e,"CODE",{});var gZr=s(Lie);awo=r(gZr,"model.train()"),gZr.forEach(t),p6e.forEach(t),nwo=i(Zt),T(R1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),jBe=i(f),yi=n(f,"H2",{class:!0});var GIe=s(yi);B1=n(GIe,"A",{id:!0,class:!0,href:!0});var hZr=s(B1);xie=n(hZr,"SPAN",{});var pZr=s(xie);T(_6.$$.fragment,pZr),pZr.forEach(t),hZr.forEach(t),swo=i(GIe),$ie=n(GIe,"SPAN",{});var uZr=s($ie);lwo=r(uZr,"AutoModelForSeq2SeqLM"),uZr.forEach(t),GIe.forEach(t),DBe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(b6.$$.fragment,js),iwo=i(js),Li=n(js,"P",{});var wY=s(Li);dwo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rj=n(wY,"A",{href:!0});var _Zr=s(rj);cwo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),fwo=r(wY," class method or the "),tj=n(wY,"A",{href:!0});var bZr=s(tj);mwo=r(bZr,"from_config()"),bZr.forEach(t),gwo=r(wY,` class
method.`),wY.forEach(t),hwo=i(js),v6=n(js,"P",{});var OIe=s(v6);pwo=r(OIe,"This class cannot be instantiated directly using "),kie=n(OIe,"CODE",{});var vZr=s(kie);uwo=r(vZr,"__init__()"),vZr.forEach(t),_wo=r(OIe," (throws an error)."),OIe.forEach(t),bwo=i(js),tt=n(js,"DIV",{class:!0});var Nw=s(tt);T(F6.$$.fragment,Nw),vwo=i(Nw),Sie=n(Nw,"P",{});var FZr=s(Sie);Fwo=r(FZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FZr.forEach(t),Two=i(Nw),xi=n(Nw,"P",{});var AY=s(xi);Mwo=r(AY,`Note:
Loading a model from its configuration file does `),Rie=n(AY,"STRONG",{});var TZr=s(Rie);Ewo=r(TZr,"not"),TZr.forEach(t),Cwo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=n(AY,"A",{href:!0});var MZr=s(aj);wwo=r(MZr,"from_pretrained()"),MZr.forEach(t),Awo=r(AY," to load the model weights."),AY.forEach(t),ywo=i(Nw),T(P1.$$.fragment,Nw),Nw.forEach(t),Lwo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(T6.$$.fragment,ea),xwo=i(ea),Bie=n(ea,"P",{});var EZr=s(Bie);$wo=r(EZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EZr.forEach(t),kwo=i(ea),ya=n(ea,"P",{});var jw=s(ya);Swo=r(jw,"The model class to instantiate is selected based on the "),Pie=n(jw,"CODE",{});var CZr=s(Pie);Rwo=r(CZr,"model_type"),CZr.forEach(t),Bwo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Iie=n(jw,"CODE",{});var wZr=s(Iie);Pwo=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),Iwo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(jw,"CODE",{});var AZr=s(qie);qwo=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),Nwo=r(jw,":"),jw.forEach(t),jwo=i(ea),he=n(ea,"UL",{});var ue=s(he);I1=n(ue,"LI",{});var u6e=s(I1);Nie=n(u6e,"STRONG",{});var yZr=s(Nie);Dwo=r(yZr,"bart"),yZr.forEach(t),Gwo=r(u6e," \u2014 "),nj=n(u6e,"A",{href:!0});var LZr=s(nj);Owo=r(LZr,"BartForConditionalGeneration"),LZr.forEach(t),Vwo=r(u6e," (BART model)"),u6e.forEach(t),Xwo=i(ue),q1=n(ue,"LI",{});var _6e=s(q1);jie=n(_6e,"STRONG",{});var xZr=s(jie);zwo=r(xZr,"bigbird_pegasus"),xZr.forEach(t),Qwo=r(_6e," \u2014 "),sj=n(_6e,"A",{href:!0});var $Zr=s(sj);Wwo=r($Zr,"BigBirdPegasusForConditionalGeneration"),$Zr.forEach(t),Hwo=r(_6e," (BigBirdPegasus model)"),_6e.forEach(t),Uwo=i(ue),N1=n(ue,"LI",{});var b6e=s(N1);Die=n(b6e,"STRONG",{});var kZr=s(Die);Jwo=r(kZr,"blenderbot"),kZr.forEach(t),Ywo=r(b6e," \u2014 "),lj=n(b6e,"A",{href:!0});var SZr=s(lj);Kwo=r(SZr,"BlenderbotForConditionalGeneration"),SZr.forEach(t),Zwo=r(b6e," (Blenderbot model)"),b6e.forEach(t),eAo=i(ue),j1=n(ue,"LI",{});var v6e=s(j1);Gie=n(v6e,"STRONG",{});var RZr=s(Gie);oAo=r(RZr,"blenderbot-small"),RZr.forEach(t),rAo=r(v6e," \u2014 "),ij=n(v6e,"A",{href:!0});var BZr=s(ij);tAo=r(BZr,"BlenderbotSmallForConditionalGeneration"),BZr.forEach(t),aAo=r(v6e," (BlenderbotSmall model)"),v6e.forEach(t),nAo=i(ue),D1=n(ue,"LI",{});var F6e=s(D1);Oie=n(F6e,"STRONG",{});var PZr=s(Oie);sAo=r(PZr,"encoder-decoder"),PZr.forEach(t),lAo=r(F6e," \u2014 "),dj=n(F6e,"A",{href:!0});var IZr=s(dj);iAo=r(IZr,"EncoderDecoderModel"),IZr.forEach(t),dAo=r(F6e," (Encoder decoder model)"),F6e.forEach(t),cAo=i(ue),G1=n(ue,"LI",{});var T6e=s(G1);Vie=n(T6e,"STRONG",{});var qZr=s(Vie);fAo=r(qZr,"fsmt"),qZr.forEach(t),mAo=r(T6e," \u2014 "),cj=n(T6e,"A",{href:!0});var NZr=s(cj);gAo=r(NZr,"FSMTForConditionalGeneration"),NZr.forEach(t),hAo=r(T6e," (FairSeq Machine-Translation model)"),T6e.forEach(t),pAo=i(ue),O1=n(ue,"LI",{});var M6e=s(O1);Xie=n(M6e,"STRONG",{});var jZr=s(Xie);uAo=r(jZr,"led"),jZr.forEach(t),_Ao=r(M6e," \u2014 "),fj=n(M6e,"A",{href:!0});var DZr=s(fj);bAo=r(DZr,"LEDForConditionalGeneration"),DZr.forEach(t),vAo=r(M6e," (LED model)"),M6e.forEach(t),FAo=i(ue),V1=n(ue,"LI",{});var E6e=s(V1);zie=n(E6e,"STRONG",{});var GZr=s(zie);TAo=r(GZr,"m2m_100"),GZr.forEach(t),MAo=r(E6e," \u2014 "),mj=n(E6e,"A",{href:!0});var OZr=s(mj);EAo=r(OZr,"M2M100ForConditionalGeneration"),OZr.forEach(t),CAo=r(E6e," (M2M100 model)"),E6e.forEach(t),wAo=i(ue),X1=n(ue,"LI",{});var C6e=s(X1);Qie=n(C6e,"STRONG",{});var VZr=s(Qie);AAo=r(VZr,"marian"),VZr.forEach(t),yAo=r(C6e," \u2014 "),gj=n(C6e,"A",{href:!0});var XZr=s(gj);LAo=r(XZr,"MarianMTModel"),XZr.forEach(t),xAo=r(C6e," (Marian model)"),C6e.forEach(t),$Ao=i(ue),z1=n(ue,"LI",{});var w6e=s(z1);Wie=n(w6e,"STRONG",{});var zZr=s(Wie);kAo=r(zZr,"mbart"),zZr.forEach(t),SAo=r(w6e," \u2014 "),hj=n(w6e,"A",{href:!0});var QZr=s(hj);RAo=r(QZr,"MBartForConditionalGeneration"),QZr.forEach(t),BAo=r(w6e," (mBART model)"),w6e.forEach(t),PAo=i(ue),Q1=n(ue,"LI",{});var A6e=s(Q1);Hie=n(A6e,"STRONG",{});var WZr=s(Hie);IAo=r(WZr,"mt5"),WZr.forEach(t),qAo=r(A6e," \u2014 "),pj=n(A6e,"A",{href:!0});var HZr=s(pj);NAo=r(HZr,"MT5ForConditionalGeneration"),HZr.forEach(t),jAo=r(A6e," (mT5 model)"),A6e.forEach(t),DAo=i(ue),W1=n(ue,"LI",{});var y6e=s(W1);Uie=n(y6e,"STRONG",{});var UZr=s(Uie);GAo=r(UZr,"pegasus"),UZr.forEach(t),OAo=r(y6e," \u2014 "),uj=n(y6e,"A",{href:!0});var JZr=s(uj);VAo=r(JZr,"PegasusForConditionalGeneration"),JZr.forEach(t),XAo=r(y6e," (Pegasus model)"),y6e.forEach(t),zAo=i(ue),H1=n(ue,"LI",{});var L6e=s(H1);Jie=n(L6e,"STRONG",{});var YZr=s(Jie);QAo=r(YZr,"plbart"),YZr.forEach(t),WAo=r(L6e," \u2014 "),_j=n(L6e,"A",{href:!0});var KZr=s(_j);HAo=r(KZr,"PLBartForConditionalGeneration"),KZr.forEach(t),UAo=r(L6e," (PLBart model)"),L6e.forEach(t),JAo=i(ue),U1=n(ue,"LI",{});var x6e=s(U1);Yie=n(x6e,"STRONG",{});var ZZr=s(Yie);YAo=r(ZZr,"prophetnet"),ZZr.forEach(t),KAo=r(x6e," \u2014 "),bj=n(x6e,"A",{href:!0});var eet=s(bj);ZAo=r(eet,"ProphetNetForConditionalGeneration"),eet.forEach(t),e0o=r(x6e," (ProphetNet model)"),x6e.forEach(t),o0o=i(ue),J1=n(ue,"LI",{});var $6e=s(J1);Kie=n($6e,"STRONG",{});var oet=s(Kie);r0o=r(oet,"t5"),oet.forEach(t),t0o=r($6e," \u2014 "),vj=n($6e,"A",{href:!0});var ret=s(vj);a0o=r(ret,"T5ForConditionalGeneration"),ret.forEach(t),n0o=r($6e," (T5 model)"),$6e.forEach(t),s0o=i(ue),Y1=n(ue,"LI",{});var k6e=s(Y1);Zie=n(k6e,"STRONG",{});var tet=s(Zie);l0o=r(tet,"tapex"),tet.forEach(t),i0o=r(k6e," \u2014 "),Fj=n(k6e,"A",{href:!0});var aet=s(Fj);d0o=r(aet,"BartForConditionalGeneration"),aet.forEach(t),c0o=r(k6e," (TAPEX model)"),k6e.forEach(t),f0o=i(ue),K1=n(ue,"LI",{});var S6e=s(K1);ede=n(S6e,"STRONG",{});var net=s(ede);m0o=r(net,"xlm-prophetnet"),net.forEach(t),g0o=r(S6e," \u2014 "),Tj=n(S6e,"A",{href:!0});var set=s(Tj);h0o=r(set,"XLMProphetNetForConditionalGeneration"),set.forEach(t),p0o=r(S6e," (XLMProphetNet model)"),S6e.forEach(t),ue.forEach(t),u0o=i(ea),Z1=n(ea,"P",{});var R6e=s(Z1);_0o=r(R6e,"The model is set in evaluation mode by default using "),ode=n(R6e,"CODE",{});var iet=s(ode);b0o=r(iet,"model.eval()"),iet.forEach(t),v0o=r(R6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(R6e,"CODE",{});var det=s(rde);F0o=r(det,"model.train()"),det.forEach(t),R6e.forEach(t),T0o=i(ea),T(eb.$$.fragment,ea),ea.forEach(t),js.forEach(t),GBe=i(f),$i=n(f,"H2",{class:!0});var VIe=s($i);ob=n(VIe,"A",{id:!0,class:!0,href:!0});var cet=s(ob);tde=n(cet,"SPAN",{});var fet=s(tde);T(M6.$$.fragment,fet),fet.forEach(t),cet.forEach(t),M0o=i(VIe),ade=n(VIe,"SPAN",{});var met=s(ade);E0o=r(met,"AutoModelForSequenceClassification"),met.forEach(t),VIe.forEach(t),OBe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(E6.$$.fragment,Ds),C0o=i(Ds),ki=n(Ds,"P",{});var yY=s(ki);w0o=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mj=n(yY,"A",{href:!0});var get=s(Mj);A0o=r(get,"from_pretrained()"),get.forEach(t),y0o=r(yY," class method or the "),Ej=n(yY,"A",{href:!0});var het=s(Ej);L0o=r(het,"from_config()"),het.forEach(t),x0o=r(yY,` class
method.`),yY.forEach(t),$0o=i(Ds),C6=n(Ds,"P",{});var XIe=s(C6);k0o=r(XIe,"This class cannot be instantiated directly using "),nde=n(XIe,"CODE",{});var pet=s(nde);S0o=r(pet,"__init__()"),pet.forEach(t),R0o=r(XIe," (throws an error)."),XIe.forEach(t),B0o=i(Ds),at=n(Ds,"DIV",{class:!0});var Dw=s(at);T(w6.$$.fragment,Dw),P0o=i(Dw),sde=n(Dw,"P",{});var uet=s(sde);I0o=r(uet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uet.forEach(t),q0o=i(Dw),Si=n(Dw,"P",{});var LY=s(Si);N0o=r(LY,`Note:
Loading a model from its configuration file does `),lde=n(LY,"STRONG",{});var _et=s(lde);j0o=r(_et,"not"),_et.forEach(t),D0o=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(LY,"A",{href:!0});var bet=s(Cj);G0o=r(bet,"from_pretrained()"),bet.forEach(t),O0o=r(LY," to load the model weights."),LY.forEach(t),V0o=i(Dw),T(rb.$$.fragment,Dw),Dw.forEach(t),X0o=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(A6.$$.fragment,oa),z0o=i(oa),ide=n(oa,"P",{});var vet=s(ide);Q0o=r(vet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vet.forEach(t),W0o=i(oa),La=n(oa,"P",{});var Gw=s(La);H0o=r(Gw,"The model class to instantiate is selected based on the "),dde=n(Gw,"CODE",{});var Fet=s(dde);U0o=r(Fet,"model_type"),Fet.forEach(t),J0o=r(Gw,` property of the config object (either
passed as an argument or loaded from `),cde=n(Gw,"CODE",{});var Tet=s(cde);Y0o=r(Tet,"pretrained_model_name_or_path"),Tet.forEach(t),K0o=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=n(Gw,"CODE",{});var Met=s(fde);Z0o=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),e6o=r(Gw,":"),Gw.forEach(t),o6o=i(oa),q=n(oa,"UL",{});var N=s(q);tb=n(N,"LI",{});var B6e=s(tb);mde=n(B6e,"STRONG",{});var Eet=s(mde);r6o=r(Eet,"albert"),Eet.forEach(t),t6o=r(B6e," \u2014 "),wj=n(B6e,"A",{href:!0});var Cet=s(wj);a6o=r(Cet,"AlbertForSequenceClassification"),Cet.forEach(t),n6o=r(B6e," (ALBERT model)"),B6e.forEach(t),s6o=i(N),ab=n(N,"LI",{});var P6e=s(ab);gde=n(P6e,"STRONG",{});var wet=s(gde);l6o=r(wet,"bart"),wet.forEach(t),i6o=r(P6e," \u2014 "),Aj=n(P6e,"A",{href:!0});var Aet=s(Aj);d6o=r(Aet,"BartForSequenceClassification"),Aet.forEach(t),c6o=r(P6e," (BART model)"),P6e.forEach(t),f6o=i(N),nb=n(N,"LI",{});var I6e=s(nb);hde=n(I6e,"STRONG",{});var yet=s(hde);m6o=r(yet,"bert"),yet.forEach(t),g6o=r(I6e," \u2014 "),yj=n(I6e,"A",{href:!0});var Let=s(yj);h6o=r(Let,"BertForSequenceClassification"),Let.forEach(t),p6o=r(I6e," (BERT model)"),I6e.forEach(t),u6o=i(N),sb=n(N,"LI",{});var q6e=s(sb);pde=n(q6e,"STRONG",{});var xet=s(pde);_6o=r(xet,"big_bird"),xet.forEach(t),b6o=r(q6e," \u2014 "),Lj=n(q6e,"A",{href:!0});var $et=s(Lj);v6o=r($et,"BigBirdForSequenceClassification"),$et.forEach(t),F6o=r(q6e," (BigBird model)"),q6e.forEach(t),T6o=i(N),lb=n(N,"LI",{});var N6e=s(lb);ude=n(N6e,"STRONG",{});var ket=s(ude);M6o=r(ket,"bigbird_pegasus"),ket.forEach(t),E6o=r(N6e," \u2014 "),xj=n(N6e,"A",{href:!0});var Set=s(xj);C6o=r(Set,"BigBirdPegasusForSequenceClassification"),Set.forEach(t),w6o=r(N6e," (BigBirdPegasus model)"),N6e.forEach(t),A6o=i(N),ib=n(N,"LI",{});var j6e=s(ib);_de=n(j6e,"STRONG",{});var Ret=s(_de);y6o=r(Ret,"camembert"),Ret.forEach(t),L6o=r(j6e," \u2014 "),$j=n(j6e,"A",{href:!0});var Bet=s($j);x6o=r(Bet,"CamembertForSequenceClassification"),Bet.forEach(t),$6o=r(j6e," (CamemBERT model)"),j6e.forEach(t),k6o=i(N),db=n(N,"LI",{});var D6e=s(db);bde=n(D6e,"STRONG",{});var Pet=s(bde);S6o=r(Pet,"canine"),Pet.forEach(t),R6o=r(D6e," \u2014 "),kj=n(D6e,"A",{href:!0});var Iet=s(kj);B6o=r(Iet,"CanineForSequenceClassification"),Iet.forEach(t),P6o=r(D6e," (Canine model)"),D6e.forEach(t),I6o=i(N),cb=n(N,"LI",{});var G6e=s(cb);vde=n(G6e,"STRONG",{});var qet=s(vde);q6o=r(qet,"convbert"),qet.forEach(t),N6o=r(G6e," \u2014 "),Sj=n(G6e,"A",{href:!0});var Net=s(Sj);j6o=r(Net,"ConvBertForSequenceClassification"),Net.forEach(t),D6o=r(G6e," (ConvBERT model)"),G6e.forEach(t),G6o=i(N),fb=n(N,"LI",{});var O6e=s(fb);Fde=n(O6e,"STRONG",{});var jet=s(Fde);O6o=r(jet,"ctrl"),jet.forEach(t),V6o=r(O6e," \u2014 "),Rj=n(O6e,"A",{href:!0});var Det=s(Rj);X6o=r(Det,"CTRLForSequenceClassification"),Det.forEach(t),z6o=r(O6e," (CTRL model)"),O6e.forEach(t),Q6o=i(N),mb=n(N,"LI",{});var V6e=s(mb);Tde=n(V6e,"STRONG",{});var Get=s(Tde);W6o=r(Get,"data2vec-text"),Get.forEach(t),H6o=r(V6e," \u2014 "),Bj=n(V6e,"A",{href:!0});var Oet=s(Bj);U6o=r(Oet,"Data2VecTextForSequenceClassification"),Oet.forEach(t),J6o=r(V6e," (Data2VecText model)"),V6e.forEach(t),Y6o=i(N),gb=n(N,"LI",{});var X6e=s(gb);Mde=n(X6e,"STRONG",{});var Vet=s(Mde);K6o=r(Vet,"deberta"),Vet.forEach(t),Z6o=r(X6e," \u2014 "),Pj=n(X6e,"A",{href:!0});var Xet=s(Pj);eyo=r(Xet,"DebertaForSequenceClassification"),Xet.forEach(t),oyo=r(X6e," (DeBERTa model)"),X6e.forEach(t),ryo=i(N),hb=n(N,"LI",{});var z6e=s(hb);Ede=n(z6e,"STRONG",{});var zet=s(Ede);tyo=r(zet,"deberta-v2"),zet.forEach(t),ayo=r(z6e," \u2014 "),Ij=n(z6e,"A",{href:!0});var Qet=s(Ij);nyo=r(Qet,"DebertaV2ForSequenceClassification"),Qet.forEach(t),syo=r(z6e," (DeBERTa-v2 model)"),z6e.forEach(t),lyo=i(N),pb=n(N,"LI",{});var Q6e=s(pb);Cde=n(Q6e,"STRONG",{});var Wet=s(Cde);iyo=r(Wet,"distilbert"),Wet.forEach(t),dyo=r(Q6e," \u2014 "),qj=n(Q6e,"A",{href:!0});var Het=s(qj);cyo=r(Het,"DistilBertForSequenceClassification"),Het.forEach(t),fyo=r(Q6e," (DistilBERT model)"),Q6e.forEach(t),myo=i(N),ub=n(N,"LI",{});var W6e=s(ub);wde=n(W6e,"STRONG",{});var Uet=s(wde);gyo=r(Uet,"electra"),Uet.forEach(t),hyo=r(W6e," \u2014 "),Nj=n(W6e,"A",{href:!0});var Jet=s(Nj);pyo=r(Jet,"ElectraForSequenceClassification"),Jet.forEach(t),uyo=r(W6e," (ELECTRA model)"),W6e.forEach(t),_yo=i(N),_b=n(N,"LI",{});var H6e=s(_b);Ade=n(H6e,"STRONG",{});var Yet=s(Ade);byo=r(Yet,"flaubert"),Yet.forEach(t),vyo=r(H6e," \u2014 "),jj=n(H6e,"A",{href:!0});var Ket=s(jj);Fyo=r(Ket,"FlaubertForSequenceClassification"),Ket.forEach(t),Tyo=r(H6e," (FlauBERT model)"),H6e.forEach(t),Myo=i(N),bb=n(N,"LI",{});var U6e=s(bb);yde=n(U6e,"STRONG",{});var Zet=s(yde);Eyo=r(Zet,"fnet"),Zet.forEach(t),Cyo=r(U6e," \u2014 "),Dj=n(U6e,"A",{href:!0});var eot=s(Dj);wyo=r(eot,"FNetForSequenceClassification"),eot.forEach(t),Ayo=r(U6e," (FNet model)"),U6e.forEach(t),yyo=i(N),vb=n(N,"LI",{});var J6e=s(vb);Lde=n(J6e,"STRONG",{});var oot=s(Lde);Lyo=r(oot,"funnel"),oot.forEach(t),xyo=r(J6e," \u2014 "),Gj=n(J6e,"A",{href:!0});var rot=s(Gj);$yo=r(rot,"FunnelForSequenceClassification"),rot.forEach(t),kyo=r(J6e," (Funnel Transformer model)"),J6e.forEach(t),Syo=i(N),Fb=n(N,"LI",{});var Y6e=s(Fb);xde=n(Y6e,"STRONG",{});var tot=s(xde);Ryo=r(tot,"gpt2"),tot.forEach(t),Byo=r(Y6e," \u2014 "),Oj=n(Y6e,"A",{href:!0});var aot=s(Oj);Pyo=r(aot,"GPT2ForSequenceClassification"),aot.forEach(t),Iyo=r(Y6e," (OpenAI GPT-2 model)"),Y6e.forEach(t),qyo=i(N),Tb=n(N,"LI",{});var K6e=s(Tb);$de=n(K6e,"STRONG",{});var not=s($de);Nyo=r(not,"gpt_neo"),not.forEach(t),jyo=r(K6e," \u2014 "),Vj=n(K6e,"A",{href:!0});var sot=s(Vj);Dyo=r(sot,"GPTNeoForSequenceClassification"),sot.forEach(t),Gyo=r(K6e," (GPT Neo model)"),K6e.forEach(t),Oyo=i(N),Mb=n(N,"LI",{});var Z6e=s(Mb);kde=n(Z6e,"STRONG",{});var lot=s(kde);Vyo=r(lot,"gptj"),lot.forEach(t),Xyo=r(Z6e," \u2014 "),Xj=n(Z6e,"A",{href:!0});var iot=s(Xj);zyo=r(iot,"GPTJForSequenceClassification"),iot.forEach(t),Qyo=r(Z6e," (GPT-J model)"),Z6e.forEach(t),Wyo=i(N),Eb=n(N,"LI",{});var eye=s(Eb);Sde=n(eye,"STRONG",{});var dot=s(Sde);Hyo=r(dot,"ibert"),dot.forEach(t),Uyo=r(eye," \u2014 "),zj=n(eye,"A",{href:!0});var cot=s(zj);Jyo=r(cot,"IBertForSequenceClassification"),cot.forEach(t),Yyo=r(eye," (I-BERT model)"),eye.forEach(t),Kyo=i(N),Cb=n(N,"LI",{});var oye=s(Cb);Rde=n(oye,"STRONG",{});var fot=s(Rde);Zyo=r(fot,"layoutlm"),fot.forEach(t),eLo=r(oye," \u2014 "),Qj=n(oye,"A",{href:!0});var mot=s(Qj);oLo=r(mot,"LayoutLMForSequenceClassification"),mot.forEach(t),rLo=r(oye," (LayoutLM model)"),oye.forEach(t),tLo=i(N),wb=n(N,"LI",{});var rye=s(wb);Bde=n(rye,"STRONG",{});var got=s(Bde);aLo=r(got,"layoutlmv2"),got.forEach(t),nLo=r(rye," \u2014 "),Wj=n(rye,"A",{href:!0});var hot=s(Wj);sLo=r(hot,"LayoutLMv2ForSequenceClassification"),hot.forEach(t),lLo=r(rye," (LayoutLMv2 model)"),rye.forEach(t),iLo=i(N),Ab=n(N,"LI",{});var tye=s(Ab);Pde=n(tye,"STRONG",{});var pot=s(Pde);dLo=r(pot,"led"),pot.forEach(t),cLo=r(tye," \u2014 "),Hj=n(tye,"A",{href:!0});var uot=s(Hj);fLo=r(uot,"LEDForSequenceClassification"),uot.forEach(t),mLo=r(tye," (LED model)"),tye.forEach(t),gLo=i(N),yb=n(N,"LI",{});var aye=s(yb);Ide=n(aye,"STRONG",{});var _ot=s(Ide);hLo=r(_ot,"longformer"),_ot.forEach(t),pLo=r(aye," \u2014 "),Uj=n(aye,"A",{href:!0});var bot=s(Uj);uLo=r(bot,"LongformerForSequenceClassification"),bot.forEach(t),_Lo=r(aye," (Longformer model)"),aye.forEach(t),bLo=i(N),Lb=n(N,"LI",{});var nye=s(Lb);qde=n(nye,"STRONG",{});var vot=s(qde);vLo=r(vot,"mbart"),vot.forEach(t),FLo=r(nye," \u2014 "),Jj=n(nye,"A",{href:!0});var Fot=s(Jj);TLo=r(Fot,"MBartForSequenceClassification"),Fot.forEach(t),MLo=r(nye," (mBART model)"),nye.forEach(t),ELo=i(N),xb=n(N,"LI",{});var sye=s(xb);Nde=n(sye,"STRONG",{});var Tot=s(Nde);CLo=r(Tot,"megatron-bert"),Tot.forEach(t),wLo=r(sye," \u2014 "),Yj=n(sye,"A",{href:!0});var Mot=s(Yj);ALo=r(Mot,"MegatronBertForSequenceClassification"),Mot.forEach(t),yLo=r(sye," (MegatronBert model)"),sye.forEach(t),LLo=i(N),$b=n(N,"LI",{});var lye=s($b);jde=n(lye,"STRONG",{});var Eot=s(jde);xLo=r(Eot,"mobilebert"),Eot.forEach(t),$Lo=r(lye," \u2014 "),Kj=n(lye,"A",{href:!0});var Cot=s(Kj);kLo=r(Cot,"MobileBertForSequenceClassification"),Cot.forEach(t),SLo=r(lye," (MobileBERT model)"),lye.forEach(t),RLo=i(N),kb=n(N,"LI",{});var iye=s(kb);Dde=n(iye,"STRONG",{});var wot=s(Dde);BLo=r(wot,"mpnet"),wot.forEach(t),PLo=r(iye," \u2014 "),Zj=n(iye,"A",{href:!0});var Aot=s(Zj);ILo=r(Aot,"MPNetForSequenceClassification"),Aot.forEach(t),qLo=r(iye," (MPNet model)"),iye.forEach(t),NLo=i(N),Sb=n(N,"LI",{});var dye=s(Sb);Gde=n(dye,"STRONG",{});var yot=s(Gde);jLo=r(yot,"nystromformer"),yot.forEach(t),DLo=r(dye," \u2014 "),eD=n(dye,"A",{href:!0});var Lot=s(eD);GLo=r(Lot,"NystromformerForSequenceClassification"),Lot.forEach(t),OLo=r(dye," (Nystromformer model)"),dye.forEach(t),VLo=i(N),Rb=n(N,"LI",{});var cye=s(Rb);Ode=n(cye,"STRONG",{});var xot=s(Ode);XLo=r(xot,"openai-gpt"),xot.forEach(t),zLo=r(cye," \u2014 "),oD=n(cye,"A",{href:!0});var $ot=s(oD);QLo=r($ot,"OpenAIGPTForSequenceClassification"),$ot.forEach(t),WLo=r(cye," (OpenAI GPT model)"),cye.forEach(t),HLo=i(N),Bb=n(N,"LI",{});var fye=s(Bb);Vde=n(fye,"STRONG",{});var kot=s(Vde);ULo=r(kot,"perceiver"),kot.forEach(t),JLo=r(fye," \u2014 "),rD=n(fye,"A",{href:!0});var Sot=s(rD);YLo=r(Sot,"PerceiverForSequenceClassification"),Sot.forEach(t),KLo=r(fye," (Perceiver model)"),fye.forEach(t),ZLo=i(N),Pb=n(N,"LI",{});var mye=s(Pb);Xde=n(mye,"STRONG",{});var Rot=s(Xde);e8o=r(Rot,"plbart"),Rot.forEach(t),o8o=r(mye," \u2014 "),tD=n(mye,"A",{href:!0});var Bot=s(tD);r8o=r(Bot,"PLBartForSequenceClassification"),Bot.forEach(t),t8o=r(mye," (PLBart model)"),mye.forEach(t),a8o=i(N),Ib=n(N,"LI",{});var gye=s(Ib);zde=n(gye,"STRONG",{});var Pot=s(zde);n8o=r(Pot,"qdqbert"),Pot.forEach(t),s8o=r(gye," \u2014 "),aD=n(gye,"A",{href:!0});var Iot=s(aD);l8o=r(Iot,"QDQBertForSequenceClassification"),Iot.forEach(t),i8o=r(gye," (QDQBert model)"),gye.forEach(t),d8o=i(N),qb=n(N,"LI",{});var hye=s(qb);Qde=n(hye,"STRONG",{});var qot=s(Qde);c8o=r(qot,"reformer"),qot.forEach(t),f8o=r(hye," \u2014 "),nD=n(hye,"A",{href:!0});var Not=s(nD);m8o=r(Not,"ReformerForSequenceClassification"),Not.forEach(t),g8o=r(hye," (Reformer model)"),hye.forEach(t),h8o=i(N),Nb=n(N,"LI",{});var pye=s(Nb);Wde=n(pye,"STRONG",{});var jot=s(Wde);p8o=r(jot,"rembert"),jot.forEach(t),u8o=r(pye," \u2014 "),sD=n(pye,"A",{href:!0});var Dot=s(sD);_8o=r(Dot,"RemBertForSequenceClassification"),Dot.forEach(t),b8o=r(pye," (RemBERT model)"),pye.forEach(t),v8o=i(N),jb=n(N,"LI",{});var uye=s(jb);Hde=n(uye,"STRONG",{});var Got=s(Hde);F8o=r(Got,"roberta"),Got.forEach(t),T8o=r(uye," \u2014 "),lD=n(uye,"A",{href:!0});var Oot=s(lD);M8o=r(Oot,"RobertaForSequenceClassification"),Oot.forEach(t),E8o=r(uye," (RoBERTa model)"),uye.forEach(t),C8o=i(N),Db=n(N,"LI",{});var _ye=s(Db);Ude=n(_ye,"STRONG",{});var Vot=s(Ude);w8o=r(Vot,"roformer"),Vot.forEach(t),A8o=r(_ye," \u2014 "),iD=n(_ye,"A",{href:!0});var Xot=s(iD);y8o=r(Xot,"RoFormerForSequenceClassification"),Xot.forEach(t),L8o=r(_ye," (RoFormer model)"),_ye.forEach(t),x8o=i(N),Gb=n(N,"LI",{});var bye=s(Gb);Jde=n(bye,"STRONG",{});var zot=s(Jde);$8o=r(zot,"squeezebert"),zot.forEach(t),k8o=r(bye," \u2014 "),dD=n(bye,"A",{href:!0});var Qot=s(dD);S8o=r(Qot,"SqueezeBertForSequenceClassification"),Qot.forEach(t),R8o=r(bye," (SqueezeBERT model)"),bye.forEach(t),B8o=i(N),Ob=n(N,"LI",{});var vye=s(Ob);Yde=n(vye,"STRONG",{});var Wot=s(Yde);P8o=r(Wot,"tapas"),Wot.forEach(t),I8o=r(vye," \u2014 "),cD=n(vye,"A",{href:!0});var Hot=s(cD);q8o=r(Hot,"TapasForSequenceClassification"),Hot.forEach(t),N8o=r(vye," (TAPAS model)"),vye.forEach(t),j8o=i(N),Vb=n(N,"LI",{});var Fye=s(Vb);Kde=n(Fye,"STRONG",{});var Uot=s(Kde);D8o=r(Uot,"tapex"),Uot.forEach(t),G8o=r(Fye," \u2014 "),fD=n(Fye,"A",{href:!0});var Jot=s(fD);O8o=r(Jot,"BartForSequenceClassification"),Jot.forEach(t),V8o=r(Fye," (TAPEX model)"),Fye.forEach(t),X8o=i(N),Xb=n(N,"LI",{});var Tye=s(Xb);Zde=n(Tye,"STRONG",{});var Yot=s(Zde);z8o=r(Yot,"transfo-xl"),Yot.forEach(t),Q8o=r(Tye," \u2014 "),mD=n(Tye,"A",{href:!0});var Kot=s(mD);W8o=r(Kot,"TransfoXLForSequenceClassification"),Kot.forEach(t),H8o=r(Tye," (Transformer-XL model)"),Tye.forEach(t),U8o=i(N),zb=n(N,"LI",{});var Mye=s(zb);ece=n(Mye,"STRONG",{});var Zot=s(ece);J8o=r(Zot,"xlm"),Zot.forEach(t),Y8o=r(Mye," \u2014 "),gD=n(Mye,"A",{href:!0});var ert=s(gD);K8o=r(ert,"XLMForSequenceClassification"),ert.forEach(t),Z8o=r(Mye," (XLM model)"),Mye.forEach(t),exo=i(N),Qb=n(N,"LI",{});var Eye=s(Qb);oce=n(Eye,"STRONG",{});var ort=s(oce);oxo=r(ort,"xlm-roberta"),ort.forEach(t),rxo=r(Eye," \u2014 "),hD=n(Eye,"A",{href:!0});var rrt=s(hD);txo=r(rrt,"XLMRobertaForSequenceClassification"),rrt.forEach(t),axo=r(Eye," (XLM-RoBERTa model)"),Eye.forEach(t),nxo=i(N),Wb=n(N,"LI",{});var Cye=s(Wb);rce=n(Cye,"STRONG",{});var trt=s(rce);sxo=r(trt,"xlm-roberta-xl"),trt.forEach(t),lxo=r(Cye," \u2014 "),pD=n(Cye,"A",{href:!0});var art=s(pD);ixo=r(art,"XLMRobertaXLForSequenceClassification"),art.forEach(t),dxo=r(Cye," (XLM-RoBERTa-XL model)"),Cye.forEach(t),cxo=i(N),Hb=n(N,"LI",{});var wye=s(Hb);tce=n(wye,"STRONG",{});var nrt=s(tce);fxo=r(nrt,"xlnet"),nrt.forEach(t),mxo=r(wye," \u2014 "),uD=n(wye,"A",{href:!0});var srt=s(uD);gxo=r(srt,"XLNetForSequenceClassification"),srt.forEach(t),hxo=r(wye," (XLNet model)"),wye.forEach(t),pxo=i(N),Ub=n(N,"LI",{});var Aye=s(Ub);ace=n(Aye,"STRONG",{});var lrt=s(ace);uxo=r(lrt,"yoso"),lrt.forEach(t),_xo=r(Aye," \u2014 "),_D=n(Aye,"A",{href:!0});var irt=s(_D);bxo=r(irt,"YosoForSequenceClassification"),irt.forEach(t),vxo=r(Aye," (YOSO model)"),Aye.forEach(t),N.forEach(t),Fxo=i(oa),Jb=n(oa,"P",{});var yye=s(Jb);Txo=r(yye,"The model is set in evaluation mode by default using "),nce=n(yye,"CODE",{});var drt=s(nce);Mxo=r(drt,"model.eval()"),drt.forEach(t),Exo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=n(yye,"CODE",{});var crt=s(sce);Cxo=r(crt,"model.train()"),crt.forEach(t),yye.forEach(t),wxo=i(oa),T(Yb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),VBe=i(f),Ri=n(f,"H2",{class:!0});var zIe=s(Ri);Kb=n(zIe,"A",{id:!0,class:!0,href:!0});var frt=s(Kb);lce=n(frt,"SPAN",{});var mrt=s(lce);T(y6.$$.fragment,mrt),mrt.forEach(t),frt.forEach(t),Axo=i(zIe),ice=n(zIe,"SPAN",{});var grt=s(ice);yxo=r(grt,"AutoModelForMultipleChoice"),grt.forEach(t),zIe.forEach(t),XBe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(L6.$$.fragment,Gs),Lxo=i(Gs),Bi=n(Gs,"P",{});var xY=s(Bi);xxo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bD=n(xY,"A",{href:!0});var hrt=s(bD);$xo=r(hrt,"from_pretrained()"),hrt.forEach(t),kxo=r(xY," class method or the "),vD=n(xY,"A",{href:!0});var prt=s(vD);Sxo=r(prt,"from_config()"),prt.forEach(t),Rxo=r(xY,` class
method.`),xY.forEach(t),Bxo=i(Gs),x6=n(Gs,"P",{});var QIe=s(x6);Pxo=r(QIe,"This class cannot be instantiated directly using "),dce=n(QIe,"CODE",{});var urt=s(dce);Ixo=r(urt,"__init__()"),urt.forEach(t),qxo=r(QIe," (throws an error)."),QIe.forEach(t),Nxo=i(Gs),nt=n(Gs,"DIV",{class:!0});var Ow=s(nt);T($6.$$.fragment,Ow),jxo=i(Ow),cce=n(Ow,"P",{});var _rt=s(cce);Dxo=r(_rt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_rt.forEach(t),Gxo=i(Ow),Pi=n(Ow,"P",{});var $Y=s(Pi);Oxo=r($Y,`Note:
Loading a model from its configuration file does `),fce=n($Y,"STRONG",{});var brt=s(fce);Vxo=r(brt,"not"),brt.forEach(t),Xxo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n($Y,"A",{href:!0});var vrt=s(FD);zxo=r(vrt,"from_pretrained()"),vrt.forEach(t),Qxo=r($Y," to load the model weights."),$Y.forEach(t),Wxo=i(Ow),T(Zb.$$.fragment,Ow),Ow.forEach(t),Hxo=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(k6.$$.fragment,ra),Uxo=i(ra),mce=n(ra,"P",{});var Frt=s(mce);Jxo=r(Frt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Frt.forEach(t),Yxo=i(ra),xa=n(ra,"P",{});var Vw=s(xa);Kxo=r(Vw,"The model class to instantiate is selected based on the "),gce=n(Vw,"CODE",{});var Trt=s(gce);Zxo=r(Trt,"model_type"),Trt.forEach(t),e9o=r(Vw,` property of the config object (either
passed as an argument or loaded from `),hce=n(Vw,"CODE",{});var Mrt=s(hce);o9o=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),r9o=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=n(Vw,"CODE",{});var Ert=s(pce);t9o=r(Ert,"pretrained_model_name_or_path"),Ert.forEach(t),a9o=r(Vw,":"),Vw.forEach(t),n9o=i(ra),Y=n(ra,"UL",{});var K=s(Y);e2=n(K,"LI",{});var Lye=s(e2);uce=n(Lye,"STRONG",{});var Crt=s(uce);s9o=r(Crt,"albert"),Crt.forEach(t),l9o=r(Lye," \u2014 "),TD=n(Lye,"A",{href:!0});var wrt=s(TD);i9o=r(wrt,"AlbertForMultipleChoice"),wrt.forEach(t),d9o=r(Lye," (ALBERT model)"),Lye.forEach(t),c9o=i(K),o2=n(K,"LI",{});var xye=s(o2);_ce=n(xye,"STRONG",{});var Art=s(_ce);f9o=r(Art,"bert"),Art.forEach(t),m9o=r(xye," \u2014 "),MD=n(xye,"A",{href:!0});var yrt=s(MD);g9o=r(yrt,"BertForMultipleChoice"),yrt.forEach(t),h9o=r(xye," (BERT model)"),xye.forEach(t),p9o=i(K),r2=n(K,"LI",{});var $ye=s(r2);bce=n($ye,"STRONG",{});var Lrt=s(bce);u9o=r(Lrt,"big_bird"),Lrt.forEach(t),_9o=r($ye," \u2014 "),ED=n($ye,"A",{href:!0});var xrt=s(ED);b9o=r(xrt,"BigBirdForMultipleChoice"),xrt.forEach(t),v9o=r($ye," (BigBird model)"),$ye.forEach(t),F9o=i(K),t2=n(K,"LI",{});var kye=s(t2);vce=n(kye,"STRONG",{});var $rt=s(vce);T9o=r($rt,"camembert"),$rt.forEach(t),M9o=r(kye," \u2014 "),CD=n(kye,"A",{href:!0});var krt=s(CD);E9o=r(krt,"CamembertForMultipleChoice"),krt.forEach(t),C9o=r(kye," (CamemBERT model)"),kye.forEach(t),w9o=i(K),a2=n(K,"LI",{});var Sye=s(a2);Fce=n(Sye,"STRONG",{});var Srt=s(Fce);A9o=r(Srt,"canine"),Srt.forEach(t),y9o=r(Sye," \u2014 "),wD=n(Sye,"A",{href:!0});var Rrt=s(wD);L9o=r(Rrt,"CanineForMultipleChoice"),Rrt.forEach(t),x9o=r(Sye," (Canine model)"),Sye.forEach(t),$9o=i(K),n2=n(K,"LI",{});var Rye=s(n2);Tce=n(Rye,"STRONG",{});var Brt=s(Tce);k9o=r(Brt,"convbert"),Brt.forEach(t),S9o=r(Rye," \u2014 "),AD=n(Rye,"A",{href:!0});var Prt=s(AD);R9o=r(Prt,"ConvBertForMultipleChoice"),Prt.forEach(t),B9o=r(Rye," (ConvBERT model)"),Rye.forEach(t),P9o=i(K),s2=n(K,"LI",{});var Bye=s(s2);Mce=n(Bye,"STRONG",{});var Irt=s(Mce);I9o=r(Irt,"data2vec-text"),Irt.forEach(t),q9o=r(Bye," \u2014 "),yD=n(Bye,"A",{href:!0});var qrt=s(yD);N9o=r(qrt,"Data2VecTextForMultipleChoice"),qrt.forEach(t),j9o=r(Bye," (Data2VecText model)"),Bye.forEach(t),D9o=i(K),l2=n(K,"LI",{});var Pye=s(l2);Ece=n(Pye,"STRONG",{});var Nrt=s(Ece);G9o=r(Nrt,"deberta-v2"),Nrt.forEach(t),O9o=r(Pye," \u2014 "),LD=n(Pye,"A",{href:!0});var jrt=s(LD);V9o=r(jrt,"DebertaV2ForMultipleChoice"),jrt.forEach(t),X9o=r(Pye," (DeBERTa-v2 model)"),Pye.forEach(t),z9o=i(K),i2=n(K,"LI",{});var Iye=s(i2);Cce=n(Iye,"STRONG",{});var Drt=s(Cce);Q9o=r(Drt,"distilbert"),Drt.forEach(t),W9o=r(Iye," \u2014 "),xD=n(Iye,"A",{href:!0});var Grt=s(xD);H9o=r(Grt,"DistilBertForMultipleChoice"),Grt.forEach(t),U9o=r(Iye," (DistilBERT model)"),Iye.forEach(t),J9o=i(K),d2=n(K,"LI",{});var qye=s(d2);wce=n(qye,"STRONG",{});var Ort=s(wce);Y9o=r(Ort,"electra"),Ort.forEach(t),K9o=r(qye," \u2014 "),$D=n(qye,"A",{href:!0});var Vrt=s($D);Z9o=r(Vrt,"ElectraForMultipleChoice"),Vrt.forEach(t),e$o=r(qye," (ELECTRA model)"),qye.forEach(t),o$o=i(K),c2=n(K,"LI",{});var Nye=s(c2);Ace=n(Nye,"STRONG",{});var Xrt=s(Ace);r$o=r(Xrt,"flaubert"),Xrt.forEach(t),t$o=r(Nye," \u2014 "),kD=n(Nye,"A",{href:!0});var zrt=s(kD);a$o=r(zrt,"FlaubertForMultipleChoice"),zrt.forEach(t),n$o=r(Nye," (FlauBERT model)"),Nye.forEach(t),s$o=i(K),f2=n(K,"LI",{});var jye=s(f2);yce=n(jye,"STRONG",{});var Qrt=s(yce);l$o=r(Qrt,"fnet"),Qrt.forEach(t),i$o=r(jye," \u2014 "),SD=n(jye,"A",{href:!0});var Wrt=s(SD);d$o=r(Wrt,"FNetForMultipleChoice"),Wrt.forEach(t),c$o=r(jye," (FNet model)"),jye.forEach(t),f$o=i(K),m2=n(K,"LI",{});var Dye=s(m2);Lce=n(Dye,"STRONG",{});var Hrt=s(Lce);m$o=r(Hrt,"funnel"),Hrt.forEach(t),g$o=r(Dye," \u2014 "),RD=n(Dye,"A",{href:!0});var Urt=s(RD);h$o=r(Urt,"FunnelForMultipleChoice"),Urt.forEach(t),p$o=r(Dye," (Funnel Transformer model)"),Dye.forEach(t),u$o=i(K),g2=n(K,"LI",{});var Gye=s(g2);xce=n(Gye,"STRONG",{});var Jrt=s(xce);_$o=r(Jrt,"ibert"),Jrt.forEach(t),b$o=r(Gye," \u2014 "),BD=n(Gye,"A",{href:!0});var Yrt=s(BD);v$o=r(Yrt,"IBertForMultipleChoice"),Yrt.forEach(t),F$o=r(Gye," (I-BERT model)"),Gye.forEach(t),T$o=i(K),h2=n(K,"LI",{});var Oye=s(h2);$ce=n(Oye,"STRONG",{});var Krt=s($ce);M$o=r(Krt,"longformer"),Krt.forEach(t),E$o=r(Oye," \u2014 "),PD=n(Oye,"A",{href:!0});var Zrt=s(PD);C$o=r(Zrt,"LongformerForMultipleChoice"),Zrt.forEach(t),w$o=r(Oye," (Longformer model)"),Oye.forEach(t),A$o=i(K),p2=n(K,"LI",{});var Vye=s(p2);kce=n(Vye,"STRONG",{});var ett=s(kce);y$o=r(ett,"megatron-bert"),ett.forEach(t),L$o=r(Vye," \u2014 "),ID=n(Vye,"A",{href:!0});var ott=s(ID);x$o=r(ott,"MegatronBertForMultipleChoice"),ott.forEach(t),$$o=r(Vye," (MegatronBert model)"),Vye.forEach(t),k$o=i(K),u2=n(K,"LI",{});var Xye=s(u2);Sce=n(Xye,"STRONG",{});var rtt=s(Sce);S$o=r(rtt,"mobilebert"),rtt.forEach(t),R$o=r(Xye," \u2014 "),qD=n(Xye,"A",{href:!0});var ttt=s(qD);B$o=r(ttt,"MobileBertForMultipleChoice"),ttt.forEach(t),P$o=r(Xye," (MobileBERT model)"),Xye.forEach(t),I$o=i(K),_2=n(K,"LI",{});var zye=s(_2);Rce=n(zye,"STRONG",{});var att=s(Rce);q$o=r(att,"mpnet"),att.forEach(t),N$o=r(zye," \u2014 "),ND=n(zye,"A",{href:!0});var ntt=s(ND);j$o=r(ntt,"MPNetForMultipleChoice"),ntt.forEach(t),D$o=r(zye," (MPNet model)"),zye.forEach(t),G$o=i(K),b2=n(K,"LI",{});var Qye=s(b2);Bce=n(Qye,"STRONG",{});var stt=s(Bce);O$o=r(stt,"nystromformer"),stt.forEach(t),V$o=r(Qye," \u2014 "),jD=n(Qye,"A",{href:!0});var ltt=s(jD);X$o=r(ltt,"NystromformerForMultipleChoice"),ltt.forEach(t),z$o=r(Qye," (Nystromformer model)"),Qye.forEach(t),Q$o=i(K),v2=n(K,"LI",{});var Wye=s(v2);Pce=n(Wye,"STRONG",{});var itt=s(Pce);W$o=r(itt,"qdqbert"),itt.forEach(t),H$o=r(Wye," \u2014 "),DD=n(Wye,"A",{href:!0});var dtt=s(DD);U$o=r(dtt,"QDQBertForMultipleChoice"),dtt.forEach(t),J$o=r(Wye," (QDQBert model)"),Wye.forEach(t),Y$o=i(K),F2=n(K,"LI",{});var Hye=s(F2);Ice=n(Hye,"STRONG",{});var ctt=s(Ice);K$o=r(ctt,"rembert"),ctt.forEach(t),Z$o=r(Hye," \u2014 "),GD=n(Hye,"A",{href:!0});var ftt=s(GD);eko=r(ftt,"RemBertForMultipleChoice"),ftt.forEach(t),oko=r(Hye," (RemBERT model)"),Hye.forEach(t),rko=i(K),T2=n(K,"LI",{});var Uye=s(T2);qce=n(Uye,"STRONG",{});var mtt=s(qce);tko=r(mtt,"roberta"),mtt.forEach(t),ako=r(Uye," \u2014 "),OD=n(Uye,"A",{href:!0});var gtt=s(OD);nko=r(gtt,"RobertaForMultipleChoice"),gtt.forEach(t),sko=r(Uye," (RoBERTa model)"),Uye.forEach(t),lko=i(K),M2=n(K,"LI",{});var Jye=s(M2);Nce=n(Jye,"STRONG",{});var htt=s(Nce);iko=r(htt,"roformer"),htt.forEach(t),dko=r(Jye," \u2014 "),VD=n(Jye,"A",{href:!0});var ptt=s(VD);cko=r(ptt,"RoFormerForMultipleChoice"),ptt.forEach(t),fko=r(Jye," (RoFormer model)"),Jye.forEach(t),mko=i(K),E2=n(K,"LI",{});var Yye=s(E2);jce=n(Yye,"STRONG",{});var utt=s(jce);gko=r(utt,"squeezebert"),utt.forEach(t),hko=r(Yye," \u2014 "),XD=n(Yye,"A",{href:!0});var _tt=s(XD);pko=r(_tt,"SqueezeBertForMultipleChoice"),_tt.forEach(t),uko=r(Yye," (SqueezeBERT model)"),Yye.forEach(t),_ko=i(K),C2=n(K,"LI",{});var Kye=s(C2);Dce=n(Kye,"STRONG",{});var btt=s(Dce);bko=r(btt,"xlm"),btt.forEach(t),vko=r(Kye," \u2014 "),zD=n(Kye,"A",{href:!0});var vtt=s(zD);Fko=r(vtt,"XLMForMultipleChoice"),vtt.forEach(t),Tko=r(Kye," (XLM model)"),Kye.forEach(t),Mko=i(K),w2=n(K,"LI",{});var Zye=s(w2);Gce=n(Zye,"STRONG",{});var Ftt=s(Gce);Eko=r(Ftt,"xlm-roberta"),Ftt.forEach(t),Cko=r(Zye," \u2014 "),QD=n(Zye,"A",{href:!0});var Ttt=s(QD);wko=r(Ttt,"XLMRobertaForMultipleChoice"),Ttt.forEach(t),Ako=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),yko=i(K),A2=n(K,"LI",{});var eLe=s(A2);Oce=n(eLe,"STRONG",{});var Mtt=s(Oce);Lko=r(Mtt,"xlm-roberta-xl"),Mtt.forEach(t),xko=r(eLe," \u2014 "),WD=n(eLe,"A",{href:!0});var Ett=s(WD);$ko=r(Ett,"XLMRobertaXLForMultipleChoice"),Ett.forEach(t),kko=r(eLe," (XLM-RoBERTa-XL model)"),eLe.forEach(t),Sko=i(K),y2=n(K,"LI",{});var oLe=s(y2);Vce=n(oLe,"STRONG",{});var Ctt=s(Vce);Rko=r(Ctt,"xlnet"),Ctt.forEach(t),Bko=r(oLe," \u2014 "),HD=n(oLe,"A",{href:!0});var wtt=s(HD);Pko=r(wtt,"XLNetForMultipleChoice"),wtt.forEach(t),Iko=r(oLe," (XLNet model)"),oLe.forEach(t),qko=i(K),L2=n(K,"LI",{});var rLe=s(L2);Xce=n(rLe,"STRONG",{});var Att=s(Xce);Nko=r(Att,"yoso"),Att.forEach(t),jko=r(rLe," \u2014 "),UD=n(rLe,"A",{href:!0});var ytt=s(UD);Dko=r(ytt,"YosoForMultipleChoice"),ytt.forEach(t),Gko=r(rLe," (YOSO model)"),rLe.forEach(t),K.forEach(t),Oko=i(ra),x2=n(ra,"P",{});var tLe=s(x2);Vko=r(tLe,"The model is set in evaluation mode by default using "),zce=n(tLe,"CODE",{});var Ltt=s(zce);Xko=r(Ltt,"model.eval()"),Ltt.forEach(t),zko=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(tLe,"CODE",{});var xtt=s(Qce);Qko=r(xtt,"model.train()"),xtt.forEach(t),tLe.forEach(t),Wko=i(ra),T($2.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),zBe=i(f),Ii=n(f,"H2",{class:!0});var WIe=s(Ii);k2=n(WIe,"A",{id:!0,class:!0,href:!0});var $tt=s(k2);Wce=n($tt,"SPAN",{});var ktt=s(Wce);T(S6.$$.fragment,ktt),ktt.forEach(t),$tt.forEach(t),Hko=i(WIe),Hce=n(WIe,"SPAN",{});var Stt=s(Hce);Uko=r(Stt,"AutoModelForNextSentencePrediction"),Stt.forEach(t),WIe.forEach(t),QBe=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(R6.$$.fragment,Os),Jko=i(Os),qi=n(Os,"P",{});var kY=s(qi);Yko=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JD=n(kY,"A",{href:!0});var Rtt=s(JD);Kko=r(Rtt,"from_pretrained()"),Rtt.forEach(t),Zko=r(kY," class method or the "),YD=n(kY,"A",{href:!0});var Btt=s(YD);eSo=r(Btt,"from_config()"),Btt.forEach(t),oSo=r(kY,` class
method.`),kY.forEach(t),rSo=i(Os),B6=n(Os,"P",{});var HIe=s(B6);tSo=r(HIe,"This class cannot be instantiated directly using "),Uce=n(HIe,"CODE",{});var Ptt=s(Uce);aSo=r(Ptt,"__init__()"),Ptt.forEach(t),nSo=r(HIe," (throws an error)."),HIe.forEach(t),sSo=i(Os),st=n(Os,"DIV",{class:!0});var Xw=s(st);T(P6.$$.fragment,Xw),lSo=i(Xw),Jce=n(Xw,"P",{});var Itt=s(Jce);iSo=r(Itt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Itt.forEach(t),dSo=i(Xw),Ni=n(Xw,"P",{});var SY=s(Ni);cSo=r(SY,`Note:
Loading a model from its configuration file does `),Yce=n(SY,"STRONG",{});var qtt=s(Yce);fSo=r(qtt,"not"),qtt.forEach(t),mSo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(SY,"A",{href:!0});var Ntt=s(KD);gSo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),hSo=r(SY," to load the model weights."),SY.forEach(t),pSo=i(Xw),T(S2.$$.fragment,Xw),Xw.forEach(t),uSo=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(I6.$$.fragment,ta),_So=i(ta),Kce=n(ta,"P",{});var jtt=s(Kce);bSo=r(jtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jtt.forEach(t),vSo=i(ta),$a=n(ta,"P",{});var zw=s($a);FSo=r(zw,"The model class to instantiate is selected based on the "),Zce=n(zw,"CODE",{});var Dtt=s(Zce);TSo=r(Dtt,"model_type"),Dtt.forEach(t),MSo=r(zw,` property of the config object (either
passed as an argument or loaded from `),efe=n(zw,"CODE",{});var Gtt=s(efe);ESo=r(Gtt,"pretrained_model_name_or_path"),Gtt.forEach(t),CSo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(zw,"CODE",{});var Ott=s(ofe);wSo=r(Ott,"pretrained_model_name_or_path"),Ott.forEach(t),ASo=r(zw,":"),zw.forEach(t),ySo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);R2=n(Vs,"LI",{});var aLe=s(R2);rfe=n(aLe,"STRONG",{});var Vtt=s(rfe);LSo=r(Vtt,"bert"),Vtt.forEach(t),xSo=r(aLe," \u2014 "),ZD=n(aLe,"A",{href:!0});var Xtt=s(ZD);$So=r(Xtt,"BertForNextSentencePrediction"),Xtt.forEach(t),kSo=r(aLe," (BERT model)"),aLe.forEach(t),SSo=i(Vs),B2=n(Vs,"LI",{});var nLe=s(B2);tfe=n(nLe,"STRONG",{});var ztt=s(tfe);RSo=r(ztt,"fnet"),ztt.forEach(t),BSo=r(nLe," \u2014 "),eG=n(nLe,"A",{href:!0});var Qtt=s(eG);PSo=r(Qtt,"FNetForNextSentencePrediction"),Qtt.forEach(t),ISo=r(nLe," (FNet model)"),nLe.forEach(t),qSo=i(Vs),P2=n(Vs,"LI",{});var sLe=s(P2);afe=n(sLe,"STRONG",{});var Wtt=s(afe);NSo=r(Wtt,"megatron-bert"),Wtt.forEach(t),jSo=r(sLe," \u2014 "),oG=n(sLe,"A",{href:!0});var Htt=s(oG);DSo=r(Htt,"MegatronBertForNextSentencePrediction"),Htt.forEach(t),GSo=r(sLe," (MegatronBert model)"),sLe.forEach(t),OSo=i(Vs),I2=n(Vs,"LI",{});var lLe=s(I2);nfe=n(lLe,"STRONG",{});var Utt=s(nfe);VSo=r(Utt,"mobilebert"),Utt.forEach(t),XSo=r(lLe," \u2014 "),rG=n(lLe,"A",{href:!0});var Jtt=s(rG);zSo=r(Jtt,"MobileBertForNextSentencePrediction"),Jtt.forEach(t),QSo=r(lLe," (MobileBERT model)"),lLe.forEach(t),WSo=i(Vs),q2=n(Vs,"LI",{});var iLe=s(q2);sfe=n(iLe,"STRONG",{});var Ytt=s(sfe);HSo=r(Ytt,"qdqbert"),Ytt.forEach(t),USo=r(iLe," \u2014 "),tG=n(iLe,"A",{href:!0});var Ktt=s(tG);JSo=r(Ktt,"QDQBertForNextSentencePrediction"),Ktt.forEach(t),YSo=r(iLe," (QDQBert model)"),iLe.forEach(t),Vs.forEach(t),KSo=i(ta),N2=n(ta,"P",{});var dLe=s(N2);ZSo=r(dLe,"The model is set in evaluation mode by default using "),lfe=n(dLe,"CODE",{});var Ztt=s(lfe);eRo=r(Ztt,"model.eval()"),Ztt.forEach(t),oRo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(dLe,"CODE",{});var eat=s(ife);rRo=r(eat,"model.train()"),eat.forEach(t),dLe.forEach(t),tRo=i(ta),T(j2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),WBe=i(f),ji=n(f,"H2",{class:!0});var UIe=s(ji);D2=n(UIe,"A",{id:!0,class:!0,href:!0});var oat=s(D2);dfe=n(oat,"SPAN",{});var rat=s(dfe);T(q6.$$.fragment,rat),rat.forEach(t),oat.forEach(t),aRo=i(UIe),cfe=n(UIe,"SPAN",{});var tat=s(cfe);nRo=r(tat,"AutoModelForTokenClassification"),tat.forEach(t),UIe.forEach(t),HBe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T(N6.$$.fragment,Xs),sRo=i(Xs),Di=n(Xs,"P",{});var RY=s(Di);lRo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aG=n(RY,"A",{href:!0});var aat=s(aG);iRo=r(aat,"from_pretrained()"),aat.forEach(t),dRo=r(RY," class method or the "),nG=n(RY,"A",{href:!0});var nat=s(nG);cRo=r(nat,"from_config()"),nat.forEach(t),fRo=r(RY,` class
method.`),RY.forEach(t),mRo=i(Xs),j6=n(Xs,"P",{});var JIe=s(j6);gRo=r(JIe,"This class cannot be instantiated directly using "),ffe=n(JIe,"CODE",{});var sat=s(ffe);hRo=r(sat,"__init__()"),sat.forEach(t),pRo=r(JIe," (throws an error)."),JIe.forEach(t),uRo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Qw=s(lt);T(D6.$$.fragment,Qw),_Ro=i(Qw),mfe=n(Qw,"P",{});var lat=s(mfe);bRo=r(lat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lat.forEach(t),vRo=i(Qw),Gi=n(Qw,"P",{});var BY=s(Gi);FRo=r(BY,`Note:
Loading a model from its configuration file does `),gfe=n(BY,"STRONG",{});var iat=s(gfe);TRo=r(iat,"not"),iat.forEach(t),MRo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(BY,"A",{href:!0});var dat=s(sG);ERo=r(dat,"from_pretrained()"),dat.forEach(t),CRo=r(BY," to load the model weights."),BY.forEach(t),wRo=i(Qw),T(G2.$$.fragment,Qw),Qw.forEach(t),ARo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(G6.$$.fragment,aa),yRo=i(aa),hfe=n(aa,"P",{});var cat=s(hfe);LRo=r(cat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cat.forEach(t),xRo=i(aa),ka=n(aa,"P",{});var Ww=s(ka);$Ro=r(Ww,"The model class to instantiate is selected based on the "),pfe=n(Ww,"CODE",{});var fat=s(pfe);kRo=r(fat,"model_type"),fat.forEach(t),SRo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),ufe=n(Ww,"CODE",{});var mat=s(ufe);RRo=r(mat,"pretrained_model_name_or_path"),mat.forEach(t),BRo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=n(Ww,"CODE",{});var gat=s(_fe);PRo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),IRo=r(Ww,":"),Ww.forEach(t),qRo=i(aa),U=n(aa,"UL",{});var J=s(U);O2=n(J,"LI",{});var cLe=s(O2);bfe=n(cLe,"STRONG",{});var hat=s(bfe);NRo=r(hat,"albert"),hat.forEach(t),jRo=r(cLe," \u2014 "),lG=n(cLe,"A",{href:!0});var pat=s(lG);DRo=r(pat,"AlbertForTokenClassification"),pat.forEach(t),GRo=r(cLe," (ALBERT model)"),cLe.forEach(t),ORo=i(J),V2=n(J,"LI",{});var fLe=s(V2);vfe=n(fLe,"STRONG",{});var uat=s(vfe);VRo=r(uat,"bert"),uat.forEach(t),XRo=r(fLe," \u2014 "),iG=n(fLe,"A",{href:!0});var _at=s(iG);zRo=r(_at,"BertForTokenClassification"),_at.forEach(t),QRo=r(fLe," (BERT model)"),fLe.forEach(t),WRo=i(J),X2=n(J,"LI",{});var mLe=s(X2);Ffe=n(mLe,"STRONG",{});var bat=s(Ffe);HRo=r(bat,"big_bird"),bat.forEach(t),URo=r(mLe," \u2014 "),dG=n(mLe,"A",{href:!0});var vat=s(dG);JRo=r(vat,"BigBirdForTokenClassification"),vat.forEach(t),YRo=r(mLe," (BigBird model)"),mLe.forEach(t),KRo=i(J),z2=n(J,"LI",{});var gLe=s(z2);Tfe=n(gLe,"STRONG",{});var Fat=s(Tfe);ZRo=r(Fat,"camembert"),Fat.forEach(t),eBo=r(gLe," \u2014 "),cG=n(gLe,"A",{href:!0});var Tat=s(cG);oBo=r(Tat,"CamembertForTokenClassification"),Tat.forEach(t),rBo=r(gLe," (CamemBERT model)"),gLe.forEach(t),tBo=i(J),Q2=n(J,"LI",{});var hLe=s(Q2);Mfe=n(hLe,"STRONG",{});var Mat=s(Mfe);aBo=r(Mat,"canine"),Mat.forEach(t),nBo=r(hLe," \u2014 "),fG=n(hLe,"A",{href:!0});var Eat=s(fG);sBo=r(Eat,"CanineForTokenClassification"),Eat.forEach(t),lBo=r(hLe," (Canine model)"),hLe.forEach(t),iBo=i(J),W2=n(J,"LI",{});var pLe=s(W2);Efe=n(pLe,"STRONG",{});var Cat=s(Efe);dBo=r(Cat,"convbert"),Cat.forEach(t),cBo=r(pLe," \u2014 "),mG=n(pLe,"A",{href:!0});var wat=s(mG);fBo=r(wat,"ConvBertForTokenClassification"),wat.forEach(t),mBo=r(pLe," (ConvBERT model)"),pLe.forEach(t),gBo=i(J),H2=n(J,"LI",{});var uLe=s(H2);Cfe=n(uLe,"STRONG",{});var Aat=s(Cfe);hBo=r(Aat,"data2vec-text"),Aat.forEach(t),pBo=r(uLe," \u2014 "),gG=n(uLe,"A",{href:!0});var yat=s(gG);uBo=r(yat,"Data2VecTextForTokenClassification"),yat.forEach(t),_Bo=r(uLe," (Data2VecText model)"),uLe.forEach(t),bBo=i(J),U2=n(J,"LI",{});var _Le=s(U2);wfe=n(_Le,"STRONG",{});var Lat=s(wfe);vBo=r(Lat,"deberta"),Lat.forEach(t),FBo=r(_Le," \u2014 "),hG=n(_Le,"A",{href:!0});var xat=s(hG);TBo=r(xat,"DebertaForTokenClassification"),xat.forEach(t),MBo=r(_Le," (DeBERTa model)"),_Le.forEach(t),EBo=i(J),J2=n(J,"LI",{});var bLe=s(J2);Afe=n(bLe,"STRONG",{});var $at=s(Afe);CBo=r($at,"deberta-v2"),$at.forEach(t),wBo=r(bLe," \u2014 "),pG=n(bLe,"A",{href:!0});var kat=s(pG);ABo=r(kat,"DebertaV2ForTokenClassification"),kat.forEach(t),yBo=r(bLe," (DeBERTa-v2 model)"),bLe.forEach(t),LBo=i(J),Y2=n(J,"LI",{});var vLe=s(Y2);yfe=n(vLe,"STRONG",{});var Sat=s(yfe);xBo=r(Sat,"distilbert"),Sat.forEach(t),$Bo=r(vLe," \u2014 "),uG=n(vLe,"A",{href:!0});var Rat=s(uG);kBo=r(Rat,"DistilBertForTokenClassification"),Rat.forEach(t),SBo=r(vLe," (DistilBERT model)"),vLe.forEach(t),RBo=i(J),K2=n(J,"LI",{});var FLe=s(K2);Lfe=n(FLe,"STRONG",{});var Bat=s(Lfe);BBo=r(Bat,"electra"),Bat.forEach(t),PBo=r(FLe," \u2014 "),_G=n(FLe,"A",{href:!0});var Pat=s(_G);IBo=r(Pat,"ElectraForTokenClassification"),Pat.forEach(t),qBo=r(FLe," (ELECTRA model)"),FLe.forEach(t),NBo=i(J),Z2=n(J,"LI",{});var TLe=s(Z2);xfe=n(TLe,"STRONG",{});var Iat=s(xfe);jBo=r(Iat,"flaubert"),Iat.forEach(t),DBo=r(TLe," \u2014 "),bG=n(TLe,"A",{href:!0});var qat=s(bG);GBo=r(qat,"FlaubertForTokenClassification"),qat.forEach(t),OBo=r(TLe," (FlauBERT model)"),TLe.forEach(t),VBo=i(J),e5=n(J,"LI",{});var MLe=s(e5);$fe=n(MLe,"STRONG",{});var Nat=s($fe);XBo=r(Nat,"fnet"),Nat.forEach(t),zBo=r(MLe," \u2014 "),vG=n(MLe,"A",{href:!0});var jat=s(vG);QBo=r(jat,"FNetForTokenClassification"),jat.forEach(t),WBo=r(MLe," (FNet model)"),MLe.forEach(t),HBo=i(J),o5=n(J,"LI",{});var ELe=s(o5);kfe=n(ELe,"STRONG",{});var Dat=s(kfe);UBo=r(Dat,"funnel"),Dat.forEach(t),JBo=r(ELe," \u2014 "),FG=n(ELe,"A",{href:!0});var Gat=s(FG);YBo=r(Gat,"FunnelForTokenClassification"),Gat.forEach(t),KBo=r(ELe," (Funnel Transformer model)"),ELe.forEach(t),ZBo=i(J),r5=n(J,"LI",{});var CLe=s(r5);Sfe=n(CLe,"STRONG",{});var Oat=s(Sfe);ePo=r(Oat,"gpt2"),Oat.forEach(t),oPo=r(CLe," \u2014 "),TG=n(CLe,"A",{href:!0});var Vat=s(TG);rPo=r(Vat,"GPT2ForTokenClassification"),Vat.forEach(t),tPo=r(CLe," (OpenAI GPT-2 model)"),CLe.forEach(t),aPo=i(J),t5=n(J,"LI",{});var wLe=s(t5);Rfe=n(wLe,"STRONG",{});var Xat=s(Rfe);nPo=r(Xat,"ibert"),Xat.forEach(t),sPo=r(wLe," \u2014 "),MG=n(wLe,"A",{href:!0});var zat=s(MG);lPo=r(zat,"IBertForTokenClassification"),zat.forEach(t),iPo=r(wLe," (I-BERT model)"),wLe.forEach(t),dPo=i(J),a5=n(J,"LI",{});var ALe=s(a5);Bfe=n(ALe,"STRONG",{});var Qat=s(Bfe);cPo=r(Qat,"layoutlm"),Qat.forEach(t),fPo=r(ALe," \u2014 "),EG=n(ALe,"A",{href:!0});var Wat=s(EG);mPo=r(Wat,"LayoutLMForTokenClassification"),Wat.forEach(t),gPo=r(ALe," (LayoutLM model)"),ALe.forEach(t),hPo=i(J),n5=n(J,"LI",{});var yLe=s(n5);Pfe=n(yLe,"STRONG",{});var Hat=s(Pfe);pPo=r(Hat,"layoutlmv2"),Hat.forEach(t),uPo=r(yLe," \u2014 "),CG=n(yLe,"A",{href:!0});var Uat=s(CG);_Po=r(Uat,"LayoutLMv2ForTokenClassification"),Uat.forEach(t),bPo=r(yLe," (LayoutLMv2 model)"),yLe.forEach(t),vPo=i(J),s5=n(J,"LI",{});var LLe=s(s5);Ife=n(LLe,"STRONG",{});var Jat=s(Ife);FPo=r(Jat,"longformer"),Jat.forEach(t),TPo=r(LLe," \u2014 "),wG=n(LLe,"A",{href:!0});var Yat=s(wG);MPo=r(Yat,"LongformerForTokenClassification"),Yat.forEach(t),EPo=r(LLe," (Longformer model)"),LLe.forEach(t),CPo=i(J),l5=n(J,"LI",{});var xLe=s(l5);qfe=n(xLe,"STRONG",{});var Kat=s(qfe);wPo=r(Kat,"megatron-bert"),Kat.forEach(t),APo=r(xLe," \u2014 "),AG=n(xLe,"A",{href:!0});var Zat=s(AG);yPo=r(Zat,"MegatronBertForTokenClassification"),Zat.forEach(t),LPo=r(xLe," (MegatronBert model)"),xLe.forEach(t),xPo=i(J),i5=n(J,"LI",{});var $Le=s(i5);Nfe=n($Le,"STRONG",{});var ent=s(Nfe);$Po=r(ent,"mobilebert"),ent.forEach(t),kPo=r($Le," \u2014 "),yG=n($Le,"A",{href:!0});var ont=s(yG);SPo=r(ont,"MobileBertForTokenClassification"),ont.forEach(t),RPo=r($Le," (MobileBERT model)"),$Le.forEach(t),BPo=i(J),d5=n(J,"LI",{});var kLe=s(d5);jfe=n(kLe,"STRONG",{});var rnt=s(jfe);PPo=r(rnt,"mpnet"),rnt.forEach(t),IPo=r(kLe," \u2014 "),LG=n(kLe,"A",{href:!0});var tnt=s(LG);qPo=r(tnt,"MPNetForTokenClassification"),tnt.forEach(t),NPo=r(kLe," (MPNet model)"),kLe.forEach(t),jPo=i(J),c5=n(J,"LI",{});var SLe=s(c5);Dfe=n(SLe,"STRONG",{});var ant=s(Dfe);DPo=r(ant,"nystromformer"),ant.forEach(t),GPo=r(SLe," \u2014 "),xG=n(SLe,"A",{href:!0});var nnt=s(xG);OPo=r(nnt,"NystromformerForTokenClassification"),nnt.forEach(t),VPo=r(SLe," (Nystromformer model)"),SLe.forEach(t),XPo=i(J),f5=n(J,"LI",{});var RLe=s(f5);Gfe=n(RLe,"STRONG",{});var snt=s(Gfe);zPo=r(snt,"qdqbert"),snt.forEach(t),QPo=r(RLe," \u2014 "),$G=n(RLe,"A",{href:!0});var lnt=s($G);WPo=r(lnt,"QDQBertForTokenClassification"),lnt.forEach(t),HPo=r(RLe," (QDQBert model)"),RLe.forEach(t),UPo=i(J),m5=n(J,"LI",{});var BLe=s(m5);Ofe=n(BLe,"STRONG",{});var int=s(Ofe);JPo=r(int,"rembert"),int.forEach(t),YPo=r(BLe," \u2014 "),kG=n(BLe,"A",{href:!0});var dnt=s(kG);KPo=r(dnt,"RemBertForTokenClassification"),dnt.forEach(t),ZPo=r(BLe," (RemBERT model)"),BLe.forEach(t),eIo=i(J),g5=n(J,"LI",{});var PLe=s(g5);Vfe=n(PLe,"STRONG",{});var cnt=s(Vfe);oIo=r(cnt,"roberta"),cnt.forEach(t),rIo=r(PLe," \u2014 "),SG=n(PLe,"A",{href:!0});var fnt=s(SG);tIo=r(fnt,"RobertaForTokenClassification"),fnt.forEach(t),aIo=r(PLe," (RoBERTa model)"),PLe.forEach(t),nIo=i(J),h5=n(J,"LI",{});var ILe=s(h5);Xfe=n(ILe,"STRONG",{});var mnt=s(Xfe);sIo=r(mnt,"roformer"),mnt.forEach(t),lIo=r(ILe," \u2014 "),RG=n(ILe,"A",{href:!0});var gnt=s(RG);iIo=r(gnt,"RoFormerForTokenClassification"),gnt.forEach(t),dIo=r(ILe," (RoFormer model)"),ILe.forEach(t),cIo=i(J),p5=n(J,"LI",{});var qLe=s(p5);zfe=n(qLe,"STRONG",{});var hnt=s(zfe);fIo=r(hnt,"squeezebert"),hnt.forEach(t),mIo=r(qLe," \u2014 "),BG=n(qLe,"A",{href:!0});var pnt=s(BG);gIo=r(pnt,"SqueezeBertForTokenClassification"),pnt.forEach(t),hIo=r(qLe," (SqueezeBERT model)"),qLe.forEach(t),pIo=i(J),u5=n(J,"LI",{});var NLe=s(u5);Qfe=n(NLe,"STRONG",{});var unt=s(Qfe);uIo=r(unt,"xlm"),unt.forEach(t),_Io=r(NLe," \u2014 "),PG=n(NLe,"A",{href:!0});var _nt=s(PG);bIo=r(_nt,"XLMForTokenClassification"),_nt.forEach(t),vIo=r(NLe," (XLM model)"),NLe.forEach(t),FIo=i(J),_5=n(J,"LI",{});var jLe=s(_5);Wfe=n(jLe,"STRONG",{});var bnt=s(Wfe);TIo=r(bnt,"xlm-roberta"),bnt.forEach(t),MIo=r(jLe," \u2014 "),IG=n(jLe,"A",{href:!0});var vnt=s(IG);EIo=r(vnt,"XLMRobertaForTokenClassification"),vnt.forEach(t),CIo=r(jLe," (XLM-RoBERTa model)"),jLe.forEach(t),wIo=i(J),b5=n(J,"LI",{});var DLe=s(b5);Hfe=n(DLe,"STRONG",{});var Fnt=s(Hfe);AIo=r(Fnt,"xlm-roberta-xl"),Fnt.forEach(t),yIo=r(DLe," \u2014 "),qG=n(DLe,"A",{href:!0});var Tnt=s(qG);LIo=r(Tnt,"XLMRobertaXLForTokenClassification"),Tnt.forEach(t),xIo=r(DLe," (XLM-RoBERTa-XL model)"),DLe.forEach(t),$Io=i(J),v5=n(J,"LI",{});var GLe=s(v5);Ufe=n(GLe,"STRONG",{});var Mnt=s(Ufe);kIo=r(Mnt,"xlnet"),Mnt.forEach(t),SIo=r(GLe," \u2014 "),NG=n(GLe,"A",{href:!0});var Ent=s(NG);RIo=r(Ent,"XLNetForTokenClassification"),Ent.forEach(t),BIo=r(GLe," (XLNet model)"),GLe.forEach(t),PIo=i(J),F5=n(J,"LI",{});var OLe=s(F5);Jfe=n(OLe,"STRONG",{});var Cnt=s(Jfe);IIo=r(Cnt,"yoso"),Cnt.forEach(t),qIo=r(OLe," \u2014 "),jG=n(OLe,"A",{href:!0});var wnt=s(jG);NIo=r(wnt,"YosoForTokenClassification"),wnt.forEach(t),jIo=r(OLe," (YOSO model)"),OLe.forEach(t),J.forEach(t),DIo=i(aa),T5=n(aa,"P",{});var VLe=s(T5);GIo=r(VLe,"The model is set in evaluation mode by default using "),Yfe=n(VLe,"CODE",{});var Ant=s(Yfe);OIo=r(Ant,"model.eval()"),Ant.forEach(t),VIo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(VLe,"CODE",{});var ynt=s(Kfe);XIo=r(ynt,"model.train()"),ynt.forEach(t),VLe.forEach(t),zIo=i(aa),T(M5.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),UBe=i(f),Oi=n(f,"H2",{class:!0});var YIe=s(Oi);E5=n(YIe,"A",{id:!0,class:!0,href:!0});var Lnt=s(E5);Zfe=n(Lnt,"SPAN",{});var xnt=s(Zfe);T(O6.$$.fragment,xnt),xnt.forEach(t),Lnt.forEach(t),QIo=i(YIe),eme=n(YIe,"SPAN",{});var $nt=s(eme);WIo=r($nt,"AutoModelForQuestionAnswering"),$nt.forEach(t),YIe.forEach(t),JBe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(V6.$$.fragment,zs),HIo=i(zs),Vi=n(zs,"P",{});var PY=s(Vi);UIo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DG=n(PY,"A",{href:!0});var knt=s(DG);JIo=r(knt,"from_pretrained()"),knt.forEach(t),YIo=r(PY," class method or the "),GG=n(PY,"A",{href:!0});var Snt=s(GG);KIo=r(Snt,"from_config()"),Snt.forEach(t),ZIo=r(PY,` class
method.`),PY.forEach(t),eqo=i(zs),X6=n(zs,"P",{});var KIe=s(X6);oqo=r(KIe,"This class cannot be instantiated directly using "),ome=n(KIe,"CODE",{});var Rnt=s(ome);rqo=r(Rnt,"__init__()"),Rnt.forEach(t),tqo=r(KIe," (throws an error)."),KIe.forEach(t),aqo=i(zs),it=n(zs,"DIV",{class:!0});var Hw=s(it);T(z6.$$.fragment,Hw),nqo=i(Hw),rme=n(Hw,"P",{});var Bnt=s(rme);sqo=r(Bnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bnt.forEach(t),lqo=i(Hw),Xi=n(Hw,"P",{});var IY=s(Xi);iqo=r(IY,`Note:
Loading a model from its configuration file does `),tme=n(IY,"STRONG",{});var Pnt=s(tme);dqo=r(Pnt,"not"),Pnt.forEach(t),cqo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(IY,"A",{href:!0});var Int=s(OG);fqo=r(Int,"from_pretrained()"),Int.forEach(t),mqo=r(IY," to load the model weights."),IY.forEach(t),gqo=i(Hw),T(C5.$$.fragment,Hw),Hw.forEach(t),hqo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(Q6.$$.fragment,na),pqo=i(na),ame=n(na,"P",{});var qnt=s(ame);uqo=r(qnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qnt.forEach(t),_qo=i(na),Sa=n(na,"P",{});var Uw=s(Sa);bqo=r(Uw,"The model class to instantiate is selected based on the "),nme=n(Uw,"CODE",{});var Nnt=s(nme);vqo=r(Nnt,"model_type"),Nnt.forEach(t),Fqo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),sme=n(Uw,"CODE",{});var jnt=s(sme);Tqo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),Mqo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(Uw,"CODE",{});var Dnt=s(lme);Eqo=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),Cqo=r(Uw,":"),Uw.forEach(t),wqo=i(na),O=n(na,"UL",{});var X=s(O);w5=n(X,"LI",{});var XLe=s(w5);ime=n(XLe,"STRONG",{});var Gnt=s(ime);Aqo=r(Gnt,"albert"),Gnt.forEach(t),yqo=r(XLe," \u2014 "),VG=n(XLe,"A",{href:!0});var Ont=s(VG);Lqo=r(Ont,"AlbertForQuestionAnswering"),Ont.forEach(t),xqo=r(XLe," (ALBERT model)"),XLe.forEach(t),$qo=i(X),A5=n(X,"LI",{});var zLe=s(A5);dme=n(zLe,"STRONG",{});var Vnt=s(dme);kqo=r(Vnt,"bart"),Vnt.forEach(t),Sqo=r(zLe," \u2014 "),XG=n(zLe,"A",{href:!0});var Xnt=s(XG);Rqo=r(Xnt,"BartForQuestionAnswering"),Xnt.forEach(t),Bqo=r(zLe," (BART model)"),zLe.forEach(t),Pqo=i(X),y5=n(X,"LI",{});var QLe=s(y5);cme=n(QLe,"STRONG",{});var znt=s(cme);Iqo=r(znt,"bert"),znt.forEach(t),qqo=r(QLe," \u2014 "),zG=n(QLe,"A",{href:!0});var Qnt=s(zG);Nqo=r(Qnt,"BertForQuestionAnswering"),Qnt.forEach(t),jqo=r(QLe," (BERT model)"),QLe.forEach(t),Dqo=i(X),L5=n(X,"LI",{});var WLe=s(L5);fme=n(WLe,"STRONG",{});var Wnt=s(fme);Gqo=r(Wnt,"big_bird"),Wnt.forEach(t),Oqo=r(WLe," \u2014 "),QG=n(WLe,"A",{href:!0});var Hnt=s(QG);Vqo=r(Hnt,"BigBirdForQuestionAnswering"),Hnt.forEach(t),Xqo=r(WLe," (BigBird model)"),WLe.forEach(t),zqo=i(X),x5=n(X,"LI",{});var HLe=s(x5);mme=n(HLe,"STRONG",{});var Unt=s(mme);Qqo=r(Unt,"bigbird_pegasus"),Unt.forEach(t),Wqo=r(HLe," \u2014 "),WG=n(HLe,"A",{href:!0});var Jnt=s(WG);Hqo=r(Jnt,"BigBirdPegasusForQuestionAnswering"),Jnt.forEach(t),Uqo=r(HLe," (BigBirdPegasus model)"),HLe.forEach(t),Jqo=i(X),$5=n(X,"LI",{});var ULe=s($5);gme=n(ULe,"STRONG",{});var Ynt=s(gme);Yqo=r(Ynt,"camembert"),Ynt.forEach(t),Kqo=r(ULe," \u2014 "),HG=n(ULe,"A",{href:!0});var Knt=s(HG);Zqo=r(Knt,"CamembertForQuestionAnswering"),Knt.forEach(t),eNo=r(ULe," (CamemBERT model)"),ULe.forEach(t),oNo=i(X),k5=n(X,"LI",{});var JLe=s(k5);hme=n(JLe,"STRONG",{});var Znt=s(hme);rNo=r(Znt,"canine"),Znt.forEach(t),tNo=r(JLe," \u2014 "),UG=n(JLe,"A",{href:!0});var est=s(UG);aNo=r(est,"CanineForQuestionAnswering"),est.forEach(t),nNo=r(JLe," (Canine model)"),JLe.forEach(t),sNo=i(X),S5=n(X,"LI",{});var YLe=s(S5);pme=n(YLe,"STRONG",{});var ost=s(pme);lNo=r(ost,"convbert"),ost.forEach(t),iNo=r(YLe," \u2014 "),JG=n(YLe,"A",{href:!0});var rst=s(JG);dNo=r(rst,"ConvBertForQuestionAnswering"),rst.forEach(t),cNo=r(YLe," (ConvBERT model)"),YLe.forEach(t),fNo=i(X),R5=n(X,"LI",{});var KLe=s(R5);ume=n(KLe,"STRONG",{});var tst=s(ume);mNo=r(tst,"data2vec-text"),tst.forEach(t),gNo=r(KLe," \u2014 "),YG=n(KLe,"A",{href:!0});var ast=s(YG);hNo=r(ast,"Data2VecTextForQuestionAnswering"),ast.forEach(t),pNo=r(KLe," (Data2VecText model)"),KLe.forEach(t),uNo=i(X),B5=n(X,"LI",{});var ZLe=s(B5);_me=n(ZLe,"STRONG",{});var nst=s(_me);_No=r(nst,"deberta"),nst.forEach(t),bNo=r(ZLe," \u2014 "),KG=n(ZLe,"A",{href:!0});var sst=s(KG);vNo=r(sst,"DebertaForQuestionAnswering"),sst.forEach(t),FNo=r(ZLe," (DeBERTa model)"),ZLe.forEach(t),TNo=i(X),P5=n(X,"LI",{});var e8e=s(P5);bme=n(e8e,"STRONG",{});var lst=s(bme);MNo=r(lst,"deberta-v2"),lst.forEach(t),ENo=r(e8e," \u2014 "),ZG=n(e8e,"A",{href:!0});var ist=s(ZG);CNo=r(ist,"DebertaV2ForQuestionAnswering"),ist.forEach(t),wNo=r(e8e," (DeBERTa-v2 model)"),e8e.forEach(t),ANo=i(X),I5=n(X,"LI",{});var o8e=s(I5);vme=n(o8e,"STRONG",{});var dst=s(vme);yNo=r(dst,"distilbert"),dst.forEach(t),LNo=r(o8e," \u2014 "),eO=n(o8e,"A",{href:!0});var cst=s(eO);xNo=r(cst,"DistilBertForQuestionAnswering"),cst.forEach(t),$No=r(o8e," (DistilBERT model)"),o8e.forEach(t),kNo=i(X),q5=n(X,"LI",{});var r8e=s(q5);Fme=n(r8e,"STRONG",{});var fst=s(Fme);SNo=r(fst,"electra"),fst.forEach(t),RNo=r(r8e," \u2014 "),oO=n(r8e,"A",{href:!0});var mst=s(oO);BNo=r(mst,"ElectraForQuestionAnswering"),mst.forEach(t),PNo=r(r8e," (ELECTRA model)"),r8e.forEach(t),INo=i(X),N5=n(X,"LI",{});var t8e=s(N5);Tme=n(t8e,"STRONG",{});var gst=s(Tme);qNo=r(gst,"flaubert"),gst.forEach(t),NNo=r(t8e," \u2014 "),rO=n(t8e,"A",{href:!0});var hst=s(rO);jNo=r(hst,"FlaubertForQuestionAnsweringSimple"),hst.forEach(t),DNo=r(t8e," (FlauBERT model)"),t8e.forEach(t),GNo=i(X),j5=n(X,"LI",{});var a8e=s(j5);Mme=n(a8e,"STRONG",{});var pst=s(Mme);ONo=r(pst,"fnet"),pst.forEach(t),VNo=r(a8e," \u2014 "),tO=n(a8e,"A",{href:!0});var ust=s(tO);XNo=r(ust,"FNetForQuestionAnswering"),ust.forEach(t),zNo=r(a8e," (FNet model)"),a8e.forEach(t),QNo=i(X),D5=n(X,"LI",{});var n8e=s(D5);Eme=n(n8e,"STRONG",{});var _st=s(Eme);WNo=r(_st,"funnel"),_st.forEach(t),HNo=r(n8e," \u2014 "),aO=n(n8e,"A",{href:!0});var bst=s(aO);UNo=r(bst,"FunnelForQuestionAnswering"),bst.forEach(t),JNo=r(n8e," (Funnel Transformer model)"),n8e.forEach(t),YNo=i(X),G5=n(X,"LI",{});var s8e=s(G5);Cme=n(s8e,"STRONG",{});var vst=s(Cme);KNo=r(vst,"gptj"),vst.forEach(t),ZNo=r(s8e," \u2014 "),nO=n(s8e,"A",{href:!0});var Fst=s(nO);ejo=r(Fst,"GPTJForQuestionAnswering"),Fst.forEach(t),ojo=r(s8e," (GPT-J model)"),s8e.forEach(t),rjo=i(X),O5=n(X,"LI",{});var l8e=s(O5);wme=n(l8e,"STRONG",{});var Tst=s(wme);tjo=r(Tst,"ibert"),Tst.forEach(t),ajo=r(l8e," \u2014 "),sO=n(l8e,"A",{href:!0});var Mst=s(sO);njo=r(Mst,"IBertForQuestionAnswering"),Mst.forEach(t),sjo=r(l8e," (I-BERT model)"),l8e.forEach(t),ljo=i(X),V5=n(X,"LI",{});var i8e=s(V5);Ame=n(i8e,"STRONG",{});var Est=s(Ame);ijo=r(Est,"layoutlmv2"),Est.forEach(t),djo=r(i8e," \u2014 "),lO=n(i8e,"A",{href:!0});var Cst=s(lO);cjo=r(Cst,"LayoutLMv2ForQuestionAnswering"),Cst.forEach(t),fjo=r(i8e," (LayoutLMv2 model)"),i8e.forEach(t),mjo=i(X),X5=n(X,"LI",{});var d8e=s(X5);yme=n(d8e,"STRONG",{});var wst=s(yme);gjo=r(wst,"led"),wst.forEach(t),hjo=r(d8e," \u2014 "),iO=n(d8e,"A",{href:!0});var Ast=s(iO);pjo=r(Ast,"LEDForQuestionAnswering"),Ast.forEach(t),ujo=r(d8e," (LED model)"),d8e.forEach(t),_jo=i(X),z5=n(X,"LI",{});var c8e=s(z5);Lme=n(c8e,"STRONG",{});var yst=s(Lme);bjo=r(yst,"longformer"),yst.forEach(t),vjo=r(c8e," \u2014 "),dO=n(c8e,"A",{href:!0});var Lst=s(dO);Fjo=r(Lst,"LongformerForQuestionAnswering"),Lst.forEach(t),Tjo=r(c8e," (Longformer model)"),c8e.forEach(t),Mjo=i(X),Q5=n(X,"LI",{});var f8e=s(Q5);xme=n(f8e,"STRONG",{});var xst=s(xme);Ejo=r(xst,"lxmert"),xst.forEach(t),Cjo=r(f8e," \u2014 "),cO=n(f8e,"A",{href:!0});var $st=s(cO);wjo=r($st,"LxmertForQuestionAnswering"),$st.forEach(t),Ajo=r(f8e," (LXMERT model)"),f8e.forEach(t),yjo=i(X),W5=n(X,"LI",{});var m8e=s(W5);$me=n(m8e,"STRONG",{});var kst=s($me);Ljo=r(kst,"mbart"),kst.forEach(t),xjo=r(m8e," \u2014 "),fO=n(m8e,"A",{href:!0});var Sst=s(fO);$jo=r(Sst,"MBartForQuestionAnswering"),Sst.forEach(t),kjo=r(m8e," (mBART model)"),m8e.forEach(t),Sjo=i(X),H5=n(X,"LI",{});var g8e=s(H5);kme=n(g8e,"STRONG",{});var Rst=s(kme);Rjo=r(Rst,"megatron-bert"),Rst.forEach(t),Bjo=r(g8e," \u2014 "),mO=n(g8e,"A",{href:!0});var Bst=s(mO);Pjo=r(Bst,"MegatronBertForQuestionAnswering"),Bst.forEach(t),Ijo=r(g8e," (MegatronBert model)"),g8e.forEach(t),qjo=i(X),U5=n(X,"LI",{});var h8e=s(U5);Sme=n(h8e,"STRONG",{});var Pst=s(Sme);Njo=r(Pst,"mobilebert"),Pst.forEach(t),jjo=r(h8e," \u2014 "),gO=n(h8e,"A",{href:!0});var Ist=s(gO);Djo=r(Ist,"MobileBertForQuestionAnswering"),Ist.forEach(t),Gjo=r(h8e," (MobileBERT model)"),h8e.forEach(t),Ojo=i(X),J5=n(X,"LI",{});var p8e=s(J5);Rme=n(p8e,"STRONG",{});var qst=s(Rme);Vjo=r(qst,"mpnet"),qst.forEach(t),Xjo=r(p8e," \u2014 "),hO=n(p8e,"A",{href:!0});var Nst=s(hO);zjo=r(Nst,"MPNetForQuestionAnswering"),Nst.forEach(t),Qjo=r(p8e," (MPNet model)"),p8e.forEach(t),Wjo=i(X),Y5=n(X,"LI",{});var u8e=s(Y5);Bme=n(u8e,"STRONG",{});var jst=s(Bme);Hjo=r(jst,"nystromformer"),jst.forEach(t),Ujo=r(u8e," \u2014 "),pO=n(u8e,"A",{href:!0});var Dst=s(pO);Jjo=r(Dst,"NystromformerForQuestionAnswering"),Dst.forEach(t),Yjo=r(u8e," (Nystromformer model)"),u8e.forEach(t),Kjo=i(X),K5=n(X,"LI",{});var _8e=s(K5);Pme=n(_8e,"STRONG",{});var Gst=s(Pme);Zjo=r(Gst,"qdqbert"),Gst.forEach(t),eDo=r(_8e," \u2014 "),uO=n(_8e,"A",{href:!0});var Ost=s(uO);oDo=r(Ost,"QDQBertForQuestionAnswering"),Ost.forEach(t),rDo=r(_8e," (QDQBert model)"),_8e.forEach(t),tDo=i(X),Z5=n(X,"LI",{});var b8e=s(Z5);Ime=n(b8e,"STRONG",{});var Vst=s(Ime);aDo=r(Vst,"reformer"),Vst.forEach(t),nDo=r(b8e," \u2014 "),_O=n(b8e,"A",{href:!0});var Xst=s(_O);sDo=r(Xst,"ReformerForQuestionAnswering"),Xst.forEach(t),lDo=r(b8e," (Reformer model)"),b8e.forEach(t),iDo=i(X),e3=n(X,"LI",{});var v8e=s(e3);qme=n(v8e,"STRONG",{});var zst=s(qme);dDo=r(zst,"rembert"),zst.forEach(t),cDo=r(v8e," \u2014 "),bO=n(v8e,"A",{href:!0});var Qst=s(bO);fDo=r(Qst,"RemBertForQuestionAnswering"),Qst.forEach(t),mDo=r(v8e," (RemBERT model)"),v8e.forEach(t),gDo=i(X),o3=n(X,"LI",{});var F8e=s(o3);Nme=n(F8e,"STRONG",{});var Wst=s(Nme);hDo=r(Wst,"roberta"),Wst.forEach(t),pDo=r(F8e," \u2014 "),vO=n(F8e,"A",{href:!0});var Hst=s(vO);uDo=r(Hst,"RobertaForQuestionAnswering"),Hst.forEach(t),_Do=r(F8e," (RoBERTa model)"),F8e.forEach(t),bDo=i(X),r3=n(X,"LI",{});var T8e=s(r3);jme=n(T8e,"STRONG",{});var Ust=s(jme);vDo=r(Ust,"roformer"),Ust.forEach(t),FDo=r(T8e," \u2014 "),FO=n(T8e,"A",{href:!0});var Jst=s(FO);TDo=r(Jst,"RoFormerForQuestionAnswering"),Jst.forEach(t),MDo=r(T8e," (RoFormer model)"),T8e.forEach(t),EDo=i(X),t3=n(X,"LI",{});var M8e=s(t3);Dme=n(M8e,"STRONG",{});var Yst=s(Dme);CDo=r(Yst,"splinter"),Yst.forEach(t),wDo=r(M8e," \u2014 "),TO=n(M8e,"A",{href:!0});var Kst=s(TO);ADo=r(Kst,"SplinterForQuestionAnswering"),Kst.forEach(t),yDo=r(M8e," (Splinter model)"),M8e.forEach(t),LDo=i(X),a3=n(X,"LI",{});var E8e=s(a3);Gme=n(E8e,"STRONG",{});var Zst=s(Gme);xDo=r(Zst,"squeezebert"),Zst.forEach(t),$Do=r(E8e," \u2014 "),MO=n(E8e,"A",{href:!0});var elt=s(MO);kDo=r(elt,"SqueezeBertForQuestionAnswering"),elt.forEach(t),SDo=r(E8e," (SqueezeBERT model)"),E8e.forEach(t),RDo=i(X),n3=n(X,"LI",{});var C8e=s(n3);Ome=n(C8e,"STRONG",{});var olt=s(Ome);BDo=r(olt,"xlm"),olt.forEach(t),PDo=r(C8e," \u2014 "),EO=n(C8e,"A",{href:!0});var rlt=s(EO);IDo=r(rlt,"XLMForQuestionAnsweringSimple"),rlt.forEach(t),qDo=r(C8e," (XLM model)"),C8e.forEach(t),NDo=i(X),s3=n(X,"LI",{});var w8e=s(s3);Vme=n(w8e,"STRONG",{});var tlt=s(Vme);jDo=r(tlt,"xlm-roberta"),tlt.forEach(t),DDo=r(w8e," \u2014 "),CO=n(w8e,"A",{href:!0});var alt=s(CO);GDo=r(alt,"XLMRobertaForQuestionAnswering"),alt.forEach(t),ODo=r(w8e," (XLM-RoBERTa model)"),w8e.forEach(t),VDo=i(X),l3=n(X,"LI",{});var A8e=s(l3);Xme=n(A8e,"STRONG",{});var nlt=s(Xme);XDo=r(nlt,"xlm-roberta-xl"),nlt.forEach(t),zDo=r(A8e," \u2014 "),wO=n(A8e,"A",{href:!0});var slt=s(wO);QDo=r(slt,"XLMRobertaXLForQuestionAnswering"),slt.forEach(t),WDo=r(A8e," (XLM-RoBERTa-XL model)"),A8e.forEach(t),HDo=i(X),i3=n(X,"LI",{});var y8e=s(i3);zme=n(y8e,"STRONG",{});var llt=s(zme);UDo=r(llt,"xlnet"),llt.forEach(t),JDo=r(y8e," \u2014 "),AO=n(y8e,"A",{href:!0});var ilt=s(AO);YDo=r(ilt,"XLNetForQuestionAnsweringSimple"),ilt.forEach(t),KDo=r(y8e," (XLNet model)"),y8e.forEach(t),ZDo=i(X),d3=n(X,"LI",{});var L8e=s(d3);Qme=n(L8e,"STRONG",{});var dlt=s(Qme);eGo=r(dlt,"yoso"),dlt.forEach(t),oGo=r(L8e," \u2014 "),yO=n(L8e,"A",{href:!0});var clt=s(yO);rGo=r(clt,"YosoForQuestionAnswering"),clt.forEach(t),tGo=r(L8e," (YOSO model)"),L8e.forEach(t),X.forEach(t),aGo=i(na),c3=n(na,"P",{});var x8e=s(c3);nGo=r(x8e,"The model is set in evaluation mode by default using "),Wme=n(x8e,"CODE",{});var flt=s(Wme);sGo=r(flt,"model.eval()"),flt.forEach(t),lGo=r(x8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(x8e,"CODE",{});var mlt=s(Hme);iGo=r(mlt,"model.train()"),mlt.forEach(t),x8e.forEach(t),dGo=i(na),T(f3.$$.fragment,na),na.forEach(t),zs.forEach(t),YBe=i(f),zi=n(f,"H2",{class:!0});var ZIe=s(zi);m3=n(ZIe,"A",{id:!0,class:!0,href:!0});var glt=s(m3);Ume=n(glt,"SPAN",{});var hlt=s(Ume);T(W6.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),cGo=i(ZIe),Jme=n(ZIe,"SPAN",{});var plt=s(Jme);fGo=r(plt,"AutoModelForTableQuestionAnswering"),plt.forEach(t),ZIe.forEach(t),KBe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(H6.$$.fragment,Qs),mGo=i(Qs),Qi=n(Qs,"P",{});var qY=s(Qi);gGo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LO=n(qY,"A",{href:!0});var ult=s(LO);hGo=r(ult,"from_pretrained()"),ult.forEach(t),pGo=r(qY," class method or the "),xO=n(qY,"A",{href:!0});var _lt=s(xO);uGo=r(_lt,"from_config()"),_lt.forEach(t),_Go=r(qY,` class
method.`),qY.forEach(t),bGo=i(Qs),U6=n(Qs,"P",{});var eqe=s(U6);vGo=r(eqe,"This class cannot be instantiated directly using "),Yme=n(eqe,"CODE",{});var blt=s(Yme);FGo=r(blt,"__init__()"),blt.forEach(t),TGo=r(eqe," (throws an error)."),eqe.forEach(t),MGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Jw=s(dt);T(J6.$$.fragment,Jw),EGo=i(Jw),Kme=n(Jw,"P",{});var vlt=s(Kme);CGo=r(vlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vlt.forEach(t),wGo=i(Jw),Wi=n(Jw,"P",{});var NY=s(Wi);AGo=r(NY,`Note:
Loading a model from its configuration file does `),Zme=n(NY,"STRONG",{});var Flt=s(Zme);yGo=r(Flt,"not"),Flt.forEach(t),LGo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(NY,"A",{href:!0});var Tlt=s($O);xGo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),$Go=r(NY," to load the model weights."),NY.forEach(t),kGo=i(Jw),T(g3.$$.fragment,Jw),Jw.forEach(t),SGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(Y6.$$.fragment,sa),RGo=i(sa),ege=n(sa,"P",{});var Mlt=s(ege);BGo=r(Mlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mlt.forEach(t),PGo=i(sa),Ra=n(sa,"P",{});var Yw=s(Ra);IGo=r(Yw,"The model class to instantiate is selected based on the "),oge=n(Yw,"CODE",{});var Elt=s(oge);qGo=r(Elt,"model_type"),Elt.forEach(t),NGo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),rge=n(Yw,"CODE",{});var Clt=s(rge);jGo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),DGo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(Yw,"CODE",{});var wlt=s(tge);GGo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),OGo=r(Yw,":"),Yw.forEach(t),VGo=i(sa),age=n(sa,"UL",{});var Alt=s(age);h3=n(Alt,"LI",{});var $8e=s(h3);nge=n($8e,"STRONG",{});var ylt=s(nge);XGo=r(ylt,"tapas"),ylt.forEach(t),zGo=r($8e," \u2014 "),kO=n($8e,"A",{href:!0});var Llt=s(kO);QGo=r(Llt,"TapasForQuestionAnswering"),Llt.forEach(t),WGo=r($8e," (TAPAS model)"),$8e.forEach(t),Alt.forEach(t),HGo=i(sa),p3=n(sa,"P",{});var k8e=s(p3);UGo=r(k8e,"The model is set in evaluation mode by default using "),sge=n(k8e,"CODE",{});var xlt=s(sge);JGo=r(xlt,"model.eval()"),xlt.forEach(t),YGo=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n(k8e,"CODE",{});var $lt=s(lge);KGo=r($lt,"model.train()"),$lt.forEach(t),k8e.forEach(t),ZGo=i(sa),T(u3.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),ZBe=i(f),Hi=n(f,"H2",{class:!0});var oqe=s(Hi);_3=n(oqe,"A",{id:!0,class:!0,href:!0});var klt=s(_3);ige=n(klt,"SPAN",{});var Slt=s(ige);T(K6.$$.fragment,Slt),Slt.forEach(t),klt.forEach(t),eOo=i(oqe),dge=n(oqe,"SPAN",{});var Rlt=s(dge);oOo=r(Rlt,"AutoModelForImageClassification"),Rlt.forEach(t),oqe.forEach(t),ePe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(Z6.$$.fragment,Ws),rOo=i(Ws),Ui=n(Ws,"P",{});var jY=s(Ui);tOo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SO=n(jY,"A",{href:!0});var Blt=s(SO);aOo=r(Blt,"from_pretrained()"),Blt.forEach(t),nOo=r(jY," class method or the "),RO=n(jY,"A",{href:!0});var Plt=s(RO);sOo=r(Plt,"from_config()"),Plt.forEach(t),lOo=r(jY,` class
method.`),jY.forEach(t),iOo=i(Ws),ey=n(Ws,"P",{});var rqe=s(ey);dOo=r(rqe,"This class cannot be instantiated directly using "),cge=n(rqe,"CODE",{});var Ilt=s(cge);cOo=r(Ilt,"__init__()"),Ilt.forEach(t),fOo=r(rqe," (throws an error)."),rqe.forEach(t),mOo=i(Ws),ct=n(Ws,"DIV",{class:!0});var Kw=s(ct);T(oy.$$.fragment,Kw),gOo=i(Kw),fge=n(Kw,"P",{});var qlt=s(fge);hOo=r(qlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qlt.forEach(t),pOo=i(Kw),Ji=n(Kw,"P",{});var DY=s(Ji);uOo=r(DY,`Note:
Loading a model from its configuration file does `),mge=n(DY,"STRONG",{});var Nlt=s(mge);_Oo=r(Nlt,"not"),Nlt.forEach(t),bOo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(DY,"A",{href:!0});var jlt=s(BO);vOo=r(jlt,"from_pretrained()"),jlt.forEach(t),FOo=r(DY," to load the model weights."),DY.forEach(t),TOo=i(Kw),T(b3.$$.fragment,Kw),Kw.forEach(t),MOo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(ry.$$.fragment,la),EOo=i(la),gge=n(la,"P",{});var Dlt=s(gge);COo=r(Dlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dlt.forEach(t),wOo=i(la),Ba=n(la,"P",{});var Zw=s(Ba);AOo=r(Zw,"The model class to instantiate is selected based on the "),hge=n(Zw,"CODE",{});var Glt=s(hge);yOo=r(Glt,"model_type"),Glt.forEach(t),LOo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),pge=n(Zw,"CODE",{});var Olt=s(pge);xOo=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),$Oo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(Zw,"CODE",{});var Vlt=s(uge);kOo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),SOo=r(Zw,":"),Zw.forEach(t),ROo=i(la),ve=n(la,"UL",{});var Ee=s(ve);v3=n(Ee,"LI",{});var S8e=s(v3);_ge=n(S8e,"STRONG",{});var Xlt=s(_ge);BOo=r(Xlt,"beit"),Xlt.forEach(t),POo=r(S8e," \u2014 "),PO=n(S8e,"A",{href:!0});var zlt=s(PO);IOo=r(zlt,"BeitForImageClassification"),zlt.forEach(t),qOo=r(S8e," (BEiT model)"),S8e.forEach(t),NOo=i(Ee),F3=n(Ee,"LI",{});var R8e=s(F3);bge=n(R8e,"STRONG",{});var Qlt=s(bge);jOo=r(Qlt,"convnext"),Qlt.forEach(t),DOo=r(R8e," \u2014 "),IO=n(R8e,"A",{href:!0});var Wlt=s(IO);GOo=r(Wlt,"ConvNextForImageClassification"),Wlt.forEach(t),OOo=r(R8e," (ConvNext model)"),R8e.forEach(t),VOo=i(Ee),T3=n(Ee,"LI",{});var B8e=s(T3);vge=n(B8e,"STRONG",{});var Hlt=s(vge);XOo=r(Hlt,"data2vec-vision"),Hlt.forEach(t),zOo=r(B8e," \u2014 "),qO=n(B8e,"A",{href:!0});var Ult=s(qO);QOo=r(Ult,"Data2VecVisionForImageClassification"),Ult.forEach(t),WOo=r(B8e," (Data2VecVision model)"),B8e.forEach(t),HOo=i(Ee),xs=n(Ee,"LI",{});var B9=s(xs);Fge=n(B9,"STRONG",{});var Jlt=s(Fge);UOo=r(Jlt,"deit"),Jlt.forEach(t),JOo=r(B9," \u2014 "),NO=n(B9,"A",{href:!0});var Ylt=s(NO);YOo=r(Ylt,"DeiTForImageClassification"),Ylt.forEach(t),KOo=r(B9," or "),jO=n(B9,"A",{href:!0});var Klt=s(jO);ZOo=r(Klt,"DeiTForImageClassificationWithTeacher"),Klt.forEach(t),eVo=r(B9," (DeiT model)"),B9.forEach(t),oVo=i(Ee),M3=n(Ee,"LI",{});var P8e=s(M3);Tge=n(P8e,"STRONG",{});var Zlt=s(Tge);rVo=r(Zlt,"imagegpt"),Zlt.forEach(t),tVo=r(P8e," \u2014 "),DO=n(P8e,"A",{href:!0});var eit=s(DO);aVo=r(eit,"ImageGPTForImageClassification"),eit.forEach(t),nVo=r(P8e," (ImageGPT model)"),P8e.forEach(t),sVo=i(Ee),ft=n(Ee,"LI",{});var of=s(ft);Mge=n(of,"STRONG",{});var oit=s(Mge);lVo=r(oit,"perceiver"),oit.forEach(t),iVo=r(of," \u2014 "),GO=n(of,"A",{href:!0});var rit=s(GO);dVo=r(rit,"PerceiverForImageClassificationLearned"),rit.forEach(t),cVo=r(of," or "),OO=n(of,"A",{href:!0});var tit=s(OO);fVo=r(tit,"PerceiverForImageClassificationFourier"),tit.forEach(t),mVo=r(of," or "),VO=n(of,"A",{href:!0});var ait=s(VO);gVo=r(ait,"PerceiverForImageClassificationConvProcessing"),ait.forEach(t),hVo=r(of," (Perceiver model)"),of.forEach(t),pVo=i(Ee),E3=n(Ee,"LI",{});var I8e=s(E3);Ege=n(I8e,"STRONG",{});var nit=s(Ege);uVo=r(nit,"poolformer"),nit.forEach(t),_Vo=r(I8e," \u2014 "),XO=n(I8e,"A",{href:!0});var sit=s(XO);bVo=r(sit,"PoolFormerForImageClassification"),sit.forEach(t),vVo=r(I8e," (PoolFormer model)"),I8e.forEach(t),FVo=i(Ee),C3=n(Ee,"LI",{});var q8e=s(C3);Cge=n(q8e,"STRONG",{});var lit=s(Cge);TVo=r(lit,"regnet"),lit.forEach(t),MVo=r(q8e," \u2014 "),zO=n(q8e,"A",{href:!0});var iit=s(zO);EVo=r(iit,"RegNetForImageClassification"),iit.forEach(t),CVo=r(q8e," (RegNet model)"),q8e.forEach(t),wVo=i(Ee),w3=n(Ee,"LI",{});var N8e=s(w3);wge=n(N8e,"STRONG",{});var dit=s(wge);AVo=r(dit,"resnet"),dit.forEach(t),yVo=r(N8e," \u2014 "),QO=n(N8e,"A",{href:!0});var cit=s(QO);LVo=r(cit,"ResNetForImageClassification"),cit.forEach(t),xVo=r(N8e," (ResNet model)"),N8e.forEach(t),$Vo=i(Ee),A3=n(Ee,"LI",{});var j8e=s(A3);Age=n(j8e,"STRONG",{});var fit=s(Age);kVo=r(fit,"segformer"),fit.forEach(t),SVo=r(j8e," \u2014 "),WO=n(j8e,"A",{href:!0});var mit=s(WO);RVo=r(mit,"SegformerForImageClassification"),mit.forEach(t),BVo=r(j8e," (SegFormer model)"),j8e.forEach(t),PVo=i(Ee),y3=n(Ee,"LI",{});var D8e=s(y3);yge=n(D8e,"STRONG",{});var git=s(yge);IVo=r(git,"swin"),git.forEach(t),qVo=r(D8e," \u2014 "),HO=n(D8e,"A",{href:!0});var hit=s(HO);NVo=r(hit,"SwinForImageClassification"),hit.forEach(t),jVo=r(D8e," (Swin model)"),D8e.forEach(t),DVo=i(Ee),L3=n(Ee,"LI",{});var G8e=s(L3);Lge=n(G8e,"STRONG",{});var pit=s(Lge);GVo=r(pit,"van"),pit.forEach(t),OVo=r(G8e," \u2014 "),UO=n(G8e,"A",{href:!0});var uit=s(UO);VVo=r(uit,"VanForImageClassification"),uit.forEach(t),XVo=r(G8e," (VAN model)"),G8e.forEach(t),zVo=i(Ee),x3=n(Ee,"LI",{});var O8e=s(x3);xge=n(O8e,"STRONG",{});var _it=s(xge);QVo=r(_it,"vit"),_it.forEach(t),WVo=r(O8e," \u2014 "),JO=n(O8e,"A",{href:!0});var bit=s(JO);HVo=r(bit,"ViTForImageClassification"),bit.forEach(t),UVo=r(O8e," (ViT model)"),O8e.forEach(t),Ee.forEach(t),JVo=i(la),$3=n(la,"P",{});var V8e=s($3);YVo=r(V8e,"The model is set in evaluation mode by default using "),$ge=n(V8e,"CODE",{});var vit=s($ge);KVo=r(vit,"model.eval()"),vit.forEach(t),ZVo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(V8e,"CODE",{});var Fit=s(kge);eXo=r(Fit,"model.train()"),Fit.forEach(t),V8e.forEach(t),oXo=i(la),T(k3.$$.fragment,la),la.forEach(t),Ws.forEach(t),oPe=i(f),Yi=n(f,"H2",{class:!0});var tqe=s(Yi);S3=n(tqe,"A",{id:!0,class:!0,href:!0});var Tit=s(S3);Sge=n(Tit,"SPAN",{});var Mit=s(Sge);T(ty.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),rXo=i(tqe),Rge=n(tqe,"SPAN",{});var Eit=s(Rge);tXo=r(Eit,"AutoModelForVision2Seq"),Eit.forEach(t),tqe.forEach(t),rPe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(ay.$$.fragment,Hs),aXo=i(Hs),Ki=n(Hs,"P",{});var GY=s(Ki);nXo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YO=n(GY,"A",{href:!0});var Cit=s(YO);sXo=r(Cit,"from_pretrained()"),Cit.forEach(t),lXo=r(GY," class method or the "),KO=n(GY,"A",{href:!0});var wit=s(KO);iXo=r(wit,"from_config()"),wit.forEach(t),dXo=r(GY,` class
method.`),GY.forEach(t),cXo=i(Hs),ny=n(Hs,"P",{});var aqe=s(ny);fXo=r(aqe,"This class cannot be instantiated directly using "),Bge=n(aqe,"CODE",{});var Ait=s(Bge);mXo=r(Ait,"__init__()"),Ait.forEach(t),gXo=r(aqe," (throws an error)."),aqe.forEach(t),hXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var eA=s(mt);T(sy.$$.fragment,eA),pXo=i(eA),Pge=n(eA,"P",{});var yit=s(Pge);uXo=r(yit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yit.forEach(t),_Xo=i(eA),Zi=n(eA,"P",{});var OY=s(Zi);bXo=r(OY,`Note:
Loading a model from its configuration file does `),Ige=n(OY,"STRONG",{});var Lit=s(Ige);vXo=r(Lit,"not"),Lit.forEach(t),FXo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(OY,"A",{href:!0});var xit=s(ZO);TXo=r(xit,"from_pretrained()"),xit.forEach(t),MXo=r(OY," to load the model weights."),OY.forEach(t),EXo=i(eA),T(R3.$$.fragment,eA),eA.forEach(t),CXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(ly.$$.fragment,ia),wXo=i(ia),qge=n(ia,"P",{});var $it=s(qge);AXo=r($it,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$it.forEach(t),yXo=i(ia),Pa=n(ia,"P",{});var oA=s(Pa);LXo=r(oA,"The model class to instantiate is selected based on the "),Nge=n(oA,"CODE",{});var kit=s(Nge);xXo=r(kit,"model_type"),kit.forEach(t),$Xo=r(oA,` property of the config object (either
passed as an argument or loaded from `),jge=n(oA,"CODE",{});var Sit=s(jge);kXo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),SXo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(oA,"CODE",{});var Rit=s(Dge);RXo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),BXo=r(oA,":"),oA.forEach(t),PXo=i(ia),Gge=n(ia,"UL",{});var Bit=s(Gge);B3=n(Bit,"LI",{});var X8e=s(B3);Oge=n(X8e,"STRONG",{});var Pit=s(Oge);IXo=r(Pit,"vision-encoder-decoder"),Pit.forEach(t),qXo=r(X8e," \u2014 "),eV=n(X8e,"A",{href:!0});var Iit=s(eV);NXo=r(Iit,"VisionEncoderDecoderModel"),Iit.forEach(t),jXo=r(X8e," (Vision Encoder decoder model)"),X8e.forEach(t),Bit.forEach(t),DXo=i(ia),P3=n(ia,"P",{});var z8e=s(P3);GXo=r(z8e,"The model is set in evaluation mode by default using "),Vge=n(z8e,"CODE",{});var qit=s(Vge);OXo=r(qit,"model.eval()"),qit.forEach(t),VXo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(z8e,"CODE",{});var Nit=s(Xge);XXo=r(Nit,"model.train()"),Nit.forEach(t),z8e.forEach(t),zXo=i(ia),T(I3.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),tPe=i(f),ed=n(f,"H2",{class:!0});var nqe=s(ed);q3=n(nqe,"A",{id:!0,class:!0,href:!0});var jit=s(q3);zge=n(jit,"SPAN",{});var Dit=s(zge);T(iy.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),QXo=i(nqe),Qge=n(nqe,"SPAN",{});var Git=s(Qge);WXo=r(Git,"AutoModelForAudioClassification"),Git.forEach(t),nqe.forEach(t),aPe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(dy.$$.fragment,Us),HXo=i(Us),od=n(Us,"P",{});var VY=s(od);UXo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oV=n(VY,"A",{href:!0});var Oit=s(oV);JXo=r(Oit,"from_pretrained()"),Oit.forEach(t),YXo=r(VY," class method or the "),rV=n(VY,"A",{href:!0});var Vit=s(rV);KXo=r(Vit,"from_config()"),Vit.forEach(t),ZXo=r(VY,` class
method.`),VY.forEach(t),ezo=i(Us),cy=n(Us,"P",{});var sqe=s(cy);ozo=r(sqe,"This class cannot be instantiated directly using "),Wge=n(sqe,"CODE",{});var Xit=s(Wge);rzo=r(Xit,"__init__()"),Xit.forEach(t),tzo=r(sqe," (throws an error)."),sqe.forEach(t),azo=i(Us),gt=n(Us,"DIV",{class:!0});var rA=s(gt);T(fy.$$.fragment,rA),nzo=i(rA),Hge=n(rA,"P",{});var zit=s(Hge);szo=r(zit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zit.forEach(t),lzo=i(rA),rd=n(rA,"P",{});var XY=s(rd);izo=r(XY,`Note:
Loading a model from its configuration file does `),Uge=n(XY,"STRONG",{});var Qit=s(Uge);dzo=r(Qit,"not"),Qit.forEach(t),czo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(XY,"A",{href:!0});var Wit=s(tV);fzo=r(Wit,"from_pretrained()"),Wit.forEach(t),mzo=r(XY," to load the model weights."),XY.forEach(t),gzo=i(rA),T(N3.$$.fragment,rA),rA.forEach(t),hzo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(my.$$.fragment,da),pzo=i(da),Jge=n(da,"P",{});var Hit=s(Jge);uzo=r(Hit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Hit.forEach(t),_zo=i(da),Ia=n(da,"P",{});var tA=s(Ia);bzo=r(tA,"The model class to instantiate is selected based on the "),Yge=n(tA,"CODE",{});var Uit=s(Yge);vzo=r(Uit,"model_type"),Uit.forEach(t),Fzo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Kge=n(tA,"CODE",{});var Jit=s(Kge);Tzo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),Mzo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(tA,"CODE",{});var Yit=s(Zge);Ezo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),Czo=r(tA,":"),tA.forEach(t),wzo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);j3=n(bo,"LI",{});var Q8e=s(j3);ehe=n(Q8e,"STRONG",{});var Kit=s(ehe);Azo=r(Kit,"data2vec-audio"),Kit.forEach(t),yzo=r(Q8e," \u2014 "),aV=n(Q8e,"A",{href:!0});var Zit=s(aV);Lzo=r(Zit,"Data2VecAudioForSequenceClassification"),Zit.forEach(t),xzo=r(Q8e," (Data2VecAudio model)"),Q8e.forEach(t),$zo=i(bo),D3=n(bo,"LI",{});var W8e=s(D3);ohe=n(W8e,"STRONG",{});var edt=s(ohe);kzo=r(edt,"hubert"),edt.forEach(t),Szo=r(W8e," \u2014 "),nV=n(W8e,"A",{href:!0});var odt=s(nV);Rzo=r(odt,"HubertForSequenceClassification"),odt.forEach(t),Bzo=r(W8e," (Hubert model)"),W8e.forEach(t),Pzo=i(bo),G3=n(bo,"LI",{});var H8e=s(G3);rhe=n(H8e,"STRONG",{});var rdt=s(rhe);Izo=r(rdt,"sew"),rdt.forEach(t),qzo=r(H8e," \u2014 "),sV=n(H8e,"A",{href:!0});var tdt=s(sV);Nzo=r(tdt,"SEWForSequenceClassification"),tdt.forEach(t),jzo=r(H8e," (SEW model)"),H8e.forEach(t),Dzo=i(bo),O3=n(bo,"LI",{});var U8e=s(O3);the=n(U8e,"STRONG",{});var adt=s(the);Gzo=r(adt,"sew-d"),adt.forEach(t),Ozo=r(U8e," \u2014 "),lV=n(U8e,"A",{href:!0});var ndt=s(lV);Vzo=r(ndt,"SEWDForSequenceClassification"),ndt.forEach(t),Xzo=r(U8e," (SEW-D model)"),U8e.forEach(t),zzo=i(bo),V3=n(bo,"LI",{});var J8e=s(V3);ahe=n(J8e,"STRONG",{});var sdt=s(ahe);Qzo=r(sdt,"unispeech"),sdt.forEach(t),Wzo=r(J8e," \u2014 "),iV=n(J8e,"A",{href:!0});var ldt=s(iV);Hzo=r(ldt,"UniSpeechForSequenceClassification"),ldt.forEach(t),Uzo=r(J8e," (UniSpeech model)"),J8e.forEach(t),Jzo=i(bo),X3=n(bo,"LI",{});var Y8e=s(X3);nhe=n(Y8e,"STRONG",{});var idt=s(nhe);Yzo=r(idt,"unispeech-sat"),idt.forEach(t),Kzo=r(Y8e," \u2014 "),dV=n(Y8e,"A",{href:!0});var ddt=s(dV);Zzo=r(ddt,"UniSpeechSatForSequenceClassification"),ddt.forEach(t),eQo=r(Y8e," (UniSpeechSat model)"),Y8e.forEach(t),oQo=i(bo),z3=n(bo,"LI",{});var K8e=s(z3);she=n(K8e,"STRONG",{});var cdt=s(she);rQo=r(cdt,"wav2vec2"),cdt.forEach(t),tQo=r(K8e," \u2014 "),cV=n(K8e,"A",{href:!0});var fdt=s(cV);aQo=r(fdt,"Wav2Vec2ForSequenceClassification"),fdt.forEach(t),nQo=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),sQo=i(bo),Q3=n(bo,"LI",{});var Z8e=s(Q3);lhe=n(Z8e,"STRONG",{});var mdt=s(lhe);lQo=r(mdt,"wavlm"),mdt.forEach(t),iQo=r(Z8e," \u2014 "),fV=n(Z8e,"A",{href:!0});var gdt=s(fV);dQo=r(gdt,"WavLMForSequenceClassification"),gdt.forEach(t),cQo=r(Z8e," (WavLM model)"),Z8e.forEach(t),bo.forEach(t),fQo=i(da),W3=n(da,"P",{});var exe=s(W3);mQo=r(exe,"The model is set in evaluation mode by default using "),ihe=n(exe,"CODE",{});var hdt=s(ihe);gQo=r(hdt,"model.eval()"),hdt.forEach(t),hQo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(exe,"CODE",{});var pdt=s(dhe);pQo=r(pdt,"model.train()"),pdt.forEach(t),exe.forEach(t),uQo=i(da),T(H3.$$.fragment,da),da.forEach(t),Us.forEach(t),nPe=i(f),td=n(f,"H2",{class:!0});var lqe=s(td);U3=n(lqe,"A",{id:!0,class:!0,href:!0});var udt=s(U3);che=n(udt,"SPAN",{});var _dt=s(che);T(gy.$$.fragment,_dt),_dt.forEach(t),udt.forEach(t),_Qo=i(lqe),fhe=n(lqe,"SPAN",{});var bdt=s(fhe);bQo=r(bdt,"AutoModelForAudioFrameClassification"),bdt.forEach(t),lqe.forEach(t),sPe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(hy.$$.fragment,Js),vQo=i(Js),ad=n(Js,"P",{});var zY=s(ad);FQo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mV=n(zY,"A",{href:!0});var vdt=s(mV);TQo=r(vdt,"from_pretrained()"),vdt.forEach(t),MQo=r(zY," class method or the "),gV=n(zY,"A",{href:!0});var Fdt=s(gV);EQo=r(Fdt,"from_config()"),Fdt.forEach(t),CQo=r(zY,` class
method.`),zY.forEach(t),wQo=i(Js),py=n(Js,"P",{});var iqe=s(py);AQo=r(iqe,"This class cannot be instantiated directly using "),mhe=n(iqe,"CODE",{});var Tdt=s(mhe);yQo=r(Tdt,"__init__()"),Tdt.forEach(t),LQo=r(iqe," (throws an error)."),iqe.forEach(t),xQo=i(Js),ht=n(Js,"DIV",{class:!0});var aA=s(ht);T(uy.$$.fragment,aA),$Qo=i(aA),ghe=n(aA,"P",{});var Mdt=s(ghe);kQo=r(Mdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Mdt.forEach(t),SQo=i(aA),nd=n(aA,"P",{});var QY=s(nd);RQo=r(QY,`Note:
Loading a model from its configuration file does `),hhe=n(QY,"STRONG",{});var Edt=s(hhe);BQo=r(Edt,"not"),Edt.forEach(t),PQo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(QY,"A",{href:!0});var Cdt=s(hV);IQo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),qQo=r(QY," to load the model weights."),QY.forEach(t),NQo=i(aA),T(J3.$$.fragment,aA),aA.forEach(t),jQo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(_y.$$.fragment,ca),DQo=i(ca),phe=n(ca,"P",{});var wdt=s(phe);GQo=r(wdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wdt.forEach(t),OQo=i(ca),qa=n(ca,"P",{});var nA=s(qa);VQo=r(nA,"The model class to instantiate is selected based on the "),uhe=n(nA,"CODE",{});var Adt=s(uhe);XQo=r(Adt,"model_type"),Adt.forEach(t),zQo=r(nA,` property of the config object (either
passed as an argument or loaded from `),_he=n(nA,"CODE",{});var ydt=s(_he);QQo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),WQo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(nA,"CODE",{});var Ldt=s(bhe);HQo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),UQo=r(nA,":"),nA.forEach(t),JQo=i(ca),Na=n(ca,"UL",{});var sA=s(Na);Y3=n(sA,"LI",{});var oxe=s(Y3);vhe=n(oxe,"STRONG",{});var xdt=s(vhe);YQo=r(xdt,"data2vec-audio"),xdt.forEach(t),KQo=r(oxe," \u2014 "),pV=n(oxe,"A",{href:!0});var $dt=s(pV);ZQo=r($dt,"Data2VecAudioForAudioFrameClassification"),$dt.forEach(t),eWo=r(oxe," (Data2VecAudio model)"),oxe.forEach(t),oWo=i(sA),K3=n(sA,"LI",{});var rxe=s(K3);Fhe=n(rxe,"STRONG",{});var kdt=s(Fhe);rWo=r(kdt,"unispeech-sat"),kdt.forEach(t),tWo=r(rxe," \u2014 "),uV=n(rxe,"A",{href:!0});var Sdt=s(uV);aWo=r(Sdt,"UniSpeechSatForAudioFrameClassification"),Sdt.forEach(t),nWo=r(rxe," (UniSpeechSat model)"),rxe.forEach(t),sWo=i(sA),Z3=n(sA,"LI",{});var txe=s(Z3);The=n(txe,"STRONG",{});var Rdt=s(The);lWo=r(Rdt,"wav2vec2"),Rdt.forEach(t),iWo=r(txe," \u2014 "),_V=n(txe,"A",{href:!0});var Bdt=s(_V);dWo=r(Bdt,"Wav2Vec2ForAudioFrameClassification"),Bdt.forEach(t),cWo=r(txe," (Wav2Vec2 model)"),txe.forEach(t),fWo=i(sA),ev=n(sA,"LI",{});var axe=s(ev);Mhe=n(axe,"STRONG",{});var Pdt=s(Mhe);mWo=r(Pdt,"wavlm"),Pdt.forEach(t),gWo=r(axe," \u2014 "),bV=n(axe,"A",{href:!0});var Idt=s(bV);hWo=r(Idt,"WavLMForAudioFrameClassification"),Idt.forEach(t),pWo=r(axe," (WavLM model)"),axe.forEach(t),sA.forEach(t),uWo=i(ca),ov=n(ca,"P",{});var nxe=s(ov);_Wo=r(nxe,"The model is set in evaluation mode by default using "),Ehe=n(nxe,"CODE",{});var qdt=s(Ehe);bWo=r(qdt,"model.eval()"),qdt.forEach(t),vWo=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(nxe,"CODE",{});var Ndt=s(Che);FWo=r(Ndt,"model.train()"),Ndt.forEach(t),nxe.forEach(t),TWo=i(ca),T(rv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),lPe=i(f),sd=n(f,"H2",{class:!0});var dqe=s(sd);tv=n(dqe,"A",{id:!0,class:!0,href:!0});var jdt=s(tv);whe=n(jdt,"SPAN",{});var Ddt=s(whe);T(by.$$.fragment,Ddt),Ddt.forEach(t),jdt.forEach(t),MWo=i(dqe),Ahe=n(dqe,"SPAN",{});var Gdt=s(Ahe);EWo=r(Gdt,"AutoModelForCTC"),Gdt.forEach(t),dqe.forEach(t),iPe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(vy.$$.fragment,Ys),CWo=i(Ys),ld=n(Ys,"P",{});var WY=s(ld);wWo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vV=n(WY,"A",{href:!0});var Odt=s(vV);AWo=r(Odt,"from_pretrained()"),Odt.forEach(t),yWo=r(WY," class method or the "),FV=n(WY,"A",{href:!0});var Vdt=s(FV);LWo=r(Vdt,"from_config()"),Vdt.forEach(t),xWo=r(WY,` class
method.`),WY.forEach(t),$Wo=i(Ys),Fy=n(Ys,"P",{});var cqe=s(Fy);kWo=r(cqe,"This class cannot be instantiated directly using "),yhe=n(cqe,"CODE",{});var Xdt=s(yhe);SWo=r(Xdt,"__init__()"),Xdt.forEach(t),RWo=r(cqe," (throws an error)."),cqe.forEach(t),BWo=i(Ys),pt=n(Ys,"DIV",{class:!0});var lA=s(pt);T(Ty.$$.fragment,lA),PWo=i(lA),Lhe=n(lA,"P",{});var zdt=s(Lhe);IWo=r(zdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zdt.forEach(t),qWo=i(lA),id=n(lA,"P",{});var HY=s(id);NWo=r(HY,`Note:
Loading a model from its configuration file does `),xhe=n(HY,"STRONG",{});var Qdt=s(xhe);jWo=r(Qdt,"not"),Qdt.forEach(t),DWo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(HY,"A",{href:!0});var Wdt=s(TV);GWo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),OWo=r(HY," to load the model weights."),HY.forEach(t),VWo=i(lA),T(av.$$.fragment,lA),lA.forEach(t),XWo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(My.$$.fragment,fa),zWo=i(fa),$he=n(fa,"P",{});var Hdt=s($he);QWo=r(Hdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Hdt.forEach(t),WWo=i(fa),ja=n(fa,"P",{});var iA=s(ja);HWo=r(iA,"The model class to instantiate is selected based on the "),khe=n(iA,"CODE",{});var Udt=s(khe);UWo=r(Udt,"model_type"),Udt.forEach(t),JWo=r(iA,` property of the config object (either
passed as an argument or loaded from `),She=n(iA,"CODE",{});var Jdt=s(She);YWo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),KWo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(iA,"CODE",{});var Ydt=s(Rhe);ZWo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),eHo=r(iA,":"),iA.forEach(t),oHo=i(fa),je=n(fa,"UL",{});var vo=s(je);nv=n(vo,"LI",{});var sxe=s(nv);Bhe=n(sxe,"STRONG",{});var Kdt=s(Bhe);rHo=r(Kdt,"data2vec-audio"),Kdt.forEach(t),tHo=r(sxe," \u2014 "),MV=n(sxe,"A",{href:!0});var Zdt=s(MV);aHo=r(Zdt,"Data2VecAudioForCTC"),Zdt.forEach(t),nHo=r(sxe," (Data2VecAudio model)"),sxe.forEach(t),sHo=i(vo),sv=n(vo,"LI",{});var lxe=s(sv);Phe=n(lxe,"STRONG",{});var ect=s(Phe);lHo=r(ect,"hubert"),ect.forEach(t),iHo=r(lxe," \u2014 "),EV=n(lxe,"A",{href:!0});var oct=s(EV);dHo=r(oct,"HubertForCTC"),oct.forEach(t),cHo=r(lxe," (Hubert model)"),lxe.forEach(t),fHo=i(vo),lv=n(vo,"LI",{});var ixe=s(lv);Ihe=n(ixe,"STRONG",{});var rct=s(Ihe);mHo=r(rct,"sew"),rct.forEach(t),gHo=r(ixe," \u2014 "),CV=n(ixe,"A",{href:!0});var tct=s(CV);hHo=r(tct,"SEWForCTC"),tct.forEach(t),pHo=r(ixe," (SEW model)"),ixe.forEach(t),uHo=i(vo),iv=n(vo,"LI",{});var dxe=s(iv);qhe=n(dxe,"STRONG",{});var act=s(qhe);_Ho=r(act,"sew-d"),act.forEach(t),bHo=r(dxe," \u2014 "),wV=n(dxe,"A",{href:!0});var nct=s(wV);vHo=r(nct,"SEWDForCTC"),nct.forEach(t),FHo=r(dxe," (SEW-D model)"),dxe.forEach(t),THo=i(vo),dv=n(vo,"LI",{});var cxe=s(dv);Nhe=n(cxe,"STRONG",{});var sct=s(Nhe);MHo=r(sct,"unispeech"),sct.forEach(t),EHo=r(cxe," \u2014 "),AV=n(cxe,"A",{href:!0});var lct=s(AV);CHo=r(lct,"UniSpeechForCTC"),lct.forEach(t),wHo=r(cxe," (UniSpeech model)"),cxe.forEach(t),AHo=i(vo),cv=n(vo,"LI",{});var fxe=s(cv);jhe=n(fxe,"STRONG",{});var ict=s(jhe);yHo=r(ict,"unispeech-sat"),ict.forEach(t),LHo=r(fxe," \u2014 "),yV=n(fxe,"A",{href:!0});var dct=s(yV);xHo=r(dct,"UniSpeechSatForCTC"),dct.forEach(t),$Ho=r(fxe," (UniSpeechSat model)"),fxe.forEach(t),kHo=i(vo),fv=n(vo,"LI",{});var mxe=s(fv);Dhe=n(mxe,"STRONG",{});var cct=s(Dhe);SHo=r(cct,"wav2vec2"),cct.forEach(t),RHo=r(mxe," \u2014 "),LV=n(mxe,"A",{href:!0});var fct=s(LV);BHo=r(fct,"Wav2Vec2ForCTC"),fct.forEach(t),PHo=r(mxe," (Wav2Vec2 model)"),mxe.forEach(t),IHo=i(vo),mv=n(vo,"LI",{});var gxe=s(mv);Ghe=n(gxe,"STRONG",{});var mct=s(Ghe);qHo=r(mct,"wavlm"),mct.forEach(t),NHo=r(gxe," \u2014 "),xV=n(gxe,"A",{href:!0});var gct=s(xV);jHo=r(gct,"WavLMForCTC"),gct.forEach(t),DHo=r(gxe," (WavLM model)"),gxe.forEach(t),vo.forEach(t),GHo=i(fa),gv=n(fa,"P",{});var hxe=s(gv);OHo=r(hxe,"The model is set in evaluation mode by default using "),Ohe=n(hxe,"CODE",{});var hct=s(Ohe);VHo=r(hct,"model.eval()"),hct.forEach(t),XHo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(hxe,"CODE",{});var pct=s(Vhe);zHo=r(pct,"model.train()"),pct.forEach(t),hxe.forEach(t),QHo=i(fa),T(hv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),dPe=i(f),dd=n(f,"H2",{class:!0});var fqe=s(dd);pv=n(fqe,"A",{id:!0,class:!0,href:!0});var uct=s(pv);Xhe=n(uct,"SPAN",{});var _ct=s(Xhe);T(Ey.$$.fragment,_ct),_ct.forEach(t),uct.forEach(t),WHo=i(fqe),zhe=n(fqe,"SPAN",{});var bct=s(zhe);HHo=r(bct,"AutoModelForSpeechSeq2Seq"),bct.forEach(t),fqe.forEach(t),cPe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(Cy.$$.fragment,Ks),UHo=i(Ks),cd=n(Ks,"P",{});var UY=s(cd);JHo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$V=n(UY,"A",{href:!0});var vct=s($V);YHo=r(vct,"from_pretrained()"),vct.forEach(t),KHo=r(UY," class method or the "),kV=n(UY,"A",{href:!0});var Fct=s(kV);ZHo=r(Fct,"from_config()"),Fct.forEach(t),eUo=r(UY,` class
method.`),UY.forEach(t),oUo=i(Ks),wy=n(Ks,"P",{});var mqe=s(wy);rUo=r(mqe,"This class cannot be instantiated directly using "),Qhe=n(mqe,"CODE",{});var Tct=s(Qhe);tUo=r(Tct,"__init__()"),Tct.forEach(t),aUo=r(mqe," (throws an error)."),mqe.forEach(t),nUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var dA=s(ut);T(Ay.$$.fragment,dA),sUo=i(dA),Whe=n(dA,"P",{});var Mct=s(Whe);lUo=r(Mct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mct.forEach(t),iUo=i(dA),fd=n(dA,"P",{});var JY=s(fd);dUo=r(JY,`Note:
Loading a model from its configuration file does `),Hhe=n(JY,"STRONG",{});var Ect=s(Hhe);cUo=r(Ect,"not"),Ect.forEach(t),fUo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(JY,"A",{href:!0});var Cct=s(SV);mUo=r(Cct,"from_pretrained()"),Cct.forEach(t),gUo=r(JY," to load the model weights."),JY.forEach(t),hUo=i(dA),T(uv.$$.fragment,dA),dA.forEach(t),pUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(yy.$$.fragment,ma),uUo=i(ma),Uhe=n(ma,"P",{});var wct=s(Uhe);_Uo=r(wct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wct.forEach(t),bUo=i(ma),Da=n(ma,"P",{});var cA=s(Da);vUo=r(cA,"The model class to instantiate is selected based on the "),Jhe=n(cA,"CODE",{});var Act=s(Jhe);FUo=r(Act,"model_type"),Act.forEach(t),TUo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(cA,"CODE",{});var yct=s(Yhe);MUo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),EUo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(cA,"CODE",{});var Lct=s(Khe);CUo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),wUo=r(cA,":"),cA.forEach(t),AUo=i(ma),Ly=n(ma,"UL",{});var gqe=s(Ly);_v=n(gqe,"LI",{});var pxe=s(_v);Zhe=n(pxe,"STRONG",{});var xct=s(Zhe);yUo=r(xct,"speech-encoder-decoder"),xct.forEach(t),LUo=r(pxe," \u2014 "),RV=n(pxe,"A",{href:!0});var $ct=s(RV);xUo=r($ct,"SpeechEncoderDecoderModel"),$ct.forEach(t),$Uo=r(pxe," (Speech Encoder decoder model)"),pxe.forEach(t),kUo=i(gqe),bv=n(gqe,"LI",{});var uxe=s(bv);epe=n(uxe,"STRONG",{});var kct=s(epe);SUo=r(kct,"speech_to_text"),kct.forEach(t),RUo=r(uxe," \u2014 "),BV=n(uxe,"A",{href:!0});var Sct=s(BV);BUo=r(Sct,"Speech2TextForConditionalGeneration"),Sct.forEach(t),PUo=r(uxe," (Speech2Text model)"),uxe.forEach(t),gqe.forEach(t),IUo=i(ma),vv=n(ma,"P",{});var _xe=s(vv);qUo=r(_xe,"The model is set in evaluation mode by default using "),ope=n(_xe,"CODE",{});var Rct=s(ope);NUo=r(Rct,"model.eval()"),Rct.forEach(t),jUo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(_xe,"CODE",{});var Bct=s(rpe);DUo=r(Bct,"model.train()"),Bct.forEach(t),_xe.forEach(t),GUo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),fPe=i(f),md=n(f,"H2",{class:!0});var hqe=s(md);Tv=n(hqe,"A",{id:!0,class:!0,href:!0});var Pct=s(Tv);tpe=n(Pct,"SPAN",{});var Ict=s(tpe);T(xy.$$.fragment,Ict),Ict.forEach(t),Pct.forEach(t),OUo=i(hqe),ape=n(hqe,"SPAN",{});var qct=s(ape);VUo=r(qct,"AutoModelForAudioXVector"),qct.forEach(t),hqe.forEach(t),mPe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T($y.$$.fragment,Zs),XUo=i(Zs),gd=n(Zs,"P",{});var YY=s(gd);zUo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PV=n(YY,"A",{href:!0});var Nct=s(PV);QUo=r(Nct,"from_pretrained()"),Nct.forEach(t),WUo=r(YY," class method or the "),IV=n(YY,"A",{href:!0});var jct=s(IV);HUo=r(jct,"from_config()"),jct.forEach(t),UUo=r(YY,` class
method.`),YY.forEach(t),JUo=i(Zs),ky=n(Zs,"P",{});var pqe=s(ky);YUo=r(pqe,"This class cannot be instantiated directly using "),npe=n(pqe,"CODE",{});var Dct=s(npe);KUo=r(Dct,"__init__()"),Dct.forEach(t),ZUo=r(pqe," (throws an error)."),pqe.forEach(t),eJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var fA=s(_t);T(Sy.$$.fragment,fA),oJo=i(fA),spe=n(fA,"P",{});var Gct=s(spe);rJo=r(Gct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Gct.forEach(t),tJo=i(fA),hd=n(fA,"P",{});var KY=s(hd);aJo=r(KY,`Note:
Loading a model from its configuration file does `),lpe=n(KY,"STRONG",{});var Oct=s(lpe);nJo=r(Oct,"not"),Oct.forEach(t),sJo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(KY,"A",{href:!0});var Vct=s(qV);lJo=r(Vct,"from_pretrained()"),Vct.forEach(t),iJo=r(KY," to load the model weights."),KY.forEach(t),dJo=i(fA),T(Mv.$$.fragment,fA),fA.forEach(t),cJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(Ry.$$.fragment,ga),fJo=i(ga),ipe=n(ga,"P",{});var Xct=s(ipe);mJo=r(Xct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xct.forEach(t),gJo=i(ga),Ga=n(ga,"P",{});var mA=s(Ga);hJo=r(mA,"The model class to instantiate is selected based on the "),dpe=n(mA,"CODE",{});var zct=s(dpe);pJo=r(zct,"model_type"),zct.forEach(t),uJo=r(mA,` property of the config object (either
passed as an argument or loaded from `),cpe=n(mA,"CODE",{});var Qct=s(cpe);_Jo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),bJo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(mA,"CODE",{});var Wct=s(fpe);vJo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),FJo=r(mA,":"),mA.forEach(t),TJo=i(ga),Oa=n(ga,"UL",{});var gA=s(Oa);Ev=n(gA,"LI",{});var bxe=s(Ev);mpe=n(bxe,"STRONG",{});var Hct=s(mpe);MJo=r(Hct,"data2vec-audio"),Hct.forEach(t),EJo=r(bxe," \u2014 "),NV=n(bxe,"A",{href:!0});var Uct=s(NV);CJo=r(Uct,"Data2VecAudioForXVector"),Uct.forEach(t),wJo=r(bxe," (Data2VecAudio model)"),bxe.forEach(t),AJo=i(gA),Cv=n(gA,"LI",{});var vxe=s(Cv);gpe=n(vxe,"STRONG",{});var Jct=s(gpe);yJo=r(Jct,"unispeech-sat"),Jct.forEach(t),LJo=r(vxe," \u2014 "),jV=n(vxe,"A",{href:!0});var Yct=s(jV);xJo=r(Yct,"UniSpeechSatForXVector"),Yct.forEach(t),$Jo=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),kJo=i(gA),wv=n(gA,"LI",{});var Fxe=s(wv);hpe=n(Fxe,"STRONG",{});var Kct=s(hpe);SJo=r(Kct,"wav2vec2"),Kct.forEach(t),RJo=r(Fxe," \u2014 "),DV=n(Fxe,"A",{href:!0});var Zct=s(DV);BJo=r(Zct,"Wav2Vec2ForXVector"),Zct.forEach(t),PJo=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),IJo=i(gA),Av=n(gA,"LI",{});var Txe=s(Av);ppe=n(Txe,"STRONG",{});var eft=s(ppe);qJo=r(eft,"wavlm"),eft.forEach(t),NJo=r(Txe," \u2014 "),GV=n(Txe,"A",{href:!0});var oft=s(GV);jJo=r(oft,"WavLMForXVector"),oft.forEach(t),DJo=r(Txe," (WavLM model)"),Txe.forEach(t),gA.forEach(t),GJo=i(ga),yv=n(ga,"P",{});var Mxe=s(yv);OJo=r(Mxe,"The model is set in evaluation mode by default using "),upe=n(Mxe,"CODE",{});var rft=s(upe);VJo=r(rft,"model.eval()"),rft.forEach(t),XJo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(Mxe,"CODE",{});var tft=s(_pe);zJo=r(tft,"model.train()"),tft.forEach(t),Mxe.forEach(t),QJo=i(ga),T(Lv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),gPe=i(f),pd=n(f,"H2",{class:!0});var uqe=s(pd);xv=n(uqe,"A",{id:!0,class:!0,href:!0});var aft=s(xv);bpe=n(aft,"SPAN",{});var nft=s(bpe);T(By.$$.fragment,nft),nft.forEach(t),aft.forEach(t),WJo=i(uqe),vpe=n(uqe,"SPAN",{});var sft=s(vpe);HJo=r(sft,"AutoModelForMaskedImageModeling"),sft.forEach(t),uqe.forEach(t),hPe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(Py.$$.fragment,el),UJo=i(el),ud=n(el,"P",{});var ZY=s(ud);JJo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OV=n(ZY,"A",{href:!0});var lft=s(OV);YJo=r(lft,"from_pretrained()"),lft.forEach(t),KJo=r(ZY," class method or the "),VV=n(ZY,"A",{href:!0});var ift=s(VV);ZJo=r(ift,"from_config()"),ift.forEach(t),eYo=r(ZY,` class
method.`),ZY.forEach(t),oYo=i(el),Iy=n(el,"P",{});var _qe=s(Iy);rYo=r(_qe,"This class cannot be instantiated directly using "),Fpe=n(_qe,"CODE",{});var dft=s(Fpe);tYo=r(dft,"__init__()"),dft.forEach(t),aYo=r(_qe," (throws an error)."),_qe.forEach(t),nYo=i(el),bt=n(el,"DIV",{class:!0});var hA=s(bt);T(qy.$$.fragment,hA),sYo=i(hA),Tpe=n(hA,"P",{});var cft=s(Tpe);lYo=r(cft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cft.forEach(t),iYo=i(hA),_d=n(hA,"P",{});var eK=s(_d);dYo=r(eK,`Note:
Loading a model from its configuration file does `),Mpe=n(eK,"STRONG",{});var fft=s(Mpe);cYo=r(fft,"not"),fft.forEach(t),fYo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(eK,"A",{href:!0});var mft=s(XV);mYo=r(mft,"from_pretrained()"),mft.forEach(t),gYo=r(eK," to load the model weights."),eK.forEach(t),hYo=i(hA),T($v.$$.fragment,hA),hA.forEach(t),pYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(Ny.$$.fragment,ha),uYo=i(ha),Epe=n(ha,"P",{});var gft=s(Epe);_Yo=r(gft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),gft.forEach(t),bYo=i(ha),Va=n(ha,"P",{});var pA=s(Va);vYo=r(pA,"The model class to instantiate is selected based on the "),Cpe=n(pA,"CODE",{});var hft=s(Cpe);FYo=r(hft,"model_type"),hft.forEach(t),TYo=r(pA,` property of the config object (either
passed as an argument or loaded from `),wpe=n(pA,"CODE",{});var pft=s(wpe);MYo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),EYo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(pA,"CODE",{});var uft=s(Ape);CYo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),wYo=r(pA,":"),pA.forEach(t),AYo=i(ha),bd=n(ha,"UL",{});var oK=s(bd);kv=n(oK,"LI",{});var Exe=s(kv);ype=n(Exe,"STRONG",{});var _ft=s(ype);yYo=r(_ft,"deit"),_ft.forEach(t),LYo=r(Exe," \u2014 "),zV=n(Exe,"A",{href:!0});var bft=s(zV);xYo=r(bft,"DeiTForMaskedImageModeling"),bft.forEach(t),$Yo=r(Exe," (DeiT model)"),Exe.forEach(t),kYo=i(oK),Sv=n(oK,"LI",{});var Cxe=s(Sv);Lpe=n(Cxe,"STRONG",{});var vft=s(Lpe);SYo=r(vft,"swin"),vft.forEach(t),RYo=r(Cxe," \u2014 "),QV=n(Cxe,"A",{href:!0});var Fft=s(QV);BYo=r(Fft,"SwinForMaskedImageModeling"),Fft.forEach(t),PYo=r(Cxe," (Swin model)"),Cxe.forEach(t),IYo=i(oK),Rv=n(oK,"LI",{});var wxe=s(Rv);xpe=n(wxe,"STRONG",{});var Tft=s(xpe);qYo=r(Tft,"vit"),Tft.forEach(t),NYo=r(wxe," \u2014 "),WV=n(wxe,"A",{href:!0});var Mft=s(WV);jYo=r(Mft,"ViTForMaskedImageModeling"),Mft.forEach(t),DYo=r(wxe," (ViT model)"),wxe.forEach(t),oK.forEach(t),GYo=i(ha),Bv=n(ha,"P",{});var Axe=s(Bv);OYo=r(Axe,"The model is set in evaluation mode by default using "),$pe=n(Axe,"CODE",{});var Eft=s($pe);VYo=r(Eft,"model.eval()"),Eft.forEach(t),XYo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(Axe,"CODE",{});var Cft=s(kpe);zYo=r(Cft,"model.train()"),Cft.forEach(t),Axe.forEach(t),QYo=i(ha),T(Pv.$$.fragment,ha),ha.forEach(t),el.forEach(t),pPe=i(f),vd=n(f,"H2",{class:!0});var bqe=s(vd);Iv=n(bqe,"A",{id:!0,class:!0,href:!0});var wft=s(Iv);Spe=n(wft,"SPAN",{});var Aft=s(Spe);T(jy.$$.fragment,Aft),Aft.forEach(t),wft.forEach(t),WYo=i(bqe),Rpe=n(bqe,"SPAN",{});var yft=s(Rpe);HYo=r(yft,"AutoModelForObjectDetection"),yft.forEach(t),bqe.forEach(t),uPe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(Dy.$$.fragment,ol),UYo=i(ol),Fd=n(ol,"P",{});var rK=s(Fd);JYo=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HV=n(rK,"A",{href:!0});var Lft=s(HV);YYo=r(Lft,"from_pretrained()"),Lft.forEach(t),KYo=r(rK," class method or the "),UV=n(rK,"A",{href:!0});var xft=s(UV);ZYo=r(xft,"from_config()"),xft.forEach(t),eKo=r(rK,` class
method.`),rK.forEach(t),oKo=i(ol),Gy=n(ol,"P",{});var vqe=s(Gy);rKo=r(vqe,"This class cannot be instantiated directly using "),Bpe=n(vqe,"CODE",{});var $ft=s(Bpe);tKo=r($ft,"__init__()"),$ft.forEach(t),aKo=r(vqe," (throws an error)."),vqe.forEach(t),nKo=i(ol),vt=n(ol,"DIV",{class:!0});var uA=s(vt);T(Oy.$$.fragment,uA),sKo=i(uA),Ppe=n(uA,"P",{});var kft=s(Ppe);lKo=r(kft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kft.forEach(t),iKo=i(uA),Td=n(uA,"P",{});var tK=s(Td);dKo=r(tK,`Note:
Loading a model from its configuration file does `),Ipe=n(tK,"STRONG",{});var Sft=s(Ipe);cKo=r(Sft,"not"),Sft.forEach(t),fKo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(tK,"A",{href:!0});var Rft=s(JV);mKo=r(Rft,"from_pretrained()"),Rft.forEach(t),gKo=r(tK," to load the model weights."),tK.forEach(t),hKo=i(uA),T(qv.$$.fragment,uA),uA.forEach(t),pKo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(Vy.$$.fragment,pa),uKo=i(pa),qpe=n(pa,"P",{});var Bft=s(qpe);_Ko=r(Bft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bft.forEach(t),bKo=i(pa),Xa=n(pa,"P",{});var _A=s(Xa);vKo=r(_A,"The model class to instantiate is selected based on the "),Npe=n(_A,"CODE",{});var Pft=s(Npe);FKo=r(Pft,"model_type"),Pft.forEach(t),TKo=r(_A,` property of the config object (either
passed as an argument or loaded from `),jpe=n(_A,"CODE",{});var Ift=s(jpe);MKo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),EKo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(_A,"CODE",{});var qft=s(Dpe);CKo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),wKo=r(_A,":"),_A.forEach(t),AKo=i(pa),Xy=n(pa,"UL",{});var Fqe=s(Xy);Nv=n(Fqe,"LI",{});var yxe=s(Nv);Gpe=n(yxe,"STRONG",{});var Nft=s(Gpe);yKo=r(Nft,"detr"),Nft.forEach(t),LKo=r(yxe," \u2014 "),YV=n(yxe,"A",{href:!0});var jft=s(YV);xKo=r(jft,"DetrForObjectDetection"),jft.forEach(t),$Ko=r(yxe," (DETR model)"),yxe.forEach(t),kKo=i(Fqe),jv=n(Fqe,"LI",{});var Lxe=s(jv);Ope=n(Lxe,"STRONG",{});var Dft=s(Ope);SKo=r(Dft,"yolos"),Dft.forEach(t),RKo=r(Lxe," \u2014 "),KV=n(Lxe,"A",{href:!0});var Gft=s(KV);BKo=r(Gft,"YolosForObjectDetection"),Gft.forEach(t),PKo=r(Lxe," (YOLOS model)"),Lxe.forEach(t),Fqe.forEach(t),IKo=i(pa),Dv=n(pa,"P",{});var xxe=s(Dv);qKo=r(xxe,"The model is set in evaluation mode by default using "),Vpe=n(xxe,"CODE",{});var Oft=s(Vpe);NKo=r(Oft,"model.eval()"),Oft.forEach(t),jKo=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(xxe,"CODE",{});var Vft=s(Xpe);DKo=r(Vft,"model.train()"),Vft.forEach(t),xxe.forEach(t),GKo=i(pa),T(Gv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),_Pe=i(f),Md=n(f,"H2",{class:!0});var Tqe=s(Md);Ov=n(Tqe,"A",{id:!0,class:!0,href:!0});var Xft=s(Ov);zpe=n(Xft,"SPAN",{});var zft=s(zpe);T(zy.$$.fragment,zft),zft.forEach(t),Xft.forEach(t),OKo=i(Tqe),Qpe=n(Tqe,"SPAN",{});var Qft=s(Qpe);VKo=r(Qft,"AutoModelForImageSegmentation"),Qft.forEach(t),Tqe.forEach(t),bPe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(Qy.$$.fragment,rl),XKo=i(rl),Ed=n(rl,"P",{});var aK=s(Ed);zKo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZV=n(aK,"A",{href:!0});var Wft=s(ZV);QKo=r(Wft,"from_pretrained()"),Wft.forEach(t),WKo=r(aK," class method or the "),eX=n(aK,"A",{href:!0});var Hft=s(eX);HKo=r(Hft,"from_config()"),Hft.forEach(t),UKo=r(aK,` class
method.`),aK.forEach(t),JKo=i(rl),Wy=n(rl,"P",{});var Mqe=s(Wy);YKo=r(Mqe,"This class cannot be instantiated directly using "),Wpe=n(Mqe,"CODE",{});var Uft=s(Wpe);KKo=r(Uft,"__init__()"),Uft.forEach(t),ZKo=r(Mqe," (throws an error)."),Mqe.forEach(t),eZo=i(rl),Ft=n(rl,"DIV",{class:!0});var bA=s(Ft);T(Hy.$$.fragment,bA),oZo=i(bA),Hpe=n(bA,"P",{});var Jft=s(Hpe);rZo=r(Jft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Jft.forEach(t),tZo=i(bA),Cd=n(bA,"P",{});var nK=s(Cd);aZo=r(nK,`Note:
Loading a model from its configuration file does `),Upe=n(nK,"STRONG",{});var Yft=s(Upe);nZo=r(Yft,"not"),Yft.forEach(t),sZo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(nK,"A",{href:!0});var Kft=s(oX);lZo=r(Kft,"from_pretrained()"),Kft.forEach(t),iZo=r(nK," to load the model weights."),nK.forEach(t),dZo=i(bA),T(Vv.$$.fragment,bA),bA.forEach(t),cZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(Uy.$$.fragment,ua),fZo=i(ua),Jpe=n(ua,"P",{});var Zft=s(Jpe);mZo=r(Zft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Zft.forEach(t),gZo=i(ua),za=n(ua,"P",{});var vA=s(za);hZo=r(vA,"The model class to instantiate is selected based on the "),Ype=n(vA,"CODE",{});var emt=s(Ype);pZo=r(emt,"model_type"),emt.forEach(t),uZo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(vA,"CODE",{});var omt=s(Kpe);_Zo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),bZo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(vA,"CODE",{});var rmt=s(Zpe);vZo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),FZo=r(vA,":"),vA.forEach(t),TZo=i(ua),eue=n(ua,"UL",{});var tmt=s(eue);Xv=n(tmt,"LI",{});var $xe=s(Xv);oue=n($xe,"STRONG",{});var amt=s(oue);MZo=r(amt,"detr"),amt.forEach(t),EZo=r($xe," \u2014 "),rX=n($xe,"A",{href:!0});var nmt=s(rX);CZo=r(nmt,"DetrForSegmentation"),nmt.forEach(t),wZo=r($xe," (DETR model)"),$xe.forEach(t),tmt.forEach(t),AZo=i(ua),zv=n(ua,"P",{});var kxe=s(zv);yZo=r(kxe,"The model is set in evaluation mode by default using "),rue=n(kxe,"CODE",{});var smt=s(rue);LZo=r(smt,"model.eval()"),smt.forEach(t),xZo=r(kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(kxe,"CODE",{});var lmt=s(tue);$Zo=r(lmt,"model.train()"),lmt.forEach(t),kxe.forEach(t),kZo=i(ua),T(Qv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),vPe=i(f),wd=n(f,"H2",{class:!0});var Eqe=s(wd);Wv=n(Eqe,"A",{id:!0,class:!0,href:!0});var imt=s(Wv);aue=n(imt,"SPAN",{});var dmt=s(aue);T(Jy.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),SZo=i(Eqe),nue=n(Eqe,"SPAN",{});var cmt=s(nue);RZo=r(cmt,"AutoModelForSemanticSegmentation"),cmt.forEach(t),Eqe.forEach(t),FPe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(Yy.$$.fragment,tl),BZo=i(tl),Ad=n(tl,"P",{});var sK=s(Ad);PZo=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tX=n(sK,"A",{href:!0});var fmt=s(tX);IZo=r(fmt,"from_pretrained()"),fmt.forEach(t),qZo=r(sK," class method or the "),aX=n(sK,"A",{href:!0});var mmt=s(aX);NZo=r(mmt,"from_config()"),mmt.forEach(t),jZo=r(sK,` class
method.`),sK.forEach(t),DZo=i(tl),Ky=n(tl,"P",{});var Cqe=s(Ky);GZo=r(Cqe,"This class cannot be instantiated directly using "),sue=n(Cqe,"CODE",{});var gmt=s(sue);OZo=r(gmt,"__init__()"),gmt.forEach(t),VZo=r(Cqe," (throws an error)."),Cqe.forEach(t),XZo=i(tl),Tt=n(tl,"DIV",{class:!0});var FA=s(Tt);T(Zy.$$.fragment,FA),zZo=i(FA),lue=n(FA,"P",{});var hmt=s(lue);QZo=r(hmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hmt.forEach(t),WZo=i(FA),yd=n(FA,"P",{});var lK=s(yd);HZo=r(lK,`Note:
Loading a model from its configuration file does `),iue=n(lK,"STRONG",{});var pmt=s(iue);UZo=r(pmt,"not"),pmt.forEach(t),JZo=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(lK,"A",{href:!0});var umt=s(nX);YZo=r(umt,"from_pretrained()"),umt.forEach(t),KZo=r(lK," to load the model weights."),lK.forEach(t),ZZo=i(FA),T(Hv.$$.fragment,FA),FA.forEach(t),eer=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(eL.$$.fragment,_a),oer=i(_a),due=n(_a,"P",{});var _mt=s(due);rer=r(_mt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_mt.forEach(t),ter=i(_a),Qa=n(_a,"P",{});var TA=s(Qa);aer=r(TA,"The model class to instantiate is selected based on the "),cue=n(TA,"CODE",{});var bmt=s(cue);ner=r(bmt,"model_type"),bmt.forEach(t),ser=r(TA,` property of the config object (either
passed as an argument or loaded from `),fue=n(TA,"CODE",{});var vmt=s(fue);ler=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),ier=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(TA,"CODE",{});var Fmt=s(mue);der=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),cer=r(TA,":"),TA.forEach(t),fer=i(_a),Wa=n(_a,"UL",{});var MA=s(Wa);Uv=n(MA,"LI",{});var Sxe=s(Uv);gue=n(Sxe,"STRONG",{});var Tmt=s(gue);mer=r(Tmt,"beit"),Tmt.forEach(t),ger=r(Sxe," \u2014 "),sX=n(Sxe,"A",{href:!0});var Mmt=s(sX);her=r(Mmt,"BeitForSemanticSegmentation"),Mmt.forEach(t),per=r(Sxe," (BEiT model)"),Sxe.forEach(t),uer=i(MA),Jv=n(MA,"LI",{});var Rxe=s(Jv);hue=n(Rxe,"STRONG",{});var Emt=s(hue);_er=r(Emt,"data2vec-vision"),Emt.forEach(t),ber=r(Rxe," \u2014 "),lX=n(Rxe,"A",{href:!0});var Cmt=s(lX);ver=r(Cmt,"Data2VecVisionForSemanticSegmentation"),Cmt.forEach(t),Fer=r(Rxe," (Data2VecVision model)"),Rxe.forEach(t),Ter=i(MA),Yv=n(MA,"LI",{});var Bxe=s(Yv);pue=n(Bxe,"STRONG",{});var wmt=s(pue);Mer=r(wmt,"dpt"),wmt.forEach(t),Eer=r(Bxe," \u2014 "),iX=n(Bxe,"A",{href:!0});var Amt=s(iX);Cer=r(Amt,"DPTForSemanticSegmentation"),Amt.forEach(t),wer=r(Bxe," (DPT model)"),Bxe.forEach(t),Aer=i(MA),Kv=n(MA,"LI",{});var Pxe=s(Kv);uue=n(Pxe,"STRONG",{});var ymt=s(uue);yer=r(ymt,"segformer"),ymt.forEach(t),Ler=r(Pxe," \u2014 "),dX=n(Pxe,"A",{href:!0});var Lmt=s(dX);xer=r(Lmt,"SegformerForSemanticSegmentation"),Lmt.forEach(t),$er=r(Pxe," (SegFormer model)"),Pxe.forEach(t),MA.forEach(t),ker=i(_a),Zv=n(_a,"P",{});var Ixe=s(Zv);Ser=r(Ixe,"The model is set in evaluation mode by default using "),_ue=n(Ixe,"CODE",{});var xmt=s(_ue);Rer=r(xmt,"model.eval()"),xmt.forEach(t),Ber=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(Ixe,"CODE",{});var $mt=s(bue);Per=r($mt,"model.train()"),$mt.forEach(t),Ixe.forEach(t),Ier=i(_a),T(eF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),TPe=i(f),Ld=n(f,"H2",{class:!0});var wqe=s(Ld);oF=n(wqe,"A",{id:!0,class:!0,href:!0});var kmt=s(oF);vue=n(kmt,"SPAN",{});var Smt=s(vue);T(oL.$$.fragment,Smt),Smt.forEach(t),kmt.forEach(t),qer=i(wqe),Fue=n(wqe,"SPAN",{});var Rmt=s(Fue);Ner=r(Rmt,"AutoModelForInstanceSegmentation"),Rmt.forEach(t),wqe.forEach(t),MPe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(rL.$$.fragment,al),jer=i(al),xd=n(al,"P",{});var iK=s(xd);Der=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cX=n(iK,"A",{href:!0});var Bmt=s(cX);Ger=r(Bmt,"from_pretrained()"),Bmt.forEach(t),Oer=r(iK," class method or the "),fX=n(iK,"A",{href:!0});var Pmt=s(fX);Ver=r(Pmt,"from_config()"),Pmt.forEach(t),Xer=r(iK,` class
method.`),iK.forEach(t),zer=i(al),tL=n(al,"P",{});var Aqe=s(tL);Qer=r(Aqe,"This class cannot be instantiated directly using "),Tue=n(Aqe,"CODE",{});var Imt=s(Tue);Wer=r(Imt,"__init__()"),Imt.forEach(t),Her=r(Aqe," (throws an error)."),Aqe.forEach(t),Uer=i(al),Mt=n(al,"DIV",{class:!0});var EA=s(Mt);T(aL.$$.fragment,EA),Jer=i(EA),Mue=n(EA,"P",{});var qmt=s(Mue);Yer=r(qmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),qmt.forEach(t),Ker=i(EA),$d=n(EA,"P",{});var dK=s($d);Zer=r(dK,`Note:
Loading a model from its configuration file does `),Eue=n(dK,"STRONG",{});var Nmt=s(Eue);eor=r(Nmt,"not"),Nmt.forEach(t),oor=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(dK,"A",{href:!0});var jmt=s(mX);ror=r(jmt,"from_pretrained()"),jmt.forEach(t),tor=r(dK," to load the model weights."),dK.forEach(t),aor=i(EA),T(rF.$$.fragment,EA),EA.forEach(t),nor=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(nL.$$.fragment,ba),sor=i(ba),Cue=n(ba,"P",{});var Dmt=s(Cue);lor=r(Dmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dmt.forEach(t),ior=i(ba),Ha=n(ba,"P",{});var CA=s(Ha);dor=r(CA,"The model class to instantiate is selected based on the "),wue=n(CA,"CODE",{});var Gmt=s(wue);cor=r(Gmt,"model_type"),Gmt.forEach(t),mor=r(CA,` property of the config object (either
passed as an argument or loaded from `),Aue=n(CA,"CODE",{});var Omt=s(Aue);gor=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),hor=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(CA,"CODE",{});var Vmt=s(yue);por=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),uor=r(CA,":"),CA.forEach(t),_or=i(ba),Lue=n(ba,"UL",{});var Xmt=s(Lue);tF=n(Xmt,"LI",{});var qxe=s(tF);xue=n(qxe,"STRONG",{});var zmt=s(xue);bor=r(zmt,"maskformer"),zmt.forEach(t),vor=r(qxe," \u2014 "),gX=n(qxe,"A",{href:!0});var Qmt=s(gX);For=r(Qmt,"MaskFormerForInstanceSegmentation"),Qmt.forEach(t),Tor=r(qxe," (MaskFormer model)"),qxe.forEach(t),Xmt.forEach(t),Mor=i(ba),aF=n(ba,"P",{});var Nxe=s(aF);Eor=r(Nxe,"The model is set in evaluation mode by default using "),$ue=n(Nxe,"CODE",{});var Wmt=s($ue);Cor=r(Wmt,"model.eval()"),Wmt.forEach(t),wor=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(Nxe,"CODE",{});var Hmt=s(kue);Aor=r(Hmt,"model.train()"),Hmt.forEach(t),Nxe.forEach(t),yor=i(ba),T(nF.$$.fragment,ba),ba.forEach(t),al.forEach(t),EPe=i(f),kd=n(f,"H2",{class:!0});var yqe=s(kd);sF=n(yqe,"A",{id:!0,class:!0,href:!0});var Umt=s(sF);Sue=n(Umt,"SPAN",{});var Jmt=s(Sue);T(sL.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),Lor=i(yqe),Rue=n(yqe,"SPAN",{});var Ymt=s(Rue);xor=r(Ymt,"TFAutoModel"),Ymt.forEach(t),yqe.forEach(t),CPe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(lL.$$.fragment,nl),$or=i(nl),Sd=n(nl,"P",{});var cK=s(Sd);kor=r(cK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hX=n(cK,"A",{href:!0});var Kmt=s(hX);Sor=r(Kmt,"from_pretrained()"),Kmt.forEach(t),Ror=r(cK," class method or the "),pX=n(cK,"A",{href:!0});var Zmt=s(pX);Bor=r(Zmt,"from_config()"),Zmt.forEach(t),Por=r(cK,` class
method.`),cK.forEach(t),Ior=i(nl),iL=n(nl,"P",{});var Lqe=s(iL);qor=r(Lqe,"This class cannot be instantiated directly using "),Bue=n(Lqe,"CODE",{});var egt=s(Bue);Nor=r(egt,"__init__()"),egt.forEach(t),jor=r(Lqe," (throws an error)."),Lqe.forEach(t),Dor=i(nl),Et=n(nl,"DIV",{class:!0});var wA=s(Et);T(dL.$$.fragment,wA),Gor=i(wA),Pue=n(wA,"P",{});var ogt=s(Pue);Oor=r(ogt,"Instantiates one of the base model classes of the library from a configuration."),ogt.forEach(t),Vor=i(wA),Rd=n(wA,"P",{});var fK=s(Rd);Xor=r(fK,`Note:
Loading a model from its configuration file does `),Iue=n(fK,"STRONG",{});var rgt=s(Iue);zor=r(rgt,"not"),rgt.forEach(t),Qor=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(fK,"A",{href:!0});var tgt=s(uX);Wor=r(tgt,"from_pretrained()"),tgt.forEach(t),Hor=r(fK," to load the model weights."),fK.forEach(t),Uor=i(wA),T(lF.$$.fragment,wA),wA.forEach(t),Jor=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(cL.$$.fragment,sl),Yor=i(sl),que=n(sl,"P",{});var agt=s(que);Kor=r(agt,"Instantiate one of the base model classes of the library from a pretrained model."),agt.forEach(t),Zor=i(sl),Ua=n(sl,"P",{});var AA=s(Ua);err=r(AA,"The model class to instantiate is selected based on the "),Nue=n(AA,"CODE",{});var ngt=s(Nue);orr=r(ngt,"model_type"),ngt.forEach(t),rrr=r(AA,` property of the config object (either
passed as an argument or loaded from `),jue=n(AA,"CODE",{});var sgt=s(jue);trr=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),arr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(AA,"CODE",{});var lgt=s(Due);nrr=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),srr=r(AA,":"),AA.forEach(t),lrr=i(sl),j=n(sl,"UL",{});var D=s(j);iF=n(D,"LI",{});var jxe=s(iF);Gue=n(jxe,"STRONG",{});var igt=s(Gue);irr=r(igt,"albert"),igt.forEach(t),drr=r(jxe," \u2014 "),_X=n(jxe,"A",{href:!0});var dgt=s(_X);crr=r(dgt,"TFAlbertModel"),dgt.forEach(t),frr=r(jxe," (ALBERT model)"),jxe.forEach(t),mrr=i(D),dF=n(D,"LI",{});var Dxe=s(dF);Oue=n(Dxe,"STRONG",{});var cgt=s(Oue);grr=r(cgt,"bart"),cgt.forEach(t),hrr=r(Dxe," \u2014 "),bX=n(Dxe,"A",{href:!0});var fgt=s(bX);prr=r(fgt,"TFBartModel"),fgt.forEach(t),urr=r(Dxe," (BART model)"),Dxe.forEach(t),_rr=i(D),cF=n(D,"LI",{});var Gxe=s(cF);Vue=n(Gxe,"STRONG",{});var mgt=s(Vue);brr=r(mgt,"bert"),mgt.forEach(t),vrr=r(Gxe," \u2014 "),vX=n(Gxe,"A",{href:!0});var ggt=s(vX);Frr=r(ggt,"TFBertModel"),ggt.forEach(t),Trr=r(Gxe," (BERT model)"),Gxe.forEach(t),Mrr=i(D),fF=n(D,"LI",{});var Oxe=s(fF);Xue=n(Oxe,"STRONG",{});var hgt=s(Xue);Err=r(hgt,"blenderbot"),hgt.forEach(t),Crr=r(Oxe," \u2014 "),FX=n(Oxe,"A",{href:!0});var pgt=s(FX);wrr=r(pgt,"TFBlenderbotModel"),pgt.forEach(t),Arr=r(Oxe," (Blenderbot model)"),Oxe.forEach(t),yrr=i(D),mF=n(D,"LI",{});var Vxe=s(mF);zue=n(Vxe,"STRONG",{});var ugt=s(zue);Lrr=r(ugt,"blenderbot-small"),ugt.forEach(t),xrr=r(Vxe," \u2014 "),TX=n(Vxe,"A",{href:!0});var _gt=s(TX);$rr=r(_gt,"TFBlenderbotSmallModel"),_gt.forEach(t),krr=r(Vxe," (BlenderbotSmall model)"),Vxe.forEach(t),Srr=i(D),gF=n(D,"LI",{});var Xxe=s(gF);Que=n(Xxe,"STRONG",{});var bgt=s(Que);Rrr=r(bgt,"camembert"),bgt.forEach(t),Brr=r(Xxe," \u2014 "),MX=n(Xxe,"A",{href:!0});var vgt=s(MX);Prr=r(vgt,"TFCamembertModel"),vgt.forEach(t),Irr=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),qrr=i(D),hF=n(D,"LI",{});var zxe=s(hF);Wue=n(zxe,"STRONG",{});var Fgt=s(Wue);Nrr=r(Fgt,"clip"),Fgt.forEach(t),jrr=r(zxe," \u2014 "),EX=n(zxe,"A",{href:!0});var Tgt=s(EX);Drr=r(Tgt,"TFCLIPModel"),Tgt.forEach(t),Grr=r(zxe," (CLIP model)"),zxe.forEach(t),Orr=i(D),pF=n(D,"LI",{});var Qxe=s(pF);Hue=n(Qxe,"STRONG",{});var Mgt=s(Hue);Vrr=r(Mgt,"convbert"),Mgt.forEach(t),Xrr=r(Qxe," \u2014 "),CX=n(Qxe,"A",{href:!0});var Egt=s(CX);zrr=r(Egt,"TFConvBertModel"),Egt.forEach(t),Qrr=r(Qxe," (ConvBERT model)"),Qxe.forEach(t),Wrr=i(D),uF=n(D,"LI",{});var Wxe=s(uF);Uue=n(Wxe,"STRONG",{});var Cgt=s(Uue);Hrr=r(Cgt,"convnext"),Cgt.forEach(t),Urr=r(Wxe," \u2014 "),wX=n(Wxe,"A",{href:!0});var wgt=s(wX);Jrr=r(wgt,"TFConvNextModel"),wgt.forEach(t),Yrr=r(Wxe," (ConvNext model)"),Wxe.forEach(t),Krr=i(D),_F=n(D,"LI",{});var Hxe=s(_F);Jue=n(Hxe,"STRONG",{});var Agt=s(Jue);Zrr=r(Agt,"ctrl"),Agt.forEach(t),etr=r(Hxe," \u2014 "),AX=n(Hxe,"A",{href:!0});var ygt=s(AX);otr=r(ygt,"TFCTRLModel"),ygt.forEach(t),rtr=r(Hxe," (CTRL model)"),Hxe.forEach(t),ttr=i(D),bF=n(D,"LI",{});var Uxe=s(bF);Yue=n(Uxe,"STRONG",{});var Lgt=s(Yue);atr=r(Lgt,"data2vec-vision"),Lgt.forEach(t),ntr=r(Uxe," \u2014 "),yX=n(Uxe,"A",{href:!0});var xgt=s(yX);str=r(xgt,"TFData2VecVisionModel"),xgt.forEach(t),ltr=r(Uxe," (Data2VecVision model)"),Uxe.forEach(t),itr=i(D),vF=n(D,"LI",{});var Jxe=s(vF);Kue=n(Jxe,"STRONG",{});var $gt=s(Kue);dtr=r($gt,"deberta"),$gt.forEach(t),ctr=r(Jxe," \u2014 "),LX=n(Jxe,"A",{href:!0});var kgt=s(LX);ftr=r(kgt,"TFDebertaModel"),kgt.forEach(t),mtr=r(Jxe," (DeBERTa model)"),Jxe.forEach(t),gtr=i(D),FF=n(D,"LI",{});var Yxe=s(FF);Zue=n(Yxe,"STRONG",{});var Sgt=s(Zue);htr=r(Sgt,"deberta-v2"),Sgt.forEach(t),ptr=r(Yxe," \u2014 "),xX=n(Yxe,"A",{href:!0});var Rgt=s(xX);utr=r(Rgt,"TFDebertaV2Model"),Rgt.forEach(t),_tr=r(Yxe," (DeBERTa-v2 model)"),Yxe.forEach(t),btr=i(D),TF=n(D,"LI",{});var Kxe=s(TF);e_e=n(Kxe,"STRONG",{});var Bgt=s(e_e);vtr=r(Bgt,"distilbert"),Bgt.forEach(t),Ftr=r(Kxe," \u2014 "),$X=n(Kxe,"A",{href:!0});var Pgt=s($X);Ttr=r(Pgt,"TFDistilBertModel"),Pgt.forEach(t),Mtr=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),Etr=i(D),MF=n(D,"LI",{});var Zxe=s(MF);o_e=n(Zxe,"STRONG",{});var Igt=s(o_e);Ctr=r(Igt,"dpr"),Igt.forEach(t),wtr=r(Zxe," \u2014 "),kX=n(Zxe,"A",{href:!0});var qgt=s(kX);Atr=r(qgt,"TFDPRQuestionEncoder"),qgt.forEach(t),ytr=r(Zxe," (DPR model)"),Zxe.forEach(t),Ltr=i(D),EF=n(D,"LI",{});var e9e=s(EF);r_e=n(e9e,"STRONG",{});var Ngt=s(r_e);xtr=r(Ngt,"electra"),Ngt.forEach(t),$tr=r(e9e," \u2014 "),SX=n(e9e,"A",{href:!0});var jgt=s(SX);ktr=r(jgt,"TFElectraModel"),jgt.forEach(t),Str=r(e9e," (ELECTRA model)"),e9e.forEach(t),Rtr=i(D),CF=n(D,"LI",{});var o9e=s(CF);t_e=n(o9e,"STRONG",{});var Dgt=s(t_e);Btr=r(Dgt,"flaubert"),Dgt.forEach(t),Ptr=r(o9e," \u2014 "),RX=n(o9e,"A",{href:!0});var Ggt=s(RX);Itr=r(Ggt,"TFFlaubertModel"),Ggt.forEach(t),qtr=r(o9e," (FlauBERT model)"),o9e.forEach(t),Ntr=i(D),$s=n(D,"LI",{});var P9=s($s);a_e=n(P9,"STRONG",{});var Ogt=s(a_e);jtr=r(Ogt,"funnel"),Ogt.forEach(t),Dtr=r(P9," \u2014 "),BX=n(P9,"A",{href:!0});var Vgt=s(BX);Gtr=r(Vgt,"TFFunnelModel"),Vgt.forEach(t),Otr=r(P9," or "),PX=n(P9,"A",{href:!0});var Xgt=s(PX);Vtr=r(Xgt,"TFFunnelBaseModel"),Xgt.forEach(t),Xtr=r(P9," (Funnel Transformer model)"),P9.forEach(t),ztr=i(D),wF=n(D,"LI",{});var r9e=s(wF);n_e=n(r9e,"STRONG",{});var zgt=s(n_e);Qtr=r(zgt,"gpt2"),zgt.forEach(t),Wtr=r(r9e," \u2014 "),IX=n(r9e,"A",{href:!0});var Qgt=s(IX);Htr=r(Qgt,"TFGPT2Model"),Qgt.forEach(t),Utr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Jtr=i(D),AF=n(D,"LI",{});var t9e=s(AF);s_e=n(t9e,"STRONG",{});var Wgt=s(s_e);Ytr=r(Wgt,"gptj"),Wgt.forEach(t),Ktr=r(t9e," \u2014 "),qX=n(t9e,"A",{href:!0});var Hgt=s(qX);Ztr=r(Hgt,"TFGPTJModel"),Hgt.forEach(t),ear=r(t9e," (GPT-J model)"),t9e.forEach(t),oar=i(D),yF=n(D,"LI",{});var a9e=s(yF);l_e=n(a9e,"STRONG",{});var Ugt=s(l_e);rar=r(Ugt,"hubert"),Ugt.forEach(t),tar=r(a9e," \u2014 "),NX=n(a9e,"A",{href:!0});var Jgt=s(NX);aar=r(Jgt,"TFHubertModel"),Jgt.forEach(t),nar=r(a9e," (Hubert model)"),a9e.forEach(t),sar=i(D),LF=n(D,"LI",{});var n9e=s(LF);i_e=n(n9e,"STRONG",{});var Ygt=s(i_e);lar=r(Ygt,"layoutlm"),Ygt.forEach(t),iar=r(n9e," \u2014 "),jX=n(n9e,"A",{href:!0});var Kgt=s(jX);dar=r(Kgt,"TFLayoutLMModel"),Kgt.forEach(t),car=r(n9e," (LayoutLM model)"),n9e.forEach(t),far=i(D),xF=n(D,"LI",{});var s9e=s(xF);d_e=n(s9e,"STRONG",{});var Zgt=s(d_e);mar=r(Zgt,"led"),Zgt.forEach(t),gar=r(s9e," \u2014 "),DX=n(s9e,"A",{href:!0});var eht=s(DX);har=r(eht,"TFLEDModel"),eht.forEach(t),par=r(s9e," (LED model)"),s9e.forEach(t),uar=i(D),$F=n(D,"LI",{});var l9e=s($F);c_e=n(l9e,"STRONG",{});var oht=s(c_e);_ar=r(oht,"longformer"),oht.forEach(t),bar=r(l9e," \u2014 "),GX=n(l9e,"A",{href:!0});var rht=s(GX);Far=r(rht,"TFLongformerModel"),rht.forEach(t),Tar=r(l9e," (Longformer model)"),l9e.forEach(t),Mar=i(D),kF=n(D,"LI",{});var i9e=s(kF);f_e=n(i9e,"STRONG",{});var tht=s(f_e);Ear=r(tht,"lxmert"),tht.forEach(t),Car=r(i9e," \u2014 "),OX=n(i9e,"A",{href:!0});var aht=s(OX);war=r(aht,"TFLxmertModel"),aht.forEach(t),Aar=r(i9e," (LXMERT model)"),i9e.forEach(t),yar=i(D),SF=n(D,"LI",{});var d9e=s(SF);m_e=n(d9e,"STRONG",{});var nht=s(m_e);Lar=r(nht,"marian"),nht.forEach(t),xar=r(d9e," \u2014 "),VX=n(d9e,"A",{href:!0});var sht=s(VX);$ar=r(sht,"TFMarianModel"),sht.forEach(t),kar=r(d9e," (Marian model)"),d9e.forEach(t),Sar=i(D),RF=n(D,"LI",{});var c9e=s(RF);g_e=n(c9e,"STRONG",{});var lht=s(g_e);Rar=r(lht,"mbart"),lht.forEach(t),Bar=r(c9e," \u2014 "),XX=n(c9e,"A",{href:!0});var iht=s(XX);Par=r(iht,"TFMBartModel"),iht.forEach(t),Iar=r(c9e," (mBART model)"),c9e.forEach(t),qar=i(D),BF=n(D,"LI",{});var f9e=s(BF);h_e=n(f9e,"STRONG",{});var dht=s(h_e);Nar=r(dht,"mobilebert"),dht.forEach(t),jar=r(f9e," \u2014 "),zX=n(f9e,"A",{href:!0});var cht=s(zX);Dar=r(cht,"TFMobileBertModel"),cht.forEach(t),Gar=r(f9e," (MobileBERT model)"),f9e.forEach(t),Oar=i(D),PF=n(D,"LI",{});var m9e=s(PF);p_e=n(m9e,"STRONG",{});var fht=s(p_e);Var=r(fht,"mpnet"),fht.forEach(t),Xar=r(m9e," \u2014 "),QX=n(m9e,"A",{href:!0});var mht=s(QX);zar=r(mht,"TFMPNetModel"),mht.forEach(t),Qar=r(m9e," (MPNet model)"),m9e.forEach(t),War=i(D),IF=n(D,"LI",{});var g9e=s(IF);u_e=n(g9e,"STRONG",{});var ght=s(u_e);Har=r(ght,"mt5"),ght.forEach(t),Uar=r(g9e," \u2014 "),WX=n(g9e,"A",{href:!0});var hht=s(WX);Jar=r(hht,"TFMT5Model"),hht.forEach(t),Yar=r(g9e," (mT5 model)"),g9e.forEach(t),Kar=i(D),qF=n(D,"LI",{});var h9e=s(qF);__e=n(h9e,"STRONG",{});var pht=s(__e);Zar=r(pht,"openai-gpt"),pht.forEach(t),enr=r(h9e," \u2014 "),HX=n(h9e,"A",{href:!0});var uht=s(HX);onr=r(uht,"TFOpenAIGPTModel"),uht.forEach(t),rnr=r(h9e," (OpenAI GPT model)"),h9e.forEach(t),tnr=i(D),NF=n(D,"LI",{});var p9e=s(NF);b_e=n(p9e,"STRONG",{});var _ht=s(b_e);anr=r(_ht,"pegasus"),_ht.forEach(t),nnr=r(p9e," \u2014 "),UX=n(p9e,"A",{href:!0});var bht=s(UX);snr=r(bht,"TFPegasusModel"),bht.forEach(t),lnr=r(p9e," (Pegasus model)"),p9e.forEach(t),inr=i(D),jF=n(D,"LI",{});var u9e=s(jF);v_e=n(u9e,"STRONG",{});var vht=s(v_e);dnr=r(vht,"rembert"),vht.forEach(t),cnr=r(u9e," \u2014 "),JX=n(u9e,"A",{href:!0});var Fht=s(JX);fnr=r(Fht,"TFRemBertModel"),Fht.forEach(t),mnr=r(u9e," (RemBERT model)"),u9e.forEach(t),gnr=i(D),DF=n(D,"LI",{});var _9e=s(DF);F_e=n(_9e,"STRONG",{});var Tht=s(F_e);hnr=r(Tht,"roberta"),Tht.forEach(t),pnr=r(_9e," \u2014 "),YX=n(_9e,"A",{href:!0});var Mht=s(YX);unr=r(Mht,"TFRobertaModel"),Mht.forEach(t),_nr=r(_9e," (RoBERTa model)"),_9e.forEach(t),bnr=i(D),GF=n(D,"LI",{});var b9e=s(GF);T_e=n(b9e,"STRONG",{});var Eht=s(T_e);vnr=r(Eht,"roformer"),Eht.forEach(t),Fnr=r(b9e," \u2014 "),KX=n(b9e,"A",{href:!0});var Cht=s(KX);Tnr=r(Cht,"TFRoFormerModel"),Cht.forEach(t),Mnr=r(b9e," (RoFormer model)"),b9e.forEach(t),Enr=i(D),OF=n(D,"LI",{});var v9e=s(OF);M_e=n(v9e,"STRONG",{});var wht=s(M_e);Cnr=r(wht,"speech_to_text"),wht.forEach(t),wnr=r(v9e," \u2014 "),ZX=n(v9e,"A",{href:!0});var Aht=s(ZX);Anr=r(Aht,"TFSpeech2TextModel"),Aht.forEach(t),ynr=r(v9e," (Speech2Text model)"),v9e.forEach(t),Lnr=i(D),VF=n(D,"LI",{});var F9e=s(VF);E_e=n(F9e,"STRONG",{});var yht=s(E_e);xnr=r(yht,"t5"),yht.forEach(t),$nr=r(F9e," \u2014 "),ez=n(F9e,"A",{href:!0});var Lht=s(ez);knr=r(Lht,"TFT5Model"),Lht.forEach(t),Snr=r(F9e," (T5 model)"),F9e.forEach(t),Rnr=i(D),XF=n(D,"LI",{});var T9e=s(XF);C_e=n(T9e,"STRONG",{});var xht=s(C_e);Bnr=r(xht,"tapas"),xht.forEach(t),Pnr=r(T9e," \u2014 "),oz=n(T9e,"A",{href:!0});var $ht=s(oz);Inr=r($ht,"TFTapasModel"),$ht.forEach(t),qnr=r(T9e," (TAPAS model)"),T9e.forEach(t),Nnr=i(D),zF=n(D,"LI",{});var M9e=s(zF);w_e=n(M9e,"STRONG",{});var kht=s(w_e);jnr=r(kht,"transfo-xl"),kht.forEach(t),Dnr=r(M9e," \u2014 "),rz=n(M9e,"A",{href:!0});var Sht=s(rz);Gnr=r(Sht,"TFTransfoXLModel"),Sht.forEach(t),Onr=r(M9e," (Transformer-XL model)"),M9e.forEach(t),Vnr=i(D),QF=n(D,"LI",{});var E9e=s(QF);A_e=n(E9e,"STRONG",{});var Rht=s(A_e);Xnr=r(Rht,"vit"),Rht.forEach(t),znr=r(E9e," \u2014 "),tz=n(E9e,"A",{href:!0});var Bht=s(tz);Qnr=r(Bht,"TFViTModel"),Bht.forEach(t),Wnr=r(E9e," (ViT model)"),E9e.forEach(t),Hnr=i(D),WF=n(D,"LI",{});var C9e=s(WF);y_e=n(C9e,"STRONG",{});var Pht=s(y_e);Unr=r(Pht,"vit_mae"),Pht.forEach(t),Jnr=r(C9e," \u2014 "),az=n(C9e,"A",{href:!0});var Iht=s(az);Ynr=r(Iht,"TFViTMAEModel"),Iht.forEach(t),Knr=r(C9e," (ViTMAE model)"),C9e.forEach(t),Znr=i(D),HF=n(D,"LI",{});var w9e=s(HF);L_e=n(w9e,"STRONG",{});var qht=s(L_e);esr=r(qht,"wav2vec2"),qht.forEach(t),osr=r(w9e," \u2014 "),nz=n(w9e,"A",{href:!0});var Nht=s(nz);rsr=r(Nht,"TFWav2Vec2Model"),Nht.forEach(t),tsr=r(w9e," (Wav2Vec2 model)"),w9e.forEach(t),asr=i(D),UF=n(D,"LI",{});var A9e=s(UF);x_e=n(A9e,"STRONG",{});var jht=s(x_e);nsr=r(jht,"xlm"),jht.forEach(t),ssr=r(A9e," \u2014 "),sz=n(A9e,"A",{href:!0});var Dht=s(sz);lsr=r(Dht,"TFXLMModel"),Dht.forEach(t),isr=r(A9e," (XLM model)"),A9e.forEach(t),dsr=i(D),JF=n(D,"LI",{});var y9e=s(JF);$_e=n(y9e,"STRONG",{});var Ght=s($_e);csr=r(Ght,"xlm-roberta"),Ght.forEach(t),fsr=r(y9e," \u2014 "),lz=n(y9e,"A",{href:!0});var Oht=s(lz);msr=r(Oht,"TFXLMRobertaModel"),Oht.forEach(t),gsr=r(y9e," (XLM-RoBERTa model)"),y9e.forEach(t),hsr=i(D),YF=n(D,"LI",{});var L9e=s(YF);k_e=n(L9e,"STRONG",{});var Vht=s(k_e);psr=r(Vht,"xlnet"),Vht.forEach(t),usr=r(L9e," \u2014 "),iz=n(L9e,"A",{href:!0});var Xht=s(iz);_sr=r(Xht,"TFXLNetModel"),Xht.forEach(t),bsr=r(L9e," (XLNet model)"),L9e.forEach(t),D.forEach(t),vsr=i(sl),T(KF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),wPe=i(f),Bd=n(f,"H2",{class:!0});var xqe=s(Bd);ZF=n(xqe,"A",{id:!0,class:!0,href:!0});var zht=s(ZF);S_e=n(zht,"SPAN",{});var Qht=s(S_e);T(fL.$$.fragment,Qht),Qht.forEach(t),zht.forEach(t),Fsr=i(xqe),R_e=n(xqe,"SPAN",{});var Wht=s(R_e);Tsr=r(Wht,"TFAutoModelForPreTraining"),Wht.forEach(t),xqe.forEach(t),APe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(mL.$$.fragment,ll),Msr=i(ll),Pd=n(ll,"P",{});var mK=s(Pd);Esr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dz=n(mK,"A",{href:!0});var Hht=s(dz);Csr=r(Hht,"from_pretrained()"),Hht.forEach(t),wsr=r(mK," class method or the "),cz=n(mK,"A",{href:!0});var Uht=s(cz);Asr=r(Uht,"from_config()"),Uht.forEach(t),ysr=r(mK,` class
method.`),mK.forEach(t),Lsr=i(ll),gL=n(ll,"P",{});var $qe=s(gL);xsr=r($qe,"This class cannot be instantiated directly using "),B_e=n($qe,"CODE",{});var Jht=s(B_e);$sr=r(Jht,"__init__()"),Jht.forEach(t),ksr=r($qe," (throws an error)."),$qe.forEach(t),Ssr=i(ll),Ct=n(ll,"DIV",{class:!0});var yA=s(Ct);T(hL.$$.fragment,yA),Rsr=i(yA),P_e=n(yA,"P",{});var Yht=s(P_e);Bsr=r(Yht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yht.forEach(t),Psr=i(yA),Id=n(yA,"P",{});var gK=s(Id);Isr=r(gK,`Note:
Loading a model from its configuration file does `),I_e=n(gK,"STRONG",{});var Kht=s(I_e);qsr=r(Kht,"not"),Kht.forEach(t),Nsr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(gK,"A",{href:!0});var Zht=s(fz);jsr=r(Zht,"from_pretrained()"),Zht.forEach(t),Dsr=r(gK," to load the model weights."),gK.forEach(t),Gsr=i(yA),T(eT.$$.fragment,yA),yA.forEach(t),Osr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(pL.$$.fragment,il),Vsr=i(il),q_e=n(il,"P",{});var ept=s(q_e);Xsr=r(ept,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ept.forEach(t),zsr=i(il),Ja=n(il,"P",{});var LA=s(Ja);Qsr=r(LA,"The model class to instantiate is selected based on the "),N_e=n(LA,"CODE",{});var opt=s(N_e);Wsr=r(opt,"model_type"),opt.forEach(t),Hsr=r(LA,` property of the config object (either
passed as an argument or loaded from `),j_e=n(LA,"CODE",{});var rpt=s(j_e);Usr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),Jsr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(LA,"CODE",{});var tpt=s(D_e);Ysr=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),Ksr=r(LA,":"),LA.forEach(t),Zsr=i(il),ne=n(il,"UL",{});var le=s(ne);oT=n(le,"LI",{});var x9e=s(oT);G_e=n(x9e,"STRONG",{});var apt=s(G_e);elr=r(apt,"albert"),apt.forEach(t),olr=r(x9e," \u2014 "),mz=n(x9e,"A",{href:!0});var npt=s(mz);rlr=r(npt,"TFAlbertForPreTraining"),npt.forEach(t),tlr=r(x9e," (ALBERT model)"),x9e.forEach(t),alr=i(le),rT=n(le,"LI",{});var $9e=s(rT);O_e=n($9e,"STRONG",{});var spt=s(O_e);nlr=r(spt,"bart"),spt.forEach(t),slr=r($9e," \u2014 "),gz=n($9e,"A",{href:!0});var lpt=s(gz);llr=r(lpt,"TFBartForConditionalGeneration"),lpt.forEach(t),ilr=r($9e," (BART model)"),$9e.forEach(t),dlr=i(le),tT=n(le,"LI",{});var k9e=s(tT);V_e=n(k9e,"STRONG",{});var ipt=s(V_e);clr=r(ipt,"bert"),ipt.forEach(t),flr=r(k9e," \u2014 "),hz=n(k9e,"A",{href:!0});var dpt=s(hz);mlr=r(dpt,"TFBertForPreTraining"),dpt.forEach(t),glr=r(k9e," (BERT model)"),k9e.forEach(t),hlr=i(le),aT=n(le,"LI",{});var S9e=s(aT);X_e=n(S9e,"STRONG",{});var cpt=s(X_e);plr=r(cpt,"camembert"),cpt.forEach(t),ulr=r(S9e," \u2014 "),pz=n(S9e,"A",{href:!0});var fpt=s(pz);_lr=r(fpt,"TFCamembertForMaskedLM"),fpt.forEach(t),blr=r(S9e," (CamemBERT model)"),S9e.forEach(t),vlr=i(le),nT=n(le,"LI",{});var R9e=s(nT);z_e=n(R9e,"STRONG",{});var mpt=s(z_e);Flr=r(mpt,"ctrl"),mpt.forEach(t),Tlr=r(R9e," \u2014 "),uz=n(R9e,"A",{href:!0});var gpt=s(uz);Mlr=r(gpt,"TFCTRLLMHeadModel"),gpt.forEach(t),Elr=r(R9e," (CTRL model)"),R9e.forEach(t),Clr=i(le),sT=n(le,"LI",{});var B9e=s(sT);Q_e=n(B9e,"STRONG",{});var hpt=s(Q_e);wlr=r(hpt,"distilbert"),hpt.forEach(t),Alr=r(B9e," \u2014 "),_z=n(B9e,"A",{href:!0});var ppt=s(_z);ylr=r(ppt,"TFDistilBertForMaskedLM"),ppt.forEach(t),Llr=r(B9e," (DistilBERT model)"),B9e.forEach(t),xlr=i(le),lT=n(le,"LI",{});var P9e=s(lT);W_e=n(P9e,"STRONG",{});var upt=s(W_e);$lr=r(upt,"electra"),upt.forEach(t),klr=r(P9e," \u2014 "),bz=n(P9e,"A",{href:!0});var _pt=s(bz);Slr=r(_pt,"TFElectraForPreTraining"),_pt.forEach(t),Rlr=r(P9e," (ELECTRA model)"),P9e.forEach(t),Blr=i(le),iT=n(le,"LI",{});var I9e=s(iT);H_e=n(I9e,"STRONG",{});var bpt=s(H_e);Plr=r(bpt,"flaubert"),bpt.forEach(t),Ilr=r(I9e," \u2014 "),vz=n(I9e,"A",{href:!0});var vpt=s(vz);qlr=r(vpt,"TFFlaubertWithLMHeadModel"),vpt.forEach(t),Nlr=r(I9e," (FlauBERT model)"),I9e.forEach(t),jlr=i(le),dT=n(le,"LI",{});var q9e=s(dT);U_e=n(q9e,"STRONG",{});var Fpt=s(U_e);Dlr=r(Fpt,"funnel"),Fpt.forEach(t),Glr=r(q9e," \u2014 "),Fz=n(q9e,"A",{href:!0});var Tpt=s(Fz);Olr=r(Tpt,"TFFunnelForPreTraining"),Tpt.forEach(t),Vlr=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),Xlr=i(le),cT=n(le,"LI",{});var N9e=s(cT);J_e=n(N9e,"STRONG",{});var Mpt=s(J_e);zlr=r(Mpt,"gpt2"),Mpt.forEach(t),Qlr=r(N9e," \u2014 "),Tz=n(N9e,"A",{href:!0});var Ept=s(Tz);Wlr=r(Ept,"TFGPT2LMHeadModel"),Ept.forEach(t),Hlr=r(N9e," (OpenAI GPT-2 model)"),N9e.forEach(t),Ulr=i(le),fT=n(le,"LI",{});var j9e=s(fT);Y_e=n(j9e,"STRONG",{});var Cpt=s(Y_e);Jlr=r(Cpt,"layoutlm"),Cpt.forEach(t),Ylr=r(j9e," \u2014 "),Mz=n(j9e,"A",{href:!0});var wpt=s(Mz);Klr=r(wpt,"TFLayoutLMForMaskedLM"),wpt.forEach(t),Zlr=r(j9e," (LayoutLM model)"),j9e.forEach(t),eir=i(le),mT=n(le,"LI",{});var D9e=s(mT);K_e=n(D9e,"STRONG",{});var Apt=s(K_e);oir=r(Apt,"lxmert"),Apt.forEach(t),rir=r(D9e," \u2014 "),Ez=n(D9e,"A",{href:!0});var ypt=s(Ez);tir=r(ypt,"TFLxmertForPreTraining"),ypt.forEach(t),air=r(D9e," (LXMERT model)"),D9e.forEach(t),nir=i(le),gT=n(le,"LI",{});var G9e=s(gT);Z_e=n(G9e,"STRONG",{});var Lpt=s(Z_e);sir=r(Lpt,"mobilebert"),Lpt.forEach(t),lir=r(G9e," \u2014 "),Cz=n(G9e,"A",{href:!0});var xpt=s(Cz);iir=r(xpt,"TFMobileBertForPreTraining"),xpt.forEach(t),dir=r(G9e," (MobileBERT model)"),G9e.forEach(t),cir=i(le),hT=n(le,"LI",{});var O9e=s(hT);e1e=n(O9e,"STRONG",{});var $pt=s(e1e);fir=r($pt,"mpnet"),$pt.forEach(t),mir=r(O9e," \u2014 "),wz=n(O9e,"A",{href:!0});var kpt=s(wz);gir=r(kpt,"TFMPNetForMaskedLM"),kpt.forEach(t),hir=r(O9e," (MPNet model)"),O9e.forEach(t),pir=i(le),pT=n(le,"LI",{});var V9e=s(pT);o1e=n(V9e,"STRONG",{});var Spt=s(o1e);uir=r(Spt,"openai-gpt"),Spt.forEach(t),_ir=r(V9e," \u2014 "),Az=n(V9e,"A",{href:!0});var Rpt=s(Az);bir=r(Rpt,"TFOpenAIGPTLMHeadModel"),Rpt.forEach(t),vir=r(V9e," (OpenAI GPT model)"),V9e.forEach(t),Fir=i(le),uT=n(le,"LI",{});var X9e=s(uT);r1e=n(X9e,"STRONG",{});var Bpt=s(r1e);Tir=r(Bpt,"roberta"),Bpt.forEach(t),Mir=r(X9e," \u2014 "),yz=n(X9e,"A",{href:!0});var Ppt=s(yz);Eir=r(Ppt,"TFRobertaForMaskedLM"),Ppt.forEach(t),Cir=r(X9e," (RoBERTa model)"),X9e.forEach(t),wir=i(le),_T=n(le,"LI",{});var z9e=s(_T);t1e=n(z9e,"STRONG",{});var Ipt=s(t1e);Air=r(Ipt,"t5"),Ipt.forEach(t),yir=r(z9e," \u2014 "),Lz=n(z9e,"A",{href:!0});var qpt=s(Lz);Lir=r(qpt,"TFT5ForConditionalGeneration"),qpt.forEach(t),xir=r(z9e," (T5 model)"),z9e.forEach(t),$ir=i(le),bT=n(le,"LI",{});var Q9e=s(bT);a1e=n(Q9e,"STRONG",{});var Npt=s(a1e);kir=r(Npt,"tapas"),Npt.forEach(t),Sir=r(Q9e," \u2014 "),xz=n(Q9e,"A",{href:!0});var jpt=s(xz);Rir=r(jpt,"TFTapasForMaskedLM"),jpt.forEach(t),Bir=r(Q9e," (TAPAS model)"),Q9e.forEach(t),Pir=i(le),vT=n(le,"LI",{});var W9e=s(vT);n1e=n(W9e,"STRONG",{});var Dpt=s(n1e);Iir=r(Dpt,"transfo-xl"),Dpt.forEach(t),qir=r(W9e," \u2014 "),$z=n(W9e,"A",{href:!0});var Gpt=s($z);Nir=r(Gpt,"TFTransfoXLLMHeadModel"),Gpt.forEach(t),jir=r(W9e," (Transformer-XL model)"),W9e.forEach(t),Dir=i(le),FT=n(le,"LI",{});var H9e=s(FT);s1e=n(H9e,"STRONG",{});var Opt=s(s1e);Gir=r(Opt,"vit_mae"),Opt.forEach(t),Oir=r(H9e," \u2014 "),kz=n(H9e,"A",{href:!0});var Vpt=s(kz);Vir=r(Vpt,"TFViTMAEForPreTraining"),Vpt.forEach(t),Xir=r(H9e," (ViTMAE model)"),H9e.forEach(t),zir=i(le),TT=n(le,"LI",{});var U9e=s(TT);l1e=n(U9e,"STRONG",{});var Xpt=s(l1e);Qir=r(Xpt,"xlm"),Xpt.forEach(t),Wir=r(U9e," \u2014 "),Sz=n(U9e,"A",{href:!0});var zpt=s(Sz);Hir=r(zpt,"TFXLMWithLMHeadModel"),zpt.forEach(t),Uir=r(U9e," (XLM model)"),U9e.forEach(t),Jir=i(le),MT=n(le,"LI",{});var J9e=s(MT);i1e=n(J9e,"STRONG",{});var Qpt=s(i1e);Yir=r(Qpt,"xlm-roberta"),Qpt.forEach(t),Kir=r(J9e," \u2014 "),Rz=n(J9e,"A",{href:!0});var Wpt=s(Rz);Zir=r(Wpt,"TFXLMRobertaForMaskedLM"),Wpt.forEach(t),edr=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),odr=i(le),ET=n(le,"LI",{});var Y9e=s(ET);d1e=n(Y9e,"STRONG",{});var Hpt=s(d1e);rdr=r(Hpt,"xlnet"),Hpt.forEach(t),tdr=r(Y9e," \u2014 "),Bz=n(Y9e,"A",{href:!0});var Upt=s(Bz);adr=r(Upt,"TFXLNetLMHeadModel"),Upt.forEach(t),ndr=r(Y9e," (XLNet model)"),Y9e.forEach(t),le.forEach(t),sdr=i(il),T(CT.$$.fragment,il),il.forEach(t),ll.forEach(t),yPe=i(f),qd=n(f,"H2",{class:!0});var kqe=s(qd);wT=n(kqe,"A",{id:!0,class:!0,href:!0});var Jpt=s(wT);c1e=n(Jpt,"SPAN",{});var Ypt=s(c1e);T(uL.$$.fragment,Ypt),Ypt.forEach(t),Jpt.forEach(t),ldr=i(kqe),f1e=n(kqe,"SPAN",{});var Kpt=s(f1e);idr=r(Kpt,"TFAutoModelForCausalLM"),Kpt.forEach(t),kqe.forEach(t),LPe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(_L.$$.fragment,dl),ddr=i(dl),Nd=n(dl,"P",{});var hK=s(Nd);cdr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pz=n(hK,"A",{href:!0});var Zpt=s(Pz);fdr=r(Zpt,"from_pretrained()"),Zpt.forEach(t),mdr=r(hK," class method or the "),Iz=n(hK,"A",{href:!0});var eut=s(Iz);gdr=r(eut,"from_config()"),eut.forEach(t),hdr=r(hK,` class
method.`),hK.forEach(t),pdr=i(dl),bL=n(dl,"P",{});var Sqe=s(bL);udr=r(Sqe,"This class cannot be instantiated directly using "),m1e=n(Sqe,"CODE",{});var out=s(m1e);_dr=r(out,"__init__()"),out.forEach(t),bdr=r(Sqe," (throws an error)."),Sqe.forEach(t),vdr=i(dl),wt=n(dl,"DIV",{class:!0});var xA=s(wt);T(vL.$$.fragment,xA),Fdr=i(xA),g1e=n(xA,"P",{});var rut=s(g1e);Tdr=r(rut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rut.forEach(t),Mdr=i(xA),jd=n(xA,"P",{});var pK=s(jd);Edr=r(pK,`Note:
Loading a model from its configuration file does `),h1e=n(pK,"STRONG",{});var tut=s(h1e);Cdr=r(tut,"not"),tut.forEach(t),wdr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(pK,"A",{href:!0});var aut=s(qz);Adr=r(aut,"from_pretrained()"),aut.forEach(t),ydr=r(pK," to load the model weights."),pK.forEach(t),Ldr=i(xA),T(AT.$$.fragment,xA),xA.forEach(t),xdr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(FL.$$.fragment,cl),$dr=i(cl),p1e=n(cl,"P",{});var nut=s(p1e);kdr=r(nut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nut.forEach(t),Sdr=i(cl),Ya=n(cl,"P",{});var $A=s(Ya);Rdr=r($A,"The model class to instantiate is selected based on the "),u1e=n($A,"CODE",{});var sut=s(u1e);Bdr=r(sut,"model_type"),sut.forEach(t),Pdr=r($A,` property of the config object (either
passed as an argument or loaded from `),_1e=n($A,"CODE",{});var lut=s(_1e);Idr=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),qdr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n($A,"CODE",{});var iut=s(b1e);Ndr=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),jdr=r($A,":"),$A.forEach(t),Ddr=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);yT=n(Ce,"LI",{});var K9e=s(yT);v1e=n(K9e,"STRONG",{});var dut=s(v1e);Gdr=r(dut,"bert"),dut.forEach(t),Odr=r(K9e," \u2014 "),Nz=n(K9e,"A",{href:!0});var cut=s(Nz);Vdr=r(cut,"TFBertLMHeadModel"),cut.forEach(t),Xdr=r(K9e," (BERT model)"),K9e.forEach(t),zdr=i(Ce),LT=n(Ce,"LI",{});var Z9e=s(LT);F1e=n(Z9e,"STRONG",{});var fut=s(F1e);Qdr=r(fut,"camembert"),fut.forEach(t),Wdr=r(Z9e," \u2014 "),jz=n(Z9e,"A",{href:!0});var mut=s(jz);Hdr=r(mut,"TFCamembertForCausalLM"),mut.forEach(t),Udr=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),Jdr=i(Ce),xT=n(Ce,"LI",{});var e$e=s(xT);T1e=n(e$e,"STRONG",{});var gut=s(T1e);Ydr=r(gut,"ctrl"),gut.forEach(t),Kdr=r(e$e," \u2014 "),Dz=n(e$e,"A",{href:!0});var hut=s(Dz);Zdr=r(hut,"TFCTRLLMHeadModel"),hut.forEach(t),ecr=r(e$e," (CTRL model)"),e$e.forEach(t),ocr=i(Ce),$T=n(Ce,"LI",{});var o$e=s($T);M1e=n(o$e,"STRONG",{});var put=s(M1e);rcr=r(put,"gpt2"),put.forEach(t),tcr=r(o$e," \u2014 "),Gz=n(o$e,"A",{href:!0});var uut=s(Gz);acr=r(uut,"TFGPT2LMHeadModel"),uut.forEach(t),ncr=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),scr=i(Ce),kT=n(Ce,"LI",{});var r$e=s(kT);E1e=n(r$e,"STRONG",{});var _ut=s(E1e);lcr=r(_ut,"gptj"),_ut.forEach(t),icr=r(r$e," \u2014 "),Oz=n(r$e,"A",{href:!0});var but=s(Oz);dcr=r(but,"TFGPTJForCausalLM"),but.forEach(t),ccr=r(r$e," (GPT-J model)"),r$e.forEach(t),fcr=i(Ce),ST=n(Ce,"LI",{});var t$e=s(ST);C1e=n(t$e,"STRONG",{});var vut=s(C1e);mcr=r(vut,"openai-gpt"),vut.forEach(t),gcr=r(t$e," \u2014 "),Vz=n(t$e,"A",{href:!0});var Fut=s(Vz);hcr=r(Fut,"TFOpenAIGPTLMHeadModel"),Fut.forEach(t),pcr=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),ucr=i(Ce),RT=n(Ce,"LI",{});var a$e=s(RT);w1e=n(a$e,"STRONG",{});var Tut=s(w1e);_cr=r(Tut,"rembert"),Tut.forEach(t),bcr=r(a$e," \u2014 "),Xz=n(a$e,"A",{href:!0});var Mut=s(Xz);vcr=r(Mut,"TFRemBertForCausalLM"),Mut.forEach(t),Fcr=r(a$e," (RemBERT model)"),a$e.forEach(t),Tcr=i(Ce),BT=n(Ce,"LI",{});var n$e=s(BT);A1e=n(n$e,"STRONG",{});var Eut=s(A1e);Mcr=r(Eut,"roberta"),Eut.forEach(t),Ecr=r(n$e," \u2014 "),zz=n(n$e,"A",{href:!0});var Cut=s(zz);Ccr=r(Cut,"TFRobertaForCausalLM"),Cut.forEach(t),wcr=r(n$e," (RoBERTa model)"),n$e.forEach(t),Acr=i(Ce),PT=n(Ce,"LI",{});var s$e=s(PT);y1e=n(s$e,"STRONG",{});var wut=s(y1e);ycr=r(wut,"roformer"),wut.forEach(t),Lcr=r(s$e," \u2014 "),Qz=n(s$e,"A",{href:!0});var Aut=s(Qz);xcr=r(Aut,"TFRoFormerForCausalLM"),Aut.forEach(t),$cr=r(s$e," (RoFormer model)"),s$e.forEach(t),kcr=i(Ce),IT=n(Ce,"LI",{});var l$e=s(IT);L1e=n(l$e,"STRONG",{});var yut=s(L1e);Scr=r(yut,"transfo-xl"),yut.forEach(t),Rcr=r(l$e," \u2014 "),Wz=n(l$e,"A",{href:!0});var Lut=s(Wz);Bcr=r(Lut,"TFTransfoXLLMHeadModel"),Lut.forEach(t),Pcr=r(l$e," (Transformer-XL model)"),l$e.forEach(t),Icr=i(Ce),qT=n(Ce,"LI",{});var i$e=s(qT);x1e=n(i$e,"STRONG",{});var xut=s(x1e);qcr=r(xut,"xlm"),xut.forEach(t),Ncr=r(i$e," \u2014 "),Hz=n(i$e,"A",{href:!0});var $ut=s(Hz);jcr=r($ut,"TFXLMWithLMHeadModel"),$ut.forEach(t),Dcr=r(i$e," (XLM model)"),i$e.forEach(t),Gcr=i(Ce),NT=n(Ce,"LI",{});var d$e=s(NT);$1e=n(d$e,"STRONG",{});var kut=s($1e);Ocr=r(kut,"xlnet"),kut.forEach(t),Vcr=r(d$e," \u2014 "),Uz=n(d$e,"A",{href:!0});var Sut=s(Uz);Xcr=r(Sut,"TFXLNetLMHeadModel"),Sut.forEach(t),zcr=r(d$e," (XLNet model)"),d$e.forEach(t),Ce.forEach(t),Qcr=i(cl),T(jT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),xPe=i(f),Dd=n(f,"H2",{class:!0});var Rqe=s(Dd);DT=n(Rqe,"A",{id:!0,class:!0,href:!0});var Rut=s(DT);k1e=n(Rut,"SPAN",{});var But=s(k1e);T(TL.$$.fragment,But),But.forEach(t),Rut.forEach(t),Wcr=i(Rqe),S1e=n(Rqe,"SPAN",{});var Put=s(S1e);Hcr=r(Put,"TFAutoModelForImageClassification"),Put.forEach(t),Rqe.forEach(t),$Pe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(ML.$$.fragment,fl),Ucr=i(fl),Gd=n(fl,"P",{});var uK=s(Gd);Jcr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jz=n(uK,"A",{href:!0});var Iut=s(Jz);Ycr=r(Iut,"from_pretrained()"),Iut.forEach(t),Kcr=r(uK," class method or the "),Yz=n(uK,"A",{href:!0});var qut=s(Yz);Zcr=r(qut,"from_config()"),qut.forEach(t),efr=r(uK,` class
method.`),uK.forEach(t),ofr=i(fl),EL=n(fl,"P",{});var Bqe=s(EL);rfr=r(Bqe,"This class cannot be instantiated directly using "),R1e=n(Bqe,"CODE",{});var Nut=s(R1e);tfr=r(Nut,"__init__()"),Nut.forEach(t),afr=r(Bqe," (throws an error)."),Bqe.forEach(t),nfr=i(fl),At=n(fl,"DIV",{class:!0});var kA=s(At);T(CL.$$.fragment,kA),sfr=i(kA),B1e=n(kA,"P",{});var jut=s(B1e);lfr=r(jut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jut.forEach(t),ifr=i(kA),Od=n(kA,"P",{});var _K=s(Od);dfr=r(_K,`Note:
Loading a model from its configuration file does `),P1e=n(_K,"STRONG",{});var Dut=s(P1e);cfr=r(Dut,"not"),Dut.forEach(t),ffr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(_K,"A",{href:!0});var Gut=s(Kz);mfr=r(Gut,"from_pretrained()"),Gut.forEach(t),gfr=r(_K," to load the model weights."),_K.forEach(t),hfr=i(kA),T(GT.$$.fragment,kA),kA.forEach(t),pfr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(wL.$$.fragment,ml),ufr=i(ml),I1e=n(ml,"P",{});var Out=s(I1e);_fr=r(Out,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Out.forEach(t),bfr=i(ml),Ka=n(ml,"P",{});var SA=s(Ka);vfr=r(SA,"The model class to instantiate is selected based on the "),q1e=n(SA,"CODE",{});var Vut=s(q1e);Ffr=r(Vut,"model_type"),Vut.forEach(t),Tfr=r(SA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(SA,"CODE",{});var Xut=s(N1e);Mfr=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),Efr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(SA,"CODE",{});var zut=s(j1e);Cfr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),wfr=r(SA,":"),SA.forEach(t),Afr=i(ml),Vd=n(ml,"UL",{});var bK=s(Vd);OT=n(bK,"LI",{});var c$e=s(OT);D1e=n(c$e,"STRONG",{});var Qut=s(D1e);yfr=r(Qut,"convnext"),Qut.forEach(t),Lfr=r(c$e," \u2014 "),Zz=n(c$e,"A",{href:!0});var Wut=s(Zz);xfr=r(Wut,"TFConvNextForImageClassification"),Wut.forEach(t),$fr=r(c$e," (ConvNext model)"),c$e.forEach(t),kfr=i(bK),VT=n(bK,"LI",{});var f$e=s(VT);G1e=n(f$e,"STRONG",{});var Hut=s(G1e);Sfr=r(Hut,"data2vec-vision"),Hut.forEach(t),Rfr=r(f$e," \u2014 "),eQ=n(f$e,"A",{href:!0});var Uut=s(eQ);Bfr=r(Uut,"TFData2VecVisionForImageClassification"),Uut.forEach(t),Pfr=r(f$e," (Data2VecVision model)"),f$e.forEach(t),Ifr=i(bK),XT=n(bK,"LI",{});var m$e=s(XT);O1e=n(m$e,"STRONG",{});var Jut=s(O1e);qfr=r(Jut,"vit"),Jut.forEach(t),Nfr=r(m$e," \u2014 "),oQ=n(m$e,"A",{href:!0});var Yut=s(oQ);jfr=r(Yut,"TFViTForImageClassification"),Yut.forEach(t),Dfr=r(m$e," (ViT model)"),m$e.forEach(t),bK.forEach(t),Gfr=i(ml),T(zT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),kPe=i(f),Xd=n(f,"H2",{class:!0});var Pqe=s(Xd);QT=n(Pqe,"A",{id:!0,class:!0,href:!0});var Kut=s(QT);V1e=n(Kut,"SPAN",{});var Zut=s(V1e);T(AL.$$.fragment,Zut),Zut.forEach(t),Kut.forEach(t),Ofr=i(Pqe),X1e=n(Pqe,"SPAN",{});var e_t=s(X1e);Vfr=r(e_t,"TFAutoModelForMaskedLM"),e_t.forEach(t),Pqe.forEach(t),SPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T(yL.$$.fragment,gl),Xfr=i(gl),zd=n(gl,"P",{});var vK=s(zd);zfr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rQ=n(vK,"A",{href:!0});var o_t=s(rQ);Qfr=r(o_t,"from_pretrained()"),o_t.forEach(t),Wfr=r(vK," class method or the "),tQ=n(vK,"A",{href:!0});var r_t=s(tQ);Hfr=r(r_t,"from_config()"),r_t.forEach(t),Ufr=r(vK,` class
method.`),vK.forEach(t),Jfr=i(gl),LL=n(gl,"P",{});var Iqe=s(LL);Yfr=r(Iqe,"This class cannot be instantiated directly using "),z1e=n(Iqe,"CODE",{});var t_t=s(z1e);Kfr=r(t_t,"__init__()"),t_t.forEach(t),Zfr=r(Iqe," (throws an error)."),Iqe.forEach(t),emr=i(gl),yt=n(gl,"DIV",{class:!0});var RA=s(yt);T(xL.$$.fragment,RA),omr=i(RA),Q1e=n(RA,"P",{});var a_t=s(Q1e);rmr=r(a_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a_t.forEach(t),tmr=i(RA),Qd=n(RA,"P",{});var FK=s(Qd);amr=r(FK,`Note:
Loading a model from its configuration file does `),W1e=n(FK,"STRONG",{});var n_t=s(W1e);nmr=r(n_t,"not"),n_t.forEach(t),smr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(FK,"A",{href:!0});var s_t=s(aQ);lmr=r(s_t,"from_pretrained()"),s_t.forEach(t),imr=r(FK," to load the model weights."),FK.forEach(t),dmr=i(RA),T(WT.$$.fragment,RA),RA.forEach(t),cmr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T($L.$$.fragment,hl),fmr=i(hl),H1e=n(hl,"P",{});var l_t=s(H1e);mmr=r(l_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l_t.forEach(t),gmr=i(hl),Za=n(hl,"P",{});var BA=s(Za);hmr=r(BA,"The model class to instantiate is selected based on the "),U1e=n(BA,"CODE",{});var i_t=s(U1e);pmr=r(i_t,"model_type"),i_t.forEach(t),umr=r(BA,` property of the config object (either
passed as an argument or loaded from `),J1e=n(BA,"CODE",{});var d_t=s(J1e);_mr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),bmr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(BA,"CODE",{});var c_t=s(Y1e);vmr=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),Fmr=r(BA,":"),BA.forEach(t),Tmr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);HT=n(fe,"LI",{});var g$e=s(HT);K1e=n(g$e,"STRONG",{});var f_t=s(K1e);Mmr=r(f_t,"albert"),f_t.forEach(t),Emr=r(g$e," \u2014 "),nQ=n(g$e,"A",{href:!0});var m_t=s(nQ);Cmr=r(m_t,"TFAlbertForMaskedLM"),m_t.forEach(t),wmr=r(g$e," (ALBERT model)"),g$e.forEach(t),Amr=i(fe),UT=n(fe,"LI",{});var h$e=s(UT);Z1e=n(h$e,"STRONG",{});var g_t=s(Z1e);ymr=r(g_t,"bert"),g_t.forEach(t),Lmr=r(h$e," \u2014 "),sQ=n(h$e,"A",{href:!0});var h_t=s(sQ);xmr=r(h_t,"TFBertForMaskedLM"),h_t.forEach(t),$mr=r(h$e," (BERT model)"),h$e.forEach(t),kmr=i(fe),JT=n(fe,"LI",{});var p$e=s(JT);ebe=n(p$e,"STRONG",{});var p_t=s(ebe);Smr=r(p_t,"camembert"),p_t.forEach(t),Rmr=r(p$e," \u2014 "),lQ=n(p$e,"A",{href:!0});var u_t=s(lQ);Bmr=r(u_t,"TFCamembertForMaskedLM"),u_t.forEach(t),Pmr=r(p$e," (CamemBERT model)"),p$e.forEach(t),Imr=i(fe),YT=n(fe,"LI",{});var u$e=s(YT);obe=n(u$e,"STRONG",{});var __t=s(obe);qmr=r(__t,"convbert"),__t.forEach(t),Nmr=r(u$e," \u2014 "),iQ=n(u$e,"A",{href:!0});var b_t=s(iQ);jmr=r(b_t,"TFConvBertForMaskedLM"),b_t.forEach(t),Dmr=r(u$e," (ConvBERT model)"),u$e.forEach(t),Gmr=i(fe),KT=n(fe,"LI",{});var _$e=s(KT);rbe=n(_$e,"STRONG",{});var v_t=s(rbe);Omr=r(v_t,"deberta"),v_t.forEach(t),Vmr=r(_$e," \u2014 "),dQ=n(_$e,"A",{href:!0});var F_t=s(dQ);Xmr=r(F_t,"TFDebertaForMaskedLM"),F_t.forEach(t),zmr=r(_$e," (DeBERTa model)"),_$e.forEach(t),Qmr=i(fe),ZT=n(fe,"LI",{});var b$e=s(ZT);tbe=n(b$e,"STRONG",{});var T_t=s(tbe);Wmr=r(T_t,"deberta-v2"),T_t.forEach(t),Hmr=r(b$e," \u2014 "),cQ=n(b$e,"A",{href:!0});var M_t=s(cQ);Umr=r(M_t,"TFDebertaV2ForMaskedLM"),M_t.forEach(t),Jmr=r(b$e," (DeBERTa-v2 model)"),b$e.forEach(t),Ymr=i(fe),e7=n(fe,"LI",{});var v$e=s(e7);abe=n(v$e,"STRONG",{});var E_t=s(abe);Kmr=r(E_t,"distilbert"),E_t.forEach(t),Zmr=r(v$e," \u2014 "),fQ=n(v$e,"A",{href:!0});var C_t=s(fQ);egr=r(C_t,"TFDistilBertForMaskedLM"),C_t.forEach(t),ogr=r(v$e," (DistilBERT model)"),v$e.forEach(t),rgr=i(fe),o7=n(fe,"LI",{});var F$e=s(o7);nbe=n(F$e,"STRONG",{});var w_t=s(nbe);tgr=r(w_t,"electra"),w_t.forEach(t),agr=r(F$e," \u2014 "),mQ=n(F$e,"A",{href:!0});var A_t=s(mQ);ngr=r(A_t,"TFElectraForMaskedLM"),A_t.forEach(t),sgr=r(F$e," (ELECTRA model)"),F$e.forEach(t),lgr=i(fe),r7=n(fe,"LI",{});var T$e=s(r7);sbe=n(T$e,"STRONG",{});var y_t=s(sbe);igr=r(y_t,"flaubert"),y_t.forEach(t),dgr=r(T$e," \u2014 "),gQ=n(T$e,"A",{href:!0});var L_t=s(gQ);cgr=r(L_t,"TFFlaubertWithLMHeadModel"),L_t.forEach(t),fgr=r(T$e," (FlauBERT model)"),T$e.forEach(t),mgr=i(fe),t7=n(fe,"LI",{});var M$e=s(t7);lbe=n(M$e,"STRONG",{});var x_t=s(lbe);ggr=r(x_t,"funnel"),x_t.forEach(t),hgr=r(M$e," \u2014 "),hQ=n(M$e,"A",{href:!0});var $_t=s(hQ);pgr=r($_t,"TFFunnelForMaskedLM"),$_t.forEach(t),ugr=r(M$e," (Funnel Transformer model)"),M$e.forEach(t),_gr=i(fe),a7=n(fe,"LI",{});var E$e=s(a7);ibe=n(E$e,"STRONG",{});var k_t=s(ibe);bgr=r(k_t,"layoutlm"),k_t.forEach(t),vgr=r(E$e," \u2014 "),pQ=n(E$e,"A",{href:!0});var S_t=s(pQ);Fgr=r(S_t,"TFLayoutLMForMaskedLM"),S_t.forEach(t),Tgr=r(E$e," (LayoutLM model)"),E$e.forEach(t),Mgr=i(fe),n7=n(fe,"LI",{});var C$e=s(n7);dbe=n(C$e,"STRONG",{});var R_t=s(dbe);Egr=r(R_t,"longformer"),R_t.forEach(t),Cgr=r(C$e," \u2014 "),uQ=n(C$e,"A",{href:!0});var B_t=s(uQ);wgr=r(B_t,"TFLongformerForMaskedLM"),B_t.forEach(t),Agr=r(C$e," (Longformer model)"),C$e.forEach(t),ygr=i(fe),s7=n(fe,"LI",{});var w$e=s(s7);cbe=n(w$e,"STRONG",{});var P_t=s(cbe);Lgr=r(P_t,"mobilebert"),P_t.forEach(t),xgr=r(w$e," \u2014 "),_Q=n(w$e,"A",{href:!0});var I_t=s(_Q);$gr=r(I_t,"TFMobileBertForMaskedLM"),I_t.forEach(t),kgr=r(w$e," (MobileBERT model)"),w$e.forEach(t),Sgr=i(fe),l7=n(fe,"LI",{});var A$e=s(l7);fbe=n(A$e,"STRONG",{});var q_t=s(fbe);Rgr=r(q_t,"mpnet"),q_t.forEach(t),Bgr=r(A$e," \u2014 "),bQ=n(A$e,"A",{href:!0});var N_t=s(bQ);Pgr=r(N_t,"TFMPNetForMaskedLM"),N_t.forEach(t),Igr=r(A$e," (MPNet model)"),A$e.forEach(t),qgr=i(fe),i7=n(fe,"LI",{});var y$e=s(i7);mbe=n(y$e,"STRONG",{});var j_t=s(mbe);Ngr=r(j_t,"rembert"),j_t.forEach(t),jgr=r(y$e," \u2014 "),vQ=n(y$e,"A",{href:!0});var D_t=s(vQ);Dgr=r(D_t,"TFRemBertForMaskedLM"),D_t.forEach(t),Ggr=r(y$e," (RemBERT model)"),y$e.forEach(t),Ogr=i(fe),d7=n(fe,"LI",{});var L$e=s(d7);gbe=n(L$e,"STRONG",{});var G_t=s(gbe);Vgr=r(G_t,"roberta"),G_t.forEach(t),Xgr=r(L$e," \u2014 "),FQ=n(L$e,"A",{href:!0});var O_t=s(FQ);zgr=r(O_t,"TFRobertaForMaskedLM"),O_t.forEach(t),Qgr=r(L$e," (RoBERTa model)"),L$e.forEach(t),Wgr=i(fe),c7=n(fe,"LI",{});var x$e=s(c7);hbe=n(x$e,"STRONG",{});var V_t=s(hbe);Hgr=r(V_t,"roformer"),V_t.forEach(t),Ugr=r(x$e," \u2014 "),TQ=n(x$e,"A",{href:!0});var X_t=s(TQ);Jgr=r(X_t,"TFRoFormerForMaskedLM"),X_t.forEach(t),Ygr=r(x$e," (RoFormer model)"),x$e.forEach(t),Kgr=i(fe),f7=n(fe,"LI",{});var $$e=s(f7);pbe=n($$e,"STRONG",{});var z_t=s(pbe);Zgr=r(z_t,"tapas"),z_t.forEach(t),ehr=r($$e," \u2014 "),MQ=n($$e,"A",{href:!0});var Q_t=s(MQ);ohr=r(Q_t,"TFTapasForMaskedLM"),Q_t.forEach(t),rhr=r($$e," (TAPAS model)"),$$e.forEach(t),thr=i(fe),m7=n(fe,"LI",{});var k$e=s(m7);ube=n(k$e,"STRONG",{});var W_t=s(ube);ahr=r(W_t,"xlm"),W_t.forEach(t),nhr=r(k$e," \u2014 "),EQ=n(k$e,"A",{href:!0});var H_t=s(EQ);shr=r(H_t,"TFXLMWithLMHeadModel"),H_t.forEach(t),lhr=r(k$e," (XLM model)"),k$e.forEach(t),ihr=i(fe),g7=n(fe,"LI",{});var S$e=s(g7);_be=n(S$e,"STRONG",{});var U_t=s(_be);dhr=r(U_t,"xlm-roberta"),U_t.forEach(t),chr=r(S$e," \u2014 "),CQ=n(S$e,"A",{href:!0});var J_t=s(CQ);fhr=r(J_t,"TFXLMRobertaForMaskedLM"),J_t.forEach(t),mhr=r(S$e," (XLM-RoBERTa model)"),S$e.forEach(t),fe.forEach(t),ghr=i(hl),T(h7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),RPe=i(f),Wd=n(f,"H2",{class:!0});var qqe=s(Wd);p7=n(qqe,"A",{id:!0,class:!0,href:!0});var Y_t=s(p7);bbe=n(Y_t,"SPAN",{});var K_t=s(bbe);T(kL.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),hhr=i(qqe),vbe=n(qqe,"SPAN",{});var Z_t=s(vbe);phr=r(Z_t,"TFAutoModelForSeq2SeqLM"),Z_t.forEach(t),qqe.forEach(t),BPe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(SL.$$.fragment,pl),uhr=i(pl),Hd=n(pl,"P",{});var TK=s(Hd);_hr=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wQ=n(TK,"A",{href:!0});var e1t=s(wQ);bhr=r(e1t,"from_pretrained()"),e1t.forEach(t),vhr=r(TK," class method or the "),AQ=n(TK,"A",{href:!0});var o1t=s(AQ);Fhr=r(o1t,"from_config()"),o1t.forEach(t),Thr=r(TK,` class
method.`),TK.forEach(t),Mhr=i(pl),RL=n(pl,"P",{});var Nqe=s(RL);Ehr=r(Nqe,"This class cannot be instantiated directly using "),Fbe=n(Nqe,"CODE",{});var r1t=s(Fbe);Chr=r(r1t,"__init__()"),r1t.forEach(t),whr=r(Nqe," (throws an error)."),Nqe.forEach(t),Ahr=i(pl),Lt=n(pl,"DIV",{class:!0});var PA=s(Lt);T(BL.$$.fragment,PA),yhr=i(PA),Tbe=n(PA,"P",{});var t1t=s(Tbe);Lhr=r(t1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t1t.forEach(t),xhr=i(PA),Ud=n(PA,"P",{});var MK=s(Ud);$hr=r(MK,`Note:
Loading a model from its configuration file does `),Mbe=n(MK,"STRONG",{});var a1t=s(Mbe);khr=r(a1t,"not"),a1t.forEach(t),Shr=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(MK,"A",{href:!0});var n1t=s(yQ);Rhr=r(n1t,"from_pretrained()"),n1t.forEach(t),Bhr=r(MK," to load the model weights."),MK.forEach(t),Phr=i(PA),T(u7.$$.fragment,PA),PA.forEach(t),Ihr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(PL.$$.fragment,ul),qhr=i(ul),Ebe=n(ul,"P",{});var s1t=s(Ebe);Nhr=r(s1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s1t.forEach(t),jhr=i(ul),en=n(ul,"P",{});var IA=s(en);Dhr=r(IA,"The model class to instantiate is selected based on the "),Cbe=n(IA,"CODE",{});var l1t=s(Cbe);Ghr=r(l1t,"model_type"),l1t.forEach(t),Ohr=r(IA,` property of the config object (either
passed as an argument or loaded from `),wbe=n(IA,"CODE",{});var i1t=s(wbe);Vhr=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),Xhr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(IA,"CODE",{});var d1t=s(Abe);zhr=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),Qhr=r(IA,":"),IA.forEach(t),Whr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);_7=n(Re,"LI",{});var R$e=s(_7);ybe=n(R$e,"STRONG",{});var c1t=s(ybe);Hhr=r(c1t,"bart"),c1t.forEach(t),Uhr=r(R$e," \u2014 "),LQ=n(R$e,"A",{href:!0});var f1t=s(LQ);Jhr=r(f1t,"TFBartForConditionalGeneration"),f1t.forEach(t),Yhr=r(R$e," (BART model)"),R$e.forEach(t),Khr=i(Re),b7=n(Re,"LI",{});var B$e=s(b7);Lbe=n(B$e,"STRONG",{});var m1t=s(Lbe);Zhr=r(m1t,"blenderbot"),m1t.forEach(t),epr=r(B$e," \u2014 "),xQ=n(B$e,"A",{href:!0});var g1t=s(xQ);opr=r(g1t,"TFBlenderbotForConditionalGeneration"),g1t.forEach(t),rpr=r(B$e," (Blenderbot model)"),B$e.forEach(t),tpr=i(Re),v7=n(Re,"LI",{});var P$e=s(v7);xbe=n(P$e,"STRONG",{});var h1t=s(xbe);apr=r(h1t,"blenderbot-small"),h1t.forEach(t),npr=r(P$e," \u2014 "),$Q=n(P$e,"A",{href:!0});var p1t=s($Q);spr=r(p1t,"TFBlenderbotSmallForConditionalGeneration"),p1t.forEach(t),lpr=r(P$e," (BlenderbotSmall model)"),P$e.forEach(t),ipr=i(Re),F7=n(Re,"LI",{});var I$e=s(F7);$be=n(I$e,"STRONG",{});var u1t=s($be);dpr=r(u1t,"encoder-decoder"),u1t.forEach(t),cpr=r(I$e," \u2014 "),kQ=n(I$e,"A",{href:!0});var _1t=s(kQ);fpr=r(_1t,"TFEncoderDecoderModel"),_1t.forEach(t),mpr=r(I$e," (Encoder decoder model)"),I$e.forEach(t),gpr=i(Re),T7=n(Re,"LI",{});var q$e=s(T7);kbe=n(q$e,"STRONG",{});var b1t=s(kbe);hpr=r(b1t,"led"),b1t.forEach(t),ppr=r(q$e," \u2014 "),SQ=n(q$e,"A",{href:!0});var v1t=s(SQ);upr=r(v1t,"TFLEDForConditionalGeneration"),v1t.forEach(t),_pr=r(q$e," (LED model)"),q$e.forEach(t),bpr=i(Re),M7=n(Re,"LI",{});var N$e=s(M7);Sbe=n(N$e,"STRONG",{});var F1t=s(Sbe);vpr=r(F1t,"marian"),F1t.forEach(t),Fpr=r(N$e," \u2014 "),RQ=n(N$e,"A",{href:!0});var T1t=s(RQ);Tpr=r(T1t,"TFMarianMTModel"),T1t.forEach(t),Mpr=r(N$e," (Marian model)"),N$e.forEach(t),Epr=i(Re),E7=n(Re,"LI",{});var j$e=s(E7);Rbe=n(j$e,"STRONG",{});var M1t=s(Rbe);Cpr=r(M1t,"mbart"),M1t.forEach(t),wpr=r(j$e," \u2014 "),BQ=n(j$e,"A",{href:!0});var E1t=s(BQ);Apr=r(E1t,"TFMBartForConditionalGeneration"),E1t.forEach(t),ypr=r(j$e," (mBART model)"),j$e.forEach(t),Lpr=i(Re),C7=n(Re,"LI",{});var D$e=s(C7);Bbe=n(D$e,"STRONG",{});var C1t=s(Bbe);xpr=r(C1t,"mt5"),C1t.forEach(t),$pr=r(D$e," \u2014 "),PQ=n(D$e,"A",{href:!0});var w1t=s(PQ);kpr=r(w1t,"TFMT5ForConditionalGeneration"),w1t.forEach(t),Spr=r(D$e," (mT5 model)"),D$e.forEach(t),Rpr=i(Re),w7=n(Re,"LI",{});var G$e=s(w7);Pbe=n(G$e,"STRONG",{});var A1t=s(Pbe);Bpr=r(A1t,"pegasus"),A1t.forEach(t),Ppr=r(G$e," \u2014 "),IQ=n(G$e,"A",{href:!0});var y1t=s(IQ);Ipr=r(y1t,"TFPegasusForConditionalGeneration"),y1t.forEach(t),qpr=r(G$e," (Pegasus model)"),G$e.forEach(t),Npr=i(Re),A7=n(Re,"LI",{});var O$e=s(A7);Ibe=n(O$e,"STRONG",{});var L1t=s(Ibe);jpr=r(L1t,"t5"),L1t.forEach(t),Dpr=r(O$e," \u2014 "),qQ=n(O$e,"A",{href:!0});var x1t=s(qQ);Gpr=r(x1t,"TFT5ForConditionalGeneration"),x1t.forEach(t),Opr=r(O$e," (T5 model)"),O$e.forEach(t),Re.forEach(t),Vpr=i(ul),T(y7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),PPe=i(f),Jd=n(f,"H2",{class:!0});var jqe=s(Jd);L7=n(jqe,"A",{id:!0,class:!0,href:!0});var $1t=s(L7);qbe=n($1t,"SPAN",{});var k1t=s(qbe);T(IL.$$.fragment,k1t),k1t.forEach(t),$1t.forEach(t),Xpr=i(jqe),Nbe=n(jqe,"SPAN",{});var S1t=s(Nbe);zpr=r(S1t,"TFAutoModelForSequenceClassification"),S1t.forEach(t),jqe.forEach(t),IPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(qL.$$.fragment,_l),Qpr=i(_l),Yd=n(_l,"P",{});var EK=s(Yd);Wpr=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NQ=n(EK,"A",{href:!0});var R1t=s(NQ);Hpr=r(R1t,"from_pretrained()"),R1t.forEach(t),Upr=r(EK," class method or the "),jQ=n(EK,"A",{href:!0});var B1t=s(jQ);Jpr=r(B1t,"from_config()"),B1t.forEach(t),Ypr=r(EK,` class
method.`),EK.forEach(t),Kpr=i(_l),NL=n(_l,"P",{});var Dqe=s(NL);Zpr=r(Dqe,"This class cannot be instantiated directly using "),jbe=n(Dqe,"CODE",{});var P1t=s(jbe);eur=r(P1t,"__init__()"),P1t.forEach(t),our=r(Dqe," (throws an error)."),Dqe.forEach(t),rur=i(_l),xt=n(_l,"DIV",{class:!0});var qA=s(xt);T(jL.$$.fragment,qA),tur=i(qA),Dbe=n(qA,"P",{});var I1t=s(Dbe);aur=r(I1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I1t.forEach(t),nur=i(qA),Kd=n(qA,"P",{});var CK=s(Kd);sur=r(CK,`Note:
Loading a model from its configuration file does `),Gbe=n(CK,"STRONG",{});var q1t=s(Gbe);lur=r(q1t,"not"),q1t.forEach(t),iur=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(CK,"A",{href:!0});var N1t=s(DQ);dur=r(N1t,"from_pretrained()"),N1t.forEach(t),cur=r(CK," to load the model weights."),CK.forEach(t),fur=i(qA),T(x7.$$.fragment,qA),qA.forEach(t),mur=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(DL.$$.fragment,bl),gur=i(bl),Obe=n(bl,"P",{});var j1t=s(Obe);hur=r(j1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j1t.forEach(t),pur=i(bl),on=n(bl,"P",{});var NA=s(on);uur=r(NA,"The model class to instantiate is selected based on the "),Vbe=n(NA,"CODE",{});var D1t=s(Vbe);_ur=r(D1t,"model_type"),D1t.forEach(t),bur=r(NA,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(NA,"CODE",{});var G1t=s(Xbe);vur=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),Fur=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(NA,"CODE",{});var O1t=s(zbe);Tur=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),Mur=r(NA,":"),NA.forEach(t),Eur=i(bl),Z=n(bl,"UL",{});var re=s(Z);$7=n(re,"LI",{});var V$e=s($7);Qbe=n(V$e,"STRONG",{});var V1t=s(Qbe);Cur=r(V1t,"albert"),V1t.forEach(t),wur=r(V$e," \u2014 "),GQ=n(V$e,"A",{href:!0});var X1t=s(GQ);Aur=r(X1t,"TFAlbertForSequenceClassification"),X1t.forEach(t),yur=r(V$e," (ALBERT model)"),V$e.forEach(t),Lur=i(re),k7=n(re,"LI",{});var X$e=s(k7);Wbe=n(X$e,"STRONG",{});var z1t=s(Wbe);xur=r(z1t,"bert"),z1t.forEach(t),$ur=r(X$e," \u2014 "),OQ=n(X$e,"A",{href:!0});var Q1t=s(OQ);kur=r(Q1t,"TFBertForSequenceClassification"),Q1t.forEach(t),Sur=r(X$e," (BERT model)"),X$e.forEach(t),Rur=i(re),S7=n(re,"LI",{});var z$e=s(S7);Hbe=n(z$e,"STRONG",{});var W1t=s(Hbe);Bur=r(W1t,"camembert"),W1t.forEach(t),Pur=r(z$e," \u2014 "),VQ=n(z$e,"A",{href:!0});var H1t=s(VQ);Iur=r(H1t,"TFCamembertForSequenceClassification"),H1t.forEach(t),qur=r(z$e," (CamemBERT model)"),z$e.forEach(t),Nur=i(re),R7=n(re,"LI",{});var Q$e=s(R7);Ube=n(Q$e,"STRONG",{});var U1t=s(Ube);jur=r(U1t,"convbert"),U1t.forEach(t),Dur=r(Q$e," \u2014 "),XQ=n(Q$e,"A",{href:!0});var J1t=s(XQ);Gur=r(J1t,"TFConvBertForSequenceClassification"),J1t.forEach(t),Our=r(Q$e," (ConvBERT model)"),Q$e.forEach(t),Vur=i(re),B7=n(re,"LI",{});var W$e=s(B7);Jbe=n(W$e,"STRONG",{});var Y1t=s(Jbe);Xur=r(Y1t,"ctrl"),Y1t.forEach(t),zur=r(W$e," \u2014 "),zQ=n(W$e,"A",{href:!0});var K1t=s(zQ);Qur=r(K1t,"TFCTRLForSequenceClassification"),K1t.forEach(t),Wur=r(W$e," (CTRL model)"),W$e.forEach(t),Hur=i(re),P7=n(re,"LI",{});var H$e=s(P7);Ybe=n(H$e,"STRONG",{});var Z1t=s(Ybe);Uur=r(Z1t,"deberta"),Z1t.forEach(t),Jur=r(H$e," \u2014 "),QQ=n(H$e,"A",{href:!0});var ebt=s(QQ);Yur=r(ebt,"TFDebertaForSequenceClassification"),ebt.forEach(t),Kur=r(H$e," (DeBERTa model)"),H$e.forEach(t),Zur=i(re),I7=n(re,"LI",{});var U$e=s(I7);Kbe=n(U$e,"STRONG",{});var obt=s(Kbe);e_r=r(obt,"deberta-v2"),obt.forEach(t),o_r=r(U$e," \u2014 "),WQ=n(U$e,"A",{href:!0});var rbt=s(WQ);r_r=r(rbt,"TFDebertaV2ForSequenceClassification"),rbt.forEach(t),t_r=r(U$e," (DeBERTa-v2 model)"),U$e.forEach(t),a_r=i(re),q7=n(re,"LI",{});var J$e=s(q7);Zbe=n(J$e,"STRONG",{});var tbt=s(Zbe);n_r=r(tbt,"distilbert"),tbt.forEach(t),s_r=r(J$e," \u2014 "),HQ=n(J$e,"A",{href:!0});var abt=s(HQ);l_r=r(abt,"TFDistilBertForSequenceClassification"),abt.forEach(t),i_r=r(J$e," (DistilBERT model)"),J$e.forEach(t),d_r=i(re),N7=n(re,"LI",{});var Y$e=s(N7);e2e=n(Y$e,"STRONG",{});var nbt=s(e2e);c_r=r(nbt,"electra"),nbt.forEach(t),f_r=r(Y$e," \u2014 "),UQ=n(Y$e,"A",{href:!0});var sbt=s(UQ);m_r=r(sbt,"TFElectraForSequenceClassification"),sbt.forEach(t),g_r=r(Y$e," (ELECTRA model)"),Y$e.forEach(t),h_r=i(re),j7=n(re,"LI",{});var K$e=s(j7);o2e=n(K$e,"STRONG",{});var lbt=s(o2e);p_r=r(lbt,"flaubert"),lbt.forEach(t),u_r=r(K$e," \u2014 "),JQ=n(K$e,"A",{href:!0});var ibt=s(JQ);__r=r(ibt,"TFFlaubertForSequenceClassification"),ibt.forEach(t),b_r=r(K$e," (FlauBERT model)"),K$e.forEach(t),v_r=i(re),D7=n(re,"LI",{});var Z$e=s(D7);r2e=n(Z$e,"STRONG",{});var dbt=s(r2e);F_r=r(dbt,"funnel"),dbt.forEach(t),T_r=r(Z$e," \u2014 "),YQ=n(Z$e,"A",{href:!0});var cbt=s(YQ);M_r=r(cbt,"TFFunnelForSequenceClassification"),cbt.forEach(t),E_r=r(Z$e," (Funnel Transformer model)"),Z$e.forEach(t),C_r=i(re),G7=n(re,"LI",{});var eke=s(G7);t2e=n(eke,"STRONG",{});var fbt=s(t2e);w_r=r(fbt,"gpt2"),fbt.forEach(t),A_r=r(eke," \u2014 "),KQ=n(eke,"A",{href:!0});var mbt=s(KQ);y_r=r(mbt,"TFGPT2ForSequenceClassification"),mbt.forEach(t),L_r=r(eke," (OpenAI GPT-2 model)"),eke.forEach(t),x_r=i(re),O7=n(re,"LI",{});var oke=s(O7);a2e=n(oke,"STRONG",{});var gbt=s(a2e);$_r=r(gbt,"gptj"),gbt.forEach(t),k_r=r(oke," \u2014 "),ZQ=n(oke,"A",{href:!0});var hbt=s(ZQ);S_r=r(hbt,"TFGPTJForSequenceClassification"),hbt.forEach(t),R_r=r(oke," (GPT-J model)"),oke.forEach(t),B_r=i(re),V7=n(re,"LI",{});var rke=s(V7);n2e=n(rke,"STRONG",{});var pbt=s(n2e);P_r=r(pbt,"layoutlm"),pbt.forEach(t),I_r=r(rke," \u2014 "),eW=n(rke,"A",{href:!0});var ubt=s(eW);q_r=r(ubt,"TFLayoutLMForSequenceClassification"),ubt.forEach(t),N_r=r(rke," (LayoutLM model)"),rke.forEach(t),j_r=i(re),X7=n(re,"LI",{});var tke=s(X7);s2e=n(tke,"STRONG",{});var _bt=s(s2e);D_r=r(_bt,"longformer"),_bt.forEach(t),G_r=r(tke," \u2014 "),oW=n(tke,"A",{href:!0});var bbt=s(oW);O_r=r(bbt,"TFLongformerForSequenceClassification"),bbt.forEach(t),V_r=r(tke," (Longformer model)"),tke.forEach(t),X_r=i(re),z7=n(re,"LI",{});var ake=s(z7);l2e=n(ake,"STRONG",{});var vbt=s(l2e);z_r=r(vbt,"mobilebert"),vbt.forEach(t),Q_r=r(ake," \u2014 "),rW=n(ake,"A",{href:!0});var Fbt=s(rW);W_r=r(Fbt,"TFMobileBertForSequenceClassification"),Fbt.forEach(t),H_r=r(ake," (MobileBERT model)"),ake.forEach(t),U_r=i(re),Q7=n(re,"LI",{});var nke=s(Q7);i2e=n(nke,"STRONG",{});var Tbt=s(i2e);J_r=r(Tbt,"mpnet"),Tbt.forEach(t),Y_r=r(nke," \u2014 "),tW=n(nke,"A",{href:!0});var Mbt=s(tW);K_r=r(Mbt,"TFMPNetForSequenceClassification"),Mbt.forEach(t),Z_r=r(nke," (MPNet model)"),nke.forEach(t),e1r=i(re),W7=n(re,"LI",{});var ske=s(W7);d2e=n(ske,"STRONG",{});var Ebt=s(d2e);o1r=r(Ebt,"openai-gpt"),Ebt.forEach(t),r1r=r(ske," \u2014 "),aW=n(ske,"A",{href:!0});var Cbt=s(aW);t1r=r(Cbt,"TFOpenAIGPTForSequenceClassification"),Cbt.forEach(t),a1r=r(ske," (OpenAI GPT model)"),ske.forEach(t),n1r=i(re),H7=n(re,"LI",{});var lke=s(H7);c2e=n(lke,"STRONG",{});var wbt=s(c2e);s1r=r(wbt,"rembert"),wbt.forEach(t),l1r=r(lke," \u2014 "),nW=n(lke,"A",{href:!0});var Abt=s(nW);i1r=r(Abt,"TFRemBertForSequenceClassification"),Abt.forEach(t),d1r=r(lke," (RemBERT model)"),lke.forEach(t),c1r=i(re),U7=n(re,"LI",{});var ike=s(U7);f2e=n(ike,"STRONG",{});var ybt=s(f2e);f1r=r(ybt,"roberta"),ybt.forEach(t),m1r=r(ike," \u2014 "),sW=n(ike,"A",{href:!0});var Lbt=s(sW);g1r=r(Lbt,"TFRobertaForSequenceClassification"),Lbt.forEach(t),h1r=r(ike," (RoBERTa model)"),ike.forEach(t),p1r=i(re),J7=n(re,"LI",{});var dke=s(J7);m2e=n(dke,"STRONG",{});var xbt=s(m2e);u1r=r(xbt,"roformer"),xbt.forEach(t),_1r=r(dke," \u2014 "),lW=n(dke,"A",{href:!0});var $bt=s(lW);b1r=r($bt,"TFRoFormerForSequenceClassification"),$bt.forEach(t),v1r=r(dke," (RoFormer model)"),dke.forEach(t),F1r=i(re),Y7=n(re,"LI",{});var cke=s(Y7);g2e=n(cke,"STRONG",{});var kbt=s(g2e);T1r=r(kbt,"tapas"),kbt.forEach(t),M1r=r(cke," \u2014 "),iW=n(cke,"A",{href:!0});var Sbt=s(iW);E1r=r(Sbt,"TFTapasForSequenceClassification"),Sbt.forEach(t),C1r=r(cke," (TAPAS model)"),cke.forEach(t),w1r=i(re),K7=n(re,"LI",{});var fke=s(K7);h2e=n(fke,"STRONG",{});var Rbt=s(h2e);A1r=r(Rbt,"transfo-xl"),Rbt.forEach(t),y1r=r(fke," \u2014 "),dW=n(fke,"A",{href:!0});var Bbt=s(dW);L1r=r(Bbt,"TFTransfoXLForSequenceClassification"),Bbt.forEach(t),x1r=r(fke," (Transformer-XL model)"),fke.forEach(t),$1r=i(re),Z7=n(re,"LI",{});var mke=s(Z7);p2e=n(mke,"STRONG",{});var Pbt=s(p2e);k1r=r(Pbt,"xlm"),Pbt.forEach(t),S1r=r(mke," \u2014 "),cW=n(mke,"A",{href:!0});var Ibt=s(cW);R1r=r(Ibt,"TFXLMForSequenceClassification"),Ibt.forEach(t),B1r=r(mke," (XLM model)"),mke.forEach(t),P1r=i(re),eM=n(re,"LI",{});var gke=s(eM);u2e=n(gke,"STRONG",{});var qbt=s(u2e);I1r=r(qbt,"xlm-roberta"),qbt.forEach(t),q1r=r(gke," \u2014 "),fW=n(gke,"A",{href:!0});var Nbt=s(fW);N1r=r(Nbt,"TFXLMRobertaForSequenceClassification"),Nbt.forEach(t),j1r=r(gke," (XLM-RoBERTa model)"),gke.forEach(t),D1r=i(re),oM=n(re,"LI",{});var hke=s(oM);_2e=n(hke,"STRONG",{});var jbt=s(_2e);G1r=r(jbt,"xlnet"),jbt.forEach(t),O1r=r(hke," \u2014 "),mW=n(hke,"A",{href:!0});var Dbt=s(mW);V1r=r(Dbt,"TFXLNetForSequenceClassification"),Dbt.forEach(t),X1r=r(hke," (XLNet model)"),hke.forEach(t),re.forEach(t),z1r=i(bl),T(rM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),qPe=i(f),Zd=n(f,"H2",{class:!0});var Gqe=s(Zd);tM=n(Gqe,"A",{id:!0,class:!0,href:!0});var Gbt=s(tM);b2e=n(Gbt,"SPAN",{});var Obt=s(b2e);T(GL.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),Q1r=i(Gqe),v2e=n(Gqe,"SPAN",{});var Vbt=s(v2e);W1r=r(Vbt,"TFAutoModelForMultipleChoice"),Vbt.forEach(t),Gqe.forEach(t),NPe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(OL.$$.fragment,vl),H1r=i(vl),ec=n(vl,"P",{});var wK=s(ec);U1r=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gW=n(wK,"A",{href:!0});var Xbt=s(gW);J1r=r(Xbt,"from_pretrained()"),Xbt.forEach(t),Y1r=r(wK," class method or the "),hW=n(wK,"A",{href:!0});var zbt=s(hW);K1r=r(zbt,"from_config()"),zbt.forEach(t),Z1r=r(wK,` class
method.`),wK.forEach(t),ebr=i(vl),VL=n(vl,"P",{});var Oqe=s(VL);obr=r(Oqe,"This class cannot be instantiated directly using "),F2e=n(Oqe,"CODE",{});var Qbt=s(F2e);rbr=r(Qbt,"__init__()"),Qbt.forEach(t),tbr=r(Oqe," (throws an error)."),Oqe.forEach(t),abr=i(vl),$t=n(vl,"DIV",{class:!0});var jA=s($t);T(XL.$$.fragment,jA),nbr=i(jA),T2e=n(jA,"P",{});var Wbt=s(T2e);sbr=r(Wbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wbt.forEach(t),lbr=i(jA),oc=n(jA,"P",{});var AK=s(oc);ibr=r(AK,`Note:
Loading a model from its configuration file does `),M2e=n(AK,"STRONG",{});var Hbt=s(M2e);dbr=r(Hbt,"not"),Hbt.forEach(t),cbr=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(AK,"A",{href:!0});var Ubt=s(pW);fbr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),mbr=r(AK," to load the model weights."),AK.forEach(t),gbr=i(jA),T(aM.$$.fragment,jA),jA.forEach(t),hbr=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(zL.$$.fragment,Fl),pbr=i(Fl),E2e=n(Fl,"P",{});var Jbt=s(E2e);ubr=r(Jbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jbt.forEach(t),_br=i(Fl),rn=n(Fl,"P",{});var DA=s(rn);bbr=r(DA,"The model class to instantiate is selected based on the "),C2e=n(DA,"CODE",{});var Ybt=s(C2e);vbr=r(Ybt,"model_type"),Ybt.forEach(t),Fbr=r(DA,` property of the config object (either
passed as an argument or loaded from `),w2e=n(DA,"CODE",{});var Kbt=s(w2e);Tbr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),Mbr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(DA,"CODE",{});var Zbt=s(A2e);Ebr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),Cbr=r(DA,":"),DA.forEach(t),wbr=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);nM=n(_e,"LI",{});var pke=s(nM);y2e=n(pke,"STRONG",{});var e2t=s(y2e);Abr=r(e2t,"albert"),e2t.forEach(t),ybr=r(pke," \u2014 "),uW=n(pke,"A",{href:!0});var o2t=s(uW);Lbr=r(o2t,"TFAlbertForMultipleChoice"),o2t.forEach(t),xbr=r(pke," (ALBERT model)"),pke.forEach(t),$br=i(_e),sM=n(_e,"LI",{});var uke=s(sM);L2e=n(uke,"STRONG",{});var r2t=s(L2e);kbr=r(r2t,"bert"),r2t.forEach(t),Sbr=r(uke," \u2014 "),_W=n(uke,"A",{href:!0});var t2t=s(_W);Rbr=r(t2t,"TFBertForMultipleChoice"),t2t.forEach(t),Bbr=r(uke," (BERT model)"),uke.forEach(t),Pbr=i(_e),lM=n(_e,"LI",{});var _ke=s(lM);x2e=n(_ke,"STRONG",{});var a2t=s(x2e);Ibr=r(a2t,"camembert"),a2t.forEach(t),qbr=r(_ke," \u2014 "),bW=n(_ke,"A",{href:!0});var n2t=s(bW);Nbr=r(n2t,"TFCamembertForMultipleChoice"),n2t.forEach(t),jbr=r(_ke," (CamemBERT model)"),_ke.forEach(t),Dbr=i(_e),iM=n(_e,"LI",{});var bke=s(iM);$2e=n(bke,"STRONG",{});var s2t=s($2e);Gbr=r(s2t,"convbert"),s2t.forEach(t),Obr=r(bke," \u2014 "),vW=n(bke,"A",{href:!0});var l2t=s(vW);Vbr=r(l2t,"TFConvBertForMultipleChoice"),l2t.forEach(t),Xbr=r(bke," (ConvBERT model)"),bke.forEach(t),zbr=i(_e),dM=n(_e,"LI",{});var vke=s(dM);k2e=n(vke,"STRONG",{});var i2t=s(k2e);Qbr=r(i2t,"distilbert"),i2t.forEach(t),Wbr=r(vke," \u2014 "),FW=n(vke,"A",{href:!0});var d2t=s(FW);Hbr=r(d2t,"TFDistilBertForMultipleChoice"),d2t.forEach(t),Ubr=r(vke," (DistilBERT model)"),vke.forEach(t),Jbr=i(_e),cM=n(_e,"LI",{});var Fke=s(cM);S2e=n(Fke,"STRONG",{});var c2t=s(S2e);Ybr=r(c2t,"electra"),c2t.forEach(t),Kbr=r(Fke," \u2014 "),TW=n(Fke,"A",{href:!0});var f2t=s(TW);Zbr=r(f2t,"TFElectraForMultipleChoice"),f2t.forEach(t),e2r=r(Fke," (ELECTRA model)"),Fke.forEach(t),o2r=i(_e),fM=n(_e,"LI",{});var Tke=s(fM);R2e=n(Tke,"STRONG",{});var m2t=s(R2e);r2r=r(m2t,"flaubert"),m2t.forEach(t),t2r=r(Tke," \u2014 "),MW=n(Tke,"A",{href:!0});var g2t=s(MW);a2r=r(g2t,"TFFlaubertForMultipleChoice"),g2t.forEach(t),n2r=r(Tke," (FlauBERT model)"),Tke.forEach(t),s2r=i(_e),mM=n(_e,"LI",{});var Mke=s(mM);B2e=n(Mke,"STRONG",{});var h2t=s(B2e);l2r=r(h2t,"funnel"),h2t.forEach(t),i2r=r(Mke," \u2014 "),EW=n(Mke,"A",{href:!0});var p2t=s(EW);d2r=r(p2t,"TFFunnelForMultipleChoice"),p2t.forEach(t),c2r=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),f2r=i(_e),gM=n(_e,"LI",{});var Eke=s(gM);P2e=n(Eke,"STRONG",{});var u2t=s(P2e);m2r=r(u2t,"longformer"),u2t.forEach(t),g2r=r(Eke," \u2014 "),CW=n(Eke,"A",{href:!0});var _2t=s(CW);h2r=r(_2t,"TFLongformerForMultipleChoice"),_2t.forEach(t),p2r=r(Eke," (Longformer model)"),Eke.forEach(t),u2r=i(_e),hM=n(_e,"LI",{});var Cke=s(hM);I2e=n(Cke,"STRONG",{});var b2t=s(I2e);_2r=r(b2t,"mobilebert"),b2t.forEach(t),b2r=r(Cke," \u2014 "),wW=n(Cke,"A",{href:!0});var v2t=s(wW);v2r=r(v2t,"TFMobileBertForMultipleChoice"),v2t.forEach(t),F2r=r(Cke," (MobileBERT model)"),Cke.forEach(t),T2r=i(_e),pM=n(_e,"LI",{});var wke=s(pM);q2e=n(wke,"STRONG",{});var F2t=s(q2e);M2r=r(F2t,"mpnet"),F2t.forEach(t),E2r=r(wke," \u2014 "),AW=n(wke,"A",{href:!0});var T2t=s(AW);C2r=r(T2t,"TFMPNetForMultipleChoice"),T2t.forEach(t),w2r=r(wke," (MPNet model)"),wke.forEach(t),A2r=i(_e),uM=n(_e,"LI",{});var Ake=s(uM);N2e=n(Ake,"STRONG",{});var M2t=s(N2e);y2r=r(M2t,"rembert"),M2t.forEach(t),L2r=r(Ake," \u2014 "),yW=n(Ake,"A",{href:!0});var E2t=s(yW);x2r=r(E2t,"TFRemBertForMultipleChoice"),E2t.forEach(t),$2r=r(Ake," (RemBERT model)"),Ake.forEach(t),k2r=i(_e),_M=n(_e,"LI",{});var yke=s(_M);j2e=n(yke,"STRONG",{});var C2t=s(j2e);S2r=r(C2t,"roberta"),C2t.forEach(t),R2r=r(yke," \u2014 "),LW=n(yke,"A",{href:!0});var w2t=s(LW);B2r=r(w2t,"TFRobertaForMultipleChoice"),w2t.forEach(t),P2r=r(yke," (RoBERTa model)"),yke.forEach(t),I2r=i(_e),bM=n(_e,"LI",{});var Lke=s(bM);D2e=n(Lke,"STRONG",{});var A2t=s(D2e);q2r=r(A2t,"roformer"),A2t.forEach(t),N2r=r(Lke," \u2014 "),xW=n(Lke,"A",{href:!0});var y2t=s(xW);j2r=r(y2t,"TFRoFormerForMultipleChoice"),y2t.forEach(t),D2r=r(Lke," (RoFormer model)"),Lke.forEach(t),G2r=i(_e),vM=n(_e,"LI",{});var xke=s(vM);G2e=n(xke,"STRONG",{});var L2t=s(G2e);O2r=r(L2t,"xlm"),L2t.forEach(t),V2r=r(xke," \u2014 "),$W=n(xke,"A",{href:!0});var x2t=s($W);X2r=r(x2t,"TFXLMForMultipleChoice"),x2t.forEach(t),z2r=r(xke," (XLM model)"),xke.forEach(t),Q2r=i(_e),FM=n(_e,"LI",{});var $ke=s(FM);O2e=n($ke,"STRONG",{});var $2t=s(O2e);W2r=r($2t,"xlm-roberta"),$2t.forEach(t),H2r=r($ke," \u2014 "),kW=n($ke,"A",{href:!0});var k2t=s(kW);U2r=r(k2t,"TFXLMRobertaForMultipleChoice"),k2t.forEach(t),J2r=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),Y2r=i(_e),TM=n(_e,"LI",{});var kke=s(TM);V2e=n(kke,"STRONG",{});var S2t=s(V2e);K2r=r(S2t,"xlnet"),S2t.forEach(t),Z2r=r(kke," \u2014 "),SW=n(kke,"A",{href:!0});var R2t=s(SW);e5r=r(R2t,"TFXLNetForMultipleChoice"),R2t.forEach(t),o5r=r(kke," (XLNet model)"),kke.forEach(t),_e.forEach(t),r5r=i(Fl),T(MM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),jPe=i(f),rc=n(f,"H2",{class:!0});var Vqe=s(rc);EM=n(Vqe,"A",{id:!0,class:!0,href:!0});var B2t=s(EM);X2e=n(B2t,"SPAN",{});var P2t=s(X2e);T(QL.$$.fragment,P2t),P2t.forEach(t),B2t.forEach(t),t5r=i(Vqe),z2e=n(Vqe,"SPAN",{});var I2t=s(z2e);a5r=r(I2t,"TFAutoModelForTableQuestionAnswering"),I2t.forEach(t),Vqe.forEach(t),DPe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(WL.$$.fragment,Tl),n5r=i(Tl),tc=n(Tl,"P",{});var yK=s(tc);s5r=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RW=n(yK,"A",{href:!0});var q2t=s(RW);l5r=r(q2t,"from_pretrained()"),q2t.forEach(t),i5r=r(yK," class method or the "),BW=n(yK,"A",{href:!0});var N2t=s(BW);d5r=r(N2t,"from_config()"),N2t.forEach(t),c5r=r(yK,` class
method.`),yK.forEach(t),f5r=i(Tl),HL=n(Tl,"P",{});var Xqe=s(HL);m5r=r(Xqe,"This class cannot be instantiated directly using "),Q2e=n(Xqe,"CODE",{});var j2t=s(Q2e);g5r=r(j2t,"__init__()"),j2t.forEach(t),h5r=r(Xqe," (throws an error)."),Xqe.forEach(t),p5r=i(Tl),kt=n(Tl,"DIV",{class:!0});var GA=s(kt);T(UL.$$.fragment,GA),u5r=i(GA),W2e=n(GA,"P",{});var D2t=s(W2e);_5r=r(D2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D2t.forEach(t),b5r=i(GA),ac=n(GA,"P",{});var LK=s(ac);v5r=r(LK,`Note:
Loading a model from its configuration file does `),H2e=n(LK,"STRONG",{});var G2t=s(H2e);F5r=r(G2t,"not"),G2t.forEach(t),T5r=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(LK,"A",{href:!0});var O2t=s(PW);M5r=r(O2t,"from_pretrained()"),O2t.forEach(t),E5r=r(LK," to load the model weights."),LK.forEach(t),C5r=i(GA),T(CM.$$.fragment,GA),GA.forEach(t),w5r=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(JL.$$.fragment,Ml),A5r=i(Ml),U2e=n(Ml,"P",{});var V2t=s(U2e);y5r=r(V2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),V2t.forEach(t),L5r=i(Ml),tn=n(Ml,"P",{});var OA=s(tn);x5r=r(OA,"The model class to instantiate is selected based on the "),J2e=n(OA,"CODE",{});var X2t=s(J2e);$5r=r(X2t,"model_type"),X2t.forEach(t),k5r=r(OA,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(OA,"CODE",{});var z2t=s(Y2e);S5r=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),R5r=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(OA,"CODE",{});var Q2t=s(K2e);B5r=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),P5r=r(OA,":"),OA.forEach(t),I5r=i(Ml),Z2e=n(Ml,"UL",{});var W2t=s(Z2e);wM=n(W2t,"LI",{});var Ske=s(wM);e5e=n(Ske,"STRONG",{});var H2t=s(e5e);q5r=r(H2t,"tapas"),H2t.forEach(t),N5r=r(Ske," \u2014 "),IW=n(Ske,"A",{href:!0});var U2t=s(IW);j5r=r(U2t,"TFTapasForQuestionAnswering"),U2t.forEach(t),D5r=r(Ske," (TAPAS model)"),Ske.forEach(t),W2t.forEach(t),G5r=i(Ml),T(AM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),GPe=i(f),nc=n(f,"H2",{class:!0});var zqe=s(nc);yM=n(zqe,"A",{id:!0,class:!0,href:!0});var J2t=s(yM);o5e=n(J2t,"SPAN",{});var Y2t=s(o5e);T(YL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),O5r=i(zqe),r5e=n(zqe,"SPAN",{});var K2t=s(r5e);V5r=r(K2t,"TFAutoModelForTokenClassification"),K2t.forEach(t),zqe.forEach(t),OPe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(KL.$$.fragment,El),X5r=i(El),sc=n(El,"P",{});var xK=s(sc);z5r=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qW=n(xK,"A",{href:!0});var Z2t=s(qW);Q5r=r(Z2t,"from_pretrained()"),Z2t.forEach(t),W5r=r(xK," class method or the "),NW=n(xK,"A",{href:!0});var e5t=s(NW);H5r=r(e5t,"from_config()"),e5t.forEach(t),U5r=r(xK,` class
method.`),xK.forEach(t),J5r=i(El),ZL=n(El,"P",{});var Qqe=s(ZL);Y5r=r(Qqe,"This class cannot be instantiated directly using "),t5e=n(Qqe,"CODE",{});var o5t=s(t5e);K5r=r(o5t,"__init__()"),o5t.forEach(t),Z5r=r(Qqe," (throws an error)."),Qqe.forEach(t),e3r=i(El),St=n(El,"DIV",{class:!0});var VA=s(St);T(e8.$$.fragment,VA),o3r=i(VA),a5e=n(VA,"P",{});var r5t=s(a5e);r3r=r(r5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r5t.forEach(t),t3r=i(VA),lc=n(VA,"P",{});var $K=s(lc);a3r=r($K,`Note:
Loading a model from its configuration file does `),n5e=n($K,"STRONG",{});var t5t=s(n5e);n3r=r(t5t,"not"),t5t.forEach(t),s3r=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n($K,"A",{href:!0});var a5t=s(jW);l3r=r(a5t,"from_pretrained()"),a5t.forEach(t),i3r=r($K," to load the model weights."),$K.forEach(t),d3r=i(VA),T(LM.$$.fragment,VA),VA.forEach(t),c3r=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(o8.$$.fragment,Cl),f3r=i(Cl),s5e=n(Cl,"P",{});var n5t=s(s5e);m3r=r(n5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n5t.forEach(t),g3r=i(Cl),an=n(Cl,"P",{});var XA=s(an);h3r=r(XA,"The model class to instantiate is selected based on the "),l5e=n(XA,"CODE",{});var s5t=s(l5e);p3r=r(s5t,"model_type"),s5t.forEach(t),u3r=r(XA,` property of the config object (either
passed as an argument or loaded from `),i5e=n(XA,"CODE",{});var l5t=s(i5e);_3r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),b3r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(XA,"CODE",{});var i5t=s(d5e);v3r=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),F3r=r(XA,":"),XA.forEach(t),T3r=i(Cl),de=n(Cl,"UL",{});var me=s(de);xM=n(me,"LI",{});var Rke=s(xM);c5e=n(Rke,"STRONG",{});var d5t=s(c5e);M3r=r(d5t,"albert"),d5t.forEach(t),E3r=r(Rke," \u2014 "),DW=n(Rke,"A",{href:!0});var c5t=s(DW);C3r=r(c5t,"TFAlbertForTokenClassification"),c5t.forEach(t),w3r=r(Rke," (ALBERT model)"),Rke.forEach(t),A3r=i(me),$M=n(me,"LI",{});var Bke=s($M);f5e=n(Bke,"STRONG",{});var f5t=s(f5e);y3r=r(f5t,"bert"),f5t.forEach(t),L3r=r(Bke," \u2014 "),GW=n(Bke,"A",{href:!0});var m5t=s(GW);x3r=r(m5t,"TFBertForTokenClassification"),m5t.forEach(t),$3r=r(Bke," (BERT model)"),Bke.forEach(t),k3r=i(me),kM=n(me,"LI",{});var Pke=s(kM);m5e=n(Pke,"STRONG",{});var g5t=s(m5e);S3r=r(g5t,"camembert"),g5t.forEach(t),R3r=r(Pke," \u2014 "),OW=n(Pke,"A",{href:!0});var h5t=s(OW);B3r=r(h5t,"TFCamembertForTokenClassification"),h5t.forEach(t),P3r=r(Pke," (CamemBERT model)"),Pke.forEach(t),I3r=i(me),SM=n(me,"LI",{});var Ike=s(SM);g5e=n(Ike,"STRONG",{});var p5t=s(g5e);q3r=r(p5t,"convbert"),p5t.forEach(t),N3r=r(Ike," \u2014 "),VW=n(Ike,"A",{href:!0});var u5t=s(VW);j3r=r(u5t,"TFConvBertForTokenClassification"),u5t.forEach(t),D3r=r(Ike," (ConvBERT model)"),Ike.forEach(t),G3r=i(me),RM=n(me,"LI",{});var qke=s(RM);h5e=n(qke,"STRONG",{});var _5t=s(h5e);O3r=r(_5t,"deberta"),_5t.forEach(t),V3r=r(qke," \u2014 "),XW=n(qke,"A",{href:!0});var b5t=s(XW);X3r=r(b5t,"TFDebertaForTokenClassification"),b5t.forEach(t),z3r=r(qke," (DeBERTa model)"),qke.forEach(t),Q3r=i(me),BM=n(me,"LI",{});var Nke=s(BM);p5e=n(Nke,"STRONG",{});var v5t=s(p5e);W3r=r(v5t,"deberta-v2"),v5t.forEach(t),H3r=r(Nke," \u2014 "),zW=n(Nke,"A",{href:!0});var F5t=s(zW);U3r=r(F5t,"TFDebertaV2ForTokenClassification"),F5t.forEach(t),J3r=r(Nke," (DeBERTa-v2 model)"),Nke.forEach(t),Y3r=i(me),PM=n(me,"LI",{});var jke=s(PM);u5e=n(jke,"STRONG",{});var T5t=s(u5e);K3r=r(T5t,"distilbert"),T5t.forEach(t),Z3r=r(jke," \u2014 "),QW=n(jke,"A",{href:!0});var M5t=s(QW);evr=r(M5t,"TFDistilBertForTokenClassification"),M5t.forEach(t),ovr=r(jke," (DistilBERT model)"),jke.forEach(t),rvr=i(me),IM=n(me,"LI",{});var Dke=s(IM);_5e=n(Dke,"STRONG",{});var E5t=s(_5e);tvr=r(E5t,"electra"),E5t.forEach(t),avr=r(Dke," \u2014 "),WW=n(Dke,"A",{href:!0});var C5t=s(WW);nvr=r(C5t,"TFElectraForTokenClassification"),C5t.forEach(t),svr=r(Dke," (ELECTRA model)"),Dke.forEach(t),lvr=i(me),qM=n(me,"LI",{});var Gke=s(qM);b5e=n(Gke,"STRONG",{});var w5t=s(b5e);ivr=r(w5t,"flaubert"),w5t.forEach(t),dvr=r(Gke," \u2014 "),HW=n(Gke,"A",{href:!0});var A5t=s(HW);cvr=r(A5t,"TFFlaubertForTokenClassification"),A5t.forEach(t),fvr=r(Gke," (FlauBERT model)"),Gke.forEach(t),mvr=i(me),NM=n(me,"LI",{});var Oke=s(NM);v5e=n(Oke,"STRONG",{});var y5t=s(v5e);gvr=r(y5t,"funnel"),y5t.forEach(t),hvr=r(Oke," \u2014 "),UW=n(Oke,"A",{href:!0});var L5t=s(UW);pvr=r(L5t,"TFFunnelForTokenClassification"),L5t.forEach(t),uvr=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),_vr=i(me),jM=n(me,"LI",{});var Vke=s(jM);F5e=n(Vke,"STRONG",{});var x5t=s(F5e);bvr=r(x5t,"layoutlm"),x5t.forEach(t),vvr=r(Vke," \u2014 "),JW=n(Vke,"A",{href:!0});var $5t=s(JW);Fvr=r($5t,"TFLayoutLMForTokenClassification"),$5t.forEach(t),Tvr=r(Vke," (LayoutLM model)"),Vke.forEach(t),Mvr=i(me),DM=n(me,"LI",{});var Xke=s(DM);T5e=n(Xke,"STRONG",{});var k5t=s(T5e);Evr=r(k5t,"longformer"),k5t.forEach(t),Cvr=r(Xke," \u2014 "),YW=n(Xke,"A",{href:!0});var S5t=s(YW);wvr=r(S5t,"TFLongformerForTokenClassification"),S5t.forEach(t),Avr=r(Xke," (Longformer model)"),Xke.forEach(t),yvr=i(me),GM=n(me,"LI",{});var zke=s(GM);M5e=n(zke,"STRONG",{});var R5t=s(M5e);Lvr=r(R5t,"mobilebert"),R5t.forEach(t),xvr=r(zke," \u2014 "),KW=n(zke,"A",{href:!0});var B5t=s(KW);$vr=r(B5t,"TFMobileBertForTokenClassification"),B5t.forEach(t),kvr=r(zke," (MobileBERT model)"),zke.forEach(t),Svr=i(me),OM=n(me,"LI",{});var Qke=s(OM);E5e=n(Qke,"STRONG",{});var P5t=s(E5e);Rvr=r(P5t,"mpnet"),P5t.forEach(t),Bvr=r(Qke," \u2014 "),ZW=n(Qke,"A",{href:!0});var I5t=s(ZW);Pvr=r(I5t,"TFMPNetForTokenClassification"),I5t.forEach(t),Ivr=r(Qke," (MPNet model)"),Qke.forEach(t),qvr=i(me),VM=n(me,"LI",{});var Wke=s(VM);C5e=n(Wke,"STRONG",{});var q5t=s(C5e);Nvr=r(q5t,"rembert"),q5t.forEach(t),jvr=r(Wke," \u2014 "),eH=n(Wke,"A",{href:!0});var N5t=s(eH);Dvr=r(N5t,"TFRemBertForTokenClassification"),N5t.forEach(t),Gvr=r(Wke," (RemBERT model)"),Wke.forEach(t),Ovr=i(me),XM=n(me,"LI",{});var Hke=s(XM);w5e=n(Hke,"STRONG",{});var j5t=s(w5e);Vvr=r(j5t,"roberta"),j5t.forEach(t),Xvr=r(Hke," \u2014 "),oH=n(Hke,"A",{href:!0});var D5t=s(oH);zvr=r(D5t,"TFRobertaForTokenClassification"),D5t.forEach(t),Qvr=r(Hke," (RoBERTa model)"),Hke.forEach(t),Wvr=i(me),zM=n(me,"LI",{});var Uke=s(zM);A5e=n(Uke,"STRONG",{});var G5t=s(A5e);Hvr=r(G5t,"roformer"),G5t.forEach(t),Uvr=r(Uke," \u2014 "),rH=n(Uke,"A",{href:!0});var O5t=s(rH);Jvr=r(O5t,"TFRoFormerForTokenClassification"),O5t.forEach(t),Yvr=r(Uke," (RoFormer model)"),Uke.forEach(t),Kvr=i(me),QM=n(me,"LI",{});var Jke=s(QM);y5e=n(Jke,"STRONG",{});var V5t=s(y5e);Zvr=r(V5t,"xlm"),V5t.forEach(t),eFr=r(Jke," \u2014 "),tH=n(Jke,"A",{href:!0});var X5t=s(tH);oFr=r(X5t,"TFXLMForTokenClassification"),X5t.forEach(t),rFr=r(Jke," (XLM model)"),Jke.forEach(t),tFr=i(me),WM=n(me,"LI",{});var Yke=s(WM);L5e=n(Yke,"STRONG",{});var z5t=s(L5e);aFr=r(z5t,"xlm-roberta"),z5t.forEach(t),nFr=r(Yke," \u2014 "),aH=n(Yke,"A",{href:!0});var Q5t=s(aH);sFr=r(Q5t,"TFXLMRobertaForTokenClassification"),Q5t.forEach(t),lFr=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),iFr=i(me),HM=n(me,"LI",{});var Kke=s(HM);x5e=n(Kke,"STRONG",{});var W5t=s(x5e);dFr=r(W5t,"xlnet"),W5t.forEach(t),cFr=r(Kke," \u2014 "),nH=n(Kke,"A",{href:!0});var H5t=s(nH);fFr=r(H5t,"TFXLNetForTokenClassification"),H5t.forEach(t),mFr=r(Kke," (XLNet model)"),Kke.forEach(t),me.forEach(t),gFr=i(Cl),T(UM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),VPe=i(f),ic=n(f,"H2",{class:!0});var Wqe=s(ic);JM=n(Wqe,"A",{id:!0,class:!0,href:!0});var U5t=s(JM);$5e=n(U5t,"SPAN",{});var J5t=s($5e);T(r8.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),hFr=i(Wqe),k5e=n(Wqe,"SPAN",{});var Y5t=s(k5e);pFr=r(Y5t,"TFAutoModelForQuestionAnswering"),Y5t.forEach(t),Wqe.forEach(t),XPe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(t8.$$.fragment,wl),uFr=i(wl),dc=n(wl,"P",{});var kK=s(dc);_Fr=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=n(kK,"A",{href:!0});var K5t=s(sH);bFr=r(K5t,"from_pretrained()"),K5t.forEach(t),vFr=r(kK," class method or the "),lH=n(kK,"A",{href:!0});var Z5t=s(lH);FFr=r(Z5t,"from_config()"),Z5t.forEach(t),TFr=r(kK,` class
method.`),kK.forEach(t),MFr=i(wl),a8=n(wl,"P",{});var Hqe=s(a8);EFr=r(Hqe,"This class cannot be instantiated directly using "),S5e=n(Hqe,"CODE",{});var e3t=s(S5e);CFr=r(e3t,"__init__()"),e3t.forEach(t),wFr=r(Hqe," (throws an error)."),Hqe.forEach(t),AFr=i(wl),Rt=n(wl,"DIV",{class:!0});var zA=s(Rt);T(n8.$$.fragment,zA),yFr=i(zA),R5e=n(zA,"P",{});var o3t=s(R5e);LFr=r(o3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o3t.forEach(t),xFr=i(zA),cc=n(zA,"P",{});var SK=s(cc);$Fr=r(SK,`Note:
Loading a model from its configuration file does `),B5e=n(SK,"STRONG",{});var r3t=s(B5e);kFr=r(r3t,"not"),r3t.forEach(t),SFr=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(SK,"A",{href:!0});var t3t=s(iH);RFr=r(t3t,"from_pretrained()"),t3t.forEach(t),BFr=r(SK," to load the model weights."),SK.forEach(t),PFr=i(zA),T(YM.$$.fragment,zA),zA.forEach(t),IFr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(s8.$$.fragment,Al),qFr=i(Al),P5e=n(Al,"P",{});var a3t=s(P5e);NFr=r(a3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a3t.forEach(t),jFr=i(Al),nn=n(Al,"P",{});var QA=s(nn);DFr=r(QA,"The model class to instantiate is selected based on the "),I5e=n(QA,"CODE",{});var n3t=s(I5e);GFr=r(n3t,"model_type"),n3t.forEach(t),OFr=r(QA,` property of the config object (either
passed as an argument or loaded from `),q5e=n(QA,"CODE",{});var s3t=s(q5e);VFr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),XFr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(QA,"CODE",{});var l3t=s(N5e);zFr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),QFr=r(QA,":"),QA.forEach(t),WFr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);KM=n(ge,"LI",{});var Zke=s(KM);j5e=n(Zke,"STRONG",{});var i3t=s(j5e);HFr=r(i3t,"albert"),i3t.forEach(t),UFr=r(Zke," \u2014 "),dH=n(Zke,"A",{href:!0});var d3t=s(dH);JFr=r(d3t,"TFAlbertForQuestionAnswering"),d3t.forEach(t),YFr=r(Zke," (ALBERT model)"),Zke.forEach(t),KFr=i(ge),ZM=n(ge,"LI",{});var eSe=s(ZM);D5e=n(eSe,"STRONG",{});var c3t=s(D5e);ZFr=r(c3t,"bert"),c3t.forEach(t),eTr=r(eSe," \u2014 "),cH=n(eSe,"A",{href:!0});var f3t=s(cH);oTr=r(f3t,"TFBertForQuestionAnswering"),f3t.forEach(t),rTr=r(eSe," (BERT model)"),eSe.forEach(t),tTr=i(ge),e4=n(ge,"LI",{});var oSe=s(e4);G5e=n(oSe,"STRONG",{});var m3t=s(G5e);aTr=r(m3t,"camembert"),m3t.forEach(t),nTr=r(oSe," \u2014 "),fH=n(oSe,"A",{href:!0});var g3t=s(fH);sTr=r(g3t,"TFCamembertForQuestionAnswering"),g3t.forEach(t),lTr=r(oSe," (CamemBERT model)"),oSe.forEach(t),iTr=i(ge),o4=n(ge,"LI",{});var rSe=s(o4);O5e=n(rSe,"STRONG",{});var h3t=s(O5e);dTr=r(h3t,"convbert"),h3t.forEach(t),cTr=r(rSe," \u2014 "),mH=n(rSe,"A",{href:!0});var p3t=s(mH);fTr=r(p3t,"TFConvBertForQuestionAnswering"),p3t.forEach(t),mTr=r(rSe," (ConvBERT model)"),rSe.forEach(t),gTr=i(ge),r4=n(ge,"LI",{});var tSe=s(r4);V5e=n(tSe,"STRONG",{});var u3t=s(V5e);hTr=r(u3t,"deberta"),u3t.forEach(t),pTr=r(tSe," \u2014 "),gH=n(tSe,"A",{href:!0});var _3t=s(gH);uTr=r(_3t,"TFDebertaForQuestionAnswering"),_3t.forEach(t),_Tr=r(tSe," (DeBERTa model)"),tSe.forEach(t),bTr=i(ge),t4=n(ge,"LI",{});var aSe=s(t4);X5e=n(aSe,"STRONG",{});var b3t=s(X5e);vTr=r(b3t,"deberta-v2"),b3t.forEach(t),FTr=r(aSe," \u2014 "),hH=n(aSe,"A",{href:!0});var v3t=s(hH);TTr=r(v3t,"TFDebertaV2ForQuestionAnswering"),v3t.forEach(t),MTr=r(aSe," (DeBERTa-v2 model)"),aSe.forEach(t),ETr=i(ge),a4=n(ge,"LI",{});var nSe=s(a4);z5e=n(nSe,"STRONG",{});var F3t=s(z5e);CTr=r(F3t,"distilbert"),F3t.forEach(t),wTr=r(nSe," \u2014 "),pH=n(nSe,"A",{href:!0});var T3t=s(pH);ATr=r(T3t,"TFDistilBertForQuestionAnswering"),T3t.forEach(t),yTr=r(nSe," (DistilBERT model)"),nSe.forEach(t),LTr=i(ge),n4=n(ge,"LI",{});var sSe=s(n4);Q5e=n(sSe,"STRONG",{});var M3t=s(Q5e);xTr=r(M3t,"electra"),M3t.forEach(t),$Tr=r(sSe," \u2014 "),uH=n(sSe,"A",{href:!0});var E3t=s(uH);kTr=r(E3t,"TFElectraForQuestionAnswering"),E3t.forEach(t),STr=r(sSe," (ELECTRA model)"),sSe.forEach(t),RTr=i(ge),s4=n(ge,"LI",{});var lSe=s(s4);W5e=n(lSe,"STRONG",{});var C3t=s(W5e);BTr=r(C3t,"flaubert"),C3t.forEach(t),PTr=r(lSe," \u2014 "),_H=n(lSe,"A",{href:!0});var w3t=s(_H);ITr=r(w3t,"TFFlaubertForQuestionAnsweringSimple"),w3t.forEach(t),qTr=r(lSe," (FlauBERT model)"),lSe.forEach(t),NTr=i(ge),l4=n(ge,"LI",{});var iSe=s(l4);H5e=n(iSe,"STRONG",{});var A3t=s(H5e);jTr=r(A3t,"funnel"),A3t.forEach(t),DTr=r(iSe," \u2014 "),bH=n(iSe,"A",{href:!0});var y3t=s(bH);GTr=r(y3t,"TFFunnelForQuestionAnswering"),y3t.forEach(t),OTr=r(iSe," (Funnel Transformer model)"),iSe.forEach(t),VTr=i(ge),i4=n(ge,"LI",{});var dSe=s(i4);U5e=n(dSe,"STRONG",{});var L3t=s(U5e);XTr=r(L3t,"gptj"),L3t.forEach(t),zTr=r(dSe," \u2014 "),vH=n(dSe,"A",{href:!0});var x3t=s(vH);QTr=r(x3t,"TFGPTJForQuestionAnswering"),x3t.forEach(t),WTr=r(dSe," (GPT-J model)"),dSe.forEach(t),HTr=i(ge),d4=n(ge,"LI",{});var cSe=s(d4);J5e=n(cSe,"STRONG",{});var $3t=s(J5e);UTr=r($3t,"longformer"),$3t.forEach(t),JTr=r(cSe," \u2014 "),FH=n(cSe,"A",{href:!0});var k3t=s(FH);YTr=r(k3t,"TFLongformerForQuestionAnswering"),k3t.forEach(t),KTr=r(cSe," (Longformer model)"),cSe.forEach(t),ZTr=i(ge),c4=n(ge,"LI",{});var fSe=s(c4);Y5e=n(fSe,"STRONG",{});var S3t=s(Y5e);e7r=r(S3t,"mobilebert"),S3t.forEach(t),o7r=r(fSe," \u2014 "),TH=n(fSe,"A",{href:!0});var R3t=s(TH);r7r=r(R3t,"TFMobileBertForQuestionAnswering"),R3t.forEach(t),t7r=r(fSe," (MobileBERT model)"),fSe.forEach(t),a7r=i(ge),f4=n(ge,"LI",{});var mSe=s(f4);K5e=n(mSe,"STRONG",{});var B3t=s(K5e);n7r=r(B3t,"mpnet"),B3t.forEach(t),s7r=r(mSe," \u2014 "),MH=n(mSe,"A",{href:!0});var P3t=s(MH);l7r=r(P3t,"TFMPNetForQuestionAnswering"),P3t.forEach(t),i7r=r(mSe," (MPNet model)"),mSe.forEach(t),d7r=i(ge),m4=n(ge,"LI",{});var gSe=s(m4);Z5e=n(gSe,"STRONG",{});var I3t=s(Z5e);c7r=r(I3t,"rembert"),I3t.forEach(t),f7r=r(gSe," \u2014 "),EH=n(gSe,"A",{href:!0});var q3t=s(EH);m7r=r(q3t,"TFRemBertForQuestionAnswering"),q3t.forEach(t),g7r=r(gSe," (RemBERT model)"),gSe.forEach(t),h7r=i(ge),g4=n(ge,"LI",{});var hSe=s(g4);e3e=n(hSe,"STRONG",{});var N3t=s(e3e);p7r=r(N3t,"roberta"),N3t.forEach(t),u7r=r(hSe," \u2014 "),CH=n(hSe,"A",{href:!0});var j3t=s(CH);_7r=r(j3t,"TFRobertaForQuestionAnswering"),j3t.forEach(t),b7r=r(hSe," (RoBERTa model)"),hSe.forEach(t),v7r=i(ge),h4=n(ge,"LI",{});var pSe=s(h4);o3e=n(pSe,"STRONG",{});var D3t=s(o3e);F7r=r(D3t,"roformer"),D3t.forEach(t),T7r=r(pSe," \u2014 "),wH=n(pSe,"A",{href:!0});var G3t=s(wH);M7r=r(G3t,"TFRoFormerForQuestionAnswering"),G3t.forEach(t),E7r=r(pSe," (RoFormer model)"),pSe.forEach(t),C7r=i(ge),p4=n(ge,"LI",{});var uSe=s(p4);r3e=n(uSe,"STRONG",{});var O3t=s(r3e);w7r=r(O3t,"xlm"),O3t.forEach(t),A7r=r(uSe," \u2014 "),AH=n(uSe,"A",{href:!0});var V3t=s(AH);y7r=r(V3t,"TFXLMForQuestionAnsweringSimple"),V3t.forEach(t),L7r=r(uSe," (XLM model)"),uSe.forEach(t),x7r=i(ge),u4=n(ge,"LI",{});var _Se=s(u4);t3e=n(_Se,"STRONG",{});var X3t=s(t3e);$7r=r(X3t,"xlm-roberta"),X3t.forEach(t),k7r=r(_Se," \u2014 "),yH=n(_Se,"A",{href:!0});var z3t=s(yH);S7r=r(z3t,"TFXLMRobertaForQuestionAnswering"),z3t.forEach(t),R7r=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),B7r=i(ge),_4=n(ge,"LI",{});var bSe=s(_4);a3e=n(bSe,"STRONG",{});var Q3t=s(a3e);P7r=r(Q3t,"xlnet"),Q3t.forEach(t),I7r=r(bSe," \u2014 "),LH=n(bSe,"A",{href:!0});var W3t=s(LH);q7r=r(W3t,"TFXLNetForQuestionAnsweringSimple"),W3t.forEach(t),N7r=r(bSe," (XLNet model)"),bSe.forEach(t),ge.forEach(t),j7r=i(Al),T(b4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),zPe=i(f),fc=n(f,"H2",{class:!0});var Uqe=s(fc);v4=n(Uqe,"A",{id:!0,class:!0,href:!0});var H3t=s(v4);n3e=n(H3t,"SPAN",{});var U3t=s(n3e);T(l8.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),D7r=i(Uqe),s3e=n(Uqe,"SPAN",{});var J3t=s(s3e);G7r=r(J3t,"TFAutoModelForVision2Seq"),J3t.forEach(t),Uqe.forEach(t),QPe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(i8.$$.fragment,yl),O7r=i(yl),mc=n(yl,"P",{});var RK=s(mc);V7r=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xH=n(RK,"A",{href:!0});var Y3t=s(xH);X7r=r(Y3t,"from_pretrained()"),Y3t.forEach(t),z7r=r(RK," class method or the "),$H=n(RK,"A",{href:!0});var K3t=s($H);Q7r=r(K3t,"from_config()"),K3t.forEach(t),W7r=r(RK,` class
method.`),RK.forEach(t),H7r=i(yl),d8=n(yl,"P",{});var Jqe=s(d8);U7r=r(Jqe,"This class cannot be instantiated directly using "),l3e=n(Jqe,"CODE",{});var Z3t=s(l3e);J7r=r(Z3t,"__init__()"),Z3t.forEach(t),Y7r=r(Jqe," (throws an error)."),Jqe.forEach(t),K7r=i(yl),Bt=n(yl,"DIV",{class:!0});var WA=s(Bt);T(c8.$$.fragment,WA),Z7r=i(WA),i3e=n(WA,"P",{});var evt=s(i3e);eMr=r(evt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),evt.forEach(t),oMr=i(WA),gc=n(WA,"P",{});var BK=s(gc);rMr=r(BK,`Note:
Loading a model from its configuration file does `),d3e=n(BK,"STRONG",{});var ovt=s(d3e);tMr=r(ovt,"not"),ovt.forEach(t),aMr=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(BK,"A",{href:!0});var rvt=s(kH);nMr=r(rvt,"from_pretrained()"),rvt.forEach(t),sMr=r(BK," to load the model weights."),BK.forEach(t),lMr=i(WA),T(F4.$$.fragment,WA),WA.forEach(t),iMr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(f8.$$.fragment,Ll),dMr=i(Ll),c3e=n(Ll,"P",{});var tvt=s(c3e);cMr=r(tvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tvt.forEach(t),fMr=i(Ll),sn=n(Ll,"P",{});var HA=s(sn);mMr=r(HA,"The model class to instantiate is selected based on the "),f3e=n(HA,"CODE",{});var avt=s(f3e);gMr=r(avt,"model_type"),avt.forEach(t),hMr=r(HA,` property of the config object (either
passed as an argument or loaded from `),m3e=n(HA,"CODE",{});var nvt=s(m3e);pMr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),uMr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=n(HA,"CODE",{});var svt=s(g3e);_Mr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),bMr=r(HA,":"),HA.forEach(t),vMr=i(Ll),h3e=n(Ll,"UL",{});var lvt=s(h3e);T4=n(lvt,"LI",{});var vSe=s(T4);p3e=n(vSe,"STRONG",{});var ivt=s(p3e);FMr=r(ivt,"vision-encoder-decoder"),ivt.forEach(t),TMr=r(vSe," \u2014 "),SH=n(vSe,"A",{href:!0});var dvt=s(SH);MMr=r(dvt,"TFVisionEncoderDecoderModel"),dvt.forEach(t),EMr=r(vSe," (Vision Encoder decoder model)"),vSe.forEach(t),lvt.forEach(t),CMr=i(Ll),T(M4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),WPe=i(f),hc=n(f,"H2",{class:!0});var Yqe=s(hc);E4=n(Yqe,"A",{id:!0,class:!0,href:!0});var cvt=s(E4);u3e=n(cvt,"SPAN",{});var fvt=s(u3e);T(m8.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),wMr=i(Yqe),_3e=n(Yqe,"SPAN",{});var mvt=s(_3e);AMr=r(mvt,"TFAutoModelForSpeechSeq2Seq"),mvt.forEach(t),Yqe.forEach(t),HPe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(g8.$$.fragment,xl),yMr=i(xl),pc=n(xl,"P",{});var PK=s(pc);LMr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=n(PK,"A",{href:!0});var gvt=s(RH);xMr=r(gvt,"from_pretrained()"),gvt.forEach(t),$Mr=r(PK," class method or the "),BH=n(PK,"A",{href:!0});var hvt=s(BH);kMr=r(hvt,"from_config()"),hvt.forEach(t),SMr=r(PK,` class
method.`),PK.forEach(t),RMr=i(xl),h8=n(xl,"P",{});var Kqe=s(h8);BMr=r(Kqe,"This class cannot be instantiated directly using "),b3e=n(Kqe,"CODE",{});var pvt=s(b3e);PMr=r(pvt,"__init__()"),pvt.forEach(t),IMr=r(Kqe," (throws an error)."),Kqe.forEach(t),qMr=i(xl),Pt=n(xl,"DIV",{class:!0});var UA=s(Pt);T(p8.$$.fragment,UA),NMr=i(UA),v3e=n(UA,"P",{});var uvt=s(v3e);jMr=r(uvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uvt.forEach(t),DMr=i(UA),uc=n(UA,"P",{});var IK=s(uc);GMr=r(IK,`Note:
Loading a model from its configuration file does `),F3e=n(IK,"STRONG",{});var _vt=s(F3e);OMr=r(_vt,"not"),_vt.forEach(t),VMr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(IK,"A",{href:!0});var bvt=s(PH);XMr=r(bvt,"from_pretrained()"),bvt.forEach(t),zMr=r(IK," to load the model weights."),IK.forEach(t),QMr=i(UA),T(C4.$$.fragment,UA),UA.forEach(t),WMr=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(u8.$$.fragment,$l),HMr=i($l),T3e=n($l,"P",{});var vvt=s(T3e);UMr=r(vvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vvt.forEach(t),JMr=i($l),ln=n($l,"P",{});var JA=s(ln);YMr=r(JA,"The model class to instantiate is selected based on the "),M3e=n(JA,"CODE",{});var Fvt=s(M3e);KMr=r(Fvt,"model_type"),Fvt.forEach(t),ZMr=r(JA,` property of the config object (either
passed as an argument or loaded from `),E3e=n(JA,"CODE",{});var Tvt=s(E3e);e4r=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),o4r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(JA,"CODE",{});var Mvt=s(C3e);r4r=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),t4r=r(JA,":"),JA.forEach(t),a4r=i($l),w3e=n($l,"UL",{});var Evt=s(w3e);w4=n(Evt,"LI",{});var FSe=s(w4);A3e=n(FSe,"STRONG",{});var Cvt=s(A3e);n4r=r(Cvt,"speech_to_text"),Cvt.forEach(t),s4r=r(FSe," \u2014 "),IH=n(FSe,"A",{href:!0});var wvt=s(IH);l4r=r(wvt,"TFSpeech2TextForConditionalGeneration"),wvt.forEach(t),i4r=r(FSe," (Speech2Text model)"),FSe.forEach(t),Evt.forEach(t),d4r=i($l),T(A4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),UPe=i(f),_c=n(f,"H2",{class:!0});var Zqe=s(_c);y4=n(Zqe,"A",{id:!0,class:!0,href:!0});var Avt=s(y4);y3e=n(Avt,"SPAN",{});var yvt=s(y3e);T(_8.$$.fragment,yvt),yvt.forEach(t),Avt.forEach(t),c4r=i(Zqe),L3e=n(Zqe,"SPAN",{});var Lvt=s(L3e);f4r=r(Lvt,"FlaxAutoModel"),Lvt.forEach(t),Zqe.forEach(t),JPe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(b8.$$.fragment,kl),m4r=i(kl),bc=n(kl,"P",{});var qK=s(bc);g4r=r(qK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qH=n(qK,"A",{href:!0});var xvt=s(qH);h4r=r(xvt,"from_pretrained()"),xvt.forEach(t),p4r=r(qK," class method or the "),NH=n(qK,"A",{href:!0});var $vt=s(NH);u4r=r($vt,"from_config()"),$vt.forEach(t),_4r=r(qK,` class
method.`),qK.forEach(t),b4r=i(kl),v8=n(kl,"P",{});var eNe=s(v8);v4r=r(eNe,"This class cannot be instantiated directly using "),x3e=n(eNe,"CODE",{});var kvt=s(x3e);F4r=r(kvt,"__init__()"),kvt.forEach(t),T4r=r(eNe," (throws an error)."),eNe.forEach(t),M4r=i(kl),It=n(kl,"DIV",{class:!0});var YA=s(It);T(F8.$$.fragment,YA),E4r=i(YA),$3e=n(YA,"P",{});var Svt=s($3e);C4r=r(Svt,"Instantiates one of the base model classes of the library from a configuration."),Svt.forEach(t),w4r=i(YA),vc=n(YA,"P",{});var NK=s(vc);A4r=r(NK,`Note:
Loading a model from its configuration file does `),k3e=n(NK,"STRONG",{});var Rvt=s(k3e);y4r=r(Rvt,"not"),Rvt.forEach(t),L4r=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(NK,"A",{href:!0});var Bvt=s(jH);x4r=r(Bvt,"from_pretrained()"),Bvt.forEach(t),$4r=r(NK," to load the model weights."),NK.forEach(t),k4r=i(YA),T(L4.$$.fragment,YA),YA.forEach(t),S4r=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(T8.$$.fragment,Sl),R4r=i(Sl),S3e=n(Sl,"P",{});var Pvt=s(S3e);B4r=r(Pvt,"Instantiate one of the base model classes of the library from a pretrained model."),Pvt.forEach(t),P4r=i(Sl),dn=n(Sl,"P",{});var KA=s(dn);I4r=r(KA,"The model class to instantiate is selected based on the "),R3e=n(KA,"CODE",{});var Ivt=s(R3e);q4r=r(Ivt,"model_type"),Ivt.forEach(t),N4r=r(KA,` property of the config object (either
passed as an argument or loaded from `),B3e=n(KA,"CODE",{});var qvt=s(B3e);j4r=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),D4r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(KA,"CODE",{});var Nvt=s(P3e);G4r=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),O4r=r(KA,":"),KA.forEach(t),V4r=i(Sl),oe=n(Sl,"UL",{});var ae=s(oe);x4=n(ae,"LI",{});var TSe=s(x4);I3e=n(TSe,"STRONG",{});var jvt=s(I3e);X4r=r(jvt,"albert"),jvt.forEach(t),z4r=r(TSe," \u2014 "),DH=n(TSe,"A",{href:!0});var Dvt=s(DH);Q4r=r(Dvt,"FlaxAlbertModel"),Dvt.forEach(t),W4r=r(TSe," (ALBERT model)"),TSe.forEach(t),H4r=i(ae),$4=n(ae,"LI",{});var MSe=s($4);q3e=n(MSe,"STRONG",{});var Gvt=s(q3e);U4r=r(Gvt,"bart"),Gvt.forEach(t),J4r=r(MSe," \u2014 "),GH=n(MSe,"A",{href:!0});var Ovt=s(GH);Y4r=r(Ovt,"FlaxBartModel"),Ovt.forEach(t),K4r=r(MSe," (BART model)"),MSe.forEach(t),Z4r=i(ae),k4=n(ae,"LI",{});var ESe=s(k4);N3e=n(ESe,"STRONG",{});var Vvt=s(N3e);eEr=r(Vvt,"beit"),Vvt.forEach(t),oEr=r(ESe," \u2014 "),OH=n(ESe,"A",{href:!0});var Xvt=s(OH);rEr=r(Xvt,"FlaxBeitModel"),Xvt.forEach(t),tEr=r(ESe," (BEiT model)"),ESe.forEach(t),aEr=i(ae),S4=n(ae,"LI",{});var CSe=s(S4);j3e=n(CSe,"STRONG",{});var zvt=s(j3e);nEr=r(zvt,"bert"),zvt.forEach(t),sEr=r(CSe," \u2014 "),VH=n(CSe,"A",{href:!0});var Qvt=s(VH);lEr=r(Qvt,"FlaxBertModel"),Qvt.forEach(t),iEr=r(CSe," (BERT model)"),CSe.forEach(t),dEr=i(ae),R4=n(ae,"LI",{});var wSe=s(R4);D3e=n(wSe,"STRONG",{});var Wvt=s(D3e);cEr=r(Wvt,"big_bird"),Wvt.forEach(t),fEr=r(wSe," \u2014 "),XH=n(wSe,"A",{href:!0});var Hvt=s(XH);mEr=r(Hvt,"FlaxBigBirdModel"),Hvt.forEach(t),gEr=r(wSe," (BigBird model)"),wSe.forEach(t),hEr=i(ae),B4=n(ae,"LI",{});var ASe=s(B4);G3e=n(ASe,"STRONG",{});var Uvt=s(G3e);pEr=r(Uvt,"blenderbot"),Uvt.forEach(t),uEr=r(ASe," \u2014 "),zH=n(ASe,"A",{href:!0});var Jvt=s(zH);_Er=r(Jvt,"FlaxBlenderbotModel"),Jvt.forEach(t),bEr=r(ASe," (Blenderbot model)"),ASe.forEach(t),vEr=i(ae),P4=n(ae,"LI",{});var ySe=s(P4);O3e=n(ySe,"STRONG",{});var Yvt=s(O3e);FEr=r(Yvt,"blenderbot-small"),Yvt.forEach(t),TEr=r(ySe," \u2014 "),QH=n(ySe,"A",{href:!0});var Kvt=s(QH);MEr=r(Kvt,"FlaxBlenderbotSmallModel"),Kvt.forEach(t),EEr=r(ySe," (BlenderbotSmall model)"),ySe.forEach(t),CEr=i(ae),I4=n(ae,"LI",{});var LSe=s(I4);V3e=n(LSe,"STRONG",{});var Zvt=s(V3e);wEr=r(Zvt,"clip"),Zvt.forEach(t),AEr=r(LSe," \u2014 "),WH=n(LSe,"A",{href:!0});var eFt=s(WH);yEr=r(eFt,"FlaxCLIPModel"),eFt.forEach(t),LEr=r(LSe," (CLIP model)"),LSe.forEach(t),xEr=i(ae),q4=n(ae,"LI",{});var xSe=s(q4);X3e=n(xSe,"STRONG",{});var oFt=s(X3e);$Er=r(oFt,"distilbert"),oFt.forEach(t),kEr=r(xSe," \u2014 "),HH=n(xSe,"A",{href:!0});var rFt=s(HH);SEr=r(rFt,"FlaxDistilBertModel"),rFt.forEach(t),REr=r(xSe," (DistilBERT model)"),xSe.forEach(t),BEr=i(ae),N4=n(ae,"LI",{});var $Se=s(N4);z3e=n($Se,"STRONG",{});var tFt=s(z3e);PEr=r(tFt,"electra"),tFt.forEach(t),IEr=r($Se," \u2014 "),UH=n($Se,"A",{href:!0});var aFt=s(UH);qEr=r(aFt,"FlaxElectraModel"),aFt.forEach(t),NEr=r($Se," (ELECTRA model)"),$Se.forEach(t),jEr=i(ae),j4=n(ae,"LI",{});var kSe=s(j4);Q3e=n(kSe,"STRONG",{});var nFt=s(Q3e);DEr=r(nFt,"gpt2"),nFt.forEach(t),GEr=r(kSe," \u2014 "),JH=n(kSe,"A",{href:!0});var sFt=s(JH);OEr=r(sFt,"FlaxGPT2Model"),sFt.forEach(t),VEr=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),XEr=i(ae),D4=n(ae,"LI",{});var SSe=s(D4);W3e=n(SSe,"STRONG",{});var lFt=s(W3e);zEr=r(lFt,"gpt_neo"),lFt.forEach(t),QEr=r(SSe," \u2014 "),YH=n(SSe,"A",{href:!0});var iFt=s(YH);WEr=r(iFt,"FlaxGPTNeoModel"),iFt.forEach(t),HEr=r(SSe," (GPT Neo model)"),SSe.forEach(t),UEr=i(ae),G4=n(ae,"LI",{});var RSe=s(G4);H3e=n(RSe,"STRONG",{});var dFt=s(H3e);JEr=r(dFt,"gptj"),dFt.forEach(t),YEr=r(RSe," \u2014 "),KH=n(RSe,"A",{href:!0});var cFt=s(KH);KEr=r(cFt,"FlaxGPTJModel"),cFt.forEach(t),ZEr=r(RSe," (GPT-J model)"),RSe.forEach(t),eCr=i(ae),O4=n(ae,"LI",{});var BSe=s(O4);U3e=n(BSe,"STRONG",{});var fFt=s(U3e);oCr=r(fFt,"marian"),fFt.forEach(t),rCr=r(BSe," \u2014 "),ZH=n(BSe,"A",{href:!0});var mFt=s(ZH);tCr=r(mFt,"FlaxMarianModel"),mFt.forEach(t),aCr=r(BSe," (Marian model)"),BSe.forEach(t),nCr=i(ae),V4=n(ae,"LI",{});var PSe=s(V4);J3e=n(PSe,"STRONG",{});var gFt=s(J3e);sCr=r(gFt,"mbart"),gFt.forEach(t),lCr=r(PSe," \u2014 "),eU=n(PSe,"A",{href:!0});var hFt=s(eU);iCr=r(hFt,"FlaxMBartModel"),hFt.forEach(t),dCr=r(PSe," (mBART model)"),PSe.forEach(t),cCr=i(ae),X4=n(ae,"LI",{});var ISe=s(X4);Y3e=n(ISe,"STRONG",{});var pFt=s(Y3e);fCr=r(pFt,"mt5"),pFt.forEach(t),mCr=r(ISe," \u2014 "),oU=n(ISe,"A",{href:!0});var uFt=s(oU);gCr=r(uFt,"FlaxMT5Model"),uFt.forEach(t),hCr=r(ISe," (mT5 model)"),ISe.forEach(t),pCr=i(ae),z4=n(ae,"LI",{});var qSe=s(z4);K3e=n(qSe,"STRONG",{});var _Ft=s(K3e);uCr=r(_Ft,"pegasus"),_Ft.forEach(t),_Cr=r(qSe," \u2014 "),rU=n(qSe,"A",{href:!0});var bFt=s(rU);bCr=r(bFt,"FlaxPegasusModel"),bFt.forEach(t),vCr=r(qSe," (Pegasus model)"),qSe.forEach(t),FCr=i(ae),Q4=n(ae,"LI",{});var NSe=s(Q4);Z3e=n(NSe,"STRONG",{});var vFt=s(Z3e);TCr=r(vFt,"roberta"),vFt.forEach(t),MCr=r(NSe," \u2014 "),tU=n(NSe,"A",{href:!0});var FFt=s(tU);ECr=r(FFt,"FlaxRobertaModel"),FFt.forEach(t),CCr=r(NSe," (RoBERTa model)"),NSe.forEach(t),wCr=i(ae),W4=n(ae,"LI",{});var jSe=s(W4);eve=n(jSe,"STRONG",{});var TFt=s(eve);ACr=r(TFt,"roformer"),TFt.forEach(t),yCr=r(jSe," \u2014 "),aU=n(jSe,"A",{href:!0});var MFt=s(aU);LCr=r(MFt,"FlaxRoFormerModel"),MFt.forEach(t),xCr=r(jSe," (RoFormer model)"),jSe.forEach(t),$Cr=i(ae),H4=n(ae,"LI",{});var DSe=s(H4);ove=n(DSe,"STRONG",{});var EFt=s(ove);kCr=r(EFt,"t5"),EFt.forEach(t),SCr=r(DSe," \u2014 "),nU=n(DSe,"A",{href:!0});var CFt=s(nU);RCr=r(CFt,"FlaxT5Model"),CFt.forEach(t),BCr=r(DSe," (T5 model)"),DSe.forEach(t),PCr=i(ae),U4=n(ae,"LI",{});var GSe=s(U4);rve=n(GSe,"STRONG",{});var wFt=s(rve);ICr=r(wFt,"vision-text-dual-encoder"),wFt.forEach(t),qCr=r(GSe," \u2014 "),sU=n(GSe,"A",{href:!0});var AFt=s(sU);NCr=r(AFt,"FlaxVisionTextDualEncoderModel"),AFt.forEach(t),jCr=r(GSe," (VisionTextDualEncoder model)"),GSe.forEach(t),DCr=i(ae),J4=n(ae,"LI",{});var OSe=s(J4);tve=n(OSe,"STRONG",{});var yFt=s(tve);GCr=r(yFt,"vit"),yFt.forEach(t),OCr=r(OSe," \u2014 "),lU=n(OSe,"A",{href:!0});var LFt=s(lU);VCr=r(LFt,"FlaxViTModel"),LFt.forEach(t),XCr=r(OSe," (ViT model)"),OSe.forEach(t),zCr=i(ae),Y4=n(ae,"LI",{});var VSe=s(Y4);ave=n(VSe,"STRONG",{});var xFt=s(ave);QCr=r(xFt,"wav2vec2"),xFt.forEach(t),WCr=r(VSe," \u2014 "),iU=n(VSe,"A",{href:!0});var $Ft=s(iU);HCr=r($Ft,"FlaxWav2Vec2Model"),$Ft.forEach(t),UCr=r(VSe," (Wav2Vec2 model)"),VSe.forEach(t),JCr=i(ae),K4=n(ae,"LI",{});var XSe=s(K4);nve=n(XSe,"STRONG",{});var kFt=s(nve);YCr=r(kFt,"xglm"),kFt.forEach(t),KCr=r(XSe," \u2014 "),dU=n(XSe,"A",{href:!0});var SFt=s(dU);ZCr=r(SFt,"FlaxXGLMModel"),SFt.forEach(t),ewr=r(XSe," (XGLM model)"),XSe.forEach(t),owr=i(ae),Z4=n(ae,"LI",{});var zSe=s(Z4);sve=n(zSe,"STRONG",{});var RFt=s(sve);rwr=r(RFt,"xlm-roberta"),RFt.forEach(t),twr=r(zSe," \u2014 "),cU=n(zSe,"A",{href:!0});var BFt=s(cU);awr=r(BFt,"FlaxXLMRobertaModel"),BFt.forEach(t),nwr=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),ae.forEach(t),swr=i(Sl),T(eE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),YPe=i(f),Fc=n(f,"H2",{class:!0});var oNe=s(Fc);oE=n(oNe,"A",{id:!0,class:!0,href:!0});var PFt=s(oE);lve=n(PFt,"SPAN",{});var IFt=s(lve);T(M8.$$.fragment,IFt),IFt.forEach(t),PFt.forEach(t),lwr=i(oNe),ive=n(oNe,"SPAN",{});var qFt=s(ive);iwr=r(qFt,"FlaxAutoModelForCausalLM"),qFt.forEach(t),oNe.forEach(t),KPe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(E8.$$.fragment,Rl),dwr=i(Rl),Tc=n(Rl,"P",{});var jK=s(Tc);cwr=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=n(jK,"A",{href:!0});var NFt=s(fU);fwr=r(NFt,"from_pretrained()"),NFt.forEach(t),mwr=r(jK," class method or the "),mU=n(jK,"A",{href:!0});var jFt=s(mU);gwr=r(jFt,"from_config()"),jFt.forEach(t),hwr=r(jK,` class
method.`),jK.forEach(t),pwr=i(Rl),C8=n(Rl,"P",{});var rNe=s(C8);uwr=r(rNe,"This class cannot be instantiated directly using "),dve=n(rNe,"CODE",{});var DFt=s(dve);_wr=r(DFt,"__init__()"),DFt.forEach(t),bwr=r(rNe," (throws an error)."),rNe.forEach(t),vwr=i(Rl),qt=n(Rl,"DIV",{class:!0});var ZA=s(qt);T(w8.$$.fragment,ZA),Fwr=i(ZA),cve=n(ZA,"P",{});var GFt=s(cve);Twr=r(GFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GFt.forEach(t),Mwr=i(ZA),Mc=n(ZA,"P",{});var DK=s(Mc);Ewr=r(DK,`Note:
Loading a model from its configuration file does `),fve=n(DK,"STRONG",{});var OFt=s(fve);Cwr=r(OFt,"not"),OFt.forEach(t),wwr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(DK,"A",{href:!0});var VFt=s(gU);Awr=r(VFt,"from_pretrained()"),VFt.forEach(t),ywr=r(DK," to load the model weights."),DK.forEach(t),Lwr=i(ZA),T(rE.$$.fragment,ZA),ZA.forEach(t),xwr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(A8.$$.fragment,Bl),$wr=i(Bl),mve=n(Bl,"P",{});var XFt=s(mve);kwr=r(XFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XFt.forEach(t),Swr=i(Bl),cn=n(Bl,"P",{});var e0=s(cn);Rwr=r(e0,"The model class to instantiate is selected based on the "),gve=n(e0,"CODE",{});var zFt=s(gve);Bwr=r(zFt,"model_type"),zFt.forEach(t),Pwr=r(e0,` property of the config object (either
passed as an argument or loaded from `),hve=n(e0,"CODE",{});var QFt=s(hve);Iwr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),qwr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(e0,"CODE",{});var WFt=s(pve);Nwr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),jwr=r(e0,":"),e0.forEach(t),Dwr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);tE=n(Oe,"LI",{});var QSe=s(tE);uve=n(QSe,"STRONG",{});var HFt=s(uve);Gwr=r(HFt,"bart"),HFt.forEach(t),Owr=r(QSe," \u2014 "),hU=n(QSe,"A",{href:!0});var UFt=s(hU);Vwr=r(UFt,"FlaxBartForCausalLM"),UFt.forEach(t),Xwr=r(QSe," (BART model)"),QSe.forEach(t),zwr=i(Oe),aE=n(Oe,"LI",{});var WSe=s(aE);_ve=n(WSe,"STRONG",{});var JFt=s(_ve);Qwr=r(JFt,"bert"),JFt.forEach(t),Wwr=r(WSe," \u2014 "),pU=n(WSe,"A",{href:!0});var YFt=s(pU);Hwr=r(YFt,"FlaxBertForCausalLM"),YFt.forEach(t),Uwr=r(WSe," (BERT model)"),WSe.forEach(t),Jwr=i(Oe),nE=n(Oe,"LI",{});var HSe=s(nE);bve=n(HSe,"STRONG",{});var KFt=s(bve);Ywr=r(KFt,"big_bird"),KFt.forEach(t),Kwr=r(HSe," \u2014 "),uU=n(HSe,"A",{href:!0});var ZFt=s(uU);Zwr=r(ZFt,"FlaxBigBirdForCausalLM"),ZFt.forEach(t),eAr=r(HSe," (BigBird model)"),HSe.forEach(t),oAr=i(Oe),sE=n(Oe,"LI",{});var USe=s(sE);vve=n(USe,"STRONG",{});var eTt=s(vve);rAr=r(eTt,"electra"),eTt.forEach(t),tAr=r(USe," \u2014 "),_U=n(USe,"A",{href:!0});var oTt=s(_U);aAr=r(oTt,"FlaxElectraForCausalLM"),oTt.forEach(t),nAr=r(USe," (ELECTRA model)"),USe.forEach(t),sAr=i(Oe),lE=n(Oe,"LI",{});var JSe=s(lE);Fve=n(JSe,"STRONG",{});var rTt=s(Fve);lAr=r(rTt,"gpt2"),rTt.forEach(t),iAr=r(JSe," \u2014 "),bU=n(JSe,"A",{href:!0});var tTt=s(bU);dAr=r(tTt,"FlaxGPT2LMHeadModel"),tTt.forEach(t),cAr=r(JSe," (OpenAI GPT-2 model)"),JSe.forEach(t),fAr=i(Oe),iE=n(Oe,"LI",{});var YSe=s(iE);Tve=n(YSe,"STRONG",{});var aTt=s(Tve);mAr=r(aTt,"gpt_neo"),aTt.forEach(t),gAr=r(YSe," \u2014 "),vU=n(YSe,"A",{href:!0});var nTt=s(vU);hAr=r(nTt,"FlaxGPTNeoForCausalLM"),nTt.forEach(t),pAr=r(YSe," (GPT Neo model)"),YSe.forEach(t),uAr=i(Oe),dE=n(Oe,"LI",{});var KSe=s(dE);Mve=n(KSe,"STRONG",{});var sTt=s(Mve);_Ar=r(sTt,"gptj"),sTt.forEach(t),bAr=r(KSe," \u2014 "),FU=n(KSe,"A",{href:!0});var lTt=s(FU);vAr=r(lTt,"FlaxGPTJForCausalLM"),lTt.forEach(t),FAr=r(KSe," (GPT-J model)"),KSe.forEach(t),TAr=i(Oe),cE=n(Oe,"LI",{});var ZSe=s(cE);Eve=n(ZSe,"STRONG",{});var iTt=s(Eve);MAr=r(iTt,"roberta"),iTt.forEach(t),EAr=r(ZSe," \u2014 "),TU=n(ZSe,"A",{href:!0});var dTt=s(TU);CAr=r(dTt,"FlaxRobertaForCausalLM"),dTt.forEach(t),wAr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),AAr=i(Oe),fE=n(Oe,"LI",{});var eRe=s(fE);Cve=n(eRe,"STRONG",{});var cTt=s(Cve);yAr=r(cTt,"xglm"),cTt.forEach(t),LAr=r(eRe," \u2014 "),MU=n(eRe,"A",{href:!0});var fTt=s(MU);xAr=r(fTt,"FlaxXGLMForCausalLM"),fTt.forEach(t),$Ar=r(eRe," (XGLM model)"),eRe.forEach(t),Oe.forEach(t),kAr=i(Bl),T(mE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),ZPe=i(f),Ec=n(f,"H2",{class:!0});var tNe=s(Ec);gE=n(tNe,"A",{id:!0,class:!0,href:!0});var mTt=s(gE);wve=n(mTt,"SPAN",{});var gTt=s(wve);T(y8.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),SAr=i(tNe),Ave=n(tNe,"SPAN",{});var hTt=s(Ave);RAr=r(hTt,"FlaxAutoModelForPreTraining"),hTt.forEach(t),tNe.forEach(t),eIe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(L8.$$.fragment,Pl),BAr=i(Pl),Cc=n(Pl,"P",{});var GK=s(Cc);PAr=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EU=n(GK,"A",{href:!0});var pTt=s(EU);IAr=r(pTt,"from_pretrained()"),pTt.forEach(t),qAr=r(GK," class method or the "),CU=n(GK,"A",{href:!0});var uTt=s(CU);NAr=r(uTt,"from_config()"),uTt.forEach(t),jAr=r(GK,` class
method.`),GK.forEach(t),DAr=i(Pl),x8=n(Pl,"P",{});var aNe=s(x8);GAr=r(aNe,"This class cannot be instantiated directly using "),yve=n(aNe,"CODE",{});var _Tt=s(yve);OAr=r(_Tt,"__init__()"),_Tt.forEach(t),VAr=r(aNe," (throws an error)."),aNe.forEach(t),XAr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var o0=s(Nt);T($8.$$.fragment,o0),zAr=i(o0),Lve=n(o0,"P",{});var bTt=s(Lve);QAr=r(bTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bTt.forEach(t),WAr=i(o0),wc=n(o0,"P",{});var OK=s(wc);HAr=r(OK,`Note:
Loading a model from its configuration file does `),xve=n(OK,"STRONG",{});var vTt=s(xve);UAr=r(vTt,"not"),vTt.forEach(t),JAr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(OK,"A",{href:!0});var FTt=s(wU);YAr=r(FTt,"from_pretrained()"),FTt.forEach(t),KAr=r(OK," to load the model weights."),OK.forEach(t),ZAr=i(o0),T(hE.$$.fragment,o0),o0.forEach(t),e0r=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(k8.$$.fragment,Il),o0r=i(Il),$ve=n(Il,"P",{});var TTt=s($ve);r0r=r(TTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TTt.forEach(t),t0r=i(Il),fn=n(Il,"P",{});var r0=s(fn);a0r=r(r0,"The model class to instantiate is selected based on the "),kve=n(r0,"CODE",{});var MTt=s(kve);n0r=r(MTt,"model_type"),MTt.forEach(t),s0r=r(r0,` property of the config object (either
passed as an argument or loaded from `),Sve=n(r0,"CODE",{});var ETt=s(Sve);l0r=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),i0r=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(r0,"CODE",{});var CTt=s(Rve);d0r=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),c0r=r(r0,":"),r0.forEach(t),f0r=i(Il),Me=n(Il,"UL",{});var we=s(Me);pE=n(we,"LI",{});var oRe=s(pE);Bve=n(oRe,"STRONG",{});var wTt=s(Bve);m0r=r(wTt,"albert"),wTt.forEach(t),g0r=r(oRe," \u2014 "),AU=n(oRe,"A",{href:!0});var ATt=s(AU);h0r=r(ATt,"FlaxAlbertForPreTraining"),ATt.forEach(t),p0r=r(oRe," (ALBERT model)"),oRe.forEach(t),u0r=i(we),uE=n(we,"LI",{});var rRe=s(uE);Pve=n(rRe,"STRONG",{});var yTt=s(Pve);_0r=r(yTt,"bart"),yTt.forEach(t),b0r=r(rRe," \u2014 "),yU=n(rRe,"A",{href:!0});var LTt=s(yU);v0r=r(LTt,"FlaxBartForConditionalGeneration"),LTt.forEach(t),F0r=r(rRe," (BART model)"),rRe.forEach(t),T0r=i(we),_E=n(we,"LI",{});var tRe=s(_E);Ive=n(tRe,"STRONG",{});var xTt=s(Ive);M0r=r(xTt,"bert"),xTt.forEach(t),E0r=r(tRe," \u2014 "),LU=n(tRe,"A",{href:!0});var $Tt=s(LU);C0r=r($Tt,"FlaxBertForPreTraining"),$Tt.forEach(t),w0r=r(tRe," (BERT model)"),tRe.forEach(t),A0r=i(we),bE=n(we,"LI",{});var aRe=s(bE);qve=n(aRe,"STRONG",{});var kTt=s(qve);y0r=r(kTt,"big_bird"),kTt.forEach(t),L0r=r(aRe," \u2014 "),xU=n(aRe,"A",{href:!0});var STt=s(xU);x0r=r(STt,"FlaxBigBirdForPreTraining"),STt.forEach(t),$0r=r(aRe," (BigBird model)"),aRe.forEach(t),k0r=i(we),vE=n(we,"LI",{});var nRe=s(vE);Nve=n(nRe,"STRONG",{});var RTt=s(Nve);S0r=r(RTt,"electra"),RTt.forEach(t),R0r=r(nRe," \u2014 "),$U=n(nRe,"A",{href:!0});var BTt=s($U);B0r=r(BTt,"FlaxElectraForPreTraining"),BTt.forEach(t),P0r=r(nRe," (ELECTRA model)"),nRe.forEach(t),I0r=i(we),FE=n(we,"LI",{});var sRe=s(FE);jve=n(sRe,"STRONG",{});var PTt=s(jve);q0r=r(PTt,"mbart"),PTt.forEach(t),N0r=r(sRe," \u2014 "),kU=n(sRe,"A",{href:!0});var ITt=s(kU);j0r=r(ITt,"FlaxMBartForConditionalGeneration"),ITt.forEach(t),D0r=r(sRe," (mBART model)"),sRe.forEach(t),G0r=i(we),TE=n(we,"LI",{});var lRe=s(TE);Dve=n(lRe,"STRONG",{});var qTt=s(Dve);O0r=r(qTt,"mt5"),qTt.forEach(t),V0r=r(lRe," \u2014 "),SU=n(lRe,"A",{href:!0});var NTt=s(SU);X0r=r(NTt,"FlaxMT5ForConditionalGeneration"),NTt.forEach(t),z0r=r(lRe," (mT5 model)"),lRe.forEach(t),Q0r=i(we),ME=n(we,"LI",{});var iRe=s(ME);Gve=n(iRe,"STRONG",{});var jTt=s(Gve);W0r=r(jTt,"roberta"),jTt.forEach(t),H0r=r(iRe," \u2014 "),RU=n(iRe,"A",{href:!0});var DTt=s(RU);U0r=r(DTt,"FlaxRobertaForMaskedLM"),DTt.forEach(t),J0r=r(iRe," (RoBERTa model)"),iRe.forEach(t),Y0r=i(we),EE=n(we,"LI",{});var dRe=s(EE);Ove=n(dRe,"STRONG",{});var GTt=s(Ove);K0r=r(GTt,"roformer"),GTt.forEach(t),Z0r=r(dRe," \u2014 "),BU=n(dRe,"A",{href:!0});var OTt=s(BU);e6r=r(OTt,"FlaxRoFormerForMaskedLM"),OTt.forEach(t),o6r=r(dRe," (RoFormer model)"),dRe.forEach(t),r6r=i(we),CE=n(we,"LI",{});var cRe=s(CE);Vve=n(cRe,"STRONG",{});var VTt=s(Vve);t6r=r(VTt,"t5"),VTt.forEach(t),a6r=r(cRe," \u2014 "),PU=n(cRe,"A",{href:!0});var XTt=s(PU);n6r=r(XTt,"FlaxT5ForConditionalGeneration"),XTt.forEach(t),s6r=r(cRe," (T5 model)"),cRe.forEach(t),l6r=i(we),wE=n(we,"LI",{});var fRe=s(wE);Xve=n(fRe,"STRONG",{});var zTt=s(Xve);i6r=r(zTt,"wav2vec2"),zTt.forEach(t),d6r=r(fRe," \u2014 "),IU=n(fRe,"A",{href:!0});var QTt=s(IU);c6r=r(QTt,"FlaxWav2Vec2ForPreTraining"),QTt.forEach(t),f6r=r(fRe," (Wav2Vec2 model)"),fRe.forEach(t),m6r=i(we),AE=n(we,"LI",{});var mRe=s(AE);zve=n(mRe,"STRONG",{});var WTt=s(zve);g6r=r(WTt,"xlm-roberta"),WTt.forEach(t),h6r=r(mRe," \u2014 "),qU=n(mRe,"A",{href:!0});var HTt=s(qU);p6r=r(HTt,"FlaxXLMRobertaForMaskedLM"),HTt.forEach(t),u6r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),we.forEach(t),_6r=i(Il),T(yE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),oIe=i(f),Ac=n(f,"H2",{class:!0});var nNe=s(Ac);LE=n(nNe,"A",{id:!0,class:!0,href:!0});var UTt=s(LE);Qve=n(UTt,"SPAN",{});var JTt=s(Qve);T(S8.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),b6r=i(nNe),Wve=n(nNe,"SPAN",{});var YTt=s(Wve);v6r=r(YTt,"FlaxAutoModelForMaskedLM"),YTt.forEach(t),nNe.forEach(t),rIe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T(R8.$$.fragment,ql),F6r=i(ql),yc=n(ql,"P",{});var VK=s(yc);T6r=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NU=n(VK,"A",{href:!0});var KTt=s(NU);M6r=r(KTt,"from_pretrained()"),KTt.forEach(t),E6r=r(VK," class method or the "),jU=n(VK,"A",{href:!0});var ZTt=s(jU);C6r=r(ZTt,"from_config()"),ZTt.forEach(t),w6r=r(VK,` class
method.`),VK.forEach(t),A6r=i(ql),B8=n(ql,"P",{});var sNe=s(B8);y6r=r(sNe,"This class cannot be instantiated directly using "),Hve=n(sNe,"CODE",{});var e7t=s(Hve);L6r=r(e7t,"__init__()"),e7t.forEach(t),x6r=r(sNe," (throws an error)."),sNe.forEach(t),$6r=i(ql),jt=n(ql,"DIV",{class:!0});var t0=s(jt);T(P8.$$.fragment,t0),k6r=i(t0),Uve=n(t0,"P",{});var o7t=s(Uve);S6r=r(o7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o7t.forEach(t),R6r=i(t0),Lc=n(t0,"P",{});var XK=s(Lc);B6r=r(XK,`Note:
Loading a model from its configuration file does `),Jve=n(XK,"STRONG",{});var r7t=s(Jve);P6r=r(r7t,"not"),r7t.forEach(t),I6r=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(XK,"A",{href:!0});var t7t=s(DU);q6r=r(t7t,"from_pretrained()"),t7t.forEach(t),N6r=r(XK," to load the model weights."),XK.forEach(t),j6r=i(t0),T(xE.$$.fragment,t0),t0.forEach(t),D6r=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(I8.$$.fragment,Nl),G6r=i(Nl),Yve=n(Nl,"P",{});var a7t=s(Yve);O6r=r(a7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a7t.forEach(t),V6r=i(Nl),mn=n(Nl,"P",{});var a0=s(mn);X6r=r(a0,"The model class to instantiate is selected based on the "),Kve=n(a0,"CODE",{});var n7t=s(Kve);z6r=r(n7t,"model_type"),n7t.forEach(t),Q6r=r(a0,` property of the config object (either
passed as an argument or loaded from `),Zve=n(a0,"CODE",{});var s7t=s(Zve);W6r=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),H6r=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(a0,"CODE",{});var l7t=s(eFe);U6r=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),J6r=r(a0,":"),a0.forEach(t),Y6r=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);$E=n(Be,"LI",{});var gRe=s($E);oFe=n(gRe,"STRONG",{});var i7t=s(oFe);K6r=r(i7t,"albert"),i7t.forEach(t),Z6r=r(gRe," \u2014 "),GU=n(gRe,"A",{href:!0});var d7t=s(GU);eyr=r(d7t,"FlaxAlbertForMaskedLM"),d7t.forEach(t),oyr=r(gRe," (ALBERT model)"),gRe.forEach(t),ryr=i(Be),kE=n(Be,"LI",{});var hRe=s(kE);rFe=n(hRe,"STRONG",{});var c7t=s(rFe);tyr=r(c7t,"bart"),c7t.forEach(t),ayr=r(hRe," \u2014 "),OU=n(hRe,"A",{href:!0});var f7t=s(OU);nyr=r(f7t,"FlaxBartForConditionalGeneration"),f7t.forEach(t),syr=r(hRe," (BART model)"),hRe.forEach(t),lyr=i(Be),SE=n(Be,"LI",{});var pRe=s(SE);tFe=n(pRe,"STRONG",{});var m7t=s(tFe);iyr=r(m7t,"bert"),m7t.forEach(t),dyr=r(pRe," \u2014 "),VU=n(pRe,"A",{href:!0});var g7t=s(VU);cyr=r(g7t,"FlaxBertForMaskedLM"),g7t.forEach(t),fyr=r(pRe," (BERT model)"),pRe.forEach(t),myr=i(Be),RE=n(Be,"LI",{});var uRe=s(RE);aFe=n(uRe,"STRONG",{});var h7t=s(aFe);gyr=r(h7t,"big_bird"),h7t.forEach(t),hyr=r(uRe," \u2014 "),XU=n(uRe,"A",{href:!0});var p7t=s(XU);pyr=r(p7t,"FlaxBigBirdForMaskedLM"),p7t.forEach(t),uyr=r(uRe," (BigBird model)"),uRe.forEach(t),_yr=i(Be),BE=n(Be,"LI",{});var _Re=s(BE);nFe=n(_Re,"STRONG",{});var u7t=s(nFe);byr=r(u7t,"distilbert"),u7t.forEach(t),vyr=r(_Re," \u2014 "),zU=n(_Re,"A",{href:!0});var _7t=s(zU);Fyr=r(_7t,"FlaxDistilBertForMaskedLM"),_7t.forEach(t),Tyr=r(_Re," (DistilBERT model)"),_Re.forEach(t),Myr=i(Be),PE=n(Be,"LI",{});var bRe=s(PE);sFe=n(bRe,"STRONG",{});var b7t=s(sFe);Eyr=r(b7t,"electra"),b7t.forEach(t),Cyr=r(bRe," \u2014 "),QU=n(bRe,"A",{href:!0});var v7t=s(QU);wyr=r(v7t,"FlaxElectraForMaskedLM"),v7t.forEach(t),Ayr=r(bRe," (ELECTRA model)"),bRe.forEach(t),yyr=i(Be),IE=n(Be,"LI",{});var vRe=s(IE);lFe=n(vRe,"STRONG",{});var F7t=s(lFe);Lyr=r(F7t,"mbart"),F7t.forEach(t),xyr=r(vRe," \u2014 "),WU=n(vRe,"A",{href:!0});var T7t=s(WU);$yr=r(T7t,"FlaxMBartForConditionalGeneration"),T7t.forEach(t),kyr=r(vRe," (mBART model)"),vRe.forEach(t),Syr=i(Be),qE=n(Be,"LI",{});var FRe=s(qE);iFe=n(FRe,"STRONG",{});var M7t=s(iFe);Ryr=r(M7t,"roberta"),M7t.forEach(t),Byr=r(FRe," \u2014 "),HU=n(FRe,"A",{href:!0});var E7t=s(HU);Pyr=r(E7t,"FlaxRobertaForMaskedLM"),E7t.forEach(t),Iyr=r(FRe," (RoBERTa model)"),FRe.forEach(t),qyr=i(Be),NE=n(Be,"LI",{});var TRe=s(NE);dFe=n(TRe,"STRONG",{});var C7t=s(dFe);Nyr=r(C7t,"roformer"),C7t.forEach(t),jyr=r(TRe," \u2014 "),UU=n(TRe,"A",{href:!0});var w7t=s(UU);Dyr=r(w7t,"FlaxRoFormerForMaskedLM"),w7t.forEach(t),Gyr=r(TRe," (RoFormer model)"),TRe.forEach(t),Oyr=i(Be),jE=n(Be,"LI",{});var MRe=s(jE);cFe=n(MRe,"STRONG",{});var A7t=s(cFe);Vyr=r(A7t,"xlm-roberta"),A7t.forEach(t),Xyr=r(MRe," \u2014 "),JU=n(MRe,"A",{href:!0});var y7t=s(JU);zyr=r(y7t,"FlaxXLMRobertaForMaskedLM"),y7t.forEach(t),Qyr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Be.forEach(t),Wyr=i(Nl),T(DE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),tIe=i(f),xc=n(f,"H2",{class:!0});var lNe=s(xc);GE=n(lNe,"A",{id:!0,class:!0,href:!0});var L7t=s(GE);fFe=n(L7t,"SPAN",{});var x7t=s(fFe);T(q8.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),Hyr=i(lNe),mFe=n(lNe,"SPAN",{});var $7t=s(mFe);Uyr=r($7t,"FlaxAutoModelForSeq2SeqLM"),$7t.forEach(t),lNe.forEach(t),aIe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T(N8.$$.fragment,jl),Jyr=i(jl),$c=n(jl,"P",{});var zK=s($c);Yyr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YU=n(zK,"A",{href:!0});var k7t=s(YU);Kyr=r(k7t,"from_pretrained()"),k7t.forEach(t),Zyr=r(zK," class method or the "),KU=n(zK,"A",{href:!0});var S7t=s(KU);eLr=r(S7t,"from_config()"),S7t.forEach(t),oLr=r(zK,` class
method.`),zK.forEach(t),rLr=i(jl),j8=n(jl,"P",{});var iNe=s(j8);tLr=r(iNe,"This class cannot be instantiated directly using "),gFe=n(iNe,"CODE",{});var R7t=s(gFe);aLr=r(R7t,"__init__()"),R7t.forEach(t),nLr=r(iNe," (throws an error)."),iNe.forEach(t),sLr=i(jl),Dt=n(jl,"DIV",{class:!0});var n0=s(Dt);T(D8.$$.fragment,n0),lLr=i(n0),hFe=n(n0,"P",{});var B7t=s(hFe);iLr=r(B7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B7t.forEach(t),dLr=i(n0),kc=n(n0,"P",{});var QK=s(kc);cLr=r(QK,`Note:
Loading a model from its configuration file does `),pFe=n(QK,"STRONG",{});var P7t=s(pFe);fLr=r(P7t,"not"),P7t.forEach(t),mLr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(QK,"A",{href:!0});var I7t=s(ZU);gLr=r(I7t,"from_pretrained()"),I7t.forEach(t),hLr=r(QK," to load the model weights."),QK.forEach(t),pLr=i(n0),T(OE.$$.fragment,n0),n0.forEach(t),uLr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(G8.$$.fragment,Dl),_Lr=i(Dl),uFe=n(Dl,"P",{});var q7t=s(uFe);bLr=r(q7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q7t.forEach(t),vLr=i(Dl),gn=n(Dl,"P",{});var s0=s(gn);FLr=r(s0,"The model class to instantiate is selected based on the "),_Fe=n(s0,"CODE",{});var N7t=s(_Fe);TLr=r(N7t,"model_type"),N7t.forEach(t),MLr=r(s0,` property of the config object (either
passed as an argument or loaded from `),bFe=n(s0,"CODE",{});var j7t=s(bFe);ELr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),CLr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(s0,"CODE",{});var D7t=s(vFe);wLr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),ALr=r(s0,":"),s0.forEach(t),yLr=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);VE=n(Ve,"LI",{});var ERe=s(VE);FFe=n(ERe,"STRONG",{});var G7t=s(FFe);LLr=r(G7t,"bart"),G7t.forEach(t),xLr=r(ERe," \u2014 "),eJ=n(ERe,"A",{href:!0});var O7t=s(eJ);$Lr=r(O7t,"FlaxBartForConditionalGeneration"),O7t.forEach(t),kLr=r(ERe," (BART model)"),ERe.forEach(t),SLr=i(Ve),XE=n(Ve,"LI",{});var CRe=s(XE);TFe=n(CRe,"STRONG",{});var V7t=s(TFe);RLr=r(V7t,"blenderbot"),V7t.forEach(t),BLr=r(CRe," \u2014 "),oJ=n(CRe,"A",{href:!0});var X7t=s(oJ);PLr=r(X7t,"FlaxBlenderbotForConditionalGeneration"),X7t.forEach(t),ILr=r(CRe," (Blenderbot model)"),CRe.forEach(t),qLr=i(Ve),zE=n(Ve,"LI",{});var wRe=s(zE);MFe=n(wRe,"STRONG",{});var z7t=s(MFe);NLr=r(z7t,"blenderbot-small"),z7t.forEach(t),jLr=r(wRe," \u2014 "),rJ=n(wRe,"A",{href:!0});var Q7t=s(rJ);DLr=r(Q7t,"FlaxBlenderbotSmallForConditionalGeneration"),Q7t.forEach(t),GLr=r(wRe," (BlenderbotSmall model)"),wRe.forEach(t),OLr=i(Ve),QE=n(Ve,"LI",{});var ARe=s(QE);EFe=n(ARe,"STRONG",{});var W7t=s(EFe);VLr=r(W7t,"encoder-decoder"),W7t.forEach(t),XLr=r(ARe," \u2014 "),tJ=n(ARe,"A",{href:!0});var H7t=s(tJ);zLr=r(H7t,"FlaxEncoderDecoderModel"),H7t.forEach(t),QLr=r(ARe," (Encoder decoder model)"),ARe.forEach(t),WLr=i(Ve),WE=n(Ve,"LI",{});var yRe=s(WE);CFe=n(yRe,"STRONG",{});var U7t=s(CFe);HLr=r(U7t,"marian"),U7t.forEach(t),ULr=r(yRe," \u2014 "),aJ=n(yRe,"A",{href:!0});var J7t=s(aJ);JLr=r(J7t,"FlaxMarianMTModel"),J7t.forEach(t),YLr=r(yRe," (Marian model)"),yRe.forEach(t),KLr=i(Ve),HE=n(Ve,"LI",{});var LRe=s(HE);wFe=n(LRe,"STRONG",{});var Y7t=s(wFe);ZLr=r(Y7t,"mbart"),Y7t.forEach(t),e8r=r(LRe," \u2014 "),nJ=n(LRe,"A",{href:!0});var K7t=s(nJ);o8r=r(K7t,"FlaxMBartForConditionalGeneration"),K7t.forEach(t),r8r=r(LRe," (mBART model)"),LRe.forEach(t),t8r=i(Ve),UE=n(Ve,"LI",{});var xRe=s(UE);AFe=n(xRe,"STRONG",{});var Z7t=s(AFe);a8r=r(Z7t,"mt5"),Z7t.forEach(t),n8r=r(xRe," \u2014 "),sJ=n(xRe,"A",{href:!0});var eMt=s(sJ);s8r=r(eMt,"FlaxMT5ForConditionalGeneration"),eMt.forEach(t),l8r=r(xRe," (mT5 model)"),xRe.forEach(t),i8r=i(Ve),JE=n(Ve,"LI",{});var $Re=s(JE);yFe=n($Re,"STRONG",{});var oMt=s(yFe);d8r=r(oMt,"pegasus"),oMt.forEach(t),c8r=r($Re," \u2014 "),lJ=n($Re,"A",{href:!0});var rMt=s(lJ);f8r=r(rMt,"FlaxPegasusForConditionalGeneration"),rMt.forEach(t),m8r=r($Re," (Pegasus model)"),$Re.forEach(t),g8r=i(Ve),YE=n(Ve,"LI",{});var kRe=s(YE);LFe=n(kRe,"STRONG",{});var tMt=s(LFe);h8r=r(tMt,"t5"),tMt.forEach(t),p8r=r(kRe," \u2014 "),iJ=n(kRe,"A",{href:!0});var aMt=s(iJ);u8r=r(aMt,"FlaxT5ForConditionalGeneration"),aMt.forEach(t),_8r=r(kRe," (T5 model)"),kRe.forEach(t),Ve.forEach(t),b8r=i(Dl),T(KE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),nIe=i(f),Sc=n(f,"H2",{class:!0});var dNe=s(Sc);ZE=n(dNe,"A",{id:!0,class:!0,href:!0});var nMt=s(ZE);xFe=n(nMt,"SPAN",{});var sMt=s(xFe);T(O8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),v8r=i(dNe),$Fe=n(dNe,"SPAN",{});var lMt=s($Fe);F8r=r(lMt,"FlaxAutoModelForSequenceClassification"),lMt.forEach(t),dNe.forEach(t),sIe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(V8.$$.fragment,Gl),T8r=i(Gl),Rc=n(Gl,"P",{});var WK=s(Rc);M8r=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dJ=n(WK,"A",{href:!0});var iMt=s(dJ);E8r=r(iMt,"from_pretrained()"),iMt.forEach(t),C8r=r(WK," class method or the "),cJ=n(WK,"A",{href:!0});var dMt=s(cJ);w8r=r(dMt,"from_config()"),dMt.forEach(t),A8r=r(WK,` class
method.`),WK.forEach(t),y8r=i(Gl),X8=n(Gl,"P",{});var cNe=s(X8);L8r=r(cNe,"This class cannot be instantiated directly using "),kFe=n(cNe,"CODE",{});var cMt=s(kFe);x8r=r(cMt,"__init__()"),cMt.forEach(t),$8r=r(cNe," (throws an error)."),cNe.forEach(t),k8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var l0=s(Gt);T(z8.$$.fragment,l0),S8r=i(l0),SFe=n(l0,"P",{});var fMt=s(SFe);R8r=r(fMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fMt.forEach(t),B8r=i(l0),Bc=n(l0,"P",{});var HK=s(Bc);P8r=r(HK,`Note:
Loading a model from its configuration file does `),RFe=n(HK,"STRONG",{});var mMt=s(RFe);I8r=r(mMt,"not"),mMt.forEach(t),q8r=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(HK,"A",{href:!0});var gMt=s(fJ);N8r=r(gMt,"from_pretrained()"),gMt.forEach(t),j8r=r(HK," to load the model weights."),HK.forEach(t),D8r=i(l0),T(eC.$$.fragment,l0),l0.forEach(t),G8r=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(Q8.$$.fragment,Ol),O8r=i(Ol),BFe=n(Ol,"P",{});var hMt=s(BFe);V8r=r(hMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hMt.forEach(t),X8r=i(Ol),hn=n(Ol,"P",{});var i0=s(hn);z8r=r(i0,"The model class to instantiate is selected based on the "),PFe=n(i0,"CODE",{});var pMt=s(PFe);Q8r=r(pMt,"model_type"),pMt.forEach(t),W8r=r(i0,` property of the config object (either
passed as an argument or loaded from `),IFe=n(i0,"CODE",{});var uMt=s(IFe);H8r=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),U8r=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(i0,"CODE",{});var _Mt=s(qFe);J8r=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),Y8r=r(i0,":"),i0.forEach(t),K8r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);oC=n(Pe,"LI",{});var SRe=s(oC);NFe=n(SRe,"STRONG",{});var bMt=s(NFe);Z8r=r(bMt,"albert"),bMt.forEach(t),exr=r(SRe," \u2014 "),mJ=n(SRe,"A",{href:!0});var vMt=s(mJ);oxr=r(vMt,"FlaxAlbertForSequenceClassification"),vMt.forEach(t),rxr=r(SRe," (ALBERT model)"),SRe.forEach(t),txr=i(Pe),rC=n(Pe,"LI",{});var RRe=s(rC);jFe=n(RRe,"STRONG",{});var FMt=s(jFe);axr=r(FMt,"bart"),FMt.forEach(t),nxr=r(RRe," \u2014 "),gJ=n(RRe,"A",{href:!0});var TMt=s(gJ);sxr=r(TMt,"FlaxBartForSequenceClassification"),TMt.forEach(t),lxr=r(RRe," (BART model)"),RRe.forEach(t),ixr=i(Pe),tC=n(Pe,"LI",{});var BRe=s(tC);DFe=n(BRe,"STRONG",{});var MMt=s(DFe);dxr=r(MMt,"bert"),MMt.forEach(t),cxr=r(BRe," \u2014 "),hJ=n(BRe,"A",{href:!0});var EMt=s(hJ);fxr=r(EMt,"FlaxBertForSequenceClassification"),EMt.forEach(t),mxr=r(BRe," (BERT model)"),BRe.forEach(t),gxr=i(Pe),aC=n(Pe,"LI",{});var PRe=s(aC);GFe=n(PRe,"STRONG",{});var CMt=s(GFe);hxr=r(CMt,"big_bird"),CMt.forEach(t),pxr=r(PRe," \u2014 "),pJ=n(PRe,"A",{href:!0});var wMt=s(pJ);uxr=r(wMt,"FlaxBigBirdForSequenceClassification"),wMt.forEach(t),_xr=r(PRe," (BigBird model)"),PRe.forEach(t),bxr=i(Pe),nC=n(Pe,"LI",{});var IRe=s(nC);OFe=n(IRe,"STRONG",{});var AMt=s(OFe);vxr=r(AMt,"distilbert"),AMt.forEach(t),Fxr=r(IRe," \u2014 "),uJ=n(IRe,"A",{href:!0});var yMt=s(uJ);Txr=r(yMt,"FlaxDistilBertForSequenceClassification"),yMt.forEach(t),Mxr=r(IRe," (DistilBERT model)"),IRe.forEach(t),Exr=i(Pe),sC=n(Pe,"LI",{});var qRe=s(sC);VFe=n(qRe,"STRONG",{});var LMt=s(VFe);Cxr=r(LMt,"electra"),LMt.forEach(t),wxr=r(qRe," \u2014 "),_J=n(qRe,"A",{href:!0});var xMt=s(_J);Axr=r(xMt,"FlaxElectraForSequenceClassification"),xMt.forEach(t),yxr=r(qRe," (ELECTRA model)"),qRe.forEach(t),Lxr=i(Pe),lC=n(Pe,"LI",{});var NRe=s(lC);XFe=n(NRe,"STRONG",{});var $Mt=s(XFe);xxr=r($Mt,"mbart"),$Mt.forEach(t),$xr=r(NRe," \u2014 "),bJ=n(NRe,"A",{href:!0});var kMt=s(bJ);kxr=r(kMt,"FlaxMBartForSequenceClassification"),kMt.forEach(t),Sxr=r(NRe," (mBART model)"),NRe.forEach(t),Rxr=i(Pe),iC=n(Pe,"LI",{});var jRe=s(iC);zFe=n(jRe,"STRONG",{});var SMt=s(zFe);Bxr=r(SMt,"roberta"),SMt.forEach(t),Pxr=r(jRe," \u2014 "),vJ=n(jRe,"A",{href:!0});var RMt=s(vJ);Ixr=r(RMt,"FlaxRobertaForSequenceClassification"),RMt.forEach(t),qxr=r(jRe," (RoBERTa model)"),jRe.forEach(t),Nxr=i(Pe),dC=n(Pe,"LI",{});var DRe=s(dC);QFe=n(DRe,"STRONG",{});var BMt=s(QFe);jxr=r(BMt,"roformer"),BMt.forEach(t),Dxr=r(DRe," \u2014 "),FJ=n(DRe,"A",{href:!0});var PMt=s(FJ);Gxr=r(PMt,"FlaxRoFormerForSequenceClassification"),PMt.forEach(t),Oxr=r(DRe," (RoFormer model)"),DRe.forEach(t),Vxr=i(Pe),cC=n(Pe,"LI",{});var GRe=s(cC);WFe=n(GRe,"STRONG",{});var IMt=s(WFe);Xxr=r(IMt,"xlm-roberta"),IMt.forEach(t),zxr=r(GRe," \u2014 "),TJ=n(GRe,"A",{href:!0});var qMt=s(TJ);Qxr=r(qMt,"FlaxXLMRobertaForSequenceClassification"),qMt.forEach(t),Wxr=r(GRe," (XLM-RoBERTa model)"),GRe.forEach(t),Pe.forEach(t),Hxr=i(Ol),T(fC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),lIe=i(f),Pc=n(f,"H2",{class:!0});var fNe=s(Pc);mC=n(fNe,"A",{id:!0,class:!0,href:!0});var NMt=s(mC);HFe=n(NMt,"SPAN",{});var jMt=s(HFe);T(W8.$$.fragment,jMt),jMt.forEach(t),NMt.forEach(t),Uxr=i(fNe),UFe=n(fNe,"SPAN",{});var DMt=s(UFe);Jxr=r(DMt,"FlaxAutoModelForQuestionAnswering"),DMt.forEach(t),fNe.forEach(t),iIe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(H8.$$.fragment,Vl),Yxr=i(Vl),Ic=n(Vl,"P",{});var UK=s(Ic);Kxr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=n(UK,"A",{href:!0});var GMt=s(MJ);Zxr=r(GMt,"from_pretrained()"),GMt.forEach(t),e9r=r(UK," class method or the "),EJ=n(UK,"A",{href:!0});var OMt=s(EJ);o9r=r(OMt,"from_config()"),OMt.forEach(t),r9r=r(UK,` class
method.`),UK.forEach(t),t9r=i(Vl),U8=n(Vl,"P",{});var mNe=s(U8);a9r=r(mNe,"This class cannot be instantiated directly using "),JFe=n(mNe,"CODE",{});var VMt=s(JFe);n9r=r(VMt,"__init__()"),VMt.forEach(t),s9r=r(mNe," (throws an error)."),mNe.forEach(t),l9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var d0=s(Ot);T(J8.$$.fragment,d0),i9r=i(d0),YFe=n(d0,"P",{});var XMt=s(YFe);d9r=r(XMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XMt.forEach(t),c9r=i(d0),qc=n(d0,"P",{});var JK=s(qc);f9r=r(JK,`Note:
Loading a model from its configuration file does `),KFe=n(JK,"STRONG",{});var zMt=s(KFe);m9r=r(zMt,"not"),zMt.forEach(t),g9r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(JK,"A",{href:!0});var QMt=s(CJ);h9r=r(QMt,"from_pretrained()"),QMt.forEach(t),p9r=r(JK," to load the model weights."),JK.forEach(t),u9r=i(d0),T(gC.$$.fragment,d0),d0.forEach(t),_9r=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(Y8.$$.fragment,Xl),b9r=i(Xl),ZFe=n(Xl,"P",{});var WMt=s(ZFe);v9r=r(WMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WMt.forEach(t),F9r=i(Xl),pn=n(Xl,"P",{});var c0=s(pn);T9r=r(c0,"The model class to instantiate is selected based on the "),eTe=n(c0,"CODE",{});var HMt=s(eTe);M9r=r(HMt,"model_type"),HMt.forEach(t),E9r=r(c0,` property of the config object (either
passed as an argument or loaded from `),oTe=n(c0,"CODE",{});var UMt=s(oTe);C9r=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),w9r=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(c0,"CODE",{});var JMt=s(rTe);A9r=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),y9r=r(c0,":"),c0.forEach(t),L9r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);hC=n(Ie,"LI",{});var ORe=s(hC);tTe=n(ORe,"STRONG",{});var YMt=s(tTe);x9r=r(YMt,"albert"),YMt.forEach(t),$9r=r(ORe," \u2014 "),wJ=n(ORe,"A",{href:!0});var KMt=s(wJ);k9r=r(KMt,"FlaxAlbertForQuestionAnswering"),KMt.forEach(t),S9r=r(ORe," (ALBERT model)"),ORe.forEach(t),R9r=i(Ie),pC=n(Ie,"LI",{});var VRe=s(pC);aTe=n(VRe,"STRONG",{});var ZMt=s(aTe);B9r=r(ZMt,"bart"),ZMt.forEach(t),P9r=r(VRe," \u2014 "),AJ=n(VRe,"A",{href:!0});var e4t=s(AJ);I9r=r(e4t,"FlaxBartForQuestionAnswering"),e4t.forEach(t),q9r=r(VRe," (BART model)"),VRe.forEach(t),N9r=i(Ie),uC=n(Ie,"LI",{});var XRe=s(uC);nTe=n(XRe,"STRONG",{});var o4t=s(nTe);j9r=r(o4t,"bert"),o4t.forEach(t),D9r=r(XRe," \u2014 "),yJ=n(XRe,"A",{href:!0});var r4t=s(yJ);G9r=r(r4t,"FlaxBertForQuestionAnswering"),r4t.forEach(t),O9r=r(XRe," (BERT model)"),XRe.forEach(t),V9r=i(Ie),_C=n(Ie,"LI",{});var zRe=s(_C);sTe=n(zRe,"STRONG",{});var t4t=s(sTe);X9r=r(t4t,"big_bird"),t4t.forEach(t),z9r=r(zRe," \u2014 "),LJ=n(zRe,"A",{href:!0});var a4t=s(LJ);Q9r=r(a4t,"FlaxBigBirdForQuestionAnswering"),a4t.forEach(t),W9r=r(zRe," (BigBird model)"),zRe.forEach(t),H9r=i(Ie),bC=n(Ie,"LI",{});var QRe=s(bC);lTe=n(QRe,"STRONG",{});var n4t=s(lTe);U9r=r(n4t,"distilbert"),n4t.forEach(t),J9r=r(QRe," \u2014 "),xJ=n(QRe,"A",{href:!0});var s4t=s(xJ);Y9r=r(s4t,"FlaxDistilBertForQuestionAnswering"),s4t.forEach(t),K9r=r(QRe," (DistilBERT model)"),QRe.forEach(t),Z9r=i(Ie),vC=n(Ie,"LI",{});var WRe=s(vC);iTe=n(WRe,"STRONG",{});var l4t=s(iTe);e$r=r(l4t,"electra"),l4t.forEach(t),o$r=r(WRe," \u2014 "),$J=n(WRe,"A",{href:!0});var i4t=s($J);r$r=r(i4t,"FlaxElectraForQuestionAnswering"),i4t.forEach(t),t$r=r(WRe," (ELECTRA model)"),WRe.forEach(t),a$r=i(Ie),FC=n(Ie,"LI",{});var HRe=s(FC);dTe=n(HRe,"STRONG",{});var d4t=s(dTe);n$r=r(d4t,"mbart"),d4t.forEach(t),s$r=r(HRe," \u2014 "),kJ=n(HRe,"A",{href:!0});var c4t=s(kJ);l$r=r(c4t,"FlaxMBartForQuestionAnswering"),c4t.forEach(t),i$r=r(HRe," (mBART model)"),HRe.forEach(t),d$r=i(Ie),TC=n(Ie,"LI",{});var URe=s(TC);cTe=n(URe,"STRONG",{});var f4t=s(cTe);c$r=r(f4t,"roberta"),f4t.forEach(t),f$r=r(URe," \u2014 "),SJ=n(URe,"A",{href:!0});var m4t=s(SJ);m$r=r(m4t,"FlaxRobertaForQuestionAnswering"),m4t.forEach(t),g$r=r(URe," (RoBERTa model)"),URe.forEach(t),h$r=i(Ie),MC=n(Ie,"LI",{});var JRe=s(MC);fTe=n(JRe,"STRONG",{});var g4t=s(fTe);p$r=r(g4t,"roformer"),g4t.forEach(t),u$r=r(JRe," \u2014 "),RJ=n(JRe,"A",{href:!0});var h4t=s(RJ);_$r=r(h4t,"FlaxRoFormerForQuestionAnswering"),h4t.forEach(t),b$r=r(JRe," (RoFormer model)"),JRe.forEach(t),v$r=i(Ie),EC=n(Ie,"LI",{});var YRe=s(EC);mTe=n(YRe,"STRONG",{});var p4t=s(mTe);F$r=r(p4t,"xlm-roberta"),p4t.forEach(t),T$r=r(YRe," \u2014 "),BJ=n(YRe,"A",{href:!0});var u4t=s(BJ);M$r=r(u4t,"FlaxXLMRobertaForQuestionAnswering"),u4t.forEach(t),E$r=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),Ie.forEach(t),C$r=i(Xl),T(CC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),dIe=i(f),Nc=n(f,"H2",{class:!0});var gNe=s(Nc);wC=n(gNe,"A",{id:!0,class:!0,href:!0});var _4t=s(wC);gTe=n(_4t,"SPAN",{});var b4t=s(gTe);T(K8.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),w$r=i(gNe),hTe=n(gNe,"SPAN",{});var v4t=s(hTe);A$r=r(v4t,"FlaxAutoModelForTokenClassification"),v4t.forEach(t),gNe.forEach(t),cIe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(Z8.$$.fragment,zl),y$r=i(zl),jc=n(zl,"P",{});var YK=s(jc);L$r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PJ=n(YK,"A",{href:!0});var F4t=s(PJ);x$r=r(F4t,"from_pretrained()"),F4t.forEach(t),$$r=r(YK," class method or the "),IJ=n(YK,"A",{href:!0});var T4t=s(IJ);k$r=r(T4t,"from_config()"),T4t.forEach(t),S$r=r(YK,` class
method.`),YK.forEach(t),R$r=i(zl),ex=n(zl,"P",{});var hNe=s(ex);B$r=r(hNe,"This class cannot be instantiated directly using "),pTe=n(hNe,"CODE",{});var M4t=s(pTe);P$r=r(M4t,"__init__()"),M4t.forEach(t),I$r=r(hNe," (throws an error)."),hNe.forEach(t),q$r=i(zl),Vt=n(zl,"DIV",{class:!0});var f0=s(Vt);T(ox.$$.fragment,f0),N$r=i(f0),uTe=n(f0,"P",{});var E4t=s(uTe);j$r=r(E4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E4t.forEach(t),D$r=i(f0),Dc=n(f0,"P",{});var KK=s(Dc);G$r=r(KK,`Note:
Loading a model from its configuration file does `),_Te=n(KK,"STRONG",{});var C4t=s(_Te);O$r=r(C4t,"not"),C4t.forEach(t),V$r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(KK,"A",{href:!0});var w4t=s(qJ);X$r=r(w4t,"from_pretrained()"),w4t.forEach(t),z$r=r(KK," to load the model weights."),KK.forEach(t),Q$r=i(f0),T(AC.$$.fragment,f0),f0.forEach(t),W$r=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(rx.$$.fragment,Ql),H$r=i(Ql),bTe=n(Ql,"P",{});var A4t=s(bTe);U$r=r(A4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),A4t.forEach(t),J$r=i(Ql),un=n(Ql,"P",{});var m0=s(un);Y$r=r(m0,"The model class to instantiate is selected based on the "),vTe=n(m0,"CODE",{});var y4t=s(vTe);K$r=r(y4t,"model_type"),y4t.forEach(t),Z$r=r(m0,` property of the config object (either
passed as an argument or loaded from `),FTe=n(m0,"CODE",{});var L4t=s(FTe);ekr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),okr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(m0,"CODE",{});var x4t=s(TTe);rkr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),tkr=r(m0,":"),m0.forEach(t),akr=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);yC=n(Fo,"LI",{});var KRe=s(yC);MTe=n(KRe,"STRONG",{});var $4t=s(MTe);nkr=r($4t,"albert"),$4t.forEach(t),skr=r(KRe," \u2014 "),NJ=n(KRe,"A",{href:!0});var k4t=s(NJ);lkr=r(k4t,"FlaxAlbertForTokenClassification"),k4t.forEach(t),ikr=r(KRe," (ALBERT model)"),KRe.forEach(t),dkr=i(Fo),LC=n(Fo,"LI",{});var ZRe=s(LC);ETe=n(ZRe,"STRONG",{});var S4t=s(ETe);ckr=r(S4t,"bert"),S4t.forEach(t),fkr=r(ZRe," \u2014 "),jJ=n(ZRe,"A",{href:!0});var R4t=s(jJ);mkr=r(R4t,"FlaxBertForTokenClassification"),R4t.forEach(t),gkr=r(ZRe," (BERT model)"),ZRe.forEach(t),hkr=i(Fo),xC=n(Fo,"LI",{});var eBe=s(xC);CTe=n(eBe,"STRONG",{});var B4t=s(CTe);pkr=r(B4t,"big_bird"),B4t.forEach(t),ukr=r(eBe," \u2014 "),DJ=n(eBe,"A",{href:!0});var P4t=s(DJ);_kr=r(P4t,"FlaxBigBirdForTokenClassification"),P4t.forEach(t),bkr=r(eBe," (BigBird model)"),eBe.forEach(t),vkr=i(Fo),$C=n(Fo,"LI",{});var oBe=s($C);wTe=n(oBe,"STRONG",{});var I4t=s(wTe);Fkr=r(I4t,"distilbert"),I4t.forEach(t),Tkr=r(oBe," \u2014 "),GJ=n(oBe,"A",{href:!0});var q4t=s(GJ);Mkr=r(q4t,"FlaxDistilBertForTokenClassification"),q4t.forEach(t),Ekr=r(oBe," (DistilBERT model)"),oBe.forEach(t),Ckr=i(Fo),kC=n(Fo,"LI",{});var rBe=s(kC);ATe=n(rBe,"STRONG",{});var N4t=s(ATe);wkr=r(N4t,"electra"),N4t.forEach(t),Akr=r(rBe," \u2014 "),OJ=n(rBe,"A",{href:!0});var j4t=s(OJ);ykr=r(j4t,"FlaxElectraForTokenClassification"),j4t.forEach(t),Lkr=r(rBe," (ELECTRA model)"),rBe.forEach(t),xkr=i(Fo),SC=n(Fo,"LI",{});var tBe=s(SC);yTe=n(tBe,"STRONG",{});var D4t=s(yTe);$kr=r(D4t,"roberta"),D4t.forEach(t),kkr=r(tBe," \u2014 "),VJ=n(tBe,"A",{href:!0});var G4t=s(VJ);Skr=r(G4t,"FlaxRobertaForTokenClassification"),G4t.forEach(t),Rkr=r(tBe," (RoBERTa model)"),tBe.forEach(t),Bkr=i(Fo),RC=n(Fo,"LI",{});var aBe=s(RC);LTe=n(aBe,"STRONG",{});var O4t=s(LTe);Pkr=r(O4t,"roformer"),O4t.forEach(t),Ikr=r(aBe," \u2014 "),XJ=n(aBe,"A",{href:!0});var V4t=s(XJ);qkr=r(V4t,"FlaxRoFormerForTokenClassification"),V4t.forEach(t),Nkr=r(aBe," (RoFormer model)"),aBe.forEach(t),jkr=i(Fo),BC=n(Fo,"LI",{});var nBe=s(BC);xTe=n(nBe,"STRONG",{});var X4t=s(xTe);Dkr=r(X4t,"xlm-roberta"),X4t.forEach(t),Gkr=r(nBe," \u2014 "),zJ=n(nBe,"A",{href:!0});var z4t=s(zJ);Okr=r(z4t,"FlaxXLMRobertaForTokenClassification"),z4t.forEach(t),Vkr=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),Fo.forEach(t),Xkr=i(Ql),T(PC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),fIe=i(f),Gc=n(f,"H2",{class:!0});var pNe=s(Gc);IC=n(pNe,"A",{id:!0,class:!0,href:!0});var Q4t=s(IC);$Te=n(Q4t,"SPAN",{});var W4t=s($Te);T(tx.$$.fragment,W4t),W4t.forEach(t),Q4t.forEach(t),zkr=i(pNe),kTe=n(pNe,"SPAN",{});var H4t=s(kTe);Qkr=r(H4t,"FlaxAutoModelForMultipleChoice"),H4t.forEach(t),pNe.forEach(t),mIe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(ax.$$.fragment,Wl),Wkr=i(Wl),Oc=n(Wl,"P",{});var ZK=s(Oc);Hkr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=n(ZK,"A",{href:!0});var U4t=s(QJ);Ukr=r(U4t,"from_pretrained()"),U4t.forEach(t),Jkr=r(ZK," class method or the "),WJ=n(ZK,"A",{href:!0});var J4t=s(WJ);Ykr=r(J4t,"from_config()"),J4t.forEach(t),Kkr=r(ZK,` class
method.`),ZK.forEach(t),Zkr=i(Wl),nx=n(Wl,"P",{});var uNe=s(nx);eSr=r(uNe,"This class cannot be instantiated directly using "),STe=n(uNe,"CODE",{});var Y4t=s(STe);oSr=r(Y4t,"__init__()"),Y4t.forEach(t),rSr=r(uNe," (throws an error)."),uNe.forEach(t),tSr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var g0=s(Xt);T(sx.$$.fragment,g0),aSr=i(g0),RTe=n(g0,"P",{});var K4t=s(RTe);nSr=r(K4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K4t.forEach(t),sSr=i(g0),Vc=n(g0,"P",{});var eZ=s(Vc);lSr=r(eZ,`Note:
Loading a model from its configuration file does `),BTe=n(eZ,"STRONG",{});var Z4t=s(BTe);iSr=r(Z4t,"not"),Z4t.forEach(t),dSr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(eZ,"A",{href:!0});var eEt=s(HJ);cSr=r(eEt,"from_pretrained()"),eEt.forEach(t),fSr=r(eZ," to load the model weights."),eZ.forEach(t),mSr=i(g0),T(qC.$$.fragment,g0),g0.forEach(t),gSr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(lx.$$.fragment,Hl),hSr=i(Hl),PTe=n(Hl,"P",{});var oEt=s(PTe);pSr=r(oEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oEt.forEach(t),uSr=i(Hl),_n=n(Hl,"P",{});var h0=s(_n);_Sr=r(h0,"The model class to instantiate is selected based on the "),ITe=n(h0,"CODE",{});var rEt=s(ITe);bSr=r(rEt,"model_type"),rEt.forEach(t),vSr=r(h0,` property of the config object (either
passed as an argument or loaded from `),qTe=n(h0,"CODE",{});var tEt=s(qTe);FSr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),TSr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(h0,"CODE",{});var aEt=s(NTe);MSr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),ESr=r(h0,":"),h0.forEach(t),CSr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);NC=n(To,"LI",{});var sBe=s(NC);jTe=n(sBe,"STRONG",{});var nEt=s(jTe);wSr=r(nEt,"albert"),nEt.forEach(t),ASr=r(sBe," \u2014 "),UJ=n(sBe,"A",{href:!0});var sEt=s(UJ);ySr=r(sEt,"FlaxAlbertForMultipleChoice"),sEt.forEach(t),LSr=r(sBe," (ALBERT model)"),sBe.forEach(t),xSr=i(To),jC=n(To,"LI",{});var lBe=s(jC);DTe=n(lBe,"STRONG",{});var lEt=s(DTe);$Sr=r(lEt,"bert"),lEt.forEach(t),kSr=r(lBe," \u2014 "),JJ=n(lBe,"A",{href:!0});var iEt=s(JJ);SSr=r(iEt,"FlaxBertForMultipleChoice"),iEt.forEach(t),RSr=r(lBe," (BERT model)"),lBe.forEach(t),BSr=i(To),DC=n(To,"LI",{});var iBe=s(DC);GTe=n(iBe,"STRONG",{});var dEt=s(GTe);PSr=r(dEt,"big_bird"),dEt.forEach(t),ISr=r(iBe," \u2014 "),YJ=n(iBe,"A",{href:!0});var cEt=s(YJ);qSr=r(cEt,"FlaxBigBirdForMultipleChoice"),cEt.forEach(t),NSr=r(iBe," (BigBird model)"),iBe.forEach(t),jSr=i(To),GC=n(To,"LI",{});var dBe=s(GC);OTe=n(dBe,"STRONG",{});var fEt=s(OTe);DSr=r(fEt,"distilbert"),fEt.forEach(t),GSr=r(dBe," \u2014 "),KJ=n(dBe,"A",{href:!0});var mEt=s(KJ);OSr=r(mEt,"FlaxDistilBertForMultipleChoice"),mEt.forEach(t),VSr=r(dBe," (DistilBERT model)"),dBe.forEach(t),XSr=i(To),OC=n(To,"LI",{});var cBe=s(OC);VTe=n(cBe,"STRONG",{});var gEt=s(VTe);zSr=r(gEt,"electra"),gEt.forEach(t),QSr=r(cBe," \u2014 "),ZJ=n(cBe,"A",{href:!0});var hEt=s(ZJ);WSr=r(hEt,"FlaxElectraForMultipleChoice"),hEt.forEach(t),HSr=r(cBe," (ELECTRA model)"),cBe.forEach(t),USr=i(To),VC=n(To,"LI",{});var fBe=s(VC);XTe=n(fBe,"STRONG",{});var pEt=s(XTe);JSr=r(pEt,"roberta"),pEt.forEach(t),YSr=r(fBe," \u2014 "),eY=n(fBe,"A",{href:!0});var uEt=s(eY);KSr=r(uEt,"FlaxRobertaForMultipleChoice"),uEt.forEach(t),ZSr=r(fBe," (RoBERTa model)"),fBe.forEach(t),eRr=i(To),XC=n(To,"LI",{});var mBe=s(XC);zTe=n(mBe,"STRONG",{});var _Et=s(zTe);oRr=r(_Et,"roformer"),_Et.forEach(t),rRr=r(mBe," \u2014 "),oY=n(mBe,"A",{href:!0});var bEt=s(oY);tRr=r(bEt,"FlaxRoFormerForMultipleChoice"),bEt.forEach(t),aRr=r(mBe," (RoFormer model)"),mBe.forEach(t),nRr=i(To),zC=n(To,"LI",{});var gBe=s(zC);QTe=n(gBe,"STRONG",{});var vEt=s(QTe);sRr=r(vEt,"xlm-roberta"),vEt.forEach(t),lRr=r(gBe," \u2014 "),rY=n(gBe,"A",{href:!0});var FEt=s(rY);iRr=r(FEt,"FlaxXLMRobertaForMultipleChoice"),FEt.forEach(t),dRr=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),To.forEach(t),cRr=i(Hl),T(QC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),gIe=i(f),Xc=n(f,"H2",{class:!0});var _Ne=s(Xc);WC=n(_Ne,"A",{id:!0,class:!0,href:!0});var TEt=s(WC);WTe=n(TEt,"SPAN",{});var MEt=s(WTe);T(ix.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),fRr=i(_Ne),HTe=n(_Ne,"SPAN",{});var EEt=s(HTe);mRr=r(EEt,"FlaxAutoModelForNextSentencePrediction"),EEt.forEach(t),_Ne.forEach(t),hIe=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(dx.$$.fragment,Ul),gRr=i(Ul),zc=n(Ul,"P",{});var oZ=s(zc);hRr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=n(oZ,"A",{href:!0});var CEt=s(tY);pRr=r(CEt,"from_pretrained()"),CEt.forEach(t),uRr=r(oZ," class method or the "),aY=n(oZ,"A",{href:!0});var wEt=s(aY);_Rr=r(wEt,"from_config()"),wEt.forEach(t),bRr=r(oZ,` class
method.`),oZ.forEach(t),vRr=i(Ul),cx=n(Ul,"P",{});var bNe=s(cx);FRr=r(bNe,"This class cannot be instantiated directly using "),UTe=n(bNe,"CODE",{});var AEt=s(UTe);TRr=r(AEt,"__init__()"),AEt.forEach(t),MRr=r(bNe," (throws an error)."),bNe.forEach(t),ERr=i(Ul),zt=n(Ul,"DIV",{class:!0});var p0=s(zt);T(fx.$$.fragment,p0),CRr=i(p0),JTe=n(p0,"P",{});var yEt=s(JTe);wRr=r(yEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yEt.forEach(t),ARr=i(p0),Qc=n(p0,"P",{});var rZ=s(Qc);yRr=r(rZ,`Note:
Loading a model from its configuration file does `),YTe=n(rZ,"STRONG",{});var LEt=s(YTe);LRr=r(LEt,"not"),LEt.forEach(t),xRr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(rZ,"A",{href:!0});var xEt=s(nY);$Rr=r(xEt,"from_pretrained()"),xEt.forEach(t),kRr=r(rZ," to load the model weights."),rZ.forEach(t),SRr=i(p0),T(HC.$$.fragment,p0),p0.forEach(t),RRr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(mx.$$.fragment,Jl),BRr=i(Jl),KTe=n(Jl,"P",{});var $Et=s(KTe);PRr=r($Et,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Et.forEach(t),IRr=i(Jl),bn=n(Jl,"P",{});var u0=s(bn);qRr=r(u0,"The model class to instantiate is selected based on the "),ZTe=n(u0,"CODE",{});var kEt=s(ZTe);NRr=r(kEt,"model_type"),kEt.forEach(t),jRr=r(u0,` property of the config object (either
passed as an argument or loaded from `),e7e=n(u0,"CODE",{});var SEt=s(e7e);DRr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),GRr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(u0,"CODE",{});var REt=s(o7e);ORr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),VRr=r(u0,":"),u0.forEach(t),XRr=i(Jl),r7e=n(Jl,"UL",{});var BEt=s(r7e);UC=n(BEt,"LI",{});var hBe=s(UC);t7e=n(hBe,"STRONG",{});var PEt=s(t7e);zRr=r(PEt,"bert"),PEt.forEach(t),QRr=r(hBe," \u2014 "),sY=n(hBe,"A",{href:!0});var IEt=s(sY);WRr=r(IEt,"FlaxBertForNextSentencePrediction"),IEt.forEach(t),HRr=r(hBe," (BERT model)"),hBe.forEach(t),BEt.forEach(t),URr=i(Jl),T(JC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),pIe=i(f),Wc=n(f,"H2",{class:!0});var vNe=s(Wc);YC=n(vNe,"A",{id:!0,class:!0,href:!0});var qEt=s(YC);a7e=n(qEt,"SPAN",{});var NEt=s(a7e);T(gx.$$.fragment,NEt),NEt.forEach(t),qEt.forEach(t),JRr=i(vNe),n7e=n(vNe,"SPAN",{});var jEt=s(n7e);YRr=r(jEt,"FlaxAutoModelForImageClassification"),jEt.forEach(t),vNe.forEach(t),uIe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(hx.$$.fragment,Yl),KRr=i(Yl),Hc=n(Yl,"P",{});var tZ=s(Hc);ZRr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=n(tZ,"A",{href:!0});var DEt=s(lY);eBr=r(DEt,"from_pretrained()"),DEt.forEach(t),oBr=r(tZ," class method or the "),iY=n(tZ,"A",{href:!0});var GEt=s(iY);rBr=r(GEt,"from_config()"),GEt.forEach(t),tBr=r(tZ,` class
method.`),tZ.forEach(t),aBr=i(Yl),px=n(Yl,"P",{});var FNe=s(px);nBr=r(FNe,"This class cannot be instantiated directly using "),s7e=n(FNe,"CODE",{});var OEt=s(s7e);sBr=r(OEt,"__init__()"),OEt.forEach(t),lBr=r(FNe," (throws an error)."),FNe.forEach(t),iBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var _0=s(Qt);T(ux.$$.fragment,_0),dBr=i(_0),l7e=n(_0,"P",{});var VEt=s(l7e);cBr=r(VEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VEt.forEach(t),fBr=i(_0),Uc=n(_0,"P",{});var aZ=s(Uc);mBr=r(aZ,`Note:
Loading a model from its configuration file does `),i7e=n(aZ,"STRONG",{});var XEt=s(i7e);gBr=r(XEt,"not"),XEt.forEach(t),hBr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(aZ,"A",{href:!0});var zEt=s(dY);pBr=r(zEt,"from_pretrained()"),zEt.forEach(t),uBr=r(aZ," to load the model weights."),aZ.forEach(t),_Br=i(_0),T(KC.$$.fragment,_0),_0.forEach(t),bBr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(_x.$$.fragment,Kl),vBr=i(Kl),d7e=n(Kl,"P",{});var QEt=s(d7e);FBr=r(QEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QEt.forEach(t),TBr=i(Kl),vn=n(Kl,"P",{});var b0=s(vn);MBr=r(b0,"The model class to instantiate is selected based on the "),c7e=n(b0,"CODE",{});var WEt=s(c7e);EBr=r(WEt,"model_type"),WEt.forEach(t),CBr=r(b0,` property of the config object (either
passed as an argument or loaded from `),f7e=n(b0,"CODE",{});var HEt=s(f7e);wBr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),ABr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(b0,"CODE",{});var UEt=s(m7e);yBr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),LBr=r(b0,":"),b0.forEach(t),xBr=i(Kl),bx=n(Kl,"UL",{});var TNe=s(bx);ZC=n(TNe,"LI",{});var pBe=s(ZC);g7e=n(pBe,"STRONG",{});var JEt=s(g7e);$Br=r(JEt,"beit"),JEt.forEach(t),kBr=r(pBe," \u2014 "),cY=n(pBe,"A",{href:!0});var YEt=s(cY);SBr=r(YEt,"FlaxBeitForImageClassification"),YEt.forEach(t),RBr=r(pBe," (BEiT model)"),pBe.forEach(t),BBr=i(TNe),ew=n(TNe,"LI",{});var uBe=s(ew);h7e=n(uBe,"STRONG",{});var KEt=s(h7e);PBr=r(KEt,"vit"),KEt.forEach(t),IBr=r(uBe," \u2014 "),fY=n(uBe,"A",{href:!0});var ZEt=s(fY);qBr=r(ZEt,"FlaxViTForImageClassification"),ZEt.forEach(t),NBr=r(uBe," (ViT model)"),uBe.forEach(t),TNe.forEach(t),jBr=i(Kl),T(ow.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),_Ie=i(f),Jc=n(f,"H2",{class:!0});var MNe=s(Jc);rw=n(MNe,"A",{id:!0,class:!0,href:!0});var eCt=s(rw);p7e=n(eCt,"SPAN",{});var oCt=s(p7e);T(vx.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),DBr=i(MNe),u7e=n(MNe,"SPAN",{});var rCt=s(u7e);GBr=r(rCt,"FlaxAutoModelForVision2Seq"),rCt.forEach(t),MNe.forEach(t),bIe=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(Fx.$$.fragment,Zl),OBr=i(Zl),Yc=n(Zl,"P",{});var nZ=s(Yc);VBr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mY=n(nZ,"A",{href:!0});var tCt=s(mY);XBr=r(tCt,"from_pretrained()"),tCt.forEach(t),zBr=r(nZ," class method or the "),gY=n(nZ,"A",{href:!0});var aCt=s(gY);QBr=r(aCt,"from_config()"),aCt.forEach(t),WBr=r(nZ,` class
method.`),nZ.forEach(t),HBr=i(Zl),Tx=n(Zl,"P",{});var ENe=s(Tx);UBr=r(ENe,"This class cannot be instantiated directly using "),_7e=n(ENe,"CODE",{});var nCt=s(_7e);JBr=r(nCt,"__init__()"),nCt.forEach(t),YBr=r(ENe," (throws an error)."),ENe.forEach(t),KBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var v0=s(Wt);T(Mx.$$.fragment,v0),ZBr=i(v0),b7e=n(v0,"P",{});var sCt=s(b7e);ePr=r(sCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sCt.forEach(t),oPr=i(v0),Kc=n(v0,"P",{});var sZ=s(Kc);rPr=r(sZ,`Note:
Loading a model from its configuration file does `),v7e=n(sZ,"STRONG",{});var lCt=s(v7e);tPr=r(lCt,"not"),lCt.forEach(t),aPr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(sZ,"A",{href:!0});var iCt=s(hY);nPr=r(iCt,"from_pretrained()"),iCt.forEach(t),sPr=r(sZ," to load the model weights."),sZ.forEach(t),lPr=i(v0),T(tw.$$.fragment,v0),v0.forEach(t),iPr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(Ex.$$.fragment,ei),dPr=i(ei),F7e=n(ei,"P",{});var dCt=s(F7e);cPr=r(dCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dCt.forEach(t),fPr=i(ei),Fn=n(ei,"P",{});var F0=s(Fn);mPr=r(F0,"The model class to instantiate is selected based on the "),T7e=n(F0,"CODE",{});var cCt=s(T7e);gPr=r(cCt,"model_type"),cCt.forEach(t),hPr=r(F0,` property of the config object (either
passed as an argument or loaded from `),M7e=n(F0,"CODE",{});var fCt=s(M7e);pPr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),uPr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(F0,"CODE",{});var mCt=s(E7e);_Pr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),bPr=r(F0,":"),F0.forEach(t),vPr=i(ei),C7e=n(ei,"UL",{});var gCt=s(C7e);aw=n(gCt,"LI",{});var _Be=s(aw);w7e=n(_Be,"STRONG",{});var hCt=s(w7e);FPr=r(hCt,"vision-encoder-decoder"),hCt.forEach(t),TPr=r(_Be," \u2014 "),pY=n(_Be,"A",{href:!0});var pCt=s(pY);MPr=r(pCt,"FlaxVisionEncoderDecoderModel"),pCt.forEach(t),EPr=r(_Be," (Vision Encoder decoder model)"),_Be.forEach(t),gCt.forEach(t),CPr=i(ei),T(nw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(_At)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(O9,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(V9,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertConfig"),c(X9,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig"),c(z9,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitConfig"),c(Q9,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertConfig"),c(W9,"href","/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(H9,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdConfig"),c(U9,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(J9,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Y9,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(K9,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertConfig"),c(Z9,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineConfig"),c(e$,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPConfig"),c(o$,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertConfig"),c(r$,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextConfig"),c(t$,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLConfig"),c(a$,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(n$,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(s$,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(l$,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaConfig"),c(i$,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(d$,"href","/docs/transformers/pr_17135/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(c$,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTConfig"),c(f$,"href","/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrConfig"),c(m$,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertConfig"),c(g$,"href","/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRConfig"),c(h$,"href","/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTConfig"),c(p$,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraConfig"),c(u$,"href","/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_$,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertConfig"),c(b$,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetConfig"),c(v$,"href","/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTConfig"),c(F$,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelConfig"),c(T$,"href","/docs/transformers/pr_17135/en/model_doc/glpn#transformers.GLPNConfig"),c(M$,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Config"),c(E$,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(C$,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJConfig"),c(w$,"href","/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertConfig"),c(A$,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertConfig"),c(y$,"href","/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(L$,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(x$,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c($$,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDConfig"),c(k$,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerConfig"),c(S$,"href","/docs/transformers/pr_17135/en/model_doc/luke#transformers.LukeConfig"),c(R$,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertConfig"),c(B$,"href","/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Config"),c(P$,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianConfig"),c(I$,"href","/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(q$,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartConfig"),c(N$,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(j$,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(D$,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetConfig"),c(G$,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Config"),c(O$,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(V$,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(X$,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusConfig"),c(z$,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Q$,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartConfig"),c(W$,"href","/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(H$,"href","/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(U$,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(J$,"href","/docs/transformers/pr_17135/en/model_doc/rag#transformers.RagConfig"),c(Y$,"href","/docs/transformers/pr_17135/en/model_doc/realm#transformers.RealmConfig"),c(K$,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerConfig"),c(Z$,"href","/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetConfig"),c(ek,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertConfig"),c(ok,"href","/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetConfig"),c(rk,"href","/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertConfig"),c(tk,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaConfig"),c(ak,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerConfig"),c(nk,"href","/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerConfig"),c(sk,"href","/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWConfig"),c(lk,"href","/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDConfig"),c(ik,"href","/docs/transformers/pr_17135/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(dk,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ck,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(fk,"href","/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterConfig"),c(mk,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(gk,"href","/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinConfig"),c(hk,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Config"),c(pk,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasConfig"),c(uk,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartConfig"),c(_k,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(bk,"href","/docs/transformers/pr_17135/en/model_doc/trocr#transformers.TrOCRConfig"),c(vk,"href","/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Fk,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Tk,"href","/docs/transformers/pr_17135/en/model_doc/van#transformers.VanConfig"),c(Mk,"href","/docs/transformers/pr_17135/en/model_doc/vilt#transformers.ViltConfig"),c(Ek,"href","/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Ck,"href","/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(wk,"href","/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Ak,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTConfig"),c(yk,"href","/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Lk,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(xk,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMConfig"),c($k,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMConfig"),c(kk,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMConfig"),c(Sk,"href","/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Rk,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Bk,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Pk,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetConfig"),c(Ik,"href","/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosConfig"),c(qk,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"id","transformers.AutoTokenizer"),c(lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Nk,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jk,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizer"),c(Dk,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Gk,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartTokenizer"),c(Ok,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartTokenizerFast"),c(Vk,"href","/docs/transformers/pr_17135/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Xk,"href","/docs/transformers/pr_17135/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zk,"href","/docs/transformers/pr_17135/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Qk,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizer"),c(Wk,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizerFast"),c(Hk,"href","/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Uk,"href","/docs/transformers/pr_17135/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Jk,"href","/docs/transformers/pr_17135/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Yk,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Kk,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Zk,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eS,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oS,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rS,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tS,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(aS,"href","/docs/transformers/pr_17135/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nS,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sS,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lS,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineTokenizer"),c(iS,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPTokenizer"),c(dS,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cS,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(fS,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mS,"href","/docs/transformers/pr_17135/en/model_doc/cpm#transformers.CpmTokenizer"),c(gS,"href","/docs/transformers/pr_17135/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(hS,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(pS,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uS,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_S,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaTokenizer"),c(bS,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(vS,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(FS,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(TS,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(MS,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ES,"href","/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(CS,"href","/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(wS,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraTokenizer"),c(AS,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(yS,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(LS,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetTokenizer"),c(xS,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetTokenizerFast"),c($S,"href","/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(kS,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelTokenizer"),c(SS,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(RS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NS,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jS,"href","/docs/transformers/pr_17135/en/model_doc/herbert#transformers.HerbertTokenizer"),c(DS,"href","/docs/transformers/pr_17135/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OS,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VS,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XS,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(zS,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(QS,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(WS,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(HS,"href","/docs/transformers/pr_17135/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(US,"href","/docs/transformers/pr_17135/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JS,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDTokenizer"),c(YS,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDTokenizerFast"),c(KS,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZS,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eR,"href","/docs/transformers/pr_17135/en/model_doc/luke#transformers.LukeTokenizer"),c(oR,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rR,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aR,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianTokenizer"),c(nR,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartTokenizer"),c(sR,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lR,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iR,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dR,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizer"),c(cR,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17135/en/model_doc/mluke#transformers.MLukeTokenizer"),c(mR,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gR,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hR,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(pR,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uR,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.T5Tokenizer"),c(_R,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.T5TokenizerFast"),c(bR,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizer"),c(vR,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(TR,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(MR,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ER,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CR,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wR,"href","/docs/transformers/pr_17135/en/model_doc/phobert#transformers.PhobertTokenizer"),c(AR,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartTokenizer"),c(yR,"href","/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LR,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizer"),c(xR,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizerFast"),c($R,"href","/docs/transformers/pr_17135/en/model_doc/rag#transformers.RagTokenizer"),c(kR,"href","/docs/transformers/pr_17135/en/model_doc/realm#transformers.RealmTokenizer"),c(SR,"href","/docs/transformers/pr_17135/en/model_doc/realm#transformers.RealmTokenizerFast"),c(RR,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerTokenizer"),c(BR,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(PR,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertTokenizer"),c(IR,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(NR,"href","/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DR,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(OR,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(VR,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(XR,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zR,"href","/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterTokenizer"),c(QR,"href","/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(WR,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(HR,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.T5Tokenizer"),c(JR,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YR,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasTokenizer"),c(KR,"href","/docs/transformers/pr_17135/en/model_doc/tapex#transformers.TapexTokenizer"),c(ZR,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(eB,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(aB,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMTokenizer"),c(nB,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(sB,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMTokenizer"),c(lB,"href","/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(iB,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(dB,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(gB,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(hB,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizer"),c(pB,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoFeatureExtractor"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(uB,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(_B,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17135/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(LB,"href","/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c($B,"href","/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoProcessor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(GB,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(OB,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPProcessor"),c(VB,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XB,"href","/docs/transformers/pr_17135/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(HB,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(UB,"href","/docs/transformers/pr_17135/en/model_doc/trocr#transformers.TrOCRProcessor"),c(JB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17135/en/model_doc/vilt#transformers.ViltProcessor"),c(ZB,"href","/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(eP,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oP,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoModel"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(rP,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tP,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aP,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nP,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertModel"),c(sP,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartModel"),c(lP,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitModel"),c(iP,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertModel"),c(dP,"href","/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(cP,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdModel"),c(fP,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(mP,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(gP,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(hP,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertModel"),c(pP,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineModel"),c(uP,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.CLIPModel"),c(_P,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertModel"),c(bP,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextModel"),c(vP,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLModel"),c(FP,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(TP,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(MP,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(EP,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaModel"),c(CP,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wP,"href","/docs/transformers/pr_17135/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(AP,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTModel"),c(yP,"href","/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrModel"),c(LP,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertModel"),c(xP,"href","/docs/transformers/pr_17135/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($P,"href","/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTModel"),c(kP,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraModel"),c(SP,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertModel"),c(RP,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetModel"),c(BP,"href","/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTModel"),c(PP,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelModel"),c(IP,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qP,"href","/docs/transformers/pr_17135/en/model_doc/glpn#transformers.GLPNModel"),c(NP,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2Model"),c(jP,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(DP,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJModel"),c(GP,"href","/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertModel"),c(OP,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertModel"),c(VP,"href","/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(XP,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(zP,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(QP,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDModel"),c(WP,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerModel"),c(HP,"href","/docs/transformers/pr_17135/en/model_doc/luke#transformers.LukeModel"),c(UP,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertModel"),c(JP,"href","/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100Model"),c(YP,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianModel"),c(KP,"href","/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ZP,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartModel"),c(eI,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oI,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rI,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetModel"),c(tI,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5Model"),c(aI,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerModel"),c(nI,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(sI,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusModel"),c(lI,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverModel"),c(iI,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartModel"),c(dI,"href","/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerModel"),c(cI,"href","/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(fI,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertModel"),c(mI,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerModel"),c(gI,"href","/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetModel"),c(hI,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertModel"),c(pI,"href","/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetModel"),c(uI,"href","/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertModel"),c(_I,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaModel"),c(bI,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerModel"),c(vI,"href","/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerModel"),c(FI,"href","/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWModel"),c(TI,"href","/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDModel"),c(MI,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(EI,"href","/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterModel"),c(CI,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(wI,"href","/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinModel"),c(AI,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5Model"),c(yI,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasModel"),c(LI,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(xI,"href","/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechModel"),c($I,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kI,"href","/docs/transformers/pr_17135/en/model_doc/van#transformers.VanModel"),c(SI,"href","/docs/transformers/pr_17135/en/model_doc/vilt#transformers.ViltModel"),c(RI,"href","/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(BI,"href","/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertModel"),c(PI,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTModel"),c(II,"href","/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qI,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(NI,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMModel"),c(jI,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMModel"),c(DI,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMModel"),c(GI,"href","/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(OI,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(VI,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(XI,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetModel"),c(zI,"href","/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosModel"),c(QI,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tu,"id","transformers.AutoModelForPreTraining"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(WI,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HI,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UI,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JI,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForPreTraining"),c(YI,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KI,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForPreTraining"),c(ZI,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(eq,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oq,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rq,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tq,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aq,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nq,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sq,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lq,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iq,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dq,"href","/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(fq,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mq,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gq,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hq,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pq,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uq,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_q,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bq,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vq,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Fq,"href","/docs/transformers/pr_17135/en/model_doc/retribert#transformers.RetriBertModel"),c(Tq,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Mq,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Eq,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Cq,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(wq,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Aq,"href","/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(yq,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Lq,"href","/docs/transformers/pr_17135/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(xq,"href","/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c($q,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(kq,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Sq,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c_,"id","transformers.AutoModelForCausalLM"),c(c_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Pq,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qq,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nq,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForCausalLM"),c(jq,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17135/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Gq,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Oq,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Vq,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Xq,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zq,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Qq,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Hq,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Uq,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Yq,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Kq,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianForCausalLM"),c(Zq,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForCausalLM"),c(eN,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oN,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rN,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(tN,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(aN,"href","/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nN,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sN,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lN,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iN,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dN,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cN,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fN,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mN,"href","/docs/transformers/pr_17135/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gN,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hN,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(uN,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_N,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bN,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForMaskedLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(vN,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(EN,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CN,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForMaskedLM"),c(wN,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(AN,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yN,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xN,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($N,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kN,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(RN,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BN,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(PN,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(IN,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(NN,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jN,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(DN,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(VN,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(XN,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(zN,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(QN,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WN,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(UN,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(JN,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(YN,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KN,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ej,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oj,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForSeq2SeqLM"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(rj,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tj,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aj,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nj,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(cj,"href","/docs/transformers/pr_17135/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_17135/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.MarianMTModel"),c(hj,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17135/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17135/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ob,"id","transformers.AutoModelForSequenceClassification"),c(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ob,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yj,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xj,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($j,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(qj,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17135/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForMultipleChoice"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(bD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(CD,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(AD,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(LD,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(xD,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c($D,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(kD,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(RD,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(BD,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForNextSentencePrediction"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(JD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(eG,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(oG,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(rG,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(tG,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D2,"id","transformers.AutoModelForTokenClassification"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(aG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lG,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(iG,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForTokenClassification"),c(dG,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(cG,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(fG,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForTokenClassification"),c(mG,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(hG,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(pG,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(uG,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(bG,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(vG,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(FG,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(TG,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(MG,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(CG,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(wG,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(AG,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(yG,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(xG,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c($G,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(SG,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(RG,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BG,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PG,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(IG,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(qG,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NG,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(jG,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.AutoModelForQuestionAnswering"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(DG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OG,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VG,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_17135/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_17135/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(tO,"href","/docs/transformers/pr_17135/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17135/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17135/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17135/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17135/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17135/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17135/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17135/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17135/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CO,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yO,"href","/docs/transformers/pr_17135/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForTableQuestionAnswering"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(LO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.AutoModelForImageClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(SO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PO,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitForImageClassification"),c(IO,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(qO,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NO,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jO,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DO,"href","/docs/transformers/pr_17135/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GO,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(OO,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(VO,"href","/docs/transformers/pr_17135/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(XO,"href","/docs/transformers/pr_17135/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(zO,"href","/docs/transformers/pr_17135/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QO,"href","/docs/transformers/pr_17135/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WO,"href","/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(HO,"href","/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinForImageClassification"),c(UO,"href","/docs/transformers/pr_17135/en/model_doc/van#transformers.VanForImageClassification"),c(JO,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForVision2Seq"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(YO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.AutoModelForAudioClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(oV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.AutoModelForAudioFrameClassification"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(mV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_V,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bV,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForCTC"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(vV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(EV,"href","/docs/transformers/pr_17135/en/model_doc/hubert#transformers.HubertForCTC"),c(CV,"href","/docs/transformers/pr_17135/en/model_doc/sew#transformers.SEWForCTC"),c(wV,"href","/docs/transformers/pr_17135/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(yV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(LV,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xV,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c($V,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_17135/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BV,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForAudioXVector"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(PV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jV,"href","/docs/transformers/pr_17135/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(DV,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GV,"href","/docs/transformers/pr_17135/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForMaskedImageModeling"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(OV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17135/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QV,"href","/docs/transformers/pr_17135/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WV,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForObjectDetection"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(HV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KV,"href","/docs/transformers/pr_17135/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForImageSegmentation"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17135/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForSemanticSegmentation"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(tX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sX,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lX,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iX,"href","/docs/transformers/pr_17135/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dX,"href","/docs/transformers/pr_17135/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForInstanceSegmentation"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(cX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17135/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.TFAutoModel"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertModel"),c(bX,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartModel"),c(vX,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertModel"),c(FX,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(TX,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(MX,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertModel"),c(EX,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.TFCLIPModel"),c(CX,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertModel"),c(wX,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.TFConvNextModel"),c(AX,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yX,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(LX,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaModel"),c(xX,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c($X,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kX,"href","/docs/transformers/pr_17135/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(SX,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraModel"),c(RX,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(BX,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelModel"),c(PX,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(IX,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qX,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJModel"),c(NX,"href","/docs/transformers/pr_17135/en/model_doc/hubert#transformers.TFHubertModel"),c(jX,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DX,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.TFLEDModel"),c(GX,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerModel"),c(OX,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.TFLxmertModel"),c(VX,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.TFMarianModel"),c(XX,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.TFMBartModel"),c(zX,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QX,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WX,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.TFMT5Model"),c(HX,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(UX,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.TFPegasusModel"),c(JX,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertModel"),c(YX,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaModel"),c(KX,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ZX,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ez,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5Model"),c(oz,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasModel"),c(rz,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tz,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.TFViTModel"),c(az,"href","/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nz,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sz,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMModel"),c(lz,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iz,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModelForPreTraining"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gz,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hz,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pz,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uz,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_z,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bz,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vz,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Fz,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Tz,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Mz,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Ez,"href","/docs/transformers/pr_17135/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Cz,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wz,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Az,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yz,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Lz,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($z,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kz,"href","/docs/transformers/pr_17135/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Sz,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Rz,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Bz,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.TFAutoModelForCausalLM"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jz,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Dz,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Gz,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Oz,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Vz,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Xz,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zz,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Qz,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Wz,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Hz,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Uz,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForImageClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17135/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eQ,"href","/docs/transformers/pr_17135/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oQ,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForMaskedLM"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xQ,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($Q,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SQ,"href","/docs/transformers/pr_17135/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.TFMarianMTModel"),c(BQ,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForSequenceClassification"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_17135/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17135/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17135/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForMultipleChoice"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(_W,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(bW,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(vW,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(FW,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(TW,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(MW,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CW,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(wW,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yW,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(LW,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(xW,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($W,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(kW,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(SW,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(RW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17135/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForTokenClassification"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(qW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(GW,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OW,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(VW,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XW,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zW,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(QW,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(WW,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HW,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UW,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JW,"href","/docs/transformers/pr_17135/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YW,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KW,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eH,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oH,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rH,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tH,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aH,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nH,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForQuestionAnswering"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(sH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_17135/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_17135/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_17135/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_17135/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_17135/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(bH,"href","/docs/transformers/pr_17135/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_17135/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_17135/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_17135/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_17135/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_17135/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yH,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_17135/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForVision2Seq"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(xH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(RH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17135/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.FlaxAutoModel"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(qH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertModel"),c(GH,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartModel"),c(OH,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.FlaxBeitModel"),c(VH,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertModel"),c(XH,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(zH,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(QH,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(WH,"href","/docs/transformers/pr_17135/en/model_doc/clip#transformers.FlaxCLIPModel"),c(HH,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(UH,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraModel"),c(JH,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(YH,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(KH,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ZH,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.FlaxMarianModel"),c(eU,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartModel"),c(oU,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5Model"),c(rU,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(tU,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(aU,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(nU,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5Model"),c(sU,"href","/docs/transformers/pr_17135/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(lU,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.FlaxViTModel"),c(iU,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(dU,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(cU,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.FlaxAutoModelForCausalLM"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(fU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(pU,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(uU,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(_U,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(bU,"href","/docs/transformers/pr_17135/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(vU,"href","/docs/transformers/pr_17135/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(FU,"href","/docs/transformers/pr_17135/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(TU,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(MU,"href","/docs/transformers/pr_17135/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.FlaxAutoModelForPreTraining"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(EU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(yU,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LU,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(xU,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c($U,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(kU,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BU,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(PU,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_17135/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(qU,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.FlaxAutoModelForMaskedLM"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(NU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VU,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(zU,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(QU,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(WU,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JU,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_17135/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17135/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(aJ,"href","/docs/transformers/pr_17135/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(nJ,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17135/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17135/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17135/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17135/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17135/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.FlaxAutoModelForTokenClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(OJ,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(XJ,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(zJ,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17135/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17135/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17135/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17135/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17135/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17135/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17135/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17135/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForImageClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17135/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fY,"href","/docs/transformers/pr_17135/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17135/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17135/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,rf,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,T0),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,M0),e(Xe,En),e(Xe,Cn),e(Cn,E0),e(Xe,ni),e(Xe,wn),e(wn,C0),e(Xe,si),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,I9),e(Ae,li),e(li,q9),e(Ae,N9),b(f,Eo,_),b(f,Fa,_),e(Fa,j9),e(Fa,nf),e(nf,D9),e(Fa,CNe),b(f,bBe,_),b(f,ii,_),e(ii,sf),e(sf,lZ),M(w0,lZ,null),e(ii,wNe),e(ii,iZ),e(iZ,ANe),b(f,vBe,_),b(f,An,_),e(An,yNe),e(An,dZ),e(dZ,LNe),e(An,xNe),e(An,cZ),e(cZ,$Ne),e(An,kNe),b(f,FBe,_),M(A0,f,_),b(f,TBe,_),b(f,G9,_),e(G9,SNe),b(f,MBe,_),M(lf,f,_),b(f,EBe,_),b(f,di,_),e(di,df),e(df,fZ),M(y0,fZ,null),e(di,RNe),e(di,mZ),e(mZ,BNe),b(f,CBe,_),b(f,Co,_),M(L0,Co,null),e(Co,PNe),e(Co,x0),e(x0,INe),e(x0,O9),e(O9,qNe),e(x0,NNe),e(Co,jNe),e(Co,$0),e($0,DNe),e($0,gZ),e(gZ,GNe),e($0,ONe),e(Co,VNe),e(Co,Mr),M(k0,Mr,null),e(Mr,XNe),e(Mr,hZ),e(hZ,zNe),e(Mr,QNe),e(Mr,ci),e(ci,WNe),e(ci,pZ),e(pZ,HNe),e(ci,UNe),e(ci,uZ),e(uZ,JNe),e(ci,YNe),e(Mr,KNe),e(Mr,A),e(A,cf),e(cf,_Z),e(_Z,ZNe),e(cf,eje),e(cf,V9),e(V9,oje),e(cf,rje),e(A,tje),e(A,ff),e(ff,bZ),e(bZ,aje),e(ff,nje),e(ff,X9),e(X9,sje),e(ff,lje),e(A,ije),e(A,mf),e(mf,vZ),e(vZ,dje),e(mf,cje),e(mf,z9),e(z9,fje),e(mf,mje),e(A,gje),e(A,gf),e(gf,FZ),e(FZ,hje),e(gf,pje),e(gf,Q9),e(Q9,uje),e(gf,_je),e(A,bje),e(A,hf),e(hf,TZ),e(TZ,vje),e(hf,Fje),e(hf,W9),e(W9,Tje),e(hf,Mje),e(A,Eje),e(A,pf),e(pf,MZ),e(MZ,Cje),e(pf,wje),e(pf,H9),e(H9,Aje),e(pf,yje),e(A,Lje),e(A,uf),e(uf,EZ),e(EZ,xje),e(uf,$je),e(uf,U9),e(U9,kje),e(uf,Sje),e(A,Rje),e(A,_f),e(_f,CZ),e(CZ,Bje),e(_f,Pje),e(_f,J9),e(J9,Ije),e(_f,qje),e(A,Nje),e(A,bf),e(bf,wZ),e(wZ,jje),e(bf,Dje),e(bf,Y9),e(Y9,Gje),e(bf,Oje),e(A,Vje),e(A,vf),e(vf,AZ),e(AZ,Xje),e(vf,zje),e(vf,K9),e(K9,Qje),e(vf,Wje),e(A,Hje),e(A,Ff),e(Ff,yZ),e(yZ,Uje),e(Ff,Jje),e(Ff,Z9),e(Z9,Yje),e(Ff,Kje),e(A,Zje),e(A,Tf),e(Tf,LZ),e(LZ,eDe),e(Tf,oDe),e(Tf,e$),e(e$,rDe),e(Tf,tDe),e(A,aDe),e(A,Mf),e(Mf,xZ),e(xZ,nDe),e(Mf,sDe),e(Mf,o$),e(o$,lDe),e(Mf,iDe),e(A,dDe),e(A,Ef),e(Ef,$Z),e($Z,cDe),e(Ef,fDe),e(Ef,r$),e(r$,mDe),e(Ef,gDe),e(A,hDe),e(A,Cf),e(Cf,kZ),e(kZ,pDe),e(Cf,uDe),e(Cf,t$),e(t$,_De),e(Cf,bDe),e(A,vDe),e(A,wf),e(wf,SZ),e(SZ,FDe),e(wf,TDe),e(wf,a$),e(a$,MDe),e(wf,EDe),e(A,CDe),e(A,Af),e(Af,RZ),e(RZ,wDe),e(Af,ADe),e(Af,n$),e(n$,yDe),e(Af,LDe),e(A,xDe),e(A,yf),e(yf,BZ),e(BZ,$De),e(yf,kDe),e(yf,s$),e(s$,SDe),e(yf,RDe),e(A,BDe),e(A,Lf),e(Lf,PZ),e(PZ,PDe),e(Lf,IDe),e(Lf,l$),e(l$,qDe),e(Lf,NDe),e(A,jDe),e(A,xf),e(xf,IZ),e(IZ,DDe),e(xf,GDe),e(xf,i$),e(i$,ODe),e(xf,VDe),e(A,XDe),e(A,$f),e($f,qZ),e(qZ,zDe),e($f,QDe),e($f,d$),e(d$,WDe),e($f,HDe),e(A,UDe),e(A,kf),e(kf,NZ),e(NZ,JDe),e(kf,YDe),e(kf,c$),e(c$,KDe),e(kf,ZDe),e(A,eGe),e(A,Sf),e(Sf,jZ),e(jZ,oGe),e(Sf,rGe),e(Sf,f$),e(f$,tGe),e(Sf,aGe),e(A,nGe),e(A,Rf),e(Rf,DZ),e(DZ,sGe),e(Rf,lGe),e(Rf,m$),e(m$,iGe),e(Rf,dGe),e(A,cGe),e(A,Bf),e(Bf,GZ),e(GZ,fGe),e(Bf,mGe),e(Bf,g$),e(g$,gGe),e(Bf,hGe),e(A,pGe),e(A,Pf),e(Pf,OZ),e(OZ,uGe),e(Pf,_Ge),e(Pf,h$),e(h$,bGe),e(Pf,vGe),e(A,FGe),e(A,If),e(If,VZ),e(VZ,TGe),e(If,MGe),e(If,p$),e(p$,EGe),e(If,CGe),e(A,wGe),e(A,qf),e(qf,XZ),e(XZ,AGe),e(qf,yGe),e(qf,u$),e(u$,LGe),e(qf,xGe),e(A,$Ge),e(A,Nf),e(Nf,zZ),e(zZ,kGe),e(Nf,SGe),e(Nf,_$),e(_$,RGe),e(Nf,BGe),e(A,PGe),e(A,jf),e(jf,QZ),e(QZ,IGe),e(jf,qGe),e(jf,b$),e(b$,NGe),e(jf,jGe),e(A,DGe),e(A,Df),e(Df,WZ),e(WZ,GGe),e(Df,OGe),e(Df,v$),e(v$,VGe),e(Df,XGe),e(A,zGe),e(A,Gf),e(Gf,HZ),e(HZ,QGe),e(Gf,WGe),e(Gf,F$),e(F$,HGe),e(Gf,UGe),e(A,JGe),e(A,Of),e(Of,UZ),e(UZ,YGe),e(Of,KGe),e(Of,T$),e(T$,ZGe),e(Of,eOe),e(A,oOe),e(A,Vf),e(Vf,JZ),e(JZ,rOe),e(Vf,tOe),e(Vf,M$),e(M$,aOe),e(Vf,nOe),e(A,sOe),e(A,Xf),e(Xf,YZ),e(YZ,lOe),e(Xf,iOe),e(Xf,E$),e(E$,dOe),e(Xf,cOe),e(A,fOe),e(A,zf),e(zf,KZ),e(KZ,mOe),e(zf,gOe),e(zf,C$),e(C$,hOe),e(zf,pOe),e(A,uOe),e(A,Qf),e(Qf,ZZ),e(ZZ,_Oe),e(Qf,bOe),e(Qf,w$),e(w$,vOe),e(Qf,FOe),e(A,TOe),e(A,Wf),e(Wf,eee),e(eee,MOe),e(Wf,EOe),e(Wf,A$),e(A$,COe),e(Wf,wOe),e(A,AOe),e(A,Hf),e(Hf,oee),e(oee,yOe),e(Hf,LOe),e(Hf,y$),e(y$,xOe),e(Hf,$Oe),e(A,kOe),e(A,Uf),e(Uf,ree),e(ree,SOe),e(Uf,ROe),e(Uf,L$),e(L$,BOe),e(Uf,POe),e(A,IOe),e(A,Jf),e(Jf,tee),e(tee,qOe),e(Jf,NOe),e(Jf,x$),e(x$,jOe),e(Jf,DOe),e(A,GOe),e(A,Yf),e(Yf,aee),e(aee,OOe),e(Yf,VOe),e(Yf,$$),e($$,XOe),e(Yf,zOe),e(A,QOe),e(A,Kf),e(Kf,nee),e(nee,WOe),e(Kf,HOe),e(Kf,k$),e(k$,UOe),e(Kf,JOe),e(A,YOe),e(A,Zf),e(Zf,see),e(see,KOe),e(Zf,ZOe),e(Zf,S$),e(S$,eVe),e(Zf,oVe),e(A,rVe),e(A,em),e(em,lee),e(lee,tVe),e(em,aVe),e(em,R$),e(R$,nVe),e(em,sVe),e(A,lVe),e(A,om),e(om,iee),e(iee,iVe),e(om,dVe),e(om,B$),e(B$,cVe),e(om,fVe),e(A,mVe),e(A,rm),e(rm,dee),e(dee,gVe),e(rm,hVe),e(rm,P$),e(P$,pVe),e(rm,uVe),e(A,_Ve),e(A,tm),e(tm,cee),e(cee,bVe),e(tm,vVe),e(tm,I$),e(I$,FVe),e(tm,TVe),e(A,MVe),e(A,am),e(am,fee),e(fee,EVe),e(am,CVe),e(am,q$),e(q$,wVe),e(am,AVe),e(A,yVe),e(A,nm),e(nm,mee),e(mee,LVe),e(nm,xVe),e(nm,N$),e(N$,$Ve),e(nm,kVe),e(A,SVe),e(A,sm),e(sm,gee),e(gee,RVe),e(sm,BVe),e(sm,j$),e(j$,PVe),e(sm,IVe),e(A,qVe),e(A,lm),e(lm,hee),e(hee,NVe),e(lm,jVe),e(lm,D$),e(D$,DVe),e(lm,GVe),e(A,OVe),e(A,im),e(im,pee),e(pee,VVe),e(im,XVe),e(im,G$),e(G$,zVe),e(im,QVe),e(A,WVe),e(A,dm),e(dm,uee),e(uee,HVe),e(dm,UVe),e(dm,O$),e(O$,JVe),e(dm,YVe),e(A,KVe),e(A,cm),e(cm,_ee),e(_ee,ZVe),e(cm,eXe),e(cm,V$),e(V$,oXe),e(cm,rXe),e(A,tXe),e(A,fm),e(fm,bee),e(bee,aXe),e(fm,nXe),e(fm,X$),e(X$,sXe),e(fm,lXe),e(A,iXe),e(A,mm),e(mm,vee),e(vee,dXe),e(mm,cXe),e(mm,z$),e(z$,fXe),e(mm,mXe),e(A,gXe),e(A,gm),e(gm,Fee),e(Fee,hXe),e(gm,pXe),e(gm,Q$),e(Q$,uXe),e(gm,_Xe),e(A,bXe),e(A,hm),e(hm,Tee),e(Tee,vXe),e(hm,FXe),e(hm,W$),e(W$,TXe),e(hm,MXe),e(A,EXe),e(A,pm),e(pm,Mee),e(Mee,CXe),e(pm,wXe),e(pm,H$),e(H$,AXe),e(pm,yXe),e(A,LXe),e(A,um),e(um,Eee),e(Eee,xXe),e(um,$Xe),e(um,U$),e(U$,kXe),e(um,SXe),e(A,RXe),e(A,_m),e(_m,Cee),e(Cee,BXe),e(_m,PXe),e(_m,J$),e(J$,IXe),e(_m,qXe),e(A,NXe),e(A,bm),e(bm,wee),e(wee,jXe),e(bm,DXe),e(bm,Y$),e(Y$,GXe),e(bm,OXe),e(A,VXe),e(A,vm),e(vm,Aee),e(Aee,XXe),e(vm,zXe),e(vm,K$),e(K$,QXe),e(vm,WXe),e(A,HXe),e(A,Fm),e(Fm,yee),e(yee,UXe),e(Fm,JXe),e(Fm,Z$),e(Z$,YXe),e(Fm,KXe),e(A,ZXe),e(A,Tm),e(Tm,Lee),e(Lee,eze),e(Tm,oze),e(Tm,ek),e(ek,rze),e(Tm,tze),e(A,aze),e(A,Mm),e(Mm,xee),e(xee,nze),e(Mm,sze),e(Mm,ok),e(ok,lze),e(Mm,ize),e(A,dze),e(A,Em),e(Em,$ee),e($ee,cze),e(Em,fze),e(Em,rk),e(rk,mze),e(Em,gze),e(A,hze),e(A,Cm),e(Cm,kee),e(kee,pze),e(Cm,uze),e(Cm,tk),e(tk,_ze),e(Cm,bze),e(A,vze),e(A,wm),e(wm,See),e(See,Fze),e(wm,Tze),e(wm,ak),e(ak,Mze),e(wm,Eze),e(A,Cze),e(A,Am),e(Am,Ree),e(Ree,wze),e(Am,Aze),e(Am,nk),e(nk,yze),e(Am,Lze),e(A,xze),e(A,ym),e(ym,Bee),e(Bee,$ze),e(ym,kze),e(ym,sk),e(sk,Sze),e(ym,Rze),e(A,Bze),e(A,Lm),e(Lm,Pee),e(Pee,Pze),e(Lm,Ize),e(Lm,lk),e(lk,qze),e(Lm,Nze),e(A,jze),e(A,xm),e(xm,Iee),e(Iee,Dze),e(xm,Gze),e(xm,ik),e(ik,Oze),e(xm,Vze),e(A,Xze),e(A,$m),e($m,qee),e(qee,zze),e($m,Qze),e($m,dk),e(dk,Wze),e($m,Hze),e(A,Uze),e(A,km),e(km,Nee),e(Nee,Jze),e(km,Yze),e(km,ck),e(ck,Kze),e(km,Zze),e(A,eQe),e(A,Sm),e(Sm,jee),e(jee,oQe),e(Sm,rQe),e(Sm,fk),e(fk,tQe),e(Sm,aQe),e(A,nQe),e(A,Rm),e(Rm,Dee),e(Dee,sQe),e(Rm,lQe),e(Rm,mk),e(mk,iQe),e(Rm,dQe),e(A,cQe),e(A,Bm),e(Bm,Gee),e(Gee,fQe),e(Bm,mQe),e(Bm,gk),e(gk,gQe),e(Bm,hQe),e(A,pQe),e(A,Pm),e(Pm,Oee),e(Oee,uQe),e(Pm,_Qe),e(Pm,hk),e(hk,bQe),e(Pm,vQe),e(A,FQe),e(A,Im),e(Im,Vee),e(Vee,TQe),e(Im,MQe),e(Im,pk),e(pk,EQe),e(Im,CQe),e(A,wQe),e(A,qm),e(qm,Xee),e(Xee,AQe),e(qm,yQe),e(qm,uk),e(uk,LQe),e(qm,xQe),e(A,$Qe),e(A,Nm),e(Nm,zee),e(zee,kQe),e(Nm,SQe),e(Nm,_k),e(_k,RQe),e(Nm,BQe),e(A,PQe),e(A,jm),e(jm,Qee),e(Qee,IQe),e(jm,qQe),e(jm,bk),e(bk,NQe),e(jm,jQe),e(A,DQe),e(A,Dm),e(Dm,Wee),e(Wee,GQe),e(Dm,OQe),e(Dm,vk),e(vk,VQe),e(Dm,XQe),e(A,zQe),e(A,Gm),e(Gm,Hee),e(Hee,QQe),e(Gm,WQe),e(Gm,Fk),e(Fk,HQe),e(Gm,UQe),e(A,JQe),e(A,Om),e(Om,Uee),e(Uee,YQe),e(Om,KQe),e(Om,Tk),e(Tk,ZQe),e(Om,eWe),e(A,oWe),e(A,Vm),e(Vm,Jee),e(Jee,rWe),e(Vm,tWe),e(Vm,Mk),e(Mk,aWe),e(Vm,nWe),e(A,sWe),e(A,Xm),e(Xm,Yee),e(Yee,lWe),e(Xm,iWe),e(Xm,Ek),e(Ek,dWe),e(Xm,cWe),e(A,fWe),e(A,zm),e(zm,Kee),e(Kee,mWe),e(zm,gWe),e(zm,Ck),e(Ck,hWe),e(zm,pWe),e(A,uWe),e(A,Qm),e(Qm,Zee),e(Zee,_We),e(Qm,bWe),e(Qm,wk),e(wk,vWe),e(Qm,FWe),e(A,TWe),e(A,Wm),e(Wm,eoe),e(eoe,MWe),e(Wm,EWe),e(Wm,Ak),e(Ak,CWe),e(Wm,wWe),e(A,AWe),e(A,Hm),e(Hm,ooe),e(ooe,yWe),e(Hm,LWe),e(Hm,yk),e(yk,xWe),e(Hm,$We),e(A,kWe),e(A,Um),e(Um,roe),e(roe,SWe),e(Um,RWe),e(Um,Lk),e(Lk,BWe),e(Um,PWe),e(A,IWe),e(A,Jm),e(Jm,toe),e(toe,qWe),e(Jm,NWe),e(Jm,xk),e(xk,jWe),e(Jm,DWe),e(A,GWe),e(A,Ym),e(Ym,aoe),e(aoe,OWe),e(Ym,VWe),e(Ym,$k),e($k,XWe),e(Ym,zWe),e(A,QWe),e(A,Km),e(Km,noe),e(noe,WWe),e(Km,HWe),e(Km,kk),e(kk,UWe),e(Km,JWe),e(A,YWe),e(A,Zm),e(Zm,soe),e(soe,KWe),e(Zm,ZWe),e(Zm,Sk),e(Sk,eHe),e(Zm,oHe),e(A,rHe),e(A,eg),e(eg,loe),e(loe,tHe),e(eg,aHe),e(eg,Rk),e(Rk,nHe),e(eg,sHe),e(A,lHe),e(A,og),e(og,ioe),e(ioe,iHe),e(og,dHe),e(og,Bk),e(Bk,cHe),e(og,fHe),e(A,mHe),e(A,rg),e(rg,doe),e(doe,gHe),e(rg,hHe),e(rg,Pk),e(Pk,pHe),e(rg,uHe),e(A,_He),e(A,tg),e(tg,coe),e(coe,bHe),e(tg,vHe),e(tg,Ik),e(Ik,FHe),e(tg,THe),e(A,MHe),e(A,ag),e(ag,foe),e(foe,EHe),e(ag,CHe),e(ag,qk),e(qk,wHe),e(ag,AHe),e(Mr,yHe),M(ng,Mr,null),e(Co,LHe),e(Co,sg),M(S0,sg,null),e(sg,xHe),e(sg,moe),e(moe,$He),b(f,wBe,_),b(f,fi,_),e(fi,lg),e(lg,goe),M(R0,goe,null),e(fi,kHe),e(fi,hoe),e(hoe,SHe),b(f,ABe,_),b(f,wo,_),M(B0,wo,null),e(wo,RHe),e(wo,P0),e(P0,BHe),e(P0,Nk),e(Nk,PHe),e(P0,IHe),e(wo,qHe),e(wo,I0),e(I0,NHe),e(I0,poe),e(poe,jHe),e(I0,DHe),e(wo,GHe),e(wo,Er),M(q0,Er,null),e(Er,OHe),e(Er,uoe),e(uoe,VHe),e(Er,XHe),e(Er,Ta),e(Ta,zHe),e(Ta,_oe),e(_oe,QHe),e(Ta,WHe),e(Ta,boe),e(boe,HHe),e(Ta,UHe),e(Ta,voe),e(voe,JHe),e(Ta,YHe),e(Er,KHe),e(Er,k),e(k,yn),e(yn,Foe),e(Foe,ZHe),e(yn,eUe),e(yn,jk),e(jk,oUe),e(yn,rUe),e(yn,Dk),e(Dk,tUe),e(yn,aUe),e(k,nUe),e(k,Ln),e(Ln,Toe),e(Toe,sUe),e(Ln,lUe),e(Ln,Gk),e(Gk,iUe),e(Ln,dUe),e(Ln,Ok),e(Ok,cUe),e(Ln,fUe),e(k,mUe),e(k,xn),e(xn,Moe),e(Moe,gUe),e(xn,hUe),e(xn,Vk),e(Vk,pUe),e(xn,uUe),e(xn,Xk),e(Xk,_Ue),e(xn,bUe),e(k,vUe),e(k,ig),e(ig,Eoe),e(Eoe,FUe),e(ig,TUe),e(ig,zk),e(zk,MUe),e(ig,EUe),e(k,CUe),e(k,$n),e($n,Coe),e(Coe,wUe),e($n,AUe),e($n,Qk),e(Qk,yUe),e($n,LUe),e($n,Wk),e(Wk,xUe),e($n,$Ue),e(k,kUe),e(k,dg),e(dg,woe),e(woe,SUe),e(dg,RUe),e(dg,Hk),e(Hk,BUe),e(dg,PUe),e(k,IUe),e(k,cg),e(cg,Aoe),e(Aoe,qUe),e(cg,NUe),e(cg,Uk),e(Uk,jUe),e(cg,DUe),e(k,GUe),e(k,fg),e(fg,yoe),e(yoe,OUe),e(fg,VUe),e(fg,Jk),e(Jk,XUe),e(fg,zUe),e(k,QUe),e(k,kn),e(kn,Loe),e(Loe,WUe),e(kn,HUe),e(kn,Yk),e(Yk,UUe),e(kn,JUe),e(kn,Kk),e(Kk,YUe),e(kn,KUe),e(k,ZUe),e(k,Sn),e(Sn,xoe),e(xoe,eJe),e(Sn,oJe),e(Sn,Zk),e(Zk,rJe),e(Sn,tJe),e(Sn,eS),e(eS,aJe),e(Sn,nJe),e(k,sJe),e(k,Rn),e(Rn,$oe),e($oe,lJe),e(Rn,iJe),e(Rn,oS),e(oS,dJe),e(Rn,cJe),e(Rn,rS),e(rS,fJe),e(Rn,mJe),e(k,gJe),e(k,mg),e(mg,koe),e(koe,hJe),e(mg,pJe),e(mg,tS),e(tS,uJe),e(mg,_Je),e(k,bJe),e(k,gg),e(gg,Soe),e(Soe,vJe),e(gg,FJe),e(gg,aS),e(aS,TJe),e(gg,MJe),e(k,EJe),e(k,Bn),e(Bn,Roe),e(Roe,CJe),e(Bn,wJe),e(Bn,nS),e(nS,AJe),e(Bn,yJe),e(Bn,sS),e(sS,LJe),e(Bn,xJe),e(k,$Je),e(k,hg),e(hg,Boe),e(Boe,kJe),e(hg,SJe),e(hg,lS),e(lS,RJe),e(hg,BJe),e(k,PJe),e(k,Pn),e(Pn,Poe),e(Poe,IJe),e(Pn,qJe),e(Pn,iS),e(iS,NJe),e(Pn,jJe),e(Pn,dS),e(dS,DJe),e(Pn,GJe),e(k,OJe),e(k,In),e(In,Ioe),e(Ioe,VJe),e(In,XJe),e(In,cS),e(cS,zJe),e(In,QJe),e(In,fS),e(fS,WJe),e(In,HJe),e(k,UJe),e(k,qn),e(qn,qoe),e(qoe,JJe),e(qn,YJe),e(qn,mS),e(mS,KJe),e(qn,ZJe),e(qn,gS),e(gS,eYe),e(qn,oYe),e(k,rYe),e(k,pg),e(pg,Noe),e(Noe,tYe),e(pg,aYe),e(pg,hS),e(hS,nYe),e(pg,sYe),e(k,lYe),e(k,Nn),e(Nn,joe),e(joe,iYe),e(Nn,dYe),e(Nn,pS),e(pS,cYe),e(Nn,fYe),e(Nn,uS),e(uS,mYe),e(Nn,gYe),e(k,hYe),e(k,jn),e(jn,Doe),e(Doe,pYe),e(jn,uYe),e(jn,_S),e(_S,_Ye),e(jn,bYe),e(jn,bS),e(bS,vYe),e(jn,FYe),e(k,TYe),e(k,Dn),e(Dn,Goe),e(Goe,MYe),e(Dn,EYe),e(Dn,vS),e(vS,CYe),e(Dn,wYe),e(Dn,FS),e(FS,AYe),e(Dn,yYe),e(k,LYe),e(k,Gn),e(Gn,Ooe),e(Ooe,xYe),e(Gn,$Ye),e(Gn,TS),e(TS,kYe),e(Gn,SYe),e(Gn,MS),e(MS,RYe),e(Gn,BYe),e(k,PYe),e(k,On),e(On,Voe),e(Voe,IYe),e(On,qYe),e(On,ES),e(ES,NYe),e(On,jYe),e(On,CS),e(CS,DYe),e(On,GYe),e(k,OYe),e(k,Vn),e(Vn,Xoe),e(Xoe,VYe),e(Vn,XYe),e(Vn,wS),e(wS,zYe),e(Vn,QYe),e(Vn,AS),e(AS,WYe),e(Vn,HYe),e(k,UYe),e(k,ug),e(ug,zoe),e(zoe,JYe),e(ug,YYe),e(ug,yS),e(yS,KYe),e(ug,ZYe),e(k,eKe),e(k,Xn),e(Xn,Qoe),e(Qoe,oKe),e(Xn,rKe),e(Xn,LS),e(LS,tKe),e(Xn,aKe),e(Xn,xS),e(xS,nKe),e(Xn,sKe),e(k,lKe),e(k,_g),e(_g,Woe),e(Woe,iKe),e(_g,dKe),e(_g,$S),e($S,cKe),e(_g,fKe),e(k,mKe),e(k,zn),e(zn,Hoe),e(Hoe,gKe),e(zn,hKe),e(zn,kS),e(kS,pKe),e(zn,uKe),e(zn,SS),e(SS,_Ke),e(zn,bKe),e(k,vKe),e(k,Qn),e(Qn,Uoe),e(Uoe,FKe),e(Qn,TKe),e(Qn,RS),e(RS,MKe),e(Qn,EKe),e(Qn,BS),e(BS,CKe),e(Qn,wKe),e(k,AKe),e(k,Wn),e(Wn,Joe),e(Joe,yKe),e(Wn,LKe),e(Wn,PS),e(PS,xKe),e(Wn,$Ke),e(Wn,IS),e(IS,kKe),e(Wn,SKe),e(k,RKe),e(k,Hn),e(Hn,Yoe),e(Yoe,BKe),e(Hn,PKe),e(Hn,qS),e(qS,IKe),e(Hn,qKe),e(Hn,NS),e(NS,NKe),e(Hn,jKe),e(k,DKe),e(k,Un),e(Un,Koe),e(Koe,GKe),e(Un,OKe),e(Un,jS),e(jS,VKe),e(Un,XKe),e(Un,DS),e(DS,zKe),e(Un,QKe),e(k,WKe),e(k,bg),e(bg,Zoe),e(Zoe,HKe),e(bg,UKe),e(bg,GS),e(GS,JKe),e(bg,YKe),e(k,KKe),e(k,Jn),e(Jn,ere),e(ere,ZKe),e(Jn,eZe),e(Jn,OS),e(OS,oZe),e(Jn,rZe),e(Jn,VS),e(VS,tZe),e(Jn,aZe),e(k,nZe),e(k,Yn),e(Yn,ore),e(ore,sZe),e(Yn,lZe),e(Yn,XS),e(XS,iZe),e(Yn,dZe),e(Yn,zS),e(zS,cZe),e(Yn,fZe),e(k,mZe),e(k,Kn),e(Kn,rre),e(rre,gZe),e(Kn,hZe),e(Kn,QS),e(QS,pZe),e(Kn,uZe),e(Kn,WS),e(WS,_Ze),e(Kn,bZe),e(k,vZe),e(k,Zn),e(Zn,tre),e(tre,FZe),e(Zn,TZe),e(Zn,HS),e(HS,MZe),e(Zn,EZe),e(Zn,US),e(US,CZe),e(Zn,wZe),e(k,AZe),e(k,es),e(es,are),e(are,yZe),e(es,LZe),e(es,JS),e(JS,xZe),e(es,$Ze),e(es,YS),e(YS,kZe),e(es,SZe),e(k,RZe),e(k,os),e(os,nre),e(nre,BZe),e(os,PZe),e(os,KS),e(KS,IZe),e(os,qZe),e(os,ZS),e(ZS,NZe),e(os,jZe),e(k,DZe),e(k,vg),e(vg,sre),e(sre,GZe),e(vg,OZe),e(vg,eR),e(eR,VZe),e(vg,XZe),e(k,zZe),e(k,rs),e(rs,lre),e(lre,QZe),e(rs,WZe),e(rs,oR),e(oR,HZe),e(rs,UZe),e(rs,rR),e(rR,JZe),e(rs,YZe),e(k,KZe),e(k,Fg),e(Fg,ire),e(ire,ZZe),e(Fg,eeo),e(Fg,tR),e(tR,oeo),e(Fg,reo),e(k,teo),e(k,Tg),e(Tg,dre),e(dre,aeo),e(Tg,neo),e(Tg,aR),e(aR,seo),e(Tg,leo),e(k,ieo),e(k,ts),e(ts,cre),e(cre,deo),e(ts,ceo),e(ts,nR),e(nR,feo),e(ts,meo),e(ts,sR),e(sR,geo),e(ts,heo),e(k,peo),e(k,as),e(as,fre),e(fre,ueo),e(as,_eo),e(as,lR),e(lR,beo),e(as,veo),e(as,iR),e(iR,Feo),e(as,Teo),e(k,Meo),e(k,ns),e(ns,mre),e(mre,Eeo),e(ns,Ceo),e(ns,dR),e(dR,weo),e(ns,Aeo),e(ns,cR),e(cR,yeo),e(ns,Leo),e(k,xeo),e(k,Mg),e(Mg,gre),e(gre,$eo),e(Mg,keo),e(Mg,fR),e(fR,Seo),e(Mg,Reo),e(k,Beo),e(k,ss),e(ss,hre),e(hre,Peo),e(ss,Ieo),e(ss,mR),e(mR,qeo),e(ss,Neo),e(ss,gR),e(gR,jeo),e(ss,Deo),e(k,Geo),e(k,ls),e(ls,pre),e(pre,Oeo),e(ls,Veo),e(ls,hR),e(hR,Xeo),e(ls,zeo),e(ls,pR),e(pR,Qeo),e(ls,Weo),e(k,Heo),e(k,is),e(is,ure),e(ure,Ueo),e(is,Jeo),e(is,uR),e(uR,Yeo),e(is,Keo),e(is,_R),e(_R,Zeo),e(is,eoo),e(k,ooo),e(k,ds),e(ds,_re),e(_re,roo),e(ds,too),e(ds,bR),e(bR,aoo),e(ds,noo),e(ds,vR),e(vR,soo),e(ds,loo),e(k,ioo),e(k,cs),e(cs,bre),e(bre,doo),e(cs,coo),e(cs,FR),e(FR,foo),e(cs,moo),e(cs,TR),e(TR,goo),e(cs,hoo),e(k,poo),e(k,fs),e(fs,vre),e(vre,uoo),e(fs,_oo),e(fs,MR),e(MR,boo),e(fs,voo),e(fs,ER),e(ER,Foo),e(fs,Too),e(k,Moo),e(k,Eg),e(Eg,Fre),e(Fre,Eoo),e(Eg,Coo),e(Eg,CR),e(CR,woo),e(Eg,Aoo),e(k,yoo),e(k,Cg),e(Cg,Tre),e(Tre,Loo),e(Cg,xoo),e(Cg,wR),e(wR,$oo),e(Cg,koo),e(k,Soo),e(k,wg),e(wg,Mre),e(Mre,Roo),e(wg,Boo),e(wg,AR),e(AR,Poo),e(wg,Ioo),e(k,qoo),e(k,Ag),e(Ag,Ere),e(Ere,Noo),e(Ag,joo),e(Ag,yR),e(yR,Doo),e(Ag,Goo),e(k,Ooo),e(k,ms),e(ms,Cre),e(Cre,Voo),e(ms,Xoo),e(ms,LR),e(LR,zoo),e(ms,Qoo),e(ms,xR),e(xR,Woo),e(ms,Hoo),e(k,Uoo),e(k,yg),e(yg,wre),e(wre,Joo),e(yg,Yoo),e(yg,$R),e($R,Koo),e(yg,Zoo),e(k,ero),e(k,gs),e(gs,Are),e(Are,oro),e(gs,rro),e(gs,kR),e(kR,tro),e(gs,aro),e(gs,SR),e(SR,nro),e(gs,sro),e(k,lro),e(k,hs),e(hs,yre),e(yre,iro),e(hs,dro),e(hs,RR),e(RR,cro),e(hs,fro),e(hs,BR),e(BR,mro),e(hs,gro),e(k,hro),e(k,ps),e(ps,Lre),e(Lre,pro),e(ps,uro),e(ps,PR),e(PR,_ro),e(ps,bro),e(ps,IR),e(IR,vro),e(ps,Fro),e(k,Tro),e(k,us),e(us,xre),e(xre,Mro),e(us,Ero),e(us,qR),e(qR,Cro),e(us,wro),e(us,NR),e(NR,Aro),e(us,yro),e(k,Lro),e(k,_s),e(_s,$re),e($re,xro),e(_s,$ro),e(_s,jR),e(jR,kro),e(_s,Sro),e(_s,DR),e(DR,Rro),e(_s,Bro),e(k,Pro),e(k,bs),e(bs,kre),e(kre,Iro),e(bs,qro),e(bs,GR),e(GR,Nro),e(bs,jro),e(bs,OR),e(OR,Dro),e(bs,Gro),e(k,Oro),e(k,Lg),e(Lg,Sre),e(Sre,Vro),e(Lg,Xro),e(Lg,VR),e(VR,zro),e(Lg,Qro),e(k,Wro),e(k,xg),e(xg,Rre),e(Rre,Hro),e(xg,Uro),e(xg,XR),e(XR,Jro),e(xg,Yro),e(k,Kro),e(k,vs),e(vs,Bre),e(Bre,Zro),e(vs,eto),e(vs,zR),e(zR,oto),e(vs,rto),e(vs,QR),e(QR,tto),e(vs,ato),e(k,nto),e(k,Fs),e(Fs,Pre),e(Pre,sto),e(Fs,lto),e(Fs,WR),e(WR,ito),e(Fs,dto),e(Fs,HR),e(HR,cto),e(Fs,fto),e(k,mto),e(k,Ts),e(Ts,Ire),e(Ire,gto),e(Ts,hto),e(Ts,UR),e(UR,pto),e(Ts,uto),e(Ts,JR),e(JR,_to),e(Ts,bto),e(k,vto),e(k,$g),e($g,qre),e(qre,Fto),e($g,Tto),e($g,YR),e(YR,Mto),e($g,Eto),e(k,Cto),e(k,kg),e(kg,Nre),e(Nre,wto),e(kg,Ato),e(kg,KR),e(KR,yto),e(kg,Lto),e(k,xto),e(k,Sg),e(Sg,jre),e(jre,$to),e(Sg,kto),e(Sg,ZR),e(ZR,Sto),e(Sg,Rto),e(k,Bto),e(k,Ms),e(Ms,Dre),e(Dre,Pto),e(Ms,Ito),e(Ms,eB),e(eB,qto),e(Ms,Nto),e(Ms,oB),e(oB,jto),e(Ms,Dto),e(k,Gto),e(k,Rg),e(Rg,Gre),e(Gre,Oto),e(Rg,Vto),e(Rg,rB),e(rB,Xto),e(Rg,zto),e(k,Qto),e(k,Bg),e(Bg,Ore),e(Ore,Wto),e(Bg,Hto),e(Bg,tB),e(tB,Uto),e(Bg,Jto),e(k,Yto),e(k,Es),e(Es,Vre),e(Vre,Kto),e(Es,Zto),e(Es,aB),e(aB,eao),e(Es,oao),e(Es,nB),e(nB,rao),e(Es,tao),e(k,aao),e(k,Pg),e(Pg,Xre),e(Xre,nao),e(Pg,sao),e(Pg,sB),e(sB,lao),e(Pg,iao),e(k,dao),e(k,Ig),e(Ig,zre),e(zre,cao),e(Ig,fao),e(Ig,lB),e(lB,mao),e(Ig,gao),e(k,hao),e(k,Cs),e(Cs,Qre),e(Qre,pao),e(Cs,uao),e(Cs,iB),e(iB,_ao),e(Cs,bao),e(Cs,dB),e(dB,vao),e(Cs,Fao),e(k,Tao),e(k,ws),e(ws,Wre),e(Wre,Mao),e(ws,Eao),e(ws,cB),e(cB,Cao),e(ws,wao),e(ws,fB),e(fB,Aao),e(ws,yao),e(k,Lao),e(k,As),e(As,Hre),e(Hre,xao),e(As,$ao),e(As,mB),e(mB,kao),e(As,Sao),e(As,gB),e(gB,Rao),e(As,Bao),e(k,Pao),e(k,ys),e(ys,Ure),e(Ure,Iao),e(ys,qao),e(ys,hB),e(hB,Nao),e(ys,jao),e(ys,pB),e(pB,Dao),e(ys,Gao),e(Er,Oao),M(qg,Er,null),e(wo,Vao),e(wo,Ng),M(N0,Ng,null),e(Ng,Xao),e(Ng,Jre),e(Jre,zao),b(f,yBe,_),b(f,mi,_),e(mi,jg),e(jg,Yre),M(j0,Yre,null),e(mi,Qao),e(mi,Kre),e(Kre,Wao),b(f,LBe,_),b(f,Ao,_),M(D0,Ao,null),e(Ao,Hao),e(Ao,G0),e(G0,Uao),e(G0,uB),e(uB,Jao),e(G0,Yao),e(Ao,Kao),e(Ao,O0),e(O0,Zao),e(O0,Zre),e(Zre,eno),e(O0,ono),e(Ao,rno),e(Ao,Qe),M(V0,Qe,null),e(Qe,tno),e(Qe,ete),e(ete,ano),e(Qe,nno),e(Qe,Ma),e(Ma,sno),e(Ma,ote),e(ote,lno),e(Ma,ino),e(Ma,rte),e(rte,dno),e(Ma,cno),e(Ma,tte),e(tte,fno),e(Ma,mno),e(Qe,gno),e(Qe,te),e(te,Dg),e(Dg,ate),e(ate,hno),e(Dg,pno),e(Dg,_B),e(_B,uno),e(Dg,_no),e(te,bno),e(te,Gg),e(Gg,nte),e(nte,vno),e(Gg,Fno),e(Gg,bB),e(bB,Tno),e(Gg,Mno),e(te,Eno),e(te,Og),e(Og,ste),e(ste,Cno),e(Og,wno),e(Og,vB),e(vB,Ano),e(Og,yno),e(te,Lno),e(te,Vg),e(Vg,lte),e(lte,xno),e(Vg,$no),e(Vg,FB),e(FB,kno),e(Vg,Sno),e(te,Rno),e(te,Xg),e(Xg,ite),e(ite,Bno),e(Xg,Pno),e(Xg,TB),e(TB,Ino),e(Xg,qno),e(te,Nno),e(te,zg),e(zg,dte),e(dte,jno),e(zg,Dno),e(zg,MB),e(MB,Gno),e(zg,Ono),e(te,Vno),e(te,Qg),e(Qg,cte),e(cte,Xno),e(Qg,zno),e(Qg,EB),e(EB,Qno),e(Qg,Wno),e(te,Hno),e(te,Wg),e(Wg,fte),e(fte,Uno),e(Wg,Jno),e(Wg,CB),e(CB,Yno),e(Wg,Kno),e(te,Zno),e(te,Hg),e(Hg,mte),e(mte,eso),e(Hg,oso),e(Hg,wB),e(wB,rso),e(Hg,tso),e(te,aso),e(te,Ug),e(Ug,gte),e(gte,nso),e(Ug,sso),e(Ug,AB),e(AB,lso),e(Ug,iso),e(te,dso),e(te,Jg),e(Jg,hte),e(hte,cso),e(Jg,fso),e(Jg,yB),e(yB,mso),e(Jg,gso),e(te,hso),e(te,Yg),e(Yg,pte),e(pte,pso),e(Yg,uso),e(Yg,LB),e(LB,_so),e(Yg,bso),e(te,vso),e(te,Kg),e(Kg,ute),e(ute,Fso),e(Kg,Tso),e(Kg,xB),e(xB,Mso),e(Kg,Eso),e(te,Cso),e(te,Zg),e(Zg,_te),e(_te,wso),e(Zg,Aso),e(Zg,$B),e($B,yso),e(Zg,Lso),e(te,xso),e(te,eh),e(eh,bte),e(bte,$so),e(eh,kso),e(eh,kB),e(kB,Sso),e(eh,Rso),e(te,Bso),e(te,oh),e(oh,vte),e(vte,Pso),e(oh,Iso),e(oh,SB),e(SB,qso),e(oh,Nso),e(te,jso),e(te,rh),e(rh,Fte),e(Fte,Dso),e(rh,Gso),e(rh,RB),e(RB,Oso),e(rh,Vso),e(te,Xso),e(te,th),e(th,Tte),e(Tte,zso),e(th,Qso),e(th,BB),e(BB,Wso),e(th,Hso),e(te,Uso),e(te,ah),e(ah,Mte),e(Mte,Jso),e(ah,Yso),e(ah,PB),e(PB,Kso),e(ah,Zso),e(te,elo),e(te,nh),e(nh,Ete),e(Ete,olo),e(nh,rlo),e(nh,IB),e(IB,tlo),e(nh,alo),e(te,nlo),e(te,sh),e(sh,Cte),e(Cte,slo),e(sh,llo),e(sh,qB),e(qB,ilo),e(sh,dlo),e(te,clo),e(te,lh),e(lh,wte),e(wte,flo),e(lh,mlo),e(lh,NB),e(NB,glo),e(lh,hlo),e(te,plo),e(te,ih),e(ih,Ate),e(Ate,ulo),e(ih,_lo),e(ih,jB),e(jB,blo),e(ih,vlo),e(te,Flo),e(te,dh),e(dh,yte),e(yte,Tlo),e(dh,Mlo),e(dh,DB),e(DB,Elo),e(dh,Clo),e(Qe,wlo),M(ch,Qe,null),e(Qe,Alo),M(fh,Qe,null),e(Ao,ylo),e(Ao,mh),M(X0,mh,null),e(mh,Llo),e(mh,Lte),e(Lte,xlo),b(f,xBe,_),b(f,gi,_),e(gi,gh),e(gh,xte),M(z0,xte,null),e(gi,$lo),e(gi,$te),e($te,klo),b(f,$Be,_),b(f,yo,_),M(Q0,yo,null),e(yo,Slo),e(yo,W0),e(W0,Rlo),e(W0,GB),e(GB,Blo),e(W0,Plo),e(yo,Ilo),e(yo,H0),e(H0,qlo),e(H0,kte),e(kte,Nlo),e(H0,jlo),e(yo,Dlo),e(yo,We),M(U0,We,null),e(We,Glo),e(We,Ste),e(Ste,Olo),e(We,Vlo),e(We,hi),e(hi,Xlo),e(hi,Rte),e(Rte,zlo),e(hi,Qlo),e(hi,Bte),e(Bte,Wlo),e(hi,Hlo),e(We,Ulo),e(We,be),e(be,hh),e(hh,Pte),e(Pte,Jlo),e(hh,Ylo),e(hh,OB),e(OB,Klo),e(hh,Zlo),e(be,eio),e(be,ph),e(ph,Ite),e(Ite,oio),e(ph,rio),e(ph,VB),e(VB,tio),e(ph,aio),e(be,nio),e(be,uh),e(uh,qte),e(qte,sio),e(uh,lio),e(uh,XB),e(XB,iio),e(uh,dio),e(be,cio),e(be,_h),e(_h,Nte),e(Nte,fio),e(_h,mio),e(_h,zB),e(zB,gio),e(_h,hio),e(be,pio),e(be,bh),e(bh,jte),e(jte,uio),e(bh,_io),e(bh,QB),e(QB,bio),e(bh,vio),e(be,Fio),e(be,vh),e(vh,Dte),e(Dte,Tio),e(vh,Mio),e(vh,WB),e(WB,Eio),e(vh,Cio),e(be,wio),e(be,Fh),e(Fh,Gte),e(Gte,Aio),e(Fh,yio),e(Fh,HB),e(HB,Lio),e(Fh,xio),e(be,$io),e(be,Th),e(Th,Ote),e(Ote,kio),e(Th,Sio),e(Th,UB),e(UB,Rio),e(Th,Bio),e(be,Pio),e(be,Mh),e(Mh,Vte),e(Vte,Iio),e(Mh,qio),e(Mh,JB),e(JB,Nio),e(Mh,jio),e(be,Dio),e(be,Eh),e(Eh,Xte),e(Xte,Gio),e(Eh,Oio),e(Eh,YB),e(YB,Vio),e(Eh,Xio),e(be,zio),e(be,Ch),e(Ch,zte),e(zte,Qio),e(Ch,Wio),e(Ch,KB),e(KB,Hio),e(Ch,Uio),e(be,Jio),e(be,wh),e(wh,Qte),e(Qte,Yio),e(wh,Kio),e(wh,ZB),e(ZB,Zio),e(wh,edo),e(be,odo),e(be,Ah),e(Ah,Wte),e(Wte,rdo),e(Ah,tdo),e(Ah,eP),e(eP,ado),e(Ah,ndo),e(be,sdo),e(be,yh),e(yh,Hte),e(Hte,ldo),e(yh,ido),e(yh,oP),e(oP,ddo),e(yh,cdo),e(We,fdo),M(Lh,We,null),e(We,mdo),M(xh,We,null),e(yo,gdo),e(yo,$h),M(J0,$h,null),e($h,hdo),e($h,Ute),e(Ute,pdo),b(f,kBe,_),b(f,pi,_),e(pi,kh),e(kh,Jte),M(Y0,Jte,null),e(pi,udo),e(pi,Yte),e(Yte,_do),b(f,SBe,_),b(f,Lo,_),M(K0,Lo,null),e(Lo,bdo),e(Lo,ui),e(ui,vdo),e(ui,rP),e(rP,Fdo),e(ui,Tdo),e(ui,tP),e(tP,Mdo),e(ui,Edo),e(Lo,Cdo),e(Lo,Z0),e(Z0,wdo),e(Z0,Kte),e(Kte,Ado),e(Z0,ydo),e(Lo,Ldo),e(Lo,Zr),M(e6,Zr,null),e(Zr,xdo),e(Zr,Zte),e(Zte,$do),e(Zr,kdo),e(Zr,_i),e(_i,Sdo),e(_i,eae),e(eae,Rdo),e(_i,Bdo),e(_i,aP),e(aP,Pdo),e(_i,Ido),e(Zr,qdo),M(Sh,Zr,null),e(Lo,Ndo),e(Lo,He),M(o6,He,null),e(He,jdo),e(He,oae),e(oae,Ddo),e(He,Gdo),e(He,Ea),e(Ea,Odo),e(Ea,rae),e(rae,Vdo),e(Ea,Xdo),e(Ea,tae),e(tae,zdo),e(Ea,Qdo),e(Ea,aae),e(aae,Wdo),e(Ea,Hdo),e(He,Udo),e(He,x),e(x,Rh),e(Rh,nae),e(nae,Jdo),e(Rh,Ydo),e(Rh,nP),e(nP,Kdo),e(Rh,Zdo),e(x,eco),e(x,Bh),e(Bh,sae),e(sae,oco),e(Bh,rco),e(Bh,sP),e(sP,tco),e(Bh,aco),e(x,nco),e(x,Ph),e(Ph,lae),e(lae,sco),e(Ph,lco),e(Ph,lP),e(lP,ico),e(Ph,dco),e(x,cco),e(x,Ih),e(Ih,iae),e(iae,fco),e(Ih,mco),e(Ih,iP),e(iP,gco),e(Ih,hco),e(x,pco),e(x,qh),e(qh,dae),e(dae,uco),e(qh,_co),e(qh,dP),e(dP,bco),e(qh,vco),e(x,Fco),e(x,Nh),e(Nh,cae),e(cae,Tco),e(Nh,Mco),e(Nh,cP),e(cP,Eco),e(Nh,Cco),e(x,wco),e(x,jh),e(jh,fae),e(fae,Aco),e(jh,yco),e(jh,fP),e(fP,Lco),e(jh,xco),e(x,$co),e(x,Dh),e(Dh,mae),e(mae,kco),e(Dh,Sco),e(Dh,mP),e(mP,Rco),e(Dh,Bco),e(x,Pco),e(x,Gh),e(Gh,gae),e(gae,Ico),e(Gh,qco),e(Gh,gP),e(gP,Nco),e(Gh,jco),e(x,Dco),e(x,Oh),e(Oh,hae),e(hae,Gco),e(Oh,Oco),e(Oh,hP),e(hP,Vco),e(Oh,Xco),e(x,zco),e(x,Vh),e(Vh,pae),e(pae,Qco),e(Vh,Wco),e(Vh,pP),e(pP,Hco),e(Vh,Uco),e(x,Jco),e(x,Xh),e(Xh,uae),e(uae,Yco),e(Xh,Kco),e(Xh,uP),e(uP,Zco),e(Xh,efo),e(x,ofo),e(x,zh),e(zh,_ae),e(_ae,rfo),e(zh,tfo),e(zh,_P),e(_P,afo),e(zh,nfo),e(x,sfo),e(x,Qh),e(Qh,bae),e(bae,lfo),e(Qh,ifo),e(Qh,bP),e(bP,dfo),e(Qh,cfo),e(x,ffo),e(x,Wh),e(Wh,vae),e(vae,mfo),e(Wh,gfo),e(Wh,vP),e(vP,hfo),e(Wh,pfo),e(x,ufo),e(x,Hh),e(Hh,Fae),e(Fae,_fo),e(Hh,bfo),e(Hh,FP),e(FP,vfo),e(Hh,Ffo),e(x,Tfo),e(x,Uh),e(Uh,Tae),e(Tae,Mfo),e(Uh,Efo),e(Uh,TP),e(TP,Cfo),e(Uh,wfo),e(x,Afo),e(x,Jh),e(Jh,Mae),e(Mae,yfo),e(Jh,Lfo),e(Jh,MP),e(MP,xfo),e(Jh,$fo),e(x,kfo),e(x,Yh),e(Yh,Eae),e(Eae,Sfo),e(Yh,Rfo),e(Yh,EP),e(EP,Bfo),e(Yh,Pfo),e(x,Ifo),e(x,Kh),e(Kh,Cae),e(Cae,qfo),e(Kh,Nfo),e(Kh,CP),e(CP,jfo),e(Kh,Dfo),e(x,Gfo),e(x,Zh),e(Zh,wae),e(wae,Ofo),e(Zh,Vfo),e(Zh,wP),e(wP,Xfo),e(Zh,zfo),e(x,Qfo),e(x,ep),e(ep,Aae),e(Aae,Wfo),e(ep,Hfo),e(ep,AP),e(AP,Ufo),e(ep,Jfo),e(x,Yfo),e(x,op),e(op,yae),e(yae,Kfo),e(op,Zfo),e(op,yP),e(yP,emo),e(op,omo),e(x,rmo),e(x,rp),e(rp,Lae),e(Lae,tmo),e(rp,amo),e(rp,LP),e(LP,nmo),e(rp,smo),e(x,lmo),e(x,tp),e(tp,xae),e(xae,imo),e(tp,dmo),e(tp,xP),e(xP,cmo),e(tp,fmo),e(x,mmo),e(x,ap),e(ap,$ae),e($ae,gmo),e(ap,hmo),e(ap,$P),e($P,pmo),e(ap,umo),e(x,_mo),e(x,np),e(np,kae),e(kae,bmo),e(np,vmo),e(np,kP),e(kP,Fmo),e(np,Tmo),e(x,Mmo),e(x,sp),e(sp,Sae),e(Sae,Emo),e(sp,Cmo),e(sp,SP),e(SP,wmo),e(sp,Amo),e(x,ymo),e(x,lp),e(lp,Rae),e(Rae,Lmo),e(lp,xmo),e(lp,RP),e(RP,$mo),e(lp,kmo),e(x,Smo),e(x,ip),e(ip,Bae),e(Bae,Rmo),e(ip,Bmo),e(ip,BP),e(BP,Pmo),e(ip,Imo),e(x,qmo),e(x,Ls),e(Ls,Pae),e(Pae,Nmo),e(Ls,jmo),e(Ls,PP),e(PP,Dmo),e(Ls,Gmo),e(Ls,IP),e(IP,Omo),e(Ls,Vmo),e(x,Xmo),e(x,dp),e(dp,Iae),e(Iae,zmo),e(dp,Qmo),e(dp,qP),e(qP,Wmo),e(dp,Hmo),e(x,Umo),e(x,cp),e(cp,qae),e(qae,Jmo),e(cp,Ymo),e(cp,NP),e(NP,Kmo),e(cp,Zmo),e(x,ego),e(x,fp),e(fp,Nae),e(Nae,ogo),e(fp,rgo),e(fp,jP),e(jP,tgo),e(fp,ago),e(x,ngo),e(x,mp),e(mp,jae),e(jae,sgo),e(mp,lgo),e(mp,DP),e(DP,igo),e(mp,dgo),e(x,cgo),e(x,gp),e(gp,Dae),e(Dae,fgo),e(gp,mgo),e(gp,GP),e(GP,ggo),e(gp,hgo),e(x,pgo),e(x,hp),e(hp,Gae),e(Gae,ugo),e(hp,_go),e(hp,OP),e(OP,bgo),e(hp,vgo),e(x,Fgo),e(x,pp),e(pp,Oae),e(Oae,Tgo),e(pp,Mgo),e(pp,VP),e(VP,Ego),e(pp,Cgo),e(x,wgo),e(x,up),e(up,Vae),e(Vae,Ago),e(up,ygo),e(up,XP),e(XP,Lgo),e(up,xgo),e(x,$go),e(x,_p),e(_p,Xae),e(Xae,kgo),e(_p,Sgo),e(_p,zP),e(zP,Rgo),e(_p,Bgo),e(x,Pgo),e(x,bp),e(bp,zae),e(zae,Igo),e(bp,qgo),e(bp,QP),e(QP,Ngo),e(bp,jgo),e(x,Dgo),e(x,vp),e(vp,Qae),e(Qae,Ggo),e(vp,Ogo),e(vp,WP),e(WP,Vgo),e(vp,Xgo),e(x,zgo),e(x,Fp),e(Fp,Wae),e(Wae,Qgo),e(Fp,Wgo),e(Fp,HP),e(HP,Hgo),e(Fp,Ugo),e(x,Jgo),e(x,Tp),e(Tp,Hae),e(Hae,Ygo),e(Tp,Kgo),e(Tp,UP),e(UP,Zgo),e(Tp,eho),e(x,oho),e(x,Mp),e(Mp,Uae),e(Uae,rho),e(Mp,tho),e(Mp,JP),e(JP,aho),e(Mp,nho),e(x,sho),e(x,Ep),e(Ep,Jae),e(Jae,lho),e(Ep,iho),e(Ep,YP),e(YP,dho),e(Ep,cho),e(x,fho),e(x,Cp),e(Cp,Yae),e(Yae,mho),e(Cp,gho),e(Cp,KP),e(KP,hho),e(Cp,pho),e(x,uho),e(x,wp),e(wp,Kae),e(Kae,_ho),e(wp,bho),e(wp,ZP),e(ZP,vho),e(wp,Fho),e(x,Tho),e(x,Ap),e(Ap,Zae),e(Zae,Mho),e(Ap,Eho),e(Ap,eI),e(eI,Cho),e(Ap,who),e(x,Aho),e(x,yp),e(yp,ene),e(ene,yho),e(yp,Lho),e(yp,oI),e(oI,xho),e(yp,$ho),e(x,kho),e(x,Lp),e(Lp,one),e(one,Sho),e(Lp,Rho),e(Lp,rI),e(rI,Bho),e(Lp,Pho),e(x,Iho),e(x,xp),e(xp,rne),e(rne,qho),e(xp,Nho),e(xp,tI),e(tI,jho),e(xp,Dho),e(x,Gho),e(x,$p),e($p,tne),e(tne,Oho),e($p,Vho),e($p,aI),e(aI,Xho),e($p,zho),e(x,Qho),e(x,kp),e(kp,ane),e(ane,Who),e(kp,Hho),e(kp,nI),e(nI,Uho),e(kp,Jho),e(x,Yho),e(x,Sp),e(Sp,nne),e(nne,Kho),e(Sp,Zho),e(Sp,sI),e(sI,epo),e(Sp,opo),e(x,rpo),e(x,Rp),e(Rp,sne),e(sne,tpo),e(Rp,apo),e(Rp,lI),e(lI,npo),e(Rp,spo),e(x,lpo),e(x,Bp),e(Bp,lne),e(lne,ipo),e(Bp,dpo),e(Bp,iI),e(iI,cpo),e(Bp,fpo),e(x,mpo),e(x,Pp),e(Pp,ine),e(ine,gpo),e(Pp,hpo),e(Pp,dI),e(dI,ppo),e(Pp,upo),e(x,_po),e(x,Ip),e(Ip,dne),e(dne,bpo),e(Ip,vpo),e(Ip,cI),e(cI,Fpo),e(Ip,Tpo),e(x,Mpo),e(x,qp),e(qp,cne),e(cne,Epo),e(qp,Cpo),e(qp,fI),e(fI,wpo),e(qp,Apo),e(x,ypo),e(x,Np),e(Np,fne),e(fne,Lpo),e(Np,xpo),e(Np,mI),e(mI,$po),e(Np,kpo),e(x,Spo),e(x,jp),e(jp,mne),e(mne,Rpo),e(jp,Bpo),e(jp,gI),e(gI,Ppo),e(jp,Ipo),e(x,qpo),e(x,Dp),e(Dp,gne),e(gne,Npo),e(Dp,jpo),e(Dp,hI),e(hI,Dpo),e(Dp,Gpo),e(x,Opo),e(x,Gp),e(Gp,hne),e(hne,Vpo),e(Gp,Xpo),e(Gp,pI),e(pI,zpo),e(Gp,Qpo),e(x,Wpo),e(x,Op),e(Op,pne),e(pne,Hpo),e(Op,Upo),e(Op,uI),e(uI,Jpo),e(Op,Ypo),e(x,Kpo),e(x,Vp),e(Vp,une),e(une,Zpo),e(Vp,euo),e(Vp,_I),e(_I,ouo),e(Vp,ruo),e(x,tuo),e(x,Xp),e(Xp,_ne),e(_ne,auo),e(Xp,nuo),e(Xp,bI),e(bI,suo),e(Xp,luo),e(x,iuo),e(x,zp),e(zp,bne),e(bne,duo),e(zp,cuo),e(zp,vI),e(vI,fuo),e(zp,muo),e(x,guo),e(x,Qp),e(Qp,vne),e(vne,huo),e(Qp,puo),e(Qp,FI),e(FI,uuo),e(Qp,_uo),e(x,buo),e(x,Wp),e(Wp,Fne),e(Fne,vuo),e(Wp,Fuo),e(Wp,TI),e(TI,Tuo),e(Wp,Muo),e(x,Euo),e(x,Hp),e(Hp,Tne),e(Tne,Cuo),e(Hp,wuo),e(Hp,MI),e(MI,Auo),e(Hp,yuo),e(x,Luo),e(x,Up),e(Up,Mne),e(Mne,xuo),e(Up,$uo),e(Up,EI),e(EI,kuo),e(Up,Suo),e(x,Ruo),e(x,Jp),e(Jp,Ene),e(Ene,Buo),e(Jp,Puo),e(Jp,CI),e(CI,Iuo),e(Jp,quo),e(x,Nuo),e(x,Yp),e(Yp,Cne),e(Cne,juo),e(Yp,Duo),e(Yp,wI),e(wI,Guo),e(Yp,Ouo),e(x,Vuo),e(x,Kp),e(Kp,wne),e(wne,Xuo),e(Kp,zuo),e(Kp,AI),e(AI,Quo),e(Kp,Wuo),e(x,Huo),e(x,Zp),e(Zp,Ane),e(Ane,Uuo),e(Zp,Juo),e(Zp,yI),e(yI,Yuo),e(Zp,Kuo),e(x,Zuo),e(x,eu),e(eu,yne),e(yne,e_o),e(eu,o_o),e(eu,LI),e(LI,r_o),e(eu,t_o),e(x,a_o),e(x,ou),e(ou,Lne),e(Lne,n_o),e(ou,s_o),e(ou,xI),e(xI,l_o),e(ou,i_o),e(x,d_o),e(x,ru),e(ru,xne),e(xne,c_o),e(ru,f_o),e(ru,$I),e($I,m_o),e(ru,g_o),e(x,h_o),e(x,tu),e(tu,$ne),e($ne,p_o),e(tu,u_o),e(tu,kI),e(kI,__o),e(tu,b_o),e(x,v_o),e(x,au),e(au,kne),e(kne,F_o),e(au,T_o),e(au,SI),e(SI,M_o),e(au,E_o),e(x,C_o),e(x,nu),e(nu,Sne),e(Sne,w_o),e(nu,A_o),e(nu,RI),e(RI,y_o),e(nu,L_o),e(x,x_o),e(x,su),e(su,Rne),e(Rne,$_o),e(su,k_o),e(su,BI),e(BI,S_o),e(su,R_o),e(x,B_o),e(x,lu),e(lu,Bne),e(Bne,P_o),e(lu,I_o),e(lu,PI),e(PI,q_o),e(lu,N_o),e(x,j_o),e(x,iu),e(iu,Pne),e(Pne,D_o),e(iu,G_o),e(iu,II),e(II,O_o),e(iu,V_o),e(x,X_o),e(x,du),e(du,Ine),e(Ine,z_o),e(du,Q_o),e(du,qI),e(qI,W_o),e(du,H_o),e(x,U_o),e(x,cu),e(cu,qne),e(qne,J_o),e(cu,Y_o),e(cu,NI),e(NI,K_o),e(cu,Z_o),e(x,e1o),e(x,fu),e(fu,Nne),e(Nne,o1o),e(fu,r1o),e(fu,jI),e(jI,t1o),e(fu,a1o),e(x,n1o),e(x,mu),e(mu,jne),e(jne,s1o),e(mu,l1o),e(mu,DI),e(DI,i1o),e(mu,d1o),e(x,c1o),e(x,gu),e(gu,Dne),e(Dne,f1o),e(gu,m1o),e(gu,GI),e(GI,g1o),e(gu,h1o),e(x,p1o),e(x,hu),e(hu,Gne),e(Gne,u1o),e(hu,_1o),e(hu,OI),e(OI,b1o),e(hu,v1o),e(x,F1o),e(x,pu),e(pu,One),e(One,T1o),e(pu,M1o),e(pu,VI),e(VI,E1o),e(pu,C1o),e(x,w1o),e(x,uu),e(uu,Vne),e(Vne,A1o),e(uu,y1o),e(uu,XI),e(XI,L1o),e(uu,x1o),e(x,$1o),e(x,_u),e(_u,Xne),e(Xne,k1o),e(_u,S1o),e(_u,zI),e(zI,R1o),e(_u,B1o),e(x,P1o),e(x,bu),e(bu,zne),e(zne,I1o),e(bu,q1o),e(bu,QI),e(QI,N1o),e(bu,j1o),e(He,D1o),e(He,vu),e(vu,G1o),e(vu,Qne),e(Qne,O1o),e(vu,V1o),e(vu,Wne),e(Wne,X1o),e(He,z1o),M(Fu,He,null),b(f,RBe,_),b(f,bi,_),e(bi,Tu),e(Tu,Hne),M(r6,Hne,null),e(bi,Q1o),e(bi,Une),e(Une,W1o),b(f,BBe,_),b(f,xo,_),M(t6,xo,null),e(xo,H1o),e(xo,vi),e(vi,U1o),e(vi,WI),e(WI,J1o),e(vi,Y1o),e(vi,HI),e(HI,K1o),e(vi,Z1o),e(xo,ebo),e(xo,a6),e(a6,obo),e(a6,Jne),e(Jne,rbo),e(a6,tbo),e(xo,abo),e(xo,et),M(n6,et,null),e(et,nbo),e(et,Yne),e(Yne,sbo),e(et,lbo),e(et,Fi),e(Fi,ibo),e(Fi,Kne),e(Kne,dbo),e(Fi,cbo),e(Fi,UI),e(UI,fbo),e(Fi,mbo),e(et,gbo),M(Mu,et,null),e(xo,hbo),e(xo,Ue),M(s6,Ue,null),e(Ue,pbo),e(Ue,Zne),e(Zne,ubo),e(Ue,_bo),e(Ue,Ca),e(Ca,bbo),e(Ca,ese),e(ese,vbo),e(Ca,Fbo),e(Ca,ose),e(ose,Tbo),e(Ca,Mbo),e(Ca,rse),e(rse,Ebo),e(Ca,Cbo),e(Ue,wbo),e(Ue,G),e(G,Eu),e(Eu,tse),e(tse,Abo),e(Eu,ybo),e(Eu,JI),e(JI,Lbo),e(Eu,xbo),e(G,$bo),e(G,Cu),e(Cu,ase),e(ase,kbo),e(Cu,Sbo),e(Cu,YI),e(YI,Rbo),e(Cu,Bbo),e(G,Pbo),e(G,wu),e(wu,nse),e(nse,Ibo),e(wu,qbo),e(wu,KI),e(KI,Nbo),e(wu,jbo),e(G,Dbo),e(G,Au),e(Au,sse),e(sse,Gbo),e(Au,Obo),e(Au,ZI),e(ZI,Vbo),e(Au,Xbo),e(G,zbo),e(G,yu),e(yu,lse),e(lse,Qbo),e(yu,Wbo),e(yu,eq),e(eq,Hbo),e(yu,Ubo),e(G,Jbo),e(G,Lu),e(Lu,ise),e(ise,Ybo),e(Lu,Kbo),e(Lu,oq),e(oq,Zbo),e(Lu,e2o),e(G,o2o),e(G,xu),e(xu,dse),e(dse,r2o),e(xu,t2o),e(xu,rq),e(rq,a2o),e(xu,n2o),e(G,s2o),e(G,$u),e($u,cse),e(cse,l2o),e($u,i2o),e($u,tq),e(tq,d2o),e($u,c2o),e(G,f2o),e(G,ku),e(ku,fse),e(fse,m2o),e(ku,g2o),e(ku,aq),e(aq,h2o),e(ku,p2o),e(G,u2o),e(G,Su),e(Su,mse),e(mse,_2o),e(Su,b2o),e(Su,nq),e(nq,v2o),e(Su,F2o),e(G,T2o),e(G,Ru),e(Ru,gse),e(gse,M2o),e(Ru,E2o),e(Ru,sq),e(sq,C2o),e(Ru,w2o),e(G,A2o),e(G,Bu),e(Bu,hse),e(hse,y2o),e(Bu,L2o),e(Bu,lq),e(lq,x2o),e(Bu,$2o),e(G,k2o),e(G,Pu),e(Pu,pse),e(pse,S2o),e(Pu,R2o),e(Pu,iq),e(iq,B2o),e(Pu,P2o),e(G,I2o),e(G,Iu),e(Iu,use),e(use,q2o),e(Iu,N2o),e(Iu,dq),e(dq,j2o),e(Iu,D2o),e(G,G2o),e(G,qu),e(qu,_se),e(_se,O2o),e(qu,V2o),e(qu,cq),e(cq,X2o),e(qu,z2o),e(G,Q2o),e(G,Nu),e(Nu,bse),e(bse,W2o),e(Nu,H2o),e(Nu,fq),e(fq,U2o),e(Nu,J2o),e(G,Y2o),e(G,ju),e(ju,vse),e(vse,K2o),e(ju,Z2o),e(ju,mq),e(mq,e5o),e(ju,o5o),e(G,r5o),e(G,Du),e(Du,Fse),e(Fse,t5o),e(Du,a5o),e(Du,gq),e(gq,n5o),e(Du,s5o),e(G,l5o),e(G,Gu),e(Gu,Tse),e(Tse,i5o),e(Gu,d5o),e(Gu,hq),e(hq,c5o),e(Gu,f5o),e(G,m5o),e(G,Ou),e(Ou,Mse),e(Mse,g5o),e(Ou,h5o),e(Ou,pq),e(pq,p5o),e(Ou,u5o),e(G,_5o),e(G,Vu),e(Vu,Ese),e(Ese,b5o),e(Vu,v5o),e(Vu,uq),e(uq,F5o),e(Vu,T5o),e(G,M5o),e(G,Xu),e(Xu,Cse),e(Cse,E5o),e(Xu,C5o),e(Xu,_q),e(_q,w5o),e(Xu,A5o),e(G,y5o),e(G,zu),e(zu,wse),e(wse,L5o),e(zu,x5o),e(zu,bq),e(bq,$5o),e(zu,k5o),e(G,S5o),e(G,Qu),e(Qu,Ase),e(Ase,R5o),e(Qu,B5o),e(Qu,vq),e(vq,P5o),e(Qu,I5o),e(G,q5o),e(G,Wu),e(Wu,yse),e(yse,N5o),e(Wu,j5o),e(Wu,Fq),e(Fq,D5o),e(Wu,G5o),e(G,O5o),e(G,Hu),e(Hu,Lse),e(Lse,V5o),e(Hu,X5o),e(Hu,Tq),e(Tq,z5o),e(Hu,Q5o),e(G,W5o),e(G,Uu),e(Uu,xse),e(xse,H5o),e(Uu,U5o),e(Uu,Mq),e(Mq,J5o),e(Uu,Y5o),e(G,K5o),e(G,Ju),e(Ju,$se),e($se,Z5o),e(Ju,e3o),e(Ju,Eq),e(Eq,o3o),e(Ju,r3o),e(G,t3o),e(G,Yu),e(Yu,kse),e(kse,a3o),e(Yu,n3o),e(Yu,Cq),e(Cq,s3o),e(Yu,l3o),e(G,i3o),e(G,Ku),e(Ku,Sse),e(Sse,d3o),e(Ku,c3o),e(Ku,wq),e(wq,f3o),e(Ku,m3o),e(G,g3o),e(G,Zu),e(Zu,Rse),e(Rse,h3o),e(Zu,p3o),e(Zu,Aq),e(Aq,u3o),e(Zu,_3o),e(G,b3o),e(G,e_),e(e_,Bse),e(Bse,v3o),e(e_,F3o),e(e_,yq),e(yq,T3o),e(e_,M3o),e(G,E3o),e(G,o_),e(o_,Pse),e(Pse,C3o),e(o_,w3o),e(o_,Lq),e(Lq,A3o),e(o_,y3o),e(G,L3o),e(G,r_),e(r_,Ise),e(Ise,x3o),e(r_,$3o),e(r_,xq),e(xq,k3o),e(r_,S3o),e(G,R3o),e(G,t_),e(t_,qse),e(qse,B3o),e(t_,P3o),e(t_,$q),e($q,I3o),e(t_,q3o),e(G,N3o),e(G,a_),e(a_,Nse),e(Nse,j3o),e(a_,D3o),e(a_,kq),e(kq,G3o),e(a_,O3o),e(G,V3o),e(G,n_),e(n_,jse),e(jse,X3o),e(n_,z3o),e(n_,Sq),e(Sq,Q3o),e(n_,W3o),e(G,H3o),e(G,s_),e(s_,Dse),e(Dse,U3o),e(s_,J3o),e(s_,Rq),e(Rq,Y3o),e(s_,K3o),e(G,Z3o),e(G,l_),e(l_,Gse),e(Gse,evo),e(l_,ovo),e(l_,Bq),e(Bq,rvo),e(l_,tvo),e(Ue,avo),e(Ue,i_),e(i_,nvo),e(i_,Ose),e(Ose,svo),e(i_,lvo),e(i_,Vse),e(Vse,ivo),e(Ue,dvo),M(d_,Ue,null),b(f,PBe,_),b(f,Ti,_),e(Ti,c_),e(c_,Xse),M(l6,Xse,null),e(Ti,cvo),e(Ti,zse),e(zse,fvo),b(f,IBe,_),b(f,$o,_),M(i6,$o,null),e($o,mvo),e($o,Mi),e(Mi,gvo),e(Mi,Pq),e(Pq,hvo),e(Mi,pvo),e(Mi,Iq),e(Iq,uvo),e(Mi,_vo),e($o,bvo),e($o,d6),e(d6,vvo),e(d6,Qse),e(Qse,Fvo),e(d6,Tvo),e($o,Mvo),e($o,ot),M(c6,ot,null),e(ot,Evo),e(ot,Wse),e(Wse,Cvo),e(ot,wvo),e(ot,Ei),e(Ei,Avo),e(Ei,Hse),e(Hse,yvo),e(Ei,Lvo),e(Ei,qq),e(qq,xvo),e(Ei,$vo),e(ot,kvo),M(f_,ot,null),e($o,Svo),e($o,Je),M(f6,Je,null),e(Je,Rvo),e(Je,Use),e(Use,Bvo),e(Je,Pvo),e(Je,wa),e(wa,Ivo),e(wa,Jse),e(Jse,qvo),e(wa,Nvo),e(wa,Yse),e(Yse,jvo),e(wa,Dvo),e(wa,Kse),e(Kse,Gvo),e(wa,Ovo),e(Je,Vvo),e(Je,z),e(z,m_),e(m_,Zse),e(Zse,Xvo),e(m_,zvo),e(m_,Nq),e(Nq,Qvo),e(m_,Wvo),e(z,Hvo),e(z,g_),e(g_,ele),e(ele,Uvo),e(g_,Jvo),e(g_,jq),e(jq,Yvo),e(g_,Kvo),e(z,Zvo),e(z,h_),e(h_,ole),e(ole,eFo),e(h_,oFo),e(h_,Dq),e(Dq,rFo),e(h_,tFo),e(z,aFo),e(z,p_),e(p_,rle),e(rle,nFo),e(p_,sFo),e(p_,Gq),e(Gq,lFo),e(p_,iFo),e(z,dFo),e(z,u_),e(u_,tle),e(tle,cFo),e(u_,fFo),e(u_,Oq),e(Oq,mFo),e(u_,gFo),e(z,hFo),e(z,__),e(__,ale),e(ale,pFo),e(__,uFo),e(__,Vq),e(Vq,_Fo),e(__,bFo),e(z,vFo),e(z,b_),e(b_,nle),e(nle,FFo),e(b_,TFo),e(b_,Xq),e(Xq,MFo),e(b_,EFo),e(z,CFo),e(z,v_),e(v_,sle),e(sle,wFo),e(v_,AFo),e(v_,zq),e(zq,yFo),e(v_,LFo),e(z,xFo),e(z,F_),e(F_,lle),e(lle,$Fo),e(F_,kFo),e(F_,Qq),e(Qq,SFo),e(F_,RFo),e(z,BFo),e(z,T_),e(T_,ile),e(ile,PFo),e(T_,IFo),e(T_,Wq),e(Wq,qFo),e(T_,NFo),e(z,jFo),e(z,M_),e(M_,dle),e(dle,DFo),e(M_,GFo),e(M_,Hq),e(Hq,OFo),e(M_,VFo),e(z,XFo),e(z,E_),e(E_,cle),e(cle,zFo),e(E_,QFo),e(E_,Uq),e(Uq,WFo),e(E_,HFo),e(z,UFo),e(z,C_),e(C_,fle),e(fle,JFo),e(C_,YFo),e(C_,Jq),e(Jq,KFo),e(C_,ZFo),e(z,eTo),e(z,w_),e(w_,mle),e(mle,oTo),e(w_,rTo),e(w_,Yq),e(Yq,tTo),e(w_,aTo),e(z,nTo),e(z,A_),e(A_,gle),e(gle,sTo),e(A_,lTo),e(A_,Kq),e(Kq,iTo),e(A_,dTo),e(z,cTo),e(z,y_),e(y_,hle),e(hle,fTo),e(y_,mTo),e(y_,Zq),e(Zq,gTo),e(y_,hTo),e(z,pTo),e(z,L_),e(L_,ple),e(ple,uTo),e(L_,_To),e(L_,eN),e(eN,bTo),e(L_,vTo),e(z,FTo),e(z,x_),e(x_,ule),e(ule,TTo),e(x_,MTo),e(x_,oN),e(oN,ETo),e(x_,CTo),e(z,wTo),e(z,$_),e($_,_le),e(_le,ATo),e($_,yTo),e($_,rN),e(rN,LTo),e($_,xTo),e(z,$To),e(z,k_),e(k_,ble),e(ble,kTo),e(k_,STo),e(k_,tN),e(tN,RTo),e(k_,BTo),e(z,PTo),e(z,S_),e(S_,vle),e(vle,ITo),e(S_,qTo),e(S_,aN),e(aN,NTo),e(S_,jTo),e(z,DTo),e(z,R_),e(R_,Fle),e(Fle,GTo),e(R_,OTo),e(R_,nN),e(nN,VTo),e(R_,XTo),e(z,zTo),e(z,B_),e(B_,Tle),e(Tle,QTo),e(B_,WTo),e(B_,sN),e(sN,HTo),e(B_,UTo),e(z,JTo),e(z,P_),e(P_,Mle),e(Mle,YTo),e(P_,KTo),e(P_,lN),e(lN,ZTo),e(P_,e7o),e(z,o7o),e(z,I_),e(I_,Ele),e(Ele,r7o),e(I_,t7o),e(I_,iN),e(iN,a7o),e(I_,n7o),e(z,s7o),e(z,q_),e(q_,Cle),e(Cle,l7o),e(q_,i7o),e(q_,dN),e(dN,d7o),e(q_,c7o),e(z,f7o),e(z,N_),e(N_,wle),e(wle,m7o),e(N_,g7o),e(N_,cN),e(cN,h7o),e(N_,p7o),e(z,u7o),e(z,j_),e(j_,Ale),e(Ale,_7o),e(j_,b7o),e(j_,fN),e(fN,v7o),e(j_,F7o),e(z,T7o),e(z,D_),e(D_,yle),e(yle,M7o),e(D_,E7o),e(D_,mN),e(mN,C7o),e(D_,w7o),e(z,A7o),e(z,G_),e(G_,Lle),e(Lle,y7o),e(G_,L7o),e(G_,gN),e(gN,x7o),e(G_,$7o),e(z,k7o),e(z,O_),e(O_,xle),e(xle,S7o),e(O_,R7o),e(O_,hN),e(hN,B7o),e(O_,P7o),e(z,I7o),e(z,V_),e(V_,$le),e($le,q7o),e(V_,N7o),e(V_,pN),e(pN,j7o),e(V_,D7o),e(z,G7o),e(z,X_),e(X_,kle),e(kle,O7o),e(X_,V7o),e(X_,uN),e(uN,X7o),e(X_,z7o),e(z,Q7o),e(z,z_),e(z_,Sle),e(Sle,W7o),e(z_,H7o),e(z_,_N),e(_N,U7o),e(z_,J7o),e(z,Y7o),e(z,Q_),e(Q_,Rle),e(Rle,K7o),e(Q_,Z7o),e(Q_,bN),e(bN,eMo),e(Q_,oMo),e(Je,rMo),e(Je,W_),e(W_,tMo),e(W_,Ble),e(Ble,aMo),e(W_,nMo),e(W_,Ple),e(Ple,sMo),e(Je,lMo),M(H_,Je,null),b(f,qBe,_),b(f,Ci,_),e(Ci,U_),e(U_,Ile),M(m6,Ile,null),e(Ci,iMo),e(Ci,qle),e(qle,dMo),b(f,NBe,_),b(f,ko,_),M(g6,ko,null),e(ko,cMo),e(ko,wi),e(wi,fMo),e(wi,vN),e(vN,mMo),e(wi,gMo),e(wi,FN),e(FN,hMo),e(wi,pMo),e(ko,uMo),e(ko,h6),e(h6,_Mo),e(h6,Nle),e(Nle,bMo),e(h6,vMo),e(ko,FMo),e(ko,rt),M(p6,rt,null),e(rt,TMo),e(rt,jle),e(jle,MMo),e(rt,EMo),e(rt,Ai),e(Ai,CMo),e(Ai,Dle),e(Dle,wMo),e(Ai,AMo),e(Ai,TN),e(TN,yMo),e(Ai,LMo),e(rt,xMo),M(J_,rt,null),e(ko,$Mo),e(ko,Ye),M(u6,Ye,null),e(Ye,kMo),e(Ye,Gle),e(Gle,SMo),e(Ye,RMo),e(Ye,Aa),e(Aa,BMo),e(Aa,Ole),e(Ole,PMo),e(Aa,IMo),e(Aa,Vle),e(Vle,qMo),e(Aa,NMo),e(Aa,Xle),e(Xle,jMo),e(Aa,DMo),e(Ye,GMo),e(Ye,Q),e(Q,Y_),e(Y_,zle),e(zle,OMo),e(Y_,VMo),e(Y_,MN),e(MN,XMo),e(Y_,zMo),e(Q,QMo),e(Q,K_),e(K_,Qle),e(Qle,WMo),e(K_,HMo),e(K_,EN),e(EN,UMo),e(K_,JMo),e(Q,YMo),e(Q,Z_),e(Z_,Wle),e(Wle,KMo),e(Z_,ZMo),e(Z_,CN),e(CN,e4o),e(Z_,o4o),e(Q,r4o),e(Q,e1),e(e1,Hle),e(Hle,t4o),e(e1,a4o),e(e1,wN),e(wN,n4o),e(e1,s4o),e(Q,l4o),e(Q,o1),e(o1,Ule),e(Ule,i4o),e(o1,d4o),e(o1,AN),e(AN,c4o),e(o1,f4o),e(Q,m4o),e(Q,r1),e(r1,Jle),e(Jle,g4o),e(r1,h4o),e(r1,yN),e(yN,p4o),e(r1,u4o),e(Q,_4o),e(Q,t1),e(t1,Yle),e(Yle,b4o),e(t1,v4o),e(t1,LN),e(LN,F4o),e(t1,T4o),e(Q,M4o),e(Q,a1),e(a1,Kle),e(Kle,E4o),e(a1,C4o),e(a1,xN),e(xN,w4o),e(a1,A4o),e(Q,y4o),e(Q,n1),e(n1,Zle),e(Zle,L4o),e(n1,x4o),e(n1,$N),e($N,$4o),e(n1,k4o),e(Q,S4o),e(Q,s1),e(s1,eie),e(eie,R4o),e(s1,B4o),e(s1,kN),e(kN,P4o),e(s1,I4o),e(Q,q4o),e(Q,l1),e(l1,oie),e(oie,N4o),e(l1,j4o),e(l1,SN),e(SN,D4o),e(l1,G4o),e(Q,O4o),e(Q,i1),e(i1,rie),e(rie,V4o),e(i1,X4o),e(i1,RN),e(RN,z4o),e(i1,Q4o),e(Q,W4o),e(Q,d1),e(d1,tie),e(tie,H4o),e(d1,U4o),e(d1,BN),e(BN,J4o),e(d1,Y4o),e(Q,K4o),e(Q,c1),e(c1,aie),e(aie,Z4o),e(c1,eEo),e(c1,PN),e(PN,oEo),e(c1,rEo),e(Q,tEo),e(Q,f1),e(f1,nie),e(nie,aEo),e(f1,nEo),e(f1,IN),e(IN,sEo),e(f1,lEo),e(Q,iEo),e(Q,m1),e(m1,sie),e(sie,dEo),e(m1,cEo),e(m1,qN),e(qN,fEo),e(m1,mEo),e(Q,gEo),e(Q,g1),e(g1,lie),e(lie,hEo),e(g1,pEo),e(g1,NN),e(NN,uEo),e(g1,_Eo),e(Q,bEo),e(Q,h1),e(h1,iie),e(iie,vEo),e(h1,FEo),e(h1,jN),e(jN,TEo),e(h1,MEo),e(Q,EEo),e(Q,p1),e(p1,die),e(die,CEo),e(p1,wEo),e(p1,DN),e(DN,AEo),e(p1,yEo),e(Q,LEo),e(Q,u1),e(u1,cie),e(cie,xEo),e(u1,$Eo),e(u1,GN),e(GN,kEo),e(u1,SEo),e(Q,REo),e(Q,_1),e(_1,fie),e(fie,BEo),e(_1,PEo),e(_1,ON),e(ON,IEo),e(_1,qEo),e(Q,NEo),e(Q,b1),e(b1,mie),e(mie,jEo),e(b1,DEo),e(b1,VN),e(VN,GEo),e(b1,OEo),e(Q,VEo),e(Q,v1),e(v1,gie),e(gie,XEo),e(v1,zEo),e(v1,XN),e(XN,QEo),e(v1,WEo),e(Q,HEo),e(Q,F1),e(F1,hie),e(hie,UEo),e(F1,JEo),e(F1,zN),e(zN,YEo),e(F1,KEo),e(Q,ZEo),e(Q,T1),e(T1,pie),e(pie,eCo),e(T1,oCo),e(T1,QN),e(QN,rCo),e(T1,tCo),e(Q,aCo),e(Q,M1),e(M1,uie),e(uie,nCo),e(M1,sCo),e(M1,WN),e(WN,lCo),e(M1,iCo),e(Q,dCo),e(Q,E1),e(E1,_ie),e(_ie,cCo),e(E1,fCo),e(E1,HN),e(HN,mCo),e(E1,gCo),e(Q,hCo),e(Q,C1),e(C1,bie),e(bie,pCo),e(C1,uCo),e(C1,UN),e(UN,_Co),e(C1,bCo),e(Q,vCo),e(Q,w1),e(w1,vie),e(vie,FCo),e(w1,TCo),e(w1,JN),e(JN,MCo),e(w1,ECo),e(Q,CCo),e(Q,A1),e(A1,Fie),e(Fie,wCo),e(A1,ACo),e(A1,YN),e(YN,yCo),e(A1,LCo),e(Q,xCo),e(Q,y1),e(y1,Tie),e(Tie,$Co),e(y1,kCo),e(y1,Mie),e(Mie,SCo),e(y1,RCo),e(Q,BCo),e(Q,L1),e(L1,Eie),e(Eie,PCo),e(L1,ICo),e(L1,KN),e(KN,qCo),e(L1,NCo),e(Q,jCo),e(Q,x1),e(x1,Cie),e(Cie,DCo),e(x1,GCo),e(x1,ZN),e(ZN,OCo),e(x1,VCo),e(Q,XCo),e(Q,$1),e($1,wie),e(wie,zCo),e($1,QCo),e($1,ej),e(ej,WCo),e($1,HCo),e(Q,UCo),e(Q,k1),e(k1,Aie),e(Aie,JCo),e(k1,YCo),e(k1,oj),e(oj,KCo),e(k1,ZCo),e(Ye,ewo),e(Ye,S1),e(S1,owo),e(S1,yie),e(yie,rwo),e(S1,two),e(S1,Lie),e(Lie,awo),e(Ye,nwo),M(R1,Ye,null),b(f,jBe,_),b(f,yi,_),e(yi,B1),e(B1,xie),M(_6,xie,null),e(yi,swo),e(yi,$ie),e($ie,lwo),b(f,DBe,_),b(f,So,_),M(b6,So,null),e(So,iwo),e(So,Li),e(Li,dwo),e(Li,rj),e(rj,cwo),e(Li,fwo),e(Li,tj),e(tj,mwo),e(Li,gwo),e(So,hwo),e(So,v6),e(v6,pwo),e(v6,kie),e(kie,uwo),e(v6,_wo),e(So,bwo),e(So,tt),M(F6,tt,null),e(tt,vwo),e(tt,Sie),e(Sie,Fwo),e(tt,Two),e(tt,xi),e(xi,Mwo),e(xi,Rie),e(Rie,Ewo),e(xi,Cwo),e(xi,aj),e(aj,wwo),e(xi,Awo),e(tt,ywo),M(P1,tt,null),e(So,Lwo),e(So,Ke),M(T6,Ke,null),e(Ke,xwo),e(Ke,Bie),e(Bie,$wo),e(Ke,kwo),e(Ke,ya),e(ya,Swo),e(ya,Pie),e(Pie,Rwo),e(ya,Bwo),e(ya,Iie),e(Iie,Pwo),e(ya,Iwo),e(ya,qie),e(qie,qwo),e(ya,Nwo),e(Ke,jwo),e(Ke,he),e(he,I1),e(I1,Nie),e(Nie,Dwo),e(I1,Gwo),e(I1,nj),e(nj,Owo),e(I1,Vwo),e(he,Xwo),e(he,q1),e(q1,jie),e(jie,zwo),e(q1,Qwo),e(q1,sj),e(sj,Wwo),e(q1,Hwo),e(he,Uwo),e(he,N1),e(N1,Die),e(Die,Jwo),e(N1,Ywo),e(N1,lj),e(lj,Kwo),e(N1,Zwo),e(he,eAo),e(he,j1),e(j1,Gie),e(Gie,oAo),e(j1,rAo),e(j1,ij),e(ij,tAo),e(j1,aAo),e(he,nAo),e(he,D1),e(D1,Oie),e(Oie,sAo),e(D1,lAo),e(D1,dj),e(dj,iAo),e(D1,dAo),e(he,cAo),e(he,G1),e(G1,Vie),e(Vie,fAo),e(G1,mAo),e(G1,cj),e(cj,gAo),e(G1,hAo),e(he,pAo),e(he,O1),e(O1,Xie),e(Xie,uAo),e(O1,_Ao),e(O1,fj),e(fj,bAo),e(O1,vAo),e(he,FAo),e(he,V1),e(V1,zie),e(zie,TAo),e(V1,MAo),e(V1,mj),e(mj,EAo),e(V1,CAo),e(he,wAo),e(he,X1),e(X1,Qie),e(Qie,AAo),e(X1,yAo),e(X1,gj),e(gj,LAo),e(X1,xAo),e(he,$Ao),e(he,z1),e(z1,Wie),e(Wie,kAo),e(z1,SAo),e(z1,hj),e(hj,RAo),e(z1,BAo),e(he,PAo),e(he,Q1),e(Q1,Hie),e(Hie,IAo),e(Q1,qAo),e(Q1,pj),e(pj,NAo),e(Q1,jAo),e(he,DAo),e(he,W1),e(W1,Uie),e(Uie,GAo),e(W1,OAo),e(W1,uj),e(uj,VAo),e(W1,XAo),e(he,zAo),e(he,H1),e(H1,Jie),e(Jie,QAo),e(H1,WAo),e(H1,_j),e(_j,HAo),e(H1,UAo),e(he,JAo),e(he,U1),e(U1,Yie),e(Yie,YAo),e(U1,KAo),e(U1,bj),e(bj,ZAo),e(U1,e0o),e(he,o0o),e(he,J1),e(J1,Kie),e(Kie,r0o),e(J1,t0o),e(J1,vj),e(vj,a0o),e(J1,n0o),e(he,s0o),e(he,Y1),e(Y1,Zie),e(Zie,l0o),e(Y1,i0o),e(Y1,Fj),e(Fj,d0o),e(Y1,c0o),e(he,f0o),e(he,K1),e(K1,ede),e(ede,m0o),e(K1,g0o),e(K1,Tj),e(Tj,h0o),e(K1,p0o),e(Ke,u0o),e(Ke,Z1),e(Z1,_0o),e(Z1,ode),e(ode,b0o),e(Z1,v0o),e(Z1,rde),e(rde,F0o),e(Ke,T0o),M(eb,Ke,null),b(f,GBe,_),b(f,$i,_),e($i,ob),e(ob,tde),M(M6,tde,null),e($i,M0o),e($i,ade),e(ade,E0o),b(f,OBe,_),b(f,Ro,_),M(E6,Ro,null),e(Ro,C0o),e(Ro,ki),e(ki,w0o),e(ki,Mj),e(Mj,A0o),e(ki,y0o),e(ki,Ej),e(Ej,L0o),e(ki,x0o),e(Ro,$0o),e(Ro,C6),e(C6,k0o),e(C6,nde),e(nde,S0o),e(C6,R0o),e(Ro,B0o),e(Ro,at),M(w6,at,null),e(at,P0o),e(at,sde),e(sde,I0o),e(at,q0o),e(at,Si),e(Si,N0o),e(Si,lde),e(lde,j0o),e(Si,D0o),e(Si,Cj),e(Cj,G0o),e(Si,O0o),e(at,V0o),M(rb,at,null),e(Ro,X0o),e(Ro,Ze),M(A6,Ze,null),e(Ze,z0o),e(Ze,ide),e(ide,Q0o),e(Ze,W0o),e(Ze,La),e(La,H0o),e(La,dde),e(dde,U0o),e(La,J0o),e(La,cde),e(cde,Y0o),e(La,K0o),e(La,fde),e(fde,Z0o),e(La,e6o),e(Ze,o6o),e(Ze,q),e(q,tb),e(tb,mde),e(mde,r6o),e(tb,t6o),e(tb,wj),e(wj,a6o),e(tb,n6o),e(q,s6o),e(q,ab),e(ab,gde),e(gde,l6o),e(ab,i6o),e(ab,Aj),e(Aj,d6o),e(ab,c6o),e(q,f6o),e(q,nb),e(nb,hde),e(hde,m6o),e(nb,g6o),e(nb,yj),e(yj,h6o),e(nb,p6o),e(q,u6o),e(q,sb),e(sb,pde),e(pde,_6o),e(sb,b6o),e(sb,Lj),e(Lj,v6o),e(sb,F6o),e(q,T6o),e(q,lb),e(lb,ude),e(ude,M6o),e(lb,E6o),e(lb,xj),e(xj,C6o),e(lb,w6o),e(q,A6o),e(q,ib),e(ib,_de),e(_de,y6o),e(ib,L6o),e(ib,$j),e($j,x6o),e(ib,$6o),e(q,k6o),e(q,db),e(db,bde),e(bde,S6o),e(db,R6o),e(db,kj),e(kj,B6o),e(db,P6o),e(q,I6o),e(q,cb),e(cb,vde),e(vde,q6o),e(cb,N6o),e(cb,Sj),e(Sj,j6o),e(cb,D6o),e(q,G6o),e(q,fb),e(fb,Fde),e(Fde,O6o),e(fb,V6o),e(fb,Rj),e(Rj,X6o),e(fb,z6o),e(q,Q6o),e(q,mb),e(mb,Tde),e(Tde,W6o),e(mb,H6o),e(mb,Bj),e(Bj,U6o),e(mb,J6o),e(q,Y6o),e(q,gb),e(gb,Mde),e(Mde,K6o),e(gb,Z6o),e(gb,Pj),e(Pj,eyo),e(gb,oyo),e(q,ryo),e(q,hb),e(hb,Ede),e(Ede,tyo),e(hb,ayo),e(hb,Ij),e(Ij,nyo),e(hb,syo),e(q,lyo),e(q,pb),e(pb,Cde),e(Cde,iyo),e(pb,dyo),e(pb,qj),e(qj,cyo),e(pb,fyo),e(q,myo),e(q,ub),e(ub,wde),e(wde,gyo),e(ub,hyo),e(ub,Nj),e(Nj,pyo),e(ub,uyo),e(q,_yo),e(q,_b),e(_b,Ade),e(Ade,byo),e(_b,vyo),e(_b,jj),e(jj,Fyo),e(_b,Tyo),e(q,Myo),e(q,bb),e(bb,yde),e(yde,Eyo),e(bb,Cyo),e(bb,Dj),e(Dj,wyo),e(bb,Ayo),e(q,yyo),e(q,vb),e(vb,Lde),e(Lde,Lyo),e(vb,xyo),e(vb,Gj),e(Gj,$yo),e(vb,kyo),e(q,Syo),e(q,Fb),e(Fb,xde),e(xde,Ryo),e(Fb,Byo),e(Fb,Oj),e(Oj,Pyo),e(Fb,Iyo),e(q,qyo),e(q,Tb),e(Tb,$de),e($de,Nyo),e(Tb,jyo),e(Tb,Vj),e(Vj,Dyo),e(Tb,Gyo),e(q,Oyo),e(q,Mb),e(Mb,kde),e(kde,Vyo),e(Mb,Xyo),e(Mb,Xj),e(Xj,zyo),e(Mb,Qyo),e(q,Wyo),e(q,Eb),e(Eb,Sde),e(Sde,Hyo),e(Eb,Uyo),e(Eb,zj),e(zj,Jyo),e(Eb,Yyo),e(q,Kyo),e(q,Cb),e(Cb,Rde),e(Rde,Zyo),e(Cb,eLo),e(Cb,Qj),e(Qj,oLo),e(Cb,rLo),e(q,tLo),e(q,wb),e(wb,Bde),e(Bde,aLo),e(wb,nLo),e(wb,Wj),e(Wj,sLo),e(wb,lLo),e(q,iLo),e(q,Ab),e(Ab,Pde),e(Pde,dLo),e(Ab,cLo),e(Ab,Hj),e(Hj,fLo),e(Ab,mLo),e(q,gLo),e(q,yb),e(yb,Ide),e(Ide,hLo),e(yb,pLo),e(yb,Uj),e(Uj,uLo),e(yb,_Lo),e(q,bLo),e(q,Lb),e(Lb,qde),e(qde,vLo),e(Lb,FLo),e(Lb,Jj),e(Jj,TLo),e(Lb,MLo),e(q,ELo),e(q,xb),e(xb,Nde),e(Nde,CLo),e(xb,wLo),e(xb,Yj),e(Yj,ALo),e(xb,yLo),e(q,LLo),e(q,$b),e($b,jde),e(jde,xLo),e($b,$Lo),e($b,Kj),e(Kj,kLo),e($b,SLo),e(q,RLo),e(q,kb),e(kb,Dde),e(Dde,BLo),e(kb,PLo),e(kb,Zj),e(Zj,ILo),e(kb,qLo),e(q,NLo),e(q,Sb),e(Sb,Gde),e(Gde,jLo),e(Sb,DLo),e(Sb,eD),e(eD,GLo),e(Sb,OLo),e(q,VLo),e(q,Rb),e(Rb,Ode),e(Ode,XLo),e(Rb,zLo),e(Rb,oD),e(oD,QLo),e(Rb,WLo),e(q,HLo),e(q,Bb),e(Bb,Vde),e(Vde,ULo),e(Bb,JLo),e(Bb,rD),e(rD,YLo),e(Bb,KLo),e(q,ZLo),e(q,Pb),e(Pb,Xde),e(Xde,e8o),e(Pb,o8o),e(Pb,tD),e(tD,r8o),e(Pb,t8o),e(q,a8o),e(q,Ib),e(Ib,zde),e(zde,n8o),e(Ib,s8o),e(Ib,aD),e(aD,l8o),e(Ib,i8o),e(q,d8o),e(q,qb),e(qb,Qde),e(Qde,c8o),e(qb,f8o),e(qb,nD),e(nD,m8o),e(qb,g8o),e(q,h8o),e(q,Nb),e(Nb,Wde),e(Wde,p8o),e(Nb,u8o),e(Nb,sD),e(sD,_8o),e(Nb,b8o),e(q,v8o),e(q,jb),e(jb,Hde),e(Hde,F8o),e(jb,T8o),e(jb,lD),e(lD,M8o),e(jb,E8o),e(q,C8o),e(q,Db),e(Db,Ude),e(Ude,w8o),e(Db,A8o),e(Db,iD),e(iD,y8o),e(Db,L8o),e(q,x8o),e(q,Gb),e(Gb,Jde),e(Jde,$8o),e(Gb,k8o),e(Gb,dD),e(dD,S8o),e(Gb,R8o),e(q,B8o),e(q,Ob),e(Ob,Yde),e(Yde,P8o),e(Ob,I8o),e(Ob,cD),e(cD,q8o),e(Ob,N8o),e(q,j8o),e(q,Vb),e(Vb,Kde),e(Kde,D8o),e(Vb,G8o),e(Vb,fD),e(fD,O8o),e(Vb,V8o),e(q,X8o),e(q,Xb),e(Xb,Zde),e(Zde,z8o),e(Xb,Q8o),e(Xb,mD),e(mD,W8o),e(Xb,H8o),e(q,U8o),e(q,zb),e(zb,ece),e(ece,J8o),e(zb,Y8o),e(zb,gD),e(gD,K8o),e(zb,Z8o),e(q,exo),e(q,Qb),e(Qb,oce),e(oce,oxo),e(Qb,rxo),e(Qb,hD),e(hD,txo),e(Qb,axo),e(q,nxo),e(q,Wb),e(Wb,rce),e(rce,sxo),e(Wb,lxo),e(Wb,pD),e(pD,ixo),e(Wb,dxo),e(q,cxo),e(q,Hb),e(Hb,tce),e(tce,fxo),e(Hb,mxo),e(Hb,uD),e(uD,gxo),e(Hb,hxo),e(q,pxo),e(q,Ub),e(Ub,ace),e(ace,uxo),e(Ub,_xo),e(Ub,_D),e(_D,bxo),e(Ub,vxo),e(Ze,Fxo),e(Ze,Jb),e(Jb,Txo),e(Jb,nce),e(nce,Mxo),e(Jb,Exo),e(Jb,sce),e(sce,Cxo),e(Ze,wxo),M(Yb,Ze,null),b(f,VBe,_),b(f,Ri,_),e(Ri,Kb),e(Kb,lce),M(y6,lce,null),e(Ri,Axo),e(Ri,ice),e(ice,yxo),b(f,XBe,_),b(f,Bo,_),M(L6,Bo,null),e(Bo,Lxo),e(Bo,Bi),e(Bi,xxo),e(Bi,bD),e(bD,$xo),e(Bi,kxo),e(Bi,vD),e(vD,Sxo),e(Bi,Rxo),e(Bo,Bxo),e(Bo,x6),e(x6,Pxo),e(x6,dce),e(dce,Ixo),e(x6,qxo),e(Bo,Nxo),e(Bo,nt),M($6,nt,null),e(nt,jxo),e(nt,cce),e(cce,Dxo),e(nt,Gxo),e(nt,Pi),e(Pi,Oxo),e(Pi,fce),e(fce,Vxo),e(Pi,Xxo),e(Pi,FD),e(FD,zxo),e(Pi,Qxo),e(nt,Wxo),M(Zb,nt,null),e(Bo,Hxo),e(Bo,eo),M(k6,eo,null),e(eo,Uxo),e(eo,mce),e(mce,Jxo),e(eo,Yxo),e(eo,xa),e(xa,Kxo),e(xa,gce),e(gce,Zxo),e(xa,e9o),e(xa,hce),e(hce,o9o),e(xa,r9o),e(xa,pce),e(pce,t9o),e(xa,a9o),e(eo,n9o),e(eo,Y),e(Y,e2),e(e2,uce),e(uce,s9o),e(e2,l9o),e(e2,TD),e(TD,i9o),e(e2,d9o),e(Y,c9o),e(Y,o2),e(o2,_ce),e(_ce,f9o),e(o2,m9o),e(o2,MD),e(MD,g9o),e(o2,h9o),e(Y,p9o),e(Y,r2),e(r2,bce),e(bce,u9o),e(r2,_9o),e(r2,ED),e(ED,b9o),e(r2,v9o),e(Y,F9o),e(Y,t2),e(t2,vce),e(vce,T9o),e(t2,M9o),e(t2,CD),e(CD,E9o),e(t2,C9o),e(Y,w9o),e(Y,a2),e(a2,Fce),e(Fce,A9o),e(a2,y9o),e(a2,wD),e(wD,L9o),e(a2,x9o),e(Y,$9o),e(Y,n2),e(n2,Tce),e(Tce,k9o),e(n2,S9o),e(n2,AD),e(AD,R9o),e(n2,B9o),e(Y,P9o),e(Y,s2),e(s2,Mce),e(Mce,I9o),e(s2,q9o),e(s2,yD),e(yD,N9o),e(s2,j9o),e(Y,D9o),e(Y,l2),e(l2,Ece),e(Ece,G9o),e(l2,O9o),e(l2,LD),e(LD,V9o),e(l2,X9o),e(Y,z9o),e(Y,i2),e(i2,Cce),e(Cce,Q9o),e(i2,W9o),e(i2,xD),e(xD,H9o),e(i2,U9o),e(Y,J9o),e(Y,d2),e(d2,wce),e(wce,Y9o),e(d2,K9o),e(d2,$D),e($D,Z9o),e(d2,e$o),e(Y,o$o),e(Y,c2),e(c2,Ace),e(Ace,r$o),e(c2,t$o),e(c2,kD),e(kD,a$o),e(c2,n$o),e(Y,s$o),e(Y,f2),e(f2,yce),e(yce,l$o),e(f2,i$o),e(f2,SD),e(SD,d$o),e(f2,c$o),e(Y,f$o),e(Y,m2),e(m2,Lce),e(Lce,m$o),e(m2,g$o),e(m2,RD),e(RD,h$o),e(m2,p$o),e(Y,u$o),e(Y,g2),e(g2,xce),e(xce,_$o),e(g2,b$o),e(g2,BD),e(BD,v$o),e(g2,F$o),e(Y,T$o),e(Y,h2),e(h2,$ce),e($ce,M$o),e(h2,E$o),e(h2,PD),e(PD,C$o),e(h2,w$o),e(Y,A$o),e(Y,p2),e(p2,kce),e(kce,y$o),e(p2,L$o),e(p2,ID),e(ID,x$o),e(p2,$$o),e(Y,k$o),e(Y,u2),e(u2,Sce),e(Sce,S$o),e(u2,R$o),e(u2,qD),e(qD,B$o),e(u2,P$o),e(Y,I$o),e(Y,_2),e(_2,Rce),e(Rce,q$o),e(_2,N$o),e(_2,ND),e(ND,j$o),e(_2,D$o),e(Y,G$o),e(Y,b2),e(b2,Bce),e(Bce,O$o),e(b2,V$o),e(b2,jD),e(jD,X$o),e(b2,z$o),e(Y,Q$o),e(Y,v2),e(v2,Pce),e(Pce,W$o),e(v2,H$o),e(v2,DD),e(DD,U$o),e(v2,J$o),e(Y,Y$o),e(Y,F2),e(F2,Ice),e(Ice,K$o),e(F2,Z$o),e(F2,GD),e(GD,eko),e(F2,oko),e(Y,rko),e(Y,T2),e(T2,qce),e(qce,tko),e(T2,ako),e(T2,OD),e(OD,nko),e(T2,sko),e(Y,lko),e(Y,M2),e(M2,Nce),e(Nce,iko),e(M2,dko),e(M2,VD),e(VD,cko),e(M2,fko),e(Y,mko),e(Y,E2),e(E2,jce),e(jce,gko),e(E2,hko),e(E2,XD),e(XD,pko),e(E2,uko),e(Y,_ko),e(Y,C2),e(C2,Dce),e(Dce,bko),e(C2,vko),e(C2,zD),e(zD,Fko),e(C2,Tko),e(Y,Mko),e(Y,w2),e(w2,Gce),e(Gce,Eko),e(w2,Cko),e(w2,QD),e(QD,wko),e(w2,Ako),e(Y,yko),e(Y,A2),e(A2,Oce),e(Oce,Lko),e(A2,xko),e(A2,WD),e(WD,$ko),e(A2,kko),e(Y,Sko),e(Y,y2),e(y2,Vce),e(Vce,Rko),e(y2,Bko),e(y2,HD),e(HD,Pko),e(y2,Iko),e(Y,qko),e(Y,L2),e(L2,Xce),e(Xce,Nko),e(L2,jko),e(L2,UD),e(UD,Dko),e(L2,Gko),e(eo,Oko),e(eo,x2),e(x2,Vko),e(x2,zce),e(zce,Xko),e(x2,zko),e(x2,Qce),e(Qce,Qko),e(eo,Wko),M($2,eo,null),b(f,zBe,_),b(f,Ii,_),e(Ii,k2),e(k2,Wce),M(S6,Wce,null),e(Ii,Hko),e(Ii,Hce),e(Hce,Uko),b(f,QBe,_),b(f,Po,_),M(R6,Po,null),e(Po,Jko),e(Po,qi),e(qi,Yko),e(qi,JD),e(JD,Kko),e(qi,Zko),e(qi,YD),e(YD,eSo),e(qi,oSo),e(Po,rSo),e(Po,B6),e(B6,tSo),e(B6,Uce),e(Uce,aSo),e(B6,nSo),e(Po,sSo),e(Po,st),M(P6,st,null),e(st,lSo),e(st,Jce),e(Jce,iSo),e(st,dSo),e(st,Ni),e(Ni,cSo),e(Ni,Yce),e(Yce,fSo),e(Ni,mSo),e(Ni,KD),e(KD,gSo),e(Ni,hSo),e(st,pSo),M(S2,st,null),e(Po,uSo),e(Po,oo),M(I6,oo,null),e(oo,_So),e(oo,Kce),e(Kce,bSo),e(oo,vSo),e(oo,$a),e($a,FSo),e($a,Zce),e(Zce,TSo),e($a,MSo),e($a,efe),e(efe,ESo),e($a,CSo),e($a,ofe),e(ofe,wSo),e($a,ASo),e(oo,ySo),e(oo,Ur),e(Ur,R2),e(R2,rfe),e(rfe,LSo),e(R2,xSo),e(R2,ZD),e(ZD,$So),e(R2,kSo),e(Ur,SSo),e(Ur,B2),e(B2,tfe),e(tfe,RSo),e(B2,BSo),e(B2,eG),e(eG,PSo),e(B2,ISo),e(Ur,qSo),e(Ur,P2),e(P2,afe),e(afe,NSo),e(P2,jSo),e(P2,oG),e(oG,DSo),e(P2,GSo),e(Ur,OSo),e(Ur,I2),e(I2,nfe),e(nfe,VSo),e(I2,XSo),e(I2,rG),e(rG,zSo),e(I2,QSo),e(Ur,WSo),e(Ur,q2),e(q2,sfe),e(sfe,HSo),e(q2,USo),e(q2,tG),e(tG,JSo),e(q2,YSo),e(oo,KSo),e(oo,N2),e(N2,ZSo),e(N2,lfe),e(lfe,eRo),e(N2,oRo),e(N2,ife),e(ife,rRo),e(oo,tRo),M(j2,oo,null),b(f,WBe,_),b(f,ji,_),e(ji,D2),e(D2,dfe),M(q6,dfe,null),e(ji,aRo),e(ji,cfe),e(cfe,nRo),b(f,HBe,_),b(f,Io,_),M(N6,Io,null),e(Io,sRo),e(Io,Di),e(Di,lRo),e(Di,aG),e(aG,iRo),e(Di,dRo),e(Di,nG),e(nG,cRo),e(Di,fRo),e(Io,mRo),e(Io,j6),e(j6,gRo),e(j6,ffe),e(ffe,hRo),e(j6,pRo),e(Io,uRo),e(Io,lt),M(D6,lt,null),e(lt,_Ro),e(lt,mfe),e(mfe,bRo),e(lt,vRo),e(lt,Gi),e(Gi,FRo),e(Gi,gfe),e(gfe,TRo),e(Gi,MRo),e(Gi,sG),e(sG,ERo),e(Gi,CRo),e(lt,wRo),M(G2,lt,null),e(Io,ARo),e(Io,ro),M(G6,ro,null),e(ro,yRo),e(ro,hfe),e(hfe,LRo),e(ro,xRo),e(ro,ka),e(ka,$Ro),e(ka,pfe),e(pfe,kRo),e(ka,SRo),e(ka,ufe),e(ufe,RRo),e(ka,BRo),e(ka,_fe),e(_fe,PRo),e(ka,IRo),e(ro,qRo),e(ro,U),e(U,O2),e(O2,bfe),e(bfe,NRo),e(O2,jRo),e(O2,lG),e(lG,DRo),e(O2,GRo),e(U,ORo),e(U,V2),e(V2,vfe),e(vfe,VRo),e(V2,XRo),e(V2,iG),e(iG,zRo),e(V2,QRo),e(U,WRo),e(U,X2),e(X2,Ffe),e(Ffe,HRo),e(X2,URo),e(X2,dG),e(dG,JRo),e(X2,YRo),e(U,KRo),e(U,z2),e(z2,Tfe),e(Tfe,ZRo),e(z2,eBo),e(z2,cG),e(cG,oBo),e(z2,rBo),e(U,tBo),e(U,Q2),e(Q2,Mfe),e(Mfe,aBo),e(Q2,nBo),e(Q2,fG),e(fG,sBo),e(Q2,lBo),e(U,iBo),e(U,W2),e(W2,Efe),e(Efe,dBo),e(W2,cBo),e(W2,mG),e(mG,fBo),e(W2,mBo),e(U,gBo),e(U,H2),e(H2,Cfe),e(Cfe,hBo),e(H2,pBo),e(H2,gG),e(gG,uBo),e(H2,_Bo),e(U,bBo),e(U,U2),e(U2,wfe),e(wfe,vBo),e(U2,FBo),e(U2,hG),e(hG,TBo),e(U2,MBo),e(U,EBo),e(U,J2),e(J2,Afe),e(Afe,CBo),e(J2,wBo),e(J2,pG),e(pG,ABo),e(J2,yBo),e(U,LBo),e(U,Y2),e(Y2,yfe),e(yfe,xBo),e(Y2,$Bo),e(Y2,uG),e(uG,kBo),e(Y2,SBo),e(U,RBo),e(U,K2),e(K2,Lfe),e(Lfe,BBo),e(K2,PBo),e(K2,_G),e(_G,IBo),e(K2,qBo),e(U,NBo),e(U,Z2),e(Z2,xfe),e(xfe,jBo),e(Z2,DBo),e(Z2,bG),e(bG,GBo),e(Z2,OBo),e(U,VBo),e(U,e5),e(e5,$fe),e($fe,XBo),e(e5,zBo),e(e5,vG),e(vG,QBo),e(e5,WBo),e(U,HBo),e(U,o5),e(o5,kfe),e(kfe,UBo),e(o5,JBo),e(o5,FG),e(FG,YBo),e(o5,KBo),e(U,ZBo),e(U,r5),e(r5,Sfe),e(Sfe,ePo),e(r5,oPo),e(r5,TG),e(TG,rPo),e(r5,tPo),e(U,aPo),e(U,t5),e(t5,Rfe),e(Rfe,nPo),e(t5,sPo),e(t5,MG),e(MG,lPo),e(t5,iPo),e(U,dPo),e(U,a5),e(a5,Bfe),e(Bfe,cPo),e(a5,fPo),e(a5,EG),e(EG,mPo),e(a5,gPo),e(U,hPo),e(U,n5),e(n5,Pfe),e(Pfe,pPo),e(n5,uPo),e(n5,CG),e(CG,_Po),e(n5,bPo),e(U,vPo),e(U,s5),e(s5,Ife),e(Ife,FPo),e(s5,TPo),e(s5,wG),e(wG,MPo),e(s5,EPo),e(U,CPo),e(U,l5),e(l5,qfe),e(qfe,wPo),e(l5,APo),e(l5,AG),e(AG,yPo),e(l5,LPo),e(U,xPo),e(U,i5),e(i5,Nfe),e(Nfe,$Po),e(i5,kPo),e(i5,yG),e(yG,SPo),e(i5,RPo),e(U,BPo),e(U,d5),e(d5,jfe),e(jfe,PPo),e(d5,IPo),e(d5,LG),e(LG,qPo),e(d5,NPo),e(U,jPo),e(U,c5),e(c5,Dfe),e(Dfe,DPo),e(c5,GPo),e(c5,xG),e(xG,OPo),e(c5,VPo),e(U,XPo),e(U,f5),e(f5,Gfe),e(Gfe,zPo),e(f5,QPo),e(f5,$G),e($G,WPo),e(f5,HPo),e(U,UPo),e(U,m5),e(m5,Ofe),e(Ofe,JPo),e(m5,YPo),e(m5,kG),e(kG,KPo),e(m5,ZPo),e(U,eIo),e(U,g5),e(g5,Vfe),e(Vfe,oIo),e(g5,rIo),e(g5,SG),e(SG,tIo),e(g5,aIo),e(U,nIo),e(U,h5),e(h5,Xfe),e(Xfe,sIo),e(h5,lIo),e(h5,RG),e(RG,iIo),e(h5,dIo),e(U,cIo),e(U,p5),e(p5,zfe),e(zfe,fIo),e(p5,mIo),e(p5,BG),e(BG,gIo),e(p5,hIo),e(U,pIo),e(U,u5),e(u5,Qfe),e(Qfe,uIo),e(u5,_Io),e(u5,PG),e(PG,bIo),e(u5,vIo),e(U,FIo),e(U,_5),e(_5,Wfe),e(Wfe,TIo),e(_5,MIo),e(_5,IG),e(IG,EIo),e(_5,CIo),e(U,wIo),e(U,b5),e(b5,Hfe),e(Hfe,AIo),e(b5,yIo),e(b5,qG),e(qG,LIo),e(b5,xIo),e(U,$Io),e(U,v5),e(v5,Ufe),e(Ufe,kIo),e(v5,SIo),e(v5,NG),e(NG,RIo),e(v5,BIo),e(U,PIo),e(U,F5),e(F5,Jfe),e(Jfe,IIo),e(F5,qIo),e(F5,jG),e(jG,NIo),e(F5,jIo),e(ro,DIo),e(ro,T5),e(T5,GIo),e(T5,Yfe),e(Yfe,OIo),e(T5,VIo),e(T5,Kfe),e(Kfe,XIo),e(ro,zIo),M(M5,ro,null),b(f,UBe,_),b(f,Oi,_),e(Oi,E5),e(E5,Zfe),M(O6,Zfe,null),e(Oi,QIo),e(Oi,eme),e(eme,WIo),b(f,JBe,_),b(f,qo,_),M(V6,qo,null),e(qo,HIo),e(qo,Vi),e(Vi,UIo),e(Vi,DG),e(DG,JIo),e(Vi,YIo),e(Vi,GG),e(GG,KIo),e(Vi,ZIo),e(qo,eqo),e(qo,X6),e(X6,oqo),e(X6,ome),e(ome,rqo),e(X6,tqo),e(qo,aqo),e(qo,it),M(z6,it,null),e(it,nqo),e(it,rme),e(rme,sqo),e(it,lqo),e(it,Xi),e(Xi,iqo),e(Xi,tme),e(tme,dqo),e(Xi,cqo),e(Xi,OG),e(OG,fqo),e(Xi,mqo),e(it,gqo),M(C5,it,null),e(qo,hqo),e(qo,to),M(Q6,to,null),e(to,pqo),e(to,ame),e(ame,uqo),e(to,_qo),e(to,Sa),e(Sa,bqo),e(Sa,nme),e(nme,vqo),e(Sa,Fqo),e(Sa,sme),e(sme,Tqo),e(Sa,Mqo),e(Sa,lme),e(lme,Eqo),e(Sa,Cqo),e(to,wqo),e(to,O),e(O,w5),e(w5,ime),e(ime,Aqo),e(w5,yqo),e(w5,VG),e(VG,Lqo),e(w5,xqo),e(O,$qo),e(O,A5),e(A5,dme),e(dme,kqo),e(A5,Sqo),e(A5,XG),e(XG,Rqo),e(A5,Bqo),e(O,Pqo),e(O,y5),e(y5,cme),e(cme,Iqo),e(y5,qqo),e(y5,zG),e(zG,Nqo),e(y5,jqo),e(O,Dqo),e(O,L5),e(L5,fme),e(fme,Gqo),e(L5,Oqo),e(L5,QG),e(QG,Vqo),e(L5,Xqo),e(O,zqo),e(O,x5),e(x5,mme),e(mme,Qqo),e(x5,Wqo),e(x5,WG),e(WG,Hqo),e(x5,Uqo),e(O,Jqo),e(O,$5),e($5,gme),e(gme,Yqo),e($5,Kqo),e($5,HG),e(HG,Zqo),e($5,eNo),e(O,oNo),e(O,k5),e(k5,hme),e(hme,rNo),e(k5,tNo),e(k5,UG),e(UG,aNo),e(k5,nNo),e(O,sNo),e(O,S5),e(S5,pme),e(pme,lNo),e(S5,iNo),e(S5,JG),e(JG,dNo),e(S5,cNo),e(O,fNo),e(O,R5),e(R5,ume),e(ume,mNo),e(R5,gNo),e(R5,YG),e(YG,hNo),e(R5,pNo),e(O,uNo),e(O,B5),e(B5,_me),e(_me,_No),e(B5,bNo),e(B5,KG),e(KG,vNo),e(B5,FNo),e(O,TNo),e(O,P5),e(P5,bme),e(bme,MNo),e(P5,ENo),e(P5,ZG),e(ZG,CNo),e(P5,wNo),e(O,ANo),e(O,I5),e(I5,vme),e(vme,yNo),e(I5,LNo),e(I5,eO),e(eO,xNo),e(I5,$No),e(O,kNo),e(O,q5),e(q5,Fme),e(Fme,SNo),e(q5,RNo),e(q5,oO),e(oO,BNo),e(q5,PNo),e(O,INo),e(O,N5),e(N5,Tme),e(Tme,qNo),e(N5,NNo),e(N5,rO),e(rO,jNo),e(N5,DNo),e(O,GNo),e(O,j5),e(j5,Mme),e(Mme,ONo),e(j5,VNo),e(j5,tO),e(tO,XNo),e(j5,zNo),e(O,QNo),e(O,D5),e(D5,Eme),e(Eme,WNo),e(D5,HNo),e(D5,aO),e(aO,UNo),e(D5,JNo),e(O,YNo),e(O,G5),e(G5,Cme),e(Cme,KNo),e(G5,ZNo),e(G5,nO),e(nO,ejo),e(G5,ojo),e(O,rjo),e(O,O5),e(O5,wme),e(wme,tjo),e(O5,ajo),e(O5,sO),e(sO,njo),e(O5,sjo),e(O,ljo),e(O,V5),e(V5,Ame),e(Ame,ijo),e(V5,djo),e(V5,lO),e(lO,cjo),e(V5,fjo),e(O,mjo),e(O,X5),e(X5,yme),e(yme,gjo),e(X5,hjo),e(X5,iO),e(iO,pjo),e(X5,ujo),e(O,_jo),e(O,z5),e(z5,Lme),e(Lme,bjo),e(z5,vjo),e(z5,dO),e(dO,Fjo),e(z5,Tjo),e(O,Mjo),e(O,Q5),e(Q5,xme),e(xme,Ejo),e(Q5,Cjo),e(Q5,cO),e(cO,wjo),e(Q5,Ajo),e(O,yjo),e(O,W5),e(W5,$me),e($me,Ljo),e(W5,xjo),e(W5,fO),e(fO,$jo),e(W5,kjo),e(O,Sjo),e(O,H5),e(H5,kme),e(kme,Rjo),e(H5,Bjo),e(H5,mO),e(mO,Pjo),e(H5,Ijo),e(O,qjo),e(O,U5),e(U5,Sme),e(Sme,Njo),e(U5,jjo),e(U5,gO),e(gO,Djo),e(U5,Gjo),e(O,Ojo),e(O,J5),e(J5,Rme),e(Rme,Vjo),e(J5,Xjo),e(J5,hO),e(hO,zjo),e(J5,Qjo),e(O,Wjo),e(O,Y5),e(Y5,Bme),e(Bme,Hjo),e(Y5,Ujo),e(Y5,pO),e(pO,Jjo),e(Y5,Yjo),e(O,Kjo),e(O,K5),e(K5,Pme),e(Pme,Zjo),e(K5,eDo),e(K5,uO),e(uO,oDo),e(K5,rDo),e(O,tDo),e(O,Z5),e(Z5,Ime),e(Ime,aDo),e(Z5,nDo),e(Z5,_O),e(_O,sDo),e(Z5,lDo),e(O,iDo),e(O,e3),e(e3,qme),e(qme,dDo),e(e3,cDo),e(e3,bO),e(bO,fDo),e(e3,mDo),e(O,gDo),e(O,o3),e(o3,Nme),e(Nme,hDo),e(o3,pDo),e(o3,vO),e(vO,uDo),e(o3,_Do),e(O,bDo),e(O,r3),e(r3,jme),e(jme,vDo),e(r3,FDo),e(r3,FO),e(FO,TDo),e(r3,MDo),e(O,EDo),e(O,t3),e(t3,Dme),e(Dme,CDo),e(t3,wDo),e(t3,TO),e(TO,ADo),e(t3,yDo),e(O,LDo),e(O,a3),e(a3,Gme),e(Gme,xDo),e(a3,$Do),e(a3,MO),e(MO,kDo),e(a3,SDo),e(O,RDo),e(O,n3),e(n3,Ome),e(Ome,BDo),e(n3,PDo),e(n3,EO),e(EO,IDo),e(n3,qDo),e(O,NDo),e(O,s3),e(s3,Vme),e(Vme,jDo),e(s3,DDo),e(s3,CO),e(CO,GDo),e(s3,ODo),e(O,VDo),e(O,l3),e(l3,Xme),e(Xme,XDo),e(l3,zDo),e(l3,wO),e(wO,QDo),e(l3,WDo),e(O,HDo),e(O,i3),e(i3,zme),e(zme,UDo),e(i3,JDo),e(i3,AO),e(AO,YDo),e(i3,KDo),e(O,ZDo),e(O,d3),e(d3,Qme),e(Qme,eGo),e(d3,oGo),e(d3,yO),e(yO,rGo),e(d3,tGo),e(to,aGo),e(to,c3),e(c3,nGo),e(c3,Wme),e(Wme,sGo),e(c3,lGo),e(c3,Hme),e(Hme,iGo),e(to,dGo),M(f3,to,null),b(f,YBe,_),b(f,zi,_),e(zi,m3),e(m3,Ume),M(W6,Ume,null),e(zi,cGo),e(zi,Jme),e(Jme,fGo),b(f,KBe,_),b(f,No,_),M(H6,No,null),e(No,mGo),e(No,Qi),e(Qi,gGo),e(Qi,LO),e(LO,hGo),e(Qi,pGo),e(Qi,xO),e(xO,uGo),e(Qi,_Go),e(No,bGo),e(No,U6),e(U6,vGo),e(U6,Yme),e(Yme,FGo),e(U6,TGo),e(No,MGo),e(No,dt),M(J6,dt,null),e(dt,EGo),e(dt,Kme),e(Kme,CGo),e(dt,wGo),e(dt,Wi),e(Wi,AGo),e(Wi,Zme),e(Zme,yGo),e(Wi,LGo),e(Wi,$O),e($O,xGo),e(Wi,$Go),e(dt,kGo),M(g3,dt,null),e(No,SGo),e(No,ao),M(Y6,ao,null),e(ao,RGo),e(ao,ege),e(ege,BGo),e(ao,PGo),e(ao,Ra),e(Ra,IGo),e(Ra,oge),e(oge,qGo),e(Ra,NGo),e(Ra,rge),e(rge,jGo),e(Ra,DGo),e(Ra,tge),e(tge,GGo),e(Ra,OGo),e(ao,VGo),e(ao,age),e(age,h3),e(h3,nge),e(nge,XGo),e(h3,zGo),e(h3,kO),e(kO,QGo),e(h3,WGo),e(ao,HGo),e(ao,p3),e(p3,UGo),e(p3,sge),e(sge,JGo),e(p3,YGo),e(p3,lge),e(lge,KGo),e(ao,ZGo),M(u3,ao,null),b(f,ZBe,_),b(f,Hi,_),e(Hi,_3),e(_3,ige),M(K6,ige,null),e(Hi,eOo),e(Hi,dge),e(dge,oOo),b(f,ePe,_),b(f,jo,_),M(Z6,jo,null),e(jo,rOo),e(jo,Ui),e(Ui,tOo),e(Ui,SO),e(SO,aOo),e(Ui,nOo),e(Ui,RO),e(RO,sOo),e(Ui,lOo),e(jo,iOo),e(jo,ey),e(ey,dOo),e(ey,cge),e(cge,cOo),e(ey,fOo),e(jo,mOo),e(jo,ct),M(oy,ct,null),e(ct,gOo),e(ct,fge),e(fge,hOo),e(ct,pOo),e(ct,Ji),e(Ji,uOo),e(Ji,mge),e(mge,_Oo),e(Ji,bOo),e(Ji,BO),e(BO,vOo),e(Ji,FOo),e(ct,TOo),M(b3,ct,null),e(jo,MOo),e(jo,no),M(ry,no,null),e(no,EOo),e(no,gge),e(gge,COo),e(no,wOo),e(no,Ba),e(Ba,AOo),e(Ba,hge),e(hge,yOo),e(Ba,LOo),e(Ba,pge),e(pge,xOo),e(Ba,$Oo),e(Ba,uge),e(uge,kOo),e(Ba,SOo),e(no,ROo),e(no,ve),e(ve,v3),e(v3,_ge),e(_ge,BOo),e(v3,POo),e(v3,PO),e(PO,IOo),e(v3,qOo),e(ve,NOo),e(ve,F3),e(F3,bge),e(bge,jOo),e(F3,DOo),e(F3,IO),e(IO,GOo),e(F3,OOo),e(ve,VOo),e(ve,T3),e(T3,vge),e(vge,XOo),e(T3,zOo),e(T3,qO),e(qO,QOo),e(T3,WOo),e(ve,HOo),e(ve,xs),e(xs,Fge),e(Fge,UOo),e(xs,JOo),e(xs,NO),e(NO,YOo),e(xs,KOo),e(xs,jO),e(jO,ZOo),e(xs,eVo),e(ve,oVo),e(ve,M3),e(M3,Tge),e(Tge,rVo),e(M3,tVo),e(M3,DO),e(DO,aVo),e(M3,nVo),e(ve,sVo),e(ve,ft),e(ft,Mge),e(Mge,lVo),e(ft,iVo),e(ft,GO),e(GO,dVo),e(ft,cVo),e(ft,OO),e(OO,fVo),e(ft,mVo),e(ft,VO),e(VO,gVo),e(ft,hVo),e(ve,pVo),e(ve,E3),e(E3,Ege),e(Ege,uVo),e(E3,_Vo),e(E3,XO),e(XO,bVo),e(E3,vVo),e(ve,FVo),e(ve,C3),e(C3,Cge),e(Cge,TVo),e(C3,MVo),e(C3,zO),e(zO,EVo),e(C3,CVo),e(ve,wVo),e(ve,w3),e(w3,wge),e(wge,AVo),e(w3,yVo),e(w3,QO),e(QO,LVo),e(w3,xVo),e(ve,$Vo),e(ve,A3),e(A3,Age),e(Age,kVo),e(A3,SVo),e(A3,WO),e(WO,RVo),e(A3,BVo),e(ve,PVo),e(ve,y3),e(y3,yge),e(yge,IVo),e(y3,qVo),e(y3,HO),e(HO,NVo),e(y3,jVo),e(ve,DVo),e(ve,L3),e(L3,Lge),e(Lge,GVo),e(L3,OVo),e(L3,UO),e(UO,VVo),e(L3,XVo),e(ve,zVo),e(ve,x3),e(x3,xge),e(xge,QVo),e(x3,WVo),e(x3,JO),e(JO,HVo),e(x3,UVo),e(no,JVo),e(no,$3),e($3,YVo),e($3,$ge),e($ge,KVo),e($3,ZVo),e($3,kge),e(kge,eXo),e(no,oXo),M(k3,no,null),b(f,oPe,_),b(f,Yi,_),e(Yi,S3),e(S3,Sge),M(ty,Sge,null),e(Yi,rXo),e(Yi,Rge),e(Rge,tXo),b(f,rPe,_),b(f,Do,_),M(ay,Do,null),e(Do,aXo),e(Do,Ki),e(Ki,nXo),e(Ki,YO),e(YO,sXo),e(Ki,lXo),e(Ki,KO),e(KO,iXo),e(Ki,dXo),e(Do,cXo),e(Do,ny),e(ny,fXo),e(ny,Bge),e(Bge,mXo),e(ny,gXo),e(Do,hXo),e(Do,mt),M(sy,mt,null),e(mt,pXo),e(mt,Pge),e(Pge,uXo),e(mt,_Xo),e(mt,Zi),e(Zi,bXo),e(Zi,Ige),e(Ige,vXo),e(Zi,FXo),e(Zi,ZO),e(ZO,TXo),e(Zi,MXo),e(mt,EXo),M(R3,mt,null),e(Do,CXo),e(Do,so),M(ly,so,null),e(so,wXo),e(so,qge),e(qge,AXo),e(so,yXo),e(so,Pa),e(Pa,LXo),e(Pa,Nge),e(Nge,xXo),e(Pa,$Xo),e(Pa,jge),e(jge,kXo),e(Pa,SXo),e(Pa,Dge),e(Dge,RXo),e(Pa,BXo),e(so,PXo),e(so,Gge),e(Gge,B3),e(B3,Oge),e(Oge,IXo),e(B3,qXo),e(B3,eV),e(eV,NXo),e(B3,jXo),e(so,DXo),e(so,P3),e(P3,GXo),e(P3,Vge),e(Vge,OXo),e(P3,VXo),e(P3,Xge),e(Xge,XXo),e(so,zXo),M(I3,so,null),b(f,tPe,_),b(f,ed,_),e(ed,q3),e(q3,zge),M(iy,zge,null),e(ed,QXo),e(ed,Qge),e(Qge,WXo),b(f,aPe,_),b(f,Go,_),M(dy,Go,null),e(Go,HXo),e(Go,od),e(od,UXo),e(od,oV),e(oV,JXo),e(od,YXo),e(od,rV),e(rV,KXo),e(od,ZXo),e(Go,ezo),e(Go,cy),e(cy,ozo),e(cy,Wge),e(Wge,rzo),e(cy,tzo),e(Go,azo),e(Go,gt),M(fy,gt,null),e(gt,nzo),e(gt,Hge),e(Hge,szo),e(gt,lzo),e(gt,rd),e(rd,izo),e(rd,Uge),e(Uge,dzo),e(rd,czo),e(rd,tV),e(tV,fzo),e(rd,mzo),e(gt,gzo),M(N3,gt,null),e(Go,hzo),e(Go,lo),M(my,lo,null),e(lo,pzo),e(lo,Jge),e(Jge,uzo),e(lo,_zo),e(lo,Ia),e(Ia,bzo),e(Ia,Yge),e(Yge,vzo),e(Ia,Fzo),e(Ia,Kge),e(Kge,Tzo),e(Ia,Mzo),e(Ia,Zge),e(Zge,Ezo),e(Ia,Czo),e(lo,wzo),e(lo,Ne),e(Ne,j3),e(j3,ehe),e(ehe,Azo),e(j3,yzo),e(j3,aV),e(aV,Lzo),e(j3,xzo),e(Ne,$zo),e(Ne,D3),e(D3,ohe),e(ohe,kzo),e(D3,Szo),e(D3,nV),e(nV,Rzo),e(D3,Bzo),e(Ne,Pzo),e(Ne,G3),e(G3,rhe),e(rhe,Izo),e(G3,qzo),e(G3,sV),e(sV,Nzo),e(G3,jzo),e(Ne,Dzo),e(Ne,O3),e(O3,the),e(the,Gzo),e(O3,Ozo),e(O3,lV),e(lV,Vzo),e(O3,Xzo),e(Ne,zzo),e(Ne,V3),e(V3,ahe),e(ahe,Qzo),e(V3,Wzo),e(V3,iV),e(iV,Hzo),e(V3,Uzo),e(Ne,Jzo),e(Ne,X3),e(X3,nhe),e(nhe,Yzo),e(X3,Kzo),e(X3,dV),e(dV,Zzo),e(X3,eQo),e(Ne,oQo),e(Ne,z3),e(z3,she),e(she,rQo),e(z3,tQo),e(z3,cV),e(cV,aQo),e(z3,nQo),e(Ne,sQo),e(Ne,Q3),e(Q3,lhe),e(lhe,lQo),e(Q3,iQo),e(Q3,fV),e(fV,dQo),e(Q3,cQo),e(lo,fQo),e(lo,W3),e(W3,mQo),e(W3,ihe),e(ihe,gQo),e(W3,hQo),e(W3,dhe),e(dhe,pQo),e(lo,uQo),M(H3,lo,null),b(f,nPe,_),b(f,td,_),e(td,U3),e(U3,che),M(gy,che,null),e(td,_Qo),e(td,fhe),e(fhe,bQo),b(f,sPe,_),b(f,Oo,_),M(hy,Oo,null),e(Oo,vQo),e(Oo,ad),e(ad,FQo),e(ad,mV),e(mV,TQo),e(ad,MQo),e(ad,gV),e(gV,EQo),e(ad,CQo),e(Oo,wQo),e(Oo,py),e(py,AQo),e(py,mhe),e(mhe,yQo),e(py,LQo),e(Oo,xQo),e(Oo,ht),M(uy,ht,null),e(ht,$Qo),e(ht,ghe),e(ghe,kQo),e(ht,SQo),e(ht,nd),e(nd,RQo),e(nd,hhe),e(hhe,BQo),e(nd,PQo),e(nd,hV),e(hV,IQo),e(nd,qQo),e(ht,NQo),M(J3,ht,null),e(Oo,jQo),e(Oo,io),M(_y,io,null),e(io,DQo),e(io,phe),e(phe,GQo),e(io,OQo),e(io,qa),e(qa,VQo),e(qa,uhe),e(uhe,XQo),e(qa,zQo),e(qa,_he),e(_he,QQo),e(qa,WQo),e(qa,bhe),e(bhe,HQo),e(qa,UQo),e(io,JQo),e(io,Na),e(Na,Y3),e(Y3,vhe),e(vhe,YQo),e(Y3,KQo),e(Y3,pV),e(pV,ZQo),e(Y3,eWo),e(Na,oWo),e(Na,K3),e(K3,Fhe),e(Fhe,rWo),e(K3,tWo),e(K3,uV),e(uV,aWo),e(K3,nWo),e(Na,sWo),e(Na,Z3),e(Z3,The),e(The,lWo),e(Z3,iWo),e(Z3,_V),e(_V,dWo),e(Z3,cWo),e(Na,fWo),e(Na,ev),e(ev,Mhe),e(Mhe,mWo),e(ev,gWo),e(ev,bV),e(bV,hWo),e(ev,pWo),e(io,uWo),e(io,ov),e(ov,_Wo),e(ov,Ehe),e(Ehe,bWo),e(ov,vWo),e(ov,Che),e(Che,FWo),e(io,TWo),M(rv,io,null),b(f,lPe,_),b(f,sd,_),e(sd,tv),e(tv,whe),M(by,whe,null),e(sd,MWo),e(sd,Ahe),e(Ahe,EWo),b(f,iPe,_),b(f,Vo,_),M(vy,Vo,null),e(Vo,CWo),e(Vo,ld),e(ld,wWo),e(ld,vV),e(vV,AWo),e(ld,yWo),e(ld,FV),e(FV,LWo),e(ld,xWo),e(Vo,$Wo),e(Vo,Fy),e(Fy,kWo),e(Fy,yhe),e(yhe,SWo),e(Fy,RWo),e(Vo,BWo),e(Vo,pt),M(Ty,pt,null),e(pt,PWo),e(pt,Lhe),e(Lhe,IWo),e(pt,qWo),e(pt,id),e(id,NWo),e(id,xhe),e(xhe,jWo),e(id,DWo),e(id,TV),e(TV,GWo),e(id,OWo),e(pt,VWo),M(av,pt,null),e(Vo,XWo),e(Vo,co),M(My,co,null),e(co,zWo),e(co,$he),e($he,QWo),e(co,WWo),e(co,ja),e(ja,HWo),e(ja,khe),e(khe,UWo),e(ja,JWo),e(ja,She),e(She,YWo),e(ja,KWo),e(ja,Rhe),e(Rhe,ZWo),e(ja,eHo),e(co,oHo),e(co,je),e(je,nv),e(nv,Bhe),e(Bhe,rHo),e(nv,tHo),e(nv,MV),e(MV,aHo),e(nv,nHo),e(je,sHo),e(je,sv),e(sv,Phe),e(Phe,lHo),e(sv,iHo),e(sv,EV),e(EV,dHo),e(sv,cHo),e(je,fHo),e(je,lv),e(lv,Ihe),e(Ihe,mHo),e(lv,gHo),e(lv,CV),e(CV,hHo),e(lv,pHo),e(je,uHo),e(je,iv),e(iv,qhe),e(qhe,_Ho),e(iv,bHo),e(iv,wV),e(wV,vHo),e(iv,FHo),e(je,THo),e(je,dv),e(dv,Nhe),e(Nhe,MHo),e(dv,EHo),e(dv,AV),e(AV,CHo),e(dv,wHo),e(je,AHo),e(je,cv),e(cv,jhe),e(jhe,yHo),e(cv,LHo),e(cv,yV),e(yV,xHo),e(cv,$Ho),e(je,kHo),e(je,fv),e(fv,Dhe),e(Dhe,SHo),e(fv,RHo),e(fv,LV),e(LV,BHo),e(fv,PHo),e(je,IHo),e(je,mv),e(mv,Ghe),e(Ghe,qHo),e(mv,NHo),e(mv,xV),e(xV,jHo),e(mv,DHo),e(co,GHo),e(co,gv),e(gv,OHo),e(gv,Ohe),e(Ohe,VHo),e(gv,XHo),e(gv,Vhe),e(Vhe,zHo),e(co,QHo),M(hv,co,null),b(f,dPe,_),b(f,dd,_),e(dd,pv),e(pv,Xhe),M(Ey,Xhe,null),e(dd,WHo),e(dd,zhe),e(zhe,HHo),b(f,cPe,_),b(f,Xo,_),M(Cy,Xo,null),e(Xo,UHo),e(Xo,cd),e(cd,JHo),e(cd,$V),e($V,YHo),e(cd,KHo),e(cd,kV),e(kV,ZHo),e(cd,eUo),e(Xo,oUo),e(Xo,wy),e(wy,rUo),e(wy,Qhe),e(Qhe,tUo),e(wy,aUo),e(Xo,nUo),e(Xo,ut),M(Ay,ut,null),e(ut,sUo),e(ut,Whe),e(Whe,lUo),e(ut,iUo),e(ut,fd),e(fd,dUo),e(fd,Hhe),e(Hhe,cUo),e(fd,fUo),e(fd,SV),e(SV,mUo),e(fd,gUo),e(ut,hUo),M(uv,ut,null),e(Xo,pUo),e(Xo,fo),M(yy,fo,null),e(fo,uUo),e(fo,Uhe),e(Uhe,_Uo),e(fo,bUo),e(fo,Da),e(Da,vUo),e(Da,Jhe),e(Jhe,FUo),e(Da,TUo),e(Da,Yhe),e(Yhe,MUo),e(Da,EUo),e(Da,Khe),e(Khe,CUo),e(Da,wUo),e(fo,AUo),e(fo,Ly),e(Ly,_v),e(_v,Zhe),e(Zhe,yUo),e(_v,LUo),e(_v,RV),e(RV,xUo),e(_v,$Uo),e(Ly,kUo),e(Ly,bv),e(bv,epe),e(epe,SUo),e(bv,RUo),e(bv,BV),e(BV,BUo),e(bv,PUo),e(fo,IUo),e(fo,vv),e(vv,qUo),e(vv,ope),e(ope,NUo),e(vv,jUo),e(vv,rpe),e(rpe,DUo),e(fo,GUo),M(Fv,fo,null),b(f,fPe,_),b(f,md,_),e(md,Tv),e(Tv,tpe),M(xy,tpe,null),e(md,OUo),e(md,ape),e(ape,VUo),b(f,mPe,_),b(f,zo,_),M($y,zo,null),e(zo,XUo),e(zo,gd),e(gd,zUo),e(gd,PV),e(PV,QUo),e(gd,WUo),e(gd,IV),e(IV,HUo),e(gd,UUo),e(zo,JUo),e(zo,ky),e(ky,YUo),e(ky,npe),e(npe,KUo),e(ky,ZUo),e(zo,eJo),e(zo,_t),M(Sy,_t,null),e(_t,oJo),e(_t,spe),e(spe,rJo),e(_t,tJo),e(_t,hd),e(hd,aJo),e(hd,lpe),e(lpe,nJo),e(hd,sJo),e(hd,qV),e(qV,lJo),e(hd,iJo),e(_t,dJo),M(Mv,_t,null),e(zo,cJo),e(zo,mo),M(Ry,mo,null),e(mo,fJo),e(mo,ipe),e(ipe,mJo),e(mo,gJo),e(mo,Ga),e(Ga,hJo),e(Ga,dpe),e(dpe,pJo),e(Ga,uJo),e(Ga,cpe),e(cpe,_Jo),e(Ga,bJo),e(Ga,fpe),e(fpe,vJo),e(Ga,FJo),e(mo,TJo),e(mo,Oa),e(Oa,Ev),e(Ev,mpe),e(mpe,MJo),e(Ev,EJo),e(Ev,NV),e(NV,CJo),e(Ev,wJo),e(Oa,AJo),e(Oa,Cv),e(Cv,gpe),e(gpe,yJo),e(Cv,LJo),e(Cv,jV),e(jV,xJo),e(Cv,$Jo),e(Oa,kJo),e(Oa,wv),e(wv,hpe),e(hpe,SJo),e(wv,RJo),e(wv,DV),e(DV,BJo),e(wv,PJo),e(Oa,IJo),e(Oa,Av),e(Av,ppe),e(ppe,qJo),e(Av,NJo),e(Av,GV),e(GV,jJo),e(Av,DJo),e(mo,GJo),e(mo,yv),e(yv,OJo),e(yv,upe),e(upe,VJo),e(yv,XJo),e(yv,_pe),e(_pe,zJo),e(mo,QJo),M(Lv,mo,null),b(f,gPe,_),b(f,pd,_),e(pd,xv),e(xv,bpe),M(By,bpe,null),e(pd,WJo),e(pd,vpe),e(vpe,HJo),b(f,hPe,_),b(f,Qo,_),M(Py,Qo,null),e(Qo,UJo),e(Qo,ud),e(ud,JJo),e(ud,OV),e(OV,YJo),e(ud,KJo),e(ud,VV),e(VV,ZJo),e(ud,eYo),e(Qo,oYo),e(Qo,Iy),e(Iy,rYo),e(Iy,Fpe),e(Fpe,tYo),e(Iy,aYo),e(Qo,nYo),e(Qo,bt),M(qy,bt,null),e(bt,sYo),e(bt,Tpe),e(Tpe,lYo),e(bt,iYo),e(bt,_d),e(_d,dYo),e(_d,Mpe),e(Mpe,cYo),e(_d,fYo),e(_d,XV),e(XV,mYo),e(_d,gYo),e(bt,hYo),M($v,bt,null),e(Qo,pYo),e(Qo,go),M(Ny,go,null),e(go,uYo),e(go,Epe),e(Epe,_Yo),e(go,bYo),e(go,Va),e(Va,vYo),e(Va,Cpe),e(Cpe,FYo),e(Va,TYo),e(Va,wpe),e(wpe,MYo),e(Va,EYo),e(Va,Ape),e(Ape,CYo),e(Va,wYo),e(go,AYo),e(go,bd),e(bd,kv),e(kv,ype),e(ype,yYo),e(kv,LYo),e(kv,zV),e(zV,xYo),e(kv,$Yo),e(bd,kYo),e(bd,Sv),e(Sv,Lpe),e(Lpe,SYo),e(Sv,RYo),e(Sv,QV),e(QV,BYo),e(Sv,PYo),e(bd,IYo),e(bd,Rv),e(Rv,xpe),e(xpe,qYo),e(Rv,NYo),e(Rv,WV),e(WV,jYo),e(Rv,DYo),e(go,GYo),e(go,Bv),e(Bv,OYo),e(Bv,$pe),e($pe,VYo),e(Bv,XYo),e(Bv,kpe),e(kpe,zYo),e(go,QYo),M(Pv,go,null),b(f,pPe,_),b(f,vd,_),e(vd,Iv),e(Iv,Spe),M(jy,Spe,null),e(vd,WYo),e(vd,Rpe),e(Rpe,HYo),b(f,uPe,_),b(f,Wo,_),M(Dy,Wo,null),e(Wo,UYo),e(Wo,Fd),e(Fd,JYo),e(Fd,HV),e(HV,YYo),e(Fd,KYo),e(Fd,UV),e(UV,ZYo),e(Fd,eKo),e(Wo,oKo),e(Wo,Gy),e(Gy,rKo),e(Gy,Bpe),e(Bpe,tKo),e(Gy,aKo),e(Wo,nKo),e(Wo,vt),M(Oy,vt,null),e(vt,sKo),e(vt,Ppe),e(Ppe,lKo),e(vt,iKo),e(vt,Td),e(Td,dKo),e(Td,Ipe),e(Ipe,cKo),e(Td,fKo),e(Td,JV),e(JV,mKo),e(Td,gKo),e(vt,hKo),M(qv,vt,null),e(Wo,pKo),e(Wo,ho),M(Vy,ho,null),e(ho,uKo),e(ho,qpe),e(qpe,_Ko),e(ho,bKo),e(ho,Xa),e(Xa,vKo),e(Xa,Npe),e(Npe,FKo),e(Xa,TKo),e(Xa,jpe),e(jpe,MKo),e(Xa,EKo),e(Xa,Dpe),e(Dpe,CKo),e(Xa,wKo),e(ho,AKo),e(ho,Xy),e(Xy,Nv),e(Nv,Gpe),e(Gpe,yKo),e(Nv,LKo),e(Nv,YV),e(YV,xKo),e(Nv,$Ko),e(Xy,kKo),e(Xy,jv),e(jv,Ope),e(Ope,SKo),e(jv,RKo),e(jv,KV),e(KV,BKo),e(jv,PKo),e(ho,IKo),e(ho,Dv),e(Dv,qKo),e(Dv,Vpe),e(Vpe,NKo),e(Dv,jKo),e(Dv,Xpe),e(Xpe,DKo),e(ho,GKo),M(Gv,ho,null),b(f,_Pe,_),b(f,Md,_),e(Md,Ov),e(Ov,zpe),M(zy,zpe,null),e(Md,OKo),e(Md,Qpe),e(Qpe,VKo),b(f,bPe,_),b(f,Ho,_),M(Qy,Ho,null),e(Ho,XKo),e(Ho,Ed),e(Ed,zKo),e(Ed,ZV),e(ZV,QKo),e(Ed,WKo),e(Ed,eX),e(eX,HKo),e(Ed,UKo),e(Ho,JKo),e(Ho,Wy),e(Wy,YKo),e(Wy,Wpe),e(Wpe,KKo),e(Wy,ZKo),e(Ho,eZo),e(Ho,Ft),M(Hy,Ft,null),e(Ft,oZo),e(Ft,Hpe),e(Hpe,rZo),e(Ft,tZo),e(Ft,Cd),e(Cd,aZo),e(Cd,Upe),e(Upe,nZo),e(Cd,sZo),e(Cd,oX),e(oX,lZo),e(Cd,iZo),e(Ft,dZo),M(Vv,Ft,null),e(Ho,cZo),e(Ho,po),M(Uy,po,null),e(po,fZo),e(po,Jpe),e(Jpe,mZo),e(po,gZo),e(po,za),e(za,hZo),e(za,Ype),e(Ype,pZo),e(za,uZo),e(za,Kpe),e(Kpe,_Zo),e(za,bZo),e(za,Zpe),e(Zpe,vZo),e(za,FZo),e(po,TZo),e(po,eue),e(eue,Xv),e(Xv,oue),e(oue,MZo),e(Xv,EZo),e(Xv,rX),e(rX,CZo),e(Xv,wZo),e(po,AZo),e(po,zv),e(zv,yZo),e(zv,rue),e(rue,LZo),e(zv,xZo),e(zv,tue),e(tue,$Zo),e(po,kZo),M(Qv,po,null),b(f,vPe,_),b(f,wd,_),e(wd,Wv),e(Wv,aue),M(Jy,aue,null),e(wd,SZo),e(wd,nue),e(nue,RZo),b(f,FPe,_),b(f,Uo,_),M(Yy,Uo,null),e(Uo,BZo),e(Uo,Ad),e(Ad,PZo),e(Ad,tX),e(tX,IZo),e(Ad,qZo),e(Ad,aX),e(aX,NZo),e(Ad,jZo),e(Uo,DZo),e(Uo,Ky),e(Ky,GZo),e(Ky,sue),e(sue,OZo),e(Ky,VZo),e(Uo,XZo),e(Uo,Tt),M(Zy,Tt,null),e(Tt,zZo),e(Tt,lue),e(lue,QZo),e(Tt,WZo),e(Tt,yd),e(yd,HZo),e(yd,iue),e(iue,UZo),e(yd,JZo),e(yd,nX),e(nX,YZo),e(yd,KZo),e(Tt,ZZo),M(Hv,Tt,null),e(Uo,eer),e(Uo,uo),M(eL,uo,null),e(uo,oer),e(uo,due),e(due,rer),e(uo,ter),e(uo,Qa),e(Qa,aer),e(Qa,cue),e(cue,ner),e(Qa,ser),e(Qa,fue),e(fue,ler),e(Qa,ier),e(Qa,mue),e(mue,der),e(Qa,cer),e(uo,fer),e(uo,Wa),e(Wa,Uv),e(Uv,gue),e(gue,mer),e(Uv,ger),e(Uv,sX),e(sX,her),e(Uv,per),e(Wa,uer),e(Wa,Jv),e(Jv,hue),e(hue,_er),e(Jv,ber),e(Jv,lX),e(lX,ver),e(Jv,Fer),e(Wa,Ter),e(Wa,Yv),e(Yv,pue),e(pue,Mer),e(Yv,Eer),e(Yv,iX),e(iX,Cer),e(Yv,wer),e(Wa,Aer),e(Wa,Kv),e(Kv,uue),e(uue,yer),e(Kv,Ler),e(Kv,dX),e(dX,xer),e(Kv,$er),e(uo,ker),e(uo,Zv),e(Zv,Ser),e(Zv,_ue),e(_ue,Rer),e(Zv,Ber),e(Zv,bue),e(bue,Per),e(uo,Ier),M(eF,uo,null),b(f,TPe,_),b(f,Ld,_),e(Ld,oF),e(oF,vue),M(oL,vue,null),e(Ld,qer),e(Ld,Fue),e(Fue,Ner),b(f,MPe,_),b(f,Jo,_),M(rL,Jo,null),e(Jo,jer),e(Jo,xd),e(xd,Der),e(xd,cX),e(cX,Ger),e(xd,Oer),e(xd,fX),e(fX,Ver),e(xd,Xer),e(Jo,zer),e(Jo,tL),e(tL,Qer),e(tL,Tue),e(Tue,Wer),e(tL,Her),e(Jo,Uer),e(Jo,Mt),M(aL,Mt,null),e(Mt,Jer),e(Mt,Mue),e(Mue,Yer),e(Mt,Ker),e(Mt,$d),e($d,Zer),e($d,Eue),e(Eue,eor),e($d,oor),e($d,mX),e(mX,ror),e($d,tor),e(Mt,aor),M(rF,Mt,null),e(Jo,nor),e(Jo,_o),M(nL,_o,null),e(_o,sor),e(_o,Cue),e(Cue,lor),e(_o,ior),e(_o,Ha),e(Ha,dor),e(Ha,wue),e(wue,cor),e(Ha,mor),e(Ha,Aue),e(Aue,gor),e(Ha,hor),e(Ha,yue),e(yue,por),e(Ha,uor),e(_o,_or),e(_o,Lue),e(Lue,tF),e(tF,xue),e(xue,bor),e(tF,vor),e(tF,gX),e(gX,For),e(tF,Tor),e(_o,Mor),e(_o,aF),e(aF,Eor),e(aF,$ue),e($ue,Cor),e(aF,wor),e(aF,kue),e(kue,Aor),e(_o,yor),M(nF,_o,null),b(f,EPe,_),b(f,kd,_),e(kd,sF),e(sF,Sue),M(sL,Sue,null),e(kd,Lor),e(kd,Rue),e(Rue,xor),b(f,CPe,_),b(f,Yo,_),M(lL,Yo,null),e(Yo,$or),e(Yo,Sd),e(Sd,kor),e(Sd,hX),e(hX,Sor),e(Sd,Ror),e(Sd,pX),e(pX,Bor),e(Sd,Por),e(Yo,Ior),e(Yo,iL),e(iL,qor),e(iL,Bue),e(Bue,Nor),e(iL,jor),e(Yo,Dor),e(Yo,Et),M(dL,Et,null),e(Et,Gor),e(Et,Pue),e(Pue,Oor),e(Et,Vor),e(Et,Rd),e(Rd,Xor),e(Rd,Iue),e(Iue,zor),e(Rd,Qor),e(Rd,uX),e(uX,Wor),e(Rd,Hor),e(Et,Uor),M(lF,Et,null),e(Yo,Jor),e(Yo,Cr),M(cL,Cr,null),e(Cr,Yor),e(Cr,que),e(que,Kor),e(Cr,Zor),e(Cr,Ua),e(Ua,err),e(Ua,Nue),e(Nue,orr),e(Ua,rrr),e(Ua,jue),e(jue,trr),e(Ua,arr),e(Ua,Due),e(Due,nrr),e(Ua,srr),e(Cr,lrr),e(Cr,j),e(j,iF),e(iF,Gue),e(Gue,irr),e(iF,drr),e(iF,_X),e(_X,crr),e(iF,frr),e(j,mrr),e(j,dF),e(dF,Oue),e(Oue,grr),e(dF,hrr),e(dF,bX),e(bX,prr),e(dF,urr),e(j,_rr),e(j,cF),e(cF,Vue),e(Vue,brr),e(cF,vrr),e(cF,vX),e(vX,Frr),e(cF,Trr),e(j,Mrr),e(j,fF),e(fF,Xue),e(Xue,Err),e(fF,Crr),e(fF,FX),e(FX,wrr),e(fF,Arr),e(j,yrr),e(j,mF),e(mF,zue),e(zue,Lrr),e(mF,xrr),e(mF,TX),e(TX,$rr),e(mF,krr),e(j,Srr),e(j,gF),e(gF,Que),e(Que,Rrr),e(gF,Brr),e(gF,MX),e(MX,Prr),e(gF,Irr),e(j,qrr),e(j,hF),e(hF,Wue),e(Wue,Nrr),e(hF,jrr),e(hF,EX),e(EX,Drr),e(hF,Grr),e(j,Orr),e(j,pF),e(pF,Hue),e(Hue,Vrr),e(pF,Xrr),e(pF,CX),e(CX,zrr),e(pF,Qrr),e(j,Wrr),e(j,uF),e(uF,Uue),e(Uue,Hrr),e(uF,Urr),e(uF,wX),e(wX,Jrr),e(uF,Yrr),e(j,Krr),e(j,_F),e(_F,Jue),e(Jue,Zrr),e(_F,etr),e(_F,AX),e(AX,otr),e(_F,rtr),e(j,ttr),e(j,bF),e(bF,Yue),e(Yue,atr),e(bF,ntr),e(bF,yX),e(yX,str),e(bF,ltr),e(j,itr),e(j,vF),e(vF,Kue),e(Kue,dtr),e(vF,ctr),e(vF,LX),e(LX,ftr),e(vF,mtr),e(j,gtr),e(j,FF),e(FF,Zue),e(Zue,htr),e(FF,ptr),e(FF,xX),e(xX,utr),e(FF,_tr),e(j,btr),e(j,TF),e(TF,e_e),e(e_e,vtr),e(TF,Ftr),e(TF,$X),e($X,Ttr),e(TF,Mtr),e(j,Etr),e(j,MF),e(MF,o_e),e(o_e,Ctr),e(MF,wtr),e(MF,kX),e(kX,Atr),e(MF,ytr),e(j,Ltr),e(j,EF),e(EF,r_e),e(r_e,xtr),e(EF,$tr),e(EF,SX),e(SX,ktr),e(EF,Str),e(j,Rtr),e(j,CF),e(CF,t_e),e(t_e,Btr),e(CF,Ptr),e(CF,RX),e(RX,Itr),e(CF,qtr),e(j,Ntr),e(j,$s),e($s,a_e),e(a_e,jtr),e($s,Dtr),e($s,BX),e(BX,Gtr),e($s,Otr),e($s,PX),e(PX,Vtr),e($s,Xtr),e(j,ztr),e(j,wF),e(wF,n_e),e(n_e,Qtr),e(wF,Wtr),e(wF,IX),e(IX,Htr),e(wF,Utr),e(j,Jtr),e(j,AF),e(AF,s_e),e(s_e,Ytr),e(AF,Ktr),e(AF,qX),e(qX,Ztr),e(AF,ear),e(j,oar),e(j,yF),e(yF,l_e),e(l_e,rar),e(yF,tar),e(yF,NX),e(NX,aar),e(yF,nar),e(j,sar),e(j,LF),e(LF,i_e),e(i_e,lar),e(LF,iar),e(LF,jX),e(jX,dar),e(LF,car),e(j,far),e(j,xF),e(xF,d_e),e(d_e,mar),e(xF,gar),e(xF,DX),e(DX,har),e(xF,par),e(j,uar),e(j,$F),e($F,c_e),e(c_e,_ar),e($F,bar),e($F,GX),e(GX,Far),e($F,Tar),e(j,Mar),e(j,kF),e(kF,f_e),e(f_e,Ear),e(kF,Car),e(kF,OX),e(OX,war),e(kF,Aar),e(j,yar),e(j,SF),e(SF,m_e),e(m_e,Lar),e(SF,xar),e(SF,VX),e(VX,$ar),e(SF,kar),e(j,Sar),e(j,RF),e(RF,g_e),e(g_e,Rar),e(RF,Bar),e(RF,XX),e(XX,Par),e(RF,Iar),e(j,qar),e(j,BF),e(BF,h_e),e(h_e,Nar),e(BF,jar),e(BF,zX),e(zX,Dar),e(BF,Gar),e(j,Oar),e(j,PF),e(PF,p_e),e(p_e,Var),e(PF,Xar),e(PF,QX),e(QX,zar),e(PF,Qar),e(j,War),e(j,IF),e(IF,u_e),e(u_e,Har),e(IF,Uar),e(IF,WX),e(WX,Jar),e(IF,Yar),e(j,Kar),e(j,qF),e(qF,__e),e(__e,Zar),e(qF,enr),e(qF,HX),e(HX,onr),e(qF,rnr),e(j,tnr),e(j,NF),e(NF,b_e),e(b_e,anr),e(NF,nnr),e(NF,UX),e(UX,snr),e(NF,lnr),e(j,inr),e(j,jF),e(jF,v_e),e(v_e,dnr),e(jF,cnr),e(jF,JX),e(JX,fnr),e(jF,mnr),e(j,gnr),e(j,DF),e(DF,F_e),e(F_e,hnr),e(DF,pnr),e(DF,YX),e(YX,unr),e(DF,_nr),e(j,bnr),e(j,GF),e(GF,T_e),e(T_e,vnr),e(GF,Fnr),e(GF,KX),e(KX,Tnr),e(GF,Mnr),e(j,Enr),e(j,OF),e(OF,M_e),e(M_e,Cnr),e(OF,wnr),e(OF,ZX),e(ZX,Anr),e(OF,ynr),e(j,Lnr),e(j,VF),e(VF,E_e),e(E_e,xnr),e(VF,$nr),e(VF,ez),e(ez,knr),e(VF,Snr),e(j,Rnr),e(j,XF),e(XF,C_e),e(C_e,Bnr),e(XF,Pnr),e(XF,oz),e(oz,Inr),e(XF,qnr),e(j,Nnr),e(j,zF),e(zF,w_e),e(w_e,jnr),e(zF,Dnr),e(zF,rz),e(rz,Gnr),e(zF,Onr),e(j,Vnr),e(j,QF),e(QF,A_e),e(A_e,Xnr),e(QF,znr),e(QF,tz),e(tz,Qnr),e(QF,Wnr),e(j,Hnr),e(j,WF),e(WF,y_e),e(y_e,Unr),e(WF,Jnr),e(WF,az),e(az,Ynr),e(WF,Knr),e(j,Znr),e(j,HF),e(HF,L_e),e(L_e,esr),e(HF,osr),e(HF,nz),e(nz,rsr),e(HF,tsr),e(j,asr),e(j,UF),e(UF,x_e),e(x_e,nsr),e(UF,ssr),e(UF,sz),e(sz,lsr),e(UF,isr),e(j,dsr),e(j,JF),e(JF,$_e),e($_e,csr),e(JF,fsr),e(JF,lz),e(lz,msr),e(JF,gsr),e(j,hsr),e(j,YF),e(YF,k_e),e(k_e,psr),e(YF,usr),e(YF,iz),e(iz,_sr),e(YF,bsr),e(Cr,vsr),M(KF,Cr,null),b(f,wPe,_),b(f,Bd,_),e(Bd,ZF),e(ZF,S_e),M(fL,S_e,null),e(Bd,Fsr),e(Bd,R_e),e(R_e,Tsr),b(f,APe,_),b(f,Ko,_),M(mL,Ko,null),e(Ko,Msr),e(Ko,Pd),e(Pd,Esr),e(Pd,dz),e(dz,Csr),e(Pd,wsr),e(Pd,cz),e(cz,Asr),e(Pd,ysr),e(Ko,Lsr),e(Ko,gL),e(gL,xsr),e(gL,B_e),e(B_e,$sr),e(gL,ksr),e(Ko,Ssr),e(Ko,Ct),M(hL,Ct,null),e(Ct,Rsr),e(Ct,P_e),e(P_e,Bsr),e(Ct,Psr),e(Ct,Id),e(Id,Isr),e(Id,I_e),e(I_e,qsr),e(Id,Nsr),e(Id,fz),e(fz,jsr),e(Id,Dsr),e(Ct,Gsr),M(eT,Ct,null),e(Ko,Osr),e(Ko,wr),M(pL,wr,null),e(wr,Vsr),e(wr,q_e),e(q_e,Xsr),e(wr,zsr),e(wr,Ja),e(Ja,Qsr),e(Ja,N_e),e(N_e,Wsr),e(Ja,Hsr),e(Ja,j_e),e(j_e,Usr),e(Ja,Jsr),e(Ja,D_e),e(D_e,Ysr),e(Ja,Ksr),e(wr,Zsr),e(wr,ne),e(ne,oT),e(oT,G_e),e(G_e,elr),e(oT,olr),e(oT,mz),e(mz,rlr),e(oT,tlr),e(ne,alr),e(ne,rT),e(rT,O_e),e(O_e,nlr),e(rT,slr),e(rT,gz),e(gz,llr),e(rT,ilr),e(ne,dlr),e(ne,tT),e(tT,V_e),e(V_e,clr),e(tT,flr),e(tT,hz),e(hz,mlr),e(tT,glr),e(ne,hlr),e(ne,aT),e(aT,X_e),e(X_e,plr),e(aT,ulr),e(aT,pz),e(pz,_lr),e(aT,blr),e(ne,vlr),e(ne,nT),e(nT,z_e),e(z_e,Flr),e(nT,Tlr),e(nT,uz),e(uz,Mlr),e(nT,Elr),e(ne,Clr),e(ne,sT),e(sT,Q_e),e(Q_e,wlr),e(sT,Alr),e(sT,_z),e(_z,ylr),e(sT,Llr),e(ne,xlr),e(ne,lT),e(lT,W_e),e(W_e,$lr),e(lT,klr),e(lT,bz),e(bz,Slr),e(lT,Rlr),e(ne,Blr),e(ne,iT),e(iT,H_e),e(H_e,Plr),e(iT,Ilr),e(iT,vz),e(vz,qlr),e(iT,Nlr),e(ne,jlr),e(ne,dT),e(dT,U_e),e(U_e,Dlr),e(dT,Glr),e(dT,Fz),e(Fz,Olr),e(dT,Vlr),e(ne,Xlr),e(ne,cT),e(cT,J_e),e(J_e,zlr),e(cT,Qlr),e(cT,Tz),e(Tz,Wlr),e(cT,Hlr),e(ne,Ulr),e(ne,fT),e(fT,Y_e),e(Y_e,Jlr),e(fT,Ylr),e(fT,Mz),e(Mz,Klr),e(fT,Zlr),e(ne,eir),e(ne,mT),e(mT,K_e),e(K_e,oir),e(mT,rir),e(mT,Ez),e(Ez,tir),e(mT,air),e(ne,nir),e(ne,gT),e(gT,Z_e),e(Z_e,sir),e(gT,lir),e(gT,Cz),e(Cz,iir),e(gT,dir),e(ne,cir),e(ne,hT),e(hT,e1e),e(e1e,fir),e(hT,mir),e(hT,wz),e(wz,gir),e(hT,hir),e(ne,pir),e(ne,pT),e(pT,o1e),e(o1e,uir),e(pT,_ir),e(pT,Az),e(Az,bir),e(pT,vir),e(ne,Fir),e(ne,uT),e(uT,r1e),e(r1e,Tir),e(uT,Mir),e(uT,yz),e(yz,Eir),e(uT,Cir),e(ne,wir),e(ne,_T),e(_T,t1e),e(t1e,Air),e(_T,yir),e(_T,Lz),e(Lz,Lir),e(_T,xir),e(ne,$ir),e(ne,bT),e(bT,a1e),e(a1e,kir),e(bT,Sir),e(bT,xz),e(xz,Rir),e(bT,Bir),e(ne,Pir),e(ne,vT),e(vT,n1e),e(n1e,Iir),e(vT,qir),e(vT,$z),e($z,Nir),e(vT,jir),e(ne,Dir),e(ne,FT),e(FT,s1e),e(s1e,Gir),e(FT,Oir),e(FT,kz),e(kz,Vir),e(FT,Xir),e(ne,zir),e(ne,TT),e(TT,l1e),e(l1e,Qir),e(TT,Wir),e(TT,Sz),e(Sz,Hir),e(TT,Uir),e(ne,Jir),e(ne,MT),e(MT,i1e),e(i1e,Yir),e(MT,Kir),e(MT,Rz),e(Rz,Zir),e(MT,edr),e(ne,odr),e(ne,ET),e(ET,d1e),e(d1e,rdr),e(ET,tdr),e(ET,Bz),e(Bz,adr),e(ET,ndr),e(wr,sdr),M(CT,wr,null),b(f,yPe,_),b(f,qd,_),e(qd,wT),e(wT,c1e),M(uL,c1e,null),e(qd,ldr),e(qd,f1e),e(f1e,idr),b(f,LPe,_),b(f,Zo,_),M(_L,Zo,null),e(Zo,ddr),e(Zo,Nd),e(Nd,cdr),e(Nd,Pz),e(Pz,fdr),e(Nd,mdr),e(Nd,Iz),e(Iz,gdr),e(Nd,hdr),e(Zo,pdr),e(Zo,bL),e(bL,udr),e(bL,m1e),e(m1e,_dr),e(bL,bdr),e(Zo,vdr),e(Zo,wt),M(vL,wt,null),e(wt,Fdr),e(wt,g1e),e(g1e,Tdr),e(wt,Mdr),e(wt,jd),e(jd,Edr),e(jd,h1e),e(h1e,Cdr),e(jd,wdr),e(jd,qz),e(qz,Adr),e(jd,ydr),e(wt,Ldr),M(AT,wt,null),e(Zo,xdr),e(Zo,Ar),M(FL,Ar,null),e(Ar,$dr),e(Ar,p1e),e(p1e,kdr),e(Ar,Sdr),e(Ar,Ya),e(Ya,Rdr),e(Ya,u1e),e(u1e,Bdr),e(Ya,Pdr),e(Ya,_1e),e(_1e,Idr),e(Ya,qdr),e(Ya,b1e),e(b1e,Ndr),e(Ya,jdr),e(Ar,Ddr),e(Ar,Te),e(Te,yT),e(yT,v1e),e(v1e,Gdr),e(yT,Odr),e(yT,Nz),e(Nz,Vdr),e(yT,Xdr),e(Te,zdr),e(Te,LT),e(LT,F1e),e(F1e,Qdr),e(LT,Wdr),e(LT,jz),e(jz,Hdr),e(LT,Udr),e(Te,Jdr),e(Te,xT),e(xT,T1e),e(T1e,Ydr),e(xT,Kdr),e(xT,Dz),e(Dz,Zdr),e(xT,ecr),e(Te,ocr),e(Te,$T),e($T,M1e),e(M1e,rcr),e($T,tcr),e($T,Gz),e(Gz,acr),e($T,ncr),e(Te,scr),e(Te,kT),e(kT,E1e),e(E1e,lcr),e(kT,icr),e(kT,Oz),e(Oz,dcr),e(kT,ccr),e(Te,fcr),e(Te,ST),e(ST,C1e),e(C1e,mcr),e(ST,gcr),e(ST,Vz),e(Vz,hcr),e(ST,pcr),e(Te,ucr),e(Te,RT),e(RT,w1e),e(w1e,_cr),e(RT,bcr),e(RT,Xz),e(Xz,vcr),e(RT,Fcr),e(Te,Tcr),e(Te,BT),e(BT,A1e),e(A1e,Mcr),e(BT,Ecr),e(BT,zz),e(zz,Ccr),e(BT,wcr),e(Te,Acr),e(Te,PT),e(PT,y1e),e(y1e,ycr),e(PT,Lcr),e(PT,Qz),e(Qz,xcr),e(PT,$cr),e(Te,kcr),e(Te,IT),e(IT,L1e),e(L1e,Scr),e(IT,Rcr),e(IT,Wz),e(Wz,Bcr),e(IT,Pcr),e(Te,Icr),e(Te,qT),e(qT,x1e),e(x1e,qcr),e(qT,Ncr),e(qT,Hz),e(Hz,jcr),e(qT,Dcr),e(Te,Gcr),e(Te,NT),e(NT,$1e),e($1e,Ocr),e(NT,Vcr),e(NT,Uz),e(Uz,Xcr),e(NT,zcr),e(Ar,Qcr),M(jT,Ar,null),b(f,xPe,_),b(f,Dd,_),e(Dd,DT),e(DT,k1e),M(TL,k1e,null),e(Dd,Wcr),e(Dd,S1e),e(S1e,Hcr),b(f,$Pe,_),b(f,er,_),M(ML,er,null),e(er,Ucr),e(er,Gd),e(Gd,Jcr),e(Gd,Jz),e(Jz,Ycr),e(Gd,Kcr),e(Gd,Yz),e(Yz,Zcr),e(Gd,efr),e(er,ofr),e(er,EL),e(EL,rfr),e(EL,R1e),e(R1e,tfr),e(EL,afr),e(er,nfr),e(er,At),M(CL,At,null),e(At,sfr),e(At,B1e),e(B1e,lfr),e(At,ifr),e(At,Od),e(Od,dfr),e(Od,P1e),e(P1e,cfr),e(Od,ffr),e(Od,Kz),e(Kz,mfr),e(Od,gfr),e(At,hfr),M(GT,At,null),e(er,pfr),e(er,yr),M(wL,yr,null),e(yr,ufr),e(yr,I1e),e(I1e,_fr),e(yr,bfr),e(yr,Ka),e(Ka,vfr),e(Ka,q1e),e(q1e,Ffr),e(Ka,Tfr),e(Ka,N1e),e(N1e,Mfr),e(Ka,Efr),e(Ka,j1e),e(j1e,Cfr),e(Ka,wfr),e(yr,Afr),e(yr,Vd),e(Vd,OT),e(OT,D1e),e(D1e,yfr),e(OT,Lfr),e(OT,Zz),e(Zz,xfr),e(OT,$fr),e(Vd,kfr),e(Vd,VT),e(VT,G1e),e(G1e,Sfr),e(VT,Rfr),e(VT,eQ),e(eQ,Bfr),e(VT,Pfr),e(Vd,Ifr),e(Vd,XT),e(XT,O1e),e(O1e,qfr),e(XT,Nfr),e(XT,oQ),e(oQ,jfr),e(XT,Dfr),e(yr,Gfr),M(zT,yr,null),b(f,kPe,_),b(f,Xd,_),e(Xd,QT),e(QT,V1e),M(AL,V1e,null),e(Xd,Ofr),e(Xd,X1e),e(X1e,Vfr),b(f,SPe,_),b(f,or,_),M(yL,or,null),e(or,Xfr),e(or,zd),e(zd,zfr),e(zd,rQ),e(rQ,Qfr),e(zd,Wfr),e(zd,tQ),e(tQ,Hfr),e(zd,Ufr),e(or,Jfr),e(or,LL),e(LL,Yfr),e(LL,z1e),e(z1e,Kfr),e(LL,Zfr),e(or,emr),e(or,yt),M(xL,yt,null),e(yt,omr),e(yt,Q1e),e(Q1e,rmr),e(yt,tmr),e(yt,Qd),e(Qd,amr),e(Qd,W1e),e(W1e,nmr),e(Qd,smr),e(Qd,aQ),e(aQ,lmr),e(Qd,imr),e(yt,dmr),M(WT,yt,null),e(or,cmr),e(or,Lr),M($L,Lr,null),e(Lr,fmr),e(Lr,H1e),e(H1e,mmr),e(Lr,gmr),e(Lr,Za),e(Za,hmr),e(Za,U1e),e(U1e,pmr),e(Za,umr),e(Za,J1e),e(J1e,_mr),e(Za,bmr),e(Za,Y1e),e(Y1e,vmr),e(Za,Fmr),e(Lr,Tmr),e(Lr,ie),e(ie,HT),e(HT,K1e),e(K1e,Mmr),e(HT,Emr),e(HT,nQ),e(nQ,Cmr),e(HT,wmr),e(ie,Amr),e(ie,UT),e(UT,Z1e),e(Z1e,ymr),e(UT,Lmr),e(UT,sQ),e(sQ,xmr),e(UT,$mr),e(ie,kmr),e(ie,JT),e(JT,ebe),e(ebe,Smr),e(JT,Rmr),e(JT,lQ),e(lQ,Bmr),e(JT,Pmr),e(ie,Imr),e(ie,YT),e(YT,obe),e(obe,qmr),e(YT,Nmr),e(YT,iQ),e(iQ,jmr),e(YT,Dmr),e(ie,Gmr),e(ie,KT),e(KT,rbe),e(rbe,Omr),e(KT,Vmr),e(KT,dQ),e(dQ,Xmr),e(KT,zmr),e(ie,Qmr),e(ie,ZT),e(ZT,tbe),e(tbe,Wmr),e(ZT,Hmr),e(ZT,cQ),e(cQ,Umr),e(ZT,Jmr),e(ie,Ymr),e(ie,e7),e(e7,abe),e(abe,Kmr),e(e7,Zmr),e(e7,fQ),e(fQ,egr),e(e7,ogr),e(ie,rgr),e(ie,o7),e(o7,nbe),e(nbe,tgr),e(o7,agr),e(o7,mQ),e(mQ,ngr),e(o7,sgr),e(ie,lgr),e(ie,r7),e(r7,sbe),e(sbe,igr),e(r7,dgr),e(r7,gQ),e(gQ,cgr),e(r7,fgr),e(ie,mgr),e(ie,t7),e(t7,lbe),e(lbe,ggr),e(t7,hgr),e(t7,hQ),e(hQ,pgr),e(t7,ugr),e(ie,_gr),e(ie,a7),e(a7,ibe),e(ibe,bgr),e(a7,vgr),e(a7,pQ),e(pQ,Fgr),e(a7,Tgr),e(ie,Mgr),e(ie,n7),e(n7,dbe),e(dbe,Egr),e(n7,Cgr),e(n7,uQ),e(uQ,wgr),e(n7,Agr),e(ie,ygr),e(ie,s7),e(s7,cbe),e(cbe,Lgr),e(s7,xgr),e(s7,_Q),e(_Q,$gr),e(s7,kgr),e(ie,Sgr),e(ie,l7),e(l7,fbe),e(fbe,Rgr),e(l7,Bgr),e(l7,bQ),e(bQ,Pgr),e(l7,Igr),e(ie,qgr),e(ie,i7),e(i7,mbe),e(mbe,Ngr),e(i7,jgr),e(i7,vQ),e(vQ,Dgr),e(i7,Ggr),e(ie,Ogr),e(ie,d7),e(d7,gbe),e(gbe,Vgr),e(d7,Xgr),e(d7,FQ),e(FQ,zgr),e(d7,Qgr),e(ie,Wgr),e(ie,c7),e(c7,hbe),e(hbe,Hgr),e(c7,Ugr),e(c7,TQ),e(TQ,Jgr),e(c7,Ygr),e(ie,Kgr),e(ie,f7),e(f7,pbe),e(pbe,Zgr),e(f7,ehr),e(f7,MQ),e(MQ,ohr),e(f7,rhr),e(ie,thr),e(ie,m7),e(m7,ube),e(ube,ahr),e(m7,nhr),e(m7,EQ),e(EQ,shr),e(m7,lhr),e(ie,ihr),e(ie,g7),e(g7,_be),e(_be,dhr),e(g7,chr),e(g7,CQ),e(CQ,fhr),e(g7,mhr),e(Lr,ghr),M(h7,Lr,null),b(f,RPe,_),b(f,Wd,_),e(Wd,p7),e(p7,bbe),M(kL,bbe,null),e(Wd,hhr),e(Wd,vbe),e(vbe,phr),b(f,BPe,_),b(f,rr,_),M(SL,rr,null),e(rr,uhr),e(rr,Hd),e(Hd,_hr),e(Hd,wQ),e(wQ,bhr),e(Hd,vhr),e(Hd,AQ),e(AQ,Fhr),e(Hd,Thr),e(rr,Mhr),e(rr,RL),e(RL,Ehr),e(RL,Fbe),e(Fbe,Chr),e(RL,whr),e(rr,Ahr),e(rr,Lt),M(BL,Lt,null),e(Lt,yhr),e(Lt,Tbe),e(Tbe,Lhr),e(Lt,xhr),e(Lt,Ud),e(Ud,$hr),e(Ud,Mbe),e(Mbe,khr),e(Ud,Shr),e(Ud,yQ),e(yQ,Rhr),e(Ud,Bhr),e(Lt,Phr),M(u7,Lt,null),e(rr,Ihr),e(rr,xr),M(PL,xr,null),e(xr,qhr),e(xr,Ebe),e(Ebe,Nhr),e(xr,jhr),e(xr,en),e(en,Dhr),e(en,Cbe),e(Cbe,Ghr),e(en,Ohr),e(en,wbe),e(wbe,Vhr),e(en,Xhr),e(en,Abe),e(Abe,zhr),e(en,Qhr),e(xr,Whr),e(xr,ye),e(ye,_7),e(_7,ybe),e(ybe,Hhr),e(_7,Uhr),e(_7,LQ),e(LQ,Jhr),e(_7,Yhr),e(ye,Khr),e(ye,b7),e(b7,Lbe),e(Lbe,Zhr),e(b7,epr),e(b7,xQ),e(xQ,opr),e(b7,rpr),e(ye,tpr),e(ye,v7),e(v7,xbe),e(xbe,apr),e(v7,npr),e(v7,$Q),e($Q,spr),e(v7,lpr),e(ye,ipr),e(ye,F7),e(F7,$be),e($be,dpr),e(F7,cpr),e(F7,kQ),e(kQ,fpr),e(F7,mpr),e(ye,gpr),e(ye,T7),e(T7,kbe),e(kbe,hpr),e(T7,ppr),e(T7,SQ),e(SQ,upr),e(T7,_pr),e(ye,bpr),e(ye,M7),e(M7,Sbe),e(Sbe,vpr),e(M7,Fpr),e(M7,RQ),e(RQ,Tpr),e(M7,Mpr),e(ye,Epr),e(ye,E7),e(E7,Rbe),e(Rbe,Cpr),e(E7,wpr),e(E7,BQ),e(BQ,Apr),e(E7,ypr),e(ye,Lpr),e(ye,C7),e(C7,Bbe),e(Bbe,xpr),e(C7,$pr),e(C7,PQ),e(PQ,kpr),e(C7,Spr),e(ye,Rpr),e(ye,w7),e(w7,Pbe),e(Pbe,Bpr),e(w7,Ppr),e(w7,IQ),e(IQ,Ipr),e(w7,qpr),e(ye,Npr),e(ye,A7),e(A7,Ibe),e(Ibe,jpr),e(A7,Dpr),e(A7,qQ),e(qQ,Gpr),e(A7,Opr),e(xr,Vpr),M(y7,xr,null),b(f,PPe,_),b(f,Jd,_),e(Jd,L7),e(L7,qbe),M(IL,qbe,null),e(Jd,Xpr),e(Jd,Nbe),e(Nbe,zpr),b(f,IPe,_),b(f,tr,_),M(qL,tr,null),e(tr,Qpr),e(tr,Yd),e(Yd,Wpr),e(Yd,NQ),e(NQ,Hpr),e(Yd,Upr),e(Yd,jQ),e(jQ,Jpr),e(Yd,Ypr),e(tr,Kpr),e(tr,NL),e(NL,Zpr),e(NL,jbe),e(jbe,eur),e(NL,our),e(tr,rur),e(tr,xt),M(jL,xt,null),e(xt,tur),e(xt,Dbe),e(Dbe,aur),e(xt,nur),e(xt,Kd),e(Kd,sur),e(Kd,Gbe),e(Gbe,lur),e(Kd,iur),e(Kd,DQ),e(DQ,dur),e(Kd,cur),e(xt,fur),M(x7,xt,null),e(tr,mur),e(tr,$r),M(DL,$r,null),e($r,gur),e($r,Obe),e(Obe,hur),e($r,pur),e($r,on),e(on,uur),e(on,Vbe),e(Vbe,_ur),e(on,bur),e(on,Xbe),e(Xbe,vur),e(on,Fur),e(on,zbe),e(zbe,Tur),e(on,Mur),e($r,Eur),e($r,Z),e(Z,$7),e($7,Qbe),e(Qbe,Cur),e($7,wur),e($7,GQ),e(GQ,Aur),e($7,yur),e(Z,Lur),e(Z,k7),e(k7,Wbe),e(Wbe,xur),e(k7,$ur),e(k7,OQ),e(OQ,kur),e(k7,Sur),e(Z,Rur),e(Z,S7),e(S7,Hbe),e(Hbe,Bur),e(S7,Pur),e(S7,VQ),e(VQ,Iur),e(S7,qur),e(Z,Nur),e(Z,R7),e(R7,Ube),e(Ube,jur),e(R7,Dur),e(R7,XQ),e(XQ,Gur),e(R7,Our),e(Z,Vur),e(Z,B7),e(B7,Jbe),e(Jbe,Xur),e(B7,zur),e(B7,zQ),e(zQ,Qur),e(B7,Wur),e(Z,Hur),e(Z,P7),e(P7,Ybe),e(Ybe,Uur),e(P7,Jur),e(P7,QQ),e(QQ,Yur),e(P7,Kur),e(Z,Zur),e(Z,I7),e(I7,Kbe),e(Kbe,e_r),e(I7,o_r),e(I7,WQ),e(WQ,r_r),e(I7,t_r),e(Z,a_r),e(Z,q7),e(q7,Zbe),e(Zbe,n_r),e(q7,s_r),e(q7,HQ),e(HQ,l_r),e(q7,i_r),e(Z,d_r),e(Z,N7),e(N7,e2e),e(e2e,c_r),e(N7,f_r),e(N7,UQ),e(UQ,m_r),e(N7,g_r),e(Z,h_r),e(Z,j7),e(j7,o2e),e(o2e,p_r),e(j7,u_r),e(j7,JQ),e(JQ,__r),e(j7,b_r),e(Z,v_r),e(Z,D7),e(D7,r2e),e(r2e,F_r),e(D7,T_r),e(D7,YQ),e(YQ,M_r),e(D7,E_r),e(Z,C_r),e(Z,G7),e(G7,t2e),e(t2e,w_r),e(G7,A_r),e(G7,KQ),e(KQ,y_r),e(G7,L_r),e(Z,x_r),e(Z,O7),e(O7,a2e),e(a2e,$_r),e(O7,k_r),e(O7,ZQ),e(ZQ,S_r),e(O7,R_r),e(Z,B_r),e(Z,V7),e(V7,n2e),e(n2e,P_r),e(V7,I_r),e(V7,eW),e(eW,q_r),e(V7,N_r),e(Z,j_r),e(Z,X7),e(X7,s2e),e(s2e,D_r),e(X7,G_r),e(X7,oW),e(oW,O_r),e(X7,V_r),e(Z,X_r),e(Z,z7),e(z7,l2e),e(l2e,z_r),e(z7,Q_r),e(z7,rW),e(rW,W_r),e(z7,H_r),e(Z,U_r),e(Z,Q7),e(Q7,i2e),e(i2e,J_r),e(Q7,Y_r),e(Q7,tW),e(tW,K_r),e(Q7,Z_r),e(Z,e1r),e(Z,W7),e(W7,d2e),e(d2e,o1r),e(W7,r1r),e(W7,aW),e(aW,t1r),e(W7,a1r),e(Z,n1r),e(Z,H7),e(H7,c2e),e(c2e,s1r),e(H7,l1r),e(H7,nW),e(nW,i1r),e(H7,d1r),e(Z,c1r),e(Z,U7),e(U7,f2e),e(f2e,f1r),e(U7,m1r),e(U7,sW),e(sW,g1r),e(U7,h1r),e(Z,p1r),e(Z,J7),e(J7,m2e),e(m2e,u1r),e(J7,_1r),e(J7,lW),e(lW,b1r),e(J7,v1r),e(Z,F1r),e(Z,Y7),e(Y7,g2e),e(g2e,T1r),e(Y7,M1r),e(Y7,iW),e(iW,E1r),e(Y7,C1r),e(Z,w1r),e(Z,K7),e(K7,h2e),e(h2e,A1r),e(K7,y1r),e(K7,dW),e(dW,L1r),e(K7,x1r),e(Z,$1r),e(Z,Z7),e(Z7,p2e),e(p2e,k1r),e(Z7,S1r),e(Z7,cW),e(cW,R1r),e(Z7,B1r),e(Z,P1r),e(Z,eM),e(eM,u2e),e(u2e,I1r),e(eM,q1r),e(eM,fW),e(fW,N1r),e(eM,j1r),e(Z,D1r),e(Z,oM),e(oM,_2e),e(_2e,G1r),e(oM,O1r),e(oM,mW),e(mW,V1r),e(oM,X1r),e($r,z1r),M(rM,$r,null),b(f,qPe,_),b(f,Zd,_),e(Zd,tM),e(tM,b2e),M(GL,b2e,null),e(Zd,Q1r),e(Zd,v2e),e(v2e,W1r),b(f,NPe,_),b(f,ar,_),M(OL,ar,null),e(ar,H1r),e(ar,ec),e(ec,U1r),e(ec,gW),e(gW,J1r),e(ec,Y1r),e(ec,hW),e(hW,K1r),e(ec,Z1r),e(ar,ebr),e(ar,VL),e(VL,obr),e(VL,F2e),e(F2e,rbr),e(VL,tbr),e(ar,abr),e(ar,$t),M(XL,$t,null),e($t,nbr),e($t,T2e),e(T2e,sbr),e($t,lbr),e($t,oc),e(oc,ibr),e(oc,M2e),e(M2e,dbr),e(oc,cbr),e(oc,pW),e(pW,fbr),e(oc,mbr),e($t,gbr),M(aM,$t,null),e(ar,hbr),e(ar,kr),M(zL,kr,null),e(kr,pbr),e(kr,E2e),e(E2e,ubr),e(kr,_br),e(kr,rn),e(rn,bbr),e(rn,C2e),e(C2e,vbr),e(rn,Fbr),e(rn,w2e),e(w2e,Tbr),e(rn,Mbr),e(rn,A2e),e(A2e,Ebr),e(rn,Cbr),e(kr,wbr),e(kr,pe),e(pe,nM),e(nM,y2e),e(y2e,Abr),e(nM,ybr),e(nM,uW),e(uW,Lbr),e(nM,xbr),e(pe,$br),e(pe,sM),e(sM,L2e),e(L2e,kbr),e(sM,Sbr),e(sM,_W),e(_W,Rbr),e(sM,Bbr),e(pe,Pbr),e(pe,lM),e(lM,x2e),e(x2e,Ibr),e(lM,qbr),e(lM,bW),e(bW,Nbr),e(lM,jbr),e(pe,Dbr),e(pe,iM),e(iM,$2e),e($2e,Gbr),e(iM,Obr),e(iM,vW),e(vW,Vbr),e(iM,Xbr),e(pe,zbr),e(pe,dM),e(dM,k2e),e(k2e,Qbr),e(dM,Wbr),e(dM,FW),e(FW,Hbr),e(dM,Ubr),e(pe,Jbr),e(pe,cM),e(cM,S2e),e(S2e,Ybr),e(cM,Kbr),e(cM,TW),e(TW,Zbr),e(cM,e2r),e(pe,o2r),e(pe,fM),e(fM,R2e),e(R2e,r2r),e(fM,t2r),e(fM,MW),e(MW,a2r),e(fM,n2r),e(pe,s2r),e(pe,mM),e(mM,B2e),e(B2e,l2r),e(mM,i2r),e(mM,EW),e(EW,d2r),e(mM,c2r),e(pe,f2r),e(pe,gM),e(gM,P2e),e(P2e,m2r),e(gM,g2r),e(gM,CW),e(CW,h2r),e(gM,p2r),e(pe,u2r),e(pe,hM),e(hM,I2e),e(I2e,_2r),e(hM,b2r),e(hM,wW),e(wW,v2r),e(hM,F2r),e(pe,T2r),e(pe,pM),e(pM,q2e),e(q2e,M2r),e(pM,E2r),e(pM,AW),e(AW,C2r),e(pM,w2r),e(pe,A2r),e(pe,uM),e(uM,N2e),e(N2e,y2r),e(uM,L2r),e(uM,yW),e(yW,x2r),e(uM,$2r),e(pe,k2r),e(pe,_M),e(_M,j2e),e(j2e,S2r),e(_M,R2r),e(_M,LW),e(LW,B2r),e(_M,P2r),e(pe,I2r),e(pe,bM),e(bM,D2e),e(D2e,q2r),e(bM,N2r),e(bM,xW),e(xW,j2r),e(bM,D2r),e(pe,G2r),e(pe,vM),e(vM,G2e),e(G2e,O2r),e(vM,V2r),e(vM,$W),e($W,X2r),e(vM,z2r),e(pe,Q2r),e(pe,FM),e(FM,O2e),e(O2e,W2r),e(FM,H2r),e(FM,kW),e(kW,U2r),e(FM,J2r),e(pe,Y2r),e(pe,TM),e(TM,V2e),e(V2e,K2r),e(TM,Z2r),e(TM,SW),e(SW,e5r),e(TM,o5r),e(kr,r5r),M(MM,kr,null),b(f,jPe,_),b(f,rc,_),e(rc,EM),e(EM,X2e),M(QL,X2e,null),e(rc,t5r),e(rc,z2e),e(z2e,a5r),b(f,DPe,_),b(f,nr,_),M(WL,nr,null),e(nr,n5r),e(nr,tc),e(tc,s5r),e(tc,RW),e(RW,l5r),e(tc,i5r),e(tc,BW),e(BW,d5r),e(tc,c5r),e(nr,f5r),e(nr,HL),e(HL,m5r),e(HL,Q2e),e(Q2e,g5r),e(HL,h5r),e(nr,p5r),e(nr,kt),M(UL,kt,null),e(kt,u5r),e(kt,W2e),e(W2e,_5r),e(kt,b5r),e(kt,ac),e(ac,v5r),e(ac,H2e),e(H2e,F5r),e(ac,T5r),e(ac,PW),e(PW,M5r),e(ac,E5r),e(kt,C5r),M(CM,kt,null),e(nr,w5r),e(nr,Sr),M(JL,Sr,null),e(Sr,A5r),e(Sr,U2e),e(U2e,y5r),e(Sr,L5r),e(Sr,tn),e(tn,x5r),e(tn,J2e),e(J2e,$5r),e(tn,k5r),e(tn,Y2e),e(Y2e,S5r),e(tn,R5r),e(tn,K2e),e(K2e,B5r),e(tn,P5r),e(Sr,I5r),e(Sr,Z2e),e(Z2e,wM),e(wM,e5e),e(e5e,q5r),e(wM,N5r),e(wM,IW),e(IW,j5r),e(wM,D5r),e(Sr,G5r),M(AM,Sr,null),b(f,GPe,_),b(f,nc,_),e(nc,yM),e(yM,o5e),M(YL,o5e,null),e(nc,O5r),e(nc,r5e),e(r5e,V5r),b(f,OPe,_),b(f,sr,_),M(KL,sr,null),e(sr,X5r),e(sr,sc),e(sc,z5r),e(sc,qW),e(qW,Q5r),e(sc,W5r),e(sc,NW),e(NW,H5r),e(sc,U5r),e(sr,J5r),e(sr,ZL),e(ZL,Y5r),e(ZL,t5e),e(t5e,K5r),e(ZL,Z5r),e(sr,e3r),e(sr,St),M(e8,St,null),e(St,o3r),e(St,a5e),e(a5e,r3r),e(St,t3r),e(St,lc),e(lc,a3r),e(lc,n5e),e(n5e,n3r),e(lc,s3r),e(lc,jW),e(jW,l3r),e(lc,i3r),e(St,d3r),M(LM,St,null),e(sr,c3r),e(sr,Rr),M(o8,Rr,null),e(Rr,f3r),e(Rr,s5e),e(s5e,m3r),e(Rr,g3r),e(Rr,an),e(an,h3r),e(an,l5e),e(l5e,p3r),e(an,u3r),e(an,i5e),e(i5e,_3r),e(an,b3r),e(an,d5e),e(d5e,v3r),e(an,F3r),e(Rr,T3r),e(Rr,de),e(de,xM),e(xM,c5e),e(c5e,M3r),e(xM,E3r),e(xM,DW),e(DW,C3r),e(xM,w3r),e(de,A3r),e(de,$M),e($M,f5e),e(f5e,y3r),e($M,L3r),e($M,GW),e(GW,x3r),e($M,$3r),e(de,k3r),e(de,kM),e(kM,m5e),e(m5e,S3r),e(kM,R3r),e(kM,OW),e(OW,B3r),e(kM,P3r),e(de,I3r),e(de,SM),e(SM,g5e),e(g5e,q3r),e(SM,N3r),e(SM,VW),e(VW,j3r),e(SM,D3r),e(de,G3r),e(de,RM),e(RM,h5e),e(h5e,O3r),e(RM,V3r),e(RM,XW),e(XW,X3r),e(RM,z3r),e(de,Q3r),e(de,BM),e(BM,p5e),e(p5e,W3r),e(BM,H3r),e(BM,zW),e(zW,U3r),e(BM,J3r),e(de,Y3r),e(de,PM),e(PM,u5e),e(u5e,K3r),e(PM,Z3r),e(PM,QW),e(QW,evr),e(PM,ovr),e(de,rvr),e(de,IM),e(IM,_5e),e(_5e,tvr),e(IM,avr),e(IM,WW),e(WW,nvr),e(IM,svr),e(de,lvr),e(de,qM),e(qM,b5e),e(b5e,ivr),e(qM,dvr),e(qM,HW),e(HW,cvr),e(qM,fvr),e(de,mvr),e(de,NM),e(NM,v5e),e(v5e,gvr),e(NM,hvr),e(NM,UW),e(UW,pvr),e(NM,uvr),e(de,_vr),e(de,jM),e(jM,F5e),e(F5e,bvr),e(jM,vvr),e(jM,JW),e(JW,Fvr),e(jM,Tvr),e(de,Mvr),e(de,DM),e(DM,T5e),e(T5e,Evr),e(DM,Cvr),e(DM,YW),e(YW,wvr),e(DM,Avr),e(de,yvr),e(de,GM),e(GM,M5e),e(M5e,Lvr),e(GM,xvr),e(GM,KW),e(KW,$vr),e(GM,kvr),e(de,Svr),e(de,OM),e(OM,E5e),e(E5e,Rvr),e(OM,Bvr),e(OM,ZW),e(ZW,Pvr),e(OM,Ivr),e(de,qvr),e(de,VM),e(VM,C5e),e(C5e,Nvr),e(VM,jvr),e(VM,eH),e(eH,Dvr),e(VM,Gvr),e(de,Ovr),e(de,XM),e(XM,w5e),e(w5e,Vvr),e(XM,Xvr),e(XM,oH),e(oH,zvr),e(XM,Qvr),e(de,Wvr),e(de,zM),e(zM,A5e),e(A5e,Hvr),e(zM,Uvr),e(zM,rH),e(rH,Jvr),e(zM,Yvr),e(de,Kvr),e(de,QM),e(QM,y5e),e(y5e,Zvr),e(QM,eFr),e(QM,tH),e(tH,oFr),e(QM,rFr),e(de,tFr),e(de,WM),e(WM,L5e),e(L5e,aFr),e(WM,nFr),e(WM,aH),e(aH,sFr),e(WM,lFr),e(de,iFr),e(de,HM),e(HM,x5e),e(x5e,dFr),e(HM,cFr),e(HM,nH),e(nH,fFr),e(HM,mFr),e(Rr,gFr),M(UM,Rr,null),b(f,VPe,_),b(f,ic,_),e(ic,JM),e(JM,$5e),M(r8,$5e,null),e(ic,hFr),e(ic,k5e),e(k5e,pFr),b(f,XPe,_),b(f,lr,_),M(t8,lr,null),e(lr,uFr),e(lr,dc),e(dc,_Fr),e(dc,sH),e(sH,bFr),e(dc,vFr),e(dc,lH),e(lH,FFr),e(dc,TFr),e(lr,MFr),e(lr,a8),e(a8,EFr),e(a8,S5e),e(S5e,CFr),e(a8,wFr),e(lr,AFr),e(lr,Rt),M(n8,Rt,null),e(Rt,yFr),e(Rt,R5e),e(R5e,LFr),e(Rt,xFr),e(Rt,cc),e(cc,$Fr),e(cc,B5e),e(B5e,kFr),e(cc,SFr),e(cc,iH),e(iH,RFr),e(cc,BFr),e(Rt,PFr),M(YM,Rt,null),e(lr,IFr),e(lr,Br),M(s8,Br,null),e(Br,qFr),e(Br,P5e),e(P5e,NFr),e(Br,jFr),e(Br,nn),e(nn,DFr),e(nn,I5e),e(I5e,GFr),e(nn,OFr),e(nn,q5e),e(q5e,VFr),e(nn,XFr),e(nn,N5e),e(N5e,zFr),e(nn,QFr),e(Br,WFr),e(Br,ce),e(ce,KM),e(KM,j5e),e(j5e,HFr),e(KM,UFr),e(KM,dH),e(dH,JFr),e(KM,YFr),e(ce,KFr),e(ce,ZM),e(ZM,D5e),e(D5e,ZFr),e(ZM,eTr),e(ZM,cH),e(cH,oTr),e(ZM,rTr),e(ce,tTr),e(ce,e4),e(e4,G5e),e(G5e,aTr),e(e4,nTr),e(e4,fH),e(fH,sTr),e(e4,lTr),e(ce,iTr),e(ce,o4),e(o4,O5e),e(O5e,dTr),e(o4,cTr),e(o4,mH),e(mH,fTr),e(o4,mTr),e(ce,gTr),e(ce,r4),e(r4,V5e),e(V5e,hTr),e(r4,pTr),e(r4,gH),e(gH,uTr),e(r4,_Tr),e(ce,bTr),e(ce,t4),e(t4,X5e),e(X5e,vTr),e(t4,FTr),e(t4,hH),e(hH,TTr),e(t4,MTr),e(ce,ETr),e(ce,a4),e(a4,z5e),e(z5e,CTr),e(a4,wTr),e(a4,pH),e(pH,ATr),e(a4,yTr),e(ce,LTr),e(ce,n4),e(n4,Q5e),e(Q5e,xTr),e(n4,$Tr),e(n4,uH),e(uH,kTr),e(n4,STr),e(ce,RTr),e(ce,s4),e(s4,W5e),e(W5e,BTr),e(s4,PTr),e(s4,_H),e(_H,ITr),e(s4,qTr),e(ce,NTr),e(ce,l4),e(l4,H5e),e(H5e,jTr),e(l4,DTr),e(l4,bH),e(bH,GTr),e(l4,OTr),e(ce,VTr),e(ce,i4),e(i4,U5e),e(U5e,XTr),e(i4,zTr),e(i4,vH),e(vH,QTr),e(i4,WTr),e(ce,HTr),e(ce,d4),e(d4,J5e),e(J5e,UTr),e(d4,JTr),e(d4,FH),e(FH,YTr),e(d4,KTr),e(ce,ZTr),e(ce,c4),e(c4,Y5e),e(Y5e,e7r),e(c4,o7r),e(c4,TH),e(TH,r7r),e(c4,t7r),e(ce,a7r),e(ce,f4),e(f4,K5e),e(K5e,n7r),e(f4,s7r),e(f4,MH),e(MH,l7r),e(f4,i7r),e(ce,d7r),e(ce,m4),e(m4,Z5e),e(Z5e,c7r),e(m4,f7r),e(m4,EH),e(EH,m7r),e(m4,g7r),e(ce,h7r),e(ce,g4),e(g4,e3e),e(e3e,p7r),e(g4,u7r),e(g4,CH),e(CH,_7r),e(g4,b7r),e(ce,v7r),e(ce,h4),e(h4,o3e),e(o3e,F7r),e(h4,T7r),e(h4,wH),e(wH,M7r),e(h4,E7r),e(ce,C7r),e(ce,p4),e(p4,r3e),e(r3e,w7r),e(p4,A7r),e(p4,AH),e(AH,y7r),e(p4,L7r),e(ce,x7r),e(ce,u4),e(u4,t3e),e(t3e,$7r),e(u4,k7r),e(u4,yH),e(yH,S7r),e(u4,R7r),e(ce,B7r),e(ce,_4),e(_4,a3e),e(a3e,P7r),e(_4,I7r),e(_4,LH),e(LH,q7r),e(_4,N7r),e(Br,j7r),M(b4,Br,null),b(f,zPe,_),b(f,fc,_),e(fc,v4),e(v4,n3e),M(l8,n3e,null),e(fc,D7r),e(fc,s3e),e(s3e,G7r),b(f,QPe,_),b(f,ir,_),M(i8,ir,null),e(ir,O7r),e(ir,mc),e(mc,V7r),e(mc,xH),e(xH,X7r),e(mc,z7r),e(mc,$H),e($H,Q7r),e(mc,W7r),e(ir,H7r),e(ir,d8),e(d8,U7r),e(d8,l3e),e(l3e,J7r),e(d8,Y7r),e(ir,K7r),e(ir,Bt),M(c8,Bt,null),e(Bt,Z7r),e(Bt,i3e),e(i3e,eMr),e(Bt,oMr),e(Bt,gc),e(gc,rMr),e(gc,d3e),e(d3e,tMr),e(gc,aMr),e(gc,kH),e(kH,nMr),e(gc,sMr),e(Bt,lMr),M(F4,Bt,null),e(ir,iMr),e(ir,Pr),M(f8,Pr,null),e(Pr,dMr),e(Pr,c3e),e(c3e,cMr),e(Pr,fMr),e(Pr,sn),e(sn,mMr),e(sn,f3e),e(f3e,gMr),e(sn,hMr),e(sn,m3e),e(m3e,pMr),e(sn,uMr),e(sn,g3e),e(g3e,_Mr),e(sn,bMr),e(Pr,vMr),e(Pr,h3e),e(h3e,T4),e(T4,p3e),e(p3e,FMr),e(T4,TMr),e(T4,SH),e(SH,MMr),e(T4,EMr),e(Pr,CMr),M(M4,Pr,null),b(f,WPe,_),b(f,hc,_),e(hc,E4),e(E4,u3e),M(m8,u3e,null),e(hc,wMr),e(hc,_3e),e(_3e,AMr),b(f,HPe,_),b(f,dr,_),M(g8,dr,null),e(dr,yMr),e(dr,pc),e(pc,LMr),e(pc,RH),e(RH,xMr),e(pc,$Mr),e(pc,BH),e(BH,kMr),e(pc,SMr),e(dr,RMr),e(dr,h8),e(h8,BMr),e(h8,b3e),e(b3e,PMr),e(h8,IMr),e(dr,qMr),e(dr,Pt),M(p8,Pt,null),e(Pt,NMr),e(Pt,v3e),e(v3e,jMr),e(Pt,DMr),e(Pt,uc),e(uc,GMr),e(uc,F3e),e(F3e,OMr),e(uc,VMr),e(uc,PH),e(PH,XMr),e(uc,zMr),e(Pt,QMr),M(C4,Pt,null),e(dr,WMr),e(dr,Ir),M(u8,Ir,null),e(Ir,HMr),e(Ir,T3e),e(T3e,UMr),e(Ir,JMr),e(Ir,ln),e(ln,YMr),e(ln,M3e),e(M3e,KMr),e(ln,ZMr),e(ln,E3e),e(E3e,e4r),e(ln,o4r),e(ln,C3e),e(C3e,r4r),e(ln,t4r),e(Ir,a4r),e(Ir,w3e),e(w3e,w4),e(w4,A3e),e(A3e,n4r),e(w4,s4r),e(w4,IH),e(IH,l4r),e(w4,i4r),e(Ir,d4r),M(A4,Ir,null),b(f,UPe,_),b(f,_c,_),e(_c,y4),e(y4,y3e),M(_8,y3e,null),e(_c,c4r),e(_c,L3e),e(L3e,f4r),b(f,JPe,_),b(f,cr,_),M(b8,cr,null),e(cr,m4r),e(cr,bc),e(bc,g4r),e(bc,qH),e(qH,h4r),e(bc,p4r),e(bc,NH),e(NH,u4r),e(bc,_4r),e(cr,b4r),e(cr,v8),e(v8,v4r),e(v8,x3e),e(x3e,F4r),e(v8,T4r),e(cr,M4r),e(cr,It),M(F8,It,null),e(It,E4r),e(It,$3e),e($3e,C4r),e(It,w4r),e(It,vc),e(vc,A4r),e(vc,k3e),e(k3e,y4r),e(vc,L4r),e(vc,jH),e(jH,x4r),e(vc,$4r),e(It,k4r),M(L4,It,null),e(cr,S4r),e(cr,qr),M(T8,qr,null),e(qr,R4r),e(qr,S3e),e(S3e,B4r),e(qr,P4r),e(qr,dn),e(dn,I4r),e(dn,R3e),e(R3e,q4r),e(dn,N4r),e(dn,B3e),e(B3e,j4r),e(dn,D4r),e(dn,P3e),e(P3e,G4r),e(dn,O4r),e(qr,V4r),e(qr,oe),e(oe,x4),e(x4,I3e),e(I3e,X4r),e(x4,z4r),e(x4,DH),e(DH,Q4r),e(x4,W4r),e(oe,H4r),e(oe,$4),e($4,q3e),e(q3e,U4r),e($4,J4r),e($4,GH),e(GH,Y4r),e($4,K4r),e(oe,Z4r),e(oe,k4),e(k4,N3e),e(N3e,eEr),e(k4,oEr),e(k4,OH),e(OH,rEr),e(k4,tEr),e(oe,aEr),e(oe,S4),e(S4,j3e),e(j3e,nEr),e(S4,sEr),e(S4,VH),e(VH,lEr),e(S4,iEr),e(oe,dEr),e(oe,R4),e(R4,D3e),e(D3e,cEr),e(R4,fEr),e(R4,XH),e(XH,mEr),e(R4,gEr),e(oe,hEr),e(oe,B4),e(B4,G3e),e(G3e,pEr),e(B4,uEr),e(B4,zH),e(zH,_Er),e(B4,bEr),e(oe,vEr),e(oe,P4),e(P4,O3e),e(O3e,FEr),e(P4,TEr),e(P4,QH),e(QH,MEr),e(P4,EEr),e(oe,CEr),e(oe,I4),e(I4,V3e),e(V3e,wEr),e(I4,AEr),e(I4,WH),e(WH,yEr),e(I4,LEr),e(oe,xEr),e(oe,q4),e(q4,X3e),e(X3e,$Er),e(q4,kEr),e(q4,HH),e(HH,SEr),e(q4,REr),e(oe,BEr),e(oe,N4),e(N4,z3e),e(z3e,PEr),e(N4,IEr),e(N4,UH),e(UH,qEr),e(N4,NEr),e(oe,jEr),e(oe,j4),e(j4,Q3e),e(Q3e,DEr),e(j4,GEr),e(j4,JH),e(JH,OEr),e(j4,VEr),e(oe,XEr),e(oe,D4),e(D4,W3e),e(W3e,zEr),e(D4,QEr),e(D4,YH),e(YH,WEr),e(D4,HEr),e(oe,UEr),e(oe,G4),e(G4,H3e),e(H3e,JEr),e(G4,YEr),e(G4,KH),e(KH,KEr),e(G4,ZEr),e(oe,eCr),e(oe,O4),e(O4,U3e),e(U3e,oCr),e(O4,rCr),e(O4,ZH),e(ZH,tCr),e(O4,aCr),e(oe,nCr),e(oe,V4),e(V4,J3e),e(J3e,sCr),e(V4,lCr),e(V4,eU),e(eU,iCr),e(V4,dCr),e(oe,cCr),e(oe,X4),e(X4,Y3e),e(Y3e,fCr),e(X4,mCr),e(X4,oU),e(oU,gCr),e(X4,hCr),e(oe,pCr),e(oe,z4),e(z4,K3e),e(K3e,uCr),e(z4,_Cr),e(z4,rU),e(rU,bCr),e(z4,vCr),e(oe,FCr),e(oe,Q4),e(Q4,Z3e),e(Z3e,TCr),e(Q4,MCr),e(Q4,tU),e(tU,ECr),e(Q4,CCr),e(oe,wCr),e(oe,W4),e(W4,eve),e(eve,ACr),e(W4,yCr),e(W4,aU),e(aU,LCr),e(W4,xCr),e(oe,$Cr),e(oe,H4),e(H4,ove),e(ove,kCr),e(H4,SCr),e(H4,nU),e(nU,RCr),e(H4,BCr),e(oe,PCr),e(oe,U4),e(U4,rve),e(rve,ICr),e(U4,qCr),e(U4,sU),e(sU,NCr),e(U4,jCr),e(oe,DCr),e(oe,J4),e(J4,tve),e(tve,GCr),e(J4,OCr),e(J4,lU),e(lU,VCr),e(J4,XCr),e(oe,zCr),e(oe,Y4),e(Y4,ave),e(ave,QCr),e(Y4,WCr),e(Y4,iU),e(iU,HCr),e(Y4,UCr),e(oe,JCr),e(oe,K4),e(K4,nve),e(nve,YCr),e(K4,KCr),e(K4,dU),e(dU,ZCr),e(K4,ewr),e(oe,owr),e(oe,Z4),e(Z4,sve),e(sve,rwr),e(Z4,twr),e(Z4,cU),e(cU,awr),e(Z4,nwr),e(qr,swr),M(eE,qr,null),b(f,YPe,_),b(f,Fc,_),e(Fc,oE),e(oE,lve),M(M8,lve,null),e(Fc,lwr),e(Fc,ive),e(ive,iwr),b(f,KPe,_),b(f,fr,_),M(E8,fr,null),e(fr,dwr),e(fr,Tc),e(Tc,cwr),e(Tc,fU),e(fU,fwr),e(Tc,mwr),e(Tc,mU),e(mU,gwr),e(Tc,hwr),e(fr,pwr),e(fr,C8),e(C8,uwr),e(C8,dve),e(dve,_wr),e(C8,bwr),e(fr,vwr),e(fr,qt),M(w8,qt,null),e(qt,Fwr),e(qt,cve),e(cve,Twr),e(qt,Mwr),e(qt,Mc),e(Mc,Ewr),e(Mc,fve),e(fve,Cwr),e(Mc,wwr),e(Mc,gU),e(gU,Awr),e(Mc,ywr),e(qt,Lwr),M(rE,qt,null),e(fr,xwr),e(fr,Nr),M(A8,Nr,null),e(Nr,$wr),e(Nr,mve),e(mve,kwr),e(Nr,Swr),e(Nr,cn),e(cn,Rwr),e(cn,gve),e(gve,Bwr),e(cn,Pwr),e(cn,hve),e(hve,Iwr),e(cn,qwr),e(cn,pve),e(pve,Nwr),e(cn,jwr),e(Nr,Dwr),e(Nr,ke),e(ke,tE),e(tE,uve),e(uve,Gwr),e(tE,Owr),e(tE,hU),e(hU,Vwr),e(tE,Xwr),e(ke,zwr),e(ke,aE),e(aE,_ve),e(_ve,Qwr),e(aE,Wwr),e(aE,pU),e(pU,Hwr),e(aE,Uwr),e(ke,Jwr),e(ke,nE),e(nE,bve),e(bve,Ywr),e(nE,Kwr),e(nE,uU),e(uU,Zwr),e(nE,eAr),e(ke,oAr),e(ke,sE),e(sE,vve),e(vve,rAr),e(sE,tAr),e(sE,_U),e(_U,aAr),e(sE,nAr),e(ke,sAr),e(ke,lE),e(lE,Fve),e(Fve,lAr),e(lE,iAr),e(lE,bU),e(bU,dAr),e(lE,cAr),e(ke,fAr),e(ke,iE),e(iE,Tve),e(Tve,mAr),e(iE,gAr),e(iE,vU),e(vU,hAr),e(iE,pAr),e(ke,uAr),e(ke,dE),e(dE,Mve),e(Mve,_Ar),e(dE,bAr),e(dE,FU),e(FU,vAr),e(dE,FAr),e(ke,TAr),e(ke,cE),e(cE,Eve),e(Eve,MAr),e(cE,EAr),e(cE,TU),e(TU,CAr),e(cE,wAr),e(ke,AAr),e(ke,fE),e(fE,Cve),e(Cve,yAr),e(fE,LAr),e(fE,MU),e(MU,xAr),e(fE,$Ar),e(Nr,kAr),M(mE,Nr,null),b(f,ZPe,_),b(f,Ec,_),e(Ec,gE),e(gE,wve),M(y8,wve,null),e(Ec,SAr),e(Ec,Ave),e(Ave,RAr),b(f,eIe,_),b(f,mr,_),M(L8,mr,null),e(mr,BAr),e(mr,Cc),e(Cc,PAr),e(Cc,EU),e(EU,IAr),e(Cc,qAr),e(Cc,CU),e(CU,NAr),e(Cc,jAr),e(mr,DAr),e(mr,x8),e(x8,GAr),e(x8,yve),e(yve,OAr),e(x8,VAr),e(mr,XAr),e(mr,Nt),M($8,Nt,null),e(Nt,zAr),e(Nt,Lve),e(Lve,QAr),e(Nt,WAr),e(Nt,wc),e(wc,HAr),e(wc,xve),e(xve,UAr),e(wc,JAr),e(wc,wU),e(wU,YAr),e(wc,KAr),e(Nt,ZAr),M(hE,Nt,null),e(mr,e0r),e(mr,jr),M(k8,jr,null),e(jr,o0r),e(jr,$ve),e($ve,r0r),e(jr,t0r),e(jr,fn),e(fn,a0r),e(fn,kve),e(kve,n0r),e(fn,s0r),e(fn,Sve),e(Sve,l0r),e(fn,i0r),e(fn,Rve),e(Rve,d0r),e(fn,c0r),e(jr,f0r),e(jr,Me),e(Me,pE),e(pE,Bve),e(Bve,m0r),e(pE,g0r),e(pE,AU),e(AU,h0r),e(pE,p0r),e(Me,u0r),e(Me,uE),e(uE,Pve),e(Pve,_0r),e(uE,b0r),e(uE,yU),e(yU,v0r),e(uE,F0r),e(Me,T0r),e(Me,_E),e(_E,Ive),e(Ive,M0r),e(_E,E0r),e(_E,LU),e(LU,C0r),e(_E,w0r),e(Me,A0r),e(Me,bE),e(bE,qve),e(qve,y0r),e(bE,L0r),e(bE,xU),e(xU,x0r),e(bE,$0r),e(Me,k0r),e(Me,vE),e(vE,Nve),e(Nve,S0r),e(vE,R0r),e(vE,$U),e($U,B0r),e(vE,P0r),e(Me,I0r),e(Me,FE),e(FE,jve),e(jve,q0r),e(FE,N0r),e(FE,kU),e(kU,j0r),e(FE,D0r),e(Me,G0r),e(Me,TE),e(TE,Dve),e(Dve,O0r),e(TE,V0r),e(TE,SU),e(SU,X0r),e(TE,z0r),e(Me,Q0r),e(Me,ME),e(ME,Gve),e(Gve,W0r),e(ME,H0r),e(ME,RU),e(RU,U0r),e(ME,J0r),e(Me,Y0r),e(Me,EE),e(EE,Ove),e(Ove,K0r),e(EE,Z0r),e(EE,BU),e(BU,e6r),e(EE,o6r),e(Me,r6r),e(Me,CE),e(CE,Vve),e(Vve,t6r),e(CE,a6r),e(CE,PU),e(PU,n6r),e(CE,s6r),e(Me,l6r),e(Me,wE),e(wE,Xve),e(Xve,i6r),e(wE,d6r),e(wE,IU),e(IU,c6r),e(wE,f6r),e(Me,m6r),e(Me,AE),e(AE,zve),e(zve,g6r),e(AE,h6r),e(AE,qU),e(qU,p6r),e(AE,u6r),e(jr,_6r),M(yE,jr,null),b(f,oIe,_),b(f,Ac,_),e(Ac,LE),e(LE,Qve),M(S8,Qve,null),e(Ac,b6r),e(Ac,Wve),e(Wve,v6r),b(f,rIe,_),b(f,gr,_),M(R8,gr,null),e(gr,F6r),e(gr,yc),e(yc,T6r),e(yc,NU),e(NU,M6r),e(yc,E6r),e(yc,jU),e(jU,C6r),e(yc,w6r),e(gr,A6r),e(gr,B8),e(B8,y6r),e(B8,Hve),e(Hve,L6r),e(B8,x6r),e(gr,$6r),e(gr,jt),M(P8,jt,null),e(jt,k6r),e(jt,Uve),e(Uve,S6r),e(jt,R6r),e(jt,Lc),e(Lc,B6r),e(Lc,Jve),e(Jve,P6r),e(Lc,I6r),e(Lc,DU),e(DU,q6r),e(Lc,N6r),e(jt,j6r),M(xE,jt,null),e(gr,D6r),e(gr,Dr),M(I8,Dr,null),e(Dr,G6r),e(Dr,Yve),e(Yve,O6r),e(Dr,V6r),e(Dr,mn),e(mn,X6r),e(mn,Kve),e(Kve,z6r),e(mn,Q6r),e(mn,Zve),e(Zve,W6r),e(mn,H6r),e(mn,eFe),e(eFe,U6r),e(mn,J6r),e(Dr,Y6r),e(Dr,Le),e(Le,$E),e($E,oFe),e(oFe,K6r),e($E,Z6r),e($E,GU),e(GU,eyr),e($E,oyr),e(Le,ryr),e(Le,kE),e(kE,rFe),e(rFe,tyr),e(kE,ayr),e(kE,OU),e(OU,nyr),e(kE,syr),e(Le,lyr),e(Le,SE),e(SE,tFe),e(tFe,iyr),e(SE,dyr),e(SE,VU),e(VU,cyr),e(SE,fyr),e(Le,myr),e(Le,RE),e(RE,aFe),e(aFe,gyr),e(RE,hyr),e(RE,XU),e(XU,pyr),e(RE,uyr),e(Le,_yr),e(Le,BE),e(BE,nFe),e(nFe,byr),e(BE,vyr),e(BE,zU),e(zU,Fyr),e(BE,Tyr),e(Le,Myr),e(Le,PE),e(PE,sFe),e(sFe,Eyr),e(PE,Cyr),e(PE,QU),e(QU,wyr),e(PE,Ayr),e(Le,yyr),e(Le,IE),e(IE,lFe),e(lFe,Lyr),e(IE,xyr),e(IE,WU),e(WU,$yr),e(IE,kyr),e(Le,Syr),e(Le,qE),e(qE,iFe),e(iFe,Ryr),e(qE,Byr),e(qE,HU),e(HU,Pyr),e(qE,Iyr),e(Le,qyr),e(Le,NE),e(NE,dFe),e(dFe,Nyr),e(NE,jyr),e(NE,UU),e(UU,Dyr),e(NE,Gyr),e(Le,Oyr),e(Le,jE),e(jE,cFe),e(cFe,Vyr),e(jE,Xyr),e(jE,JU),e(JU,zyr),e(jE,Qyr),e(Dr,Wyr),M(DE,Dr,null),b(f,tIe,_),b(f,xc,_),e(xc,GE),e(GE,fFe),M(q8,fFe,null),e(xc,Hyr),e(xc,mFe),e(mFe,Uyr),b(f,aIe,_),b(f,hr,_),M(N8,hr,null),e(hr,Jyr),e(hr,$c),e($c,Yyr),e($c,YU),e(YU,Kyr),e($c,Zyr),e($c,KU),e(KU,eLr),e($c,oLr),e(hr,rLr),e(hr,j8),e(j8,tLr),e(j8,gFe),e(gFe,aLr),e(j8,nLr),e(hr,sLr),e(hr,Dt),M(D8,Dt,null),e(Dt,lLr),e(Dt,hFe),e(hFe,iLr),e(Dt,dLr),e(Dt,kc),e(kc,cLr),e(kc,pFe),e(pFe,fLr),e(kc,mLr),e(kc,ZU),e(ZU,gLr),e(kc,hLr),e(Dt,pLr),M(OE,Dt,null),e(hr,uLr),e(hr,Gr),M(G8,Gr,null),e(Gr,_Lr),e(Gr,uFe),e(uFe,bLr),e(Gr,vLr),e(Gr,gn),e(gn,FLr),e(gn,_Fe),e(_Fe,TLr),e(gn,MLr),e(gn,bFe),e(bFe,ELr),e(gn,CLr),e(gn,vFe),e(vFe,wLr),e(gn,ALr),e(Gr,yLr),e(Gr,Se),e(Se,VE),e(VE,FFe),e(FFe,LLr),e(VE,xLr),e(VE,eJ),e(eJ,$Lr),e(VE,kLr),e(Se,SLr),e(Se,XE),e(XE,TFe),e(TFe,RLr),e(XE,BLr),e(XE,oJ),e(oJ,PLr),e(XE,ILr),e(Se,qLr),e(Se,zE),e(zE,MFe),e(MFe,NLr),e(zE,jLr),e(zE,rJ),e(rJ,DLr),e(zE,GLr),e(Se,OLr),e(Se,QE),e(QE,EFe),e(EFe,VLr),e(QE,XLr),e(QE,tJ),e(tJ,zLr),e(QE,QLr),e(Se,WLr),e(Se,WE),e(WE,CFe),e(CFe,HLr),e(WE,ULr),e(WE,aJ),e(aJ,JLr),e(WE,YLr),e(Se,KLr),e(Se,HE),e(HE,wFe),e(wFe,ZLr),e(HE,e8r),e(HE,nJ),e(nJ,o8r),e(HE,r8r),e(Se,t8r),e(Se,UE),e(UE,AFe),e(AFe,a8r),e(UE,n8r),e(UE,sJ),e(sJ,s8r),e(UE,l8r),e(Se,i8r),e(Se,JE),e(JE,yFe),e(yFe,d8r),e(JE,c8r),e(JE,lJ),e(lJ,f8r),e(JE,m8r),e(Se,g8r),e(Se,YE),e(YE,LFe),e(LFe,h8r),e(YE,p8r),e(YE,iJ),e(iJ,u8r),e(YE,_8r),e(Gr,b8r),M(KE,Gr,null),b(f,nIe,_),b(f,Sc,_),e(Sc,ZE),e(ZE,xFe),M(O8,xFe,null),e(Sc,v8r),e(Sc,$Fe),e($Fe,F8r),b(f,sIe,_),b(f,pr,_),M(V8,pr,null),e(pr,T8r),e(pr,Rc),e(Rc,M8r),e(Rc,dJ),e(dJ,E8r),e(Rc,C8r),e(Rc,cJ),e(cJ,w8r),e(Rc,A8r),e(pr,y8r),e(pr,X8),e(X8,L8r),e(X8,kFe),e(kFe,x8r),e(X8,$8r),e(pr,k8r),e(pr,Gt),M(z8,Gt,null),e(Gt,S8r),e(Gt,SFe),e(SFe,R8r),e(Gt,B8r),e(Gt,Bc),e(Bc,P8r),e(Bc,RFe),e(RFe,I8r),e(Bc,q8r),e(Bc,fJ),e(fJ,N8r),e(Bc,j8r),e(Gt,D8r),M(eC,Gt,null),e(pr,G8r),e(pr,Or),M(Q8,Or,null),e(Or,O8r),e(Or,BFe),e(BFe,V8r),e(Or,X8r),e(Or,hn),e(hn,z8r),e(hn,PFe),e(PFe,Q8r),e(hn,W8r),e(hn,IFe),e(IFe,H8r),e(hn,U8r),e(hn,qFe),e(qFe,J8r),e(hn,Y8r),e(Or,K8r),e(Or,xe),e(xe,oC),e(oC,NFe),e(NFe,Z8r),e(oC,exr),e(oC,mJ),e(mJ,oxr),e(oC,rxr),e(xe,txr),e(xe,rC),e(rC,jFe),e(jFe,axr),e(rC,nxr),e(rC,gJ),e(gJ,sxr),e(rC,lxr),e(xe,ixr),e(xe,tC),e(tC,DFe),e(DFe,dxr),e(tC,cxr),e(tC,hJ),e(hJ,fxr),e(tC,mxr),e(xe,gxr),e(xe,aC),e(aC,GFe),e(GFe,hxr),e(aC,pxr),e(aC,pJ),e(pJ,uxr),e(aC,_xr),e(xe,bxr),e(xe,nC),e(nC,OFe),e(OFe,vxr),e(nC,Fxr),e(nC,uJ),e(uJ,Txr),e(nC,Mxr),e(xe,Exr),e(xe,sC),e(sC,VFe),e(VFe,Cxr),e(sC,wxr),e(sC,_J),e(_J,Axr),e(sC,yxr),e(xe,Lxr),e(xe,lC),e(lC,XFe),e(XFe,xxr),e(lC,$xr),e(lC,bJ),e(bJ,kxr),e(lC,Sxr),e(xe,Rxr),e(xe,iC),e(iC,zFe),e(zFe,Bxr),e(iC,Pxr),e(iC,vJ),e(vJ,Ixr),e(iC,qxr),e(xe,Nxr),e(xe,dC),e(dC,QFe),e(QFe,jxr),e(dC,Dxr),e(dC,FJ),e(FJ,Gxr),e(dC,Oxr),e(xe,Vxr),e(xe,cC),e(cC,WFe),e(WFe,Xxr),e(cC,zxr),e(cC,TJ),e(TJ,Qxr),e(cC,Wxr),e(Or,Hxr),M(fC,Or,null),b(f,lIe,_),b(f,Pc,_),e(Pc,mC),e(mC,HFe),M(W8,HFe,null),e(Pc,Uxr),e(Pc,UFe),e(UFe,Jxr),b(f,iIe,_),b(f,ur,_),M(H8,ur,null),e(ur,Yxr),e(ur,Ic),e(Ic,Kxr),e(Ic,MJ),e(MJ,Zxr),e(Ic,e9r),e(Ic,EJ),e(EJ,o9r),e(Ic,r9r),e(ur,t9r),e(ur,U8),e(U8,a9r),e(U8,JFe),e(JFe,n9r),e(U8,s9r),e(ur,l9r),e(ur,Ot),M(J8,Ot,null),e(Ot,i9r),e(Ot,YFe),e(YFe,d9r),e(Ot,c9r),e(Ot,qc),e(qc,f9r),e(qc,KFe),e(KFe,m9r),e(qc,g9r),e(qc,CJ),e(CJ,h9r),e(qc,p9r),e(Ot,u9r),M(gC,Ot,null),e(ur,_9r),e(ur,Vr),M(Y8,Vr,null),e(Vr,b9r),e(Vr,ZFe),e(ZFe,v9r),e(Vr,F9r),e(Vr,pn),e(pn,T9r),e(pn,eTe),e(eTe,M9r),e(pn,E9r),e(pn,oTe),e(oTe,C9r),e(pn,w9r),e(pn,rTe),e(rTe,A9r),e(pn,y9r),e(Vr,L9r),e(Vr,$e),e($e,hC),e(hC,tTe),e(tTe,x9r),e(hC,$9r),e(hC,wJ),e(wJ,k9r),e(hC,S9r),e($e,R9r),e($e,pC),e(pC,aTe),e(aTe,B9r),e(pC,P9r),e(pC,AJ),e(AJ,I9r),e(pC,q9r),e($e,N9r),e($e,uC),e(uC,nTe),e(nTe,j9r),e(uC,D9r),e(uC,yJ),e(yJ,G9r),e(uC,O9r),e($e,V9r),e($e,_C),e(_C,sTe),e(sTe,X9r),e(_C,z9r),e(_C,LJ),e(LJ,Q9r),e(_C,W9r),e($e,H9r),e($e,bC),e(bC,lTe),e(lTe,U9r),e(bC,J9r),e(bC,xJ),e(xJ,Y9r),e(bC,K9r),e($e,Z9r),e($e,vC),e(vC,iTe),e(iTe,e$r),e(vC,o$r),e(vC,$J),e($J,r$r),e(vC,t$r),e($e,a$r),e($e,FC),e(FC,dTe),e(dTe,n$r),e(FC,s$r),e(FC,kJ),e(kJ,l$r),e(FC,i$r),e($e,d$r),e($e,TC),e(TC,cTe),e(cTe,c$r),e(TC,f$r),e(TC,SJ),e(SJ,m$r),e(TC,g$r),e($e,h$r),e($e,MC),e(MC,fTe),e(fTe,p$r),e(MC,u$r),e(MC,RJ),e(RJ,_$r),e(MC,b$r),e($e,v$r),e($e,EC),e(EC,mTe),e(mTe,F$r),e(EC,T$r),e(EC,BJ),e(BJ,M$r),e(EC,E$r),e(Vr,C$r),M(CC,Vr,null),b(f,dIe,_),b(f,Nc,_),e(Nc,wC),e(wC,gTe),M(K8,gTe,null),e(Nc,w$r),e(Nc,hTe),e(hTe,A$r),b(f,cIe,_),b(f,_r,_),M(Z8,_r,null),e(_r,y$r),e(_r,jc),e(jc,L$r),e(jc,PJ),e(PJ,x$r),e(jc,$$r),e(jc,IJ),e(IJ,k$r),e(jc,S$r),e(_r,R$r),e(_r,ex),e(ex,B$r),e(ex,pTe),e(pTe,P$r),e(ex,I$r),e(_r,q$r),e(_r,Vt),M(ox,Vt,null),e(Vt,N$r),e(Vt,uTe),e(uTe,j$r),e(Vt,D$r),e(Vt,Dc),e(Dc,G$r),e(Dc,_Te),e(_Te,O$r),e(Dc,V$r),e(Dc,qJ),e(qJ,X$r),e(Dc,z$r),e(Vt,Q$r),M(AC,Vt,null),e(_r,W$r),e(_r,Xr),M(rx,Xr,null),e(Xr,H$r),e(Xr,bTe),e(bTe,U$r),e(Xr,J$r),e(Xr,un),e(un,Y$r),e(un,vTe),e(vTe,K$r),e(un,Z$r),e(un,FTe),e(FTe,ekr),e(un,okr),e(un,TTe),e(TTe,rkr),e(un,tkr),e(Xr,akr),e(Xr,De),e(De,yC),e(yC,MTe),e(MTe,nkr),e(yC,skr),e(yC,NJ),e(NJ,lkr),e(yC,ikr),e(De,dkr),e(De,LC),e(LC,ETe),e(ETe,ckr),e(LC,fkr),e(LC,jJ),e(jJ,mkr),e(LC,gkr),e(De,hkr),e(De,xC),e(xC,CTe),e(CTe,pkr),e(xC,ukr),e(xC,DJ),e(DJ,_kr),e(xC,bkr),e(De,vkr),e(De,$C),e($C,wTe),e(wTe,Fkr),e($C,Tkr),e($C,GJ),e(GJ,Mkr),e($C,Ekr),e(De,Ckr),e(De,kC),e(kC,ATe),e(ATe,wkr),e(kC,Akr),e(kC,OJ),e(OJ,ykr),e(kC,Lkr),e(De,xkr),e(De,SC),e(SC,yTe),e(yTe,$kr),e(SC,kkr),e(SC,VJ),e(VJ,Skr),e(SC,Rkr),e(De,Bkr),e(De,RC),e(RC,LTe),e(LTe,Pkr),e(RC,Ikr),e(RC,XJ),e(XJ,qkr),e(RC,Nkr),e(De,jkr),e(De,BC),e(BC,xTe),e(xTe,Dkr),e(BC,Gkr),e(BC,zJ),e(zJ,Okr),e(BC,Vkr),e(Xr,Xkr),M(PC,Xr,null),b(f,fIe,_),b(f,Gc,_),e(Gc,IC),e(IC,$Te),M(tx,$Te,null),e(Gc,zkr),e(Gc,kTe),e(kTe,Qkr),b(f,mIe,_),b(f,br,_),M(ax,br,null),e(br,Wkr),e(br,Oc),e(Oc,Hkr),e(Oc,QJ),e(QJ,Ukr),e(Oc,Jkr),e(Oc,WJ),e(WJ,Ykr),e(Oc,Kkr),e(br,Zkr),e(br,nx),e(nx,eSr),e(nx,STe),e(STe,oSr),e(nx,rSr),e(br,tSr),e(br,Xt),M(sx,Xt,null),e(Xt,aSr),e(Xt,RTe),e(RTe,nSr),e(Xt,sSr),e(Xt,Vc),e(Vc,lSr),e(Vc,BTe),e(BTe,iSr),e(Vc,dSr),e(Vc,HJ),e(HJ,cSr),e(Vc,fSr),e(Xt,mSr),M(qC,Xt,null),e(br,gSr),e(br,zr),M(lx,zr,null),e(zr,hSr),e(zr,PTe),e(PTe,pSr),e(zr,uSr),e(zr,_n),e(_n,_Sr),e(_n,ITe),e(ITe,bSr),e(_n,vSr),e(_n,qTe),e(qTe,FSr),e(_n,TSr),e(_n,NTe),e(NTe,MSr),e(_n,ESr),e(zr,CSr),e(zr,Ge),e(Ge,NC),e(NC,jTe),e(jTe,wSr),e(NC,ASr),e(NC,UJ),e(UJ,ySr),e(NC,LSr),e(Ge,xSr),e(Ge,jC),e(jC,DTe),e(DTe,$Sr),e(jC,kSr),e(jC,JJ),e(JJ,SSr),e(jC,RSr),e(Ge,BSr),e(Ge,DC),e(DC,GTe),e(GTe,PSr),e(DC,ISr),e(DC,YJ),e(YJ,qSr),e(DC,NSr),e(Ge,jSr),e(Ge,GC),e(GC,OTe),e(OTe,DSr),e(GC,GSr),e(GC,KJ),e(KJ,OSr),e(GC,VSr),e(Ge,XSr),e(Ge,OC),e(OC,VTe),e(VTe,zSr),e(OC,QSr),e(OC,ZJ),e(ZJ,WSr),e(OC,HSr),e(Ge,USr),e(Ge,VC),e(VC,XTe),e(XTe,JSr),e(VC,YSr),e(VC,eY),e(eY,KSr),e(VC,ZSr),e(Ge,eRr),e(Ge,XC),e(XC,zTe),e(zTe,oRr),e(XC,rRr),e(XC,oY),e(oY,tRr),e(XC,aRr),e(Ge,nRr),e(Ge,zC),e(zC,QTe),e(QTe,sRr),e(zC,lRr),e(zC,rY),e(rY,iRr),e(zC,dRr),e(zr,cRr),M(QC,zr,null),b(f,gIe,_),b(f,Xc,_),e(Xc,WC),e(WC,WTe),M(ix,WTe,null),e(Xc,fRr),e(Xc,HTe),e(HTe,mRr),b(f,hIe,_),b(f,vr,_),M(dx,vr,null),e(vr,gRr),e(vr,zc),e(zc,hRr),e(zc,tY),e(tY,pRr),e(zc,uRr),e(zc,aY),e(aY,_Rr),e(zc,bRr),e(vr,vRr),e(vr,cx),e(cx,FRr),e(cx,UTe),e(UTe,TRr),e(cx,MRr),e(vr,ERr),e(vr,zt),M(fx,zt,null),e(zt,CRr),e(zt,JTe),e(JTe,wRr),e(zt,ARr),e(zt,Qc),e(Qc,yRr),e(Qc,YTe),e(YTe,LRr),e(Qc,xRr),e(Qc,nY),e(nY,$Rr),e(Qc,kRr),e(zt,SRr),M(HC,zt,null),e(vr,RRr),e(vr,Qr),M(mx,Qr,null),e(Qr,BRr),e(Qr,KTe),e(KTe,PRr),e(Qr,IRr),e(Qr,bn),e(bn,qRr),e(bn,ZTe),e(ZTe,NRr),e(bn,jRr),e(bn,e7e),e(e7e,DRr),e(bn,GRr),e(bn,o7e),e(o7e,ORr),e(bn,VRr),e(Qr,XRr),e(Qr,r7e),e(r7e,UC),e(UC,t7e),e(t7e,zRr),e(UC,QRr),e(UC,sY),e(sY,WRr),e(UC,HRr),e(Qr,URr),M(JC,Qr,null),b(f,pIe,_),b(f,Wc,_),e(Wc,YC),e(YC,a7e),M(gx,a7e,null),e(Wc,JRr),e(Wc,n7e),e(n7e,YRr),b(f,uIe,_),b(f,Fr,_),M(hx,Fr,null),e(Fr,KRr),e(Fr,Hc),e(Hc,ZRr),e(Hc,lY),e(lY,eBr),e(Hc,oBr),e(Hc,iY),e(iY,rBr),e(Hc,tBr),e(Fr,aBr),e(Fr,px),e(px,nBr),e(px,s7e),e(s7e,sBr),e(px,lBr),e(Fr,iBr),e(Fr,Qt),M(ux,Qt,null),e(Qt,dBr),e(Qt,l7e),e(l7e,cBr),e(Qt,fBr),e(Qt,Uc),e(Uc,mBr),e(Uc,i7e),e(i7e,gBr),e(Uc,hBr),e(Uc,dY),e(dY,pBr),e(Uc,uBr),e(Qt,_Br),M(KC,Qt,null),e(Fr,bBr),e(Fr,Wr),M(_x,Wr,null),e(Wr,vBr),e(Wr,d7e),e(d7e,FBr),e(Wr,TBr),e(Wr,vn),e(vn,MBr),e(vn,c7e),e(c7e,EBr),e(vn,CBr),e(vn,f7e),e(f7e,wBr),e(vn,ABr),e(vn,m7e),e(m7e,yBr),e(vn,LBr),e(Wr,xBr),e(Wr,bx),e(bx,ZC),e(ZC,g7e),e(g7e,$Br),e(ZC,kBr),e(ZC,cY),e(cY,SBr),e(ZC,RBr),e(bx,BBr),e(bx,ew),e(ew,h7e),e(h7e,PBr),e(ew,IBr),e(ew,fY),e(fY,qBr),e(ew,NBr),e(Wr,jBr),M(ow,Wr,null),b(f,_Ie,_),b(f,Jc,_),e(Jc,rw),e(rw,p7e),M(vx,p7e,null),e(Jc,DBr),e(Jc,u7e),e(u7e,GBr),b(f,bIe,_),b(f,Tr,_),M(Fx,Tr,null),e(Tr,OBr),e(Tr,Yc),e(Yc,VBr),e(Yc,mY),e(mY,XBr),e(Yc,zBr),e(Yc,gY),e(gY,QBr),e(Yc,WBr),e(Tr,HBr),e(Tr,Tx),e(Tx,UBr),e(Tx,_7e),e(_7e,JBr),e(Tx,YBr),e(Tr,KBr),e(Tr,Wt),M(Mx,Wt,null),e(Wt,ZBr),e(Wt,b7e),e(b7e,ePr),e(Wt,oPr),e(Wt,Kc),e(Kc,rPr),e(Kc,v7e),e(v7e,tPr),e(Kc,aPr),e(Kc,hY),e(hY,nPr),e(Kc,sPr),e(Wt,lPr),M(tw,Wt,null),e(Tr,iPr),e(Tr,Hr),M(Ex,Hr,null),e(Hr,dPr),e(Hr,F7e),e(F7e,cPr),e(Hr,fPr),e(Hr,Fn),e(Fn,mPr),e(Fn,T7e),e(T7e,gPr),e(Fn,hPr),e(Fn,M7e),e(M7e,pPr),e(Fn,uPr),e(Fn,E7e),e(E7e,_Pr),e(Fn,bPr),e(Hr,vPr),e(Hr,C7e),e(C7e,aw),e(aw,w7e),e(w7e,FPr),e(aw,TPr),e(aw,pY),e(pY,MPr),e(aw,EPr),e(Hr,CPr),M(nw,Hr,null),vIe=!0},p(f,[_]){const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),lf.$set(Cx);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:f}),ng.$set(A7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:f}),qg.$set(y7e);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:f}),ch.$set(L7e);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),fh.$set(wx);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:f}),Lh.$set(x7e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),xh.$set(Tn);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:f}),Sh.$set($7e);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:f}),Fu.$set(k7e);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:f}),Mu.$set(S7e);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),d_.$set(Ax);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:f}),f_.$set(R7e);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),H_.$set(yx);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:f}),J_.$set(B7e);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),R1.$set(Lx);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:f}),P1.$set(P7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:f}),eb.$set(I7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:f}),rb.$set(q7e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Yb.$set(Zc);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:f}),Zb.$set(N7e);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:f}),$2.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:f}),S2.$set(D7e);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),j2.$set(xx);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:f}),G2.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:f}),M5.$set(O7e);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:f}),C5.$set(V7e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),f3.$set(Jr);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),g3.$set($x);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:f}),u3.$set(X7e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),b3.$set(kx);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:f}),k3.$set(z7e);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),R3.$set(Yr);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),I3.$set(Q7e);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),N3.$set(ef);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),H3.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),J3.$set(H7e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),rv.$set(y);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),av.$set(sw);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),hv.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),uv.$set(J7e);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),Fv.$set(lw);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),Mv.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),Lv.$set(K7e);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),$v.$set(iw);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),Pv.$set(Z7e);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),qv.$set(eMe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),Gv.$set(dw);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),Vv.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),Qv.$set(rMe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),Hv.$set(cw);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),eF.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),rF.$set(aMe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),nF.$set(fw);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),lF.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),KF.$set(sMe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),eT.$set(mw);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),CT.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),AT.$set(iMe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),jT.$set(gw);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),GT.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),zT.$set(cMe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),WT.$set(hw);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),h7.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),u7.$set(mMe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),y7.$set(pw);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),x7.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),rM.$set(hMe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),aM.$set(uw);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),MM.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),CM.$set(uMe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),AM.$set(_w);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),LM.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),UM.$set(bMe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),YM.$set(bw);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),b4.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),F4.$set(FMe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),M4.$set(vw);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),C4.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),A4.$set(MMe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),L4.$set(Fw);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),eE.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),rE.$set(CMe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),mE.$set(Tw);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),hE.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),yE.$set(AMe);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),xE.$set(Mw);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),DE.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),OE.$set(LMe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),KE.$set(Ew);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),eC.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),fC.$set($Me);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),gC.$set(Cw);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),CC.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),AC.$set(SMe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),PC.$set(ww);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),qC.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),QC.$set(BMe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),HC.$set(Aw);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),JC.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),KC.$set(IMe);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),ow.$set(yw);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),tw.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),nw.$set(NMe)},i(f){vIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(lf.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E(k0.$$.fragment,f),E(ng.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(B0.$$.fragment,f),E(q0.$$.fragment,f),E(qg.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(D0.$$.fragment,f),E(V0.$$.fragment,f),E(ch.$$.fragment,f),E(fh.$$.fragment,f),E(X0.$$.fragment,f),E(z0.$$.fragment,f),E(Q0.$$.fragment,f),E(U0.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(J0.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(e6.$$.fragment,f),E(Sh.$$.fragment,f),E(o6.$$.fragment,f),E(Fu.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(n6.$$.fragment,f),E(Mu.$$.fragment,f),E(s6.$$.fragment,f),E(d_.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(c6.$$.fragment,f),E(f_.$$.fragment,f),E(f6.$$.fragment,f),E(H_.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(p6.$$.fragment,f),E(J_.$$.fragment,f),E(u6.$$.fragment,f),E(R1.$$.fragment,f),E(_6.$$.fragment,f),E(b6.$$.fragment,f),E(F6.$$.fragment,f),E(P1.$$.fragment,f),E(T6.$$.fragment,f),E(eb.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(w6.$$.fragment,f),E(rb.$$.fragment,f),E(A6.$$.fragment,f),E(Yb.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Zb.$$.fragment,f),E(k6.$$.fragment,f),E($2.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(S2.$$.fragment,f),E(I6.$$.fragment,f),E(j2.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(G2.$$.fragment,f),E(G6.$$.fragment,f),E(M5.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(C5.$$.fragment,f),E(Q6.$$.fragment,f),E(f3.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(g3.$$.fragment,f),E(Y6.$$.fragment,f),E(u3.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(b3.$$.fragment,f),E(ry.$$.fragment,f),E(k3.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(R3.$$.fragment,f),E(ly.$$.fragment,f),E(I3.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(N3.$$.fragment,f),E(my.$$.fragment,f),E(H3.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(J3.$$.fragment,f),E(_y.$$.fragment,f),E(rv.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(av.$$.fragment,f),E(My.$$.fragment,f),E(hv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(uv.$$.fragment,f),E(yy.$$.fragment,f),E(Fv.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Mv.$$.fragment,f),E(Ry.$$.fragment,f),E(Lv.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E($v.$$.fragment,f),E(Ny.$$.fragment,f),E(Pv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(qv.$$.fragment,f),E(Vy.$$.fragment,f),E(Gv.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Vv.$$.fragment,f),E(Uy.$$.fragment,f),E(Qv.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(Hv.$$.fragment,f),E(eL.$$.fragment,f),E(eF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(rF.$$.fragment,f),E(nL.$$.fragment,f),E(nF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(lF.$$.fragment,f),E(cL.$$.fragment,f),E(KF.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(eT.$$.fragment,f),E(pL.$$.fragment,f),E(CT.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(AT.$$.fragment,f),E(FL.$$.fragment,f),E(jT.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(GT.$$.fragment,f),E(wL.$$.fragment,f),E(zT.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(WT.$$.fragment,f),E($L.$$.fragment,f),E(h7.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(u7.$$.fragment,f),E(PL.$$.fragment,f),E(y7.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(x7.$$.fragment,f),E(DL.$$.fragment,f),E(rM.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(aM.$$.fragment,f),E(zL.$$.fragment,f),E(MM.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(CM.$$.fragment,f),E(JL.$$.fragment,f),E(AM.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(LM.$$.fragment,f),E(o8.$$.fragment,f),E(UM.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(YM.$$.fragment,f),E(s8.$$.fragment,f),E(b4.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(F4.$$.fragment,f),E(f8.$$.fragment,f),E(M4.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(C4.$$.fragment,f),E(u8.$$.fragment,f),E(A4.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(L4.$$.fragment,f),E(T8.$$.fragment,f),E(eE.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(rE.$$.fragment,f),E(A8.$$.fragment,f),E(mE.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(hE.$$.fragment,f),E(k8.$$.fragment,f),E(yE.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(xE.$$.fragment,f),E(I8.$$.fragment,f),E(DE.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(OE.$$.fragment,f),E(G8.$$.fragment,f),E(KE.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(eC.$$.fragment,f),E(Q8.$$.fragment,f),E(fC.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(gC.$$.fragment,f),E(Y8.$$.fragment,f),E(CC.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(AC.$$.fragment,f),E(rx.$$.fragment,f),E(PC.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(qC.$$.fragment,f),E(lx.$$.fragment,f),E(QC.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(HC.$$.fragment,f),E(mx.$$.fragment,f),E(JC.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(KC.$$.fragment,f),E(_x.$$.fragment,f),E(ow.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(tw.$$.fragment,f),E(Ex.$$.fragment,f),E(nw.$$.fragment,f),vIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(lf.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C(k0.$$.fragment,f),C(ng.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(B0.$$.fragment,f),C(q0.$$.fragment,f),C(qg.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(D0.$$.fragment,f),C(V0.$$.fragment,f),C(ch.$$.fragment,f),C(fh.$$.fragment,f),C(X0.$$.fragment,f),C(z0.$$.fragment,f),C(Q0.$$.fragment,f),C(U0.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(J0.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(e6.$$.fragment,f),C(Sh.$$.fragment,f),C(o6.$$.fragment,f),C(Fu.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(n6.$$.fragment,f),C(Mu.$$.fragment,f),C(s6.$$.fragment,f),C(d_.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(c6.$$.fragment,f),C(f_.$$.fragment,f),C(f6.$$.fragment,f),C(H_.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(p6.$$.fragment,f),C(J_.$$.fragment,f),C(u6.$$.fragment,f),C(R1.$$.fragment,f),C(_6.$$.fragment,f),C(b6.$$.fragment,f),C(F6.$$.fragment,f),C(P1.$$.fragment,f),C(T6.$$.fragment,f),C(eb.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(w6.$$.fragment,f),C(rb.$$.fragment,f),C(A6.$$.fragment,f),C(Yb.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Zb.$$.fragment,f),C(k6.$$.fragment,f),C($2.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(S2.$$.fragment,f),C(I6.$$.fragment,f),C(j2.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(G2.$$.fragment,f),C(G6.$$.fragment,f),C(M5.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(C5.$$.fragment,f),C(Q6.$$.fragment,f),C(f3.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(g3.$$.fragment,f),C(Y6.$$.fragment,f),C(u3.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(b3.$$.fragment,f),C(ry.$$.fragment,f),C(k3.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(R3.$$.fragment,f),C(ly.$$.fragment,f),C(I3.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(N3.$$.fragment,f),C(my.$$.fragment,f),C(H3.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(J3.$$.fragment,f),C(_y.$$.fragment,f),C(rv.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(av.$$.fragment,f),C(My.$$.fragment,f),C(hv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(uv.$$.fragment,f),C(yy.$$.fragment,f),C(Fv.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Mv.$$.fragment,f),C(Ry.$$.fragment,f),C(Lv.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C($v.$$.fragment,f),C(Ny.$$.fragment,f),C(Pv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(qv.$$.fragment,f),C(Vy.$$.fragment,f),C(Gv.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Vv.$$.fragment,f),C(Uy.$$.fragment,f),C(Qv.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(Hv.$$.fragment,f),C(eL.$$.fragment,f),C(eF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(rF.$$.fragment,f),C(nL.$$.fragment,f),C(nF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(lF.$$.fragment,f),C(cL.$$.fragment,f),C(KF.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(eT.$$.fragment,f),C(pL.$$.fragment,f),C(CT.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(AT.$$.fragment,f),C(FL.$$.fragment,f),C(jT.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(GT.$$.fragment,f),C(wL.$$.fragment,f),C(zT.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(WT.$$.fragment,f),C($L.$$.fragment,f),C(h7.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(u7.$$.fragment,f),C(PL.$$.fragment,f),C(y7.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(x7.$$.fragment,f),C(DL.$$.fragment,f),C(rM.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(aM.$$.fragment,f),C(zL.$$.fragment,f),C(MM.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(CM.$$.fragment,f),C(JL.$$.fragment,f),C(AM.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(LM.$$.fragment,f),C(o8.$$.fragment,f),C(UM.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(YM.$$.fragment,f),C(s8.$$.fragment,f),C(b4.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(F4.$$.fragment,f),C(f8.$$.fragment,f),C(M4.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(C4.$$.fragment,f),C(u8.$$.fragment,f),C(A4.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(L4.$$.fragment,f),C(T8.$$.fragment,f),C(eE.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(rE.$$.fragment,f),C(A8.$$.fragment,f),C(mE.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(hE.$$.fragment,f),C(k8.$$.fragment,f),C(yE.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(xE.$$.fragment,f),C(I8.$$.fragment,f),C(DE.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(OE.$$.fragment,f),C(G8.$$.fragment,f),C(KE.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(eC.$$.fragment,f),C(Q8.$$.fragment,f),C(fC.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(gC.$$.fragment,f),C(Y8.$$.fragment,f),C(CC.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(AC.$$.fragment,f),C(rx.$$.fragment,f),C(PC.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(qC.$$.fragment,f),C(lx.$$.fragment,f),C(QC.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(HC.$$.fragment,f),C(mx.$$.fragment,f),C(JC.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(KC.$$.fragment,f),C(_x.$$.fragment,f),C(ow.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(tw.$$.fragment,f),C(Ex.$$.fragment,f),C(nw.$$.fragment,f),vIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(bBe),f&&t(ii),w(w0),f&&t(vBe),f&&t(An),f&&t(FBe),w(A0,f),f&&t(TBe),f&&t(G9),f&&t(MBe),w(lf,f),f&&t(EBe),f&&t(di),w(y0),f&&t(CBe),f&&t(Co),w(L0),w(k0),w(ng),w(S0),f&&t(wBe),f&&t(fi),w(R0),f&&t(ABe),f&&t(wo),w(B0),w(q0),w(qg),w(N0),f&&t(yBe),f&&t(mi),w(j0),f&&t(LBe),f&&t(Ao),w(D0),w(V0),w(ch),w(fh),w(X0),f&&t(xBe),f&&t(gi),w(z0),f&&t($Be),f&&t(yo),w(Q0),w(U0),w(Lh),w(xh),w(J0),f&&t(kBe),f&&t(pi),w(Y0),f&&t(SBe),f&&t(Lo),w(K0),w(e6),w(Sh),w(o6),w(Fu),f&&t(RBe),f&&t(bi),w(r6),f&&t(BBe),f&&t(xo),w(t6),w(n6),w(Mu),w(s6),w(d_),f&&t(PBe),f&&t(Ti),w(l6),f&&t(IBe),f&&t($o),w(i6),w(c6),w(f_),w(f6),w(H_),f&&t(qBe),f&&t(Ci),w(m6),f&&t(NBe),f&&t(ko),w(g6),w(p6),w(J_),w(u6),w(R1),f&&t(jBe),f&&t(yi),w(_6),f&&t(DBe),f&&t(So),w(b6),w(F6),w(P1),w(T6),w(eb),f&&t(GBe),f&&t($i),w(M6),f&&t(OBe),f&&t(Ro),w(E6),w(w6),w(rb),w(A6),w(Yb),f&&t(VBe),f&&t(Ri),w(y6),f&&t(XBe),f&&t(Bo),w(L6),w($6),w(Zb),w(k6),w($2),f&&t(zBe),f&&t(Ii),w(S6),f&&t(QBe),f&&t(Po),w(R6),w(P6),w(S2),w(I6),w(j2),f&&t(WBe),f&&t(ji),w(q6),f&&t(HBe),f&&t(Io),w(N6),w(D6),w(G2),w(G6),w(M5),f&&t(UBe),f&&t(Oi),w(O6),f&&t(JBe),f&&t(qo),w(V6),w(z6),w(C5),w(Q6),w(f3),f&&t(YBe),f&&t(zi),w(W6),f&&t(KBe),f&&t(No),w(H6),w(J6),w(g3),w(Y6),w(u3),f&&t(ZBe),f&&t(Hi),w(K6),f&&t(ePe),f&&t(jo),w(Z6),w(oy),w(b3),w(ry),w(k3),f&&t(oPe),f&&t(Yi),w(ty),f&&t(rPe),f&&t(Do),w(ay),w(sy),w(R3),w(ly),w(I3),f&&t(tPe),f&&t(ed),w(iy),f&&t(aPe),f&&t(Go),w(dy),w(fy),w(N3),w(my),w(H3),f&&t(nPe),f&&t(td),w(gy),f&&t(sPe),f&&t(Oo),w(hy),w(uy),w(J3),w(_y),w(rv),f&&t(lPe),f&&t(sd),w(by),f&&t(iPe),f&&t(Vo),w(vy),w(Ty),w(av),w(My),w(hv),f&&t(dPe),f&&t(dd),w(Ey),f&&t(cPe),f&&t(Xo),w(Cy),w(Ay),w(uv),w(yy),w(Fv),f&&t(fPe),f&&t(md),w(xy),f&&t(mPe),f&&t(zo),w($y),w(Sy),w(Mv),w(Ry),w(Lv),f&&t(gPe),f&&t(pd),w(By),f&&t(hPe),f&&t(Qo),w(Py),w(qy),w($v),w(Ny),w(Pv),f&&t(pPe),f&&t(vd),w(jy),f&&t(uPe),f&&t(Wo),w(Dy),w(Oy),w(qv),w(Vy),w(Gv),f&&t(_Pe),f&&t(Md),w(zy),f&&t(bPe),f&&t(Ho),w(Qy),w(Hy),w(Vv),w(Uy),w(Qv),f&&t(vPe),f&&t(wd),w(Jy),f&&t(FPe),f&&t(Uo),w(Yy),w(Zy),w(Hv),w(eL),w(eF),f&&t(TPe),f&&t(Ld),w(oL),f&&t(MPe),f&&t(Jo),w(rL),w(aL),w(rF),w(nL),w(nF),f&&t(EPe),f&&t(kd),w(sL),f&&t(CPe),f&&t(Yo),w(lL),w(dL),w(lF),w(cL),w(KF),f&&t(wPe),f&&t(Bd),w(fL),f&&t(APe),f&&t(Ko),w(mL),w(hL),w(eT),w(pL),w(CT),f&&t(yPe),f&&t(qd),w(uL),f&&t(LPe),f&&t(Zo),w(_L),w(vL),w(AT),w(FL),w(jT),f&&t(xPe),f&&t(Dd),w(TL),f&&t($Pe),f&&t(er),w(ML),w(CL),w(GT),w(wL),w(zT),f&&t(kPe),f&&t(Xd),w(AL),f&&t(SPe),f&&t(or),w(yL),w(xL),w(WT),w($L),w(h7),f&&t(RPe),f&&t(Wd),w(kL),f&&t(BPe),f&&t(rr),w(SL),w(BL),w(u7),w(PL),w(y7),f&&t(PPe),f&&t(Jd),w(IL),f&&t(IPe),f&&t(tr),w(qL),w(jL),w(x7),w(DL),w(rM),f&&t(qPe),f&&t(Zd),w(GL),f&&t(NPe),f&&t(ar),w(OL),w(XL),w(aM),w(zL),w(MM),f&&t(jPe),f&&t(rc),w(QL),f&&t(DPe),f&&t(nr),w(WL),w(UL),w(CM),w(JL),w(AM),f&&t(GPe),f&&t(nc),w(YL),f&&t(OPe),f&&t(sr),w(KL),w(e8),w(LM),w(o8),w(UM),f&&t(VPe),f&&t(ic),w(r8),f&&t(XPe),f&&t(lr),w(t8),w(n8),w(YM),w(s8),w(b4),f&&t(zPe),f&&t(fc),w(l8),f&&t(QPe),f&&t(ir),w(i8),w(c8),w(F4),w(f8),w(M4),f&&t(WPe),f&&t(hc),w(m8),f&&t(HPe),f&&t(dr),w(g8),w(p8),w(C4),w(u8),w(A4),f&&t(UPe),f&&t(_c),w(_8),f&&t(JPe),f&&t(cr),w(b8),w(F8),w(L4),w(T8),w(eE),f&&t(YPe),f&&t(Fc),w(M8),f&&t(KPe),f&&t(fr),w(E8),w(w8),w(rE),w(A8),w(mE),f&&t(ZPe),f&&t(Ec),w(y8),f&&t(eIe),f&&t(mr),w(L8),w($8),w(hE),w(k8),w(yE),f&&t(oIe),f&&t(Ac),w(S8),f&&t(rIe),f&&t(gr),w(R8),w(P8),w(xE),w(I8),w(DE),f&&t(tIe),f&&t(xc),w(q8),f&&t(aIe),f&&t(hr),w(N8),w(D8),w(OE),w(G8),w(KE),f&&t(nIe),f&&t(Sc),w(O8),f&&t(sIe),f&&t(pr),w(V8),w(z8),w(eC),w(Q8),w(fC),f&&t(lIe),f&&t(Pc),w(W8),f&&t(iIe),f&&t(ur),w(H8),w(J8),w(gC),w(Y8),w(CC),f&&t(dIe),f&&t(Nc),w(K8),f&&t(cIe),f&&t(_r),w(Z8),w(ox),w(AC),w(rx),w(PC),f&&t(fIe),f&&t(Gc),w(tx),f&&t(mIe),f&&t(br),w(ax),w(sx),w(qC),w(lx),w(QC),f&&t(gIe),f&&t(Xc),w(ix),f&&t(hIe),f&&t(vr),w(dx),w(fx),w(HC),w(mx),w(JC),f&&t(pIe),f&&t(Wc),w(gx),f&&t(uIe),f&&t(Fr),w(hx),w(ux),w(KC),w(_x),w(ow),f&&t(_Ie),f&&t(Jc),w(vx),f&&t(bIe),f&&t(Tr),w(Fx),w(Mx),w(tw),w(Ex),w(nw)}}}const _At={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function bAt(L){return FCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wAt extends uCt{constructor(g){super();_Ct(this,g,bAt,uAt,bCt,{})}}export{wAt as default,_At as metadata};
