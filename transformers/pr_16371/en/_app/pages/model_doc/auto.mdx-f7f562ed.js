import{S as L4t,i as x4t,s as k4t,e as a,k as l,w as f,t as o,M as S4t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as R4t}from"../../chunks/vendor-6b77c823.js";import{T as uRr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function B4t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,gC,Nf,xe,co,ji,Gn,hC,On,Vn,pC,Di,Xn,_C,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),gC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),hC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),pC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),_C=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var n9=s(de);Ce=r(n9,"NewModelConfig"),n9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var s9=s(Ii);qf=r(s9,"model_type"),s9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var l9=s(qi);Ni=r(l9,'"new-model"'),l9.forEach(t),gC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),hC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var i9=s(On);Vn=r(i9,"PreTrainedModel"),i9.forEach(t),pC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),_C=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var d9=s(Gi);jf=r(d9,"NewModelConfig"),d9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,gC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,hC),e(xe,On),e(On,Vn),e(xe,pC),e(xe,Di),e(Di,Xn),e(xe,_C),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function P4t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function $4t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function I4t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,gC,Nf,xe,co,ji,Gn,hC,On,Vn,pC,Di,Xn,_C,Gi,jf,Da,fo,_e,n9,Oi,s9,l9,zo,Ga,i9,Df,d9,O$e,xSe,Vi,Gf,$J,uC,V$e,IJ,X$e,kSe,zn,z$e,qJ,Q$e,W$e,NJ,H$e,U$e,SSe,bC,RSe,c9,J$e,BSe,Of,PSe,Xi,Vf,jJ,FC,Y$e,DJ,K$e,$Se,Qo,vC,Z$e,TC,eIe,f9,oIe,rIe,tIe,MC,aIe,GJ,nIe,sIe,lIe,mo,EC,iIe,OJ,dIe,cIe,zi,fIe,VJ,mIe,gIe,XJ,hIe,pIe,_Ie,F,Xf,zJ,uIe,bIe,m9,FIe,vIe,TIe,zf,QJ,MIe,EIe,g9,CIe,wIe,AIe,Qf,WJ,yIe,LIe,h9,xIe,kIe,SIe,Wf,HJ,RIe,BIe,p9,PIe,$Ie,IIe,Hf,UJ,qIe,NIe,_9,jIe,DIe,GIe,Uf,JJ,OIe,VIe,u9,XIe,zIe,QIe,Jf,YJ,WIe,HIe,b9,UIe,JIe,YIe,Yf,KJ,KIe,ZIe,F9,eqe,oqe,rqe,Kf,ZJ,tqe,aqe,v9,nqe,sqe,lqe,Zf,eY,iqe,dqe,T9,cqe,fqe,mqe,em,oY,gqe,hqe,M9,pqe,_qe,uqe,om,rY,bqe,Fqe,E9,vqe,Tqe,Mqe,rm,tY,Eqe,Cqe,C9,wqe,Aqe,yqe,tm,aY,Lqe,xqe,w9,kqe,Sqe,Rqe,am,nY,Bqe,Pqe,A9,$qe,Iqe,qqe,nm,sY,Nqe,jqe,y9,Dqe,Gqe,Oqe,sm,lY,Vqe,Xqe,L9,zqe,Qqe,Wqe,lm,iY,Hqe,Uqe,x9,Jqe,Yqe,Kqe,im,dY,Zqe,eNe,k9,oNe,rNe,tNe,dm,cY,aNe,nNe,S9,sNe,lNe,iNe,cm,fY,dNe,cNe,R9,fNe,mNe,gNe,fm,mY,hNe,pNe,B9,_Ne,uNe,bNe,mm,gY,FNe,vNe,P9,TNe,MNe,ENe,gm,hY,CNe,wNe,$9,ANe,yNe,LNe,hm,pY,xNe,kNe,I9,SNe,RNe,BNe,pm,_Y,PNe,$Ne,q9,INe,qNe,NNe,_m,uY,jNe,DNe,N9,GNe,ONe,VNe,um,bY,XNe,zNe,j9,QNe,WNe,HNe,bm,FY,UNe,JNe,D9,YNe,KNe,ZNe,Fm,vY,eje,oje,G9,rje,tje,aje,vm,TY,nje,sje,O9,lje,ije,dje,Tm,MY,cje,fje,V9,mje,gje,hje,Mm,EY,pje,_je,X9,uje,bje,Fje,Em,CY,vje,Tje,z9,Mje,Eje,Cje,Cm,wY,wje,Aje,Q9,yje,Lje,xje,wm,AY,kje,Sje,W9,Rje,Bje,Pje,Am,yY,$je,Ije,H9,qje,Nje,jje,ym,LY,Dje,Gje,U9,Oje,Vje,Xje,Lm,xY,zje,Qje,J9,Wje,Hje,Uje,xm,kY,Jje,Yje,Y9,Kje,Zje,eDe,km,SY,oDe,rDe,K9,tDe,aDe,nDe,Sm,RY,sDe,lDe,Z9,iDe,dDe,cDe,Rm,BY,fDe,mDe,ex,gDe,hDe,pDe,Bm,PY,_De,uDe,ox,bDe,FDe,vDe,Pm,$Y,TDe,MDe,rx,EDe,CDe,wDe,$m,IY,ADe,yDe,tx,LDe,xDe,kDe,Im,qY,SDe,RDe,ax,BDe,PDe,$De,qm,NY,IDe,qDe,nx,NDe,jDe,DDe,Nm,jY,GDe,ODe,sx,VDe,XDe,zDe,jm,DY,QDe,WDe,lx,HDe,UDe,JDe,Dm,GY,YDe,KDe,ix,ZDe,eGe,oGe,Gm,OY,rGe,tGe,dx,aGe,nGe,sGe,Om,VY,lGe,iGe,cx,dGe,cGe,fGe,Vm,XY,mGe,gGe,fx,hGe,pGe,_Ge,Xm,zY,uGe,bGe,mx,FGe,vGe,TGe,zm,QY,MGe,EGe,gx,CGe,wGe,AGe,Qm,WY,yGe,LGe,hx,xGe,kGe,SGe,Wm,HY,RGe,BGe,px,PGe,$Ge,IGe,Hm,UY,qGe,NGe,_x,jGe,DGe,GGe,Um,JY,OGe,VGe,ux,XGe,zGe,QGe,Jm,YY,WGe,HGe,bx,UGe,JGe,YGe,Ym,KY,KGe,ZGe,Fx,eOe,oOe,rOe,Km,ZY,tOe,aOe,vx,nOe,sOe,lOe,Zm,eK,iOe,dOe,Tx,cOe,fOe,mOe,eg,oK,gOe,hOe,Mx,pOe,_Oe,uOe,og,rK,bOe,FOe,Ex,vOe,TOe,MOe,rg,tK,EOe,COe,Cx,wOe,AOe,yOe,tg,aK,LOe,xOe,wx,kOe,SOe,ROe,ag,nK,BOe,POe,Ax,$Oe,IOe,qOe,ng,sK,NOe,jOe,yx,DOe,GOe,OOe,sg,lK,VOe,XOe,Lx,zOe,QOe,WOe,lg,iK,HOe,UOe,xx,JOe,YOe,KOe,ig,dK,ZOe,eVe,kx,oVe,rVe,tVe,dg,cK,aVe,nVe,Sx,sVe,lVe,iVe,cg,fK,dVe,cVe,Rx,fVe,mVe,gVe,fg,mK,hVe,pVe,Bx,_Ve,uVe,bVe,mg,gK,FVe,vVe,Px,TVe,MVe,EVe,gg,hK,CVe,wVe,$x,AVe,yVe,LVe,hg,pK,xVe,kVe,Ix,SVe,RVe,BVe,pg,_K,PVe,$Ve,qx,IVe,qVe,NVe,_g,uK,jVe,DVe,Nx,GVe,OVe,VVe,ug,bK,XVe,zVe,jx,QVe,WVe,HVe,bg,FK,UVe,JVe,Dx,YVe,KVe,ZVe,Fg,vK,eXe,oXe,Gx,rXe,tXe,aXe,vg,TK,nXe,sXe,Ox,lXe,iXe,dXe,Tg,MK,cXe,fXe,Vx,mXe,gXe,hXe,Mg,EK,pXe,_Xe,Xx,uXe,bXe,FXe,Eg,CK,vXe,TXe,zx,MXe,EXe,CXe,Cg,wK,wXe,AXe,Qx,yXe,LXe,xXe,wg,AK,kXe,SXe,Wx,RXe,BXe,PXe,Ag,yK,$Xe,IXe,Hx,qXe,NXe,jXe,yg,LK,DXe,GXe,Ux,OXe,VXe,XXe,Lg,xK,zXe,QXe,Jx,WXe,HXe,UXe,xg,kK,JXe,YXe,Yx,KXe,ZXe,eze,kg,SK,oze,rze,Kx,tze,aze,nze,Sg,RK,sze,lze,Zx,ize,dze,cze,Rg,BK,fze,mze,ek,gze,hze,pze,Bg,PK,_ze,uze,ok,bze,Fze,vze,Pg,$K,Tze,Mze,rk,Eze,Cze,wze,IK,Aze,yze,CC,Lze,$g,wC,xze,qK,kze,ISe,Qi,Ig,NK,AC,Sze,jK,Rze,qSe,Wo,yC,Bze,LC,Pze,tk,$ze,Ize,qze,xC,Nze,DK,jze,Dze,Gze,go,kC,Oze,GK,Vze,Xze,Oa,zze,OK,Qze,Wze,VK,Hze,Uze,XK,Jze,Yze,Kze,C,Qn,zK,Zze,eQe,ak,oQe,rQe,nk,tQe,aQe,nQe,Wn,QK,sQe,lQe,sk,iQe,dQe,lk,cQe,fQe,mQe,Hn,WK,gQe,hQe,ik,pQe,_Qe,dk,uQe,bQe,FQe,qg,HK,vQe,TQe,ck,MQe,EQe,CQe,Un,UK,wQe,AQe,fk,yQe,LQe,mk,xQe,kQe,SQe,Ng,JK,RQe,BQe,gk,PQe,$Qe,IQe,jg,YK,qQe,NQe,hk,jQe,DQe,GQe,Dg,KK,OQe,VQe,pk,XQe,zQe,QQe,Jn,ZK,WQe,HQe,_k,UQe,JQe,uk,YQe,KQe,ZQe,Yn,eZ,eWe,oWe,bk,rWe,tWe,Fk,aWe,nWe,sWe,Kn,oZ,lWe,iWe,vk,dWe,cWe,Tk,fWe,mWe,gWe,Gg,rZ,hWe,pWe,Mk,_We,uWe,bWe,Og,tZ,FWe,vWe,Ek,TWe,MWe,EWe,Zn,aZ,CWe,wWe,Ck,AWe,yWe,wk,LWe,xWe,kWe,Vg,nZ,SWe,RWe,Ak,BWe,PWe,$We,es,sZ,IWe,qWe,yk,NWe,jWe,Lk,DWe,GWe,OWe,os,lZ,VWe,XWe,xk,zWe,QWe,kk,WWe,HWe,UWe,rs,iZ,JWe,YWe,Sk,KWe,ZWe,dZ,eHe,oHe,rHe,Xg,cZ,tHe,aHe,Rk,nHe,sHe,lHe,ts,fZ,iHe,dHe,Bk,cHe,fHe,Pk,mHe,gHe,hHe,zg,mZ,pHe,_He,$k,uHe,bHe,FHe,as,gZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,ns,hZ,yHe,LHe,Nk,xHe,kHe,jk,SHe,RHe,BHe,ss,pZ,PHe,$He,Dk,IHe,qHe,Gk,NHe,jHe,DHe,Qg,_Z,GHe,OHe,Ok,VHe,XHe,zHe,ls,uZ,QHe,WHe,Vk,HHe,UHe,Xk,JHe,YHe,KHe,Wg,bZ,ZHe,eUe,zk,oUe,rUe,tUe,is,FZ,aUe,nUe,Qk,sUe,lUe,Wk,iUe,dUe,cUe,ds,vZ,fUe,mUe,Hk,gUe,hUe,Uk,pUe,_Ue,uUe,cs,TZ,bUe,FUe,Jk,vUe,TUe,Yk,MUe,EUe,CUe,fs,MZ,wUe,AUe,Kk,yUe,LUe,Zk,xUe,kUe,SUe,Hg,EZ,RUe,BUe,eS,PUe,$Ue,IUe,ms,CZ,qUe,NUe,oS,jUe,DUe,rS,GUe,OUe,VUe,gs,wZ,XUe,zUe,tS,QUe,WUe,aS,HUe,UUe,JUe,hs,AZ,YUe,KUe,nS,ZUe,eJe,sS,oJe,rJe,tJe,ps,yZ,aJe,nJe,lS,sJe,lJe,iS,iJe,dJe,cJe,_s,LZ,fJe,mJe,dS,gJe,hJe,cS,pJe,_Je,uJe,us,xZ,bJe,FJe,fS,vJe,TJe,mS,MJe,EJe,CJe,Ug,kZ,wJe,AJe,gS,yJe,LJe,xJe,bs,SZ,kJe,SJe,hS,RJe,BJe,pS,PJe,$Je,IJe,Jg,RZ,qJe,NJe,_S,jJe,DJe,GJe,Yg,BZ,OJe,VJe,uS,XJe,zJe,QJe,Fs,PZ,WJe,HJe,bS,UJe,JJe,FS,YJe,KJe,ZJe,vs,$Z,eYe,oYe,vS,rYe,tYe,TS,aYe,nYe,sYe,Kg,IZ,lYe,iYe,MS,dYe,cYe,fYe,Ts,qZ,mYe,gYe,ES,hYe,pYe,CS,_Ye,uYe,bYe,Ms,NZ,FYe,vYe,wS,TYe,MYe,AS,EYe,CYe,wYe,Es,jZ,AYe,yYe,yS,LYe,xYe,LS,kYe,SYe,RYe,Cs,DZ,BYe,PYe,xS,$Ye,IYe,kS,qYe,NYe,jYe,ws,GZ,DYe,GYe,SS,OYe,VYe,RS,XYe,zYe,QYe,Zg,OZ,WYe,HYe,BS,UYe,JYe,YYe,eh,VZ,KYe,ZYe,PS,eKe,oKe,rKe,oh,XZ,tKe,aKe,$S,nKe,sKe,lKe,rh,zZ,iKe,dKe,IS,cKe,fKe,mKe,As,QZ,gKe,hKe,qS,pKe,_Ke,NS,uKe,bKe,FKe,th,WZ,vKe,TKe,jS,MKe,EKe,CKe,ys,HZ,wKe,AKe,DS,yKe,LKe,GS,xKe,kKe,SKe,Ls,UZ,RKe,BKe,OS,PKe,$Ke,VS,IKe,qKe,NKe,xs,JZ,jKe,DKe,XS,GKe,OKe,zS,VKe,XKe,zKe,ks,YZ,QKe,WKe,QS,HKe,UKe,WS,JKe,YKe,KKe,Ss,KZ,ZKe,eZe,HS,oZe,rZe,US,tZe,aZe,nZe,Rs,ZZ,sZe,lZe,JS,iZe,dZe,YS,cZe,fZe,mZe,ah,eee,gZe,hZe,KS,pZe,_Ze,uZe,nh,oee,bZe,FZe,ZS,vZe,TZe,MZe,Bs,ree,EZe,CZe,eR,wZe,AZe,oR,yZe,LZe,xZe,Ps,tee,kZe,SZe,rR,RZe,BZe,tR,PZe,$Ze,IZe,$s,aee,qZe,NZe,aR,jZe,DZe,nR,GZe,OZe,VZe,sh,nee,XZe,zZe,sR,QZe,WZe,HZe,lh,see,UZe,JZe,lR,YZe,KZe,ZZe,ih,lee,eeo,oeo,iR,reo,teo,aeo,dh,iee,neo,seo,dR,leo,ieo,deo,Is,dee,ceo,feo,cR,meo,geo,fR,heo,peo,_eo,ch,cee,ueo,beo,mR,Feo,veo,Teo,fh,fee,Meo,Eeo,gR,Ceo,weo,Aeo,qs,mee,yeo,Leo,hR,xeo,keo,pR,Seo,Reo,Beo,Ns,gee,Peo,$eo,_R,Ieo,qeo,uR,Neo,jeo,Deo,hee,Geo,Oeo,SC,Veo,mh,RC,Xeo,pee,zeo,NSe,Wi,gh,_ee,BC,Qeo,uee,Weo,jSe,Ho,PC,Heo,$C,Ueo,bR,Jeo,Yeo,Keo,IC,Zeo,bee,eoo,ooo,roo,$e,qC,too,Fee,aoo,noo,Va,soo,vee,loo,ioo,Tee,doo,coo,Mee,foo,moo,goo,te,hh,Eee,hoo,poo,FR,_oo,uoo,boo,ph,Cee,Foo,voo,vR,Too,Moo,Eoo,_h,wee,Coo,woo,TR,Aoo,yoo,Loo,uh,Aee,xoo,koo,MR,Soo,Roo,Boo,bh,yee,Poo,$oo,ER,Ioo,qoo,Noo,Fh,Lee,joo,Doo,CR,Goo,Ooo,Voo,vh,xee,Xoo,zoo,wR,Qoo,Woo,Hoo,Th,kee,Uoo,Joo,AR,Yoo,Koo,Zoo,Mh,See,ero,oro,yR,rro,tro,aro,Eh,Ree,nro,sro,LR,lro,iro,dro,Ch,Bee,cro,fro,xR,mro,gro,hro,wh,Pee,pro,_ro,kR,uro,bro,Fro,Ah,$ee,vro,Tro,SR,Mro,Ero,Cro,yh,Iee,wro,Aro,RR,yro,Lro,xro,Lh,qee,kro,Sro,BR,Rro,Bro,Pro,xh,Nee,$ro,Iro,PR,qro,Nro,jro,kh,jee,Dro,Gro,$R,Oro,Vro,Xro,Sh,Dee,zro,Qro,IR,Wro,Hro,Uro,Rh,Jro,Gee,Yro,Kro,NC,Zro,Bh,jC,eto,Oee,oto,DSe,Hi,Ph,Vee,DC,rto,Xee,tto,GSe,Uo,GC,ato,OC,nto,qR,sto,lto,ito,VC,dto,zee,cto,fto,mto,Ie,XC,gto,Qee,hto,pto,Ui,_to,Wee,uto,bto,Hee,Fto,vto,Tto,ke,$h,Uee,Mto,Eto,NR,Cto,wto,Ato,Ih,Jee,yto,Lto,jR,xto,kto,Sto,qh,Yee,Rto,Bto,DR,Pto,$to,Ito,Nh,Kee,qto,Nto,GR,jto,Dto,Gto,jh,Zee,Oto,Vto,OR,Xto,zto,Qto,Dh,eoe,Wto,Hto,VR,Uto,Jto,Yto,Gh,ooe,Kto,Zto,XR,eao,oao,rao,Oh,roe,tao,aao,zR,nao,sao,lao,Vh,iao,toe,dao,cao,zC,fao,Xh,QC,mao,aoe,gao,OSe,Ji,zh,noe,WC,hao,soe,pao,VSe,Jo,HC,_ao,Yi,uao,QR,bao,Fao,WR,vao,Tao,Mao,UC,Eao,loe,Cao,wao,Aao,Xr,JC,yao,ioe,Lao,xao,Ki,kao,doe,Sao,Rao,HR,Bao,Pao,$ao,coe,Iao,qao,YC,Nao,qe,KC,jao,foe,Dao,Gao,Xa,Oao,moe,Vao,Xao,goe,zao,Qao,hoe,Wao,Hao,Uao,T,Qh,poe,Jao,Yao,UR,Kao,Zao,eno,Wh,_oe,ono,rno,JR,tno,ano,nno,Hh,uoe,sno,lno,YR,ino,dno,cno,Uh,boe,fno,mno,KR,gno,hno,pno,Jh,Foe,_no,uno,ZR,bno,Fno,vno,Yh,voe,Tno,Mno,eB,Eno,Cno,wno,Kh,Toe,Ano,yno,oB,Lno,xno,kno,Zh,Moe,Sno,Rno,rB,Bno,Pno,$no,ep,Eoe,Ino,qno,tB,Nno,jno,Dno,op,Coe,Gno,Ono,aB,Vno,Xno,zno,rp,woe,Qno,Wno,nB,Hno,Uno,Jno,tp,Aoe,Yno,Kno,sB,Zno,eso,oso,ap,yoe,rso,tso,lB,aso,nso,sso,np,Loe,lso,iso,iB,dso,cso,fso,sp,xoe,mso,gso,dB,hso,pso,_so,lp,koe,uso,bso,cB,Fso,vso,Tso,ip,Soe,Mso,Eso,fB,Cso,wso,Aso,dp,Roe,yso,Lso,mB,xso,kso,Sso,cp,Boe,Rso,Bso,gB,Pso,$so,Iso,fp,Poe,qso,Nso,hB,jso,Dso,Gso,mp,$oe,Oso,Vso,pB,Xso,zso,Qso,gp,Ioe,Wso,Hso,_B,Uso,Jso,Yso,hp,qoe,Kso,Zso,uB,elo,olo,rlo,pp,Noe,tlo,alo,bB,nlo,slo,llo,_p,joe,ilo,dlo,FB,clo,flo,mlo,up,Doe,glo,hlo,vB,plo,_lo,ulo,bp,Goe,blo,Flo,TB,vlo,Tlo,Mlo,Fp,Ooe,Elo,Clo,MB,wlo,Alo,ylo,vp,Voe,Llo,xlo,EB,klo,Slo,Rlo,js,Xoe,Blo,Plo,CB,$lo,Ilo,wB,qlo,Nlo,jlo,Tp,zoe,Dlo,Glo,AB,Olo,Vlo,Xlo,Mp,Qoe,zlo,Qlo,yB,Wlo,Hlo,Ulo,Ep,Woe,Jlo,Ylo,LB,Klo,Zlo,eio,Cp,Hoe,oio,rio,xB,tio,aio,nio,wp,Uoe,sio,lio,kB,iio,dio,cio,Ap,Joe,fio,mio,SB,gio,hio,pio,yp,Yoe,_io,uio,RB,bio,Fio,vio,Lp,Koe,Tio,Mio,BB,Eio,Cio,wio,xp,Zoe,Aio,yio,PB,Lio,xio,kio,kp,ere,Sio,Rio,$B,Bio,Pio,$io,Sp,ore,Iio,qio,IB,Nio,jio,Dio,Rp,rre,Gio,Oio,qB,Vio,Xio,zio,Bp,tre,Qio,Wio,NB,Hio,Uio,Jio,Pp,are,Yio,Kio,jB,Zio,edo,odo,$p,nre,rdo,tdo,DB,ado,ndo,sdo,Ip,sre,ldo,ido,GB,ddo,cdo,fdo,qp,lre,mdo,gdo,OB,hdo,pdo,_do,Np,ire,udo,bdo,VB,Fdo,vdo,Tdo,jp,dre,Mdo,Edo,XB,Cdo,wdo,Ado,Dp,cre,ydo,Ldo,zB,xdo,kdo,Sdo,Gp,fre,Rdo,Bdo,QB,Pdo,$do,Ido,Op,mre,qdo,Ndo,WB,jdo,Ddo,Gdo,Vp,gre,Odo,Vdo,HB,Xdo,zdo,Qdo,Xp,hre,Wdo,Hdo,UB,Udo,Jdo,Ydo,zp,pre,Kdo,Zdo,JB,eco,oco,rco,Qp,_re,tco,aco,YB,nco,sco,lco,Wp,ure,ico,dco,KB,cco,fco,mco,Hp,bre,gco,hco,ZB,pco,_co,uco,Up,Fre,bco,Fco,eP,vco,Tco,Mco,Jp,vre,Eco,Cco,oP,wco,Aco,yco,Yp,Tre,Lco,xco,rP,kco,Sco,Rco,Kp,Mre,Bco,Pco,tP,$co,Ico,qco,Zp,Ere,Nco,jco,aP,Dco,Gco,Oco,e_,Cre,Vco,Xco,nP,zco,Qco,Wco,o_,wre,Hco,Uco,sP,Jco,Yco,Kco,r_,Are,Zco,efo,lP,ofo,rfo,tfo,t_,yre,afo,nfo,iP,sfo,lfo,ifo,a_,Lre,dfo,cfo,dP,ffo,mfo,gfo,n_,xre,hfo,pfo,cP,_fo,ufo,bfo,s_,kre,Ffo,vfo,fP,Tfo,Mfo,Efo,l_,Sre,Cfo,wfo,mP,Afo,yfo,Lfo,i_,Rre,xfo,kfo,gP,Sfo,Rfo,Bfo,d_,Bre,Pfo,$fo,hP,Ifo,qfo,Nfo,c_,Pre,jfo,Dfo,pP,Gfo,Ofo,Vfo,f_,$re,Xfo,zfo,_P,Qfo,Wfo,Hfo,m_,Ire,Ufo,Jfo,uP,Yfo,Kfo,Zfo,g_,qre,emo,omo,bP,rmo,tmo,amo,h_,Nre,nmo,smo,FP,lmo,imo,dmo,p_,jre,cmo,fmo,vP,mmo,gmo,hmo,__,Dre,pmo,_mo,TP,umo,bmo,Fmo,u_,Gre,vmo,Tmo,MP,Mmo,Emo,Cmo,b_,Ore,wmo,Amo,EP,ymo,Lmo,xmo,F_,Vre,kmo,Smo,CP,Rmo,Bmo,Pmo,v_,Xre,$mo,Imo,wP,qmo,Nmo,jmo,T_,zre,Dmo,Gmo,AP,Omo,Vmo,Xmo,M_,Qre,zmo,Qmo,yP,Wmo,Hmo,Umo,E_,Wre,Jmo,Ymo,LP,Kmo,Zmo,ego,C_,Hre,ogo,rgo,xP,tgo,ago,ngo,w_,Ure,sgo,lgo,kP,igo,dgo,cgo,A_,Jre,fgo,mgo,SP,ggo,hgo,pgo,y_,Yre,_go,ugo,RP,bgo,Fgo,vgo,L_,Kre,Tgo,Mgo,BP,Ego,Cgo,wgo,x_,Ago,Zre,ygo,Lgo,ete,xgo,kgo,ote,Sgo,Rgo,ZC,XSe,Zi,k_,rte,e5,Bgo,tte,Pgo,zSe,Yo,o5,$go,ed,Igo,PP,qgo,Ngo,$P,jgo,Dgo,Ggo,r5,Ogo,ate,Vgo,Xgo,zgo,zr,t5,Qgo,nte,Wgo,Hgo,od,Ugo,ste,Jgo,Ygo,IP,Kgo,Zgo,eho,lte,oho,rho,a5,tho,Ne,n5,aho,ite,nho,sho,za,lho,dte,iho,dho,cte,cho,fho,fte,mho,gho,hho,S,S_,mte,pho,_ho,qP,uho,bho,Fho,R_,gte,vho,Tho,NP,Mho,Eho,Cho,B_,hte,who,Aho,jP,yho,Lho,xho,P_,pte,kho,Sho,DP,Rho,Bho,Pho,$_,_te,$ho,Iho,GP,qho,Nho,jho,I_,ute,Dho,Gho,OP,Oho,Vho,Xho,q_,bte,zho,Qho,VP,Who,Hho,Uho,N_,Fte,Jho,Yho,XP,Kho,Zho,epo,j_,vte,opo,rpo,zP,tpo,apo,npo,D_,Tte,spo,lpo,QP,ipo,dpo,cpo,G_,Mte,fpo,mpo,WP,gpo,hpo,ppo,O_,Ete,_po,upo,HP,bpo,Fpo,vpo,V_,Cte,Tpo,Mpo,UP,Epo,Cpo,wpo,X_,wte,Apo,ypo,JP,Lpo,xpo,kpo,z_,Ate,Spo,Rpo,YP,Bpo,Ppo,$po,Q_,yte,Ipo,qpo,KP,Npo,jpo,Dpo,W_,Lte,Gpo,Opo,ZP,Vpo,Xpo,zpo,H_,xte,Qpo,Wpo,e$,Hpo,Upo,Jpo,U_,kte,Ypo,Kpo,o$,Zpo,e_o,o_o,J_,Ste,r_o,t_o,r$,a_o,n_o,s_o,Y_,Rte,l_o,i_o,t$,d_o,c_o,f_o,K_,Bte,m_o,g_o,a$,h_o,p_o,__o,Z_,Pte,u_o,b_o,n$,F_o,v_o,T_o,eu,$te,M_o,E_o,s$,C_o,w_o,A_o,ou,Ite,y_o,L_o,l$,x_o,k_o,S_o,ru,qte,R_o,B_o,i$,P_o,$_o,I_o,tu,Nte,q_o,N_o,d$,j_o,D_o,G_o,au,jte,O_o,V_o,c$,X_o,z_o,Q_o,nu,Dte,W_o,H_o,f$,U_o,J_o,Y_o,su,Gte,K_o,Z_o,m$,euo,ouo,ruo,lu,Ote,tuo,auo,g$,nuo,suo,luo,iu,Vte,iuo,duo,h$,cuo,fuo,muo,du,Xte,guo,huo,p$,puo,_uo,uuo,cu,zte,buo,Fuo,_$,vuo,Tuo,Muo,fu,Qte,Euo,Cuo,u$,wuo,Auo,yuo,mu,Wte,Luo,xuo,b$,kuo,Suo,Ruo,gu,Hte,Buo,Puo,F$,$uo,Iuo,quo,hu,Ute,Nuo,juo,v$,Duo,Guo,Ouo,pu,Jte,Vuo,Xuo,T$,zuo,Quo,Wuo,_u,Huo,Yte,Uuo,Juo,Kte,Yuo,Kuo,Zte,Zuo,e1o,s5,QSe,rd,uu,eae,l5,o1o,oae,r1o,WSe,Ko,i5,t1o,td,a1o,M$,n1o,s1o,E$,l1o,i1o,d1o,d5,c1o,rae,f1o,m1o,g1o,Qr,c5,h1o,tae,p1o,_1o,ad,u1o,aae,b1o,F1o,C$,v1o,T1o,M1o,nae,E1o,C1o,f5,w1o,je,m5,A1o,sae,y1o,L1o,Qa,x1o,lae,k1o,S1o,iae,R1o,B1o,dae,P1o,$1o,I1o,$,bu,cae,q1o,N1o,w$,j1o,D1o,G1o,Fu,fae,O1o,V1o,A$,X1o,z1o,Q1o,vu,mae,W1o,H1o,y$,U1o,J1o,Y1o,Tu,gae,K1o,Z1o,L$,ebo,obo,rbo,Mu,hae,tbo,abo,x$,nbo,sbo,lbo,Eu,pae,ibo,dbo,k$,cbo,fbo,mbo,Cu,_ae,gbo,hbo,S$,pbo,_bo,ubo,wu,uae,bbo,Fbo,R$,vbo,Tbo,Mbo,Au,bae,Ebo,Cbo,B$,wbo,Abo,ybo,yu,Fae,Lbo,xbo,P$,kbo,Sbo,Rbo,Lu,vae,Bbo,Pbo,$$,$bo,Ibo,qbo,xu,Tae,Nbo,jbo,I$,Dbo,Gbo,Obo,ku,Mae,Vbo,Xbo,q$,zbo,Qbo,Wbo,Su,Eae,Hbo,Ubo,N$,Jbo,Ybo,Kbo,Ru,Cae,Zbo,e3o,j$,o3o,r3o,t3o,Bu,wae,a3o,n3o,D$,s3o,l3o,i3o,Pu,Aae,d3o,c3o,G$,f3o,m3o,g3o,$u,yae,h3o,p3o,O$,_3o,u3o,b3o,Iu,Lae,F3o,v3o,V$,T3o,M3o,E3o,qu,xae,C3o,w3o,X$,A3o,y3o,L3o,Nu,kae,x3o,k3o,z$,S3o,R3o,B3o,ju,Sae,P3o,$3o,Q$,I3o,q3o,N3o,Du,Rae,j3o,D3o,W$,G3o,O3o,V3o,Gu,Bae,X3o,z3o,H$,Q3o,W3o,H3o,Ou,Pae,U3o,J3o,U$,Y3o,K3o,Z3o,Vu,$ae,e2o,o2o,J$,r2o,t2o,a2o,Xu,Iae,n2o,s2o,Y$,l2o,i2o,d2o,zu,qae,c2o,f2o,K$,m2o,g2o,h2o,Qu,Nae,p2o,_2o,Z$,u2o,b2o,F2o,Wu,jae,v2o,T2o,eI,M2o,E2o,C2o,Hu,Dae,w2o,A2o,oI,y2o,L2o,x2o,Uu,Gae,k2o,S2o,rI,R2o,B2o,P2o,Ju,Oae,$2o,I2o,tI,q2o,N2o,j2o,Yu,Vae,D2o,G2o,aI,O2o,V2o,X2o,Ku,Xae,z2o,Q2o,nI,W2o,H2o,U2o,Zu,J2o,zae,Y2o,K2o,Qae,Z2o,eFo,Wae,oFo,rFo,g5,HSe,nd,e1,Hae,h5,tFo,Uae,aFo,USe,Zo,p5,nFo,sd,sFo,sI,lFo,iFo,lI,dFo,cFo,fFo,_5,mFo,Jae,gFo,hFo,pFo,Wr,u5,_Fo,Yae,uFo,bFo,ld,FFo,Kae,vFo,TFo,iI,MFo,EFo,CFo,Zae,wFo,AFo,b5,yFo,De,F5,LFo,ene,xFo,kFo,Wa,SFo,one,RFo,BFo,rne,PFo,$Fo,tne,IFo,qFo,NFo,I,o1,ane,jFo,DFo,dI,GFo,OFo,VFo,r1,nne,XFo,zFo,cI,QFo,WFo,HFo,t1,sne,UFo,JFo,fI,YFo,KFo,ZFo,a1,lne,evo,ovo,mI,rvo,tvo,avo,n1,ine,nvo,svo,gI,lvo,ivo,dvo,s1,dne,cvo,fvo,hI,mvo,gvo,hvo,l1,cne,pvo,_vo,pI,uvo,bvo,Fvo,i1,fne,vvo,Tvo,_I,Mvo,Evo,Cvo,d1,mne,wvo,Avo,uI,yvo,Lvo,xvo,c1,gne,kvo,Svo,bI,Rvo,Bvo,Pvo,f1,hne,$vo,Ivo,FI,qvo,Nvo,jvo,m1,pne,Dvo,Gvo,vI,Ovo,Vvo,Xvo,g1,_ne,zvo,Qvo,TI,Wvo,Hvo,Uvo,h1,une,Jvo,Yvo,MI,Kvo,Zvo,e6o,p1,bne,o6o,r6o,EI,t6o,a6o,n6o,_1,Fne,s6o,l6o,CI,i6o,d6o,c6o,u1,vne,f6o,m6o,wI,g6o,h6o,p6o,b1,Tne,_6o,u6o,AI,b6o,F6o,v6o,F1,Mne,T6o,M6o,yI,E6o,C6o,w6o,v1,Ene,A6o,y6o,LI,L6o,x6o,k6o,T1,Cne,S6o,R6o,xI,B6o,P6o,$6o,M1,wne,I6o,q6o,kI,N6o,j6o,D6o,E1,Ane,G6o,O6o,SI,V6o,X6o,z6o,C1,yne,Q6o,W6o,RI,H6o,U6o,J6o,w1,Lne,Y6o,K6o,BI,Z6o,eTo,oTo,A1,xne,rTo,tTo,PI,aTo,nTo,sTo,y1,kne,lTo,iTo,$I,dTo,cTo,fTo,L1,Sne,mTo,gTo,II,hTo,pTo,_To,x1,Rne,uTo,bTo,qI,FTo,vTo,TTo,k1,Bne,MTo,ETo,NI,CTo,wTo,ATo,S1,Pne,yTo,LTo,$ne,xTo,kTo,STo,R1,Ine,RTo,BTo,jI,PTo,$To,ITo,B1,qne,qTo,NTo,DI,jTo,DTo,GTo,P1,Nne,OTo,VTo,GI,XTo,zTo,QTo,$1,jne,WTo,HTo,OI,UTo,JTo,YTo,I1,KTo,Dne,ZTo,e7o,Gne,o7o,r7o,One,t7o,a7o,v5,JSe,id,q1,Vne,T5,n7o,Xne,s7o,YSe,er,M5,l7o,dd,i7o,VI,d7o,c7o,XI,f7o,m7o,g7o,E5,h7o,zne,p7o,_7o,u7o,Hr,C5,b7o,Qne,F7o,v7o,cd,T7o,Wne,M7o,E7o,zI,C7o,w7o,A7o,Hne,y7o,L7o,w5,x7o,Ge,A5,k7o,Une,S7o,R7o,Ha,B7o,Jne,P7o,$7o,Yne,I7o,q7o,Kne,N7o,j7o,D7o,se,N1,Zne,G7o,O7o,QI,V7o,X7o,z7o,j1,ese,Q7o,W7o,WI,H7o,U7o,J7o,D1,ose,Y7o,K7o,HI,Z7o,eMo,oMo,G1,rse,rMo,tMo,UI,aMo,nMo,sMo,O1,tse,lMo,iMo,JI,dMo,cMo,fMo,V1,ase,mMo,gMo,YI,hMo,pMo,_Mo,X1,nse,uMo,bMo,KI,FMo,vMo,TMo,z1,sse,MMo,EMo,ZI,CMo,wMo,AMo,Q1,lse,yMo,LMo,eq,xMo,kMo,SMo,W1,ise,RMo,BMo,oq,PMo,$Mo,IMo,H1,dse,qMo,NMo,rq,jMo,DMo,GMo,U1,cse,OMo,VMo,tq,XMo,zMo,QMo,J1,fse,WMo,HMo,aq,UMo,JMo,YMo,Y1,mse,KMo,ZMo,nq,e4o,o4o,r4o,K1,gse,t4o,a4o,sq,n4o,s4o,l4o,Z1,hse,i4o,d4o,lq,c4o,f4o,m4o,eb,g4o,pse,h4o,p4o,_se,_4o,u4o,use,b4o,F4o,y5,KSe,fd,ob,bse,L5,v4o,Fse,T4o,ZSe,or,x5,M4o,md,E4o,iq,C4o,w4o,dq,A4o,y4o,L4o,k5,x4o,vse,k4o,S4o,R4o,Ur,S5,B4o,Tse,P4o,$4o,gd,I4o,Mse,q4o,N4o,cq,j4o,D4o,G4o,Ese,O4o,V4o,R5,X4o,Oe,B5,z4o,Cse,Q4o,W4o,Ua,H4o,wse,U4o,J4o,Ase,Y4o,K4o,yse,Z4o,eEo,oEo,y,rb,Lse,rEo,tEo,fq,aEo,nEo,sEo,tb,xse,lEo,iEo,mq,dEo,cEo,fEo,ab,kse,mEo,gEo,gq,hEo,pEo,_Eo,nb,Sse,uEo,bEo,hq,FEo,vEo,TEo,sb,Rse,MEo,EEo,pq,CEo,wEo,AEo,lb,Bse,yEo,LEo,_q,xEo,kEo,SEo,ib,Pse,REo,BEo,uq,PEo,$Eo,IEo,db,$se,qEo,NEo,bq,jEo,DEo,GEo,cb,Ise,OEo,VEo,Fq,XEo,zEo,QEo,fb,qse,WEo,HEo,vq,UEo,JEo,YEo,mb,Nse,KEo,ZEo,Tq,eCo,oCo,rCo,gb,jse,tCo,aCo,Mq,nCo,sCo,lCo,hb,Dse,iCo,dCo,Eq,cCo,fCo,mCo,pb,Gse,gCo,hCo,Cq,pCo,_Co,uCo,_b,Ose,bCo,FCo,wq,vCo,TCo,MCo,ub,Vse,ECo,CCo,Aq,wCo,ACo,yCo,bb,Xse,LCo,xCo,yq,kCo,SCo,RCo,Fb,zse,BCo,PCo,Lq,$Co,ICo,qCo,vb,Qse,NCo,jCo,xq,DCo,GCo,OCo,Tb,Wse,VCo,XCo,kq,zCo,QCo,WCo,Mb,Hse,HCo,UCo,Sq,JCo,YCo,KCo,Eb,Use,ZCo,e5o,Rq,o5o,r5o,t5o,Cb,Jse,a5o,n5o,Bq,s5o,l5o,i5o,wb,Yse,d5o,c5o,Pq,f5o,m5o,g5o,Ab,Kse,h5o,p5o,$q,_5o,u5o,b5o,yb,Zse,F5o,v5o,Iq,T5o,M5o,E5o,Lb,ele,C5o,w5o,qq,A5o,y5o,L5o,xb,ole,x5o,k5o,Nq,S5o,R5o,B5o,kb,rle,P5o,$5o,jq,I5o,q5o,N5o,Sb,tle,j5o,D5o,Dq,G5o,O5o,V5o,Rb,ale,X5o,z5o,Gq,Q5o,W5o,H5o,Bb,nle,U5o,J5o,Oq,Y5o,K5o,Z5o,Pb,sle,ewo,owo,Vq,rwo,two,awo,$b,lle,nwo,swo,Xq,lwo,iwo,dwo,Ib,ile,cwo,fwo,zq,mwo,gwo,hwo,qb,dle,pwo,_wo,Qq,uwo,bwo,Fwo,Nb,cle,vwo,Two,Wq,Mwo,Ewo,Cwo,jb,fle,wwo,Awo,Hq,ywo,Lwo,xwo,Db,mle,kwo,Swo,Uq,Rwo,Bwo,Pwo,Gb,gle,$wo,Iwo,Jq,qwo,Nwo,jwo,Ob,hle,Dwo,Gwo,Yq,Owo,Vwo,Xwo,Vb,ple,zwo,Qwo,Kq,Wwo,Hwo,Uwo,Xb,_le,Jwo,Ywo,Zq,Kwo,Zwo,eAo,zb,ule,oAo,rAo,eN,tAo,aAo,nAo,Qb,ble,sAo,lAo,oN,iAo,dAo,cAo,Wb,Fle,fAo,mAo,rN,gAo,hAo,pAo,Hb,_Ao,vle,uAo,bAo,Tle,FAo,vAo,Mle,TAo,MAo,P5,eRe,hd,Ub,Ele,$5,EAo,Cle,CAo,oRe,rr,I5,wAo,pd,AAo,tN,yAo,LAo,aN,xAo,kAo,SAo,q5,RAo,wle,BAo,PAo,$Ao,Jr,N5,IAo,Ale,qAo,NAo,_d,jAo,yle,DAo,GAo,nN,OAo,VAo,XAo,Lle,zAo,QAo,j5,WAo,Ve,D5,HAo,xle,UAo,JAo,Ja,YAo,kle,KAo,ZAo,Sle,e0o,o0o,Rle,r0o,t0o,a0o,G,Jb,Ble,n0o,s0o,sN,l0o,i0o,d0o,Yb,Ple,c0o,f0o,lN,m0o,g0o,h0o,Kb,$le,p0o,_0o,iN,u0o,b0o,F0o,Zb,Ile,v0o,T0o,dN,M0o,E0o,C0o,e3,qle,w0o,A0o,cN,y0o,L0o,x0o,o3,Nle,k0o,S0o,fN,R0o,B0o,P0o,r3,jle,$0o,I0o,mN,q0o,N0o,j0o,t3,Dle,D0o,G0o,gN,O0o,V0o,X0o,a3,Gle,z0o,Q0o,hN,W0o,H0o,U0o,n3,Ole,J0o,Y0o,pN,K0o,Z0o,eyo,s3,Vle,oyo,ryo,_N,tyo,ayo,nyo,l3,Xle,syo,lyo,uN,iyo,dyo,cyo,i3,zle,fyo,myo,bN,gyo,hyo,pyo,d3,Qle,_yo,uyo,FN,byo,Fyo,vyo,c3,Wle,Tyo,Myo,vN,Eyo,Cyo,wyo,f3,Hle,Ayo,yyo,TN,Lyo,xyo,kyo,m3,Ule,Syo,Ryo,MN,Byo,Pyo,$yo,g3,Jle,Iyo,qyo,EN,Nyo,jyo,Dyo,h3,Yle,Gyo,Oyo,CN,Vyo,Xyo,zyo,p3,Kle,Qyo,Wyo,wN,Hyo,Uyo,Jyo,_3,Zle,Yyo,Kyo,AN,Zyo,eLo,oLo,u3,eie,rLo,tLo,yN,aLo,nLo,sLo,b3,oie,lLo,iLo,LN,dLo,cLo,fLo,F3,rie,mLo,gLo,xN,hLo,pLo,_Lo,v3,tie,uLo,bLo,kN,FLo,vLo,TLo,T3,aie,MLo,ELo,SN,CLo,wLo,ALo,M3,nie,yLo,LLo,RN,xLo,kLo,SLo,E3,sie,RLo,BLo,BN,PLo,$Lo,ILo,C3,qLo,lie,NLo,jLo,iie,DLo,GLo,die,OLo,VLo,G5,rRe,ud,w3,cie,O5,XLo,fie,zLo,tRe,tr,V5,QLo,bd,WLo,PN,HLo,ULo,$N,JLo,YLo,KLo,X5,ZLo,mie,e8o,o8o,r8o,Yr,z5,t8o,gie,a8o,n8o,Fd,s8o,hie,l8o,i8o,IN,d8o,c8o,f8o,pie,m8o,g8o,Q5,h8o,Xe,W5,p8o,_ie,_8o,u8o,Ya,b8o,uie,F8o,v8o,bie,T8o,M8o,Fie,E8o,C8o,w8o,da,A3,vie,A8o,y8o,qN,L8o,x8o,k8o,y3,Tie,S8o,R8o,NN,B8o,P8o,$8o,L3,Mie,I8o,q8o,jN,N8o,j8o,D8o,x3,Eie,G8o,O8o,DN,V8o,X8o,z8o,k3,Cie,Q8o,W8o,GN,H8o,U8o,J8o,S3,Y8o,wie,K8o,Z8o,Aie,e9o,o9o,yie,r9o,t9o,H5,aRe,vd,R3,Lie,U5,a9o,xie,n9o,nRe,ar,J5,s9o,Td,l9o,ON,i9o,d9o,VN,c9o,f9o,m9o,Y5,g9o,kie,h9o,p9o,_9o,Kr,K5,u9o,Sie,b9o,F9o,Md,v9o,Rie,T9o,M9o,XN,E9o,C9o,w9o,Bie,A9o,y9o,Z5,L9o,ze,ew,x9o,Pie,k9o,S9o,Ka,R9o,$ie,B9o,P9o,Iie,$9o,I9o,qie,q9o,N9o,j9o,j,B3,Nie,D9o,G9o,zN,O9o,V9o,X9o,P3,jie,z9o,Q9o,QN,W9o,H9o,U9o,$3,Die,J9o,Y9o,WN,K9o,Z9o,exo,I3,Gie,oxo,rxo,HN,txo,axo,nxo,q3,Oie,sxo,lxo,UN,ixo,dxo,cxo,N3,Vie,fxo,mxo,JN,gxo,hxo,pxo,j3,Xie,_xo,uxo,YN,bxo,Fxo,vxo,D3,zie,Txo,Mxo,KN,Exo,Cxo,wxo,G3,Qie,Axo,yxo,ZN,Lxo,xxo,kxo,O3,Wie,Sxo,Rxo,ej,Bxo,Pxo,$xo,V3,Hie,Ixo,qxo,oj,Nxo,jxo,Dxo,X3,Uie,Gxo,Oxo,rj,Vxo,Xxo,zxo,z3,Jie,Qxo,Wxo,tj,Hxo,Uxo,Jxo,Q3,Yie,Yxo,Kxo,aj,Zxo,eko,oko,W3,Kie,rko,tko,nj,ako,nko,sko,H3,Zie,lko,iko,sj,dko,cko,fko,U3,ede,mko,gko,lj,hko,pko,_ko,J3,ode,uko,bko,ij,Fko,vko,Tko,Y3,rde,Mko,Eko,dj,Cko,wko,Ako,K3,tde,yko,Lko,cj,xko,kko,Sko,Z3,ade,Rko,Bko,fj,Pko,$ko,Iko,e2,nde,qko,Nko,mj,jko,Dko,Gko,o2,sde,Oko,Vko,gj,Xko,zko,Qko,r2,lde,Wko,Hko,hj,Uko,Jko,Yko,t2,ide,Kko,Zko,pj,eSo,oSo,rSo,a2,dde,tSo,aSo,_j,nSo,sSo,lSo,n2,cde,iSo,dSo,uj,cSo,fSo,mSo,s2,fde,gSo,hSo,bj,pSo,_So,uSo,l2,mde,bSo,FSo,Fj,vSo,TSo,MSo,i2,gde,ESo,CSo,vj,wSo,ASo,ySo,d2,hde,LSo,xSo,Tj,kSo,SSo,RSo,c2,pde,BSo,PSo,Mj,$So,ISo,qSo,f2,_de,NSo,jSo,Ej,DSo,GSo,OSo,m2,VSo,ude,XSo,zSo,bde,QSo,WSo,Fde,HSo,USo,ow,sRe,Ed,g2,vde,rw,JSo,Tde,YSo,lRe,nr,tw,KSo,Cd,ZSo,Cj,eRo,oRo,wj,rRo,tRo,aRo,aw,nRo,Mde,sRo,lRo,iRo,Zr,nw,dRo,Ede,cRo,fRo,wd,mRo,Cde,gRo,hRo,Aj,pRo,_Ro,uRo,wde,bRo,FRo,sw,vRo,Qe,lw,TRo,Ade,MRo,ERo,Za,CRo,yde,wRo,ARo,Lde,yRo,LRo,xde,xRo,kRo,SRo,R,h2,kde,RRo,BRo,yj,PRo,$Ro,IRo,p2,Sde,qRo,NRo,Lj,jRo,DRo,GRo,_2,Rde,ORo,VRo,xj,XRo,zRo,QRo,u2,Bde,WRo,HRo,kj,URo,JRo,YRo,b2,Pde,KRo,ZRo,Sj,eBo,oBo,rBo,F2,$de,tBo,aBo,Rj,nBo,sBo,lBo,v2,Ide,iBo,dBo,Bj,cBo,fBo,mBo,T2,qde,gBo,hBo,Pj,pBo,_Bo,uBo,M2,Nde,bBo,FBo,$j,vBo,TBo,MBo,E2,jde,EBo,CBo,Ij,wBo,ABo,yBo,C2,Dde,LBo,xBo,qj,kBo,SBo,RBo,w2,Gde,BBo,PBo,Nj,$Bo,IBo,qBo,A2,Ode,NBo,jBo,jj,DBo,GBo,OBo,y2,Vde,VBo,XBo,Dj,zBo,QBo,WBo,L2,Xde,HBo,UBo,Gj,JBo,YBo,KBo,x2,zde,ZBo,ePo,Oj,oPo,rPo,tPo,k2,Qde,aPo,nPo,Vj,sPo,lPo,iPo,S2,Wde,dPo,cPo,Xj,fPo,mPo,gPo,R2,Hde,hPo,pPo,zj,_Po,uPo,bPo,B2,Ude,FPo,vPo,Qj,TPo,MPo,EPo,P2,Jde,CPo,wPo,Wj,APo,yPo,LPo,$2,Yde,xPo,kPo,Hj,SPo,RPo,BPo,I2,Kde,PPo,$Po,Uj,IPo,qPo,NPo,q2,Zde,jPo,DPo,Jj,GPo,OPo,VPo,N2,ece,XPo,zPo,Yj,QPo,WPo,HPo,j2,oce,UPo,JPo,Kj,YPo,KPo,ZPo,D2,rce,e$o,o$o,Zj,r$o,t$o,a$o,G2,tce,n$o,s$o,eD,l$o,i$o,d$o,O2,ace,c$o,f$o,oD,m$o,g$o,h$o,V2,nce,p$o,_$o,rD,u$o,b$o,F$o,X2,sce,v$o,T$o,tD,M$o,E$o,C$o,z2,lce,w$o,A$o,aD,y$o,L$o,x$o,Q2,ice,k$o,S$o,nD,R$o,B$o,P$o,W2,dce,$$o,I$o,sD,q$o,N$o,j$o,H2,cce,D$o,G$o,lD,O$o,V$o,X$o,U2,fce,z$o,Q$o,iD,W$o,H$o,U$o,J2,mce,J$o,Y$o,dD,K$o,Z$o,eIo,Y2,gce,oIo,rIo,cD,tIo,aIo,nIo,K2,hce,sIo,lIo,fD,iIo,dIo,cIo,Z2,fIo,pce,mIo,gIo,_ce,hIo,pIo,uce,_Io,uIo,iw,iRe,Ad,eF,bce,dw,bIo,Fce,FIo,dRe,sr,cw,vIo,yd,TIo,mD,MIo,EIo,gD,CIo,wIo,AIo,fw,yIo,vce,LIo,xIo,kIo,et,mw,SIo,Tce,RIo,BIo,Ld,PIo,Mce,$Io,IIo,hD,qIo,NIo,jIo,Ece,DIo,GIo,gw,OIo,We,hw,VIo,Cce,XIo,zIo,en,QIo,wce,WIo,HIo,Ace,UIo,JIo,yce,YIo,KIo,ZIo,Lce,oF,xce,eqo,oqo,pD,rqo,tqo,aqo,rF,nqo,kce,sqo,lqo,Sce,iqo,dqo,Rce,cqo,fqo,pw,cRe,xd,tF,Bce,_w,mqo,Pce,gqo,fRe,lr,uw,hqo,kd,pqo,_D,_qo,uqo,uD,bqo,Fqo,vqo,bw,Tqo,$ce,Mqo,Eqo,Cqo,ot,Fw,wqo,Ice,Aqo,yqo,Sd,Lqo,qce,xqo,kqo,bD,Sqo,Rqo,Bqo,Nce,Pqo,$qo,vw,Iqo,He,Tw,qqo,jce,Nqo,jqo,on,Dqo,Dce,Gqo,Oqo,Gce,Vqo,Xqo,Oce,zqo,Qqo,Wqo,ge,aF,Vce,Hqo,Uqo,FD,Jqo,Yqo,Kqo,nF,Xce,Zqo,eNo,vD,oNo,rNo,tNo,Ds,zce,aNo,nNo,TD,sNo,lNo,MD,iNo,dNo,cNo,sF,Qce,fNo,mNo,ED,gNo,hNo,pNo,ma,Wce,_No,uNo,CD,bNo,FNo,wD,vNo,TNo,AD,MNo,ENo,CNo,lF,Hce,wNo,ANo,yD,yNo,LNo,xNo,iF,Uce,kNo,SNo,LD,RNo,BNo,PNo,dF,Jce,$No,INo,xD,qNo,NNo,jNo,cF,Yce,DNo,GNo,kD,ONo,VNo,XNo,fF,Kce,zNo,QNo,SD,WNo,HNo,UNo,mF,Zce,JNo,YNo,RD,KNo,ZNo,ejo,gF,ojo,efe,rjo,tjo,ofe,ajo,njo,rfe,sjo,ljo,Mw,mRe,Rd,hF,tfe,Ew,ijo,afe,djo,gRe,ir,Cw,cjo,Bd,fjo,BD,mjo,gjo,PD,hjo,pjo,_jo,ww,ujo,nfe,bjo,Fjo,vjo,rt,Aw,Tjo,sfe,Mjo,Ejo,Pd,Cjo,lfe,wjo,Ajo,$D,yjo,Ljo,xjo,ife,kjo,Sjo,yw,Rjo,Ue,Lw,Bjo,dfe,Pjo,$jo,rn,Ijo,cfe,qjo,Njo,ffe,jjo,Djo,mfe,Gjo,Ojo,Vjo,gfe,pF,hfe,Xjo,zjo,ID,Qjo,Wjo,Hjo,_F,Ujo,pfe,Jjo,Yjo,_fe,Kjo,Zjo,ufe,eDo,oDo,xw,hRe,$d,uF,bfe,kw,rDo,Ffe,tDo,pRe,dr,Sw,aDo,Id,nDo,qD,sDo,lDo,ND,iDo,dDo,cDo,Rw,fDo,vfe,mDo,gDo,hDo,tt,Bw,pDo,Tfe,_Do,uDo,qd,bDo,Mfe,FDo,vDo,jD,TDo,MDo,EDo,Efe,CDo,wDo,Pw,ADo,Je,$w,yDo,Cfe,LDo,xDo,tn,kDo,wfe,SDo,RDo,Afe,BDo,PDo,yfe,$Do,IDo,qDo,Se,bF,Lfe,NDo,jDo,DD,DDo,GDo,ODo,FF,xfe,VDo,XDo,GD,zDo,QDo,WDo,vF,kfe,HDo,UDo,OD,JDo,YDo,KDo,TF,Sfe,ZDo,eGo,VD,oGo,rGo,tGo,MF,Rfe,aGo,nGo,XD,sGo,lGo,iGo,EF,Bfe,dGo,cGo,zD,fGo,mGo,gGo,CF,Pfe,hGo,pGo,QD,_Go,uGo,bGo,wF,$fe,FGo,vGo,WD,TGo,MGo,EGo,AF,CGo,Ife,wGo,AGo,qfe,yGo,LGo,Nfe,xGo,kGo,Iw,_Re,Nd,yF,jfe,qw,SGo,Dfe,RGo,uRe,cr,Nw,BGo,jd,PGo,HD,$Go,IGo,UD,qGo,NGo,jGo,jw,DGo,Gfe,GGo,OGo,VGo,at,Dw,XGo,Ofe,zGo,QGo,Dd,WGo,Vfe,HGo,UGo,JD,JGo,YGo,KGo,Xfe,ZGo,eOo,Gw,oOo,Ye,Ow,rOo,zfe,tOo,aOo,an,nOo,Qfe,sOo,lOo,Wfe,iOo,dOo,Hfe,cOo,fOo,mOo,nn,LF,Ufe,gOo,hOo,YD,pOo,_Oo,uOo,xF,Jfe,bOo,FOo,KD,vOo,TOo,MOo,kF,Yfe,EOo,COo,ZD,wOo,AOo,yOo,SF,Kfe,LOo,xOo,eG,kOo,SOo,ROo,RF,BOo,Zfe,POo,$Oo,eme,IOo,qOo,ome,NOo,jOo,Vw,bRe,Gd,BF,rme,Xw,DOo,tme,GOo,FRe,fr,zw,OOo,Od,VOo,oG,XOo,zOo,rG,QOo,WOo,HOo,Qw,UOo,ame,JOo,YOo,KOo,nt,Ww,ZOo,nme,eVo,oVo,Vd,rVo,sme,tVo,aVo,tG,nVo,sVo,lVo,lme,iVo,dVo,Hw,cVo,Ke,Uw,fVo,ime,mVo,gVo,sn,hVo,dme,pVo,_Vo,cme,uVo,bVo,fme,FVo,vVo,TVo,Re,PF,mme,MVo,EVo,aG,CVo,wVo,AVo,$F,gme,yVo,LVo,nG,xVo,kVo,SVo,IF,hme,RVo,BVo,sG,PVo,$Vo,IVo,qF,pme,qVo,NVo,lG,jVo,DVo,GVo,NF,_me,OVo,VVo,iG,XVo,zVo,QVo,jF,ume,WVo,HVo,dG,UVo,JVo,YVo,DF,bme,KVo,ZVo,cG,eXo,oXo,rXo,GF,Fme,tXo,aXo,fG,nXo,sXo,lXo,OF,iXo,vme,dXo,cXo,Tme,fXo,mXo,Mme,gXo,hXo,Jw,vRe,Xd,VF,Eme,Yw,pXo,Cme,_Xo,TRe,mr,Kw,uXo,zd,bXo,mG,FXo,vXo,gG,TXo,MXo,EXo,Zw,CXo,wme,wXo,AXo,yXo,st,eA,LXo,Ame,xXo,kXo,Qd,SXo,yme,RXo,BXo,hG,PXo,$Xo,IXo,Lme,qXo,NXo,oA,jXo,Ze,rA,DXo,xme,GXo,OXo,ln,VXo,kme,XXo,zXo,Sme,QXo,WXo,Rme,HXo,UXo,JXo,tA,XF,Bme,YXo,KXo,pG,ZXo,ezo,ozo,zF,Pme,rzo,tzo,_G,azo,nzo,szo,QF,lzo,$me,izo,dzo,Ime,czo,fzo,qme,mzo,gzo,aA,MRe,Wd,WF,Nme,nA,hzo,jme,pzo,ERe,gr,sA,_zo,Hd,uzo,uG,bzo,Fzo,bG,vzo,Tzo,Mzo,lA,Ezo,Dme,Czo,wzo,Azo,lt,iA,yzo,Gme,Lzo,xzo,Ud,kzo,Ome,Szo,Rzo,FG,Bzo,Pzo,$zo,Vme,Izo,qzo,dA,Nzo,eo,cA,jzo,Xme,Dzo,Gzo,dn,Ozo,zme,Vzo,Xzo,Qme,zzo,Qzo,Wme,Wzo,Hzo,Uzo,cn,HF,Hme,Jzo,Yzo,vG,Kzo,Zzo,eQo,UF,Ume,oQo,rQo,TG,tQo,aQo,nQo,JF,Jme,sQo,lQo,MG,iQo,dQo,cQo,YF,Yme,fQo,mQo,EG,gQo,hQo,pQo,KF,_Qo,Kme,uQo,bQo,Zme,FQo,vQo,ege,TQo,MQo,fA,CRe,Jd,ZF,oge,mA,EQo,rge,CQo,wRe,hr,gA,wQo,Yd,AQo,CG,yQo,LQo,wG,xQo,kQo,SQo,hA,RQo,tge,BQo,PQo,$Qo,it,pA,IQo,age,qQo,NQo,Kd,jQo,nge,DQo,GQo,AG,OQo,VQo,XQo,sge,zQo,QQo,_A,WQo,oo,uA,HQo,lge,UQo,JQo,fn,YQo,ige,KQo,ZQo,dge,eWo,oWo,cge,rWo,tWo,aWo,Zd,ev,fge,nWo,sWo,yG,lWo,iWo,dWo,ov,mge,cWo,fWo,LG,mWo,gWo,hWo,rv,gge,pWo,_Wo,xG,uWo,bWo,FWo,tv,vWo,hge,TWo,MWo,pge,EWo,CWo,_ge,wWo,AWo,bA,ARe,ec,av,uge,FA,yWo,bge,LWo,yRe,pr,vA,xWo,oc,kWo,kG,SWo,RWo,SG,BWo,PWo,$Wo,TA,IWo,Fge,qWo,NWo,jWo,dt,MA,DWo,vge,GWo,OWo,rc,VWo,Tge,XWo,zWo,RG,QWo,WWo,HWo,Mge,UWo,JWo,EA,YWo,ro,CA,KWo,Ege,ZWo,eHo,mn,oHo,Cge,rHo,tHo,wge,aHo,nHo,Age,sHo,lHo,iHo,yge,nv,Lge,dHo,cHo,BG,fHo,mHo,gHo,sv,hHo,xge,pHo,_Ho,kge,uHo,bHo,Sge,FHo,vHo,wA,LRe,tc,lv,Rge,AA,THo,Bge,MHo,xRe,_r,yA,EHo,ac,CHo,PG,wHo,AHo,$G,yHo,LHo,xHo,LA,kHo,Pge,SHo,RHo,BHo,ct,xA,PHo,$ge,$Ho,IHo,nc,qHo,Ige,NHo,jHo,IG,DHo,GHo,OHo,qge,VHo,XHo,kA,zHo,to,SA,QHo,Nge,WHo,HHo,gn,UHo,jge,JHo,YHo,Dge,KHo,ZHo,Gge,eUo,oUo,rUo,Oge,iv,Vge,tUo,aUo,qG,nUo,sUo,lUo,dv,iUo,Xge,dUo,cUo,zge,fUo,mUo,Qge,gUo,hUo,RA,kRe,sc,cv,Wge,BA,pUo,Hge,_Uo,SRe,ur,PA,uUo,lc,bUo,NG,FUo,vUo,jG,TUo,MUo,EUo,$A,CUo,Uge,wUo,AUo,yUo,ft,IA,LUo,Jge,xUo,kUo,ic,SUo,Yge,RUo,BUo,DG,PUo,$Uo,IUo,Kge,qUo,NUo,qA,jUo,ao,NA,DUo,Zge,GUo,OUo,hn,VUo,ehe,XUo,zUo,ohe,QUo,WUo,rhe,HUo,UUo,JUo,dc,fv,the,YUo,KUo,GG,ZUo,eJo,oJo,mv,ahe,rJo,tJo,OG,aJo,nJo,sJo,gv,nhe,lJo,iJo,VG,dJo,cJo,fJo,hv,mJo,she,gJo,hJo,lhe,pJo,_Jo,ihe,uJo,bJo,jA,RRe,cc,pv,dhe,DA,FJo,che,vJo,BRe,br,GA,TJo,fc,MJo,XG,EJo,CJo,zG,wJo,AJo,yJo,OA,LJo,fhe,xJo,kJo,SJo,mt,VA,RJo,mhe,BJo,PJo,mc,$Jo,ghe,IJo,qJo,QG,NJo,jJo,DJo,hhe,GJo,OJo,XA,VJo,no,zA,XJo,phe,zJo,QJo,pn,WJo,_he,HJo,UJo,uhe,JJo,YJo,bhe,KJo,ZJo,eYo,Fhe,_v,vhe,oYo,rYo,WG,tYo,aYo,nYo,uv,sYo,The,lYo,iYo,Mhe,dYo,cYo,Ehe,fYo,mYo,QA,PRe,gc,bv,Che,WA,gYo,whe,hYo,$Re,Fr,HA,pYo,hc,_Yo,HG,uYo,bYo,UG,FYo,vYo,TYo,UA,MYo,Ahe,EYo,CYo,wYo,gt,JA,AYo,yhe,yYo,LYo,pc,xYo,Lhe,kYo,SYo,JG,RYo,BYo,PYo,xhe,$Yo,IYo,YA,qYo,ho,KA,NYo,khe,jYo,DYo,_n,GYo,She,OYo,VYo,Rhe,XYo,zYo,Bhe,QYo,WYo,HYo,x,Fv,Phe,UYo,JYo,YG,YYo,KYo,ZYo,vv,$he,eKo,oKo,KG,rKo,tKo,aKo,Tv,Ihe,nKo,sKo,ZG,lKo,iKo,dKo,Mv,qhe,cKo,fKo,eO,mKo,gKo,hKo,Ev,Nhe,pKo,_Ko,oO,uKo,bKo,FKo,Cv,jhe,vKo,TKo,rO,MKo,EKo,CKo,wv,Dhe,wKo,AKo,tO,yKo,LKo,xKo,Av,Ghe,kKo,SKo,aO,RKo,BKo,PKo,yv,Ohe,$Ko,IKo,nO,qKo,NKo,jKo,Lv,Vhe,DKo,GKo,sO,OKo,VKo,XKo,xv,Xhe,zKo,QKo,lO,WKo,HKo,UKo,kv,zhe,JKo,YKo,iO,KKo,ZKo,eZo,Sv,Qhe,oZo,rZo,dO,tZo,aZo,nZo,Rv,Whe,sZo,lZo,cO,iZo,dZo,cZo,Bv,Hhe,fZo,mZo,fO,gZo,hZo,pZo,Pv,Uhe,_Zo,uZo,mO,bZo,FZo,vZo,Gs,Jhe,TZo,MZo,gO,EZo,CZo,hO,wZo,AZo,yZo,$v,Yhe,LZo,xZo,pO,kZo,SZo,RZo,Iv,Khe,BZo,PZo,_O,$Zo,IZo,qZo,qv,Zhe,NZo,jZo,uO,DZo,GZo,OZo,Nv,epe,VZo,XZo,bO,zZo,QZo,WZo,jv,ope,HZo,UZo,FO,JZo,YZo,KZo,Dv,rpe,ZZo,eer,vO,oer,rer,ter,Gv,tpe,aer,ner,TO,ser,ler,ier,Ov,ape,der,cer,MO,fer,mer,ger,Vv,npe,her,per,EO,_er,uer,ber,Xv,spe,Fer,ver,CO,Ter,Mer,Eer,zv,lpe,Cer,wer,wO,Aer,yer,Ler,Qv,ipe,xer,ker,AO,Ser,Rer,Ber,Wv,dpe,Per,$er,yO,Ier,qer,Ner,Hv,cpe,jer,Der,LO,Ger,Oer,Ver,Uv,fpe,Xer,zer,xO,Qer,Wer,Her,Jv,mpe,Uer,Jer,kO,Yer,Ker,Zer,Yv,gpe,eor,oor,SO,ror,tor,aor,Kv,hpe,nor,sor,RO,lor,ior,dor,Zv,ppe,cor,mor,BO,gor,hor,por,e6,_pe,_or,uor,PO,bor,For,vor,o6,upe,Tor,Mor,$O,Eor,Cor,wor,r6,bpe,Aor,yor,IO,Lor,xor,kor,t6,Fpe,Sor,Ror,qO,Bor,Por,$or,a6,vpe,Ior,qor,NO,Nor,jor,Dor,n6,Tpe,Gor,Oor,jO,Vor,Xor,zor,s6,Mpe,Qor,Wor,DO,Hor,Uor,Jor,Epe,Yor,Kor,ZA,IRe,_c,l6,Cpe,e0,Zor,wpe,err,qRe,vr,o0,orr,uc,rrr,GO,trr,arr,OO,nrr,srr,lrr,r0,irr,Ape,drr,crr,frr,ht,t0,mrr,ype,grr,hrr,bc,prr,Lpe,_rr,urr,VO,brr,Frr,vrr,xpe,Trr,Mrr,a0,Err,po,n0,Crr,kpe,wrr,Arr,un,yrr,Spe,Lrr,xrr,Rpe,krr,Srr,Bpe,Rrr,Brr,Prr,H,i6,Ppe,$rr,Irr,XO,qrr,Nrr,jrr,d6,$pe,Drr,Grr,zO,Orr,Vrr,Xrr,c6,Ipe,zrr,Qrr,QO,Wrr,Hrr,Urr,f6,qpe,Jrr,Yrr,WO,Krr,Zrr,etr,m6,Npe,otr,rtr,HO,ttr,atr,ntr,g6,jpe,str,ltr,UO,itr,dtr,ctr,h6,Dpe,ftr,mtr,JO,gtr,htr,ptr,p6,Gpe,_tr,utr,YO,btr,Ftr,vtr,_6,Ope,Ttr,Mtr,KO,Etr,Ctr,wtr,u6,Vpe,Atr,ytr,ZO,Ltr,xtr,ktr,b6,Xpe,Str,Rtr,eV,Btr,Ptr,$tr,F6,zpe,Itr,qtr,oV,Ntr,jtr,Dtr,v6,Qpe,Gtr,Otr,rV,Vtr,Xtr,ztr,T6,Wpe,Qtr,Wtr,tV,Htr,Utr,Jtr,M6,Hpe,Ytr,Ktr,aV,Ztr,ear,oar,E6,Upe,rar,tar,nV,aar,nar,sar,C6,Jpe,lar,iar,sV,dar,car,far,w6,Ype,mar,gar,lV,har,par,_ar,A6,Kpe,uar,bar,iV,Far,Tar,Mar,y6,Zpe,Ear,Car,dV,war,Aar,yar,L6,e_e,Lar,xar,cV,kar,Sar,Rar,x6,o_e,Bar,Par,fV,$ar,Iar,qar,r_e,Nar,jar,s0,NRe,Fc,k6,t_e,l0,Dar,a_e,Gar,jRe,Tr,i0,Oar,vc,Var,mV,Xar,zar,gV,Qar,War,Har,d0,Uar,n_e,Jar,Yar,Kar,pt,c0,Zar,s_e,enr,onr,Tc,rnr,l_e,tnr,anr,hV,nnr,snr,lnr,i_e,inr,dnr,f0,cnr,_o,m0,fnr,d_e,mnr,gnr,bn,hnr,c_e,pnr,_nr,f_e,unr,bnr,m_e,Fnr,vnr,Tnr,ce,S6,g_e,Mnr,Enr,pV,Cnr,wnr,Anr,R6,h_e,ynr,Lnr,_V,xnr,knr,Snr,B6,p_e,Rnr,Bnr,uV,Pnr,$nr,Inr,P6,__e,qnr,Nnr,bV,jnr,Dnr,Gnr,$6,u_e,Onr,Vnr,FV,Xnr,znr,Qnr,I6,b_e,Wnr,Hnr,vV,Unr,Jnr,Ynr,q6,F_e,Knr,Znr,TV,esr,osr,rsr,N6,v_e,tsr,asr,MV,nsr,ssr,lsr,j6,T_e,isr,dsr,EV,csr,fsr,msr,D6,M_e,gsr,hsr,CV,psr,_sr,usr,G6,E_e,bsr,Fsr,wV,vsr,Tsr,Msr,O6,C_e,Esr,Csr,AV,wsr,Asr,ysr,w_e,Lsr,xsr,g0,DRe,Mc,V6,A_e,h0,ksr,y_e,Ssr,GRe,Mr,p0,Rsr,Ec,Bsr,yV,Psr,$sr,LV,Isr,qsr,Nsr,_0,jsr,L_e,Dsr,Gsr,Osr,_t,u0,Vsr,x_e,Xsr,zsr,Cc,Qsr,k_e,Wsr,Hsr,xV,Usr,Jsr,Ysr,S_e,Ksr,Zsr,b0,elr,uo,F0,olr,R_e,rlr,tlr,Fn,alr,B_e,nlr,slr,P_e,llr,ilr,$_e,dlr,clr,flr,v0,X6,I_e,mlr,glr,kV,hlr,plr,_lr,z6,q_e,ulr,blr,SV,Flr,vlr,Tlr,N_e,Mlr,Elr,T0,ORe,wc,Q6,j_e,M0,Clr,D_e,wlr,VRe,Er,E0,Alr,Ac,ylr,RV,Llr,xlr,BV,klr,Slr,Rlr,C0,Blr,G_e,Plr,$lr,Ilr,ut,w0,qlr,O_e,Nlr,jlr,yc,Dlr,V_e,Glr,Olr,PV,Vlr,Xlr,zlr,X_e,Qlr,Wlr,A0,Hlr,bo,y0,Ulr,z_e,Jlr,Ylr,vn,Klr,Q_e,Zlr,eir,W_e,oir,rir,H_e,tir,air,nir,J,W6,U_e,sir,lir,$V,iir,dir,cir,H6,J_e,fir,mir,IV,gir,hir,pir,U6,Y_e,_ir,uir,qV,bir,Fir,vir,J6,K_e,Tir,Mir,NV,Eir,Cir,wir,Y6,Z_e,Air,yir,jV,Lir,xir,kir,K6,eue,Sir,Rir,DV,Bir,Pir,$ir,Z6,oue,Iir,qir,GV,Nir,jir,Dir,eT,rue,Gir,Oir,OV,Vir,Xir,zir,oT,tue,Qir,Wir,VV,Hir,Uir,Jir,rT,aue,Yir,Kir,XV,Zir,edr,odr,tT,nue,rdr,tdr,zV,adr,ndr,sdr,aT,sue,ldr,idr,QV,ddr,cdr,fdr,nT,lue,mdr,gdr,WV,hdr,pdr,_dr,sT,iue,udr,bdr,HV,Fdr,vdr,Tdr,lT,due,Mdr,Edr,UV,Cdr,wdr,Adr,iT,cue,ydr,Ldr,JV,xdr,kdr,Sdr,dT,fue,Rdr,Bdr,YV,Pdr,$dr,Idr,cT,mue,qdr,Ndr,KV,jdr,Ddr,Gdr,fT,gue,Odr,Vdr,ZV,Xdr,zdr,Qdr,mT,hue,Wdr,Hdr,eX,Udr,Jdr,Ydr,pue,Kdr,Zdr,L0,XRe,Lc,gT,_ue,x0,ecr,uue,ocr,zRe,Cr,k0,rcr,xc,tcr,oX,acr,ncr,rX,scr,lcr,icr,S0,dcr,bue,ccr,fcr,mcr,bt,R0,gcr,Fue,hcr,pcr,kc,_cr,vue,ucr,bcr,tX,Fcr,vcr,Tcr,Tue,Mcr,Ecr,B0,Ccr,Fo,P0,wcr,Mue,Acr,ycr,Tn,Lcr,Eue,xcr,kcr,Cue,Scr,Rcr,wue,Bcr,Pcr,$cr,ue,hT,Aue,Icr,qcr,aX,Ncr,jcr,Dcr,pT,yue,Gcr,Ocr,nX,Vcr,Xcr,zcr,_T,Lue,Qcr,Wcr,sX,Hcr,Ucr,Jcr,uT,xue,Ycr,Kcr,lX,Zcr,efr,ofr,bT,kue,rfr,tfr,iX,afr,nfr,sfr,FT,Sue,lfr,ifr,dX,dfr,cfr,ffr,vT,Rue,mfr,gfr,cX,hfr,pfr,_fr,TT,Bue,ufr,bfr,fX,Ffr,vfr,Tfr,MT,Pue,Mfr,Efr,mX,Cfr,wfr,Afr,ET,$ue,yfr,Lfr,gX,xfr,kfr,Sfr,Iue,Rfr,Bfr,$0,QRe,Sc,CT,que,I0,Pfr,Nue,$fr,WRe,wr,q0,Ifr,Rc,qfr,hX,Nfr,jfr,pX,Dfr,Gfr,Ofr,N0,Vfr,jue,Xfr,zfr,Qfr,Ft,j0,Wfr,Due,Hfr,Ufr,Bc,Jfr,Gue,Yfr,Kfr,_X,Zfr,emr,omr,Oue,rmr,tmr,D0,amr,vo,G0,nmr,Vue,smr,lmr,Mn,imr,Xue,dmr,cmr,zue,fmr,mmr,Que,gmr,hmr,pmr,V,wT,Wue,_mr,umr,uX,bmr,Fmr,vmr,AT,Hue,Tmr,Mmr,bX,Emr,Cmr,wmr,yT,Uue,Amr,ymr,FX,Lmr,xmr,kmr,LT,Jue,Smr,Rmr,vX,Bmr,Pmr,$mr,xT,Yue,Imr,qmr,TX,Nmr,jmr,Dmr,kT,Kue,Gmr,Omr,MX,Vmr,Xmr,zmr,ST,Zue,Qmr,Wmr,EX,Hmr,Umr,Jmr,RT,e1e,Ymr,Kmr,CX,Zmr,egr,ogr,BT,o1e,rgr,tgr,wX,agr,ngr,sgr,PT,r1e,lgr,igr,AX,dgr,cgr,fgr,$T,t1e,mgr,ggr,yX,hgr,pgr,_gr,IT,a1e,ugr,bgr,LX,Fgr,vgr,Tgr,qT,n1e,Mgr,Egr,xX,Cgr,wgr,Agr,NT,s1e,ygr,Lgr,kX,xgr,kgr,Sgr,jT,l1e,Rgr,Bgr,SX,Pgr,$gr,Igr,DT,i1e,qgr,Ngr,RX,jgr,Dgr,Ggr,GT,d1e,Ogr,Vgr,BX,Xgr,zgr,Qgr,OT,c1e,Wgr,Hgr,PX,Ugr,Jgr,Ygr,VT,f1e,Kgr,Zgr,$X,ehr,ohr,rhr,XT,m1e,thr,ahr,IX,nhr,shr,lhr,zT,g1e,ihr,dhr,qX,chr,fhr,mhr,QT,h1e,ghr,hhr,NX,phr,_hr,uhr,WT,p1e,bhr,Fhr,jX,vhr,Thr,Mhr,HT,_1e,Ehr,Chr,DX,whr,Ahr,yhr,UT,u1e,Lhr,xhr,GX,khr,Shr,Rhr,JT,b1e,Bhr,Phr,OX,$hr,Ihr,qhr,F1e,Nhr,jhr,O0,HRe,Pc,YT,v1e,V0,Dhr,T1e,Ghr,URe,Ar,X0,Ohr,$c,Vhr,VX,Xhr,zhr,XX,Qhr,Whr,Hhr,z0,Uhr,M1e,Jhr,Yhr,Khr,vt,Q0,Zhr,E1e,epr,opr,Ic,rpr,C1e,tpr,apr,zX,npr,spr,lpr,w1e,ipr,dpr,W0,cpr,To,H0,fpr,A1e,mpr,gpr,En,hpr,y1e,ppr,_pr,L1e,upr,bpr,x1e,Fpr,vpr,Tpr,ae,KT,k1e,Mpr,Epr,QX,Cpr,wpr,Apr,ZT,S1e,ypr,Lpr,WX,xpr,kpr,Spr,e7,R1e,Rpr,Bpr,HX,Ppr,$pr,Ipr,o7,B1e,qpr,Npr,UX,jpr,Dpr,Gpr,r7,P1e,Opr,Vpr,JX,Xpr,zpr,Qpr,t7,$1e,Wpr,Hpr,YX,Upr,Jpr,Ypr,a7,I1e,Kpr,Zpr,KX,e_r,o_r,r_r,n7,q1e,t_r,a_r,ZX,n_r,s_r,l_r,s7,N1e,i_r,d_r,ez,c_r,f_r,m_r,l7,j1e,g_r,h_r,oz,p_r,__r,u_r,i7,D1e,b_r,F_r,rz,v_r,T_r,M_r,d7,G1e,E_r,C_r,tz,w_r,A_r,y_r,c7,O1e,L_r,x_r,az,k_r,S_r,R_r,f7,V1e,B_r,P_r,nz,$_r,I_r,q_r,m7,X1e,N_r,j_r,sz,D_r,G_r,O_r,g7,z1e,V_r,X_r,lz,z_r,Q_r,W_r,h7,Q1e,H_r,U_r,iz,J_r,Y_r,K_r,W1e,Z_r,eur,U0,JRe,qc,p7,H1e,J0,our,U1e,rur,YRe,yr,Y0,tur,Nc,aur,dz,nur,sur,cz,lur,iur,dur,K0,cur,J1e,fur,mur,gur,Tt,Z0,hur,Y1e,pur,_ur,jc,uur,K1e,bur,Fur,fz,vur,Tur,Mur,Z1e,Eur,Cur,ey,wur,Mo,oy,Aur,ebe,yur,Lur,Cn,xur,obe,kur,Sur,rbe,Rur,Bur,tbe,Pur,$ur,Iur,abe,_7,nbe,qur,Nur,mz,jur,Dur,Gur,sbe,Our,Vur,ry,KRe,Dc,u7,lbe,ty,Xur,ibe,zur,ZRe,Lr,ay,Qur,Gc,Wur,gz,Hur,Uur,hz,Jur,Yur,Kur,ny,Zur,dbe,e1r,o1r,r1r,Mt,sy,t1r,cbe,a1r,n1r,Oc,s1r,fbe,l1r,i1r,pz,d1r,c1r,f1r,mbe,m1r,g1r,ly,h1r,Eo,iy,p1r,gbe,_1r,u1r,wn,b1r,hbe,F1r,v1r,pbe,T1r,M1r,_be,E1r,C1r,w1r,Y,b7,ube,A1r,y1r,_z,L1r,x1r,k1r,F7,bbe,S1r,R1r,uz,B1r,P1r,$1r,v7,Fbe,I1r,q1r,bz,N1r,j1r,D1r,T7,vbe,G1r,O1r,Fz,V1r,X1r,z1r,M7,Tbe,Q1r,W1r,vz,H1r,U1r,J1r,E7,Mbe,Y1r,K1r,Tz,Z1r,ebr,obr,C7,Ebe,rbr,tbr,Mz,abr,nbr,sbr,w7,Cbe,lbr,ibr,Ez,dbr,cbr,fbr,A7,wbe,mbr,gbr,Cz,hbr,pbr,_br,y7,Abe,ubr,bbr,wz,Fbr,vbr,Tbr,L7,ybe,Mbr,Ebr,Az,Cbr,wbr,Abr,x7,Lbe,ybr,Lbr,yz,xbr,kbr,Sbr,k7,xbe,Rbr,Bbr,Lz,Pbr,$br,Ibr,S7,kbe,qbr,Nbr,xz,jbr,Dbr,Gbr,R7,Sbe,Obr,Vbr,kz,Xbr,zbr,Qbr,B7,Rbe,Wbr,Hbr,Sz,Ubr,Jbr,Ybr,P7,Bbe,Kbr,Zbr,Rz,e3r,o3r,r3r,$7,Pbe,t3r,a3r,Bz,n3r,s3r,l3r,I7,$be,i3r,d3r,Pz,c3r,f3r,m3r,q7,Ibe,g3r,h3r,$z,p3r,_3r,u3r,qbe,b3r,F3r,dy,eBe,Vc,N7,Nbe,cy,v3r,jbe,T3r,oBe,xr,fy,M3r,Xc,E3r,Iz,C3r,w3r,qz,A3r,y3r,L3r,my,x3r,Dbe,k3r,S3r,R3r,Et,gy,B3r,Gbe,P3r,$3r,zc,I3r,Obe,q3r,N3r,Nz,j3r,D3r,G3r,Vbe,O3r,V3r,hy,X3r,Co,py,z3r,Xbe,Q3r,W3r,An,H3r,zbe,U3r,J3r,Qbe,Y3r,K3r,Wbe,Z3r,e2r,o2r,K,j7,Hbe,r2r,t2r,jz,a2r,n2r,s2r,D7,Ube,l2r,i2r,Dz,d2r,c2r,f2r,G7,Jbe,m2r,g2r,Gz,h2r,p2r,_2r,O7,Ybe,u2r,b2r,Oz,F2r,v2r,T2r,V7,Kbe,M2r,E2r,Vz,C2r,w2r,A2r,X7,Zbe,y2r,L2r,Xz,x2r,k2r,S2r,z7,e3e,R2r,B2r,zz,P2r,$2r,I2r,Q7,o3e,q2r,N2r,Qz,j2r,D2r,G2r,W7,r3e,O2r,V2r,Wz,X2r,z2r,Q2r,H7,t3e,W2r,H2r,Hz,U2r,J2r,Y2r,U7,a3e,K2r,Z2r,Uz,eFr,oFr,rFr,J7,n3e,tFr,aFr,Jz,nFr,sFr,lFr,Y7,s3e,iFr,dFr,Yz,cFr,fFr,mFr,K7,l3e,gFr,hFr,Kz,pFr,_Fr,uFr,Z7,i3e,bFr,FFr,Zz,vFr,TFr,MFr,eM,d3e,EFr,CFr,eQ,wFr,AFr,yFr,oM,c3e,LFr,xFr,oQ,kFr,SFr,RFr,rM,f3e,BFr,PFr,rQ,$Fr,IFr,qFr,tM,m3e,NFr,jFr,tQ,DFr,GFr,OFr,aM,g3e,VFr,XFr,aQ,zFr,QFr,WFr,h3e,HFr,UFr,_y,rBe,Qc,nM,p3e,uy,JFr,_3e,YFr,tBe,kr,by,KFr,Wc,ZFr,nQ,evr,ovr,sQ,rvr,tvr,avr,Fy,nvr,u3e,svr,lvr,ivr,Ct,vy,dvr,b3e,cvr,fvr,Hc,mvr,F3e,gvr,hvr,lQ,pvr,_vr,uvr,v3e,bvr,Fvr,Ty,vvr,wo,My,Tvr,T3e,Mvr,Evr,yn,Cvr,M3e,wvr,Avr,E3e,yvr,Lvr,C3e,xvr,kvr,Svr,w3e,sM,A3e,Rvr,Bvr,iQ,Pvr,$vr,Ivr,y3e,qvr,Nvr,Ey,aBe,Uc,lM,L3e,Cy,jvr,x3e,Dvr,nBe,Sr,wy,Gvr,Jc,Ovr,dQ,Vvr,Xvr,cQ,zvr,Qvr,Wvr,Ay,Hvr,k3e,Uvr,Jvr,Yvr,wt,yy,Kvr,S3e,Zvr,e6r,Yc,o6r,R3e,r6r,t6r,fQ,a6r,n6r,s6r,B3e,l6r,i6r,Ly,d6r,Ao,xy,c6r,P3e,f6r,m6r,Ln,g6r,$3e,h6r,p6r,I3e,_6r,u6r,q3e,b6r,F6r,v6r,N3e,iM,j3e,T6r,M6r,mQ,E6r,C6r,w6r,D3e,A6r,y6r,ky,sBe,Kc,dM,G3e,Sy,L6r,O3e,x6r,lBe,Rr,Ry,k6r,Zc,S6r,gQ,R6r,B6r,hQ,P6r,$6r,I6r,By,q6r,V3e,N6r,j6r,D6r,At,Py,G6r,X3e,O6r,V6r,ef,X6r,z3e,z6r,Q6r,pQ,W6r,H6r,U6r,Q3e,J6r,Y6r,$y,K6r,yo,Iy,Z6r,W3e,eTr,oTr,xn,rTr,H3e,tTr,aTr,U3e,nTr,sTr,J3e,lTr,iTr,dTr,z,cM,Y3e,cTr,fTr,_Q,mTr,gTr,hTr,fM,K3e,pTr,_Tr,uQ,uTr,bTr,FTr,mM,Z3e,vTr,TTr,bQ,MTr,ETr,CTr,gM,e2e,wTr,ATr,FQ,yTr,LTr,xTr,hM,o2e,kTr,STr,vQ,RTr,BTr,PTr,pM,r2e,$Tr,ITr,TQ,qTr,NTr,jTr,_M,t2e,DTr,GTr,MQ,OTr,VTr,XTr,uM,a2e,zTr,QTr,EQ,WTr,HTr,UTr,bM,n2e,JTr,YTr,CQ,KTr,ZTr,e7r,FM,s2e,o7r,r7r,wQ,t7r,a7r,n7r,vM,l2e,s7r,l7r,AQ,i7r,d7r,c7r,TM,i2e,f7r,m7r,yQ,g7r,h7r,p7r,MM,d2e,_7r,u7r,LQ,b7r,F7r,v7r,EM,c2e,T7r,M7r,xQ,E7r,C7r,w7r,CM,f2e,A7r,y7r,kQ,L7r,x7r,k7r,wM,m2e,S7r,R7r,SQ,B7r,P7r,$7r,AM,g2e,I7r,q7r,RQ,N7r,j7r,D7r,yM,h2e,G7r,O7r,BQ,V7r,X7r,z7r,LM,p2e,Q7r,W7r,PQ,H7r,U7r,J7r,xM,_2e,Y7r,K7r,$Q,Z7r,eMr,oMr,kM,u2e,rMr,tMr,IQ,aMr,nMr,sMr,SM,b2e,lMr,iMr,qQ,dMr,cMr,fMr,RM,F2e,mMr,gMr,NQ,hMr,pMr,_Mr,BM,v2e,uMr,bMr,jQ,FMr,vMr,TMr,PM,T2e,MMr,EMr,DQ,CMr,wMr,AMr,M2e,yMr,LMr,qy,iBe,of,$M,E2e,Ny,xMr,C2e,kMr,dBe,Br,jy,SMr,rf,RMr,GQ,BMr,PMr,OQ,$Mr,IMr,qMr,Dy,NMr,w2e,jMr,DMr,GMr,yt,Gy,OMr,A2e,VMr,XMr,tf,zMr,y2e,QMr,WMr,VQ,HMr,UMr,JMr,L2e,YMr,KMr,Oy,ZMr,Lo,Vy,e4r,x2e,o4r,r4r,kn,t4r,k2e,a4r,n4r,S2e,s4r,l4r,R2e,i4r,d4r,c4r,ca,IM,B2e,f4r,m4r,XQ,g4r,h4r,p4r,qM,P2e,_4r,u4r,zQ,b4r,F4r,v4r,NM,$2e,T4r,M4r,QQ,E4r,C4r,w4r,jM,I2e,A4r,y4r,WQ,L4r,x4r,k4r,DM,q2e,S4r,R4r,HQ,B4r,P4r,$4r,N2e,I4r,q4r,Xy,cBe,af,GM,j2e,zy,N4r,D2e,j4r,fBe,Pr,Qy,D4r,nf,G4r,UQ,O4r,V4r,JQ,X4r,z4r,Q4r,Wy,W4r,G2e,H4r,U4r,J4r,Lt,Hy,Y4r,O2e,K4r,Z4r,sf,eEr,V2e,oEr,rEr,YQ,tEr,aEr,nEr,X2e,sEr,lEr,Uy,iEr,xo,Jy,dEr,z2e,cEr,fEr,Sn,mEr,Q2e,gEr,hEr,W2e,pEr,_Er,H2e,uEr,bEr,FEr,fe,OM,U2e,vEr,TEr,KQ,MEr,EEr,CEr,VM,J2e,wEr,AEr,ZQ,yEr,LEr,xEr,XM,Y2e,kEr,SEr,eW,REr,BEr,PEr,zM,K2e,$Er,IEr,oW,qEr,NEr,jEr,QM,Z2e,DEr,GEr,rW,OEr,VEr,XEr,WM,eFe,zEr,QEr,tW,WEr,HEr,UEr,HM,oFe,JEr,YEr,aW,KEr,ZEr,eCr,UM,rFe,oCr,rCr,nW,tCr,aCr,nCr,JM,tFe,sCr,lCr,sW,iCr,dCr,cCr,YM,aFe,fCr,mCr,lW,gCr,hCr,pCr,KM,nFe,_Cr,uCr,iW,bCr,FCr,vCr,ZM,sFe,TCr,MCr,dW,ECr,CCr,wCr,lFe,ACr,yCr,Yy,mBe,lf,e4,iFe,Ky,LCr,dFe,xCr,gBe,$r,Zy,kCr,df,SCr,cW,RCr,BCr,fW,PCr,$Cr,ICr,eL,qCr,cFe,NCr,jCr,DCr,xt,oL,GCr,fFe,OCr,VCr,cf,XCr,mFe,zCr,QCr,mW,WCr,HCr,UCr,gFe,JCr,YCr,rL,KCr,ko,tL,ZCr,hFe,e5r,o5r,Rn,r5r,pFe,t5r,a5r,_Fe,n5r,s5r,uFe,l5r,i5r,d5r,be,o4,bFe,c5r,f5r,gW,m5r,g5r,h5r,r4,FFe,p5r,_5r,hW,u5r,b5r,F5r,t4,vFe,v5r,T5r,pW,M5r,E5r,C5r,a4,TFe,w5r,A5r,_W,y5r,L5r,x5r,n4,MFe,k5r,S5r,uW,R5r,B5r,P5r,s4,EFe,$5r,I5r,bW,q5r,N5r,j5r,l4,CFe,D5r,G5r,FW,O5r,V5r,X5r,i4,wFe,z5r,Q5r,vW,W5r,H5r,U5r,d4,AFe,J5r,Y5r,TW,K5r,Z5r,ewr,c4,yFe,owr,rwr,MW,twr,awr,nwr,LFe,swr,lwr,aL,hBe,ff,f4,xFe,nL,iwr,kFe,dwr,pBe,Ir,sL,cwr,mf,fwr,EW,mwr,gwr,CW,hwr,pwr,_wr,lL,uwr,SFe,bwr,Fwr,vwr,kt,iL,Twr,RFe,Mwr,Ewr,gf,Cwr,BFe,wwr,Awr,wW,ywr,Lwr,xwr,PFe,kwr,Swr,dL,Rwr,So,cL,Bwr,$Fe,Pwr,$wr,Bn,Iwr,IFe,qwr,Nwr,qFe,jwr,Dwr,NFe,Gwr,Owr,Vwr,Ee,m4,jFe,Xwr,zwr,AW,Qwr,Wwr,Hwr,g4,DFe,Uwr,Jwr,yW,Ywr,Kwr,Zwr,h4,GFe,eAr,oAr,LW,rAr,tAr,aAr,p4,OFe,nAr,sAr,xW,lAr,iAr,dAr,_4,VFe,cAr,fAr,kW,mAr,gAr,hAr,u4,XFe,pAr,_Ar,SW,uAr,bAr,FAr,b4,zFe,vAr,TAr,RW,MAr,EAr,CAr,F4,QFe,wAr,AAr,BW,yAr,LAr,xAr,v4,WFe,kAr,SAr,PW,RAr,BAr,PAr,HFe,$Ar,IAr,fL,_Be,hf,T4,UFe,mL,qAr,JFe,NAr,uBe,qr,gL,jAr,pf,DAr,$W,GAr,OAr,IW,VAr,XAr,zAr,hL,QAr,YFe,WAr,HAr,UAr,St,pL,JAr,KFe,YAr,KAr,_f,ZAr,ZFe,e0r,o0r,qW,r0r,t0r,a0r,eve,n0r,s0r,_L,l0r,Ro,uL,i0r,ove,d0r,c0r,Pn,f0r,rve,m0r,g0r,tve,h0r,p0r,ave,_0r,u0r,b0r,Fe,M4,nve,F0r,v0r,NW,T0r,M0r,E0r,E4,sve,C0r,w0r,jW,A0r,y0r,L0r,C4,lve,x0r,k0r,DW,S0r,R0r,B0r,w4,ive,P0r,$0r,GW,I0r,q0r,N0r,A4,dve,j0r,D0r,OW,G0r,O0r,V0r,y4,cve,X0r,z0r,VW,Q0r,W0r,H0r,L4,fve,U0r,J0r,XW,Y0r,K0r,Z0r,x4,mve,eyr,oyr,zW,ryr,tyr,ayr,k4,gve,nyr,syr,QW,lyr,iyr,dyr,S4,hve,cyr,fyr,WW,myr,gyr,hyr,pve,pyr,_yr,bL,bBe,uf,R4,_ve,FL,uyr,uve,byr,FBe,Nr,vL,Fyr,bf,vyr,HW,Tyr,Myr,UW,Eyr,Cyr,wyr,TL,Ayr,bve,yyr,Lyr,xyr,Rt,ML,kyr,Fve,Syr,Ryr,Ff,Byr,vve,Pyr,$yr,JW,Iyr,qyr,Nyr,Tve,jyr,Dyr,EL,Gyr,Bo,CL,Oyr,Mve,Vyr,Xyr,$n,zyr,Eve,Qyr,Wyr,Cve,Hyr,Uyr,wve,Jyr,Yyr,Kyr,ve,B4,Ave,Zyr,eLr,YW,oLr,rLr,tLr,P4,yve,aLr,nLr,KW,sLr,lLr,iLr,$4,Lve,dLr,cLr,ZW,fLr,mLr,gLr,I4,xve,hLr,pLr,eH,_Lr,uLr,bLr,q4,kve,FLr,vLr,oH,TLr,MLr,ELr,N4,Sve,CLr,wLr,rH,ALr,yLr,LLr,j4,Rve,xLr,kLr,tH,SLr,RLr,BLr,D4,Bve,PLr,$Lr,aH,ILr,qLr,NLr,G4,Pve,jLr,DLr,nH,GLr,OLr,VLr,O4,$ve,XLr,zLr,sH,QLr,WLr,HLr,Ive,ULr,JLr,wL,vBe,vf,V4,qve,AL,YLr,Nve,KLr,TBe,jr,yL,ZLr,Tf,e8r,lH,o8r,r8r,iH,t8r,a8r,n8r,LL,s8r,jve,l8r,i8r,d8r,Bt,xL,c8r,Dve,f8r,m8r,Mf,g8r,Gve,h8r,p8r,dH,_8r,u8r,b8r,Ove,F8r,v8r,kL,T8r,Po,SL,M8r,Vve,E8r,C8r,In,w8r,Xve,A8r,y8r,zve,L8r,x8r,Qve,k8r,S8r,R8r,Be,X4,Wve,B8r,P8r,cH,$8r,I8r,q8r,z4,Hve,N8r,j8r,fH,D8r,G8r,O8r,Q4,Uve,V8r,X8r,mH,z8r,Q8r,W8r,W4,Jve,H8r,U8r,gH,J8r,Y8r,K8r,H4,Yve,Z8r,e9r,hH,o9r,r9r,t9r,U4,Kve,a9r,n9r,pH,s9r,l9r,i9r,J4,Zve,d9r,c9r,_H,f9r,m9r,g9r,Y4,e6e,h9r,p9r,uH,_9r,u9r,b9r,o6e,F9r,v9r,RL,MBe,Ef,K4,r6e,BL,T9r,t6e,M9r,EBe,Dr,PL,E9r,Cf,C9r,bH,w9r,A9r,FH,y9r,L9r,x9r,$L,k9r,a6e,S9r,R9r,B9r,Pt,IL,P9r,n6e,$9r,I9r,wf,q9r,s6e,N9r,j9r,vH,D9r,G9r,O9r,l6e,V9r,X9r,qL,z9r,$o,NL,Q9r,i6e,W9r,H9r,qn,U9r,d6e,J9r,Y9r,c6e,K9r,Z9r,f6e,exr,oxr,rxr,Pe,Z4,m6e,txr,axr,TH,nxr,sxr,lxr,eE,g6e,ixr,dxr,MH,cxr,fxr,mxr,oE,h6e,gxr,hxr,EH,pxr,_xr,uxr,rE,p6e,bxr,Fxr,CH,vxr,Txr,Mxr,tE,_6e,Exr,Cxr,wH,wxr,Axr,yxr,aE,u6e,Lxr,xxr,AH,kxr,Sxr,Rxr,nE,b6e,Bxr,Pxr,yH,$xr,Ixr,qxr,sE,F6e,Nxr,jxr,LH,Dxr,Gxr,Oxr,v6e,Vxr,Xxr,jL,CBe,Af,lE,T6e,DL,zxr,M6e,Qxr,wBe,Gr,GL,Wxr,yf,Hxr,xH,Uxr,Jxr,kH,Yxr,Kxr,Zxr,OL,ekr,E6e,okr,rkr,tkr,$t,VL,akr,C6e,nkr,skr,Lf,lkr,w6e,ikr,dkr,SH,ckr,fkr,mkr,A6e,gkr,hkr,XL,pkr,Io,zL,_kr,y6e,ukr,bkr,Nn,Fkr,L6e,vkr,Tkr,x6e,Mkr,Ekr,k6e,Ckr,wkr,Akr,S6e,iE,R6e,ykr,Lkr,RH,xkr,kkr,Skr,B6e,Rkr,Bkr,QL,ABe,xf,dE,P6e,WL,Pkr,$6e,$kr,yBe,Or,HL,Ikr,kf,qkr,BH,Nkr,jkr,PH,Dkr,Gkr,Okr,UL,Vkr,I6e,Xkr,zkr,Qkr,It,JL,Wkr,q6e,Hkr,Ukr,Sf,Jkr,N6e,Ykr,Kkr,$H,Zkr,eSr,oSr,j6e,rSr,tSr,YL,aSr,qo,KL,nSr,D6e,sSr,lSr,jn,iSr,G6e,dSr,cSr,O6e,fSr,mSr,V6e,gSr,hSr,pSr,ZL,cE,X6e,_Sr,uSr,IH,bSr,FSr,vSr,fE,z6e,TSr,MSr,qH,ESr,CSr,wSr,Q6e,ASr,ySr,e8,LBe,Rf,mE,W6e,o8,LSr,H6e,xSr,xBe,Vr,r8,kSr,Bf,SSr,NH,RSr,BSr,jH,PSr,$Sr,ISr,t8,qSr,U6e,NSr,jSr,DSr,qt,a8,GSr,J6e,OSr,VSr,Pf,XSr,Y6e,zSr,QSr,DH,WSr,HSr,USr,K6e,JSr,YSr,n8,KSr,No,s8,ZSr,Z6e,eRr,oRr,Dn,rRr,eTe,tRr,aRr,oTe,nRr,sRr,rTe,lRr,iRr,dRr,tTe,gE,aTe,cRr,fRr,GH,mRr,gRr,hRr,nTe,pRr,_Rr,l8,kBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uC=new X({}),bC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uRr({props:{warning:!0,$$slots:{default:[B4t]},$$scope:{ctx:If}}}),FC=new X({}),vC=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/configuration_auto.py#L541"}}),EC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),CC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),wC=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),AC=new X({}),yC=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/tokenization_auto.py#L351"}}),kC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16371/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),SC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),RC=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),BC=new X({}),PC=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),qC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16371/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new uRr({props:{$$slots:{default:[P4t]},$$scope:{ctx:If}}}),NC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),jC=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),DC=new X({}),GC=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/processing_auto.py#L70"}}),XC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new uRr({props:{$$slots:{default:[$4t]},$$scope:{ctx:If}}}),zC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),QC=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),WC=new X({}),HC=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L707"}}),JC=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),YC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),KC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e5=new X({}),o5=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L714"}}),t5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),n5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l5=new X({}),i5=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L729"}}),c5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),m5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h5=new X({}),p5=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L736"}}),u5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),b5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),F5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T5=new X({}),M5=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L743"}}),C5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),w5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),A5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L5=new X({}),x5=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L752"}}),S5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),R5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),B5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$5=new X({}),I5=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L786"}}),N5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),j5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),D5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O5=new X({}),V5=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L793"}}),z5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Q5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),W5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U5=new X({}),J5=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L779"}}),K5=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Z5=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L761"}}),nw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L768"}}),mw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),hw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L802"}}),Fw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),Cw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L841"}}),Aw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Sw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L848"}}),Bw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),$w=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Nw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L871"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Ow=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),zw=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L855"}}),Ww=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Uw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L862"}}),eA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),rA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L880"}}),iA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),cA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L887"}}),pA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),uA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),vA=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L834"}}),MA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),yA=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L809"}}),xA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),SA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),PA=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L816"}}),IA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),NA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),GA=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_auto.py#L825"}}),VA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),zA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),HA=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),JA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),KA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),t0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),n0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),c0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),m0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),p0=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),u0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),F0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new X({}),E0=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),w0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),y0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new X({}),k0=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),R0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),P0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),q0=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),j0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),G0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new X({}),X0=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),Q0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),H0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Z0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),oy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),sy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),iy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),gy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),py=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),vy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),My=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),wy=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),yy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),xy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Ry=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Py=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Vy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Qy=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Hy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Jy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),oL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),tL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),iL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),cL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),pL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),uL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),vL=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),ML=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),CL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),yL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),xL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),SL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),PL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),IL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),NL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new X({}),GL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),VL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),zL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WL=new X({}),HL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),JL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),KL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o8=new X({}),r8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),a8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),s8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16371/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16371/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16371/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),gC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),hC=o("AutoConfig"),On=o(", "),Vn=a("a"),pC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),_C=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),n9=o("will create a model that is an instance of "),Oi=a("a"),s9=o("BertModel"),l9=o("."),zo=l(),Ga=a("p"),i9=o("There is one class of "),Df=a("code"),d9=o("AutoModel"),O$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xSe=l(),Vi=a("h2"),Gf=a("a"),$J=a("span"),f(uC.$$.fragment),V$e=l(),IJ=a("span"),X$e=o("Extending the Auto Classes"),kSe=l(),zn=a("p"),z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qJ=a("code"),Q$e=o("NewModel"),W$e=o(", make sure you have a "),NJ=a("code"),H$e=o("NewModelConfig"),U$e=o(` then you can add those to the auto
classes like this:`),SSe=l(),f(bC.$$.fragment),RSe=l(),c9=a("p"),J$e=o("You will then be able to use the auto classes like you would usually do!"),BSe=l(),f(Of.$$.fragment),PSe=l(),Xi=a("h2"),Vf=a("a"),jJ=a("span"),f(FC.$$.fragment),Y$e=l(),DJ=a("span"),K$e=o("AutoConfig"),$Se=l(),Qo=a("div"),f(vC.$$.fragment),Z$e=l(),TC=a("p"),eIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=a("a"),oIe=o("from_pretrained()"),rIe=o(" class method."),tIe=l(),MC=a("p"),aIe=o("This class cannot be instantiated directly using "),GJ=a("code"),nIe=o("__init__()"),sIe=o(" (throws an error)."),lIe=l(),mo=a("div"),f(EC.$$.fragment),iIe=l(),OJ=a("p"),dIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cIe=l(),zi=a("p"),fIe=o("The configuration class to instantiate is selected based on the "),VJ=a("code"),mIe=o("model_type"),gIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XJ=a("code"),hIe=o("pretrained_model_name_or_path"),pIe=o(":"),_Ie=l(),F=a("ul"),Xf=a("li"),zJ=a("strong"),uIe=o("albert"),bIe=o(" \u2014 "),m9=a("a"),FIe=o("AlbertConfig"),vIe=o(" (ALBERT model)"),TIe=l(),zf=a("li"),QJ=a("strong"),MIe=o("bart"),EIe=o(" \u2014 "),g9=a("a"),CIe=o("BartConfig"),wIe=o(" (BART model)"),AIe=l(),Qf=a("li"),WJ=a("strong"),yIe=o("beit"),LIe=o(" \u2014 "),h9=a("a"),xIe=o("BeitConfig"),kIe=o(" (BEiT model)"),SIe=l(),Wf=a("li"),HJ=a("strong"),RIe=o("bert"),BIe=o(" \u2014 "),p9=a("a"),PIe=o("BertConfig"),$Ie=o(" (BERT model)"),IIe=l(),Hf=a("li"),UJ=a("strong"),qIe=o("bert-generation"),NIe=o(" \u2014 "),_9=a("a"),jIe=o("BertGenerationConfig"),DIe=o(" (Bert Generation model)"),GIe=l(),Uf=a("li"),JJ=a("strong"),OIe=o("big_bird"),VIe=o(" \u2014 "),u9=a("a"),XIe=o("BigBirdConfig"),zIe=o(" (BigBird model)"),QIe=l(),Jf=a("li"),YJ=a("strong"),WIe=o("bigbird_pegasus"),HIe=o(" \u2014 "),b9=a("a"),UIe=o("BigBirdPegasusConfig"),JIe=o(" (BigBirdPegasus model)"),YIe=l(),Yf=a("li"),KJ=a("strong"),KIe=o("blenderbot"),ZIe=o(" \u2014 "),F9=a("a"),eqe=o("BlenderbotConfig"),oqe=o(" (Blenderbot model)"),rqe=l(),Kf=a("li"),ZJ=a("strong"),tqe=o("blenderbot-small"),aqe=o(" \u2014 "),v9=a("a"),nqe=o("BlenderbotSmallConfig"),sqe=o(" (BlenderbotSmall model)"),lqe=l(),Zf=a("li"),eY=a("strong"),iqe=o("camembert"),dqe=o(" \u2014 "),T9=a("a"),cqe=o("CamembertConfig"),fqe=o(" (CamemBERT model)"),mqe=l(),em=a("li"),oY=a("strong"),gqe=o("canine"),hqe=o(" \u2014 "),M9=a("a"),pqe=o("CanineConfig"),_qe=o(" (Canine model)"),uqe=l(),om=a("li"),rY=a("strong"),bqe=o("clip"),Fqe=o(" \u2014 "),E9=a("a"),vqe=o("CLIPConfig"),Tqe=o(" (CLIP model)"),Mqe=l(),rm=a("li"),tY=a("strong"),Eqe=o("convbert"),Cqe=o(" \u2014 "),C9=a("a"),wqe=o("ConvBertConfig"),Aqe=o(" (ConvBERT model)"),yqe=l(),tm=a("li"),aY=a("strong"),Lqe=o("convnext"),xqe=o(" \u2014 "),w9=a("a"),kqe=o("ConvNextConfig"),Sqe=o(" (ConvNext model)"),Rqe=l(),am=a("li"),nY=a("strong"),Bqe=o("ctrl"),Pqe=o(" \u2014 "),A9=a("a"),$qe=o("CTRLConfig"),Iqe=o(" (CTRL model)"),qqe=l(),nm=a("li"),sY=a("strong"),Nqe=o("data2vec-audio"),jqe=o(" \u2014 "),y9=a("a"),Dqe=o("Data2VecAudioConfig"),Gqe=o(" (Data2VecAudio model)"),Oqe=l(),sm=a("li"),lY=a("strong"),Vqe=o("data2vec-text"),Xqe=o(" \u2014 "),L9=a("a"),zqe=o("Data2VecTextConfig"),Qqe=o(" (Data2VecText model)"),Wqe=l(),lm=a("li"),iY=a("strong"),Hqe=o("deberta"),Uqe=o(" \u2014 "),x9=a("a"),Jqe=o("DebertaConfig"),Yqe=o(" (DeBERTa model)"),Kqe=l(),im=a("li"),dY=a("strong"),Zqe=o("deberta-v2"),eNe=o(" \u2014 "),k9=a("a"),oNe=o("DebertaV2Config"),rNe=o(" (DeBERTa-v2 model)"),tNe=l(),dm=a("li"),cY=a("strong"),aNe=o("decision_transformer"),nNe=o(" \u2014 "),S9=a("a"),sNe=o("DecisionTransformerConfig"),lNe=o(" (Decision Transformer model)"),iNe=l(),cm=a("li"),fY=a("strong"),dNe=o("deit"),cNe=o(" \u2014 "),R9=a("a"),fNe=o("DeiTConfig"),mNe=o(" (DeiT model)"),gNe=l(),fm=a("li"),mY=a("strong"),hNe=o("detr"),pNe=o(" \u2014 "),B9=a("a"),_Ne=o("DetrConfig"),uNe=o(" (DETR model)"),bNe=l(),mm=a("li"),gY=a("strong"),FNe=o("distilbert"),vNe=o(" \u2014 "),P9=a("a"),TNe=o("DistilBertConfig"),MNe=o(" (DistilBERT model)"),ENe=l(),gm=a("li"),hY=a("strong"),CNe=o("dpr"),wNe=o(" \u2014 "),$9=a("a"),ANe=o("DPRConfig"),yNe=o(" (DPR model)"),LNe=l(),hm=a("li"),pY=a("strong"),xNe=o("dpt"),kNe=o(" \u2014 "),I9=a("a"),SNe=o("DPTConfig"),RNe=o(" (DPT model)"),BNe=l(),pm=a("li"),_Y=a("strong"),PNe=o("electra"),$Ne=o(" \u2014 "),q9=a("a"),INe=o("ElectraConfig"),qNe=o(" (ELECTRA model)"),NNe=l(),_m=a("li"),uY=a("strong"),jNe=o("encoder-decoder"),DNe=o(" \u2014 "),N9=a("a"),GNe=o("EncoderDecoderConfig"),ONe=o(" (Encoder decoder model)"),VNe=l(),um=a("li"),bY=a("strong"),XNe=o("flaubert"),zNe=o(" \u2014 "),j9=a("a"),QNe=o("FlaubertConfig"),WNe=o(" (FlauBERT model)"),HNe=l(),bm=a("li"),FY=a("strong"),UNe=o("fnet"),JNe=o(" \u2014 "),D9=a("a"),YNe=o("FNetConfig"),KNe=o(" (FNet model)"),ZNe=l(),Fm=a("li"),vY=a("strong"),eje=o("fsmt"),oje=o(" \u2014 "),G9=a("a"),rje=o("FSMTConfig"),tje=o(" (FairSeq Machine-Translation model)"),aje=l(),vm=a("li"),TY=a("strong"),nje=o("funnel"),sje=o(" \u2014 "),O9=a("a"),lje=o("FunnelConfig"),ije=o(" (Funnel Transformer model)"),dje=l(),Tm=a("li"),MY=a("strong"),cje=o("glpn"),fje=o(" \u2014 "),V9=a("a"),mje=o("GLPNConfig"),gje=o(" (GLPN model)"),hje=l(),Mm=a("li"),EY=a("strong"),pje=o("gpt2"),_je=o(" \u2014 "),X9=a("a"),uje=o("GPT2Config"),bje=o(" (OpenAI GPT-2 model)"),Fje=l(),Em=a("li"),CY=a("strong"),vje=o("gpt_neo"),Tje=o(" \u2014 "),z9=a("a"),Mje=o("GPTNeoConfig"),Eje=o(" (GPT Neo model)"),Cje=l(),Cm=a("li"),wY=a("strong"),wje=o("gptj"),Aje=o(" \u2014 "),Q9=a("a"),yje=o("GPTJConfig"),Lje=o(" (GPT-J model)"),xje=l(),wm=a("li"),AY=a("strong"),kje=o("hubert"),Sje=o(" \u2014 "),W9=a("a"),Rje=o("HubertConfig"),Bje=o(" (Hubert model)"),Pje=l(),Am=a("li"),yY=a("strong"),$je=o("ibert"),Ije=o(" \u2014 "),H9=a("a"),qje=o("IBertConfig"),Nje=o(" (I-BERT model)"),jje=l(),ym=a("li"),LY=a("strong"),Dje=o("imagegpt"),Gje=o(" \u2014 "),U9=a("a"),Oje=o("ImageGPTConfig"),Vje=o(" (ImageGPT model)"),Xje=l(),Lm=a("li"),xY=a("strong"),zje=o("layoutlm"),Qje=o(" \u2014 "),J9=a("a"),Wje=o("LayoutLMConfig"),Hje=o(" (LayoutLM model)"),Uje=l(),xm=a("li"),kY=a("strong"),Jje=o("layoutlmv2"),Yje=o(" \u2014 "),Y9=a("a"),Kje=o("LayoutLMv2Config"),Zje=o(" (LayoutLMv2 model)"),eDe=l(),km=a("li"),SY=a("strong"),oDe=o("led"),rDe=o(" \u2014 "),K9=a("a"),tDe=o("LEDConfig"),aDe=o(" (LED model)"),nDe=l(),Sm=a("li"),RY=a("strong"),sDe=o("longformer"),lDe=o(" \u2014 "),Z9=a("a"),iDe=o("LongformerConfig"),dDe=o(" (Longformer model)"),cDe=l(),Rm=a("li"),BY=a("strong"),fDe=o("luke"),mDe=o(" \u2014 "),ex=a("a"),gDe=o("LukeConfig"),hDe=o(" (LUKE model)"),pDe=l(),Bm=a("li"),PY=a("strong"),_De=o("lxmert"),uDe=o(" \u2014 "),ox=a("a"),bDe=o("LxmertConfig"),FDe=o(" (LXMERT model)"),vDe=l(),Pm=a("li"),$Y=a("strong"),TDe=o("m2m_100"),MDe=o(" \u2014 "),rx=a("a"),EDe=o("M2M100Config"),CDe=o(" (M2M100 model)"),wDe=l(),$m=a("li"),IY=a("strong"),ADe=o("marian"),yDe=o(" \u2014 "),tx=a("a"),LDe=o("MarianConfig"),xDe=o(" (Marian model)"),kDe=l(),Im=a("li"),qY=a("strong"),SDe=o("maskformer"),RDe=o(" \u2014 "),ax=a("a"),BDe=o("MaskFormerConfig"),PDe=o(" (MaskFormer model)"),$De=l(),qm=a("li"),NY=a("strong"),IDe=o("mbart"),qDe=o(" \u2014 "),nx=a("a"),NDe=o("MBartConfig"),jDe=o(" (mBART model)"),DDe=l(),Nm=a("li"),jY=a("strong"),GDe=o("megatron-bert"),ODe=o(" \u2014 "),sx=a("a"),VDe=o("MegatronBertConfig"),XDe=o(" (MegatronBert model)"),zDe=l(),jm=a("li"),DY=a("strong"),QDe=o("mobilebert"),WDe=o(" \u2014 "),lx=a("a"),HDe=o("MobileBertConfig"),UDe=o(" (MobileBERT model)"),JDe=l(),Dm=a("li"),GY=a("strong"),YDe=o("mpnet"),KDe=o(" \u2014 "),ix=a("a"),ZDe=o("MPNetConfig"),eGe=o(" (MPNet model)"),oGe=l(),Gm=a("li"),OY=a("strong"),rGe=o("mt5"),tGe=o(" \u2014 "),dx=a("a"),aGe=o("MT5Config"),nGe=o(" (mT5 model)"),sGe=l(),Om=a("li"),VY=a("strong"),lGe=o("nystromformer"),iGe=o(" \u2014 "),cx=a("a"),dGe=o("NystromformerConfig"),cGe=o(" (Nystromformer model)"),fGe=l(),Vm=a("li"),XY=a("strong"),mGe=o("openai-gpt"),gGe=o(" \u2014 "),fx=a("a"),hGe=o("OpenAIGPTConfig"),pGe=o(" (OpenAI GPT model)"),_Ge=l(),Xm=a("li"),zY=a("strong"),uGe=o("pegasus"),bGe=o(" \u2014 "),mx=a("a"),FGe=o("PegasusConfig"),vGe=o(" (Pegasus model)"),TGe=l(),zm=a("li"),QY=a("strong"),MGe=o("perceiver"),EGe=o(" \u2014 "),gx=a("a"),CGe=o("PerceiverConfig"),wGe=o(" (Perceiver model)"),AGe=l(),Qm=a("li"),WY=a("strong"),yGe=o("plbart"),LGe=o(" \u2014 "),hx=a("a"),xGe=o("PLBartConfig"),kGe=o(" (PLBart model)"),SGe=l(),Wm=a("li"),HY=a("strong"),RGe=o("poolformer"),BGe=o(" \u2014 "),px=a("a"),PGe=o("PoolFormerConfig"),$Ge=o(" (PoolFormer model)"),IGe=l(),Hm=a("li"),UY=a("strong"),qGe=o("prophetnet"),NGe=o(" \u2014 "),_x=a("a"),jGe=o("ProphetNetConfig"),DGe=o(" (ProphetNet model)"),GGe=l(),Um=a("li"),JY=a("strong"),OGe=o("qdqbert"),VGe=o(" \u2014 "),ux=a("a"),XGe=o("QDQBertConfig"),zGe=o(" (QDQBert model)"),QGe=l(),Jm=a("li"),YY=a("strong"),WGe=o("rag"),HGe=o(" \u2014 "),bx=a("a"),UGe=o("RagConfig"),JGe=o(" (RAG model)"),YGe=l(),Ym=a("li"),KY=a("strong"),KGe=o("realm"),ZGe=o(" \u2014 "),Fx=a("a"),eOe=o("RealmConfig"),oOe=o(" (Realm model)"),rOe=l(),Km=a("li"),ZY=a("strong"),tOe=o("reformer"),aOe=o(" \u2014 "),vx=a("a"),nOe=o("ReformerConfig"),sOe=o(" (Reformer model)"),lOe=l(),Zm=a("li"),eK=a("strong"),iOe=o("rembert"),dOe=o(" \u2014 "),Tx=a("a"),cOe=o("RemBertConfig"),fOe=o(" (RemBERT model)"),mOe=l(),eg=a("li"),oK=a("strong"),gOe=o("resnet"),hOe=o(" \u2014 "),Mx=a("a"),pOe=o("ResNetConfig"),_Oe=o(" (ResNet model)"),uOe=l(),og=a("li"),rK=a("strong"),bOe=o("retribert"),FOe=o(" \u2014 "),Ex=a("a"),vOe=o("RetriBertConfig"),TOe=o(" (RetriBERT model)"),MOe=l(),rg=a("li"),tK=a("strong"),EOe=o("roberta"),COe=o(" \u2014 "),Cx=a("a"),wOe=o("RobertaConfig"),AOe=o(" (RoBERTa model)"),yOe=l(),tg=a("li"),aK=a("strong"),LOe=o("roformer"),xOe=o(" \u2014 "),wx=a("a"),kOe=o("RoFormerConfig"),SOe=o(" (RoFormer model)"),ROe=l(),ag=a("li"),nK=a("strong"),BOe=o("segformer"),POe=o(" \u2014 "),Ax=a("a"),$Oe=o("SegformerConfig"),IOe=o(" (SegFormer model)"),qOe=l(),ng=a("li"),sK=a("strong"),NOe=o("sew"),jOe=o(" \u2014 "),yx=a("a"),DOe=o("SEWConfig"),GOe=o(" (SEW model)"),OOe=l(),sg=a("li"),lK=a("strong"),VOe=o("sew-d"),XOe=o(" \u2014 "),Lx=a("a"),zOe=o("SEWDConfig"),QOe=o(" (SEW-D model)"),WOe=l(),lg=a("li"),iK=a("strong"),HOe=o("speech-encoder-decoder"),UOe=o(" \u2014 "),xx=a("a"),JOe=o("SpeechEncoderDecoderConfig"),YOe=o(" (Speech Encoder decoder model)"),KOe=l(),ig=a("li"),dK=a("strong"),ZOe=o("speech_to_text"),eVe=o(" \u2014 "),kx=a("a"),oVe=o("Speech2TextConfig"),rVe=o(" (Speech2Text model)"),tVe=l(),dg=a("li"),cK=a("strong"),aVe=o("speech_to_text_2"),nVe=o(" \u2014 "),Sx=a("a"),sVe=o("Speech2Text2Config"),lVe=o(" (Speech2Text2 model)"),iVe=l(),cg=a("li"),fK=a("strong"),dVe=o("splinter"),cVe=o(" \u2014 "),Rx=a("a"),fVe=o("SplinterConfig"),mVe=o(" (Splinter model)"),gVe=l(),fg=a("li"),mK=a("strong"),hVe=o("squeezebert"),pVe=o(" \u2014 "),Bx=a("a"),_Ve=o("SqueezeBertConfig"),uVe=o(" (SqueezeBERT model)"),bVe=l(),mg=a("li"),gK=a("strong"),FVe=o("swin"),vVe=o(" \u2014 "),Px=a("a"),TVe=o("SwinConfig"),MVe=o(" (Swin model)"),EVe=l(),gg=a("li"),hK=a("strong"),CVe=o("t5"),wVe=o(" \u2014 "),$x=a("a"),AVe=o("T5Config"),yVe=o(" (T5 model)"),LVe=l(),hg=a("li"),pK=a("strong"),xVe=o("tapas"),kVe=o(" \u2014 "),Ix=a("a"),SVe=o("TapasConfig"),RVe=o(" (TAPAS model)"),BVe=l(),pg=a("li"),_K=a("strong"),PVe=o("transfo-xl"),$Ve=o(" \u2014 "),qx=a("a"),IVe=o("TransfoXLConfig"),qVe=o(" (Transformer-XL model)"),NVe=l(),_g=a("li"),uK=a("strong"),jVe=o("trocr"),DVe=o(" \u2014 "),Nx=a("a"),GVe=o("TrOCRConfig"),OVe=o(" (TrOCR model)"),VVe=l(),ug=a("li"),bK=a("strong"),XVe=o("unispeech"),zVe=o(" \u2014 "),jx=a("a"),QVe=o("UniSpeechConfig"),WVe=o(" (UniSpeech model)"),HVe=l(),bg=a("li"),FK=a("strong"),UVe=o("unispeech-sat"),JVe=o(" \u2014 "),Dx=a("a"),YVe=o("UniSpeechSatConfig"),KVe=o(" (UniSpeechSat model)"),ZVe=l(),Fg=a("li"),vK=a("strong"),eXe=o("van"),oXe=o(" \u2014 "),Gx=a("a"),rXe=o("VanConfig"),tXe=o(" (VAN model)"),aXe=l(),vg=a("li"),TK=a("strong"),nXe=o("vilt"),sXe=o(" \u2014 "),Ox=a("a"),lXe=o("ViltConfig"),iXe=o(" (ViLT model)"),dXe=l(),Tg=a("li"),MK=a("strong"),cXe=o("vision-encoder-decoder"),fXe=o(" \u2014 "),Vx=a("a"),mXe=o("VisionEncoderDecoderConfig"),gXe=o(" (Vision Encoder decoder model)"),hXe=l(),Mg=a("li"),EK=a("strong"),pXe=o("vision-text-dual-encoder"),_Xe=o(" \u2014 "),Xx=a("a"),uXe=o("VisionTextDualEncoderConfig"),bXe=o(" (VisionTextDualEncoder model)"),FXe=l(),Eg=a("li"),CK=a("strong"),vXe=o("visual_bert"),TXe=o(" \u2014 "),zx=a("a"),MXe=o("VisualBertConfig"),EXe=o(" (VisualBert model)"),CXe=l(),Cg=a("li"),wK=a("strong"),wXe=o("vit"),AXe=o(" \u2014 "),Qx=a("a"),yXe=o("ViTConfig"),LXe=o(" (ViT model)"),xXe=l(),wg=a("li"),AK=a("strong"),kXe=o("vit_mae"),SXe=o(" \u2014 "),Wx=a("a"),RXe=o("ViTMAEConfig"),BXe=o(" (ViTMAE model)"),PXe=l(),Ag=a("li"),yK=a("strong"),$Xe=o("wav2vec2"),IXe=o(" \u2014 "),Hx=a("a"),qXe=o("Wav2Vec2Config"),NXe=o(" (Wav2Vec2 model)"),jXe=l(),yg=a("li"),LK=a("strong"),DXe=o("wavlm"),GXe=o(" \u2014 "),Ux=a("a"),OXe=o("WavLMConfig"),VXe=o(" (WavLM model)"),XXe=l(),Lg=a("li"),xK=a("strong"),zXe=o("xglm"),QXe=o(" \u2014 "),Jx=a("a"),WXe=o("XGLMConfig"),HXe=o(" (XGLM model)"),UXe=l(),xg=a("li"),kK=a("strong"),JXe=o("xlm"),YXe=o(" \u2014 "),Yx=a("a"),KXe=o("XLMConfig"),ZXe=o(" (XLM model)"),eze=l(),kg=a("li"),SK=a("strong"),oze=o("xlm-prophetnet"),rze=o(" \u2014 "),Kx=a("a"),tze=o("XLMProphetNetConfig"),aze=o(" (XLMProphetNet model)"),nze=l(),Sg=a("li"),RK=a("strong"),sze=o("xlm-roberta"),lze=o(" \u2014 "),Zx=a("a"),ize=o("XLMRobertaConfig"),dze=o(" (XLM-RoBERTa model)"),cze=l(),Rg=a("li"),BK=a("strong"),fze=o("xlm-roberta-xl"),mze=o(" \u2014 "),ek=a("a"),gze=o("XLMRobertaXLConfig"),hze=o(" (XLM-RoBERTa-XL model)"),pze=l(),Bg=a("li"),PK=a("strong"),_ze=o("xlnet"),uze=o(" \u2014 "),ok=a("a"),bze=o("XLNetConfig"),Fze=o(" (XLNet model)"),vze=l(),Pg=a("li"),$K=a("strong"),Tze=o("yoso"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("YosoConfig"),Cze=o(" (YOSO model)"),wze=l(),IK=a("p"),Aze=o("Examples:"),yze=l(),f(CC.$$.fragment),Lze=l(),$g=a("div"),f(wC.$$.fragment),xze=l(),qK=a("p"),kze=o("Register a new configuration for this class."),ISe=l(),Qi=a("h2"),Ig=a("a"),NK=a("span"),f(AC.$$.fragment),Sze=l(),jK=a("span"),Rze=o("AutoTokenizer"),qSe=l(),Wo=a("div"),f(yC.$$.fragment),Bze=l(),LC=a("p"),Pze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tk=a("a"),$ze=o("AutoTokenizer.from_pretrained()"),Ize=o(" class method."),qze=l(),xC=a("p"),Nze=o("This class cannot be instantiated directly using "),DK=a("code"),jze=o("__init__()"),Dze=o(" (throws an error)."),Gze=l(),go=a("div"),f(kC.$$.fragment),Oze=l(),GK=a("p"),Vze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Xze=l(),Oa=a("p"),zze=o("The tokenizer class to instantiate is selected based on the "),OK=a("code"),Qze=o("model_type"),Wze=o(` property of the config object (either
passed as an argument or loaded from `),VK=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XK=a("code"),Jze=o("pretrained_model_name_or_path"),Yze=o(":"),Kze=l(),C=a("ul"),Qn=a("li"),zK=a("strong"),Zze=o("albert"),eQe=o(" \u2014 "),ak=a("a"),oQe=o("AlbertTokenizer"),rQe=o(" or "),nk=a("a"),tQe=o("AlbertTokenizerFast"),aQe=o(" (ALBERT model)"),nQe=l(),Wn=a("li"),QK=a("strong"),sQe=o("bart"),lQe=o(" \u2014 "),sk=a("a"),iQe=o("BartTokenizer"),dQe=o(" or "),lk=a("a"),cQe=o("BartTokenizerFast"),fQe=o(" (BART model)"),mQe=l(),Hn=a("li"),WK=a("strong"),gQe=o("barthez"),hQe=o(" \u2014 "),ik=a("a"),pQe=o("BarthezTokenizer"),_Qe=o(" or "),dk=a("a"),uQe=o("BarthezTokenizerFast"),bQe=o(" (BARThez model)"),FQe=l(),qg=a("li"),HK=a("strong"),vQe=o("bartpho"),TQe=o(" \u2014 "),ck=a("a"),MQe=o("BartphoTokenizer"),EQe=o(" (BARTpho model)"),CQe=l(),Un=a("li"),UK=a("strong"),wQe=o("bert"),AQe=o(" \u2014 "),fk=a("a"),yQe=o("BertTokenizer"),LQe=o(" or "),mk=a("a"),xQe=o("BertTokenizerFast"),kQe=o(" (BERT model)"),SQe=l(),Ng=a("li"),JK=a("strong"),RQe=o("bert-generation"),BQe=o(" \u2014 "),gk=a("a"),PQe=o("BertGenerationTokenizer"),$Qe=o(" (Bert Generation model)"),IQe=l(),jg=a("li"),YK=a("strong"),qQe=o("bert-japanese"),NQe=o(" \u2014 "),hk=a("a"),jQe=o("BertJapaneseTokenizer"),DQe=o(" (BertJapanese model)"),GQe=l(),Dg=a("li"),KK=a("strong"),OQe=o("bertweet"),VQe=o(" \u2014 "),pk=a("a"),XQe=o("BertweetTokenizer"),zQe=o(" (Bertweet model)"),QQe=l(),Jn=a("li"),ZK=a("strong"),WQe=o("big_bird"),HQe=o(" \u2014 "),_k=a("a"),UQe=o("BigBirdTokenizer"),JQe=o(" or "),uk=a("a"),YQe=o("BigBirdTokenizerFast"),KQe=o(" (BigBird model)"),ZQe=l(),Yn=a("li"),eZ=a("strong"),eWe=o("bigbird_pegasus"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("PegasusTokenizer"),tWe=o(" or "),Fk=a("a"),aWe=o("PegasusTokenizerFast"),nWe=o(" (BigBirdPegasus model)"),sWe=l(),Kn=a("li"),oZ=a("strong"),lWe=o("blenderbot"),iWe=o(" \u2014 "),vk=a("a"),dWe=o("BlenderbotTokenizer"),cWe=o(" or "),Tk=a("a"),fWe=o("BlenderbotTokenizerFast"),mWe=o(" (Blenderbot model)"),gWe=l(),Gg=a("li"),rZ=a("strong"),hWe=o("blenderbot-small"),pWe=o(" \u2014 "),Mk=a("a"),_We=o("BlenderbotSmallTokenizer"),uWe=o(" (BlenderbotSmall model)"),bWe=l(),Og=a("li"),tZ=a("strong"),FWe=o("byt5"),vWe=o(" \u2014 "),Ek=a("a"),TWe=o("ByT5Tokenizer"),MWe=o(" (ByT5 model)"),EWe=l(),Zn=a("li"),aZ=a("strong"),CWe=o("camembert"),wWe=o(" \u2014 "),Ck=a("a"),AWe=o("CamembertTokenizer"),yWe=o(" or "),wk=a("a"),LWe=o("CamembertTokenizerFast"),xWe=o(" (CamemBERT model)"),kWe=l(),Vg=a("li"),nZ=a("strong"),SWe=o("canine"),RWe=o(" \u2014 "),Ak=a("a"),BWe=o("CanineTokenizer"),PWe=o(" (Canine model)"),$We=l(),es=a("li"),sZ=a("strong"),IWe=o("clip"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("CLIPTokenizer"),jWe=o(" or "),Lk=a("a"),DWe=o("CLIPTokenizerFast"),GWe=o(" (CLIP model)"),OWe=l(),os=a("li"),lZ=a("strong"),VWe=o("convbert"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("ConvBertTokenizer"),QWe=o(" or "),kk=a("a"),WWe=o("ConvBertTokenizerFast"),HWe=o(" (ConvBERT model)"),UWe=l(),rs=a("li"),iZ=a("strong"),JWe=o("cpm"),YWe=o(" \u2014 "),Sk=a("a"),KWe=o("CpmTokenizer"),ZWe=o(" or "),dZ=a("code"),eHe=o("CpmTokenizerFast"),oHe=o(" (CPM model)"),rHe=l(),Xg=a("li"),cZ=a("strong"),tHe=o("ctrl"),aHe=o(" \u2014 "),Rk=a("a"),nHe=o("CTRLTokenizer"),sHe=o(" (CTRL model)"),lHe=l(),ts=a("li"),fZ=a("strong"),iHe=o("deberta"),dHe=o(" \u2014 "),Bk=a("a"),cHe=o("DebertaTokenizer"),fHe=o(" or "),Pk=a("a"),mHe=o("DebertaTokenizerFast"),gHe=o(" (DeBERTa model)"),hHe=l(),zg=a("li"),mZ=a("strong"),pHe=o("deberta-v2"),_He=o(" \u2014 "),$k=a("a"),uHe=o("DebertaV2Tokenizer"),bHe=o(" (DeBERTa-v2 model)"),FHe=l(),as=a("li"),gZ=a("strong"),vHe=o("distilbert"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("DistilBertTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("DistilBertTokenizerFast"),wHe=o(" (DistilBERT model)"),AHe=l(),ns=a("li"),hZ=a("strong"),yHe=o("dpr"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("DPRQuestionEncoderTokenizer"),kHe=o(" or "),jk=a("a"),SHe=o("DPRQuestionEncoderTokenizerFast"),RHe=o(" (DPR model)"),BHe=l(),ss=a("li"),pZ=a("strong"),PHe=o("electra"),$He=o(" \u2014 "),Dk=a("a"),IHe=o("ElectraTokenizer"),qHe=o(" or "),Gk=a("a"),NHe=o("ElectraTokenizerFast"),jHe=o(" (ELECTRA model)"),DHe=l(),Qg=a("li"),_Z=a("strong"),GHe=o("flaubert"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("FlaubertTokenizer"),XHe=o(" (FlauBERT model)"),zHe=l(),ls=a("li"),uZ=a("strong"),QHe=o("fnet"),WHe=o(" \u2014 "),Vk=a("a"),HHe=o("FNetTokenizer"),UHe=o(" or "),Xk=a("a"),JHe=o("FNetTokenizerFast"),YHe=o(" (FNet model)"),KHe=l(),Wg=a("li"),bZ=a("strong"),ZHe=o("fsmt"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("FSMTTokenizer"),rUe=o(" (FairSeq Machine-Translation model)"),tUe=l(),is=a("li"),FZ=a("strong"),aUe=o("funnel"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("FunnelTokenizer"),lUe=o(" or "),Wk=a("a"),iUe=o("FunnelTokenizerFast"),dUe=o(" (Funnel Transformer model)"),cUe=l(),ds=a("li"),vZ=a("strong"),fUe=o("gpt2"),mUe=o(" \u2014 "),Hk=a("a"),gUe=o("GPT2Tokenizer"),hUe=o(" or "),Uk=a("a"),pUe=o("GPT2TokenizerFast"),_Ue=o(" (OpenAI GPT-2 model)"),uUe=l(),cs=a("li"),TZ=a("strong"),bUe=o("gpt_neo"),FUe=o(" \u2014 "),Jk=a("a"),vUe=o("GPT2Tokenizer"),TUe=o(" or "),Yk=a("a"),MUe=o("GPT2TokenizerFast"),EUe=o(" (GPT Neo model)"),CUe=l(),fs=a("li"),MZ=a("strong"),wUe=o("herbert"),AUe=o(" \u2014 "),Kk=a("a"),yUe=o("HerbertTokenizer"),LUe=o(" or "),Zk=a("a"),xUe=o("HerbertTokenizerFast"),kUe=o(" (HerBERT model)"),SUe=l(),Hg=a("li"),EZ=a("strong"),RUe=o("hubert"),BUe=o(" \u2014 "),eS=a("a"),PUe=o("Wav2Vec2CTCTokenizer"),$Ue=o(" (Hubert model)"),IUe=l(),ms=a("li"),CZ=a("strong"),qUe=o("ibert"),NUe=o(" \u2014 "),oS=a("a"),jUe=o("RobertaTokenizer"),DUe=o(" or "),rS=a("a"),GUe=o("RobertaTokenizerFast"),OUe=o(" (I-BERT model)"),VUe=l(),gs=a("li"),wZ=a("strong"),XUe=o("layoutlm"),zUe=o(" \u2014 "),tS=a("a"),QUe=o("LayoutLMTokenizer"),WUe=o(" or "),aS=a("a"),HUe=o("LayoutLMTokenizerFast"),UUe=o(" (LayoutLM model)"),JUe=l(),hs=a("li"),AZ=a("strong"),YUe=o("layoutlmv2"),KUe=o(" \u2014 "),nS=a("a"),ZUe=o("LayoutLMv2Tokenizer"),eJe=o(" or "),sS=a("a"),oJe=o("LayoutLMv2TokenizerFast"),rJe=o(" (LayoutLMv2 model)"),tJe=l(),ps=a("li"),yZ=a("strong"),aJe=o("layoutxlm"),nJe=o(" \u2014 "),lS=a("a"),sJe=o("LayoutXLMTokenizer"),lJe=o(" or "),iS=a("a"),iJe=o("LayoutXLMTokenizerFast"),dJe=o(" (LayoutXLM model)"),cJe=l(),_s=a("li"),LZ=a("strong"),fJe=o("led"),mJe=o(" \u2014 "),dS=a("a"),gJe=o("LEDTokenizer"),hJe=o(" or "),cS=a("a"),pJe=o("LEDTokenizerFast"),_Je=o(" (LED model)"),uJe=l(),us=a("li"),xZ=a("strong"),bJe=o("longformer"),FJe=o(" \u2014 "),fS=a("a"),vJe=o("LongformerTokenizer"),TJe=o(" or "),mS=a("a"),MJe=o("LongformerTokenizerFast"),EJe=o(" (Longformer model)"),CJe=l(),Ug=a("li"),kZ=a("strong"),wJe=o("luke"),AJe=o(" \u2014 "),gS=a("a"),yJe=o("LukeTokenizer"),LJe=o(" (LUKE model)"),xJe=l(),bs=a("li"),SZ=a("strong"),kJe=o("lxmert"),SJe=o(" \u2014 "),hS=a("a"),RJe=o("LxmertTokenizer"),BJe=o(" or "),pS=a("a"),PJe=o("LxmertTokenizerFast"),$Je=o(" (LXMERT model)"),IJe=l(),Jg=a("li"),RZ=a("strong"),qJe=o("m2m_100"),NJe=o(" \u2014 "),_S=a("a"),jJe=o("M2M100Tokenizer"),DJe=o(" (M2M100 model)"),GJe=l(),Yg=a("li"),BZ=a("strong"),OJe=o("marian"),VJe=o(" \u2014 "),uS=a("a"),XJe=o("MarianTokenizer"),zJe=o(" (Marian model)"),QJe=l(),Fs=a("li"),PZ=a("strong"),WJe=o("mbart"),HJe=o(" \u2014 "),bS=a("a"),UJe=o("MBartTokenizer"),JJe=o(" or "),FS=a("a"),YJe=o("MBartTokenizerFast"),KJe=o(" (mBART model)"),ZJe=l(),vs=a("li"),$Z=a("strong"),eYe=o("mbart50"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("MBart50Tokenizer"),tYe=o(" or "),TS=a("a"),aYe=o("MBart50TokenizerFast"),nYe=o(" (mBART-50 model)"),sYe=l(),Kg=a("li"),IZ=a("strong"),lYe=o("mluke"),iYe=o(" \u2014 "),MS=a("a"),dYe=o("MLukeTokenizer"),cYe=o(" (mLUKE model)"),fYe=l(),Ts=a("li"),qZ=a("strong"),mYe=o("mobilebert"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("MobileBertTokenizer"),pYe=o(" or "),CS=a("a"),_Ye=o("MobileBertTokenizerFast"),uYe=o(" (MobileBERT model)"),bYe=l(),Ms=a("li"),NZ=a("strong"),FYe=o("mpnet"),vYe=o(" \u2014 "),wS=a("a"),TYe=o("MPNetTokenizer"),MYe=o(" or "),AS=a("a"),EYe=o("MPNetTokenizerFast"),CYe=o(" (MPNet model)"),wYe=l(),Es=a("li"),jZ=a("strong"),AYe=o("mt5"),yYe=o(" \u2014 "),yS=a("a"),LYe=o("MT5Tokenizer"),xYe=o(" or "),LS=a("a"),kYe=o("MT5TokenizerFast"),SYe=o(" (mT5 model)"),RYe=l(),Cs=a("li"),DZ=a("strong"),BYe=o("openai-gpt"),PYe=o(" \u2014 "),xS=a("a"),$Ye=o("OpenAIGPTTokenizer"),IYe=o(" or "),kS=a("a"),qYe=o("OpenAIGPTTokenizerFast"),NYe=o(" (OpenAI GPT model)"),jYe=l(),ws=a("li"),GZ=a("strong"),DYe=o("pegasus"),GYe=o(" \u2014 "),SS=a("a"),OYe=o("PegasusTokenizer"),VYe=o(" or "),RS=a("a"),XYe=o("PegasusTokenizerFast"),zYe=o(" (Pegasus model)"),QYe=l(),Zg=a("li"),OZ=a("strong"),WYe=o("perceiver"),HYe=o(" \u2014 "),BS=a("a"),UYe=o("PerceiverTokenizer"),JYe=o(" (Perceiver model)"),YYe=l(),eh=a("li"),VZ=a("strong"),KYe=o("phobert"),ZYe=o(" \u2014 "),PS=a("a"),eKe=o("PhobertTokenizer"),oKe=o(" (PhoBERT model)"),rKe=l(),oh=a("li"),XZ=a("strong"),tKe=o("plbart"),aKe=o(" \u2014 "),$S=a("a"),nKe=o("PLBartTokenizer"),sKe=o(" (PLBart model)"),lKe=l(),rh=a("li"),zZ=a("strong"),iKe=o("prophetnet"),dKe=o(" \u2014 "),IS=a("a"),cKe=o("ProphetNetTokenizer"),fKe=o(" (ProphetNet model)"),mKe=l(),As=a("li"),QZ=a("strong"),gKe=o("qdqbert"),hKe=o(" \u2014 "),qS=a("a"),pKe=o("BertTokenizer"),_Ke=o(" or "),NS=a("a"),uKe=o("BertTokenizerFast"),bKe=o(" (QDQBert model)"),FKe=l(),th=a("li"),WZ=a("strong"),vKe=o("rag"),TKe=o(" \u2014 "),jS=a("a"),MKe=o("RagTokenizer"),EKe=o(" (RAG model)"),CKe=l(),ys=a("li"),HZ=a("strong"),wKe=o("realm"),AKe=o(" \u2014 "),DS=a("a"),yKe=o("RealmTokenizer"),LKe=o(" or "),GS=a("a"),xKe=o("RealmTokenizerFast"),kKe=o(" (Realm model)"),SKe=l(),Ls=a("li"),UZ=a("strong"),RKe=o("reformer"),BKe=o(" \u2014 "),OS=a("a"),PKe=o("ReformerTokenizer"),$Ke=o(" or "),VS=a("a"),IKe=o("ReformerTokenizerFast"),qKe=o(" (Reformer model)"),NKe=l(),xs=a("li"),JZ=a("strong"),jKe=o("rembert"),DKe=o(" \u2014 "),XS=a("a"),GKe=o("RemBertTokenizer"),OKe=o(" or "),zS=a("a"),VKe=o("RemBertTokenizerFast"),XKe=o(" (RemBERT model)"),zKe=l(),ks=a("li"),YZ=a("strong"),QKe=o("retribert"),WKe=o(" \u2014 "),QS=a("a"),HKe=o("RetriBertTokenizer"),UKe=o(" or "),WS=a("a"),JKe=o("RetriBertTokenizerFast"),YKe=o(" (RetriBERT model)"),KKe=l(),Ss=a("li"),KZ=a("strong"),ZKe=o("roberta"),eZe=o(" \u2014 "),HS=a("a"),oZe=o("RobertaTokenizer"),rZe=o(" or "),US=a("a"),tZe=o("RobertaTokenizerFast"),aZe=o(" (RoBERTa model)"),nZe=l(),Rs=a("li"),ZZ=a("strong"),sZe=o("roformer"),lZe=o(" \u2014 "),JS=a("a"),iZe=o("RoFormerTokenizer"),dZe=o(" or "),YS=a("a"),cZe=o("RoFormerTokenizerFast"),fZe=o(" (RoFormer model)"),mZe=l(),ah=a("li"),eee=a("strong"),gZe=o("speech_to_text"),hZe=o(" \u2014 "),KS=a("a"),pZe=o("Speech2TextTokenizer"),_Ze=o(" (Speech2Text model)"),uZe=l(),nh=a("li"),oee=a("strong"),bZe=o("speech_to_text_2"),FZe=o(" \u2014 "),ZS=a("a"),vZe=o("Speech2Text2Tokenizer"),TZe=o(" (Speech2Text2 model)"),MZe=l(),Bs=a("li"),ree=a("strong"),EZe=o("splinter"),CZe=o(" \u2014 "),eR=a("a"),wZe=o("SplinterTokenizer"),AZe=o(" or "),oR=a("a"),yZe=o("SplinterTokenizerFast"),LZe=o(" (Splinter model)"),xZe=l(),Ps=a("li"),tee=a("strong"),kZe=o("squeezebert"),SZe=o(" \u2014 "),rR=a("a"),RZe=o("SqueezeBertTokenizer"),BZe=o(" or "),tR=a("a"),PZe=o("SqueezeBertTokenizerFast"),$Ze=o(" (SqueezeBERT model)"),IZe=l(),$s=a("li"),aee=a("strong"),qZe=o("t5"),NZe=o(" \u2014 "),aR=a("a"),jZe=o("T5Tokenizer"),DZe=o(" or "),nR=a("a"),GZe=o("T5TokenizerFast"),OZe=o(" (T5 model)"),VZe=l(),sh=a("li"),nee=a("strong"),XZe=o("tapas"),zZe=o(" \u2014 "),sR=a("a"),QZe=o("TapasTokenizer"),WZe=o(" (TAPAS model)"),HZe=l(),lh=a("li"),see=a("strong"),UZe=o("transfo-xl"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("TransfoXLTokenizer"),KZe=o(" (Transformer-XL model)"),ZZe=l(),ih=a("li"),lee=a("strong"),eeo=o("wav2vec2"),oeo=o(" \u2014 "),iR=a("a"),reo=o("Wav2Vec2CTCTokenizer"),teo=o(" (Wav2Vec2 model)"),aeo=l(),dh=a("li"),iee=a("strong"),neo=o("wav2vec2_phoneme"),seo=o(" \u2014 "),dR=a("a"),leo=o("Wav2Vec2PhonemeCTCTokenizer"),ieo=o(" (Wav2Vec2Phoneme model)"),deo=l(),Is=a("li"),dee=a("strong"),ceo=o("xglm"),feo=o(" \u2014 "),cR=a("a"),meo=o("XGLMTokenizer"),geo=o(" or "),fR=a("a"),heo=o("XGLMTokenizerFast"),peo=o(" (XGLM model)"),_eo=l(),ch=a("li"),cee=a("strong"),ueo=o("xlm"),beo=o(" \u2014 "),mR=a("a"),Feo=o("XLMTokenizer"),veo=o(" (XLM model)"),Teo=l(),fh=a("li"),fee=a("strong"),Meo=o("xlm-prophetnet"),Eeo=o(" \u2014 "),gR=a("a"),Ceo=o("XLMProphetNetTokenizer"),weo=o(" (XLMProphetNet model)"),Aeo=l(),qs=a("li"),mee=a("strong"),yeo=o("xlm-roberta"),Leo=o(" \u2014 "),hR=a("a"),xeo=o("XLMRobertaTokenizer"),keo=o(" or "),pR=a("a"),Seo=o("XLMRobertaTokenizerFast"),Reo=o(" (XLM-RoBERTa model)"),Beo=l(),Ns=a("li"),gee=a("strong"),Peo=o("xlnet"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("XLNetTokenizer"),qeo=o(" or "),uR=a("a"),Neo=o("XLNetTokenizerFast"),jeo=o(" (XLNet model)"),Deo=l(),hee=a("p"),Geo=o("Examples:"),Oeo=l(),f(SC.$$.fragment),Veo=l(),mh=a("div"),f(RC.$$.fragment),Xeo=l(),pee=a("p"),zeo=o("Register a new tokenizer in this mapping."),NSe=l(),Wi=a("h2"),gh=a("a"),_ee=a("span"),f(BC.$$.fragment),Qeo=l(),uee=a("span"),Weo=o("AutoFeatureExtractor"),jSe=l(),Ho=a("div"),f(PC.$$.fragment),Heo=l(),$C=a("p"),Ueo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=a("a"),Jeo=o("AutoFeatureExtractor.from_pretrained()"),Yeo=o(" class method."),Keo=l(),IC=a("p"),Zeo=o("This class cannot be instantiated directly using "),bee=a("code"),eoo=o("__init__()"),ooo=o(" (throws an error)."),roo=l(),$e=a("div"),f(qC.$$.fragment),too=l(),Fee=a("p"),aoo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),noo=l(),Va=a("p"),soo=o("The feature extractor class to instantiate is selected based on the "),vee=a("code"),loo=o("model_type"),ioo=o(` property of the config object
(either passed as an argument or loaded from `),Tee=a("code"),doo=o("pretrained_model_name_or_path"),coo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mee=a("code"),foo=o("pretrained_model_name_or_path"),moo=o(":"),goo=l(),te=a("ul"),hh=a("li"),Eee=a("strong"),hoo=o("beit"),poo=o(" \u2014 "),FR=a("a"),_oo=o("BeitFeatureExtractor"),uoo=o(" (BEiT model)"),boo=l(),ph=a("li"),Cee=a("strong"),Foo=o("clip"),voo=o(" \u2014 "),vR=a("a"),Too=o("CLIPFeatureExtractor"),Moo=o(" (CLIP model)"),Eoo=l(),_h=a("li"),wee=a("strong"),Coo=o("convnext"),woo=o(" \u2014 "),TR=a("a"),Aoo=o("ConvNextFeatureExtractor"),yoo=o(" (ConvNext model)"),Loo=l(),uh=a("li"),Aee=a("strong"),xoo=o("deit"),koo=o(" \u2014 "),MR=a("a"),Soo=o("DeiTFeatureExtractor"),Roo=o(" (DeiT model)"),Boo=l(),bh=a("li"),yee=a("strong"),Poo=o("detr"),$oo=o(" \u2014 "),ER=a("a"),Ioo=o("DetrFeatureExtractor"),qoo=o(" (DETR model)"),Noo=l(),Fh=a("li"),Lee=a("strong"),joo=o("hubert"),Doo=o(" \u2014 "),CR=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Ooo=o(" (Hubert model)"),Voo=l(),vh=a("li"),xee=a("strong"),Xoo=o("layoutlmv2"),zoo=o(" \u2014 "),wR=a("a"),Qoo=o("LayoutLMv2FeatureExtractor"),Woo=o(" (LayoutLMv2 model)"),Hoo=l(),Th=a("li"),kee=a("strong"),Uoo=o("maskformer"),Joo=o(" \u2014 "),AR=a("a"),Yoo=o("MaskFormerFeatureExtractor"),Koo=o(" (MaskFormer model)"),Zoo=l(),Mh=a("li"),See=a("strong"),ero=o("perceiver"),oro=o(" \u2014 "),yR=a("a"),rro=o("PerceiverFeatureExtractor"),tro=o(" (Perceiver model)"),aro=l(),Eh=a("li"),Ree=a("strong"),nro=o("poolformer"),sro=o(" \u2014 "),LR=a("a"),lro=o("PoolFormerFeatureExtractor"),iro=o(" (PoolFormer model)"),dro=l(),Ch=a("li"),Bee=a("strong"),cro=o("resnet"),fro=o(" \u2014 "),xR=a("a"),mro=o("ConvNextFeatureExtractor"),gro=o(" (ResNet model)"),hro=l(),wh=a("li"),Pee=a("strong"),pro=o("segformer"),_ro=o(" \u2014 "),kR=a("a"),uro=o("SegformerFeatureExtractor"),bro=o(" (SegFormer model)"),Fro=l(),Ah=a("li"),$ee=a("strong"),vro=o("speech_to_text"),Tro=o(" \u2014 "),SR=a("a"),Mro=o("Speech2TextFeatureExtractor"),Ero=o(" (Speech2Text model)"),Cro=l(),yh=a("li"),Iee=a("strong"),wro=o("swin"),Aro=o(" \u2014 "),RR=a("a"),yro=o("ViTFeatureExtractor"),Lro=o(" (Swin model)"),xro=l(),Lh=a("li"),qee=a("strong"),kro=o("van"),Sro=o(" \u2014 "),BR=a("a"),Rro=o("ConvNextFeatureExtractor"),Bro=o(" (VAN model)"),Pro=l(),xh=a("li"),Nee=a("strong"),$ro=o("vit"),Iro=o(" \u2014 "),PR=a("a"),qro=o("ViTFeatureExtractor"),Nro=o(" (ViT model)"),jro=l(),kh=a("li"),jee=a("strong"),Dro=o("vit_mae"),Gro=o(" \u2014 "),$R=a("a"),Oro=o("ViTFeatureExtractor"),Vro=o(" (ViTMAE model)"),Xro=l(),Sh=a("li"),Dee=a("strong"),zro=o("wav2vec2"),Qro=o(" \u2014 "),IR=a("a"),Wro=o("Wav2Vec2FeatureExtractor"),Hro=o(" (Wav2Vec2 model)"),Uro=l(),f(Rh.$$.fragment),Jro=l(),Gee=a("p"),Yro=o("Examples:"),Kro=l(),f(NC.$$.fragment),Zro=l(),Bh=a("div"),f(jC.$$.fragment),eto=l(),Oee=a("p"),oto=o("Register a new feature extractor for this class."),DSe=l(),Hi=a("h2"),Ph=a("a"),Vee=a("span"),f(DC.$$.fragment),rto=l(),Xee=a("span"),tto=o("AutoProcessor"),GSe=l(),Uo=a("div"),f(GC.$$.fragment),ato=l(),OC=a("p"),nto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qR=a("a"),sto=o("AutoProcessor.from_pretrained()"),lto=o(" class method."),ito=l(),VC=a("p"),dto=o("This class cannot be instantiated directly using "),zee=a("code"),cto=o("__init__()"),fto=o(" (throws an error)."),mto=l(),Ie=a("div"),f(XC.$$.fragment),gto=l(),Qee=a("p"),hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pto=l(),Ui=a("p"),_to=o("The processor class to instantiate is selected based on the "),Wee=a("code"),uto=o("model_type"),bto=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),Fto=o("pretrained_model_name_or_path"),vto=o(" if possible):"),Tto=l(),ke=a("ul"),$h=a("li"),Uee=a("strong"),Mto=o("clip"),Eto=o(" \u2014 "),NR=a("a"),Cto=o("CLIPProcessor"),wto=o(" (CLIP model)"),Ato=l(),Ih=a("li"),Jee=a("strong"),yto=o("layoutlmv2"),Lto=o(" \u2014 "),jR=a("a"),xto=o("LayoutLMv2Processor"),kto=o(" (LayoutLMv2 model)"),Sto=l(),qh=a("li"),Yee=a("strong"),Rto=o("layoutxlm"),Bto=o(" \u2014 "),DR=a("a"),Pto=o("LayoutXLMProcessor"),$to=o(" (LayoutXLM model)"),Ito=l(),Nh=a("li"),Kee=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),GR=a("a"),jto=o("Speech2TextProcessor"),Dto=o(" (Speech2Text model)"),Gto=l(),jh=a("li"),Zee=a("strong"),Oto=o("speech_to_text_2"),Vto=o(" \u2014 "),OR=a("a"),Xto=o("Speech2Text2Processor"),zto=o(" (Speech2Text2 model)"),Qto=l(),Dh=a("li"),eoe=a("strong"),Wto=o("trocr"),Hto=o(" \u2014 "),VR=a("a"),Uto=o("TrOCRProcessor"),Jto=o(" (TrOCR model)"),Yto=l(),Gh=a("li"),ooe=a("strong"),Kto=o("vision-text-dual-encoder"),Zto=o(" \u2014 "),XR=a("a"),eao=o("VisionTextDualEncoderProcessor"),oao=o(" (VisionTextDualEncoder model)"),rao=l(),Oh=a("li"),roe=a("strong"),tao=o("wav2vec2"),aao=o(" \u2014 "),zR=a("a"),nao=o("Wav2Vec2Processor"),sao=o(" (Wav2Vec2 model)"),lao=l(),f(Vh.$$.fragment),iao=l(),toe=a("p"),dao=o("Examples:"),cao=l(),f(zC.$$.fragment),fao=l(),Xh=a("div"),f(QC.$$.fragment),mao=l(),aoe=a("p"),gao=o("Register a new processor for this class."),OSe=l(),Ji=a("h2"),zh=a("a"),noe=a("span"),f(WC.$$.fragment),hao=l(),soe=a("span"),pao=o("AutoModel"),VSe=l(),Jo=a("div"),f(HC.$$.fragment),_ao=l(),Yi=a("p"),uao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QR=a("a"),bao=o("from_pretrained()"),Fao=o(" class method or the "),WR=a("a"),vao=o("from_config()"),Tao=o(` class
method.`),Mao=l(),UC=a("p"),Eao=o("This class cannot be instantiated directly using "),loe=a("code"),Cao=o("__init__()"),wao=o(" (throws an error)."),Aao=l(),Xr=a("div"),f(JC.$$.fragment),yao=l(),ioe=a("p"),Lao=o("Instantiates one of the base model classes of the library from a configuration."),xao=l(),Ki=a("p"),kao=o(`Note:
Loading a model from its configuration file does `),doe=a("strong"),Sao=o("not"),Rao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HR=a("a"),Bao=o("from_pretrained()"),Pao=o(" to load the model weights."),$ao=l(),coe=a("p"),Iao=o("Examples:"),qao=l(),f(YC.$$.fragment),Nao=l(),qe=a("div"),f(KC.$$.fragment),jao=l(),foe=a("p"),Dao=o("Instantiate one of the base model classes of the library from a pretrained model."),Gao=l(),Xa=a("p"),Oao=o("The model class to instantiate is selected based on the "),moe=a("code"),Vao=o("model_type"),Xao=o(` property of the config object (either
passed as an argument or loaded from `),goe=a("code"),zao=o("pretrained_model_name_or_path"),Qao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=a("code"),Wao=o("pretrained_model_name_or_path"),Hao=o(":"),Uao=l(),T=a("ul"),Qh=a("li"),poe=a("strong"),Jao=o("albert"),Yao=o(" \u2014 "),UR=a("a"),Kao=o("AlbertModel"),Zao=o(" (ALBERT model)"),eno=l(),Wh=a("li"),_oe=a("strong"),ono=o("bart"),rno=o(" \u2014 "),JR=a("a"),tno=o("BartModel"),ano=o(" (BART model)"),nno=l(),Hh=a("li"),uoe=a("strong"),sno=o("beit"),lno=o(" \u2014 "),YR=a("a"),ino=o("BeitModel"),dno=o(" (BEiT model)"),cno=l(),Uh=a("li"),boe=a("strong"),fno=o("bert"),mno=o(" \u2014 "),KR=a("a"),gno=o("BertModel"),hno=o(" (BERT model)"),pno=l(),Jh=a("li"),Foe=a("strong"),_no=o("bert-generation"),uno=o(" \u2014 "),ZR=a("a"),bno=o("BertGenerationEncoder"),Fno=o(" (Bert Generation model)"),vno=l(),Yh=a("li"),voe=a("strong"),Tno=o("big_bird"),Mno=o(" \u2014 "),eB=a("a"),Eno=o("BigBirdModel"),Cno=o(" (BigBird model)"),wno=l(),Kh=a("li"),Toe=a("strong"),Ano=o("bigbird_pegasus"),yno=o(" \u2014 "),oB=a("a"),Lno=o("BigBirdPegasusModel"),xno=o(" (BigBirdPegasus model)"),kno=l(),Zh=a("li"),Moe=a("strong"),Sno=o("blenderbot"),Rno=o(" \u2014 "),rB=a("a"),Bno=o("BlenderbotModel"),Pno=o(" (Blenderbot model)"),$no=l(),ep=a("li"),Eoe=a("strong"),Ino=o("blenderbot-small"),qno=o(" \u2014 "),tB=a("a"),Nno=o("BlenderbotSmallModel"),jno=o(" (BlenderbotSmall model)"),Dno=l(),op=a("li"),Coe=a("strong"),Gno=o("camembert"),Ono=o(" \u2014 "),aB=a("a"),Vno=o("CamembertModel"),Xno=o(" (CamemBERT model)"),zno=l(),rp=a("li"),woe=a("strong"),Qno=o("canine"),Wno=o(" \u2014 "),nB=a("a"),Hno=o("CanineModel"),Uno=o(" (Canine model)"),Jno=l(),tp=a("li"),Aoe=a("strong"),Yno=o("clip"),Kno=o(" \u2014 "),sB=a("a"),Zno=o("CLIPModel"),eso=o(" (CLIP model)"),oso=l(),ap=a("li"),yoe=a("strong"),rso=o("convbert"),tso=o(" \u2014 "),lB=a("a"),aso=o("ConvBertModel"),nso=o(" (ConvBERT model)"),sso=l(),np=a("li"),Loe=a("strong"),lso=o("convnext"),iso=o(" \u2014 "),iB=a("a"),dso=o("ConvNextModel"),cso=o(" (ConvNext model)"),fso=l(),sp=a("li"),xoe=a("strong"),mso=o("ctrl"),gso=o(" \u2014 "),dB=a("a"),hso=o("CTRLModel"),pso=o(" (CTRL model)"),_so=l(),lp=a("li"),koe=a("strong"),uso=o("data2vec-audio"),bso=o(" \u2014 "),cB=a("a"),Fso=o("Data2VecAudioModel"),vso=o(" (Data2VecAudio model)"),Tso=l(),ip=a("li"),Soe=a("strong"),Mso=o("data2vec-text"),Eso=o(" \u2014 "),fB=a("a"),Cso=o("Data2VecTextModel"),wso=o(" (Data2VecText model)"),Aso=l(),dp=a("li"),Roe=a("strong"),yso=o("deberta"),Lso=o(" \u2014 "),mB=a("a"),xso=o("DebertaModel"),kso=o(" (DeBERTa model)"),Sso=l(),cp=a("li"),Boe=a("strong"),Rso=o("deberta-v2"),Bso=o(" \u2014 "),gB=a("a"),Pso=o("DebertaV2Model"),$so=o(" (DeBERTa-v2 model)"),Iso=l(),fp=a("li"),Poe=a("strong"),qso=o("decision_transformer"),Nso=o(" \u2014 "),hB=a("a"),jso=o("DecisionTransformerModel"),Dso=o(" (Decision Transformer model)"),Gso=l(),mp=a("li"),$oe=a("strong"),Oso=o("deit"),Vso=o(" \u2014 "),pB=a("a"),Xso=o("DeiTModel"),zso=o(" (DeiT model)"),Qso=l(),gp=a("li"),Ioe=a("strong"),Wso=o("detr"),Hso=o(" \u2014 "),_B=a("a"),Uso=o("DetrModel"),Jso=o(" (DETR model)"),Yso=l(),hp=a("li"),qoe=a("strong"),Kso=o("distilbert"),Zso=o(" \u2014 "),uB=a("a"),elo=o("DistilBertModel"),olo=o(" (DistilBERT model)"),rlo=l(),pp=a("li"),Noe=a("strong"),tlo=o("dpr"),alo=o(" \u2014 "),bB=a("a"),nlo=o("DPRQuestionEncoder"),slo=o(" (DPR model)"),llo=l(),_p=a("li"),joe=a("strong"),ilo=o("dpt"),dlo=o(" \u2014 "),FB=a("a"),clo=o("DPTModel"),flo=o(" (DPT model)"),mlo=l(),up=a("li"),Doe=a("strong"),glo=o("electra"),hlo=o(" \u2014 "),vB=a("a"),plo=o("ElectraModel"),_lo=o(" (ELECTRA model)"),ulo=l(),bp=a("li"),Goe=a("strong"),blo=o("flaubert"),Flo=o(" \u2014 "),TB=a("a"),vlo=o("FlaubertModel"),Tlo=o(" (FlauBERT model)"),Mlo=l(),Fp=a("li"),Ooe=a("strong"),Elo=o("fnet"),Clo=o(" \u2014 "),MB=a("a"),wlo=o("FNetModel"),Alo=o(" (FNet model)"),ylo=l(),vp=a("li"),Voe=a("strong"),Llo=o("fsmt"),xlo=o(" \u2014 "),EB=a("a"),klo=o("FSMTModel"),Slo=o(" (FairSeq Machine-Translation model)"),Rlo=l(),js=a("li"),Xoe=a("strong"),Blo=o("funnel"),Plo=o(" \u2014 "),CB=a("a"),$lo=o("FunnelModel"),Ilo=o(" or "),wB=a("a"),qlo=o("FunnelBaseModel"),Nlo=o(" (Funnel Transformer model)"),jlo=l(),Tp=a("li"),zoe=a("strong"),Dlo=o("glpn"),Glo=o(" \u2014 "),AB=a("a"),Olo=o("GLPNModel"),Vlo=o(" (GLPN model)"),Xlo=l(),Mp=a("li"),Qoe=a("strong"),zlo=o("gpt2"),Qlo=o(" \u2014 "),yB=a("a"),Wlo=o("GPT2Model"),Hlo=o(" (OpenAI GPT-2 model)"),Ulo=l(),Ep=a("li"),Woe=a("strong"),Jlo=o("gpt_neo"),Ylo=o(" \u2014 "),LB=a("a"),Klo=o("GPTNeoModel"),Zlo=o(" (GPT Neo model)"),eio=l(),Cp=a("li"),Hoe=a("strong"),oio=o("gptj"),rio=o(" \u2014 "),xB=a("a"),tio=o("GPTJModel"),aio=o(" (GPT-J model)"),nio=l(),wp=a("li"),Uoe=a("strong"),sio=o("hubert"),lio=o(" \u2014 "),kB=a("a"),iio=o("HubertModel"),dio=o(" (Hubert model)"),cio=l(),Ap=a("li"),Joe=a("strong"),fio=o("ibert"),mio=o(" \u2014 "),SB=a("a"),gio=o("IBertModel"),hio=o(" (I-BERT model)"),pio=l(),yp=a("li"),Yoe=a("strong"),_io=o("imagegpt"),uio=o(" \u2014 "),RB=a("a"),bio=o("ImageGPTModel"),Fio=o(" (ImageGPT model)"),vio=l(),Lp=a("li"),Koe=a("strong"),Tio=o("layoutlm"),Mio=o(" \u2014 "),BB=a("a"),Eio=o("LayoutLMModel"),Cio=o(" (LayoutLM model)"),wio=l(),xp=a("li"),Zoe=a("strong"),Aio=o("layoutlmv2"),yio=o(" \u2014 "),PB=a("a"),Lio=o("LayoutLMv2Model"),xio=o(" (LayoutLMv2 model)"),kio=l(),kp=a("li"),ere=a("strong"),Sio=o("led"),Rio=o(" \u2014 "),$B=a("a"),Bio=o("LEDModel"),Pio=o(" (LED model)"),$io=l(),Sp=a("li"),ore=a("strong"),Iio=o("longformer"),qio=o(" \u2014 "),IB=a("a"),Nio=o("LongformerModel"),jio=o(" (Longformer model)"),Dio=l(),Rp=a("li"),rre=a("strong"),Gio=o("luke"),Oio=o(" \u2014 "),qB=a("a"),Vio=o("LukeModel"),Xio=o(" (LUKE model)"),zio=l(),Bp=a("li"),tre=a("strong"),Qio=o("lxmert"),Wio=o(" \u2014 "),NB=a("a"),Hio=o("LxmertModel"),Uio=o(" (LXMERT model)"),Jio=l(),Pp=a("li"),are=a("strong"),Yio=o("m2m_100"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("M2M100Model"),edo=o(" (M2M100 model)"),odo=l(),$p=a("li"),nre=a("strong"),rdo=o("marian"),tdo=o(" \u2014 "),DB=a("a"),ado=o("MarianModel"),ndo=o(" (Marian model)"),sdo=l(),Ip=a("li"),sre=a("strong"),ldo=o("maskformer"),ido=o(" \u2014 "),GB=a("a"),ddo=o("MaskFormerModel"),cdo=o(" (MaskFormer model)"),fdo=l(),qp=a("li"),lre=a("strong"),mdo=o("mbart"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("MBartModel"),pdo=o(" (mBART model)"),_do=l(),Np=a("li"),ire=a("strong"),udo=o("megatron-bert"),bdo=o(" \u2014 "),VB=a("a"),Fdo=o("MegatronBertModel"),vdo=o(" (MegatronBert model)"),Tdo=l(),jp=a("li"),dre=a("strong"),Mdo=o("mobilebert"),Edo=o(" \u2014 "),XB=a("a"),Cdo=o("MobileBertModel"),wdo=o(" (MobileBERT model)"),Ado=l(),Dp=a("li"),cre=a("strong"),ydo=o("mpnet"),Ldo=o(" \u2014 "),zB=a("a"),xdo=o("MPNetModel"),kdo=o(" (MPNet model)"),Sdo=l(),Gp=a("li"),fre=a("strong"),Rdo=o("mt5"),Bdo=o(" \u2014 "),QB=a("a"),Pdo=o("MT5Model"),$do=o(" (mT5 model)"),Ido=l(),Op=a("li"),mre=a("strong"),qdo=o("nystromformer"),Ndo=o(" \u2014 "),WB=a("a"),jdo=o("NystromformerModel"),Ddo=o(" (Nystromformer model)"),Gdo=l(),Vp=a("li"),gre=a("strong"),Odo=o("openai-gpt"),Vdo=o(" \u2014 "),HB=a("a"),Xdo=o("OpenAIGPTModel"),zdo=o(" (OpenAI GPT model)"),Qdo=l(),Xp=a("li"),hre=a("strong"),Wdo=o("pegasus"),Hdo=o(" \u2014 "),UB=a("a"),Udo=o("PegasusModel"),Jdo=o(" (Pegasus model)"),Ydo=l(),zp=a("li"),pre=a("strong"),Kdo=o("perceiver"),Zdo=o(" \u2014 "),JB=a("a"),eco=o("PerceiverModel"),oco=o(" (Perceiver model)"),rco=l(),Qp=a("li"),_re=a("strong"),tco=o("plbart"),aco=o(" \u2014 "),YB=a("a"),nco=o("PLBartModel"),sco=o(" (PLBart model)"),lco=l(),Wp=a("li"),ure=a("strong"),ico=o("poolformer"),dco=o(" \u2014 "),KB=a("a"),cco=o("PoolFormerModel"),fco=o(" (PoolFormer model)"),mco=l(),Hp=a("li"),bre=a("strong"),gco=o("prophetnet"),hco=o(" \u2014 "),ZB=a("a"),pco=o("ProphetNetModel"),_co=o(" (ProphetNet model)"),uco=l(),Up=a("li"),Fre=a("strong"),bco=o("qdqbert"),Fco=o(" \u2014 "),eP=a("a"),vco=o("QDQBertModel"),Tco=o(" (QDQBert model)"),Mco=l(),Jp=a("li"),vre=a("strong"),Eco=o("reformer"),Cco=o(" \u2014 "),oP=a("a"),wco=o("ReformerModel"),Aco=o(" (Reformer model)"),yco=l(),Yp=a("li"),Tre=a("strong"),Lco=o("rembert"),xco=o(" \u2014 "),rP=a("a"),kco=o("RemBertModel"),Sco=o(" (RemBERT model)"),Rco=l(),Kp=a("li"),Mre=a("strong"),Bco=o("resnet"),Pco=o(" \u2014 "),tP=a("a"),$co=o("ResNetModel"),Ico=o(" (ResNet model)"),qco=l(),Zp=a("li"),Ere=a("strong"),Nco=o("retribert"),jco=o(" \u2014 "),aP=a("a"),Dco=o("RetriBertModel"),Gco=o(" (RetriBERT model)"),Oco=l(),e_=a("li"),Cre=a("strong"),Vco=o("roberta"),Xco=o(" \u2014 "),nP=a("a"),zco=o("RobertaModel"),Qco=o(" (RoBERTa model)"),Wco=l(),o_=a("li"),wre=a("strong"),Hco=o("roformer"),Uco=o(" \u2014 "),sP=a("a"),Jco=o("RoFormerModel"),Yco=o(" (RoFormer model)"),Kco=l(),r_=a("li"),Are=a("strong"),Zco=o("segformer"),efo=o(" \u2014 "),lP=a("a"),ofo=o("SegformerModel"),rfo=o(" (SegFormer model)"),tfo=l(),t_=a("li"),yre=a("strong"),afo=o("sew"),nfo=o(" \u2014 "),iP=a("a"),sfo=o("SEWModel"),lfo=o(" (SEW model)"),ifo=l(),a_=a("li"),Lre=a("strong"),dfo=o("sew-d"),cfo=o(" \u2014 "),dP=a("a"),ffo=o("SEWDModel"),mfo=o(" (SEW-D model)"),gfo=l(),n_=a("li"),xre=a("strong"),hfo=o("speech_to_text"),pfo=o(" \u2014 "),cP=a("a"),_fo=o("Speech2TextModel"),ufo=o(" (Speech2Text model)"),bfo=l(),s_=a("li"),kre=a("strong"),Ffo=o("splinter"),vfo=o(" \u2014 "),fP=a("a"),Tfo=o("SplinterModel"),Mfo=o(" (Splinter model)"),Efo=l(),l_=a("li"),Sre=a("strong"),Cfo=o("squeezebert"),wfo=o(" \u2014 "),mP=a("a"),Afo=o("SqueezeBertModel"),yfo=o(" (SqueezeBERT model)"),Lfo=l(),i_=a("li"),Rre=a("strong"),xfo=o("swin"),kfo=o(" \u2014 "),gP=a("a"),Sfo=o("SwinModel"),Rfo=o(" (Swin model)"),Bfo=l(),d_=a("li"),Bre=a("strong"),Pfo=o("t5"),$fo=o(" \u2014 "),hP=a("a"),Ifo=o("T5Model"),qfo=o(" (T5 model)"),Nfo=l(),c_=a("li"),Pre=a("strong"),jfo=o("tapas"),Dfo=o(" \u2014 "),pP=a("a"),Gfo=o("TapasModel"),Ofo=o(" (TAPAS model)"),Vfo=l(),f_=a("li"),$re=a("strong"),Xfo=o("transfo-xl"),zfo=o(" \u2014 "),_P=a("a"),Qfo=o("TransfoXLModel"),Wfo=o(" (Transformer-XL model)"),Hfo=l(),m_=a("li"),Ire=a("strong"),Ufo=o("unispeech"),Jfo=o(" \u2014 "),uP=a("a"),Yfo=o("UniSpeechModel"),Kfo=o(" (UniSpeech model)"),Zfo=l(),g_=a("li"),qre=a("strong"),emo=o("unispeech-sat"),omo=o(" \u2014 "),bP=a("a"),rmo=o("UniSpeechSatModel"),tmo=o(" (UniSpeechSat model)"),amo=l(),h_=a("li"),Nre=a("strong"),nmo=o("van"),smo=o(" \u2014 "),FP=a("a"),lmo=o("VanModel"),imo=o(" (VAN model)"),dmo=l(),p_=a("li"),jre=a("strong"),cmo=o("vilt"),fmo=o(" \u2014 "),vP=a("a"),mmo=o("ViltModel"),gmo=o(" (ViLT model)"),hmo=l(),__=a("li"),Dre=a("strong"),pmo=o("vision-text-dual-encoder"),_mo=o(" \u2014 "),TP=a("a"),umo=o("VisionTextDualEncoderModel"),bmo=o(" (VisionTextDualEncoder model)"),Fmo=l(),u_=a("li"),Gre=a("strong"),vmo=o("visual_bert"),Tmo=o(" \u2014 "),MP=a("a"),Mmo=o("VisualBertModel"),Emo=o(" (VisualBert model)"),Cmo=l(),b_=a("li"),Ore=a("strong"),wmo=o("vit"),Amo=o(" \u2014 "),EP=a("a"),ymo=o("ViTModel"),Lmo=o(" (ViT model)"),xmo=l(),F_=a("li"),Vre=a("strong"),kmo=o("vit_mae"),Smo=o(" \u2014 "),CP=a("a"),Rmo=o("ViTMAEModel"),Bmo=o(" (ViTMAE model)"),Pmo=l(),v_=a("li"),Xre=a("strong"),$mo=o("wav2vec2"),Imo=o(" \u2014 "),wP=a("a"),qmo=o("Wav2Vec2Model"),Nmo=o(" (Wav2Vec2 model)"),jmo=l(),T_=a("li"),zre=a("strong"),Dmo=o("wavlm"),Gmo=o(" \u2014 "),AP=a("a"),Omo=o("WavLMModel"),Vmo=o(" (WavLM model)"),Xmo=l(),M_=a("li"),Qre=a("strong"),zmo=o("xglm"),Qmo=o(" \u2014 "),yP=a("a"),Wmo=o("XGLMModel"),Hmo=o(" (XGLM model)"),Umo=l(),E_=a("li"),Wre=a("strong"),Jmo=o("xlm"),Ymo=o(" \u2014 "),LP=a("a"),Kmo=o("XLMModel"),Zmo=o(" (XLM model)"),ego=l(),C_=a("li"),Hre=a("strong"),ogo=o("xlm-prophetnet"),rgo=o(" \u2014 "),xP=a("a"),tgo=o("XLMProphetNetModel"),ago=o(" (XLMProphetNet model)"),ngo=l(),w_=a("li"),Ure=a("strong"),sgo=o("xlm-roberta"),lgo=o(" \u2014 "),kP=a("a"),igo=o("XLMRobertaModel"),dgo=o(" (XLM-RoBERTa model)"),cgo=l(),A_=a("li"),Jre=a("strong"),fgo=o("xlm-roberta-xl"),mgo=o(" \u2014 "),SP=a("a"),ggo=o("XLMRobertaXLModel"),hgo=o(" (XLM-RoBERTa-XL model)"),pgo=l(),y_=a("li"),Yre=a("strong"),_go=o("xlnet"),ugo=o(" \u2014 "),RP=a("a"),bgo=o("XLNetModel"),Fgo=o(" (XLNet model)"),vgo=l(),L_=a("li"),Kre=a("strong"),Tgo=o("yoso"),Mgo=o(" \u2014 "),BP=a("a"),Ego=o("YosoModel"),Cgo=o(" (YOSO model)"),wgo=l(),x_=a("p"),Ago=o("The model is set in evaluation mode by default using "),Zre=a("code"),ygo=o("model.eval()"),Lgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=a("code"),xgo=o("model.train()"),kgo=l(),ote=a("p"),Sgo=o("Examples:"),Rgo=l(),f(ZC.$$.fragment),XSe=l(),Zi=a("h2"),k_=a("a"),rte=a("span"),f(e5.$$.fragment),Bgo=l(),tte=a("span"),Pgo=o("AutoModelForPreTraining"),zSe=l(),Yo=a("div"),f(o5.$$.fragment),$go=l(),ed=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PP=a("a"),qgo=o("from_pretrained()"),Ngo=o(" class method or the "),$P=a("a"),jgo=o("from_config()"),Dgo=o(` class
method.`),Ggo=l(),r5=a("p"),Ogo=o("This class cannot be instantiated directly using "),ate=a("code"),Vgo=o("__init__()"),Xgo=o(" (throws an error)."),zgo=l(),zr=a("div"),f(t5.$$.fragment),Qgo=l(),nte=a("p"),Wgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hgo=l(),od=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),ste=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=a("a"),Kgo=o("from_pretrained()"),Zgo=o(" to load the model weights."),eho=l(),lte=a("p"),oho=o("Examples:"),rho=l(),f(a5.$$.fragment),tho=l(),Ne=a("div"),f(n5.$$.fragment),aho=l(),ite=a("p"),nho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sho=l(),za=a("p"),lho=o("The model class to instantiate is selected based on the "),dte=a("code"),iho=o("model_type"),dho=o(` property of the config object (either
passed as an argument or loaded from `),cte=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=a("code"),mho=o("pretrained_model_name_or_path"),gho=o(":"),hho=l(),S=a("ul"),S_=a("li"),mte=a("strong"),pho=o("albert"),_ho=o(" \u2014 "),qP=a("a"),uho=o("AlbertForPreTraining"),bho=o(" (ALBERT model)"),Fho=l(),R_=a("li"),gte=a("strong"),vho=o("bart"),Tho=o(" \u2014 "),NP=a("a"),Mho=o("BartForConditionalGeneration"),Eho=o(" (BART model)"),Cho=l(),B_=a("li"),hte=a("strong"),who=o("bert"),Aho=o(" \u2014 "),jP=a("a"),yho=o("BertForPreTraining"),Lho=o(" (BERT model)"),xho=l(),P_=a("li"),pte=a("strong"),kho=o("big_bird"),Sho=o(" \u2014 "),DP=a("a"),Rho=o("BigBirdForPreTraining"),Bho=o(" (BigBird model)"),Pho=l(),$_=a("li"),_te=a("strong"),$ho=o("camembert"),Iho=o(" \u2014 "),GP=a("a"),qho=o("CamembertForMaskedLM"),Nho=o(" (CamemBERT model)"),jho=l(),I_=a("li"),ute=a("strong"),Dho=o("ctrl"),Gho=o(" \u2014 "),OP=a("a"),Oho=o("CTRLLMHeadModel"),Vho=o(" (CTRL model)"),Xho=l(),q_=a("li"),bte=a("strong"),zho=o("data2vec-text"),Qho=o(" \u2014 "),VP=a("a"),Who=o("Data2VecTextForMaskedLM"),Hho=o(" (Data2VecText model)"),Uho=l(),N_=a("li"),Fte=a("strong"),Jho=o("deberta"),Yho=o(" \u2014 "),XP=a("a"),Kho=o("DebertaForMaskedLM"),Zho=o(" (DeBERTa model)"),epo=l(),j_=a("li"),vte=a("strong"),opo=o("deberta-v2"),rpo=o(" \u2014 "),zP=a("a"),tpo=o("DebertaV2ForMaskedLM"),apo=o(" (DeBERTa-v2 model)"),npo=l(),D_=a("li"),Tte=a("strong"),spo=o("distilbert"),lpo=o(" \u2014 "),QP=a("a"),ipo=o("DistilBertForMaskedLM"),dpo=o(" (DistilBERT model)"),cpo=l(),G_=a("li"),Mte=a("strong"),fpo=o("electra"),mpo=o(" \u2014 "),WP=a("a"),gpo=o("ElectraForPreTraining"),hpo=o(" (ELECTRA model)"),ppo=l(),O_=a("li"),Ete=a("strong"),_po=o("flaubert"),upo=o(" \u2014 "),HP=a("a"),bpo=o("FlaubertWithLMHeadModel"),Fpo=o(" (FlauBERT model)"),vpo=l(),V_=a("li"),Cte=a("strong"),Tpo=o("fnet"),Mpo=o(" \u2014 "),UP=a("a"),Epo=o("FNetForPreTraining"),Cpo=o(" (FNet model)"),wpo=l(),X_=a("li"),wte=a("strong"),Apo=o("fsmt"),ypo=o(" \u2014 "),JP=a("a"),Lpo=o("FSMTForConditionalGeneration"),xpo=o(" (FairSeq Machine-Translation model)"),kpo=l(),z_=a("li"),Ate=a("strong"),Spo=o("funnel"),Rpo=o(" \u2014 "),YP=a("a"),Bpo=o("FunnelForPreTraining"),Ppo=o(" (Funnel Transformer model)"),$po=l(),Q_=a("li"),yte=a("strong"),Ipo=o("gpt2"),qpo=o(" \u2014 "),KP=a("a"),Npo=o("GPT2LMHeadModel"),jpo=o(" (OpenAI GPT-2 model)"),Dpo=l(),W_=a("li"),Lte=a("strong"),Gpo=o("ibert"),Opo=o(" \u2014 "),ZP=a("a"),Vpo=o("IBertForMaskedLM"),Xpo=o(" (I-BERT model)"),zpo=l(),H_=a("li"),xte=a("strong"),Qpo=o("layoutlm"),Wpo=o(" \u2014 "),e$=a("a"),Hpo=o("LayoutLMForMaskedLM"),Upo=o(" (LayoutLM model)"),Jpo=l(),U_=a("li"),kte=a("strong"),Ypo=o("longformer"),Kpo=o(" \u2014 "),o$=a("a"),Zpo=o("LongformerForMaskedLM"),e_o=o(" (Longformer model)"),o_o=l(),J_=a("li"),Ste=a("strong"),r_o=o("lxmert"),t_o=o(" \u2014 "),r$=a("a"),a_o=o("LxmertForPreTraining"),n_o=o(" (LXMERT model)"),s_o=l(),Y_=a("li"),Rte=a("strong"),l_o=o("megatron-bert"),i_o=o(" \u2014 "),t$=a("a"),d_o=o("MegatronBertForPreTraining"),c_o=o(" (MegatronBert model)"),f_o=l(),K_=a("li"),Bte=a("strong"),m_o=o("mobilebert"),g_o=o(" \u2014 "),a$=a("a"),h_o=o("MobileBertForPreTraining"),p_o=o(" (MobileBERT model)"),__o=l(),Z_=a("li"),Pte=a("strong"),u_o=o("mpnet"),b_o=o(" \u2014 "),n$=a("a"),F_o=o("MPNetForMaskedLM"),v_o=o(" (MPNet model)"),T_o=l(),eu=a("li"),$te=a("strong"),M_o=o("openai-gpt"),E_o=o(" \u2014 "),s$=a("a"),C_o=o("OpenAIGPTLMHeadModel"),w_o=o(" (OpenAI GPT model)"),A_o=l(),ou=a("li"),Ite=a("strong"),y_o=o("retribert"),L_o=o(" \u2014 "),l$=a("a"),x_o=o("RetriBertModel"),k_o=o(" (RetriBERT model)"),S_o=l(),ru=a("li"),qte=a("strong"),R_o=o("roberta"),B_o=o(" \u2014 "),i$=a("a"),P_o=o("RobertaForMaskedLM"),$_o=o(" (RoBERTa model)"),I_o=l(),tu=a("li"),Nte=a("strong"),q_o=o("squeezebert"),N_o=o(" \u2014 "),d$=a("a"),j_o=o("SqueezeBertForMaskedLM"),D_o=o(" (SqueezeBERT model)"),G_o=l(),au=a("li"),jte=a("strong"),O_o=o("t5"),V_o=o(" \u2014 "),c$=a("a"),X_o=o("T5ForConditionalGeneration"),z_o=o(" (T5 model)"),Q_o=l(),nu=a("li"),Dte=a("strong"),W_o=o("tapas"),H_o=o(" \u2014 "),f$=a("a"),U_o=o("TapasForMaskedLM"),J_o=o(" (TAPAS model)"),Y_o=l(),su=a("li"),Gte=a("strong"),K_o=o("transfo-xl"),Z_o=o(" \u2014 "),m$=a("a"),euo=o("TransfoXLLMHeadModel"),ouo=o(" (Transformer-XL model)"),ruo=l(),lu=a("li"),Ote=a("strong"),tuo=o("unispeech"),auo=o(" \u2014 "),g$=a("a"),nuo=o("UniSpeechForPreTraining"),suo=o(" (UniSpeech model)"),luo=l(),iu=a("li"),Vte=a("strong"),iuo=o("unispeech-sat"),duo=o(" \u2014 "),h$=a("a"),cuo=o("UniSpeechSatForPreTraining"),fuo=o(" (UniSpeechSat model)"),muo=l(),du=a("li"),Xte=a("strong"),guo=o("visual_bert"),huo=o(" \u2014 "),p$=a("a"),puo=o("VisualBertForPreTraining"),_uo=o(" (VisualBert model)"),uuo=l(),cu=a("li"),zte=a("strong"),buo=o("vit_mae"),Fuo=o(" \u2014 "),_$=a("a"),vuo=o("ViTMAEForPreTraining"),Tuo=o(" (ViTMAE model)"),Muo=l(),fu=a("li"),Qte=a("strong"),Euo=o("wav2vec2"),Cuo=o(" \u2014 "),u$=a("a"),wuo=o("Wav2Vec2ForPreTraining"),Auo=o(" (Wav2Vec2 model)"),yuo=l(),mu=a("li"),Wte=a("strong"),Luo=o("xlm"),xuo=o(" \u2014 "),b$=a("a"),kuo=o("XLMWithLMHeadModel"),Suo=o(" (XLM model)"),Ruo=l(),gu=a("li"),Hte=a("strong"),Buo=o("xlm-roberta"),Puo=o(" \u2014 "),F$=a("a"),$uo=o("XLMRobertaForMaskedLM"),Iuo=o(" (XLM-RoBERTa model)"),quo=l(),hu=a("li"),Ute=a("strong"),Nuo=o("xlm-roberta-xl"),juo=o(" \u2014 "),v$=a("a"),Duo=o("XLMRobertaXLForMaskedLM"),Guo=o(" (XLM-RoBERTa-XL model)"),Ouo=l(),pu=a("li"),Jte=a("strong"),Vuo=o("xlnet"),Xuo=o(" \u2014 "),T$=a("a"),zuo=o("XLNetLMHeadModel"),Quo=o(" (XLNet model)"),Wuo=l(),_u=a("p"),Huo=o("The model is set in evaluation mode by default using "),Yte=a("code"),Uuo=o("model.eval()"),Juo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=a("code"),Yuo=o("model.train()"),Kuo=l(),Zte=a("p"),Zuo=o("Examples:"),e1o=l(),f(s5.$$.fragment),QSe=l(),rd=a("h2"),uu=a("a"),eae=a("span"),f(l5.$$.fragment),o1o=l(),oae=a("span"),r1o=o("AutoModelForCausalLM"),WSe=l(),Ko=a("div"),f(i5.$$.fragment),t1o=l(),td=a("p"),a1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),M$=a("a"),n1o=o("from_pretrained()"),s1o=o(" class method or the "),E$=a("a"),l1o=o("from_config()"),i1o=o(` class
method.`),d1o=l(),d5=a("p"),c1o=o("This class cannot be instantiated directly using "),rae=a("code"),f1o=o("__init__()"),m1o=o(" (throws an error)."),g1o=l(),Qr=a("div"),f(c5.$$.fragment),h1o=l(),tae=a("p"),p1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_1o=l(),ad=a("p"),u1o=o(`Note:
Loading a model from its configuration file does `),aae=a("strong"),b1o=o("not"),F1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C$=a("a"),v1o=o("from_pretrained()"),T1o=o(" to load the model weights."),M1o=l(),nae=a("p"),E1o=o("Examples:"),C1o=l(),f(f5.$$.fragment),w1o=l(),je=a("div"),f(m5.$$.fragment),A1o=l(),sae=a("p"),y1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L1o=l(),Qa=a("p"),x1o=o("The model class to instantiate is selected based on the "),lae=a("code"),k1o=o("model_type"),S1o=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),R1o=o("pretrained_model_name_or_path"),B1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=a("code"),P1o=o("pretrained_model_name_or_path"),$1o=o(":"),I1o=l(),$=a("ul"),bu=a("li"),cae=a("strong"),q1o=o("bart"),N1o=o(" \u2014 "),w$=a("a"),j1o=o("BartForCausalLM"),D1o=o(" (BART model)"),G1o=l(),Fu=a("li"),fae=a("strong"),O1o=o("bert"),V1o=o(" \u2014 "),A$=a("a"),X1o=o("BertLMHeadModel"),z1o=o(" (BERT model)"),Q1o=l(),vu=a("li"),mae=a("strong"),W1o=o("bert-generation"),H1o=o(" \u2014 "),y$=a("a"),U1o=o("BertGenerationDecoder"),J1o=o(" (Bert Generation model)"),Y1o=l(),Tu=a("li"),gae=a("strong"),K1o=o("big_bird"),Z1o=o(" \u2014 "),L$=a("a"),ebo=o("BigBirdForCausalLM"),obo=o(" (BigBird model)"),rbo=l(),Mu=a("li"),hae=a("strong"),tbo=o("bigbird_pegasus"),abo=o(" \u2014 "),x$=a("a"),nbo=o("BigBirdPegasusForCausalLM"),sbo=o(" (BigBirdPegasus model)"),lbo=l(),Eu=a("li"),pae=a("strong"),ibo=o("blenderbot"),dbo=o(" \u2014 "),k$=a("a"),cbo=o("BlenderbotForCausalLM"),fbo=o(" (Blenderbot model)"),mbo=l(),Cu=a("li"),_ae=a("strong"),gbo=o("blenderbot-small"),hbo=o(" \u2014 "),S$=a("a"),pbo=o("BlenderbotSmallForCausalLM"),_bo=o(" (BlenderbotSmall model)"),ubo=l(),wu=a("li"),uae=a("strong"),bbo=o("camembert"),Fbo=o(" \u2014 "),R$=a("a"),vbo=o("CamembertForCausalLM"),Tbo=o(" (CamemBERT model)"),Mbo=l(),Au=a("li"),bae=a("strong"),Ebo=o("ctrl"),Cbo=o(" \u2014 "),B$=a("a"),wbo=o("CTRLLMHeadModel"),Abo=o(" (CTRL model)"),ybo=l(),yu=a("li"),Fae=a("strong"),Lbo=o("data2vec-text"),xbo=o(" \u2014 "),P$=a("a"),kbo=o("Data2VecTextForCausalLM"),Sbo=o(" (Data2VecText model)"),Rbo=l(),Lu=a("li"),vae=a("strong"),Bbo=o("electra"),Pbo=o(" \u2014 "),$$=a("a"),$bo=o("ElectraForCausalLM"),Ibo=o(" (ELECTRA model)"),qbo=l(),xu=a("li"),Tae=a("strong"),Nbo=o("gpt2"),jbo=o(" \u2014 "),I$=a("a"),Dbo=o("GPT2LMHeadModel"),Gbo=o(" (OpenAI GPT-2 model)"),Obo=l(),ku=a("li"),Mae=a("strong"),Vbo=o("gpt_neo"),Xbo=o(" \u2014 "),q$=a("a"),zbo=o("GPTNeoForCausalLM"),Qbo=o(" (GPT Neo model)"),Wbo=l(),Su=a("li"),Eae=a("strong"),Hbo=o("gptj"),Ubo=o(" \u2014 "),N$=a("a"),Jbo=o("GPTJForCausalLM"),Ybo=o(" (GPT-J model)"),Kbo=l(),Ru=a("li"),Cae=a("strong"),Zbo=o("marian"),e3o=o(" \u2014 "),j$=a("a"),o3o=o("MarianForCausalLM"),r3o=o(" (Marian model)"),t3o=l(),Bu=a("li"),wae=a("strong"),a3o=o("mbart"),n3o=o(" \u2014 "),D$=a("a"),s3o=o("MBartForCausalLM"),l3o=o(" (mBART model)"),i3o=l(),Pu=a("li"),Aae=a("strong"),d3o=o("megatron-bert"),c3o=o(" \u2014 "),G$=a("a"),f3o=o("MegatronBertForCausalLM"),m3o=o(" (MegatronBert model)"),g3o=l(),$u=a("li"),yae=a("strong"),h3o=o("openai-gpt"),p3o=o(" \u2014 "),O$=a("a"),_3o=o("OpenAIGPTLMHeadModel"),u3o=o(" (OpenAI GPT model)"),b3o=l(),Iu=a("li"),Lae=a("strong"),F3o=o("pegasus"),v3o=o(" \u2014 "),V$=a("a"),T3o=o("PegasusForCausalLM"),M3o=o(" (Pegasus model)"),E3o=l(),qu=a("li"),xae=a("strong"),C3o=o("plbart"),w3o=o(" \u2014 "),X$=a("a"),A3o=o("PLBartForCausalLM"),y3o=o(" (PLBart model)"),L3o=l(),Nu=a("li"),kae=a("strong"),x3o=o("prophetnet"),k3o=o(" \u2014 "),z$=a("a"),S3o=o("ProphetNetForCausalLM"),R3o=o(" (ProphetNet model)"),B3o=l(),ju=a("li"),Sae=a("strong"),P3o=o("qdqbert"),$3o=o(" \u2014 "),Q$=a("a"),I3o=o("QDQBertLMHeadModel"),q3o=o(" (QDQBert model)"),N3o=l(),Du=a("li"),Rae=a("strong"),j3o=o("reformer"),D3o=o(" \u2014 "),W$=a("a"),G3o=o("ReformerModelWithLMHead"),O3o=o(" (Reformer model)"),V3o=l(),Gu=a("li"),Bae=a("strong"),X3o=o("rembert"),z3o=o(" \u2014 "),H$=a("a"),Q3o=o("RemBertForCausalLM"),W3o=o(" (RemBERT model)"),H3o=l(),Ou=a("li"),Pae=a("strong"),U3o=o("roberta"),J3o=o(" \u2014 "),U$=a("a"),Y3o=o("RobertaForCausalLM"),K3o=o(" (RoBERTa model)"),Z3o=l(),Vu=a("li"),$ae=a("strong"),e2o=o("roformer"),o2o=o(" \u2014 "),J$=a("a"),r2o=o("RoFormerForCausalLM"),t2o=o(" (RoFormer model)"),a2o=l(),Xu=a("li"),Iae=a("strong"),n2o=o("speech_to_text_2"),s2o=o(" \u2014 "),Y$=a("a"),l2o=o("Speech2Text2ForCausalLM"),i2o=o(" (Speech2Text2 model)"),d2o=l(),zu=a("li"),qae=a("strong"),c2o=o("transfo-xl"),f2o=o(" \u2014 "),K$=a("a"),m2o=o("TransfoXLLMHeadModel"),g2o=o(" (Transformer-XL model)"),h2o=l(),Qu=a("li"),Nae=a("strong"),p2o=o("trocr"),_2o=o(" \u2014 "),Z$=a("a"),u2o=o("TrOCRForCausalLM"),b2o=o(" (TrOCR model)"),F2o=l(),Wu=a("li"),jae=a("strong"),v2o=o("xglm"),T2o=o(" \u2014 "),eI=a("a"),M2o=o("XGLMForCausalLM"),E2o=o(" (XGLM model)"),C2o=l(),Hu=a("li"),Dae=a("strong"),w2o=o("xlm"),A2o=o(" \u2014 "),oI=a("a"),y2o=o("XLMWithLMHeadModel"),L2o=o(" (XLM model)"),x2o=l(),Uu=a("li"),Gae=a("strong"),k2o=o("xlm-prophetnet"),S2o=o(" \u2014 "),rI=a("a"),R2o=o("XLMProphetNetForCausalLM"),B2o=o(" (XLMProphetNet model)"),P2o=l(),Ju=a("li"),Oae=a("strong"),$2o=o("xlm-roberta"),I2o=o(" \u2014 "),tI=a("a"),q2o=o("XLMRobertaForCausalLM"),N2o=o(" (XLM-RoBERTa model)"),j2o=l(),Yu=a("li"),Vae=a("strong"),D2o=o("xlm-roberta-xl"),G2o=o(" \u2014 "),aI=a("a"),O2o=o("XLMRobertaXLForCausalLM"),V2o=o(" (XLM-RoBERTa-XL model)"),X2o=l(),Ku=a("li"),Xae=a("strong"),z2o=o("xlnet"),Q2o=o(" \u2014 "),nI=a("a"),W2o=o("XLNetLMHeadModel"),H2o=o(" (XLNet model)"),U2o=l(),Zu=a("p"),J2o=o("The model is set in evaluation mode by default using "),zae=a("code"),Y2o=o("model.eval()"),K2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qae=a("code"),Z2o=o("model.train()"),eFo=l(),Wae=a("p"),oFo=o("Examples:"),rFo=l(),f(g5.$$.fragment),HSe=l(),nd=a("h2"),e1=a("a"),Hae=a("span"),f(h5.$$.fragment),tFo=l(),Uae=a("span"),aFo=o("AutoModelForMaskedLM"),USe=l(),Zo=a("div"),f(p5.$$.fragment),nFo=l(),sd=a("p"),sFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sI=a("a"),lFo=o("from_pretrained()"),iFo=o(" class method or the "),lI=a("a"),dFo=o("from_config()"),cFo=o(` class
method.`),fFo=l(),_5=a("p"),mFo=o("This class cannot be instantiated directly using "),Jae=a("code"),gFo=o("__init__()"),hFo=o(" (throws an error)."),pFo=l(),Wr=a("div"),f(u5.$$.fragment),_Fo=l(),Yae=a("p"),uFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bFo=l(),ld=a("p"),FFo=o(`Note:
Loading a model from its configuration file does `),Kae=a("strong"),vFo=o("not"),TFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=a("a"),MFo=o("from_pretrained()"),EFo=o(" to load the model weights."),CFo=l(),Zae=a("p"),wFo=o("Examples:"),AFo=l(),f(b5.$$.fragment),yFo=l(),De=a("div"),f(F5.$$.fragment),LFo=l(),ene=a("p"),xFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kFo=l(),Wa=a("p"),SFo=o("The model class to instantiate is selected based on the "),one=a("code"),RFo=o("model_type"),BFo=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),PFo=o("pretrained_model_name_or_path"),$Fo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),IFo=o("pretrained_model_name_or_path"),qFo=o(":"),NFo=l(),I=a("ul"),o1=a("li"),ane=a("strong"),jFo=o("albert"),DFo=o(" \u2014 "),dI=a("a"),GFo=o("AlbertForMaskedLM"),OFo=o(" (ALBERT model)"),VFo=l(),r1=a("li"),nne=a("strong"),XFo=o("bart"),zFo=o(" \u2014 "),cI=a("a"),QFo=o("BartForConditionalGeneration"),WFo=o(" (BART model)"),HFo=l(),t1=a("li"),sne=a("strong"),UFo=o("bert"),JFo=o(" \u2014 "),fI=a("a"),YFo=o("BertForMaskedLM"),KFo=o(" (BERT model)"),ZFo=l(),a1=a("li"),lne=a("strong"),evo=o("big_bird"),ovo=o(" \u2014 "),mI=a("a"),rvo=o("BigBirdForMaskedLM"),tvo=o(" (BigBird model)"),avo=l(),n1=a("li"),ine=a("strong"),nvo=o("camembert"),svo=o(" \u2014 "),gI=a("a"),lvo=o("CamembertForMaskedLM"),ivo=o(" (CamemBERT model)"),dvo=l(),s1=a("li"),dne=a("strong"),cvo=o("convbert"),fvo=o(" \u2014 "),hI=a("a"),mvo=o("ConvBertForMaskedLM"),gvo=o(" (ConvBERT model)"),hvo=l(),l1=a("li"),cne=a("strong"),pvo=o("data2vec-text"),_vo=o(" \u2014 "),pI=a("a"),uvo=o("Data2VecTextForMaskedLM"),bvo=o(" (Data2VecText model)"),Fvo=l(),i1=a("li"),fne=a("strong"),vvo=o("deberta"),Tvo=o(" \u2014 "),_I=a("a"),Mvo=o("DebertaForMaskedLM"),Evo=o(" (DeBERTa model)"),Cvo=l(),d1=a("li"),mne=a("strong"),wvo=o("deberta-v2"),Avo=o(" \u2014 "),uI=a("a"),yvo=o("DebertaV2ForMaskedLM"),Lvo=o(" (DeBERTa-v2 model)"),xvo=l(),c1=a("li"),gne=a("strong"),kvo=o("distilbert"),Svo=o(" \u2014 "),bI=a("a"),Rvo=o("DistilBertForMaskedLM"),Bvo=o(" (DistilBERT model)"),Pvo=l(),f1=a("li"),hne=a("strong"),$vo=o("electra"),Ivo=o(" \u2014 "),FI=a("a"),qvo=o("ElectraForMaskedLM"),Nvo=o(" (ELECTRA model)"),jvo=l(),m1=a("li"),pne=a("strong"),Dvo=o("flaubert"),Gvo=o(" \u2014 "),vI=a("a"),Ovo=o("FlaubertWithLMHeadModel"),Vvo=o(" (FlauBERT model)"),Xvo=l(),g1=a("li"),_ne=a("strong"),zvo=o("fnet"),Qvo=o(" \u2014 "),TI=a("a"),Wvo=o("FNetForMaskedLM"),Hvo=o(" (FNet model)"),Uvo=l(),h1=a("li"),une=a("strong"),Jvo=o("funnel"),Yvo=o(" \u2014 "),MI=a("a"),Kvo=o("FunnelForMaskedLM"),Zvo=o(" (Funnel Transformer model)"),e6o=l(),p1=a("li"),bne=a("strong"),o6o=o("ibert"),r6o=o(" \u2014 "),EI=a("a"),t6o=o("IBertForMaskedLM"),a6o=o(" (I-BERT model)"),n6o=l(),_1=a("li"),Fne=a("strong"),s6o=o("layoutlm"),l6o=o(" \u2014 "),CI=a("a"),i6o=o("LayoutLMForMaskedLM"),d6o=o(" (LayoutLM model)"),c6o=l(),u1=a("li"),vne=a("strong"),f6o=o("longformer"),m6o=o(" \u2014 "),wI=a("a"),g6o=o("LongformerForMaskedLM"),h6o=o(" (Longformer model)"),p6o=l(),b1=a("li"),Tne=a("strong"),_6o=o("mbart"),u6o=o(" \u2014 "),AI=a("a"),b6o=o("MBartForConditionalGeneration"),F6o=o(" (mBART model)"),v6o=l(),F1=a("li"),Mne=a("strong"),T6o=o("megatron-bert"),M6o=o(" \u2014 "),yI=a("a"),E6o=o("MegatronBertForMaskedLM"),C6o=o(" (MegatronBert model)"),w6o=l(),v1=a("li"),Ene=a("strong"),A6o=o("mobilebert"),y6o=o(" \u2014 "),LI=a("a"),L6o=o("MobileBertForMaskedLM"),x6o=o(" (MobileBERT model)"),k6o=l(),T1=a("li"),Cne=a("strong"),S6o=o("mpnet"),R6o=o(" \u2014 "),xI=a("a"),B6o=o("MPNetForMaskedLM"),P6o=o(" (MPNet model)"),$6o=l(),M1=a("li"),wne=a("strong"),I6o=o("nystromformer"),q6o=o(" \u2014 "),kI=a("a"),N6o=o("NystromformerForMaskedLM"),j6o=o(" (Nystromformer model)"),D6o=l(),E1=a("li"),Ane=a("strong"),G6o=o("perceiver"),O6o=o(" \u2014 "),SI=a("a"),V6o=o("PerceiverForMaskedLM"),X6o=o(" (Perceiver model)"),z6o=l(),C1=a("li"),yne=a("strong"),Q6o=o("qdqbert"),W6o=o(" \u2014 "),RI=a("a"),H6o=o("QDQBertForMaskedLM"),U6o=o(" (QDQBert model)"),J6o=l(),w1=a("li"),Lne=a("strong"),Y6o=o("reformer"),K6o=o(" \u2014 "),BI=a("a"),Z6o=o("ReformerForMaskedLM"),eTo=o(" (Reformer model)"),oTo=l(),A1=a("li"),xne=a("strong"),rTo=o("rembert"),tTo=o(" \u2014 "),PI=a("a"),aTo=o("RemBertForMaskedLM"),nTo=o(" (RemBERT model)"),sTo=l(),y1=a("li"),kne=a("strong"),lTo=o("roberta"),iTo=o(" \u2014 "),$I=a("a"),dTo=o("RobertaForMaskedLM"),cTo=o(" (RoBERTa model)"),fTo=l(),L1=a("li"),Sne=a("strong"),mTo=o("roformer"),gTo=o(" \u2014 "),II=a("a"),hTo=o("RoFormerForMaskedLM"),pTo=o(" (RoFormer model)"),_To=l(),x1=a("li"),Rne=a("strong"),uTo=o("squeezebert"),bTo=o(" \u2014 "),qI=a("a"),FTo=o("SqueezeBertForMaskedLM"),vTo=o(" (SqueezeBERT model)"),TTo=l(),k1=a("li"),Bne=a("strong"),MTo=o("tapas"),ETo=o(" \u2014 "),NI=a("a"),CTo=o("TapasForMaskedLM"),wTo=o(" (TAPAS model)"),ATo=l(),S1=a("li"),Pne=a("strong"),yTo=o("wav2vec2"),LTo=o(" \u2014 "),$ne=a("code"),xTo=o("Wav2Vec2ForMaskedLM"),kTo=o("(Wav2Vec2 model)"),STo=l(),R1=a("li"),Ine=a("strong"),RTo=o("xlm"),BTo=o(" \u2014 "),jI=a("a"),PTo=o("XLMWithLMHeadModel"),$To=o(" (XLM model)"),ITo=l(),B1=a("li"),qne=a("strong"),qTo=o("xlm-roberta"),NTo=o(" \u2014 "),DI=a("a"),jTo=o("XLMRobertaForMaskedLM"),DTo=o(" (XLM-RoBERTa model)"),GTo=l(),P1=a("li"),Nne=a("strong"),OTo=o("xlm-roberta-xl"),VTo=o(" \u2014 "),GI=a("a"),XTo=o("XLMRobertaXLForMaskedLM"),zTo=o(" (XLM-RoBERTa-XL model)"),QTo=l(),$1=a("li"),jne=a("strong"),WTo=o("yoso"),HTo=o(" \u2014 "),OI=a("a"),UTo=o("YosoForMaskedLM"),JTo=o(" (YOSO model)"),YTo=l(),I1=a("p"),KTo=o("The model is set in evaluation mode by default using "),Dne=a("code"),ZTo=o("model.eval()"),e7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=a("code"),o7o=o("model.train()"),r7o=l(),One=a("p"),t7o=o("Examples:"),a7o=l(),f(v5.$$.fragment),JSe=l(),id=a("h2"),q1=a("a"),Vne=a("span"),f(T5.$$.fragment),n7o=l(),Xne=a("span"),s7o=o("AutoModelForSeq2SeqLM"),YSe=l(),er=a("div"),f(M5.$$.fragment),l7o=l(),dd=a("p"),i7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VI=a("a"),d7o=o("from_pretrained()"),c7o=o(" class method or the "),XI=a("a"),f7o=o("from_config()"),m7o=o(` class
method.`),g7o=l(),E5=a("p"),h7o=o("This class cannot be instantiated directly using "),zne=a("code"),p7o=o("__init__()"),_7o=o(" (throws an error)."),u7o=l(),Hr=a("div"),f(C5.$$.fragment),b7o=l(),Qne=a("p"),F7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v7o=l(),cd=a("p"),T7o=o(`Note:
Loading a model from its configuration file does `),Wne=a("strong"),M7o=o("not"),E7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=a("a"),C7o=o("from_pretrained()"),w7o=o(" to load the model weights."),A7o=l(),Hne=a("p"),y7o=o("Examples:"),L7o=l(),f(w5.$$.fragment),x7o=l(),Ge=a("div"),f(A5.$$.fragment),k7o=l(),Une=a("p"),S7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R7o=l(),Ha=a("p"),B7o=o("The model class to instantiate is selected based on the "),Jne=a("code"),P7o=o("model_type"),$7o=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),I7o=o("pretrained_model_name_or_path"),q7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),N7o=o("pretrained_model_name_or_path"),j7o=o(":"),D7o=l(),se=a("ul"),N1=a("li"),Zne=a("strong"),G7o=o("bart"),O7o=o(" \u2014 "),QI=a("a"),V7o=o("BartForConditionalGeneration"),X7o=o(" (BART model)"),z7o=l(),j1=a("li"),ese=a("strong"),Q7o=o("bigbird_pegasus"),W7o=o(" \u2014 "),WI=a("a"),H7o=o("BigBirdPegasusForConditionalGeneration"),U7o=o(" (BigBirdPegasus model)"),J7o=l(),D1=a("li"),ose=a("strong"),Y7o=o("blenderbot"),K7o=o(" \u2014 "),HI=a("a"),Z7o=o("BlenderbotForConditionalGeneration"),eMo=o(" (Blenderbot model)"),oMo=l(),G1=a("li"),rse=a("strong"),rMo=o("blenderbot-small"),tMo=o(" \u2014 "),UI=a("a"),aMo=o("BlenderbotSmallForConditionalGeneration"),nMo=o(" (BlenderbotSmall model)"),sMo=l(),O1=a("li"),tse=a("strong"),lMo=o("encoder-decoder"),iMo=o(" \u2014 "),JI=a("a"),dMo=o("EncoderDecoderModel"),cMo=o(" (Encoder decoder model)"),fMo=l(),V1=a("li"),ase=a("strong"),mMo=o("fsmt"),gMo=o(" \u2014 "),YI=a("a"),hMo=o("FSMTForConditionalGeneration"),pMo=o(" (FairSeq Machine-Translation model)"),_Mo=l(),X1=a("li"),nse=a("strong"),uMo=o("led"),bMo=o(" \u2014 "),KI=a("a"),FMo=o("LEDForConditionalGeneration"),vMo=o(" (LED model)"),TMo=l(),z1=a("li"),sse=a("strong"),MMo=o("m2m_100"),EMo=o(" \u2014 "),ZI=a("a"),CMo=o("M2M100ForConditionalGeneration"),wMo=o(" (M2M100 model)"),AMo=l(),Q1=a("li"),lse=a("strong"),yMo=o("marian"),LMo=o(" \u2014 "),eq=a("a"),xMo=o("MarianMTModel"),kMo=o(" (Marian model)"),SMo=l(),W1=a("li"),ise=a("strong"),RMo=o("mbart"),BMo=o(" \u2014 "),oq=a("a"),PMo=o("MBartForConditionalGeneration"),$Mo=o(" (mBART model)"),IMo=l(),H1=a("li"),dse=a("strong"),qMo=o("mt5"),NMo=o(" \u2014 "),rq=a("a"),jMo=o("MT5ForConditionalGeneration"),DMo=o(" (mT5 model)"),GMo=l(),U1=a("li"),cse=a("strong"),OMo=o("pegasus"),VMo=o(" \u2014 "),tq=a("a"),XMo=o("PegasusForConditionalGeneration"),zMo=o(" (Pegasus model)"),QMo=l(),J1=a("li"),fse=a("strong"),WMo=o("plbart"),HMo=o(" \u2014 "),aq=a("a"),UMo=o("PLBartForConditionalGeneration"),JMo=o(" (PLBart model)"),YMo=l(),Y1=a("li"),mse=a("strong"),KMo=o("prophetnet"),ZMo=o(" \u2014 "),nq=a("a"),e4o=o("ProphetNetForConditionalGeneration"),o4o=o(" (ProphetNet model)"),r4o=l(),K1=a("li"),gse=a("strong"),t4o=o("t5"),a4o=o(" \u2014 "),sq=a("a"),n4o=o("T5ForConditionalGeneration"),s4o=o(" (T5 model)"),l4o=l(),Z1=a("li"),hse=a("strong"),i4o=o("xlm-prophetnet"),d4o=o(" \u2014 "),lq=a("a"),c4o=o("XLMProphetNetForConditionalGeneration"),f4o=o(" (XLMProphetNet model)"),m4o=l(),eb=a("p"),g4o=o("The model is set in evaluation mode by default using "),pse=a("code"),h4o=o("model.eval()"),p4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),_4o=o("model.train()"),u4o=l(),use=a("p"),b4o=o("Examples:"),F4o=l(),f(y5.$$.fragment),KSe=l(),fd=a("h2"),ob=a("a"),bse=a("span"),f(L5.$$.fragment),v4o=l(),Fse=a("span"),T4o=o("AutoModelForSequenceClassification"),ZSe=l(),or=a("div"),f(x5.$$.fragment),M4o=l(),md=a("p"),E4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iq=a("a"),C4o=o("from_pretrained()"),w4o=o(" class method or the "),dq=a("a"),A4o=o("from_config()"),y4o=o(` class
method.`),L4o=l(),k5=a("p"),x4o=o("This class cannot be instantiated directly using "),vse=a("code"),k4o=o("__init__()"),S4o=o(" (throws an error)."),R4o=l(),Ur=a("div"),f(S5.$$.fragment),B4o=l(),Tse=a("p"),P4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$4o=l(),gd=a("p"),I4o=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),q4o=o("not"),N4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=a("a"),j4o=o("from_pretrained()"),D4o=o(" to load the model weights."),G4o=l(),Ese=a("p"),O4o=o("Examples:"),V4o=l(),f(R5.$$.fragment),X4o=l(),Oe=a("div"),f(B5.$$.fragment),z4o=l(),Cse=a("p"),Q4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W4o=l(),Ua=a("p"),H4o=o("The model class to instantiate is selected based on the "),wse=a("code"),U4o=o("model_type"),J4o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),Z4o=o("pretrained_model_name_or_path"),eEo=o(":"),oEo=l(),y=a("ul"),rb=a("li"),Lse=a("strong"),rEo=o("albert"),tEo=o(" \u2014 "),fq=a("a"),aEo=o("AlbertForSequenceClassification"),nEo=o(" (ALBERT model)"),sEo=l(),tb=a("li"),xse=a("strong"),lEo=o("bart"),iEo=o(" \u2014 "),mq=a("a"),dEo=o("BartForSequenceClassification"),cEo=o(" (BART model)"),fEo=l(),ab=a("li"),kse=a("strong"),mEo=o("bert"),gEo=o(" \u2014 "),gq=a("a"),hEo=o("BertForSequenceClassification"),pEo=o(" (BERT model)"),_Eo=l(),nb=a("li"),Sse=a("strong"),uEo=o("big_bird"),bEo=o(" \u2014 "),hq=a("a"),FEo=o("BigBirdForSequenceClassification"),vEo=o(" (BigBird model)"),TEo=l(),sb=a("li"),Rse=a("strong"),MEo=o("bigbird_pegasus"),EEo=o(" \u2014 "),pq=a("a"),CEo=o("BigBirdPegasusForSequenceClassification"),wEo=o(" (BigBirdPegasus model)"),AEo=l(),lb=a("li"),Bse=a("strong"),yEo=o("camembert"),LEo=o(" \u2014 "),_q=a("a"),xEo=o("CamembertForSequenceClassification"),kEo=o(" (CamemBERT model)"),SEo=l(),ib=a("li"),Pse=a("strong"),REo=o("canine"),BEo=o(" \u2014 "),uq=a("a"),PEo=o("CanineForSequenceClassification"),$Eo=o(" (Canine model)"),IEo=l(),db=a("li"),$se=a("strong"),qEo=o("convbert"),NEo=o(" \u2014 "),bq=a("a"),jEo=o("ConvBertForSequenceClassification"),DEo=o(" (ConvBERT model)"),GEo=l(),cb=a("li"),Ise=a("strong"),OEo=o("ctrl"),VEo=o(" \u2014 "),Fq=a("a"),XEo=o("CTRLForSequenceClassification"),zEo=o(" (CTRL model)"),QEo=l(),fb=a("li"),qse=a("strong"),WEo=o("data2vec-text"),HEo=o(" \u2014 "),vq=a("a"),UEo=o("Data2VecTextForSequenceClassification"),JEo=o(" (Data2VecText model)"),YEo=l(),mb=a("li"),Nse=a("strong"),KEo=o("deberta"),ZEo=o(" \u2014 "),Tq=a("a"),eCo=o("DebertaForSequenceClassification"),oCo=o(" (DeBERTa model)"),rCo=l(),gb=a("li"),jse=a("strong"),tCo=o("deberta-v2"),aCo=o(" \u2014 "),Mq=a("a"),nCo=o("DebertaV2ForSequenceClassification"),sCo=o(" (DeBERTa-v2 model)"),lCo=l(),hb=a("li"),Dse=a("strong"),iCo=o("distilbert"),dCo=o(" \u2014 "),Eq=a("a"),cCo=o("DistilBertForSequenceClassification"),fCo=o(" (DistilBERT model)"),mCo=l(),pb=a("li"),Gse=a("strong"),gCo=o("electra"),hCo=o(" \u2014 "),Cq=a("a"),pCo=o("ElectraForSequenceClassification"),_Co=o(" (ELECTRA model)"),uCo=l(),_b=a("li"),Ose=a("strong"),bCo=o("flaubert"),FCo=o(" \u2014 "),wq=a("a"),vCo=o("FlaubertForSequenceClassification"),TCo=o(" (FlauBERT model)"),MCo=l(),ub=a("li"),Vse=a("strong"),ECo=o("fnet"),CCo=o(" \u2014 "),Aq=a("a"),wCo=o("FNetForSequenceClassification"),ACo=o(" (FNet model)"),yCo=l(),bb=a("li"),Xse=a("strong"),LCo=o("funnel"),xCo=o(" \u2014 "),yq=a("a"),kCo=o("FunnelForSequenceClassification"),SCo=o(" (Funnel Transformer model)"),RCo=l(),Fb=a("li"),zse=a("strong"),BCo=o("gpt2"),PCo=o(" \u2014 "),Lq=a("a"),$Co=o("GPT2ForSequenceClassification"),ICo=o(" (OpenAI GPT-2 model)"),qCo=l(),vb=a("li"),Qse=a("strong"),NCo=o("gpt_neo"),jCo=o(" \u2014 "),xq=a("a"),DCo=o("GPTNeoForSequenceClassification"),GCo=o(" (GPT Neo model)"),OCo=l(),Tb=a("li"),Wse=a("strong"),VCo=o("gptj"),XCo=o(" \u2014 "),kq=a("a"),zCo=o("GPTJForSequenceClassification"),QCo=o(" (GPT-J model)"),WCo=l(),Mb=a("li"),Hse=a("strong"),HCo=o("ibert"),UCo=o(" \u2014 "),Sq=a("a"),JCo=o("IBertForSequenceClassification"),YCo=o(" (I-BERT model)"),KCo=l(),Eb=a("li"),Use=a("strong"),ZCo=o("layoutlm"),e5o=o(" \u2014 "),Rq=a("a"),o5o=o("LayoutLMForSequenceClassification"),r5o=o(" (LayoutLM model)"),t5o=l(),Cb=a("li"),Jse=a("strong"),a5o=o("layoutlmv2"),n5o=o(" \u2014 "),Bq=a("a"),s5o=o("LayoutLMv2ForSequenceClassification"),l5o=o(" (LayoutLMv2 model)"),i5o=l(),wb=a("li"),Yse=a("strong"),d5o=o("led"),c5o=o(" \u2014 "),Pq=a("a"),f5o=o("LEDForSequenceClassification"),m5o=o(" (LED model)"),g5o=l(),Ab=a("li"),Kse=a("strong"),h5o=o("longformer"),p5o=o(" \u2014 "),$q=a("a"),_5o=o("LongformerForSequenceClassification"),u5o=o(" (Longformer model)"),b5o=l(),yb=a("li"),Zse=a("strong"),F5o=o("mbart"),v5o=o(" \u2014 "),Iq=a("a"),T5o=o("MBartForSequenceClassification"),M5o=o(" (mBART model)"),E5o=l(),Lb=a("li"),ele=a("strong"),C5o=o("megatron-bert"),w5o=o(" \u2014 "),qq=a("a"),A5o=o("MegatronBertForSequenceClassification"),y5o=o(" (MegatronBert model)"),L5o=l(),xb=a("li"),ole=a("strong"),x5o=o("mobilebert"),k5o=o(" \u2014 "),Nq=a("a"),S5o=o("MobileBertForSequenceClassification"),R5o=o(" (MobileBERT model)"),B5o=l(),kb=a("li"),rle=a("strong"),P5o=o("mpnet"),$5o=o(" \u2014 "),jq=a("a"),I5o=o("MPNetForSequenceClassification"),q5o=o(" (MPNet model)"),N5o=l(),Sb=a("li"),tle=a("strong"),j5o=o("nystromformer"),D5o=o(" \u2014 "),Dq=a("a"),G5o=o("NystromformerForSequenceClassification"),O5o=o(" (Nystromformer model)"),V5o=l(),Rb=a("li"),ale=a("strong"),X5o=o("openai-gpt"),z5o=o(" \u2014 "),Gq=a("a"),Q5o=o("OpenAIGPTForSequenceClassification"),W5o=o(" (OpenAI GPT model)"),H5o=l(),Bb=a("li"),nle=a("strong"),U5o=o("perceiver"),J5o=o(" \u2014 "),Oq=a("a"),Y5o=o("PerceiverForSequenceClassification"),K5o=o(" (Perceiver model)"),Z5o=l(),Pb=a("li"),sle=a("strong"),ewo=o("plbart"),owo=o(" \u2014 "),Vq=a("a"),rwo=o("PLBartForSequenceClassification"),two=o(" (PLBart model)"),awo=l(),$b=a("li"),lle=a("strong"),nwo=o("qdqbert"),swo=o(" \u2014 "),Xq=a("a"),lwo=o("QDQBertForSequenceClassification"),iwo=o(" (QDQBert model)"),dwo=l(),Ib=a("li"),ile=a("strong"),cwo=o("reformer"),fwo=o(" \u2014 "),zq=a("a"),mwo=o("ReformerForSequenceClassification"),gwo=o(" (Reformer model)"),hwo=l(),qb=a("li"),dle=a("strong"),pwo=o("rembert"),_wo=o(" \u2014 "),Qq=a("a"),uwo=o("RemBertForSequenceClassification"),bwo=o(" (RemBERT model)"),Fwo=l(),Nb=a("li"),cle=a("strong"),vwo=o("roberta"),Two=o(" \u2014 "),Wq=a("a"),Mwo=o("RobertaForSequenceClassification"),Ewo=o(" (RoBERTa model)"),Cwo=l(),jb=a("li"),fle=a("strong"),wwo=o("roformer"),Awo=o(" \u2014 "),Hq=a("a"),ywo=o("RoFormerForSequenceClassification"),Lwo=o(" (RoFormer model)"),xwo=l(),Db=a("li"),mle=a("strong"),kwo=o("squeezebert"),Swo=o(" \u2014 "),Uq=a("a"),Rwo=o("SqueezeBertForSequenceClassification"),Bwo=o(" (SqueezeBERT model)"),Pwo=l(),Gb=a("li"),gle=a("strong"),$wo=o("tapas"),Iwo=o(" \u2014 "),Jq=a("a"),qwo=o("TapasForSequenceClassification"),Nwo=o(" (TAPAS model)"),jwo=l(),Ob=a("li"),hle=a("strong"),Dwo=o("transfo-xl"),Gwo=o(" \u2014 "),Yq=a("a"),Owo=o("TransfoXLForSequenceClassification"),Vwo=o(" (Transformer-XL model)"),Xwo=l(),Vb=a("li"),ple=a("strong"),zwo=o("xlm"),Qwo=o(" \u2014 "),Kq=a("a"),Wwo=o("XLMForSequenceClassification"),Hwo=o(" (XLM model)"),Uwo=l(),Xb=a("li"),_le=a("strong"),Jwo=o("xlm-roberta"),Ywo=o(" \u2014 "),Zq=a("a"),Kwo=o("XLMRobertaForSequenceClassification"),Zwo=o(" (XLM-RoBERTa model)"),eAo=l(),zb=a("li"),ule=a("strong"),oAo=o("xlm-roberta-xl"),rAo=o(" \u2014 "),eN=a("a"),tAo=o("XLMRobertaXLForSequenceClassification"),aAo=o(" (XLM-RoBERTa-XL model)"),nAo=l(),Qb=a("li"),ble=a("strong"),sAo=o("xlnet"),lAo=o(" \u2014 "),oN=a("a"),iAo=o("XLNetForSequenceClassification"),dAo=o(" (XLNet model)"),cAo=l(),Wb=a("li"),Fle=a("strong"),fAo=o("yoso"),mAo=o(" \u2014 "),rN=a("a"),gAo=o("YosoForSequenceClassification"),hAo=o(" (YOSO model)"),pAo=l(),Hb=a("p"),_Ao=o("The model is set in evaluation mode by default using "),vle=a("code"),uAo=o("model.eval()"),bAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=a("code"),FAo=o("model.train()"),vAo=l(),Mle=a("p"),TAo=o("Examples:"),MAo=l(),f(P5.$$.fragment),eRe=l(),hd=a("h2"),Ub=a("a"),Ele=a("span"),f($5.$$.fragment),EAo=l(),Cle=a("span"),CAo=o("AutoModelForMultipleChoice"),oRe=l(),rr=a("div"),f(I5.$$.fragment),wAo=l(),pd=a("p"),AAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tN=a("a"),yAo=o("from_pretrained()"),LAo=o(" class method or the "),aN=a("a"),xAo=o("from_config()"),kAo=o(` class
method.`),SAo=l(),q5=a("p"),RAo=o("This class cannot be instantiated directly using "),wle=a("code"),BAo=o("__init__()"),PAo=o(" (throws an error)."),$Ao=l(),Jr=a("div"),f(N5.$$.fragment),IAo=l(),Ale=a("p"),qAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NAo=l(),_d=a("p"),jAo=o(`Note:
Loading a model from its configuration file does `),yle=a("strong"),DAo=o("not"),GAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),OAo=o("from_pretrained()"),VAo=o(" to load the model weights."),XAo=l(),Lle=a("p"),zAo=o("Examples:"),QAo=l(),f(j5.$$.fragment),WAo=l(),Ve=a("div"),f(D5.$$.fragment),HAo=l(),xle=a("p"),UAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JAo=l(),Ja=a("p"),YAo=o("The model class to instantiate is selected based on the "),kle=a("code"),KAo=o("model_type"),ZAo=o(` property of the config object (either
passed as an argument or loaded from `),Sle=a("code"),e0o=o("pretrained_model_name_or_path"),o0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),r0o=o("pretrained_model_name_or_path"),t0o=o(":"),a0o=l(),G=a("ul"),Jb=a("li"),Ble=a("strong"),n0o=o("albert"),s0o=o(" \u2014 "),sN=a("a"),l0o=o("AlbertForMultipleChoice"),i0o=o(" (ALBERT model)"),d0o=l(),Yb=a("li"),Ple=a("strong"),c0o=o("bert"),f0o=o(" \u2014 "),lN=a("a"),m0o=o("BertForMultipleChoice"),g0o=o(" (BERT model)"),h0o=l(),Kb=a("li"),$le=a("strong"),p0o=o("big_bird"),_0o=o(" \u2014 "),iN=a("a"),u0o=o("BigBirdForMultipleChoice"),b0o=o(" (BigBird model)"),F0o=l(),Zb=a("li"),Ile=a("strong"),v0o=o("camembert"),T0o=o(" \u2014 "),dN=a("a"),M0o=o("CamembertForMultipleChoice"),E0o=o(" (CamemBERT model)"),C0o=l(),e3=a("li"),qle=a("strong"),w0o=o("canine"),A0o=o(" \u2014 "),cN=a("a"),y0o=o("CanineForMultipleChoice"),L0o=o(" (Canine model)"),x0o=l(),o3=a("li"),Nle=a("strong"),k0o=o("convbert"),S0o=o(" \u2014 "),fN=a("a"),R0o=o("ConvBertForMultipleChoice"),B0o=o(" (ConvBERT model)"),P0o=l(),r3=a("li"),jle=a("strong"),$0o=o("data2vec-text"),I0o=o(" \u2014 "),mN=a("a"),q0o=o("Data2VecTextForMultipleChoice"),N0o=o(" (Data2VecText model)"),j0o=l(),t3=a("li"),Dle=a("strong"),D0o=o("distilbert"),G0o=o(" \u2014 "),gN=a("a"),O0o=o("DistilBertForMultipleChoice"),V0o=o(" (DistilBERT model)"),X0o=l(),a3=a("li"),Gle=a("strong"),z0o=o("electra"),Q0o=o(" \u2014 "),hN=a("a"),W0o=o("ElectraForMultipleChoice"),H0o=o(" (ELECTRA model)"),U0o=l(),n3=a("li"),Ole=a("strong"),J0o=o("flaubert"),Y0o=o(" \u2014 "),pN=a("a"),K0o=o("FlaubertForMultipleChoice"),Z0o=o(" (FlauBERT model)"),eyo=l(),s3=a("li"),Vle=a("strong"),oyo=o("fnet"),ryo=o(" \u2014 "),_N=a("a"),tyo=o("FNetForMultipleChoice"),ayo=o(" (FNet model)"),nyo=l(),l3=a("li"),Xle=a("strong"),syo=o("funnel"),lyo=o(" \u2014 "),uN=a("a"),iyo=o("FunnelForMultipleChoice"),dyo=o(" (Funnel Transformer model)"),cyo=l(),i3=a("li"),zle=a("strong"),fyo=o("ibert"),myo=o(" \u2014 "),bN=a("a"),gyo=o("IBertForMultipleChoice"),hyo=o(" (I-BERT model)"),pyo=l(),d3=a("li"),Qle=a("strong"),_yo=o("longformer"),uyo=o(" \u2014 "),FN=a("a"),byo=o("LongformerForMultipleChoice"),Fyo=o(" (Longformer model)"),vyo=l(),c3=a("li"),Wle=a("strong"),Tyo=o("megatron-bert"),Myo=o(" \u2014 "),vN=a("a"),Eyo=o("MegatronBertForMultipleChoice"),Cyo=o(" (MegatronBert model)"),wyo=l(),f3=a("li"),Hle=a("strong"),Ayo=o("mobilebert"),yyo=o(" \u2014 "),TN=a("a"),Lyo=o("MobileBertForMultipleChoice"),xyo=o(" (MobileBERT model)"),kyo=l(),m3=a("li"),Ule=a("strong"),Syo=o("mpnet"),Ryo=o(" \u2014 "),MN=a("a"),Byo=o("MPNetForMultipleChoice"),Pyo=o(" (MPNet model)"),$yo=l(),g3=a("li"),Jle=a("strong"),Iyo=o("nystromformer"),qyo=o(" \u2014 "),EN=a("a"),Nyo=o("NystromformerForMultipleChoice"),jyo=o(" (Nystromformer model)"),Dyo=l(),h3=a("li"),Yle=a("strong"),Gyo=o("qdqbert"),Oyo=o(" \u2014 "),CN=a("a"),Vyo=o("QDQBertForMultipleChoice"),Xyo=o(" (QDQBert model)"),zyo=l(),p3=a("li"),Kle=a("strong"),Qyo=o("rembert"),Wyo=o(" \u2014 "),wN=a("a"),Hyo=o("RemBertForMultipleChoice"),Uyo=o(" (RemBERT model)"),Jyo=l(),_3=a("li"),Zle=a("strong"),Yyo=o("roberta"),Kyo=o(" \u2014 "),AN=a("a"),Zyo=o("RobertaForMultipleChoice"),eLo=o(" (RoBERTa model)"),oLo=l(),u3=a("li"),eie=a("strong"),rLo=o("roformer"),tLo=o(" \u2014 "),yN=a("a"),aLo=o("RoFormerForMultipleChoice"),nLo=o(" (RoFormer model)"),sLo=l(),b3=a("li"),oie=a("strong"),lLo=o("squeezebert"),iLo=o(" \u2014 "),LN=a("a"),dLo=o("SqueezeBertForMultipleChoice"),cLo=o(" (SqueezeBERT model)"),fLo=l(),F3=a("li"),rie=a("strong"),mLo=o("xlm"),gLo=o(" \u2014 "),xN=a("a"),hLo=o("XLMForMultipleChoice"),pLo=o(" (XLM model)"),_Lo=l(),v3=a("li"),tie=a("strong"),uLo=o("xlm-roberta"),bLo=o(" \u2014 "),kN=a("a"),FLo=o("XLMRobertaForMultipleChoice"),vLo=o(" (XLM-RoBERTa model)"),TLo=l(),T3=a("li"),aie=a("strong"),MLo=o("xlm-roberta-xl"),ELo=o(" \u2014 "),SN=a("a"),CLo=o("XLMRobertaXLForMultipleChoice"),wLo=o(" (XLM-RoBERTa-XL model)"),ALo=l(),M3=a("li"),nie=a("strong"),yLo=o("xlnet"),LLo=o(" \u2014 "),RN=a("a"),xLo=o("XLNetForMultipleChoice"),kLo=o(" (XLNet model)"),SLo=l(),E3=a("li"),sie=a("strong"),RLo=o("yoso"),BLo=o(" \u2014 "),BN=a("a"),PLo=o("YosoForMultipleChoice"),$Lo=o(" (YOSO model)"),ILo=l(),C3=a("p"),qLo=o("The model is set in evaluation mode by default using "),lie=a("code"),NLo=o("model.eval()"),jLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),DLo=o("model.train()"),GLo=l(),die=a("p"),OLo=o("Examples:"),VLo=l(),f(G5.$$.fragment),rRe=l(),ud=a("h2"),w3=a("a"),cie=a("span"),f(O5.$$.fragment),XLo=l(),fie=a("span"),zLo=o("AutoModelForNextSentencePrediction"),tRe=l(),tr=a("div"),f(V5.$$.fragment),QLo=l(),bd=a("p"),WLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PN=a("a"),HLo=o("from_pretrained()"),ULo=o(" class method or the "),$N=a("a"),JLo=o("from_config()"),YLo=o(` class
method.`),KLo=l(),X5=a("p"),ZLo=o("This class cannot be instantiated directly using "),mie=a("code"),e8o=o("__init__()"),o8o=o(" (throws an error)."),r8o=l(),Yr=a("div"),f(z5.$$.fragment),t8o=l(),gie=a("p"),a8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n8o=l(),Fd=a("p"),s8o=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),l8o=o("not"),i8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IN=a("a"),d8o=o("from_pretrained()"),c8o=o(" to load the model weights."),f8o=l(),pie=a("p"),m8o=o("Examples:"),g8o=l(),f(Q5.$$.fragment),h8o=l(),Xe=a("div"),f(W5.$$.fragment),p8o=l(),_ie=a("p"),_8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u8o=l(),Ya=a("p"),b8o=o("The model class to instantiate is selected based on the "),uie=a("code"),F8o=o("model_type"),v8o=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),T8o=o("pretrained_model_name_or_path"),M8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),E8o=o("pretrained_model_name_or_path"),C8o=o(":"),w8o=l(),da=a("ul"),A3=a("li"),vie=a("strong"),A8o=o("bert"),y8o=o(" \u2014 "),qN=a("a"),L8o=o("BertForNextSentencePrediction"),x8o=o(" (BERT model)"),k8o=l(),y3=a("li"),Tie=a("strong"),S8o=o("fnet"),R8o=o(" \u2014 "),NN=a("a"),B8o=o("FNetForNextSentencePrediction"),P8o=o(" (FNet model)"),$8o=l(),L3=a("li"),Mie=a("strong"),I8o=o("megatron-bert"),q8o=o(" \u2014 "),jN=a("a"),N8o=o("MegatronBertForNextSentencePrediction"),j8o=o(" (MegatronBert model)"),D8o=l(),x3=a("li"),Eie=a("strong"),G8o=o("mobilebert"),O8o=o(" \u2014 "),DN=a("a"),V8o=o("MobileBertForNextSentencePrediction"),X8o=o(" (MobileBERT model)"),z8o=l(),k3=a("li"),Cie=a("strong"),Q8o=o("qdqbert"),W8o=o(" \u2014 "),GN=a("a"),H8o=o("QDQBertForNextSentencePrediction"),U8o=o(" (QDQBert model)"),J8o=l(),S3=a("p"),Y8o=o("The model is set in evaluation mode by default using "),wie=a("code"),K8o=o("model.eval()"),Z8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),e9o=o("model.train()"),o9o=l(),yie=a("p"),r9o=o("Examples:"),t9o=l(),f(H5.$$.fragment),aRe=l(),vd=a("h2"),R3=a("a"),Lie=a("span"),f(U5.$$.fragment),a9o=l(),xie=a("span"),n9o=o("AutoModelForTokenClassification"),nRe=l(),ar=a("div"),f(J5.$$.fragment),s9o=l(),Td=a("p"),l9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ON=a("a"),i9o=o("from_pretrained()"),d9o=o(" class method or the "),VN=a("a"),c9o=o("from_config()"),f9o=o(` class
method.`),m9o=l(),Y5=a("p"),g9o=o("This class cannot be instantiated directly using "),kie=a("code"),h9o=o("__init__()"),p9o=o(" (throws an error)."),_9o=l(),Kr=a("div"),f(K5.$$.fragment),u9o=l(),Sie=a("p"),b9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F9o=l(),Md=a("p"),v9o=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),T9o=o("not"),M9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),E9o=o("from_pretrained()"),C9o=o(" to load the model weights."),w9o=l(),Bie=a("p"),A9o=o("Examples:"),y9o=l(),f(Z5.$$.fragment),L9o=l(),ze=a("div"),f(ew.$$.fragment),x9o=l(),Pie=a("p"),k9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S9o=l(),Ka=a("p"),R9o=o("The model class to instantiate is selected based on the "),$ie=a("code"),B9o=o("model_type"),P9o=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),$9o=o("pretrained_model_name_or_path"),I9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),q9o=o("pretrained_model_name_or_path"),N9o=o(":"),j9o=l(),j=a("ul"),B3=a("li"),Nie=a("strong"),D9o=o("albert"),G9o=o(" \u2014 "),zN=a("a"),O9o=o("AlbertForTokenClassification"),V9o=o(" (ALBERT model)"),X9o=l(),P3=a("li"),jie=a("strong"),z9o=o("bert"),Q9o=o(" \u2014 "),QN=a("a"),W9o=o("BertForTokenClassification"),H9o=o(" (BERT model)"),U9o=l(),$3=a("li"),Die=a("strong"),J9o=o("big_bird"),Y9o=o(" \u2014 "),WN=a("a"),K9o=o("BigBirdForTokenClassification"),Z9o=o(" (BigBird model)"),exo=l(),I3=a("li"),Gie=a("strong"),oxo=o("camembert"),rxo=o(" \u2014 "),HN=a("a"),txo=o("CamembertForTokenClassification"),axo=o(" (CamemBERT model)"),nxo=l(),q3=a("li"),Oie=a("strong"),sxo=o("canine"),lxo=o(" \u2014 "),UN=a("a"),ixo=o("CanineForTokenClassification"),dxo=o(" (Canine model)"),cxo=l(),N3=a("li"),Vie=a("strong"),fxo=o("convbert"),mxo=o(" \u2014 "),JN=a("a"),gxo=o("ConvBertForTokenClassification"),hxo=o(" (ConvBERT model)"),pxo=l(),j3=a("li"),Xie=a("strong"),_xo=o("data2vec-text"),uxo=o(" \u2014 "),YN=a("a"),bxo=o("Data2VecTextForTokenClassification"),Fxo=o(" (Data2VecText model)"),vxo=l(),D3=a("li"),zie=a("strong"),Txo=o("deberta"),Mxo=o(" \u2014 "),KN=a("a"),Exo=o("DebertaForTokenClassification"),Cxo=o(" (DeBERTa model)"),wxo=l(),G3=a("li"),Qie=a("strong"),Axo=o("deberta-v2"),yxo=o(" \u2014 "),ZN=a("a"),Lxo=o("DebertaV2ForTokenClassification"),xxo=o(" (DeBERTa-v2 model)"),kxo=l(),O3=a("li"),Wie=a("strong"),Sxo=o("distilbert"),Rxo=o(" \u2014 "),ej=a("a"),Bxo=o("DistilBertForTokenClassification"),Pxo=o(" (DistilBERT model)"),$xo=l(),V3=a("li"),Hie=a("strong"),Ixo=o("electra"),qxo=o(" \u2014 "),oj=a("a"),Nxo=o("ElectraForTokenClassification"),jxo=o(" (ELECTRA model)"),Dxo=l(),X3=a("li"),Uie=a("strong"),Gxo=o("flaubert"),Oxo=o(" \u2014 "),rj=a("a"),Vxo=o("FlaubertForTokenClassification"),Xxo=o(" (FlauBERT model)"),zxo=l(),z3=a("li"),Jie=a("strong"),Qxo=o("fnet"),Wxo=o(" \u2014 "),tj=a("a"),Hxo=o("FNetForTokenClassification"),Uxo=o(" (FNet model)"),Jxo=l(),Q3=a("li"),Yie=a("strong"),Yxo=o("funnel"),Kxo=o(" \u2014 "),aj=a("a"),Zxo=o("FunnelForTokenClassification"),eko=o(" (Funnel Transformer model)"),oko=l(),W3=a("li"),Kie=a("strong"),rko=o("gpt2"),tko=o(" \u2014 "),nj=a("a"),ako=o("GPT2ForTokenClassification"),nko=o(" (OpenAI GPT-2 model)"),sko=l(),H3=a("li"),Zie=a("strong"),lko=o("ibert"),iko=o(" \u2014 "),sj=a("a"),dko=o("IBertForTokenClassification"),cko=o(" (I-BERT model)"),fko=l(),U3=a("li"),ede=a("strong"),mko=o("layoutlm"),gko=o(" \u2014 "),lj=a("a"),hko=o("LayoutLMForTokenClassification"),pko=o(" (LayoutLM model)"),_ko=l(),J3=a("li"),ode=a("strong"),uko=o("layoutlmv2"),bko=o(" \u2014 "),ij=a("a"),Fko=o("LayoutLMv2ForTokenClassification"),vko=o(" (LayoutLMv2 model)"),Tko=l(),Y3=a("li"),rde=a("strong"),Mko=o("longformer"),Eko=o(" \u2014 "),dj=a("a"),Cko=o("LongformerForTokenClassification"),wko=o(" (Longformer model)"),Ako=l(),K3=a("li"),tde=a("strong"),yko=o("megatron-bert"),Lko=o(" \u2014 "),cj=a("a"),xko=o("MegatronBertForTokenClassification"),kko=o(" (MegatronBert model)"),Sko=l(),Z3=a("li"),ade=a("strong"),Rko=o("mobilebert"),Bko=o(" \u2014 "),fj=a("a"),Pko=o("MobileBertForTokenClassification"),$ko=o(" (MobileBERT model)"),Iko=l(),e2=a("li"),nde=a("strong"),qko=o("mpnet"),Nko=o(" \u2014 "),mj=a("a"),jko=o("MPNetForTokenClassification"),Dko=o(" (MPNet model)"),Gko=l(),o2=a("li"),sde=a("strong"),Oko=o("nystromformer"),Vko=o(" \u2014 "),gj=a("a"),Xko=o("NystromformerForTokenClassification"),zko=o(" (Nystromformer model)"),Qko=l(),r2=a("li"),lde=a("strong"),Wko=o("qdqbert"),Hko=o(" \u2014 "),hj=a("a"),Uko=o("QDQBertForTokenClassification"),Jko=o(" (QDQBert model)"),Yko=l(),t2=a("li"),ide=a("strong"),Kko=o("rembert"),Zko=o(" \u2014 "),pj=a("a"),eSo=o("RemBertForTokenClassification"),oSo=o(" (RemBERT model)"),rSo=l(),a2=a("li"),dde=a("strong"),tSo=o("roberta"),aSo=o(" \u2014 "),_j=a("a"),nSo=o("RobertaForTokenClassification"),sSo=o(" (RoBERTa model)"),lSo=l(),n2=a("li"),cde=a("strong"),iSo=o("roformer"),dSo=o(" \u2014 "),uj=a("a"),cSo=o("RoFormerForTokenClassification"),fSo=o(" (RoFormer model)"),mSo=l(),s2=a("li"),fde=a("strong"),gSo=o("squeezebert"),hSo=o(" \u2014 "),bj=a("a"),pSo=o("SqueezeBertForTokenClassification"),_So=o(" (SqueezeBERT model)"),uSo=l(),l2=a("li"),mde=a("strong"),bSo=o("xlm"),FSo=o(" \u2014 "),Fj=a("a"),vSo=o("XLMForTokenClassification"),TSo=o(" (XLM model)"),MSo=l(),i2=a("li"),gde=a("strong"),ESo=o("xlm-roberta"),CSo=o(" \u2014 "),vj=a("a"),wSo=o("XLMRobertaForTokenClassification"),ASo=o(" (XLM-RoBERTa model)"),ySo=l(),d2=a("li"),hde=a("strong"),LSo=o("xlm-roberta-xl"),xSo=o(" \u2014 "),Tj=a("a"),kSo=o("XLMRobertaXLForTokenClassification"),SSo=o(" (XLM-RoBERTa-XL model)"),RSo=l(),c2=a("li"),pde=a("strong"),BSo=o("xlnet"),PSo=o(" \u2014 "),Mj=a("a"),$So=o("XLNetForTokenClassification"),ISo=o(" (XLNet model)"),qSo=l(),f2=a("li"),_de=a("strong"),NSo=o("yoso"),jSo=o(" \u2014 "),Ej=a("a"),DSo=o("YosoForTokenClassification"),GSo=o(" (YOSO model)"),OSo=l(),m2=a("p"),VSo=o("The model is set in evaluation mode by default using "),ude=a("code"),XSo=o("model.eval()"),zSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),QSo=o("model.train()"),WSo=l(),Fde=a("p"),HSo=o("Examples:"),USo=l(),f(ow.$$.fragment),sRe=l(),Ed=a("h2"),g2=a("a"),vde=a("span"),f(rw.$$.fragment),JSo=l(),Tde=a("span"),YSo=o("AutoModelForQuestionAnswering"),lRe=l(),nr=a("div"),f(tw.$$.fragment),KSo=l(),Cd=a("p"),ZSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cj=a("a"),eRo=o("from_pretrained()"),oRo=o(" class method or the "),wj=a("a"),rRo=o("from_config()"),tRo=o(` class
method.`),aRo=l(),aw=a("p"),nRo=o("This class cannot be instantiated directly using "),Mde=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),Zr=a("div"),f(nw.$$.fragment),dRo=l(),Ede=a("p"),cRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fRo=l(),wd=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=a("a"),pRo=o("from_pretrained()"),_Ro=o(" to load the model weights."),uRo=l(),wde=a("p"),bRo=o("Examples:"),FRo=l(),f(sw.$$.fragment),vRo=l(),Qe=a("div"),f(lw.$$.fragment),TRo=l(),Ade=a("p"),MRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ERo=l(),Za=a("p"),CRo=o("The model class to instantiate is selected based on the "),yde=a("code"),wRo=o("model_type"),ARo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),yRo=o("pretrained_model_name_or_path"),LRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),xRo=o("pretrained_model_name_or_path"),kRo=o(":"),SRo=l(),R=a("ul"),h2=a("li"),kde=a("strong"),RRo=o("albert"),BRo=o(" \u2014 "),yj=a("a"),PRo=o("AlbertForQuestionAnswering"),$Ro=o(" (ALBERT model)"),IRo=l(),p2=a("li"),Sde=a("strong"),qRo=o("bart"),NRo=o(" \u2014 "),Lj=a("a"),jRo=o("BartForQuestionAnswering"),DRo=o(" (BART model)"),GRo=l(),_2=a("li"),Rde=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),xj=a("a"),XRo=o("BertForQuestionAnswering"),zRo=o(" (BERT model)"),QRo=l(),u2=a("li"),Bde=a("strong"),WRo=o("big_bird"),HRo=o(" \u2014 "),kj=a("a"),URo=o("BigBirdForQuestionAnswering"),JRo=o(" (BigBird model)"),YRo=l(),b2=a("li"),Pde=a("strong"),KRo=o("bigbird_pegasus"),ZRo=o(" \u2014 "),Sj=a("a"),eBo=o("BigBirdPegasusForQuestionAnswering"),oBo=o(" (BigBirdPegasus model)"),rBo=l(),F2=a("li"),$de=a("strong"),tBo=o("camembert"),aBo=o(" \u2014 "),Rj=a("a"),nBo=o("CamembertForQuestionAnswering"),sBo=o(" (CamemBERT model)"),lBo=l(),v2=a("li"),Ide=a("strong"),iBo=o("canine"),dBo=o(" \u2014 "),Bj=a("a"),cBo=o("CanineForQuestionAnswering"),fBo=o(" (Canine model)"),mBo=l(),T2=a("li"),qde=a("strong"),gBo=o("convbert"),hBo=o(" \u2014 "),Pj=a("a"),pBo=o("ConvBertForQuestionAnswering"),_Bo=o(" (ConvBERT model)"),uBo=l(),M2=a("li"),Nde=a("strong"),bBo=o("data2vec-text"),FBo=o(" \u2014 "),$j=a("a"),vBo=o("Data2VecTextForQuestionAnswering"),TBo=o(" (Data2VecText model)"),MBo=l(),E2=a("li"),jde=a("strong"),EBo=o("deberta"),CBo=o(" \u2014 "),Ij=a("a"),wBo=o("DebertaForQuestionAnswering"),ABo=o(" (DeBERTa model)"),yBo=l(),C2=a("li"),Dde=a("strong"),LBo=o("deberta-v2"),xBo=o(" \u2014 "),qj=a("a"),kBo=o("DebertaV2ForQuestionAnswering"),SBo=o(" (DeBERTa-v2 model)"),RBo=l(),w2=a("li"),Gde=a("strong"),BBo=o("distilbert"),PBo=o(" \u2014 "),Nj=a("a"),$Bo=o("DistilBertForQuestionAnswering"),IBo=o(" (DistilBERT model)"),qBo=l(),A2=a("li"),Ode=a("strong"),NBo=o("electra"),jBo=o(" \u2014 "),jj=a("a"),DBo=o("ElectraForQuestionAnswering"),GBo=o(" (ELECTRA model)"),OBo=l(),y2=a("li"),Vde=a("strong"),VBo=o("flaubert"),XBo=o(" \u2014 "),Dj=a("a"),zBo=o("FlaubertForQuestionAnsweringSimple"),QBo=o(" (FlauBERT model)"),WBo=l(),L2=a("li"),Xde=a("strong"),HBo=o("fnet"),UBo=o(" \u2014 "),Gj=a("a"),JBo=o("FNetForQuestionAnswering"),YBo=o(" (FNet model)"),KBo=l(),x2=a("li"),zde=a("strong"),ZBo=o("funnel"),ePo=o(" \u2014 "),Oj=a("a"),oPo=o("FunnelForQuestionAnswering"),rPo=o(" (Funnel Transformer model)"),tPo=l(),k2=a("li"),Qde=a("strong"),aPo=o("gptj"),nPo=o(" \u2014 "),Vj=a("a"),sPo=o("GPTJForQuestionAnswering"),lPo=o(" (GPT-J model)"),iPo=l(),S2=a("li"),Wde=a("strong"),dPo=o("ibert"),cPo=o(" \u2014 "),Xj=a("a"),fPo=o("IBertForQuestionAnswering"),mPo=o(" (I-BERT model)"),gPo=l(),R2=a("li"),Hde=a("strong"),hPo=o("layoutlmv2"),pPo=o(" \u2014 "),zj=a("a"),_Po=o("LayoutLMv2ForQuestionAnswering"),uPo=o(" (LayoutLMv2 model)"),bPo=l(),B2=a("li"),Ude=a("strong"),FPo=o("led"),vPo=o(" \u2014 "),Qj=a("a"),TPo=o("LEDForQuestionAnswering"),MPo=o(" (LED model)"),EPo=l(),P2=a("li"),Jde=a("strong"),CPo=o("longformer"),wPo=o(" \u2014 "),Wj=a("a"),APo=o("LongformerForQuestionAnswering"),yPo=o(" (Longformer model)"),LPo=l(),$2=a("li"),Yde=a("strong"),xPo=o("lxmert"),kPo=o(" \u2014 "),Hj=a("a"),SPo=o("LxmertForQuestionAnswering"),RPo=o(" (LXMERT model)"),BPo=l(),I2=a("li"),Kde=a("strong"),PPo=o("mbart"),$Po=o(" \u2014 "),Uj=a("a"),IPo=o("MBartForQuestionAnswering"),qPo=o(" (mBART model)"),NPo=l(),q2=a("li"),Zde=a("strong"),jPo=o("megatron-bert"),DPo=o(" \u2014 "),Jj=a("a"),GPo=o("MegatronBertForQuestionAnswering"),OPo=o(" (MegatronBert model)"),VPo=l(),N2=a("li"),ece=a("strong"),XPo=o("mobilebert"),zPo=o(" \u2014 "),Yj=a("a"),QPo=o("MobileBertForQuestionAnswering"),WPo=o(" (MobileBERT model)"),HPo=l(),j2=a("li"),oce=a("strong"),UPo=o("mpnet"),JPo=o(" \u2014 "),Kj=a("a"),YPo=o("MPNetForQuestionAnswering"),KPo=o(" (MPNet model)"),ZPo=l(),D2=a("li"),rce=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),Zj=a("a"),r$o=o("NystromformerForQuestionAnswering"),t$o=o(" (Nystromformer model)"),a$o=l(),G2=a("li"),tce=a("strong"),n$o=o("qdqbert"),s$o=o(" \u2014 "),eD=a("a"),l$o=o("QDQBertForQuestionAnswering"),i$o=o(" (QDQBert model)"),d$o=l(),O2=a("li"),ace=a("strong"),c$o=o("reformer"),f$o=o(" \u2014 "),oD=a("a"),m$o=o("ReformerForQuestionAnswering"),g$o=o(" (Reformer model)"),h$o=l(),V2=a("li"),nce=a("strong"),p$o=o("rembert"),_$o=o(" \u2014 "),rD=a("a"),u$o=o("RemBertForQuestionAnswering"),b$o=o(" (RemBERT model)"),F$o=l(),X2=a("li"),sce=a("strong"),v$o=o("roberta"),T$o=o(" \u2014 "),tD=a("a"),M$o=o("RobertaForQuestionAnswering"),E$o=o(" (RoBERTa model)"),C$o=l(),z2=a("li"),lce=a("strong"),w$o=o("roformer"),A$o=o(" \u2014 "),aD=a("a"),y$o=o("RoFormerForQuestionAnswering"),L$o=o(" (RoFormer model)"),x$o=l(),Q2=a("li"),ice=a("strong"),k$o=o("splinter"),S$o=o(" \u2014 "),nD=a("a"),R$o=o("SplinterForQuestionAnswering"),B$o=o(" (Splinter model)"),P$o=l(),W2=a("li"),dce=a("strong"),$$o=o("squeezebert"),I$o=o(" \u2014 "),sD=a("a"),q$o=o("SqueezeBertForQuestionAnswering"),N$o=o(" (SqueezeBERT model)"),j$o=l(),H2=a("li"),cce=a("strong"),D$o=o("xlm"),G$o=o(" \u2014 "),lD=a("a"),O$o=o("XLMForQuestionAnsweringSimple"),V$o=o(" (XLM model)"),X$o=l(),U2=a("li"),fce=a("strong"),z$o=o("xlm-roberta"),Q$o=o(" \u2014 "),iD=a("a"),W$o=o("XLMRobertaForQuestionAnswering"),H$o=o(" (XLM-RoBERTa model)"),U$o=l(),J2=a("li"),mce=a("strong"),J$o=o("xlm-roberta-xl"),Y$o=o(" \u2014 "),dD=a("a"),K$o=o("XLMRobertaXLForQuestionAnswering"),Z$o=o(" (XLM-RoBERTa-XL model)"),eIo=l(),Y2=a("li"),gce=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),cD=a("a"),tIo=o("XLNetForQuestionAnsweringSimple"),aIo=o(" (XLNet model)"),nIo=l(),K2=a("li"),hce=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),fD=a("a"),iIo=o("YosoForQuestionAnswering"),dIo=o(" (YOSO model)"),cIo=l(),Z2=a("p"),fIo=o("The model is set in evaluation mode by default using "),pce=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),hIo=o("model.train()"),pIo=l(),uce=a("p"),_Io=o("Examples:"),uIo=l(),f(iw.$$.fragment),iRe=l(),Ad=a("h2"),eF=a("a"),bce=a("span"),f(dw.$$.fragment),bIo=l(),Fce=a("span"),FIo=o("AutoModelForTableQuestionAnswering"),dRe=l(),sr=a("div"),f(cw.$$.fragment),vIo=l(),yd=a("p"),TIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mD=a("a"),MIo=o("from_pretrained()"),EIo=o(" class method or the "),gD=a("a"),CIo=o("from_config()"),wIo=o(` class
method.`),AIo=l(),fw=a("p"),yIo=o("This class cannot be instantiated directly using "),vce=a("code"),LIo=o("__init__()"),xIo=o(" (throws an error)."),kIo=l(),et=a("div"),f(mw.$$.fragment),SIo=l(),Tce=a("p"),RIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BIo=l(),Ld=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),$Io=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=a("a"),qIo=o("from_pretrained()"),NIo=o(" to load the model weights."),jIo=l(),Ece=a("p"),DIo=o("Examples:"),GIo=l(),f(gw.$$.fragment),OIo=l(),We=a("div"),f(hw.$$.fragment),VIo=l(),Cce=a("p"),XIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zIo=l(),en=a("p"),QIo=o("The model class to instantiate is selected based on the "),wce=a("code"),WIo=o("model_type"),HIo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),Lce=a("ul"),oF=a("li"),xce=a("strong"),eqo=o("tapas"),oqo=o(" \u2014 "),pD=a("a"),rqo=o("TapasForQuestionAnswering"),tqo=o(" (TAPAS model)"),aqo=l(),rF=a("p"),nqo=o("The model is set in evaluation mode by default using "),kce=a("code"),sqo=o("model.eval()"),lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),iqo=o("model.train()"),dqo=l(),Rce=a("p"),cqo=o("Examples:"),fqo=l(),f(pw.$$.fragment),cRe=l(),xd=a("h2"),tF=a("a"),Bce=a("span"),f(_w.$$.fragment),mqo=l(),Pce=a("span"),gqo=o("AutoModelForImageClassification"),fRe=l(),lr=a("div"),f(uw.$$.fragment),hqo=l(),kd=a("p"),pqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_D=a("a"),_qo=o("from_pretrained()"),uqo=o(" class method or the "),uD=a("a"),bqo=o("from_config()"),Fqo=o(` class
method.`),vqo=l(),bw=a("p"),Tqo=o("This class cannot be instantiated directly using "),$ce=a("code"),Mqo=o("__init__()"),Eqo=o(" (throws an error)."),Cqo=l(),ot=a("div"),f(Fw.$$.fragment),wqo=l(),Ice=a("p"),Aqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yqo=l(),Sd=a("p"),Lqo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),xqo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Bqo=l(),Nce=a("p"),Pqo=o("Examples:"),$qo=l(),f(vw.$$.fragment),Iqo=l(),He=a("div"),f(Tw.$$.fragment),qqo=l(),jce=a("p"),Nqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jqo=l(),on=a("p"),Dqo=o("The model class to instantiate is selected based on the "),Dce=a("code"),Gqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),zqo=o("pretrained_model_name_or_path"),Qqo=o(":"),Wqo=l(),ge=a("ul"),aF=a("li"),Vce=a("strong"),Hqo=o("beit"),Uqo=o(" \u2014 "),FD=a("a"),Jqo=o("BeitForImageClassification"),Yqo=o(" (BEiT model)"),Kqo=l(),nF=a("li"),Xce=a("strong"),Zqo=o("convnext"),eNo=o(" \u2014 "),vD=a("a"),oNo=o("ConvNextForImageClassification"),rNo=o(" (ConvNext model)"),tNo=l(),Ds=a("li"),zce=a("strong"),aNo=o("deit"),nNo=o(" \u2014 "),TD=a("a"),sNo=o("DeiTForImageClassification"),lNo=o(" or "),MD=a("a"),iNo=o("DeiTForImageClassificationWithTeacher"),dNo=o(" (DeiT model)"),cNo=l(),sF=a("li"),Qce=a("strong"),fNo=o("imagegpt"),mNo=o(" \u2014 "),ED=a("a"),gNo=o("ImageGPTForImageClassification"),hNo=o(" (ImageGPT model)"),pNo=l(),ma=a("li"),Wce=a("strong"),_No=o("perceiver"),uNo=o(" \u2014 "),CD=a("a"),bNo=o("PerceiverForImageClassificationLearned"),FNo=o(" or "),wD=a("a"),vNo=o("PerceiverForImageClassificationFourier"),TNo=o(" or "),AD=a("a"),MNo=o("PerceiverForImageClassificationConvProcessing"),ENo=o(" (Perceiver model)"),CNo=l(),lF=a("li"),Hce=a("strong"),wNo=o("poolformer"),ANo=o(" \u2014 "),yD=a("a"),yNo=o("PoolFormerForImageClassification"),LNo=o(" (PoolFormer model)"),xNo=l(),iF=a("li"),Uce=a("strong"),kNo=o("resnet"),SNo=o(" \u2014 "),LD=a("a"),RNo=o("ResNetForImageClassification"),BNo=o(" (ResNet model)"),PNo=l(),dF=a("li"),Jce=a("strong"),$No=o("segformer"),INo=o(" \u2014 "),xD=a("a"),qNo=o("SegformerForImageClassification"),NNo=o(" (SegFormer model)"),jNo=l(),cF=a("li"),Yce=a("strong"),DNo=o("swin"),GNo=o(" \u2014 "),kD=a("a"),ONo=o("SwinForImageClassification"),VNo=o(" (Swin model)"),XNo=l(),fF=a("li"),Kce=a("strong"),zNo=o("van"),QNo=o(" \u2014 "),SD=a("a"),WNo=o("VanForImageClassification"),HNo=o(" (VAN model)"),UNo=l(),mF=a("li"),Zce=a("strong"),JNo=o("vit"),YNo=o(" \u2014 "),RD=a("a"),KNo=o("ViTForImageClassification"),ZNo=o(" (ViT model)"),ejo=l(),gF=a("p"),ojo=o("The model is set in evaluation mode by default using "),efe=a("code"),rjo=o("model.eval()"),tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),ajo=o("model.train()"),njo=l(),rfe=a("p"),sjo=o("Examples:"),ljo=l(),f(Mw.$$.fragment),mRe=l(),Rd=a("h2"),hF=a("a"),tfe=a("span"),f(Ew.$$.fragment),ijo=l(),afe=a("span"),djo=o("AutoModelForVision2Seq"),gRe=l(),ir=a("div"),f(Cw.$$.fragment),cjo=l(),Bd=a("p"),fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BD=a("a"),mjo=o("from_pretrained()"),gjo=o(" class method or the "),PD=a("a"),hjo=o("from_config()"),pjo=o(` class
method.`),_jo=l(),ww=a("p"),ujo=o("This class cannot be instantiated directly using "),nfe=a("code"),bjo=o("__init__()"),Fjo=o(" (throws an error)."),vjo=l(),rt=a("div"),f(Aw.$$.fragment),Tjo=l(),sfe=a("p"),Mjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ejo=l(),Pd=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),wjo=o("not"),Ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),yjo=o("from_pretrained()"),Ljo=o(" to load the model weights."),xjo=l(),ife=a("p"),kjo=o("Examples:"),Sjo=l(),f(yw.$$.fragment),Rjo=l(),Ue=a("div"),f(Lw.$$.fragment),Bjo=l(),dfe=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$jo=l(),rn=a("p"),Ijo=o("The model class to instantiate is selected based on the "),cfe=a("code"),qjo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Vjo=l(),gfe=a("ul"),pF=a("li"),hfe=a("strong"),Xjo=o("vision-encoder-decoder"),zjo=o(" \u2014 "),ID=a("a"),Qjo=o("VisionEncoderDecoderModel"),Wjo=o(" (Vision Encoder decoder model)"),Hjo=l(),_F=a("p"),Ujo=o("The model is set in evaluation mode by default using "),pfe=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),Kjo=o("model.train()"),Zjo=l(),ufe=a("p"),eDo=o("Examples:"),oDo=l(),f(xw.$$.fragment),hRe=l(),$d=a("h2"),uF=a("a"),bfe=a("span"),f(kw.$$.fragment),rDo=l(),Ffe=a("span"),tDo=o("AutoModelForAudioClassification"),pRe=l(),dr=a("div"),f(Sw.$$.fragment),aDo=l(),Id=a("p"),nDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qD=a("a"),sDo=o("from_pretrained()"),lDo=o(" class method or the "),ND=a("a"),iDo=o("from_config()"),dDo=o(` class
method.`),cDo=l(),Rw=a("p"),fDo=o("This class cannot be instantiated directly using "),vfe=a("code"),mDo=o("__init__()"),gDo=o(" (throws an error)."),hDo=l(),tt=a("div"),f(Bw.$$.fragment),pDo=l(),Tfe=a("p"),_Do=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uDo=l(),qd=a("p"),bDo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),FDo=o("not"),vDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),TDo=o("from_pretrained()"),MDo=o(" to load the model weights."),EDo=l(),Efe=a("p"),CDo=o("Examples:"),wDo=l(),f(Pw.$$.fragment),ADo=l(),Je=a("div"),f($w.$$.fragment),yDo=l(),Cfe=a("p"),LDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xDo=l(),tn=a("p"),kDo=o("The model class to instantiate is selected based on the "),wfe=a("code"),SDo=o("model_type"),RDo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),BDo=o("pretrained_model_name_or_path"),PDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),$Do=o("pretrained_model_name_or_path"),IDo=o(":"),qDo=l(),Se=a("ul"),bF=a("li"),Lfe=a("strong"),NDo=o("data2vec-audio"),jDo=o(" \u2014 "),DD=a("a"),DDo=o("Data2VecAudioForSequenceClassification"),GDo=o(" (Data2VecAudio model)"),ODo=l(),FF=a("li"),xfe=a("strong"),VDo=o("hubert"),XDo=o(" \u2014 "),GD=a("a"),zDo=o("HubertForSequenceClassification"),QDo=o(" (Hubert model)"),WDo=l(),vF=a("li"),kfe=a("strong"),HDo=o("sew"),UDo=o(" \u2014 "),OD=a("a"),JDo=o("SEWForSequenceClassification"),YDo=o(" (SEW model)"),KDo=l(),TF=a("li"),Sfe=a("strong"),ZDo=o("sew-d"),eGo=o(" \u2014 "),VD=a("a"),oGo=o("SEWDForSequenceClassification"),rGo=o(" (SEW-D model)"),tGo=l(),MF=a("li"),Rfe=a("strong"),aGo=o("unispeech"),nGo=o(" \u2014 "),XD=a("a"),sGo=o("UniSpeechForSequenceClassification"),lGo=o(" (UniSpeech model)"),iGo=l(),EF=a("li"),Bfe=a("strong"),dGo=o("unispeech-sat"),cGo=o(" \u2014 "),zD=a("a"),fGo=o("UniSpeechSatForSequenceClassification"),mGo=o(" (UniSpeechSat model)"),gGo=l(),CF=a("li"),Pfe=a("strong"),hGo=o("wav2vec2"),pGo=o(" \u2014 "),QD=a("a"),_Go=o("Wav2Vec2ForSequenceClassification"),uGo=o(" (Wav2Vec2 model)"),bGo=l(),wF=a("li"),$fe=a("strong"),FGo=o("wavlm"),vGo=o(" \u2014 "),WD=a("a"),TGo=o("WavLMForSequenceClassification"),MGo=o(" (WavLM model)"),EGo=l(),AF=a("p"),CGo=o("The model is set in evaluation mode by default using "),Ife=a("code"),wGo=o("model.eval()"),AGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),yGo=o("model.train()"),LGo=l(),Nfe=a("p"),xGo=o("Examples:"),kGo=l(),f(Iw.$$.fragment),_Re=l(),Nd=a("h2"),yF=a("a"),jfe=a("span"),f(qw.$$.fragment),SGo=l(),Dfe=a("span"),RGo=o("AutoModelForAudioFrameClassification"),uRe=l(),cr=a("div"),f(Nw.$$.fragment),BGo=l(),jd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HD=a("a"),$Go=o("from_pretrained()"),IGo=o(" class method or the "),UD=a("a"),qGo=o("from_config()"),NGo=o(` class
method.`),jGo=l(),jw=a("p"),DGo=o("This class cannot be instantiated directly using "),Gfe=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),VGo=l(),at=a("div"),f(Dw.$$.fragment),XGo=l(),Ofe=a("p"),zGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QGo=l(),Dd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),JGo=o("from_pretrained()"),YGo=o(" to load the model weights."),KGo=l(),Xfe=a("p"),ZGo=o("Examples:"),eOo=l(),f(Gw.$$.fragment),oOo=l(),Ye=a("div"),f(Ow.$$.fragment),rOo=l(),zfe=a("p"),tOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aOo=l(),an=a("p"),nOo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),sOo=o("model_type"),lOo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),cOo=o("pretrained_model_name_or_path"),fOo=o(":"),mOo=l(),nn=a("ul"),LF=a("li"),Ufe=a("strong"),gOo=o("data2vec-audio"),hOo=o(" \u2014 "),YD=a("a"),pOo=o("Data2VecAudioForAudioFrameClassification"),_Oo=o(" (Data2VecAudio model)"),uOo=l(),xF=a("li"),Jfe=a("strong"),bOo=o("unispeech-sat"),FOo=o(" \u2014 "),KD=a("a"),vOo=o("UniSpeechSatForAudioFrameClassification"),TOo=o(" (UniSpeechSat model)"),MOo=l(),kF=a("li"),Yfe=a("strong"),EOo=o("wav2vec2"),COo=o(" \u2014 "),ZD=a("a"),wOo=o("Wav2Vec2ForAudioFrameClassification"),AOo=o(" (Wav2Vec2 model)"),yOo=l(),SF=a("li"),Kfe=a("strong"),LOo=o("wavlm"),xOo=o(" \u2014 "),eG=a("a"),kOo=o("WavLMForAudioFrameClassification"),SOo=o(" (WavLM model)"),ROo=l(),RF=a("p"),BOo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),POo=o("model.eval()"),$Oo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),IOo=o("model.train()"),qOo=l(),ome=a("p"),NOo=o("Examples:"),jOo=l(),f(Vw.$$.fragment),bRe=l(),Gd=a("h2"),BF=a("a"),rme=a("span"),f(Xw.$$.fragment),DOo=l(),tme=a("span"),GOo=o("AutoModelForCTC"),FRe=l(),fr=a("div"),f(zw.$$.fragment),OOo=l(),Od=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oG=a("a"),XOo=o("from_pretrained()"),zOo=o(" class method or the "),rG=a("a"),QOo=o("from_config()"),WOo=o(` class
method.`),HOo=l(),Qw=a("p"),UOo=o("This class cannot be instantiated directly using "),ame=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),nt=a("div"),f(Ww.$$.fragment),ZOo=l(),nme=a("p"),eVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oVo=l(),Vd=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),nVo=o("from_pretrained()"),sVo=o(" to load the model weights."),lVo=l(),lme=a("p"),iVo=o("Examples:"),dVo=l(),f(Hw.$$.fragment),cVo=l(),Ke=a("div"),f(Uw.$$.fragment),fVo=l(),ime=a("p"),mVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gVo=l(),sn=a("p"),hVo=o("The model class to instantiate is selected based on the "),dme=a("code"),pVo=o("model_type"),_Vo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),uVo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),FVo=o("pretrained_model_name_or_path"),vVo=o(":"),TVo=l(),Re=a("ul"),PF=a("li"),mme=a("strong"),MVo=o("data2vec-audio"),EVo=o(" \u2014 "),aG=a("a"),CVo=o("Data2VecAudioForCTC"),wVo=o(" (Data2VecAudio model)"),AVo=l(),$F=a("li"),gme=a("strong"),yVo=o("hubert"),LVo=o(" \u2014 "),nG=a("a"),xVo=o("HubertForCTC"),kVo=o(" (Hubert model)"),SVo=l(),IF=a("li"),hme=a("strong"),RVo=o("sew"),BVo=o(" \u2014 "),sG=a("a"),PVo=o("SEWForCTC"),$Vo=o(" (SEW model)"),IVo=l(),qF=a("li"),pme=a("strong"),qVo=o("sew-d"),NVo=o(" \u2014 "),lG=a("a"),jVo=o("SEWDForCTC"),DVo=o(" (SEW-D model)"),GVo=l(),NF=a("li"),_me=a("strong"),OVo=o("unispeech"),VVo=o(" \u2014 "),iG=a("a"),XVo=o("UniSpeechForCTC"),zVo=o(" (UniSpeech model)"),QVo=l(),jF=a("li"),ume=a("strong"),WVo=o("unispeech-sat"),HVo=o(" \u2014 "),dG=a("a"),UVo=o("UniSpeechSatForCTC"),JVo=o(" (UniSpeechSat model)"),YVo=l(),DF=a("li"),bme=a("strong"),KVo=o("wav2vec2"),ZVo=o(" \u2014 "),cG=a("a"),eXo=o("Wav2Vec2ForCTC"),oXo=o(" (Wav2Vec2 model)"),rXo=l(),GF=a("li"),Fme=a("strong"),tXo=o("wavlm"),aXo=o(" \u2014 "),fG=a("a"),nXo=o("WavLMForCTC"),sXo=o(" (WavLM model)"),lXo=l(),OF=a("p"),iXo=o("The model is set in evaluation mode by default using "),vme=a("code"),dXo=o("model.eval()"),cXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),fXo=o("model.train()"),mXo=l(),Mme=a("p"),gXo=o("Examples:"),hXo=l(),f(Jw.$$.fragment),vRe=l(),Xd=a("h2"),VF=a("a"),Eme=a("span"),f(Yw.$$.fragment),pXo=l(),Cme=a("span"),_Xo=o("AutoModelForSpeechSeq2Seq"),TRe=l(),mr=a("div"),f(Kw.$$.fragment),uXo=l(),zd=a("p"),bXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mG=a("a"),FXo=o("from_pretrained()"),vXo=o(" class method or the "),gG=a("a"),TXo=o("from_config()"),MXo=o(` class
method.`),EXo=l(),Zw=a("p"),CXo=o("This class cannot be instantiated directly using "),wme=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),yXo=l(),st=a("div"),f(eA.$$.fragment),LXo=l(),Ame=a("p"),xXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kXo=l(),Qd=a("p"),SXo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),RXo=o("not"),BXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),PXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),IXo=l(),Lme=a("p"),qXo=o("Examples:"),NXo=l(),f(oA.$$.fragment),jXo=l(),Ze=a("div"),f(rA.$$.fragment),DXo=l(),xme=a("p"),GXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OXo=l(),ln=a("p"),VXo=o("The model class to instantiate is selected based on the "),kme=a("code"),XXo=o("model_type"),zXo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),QXo=o("pretrained_model_name_or_path"),WXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(":"),JXo=l(),tA=a("ul"),XF=a("li"),Bme=a("strong"),YXo=o("speech-encoder-decoder"),KXo=o(" \u2014 "),pG=a("a"),ZXo=o("SpeechEncoderDecoderModel"),ezo=o(" (Speech Encoder decoder model)"),ozo=l(),zF=a("li"),Pme=a("strong"),rzo=o("speech_to_text"),tzo=o(" \u2014 "),_G=a("a"),azo=o("Speech2TextForConditionalGeneration"),nzo=o(" (Speech2Text model)"),szo=l(),QF=a("p"),lzo=o("The model is set in evaluation mode by default using "),$me=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),czo=o("model.train()"),fzo=l(),qme=a("p"),mzo=o("Examples:"),gzo=l(),f(aA.$$.fragment),MRe=l(),Wd=a("h2"),WF=a("a"),Nme=a("span"),f(nA.$$.fragment),hzo=l(),jme=a("span"),pzo=o("AutoModelForAudioXVector"),ERe=l(),gr=a("div"),f(sA.$$.fragment),_zo=l(),Hd=a("p"),uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uG=a("a"),bzo=o("from_pretrained()"),Fzo=o(" class method or the "),bG=a("a"),vzo=o("from_config()"),Tzo=o(` class
method.`),Mzo=l(),lA=a("p"),Ezo=o("This class cannot be instantiated directly using "),Dme=a("code"),Czo=o("__init__()"),wzo=o(" (throws an error)."),Azo=l(),lt=a("div"),f(iA.$$.fragment),yzo=l(),Gme=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xzo=l(),Ud=a("p"),kzo=o(`Note:
Loading a model from its configuration file does `),Ome=a("strong"),Szo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),Bzo=o("from_pretrained()"),Pzo=o(" to load the model weights."),$zo=l(),Vme=a("p"),Izo=o("Examples:"),qzo=l(),f(dA.$$.fragment),Nzo=l(),eo=a("div"),f(cA.$$.fragment),jzo=l(),Xme=a("p"),Dzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gzo=l(),dn=a("p"),Ozo=o("The model class to instantiate is selected based on the "),zme=a("code"),Vzo=o("model_type"),Xzo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),zzo=o("pretrained_model_name_or_path"),Qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=a("code"),Wzo=o("pretrained_model_name_or_path"),Hzo=o(":"),Uzo=l(),cn=a("ul"),HF=a("li"),Hme=a("strong"),Jzo=o("data2vec-audio"),Yzo=o(" \u2014 "),vG=a("a"),Kzo=o("Data2VecAudioForXVector"),Zzo=o(" (Data2VecAudio model)"),eQo=l(),UF=a("li"),Ume=a("strong"),oQo=o("unispeech-sat"),rQo=o(" \u2014 "),TG=a("a"),tQo=o("UniSpeechSatForXVector"),aQo=o(" (UniSpeechSat model)"),nQo=l(),JF=a("li"),Jme=a("strong"),sQo=o("wav2vec2"),lQo=o(" \u2014 "),MG=a("a"),iQo=o("Wav2Vec2ForXVector"),dQo=o(" (Wav2Vec2 model)"),cQo=l(),YF=a("li"),Yme=a("strong"),fQo=o("wavlm"),mQo=o(" \u2014 "),EG=a("a"),gQo=o("WavLMForXVector"),hQo=o(" (WavLM model)"),pQo=l(),KF=a("p"),_Qo=o("The model is set in evaluation mode by default using "),Kme=a("code"),uQo=o("model.eval()"),bQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),FQo=o("model.train()"),vQo=l(),ege=a("p"),TQo=o("Examples:"),MQo=l(),f(fA.$$.fragment),CRe=l(),Jd=a("h2"),ZF=a("a"),oge=a("span"),f(mA.$$.fragment),EQo=l(),rge=a("span"),CQo=o("AutoModelForMaskedImageModeling"),wRe=l(),hr=a("div"),f(gA.$$.fragment),wQo=l(),Yd=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CG=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),wG=a("a"),xQo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),hA=a("p"),RQo=o("This class cannot be instantiated directly using "),tge=a("code"),BQo=o("__init__()"),PQo=o(" (throws an error)."),$Qo=l(),it=a("div"),f(pA.$$.fragment),IQo=l(),age=a("p"),qQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NQo=l(),Kd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),sge=a("p"),zQo=o("Examples:"),QQo=l(),f(_A.$$.fragment),WQo=l(),oo=a("div"),f(uA.$$.fragment),HQo=l(),lge=a("p"),UQo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JQo=l(),fn=a("p"),YQo=o("The model class to instantiate is selected based on the "),ige=a("code"),KQo=o("model_type"),ZQo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),Zd=a("ul"),ev=a("li"),fge=a("strong"),nWo=o("deit"),sWo=o(" \u2014 "),yG=a("a"),lWo=o("DeiTForMaskedImageModeling"),iWo=o(" (DeiT model)"),dWo=l(),ov=a("li"),mge=a("strong"),cWo=o("swin"),fWo=o(" \u2014 "),LG=a("a"),mWo=o("SwinForMaskedImageModeling"),gWo=o(" (Swin model)"),hWo=l(),rv=a("li"),gge=a("strong"),pWo=o("vit"),_Wo=o(" \u2014 "),xG=a("a"),uWo=o("ViTForMaskedImageModeling"),bWo=o(" (ViT model)"),FWo=l(),tv=a("p"),vWo=o("The model is set in evaluation mode by default using "),hge=a("code"),TWo=o("model.eval()"),MWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),EWo=o("model.train()"),CWo=l(),_ge=a("p"),wWo=o("Examples:"),AWo=l(),f(bA.$$.fragment),ARe=l(),ec=a("h2"),av=a("a"),uge=a("span"),f(FA.$$.fragment),yWo=l(),bge=a("span"),LWo=o("AutoModelForObjectDetection"),yRe=l(),pr=a("div"),f(vA.$$.fragment),xWo=l(),oc=a("p"),kWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kG=a("a"),SWo=o("from_pretrained()"),RWo=o(" class method or the "),SG=a("a"),BWo=o("from_config()"),PWo=o(` class
method.`),$Wo=l(),TA=a("p"),IWo=o("This class cannot be instantiated directly using "),Fge=a("code"),qWo=o("__init__()"),NWo=o(" (throws an error)."),jWo=l(),dt=a("div"),f(MA.$$.fragment),DWo=l(),vge=a("p"),GWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),OWo=l(),rc=a("p"),VWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),XWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),QWo=o("from_pretrained()"),WWo=o(" to load the model weights."),HWo=l(),Mge=a("p"),UWo=o("Examples:"),JWo=l(),f(EA.$$.fragment),YWo=l(),ro=a("div"),f(CA.$$.fragment),KWo=l(),Ege=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eHo=l(),mn=a("p"),oHo=o("The model class to instantiate is selected based on the "),Cge=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),yge=a("ul"),nv=a("li"),Lge=a("strong"),dHo=o("detr"),cHo=o(" \u2014 "),BG=a("a"),fHo=o("DetrForObjectDetection"),mHo=o(" (DETR model)"),gHo=l(),sv=a("p"),hHo=o("The model is set in evaluation mode by default using "),xge=a("code"),pHo=o("model.eval()"),_Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),uHo=o("model.train()"),bHo=l(),Sge=a("p"),FHo=o("Examples:"),vHo=l(),f(wA.$$.fragment),LRe=l(),tc=a("h2"),lv=a("a"),Rge=a("span"),f(AA.$$.fragment),THo=l(),Bge=a("span"),MHo=o("AutoModelForImageSegmentation"),xRe=l(),_r=a("div"),f(yA.$$.fragment),EHo=l(),ac=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PG=a("a"),wHo=o("from_pretrained()"),AHo=o(" class method or the "),$G=a("a"),yHo=o("from_config()"),LHo=o(` class
method.`),xHo=l(),LA=a("p"),kHo=o("This class cannot be instantiated directly using "),Pge=a("code"),SHo=o("__init__()"),RHo=o(" (throws an error)."),BHo=l(),ct=a("div"),f(xA.$$.fragment),PHo=l(),$ge=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),IHo=l(),nc=a("p"),qHo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),NHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),DHo=o("from_pretrained()"),GHo=o(" to load the model weights."),OHo=l(),qge=a("p"),VHo=o("Examples:"),XHo=l(),f(kA.$$.fragment),zHo=l(),to=a("div"),f(SA.$$.fragment),QHo=l(),Nge=a("p"),WHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),HHo=l(),gn=a("p"),UHo=o("The model class to instantiate is selected based on the "),jge=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),Oge=a("ul"),iv=a("li"),Vge=a("strong"),tUo=o("detr"),aUo=o(" \u2014 "),qG=a("a"),nUo=o("DetrForSegmentation"),sUo=o(" (DETR model)"),lUo=l(),dv=a("p"),iUo=o("The model is set in evaluation mode by default using "),Xge=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),fUo=o("model.train()"),mUo=l(),Qge=a("p"),gUo=o("Examples:"),hUo=l(),f(RA.$$.fragment),kRe=l(),sc=a("h2"),cv=a("a"),Wge=a("span"),f(BA.$$.fragment),pUo=l(),Hge=a("span"),_Uo=o("AutoModelForSemanticSegmentation"),SRe=l(),ur=a("div"),f(PA.$$.fragment),uUo=l(),lc=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NG=a("a"),FUo=o("from_pretrained()"),vUo=o(" class method or the "),jG=a("a"),TUo=o("from_config()"),MUo=o(` class
method.`),EUo=l(),$A=a("p"),CUo=o("This class cannot be instantiated directly using "),Uge=a("code"),wUo=o("__init__()"),AUo=o(" (throws an error)."),yUo=l(),ft=a("div"),f(IA.$$.fragment),LUo=l(),Jge=a("p"),xUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kUo=l(),ic=a("p"),SUo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),RUo=o("not"),BUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),PUo=o("from_pretrained()"),$Uo=o(" to load the model weights."),IUo=l(),Kge=a("p"),qUo=o("Examples:"),NUo=l(),f(qA.$$.fragment),jUo=l(),ao=a("div"),f(NA.$$.fragment),DUo=l(),Zge=a("p"),GUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),OUo=l(),hn=a("p"),VUo=o("The model class to instantiate is selected based on the "),ehe=a("code"),XUo=o("model_type"),zUo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),QUo=o("pretrained_model_name_or_path"),WUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(":"),JUo=l(),dc=a("ul"),fv=a("li"),the=a("strong"),YUo=o("beit"),KUo=o(" \u2014 "),GG=a("a"),ZUo=o("BeitForSemanticSegmentation"),eJo=o(" (BEiT model)"),oJo=l(),mv=a("li"),ahe=a("strong"),rJo=o("dpt"),tJo=o(" \u2014 "),OG=a("a"),aJo=o("DPTForSemanticSegmentation"),nJo=o(" (DPT model)"),sJo=l(),gv=a("li"),nhe=a("strong"),lJo=o("segformer"),iJo=o(" \u2014 "),VG=a("a"),dJo=o("SegformerForSemanticSegmentation"),cJo=o(" (SegFormer model)"),fJo=l(),hv=a("p"),mJo=o("The model is set in evaluation mode by default using "),she=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),pJo=o("model.train()"),_Jo=l(),ihe=a("p"),uJo=o("Examples:"),bJo=l(),f(jA.$$.fragment),RRe=l(),cc=a("h2"),pv=a("a"),dhe=a("span"),f(DA.$$.fragment),FJo=l(),che=a("span"),vJo=o("AutoModelForInstanceSegmentation"),BRe=l(),br=a("div"),f(GA.$$.fragment),TJo=l(),fc=a("p"),MJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XG=a("a"),EJo=o("from_pretrained()"),CJo=o(" class method or the "),zG=a("a"),wJo=o("from_config()"),AJo=o(` class
method.`),yJo=l(),OA=a("p"),LJo=o("This class cannot be instantiated directly using "),fhe=a("code"),xJo=o("__init__()"),kJo=o(" (throws an error)."),SJo=l(),mt=a("div"),f(VA.$$.fragment),RJo=l(),mhe=a("p"),BJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),PJo=l(),mc=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),IJo=o("not"),qJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),NJo=o("from_pretrained()"),jJo=o(" to load the model weights."),DJo=l(),hhe=a("p"),GJo=o("Examples:"),OJo=l(),f(XA.$$.fragment),VJo=l(),no=a("div"),f(zA.$$.fragment),XJo=l(),phe=a("p"),zJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),QJo=l(),pn=a("p"),WJo=o("The model class to instantiate is selected based on the "),_he=a("code"),HJo=o("model_type"),UJo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(":"),eYo=l(),Fhe=a("ul"),_v=a("li"),vhe=a("strong"),oYo=o("maskformer"),rYo=o(" \u2014 "),WG=a("a"),tYo=o("MaskFormerForInstanceSegmentation"),aYo=o(" (MaskFormer model)"),nYo=l(),uv=a("p"),sYo=o("The model is set in evaluation mode by default using "),The=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),dYo=o("model.train()"),cYo=l(),Ehe=a("p"),fYo=o("Examples:"),mYo=l(),f(QA.$$.fragment),PRe=l(),gc=a("h2"),bv=a("a"),Che=a("span"),f(WA.$$.fragment),gYo=l(),whe=a("span"),hYo=o("TFAutoModel"),$Re=l(),Fr=a("div"),f(HA.$$.fragment),pYo=l(),hc=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HG=a("a"),uYo=o("from_pretrained()"),bYo=o(" class method or the "),UG=a("a"),FYo=o("from_config()"),vYo=o(` class
method.`),TYo=l(),UA=a("p"),MYo=o("This class cannot be instantiated directly using "),Ahe=a("code"),EYo=o("__init__()"),CYo=o(" (throws an error)."),wYo=l(),gt=a("div"),f(JA.$$.fragment),AYo=l(),yhe=a("p"),yYo=o("Instantiates one of the base model classes of the library from a configuration."),LYo=l(),pc=a("p"),xYo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),xhe=a("p"),$Yo=o("Examples:"),IYo=l(),f(YA.$$.fragment),qYo=l(),ho=a("div"),f(KA.$$.fragment),NYo=l(),khe=a("p"),jYo=o("Instantiate one of the base model classes of the library from a pretrained model."),DYo=l(),_n=a("p"),GYo=o("The model class to instantiate is selected based on the "),She=a("code"),OYo=o("model_type"),VYo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),QYo=o("pretrained_model_name_or_path"),WYo=o(":"),HYo=l(),x=a("ul"),Fv=a("li"),Phe=a("strong"),UYo=o("albert"),JYo=o(" \u2014 "),YG=a("a"),YYo=o("TFAlbertModel"),KYo=o(" (ALBERT model)"),ZYo=l(),vv=a("li"),$he=a("strong"),eKo=o("bart"),oKo=o(" \u2014 "),KG=a("a"),rKo=o("TFBartModel"),tKo=o(" (BART model)"),aKo=l(),Tv=a("li"),Ihe=a("strong"),nKo=o("bert"),sKo=o(" \u2014 "),ZG=a("a"),lKo=o("TFBertModel"),iKo=o(" (BERT model)"),dKo=l(),Mv=a("li"),qhe=a("strong"),cKo=o("blenderbot"),fKo=o(" \u2014 "),eO=a("a"),mKo=o("TFBlenderbotModel"),gKo=o(" (Blenderbot model)"),hKo=l(),Ev=a("li"),Nhe=a("strong"),pKo=o("blenderbot-small"),_Ko=o(" \u2014 "),oO=a("a"),uKo=o("TFBlenderbotSmallModel"),bKo=o(" (BlenderbotSmall model)"),FKo=l(),Cv=a("li"),jhe=a("strong"),vKo=o("camembert"),TKo=o(" \u2014 "),rO=a("a"),MKo=o("TFCamembertModel"),EKo=o(" (CamemBERT model)"),CKo=l(),wv=a("li"),Dhe=a("strong"),wKo=o("clip"),AKo=o(" \u2014 "),tO=a("a"),yKo=o("TFCLIPModel"),LKo=o(" (CLIP model)"),xKo=l(),Av=a("li"),Ghe=a("strong"),kKo=o("convbert"),SKo=o(" \u2014 "),aO=a("a"),RKo=o("TFConvBertModel"),BKo=o(" (ConvBERT model)"),PKo=l(),yv=a("li"),Ohe=a("strong"),$Ko=o("convnext"),IKo=o(" \u2014 "),nO=a("a"),qKo=o("TFConvNextModel"),NKo=o(" (ConvNext model)"),jKo=l(),Lv=a("li"),Vhe=a("strong"),DKo=o("ctrl"),GKo=o(" \u2014 "),sO=a("a"),OKo=o("TFCTRLModel"),VKo=o(" (CTRL model)"),XKo=l(),xv=a("li"),Xhe=a("strong"),zKo=o("deberta"),QKo=o(" \u2014 "),lO=a("a"),WKo=o("TFDebertaModel"),HKo=o(" (DeBERTa model)"),UKo=l(),kv=a("li"),zhe=a("strong"),JKo=o("deberta-v2"),YKo=o(" \u2014 "),iO=a("a"),KKo=o("TFDebertaV2Model"),ZKo=o(" (DeBERTa-v2 model)"),eZo=l(),Sv=a("li"),Qhe=a("strong"),oZo=o("distilbert"),rZo=o(" \u2014 "),dO=a("a"),tZo=o("TFDistilBertModel"),aZo=o(" (DistilBERT model)"),nZo=l(),Rv=a("li"),Whe=a("strong"),sZo=o("dpr"),lZo=o(" \u2014 "),cO=a("a"),iZo=o("TFDPRQuestionEncoder"),dZo=o(" (DPR model)"),cZo=l(),Bv=a("li"),Hhe=a("strong"),fZo=o("electra"),mZo=o(" \u2014 "),fO=a("a"),gZo=o("TFElectraModel"),hZo=o(" (ELECTRA model)"),pZo=l(),Pv=a("li"),Uhe=a("strong"),_Zo=o("flaubert"),uZo=o(" \u2014 "),mO=a("a"),bZo=o("TFFlaubertModel"),FZo=o(" (FlauBERT model)"),vZo=l(),Gs=a("li"),Jhe=a("strong"),TZo=o("funnel"),MZo=o(" \u2014 "),gO=a("a"),EZo=o("TFFunnelModel"),CZo=o(" or "),hO=a("a"),wZo=o("TFFunnelBaseModel"),AZo=o(" (Funnel Transformer model)"),yZo=l(),$v=a("li"),Yhe=a("strong"),LZo=o("gpt2"),xZo=o(" \u2014 "),pO=a("a"),kZo=o("TFGPT2Model"),SZo=o(" (OpenAI GPT-2 model)"),RZo=l(),Iv=a("li"),Khe=a("strong"),BZo=o("gptj"),PZo=o(" \u2014 "),_O=a("a"),$Zo=o("TFGPTJModel"),IZo=o(" (GPT-J model)"),qZo=l(),qv=a("li"),Zhe=a("strong"),NZo=o("hubert"),jZo=o(" \u2014 "),uO=a("a"),DZo=o("TFHubertModel"),GZo=o(" (Hubert model)"),OZo=l(),Nv=a("li"),epe=a("strong"),VZo=o("layoutlm"),XZo=o(" \u2014 "),bO=a("a"),zZo=o("TFLayoutLMModel"),QZo=o(" (LayoutLM model)"),WZo=l(),jv=a("li"),ope=a("strong"),HZo=o("led"),UZo=o(" \u2014 "),FO=a("a"),JZo=o("TFLEDModel"),YZo=o(" (LED model)"),KZo=l(),Dv=a("li"),rpe=a("strong"),ZZo=o("longformer"),eer=o(" \u2014 "),vO=a("a"),oer=o("TFLongformerModel"),rer=o(" (Longformer model)"),ter=l(),Gv=a("li"),tpe=a("strong"),aer=o("lxmert"),ner=o(" \u2014 "),TO=a("a"),ser=o("TFLxmertModel"),ler=o(" (LXMERT model)"),ier=l(),Ov=a("li"),ape=a("strong"),der=o("marian"),cer=o(" \u2014 "),MO=a("a"),fer=o("TFMarianModel"),mer=o(" (Marian model)"),ger=l(),Vv=a("li"),npe=a("strong"),her=o("mbart"),per=o(" \u2014 "),EO=a("a"),_er=o("TFMBartModel"),uer=o(" (mBART model)"),ber=l(),Xv=a("li"),spe=a("strong"),Fer=o("mobilebert"),ver=o(" \u2014 "),CO=a("a"),Ter=o("TFMobileBertModel"),Mer=o(" (MobileBERT model)"),Eer=l(),zv=a("li"),lpe=a("strong"),Cer=o("mpnet"),wer=o(" \u2014 "),wO=a("a"),Aer=o("TFMPNetModel"),yer=o(" (MPNet model)"),Ler=l(),Qv=a("li"),ipe=a("strong"),xer=o("mt5"),ker=o(" \u2014 "),AO=a("a"),Ser=o("TFMT5Model"),Rer=o(" (mT5 model)"),Ber=l(),Wv=a("li"),dpe=a("strong"),Per=o("openai-gpt"),$er=o(" \u2014 "),yO=a("a"),Ier=o("TFOpenAIGPTModel"),qer=o(" (OpenAI GPT model)"),Ner=l(),Hv=a("li"),cpe=a("strong"),jer=o("pegasus"),Der=o(" \u2014 "),LO=a("a"),Ger=o("TFPegasusModel"),Oer=o(" (Pegasus model)"),Ver=l(),Uv=a("li"),fpe=a("strong"),Xer=o("rembert"),zer=o(" \u2014 "),xO=a("a"),Qer=o("TFRemBertModel"),Wer=o(" (RemBERT model)"),Her=l(),Jv=a("li"),mpe=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),kO=a("a"),Yer=o("TFRobertaModel"),Ker=o(" (RoBERTa model)"),Zer=l(),Yv=a("li"),gpe=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),SO=a("a"),ror=o("TFRoFormerModel"),tor=o(" (RoFormer model)"),aor=l(),Kv=a("li"),hpe=a("strong"),nor=o("speech_to_text"),sor=o(" \u2014 "),RO=a("a"),lor=o("TFSpeech2TextModel"),ior=o(" (Speech2Text model)"),dor=l(),Zv=a("li"),ppe=a("strong"),cor=o("t5"),mor=o(" \u2014 "),BO=a("a"),gor=o("TFT5Model"),hor=o(" (T5 model)"),por=l(),e6=a("li"),_pe=a("strong"),_or=o("tapas"),uor=o(" \u2014 "),PO=a("a"),bor=o("TFTapasModel"),For=o(" (TAPAS model)"),vor=l(),o6=a("li"),upe=a("strong"),Tor=o("transfo-xl"),Mor=o(" \u2014 "),$O=a("a"),Eor=o("TFTransfoXLModel"),Cor=o(" (Transformer-XL model)"),wor=l(),r6=a("li"),bpe=a("strong"),Aor=o("vit"),yor=o(" \u2014 "),IO=a("a"),Lor=o("TFViTModel"),xor=o(" (ViT model)"),kor=l(),t6=a("li"),Fpe=a("strong"),Sor=o("wav2vec2"),Ror=o(" \u2014 "),qO=a("a"),Bor=o("TFWav2Vec2Model"),Por=o(" (Wav2Vec2 model)"),$or=l(),a6=a("li"),vpe=a("strong"),Ior=o("xlm"),qor=o(" \u2014 "),NO=a("a"),Nor=o("TFXLMModel"),jor=o(" (XLM model)"),Dor=l(),n6=a("li"),Tpe=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),jO=a("a"),Vor=o("TFXLMRobertaModel"),Xor=o(" (XLM-RoBERTa model)"),zor=l(),s6=a("li"),Mpe=a("strong"),Qor=o("xlnet"),Wor=o(" \u2014 "),DO=a("a"),Hor=o("TFXLNetModel"),Uor=o(" (XLNet model)"),Jor=l(),Epe=a("p"),Yor=o("Examples:"),Kor=l(),f(ZA.$$.fragment),IRe=l(),_c=a("h2"),l6=a("a"),Cpe=a("span"),f(e0.$$.fragment),Zor=l(),wpe=a("span"),err=o("TFAutoModelForPreTraining"),qRe=l(),vr=a("div"),f(o0.$$.fragment),orr=l(),uc=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GO=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),OO=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),r0=a("p"),irr=o("This class cannot be instantiated directly using "),Ape=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),ht=a("div"),f(t0.$$.fragment),mrr=l(),ype=a("p"),grr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hrr=l(),bc=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),_rr=o("not"),urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),brr=o("from_pretrained()"),Frr=o(" to load the model weights."),vrr=l(),xpe=a("p"),Trr=o("Examples:"),Mrr=l(),f(a0.$$.fragment),Err=l(),po=a("div"),f(n0.$$.fragment),Crr=l(),kpe=a("p"),wrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Arr=l(),un=a("p"),yrr=o("The model class to instantiate is selected based on the "),Spe=a("code"),Lrr=o("model_type"),xrr=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),Rrr=o("pretrained_model_name_or_path"),Brr=o(":"),Prr=l(),H=a("ul"),i6=a("li"),Ppe=a("strong"),$rr=o("albert"),Irr=o(" \u2014 "),XO=a("a"),qrr=o("TFAlbertForPreTraining"),Nrr=o(" (ALBERT model)"),jrr=l(),d6=a("li"),$pe=a("strong"),Drr=o("bart"),Grr=o(" \u2014 "),zO=a("a"),Orr=o("TFBartForConditionalGeneration"),Vrr=o(" (BART model)"),Xrr=l(),c6=a("li"),Ipe=a("strong"),zrr=o("bert"),Qrr=o(" \u2014 "),QO=a("a"),Wrr=o("TFBertForPreTraining"),Hrr=o(" (BERT model)"),Urr=l(),f6=a("li"),qpe=a("strong"),Jrr=o("camembert"),Yrr=o(" \u2014 "),WO=a("a"),Krr=o("TFCamembertForMaskedLM"),Zrr=o(" (CamemBERT model)"),etr=l(),m6=a("li"),Npe=a("strong"),otr=o("ctrl"),rtr=o(" \u2014 "),HO=a("a"),ttr=o("TFCTRLLMHeadModel"),atr=o(" (CTRL model)"),ntr=l(),g6=a("li"),jpe=a("strong"),str=o("distilbert"),ltr=o(" \u2014 "),UO=a("a"),itr=o("TFDistilBertForMaskedLM"),dtr=o(" (DistilBERT model)"),ctr=l(),h6=a("li"),Dpe=a("strong"),ftr=o("electra"),mtr=o(" \u2014 "),JO=a("a"),gtr=o("TFElectraForPreTraining"),htr=o(" (ELECTRA model)"),ptr=l(),p6=a("li"),Gpe=a("strong"),_tr=o("flaubert"),utr=o(" \u2014 "),YO=a("a"),btr=o("TFFlaubertWithLMHeadModel"),Ftr=o(" (FlauBERT model)"),vtr=l(),_6=a("li"),Ope=a("strong"),Ttr=o("funnel"),Mtr=o(" \u2014 "),KO=a("a"),Etr=o("TFFunnelForPreTraining"),Ctr=o(" (Funnel Transformer model)"),wtr=l(),u6=a("li"),Vpe=a("strong"),Atr=o("gpt2"),ytr=o(" \u2014 "),ZO=a("a"),Ltr=o("TFGPT2LMHeadModel"),xtr=o(" (OpenAI GPT-2 model)"),ktr=l(),b6=a("li"),Xpe=a("strong"),Str=o("layoutlm"),Rtr=o(" \u2014 "),eV=a("a"),Btr=o("TFLayoutLMForMaskedLM"),Ptr=o(" (LayoutLM model)"),$tr=l(),F6=a("li"),zpe=a("strong"),Itr=o("lxmert"),qtr=o(" \u2014 "),oV=a("a"),Ntr=o("TFLxmertForPreTraining"),jtr=o(" (LXMERT model)"),Dtr=l(),v6=a("li"),Qpe=a("strong"),Gtr=o("mobilebert"),Otr=o(" \u2014 "),rV=a("a"),Vtr=o("TFMobileBertForPreTraining"),Xtr=o(" (MobileBERT model)"),ztr=l(),T6=a("li"),Wpe=a("strong"),Qtr=o("mpnet"),Wtr=o(" \u2014 "),tV=a("a"),Htr=o("TFMPNetForMaskedLM"),Utr=o(" (MPNet model)"),Jtr=l(),M6=a("li"),Hpe=a("strong"),Ytr=o("openai-gpt"),Ktr=o(" \u2014 "),aV=a("a"),Ztr=o("TFOpenAIGPTLMHeadModel"),ear=o(" (OpenAI GPT model)"),oar=l(),E6=a("li"),Upe=a("strong"),rar=o("roberta"),tar=o(" \u2014 "),nV=a("a"),aar=o("TFRobertaForMaskedLM"),nar=o(" (RoBERTa model)"),sar=l(),C6=a("li"),Jpe=a("strong"),lar=o("t5"),iar=o(" \u2014 "),sV=a("a"),dar=o("TFT5ForConditionalGeneration"),car=o(" (T5 model)"),far=l(),w6=a("li"),Ype=a("strong"),mar=o("tapas"),gar=o(" \u2014 "),lV=a("a"),har=o("TFTapasForMaskedLM"),par=o(" (TAPAS model)"),_ar=l(),A6=a("li"),Kpe=a("strong"),uar=o("transfo-xl"),bar=o(" \u2014 "),iV=a("a"),Far=o("TFTransfoXLLMHeadModel"),Tar=o(" (Transformer-XL model)"),Mar=l(),y6=a("li"),Zpe=a("strong"),Ear=o("xlm"),Car=o(" \u2014 "),dV=a("a"),war=o("TFXLMWithLMHeadModel"),Aar=o(" (XLM model)"),yar=l(),L6=a("li"),e_e=a("strong"),Lar=o("xlm-roberta"),xar=o(" \u2014 "),cV=a("a"),kar=o("TFXLMRobertaForMaskedLM"),Sar=o(" (XLM-RoBERTa model)"),Rar=l(),x6=a("li"),o_e=a("strong"),Bar=o("xlnet"),Par=o(" \u2014 "),fV=a("a"),$ar=o("TFXLNetLMHeadModel"),Iar=o(" (XLNet model)"),qar=l(),r_e=a("p"),Nar=o("Examples:"),jar=l(),f(s0.$$.fragment),NRe=l(),Fc=a("h2"),k6=a("a"),t_e=a("span"),f(l0.$$.fragment),Dar=l(),a_e=a("span"),Gar=o("TFAutoModelForCausalLM"),jRe=l(),Tr=a("div"),f(i0.$$.fragment),Oar=l(),vc=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mV=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),gV=a("a"),Qar=o("from_config()"),War=o(` class
method.`),Har=l(),d0=a("p"),Uar=o("This class cannot be instantiated directly using "),n_e=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),pt=a("div"),f(c0.$$.fragment),Zar=l(),s_e=a("p"),enr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),onr=l(),Tc=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),i_e=a("p"),inr=o("Examples:"),dnr=l(),f(f0.$$.fragment),cnr=l(),_o=a("div"),f(m0.$$.fragment),fnr=l(),d_e=a("p"),mnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gnr=l(),bn=a("p"),hnr=o("The model class to instantiate is selected based on the "),c_e=a("code"),pnr=o("model_type"),_nr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),Fnr=o("pretrained_model_name_or_path"),vnr=o(":"),Tnr=l(),ce=a("ul"),S6=a("li"),g_e=a("strong"),Mnr=o("bert"),Enr=o(" \u2014 "),pV=a("a"),Cnr=o("TFBertLMHeadModel"),wnr=o(" (BERT model)"),Anr=l(),R6=a("li"),h_e=a("strong"),ynr=o("camembert"),Lnr=o(" \u2014 "),_V=a("a"),xnr=o("TFCamembertForCausalLM"),knr=o(" (CamemBERT model)"),Snr=l(),B6=a("li"),p_e=a("strong"),Rnr=o("ctrl"),Bnr=o(" \u2014 "),uV=a("a"),Pnr=o("TFCTRLLMHeadModel"),$nr=o(" (CTRL model)"),Inr=l(),P6=a("li"),__e=a("strong"),qnr=o("gpt2"),Nnr=o(" \u2014 "),bV=a("a"),jnr=o("TFGPT2LMHeadModel"),Dnr=o(" (OpenAI GPT-2 model)"),Gnr=l(),$6=a("li"),u_e=a("strong"),Onr=o("gptj"),Vnr=o(" \u2014 "),FV=a("a"),Xnr=o("TFGPTJForCausalLM"),znr=o(" (GPT-J model)"),Qnr=l(),I6=a("li"),b_e=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),vV=a("a"),Unr=o("TFOpenAIGPTLMHeadModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),q6=a("li"),F_e=a("strong"),Knr=o("rembert"),Znr=o(" \u2014 "),TV=a("a"),esr=o("TFRemBertForCausalLM"),osr=o(" (RemBERT model)"),rsr=l(),N6=a("li"),v_e=a("strong"),tsr=o("roberta"),asr=o(" \u2014 "),MV=a("a"),nsr=o("TFRobertaForCausalLM"),ssr=o(" (RoBERTa model)"),lsr=l(),j6=a("li"),T_e=a("strong"),isr=o("roformer"),dsr=o(" \u2014 "),EV=a("a"),csr=o("TFRoFormerForCausalLM"),fsr=o(" (RoFormer model)"),msr=l(),D6=a("li"),M_e=a("strong"),gsr=o("transfo-xl"),hsr=o(" \u2014 "),CV=a("a"),psr=o("TFTransfoXLLMHeadModel"),_sr=o(" (Transformer-XL model)"),usr=l(),G6=a("li"),E_e=a("strong"),bsr=o("xlm"),Fsr=o(" \u2014 "),wV=a("a"),vsr=o("TFXLMWithLMHeadModel"),Tsr=o(" (XLM model)"),Msr=l(),O6=a("li"),C_e=a("strong"),Esr=o("xlnet"),Csr=o(" \u2014 "),AV=a("a"),wsr=o("TFXLNetLMHeadModel"),Asr=o(" (XLNet model)"),ysr=l(),w_e=a("p"),Lsr=o("Examples:"),xsr=l(),f(g0.$$.fragment),DRe=l(),Mc=a("h2"),V6=a("a"),A_e=a("span"),f(h0.$$.fragment),ksr=l(),y_e=a("span"),Ssr=o("TFAutoModelForImageClassification"),GRe=l(),Mr=a("div"),f(p0.$$.fragment),Rsr=l(),Ec=a("p"),Bsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yV=a("a"),Psr=o("from_pretrained()"),$sr=o(" class method or the "),LV=a("a"),Isr=o("from_config()"),qsr=o(` class
method.`),Nsr=l(),_0=a("p"),jsr=o("This class cannot be instantiated directly using "),L_e=a("code"),Dsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),_t=a("div"),f(u0.$$.fragment),Vsr=l(),x_e=a("p"),Xsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zsr=l(),Cc=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),Wsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),Usr=o("from_pretrained()"),Jsr=o(" to load the model weights."),Ysr=l(),S_e=a("p"),Ksr=o("Examples:"),Zsr=l(),f(b0.$$.fragment),elr=l(),uo=a("div"),f(F0.$$.fragment),olr=l(),R_e=a("p"),rlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tlr=l(),Fn=a("p"),alr=o("The model class to instantiate is selected based on the "),B_e=a("code"),nlr=o("model_type"),slr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),dlr=o("pretrained_model_name_or_path"),clr=o(":"),flr=l(),v0=a("ul"),X6=a("li"),I_e=a("strong"),mlr=o("convnext"),glr=o(" \u2014 "),kV=a("a"),hlr=o("TFConvNextForImageClassification"),plr=o(" (ConvNext model)"),_lr=l(),z6=a("li"),q_e=a("strong"),ulr=o("vit"),blr=o(" \u2014 "),SV=a("a"),Flr=o("TFViTForImageClassification"),vlr=o(" (ViT model)"),Tlr=l(),N_e=a("p"),Mlr=o("Examples:"),Elr=l(),f(T0.$$.fragment),ORe=l(),wc=a("h2"),Q6=a("a"),j_e=a("span"),f(M0.$$.fragment),Clr=l(),D_e=a("span"),wlr=o("TFAutoModelForMaskedLM"),VRe=l(),Er=a("div"),f(E0.$$.fragment),Alr=l(),Ac=a("p"),ylr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RV=a("a"),Llr=o("from_pretrained()"),xlr=o(" class method or the "),BV=a("a"),klr=o("from_config()"),Slr=o(` class
method.`),Rlr=l(),C0=a("p"),Blr=o("This class cannot be instantiated directly using "),G_e=a("code"),Plr=o("__init__()"),$lr=o(" (throws an error)."),Ilr=l(),ut=a("div"),f(w0.$$.fragment),qlr=l(),O_e=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jlr=l(),yc=a("p"),Dlr=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),Glr=o("not"),Olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Vlr=o("from_pretrained()"),Xlr=o(" to load the model weights."),zlr=l(),X_e=a("p"),Qlr=o("Examples:"),Wlr=l(),f(A0.$$.fragment),Hlr=l(),bo=a("div"),f(y0.$$.fragment),Ulr=l(),z_e=a("p"),Jlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ylr=l(),vn=a("p"),Klr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),Zlr=o("model_type"),eir=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),oir=o("pretrained_model_name_or_path"),rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),tir=o("pretrained_model_name_or_path"),air=o(":"),nir=l(),J=a("ul"),W6=a("li"),U_e=a("strong"),sir=o("albert"),lir=o(" \u2014 "),$V=a("a"),iir=o("TFAlbertForMaskedLM"),dir=o(" (ALBERT model)"),cir=l(),H6=a("li"),J_e=a("strong"),fir=o("bert"),mir=o(" \u2014 "),IV=a("a"),gir=o("TFBertForMaskedLM"),hir=o(" (BERT model)"),pir=l(),U6=a("li"),Y_e=a("strong"),_ir=o("camembert"),uir=o(" \u2014 "),qV=a("a"),bir=o("TFCamembertForMaskedLM"),Fir=o(" (CamemBERT model)"),vir=l(),J6=a("li"),K_e=a("strong"),Tir=o("convbert"),Mir=o(" \u2014 "),NV=a("a"),Eir=o("TFConvBertForMaskedLM"),Cir=o(" (ConvBERT model)"),wir=l(),Y6=a("li"),Z_e=a("strong"),Air=o("deberta"),yir=o(" \u2014 "),jV=a("a"),Lir=o("TFDebertaForMaskedLM"),xir=o(" (DeBERTa model)"),kir=l(),K6=a("li"),eue=a("strong"),Sir=o("deberta-v2"),Rir=o(" \u2014 "),DV=a("a"),Bir=o("TFDebertaV2ForMaskedLM"),Pir=o(" (DeBERTa-v2 model)"),$ir=l(),Z6=a("li"),oue=a("strong"),Iir=o("distilbert"),qir=o(" \u2014 "),GV=a("a"),Nir=o("TFDistilBertForMaskedLM"),jir=o(" (DistilBERT model)"),Dir=l(),eT=a("li"),rue=a("strong"),Gir=o("electra"),Oir=o(" \u2014 "),OV=a("a"),Vir=o("TFElectraForMaskedLM"),Xir=o(" (ELECTRA model)"),zir=l(),oT=a("li"),tue=a("strong"),Qir=o("flaubert"),Wir=o(" \u2014 "),VV=a("a"),Hir=o("TFFlaubertWithLMHeadModel"),Uir=o(" (FlauBERT model)"),Jir=l(),rT=a("li"),aue=a("strong"),Yir=o("funnel"),Kir=o(" \u2014 "),XV=a("a"),Zir=o("TFFunnelForMaskedLM"),edr=o(" (Funnel Transformer model)"),odr=l(),tT=a("li"),nue=a("strong"),rdr=o("layoutlm"),tdr=o(" \u2014 "),zV=a("a"),adr=o("TFLayoutLMForMaskedLM"),ndr=o(" (LayoutLM model)"),sdr=l(),aT=a("li"),sue=a("strong"),ldr=o("longformer"),idr=o(" \u2014 "),QV=a("a"),ddr=o("TFLongformerForMaskedLM"),cdr=o(" (Longformer model)"),fdr=l(),nT=a("li"),lue=a("strong"),mdr=o("mobilebert"),gdr=o(" \u2014 "),WV=a("a"),hdr=o("TFMobileBertForMaskedLM"),pdr=o(" (MobileBERT model)"),_dr=l(),sT=a("li"),iue=a("strong"),udr=o("mpnet"),bdr=o(" \u2014 "),HV=a("a"),Fdr=o("TFMPNetForMaskedLM"),vdr=o(" (MPNet model)"),Tdr=l(),lT=a("li"),due=a("strong"),Mdr=o("rembert"),Edr=o(" \u2014 "),UV=a("a"),Cdr=o("TFRemBertForMaskedLM"),wdr=o(" (RemBERT model)"),Adr=l(),iT=a("li"),cue=a("strong"),ydr=o("roberta"),Ldr=o(" \u2014 "),JV=a("a"),xdr=o("TFRobertaForMaskedLM"),kdr=o(" (RoBERTa model)"),Sdr=l(),dT=a("li"),fue=a("strong"),Rdr=o("roformer"),Bdr=o(" \u2014 "),YV=a("a"),Pdr=o("TFRoFormerForMaskedLM"),$dr=o(" (RoFormer model)"),Idr=l(),cT=a("li"),mue=a("strong"),qdr=o("tapas"),Ndr=o(" \u2014 "),KV=a("a"),jdr=o("TFTapasForMaskedLM"),Ddr=o(" (TAPAS model)"),Gdr=l(),fT=a("li"),gue=a("strong"),Odr=o("xlm"),Vdr=o(" \u2014 "),ZV=a("a"),Xdr=o("TFXLMWithLMHeadModel"),zdr=o(" (XLM model)"),Qdr=l(),mT=a("li"),hue=a("strong"),Wdr=o("xlm-roberta"),Hdr=o(" \u2014 "),eX=a("a"),Udr=o("TFXLMRobertaForMaskedLM"),Jdr=o(" (XLM-RoBERTa model)"),Ydr=l(),pue=a("p"),Kdr=o("Examples:"),Zdr=l(),f(L0.$$.fragment),XRe=l(),Lc=a("h2"),gT=a("a"),_ue=a("span"),f(x0.$$.fragment),ecr=l(),uue=a("span"),ocr=o("TFAutoModelForSeq2SeqLM"),zRe=l(),Cr=a("div"),f(k0.$$.fragment),rcr=l(),xc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=a("a"),acr=o("from_pretrained()"),ncr=o(" class method or the "),rX=a("a"),scr=o("from_config()"),lcr=o(` class
method.`),icr=l(),S0=a("p"),dcr=o("This class cannot be instantiated directly using "),bue=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),bt=a("div"),f(R0.$$.fragment),gcr=l(),Fue=a("p"),hcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pcr=l(),kc=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),ucr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),Fcr=o("from_pretrained()"),vcr=o(" to load the model weights."),Tcr=l(),Tue=a("p"),Mcr=o("Examples:"),Ecr=l(),f(B0.$$.fragment),Ccr=l(),Fo=a("div"),f(P0.$$.fragment),wcr=l(),Mue=a("p"),Acr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ycr=l(),Tn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),Eue=a("code"),xcr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),Bcr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),ue=a("ul"),hT=a("li"),Aue=a("strong"),Icr=o("bart"),qcr=o(" \u2014 "),aX=a("a"),Ncr=o("TFBartForConditionalGeneration"),jcr=o(" (BART model)"),Dcr=l(),pT=a("li"),yue=a("strong"),Gcr=o("blenderbot"),Ocr=o(" \u2014 "),nX=a("a"),Vcr=o("TFBlenderbotForConditionalGeneration"),Xcr=o(" (Blenderbot model)"),zcr=l(),_T=a("li"),Lue=a("strong"),Qcr=o("blenderbot-small"),Wcr=o(" \u2014 "),sX=a("a"),Hcr=o("TFBlenderbotSmallForConditionalGeneration"),Ucr=o(" (BlenderbotSmall model)"),Jcr=l(),uT=a("li"),xue=a("strong"),Ycr=o("encoder-decoder"),Kcr=o(" \u2014 "),lX=a("a"),Zcr=o("TFEncoderDecoderModel"),efr=o(" (Encoder decoder model)"),ofr=l(),bT=a("li"),kue=a("strong"),rfr=o("led"),tfr=o(" \u2014 "),iX=a("a"),afr=o("TFLEDForConditionalGeneration"),nfr=o(" (LED model)"),sfr=l(),FT=a("li"),Sue=a("strong"),lfr=o("marian"),ifr=o(" \u2014 "),dX=a("a"),dfr=o("TFMarianMTModel"),cfr=o(" (Marian model)"),ffr=l(),vT=a("li"),Rue=a("strong"),mfr=o("mbart"),gfr=o(" \u2014 "),cX=a("a"),hfr=o("TFMBartForConditionalGeneration"),pfr=o(" (mBART model)"),_fr=l(),TT=a("li"),Bue=a("strong"),ufr=o("mt5"),bfr=o(" \u2014 "),fX=a("a"),Ffr=o("TFMT5ForConditionalGeneration"),vfr=o(" (mT5 model)"),Tfr=l(),MT=a("li"),Pue=a("strong"),Mfr=o("pegasus"),Efr=o(" \u2014 "),mX=a("a"),Cfr=o("TFPegasusForConditionalGeneration"),wfr=o(" (Pegasus model)"),Afr=l(),ET=a("li"),$ue=a("strong"),yfr=o("t5"),Lfr=o(" \u2014 "),gX=a("a"),xfr=o("TFT5ForConditionalGeneration"),kfr=o(" (T5 model)"),Sfr=l(),Iue=a("p"),Rfr=o("Examples:"),Bfr=l(),f($0.$$.fragment),QRe=l(),Sc=a("h2"),CT=a("a"),que=a("span"),f(I0.$$.fragment),Pfr=l(),Nue=a("span"),$fr=o("TFAutoModelForSequenceClassification"),WRe=l(),wr=a("div"),f(q0.$$.fragment),Ifr=l(),Rc=a("p"),qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=a("a"),Nfr=o("from_pretrained()"),jfr=o(" class method or the "),pX=a("a"),Dfr=o("from_config()"),Gfr=o(` class
method.`),Ofr=l(),N0=a("p"),Vfr=o("This class cannot be instantiated directly using "),jue=a("code"),Xfr=o("__init__()"),zfr=o(" (throws an error)."),Qfr=l(),Ft=a("div"),f(j0.$$.fragment),Wfr=l(),Due=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ufr=l(),Bc=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),Zfr=o("from_pretrained()"),emr=o(" to load the model weights."),omr=l(),Oue=a("p"),rmr=o("Examples:"),tmr=l(),f(D0.$$.fragment),amr=l(),vo=a("div"),f(G0.$$.fragment),nmr=l(),Vue=a("p"),smr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lmr=l(),Mn=a("p"),imr=o("The model class to instantiate is selected based on the "),Xue=a("code"),dmr=o("model_type"),cmr=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(":"),pmr=l(),V=a("ul"),wT=a("li"),Wue=a("strong"),_mr=o("albert"),umr=o(" \u2014 "),uX=a("a"),bmr=o("TFAlbertForSequenceClassification"),Fmr=o(" (ALBERT model)"),vmr=l(),AT=a("li"),Hue=a("strong"),Tmr=o("bert"),Mmr=o(" \u2014 "),bX=a("a"),Emr=o("TFBertForSequenceClassification"),Cmr=o(" (BERT model)"),wmr=l(),yT=a("li"),Uue=a("strong"),Amr=o("camembert"),ymr=o(" \u2014 "),FX=a("a"),Lmr=o("TFCamembertForSequenceClassification"),xmr=o(" (CamemBERT model)"),kmr=l(),LT=a("li"),Jue=a("strong"),Smr=o("convbert"),Rmr=o(" \u2014 "),vX=a("a"),Bmr=o("TFConvBertForSequenceClassification"),Pmr=o(" (ConvBERT model)"),$mr=l(),xT=a("li"),Yue=a("strong"),Imr=o("ctrl"),qmr=o(" \u2014 "),TX=a("a"),Nmr=o("TFCTRLForSequenceClassification"),jmr=o(" (CTRL model)"),Dmr=l(),kT=a("li"),Kue=a("strong"),Gmr=o("deberta"),Omr=o(" \u2014 "),MX=a("a"),Vmr=o("TFDebertaForSequenceClassification"),Xmr=o(" (DeBERTa model)"),zmr=l(),ST=a("li"),Zue=a("strong"),Qmr=o("deberta-v2"),Wmr=o(" \u2014 "),EX=a("a"),Hmr=o("TFDebertaV2ForSequenceClassification"),Umr=o(" (DeBERTa-v2 model)"),Jmr=l(),RT=a("li"),e1e=a("strong"),Ymr=o("distilbert"),Kmr=o(" \u2014 "),CX=a("a"),Zmr=o("TFDistilBertForSequenceClassification"),egr=o(" (DistilBERT model)"),ogr=l(),BT=a("li"),o1e=a("strong"),rgr=o("electra"),tgr=o(" \u2014 "),wX=a("a"),agr=o("TFElectraForSequenceClassification"),ngr=o(" (ELECTRA model)"),sgr=l(),PT=a("li"),r1e=a("strong"),lgr=o("flaubert"),igr=o(" \u2014 "),AX=a("a"),dgr=o("TFFlaubertForSequenceClassification"),cgr=o(" (FlauBERT model)"),fgr=l(),$T=a("li"),t1e=a("strong"),mgr=o("funnel"),ggr=o(" \u2014 "),yX=a("a"),hgr=o("TFFunnelForSequenceClassification"),pgr=o(" (Funnel Transformer model)"),_gr=l(),IT=a("li"),a1e=a("strong"),ugr=o("gpt2"),bgr=o(" \u2014 "),LX=a("a"),Fgr=o("TFGPT2ForSequenceClassification"),vgr=o(" (OpenAI GPT-2 model)"),Tgr=l(),qT=a("li"),n1e=a("strong"),Mgr=o("gptj"),Egr=o(" \u2014 "),xX=a("a"),Cgr=o("TFGPTJForSequenceClassification"),wgr=o(" (GPT-J model)"),Agr=l(),NT=a("li"),s1e=a("strong"),ygr=o("layoutlm"),Lgr=o(" \u2014 "),kX=a("a"),xgr=o("TFLayoutLMForSequenceClassification"),kgr=o(" (LayoutLM model)"),Sgr=l(),jT=a("li"),l1e=a("strong"),Rgr=o("longformer"),Bgr=o(" \u2014 "),SX=a("a"),Pgr=o("TFLongformerForSequenceClassification"),$gr=o(" (Longformer model)"),Igr=l(),DT=a("li"),i1e=a("strong"),qgr=o("mobilebert"),Ngr=o(" \u2014 "),RX=a("a"),jgr=o("TFMobileBertForSequenceClassification"),Dgr=o(" (MobileBERT model)"),Ggr=l(),GT=a("li"),d1e=a("strong"),Ogr=o("mpnet"),Vgr=o(" \u2014 "),BX=a("a"),Xgr=o("TFMPNetForSequenceClassification"),zgr=o(" (MPNet model)"),Qgr=l(),OT=a("li"),c1e=a("strong"),Wgr=o("openai-gpt"),Hgr=o(" \u2014 "),PX=a("a"),Ugr=o("TFOpenAIGPTForSequenceClassification"),Jgr=o(" (OpenAI GPT model)"),Ygr=l(),VT=a("li"),f1e=a("strong"),Kgr=o("rembert"),Zgr=o(" \u2014 "),$X=a("a"),ehr=o("TFRemBertForSequenceClassification"),ohr=o(" (RemBERT model)"),rhr=l(),XT=a("li"),m1e=a("strong"),thr=o("roberta"),ahr=o(" \u2014 "),IX=a("a"),nhr=o("TFRobertaForSequenceClassification"),shr=o(" (RoBERTa model)"),lhr=l(),zT=a("li"),g1e=a("strong"),ihr=o("roformer"),dhr=o(" \u2014 "),qX=a("a"),chr=o("TFRoFormerForSequenceClassification"),fhr=o(" (RoFormer model)"),mhr=l(),QT=a("li"),h1e=a("strong"),ghr=o("tapas"),hhr=o(" \u2014 "),NX=a("a"),phr=o("TFTapasForSequenceClassification"),_hr=o(" (TAPAS model)"),uhr=l(),WT=a("li"),p1e=a("strong"),bhr=o("transfo-xl"),Fhr=o(" \u2014 "),jX=a("a"),vhr=o("TFTransfoXLForSequenceClassification"),Thr=o(" (Transformer-XL model)"),Mhr=l(),HT=a("li"),_1e=a("strong"),Ehr=o("xlm"),Chr=o(" \u2014 "),DX=a("a"),whr=o("TFXLMForSequenceClassification"),Ahr=o(" (XLM model)"),yhr=l(),UT=a("li"),u1e=a("strong"),Lhr=o("xlm-roberta"),xhr=o(" \u2014 "),GX=a("a"),khr=o("TFXLMRobertaForSequenceClassification"),Shr=o(" (XLM-RoBERTa model)"),Rhr=l(),JT=a("li"),b1e=a("strong"),Bhr=o("xlnet"),Phr=o(" \u2014 "),OX=a("a"),$hr=o("TFXLNetForSequenceClassification"),Ihr=o(" (XLNet model)"),qhr=l(),F1e=a("p"),Nhr=o("Examples:"),jhr=l(),f(O0.$$.fragment),HRe=l(),Pc=a("h2"),YT=a("a"),v1e=a("span"),f(V0.$$.fragment),Dhr=l(),T1e=a("span"),Ghr=o("TFAutoModelForMultipleChoice"),URe=l(),Ar=a("div"),f(X0.$$.fragment),Ohr=l(),$c=a("p"),Vhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=a("a"),Xhr=o("from_pretrained()"),zhr=o(" class method or the "),XX=a("a"),Qhr=o("from_config()"),Whr=o(` class
method.`),Hhr=l(),z0=a("p"),Uhr=o("This class cannot be instantiated directly using "),M1e=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),vt=a("div"),f(Q0.$$.fragment),Zhr=l(),E1e=a("p"),epr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),opr=l(),Ic=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),npr=o("from_pretrained()"),spr=o(" to load the model weights."),lpr=l(),w1e=a("p"),ipr=o("Examples:"),dpr=l(),f(W0.$$.fragment),cpr=l(),To=a("div"),f(H0.$$.fragment),fpr=l(),A1e=a("p"),mpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gpr=l(),En=a("p"),hpr=o("The model class to instantiate is selected based on the "),y1e=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),Fpr=o("pretrained_model_name_or_path"),vpr=o(":"),Tpr=l(),ae=a("ul"),KT=a("li"),k1e=a("strong"),Mpr=o("albert"),Epr=o(" \u2014 "),QX=a("a"),Cpr=o("TFAlbertForMultipleChoice"),wpr=o(" (ALBERT model)"),Apr=l(),ZT=a("li"),S1e=a("strong"),ypr=o("bert"),Lpr=o(" \u2014 "),WX=a("a"),xpr=o("TFBertForMultipleChoice"),kpr=o(" (BERT model)"),Spr=l(),e7=a("li"),R1e=a("strong"),Rpr=o("camembert"),Bpr=o(" \u2014 "),HX=a("a"),Ppr=o("TFCamembertForMultipleChoice"),$pr=o(" (CamemBERT model)"),Ipr=l(),o7=a("li"),B1e=a("strong"),qpr=o("convbert"),Npr=o(" \u2014 "),UX=a("a"),jpr=o("TFConvBertForMultipleChoice"),Dpr=o(" (ConvBERT model)"),Gpr=l(),r7=a("li"),P1e=a("strong"),Opr=o("distilbert"),Vpr=o(" \u2014 "),JX=a("a"),Xpr=o("TFDistilBertForMultipleChoice"),zpr=o(" (DistilBERT model)"),Qpr=l(),t7=a("li"),$1e=a("strong"),Wpr=o("electra"),Hpr=o(" \u2014 "),YX=a("a"),Upr=o("TFElectraForMultipleChoice"),Jpr=o(" (ELECTRA model)"),Ypr=l(),a7=a("li"),I1e=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),KX=a("a"),e_r=o("TFFlaubertForMultipleChoice"),o_r=o(" (FlauBERT model)"),r_r=l(),n7=a("li"),q1e=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),ZX=a("a"),n_r=o("TFFunnelForMultipleChoice"),s_r=o(" (Funnel Transformer model)"),l_r=l(),s7=a("li"),N1e=a("strong"),i_r=o("longformer"),d_r=o(" \u2014 "),ez=a("a"),c_r=o("TFLongformerForMultipleChoice"),f_r=o(" (Longformer model)"),m_r=l(),l7=a("li"),j1e=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),oz=a("a"),p_r=o("TFMobileBertForMultipleChoice"),__r=o(" (MobileBERT model)"),u_r=l(),i7=a("li"),D1e=a("strong"),b_r=o("mpnet"),F_r=o(" \u2014 "),rz=a("a"),v_r=o("TFMPNetForMultipleChoice"),T_r=o(" (MPNet model)"),M_r=l(),d7=a("li"),G1e=a("strong"),E_r=o("rembert"),C_r=o(" \u2014 "),tz=a("a"),w_r=o("TFRemBertForMultipleChoice"),A_r=o(" (RemBERT model)"),y_r=l(),c7=a("li"),O1e=a("strong"),L_r=o("roberta"),x_r=o(" \u2014 "),az=a("a"),k_r=o("TFRobertaForMultipleChoice"),S_r=o(" (RoBERTa model)"),R_r=l(),f7=a("li"),V1e=a("strong"),B_r=o("roformer"),P_r=o(" \u2014 "),nz=a("a"),$_r=o("TFRoFormerForMultipleChoice"),I_r=o(" (RoFormer model)"),q_r=l(),m7=a("li"),X1e=a("strong"),N_r=o("xlm"),j_r=o(" \u2014 "),sz=a("a"),D_r=o("TFXLMForMultipleChoice"),G_r=o(" (XLM model)"),O_r=l(),g7=a("li"),z1e=a("strong"),V_r=o("xlm-roberta"),X_r=o(" \u2014 "),lz=a("a"),z_r=o("TFXLMRobertaForMultipleChoice"),Q_r=o(" (XLM-RoBERTa model)"),W_r=l(),h7=a("li"),Q1e=a("strong"),H_r=o("xlnet"),U_r=o(" \u2014 "),iz=a("a"),J_r=o("TFXLNetForMultipleChoice"),Y_r=o(" (XLNet model)"),K_r=l(),W1e=a("p"),Z_r=o("Examples:"),eur=l(),f(U0.$$.fragment),JRe=l(),qc=a("h2"),p7=a("a"),H1e=a("span"),f(J0.$$.fragment),our=l(),U1e=a("span"),rur=o("TFAutoModelForTableQuestionAnswering"),YRe=l(),yr=a("div"),f(Y0.$$.fragment),tur=l(),Nc=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=a("a"),nur=o("from_pretrained()"),sur=o(" class method or the "),cz=a("a"),lur=o("from_config()"),iur=o(` class
method.`),dur=l(),K0=a("p"),cur=o("This class cannot be instantiated directly using "),J1e=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),Tt=a("div"),f(Z0.$$.fragment),hur=l(),Y1e=a("p"),pur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ur=l(),jc=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),bur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),vur=o("from_pretrained()"),Tur=o(" to load the model weights."),Mur=l(),Z1e=a("p"),Eur=o("Examples:"),Cur=l(),f(ey.$$.fragment),wur=l(),Mo=a("div"),f(oy.$$.fragment),Aur=l(),ebe=a("p"),yur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lur=l(),Cn=a("p"),xur=o("The model class to instantiate is selected based on the "),obe=a("code"),kur=o("model_type"),Sur=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),Rur=o("pretrained_model_name_or_path"),Bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),Pur=o("pretrained_model_name_or_path"),$ur=o(":"),Iur=l(),abe=a("ul"),_7=a("li"),nbe=a("strong"),qur=o("tapas"),Nur=o(" \u2014 "),mz=a("a"),jur=o("TFTapasForQuestionAnswering"),Dur=o(" (TAPAS model)"),Gur=l(),sbe=a("p"),Our=o("Examples:"),Vur=l(),f(ry.$$.fragment),KRe=l(),Dc=a("h2"),u7=a("a"),lbe=a("span"),f(ty.$$.fragment),Xur=l(),ibe=a("span"),zur=o("TFAutoModelForTokenClassification"),ZRe=l(),Lr=a("div"),f(ay.$$.fragment),Qur=l(),Gc=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gz=a("a"),Hur=o("from_pretrained()"),Uur=o(" class method or the "),hz=a("a"),Jur=o("from_config()"),Yur=o(` class
method.`),Kur=l(),ny=a("p"),Zur=o("This class cannot be instantiated directly using "),dbe=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),Mt=a("div"),f(sy.$$.fragment),t1r=l(),cbe=a("p"),a1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n1r=l(),Oc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),d1r=o("from_pretrained()"),c1r=o(" to load the model weights."),f1r=l(),mbe=a("p"),m1r=o("Examples:"),g1r=l(),f(ly.$$.fragment),h1r=l(),Eo=a("div"),f(iy.$$.fragment),p1r=l(),gbe=a("p"),_1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u1r=l(),wn=a("p"),b1r=o("The model class to instantiate is selected based on the "),hbe=a("code"),F1r=o("model_type"),v1r=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(":"),w1r=l(),Y=a("ul"),b7=a("li"),ube=a("strong"),A1r=o("albert"),y1r=o(" \u2014 "),_z=a("a"),L1r=o("TFAlbertForTokenClassification"),x1r=o(" (ALBERT model)"),k1r=l(),F7=a("li"),bbe=a("strong"),S1r=o("bert"),R1r=o(" \u2014 "),uz=a("a"),B1r=o("TFBertForTokenClassification"),P1r=o(" (BERT model)"),$1r=l(),v7=a("li"),Fbe=a("strong"),I1r=o("camembert"),q1r=o(" \u2014 "),bz=a("a"),N1r=o("TFCamembertForTokenClassification"),j1r=o(" (CamemBERT model)"),D1r=l(),T7=a("li"),vbe=a("strong"),G1r=o("convbert"),O1r=o(" \u2014 "),Fz=a("a"),V1r=o("TFConvBertForTokenClassification"),X1r=o(" (ConvBERT model)"),z1r=l(),M7=a("li"),Tbe=a("strong"),Q1r=o("deberta"),W1r=o(" \u2014 "),vz=a("a"),H1r=o("TFDebertaForTokenClassification"),U1r=o(" (DeBERTa model)"),J1r=l(),E7=a("li"),Mbe=a("strong"),Y1r=o("deberta-v2"),K1r=o(" \u2014 "),Tz=a("a"),Z1r=o("TFDebertaV2ForTokenClassification"),ebr=o(" (DeBERTa-v2 model)"),obr=l(),C7=a("li"),Ebe=a("strong"),rbr=o("distilbert"),tbr=o(" \u2014 "),Mz=a("a"),abr=o("TFDistilBertForTokenClassification"),nbr=o(" (DistilBERT model)"),sbr=l(),w7=a("li"),Cbe=a("strong"),lbr=o("electra"),ibr=o(" \u2014 "),Ez=a("a"),dbr=o("TFElectraForTokenClassification"),cbr=o(" (ELECTRA model)"),fbr=l(),A7=a("li"),wbe=a("strong"),mbr=o("flaubert"),gbr=o(" \u2014 "),Cz=a("a"),hbr=o("TFFlaubertForTokenClassification"),pbr=o(" (FlauBERT model)"),_br=l(),y7=a("li"),Abe=a("strong"),ubr=o("funnel"),bbr=o(" \u2014 "),wz=a("a"),Fbr=o("TFFunnelForTokenClassification"),vbr=o(" (Funnel Transformer model)"),Tbr=l(),L7=a("li"),ybe=a("strong"),Mbr=o("layoutlm"),Ebr=o(" \u2014 "),Az=a("a"),Cbr=o("TFLayoutLMForTokenClassification"),wbr=o(" (LayoutLM model)"),Abr=l(),x7=a("li"),Lbe=a("strong"),ybr=o("longformer"),Lbr=o(" \u2014 "),yz=a("a"),xbr=o("TFLongformerForTokenClassification"),kbr=o(" (Longformer model)"),Sbr=l(),k7=a("li"),xbe=a("strong"),Rbr=o("mobilebert"),Bbr=o(" \u2014 "),Lz=a("a"),Pbr=o("TFMobileBertForTokenClassification"),$br=o(" (MobileBERT model)"),Ibr=l(),S7=a("li"),kbe=a("strong"),qbr=o("mpnet"),Nbr=o(" \u2014 "),xz=a("a"),jbr=o("TFMPNetForTokenClassification"),Dbr=o(" (MPNet model)"),Gbr=l(),R7=a("li"),Sbe=a("strong"),Obr=o("rembert"),Vbr=o(" \u2014 "),kz=a("a"),Xbr=o("TFRemBertForTokenClassification"),zbr=o(" (RemBERT model)"),Qbr=l(),B7=a("li"),Rbe=a("strong"),Wbr=o("roberta"),Hbr=o(" \u2014 "),Sz=a("a"),Ubr=o("TFRobertaForTokenClassification"),Jbr=o(" (RoBERTa model)"),Ybr=l(),P7=a("li"),Bbe=a("strong"),Kbr=o("roformer"),Zbr=o(" \u2014 "),Rz=a("a"),e3r=o("TFRoFormerForTokenClassification"),o3r=o(" (RoFormer model)"),r3r=l(),$7=a("li"),Pbe=a("strong"),t3r=o("xlm"),a3r=o(" \u2014 "),Bz=a("a"),n3r=o("TFXLMForTokenClassification"),s3r=o(" (XLM model)"),l3r=l(),I7=a("li"),$be=a("strong"),i3r=o("xlm-roberta"),d3r=o(" \u2014 "),Pz=a("a"),c3r=o("TFXLMRobertaForTokenClassification"),f3r=o(" (XLM-RoBERTa model)"),m3r=l(),q7=a("li"),Ibe=a("strong"),g3r=o("xlnet"),h3r=o(" \u2014 "),$z=a("a"),p3r=o("TFXLNetForTokenClassification"),_3r=o(" (XLNet model)"),u3r=l(),qbe=a("p"),b3r=o("Examples:"),F3r=l(),f(dy.$$.fragment),eBe=l(),Vc=a("h2"),N7=a("a"),Nbe=a("span"),f(cy.$$.fragment),v3r=l(),jbe=a("span"),T3r=o("TFAutoModelForQuestionAnswering"),oBe=l(),xr=a("div"),f(fy.$$.fragment),M3r=l(),Xc=a("p"),E3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=a("a"),C3r=o("from_pretrained()"),w3r=o(" class method or the "),qz=a("a"),A3r=o("from_config()"),y3r=o(` class
method.`),L3r=l(),my=a("p"),x3r=o("This class cannot be instantiated directly using "),Dbe=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),Et=a("div"),f(gy.$$.fragment),B3r=l(),Gbe=a("p"),P3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$3r=l(),zc=a("p"),I3r=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),q3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),j3r=o("from_pretrained()"),D3r=o(" to load the model weights."),G3r=l(),Vbe=a("p"),O3r=o("Examples:"),V3r=l(),f(hy.$$.fragment),X3r=l(),Co=a("div"),f(py.$$.fragment),z3r=l(),Xbe=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W3r=l(),An=a("p"),H3r=o("The model class to instantiate is selected based on the "),zbe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Z3r=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),K=a("ul"),j7=a("li"),Hbe=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),jz=a("a"),a2r=o("TFAlbertForQuestionAnswering"),n2r=o(" (ALBERT model)"),s2r=l(),D7=a("li"),Ube=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),Dz=a("a"),d2r=o("TFBertForQuestionAnswering"),c2r=o(" (BERT model)"),f2r=l(),G7=a("li"),Jbe=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),Gz=a("a"),h2r=o("TFCamembertForQuestionAnswering"),p2r=o(" (CamemBERT model)"),_2r=l(),O7=a("li"),Ybe=a("strong"),u2r=o("convbert"),b2r=o(" \u2014 "),Oz=a("a"),F2r=o("TFConvBertForQuestionAnswering"),v2r=o(" (ConvBERT model)"),T2r=l(),V7=a("li"),Kbe=a("strong"),M2r=o("deberta"),E2r=o(" \u2014 "),Vz=a("a"),C2r=o("TFDebertaForQuestionAnswering"),w2r=o(" (DeBERTa model)"),A2r=l(),X7=a("li"),Zbe=a("strong"),y2r=o("deberta-v2"),L2r=o(" \u2014 "),Xz=a("a"),x2r=o("TFDebertaV2ForQuestionAnswering"),k2r=o(" (DeBERTa-v2 model)"),S2r=l(),z7=a("li"),e3e=a("strong"),R2r=o("distilbert"),B2r=o(" \u2014 "),zz=a("a"),P2r=o("TFDistilBertForQuestionAnswering"),$2r=o(" (DistilBERT model)"),I2r=l(),Q7=a("li"),o3e=a("strong"),q2r=o("electra"),N2r=o(" \u2014 "),Qz=a("a"),j2r=o("TFElectraForQuestionAnswering"),D2r=o(" (ELECTRA model)"),G2r=l(),W7=a("li"),r3e=a("strong"),O2r=o("flaubert"),V2r=o(" \u2014 "),Wz=a("a"),X2r=o("TFFlaubertForQuestionAnsweringSimple"),z2r=o(" (FlauBERT model)"),Q2r=l(),H7=a("li"),t3e=a("strong"),W2r=o("funnel"),H2r=o(" \u2014 "),Hz=a("a"),U2r=o("TFFunnelForQuestionAnswering"),J2r=o(" (Funnel Transformer model)"),Y2r=l(),U7=a("li"),a3e=a("strong"),K2r=o("gptj"),Z2r=o(" \u2014 "),Uz=a("a"),eFr=o("TFGPTJForQuestionAnswering"),oFr=o(" (GPT-J model)"),rFr=l(),J7=a("li"),n3e=a("strong"),tFr=o("longformer"),aFr=o(" \u2014 "),Jz=a("a"),nFr=o("TFLongformerForQuestionAnswering"),sFr=o(" (Longformer model)"),lFr=l(),Y7=a("li"),s3e=a("strong"),iFr=o("mobilebert"),dFr=o(" \u2014 "),Yz=a("a"),cFr=o("TFMobileBertForQuestionAnswering"),fFr=o(" (MobileBERT model)"),mFr=l(),K7=a("li"),l3e=a("strong"),gFr=o("mpnet"),hFr=o(" \u2014 "),Kz=a("a"),pFr=o("TFMPNetForQuestionAnswering"),_Fr=o(" (MPNet model)"),uFr=l(),Z7=a("li"),i3e=a("strong"),bFr=o("rembert"),FFr=o(" \u2014 "),Zz=a("a"),vFr=o("TFRemBertForQuestionAnswering"),TFr=o(" (RemBERT model)"),MFr=l(),eM=a("li"),d3e=a("strong"),EFr=o("roberta"),CFr=o(" \u2014 "),eQ=a("a"),wFr=o("TFRobertaForQuestionAnswering"),AFr=o(" (RoBERTa model)"),yFr=l(),oM=a("li"),c3e=a("strong"),LFr=o("roformer"),xFr=o(" \u2014 "),oQ=a("a"),kFr=o("TFRoFormerForQuestionAnswering"),SFr=o(" (RoFormer model)"),RFr=l(),rM=a("li"),f3e=a("strong"),BFr=o("xlm"),PFr=o(" \u2014 "),rQ=a("a"),$Fr=o("TFXLMForQuestionAnsweringSimple"),IFr=o(" (XLM model)"),qFr=l(),tM=a("li"),m3e=a("strong"),NFr=o("xlm-roberta"),jFr=o(" \u2014 "),tQ=a("a"),DFr=o("TFXLMRobertaForQuestionAnswering"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),aM=a("li"),g3e=a("strong"),VFr=o("xlnet"),XFr=o(" \u2014 "),aQ=a("a"),zFr=o("TFXLNetForQuestionAnsweringSimple"),QFr=o(" (XLNet model)"),WFr=l(),h3e=a("p"),HFr=o("Examples:"),UFr=l(),f(_y.$$.fragment),rBe=l(),Qc=a("h2"),nM=a("a"),p3e=a("span"),f(uy.$$.fragment),JFr=l(),_3e=a("span"),YFr=o("TFAutoModelForVision2Seq"),tBe=l(),kr=a("div"),f(by.$$.fragment),KFr=l(),Wc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nQ=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),sQ=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),Fy=a("p"),nvr=o("This class cannot be instantiated directly using "),u3e=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),Ct=a("div"),f(vy.$$.fragment),dvr=l(),b3e=a("p"),cvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fvr=l(),Hc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),pvr=o("from_pretrained()"),_vr=o(" to load the model weights."),uvr=l(),v3e=a("p"),bvr=o("Examples:"),Fvr=l(),f(Ty.$$.fragment),vvr=l(),wo=a("div"),f(My.$$.fragment),Tvr=l(),T3e=a("p"),Mvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Evr=l(),yn=a("p"),Cvr=o("The model class to instantiate is selected based on the "),M3e=a("code"),wvr=o("model_type"),Avr=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),xvr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),w3e=a("ul"),sM=a("li"),A3e=a("strong"),Rvr=o("vision-encoder-decoder"),Bvr=o(" \u2014 "),iQ=a("a"),Pvr=o("TFVisionEncoderDecoderModel"),$vr=o(" (Vision Encoder decoder model)"),Ivr=l(),y3e=a("p"),qvr=o("Examples:"),Nvr=l(),f(Ey.$$.fragment),aBe=l(),Uc=a("h2"),lM=a("a"),L3e=a("span"),f(Cy.$$.fragment),jvr=l(),x3e=a("span"),Dvr=o("TFAutoModelForSpeechSeq2Seq"),nBe=l(),Sr=a("div"),f(wy.$$.fragment),Gvr=l(),Jc=a("p"),Ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dQ=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" class method or the "),cQ=a("a"),zvr=o("from_config()"),Qvr=o(` class
method.`),Wvr=l(),Ay=a("p"),Hvr=o("This class cannot be instantiated directly using "),k3e=a("code"),Uvr=o("__init__()"),Jvr=o(" (throws an error)."),Yvr=l(),wt=a("div"),f(yy.$$.fragment),Kvr=l(),S3e=a("p"),Zvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e6r=l(),Yc=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),B3e=a("p"),l6r=o("Examples:"),i6r=l(),f(Ly.$$.fragment),d6r=l(),Ao=a("div"),f(xy.$$.fragment),c6r=l(),P3e=a("p"),f6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m6r=l(),Ln=a("p"),g6r=o("The model class to instantiate is selected based on the "),$3e=a("code"),h6r=o("model_type"),p6r=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),b6r=o("pretrained_model_name_or_path"),F6r=o(":"),v6r=l(),N3e=a("ul"),iM=a("li"),j3e=a("strong"),T6r=o("speech_to_text"),M6r=o(" \u2014 "),mQ=a("a"),E6r=o("TFSpeech2TextForConditionalGeneration"),C6r=o(" (Speech2Text model)"),w6r=l(),D3e=a("p"),A6r=o("Examples:"),y6r=l(),f(ky.$$.fragment),sBe=l(),Kc=a("h2"),dM=a("a"),G3e=a("span"),f(Sy.$$.fragment),L6r=l(),O3e=a("span"),x6r=o("FlaxAutoModel"),lBe=l(),Rr=a("div"),f(Ry.$$.fragment),k6r=l(),Zc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gQ=a("a"),R6r=o("from_pretrained()"),B6r=o(" class method or the "),hQ=a("a"),P6r=o("from_config()"),$6r=o(` class
method.`),I6r=l(),By=a("p"),q6r=o("This class cannot be instantiated directly using "),V3e=a("code"),N6r=o("__init__()"),j6r=o(" (throws an error)."),D6r=l(),At=a("div"),f(Py.$$.fragment),G6r=l(),X3e=a("p"),O6r=o("Instantiates one of the base model classes of the library from a configuration."),V6r=l(),ef=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),z6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),W6r=o("from_pretrained()"),H6r=o(" to load the model weights."),U6r=l(),Q3e=a("p"),J6r=o("Examples:"),Y6r=l(),f($y.$$.fragment),K6r=l(),yo=a("div"),f(Iy.$$.fragment),Z6r=l(),W3e=a("p"),eTr=o("Instantiate one of the base model classes of the library from a pretrained model."),oTr=l(),xn=a("p"),rTr=o("The model class to instantiate is selected based on the "),H3e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),z=a("ul"),cM=a("li"),Y3e=a("strong"),cTr=o("albert"),fTr=o(" \u2014 "),_Q=a("a"),mTr=o("FlaxAlbertModel"),gTr=o(" (ALBERT model)"),hTr=l(),fM=a("li"),K3e=a("strong"),pTr=o("bart"),_Tr=o(" \u2014 "),uQ=a("a"),uTr=o("FlaxBartModel"),bTr=o(" (BART model)"),FTr=l(),mM=a("li"),Z3e=a("strong"),vTr=o("beit"),TTr=o(" \u2014 "),bQ=a("a"),MTr=o("FlaxBeitModel"),ETr=o(" (BEiT model)"),CTr=l(),gM=a("li"),e2e=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),FQ=a("a"),yTr=o("FlaxBertModel"),LTr=o(" (BERT model)"),xTr=l(),hM=a("li"),o2e=a("strong"),kTr=o("big_bird"),STr=o(" \u2014 "),vQ=a("a"),RTr=o("FlaxBigBirdModel"),BTr=o(" (BigBird model)"),PTr=l(),pM=a("li"),r2e=a("strong"),$Tr=o("blenderbot"),ITr=o(" \u2014 "),TQ=a("a"),qTr=o("FlaxBlenderbotModel"),NTr=o(" (Blenderbot model)"),jTr=l(),_M=a("li"),t2e=a("strong"),DTr=o("blenderbot-small"),GTr=o(" \u2014 "),MQ=a("a"),OTr=o("FlaxBlenderbotSmallModel"),VTr=o(" (BlenderbotSmall model)"),XTr=l(),uM=a("li"),a2e=a("strong"),zTr=o("clip"),QTr=o(" \u2014 "),EQ=a("a"),WTr=o("FlaxCLIPModel"),HTr=o(" (CLIP model)"),UTr=l(),bM=a("li"),n2e=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),CQ=a("a"),KTr=o("FlaxDistilBertModel"),ZTr=o(" (DistilBERT model)"),e7r=l(),FM=a("li"),s2e=a("strong"),o7r=o("electra"),r7r=o(" \u2014 "),wQ=a("a"),t7r=o("FlaxElectraModel"),a7r=o(" (ELECTRA model)"),n7r=l(),vM=a("li"),l2e=a("strong"),s7r=o("gpt2"),l7r=o(" \u2014 "),AQ=a("a"),i7r=o("FlaxGPT2Model"),d7r=o(" (OpenAI GPT-2 model)"),c7r=l(),TM=a("li"),i2e=a("strong"),f7r=o("gpt_neo"),m7r=o(" \u2014 "),yQ=a("a"),g7r=o("FlaxGPTNeoModel"),h7r=o(" (GPT Neo model)"),p7r=l(),MM=a("li"),d2e=a("strong"),_7r=o("gptj"),u7r=o(" \u2014 "),LQ=a("a"),b7r=o("FlaxGPTJModel"),F7r=o(" (GPT-J model)"),v7r=l(),EM=a("li"),c2e=a("strong"),T7r=o("marian"),M7r=o(" \u2014 "),xQ=a("a"),E7r=o("FlaxMarianModel"),C7r=o(" (Marian model)"),w7r=l(),CM=a("li"),f2e=a("strong"),A7r=o("mbart"),y7r=o(" \u2014 "),kQ=a("a"),L7r=o("FlaxMBartModel"),x7r=o(" (mBART model)"),k7r=l(),wM=a("li"),m2e=a("strong"),S7r=o("mt5"),R7r=o(" \u2014 "),SQ=a("a"),B7r=o("FlaxMT5Model"),P7r=o(" (mT5 model)"),$7r=l(),AM=a("li"),g2e=a("strong"),I7r=o("pegasus"),q7r=o(" \u2014 "),RQ=a("a"),N7r=o("FlaxPegasusModel"),j7r=o(" (Pegasus model)"),D7r=l(),yM=a("li"),h2e=a("strong"),G7r=o("roberta"),O7r=o(" \u2014 "),BQ=a("a"),V7r=o("FlaxRobertaModel"),X7r=o(" (RoBERTa model)"),z7r=l(),LM=a("li"),p2e=a("strong"),Q7r=o("roformer"),W7r=o(" \u2014 "),PQ=a("a"),H7r=o("FlaxRoFormerModel"),U7r=o(" (RoFormer model)"),J7r=l(),xM=a("li"),_2e=a("strong"),Y7r=o("t5"),K7r=o(" \u2014 "),$Q=a("a"),Z7r=o("FlaxT5Model"),eMr=o(" (T5 model)"),oMr=l(),kM=a("li"),u2e=a("strong"),rMr=o("vision-text-dual-encoder"),tMr=o(" \u2014 "),IQ=a("a"),aMr=o("FlaxVisionTextDualEncoderModel"),nMr=o(" (VisionTextDualEncoder model)"),sMr=l(),SM=a("li"),b2e=a("strong"),lMr=o("vit"),iMr=o(" \u2014 "),qQ=a("a"),dMr=o("FlaxViTModel"),cMr=o(" (ViT model)"),fMr=l(),RM=a("li"),F2e=a("strong"),mMr=o("wav2vec2"),gMr=o(" \u2014 "),NQ=a("a"),hMr=o("FlaxWav2Vec2Model"),pMr=o(" (Wav2Vec2 model)"),_Mr=l(),BM=a("li"),v2e=a("strong"),uMr=o("xglm"),bMr=o(" \u2014 "),jQ=a("a"),FMr=o("FlaxXGLMModel"),vMr=o(" (XGLM model)"),TMr=l(),PM=a("li"),T2e=a("strong"),MMr=o("xlm-roberta"),EMr=o(" \u2014 "),DQ=a("a"),CMr=o("FlaxXLMRobertaModel"),wMr=o(" (XLM-RoBERTa model)"),AMr=l(),M2e=a("p"),yMr=o("Examples:"),LMr=l(),f(qy.$$.fragment),iBe=l(),of=a("h2"),$M=a("a"),E2e=a("span"),f(Ny.$$.fragment),xMr=l(),C2e=a("span"),kMr=o("FlaxAutoModelForCausalLM"),dBe=l(),Br=a("div"),f(jy.$$.fragment),SMr=l(),rf=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=a("a"),BMr=o("from_pretrained()"),PMr=o(" class method or the "),OQ=a("a"),$Mr=o("from_config()"),IMr=o(` class
method.`),qMr=l(),Dy=a("p"),NMr=o("This class cannot be instantiated directly using "),w2e=a("code"),jMr=o("__init__()"),DMr=o(" (throws an error)."),GMr=l(),yt=a("div"),f(Gy.$$.fragment),OMr=l(),A2e=a("p"),VMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XMr=l(),tf=a("p"),zMr=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),QMr=o("not"),WMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),HMr=o("from_pretrained()"),UMr=o(" to load the model weights."),JMr=l(),L2e=a("p"),YMr=o("Examples:"),KMr=l(),f(Oy.$$.fragment),ZMr=l(),Lo=a("div"),f(Vy.$$.fragment),e4r=l(),x2e=a("p"),o4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r4r=l(),kn=a("p"),t4r=o("The model class to instantiate is selected based on the "),k2e=a("code"),a4r=o("model_type"),n4r=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(":"),c4r=l(),ca=a("ul"),IM=a("li"),B2e=a("strong"),f4r=o("bart"),m4r=o(" \u2014 "),XQ=a("a"),g4r=o("FlaxBartForCausalLM"),h4r=o(" (BART model)"),p4r=l(),qM=a("li"),P2e=a("strong"),_4r=o("gpt2"),u4r=o(" \u2014 "),zQ=a("a"),b4r=o("FlaxGPT2LMHeadModel"),F4r=o(" (OpenAI GPT-2 model)"),v4r=l(),NM=a("li"),$2e=a("strong"),T4r=o("gpt_neo"),M4r=o(" \u2014 "),QQ=a("a"),E4r=o("FlaxGPTNeoForCausalLM"),C4r=o(" (GPT Neo model)"),w4r=l(),jM=a("li"),I2e=a("strong"),A4r=o("gptj"),y4r=o(" \u2014 "),WQ=a("a"),L4r=o("FlaxGPTJForCausalLM"),x4r=o(" (GPT-J model)"),k4r=l(),DM=a("li"),q2e=a("strong"),S4r=o("xglm"),R4r=o(" \u2014 "),HQ=a("a"),B4r=o("FlaxXGLMForCausalLM"),P4r=o(" (XGLM model)"),$4r=l(),N2e=a("p"),I4r=o("Examples:"),q4r=l(),f(Xy.$$.fragment),cBe=l(),af=a("h2"),GM=a("a"),j2e=a("span"),f(zy.$$.fragment),N4r=l(),D2e=a("span"),j4r=o("FlaxAutoModelForPreTraining"),fBe=l(),Pr=a("div"),f(Qy.$$.fragment),D4r=l(),nf=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),JQ=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),Q4r=l(),Wy=a("p"),W4r=o("This class cannot be instantiated directly using "),G2e=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),Lt=a("div"),f(Hy.$$.fragment),Y4r=l(),O2e=a("p"),K4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z4r=l(),sf=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),X2e=a("p"),sEr=o("Examples:"),lEr=l(),f(Uy.$$.fragment),iEr=l(),xo=a("div"),f(Jy.$$.fragment),dEr=l(),z2e=a("p"),cEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fEr=l(),Sn=a("p"),mEr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),gEr=o("model_type"),hEr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),uEr=o("pretrained_model_name_or_path"),bEr=o(":"),FEr=l(),fe=a("ul"),OM=a("li"),U2e=a("strong"),vEr=o("albert"),TEr=o(" \u2014 "),KQ=a("a"),MEr=o("FlaxAlbertForPreTraining"),EEr=o(" (ALBERT model)"),CEr=l(),VM=a("li"),J2e=a("strong"),wEr=o("bart"),AEr=o(" \u2014 "),ZQ=a("a"),yEr=o("FlaxBartForConditionalGeneration"),LEr=o(" (BART model)"),xEr=l(),XM=a("li"),Y2e=a("strong"),kEr=o("bert"),SEr=o(" \u2014 "),eW=a("a"),REr=o("FlaxBertForPreTraining"),BEr=o(" (BERT model)"),PEr=l(),zM=a("li"),K2e=a("strong"),$Er=o("big_bird"),IEr=o(" \u2014 "),oW=a("a"),qEr=o("FlaxBigBirdForPreTraining"),NEr=o(" (BigBird model)"),jEr=l(),QM=a("li"),Z2e=a("strong"),DEr=o("electra"),GEr=o(" \u2014 "),rW=a("a"),OEr=o("FlaxElectraForPreTraining"),VEr=o(" (ELECTRA model)"),XEr=l(),WM=a("li"),eFe=a("strong"),zEr=o("mbart"),QEr=o(" \u2014 "),tW=a("a"),WEr=o("FlaxMBartForConditionalGeneration"),HEr=o(" (mBART model)"),UEr=l(),HM=a("li"),oFe=a("strong"),JEr=o("mt5"),YEr=o(" \u2014 "),aW=a("a"),KEr=o("FlaxMT5ForConditionalGeneration"),ZEr=o(" (mT5 model)"),eCr=l(),UM=a("li"),rFe=a("strong"),oCr=o("roberta"),rCr=o(" \u2014 "),nW=a("a"),tCr=o("FlaxRobertaForMaskedLM"),aCr=o(" (RoBERTa model)"),nCr=l(),JM=a("li"),tFe=a("strong"),sCr=o("roformer"),lCr=o(" \u2014 "),sW=a("a"),iCr=o("FlaxRoFormerForMaskedLM"),dCr=o(" (RoFormer model)"),cCr=l(),YM=a("li"),aFe=a("strong"),fCr=o("t5"),mCr=o(" \u2014 "),lW=a("a"),gCr=o("FlaxT5ForConditionalGeneration"),hCr=o(" (T5 model)"),pCr=l(),KM=a("li"),nFe=a("strong"),_Cr=o("wav2vec2"),uCr=o(" \u2014 "),iW=a("a"),bCr=o("FlaxWav2Vec2ForPreTraining"),FCr=o(" (Wav2Vec2 model)"),vCr=l(),ZM=a("li"),sFe=a("strong"),TCr=o("xlm-roberta"),MCr=o(" \u2014 "),dW=a("a"),ECr=o("FlaxXLMRobertaForMaskedLM"),CCr=o(" (XLM-RoBERTa model)"),wCr=l(),lFe=a("p"),ACr=o("Examples:"),yCr=l(),f(Yy.$$.fragment),mBe=l(),lf=a("h2"),e4=a("a"),iFe=a("span"),f(Ky.$$.fragment),LCr=l(),dFe=a("span"),xCr=o("FlaxAutoModelForMaskedLM"),gBe=l(),$r=a("div"),f(Zy.$$.fragment),kCr=l(),df=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cW=a("a"),RCr=o("from_pretrained()"),BCr=o(" class method or the "),fW=a("a"),PCr=o("from_config()"),$Cr=o(` class
method.`),ICr=l(),eL=a("p"),qCr=o("This class cannot be instantiated directly using "),cFe=a("code"),NCr=o("__init__()"),jCr=o(" (throws an error)."),DCr=l(),xt=a("div"),f(oL.$$.fragment),GCr=l(),fFe=a("p"),OCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VCr=l(),cf=a("p"),XCr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),zCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),WCr=o("from_pretrained()"),HCr=o(" to load the model weights."),UCr=l(),gFe=a("p"),JCr=o("Examples:"),YCr=l(),f(rL.$$.fragment),KCr=l(),ko=a("div"),f(tL.$$.fragment),ZCr=l(),hFe=a("p"),e5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o5r=l(),Rn=a("p"),r5r=o("The model class to instantiate is selected based on the "),pFe=a("code"),t5r=o("model_type"),a5r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),n5r=o("pretrained_model_name_or_path"),s5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),l5r=o("pretrained_model_name_or_path"),i5r=o(":"),d5r=l(),be=a("ul"),o4=a("li"),bFe=a("strong"),c5r=o("albert"),f5r=o(" \u2014 "),gW=a("a"),m5r=o("FlaxAlbertForMaskedLM"),g5r=o(" (ALBERT model)"),h5r=l(),r4=a("li"),FFe=a("strong"),p5r=o("bart"),_5r=o(" \u2014 "),hW=a("a"),u5r=o("FlaxBartForConditionalGeneration"),b5r=o(" (BART model)"),F5r=l(),t4=a("li"),vFe=a("strong"),v5r=o("bert"),T5r=o(" \u2014 "),pW=a("a"),M5r=o("FlaxBertForMaskedLM"),E5r=o(" (BERT model)"),C5r=l(),a4=a("li"),TFe=a("strong"),w5r=o("big_bird"),A5r=o(" \u2014 "),_W=a("a"),y5r=o("FlaxBigBirdForMaskedLM"),L5r=o(" (BigBird model)"),x5r=l(),n4=a("li"),MFe=a("strong"),k5r=o("distilbert"),S5r=o(" \u2014 "),uW=a("a"),R5r=o("FlaxDistilBertForMaskedLM"),B5r=o(" (DistilBERT model)"),P5r=l(),s4=a("li"),EFe=a("strong"),$5r=o("electra"),I5r=o(" \u2014 "),bW=a("a"),q5r=o("FlaxElectraForMaskedLM"),N5r=o(" (ELECTRA model)"),j5r=l(),l4=a("li"),CFe=a("strong"),D5r=o("mbart"),G5r=o(" \u2014 "),FW=a("a"),O5r=o("FlaxMBartForConditionalGeneration"),V5r=o(" (mBART model)"),X5r=l(),i4=a("li"),wFe=a("strong"),z5r=o("roberta"),Q5r=o(" \u2014 "),vW=a("a"),W5r=o("FlaxRobertaForMaskedLM"),H5r=o(" (RoBERTa model)"),U5r=l(),d4=a("li"),AFe=a("strong"),J5r=o("roformer"),Y5r=o(" \u2014 "),TW=a("a"),K5r=o("FlaxRoFormerForMaskedLM"),Z5r=o(" (RoFormer model)"),ewr=l(),c4=a("li"),yFe=a("strong"),owr=o("xlm-roberta"),rwr=o(" \u2014 "),MW=a("a"),twr=o("FlaxXLMRobertaForMaskedLM"),awr=o(" (XLM-RoBERTa model)"),nwr=l(),LFe=a("p"),swr=o("Examples:"),lwr=l(),f(aL.$$.fragment),hBe=l(),ff=a("h2"),f4=a("a"),xFe=a("span"),f(nL.$$.fragment),iwr=l(),kFe=a("span"),dwr=o("FlaxAutoModelForSeq2SeqLM"),pBe=l(),Ir=a("div"),f(sL.$$.fragment),cwr=l(),mf=a("p"),fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=a("a"),mwr=o("from_pretrained()"),gwr=o(" class method or the "),CW=a("a"),hwr=o("from_config()"),pwr=o(` class
method.`),_wr=l(),lL=a("p"),uwr=o("This class cannot be instantiated directly using "),SFe=a("code"),bwr=o("__init__()"),Fwr=o(" (throws an error)."),vwr=l(),kt=a("div"),f(iL.$$.fragment),Twr=l(),RFe=a("p"),Mwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ewr=l(),gf=a("p"),Cwr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),wwr=o("not"),Awr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),ywr=o("from_pretrained()"),Lwr=o(" to load the model weights."),xwr=l(),PFe=a("p"),kwr=o("Examples:"),Swr=l(),f(dL.$$.fragment),Rwr=l(),So=a("div"),f(cL.$$.fragment),Bwr=l(),$Fe=a("p"),Pwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$wr=l(),Bn=a("p"),Iwr=o("The model class to instantiate is selected based on the "),IFe=a("code"),qwr=o("model_type"),Nwr=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),jwr=o("pretrained_model_name_or_path"),Dwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(":"),Vwr=l(),Ee=a("ul"),m4=a("li"),jFe=a("strong"),Xwr=o("bart"),zwr=o(" \u2014 "),AW=a("a"),Qwr=o("FlaxBartForConditionalGeneration"),Wwr=o(" (BART model)"),Hwr=l(),g4=a("li"),DFe=a("strong"),Uwr=o("blenderbot"),Jwr=o(" \u2014 "),yW=a("a"),Ywr=o("FlaxBlenderbotForConditionalGeneration"),Kwr=o(" (Blenderbot model)"),Zwr=l(),h4=a("li"),GFe=a("strong"),eAr=o("blenderbot-small"),oAr=o(" \u2014 "),LW=a("a"),rAr=o("FlaxBlenderbotSmallForConditionalGeneration"),tAr=o(" (BlenderbotSmall model)"),aAr=l(),p4=a("li"),OFe=a("strong"),nAr=o("encoder-decoder"),sAr=o(" \u2014 "),xW=a("a"),lAr=o("FlaxEncoderDecoderModel"),iAr=o(" (Encoder decoder model)"),dAr=l(),_4=a("li"),VFe=a("strong"),cAr=o("marian"),fAr=o(" \u2014 "),kW=a("a"),mAr=o("FlaxMarianMTModel"),gAr=o(" (Marian model)"),hAr=l(),u4=a("li"),XFe=a("strong"),pAr=o("mbart"),_Ar=o(" \u2014 "),SW=a("a"),uAr=o("FlaxMBartForConditionalGeneration"),bAr=o(" (mBART model)"),FAr=l(),b4=a("li"),zFe=a("strong"),vAr=o("mt5"),TAr=o(" \u2014 "),RW=a("a"),MAr=o("FlaxMT5ForConditionalGeneration"),EAr=o(" (mT5 model)"),CAr=l(),F4=a("li"),QFe=a("strong"),wAr=o("pegasus"),AAr=o(" \u2014 "),BW=a("a"),yAr=o("FlaxPegasusForConditionalGeneration"),LAr=o(" (Pegasus model)"),xAr=l(),v4=a("li"),WFe=a("strong"),kAr=o("t5"),SAr=o(" \u2014 "),PW=a("a"),RAr=o("FlaxT5ForConditionalGeneration"),BAr=o(" (T5 model)"),PAr=l(),HFe=a("p"),$Ar=o("Examples:"),IAr=l(),f(fL.$$.fragment),_Be=l(),hf=a("h2"),T4=a("a"),UFe=a("span"),f(mL.$$.fragment),qAr=l(),JFe=a("span"),NAr=o("FlaxAutoModelForSequenceClassification"),uBe=l(),qr=a("div"),f(gL.$$.fragment),jAr=l(),pf=a("p"),DAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=a("a"),GAr=o("from_pretrained()"),OAr=o(" class method or the "),IW=a("a"),VAr=o("from_config()"),XAr=o(` class
method.`),zAr=l(),hL=a("p"),QAr=o("This class cannot be instantiated directly using "),YFe=a("code"),WAr=o("__init__()"),HAr=o(" (throws an error)."),UAr=l(),St=a("div"),f(pL.$$.fragment),JAr=l(),KFe=a("p"),YAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KAr=l(),_f=a("p"),ZAr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),e0r=o("not"),o0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),r0r=o("from_pretrained()"),t0r=o(" to load the model weights."),a0r=l(),eve=a("p"),n0r=o("Examples:"),s0r=l(),f(_L.$$.fragment),l0r=l(),Ro=a("div"),f(uL.$$.fragment),i0r=l(),ove=a("p"),d0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c0r=l(),Pn=a("p"),f0r=o("The model class to instantiate is selected based on the "),rve=a("code"),m0r=o("model_type"),g0r=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),h0r=o("pretrained_model_name_or_path"),p0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(":"),b0r=l(),Fe=a("ul"),M4=a("li"),nve=a("strong"),F0r=o("albert"),v0r=o(" \u2014 "),NW=a("a"),T0r=o("FlaxAlbertForSequenceClassification"),M0r=o(" (ALBERT model)"),E0r=l(),E4=a("li"),sve=a("strong"),C0r=o("bart"),w0r=o(" \u2014 "),jW=a("a"),A0r=o("FlaxBartForSequenceClassification"),y0r=o(" (BART model)"),L0r=l(),C4=a("li"),lve=a("strong"),x0r=o("bert"),k0r=o(" \u2014 "),DW=a("a"),S0r=o("FlaxBertForSequenceClassification"),R0r=o(" (BERT model)"),B0r=l(),w4=a("li"),ive=a("strong"),P0r=o("big_bird"),$0r=o(" \u2014 "),GW=a("a"),I0r=o("FlaxBigBirdForSequenceClassification"),q0r=o(" (BigBird model)"),N0r=l(),A4=a("li"),dve=a("strong"),j0r=o("distilbert"),D0r=o(" \u2014 "),OW=a("a"),G0r=o("FlaxDistilBertForSequenceClassification"),O0r=o(" (DistilBERT model)"),V0r=l(),y4=a("li"),cve=a("strong"),X0r=o("electra"),z0r=o(" \u2014 "),VW=a("a"),Q0r=o("FlaxElectraForSequenceClassification"),W0r=o(" (ELECTRA model)"),H0r=l(),L4=a("li"),fve=a("strong"),U0r=o("mbart"),J0r=o(" \u2014 "),XW=a("a"),Y0r=o("FlaxMBartForSequenceClassification"),K0r=o(" (mBART model)"),Z0r=l(),x4=a("li"),mve=a("strong"),eyr=o("roberta"),oyr=o(" \u2014 "),zW=a("a"),ryr=o("FlaxRobertaForSequenceClassification"),tyr=o(" (RoBERTa model)"),ayr=l(),k4=a("li"),gve=a("strong"),nyr=o("roformer"),syr=o(" \u2014 "),QW=a("a"),lyr=o("FlaxRoFormerForSequenceClassification"),iyr=o(" (RoFormer model)"),dyr=l(),S4=a("li"),hve=a("strong"),cyr=o("xlm-roberta"),fyr=o(" \u2014 "),WW=a("a"),myr=o("FlaxXLMRobertaForSequenceClassification"),gyr=o(" (XLM-RoBERTa model)"),hyr=l(),pve=a("p"),pyr=o("Examples:"),_yr=l(),f(bL.$$.fragment),bBe=l(),uf=a("h2"),R4=a("a"),_ve=a("span"),f(FL.$$.fragment),uyr=l(),uve=a("span"),byr=o("FlaxAutoModelForQuestionAnswering"),FBe=l(),Nr=a("div"),f(vL.$$.fragment),Fyr=l(),bf=a("p"),vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=a("a"),Tyr=o("from_pretrained()"),Myr=o(" class method or the "),UW=a("a"),Eyr=o("from_config()"),Cyr=o(` class
method.`),wyr=l(),TL=a("p"),Ayr=o("This class cannot be instantiated directly using "),bve=a("code"),yyr=o("__init__()"),Lyr=o(" (throws an error)."),xyr=l(),Rt=a("div"),f(ML.$$.fragment),kyr=l(),Fve=a("p"),Syr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ryr=l(),Ff=a("p"),Byr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),Pyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Iyr=o("from_pretrained()"),qyr=o(" to load the model weights."),Nyr=l(),Tve=a("p"),jyr=o("Examples:"),Dyr=l(),f(EL.$$.fragment),Gyr=l(),Bo=a("div"),f(CL.$$.fragment),Oyr=l(),Mve=a("p"),Vyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xyr=l(),$n=a("p"),zyr=o("The model class to instantiate is selected based on the "),Eve=a("code"),Qyr=o("model_type"),Wyr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(":"),Kyr=l(),ve=a("ul"),B4=a("li"),Ave=a("strong"),Zyr=o("albert"),eLr=o(" \u2014 "),YW=a("a"),oLr=o("FlaxAlbertForQuestionAnswering"),rLr=o(" (ALBERT model)"),tLr=l(),P4=a("li"),yve=a("strong"),aLr=o("bart"),nLr=o(" \u2014 "),KW=a("a"),sLr=o("FlaxBartForQuestionAnswering"),lLr=o(" (BART model)"),iLr=l(),$4=a("li"),Lve=a("strong"),dLr=o("bert"),cLr=o(" \u2014 "),ZW=a("a"),fLr=o("FlaxBertForQuestionAnswering"),mLr=o(" (BERT model)"),gLr=l(),I4=a("li"),xve=a("strong"),hLr=o("big_bird"),pLr=o(" \u2014 "),eH=a("a"),_Lr=o("FlaxBigBirdForQuestionAnswering"),uLr=o(" (BigBird model)"),bLr=l(),q4=a("li"),kve=a("strong"),FLr=o("distilbert"),vLr=o(" \u2014 "),oH=a("a"),TLr=o("FlaxDistilBertForQuestionAnswering"),MLr=o(" (DistilBERT model)"),ELr=l(),N4=a("li"),Sve=a("strong"),CLr=o("electra"),wLr=o(" \u2014 "),rH=a("a"),ALr=o("FlaxElectraForQuestionAnswering"),yLr=o(" (ELECTRA model)"),LLr=l(),j4=a("li"),Rve=a("strong"),xLr=o("mbart"),kLr=o(" \u2014 "),tH=a("a"),SLr=o("FlaxMBartForQuestionAnswering"),RLr=o(" (mBART model)"),BLr=l(),D4=a("li"),Bve=a("strong"),PLr=o("roberta"),$Lr=o(" \u2014 "),aH=a("a"),ILr=o("FlaxRobertaForQuestionAnswering"),qLr=o(" (RoBERTa model)"),NLr=l(),G4=a("li"),Pve=a("strong"),jLr=o("roformer"),DLr=o(" \u2014 "),nH=a("a"),GLr=o("FlaxRoFormerForQuestionAnswering"),OLr=o(" (RoFormer model)"),VLr=l(),O4=a("li"),$ve=a("strong"),XLr=o("xlm-roberta"),zLr=o(" \u2014 "),sH=a("a"),QLr=o("FlaxXLMRobertaForQuestionAnswering"),WLr=o(" (XLM-RoBERTa model)"),HLr=l(),Ive=a("p"),ULr=o("Examples:"),JLr=l(),f(wL.$$.fragment),vBe=l(),vf=a("h2"),V4=a("a"),qve=a("span"),f(AL.$$.fragment),YLr=l(),Nve=a("span"),KLr=o("FlaxAutoModelForTokenClassification"),TBe=l(),jr=a("div"),f(yL.$$.fragment),ZLr=l(),Tf=a("p"),e8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lH=a("a"),o8r=o("from_pretrained()"),r8r=o(" class method or the "),iH=a("a"),t8r=o("from_config()"),a8r=o(` class
method.`),n8r=l(),LL=a("p"),s8r=o("This class cannot be instantiated directly using "),jve=a("code"),l8r=o("__init__()"),i8r=o(" (throws an error)."),d8r=l(),Bt=a("div"),f(xL.$$.fragment),c8r=l(),Dve=a("p"),f8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m8r=l(),Mf=a("p"),g8r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),h8r=o("not"),p8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),_8r=o("from_pretrained()"),u8r=o(" to load the model weights."),b8r=l(),Ove=a("p"),F8r=o("Examples:"),v8r=l(),f(kL.$$.fragment),T8r=l(),Po=a("div"),f(SL.$$.fragment),M8r=l(),Vve=a("p"),E8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C8r=l(),In=a("p"),w8r=o("The model class to instantiate is selected based on the "),Xve=a("code"),A8r=o("model_type"),y8r=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),L8r=o("pretrained_model_name_or_path"),x8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),Be=a("ul"),X4=a("li"),Wve=a("strong"),B8r=o("albert"),P8r=o(" \u2014 "),cH=a("a"),$8r=o("FlaxAlbertForTokenClassification"),I8r=o(" (ALBERT model)"),q8r=l(),z4=a("li"),Hve=a("strong"),N8r=o("bert"),j8r=o(" \u2014 "),fH=a("a"),D8r=o("FlaxBertForTokenClassification"),G8r=o(" (BERT model)"),O8r=l(),Q4=a("li"),Uve=a("strong"),V8r=o("big_bird"),X8r=o(" \u2014 "),mH=a("a"),z8r=o("FlaxBigBirdForTokenClassification"),Q8r=o(" (BigBird model)"),W8r=l(),W4=a("li"),Jve=a("strong"),H8r=o("distilbert"),U8r=o(" \u2014 "),gH=a("a"),J8r=o("FlaxDistilBertForTokenClassification"),Y8r=o(" (DistilBERT model)"),K8r=l(),H4=a("li"),Yve=a("strong"),Z8r=o("electra"),e9r=o(" \u2014 "),hH=a("a"),o9r=o("FlaxElectraForTokenClassification"),r9r=o(" (ELECTRA model)"),t9r=l(),U4=a("li"),Kve=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),pH=a("a"),s9r=o("FlaxRobertaForTokenClassification"),l9r=o(" (RoBERTa model)"),i9r=l(),J4=a("li"),Zve=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),_H=a("a"),f9r=o("FlaxRoFormerForTokenClassification"),m9r=o(" (RoFormer model)"),g9r=l(),Y4=a("li"),e6e=a("strong"),h9r=o("xlm-roberta"),p9r=o(" \u2014 "),uH=a("a"),_9r=o("FlaxXLMRobertaForTokenClassification"),u9r=o(" (XLM-RoBERTa model)"),b9r=l(),o6e=a("p"),F9r=o("Examples:"),v9r=l(),f(RL.$$.fragment),MBe=l(),Ef=a("h2"),K4=a("a"),r6e=a("span"),f(BL.$$.fragment),T9r=l(),t6e=a("span"),M9r=o("FlaxAutoModelForMultipleChoice"),EBe=l(),Dr=a("div"),f(PL.$$.fragment),E9r=l(),Cf=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),FH=a("a"),y9r=o("from_config()"),L9r=o(` class
method.`),x9r=l(),$L=a("p"),k9r=o("This class cannot be instantiated directly using "),a6e=a("code"),S9r=o("__init__()"),R9r=o(" (throws an error)."),B9r=l(),Pt=a("div"),f(IL.$$.fragment),P9r=l(),n6e=a("p"),$9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I9r=l(),wf=a("p"),q9r=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),N9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),l6e=a("p"),V9r=o("Examples:"),X9r=l(),f(qL.$$.fragment),z9r=l(),$o=a("div"),f(NL.$$.fragment),Q9r=l(),i6e=a("p"),W9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H9r=l(),qn=a("p"),U9r=o("The model class to instantiate is selected based on the "),d6e=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),Pe=a("ul"),Z4=a("li"),m6e=a("strong"),txr=o("albert"),axr=o(" \u2014 "),TH=a("a"),nxr=o("FlaxAlbertForMultipleChoice"),sxr=o(" (ALBERT model)"),lxr=l(),eE=a("li"),g6e=a("strong"),ixr=o("bert"),dxr=o(" \u2014 "),MH=a("a"),cxr=o("FlaxBertForMultipleChoice"),fxr=o(" (BERT model)"),mxr=l(),oE=a("li"),h6e=a("strong"),gxr=o("big_bird"),hxr=o(" \u2014 "),EH=a("a"),pxr=o("FlaxBigBirdForMultipleChoice"),_xr=o(" (BigBird model)"),uxr=l(),rE=a("li"),p6e=a("strong"),bxr=o("distilbert"),Fxr=o(" \u2014 "),CH=a("a"),vxr=o("FlaxDistilBertForMultipleChoice"),Txr=o(" (DistilBERT model)"),Mxr=l(),tE=a("li"),_6e=a("strong"),Exr=o("electra"),Cxr=o(" \u2014 "),wH=a("a"),wxr=o("FlaxElectraForMultipleChoice"),Axr=o(" (ELECTRA model)"),yxr=l(),aE=a("li"),u6e=a("strong"),Lxr=o("roberta"),xxr=o(" \u2014 "),AH=a("a"),kxr=o("FlaxRobertaForMultipleChoice"),Sxr=o(" (RoBERTa model)"),Rxr=l(),nE=a("li"),b6e=a("strong"),Bxr=o("roformer"),Pxr=o(" \u2014 "),yH=a("a"),$xr=o("FlaxRoFormerForMultipleChoice"),Ixr=o(" (RoFormer model)"),qxr=l(),sE=a("li"),F6e=a("strong"),Nxr=o("xlm-roberta"),jxr=o(" \u2014 "),LH=a("a"),Dxr=o("FlaxXLMRobertaForMultipleChoice"),Gxr=o(" (XLM-RoBERTa model)"),Oxr=l(),v6e=a("p"),Vxr=o("Examples:"),Xxr=l(),f(jL.$$.fragment),CBe=l(),Af=a("h2"),lE=a("a"),T6e=a("span"),f(DL.$$.fragment),zxr=l(),M6e=a("span"),Qxr=o("FlaxAutoModelForNextSentencePrediction"),wBe=l(),Gr=a("div"),f(GL.$$.fragment),Wxr=l(),yf=a("p"),Hxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" class method or the "),kH=a("a"),Yxr=o("from_config()"),Kxr=o(` class
method.`),Zxr=l(),OL=a("p"),ekr=o("This class cannot be instantiated directly using "),E6e=a("code"),okr=o("__init__()"),rkr=o(" (throws an error)."),tkr=l(),$t=a("div"),f(VL.$$.fragment),akr=l(),C6e=a("p"),nkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),skr=l(),Lf=a("p"),lkr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),ikr=o("not"),dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),ckr=o("from_pretrained()"),fkr=o(" to load the model weights."),mkr=l(),A6e=a("p"),gkr=o("Examples:"),hkr=l(),f(XL.$$.fragment),pkr=l(),Io=a("div"),f(zL.$$.fragment),_kr=l(),y6e=a("p"),ukr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bkr=l(),Nn=a("p"),Fkr=o("The model class to instantiate is selected based on the "),L6e=a("code"),vkr=o("model_type"),Tkr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(":"),Akr=l(),S6e=a("ul"),iE=a("li"),R6e=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),RH=a("a"),xkr=o("FlaxBertForNextSentencePrediction"),kkr=o(" (BERT model)"),Skr=l(),B6e=a("p"),Rkr=o("Examples:"),Bkr=l(),f(QL.$$.fragment),ABe=l(),xf=a("h2"),dE=a("a"),P6e=a("span"),f(WL.$$.fragment),Pkr=l(),$6e=a("span"),$kr=o("FlaxAutoModelForImageClassification"),yBe=l(),Or=a("div"),f(HL.$$.fragment),Ikr=l(),kf=a("p"),qkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BH=a("a"),Nkr=o("from_pretrained()"),jkr=o(" class method or the "),PH=a("a"),Dkr=o("from_config()"),Gkr=o(` class
method.`),Okr=l(),UL=a("p"),Vkr=o("This class cannot be instantiated directly using "),I6e=a("code"),Xkr=o("__init__()"),zkr=o(" (throws an error)."),Qkr=l(),It=a("div"),f(JL.$$.fragment),Wkr=l(),q6e=a("p"),Hkr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ukr=l(),Sf=a("p"),Jkr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),Ykr=o("not"),Kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Zkr=o("from_pretrained()"),eSr=o(" to load the model weights."),oSr=l(),j6e=a("p"),rSr=o("Examples:"),tSr=l(),f(YL.$$.fragment),aSr=l(),qo=a("div"),f(KL.$$.fragment),nSr=l(),D6e=a("p"),sSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lSr=l(),jn=a("p"),iSr=o("The model class to instantiate is selected based on the "),G6e=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),O6e=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),pSr=l(),ZL=a("ul"),cE=a("li"),X6e=a("strong"),_Sr=o("beit"),uSr=o(" \u2014 "),IH=a("a"),bSr=o("FlaxBeitForImageClassification"),FSr=o(" (BEiT model)"),vSr=l(),fE=a("li"),z6e=a("strong"),TSr=o("vit"),MSr=o(" \u2014 "),qH=a("a"),ESr=o("FlaxViTForImageClassification"),CSr=o(" (ViT model)"),wSr=l(),Q6e=a("p"),ASr=o("Examples:"),ySr=l(),f(e8.$$.fragment),LBe=l(),Rf=a("h2"),mE=a("a"),W6e=a("span"),f(o8.$$.fragment),LSr=l(),H6e=a("span"),xSr=o("FlaxAutoModelForVision2Seq"),xBe=l(),Vr=a("div"),f(r8.$$.fragment),kSr=l(),Bf=a("p"),SSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=a("a"),RSr=o("from_pretrained()"),BSr=o(" class method or the "),jH=a("a"),PSr=o("from_config()"),$Sr=o(` class
method.`),ISr=l(),t8=a("p"),qSr=o("This class cannot be instantiated directly using "),U6e=a("code"),NSr=o("__init__()"),jSr=o(" (throws an error)."),DSr=l(),qt=a("div"),f(a8.$$.fragment),GSr=l(),J6e=a("p"),OSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VSr=l(),Pf=a("p"),XSr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),zSr=o("not"),QSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),WSr=o("from_pretrained()"),HSr=o(" to load the model weights."),USr=l(),K6e=a("p"),JSr=o("Examples:"),YSr=l(),f(n8.$$.fragment),KSr=l(),No=a("div"),f(s8.$$.fragment),ZSr=l(),Z6e=a("p"),eRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oRr=l(),Dn=a("p"),rRr=o("The model class to instantiate is selected based on the "),eTe=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),tTe=a("ul"),gE=a("li"),aTe=a("strong"),cRr=o("vision-encoder-decoder"),fRr=o(" \u2014 "),GH=a("a"),mRr=o("FlaxVisionEncoderDecoderModel"),gRr=o(" (Vision Encoder decoder model)"),hRr=l(),nTe=a("p"),pRr=o("Examples:"),_Rr=l(),f(l8.$$.fragment),this.h()},l(c){const u=S4t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var i8=s(de);Ce=n(i8,"A",{id:!0,class:!0,href:!0});var sTe=s(Ce);lo=n(sTe,"SPAN",{});var lTe=s(lo);m(me.$$.fragment,lTe),lTe.forEach(t),sTe.forEach(t),Me=i(i8),Xo=n(i8,"SPAN",{});var bRr=s(Xo);Ii=r(bRr,"Auto Classes"),bRr.forEach(t),i8.forEach(t),qf=i(c),fa=n(c,"P",{});var SBe=s(fa);qi=r(SBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(SBe,"CODE",{});var FRr=s(Ni);gC=r(FRr,"from_pretrained()"),FRr.forEach(t),Nf=r(SBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),SBe.forEach(t),xe=i(c),co=n(c,"P",{});var hE=s(co);ji=r(hE,"Instantiating one of "),Gn=n(hE,"A",{href:!0});var vRr=s(Gn);hC=r(vRr,"AutoConfig"),vRr.forEach(t),On=r(hE,", "),Vn=n(hE,"A",{href:!0});var TRr=s(Vn);pC=r(TRr,"AutoModel"),TRr.forEach(t),Di=r(hE,`, and
`),Xn=n(hE,"A",{href:!0});var MRr=s(Xn);_C=r(MRr,"AutoTokenizer"),MRr.forEach(t),Gi=r(hE," will directly create a class of the relevant architecture. For instance"),hE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var RBe=s(_e);n9=r(RBe,"will create a model that is an instance of "),Oi=n(RBe,"A",{href:!0});var ERr=s(Oi);s9=r(ERr,"BertModel"),ERr.forEach(t),l9=r(RBe,"."),RBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var BBe=s(Ga);i9=r(BBe,"There is one class of "),Df=n(BBe,"CODE",{});var CRr=s(Df);d9=r(CRr,"AutoModel"),CRr.forEach(t),O$e=r(BBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BBe.forEach(t),xSe=i(c),Vi=n(c,"H2",{class:!0});var PBe=s(Vi);Gf=n(PBe,"A",{id:!0,class:!0,href:!0});var wRr=s(Gf);$J=n(wRr,"SPAN",{});var ARr=s($J);m(uC.$$.fragment,ARr),ARr.forEach(t),wRr.forEach(t),V$e=i(PBe),IJ=n(PBe,"SPAN",{});var yRr=s(IJ);X$e=r(yRr,"Extending the Auto Classes"),yRr.forEach(t),PBe.forEach(t),kSe=i(c),zn=n(c,"P",{});var OH=s(zn);z$e=r(OH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qJ=n(OH,"CODE",{});var LRr=s(qJ);Q$e=r(LRr,"NewModel"),LRr.forEach(t),W$e=r(OH,", make sure you have a "),NJ=n(OH,"CODE",{});var xRr=s(NJ);H$e=r(xRr,"NewModelConfig"),xRr.forEach(t),U$e=r(OH,` then you can add those to the auto
classes like this:`),OH.forEach(t),SSe=i(c),m(bC.$$.fragment,c),RSe=i(c),c9=n(c,"P",{});var kRr=s(c9);J$e=r(kRr,"You will then be able to use the auto classes like you would usually do!"),kRr.forEach(t),BSe=i(c),m(Of.$$.fragment,c),PSe=i(c),Xi=n(c,"H2",{class:!0});var $Be=s(Xi);Vf=n($Be,"A",{id:!0,class:!0,href:!0});var SRr=s(Vf);jJ=n(SRr,"SPAN",{});var RRr=s(jJ);m(FC.$$.fragment,RRr),RRr.forEach(t),SRr.forEach(t),Y$e=i($Be),DJ=n($Be,"SPAN",{});var BRr=s(DJ);K$e=r(BRr,"AutoConfig"),BRr.forEach(t),$Be.forEach(t),$Se=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(vC.$$.fragment,Os),Z$e=i(Os),TC=n(Os,"P",{});var IBe=s(TC);eIe=r(IBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=n(IBe,"A",{href:!0});var PRr=s(f9);oIe=r(PRr,"from_pretrained()"),PRr.forEach(t),rIe=r(IBe," class method."),IBe.forEach(t),tIe=i(Os),MC=n(Os,"P",{});var qBe=s(MC);aIe=r(qBe,"This class cannot be instantiated directly using "),GJ=n(qBe,"CODE",{});var $Rr=s(GJ);nIe=r($Rr,"__init__()"),$Rr.forEach(t),sIe=r(qBe," (throws an error)."),qBe.forEach(t),lIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(EC.$$.fragment,ga),iIe=i(ga),OJ=n(ga,"P",{});var IRr=s(OJ);dIe=r(IRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IRr.forEach(t),cIe=i(ga),zi=n(ga,"P",{});var VH=s(zi);fIe=r(VH,"The configuration class to instantiate is selected based on the "),VJ=n(VH,"CODE",{});var qRr=s(VJ);mIe=r(qRr,"model_type"),qRr.forEach(t),gIe=r(VH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XJ=n(VH,"CODE",{});var NRr=s(XJ);hIe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),pIe=r(VH,":"),VH.forEach(t),_Ie=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var iTe=s(Xf);zJ=n(iTe,"STRONG",{});var jRr=s(zJ);uIe=r(jRr,"albert"),jRr.forEach(t),bIe=r(iTe," \u2014 "),m9=n(iTe,"A",{href:!0});var DRr=s(m9);FIe=r(DRr,"AlbertConfig"),DRr.forEach(t),vIe=r(iTe," (ALBERT model)"),iTe.forEach(t),TIe=i(v),zf=n(v,"LI",{});var dTe=s(zf);QJ=n(dTe,"STRONG",{});var GRr=s(QJ);MIe=r(GRr,"bart"),GRr.forEach(t),EIe=r(dTe," \u2014 "),g9=n(dTe,"A",{href:!0});var ORr=s(g9);CIe=r(ORr,"BartConfig"),ORr.forEach(t),wIe=r(dTe," (BART model)"),dTe.forEach(t),AIe=i(v),Qf=n(v,"LI",{});var cTe=s(Qf);WJ=n(cTe,"STRONG",{});var VRr=s(WJ);yIe=r(VRr,"beit"),VRr.forEach(t),LIe=r(cTe," \u2014 "),h9=n(cTe,"A",{href:!0});var XRr=s(h9);xIe=r(XRr,"BeitConfig"),XRr.forEach(t),kIe=r(cTe," (BEiT model)"),cTe.forEach(t),SIe=i(v),Wf=n(v,"LI",{});var fTe=s(Wf);HJ=n(fTe,"STRONG",{});var zRr=s(HJ);RIe=r(zRr,"bert"),zRr.forEach(t),BIe=r(fTe," \u2014 "),p9=n(fTe,"A",{href:!0});var QRr=s(p9);PIe=r(QRr,"BertConfig"),QRr.forEach(t),$Ie=r(fTe," (BERT model)"),fTe.forEach(t),IIe=i(v),Hf=n(v,"LI",{});var mTe=s(Hf);UJ=n(mTe,"STRONG",{});var WRr=s(UJ);qIe=r(WRr,"bert-generation"),WRr.forEach(t),NIe=r(mTe," \u2014 "),_9=n(mTe,"A",{href:!0});var HRr=s(_9);jIe=r(HRr,"BertGenerationConfig"),HRr.forEach(t),DIe=r(mTe," (Bert Generation model)"),mTe.forEach(t),GIe=i(v),Uf=n(v,"LI",{});var gTe=s(Uf);JJ=n(gTe,"STRONG",{});var URr=s(JJ);OIe=r(URr,"big_bird"),URr.forEach(t),VIe=r(gTe," \u2014 "),u9=n(gTe,"A",{href:!0});var JRr=s(u9);XIe=r(JRr,"BigBirdConfig"),JRr.forEach(t),zIe=r(gTe," (BigBird model)"),gTe.forEach(t),QIe=i(v),Jf=n(v,"LI",{});var hTe=s(Jf);YJ=n(hTe,"STRONG",{});var YRr=s(YJ);WIe=r(YRr,"bigbird_pegasus"),YRr.forEach(t),HIe=r(hTe," \u2014 "),b9=n(hTe,"A",{href:!0});var KRr=s(b9);UIe=r(KRr,"BigBirdPegasusConfig"),KRr.forEach(t),JIe=r(hTe," (BigBirdPegasus model)"),hTe.forEach(t),YIe=i(v),Yf=n(v,"LI",{});var pTe=s(Yf);KJ=n(pTe,"STRONG",{});var ZRr=s(KJ);KIe=r(ZRr,"blenderbot"),ZRr.forEach(t),ZIe=r(pTe," \u2014 "),F9=n(pTe,"A",{href:!0});var eBr=s(F9);eqe=r(eBr,"BlenderbotConfig"),eBr.forEach(t),oqe=r(pTe," (Blenderbot model)"),pTe.forEach(t),rqe=i(v),Kf=n(v,"LI",{});var _Te=s(Kf);ZJ=n(_Te,"STRONG",{});var oBr=s(ZJ);tqe=r(oBr,"blenderbot-small"),oBr.forEach(t),aqe=r(_Te," \u2014 "),v9=n(_Te,"A",{href:!0});var rBr=s(v9);nqe=r(rBr,"BlenderbotSmallConfig"),rBr.forEach(t),sqe=r(_Te," (BlenderbotSmall model)"),_Te.forEach(t),lqe=i(v),Zf=n(v,"LI",{});var uTe=s(Zf);eY=n(uTe,"STRONG",{});var tBr=s(eY);iqe=r(tBr,"camembert"),tBr.forEach(t),dqe=r(uTe," \u2014 "),T9=n(uTe,"A",{href:!0});var aBr=s(T9);cqe=r(aBr,"CamembertConfig"),aBr.forEach(t),fqe=r(uTe," (CamemBERT model)"),uTe.forEach(t),mqe=i(v),em=n(v,"LI",{});var bTe=s(em);oY=n(bTe,"STRONG",{});var nBr=s(oY);gqe=r(nBr,"canine"),nBr.forEach(t),hqe=r(bTe," \u2014 "),M9=n(bTe,"A",{href:!0});var sBr=s(M9);pqe=r(sBr,"CanineConfig"),sBr.forEach(t),_qe=r(bTe," (Canine model)"),bTe.forEach(t),uqe=i(v),om=n(v,"LI",{});var FTe=s(om);rY=n(FTe,"STRONG",{});var lBr=s(rY);bqe=r(lBr,"clip"),lBr.forEach(t),Fqe=r(FTe," \u2014 "),E9=n(FTe,"A",{href:!0});var iBr=s(E9);vqe=r(iBr,"CLIPConfig"),iBr.forEach(t),Tqe=r(FTe," (CLIP model)"),FTe.forEach(t),Mqe=i(v),rm=n(v,"LI",{});var vTe=s(rm);tY=n(vTe,"STRONG",{});var dBr=s(tY);Eqe=r(dBr,"convbert"),dBr.forEach(t),Cqe=r(vTe," \u2014 "),C9=n(vTe,"A",{href:!0});var cBr=s(C9);wqe=r(cBr,"ConvBertConfig"),cBr.forEach(t),Aqe=r(vTe," (ConvBERT model)"),vTe.forEach(t),yqe=i(v),tm=n(v,"LI",{});var TTe=s(tm);aY=n(TTe,"STRONG",{});var fBr=s(aY);Lqe=r(fBr,"convnext"),fBr.forEach(t),xqe=r(TTe," \u2014 "),w9=n(TTe,"A",{href:!0});var mBr=s(w9);kqe=r(mBr,"ConvNextConfig"),mBr.forEach(t),Sqe=r(TTe," (ConvNext model)"),TTe.forEach(t),Rqe=i(v),am=n(v,"LI",{});var MTe=s(am);nY=n(MTe,"STRONG",{});var gBr=s(nY);Bqe=r(gBr,"ctrl"),gBr.forEach(t),Pqe=r(MTe," \u2014 "),A9=n(MTe,"A",{href:!0});var hBr=s(A9);$qe=r(hBr,"CTRLConfig"),hBr.forEach(t),Iqe=r(MTe," (CTRL model)"),MTe.forEach(t),qqe=i(v),nm=n(v,"LI",{});var ETe=s(nm);sY=n(ETe,"STRONG",{});var pBr=s(sY);Nqe=r(pBr,"data2vec-audio"),pBr.forEach(t),jqe=r(ETe," \u2014 "),y9=n(ETe,"A",{href:!0});var _Br=s(y9);Dqe=r(_Br,"Data2VecAudioConfig"),_Br.forEach(t),Gqe=r(ETe," (Data2VecAudio model)"),ETe.forEach(t),Oqe=i(v),sm=n(v,"LI",{});var CTe=s(sm);lY=n(CTe,"STRONG",{});var uBr=s(lY);Vqe=r(uBr,"data2vec-text"),uBr.forEach(t),Xqe=r(CTe," \u2014 "),L9=n(CTe,"A",{href:!0});var bBr=s(L9);zqe=r(bBr,"Data2VecTextConfig"),bBr.forEach(t),Qqe=r(CTe," (Data2VecText model)"),CTe.forEach(t),Wqe=i(v),lm=n(v,"LI",{});var wTe=s(lm);iY=n(wTe,"STRONG",{});var FBr=s(iY);Hqe=r(FBr,"deberta"),FBr.forEach(t),Uqe=r(wTe," \u2014 "),x9=n(wTe,"A",{href:!0});var vBr=s(x9);Jqe=r(vBr,"DebertaConfig"),vBr.forEach(t),Yqe=r(wTe," (DeBERTa model)"),wTe.forEach(t),Kqe=i(v),im=n(v,"LI",{});var ATe=s(im);dY=n(ATe,"STRONG",{});var TBr=s(dY);Zqe=r(TBr,"deberta-v2"),TBr.forEach(t),eNe=r(ATe," \u2014 "),k9=n(ATe,"A",{href:!0});var MBr=s(k9);oNe=r(MBr,"DebertaV2Config"),MBr.forEach(t),rNe=r(ATe," (DeBERTa-v2 model)"),ATe.forEach(t),tNe=i(v),dm=n(v,"LI",{});var yTe=s(dm);cY=n(yTe,"STRONG",{});var EBr=s(cY);aNe=r(EBr,"decision_transformer"),EBr.forEach(t),nNe=r(yTe," \u2014 "),S9=n(yTe,"A",{href:!0});var CBr=s(S9);sNe=r(CBr,"DecisionTransformerConfig"),CBr.forEach(t),lNe=r(yTe," (Decision Transformer model)"),yTe.forEach(t),iNe=i(v),cm=n(v,"LI",{});var LTe=s(cm);fY=n(LTe,"STRONG",{});var wBr=s(fY);dNe=r(wBr,"deit"),wBr.forEach(t),cNe=r(LTe," \u2014 "),R9=n(LTe,"A",{href:!0});var ABr=s(R9);fNe=r(ABr,"DeiTConfig"),ABr.forEach(t),mNe=r(LTe," (DeiT model)"),LTe.forEach(t),gNe=i(v),fm=n(v,"LI",{});var xTe=s(fm);mY=n(xTe,"STRONG",{});var yBr=s(mY);hNe=r(yBr,"detr"),yBr.forEach(t),pNe=r(xTe," \u2014 "),B9=n(xTe,"A",{href:!0});var LBr=s(B9);_Ne=r(LBr,"DetrConfig"),LBr.forEach(t),uNe=r(xTe," (DETR model)"),xTe.forEach(t),bNe=i(v),mm=n(v,"LI",{});var kTe=s(mm);gY=n(kTe,"STRONG",{});var xBr=s(gY);FNe=r(xBr,"distilbert"),xBr.forEach(t),vNe=r(kTe," \u2014 "),P9=n(kTe,"A",{href:!0});var kBr=s(P9);TNe=r(kBr,"DistilBertConfig"),kBr.forEach(t),MNe=r(kTe," (DistilBERT model)"),kTe.forEach(t),ENe=i(v),gm=n(v,"LI",{});var STe=s(gm);hY=n(STe,"STRONG",{});var SBr=s(hY);CNe=r(SBr,"dpr"),SBr.forEach(t),wNe=r(STe," \u2014 "),$9=n(STe,"A",{href:!0});var RBr=s($9);ANe=r(RBr,"DPRConfig"),RBr.forEach(t),yNe=r(STe," (DPR model)"),STe.forEach(t),LNe=i(v),hm=n(v,"LI",{});var RTe=s(hm);pY=n(RTe,"STRONG",{});var BBr=s(pY);xNe=r(BBr,"dpt"),BBr.forEach(t),kNe=r(RTe," \u2014 "),I9=n(RTe,"A",{href:!0});var PBr=s(I9);SNe=r(PBr,"DPTConfig"),PBr.forEach(t),RNe=r(RTe," (DPT model)"),RTe.forEach(t),BNe=i(v),pm=n(v,"LI",{});var BTe=s(pm);_Y=n(BTe,"STRONG",{});var $Br=s(_Y);PNe=r($Br,"electra"),$Br.forEach(t),$Ne=r(BTe," \u2014 "),q9=n(BTe,"A",{href:!0});var IBr=s(q9);INe=r(IBr,"ElectraConfig"),IBr.forEach(t),qNe=r(BTe," (ELECTRA model)"),BTe.forEach(t),NNe=i(v),_m=n(v,"LI",{});var PTe=s(_m);uY=n(PTe,"STRONG",{});var qBr=s(uY);jNe=r(qBr,"encoder-decoder"),qBr.forEach(t),DNe=r(PTe," \u2014 "),N9=n(PTe,"A",{href:!0});var NBr=s(N9);GNe=r(NBr,"EncoderDecoderConfig"),NBr.forEach(t),ONe=r(PTe," (Encoder decoder model)"),PTe.forEach(t),VNe=i(v),um=n(v,"LI",{});var $Te=s(um);bY=n($Te,"STRONG",{});var jBr=s(bY);XNe=r(jBr,"flaubert"),jBr.forEach(t),zNe=r($Te," \u2014 "),j9=n($Te,"A",{href:!0});var DBr=s(j9);QNe=r(DBr,"FlaubertConfig"),DBr.forEach(t),WNe=r($Te," (FlauBERT model)"),$Te.forEach(t),HNe=i(v),bm=n(v,"LI",{});var ITe=s(bm);FY=n(ITe,"STRONG",{});var GBr=s(FY);UNe=r(GBr,"fnet"),GBr.forEach(t),JNe=r(ITe," \u2014 "),D9=n(ITe,"A",{href:!0});var OBr=s(D9);YNe=r(OBr,"FNetConfig"),OBr.forEach(t),KNe=r(ITe," (FNet model)"),ITe.forEach(t),ZNe=i(v),Fm=n(v,"LI",{});var qTe=s(Fm);vY=n(qTe,"STRONG",{});var VBr=s(vY);eje=r(VBr,"fsmt"),VBr.forEach(t),oje=r(qTe," \u2014 "),G9=n(qTe,"A",{href:!0});var XBr=s(G9);rje=r(XBr,"FSMTConfig"),XBr.forEach(t),tje=r(qTe," (FairSeq Machine-Translation model)"),qTe.forEach(t),aje=i(v),vm=n(v,"LI",{});var NTe=s(vm);TY=n(NTe,"STRONG",{});var zBr=s(TY);nje=r(zBr,"funnel"),zBr.forEach(t),sje=r(NTe," \u2014 "),O9=n(NTe,"A",{href:!0});var QBr=s(O9);lje=r(QBr,"FunnelConfig"),QBr.forEach(t),ije=r(NTe," (Funnel Transformer model)"),NTe.forEach(t),dje=i(v),Tm=n(v,"LI",{});var jTe=s(Tm);MY=n(jTe,"STRONG",{});var WBr=s(MY);cje=r(WBr,"glpn"),WBr.forEach(t),fje=r(jTe," \u2014 "),V9=n(jTe,"A",{href:!0});var HBr=s(V9);mje=r(HBr,"GLPNConfig"),HBr.forEach(t),gje=r(jTe," (GLPN model)"),jTe.forEach(t),hje=i(v),Mm=n(v,"LI",{});var DTe=s(Mm);EY=n(DTe,"STRONG",{});var UBr=s(EY);pje=r(UBr,"gpt2"),UBr.forEach(t),_je=r(DTe," \u2014 "),X9=n(DTe,"A",{href:!0});var JBr=s(X9);uje=r(JBr,"GPT2Config"),JBr.forEach(t),bje=r(DTe," (OpenAI GPT-2 model)"),DTe.forEach(t),Fje=i(v),Em=n(v,"LI",{});var GTe=s(Em);CY=n(GTe,"STRONG",{});var YBr=s(CY);vje=r(YBr,"gpt_neo"),YBr.forEach(t),Tje=r(GTe," \u2014 "),z9=n(GTe,"A",{href:!0});var KBr=s(z9);Mje=r(KBr,"GPTNeoConfig"),KBr.forEach(t),Eje=r(GTe," (GPT Neo model)"),GTe.forEach(t),Cje=i(v),Cm=n(v,"LI",{});var OTe=s(Cm);wY=n(OTe,"STRONG",{});var ZBr=s(wY);wje=r(ZBr,"gptj"),ZBr.forEach(t),Aje=r(OTe," \u2014 "),Q9=n(OTe,"A",{href:!0});var ePr=s(Q9);yje=r(ePr,"GPTJConfig"),ePr.forEach(t),Lje=r(OTe," (GPT-J model)"),OTe.forEach(t),xje=i(v),wm=n(v,"LI",{});var VTe=s(wm);AY=n(VTe,"STRONG",{});var oPr=s(AY);kje=r(oPr,"hubert"),oPr.forEach(t),Sje=r(VTe," \u2014 "),W9=n(VTe,"A",{href:!0});var rPr=s(W9);Rje=r(rPr,"HubertConfig"),rPr.forEach(t),Bje=r(VTe," (Hubert model)"),VTe.forEach(t),Pje=i(v),Am=n(v,"LI",{});var XTe=s(Am);yY=n(XTe,"STRONG",{});var tPr=s(yY);$je=r(tPr,"ibert"),tPr.forEach(t),Ije=r(XTe," \u2014 "),H9=n(XTe,"A",{href:!0});var aPr=s(H9);qje=r(aPr,"IBertConfig"),aPr.forEach(t),Nje=r(XTe," (I-BERT model)"),XTe.forEach(t),jje=i(v),ym=n(v,"LI",{});var zTe=s(ym);LY=n(zTe,"STRONG",{});var nPr=s(LY);Dje=r(nPr,"imagegpt"),nPr.forEach(t),Gje=r(zTe," \u2014 "),U9=n(zTe,"A",{href:!0});var sPr=s(U9);Oje=r(sPr,"ImageGPTConfig"),sPr.forEach(t),Vje=r(zTe," (ImageGPT model)"),zTe.forEach(t),Xje=i(v),Lm=n(v,"LI",{});var QTe=s(Lm);xY=n(QTe,"STRONG",{});var lPr=s(xY);zje=r(lPr,"layoutlm"),lPr.forEach(t),Qje=r(QTe," \u2014 "),J9=n(QTe,"A",{href:!0});var iPr=s(J9);Wje=r(iPr,"LayoutLMConfig"),iPr.forEach(t),Hje=r(QTe," (LayoutLM model)"),QTe.forEach(t),Uje=i(v),xm=n(v,"LI",{});var WTe=s(xm);kY=n(WTe,"STRONG",{});var dPr=s(kY);Jje=r(dPr,"layoutlmv2"),dPr.forEach(t),Yje=r(WTe," \u2014 "),Y9=n(WTe,"A",{href:!0});var cPr=s(Y9);Kje=r(cPr,"LayoutLMv2Config"),cPr.forEach(t),Zje=r(WTe," (LayoutLMv2 model)"),WTe.forEach(t),eDe=i(v),km=n(v,"LI",{});var HTe=s(km);SY=n(HTe,"STRONG",{});var fPr=s(SY);oDe=r(fPr,"led"),fPr.forEach(t),rDe=r(HTe," \u2014 "),K9=n(HTe,"A",{href:!0});var mPr=s(K9);tDe=r(mPr,"LEDConfig"),mPr.forEach(t),aDe=r(HTe," (LED model)"),HTe.forEach(t),nDe=i(v),Sm=n(v,"LI",{});var UTe=s(Sm);RY=n(UTe,"STRONG",{});var gPr=s(RY);sDe=r(gPr,"longformer"),gPr.forEach(t),lDe=r(UTe," \u2014 "),Z9=n(UTe,"A",{href:!0});var hPr=s(Z9);iDe=r(hPr,"LongformerConfig"),hPr.forEach(t),dDe=r(UTe," (Longformer model)"),UTe.forEach(t),cDe=i(v),Rm=n(v,"LI",{});var JTe=s(Rm);BY=n(JTe,"STRONG",{});var pPr=s(BY);fDe=r(pPr,"luke"),pPr.forEach(t),mDe=r(JTe," \u2014 "),ex=n(JTe,"A",{href:!0});var _Pr=s(ex);gDe=r(_Pr,"LukeConfig"),_Pr.forEach(t),hDe=r(JTe," (LUKE model)"),JTe.forEach(t),pDe=i(v),Bm=n(v,"LI",{});var YTe=s(Bm);PY=n(YTe,"STRONG",{});var uPr=s(PY);_De=r(uPr,"lxmert"),uPr.forEach(t),uDe=r(YTe," \u2014 "),ox=n(YTe,"A",{href:!0});var bPr=s(ox);bDe=r(bPr,"LxmertConfig"),bPr.forEach(t),FDe=r(YTe," (LXMERT model)"),YTe.forEach(t),vDe=i(v),Pm=n(v,"LI",{});var KTe=s(Pm);$Y=n(KTe,"STRONG",{});var FPr=s($Y);TDe=r(FPr,"m2m_100"),FPr.forEach(t),MDe=r(KTe," \u2014 "),rx=n(KTe,"A",{href:!0});var vPr=s(rx);EDe=r(vPr,"M2M100Config"),vPr.forEach(t),CDe=r(KTe," (M2M100 model)"),KTe.forEach(t),wDe=i(v),$m=n(v,"LI",{});var ZTe=s($m);IY=n(ZTe,"STRONG",{});var TPr=s(IY);ADe=r(TPr,"marian"),TPr.forEach(t),yDe=r(ZTe," \u2014 "),tx=n(ZTe,"A",{href:!0});var MPr=s(tx);LDe=r(MPr,"MarianConfig"),MPr.forEach(t),xDe=r(ZTe," (Marian model)"),ZTe.forEach(t),kDe=i(v),Im=n(v,"LI",{});var e7e=s(Im);qY=n(e7e,"STRONG",{});var EPr=s(qY);SDe=r(EPr,"maskformer"),EPr.forEach(t),RDe=r(e7e," \u2014 "),ax=n(e7e,"A",{href:!0});var CPr=s(ax);BDe=r(CPr,"MaskFormerConfig"),CPr.forEach(t),PDe=r(e7e," (MaskFormer model)"),e7e.forEach(t),$De=i(v),qm=n(v,"LI",{});var o7e=s(qm);NY=n(o7e,"STRONG",{});var wPr=s(NY);IDe=r(wPr,"mbart"),wPr.forEach(t),qDe=r(o7e," \u2014 "),nx=n(o7e,"A",{href:!0});var APr=s(nx);NDe=r(APr,"MBartConfig"),APr.forEach(t),jDe=r(o7e," (mBART model)"),o7e.forEach(t),DDe=i(v),Nm=n(v,"LI",{});var r7e=s(Nm);jY=n(r7e,"STRONG",{});var yPr=s(jY);GDe=r(yPr,"megatron-bert"),yPr.forEach(t),ODe=r(r7e," \u2014 "),sx=n(r7e,"A",{href:!0});var LPr=s(sx);VDe=r(LPr,"MegatronBertConfig"),LPr.forEach(t),XDe=r(r7e," (MegatronBert model)"),r7e.forEach(t),zDe=i(v),jm=n(v,"LI",{});var t7e=s(jm);DY=n(t7e,"STRONG",{});var xPr=s(DY);QDe=r(xPr,"mobilebert"),xPr.forEach(t),WDe=r(t7e," \u2014 "),lx=n(t7e,"A",{href:!0});var kPr=s(lx);HDe=r(kPr,"MobileBertConfig"),kPr.forEach(t),UDe=r(t7e," (MobileBERT model)"),t7e.forEach(t),JDe=i(v),Dm=n(v,"LI",{});var a7e=s(Dm);GY=n(a7e,"STRONG",{});var SPr=s(GY);YDe=r(SPr,"mpnet"),SPr.forEach(t),KDe=r(a7e," \u2014 "),ix=n(a7e,"A",{href:!0});var RPr=s(ix);ZDe=r(RPr,"MPNetConfig"),RPr.forEach(t),eGe=r(a7e," (MPNet model)"),a7e.forEach(t),oGe=i(v),Gm=n(v,"LI",{});var n7e=s(Gm);OY=n(n7e,"STRONG",{});var BPr=s(OY);rGe=r(BPr,"mt5"),BPr.forEach(t),tGe=r(n7e," \u2014 "),dx=n(n7e,"A",{href:!0});var PPr=s(dx);aGe=r(PPr,"MT5Config"),PPr.forEach(t),nGe=r(n7e," (mT5 model)"),n7e.forEach(t),sGe=i(v),Om=n(v,"LI",{});var s7e=s(Om);VY=n(s7e,"STRONG",{});var $Pr=s(VY);lGe=r($Pr,"nystromformer"),$Pr.forEach(t),iGe=r(s7e," \u2014 "),cx=n(s7e,"A",{href:!0});var IPr=s(cx);dGe=r(IPr,"NystromformerConfig"),IPr.forEach(t),cGe=r(s7e," (Nystromformer model)"),s7e.forEach(t),fGe=i(v),Vm=n(v,"LI",{});var l7e=s(Vm);XY=n(l7e,"STRONG",{});var qPr=s(XY);mGe=r(qPr,"openai-gpt"),qPr.forEach(t),gGe=r(l7e," \u2014 "),fx=n(l7e,"A",{href:!0});var NPr=s(fx);hGe=r(NPr,"OpenAIGPTConfig"),NPr.forEach(t),pGe=r(l7e," (OpenAI GPT model)"),l7e.forEach(t),_Ge=i(v),Xm=n(v,"LI",{});var i7e=s(Xm);zY=n(i7e,"STRONG",{});var jPr=s(zY);uGe=r(jPr,"pegasus"),jPr.forEach(t),bGe=r(i7e," \u2014 "),mx=n(i7e,"A",{href:!0});var DPr=s(mx);FGe=r(DPr,"PegasusConfig"),DPr.forEach(t),vGe=r(i7e," (Pegasus model)"),i7e.forEach(t),TGe=i(v),zm=n(v,"LI",{});var d7e=s(zm);QY=n(d7e,"STRONG",{});var GPr=s(QY);MGe=r(GPr,"perceiver"),GPr.forEach(t),EGe=r(d7e," \u2014 "),gx=n(d7e,"A",{href:!0});var OPr=s(gx);CGe=r(OPr,"PerceiverConfig"),OPr.forEach(t),wGe=r(d7e," (Perceiver model)"),d7e.forEach(t),AGe=i(v),Qm=n(v,"LI",{});var c7e=s(Qm);WY=n(c7e,"STRONG",{});var VPr=s(WY);yGe=r(VPr,"plbart"),VPr.forEach(t),LGe=r(c7e," \u2014 "),hx=n(c7e,"A",{href:!0});var XPr=s(hx);xGe=r(XPr,"PLBartConfig"),XPr.forEach(t),kGe=r(c7e," (PLBart model)"),c7e.forEach(t),SGe=i(v),Wm=n(v,"LI",{});var f7e=s(Wm);HY=n(f7e,"STRONG",{});var zPr=s(HY);RGe=r(zPr,"poolformer"),zPr.forEach(t),BGe=r(f7e," \u2014 "),px=n(f7e,"A",{href:!0});var QPr=s(px);PGe=r(QPr,"PoolFormerConfig"),QPr.forEach(t),$Ge=r(f7e," (PoolFormer model)"),f7e.forEach(t),IGe=i(v),Hm=n(v,"LI",{});var m7e=s(Hm);UY=n(m7e,"STRONG",{});var WPr=s(UY);qGe=r(WPr,"prophetnet"),WPr.forEach(t),NGe=r(m7e," \u2014 "),_x=n(m7e,"A",{href:!0});var HPr=s(_x);jGe=r(HPr,"ProphetNetConfig"),HPr.forEach(t),DGe=r(m7e," (ProphetNet model)"),m7e.forEach(t),GGe=i(v),Um=n(v,"LI",{});var g7e=s(Um);JY=n(g7e,"STRONG",{});var UPr=s(JY);OGe=r(UPr,"qdqbert"),UPr.forEach(t),VGe=r(g7e," \u2014 "),ux=n(g7e,"A",{href:!0});var JPr=s(ux);XGe=r(JPr,"QDQBertConfig"),JPr.forEach(t),zGe=r(g7e," (QDQBert model)"),g7e.forEach(t),QGe=i(v),Jm=n(v,"LI",{});var h7e=s(Jm);YY=n(h7e,"STRONG",{});var YPr=s(YY);WGe=r(YPr,"rag"),YPr.forEach(t),HGe=r(h7e," \u2014 "),bx=n(h7e,"A",{href:!0});var KPr=s(bx);UGe=r(KPr,"RagConfig"),KPr.forEach(t),JGe=r(h7e," (RAG model)"),h7e.forEach(t),YGe=i(v),Ym=n(v,"LI",{});var p7e=s(Ym);KY=n(p7e,"STRONG",{});var ZPr=s(KY);KGe=r(ZPr,"realm"),ZPr.forEach(t),ZGe=r(p7e," \u2014 "),Fx=n(p7e,"A",{href:!0});var e$r=s(Fx);eOe=r(e$r,"RealmConfig"),e$r.forEach(t),oOe=r(p7e," (Realm model)"),p7e.forEach(t),rOe=i(v),Km=n(v,"LI",{});var _7e=s(Km);ZY=n(_7e,"STRONG",{});var o$r=s(ZY);tOe=r(o$r,"reformer"),o$r.forEach(t),aOe=r(_7e," \u2014 "),vx=n(_7e,"A",{href:!0});var r$r=s(vx);nOe=r(r$r,"ReformerConfig"),r$r.forEach(t),sOe=r(_7e," (Reformer model)"),_7e.forEach(t),lOe=i(v),Zm=n(v,"LI",{});var u7e=s(Zm);eK=n(u7e,"STRONG",{});var t$r=s(eK);iOe=r(t$r,"rembert"),t$r.forEach(t),dOe=r(u7e," \u2014 "),Tx=n(u7e,"A",{href:!0});var a$r=s(Tx);cOe=r(a$r,"RemBertConfig"),a$r.forEach(t),fOe=r(u7e," (RemBERT model)"),u7e.forEach(t),mOe=i(v),eg=n(v,"LI",{});var b7e=s(eg);oK=n(b7e,"STRONG",{});var n$r=s(oK);gOe=r(n$r,"resnet"),n$r.forEach(t),hOe=r(b7e," \u2014 "),Mx=n(b7e,"A",{href:!0});var s$r=s(Mx);pOe=r(s$r,"ResNetConfig"),s$r.forEach(t),_Oe=r(b7e," (ResNet model)"),b7e.forEach(t),uOe=i(v),og=n(v,"LI",{});var F7e=s(og);rK=n(F7e,"STRONG",{});var l$r=s(rK);bOe=r(l$r,"retribert"),l$r.forEach(t),FOe=r(F7e," \u2014 "),Ex=n(F7e,"A",{href:!0});var i$r=s(Ex);vOe=r(i$r,"RetriBertConfig"),i$r.forEach(t),TOe=r(F7e," (RetriBERT model)"),F7e.forEach(t),MOe=i(v),rg=n(v,"LI",{});var v7e=s(rg);tK=n(v7e,"STRONG",{});var d$r=s(tK);EOe=r(d$r,"roberta"),d$r.forEach(t),COe=r(v7e," \u2014 "),Cx=n(v7e,"A",{href:!0});var c$r=s(Cx);wOe=r(c$r,"RobertaConfig"),c$r.forEach(t),AOe=r(v7e," (RoBERTa model)"),v7e.forEach(t),yOe=i(v),tg=n(v,"LI",{});var T7e=s(tg);aK=n(T7e,"STRONG",{});var f$r=s(aK);LOe=r(f$r,"roformer"),f$r.forEach(t),xOe=r(T7e," \u2014 "),wx=n(T7e,"A",{href:!0});var m$r=s(wx);kOe=r(m$r,"RoFormerConfig"),m$r.forEach(t),SOe=r(T7e," (RoFormer model)"),T7e.forEach(t),ROe=i(v),ag=n(v,"LI",{});var M7e=s(ag);nK=n(M7e,"STRONG",{});var g$r=s(nK);BOe=r(g$r,"segformer"),g$r.forEach(t),POe=r(M7e," \u2014 "),Ax=n(M7e,"A",{href:!0});var h$r=s(Ax);$Oe=r(h$r,"SegformerConfig"),h$r.forEach(t),IOe=r(M7e," (SegFormer model)"),M7e.forEach(t),qOe=i(v),ng=n(v,"LI",{});var E7e=s(ng);sK=n(E7e,"STRONG",{});var p$r=s(sK);NOe=r(p$r,"sew"),p$r.forEach(t),jOe=r(E7e," \u2014 "),yx=n(E7e,"A",{href:!0});var _$r=s(yx);DOe=r(_$r,"SEWConfig"),_$r.forEach(t),GOe=r(E7e," (SEW model)"),E7e.forEach(t),OOe=i(v),sg=n(v,"LI",{});var C7e=s(sg);lK=n(C7e,"STRONG",{});var u$r=s(lK);VOe=r(u$r,"sew-d"),u$r.forEach(t),XOe=r(C7e," \u2014 "),Lx=n(C7e,"A",{href:!0});var b$r=s(Lx);zOe=r(b$r,"SEWDConfig"),b$r.forEach(t),QOe=r(C7e," (SEW-D model)"),C7e.forEach(t),WOe=i(v),lg=n(v,"LI",{});var w7e=s(lg);iK=n(w7e,"STRONG",{});var F$r=s(iK);HOe=r(F$r,"speech-encoder-decoder"),F$r.forEach(t),UOe=r(w7e," \u2014 "),xx=n(w7e,"A",{href:!0});var v$r=s(xx);JOe=r(v$r,"SpeechEncoderDecoderConfig"),v$r.forEach(t),YOe=r(w7e," (Speech Encoder decoder model)"),w7e.forEach(t),KOe=i(v),ig=n(v,"LI",{});var A7e=s(ig);dK=n(A7e,"STRONG",{});var T$r=s(dK);ZOe=r(T$r,"speech_to_text"),T$r.forEach(t),eVe=r(A7e," \u2014 "),kx=n(A7e,"A",{href:!0});var M$r=s(kx);oVe=r(M$r,"Speech2TextConfig"),M$r.forEach(t),rVe=r(A7e," (Speech2Text model)"),A7e.forEach(t),tVe=i(v),dg=n(v,"LI",{});var y7e=s(dg);cK=n(y7e,"STRONG",{});var E$r=s(cK);aVe=r(E$r,"speech_to_text_2"),E$r.forEach(t),nVe=r(y7e," \u2014 "),Sx=n(y7e,"A",{href:!0});var C$r=s(Sx);sVe=r(C$r,"Speech2Text2Config"),C$r.forEach(t),lVe=r(y7e," (Speech2Text2 model)"),y7e.forEach(t),iVe=i(v),cg=n(v,"LI",{});var L7e=s(cg);fK=n(L7e,"STRONG",{});var w$r=s(fK);dVe=r(w$r,"splinter"),w$r.forEach(t),cVe=r(L7e," \u2014 "),Rx=n(L7e,"A",{href:!0});var A$r=s(Rx);fVe=r(A$r,"SplinterConfig"),A$r.forEach(t),mVe=r(L7e," (Splinter model)"),L7e.forEach(t),gVe=i(v),fg=n(v,"LI",{});var x7e=s(fg);mK=n(x7e,"STRONG",{});var y$r=s(mK);hVe=r(y$r,"squeezebert"),y$r.forEach(t),pVe=r(x7e," \u2014 "),Bx=n(x7e,"A",{href:!0});var L$r=s(Bx);_Ve=r(L$r,"SqueezeBertConfig"),L$r.forEach(t),uVe=r(x7e," (SqueezeBERT model)"),x7e.forEach(t),bVe=i(v),mg=n(v,"LI",{});var k7e=s(mg);gK=n(k7e,"STRONG",{});var x$r=s(gK);FVe=r(x$r,"swin"),x$r.forEach(t),vVe=r(k7e," \u2014 "),Px=n(k7e,"A",{href:!0});var k$r=s(Px);TVe=r(k$r,"SwinConfig"),k$r.forEach(t),MVe=r(k7e," (Swin model)"),k7e.forEach(t),EVe=i(v),gg=n(v,"LI",{});var S7e=s(gg);hK=n(S7e,"STRONG",{});var S$r=s(hK);CVe=r(S$r,"t5"),S$r.forEach(t),wVe=r(S7e," \u2014 "),$x=n(S7e,"A",{href:!0});var R$r=s($x);AVe=r(R$r,"T5Config"),R$r.forEach(t),yVe=r(S7e," (T5 model)"),S7e.forEach(t),LVe=i(v),hg=n(v,"LI",{});var R7e=s(hg);pK=n(R7e,"STRONG",{});var B$r=s(pK);xVe=r(B$r,"tapas"),B$r.forEach(t),kVe=r(R7e," \u2014 "),Ix=n(R7e,"A",{href:!0});var P$r=s(Ix);SVe=r(P$r,"TapasConfig"),P$r.forEach(t),RVe=r(R7e," (TAPAS model)"),R7e.forEach(t),BVe=i(v),pg=n(v,"LI",{});var B7e=s(pg);_K=n(B7e,"STRONG",{});var $$r=s(_K);PVe=r($$r,"transfo-xl"),$$r.forEach(t),$Ve=r(B7e," \u2014 "),qx=n(B7e,"A",{href:!0});var I$r=s(qx);IVe=r(I$r,"TransfoXLConfig"),I$r.forEach(t),qVe=r(B7e," (Transformer-XL model)"),B7e.forEach(t),NVe=i(v),_g=n(v,"LI",{});var P7e=s(_g);uK=n(P7e,"STRONG",{});var q$r=s(uK);jVe=r(q$r,"trocr"),q$r.forEach(t),DVe=r(P7e," \u2014 "),Nx=n(P7e,"A",{href:!0});var N$r=s(Nx);GVe=r(N$r,"TrOCRConfig"),N$r.forEach(t),OVe=r(P7e," (TrOCR model)"),P7e.forEach(t),VVe=i(v),ug=n(v,"LI",{});var $7e=s(ug);bK=n($7e,"STRONG",{});var j$r=s(bK);XVe=r(j$r,"unispeech"),j$r.forEach(t),zVe=r($7e," \u2014 "),jx=n($7e,"A",{href:!0});var D$r=s(jx);QVe=r(D$r,"UniSpeechConfig"),D$r.forEach(t),WVe=r($7e," (UniSpeech model)"),$7e.forEach(t),HVe=i(v),bg=n(v,"LI",{});var I7e=s(bg);FK=n(I7e,"STRONG",{});var G$r=s(FK);UVe=r(G$r,"unispeech-sat"),G$r.forEach(t),JVe=r(I7e," \u2014 "),Dx=n(I7e,"A",{href:!0});var O$r=s(Dx);YVe=r(O$r,"UniSpeechSatConfig"),O$r.forEach(t),KVe=r(I7e," (UniSpeechSat model)"),I7e.forEach(t),ZVe=i(v),Fg=n(v,"LI",{});var q7e=s(Fg);vK=n(q7e,"STRONG",{});var V$r=s(vK);eXe=r(V$r,"van"),V$r.forEach(t),oXe=r(q7e," \u2014 "),Gx=n(q7e,"A",{href:!0});var X$r=s(Gx);rXe=r(X$r,"VanConfig"),X$r.forEach(t),tXe=r(q7e," (VAN model)"),q7e.forEach(t),aXe=i(v),vg=n(v,"LI",{});var N7e=s(vg);TK=n(N7e,"STRONG",{});var z$r=s(TK);nXe=r(z$r,"vilt"),z$r.forEach(t),sXe=r(N7e," \u2014 "),Ox=n(N7e,"A",{href:!0});var Q$r=s(Ox);lXe=r(Q$r,"ViltConfig"),Q$r.forEach(t),iXe=r(N7e," (ViLT model)"),N7e.forEach(t),dXe=i(v),Tg=n(v,"LI",{});var j7e=s(Tg);MK=n(j7e,"STRONG",{});var W$r=s(MK);cXe=r(W$r,"vision-encoder-decoder"),W$r.forEach(t),fXe=r(j7e," \u2014 "),Vx=n(j7e,"A",{href:!0});var H$r=s(Vx);mXe=r(H$r,"VisionEncoderDecoderConfig"),H$r.forEach(t),gXe=r(j7e," (Vision Encoder decoder model)"),j7e.forEach(t),hXe=i(v),Mg=n(v,"LI",{});var D7e=s(Mg);EK=n(D7e,"STRONG",{});var U$r=s(EK);pXe=r(U$r,"vision-text-dual-encoder"),U$r.forEach(t),_Xe=r(D7e," \u2014 "),Xx=n(D7e,"A",{href:!0});var J$r=s(Xx);uXe=r(J$r,"VisionTextDualEncoderConfig"),J$r.forEach(t),bXe=r(D7e," (VisionTextDualEncoder model)"),D7e.forEach(t),FXe=i(v),Eg=n(v,"LI",{});var G7e=s(Eg);CK=n(G7e,"STRONG",{});var Y$r=s(CK);vXe=r(Y$r,"visual_bert"),Y$r.forEach(t),TXe=r(G7e," \u2014 "),zx=n(G7e,"A",{href:!0});var K$r=s(zx);MXe=r(K$r,"VisualBertConfig"),K$r.forEach(t),EXe=r(G7e," (VisualBert model)"),G7e.forEach(t),CXe=i(v),Cg=n(v,"LI",{});var O7e=s(Cg);wK=n(O7e,"STRONG",{});var Z$r=s(wK);wXe=r(Z$r,"vit"),Z$r.forEach(t),AXe=r(O7e," \u2014 "),Qx=n(O7e,"A",{href:!0});var eIr=s(Qx);yXe=r(eIr,"ViTConfig"),eIr.forEach(t),LXe=r(O7e," (ViT model)"),O7e.forEach(t),xXe=i(v),wg=n(v,"LI",{});var V7e=s(wg);AK=n(V7e,"STRONG",{});var oIr=s(AK);kXe=r(oIr,"vit_mae"),oIr.forEach(t),SXe=r(V7e," \u2014 "),Wx=n(V7e,"A",{href:!0});var rIr=s(Wx);RXe=r(rIr,"ViTMAEConfig"),rIr.forEach(t),BXe=r(V7e," (ViTMAE model)"),V7e.forEach(t),PXe=i(v),Ag=n(v,"LI",{});var X7e=s(Ag);yK=n(X7e,"STRONG",{});var tIr=s(yK);$Xe=r(tIr,"wav2vec2"),tIr.forEach(t),IXe=r(X7e," \u2014 "),Hx=n(X7e,"A",{href:!0});var aIr=s(Hx);qXe=r(aIr,"Wav2Vec2Config"),aIr.forEach(t),NXe=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),jXe=i(v),yg=n(v,"LI",{});var z7e=s(yg);LK=n(z7e,"STRONG",{});var nIr=s(LK);DXe=r(nIr,"wavlm"),nIr.forEach(t),GXe=r(z7e," \u2014 "),Ux=n(z7e,"A",{href:!0});var sIr=s(Ux);OXe=r(sIr,"WavLMConfig"),sIr.forEach(t),VXe=r(z7e," (WavLM model)"),z7e.forEach(t),XXe=i(v),Lg=n(v,"LI",{});var Q7e=s(Lg);xK=n(Q7e,"STRONG",{});var lIr=s(xK);zXe=r(lIr,"xglm"),lIr.forEach(t),QXe=r(Q7e," \u2014 "),Jx=n(Q7e,"A",{href:!0});var iIr=s(Jx);WXe=r(iIr,"XGLMConfig"),iIr.forEach(t),HXe=r(Q7e," (XGLM model)"),Q7e.forEach(t),UXe=i(v),xg=n(v,"LI",{});var W7e=s(xg);kK=n(W7e,"STRONG",{});var dIr=s(kK);JXe=r(dIr,"xlm"),dIr.forEach(t),YXe=r(W7e," \u2014 "),Yx=n(W7e,"A",{href:!0});var cIr=s(Yx);KXe=r(cIr,"XLMConfig"),cIr.forEach(t),ZXe=r(W7e," (XLM model)"),W7e.forEach(t),eze=i(v),kg=n(v,"LI",{});var H7e=s(kg);SK=n(H7e,"STRONG",{});var fIr=s(SK);oze=r(fIr,"xlm-prophetnet"),fIr.forEach(t),rze=r(H7e," \u2014 "),Kx=n(H7e,"A",{href:!0});var mIr=s(Kx);tze=r(mIr,"XLMProphetNetConfig"),mIr.forEach(t),aze=r(H7e," (XLMProphetNet model)"),H7e.forEach(t),nze=i(v),Sg=n(v,"LI",{});var U7e=s(Sg);RK=n(U7e,"STRONG",{});var gIr=s(RK);sze=r(gIr,"xlm-roberta"),gIr.forEach(t),lze=r(U7e," \u2014 "),Zx=n(U7e,"A",{href:!0});var hIr=s(Zx);ize=r(hIr,"XLMRobertaConfig"),hIr.forEach(t),dze=r(U7e," (XLM-RoBERTa model)"),U7e.forEach(t),cze=i(v),Rg=n(v,"LI",{});var J7e=s(Rg);BK=n(J7e,"STRONG",{});var pIr=s(BK);fze=r(pIr,"xlm-roberta-xl"),pIr.forEach(t),mze=r(J7e," \u2014 "),ek=n(J7e,"A",{href:!0});var _Ir=s(ek);gze=r(_Ir,"XLMRobertaXLConfig"),_Ir.forEach(t),hze=r(J7e," (XLM-RoBERTa-XL model)"),J7e.forEach(t),pze=i(v),Bg=n(v,"LI",{});var Y7e=s(Bg);PK=n(Y7e,"STRONG",{});var uIr=s(PK);_ze=r(uIr,"xlnet"),uIr.forEach(t),uze=r(Y7e," \u2014 "),ok=n(Y7e,"A",{href:!0});var bIr=s(ok);bze=r(bIr,"XLNetConfig"),bIr.forEach(t),Fze=r(Y7e," (XLNet model)"),Y7e.forEach(t),vze=i(v),Pg=n(v,"LI",{});var K7e=s(Pg);$K=n(K7e,"STRONG",{});var FIr=s($K);Tze=r(FIr,"yoso"),FIr.forEach(t),Mze=r(K7e," \u2014 "),rk=n(K7e,"A",{href:!0});var vIr=s(rk);Eze=r(vIr,"YosoConfig"),vIr.forEach(t),Cze=r(K7e," (YOSO model)"),K7e.forEach(t),v.forEach(t),wze=i(ga),IK=n(ga,"P",{});var TIr=s(IK);Aze=r(TIr,"Examples:"),TIr.forEach(t),yze=i(ga),m(CC.$$.fragment,ga),ga.forEach(t),Lze=i(Os),$g=n(Os,"DIV",{class:!0});var NBe=s($g);m(wC.$$.fragment,NBe),xze=i(NBe),qK=n(NBe,"P",{});var MIr=s(qK);kze=r(MIr,"Register a new configuration for this class."),MIr.forEach(t),NBe.forEach(t),Os.forEach(t),ISe=i(c),Qi=n(c,"H2",{class:!0});var jBe=s(Qi);Ig=n(jBe,"A",{id:!0,class:!0,href:!0});var EIr=s(Ig);NK=n(EIr,"SPAN",{});var CIr=s(NK);m(AC.$$.fragment,CIr),CIr.forEach(t),EIr.forEach(t),Sze=i(jBe),jK=n(jBe,"SPAN",{});var wIr=s(jK);Rze=r(wIr,"AutoTokenizer"),wIr.forEach(t),jBe.forEach(t),qSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(yC.$$.fragment,Vs),Bze=i(Vs),LC=n(Vs,"P",{});var DBe=s(LC);Pze=r(DBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tk=n(DBe,"A",{href:!0});var AIr=s(tk);$ze=r(AIr,"AutoTokenizer.from_pretrained()"),AIr.forEach(t),Ize=r(DBe," class method."),DBe.forEach(t),qze=i(Vs),xC=n(Vs,"P",{});var GBe=s(xC);Nze=r(GBe,"This class cannot be instantiated directly using "),DK=n(GBe,"CODE",{});var yIr=s(DK);jze=r(yIr,"__init__()"),yIr.forEach(t),Dze=r(GBe," (throws an error)."),GBe.forEach(t),Gze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(kC.$$.fragment,ha),Oze=i(ha),GK=n(ha,"P",{});var LIr=s(GK);Vze=r(LIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LIr.forEach(t),Xze=i(ha),Oa=n(ha,"P",{});var pE=s(Oa);zze=r(pE,"The tokenizer class to instantiate is selected based on the "),OK=n(pE,"CODE",{});var xIr=s(OK);Qze=r(xIr,"model_type"),xIr.forEach(t),Wze=r(pE,` property of the config object (either
passed as an argument or loaded from `),VK=n(pE,"CODE",{});var kIr=s(VK);Hze=r(kIr,"pretrained_model_name_or_path"),kIr.forEach(t),Uze=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XK=n(pE,"CODE",{});var SIr=s(XK);Jze=r(SIr,"pretrained_model_name_or_path"),SIr.forEach(t),Yze=r(pE,":"),pE.forEach(t),Kze=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var d8=s(Qn);zK=n(d8,"STRONG",{});var RIr=s(zK);Zze=r(RIr,"albert"),RIr.forEach(t),eQe=r(d8," \u2014 "),ak=n(d8,"A",{href:!0});var BIr=s(ak);oQe=r(BIr,"AlbertTokenizer"),BIr.forEach(t),rQe=r(d8," or "),nk=n(d8,"A",{href:!0});var PIr=s(nk);tQe=r(PIr,"AlbertTokenizerFast"),PIr.forEach(t),aQe=r(d8," (ALBERT model)"),d8.forEach(t),nQe=i(w),Wn=n(w,"LI",{});var c8=s(Wn);QK=n(c8,"STRONG",{});var $Ir=s(QK);sQe=r($Ir,"bart"),$Ir.forEach(t),lQe=r(c8," \u2014 "),sk=n(c8,"A",{href:!0});var IIr=s(sk);iQe=r(IIr,"BartTokenizer"),IIr.forEach(t),dQe=r(c8," or "),lk=n(c8,"A",{href:!0});var qIr=s(lk);cQe=r(qIr,"BartTokenizerFast"),qIr.forEach(t),fQe=r(c8," (BART model)"),c8.forEach(t),mQe=i(w),Hn=n(w,"LI",{});var f8=s(Hn);WK=n(f8,"STRONG",{});var NIr=s(WK);gQe=r(NIr,"barthez"),NIr.forEach(t),hQe=r(f8," \u2014 "),ik=n(f8,"A",{href:!0});var jIr=s(ik);pQe=r(jIr,"BarthezTokenizer"),jIr.forEach(t),_Qe=r(f8," or "),dk=n(f8,"A",{href:!0});var DIr=s(dk);uQe=r(DIr,"BarthezTokenizerFast"),DIr.forEach(t),bQe=r(f8," (BARThez model)"),f8.forEach(t),FQe=i(w),qg=n(w,"LI",{});var Z7e=s(qg);HK=n(Z7e,"STRONG",{});var GIr=s(HK);vQe=r(GIr,"bartpho"),GIr.forEach(t),TQe=r(Z7e," \u2014 "),ck=n(Z7e,"A",{href:!0});var OIr=s(ck);MQe=r(OIr,"BartphoTokenizer"),OIr.forEach(t),EQe=r(Z7e," (BARTpho model)"),Z7e.forEach(t),CQe=i(w),Un=n(w,"LI",{});var m8=s(Un);UK=n(m8,"STRONG",{});var VIr=s(UK);wQe=r(VIr,"bert"),VIr.forEach(t),AQe=r(m8," \u2014 "),fk=n(m8,"A",{href:!0});var XIr=s(fk);yQe=r(XIr,"BertTokenizer"),XIr.forEach(t),LQe=r(m8," or "),mk=n(m8,"A",{href:!0});var zIr=s(mk);xQe=r(zIr,"BertTokenizerFast"),zIr.forEach(t),kQe=r(m8," (BERT model)"),m8.forEach(t),SQe=i(w),Ng=n(w,"LI",{});var eMe=s(Ng);JK=n(eMe,"STRONG",{});var QIr=s(JK);RQe=r(QIr,"bert-generation"),QIr.forEach(t),BQe=r(eMe," \u2014 "),gk=n(eMe,"A",{href:!0});var WIr=s(gk);PQe=r(WIr,"BertGenerationTokenizer"),WIr.forEach(t),$Qe=r(eMe," (Bert Generation model)"),eMe.forEach(t),IQe=i(w),jg=n(w,"LI",{});var oMe=s(jg);YK=n(oMe,"STRONG",{});var HIr=s(YK);qQe=r(HIr,"bert-japanese"),HIr.forEach(t),NQe=r(oMe," \u2014 "),hk=n(oMe,"A",{href:!0});var UIr=s(hk);jQe=r(UIr,"BertJapaneseTokenizer"),UIr.forEach(t),DQe=r(oMe," (BertJapanese model)"),oMe.forEach(t),GQe=i(w),Dg=n(w,"LI",{});var rMe=s(Dg);KK=n(rMe,"STRONG",{});var JIr=s(KK);OQe=r(JIr,"bertweet"),JIr.forEach(t),VQe=r(rMe," \u2014 "),pk=n(rMe,"A",{href:!0});var YIr=s(pk);XQe=r(YIr,"BertweetTokenizer"),YIr.forEach(t),zQe=r(rMe," (Bertweet model)"),rMe.forEach(t),QQe=i(w),Jn=n(w,"LI",{});var g8=s(Jn);ZK=n(g8,"STRONG",{});var KIr=s(ZK);WQe=r(KIr,"big_bird"),KIr.forEach(t),HQe=r(g8," \u2014 "),_k=n(g8,"A",{href:!0});var ZIr=s(_k);UQe=r(ZIr,"BigBirdTokenizer"),ZIr.forEach(t),JQe=r(g8," or "),uk=n(g8,"A",{href:!0});var eqr=s(uk);YQe=r(eqr,"BigBirdTokenizerFast"),eqr.forEach(t),KQe=r(g8," (BigBird model)"),g8.forEach(t),ZQe=i(w),Yn=n(w,"LI",{});var h8=s(Yn);eZ=n(h8,"STRONG",{});var oqr=s(eZ);eWe=r(oqr,"bigbird_pegasus"),oqr.forEach(t),oWe=r(h8," \u2014 "),bk=n(h8,"A",{href:!0});var rqr=s(bk);rWe=r(rqr,"PegasusTokenizer"),rqr.forEach(t),tWe=r(h8," or "),Fk=n(h8,"A",{href:!0});var tqr=s(Fk);aWe=r(tqr,"PegasusTokenizerFast"),tqr.forEach(t),nWe=r(h8," (BigBirdPegasus model)"),h8.forEach(t),sWe=i(w),Kn=n(w,"LI",{});var p8=s(Kn);oZ=n(p8,"STRONG",{});var aqr=s(oZ);lWe=r(aqr,"blenderbot"),aqr.forEach(t),iWe=r(p8," \u2014 "),vk=n(p8,"A",{href:!0});var nqr=s(vk);dWe=r(nqr,"BlenderbotTokenizer"),nqr.forEach(t),cWe=r(p8," or "),Tk=n(p8,"A",{href:!0});var sqr=s(Tk);fWe=r(sqr,"BlenderbotTokenizerFast"),sqr.forEach(t),mWe=r(p8," (Blenderbot model)"),p8.forEach(t),gWe=i(w),Gg=n(w,"LI",{});var tMe=s(Gg);rZ=n(tMe,"STRONG",{});var lqr=s(rZ);hWe=r(lqr,"blenderbot-small"),lqr.forEach(t),pWe=r(tMe," \u2014 "),Mk=n(tMe,"A",{href:!0});var iqr=s(Mk);_We=r(iqr,"BlenderbotSmallTokenizer"),iqr.forEach(t),uWe=r(tMe," (BlenderbotSmall model)"),tMe.forEach(t),bWe=i(w),Og=n(w,"LI",{});var aMe=s(Og);tZ=n(aMe,"STRONG",{});var dqr=s(tZ);FWe=r(dqr,"byt5"),dqr.forEach(t),vWe=r(aMe," \u2014 "),Ek=n(aMe,"A",{href:!0});var cqr=s(Ek);TWe=r(cqr,"ByT5Tokenizer"),cqr.forEach(t),MWe=r(aMe," (ByT5 model)"),aMe.forEach(t),EWe=i(w),Zn=n(w,"LI",{});var _8=s(Zn);aZ=n(_8,"STRONG",{});var fqr=s(aZ);CWe=r(fqr,"camembert"),fqr.forEach(t),wWe=r(_8," \u2014 "),Ck=n(_8,"A",{href:!0});var mqr=s(Ck);AWe=r(mqr,"CamembertTokenizer"),mqr.forEach(t),yWe=r(_8," or "),wk=n(_8,"A",{href:!0});var gqr=s(wk);LWe=r(gqr,"CamembertTokenizerFast"),gqr.forEach(t),xWe=r(_8," (CamemBERT model)"),_8.forEach(t),kWe=i(w),Vg=n(w,"LI",{});var nMe=s(Vg);nZ=n(nMe,"STRONG",{});var hqr=s(nZ);SWe=r(hqr,"canine"),hqr.forEach(t),RWe=r(nMe," \u2014 "),Ak=n(nMe,"A",{href:!0});var pqr=s(Ak);BWe=r(pqr,"CanineTokenizer"),pqr.forEach(t),PWe=r(nMe," (Canine model)"),nMe.forEach(t),$We=i(w),es=n(w,"LI",{});var u8=s(es);sZ=n(u8,"STRONG",{});var _qr=s(sZ);IWe=r(_qr,"clip"),_qr.forEach(t),qWe=r(u8," \u2014 "),yk=n(u8,"A",{href:!0});var uqr=s(yk);NWe=r(uqr,"CLIPTokenizer"),uqr.forEach(t),jWe=r(u8," or "),Lk=n(u8,"A",{href:!0});var bqr=s(Lk);DWe=r(bqr,"CLIPTokenizerFast"),bqr.forEach(t),GWe=r(u8," (CLIP model)"),u8.forEach(t),OWe=i(w),os=n(w,"LI",{});var b8=s(os);lZ=n(b8,"STRONG",{});var Fqr=s(lZ);VWe=r(Fqr,"convbert"),Fqr.forEach(t),XWe=r(b8," \u2014 "),xk=n(b8,"A",{href:!0});var vqr=s(xk);zWe=r(vqr,"ConvBertTokenizer"),vqr.forEach(t),QWe=r(b8," or "),kk=n(b8,"A",{href:!0});var Tqr=s(kk);WWe=r(Tqr,"ConvBertTokenizerFast"),Tqr.forEach(t),HWe=r(b8," (ConvBERT model)"),b8.forEach(t),UWe=i(w),rs=n(w,"LI",{});var F8=s(rs);iZ=n(F8,"STRONG",{});var Mqr=s(iZ);JWe=r(Mqr,"cpm"),Mqr.forEach(t),YWe=r(F8," \u2014 "),Sk=n(F8,"A",{href:!0});var Eqr=s(Sk);KWe=r(Eqr,"CpmTokenizer"),Eqr.forEach(t),ZWe=r(F8," or "),dZ=n(F8,"CODE",{});var Cqr=s(dZ);eHe=r(Cqr,"CpmTokenizerFast"),Cqr.forEach(t),oHe=r(F8," (CPM model)"),F8.forEach(t),rHe=i(w),Xg=n(w,"LI",{});var sMe=s(Xg);cZ=n(sMe,"STRONG",{});var wqr=s(cZ);tHe=r(wqr,"ctrl"),wqr.forEach(t),aHe=r(sMe," \u2014 "),Rk=n(sMe,"A",{href:!0});var Aqr=s(Rk);nHe=r(Aqr,"CTRLTokenizer"),Aqr.forEach(t),sHe=r(sMe," (CTRL model)"),sMe.forEach(t),lHe=i(w),ts=n(w,"LI",{});var v8=s(ts);fZ=n(v8,"STRONG",{});var yqr=s(fZ);iHe=r(yqr,"deberta"),yqr.forEach(t),dHe=r(v8," \u2014 "),Bk=n(v8,"A",{href:!0});var Lqr=s(Bk);cHe=r(Lqr,"DebertaTokenizer"),Lqr.forEach(t),fHe=r(v8," or "),Pk=n(v8,"A",{href:!0});var xqr=s(Pk);mHe=r(xqr,"DebertaTokenizerFast"),xqr.forEach(t),gHe=r(v8," (DeBERTa model)"),v8.forEach(t),hHe=i(w),zg=n(w,"LI",{});var lMe=s(zg);mZ=n(lMe,"STRONG",{});var kqr=s(mZ);pHe=r(kqr,"deberta-v2"),kqr.forEach(t),_He=r(lMe," \u2014 "),$k=n(lMe,"A",{href:!0});var Sqr=s($k);uHe=r(Sqr,"DebertaV2Tokenizer"),Sqr.forEach(t),bHe=r(lMe," (DeBERTa-v2 model)"),lMe.forEach(t),FHe=i(w),as=n(w,"LI",{});var T8=s(as);gZ=n(T8,"STRONG",{});var Rqr=s(gZ);vHe=r(Rqr,"distilbert"),Rqr.forEach(t),THe=r(T8," \u2014 "),Ik=n(T8,"A",{href:!0});var Bqr=s(Ik);MHe=r(Bqr,"DistilBertTokenizer"),Bqr.forEach(t),EHe=r(T8," or "),qk=n(T8,"A",{href:!0});var Pqr=s(qk);CHe=r(Pqr,"DistilBertTokenizerFast"),Pqr.forEach(t),wHe=r(T8," (DistilBERT model)"),T8.forEach(t),AHe=i(w),ns=n(w,"LI",{});var M8=s(ns);hZ=n(M8,"STRONG",{});var $qr=s(hZ);yHe=r($qr,"dpr"),$qr.forEach(t),LHe=r(M8," \u2014 "),Nk=n(M8,"A",{href:!0});var Iqr=s(Nk);xHe=r(Iqr,"DPRQuestionEncoderTokenizer"),Iqr.forEach(t),kHe=r(M8," or "),jk=n(M8,"A",{href:!0});var qqr=s(jk);SHe=r(qqr,"DPRQuestionEncoderTokenizerFast"),qqr.forEach(t),RHe=r(M8," (DPR model)"),M8.forEach(t),BHe=i(w),ss=n(w,"LI",{});var E8=s(ss);pZ=n(E8,"STRONG",{});var Nqr=s(pZ);PHe=r(Nqr,"electra"),Nqr.forEach(t),$He=r(E8," \u2014 "),Dk=n(E8,"A",{href:!0});var jqr=s(Dk);IHe=r(jqr,"ElectraTokenizer"),jqr.forEach(t),qHe=r(E8," or "),Gk=n(E8,"A",{href:!0});var Dqr=s(Gk);NHe=r(Dqr,"ElectraTokenizerFast"),Dqr.forEach(t),jHe=r(E8," (ELECTRA model)"),E8.forEach(t),DHe=i(w),Qg=n(w,"LI",{});var iMe=s(Qg);_Z=n(iMe,"STRONG",{});var Gqr=s(_Z);GHe=r(Gqr,"flaubert"),Gqr.forEach(t),OHe=r(iMe," \u2014 "),Ok=n(iMe,"A",{href:!0});var Oqr=s(Ok);VHe=r(Oqr,"FlaubertTokenizer"),Oqr.forEach(t),XHe=r(iMe," (FlauBERT model)"),iMe.forEach(t),zHe=i(w),ls=n(w,"LI",{});var C8=s(ls);uZ=n(C8,"STRONG",{});var Vqr=s(uZ);QHe=r(Vqr,"fnet"),Vqr.forEach(t),WHe=r(C8," \u2014 "),Vk=n(C8,"A",{href:!0});var Xqr=s(Vk);HHe=r(Xqr,"FNetTokenizer"),Xqr.forEach(t),UHe=r(C8," or "),Xk=n(C8,"A",{href:!0});var zqr=s(Xk);JHe=r(zqr,"FNetTokenizerFast"),zqr.forEach(t),YHe=r(C8," (FNet model)"),C8.forEach(t),KHe=i(w),Wg=n(w,"LI",{});var dMe=s(Wg);bZ=n(dMe,"STRONG",{});var Qqr=s(bZ);ZHe=r(Qqr,"fsmt"),Qqr.forEach(t),eUe=r(dMe," \u2014 "),zk=n(dMe,"A",{href:!0});var Wqr=s(zk);oUe=r(Wqr,"FSMTTokenizer"),Wqr.forEach(t),rUe=r(dMe," (FairSeq Machine-Translation model)"),dMe.forEach(t),tUe=i(w),is=n(w,"LI",{});var w8=s(is);FZ=n(w8,"STRONG",{});var Hqr=s(FZ);aUe=r(Hqr,"funnel"),Hqr.forEach(t),nUe=r(w8," \u2014 "),Qk=n(w8,"A",{href:!0});var Uqr=s(Qk);sUe=r(Uqr,"FunnelTokenizer"),Uqr.forEach(t),lUe=r(w8," or "),Wk=n(w8,"A",{href:!0});var Jqr=s(Wk);iUe=r(Jqr,"FunnelTokenizerFast"),Jqr.forEach(t),dUe=r(w8," (Funnel Transformer model)"),w8.forEach(t),cUe=i(w),ds=n(w,"LI",{});var A8=s(ds);vZ=n(A8,"STRONG",{});var Yqr=s(vZ);fUe=r(Yqr,"gpt2"),Yqr.forEach(t),mUe=r(A8," \u2014 "),Hk=n(A8,"A",{href:!0});var Kqr=s(Hk);gUe=r(Kqr,"GPT2Tokenizer"),Kqr.forEach(t),hUe=r(A8," or "),Uk=n(A8,"A",{href:!0});var Zqr=s(Uk);pUe=r(Zqr,"GPT2TokenizerFast"),Zqr.forEach(t),_Ue=r(A8," (OpenAI GPT-2 model)"),A8.forEach(t),uUe=i(w),cs=n(w,"LI",{});var y8=s(cs);TZ=n(y8,"STRONG",{});var eNr=s(TZ);bUe=r(eNr,"gpt_neo"),eNr.forEach(t),FUe=r(y8," \u2014 "),Jk=n(y8,"A",{href:!0});var oNr=s(Jk);vUe=r(oNr,"GPT2Tokenizer"),oNr.forEach(t),TUe=r(y8," or "),Yk=n(y8,"A",{href:!0});var rNr=s(Yk);MUe=r(rNr,"GPT2TokenizerFast"),rNr.forEach(t),EUe=r(y8," (GPT Neo model)"),y8.forEach(t),CUe=i(w),fs=n(w,"LI",{});var L8=s(fs);MZ=n(L8,"STRONG",{});var tNr=s(MZ);wUe=r(tNr,"herbert"),tNr.forEach(t),AUe=r(L8," \u2014 "),Kk=n(L8,"A",{href:!0});var aNr=s(Kk);yUe=r(aNr,"HerbertTokenizer"),aNr.forEach(t),LUe=r(L8," or "),Zk=n(L8,"A",{href:!0});var nNr=s(Zk);xUe=r(nNr,"HerbertTokenizerFast"),nNr.forEach(t),kUe=r(L8," (HerBERT model)"),L8.forEach(t),SUe=i(w),Hg=n(w,"LI",{});var cMe=s(Hg);EZ=n(cMe,"STRONG",{});var sNr=s(EZ);RUe=r(sNr,"hubert"),sNr.forEach(t),BUe=r(cMe," \u2014 "),eS=n(cMe,"A",{href:!0});var lNr=s(eS);PUe=r(lNr,"Wav2Vec2CTCTokenizer"),lNr.forEach(t),$Ue=r(cMe," (Hubert model)"),cMe.forEach(t),IUe=i(w),ms=n(w,"LI",{});var x8=s(ms);CZ=n(x8,"STRONG",{});var iNr=s(CZ);qUe=r(iNr,"ibert"),iNr.forEach(t),NUe=r(x8," \u2014 "),oS=n(x8,"A",{href:!0});var dNr=s(oS);jUe=r(dNr,"RobertaTokenizer"),dNr.forEach(t),DUe=r(x8," or "),rS=n(x8,"A",{href:!0});var cNr=s(rS);GUe=r(cNr,"RobertaTokenizerFast"),cNr.forEach(t),OUe=r(x8," (I-BERT model)"),x8.forEach(t),VUe=i(w),gs=n(w,"LI",{});var k8=s(gs);wZ=n(k8,"STRONG",{});var fNr=s(wZ);XUe=r(fNr,"layoutlm"),fNr.forEach(t),zUe=r(k8," \u2014 "),tS=n(k8,"A",{href:!0});var mNr=s(tS);QUe=r(mNr,"LayoutLMTokenizer"),mNr.forEach(t),WUe=r(k8," or "),aS=n(k8,"A",{href:!0});var gNr=s(aS);HUe=r(gNr,"LayoutLMTokenizerFast"),gNr.forEach(t),UUe=r(k8," (LayoutLM model)"),k8.forEach(t),JUe=i(w),hs=n(w,"LI",{});var S8=s(hs);AZ=n(S8,"STRONG",{});var hNr=s(AZ);YUe=r(hNr,"layoutlmv2"),hNr.forEach(t),KUe=r(S8," \u2014 "),nS=n(S8,"A",{href:!0});var pNr=s(nS);ZUe=r(pNr,"LayoutLMv2Tokenizer"),pNr.forEach(t),eJe=r(S8," or "),sS=n(S8,"A",{href:!0});var _Nr=s(sS);oJe=r(_Nr,"LayoutLMv2TokenizerFast"),_Nr.forEach(t),rJe=r(S8," (LayoutLMv2 model)"),S8.forEach(t),tJe=i(w),ps=n(w,"LI",{});var R8=s(ps);yZ=n(R8,"STRONG",{});var uNr=s(yZ);aJe=r(uNr,"layoutxlm"),uNr.forEach(t),nJe=r(R8," \u2014 "),lS=n(R8,"A",{href:!0});var bNr=s(lS);sJe=r(bNr,"LayoutXLMTokenizer"),bNr.forEach(t),lJe=r(R8," or "),iS=n(R8,"A",{href:!0});var FNr=s(iS);iJe=r(FNr,"LayoutXLMTokenizerFast"),FNr.forEach(t),dJe=r(R8," (LayoutXLM model)"),R8.forEach(t),cJe=i(w),_s=n(w,"LI",{});var B8=s(_s);LZ=n(B8,"STRONG",{});var vNr=s(LZ);fJe=r(vNr,"led"),vNr.forEach(t),mJe=r(B8," \u2014 "),dS=n(B8,"A",{href:!0});var TNr=s(dS);gJe=r(TNr,"LEDTokenizer"),TNr.forEach(t),hJe=r(B8," or "),cS=n(B8,"A",{href:!0});var MNr=s(cS);pJe=r(MNr,"LEDTokenizerFast"),MNr.forEach(t),_Je=r(B8," (LED model)"),B8.forEach(t),uJe=i(w),us=n(w,"LI",{});var P8=s(us);xZ=n(P8,"STRONG",{});var ENr=s(xZ);bJe=r(ENr,"longformer"),ENr.forEach(t),FJe=r(P8," \u2014 "),fS=n(P8,"A",{href:!0});var CNr=s(fS);vJe=r(CNr,"LongformerTokenizer"),CNr.forEach(t),TJe=r(P8," or "),mS=n(P8,"A",{href:!0});var wNr=s(mS);MJe=r(wNr,"LongformerTokenizerFast"),wNr.forEach(t),EJe=r(P8," (Longformer model)"),P8.forEach(t),CJe=i(w),Ug=n(w,"LI",{});var fMe=s(Ug);kZ=n(fMe,"STRONG",{});var ANr=s(kZ);wJe=r(ANr,"luke"),ANr.forEach(t),AJe=r(fMe," \u2014 "),gS=n(fMe,"A",{href:!0});var yNr=s(gS);yJe=r(yNr,"LukeTokenizer"),yNr.forEach(t),LJe=r(fMe," (LUKE model)"),fMe.forEach(t),xJe=i(w),bs=n(w,"LI",{});var $8=s(bs);SZ=n($8,"STRONG",{});var LNr=s(SZ);kJe=r(LNr,"lxmert"),LNr.forEach(t),SJe=r($8," \u2014 "),hS=n($8,"A",{href:!0});var xNr=s(hS);RJe=r(xNr,"LxmertTokenizer"),xNr.forEach(t),BJe=r($8," or "),pS=n($8,"A",{href:!0});var kNr=s(pS);PJe=r(kNr,"LxmertTokenizerFast"),kNr.forEach(t),$Je=r($8," (LXMERT model)"),$8.forEach(t),IJe=i(w),Jg=n(w,"LI",{});var mMe=s(Jg);RZ=n(mMe,"STRONG",{});var SNr=s(RZ);qJe=r(SNr,"m2m_100"),SNr.forEach(t),NJe=r(mMe," \u2014 "),_S=n(mMe,"A",{href:!0});var RNr=s(_S);jJe=r(RNr,"M2M100Tokenizer"),RNr.forEach(t),DJe=r(mMe," (M2M100 model)"),mMe.forEach(t),GJe=i(w),Yg=n(w,"LI",{});var gMe=s(Yg);BZ=n(gMe,"STRONG",{});var BNr=s(BZ);OJe=r(BNr,"marian"),BNr.forEach(t),VJe=r(gMe," \u2014 "),uS=n(gMe,"A",{href:!0});var PNr=s(uS);XJe=r(PNr,"MarianTokenizer"),PNr.forEach(t),zJe=r(gMe," (Marian model)"),gMe.forEach(t),QJe=i(w),Fs=n(w,"LI",{});var I8=s(Fs);PZ=n(I8,"STRONG",{});var $Nr=s(PZ);WJe=r($Nr,"mbart"),$Nr.forEach(t),HJe=r(I8," \u2014 "),bS=n(I8,"A",{href:!0});var INr=s(bS);UJe=r(INr,"MBartTokenizer"),INr.forEach(t),JJe=r(I8," or "),FS=n(I8,"A",{href:!0});var qNr=s(FS);YJe=r(qNr,"MBartTokenizerFast"),qNr.forEach(t),KJe=r(I8," (mBART model)"),I8.forEach(t),ZJe=i(w),vs=n(w,"LI",{});var q8=s(vs);$Z=n(q8,"STRONG",{});var NNr=s($Z);eYe=r(NNr,"mbart50"),NNr.forEach(t),oYe=r(q8," \u2014 "),vS=n(q8,"A",{href:!0});var jNr=s(vS);rYe=r(jNr,"MBart50Tokenizer"),jNr.forEach(t),tYe=r(q8," or "),TS=n(q8,"A",{href:!0});var DNr=s(TS);aYe=r(DNr,"MBart50TokenizerFast"),DNr.forEach(t),nYe=r(q8," (mBART-50 model)"),q8.forEach(t),sYe=i(w),Kg=n(w,"LI",{});var hMe=s(Kg);IZ=n(hMe,"STRONG",{});var GNr=s(IZ);lYe=r(GNr,"mluke"),GNr.forEach(t),iYe=r(hMe," \u2014 "),MS=n(hMe,"A",{href:!0});var ONr=s(MS);dYe=r(ONr,"MLukeTokenizer"),ONr.forEach(t),cYe=r(hMe," (mLUKE model)"),hMe.forEach(t),fYe=i(w),Ts=n(w,"LI",{});var N8=s(Ts);qZ=n(N8,"STRONG",{});var VNr=s(qZ);mYe=r(VNr,"mobilebert"),VNr.forEach(t),gYe=r(N8," \u2014 "),ES=n(N8,"A",{href:!0});var XNr=s(ES);hYe=r(XNr,"MobileBertTokenizer"),XNr.forEach(t),pYe=r(N8," or "),CS=n(N8,"A",{href:!0});var zNr=s(CS);_Ye=r(zNr,"MobileBertTokenizerFast"),zNr.forEach(t),uYe=r(N8," (MobileBERT model)"),N8.forEach(t),bYe=i(w),Ms=n(w,"LI",{});var j8=s(Ms);NZ=n(j8,"STRONG",{});var QNr=s(NZ);FYe=r(QNr,"mpnet"),QNr.forEach(t),vYe=r(j8," \u2014 "),wS=n(j8,"A",{href:!0});var WNr=s(wS);TYe=r(WNr,"MPNetTokenizer"),WNr.forEach(t),MYe=r(j8," or "),AS=n(j8,"A",{href:!0});var HNr=s(AS);EYe=r(HNr,"MPNetTokenizerFast"),HNr.forEach(t),CYe=r(j8," (MPNet model)"),j8.forEach(t),wYe=i(w),Es=n(w,"LI",{});var D8=s(Es);jZ=n(D8,"STRONG",{});var UNr=s(jZ);AYe=r(UNr,"mt5"),UNr.forEach(t),yYe=r(D8," \u2014 "),yS=n(D8,"A",{href:!0});var JNr=s(yS);LYe=r(JNr,"MT5Tokenizer"),JNr.forEach(t),xYe=r(D8," or "),LS=n(D8,"A",{href:!0});var YNr=s(LS);kYe=r(YNr,"MT5TokenizerFast"),YNr.forEach(t),SYe=r(D8," (mT5 model)"),D8.forEach(t),RYe=i(w),Cs=n(w,"LI",{});var G8=s(Cs);DZ=n(G8,"STRONG",{});var KNr=s(DZ);BYe=r(KNr,"openai-gpt"),KNr.forEach(t),PYe=r(G8," \u2014 "),xS=n(G8,"A",{href:!0});var ZNr=s(xS);$Ye=r(ZNr,"OpenAIGPTTokenizer"),ZNr.forEach(t),IYe=r(G8," or "),kS=n(G8,"A",{href:!0});var ejr=s(kS);qYe=r(ejr,"OpenAIGPTTokenizerFast"),ejr.forEach(t),NYe=r(G8," (OpenAI GPT model)"),G8.forEach(t),jYe=i(w),ws=n(w,"LI",{});var O8=s(ws);GZ=n(O8,"STRONG",{});var ojr=s(GZ);DYe=r(ojr,"pegasus"),ojr.forEach(t),GYe=r(O8," \u2014 "),SS=n(O8,"A",{href:!0});var rjr=s(SS);OYe=r(rjr,"PegasusTokenizer"),rjr.forEach(t),VYe=r(O8," or "),RS=n(O8,"A",{href:!0});var tjr=s(RS);XYe=r(tjr,"PegasusTokenizerFast"),tjr.forEach(t),zYe=r(O8," (Pegasus model)"),O8.forEach(t),QYe=i(w),Zg=n(w,"LI",{});var pMe=s(Zg);OZ=n(pMe,"STRONG",{});var ajr=s(OZ);WYe=r(ajr,"perceiver"),ajr.forEach(t),HYe=r(pMe," \u2014 "),BS=n(pMe,"A",{href:!0});var njr=s(BS);UYe=r(njr,"PerceiverTokenizer"),njr.forEach(t),JYe=r(pMe," (Perceiver model)"),pMe.forEach(t),YYe=i(w),eh=n(w,"LI",{});var _Me=s(eh);VZ=n(_Me,"STRONG",{});var sjr=s(VZ);KYe=r(sjr,"phobert"),sjr.forEach(t),ZYe=r(_Me," \u2014 "),PS=n(_Me,"A",{href:!0});var ljr=s(PS);eKe=r(ljr,"PhobertTokenizer"),ljr.forEach(t),oKe=r(_Me," (PhoBERT model)"),_Me.forEach(t),rKe=i(w),oh=n(w,"LI",{});var uMe=s(oh);XZ=n(uMe,"STRONG",{});var ijr=s(XZ);tKe=r(ijr,"plbart"),ijr.forEach(t),aKe=r(uMe," \u2014 "),$S=n(uMe,"A",{href:!0});var djr=s($S);nKe=r(djr,"PLBartTokenizer"),djr.forEach(t),sKe=r(uMe," (PLBart model)"),uMe.forEach(t),lKe=i(w),rh=n(w,"LI",{});var bMe=s(rh);zZ=n(bMe,"STRONG",{});var cjr=s(zZ);iKe=r(cjr,"prophetnet"),cjr.forEach(t),dKe=r(bMe," \u2014 "),IS=n(bMe,"A",{href:!0});var fjr=s(IS);cKe=r(fjr,"ProphetNetTokenizer"),fjr.forEach(t),fKe=r(bMe," (ProphetNet model)"),bMe.forEach(t),mKe=i(w),As=n(w,"LI",{});var V8=s(As);QZ=n(V8,"STRONG",{});var mjr=s(QZ);gKe=r(mjr,"qdqbert"),mjr.forEach(t),hKe=r(V8," \u2014 "),qS=n(V8,"A",{href:!0});var gjr=s(qS);pKe=r(gjr,"BertTokenizer"),gjr.forEach(t),_Ke=r(V8," or "),NS=n(V8,"A",{href:!0});var hjr=s(NS);uKe=r(hjr,"BertTokenizerFast"),hjr.forEach(t),bKe=r(V8," (QDQBert model)"),V8.forEach(t),FKe=i(w),th=n(w,"LI",{});var FMe=s(th);WZ=n(FMe,"STRONG",{});var pjr=s(WZ);vKe=r(pjr,"rag"),pjr.forEach(t),TKe=r(FMe," \u2014 "),jS=n(FMe,"A",{href:!0});var _jr=s(jS);MKe=r(_jr,"RagTokenizer"),_jr.forEach(t),EKe=r(FMe," (RAG model)"),FMe.forEach(t),CKe=i(w),ys=n(w,"LI",{});var X8=s(ys);HZ=n(X8,"STRONG",{});var ujr=s(HZ);wKe=r(ujr,"realm"),ujr.forEach(t),AKe=r(X8," \u2014 "),DS=n(X8,"A",{href:!0});var bjr=s(DS);yKe=r(bjr,"RealmTokenizer"),bjr.forEach(t),LKe=r(X8," or "),GS=n(X8,"A",{href:!0});var Fjr=s(GS);xKe=r(Fjr,"RealmTokenizerFast"),Fjr.forEach(t),kKe=r(X8," (Realm model)"),X8.forEach(t),SKe=i(w),Ls=n(w,"LI",{});var z8=s(Ls);UZ=n(z8,"STRONG",{});var vjr=s(UZ);RKe=r(vjr,"reformer"),vjr.forEach(t),BKe=r(z8," \u2014 "),OS=n(z8,"A",{href:!0});var Tjr=s(OS);PKe=r(Tjr,"ReformerTokenizer"),Tjr.forEach(t),$Ke=r(z8," or "),VS=n(z8,"A",{href:!0});var Mjr=s(VS);IKe=r(Mjr,"ReformerTokenizerFast"),Mjr.forEach(t),qKe=r(z8," (Reformer model)"),z8.forEach(t),NKe=i(w),xs=n(w,"LI",{});var Q8=s(xs);JZ=n(Q8,"STRONG",{});var Ejr=s(JZ);jKe=r(Ejr,"rembert"),Ejr.forEach(t),DKe=r(Q8," \u2014 "),XS=n(Q8,"A",{href:!0});var Cjr=s(XS);GKe=r(Cjr,"RemBertTokenizer"),Cjr.forEach(t),OKe=r(Q8," or "),zS=n(Q8,"A",{href:!0});var wjr=s(zS);VKe=r(wjr,"RemBertTokenizerFast"),wjr.forEach(t),XKe=r(Q8," (RemBERT model)"),Q8.forEach(t),zKe=i(w),ks=n(w,"LI",{});var W8=s(ks);YZ=n(W8,"STRONG",{});var Ajr=s(YZ);QKe=r(Ajr,"retribert"),Ajr.forEach(t),WKe=r(W8," \u2014 "),QS=n(W8,"A",{href:!0});var yjr=s(QS);HKe=r(yjr,"RetriBertTokenizer"),yjr.forEach(t),UKe=r(W8," or "),WS=n(W8,"A",{href:!0});var Ljr=s(WS);JKe=r(Ljr,"RetriBertTokenizerFast"),Ljr.forEach(t),YKe=r(W8," (RetriBERT model)"),W8.forEach(t),KKe=i(w),Ss=n(w,"LI",{});var H8=s(Ss);KZ=n(H8,"STRONG",{});var xjr=s(KZ);ZKe=r(xjr,"roberta"),xjr.forEach(t),eZe=r(H8," \u2014 "),HS=n(H8,"A",{href:!0});var kjr=s(HS);oZe=r(kjr,"RobertaTokenizer"),kjr.forEach(t),rZe=r(H8," or "),US=n(H8,"A",{href:!0});var Sjr=s(US);tZe=r(Sjr,"RobertaTokenizerFast"),Sjr.forEach(t),aZe=r(H8," (RoBERTa model)"),H8.forEach(t),nZe=i(w),Rs=n(w,"LI",{});var U8=s(Rs);ZZ=n(U8,"STRONG",{});var Rjr=s(ZZ);sZe=r(Rjr,"roformer"),Rjr.forEach(t),lZe=r(U8," \u2014 "),JS=n(U8,"A",{href:!0});var Bjr=s(JS);iZe=r(Bjr,"RoFormerTokenizer"),Bjr.forEach(t),dZe=r(U8," or "),YS=n(U8,"A",{href:!0});var Pjr=s(YS);cZe=r(Pjr,"RoFormerTokenizerFast"),Pjr.forEach(t),fZe=r(U8," (RoFormer model)"),U8.forEach(t),mZe=i(w),ah=n(w,"LI",{});var vMe=s(ah);eee=n(vMe,"STRONG",{});var $jr=s(eee);gZe=r($jr,"speech_to_text"),$jr.forEach(t),hZe=r(vMe," \u2014 "),KS=n(vMe,"A",{href:!0});var Ijr=s(KS);pZe=r(Ijr,"Speech2TextTokenizer"),Ijr.forEach(t),_Ze=r(vMe," (Speech2Text model)"),vMe.forEach(t),uZe=i(w),nh=n(w,"LI",{});var TMe=s(nh);oee=n(TMe,"STRONG",{});var qjr=s(oee);bZe=r(qjr,"speech_to_text_2"),qjr.forEach(t),FZe=r(TMe," \u2014 "),ZS=n(TMe,"A",{href:!0});var Njr=s(ZS);vZe=r(Njr,"Speech2Text2Tokenizer"),Njr.forEach(t),TZe=r(TMe," (Speech2Text2 model)"),TMe.forEach(t),MZe=i(w),Bs=n(w,"LI",{});var J8=s(Bs);ree=n(J8,"STRONG",{});var jjr=s(ree);EZe=r(jjr,"splinter"),jjr.forEach(t),CZe=r(J8," \u2014 "),eR=n(J8,"A",{href:!0});var Djr=s(eR);wZe=r(Djr,"SplinterTokenizer"),Djr.forEach(t),AZe=r(J8," or "),oR=n(J8,"A",{href:!0});var Gjr=s(oR);yZe=r(Gjr,"SplinterTokenizerFast"),Gjr.forEach(t),LZe=r(J8," (Splinter model)"),J8.forEach(t),xZe=i(w),Ps=n(w,"LI",{});var Y8=s(Ps);tee=n(Y8,"STRONG",{});var Ojr=s(tee);kZe=r(Ojr,"squeezebert"),Ojr.forEach(t),SZe=r(Y8," \u2014 "),rR=n(Y8,"A",{href:!0});var Vjr=s(rR);RZe=r(Vjr,"SqueezeBertTokenizer"),Vjr.forEach(t),BZe=r(Y8," or "),tR=n(Y8,"A",{href:!0});var Xjr=s(tR);PZe=r(Xjr,"SqueezeBertTokenizerFast"),Xjr.forEach(t),$Ze=r(Y8," (SqueezeBERT model)"),Y8.forEach(t),IZe=i(w),$s=n(w,"LI",{});var K8=s($s);aee=n(K8,"STRONG",{});var zjr=s(aee);qZe=r(zjr,"t5"),zjr.forEach(t),NZe=r(K8," \u2014 "),aR=n(K8,"A",{href:!0});var Qjr=s(aR);jZe=r(Qjr,"T5Tokenizer"),Qjr.forEach(t),DZe=r(K8," or "),nR=n(K8,"A",{href:!0});var Wjr=s(nR);GZe=r(Wjr,"T5TokenizerFast"),Wjr.forEach(t),OZe=r(K8," (T5 model)"),K8.forEach(t),VZe=i(w),sh=n(w,"LI",{});var MMe=s(sh);nee=n(MMe,"STRONG",{});var Hjr=s(nee);XZe=r(Hjr,"tapas"),Hjr.forEach(t),zZe=r(MMe," \u2014 "),sR=n(MMe,"A",{href:!0});var Ujr=s(sR);QZe=r(Ujr,"TapasTokenizer"),Ujr.forEach(t),WZe=r(MMe," (TAPAS model)"),MMe.forEach(t),HZe=i(w),lh=n(w,"LI",{});var EMe=s(lh);see=n(EMe,"STRONG",{});var Jjr=s(see);UZe=r(Jjr,"transfo-xl"),Jjr.forEach(t),JZe=r(EMe," \u2014 "),lR=n(EMe,"A",{href:!0});var Yjr=s(lR);YZe=r(Yjr,"TransfoXLTokenizer"),Yjr.forEach(t),KZe=r(EMe," (Transformer-XL model)"),EMe.forEach(t),ZZe=i(w),ih=n(w,"LI",{});var CMe=s(ih);lee=n(CMe,"STRONG",{});var Kjr=s(lee);eeo=r(Kjr,"wav2vec2"),Kjr.forEach(t),oeo=r(CMe," \u2014 "),iR=n(CMe,"A",{href:!0});var Zjr=s(iR);reo=r(Zjr,"Wav2Vec2CTCTokenizer"),Zjr.forEach(t),teo=r(CMe," (Wav2Vec2 model)"),CMe.forEach(t),aeo=i(w),dh=n(w,"LI",{});var wMe=s(dh);iee=n(wMe,"STRONG",{});var eDr=s(iee);neo=r(eDr,"wav2vec2_phoneme"),eDr.forEach(t),seo=r(wMe," \u2014 "),dR=n(wMe,"A",{href:!0});var oDr=s(dR);leo=r(oDr,"Wav2Vec2PhonemeCTCTokenizer"),oDr.forEach(t),ieo=r(wMe," (Wav2Vec2Phoneme model)"),wMe.forEach(t),deo=i(w),Is=n(w,"LI",{});var Z8=s(Is);dee=n(Z8,"STRONG",{});var rDr=s(dee);ceo=r(rDr,"xglm"),rDr.forEach(t),feo=r(Z8," \u2014 "),cR=n(Z8,"A",{href:!0});var tDr=s(cR);meo=r(tDr,"XGLMTokenizer"),tDr.forEach(t),geo=r(Z8," or "),fR=n(Z8,"A",{href:!0});var aDr=s(fR);heo=r(aDr,"XGLMTokenizerFast"),aDr.forEach(t),peo=r(Z8," (XGLM model)"),Z8.forEach(t),_eo=i(w),ch=n(w,"LI",{});var AMe=s(ch);cee=n(AMe,"STRONG",{});var nDr=s(cee);ueo=r(nDr,"xlm"),nDr.forEach(t),beo=r(AMe," \u2014 "),mR=n(AMe,"A",{href:!0});var sDr=s(mR);Feo=r(sDr,"XLMTokenizer"),sDr.forEach(t),veo=r(AMe," (XLM model)"),AMe.forEach(t),Teo=i(w),fh=n(w,"LI",{});var yMe=s(fh);fee=n(yMe,"STRONG",{});var lDr=s(fee);Meo=r(lDr,"xlm-prophetnet"),lDr.forEach(t),Eeo=r(yMe," \u2014 "),gR=n(yMe,"A",{href:!0});var iDr=s(gR);Ceo=r(iDr,"XLMProphetNetTokenizer"),iDr.forEach(t),weo=r(yMe," (XLMProphetNet model)"),yMe.forEach(t),Aeo=i(w),qs=n(w,"LI",{});var e9=s(qs);mee=n(e9,"STRONG",{});var dDr=s(mee);yeo=r(dDr,"xlm-roberta"),dDr.forEach(t),Leo=r(e9," \u2014 "),hR=n(e9,"A",{href:!0});var cDr=s(hR);xeo=r(cDr,"XLMRobertaTokenizer"),cDr.forEach(t),keo=r(e9," or "),pR=n(e9,"A",{href:!0});var fDr=s(pR);Seo=r(fDr,"XLMRobertaTokenizerFast"),fDr.forEach(t),Reo=r(e9," (XLM-RoBERTa model)"),e9.forEach(t),Beo=i(w),Ns=n(w,"LI",{});var o9=s(Ns);gee=n(o9,"STRONG",{});var mDr=s(gee);Peo=r(mDr,"xlnet"),mDr.forEach(t),$eo=r(o9," \u2014 "),_R=n(o9,"A",{href:!0});var gDr=s(_R);Ieo=r(gDr,"XLNetTokenizer"),gDr.forEach(t),qeo=r(o9," or "),uR=n(o9,"A",{href:!0});var hDr=s(uR);Neo=r(hDr,"XLNetTokenizerFast"),hDr.forEach(t),jeo=r(o9," (XLNet model)"),o9.forEach(t),w.forEach(t),Deo=i(ha),hee=n(ha,"P",{});var pDr=s(hee);Geo=r(pDr,"Examples:"),pDr.forEach(t),Oeo=i(ha),m(SC.$$.fragment,ha),ha.forEach(t),Veo=i(Vs),mh=n(Vs,"DIV",{class:!0});var OBe=s(mh);m(RC.$$.fragment,OBe),Xeo=i(OBe),pee=n(OBe,"P",{});var _Dr=s(pee);zeo=r(_Dr,"Register a new tokenizer in this mapping."),_Dr.forEach(t),OBe.forEach(t),Vs.forEach(t),NSe=i(c),Wi=n(c,"H2",{class:!0});var VBe=s(Wi);gh=n(VBe,"A",{id:!0,class:!0,href:!0});var uDr=s(gh);_ee=n(uDr,"SPAN",{});var bDr=s(_ee);m(BC.$$.fragment,bDr),bDr.forEach(t),uDr.forEach(t),Qeo=i(VBe),uee=n(VBe,"SPAN",{});var FDr=s(uee);Weo=r(FDr,"AutoFeatureExtractor"),FDr.forEach(t),VBe.forEach(t),jSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(PC.$$.fragment,Xs),Heo=i(Xs),$C=n(Xs,"P",{});var XBe=s($C);Ueo=r(XBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=n(XBe,"A",{href:!0});var vDr=s(bR);Jeo=r(vDr,"AutoFeatureExtractor.from_pretrained()"),vDr.forEach(t),Yeo=r(XBe," class method."),XBe.forEach(t),Keo=i(Xs),IC=n(Xs,"P",{});var zBe=s(IC);Zeo=r(zBe,"This class cannot be instantiated directly using "),bee=n(zBe,"CODE",{});var TDr=s(bee);eoo=r(TDr,"__init__()"),TDr.forEach(t),ooo=r(zBe," (throws an error)."),zBe.forEach(t),roo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(qC.$$.fragment,Nt),too=i(Nt),Fee=n(Nt,"P",{});var MDr=s(Fee);aoo=r(MDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MDr.forEach(t),noo=i(Nt),Va=n(Nt,"P",{});var _E=s(Va);soo=r(_E,"The feature extractor class to instantiate is selected based on the "),vee=n(_E,"CODE",{});var EDr=s(vee);loo=r(EDr,"model_type"),EDr.forEach(t),ioo=r(_E,` property of the config object
(either passed as an argument or loaded from `),Tee=n(_E,"CODE",{});var CDr=s(Tee);doo=r(CDr,"pretrained_model_name_or_path"),CDr.forEach(t),coo=r(_E,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mee=n(_E,"CODE",{});var wDr=s(Mee);foo=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),moo=r(_E,":"),_E.forEach(t),goo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var LMe=s(hh);Eee=n(LMe,"STRONG",{});var ADr=s(Eee);hoo=r(ADr,"beit"),ADr.forEach(t),poo=r(LMe," \u2014 "),FR=n(LMe,"A",{href:!0});var yDr=s(FR);_oo=r(yDr,"BeitFeatureExtractor"),yDr.forEach(t),uoo=r(LMe," (BEiT model)"),LMe.forEach(t),boo=i(ne),ph=n(ne,"LI",{});var xMe=s(ph);Cee=n(xMe,"STRONG",{});var LDr=s(Cee);Foo=r(LDr,"clip"),LDr.forEach(t),voo=r(xMe," \u2014 "),vR=n(xMe,"A",{href:!0});var xDr=s(vR);Too=r(xDr,"CLIPFeatureExtractor"),xDr.forEach(t),Moo=r(xMe," (CLIP model)"),xMe.forEach(t),Eoo=i(ne),_h=n(ne,"LI",{});var kMe=s(_h);wee=n(kMe,"STRONG",{});var kDr=s(wee);Coo=r(kDr,"convnext"),kDr.forEach(t),woo=r(kMe," \u2014 "),TR=n(kMe,"A",{href:!0});var SDr=s(TR);Aoo=r(SDr,"ConvNextFeatureExtractor"),SDr.forEach(t),yoo=r(kMe," (ConvNext model)"),kMe.forEach(t),Loo=i(ne),uh=n(ne,"LI",{});var SMe=s(uh);Aee=n(SMe,"STRONG",{});var RDr=s(Aee);xoo=r(RDr,"deit"),RDr.forEach(t),koo=r(SMe," \u2014 "),MR=n(SMe,"A",{href:!0});var BDr=s(MR);Soo=r(BDr,"DeiTFeatureExtractor"),BDr.forEach(t),Roo=r(SMe," (DeiT model)"),SMe.forEach(t),Boo=i(ne),bh=n(ne,"LI",{});var RMe=s(bh);yee=n(RMe,"STRONG",{});var PDr=s(yee);Poo=r(PDr,"detr"),PDr.forEach(t),$oo=r(RMe," \u2014 "),ER=n(RMe,"A",{href:!0});var $Dr=s(ER);Ioo=r($Dr,"DetrFeatureExtractor"),$Dr.forEach(t),qoo=r(RMe," (DETR model)"),RMe.forEach(t),Noo=i(ne),Fh=n(ne,"LI",{});var BMe=s(Fh);Lee=n(BMe,"STRONG",{});var IDr=s(Lee);joo=r(IDr,"hubert"),IDr.forEach(t),Doo=r(BMe," \u2014 "),CR=n(BMe,"A",{href:!0});var qDr=s(CR);Goo=r(qDr,"Wav2Vec2FeatureExtractor"),qDr.forEach(t),Ooo=r(BMe," (Hubert model)"),BMe.forEach(t),Voo=i(ne),vh=n(ne,"LI",{});var PMe=s(vh);xee=n(PMe,"STRONG",{});var NDr=s(xee);Xoo=r(NDr,"layoutlmv2"),NDr.forEach(t),zoo=r(PMe," \u2014 "),wR=n(PMe,"A",{href:!0});var jDr=s(wR);Qoo=r(jDr,"LayoutLMv2FeatureExtractor"),jDr.forEach(t),Woo=r(PMe," (LayoutLMv2 model)"),PMe.forEach(t),Hoo=i(ne),Th=n(ne,"LI",{});var $Me=s(Th);kee=n($Me,"STRONG",{});var DDr=s(kee);Uoo=r(DDr,"maskformer"),DDr.forEach(t),Joo=r($Me," \u2014 "),AR=n($Me,"A",{href:!0});var GDr=s(AR);Yoo=r(GDr,"MaskFormerFeatureExtractor"),GDr.forEach(t),Koo=r($Me," (MaskFormer model)"),$Me.forEach(t),Zoo=i(ne),Mh=n(ne,"LI",{});var IMe=s(Mh);See=n(IMe,"STRONG",{});var ODr=s(See);ero=r(ODr,"perceiver"),ODr.forEach(t),oro=r(IMe," \u2014 "),yR=n(IMe,"A",{href:!0});var VDr=s(yR);rro=r(VDr,"PerceiverFeatureExtractor"),VDr.forEach(t),tro=r(IMe," (Perceiver model)"),IMe.forEach(t),aro=i(ne),Eh=n(ne,"LI",{});var qMe=s(Eh);Ree=n(qMe,"STRONG",{});var XDr=s(Ree);nro=r(XDr,"poolformer"),XDr.forEach(t),sro=r(qMe," \u2014 "),LR=n(qMe,"A",{href:!0});var zDr=s(LR);lro=r(zDr,"PoolFormerFeatureExtractor"),zDr.forEach(t),iro=r(qMe," (PoolFormer model)"),qMe.forEach(t),dro=i(ne),Ch=n(ne,"LI",{});var NMe=s(Ch);Bee=n(NMe,"STRONG",{});var QDr=s(Bee);cro=r(QDr,"resnet"),QDr.forEach(t),fro=r(NMe," \u2014 "),xR=n(NMe,"A",{href:!0});var WDr=s(xR);mro=r(WDr,"ConvNextFeatureExtractor"),WDr.forEach(t),gro=r(NMe," (ResNet model)"),NMe.forEach(t),hro=i(ne),wh=n(ne,"LI",{});var jMe=s(wh);Pee=n(jMe,"STRONG",{});var HDr=s(Pee);pro=r(HDr,"segformer"),HDr.forEach(t),_ro=r(jMe," \u2014 "),kR=n(jMe,"A",{href:!0});var UDr=s(kR);uro=r(UDr,"SegformerFeatureExtractor"),UDr.forEach(t),bro=r(jMe," (SegFormer model)"),jMe.forEach(t),Fro=i(ne),Ah=n(ne,"LI",{});var DMe=s(Ah);$ee=n(DMe,"STRONG",{});var JDr=s($ee);vro=r(JDr,"speech_to_text"),JDr.forEach(t),Tro=r(DMe," \u2014 "),SR=n(DMe,"A",{href:!0});var YDr=s(SR);Mro=r(YDr,"Speech2TextFeatureExtractor"),YDr.forEach(t),Ero=r(DMe," (Speech2Text model)"),DMe.forEach(t),Cro=i(ne),yh=n(ne,"LI",{});var GMe=s(yh);Iee=n(GMe,"STRONG",{});var KDr=s(Iee);wro=r(KDr,"swin"),KDr.forEach(t),Aro=r(GMe," \u2014 "),RR=n(GMe,"A",{href:!0});var ZDr=s(RR);yro=r(ZDr,"ViTFeatureExtractor"),ZDr.forEach(t),Lro=r(GMe," (Swin model)"),GMe.forEach(t),xro=i(ne),Lh=n(ne,"LI",{});var OMe=s(Lh);qee=n(OMe,"STRONG",{});var eGr=s(qee);kro=r(eGr,"van"),eGr.forEach(t),Sro=r(OMe," \u2014 "),BR=n(OMe,"A",{href:!0});var oGr=s(BR);Rro=r(oGr,"ConvNextFeatureExtractor"),oGr.forEach(t),Bro=r(OMe," (VAN model)"),OMe.forEach(t),Pro=i(ne),xh=n(ne,"LI",{});var VMe=s(xh);Nee=n(VMe,"STRONG",{});var rGr=s(Nee);$ro=r(rGr,"vit"),rGr.forEach(t),Iro=r(VMe," \u2014 "),PR=n(VMe,"A",{href:!0});var tGr=s(PR);qro=r(tGr,"ViTFeatureExtractor"),tGr.forEach(t),Nro=r(VMe," (ViT model)"),VMe.forEach(t),jro=i(ne),kh=n(ne,"LI",{});var XMe=s(kh);jee=n(XMe,"STRONG",{});var aGr=s(jee);Dro=r(aGr,"vit_mae"),aGr.forEach(t),Gro=r(XMe," \u2014 "),$R=n(XMe,"A",{href:!0});var nGr=s($R);Oro=r(nGr,"ViTFeatureExtractor"),nGr.forEach(t),Vro=r(XMe," (ViTMAE model)"),XMe.forEach(t),Xro=i(ne),Sh=n(ne,"LI",{});var zMe=s(Sh);Dee=n(zMe,"STRONG",{});var sGr=s(Dee);zro=r(sGr,"wav2vec2"),sGr.forEach(t),Qro=r(zMe," \u2014 "),IR=n(zMe,"A",{href:!0});var lGr=s(IR);Wro=r(lGr,"Wav2Vec2FeatureExtractor"),lGr.forEach(t),Hro=r(zMe," (Wav2Vec2 model)"),zMe.forEach(t),ne.forEach(t),Uro=i(Nt),m(Rh.$$.fragment,Nt),Jro=i(Nt),Gee=n(Nt,"P",{});var iGr=s(Gee);Yro=r(iGr,"Examples:"),iGr.forEach(t),Kro=i(Nt),m(NC.$$.fragment,Nt),Nt.forEach(t),Zro=i(Xs),Bh=n(Xs,"DIV",{class:!0});var QBe=s(Bh);m(jC.$$.fragment,QBe),eto=i(QBe),Oee=n(QBe,"P",{});var dGr=s(Oee);oto=r(dGr,"Register a new feature extractor for this class."),dGr.forEach(t),QBe.forEach(t),Xs.forEach(t),DSe=i(c),Hi=n(c,"H2",{class:!0});var WBe=s(Hi);Ph=n(WBe,"A",{id:!0,class:!0,href:!0});var cGr=s(Ph);Vee=n(cGr,"SPAN",{});var fGr=s(Vee);m(DC.$$.fragment,fGr),fGr.forEach(t),cGr.forEach(t),rto=i(WBe),Xee=n(WBe,"SPAN",{});var mGr=s(Xee);tto=r(mGr,"AutoProcessor"),mGr.forEach(t),WBe.forEach(t),GSe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(GC.$$.fragment,zs),ato=i(zs),OC=n(zs,"P",{});var HBe=s(OC);nto=r(HBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qR=n(HBe,"A",{href:!0});var gGr=s(qR);sto=r(gGr,"AutoProcessor.from_pretrained()"),gGr.forEach(t),lto=r(HBe," class method."),HBe.forEach(t),ito=i(zs),VC=n(zs,"P",{});var UBe=s(VC);dto=r(UBe,"This class cannot be instantiated directly using "),zee=n(UBe,"CODE",{});var hGr=s(zee);cto=r(hGr,"__init__()"),hGr.forEach(t),fto=r(UBe," (throws an error)."),UBe.forEach(t),mto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(XC.$$.fragment,jt),gto=i(jt),Qee=n(jt,"P",{});var pGr=s(Qee);hto=r(pGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pGr.forEach(t),pto=i(jt),Ui=n(jt,"P",{});var XH=s(Ui);_to=r(XH,"The processor class to instantiate is selected based on the "),Wee=n(XH,"CODE",{});var _Gr=s(Wee);uto=r(_Gr,"model_type"),_Gr.forEach(t),bto=r(XH,` property of the config object (either
passed as an argument or loaded from `),Hee=n(XH,"CODE",{});var uGr=s(Hee);Fto=r(uGr,"pretrained_model_name_or_path"),uGr.forEach(t),vto=r(XH," if possible):"),XH.forEach(t),Tto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var QMe=s($h);Uee=n(QMe,"STRONG",{});var bGr=s(Uee);Mto=r(bGr,"clip"),bGr.forEach(t),Eto=r(QMe," \u2014 "),NR=n(QMe,"A",{href:!0});var FGr=s(NR);Cto=r(FGr,"CLIPProcessor"),FGr.forEach(t),wto=r(QMe," (CLIP model)"),QMe.forEach(t),Ato=i(jo),Ih=n(jo,"LI",{});var WMe=s(Ih);Jee=n(WMe,"STRONG",{});var vGr=s(Jee);yto=r(vGr,"layoutlmv2"),vGr.forEach(t),Lto=r(WMe," \u2014 "),jR=n(WMe,"A",{href:!0});var TGr=s(jR);xto=r(TGr,"LayoutLMv2Processor"),TGr.forEach(t),kto=r(WMe," (LayoutLMv2 model)"),WMe.forEach(t),Sto=i(jo),qh=n(jo,"LI",{});var HMe=s(qh);Yee=n(HMe,"STRONG",{});var MGr=s(Yee);Rto=r(MGr,"layoutxlm"),MGr.forEach(t),Bto=r(HMe," \u2014 "),DR=n(HMe,"A",{href:!0});var EGr=s(DR);Pto=r(EGr,"LayoutXLMProcessor"),EGr.forEach(t),$to=r(HMe," (LayoutXLM model)"),HMe.forEach(t),Ito=i(jo),Nh=n(jo,"LI",{});var UMe=s(Nh);Kee=n(UMe,"STRONG",{});var CGr=s(Kee);qto=r(CGr,"speech_to_text"),CGr.forEach(t),Nto=r(UMe," \u2014 "),GR=n(UMe,"A",{href:!0});var wGr=s(GR);jto=r(wGr,"Speech2TextProcessor"),wGr.forEach(t),Dto=r(UMe," (Speech2Text model)"),UMe.forEach(t),Gto=i(jo),jh=n(jo,"LI",{});var JMe=s(jh);Zee=n(JMe,"STRONG",{});var AGr=s(Zee);Oto=r(AGr,"speech_to_text_2"),AGr.forEach(t),Vto=r(JMe," \u2014 "),OR=n(JMe,"A",{href:!0});var yGr=s(OR);Xto=r(yGr,"Speech2Text2Processor"),yGr.forEach(t),zto=r(JMe," (Speech2Text2 model)"),JMe.forEach(t),Qto=i(jo),Dh=n(jo,"LI",{});var YMe=s(Dh);eoe=n(YMe,"STRONG",{});var LGr=s(eoe);Wto=r(LGr,"trocr"),LGr.forEach(t),Hto=r(YMe," \u2014 "),VR=n(YMe,"A",{href:!0});var xGr=s(VR);Uto=r(xGr,"TrOCRProcessor"),xGr.forEach(t),Jto=r(YMe," (TrOCR model)"),YMe.forEach(t),Yto=i(jo),Gh=n(jo,"LI",{});var KMe=s(Gh);ooe=n(KMe,"STRONG",{});var kGr=s(ooe);Kto=r(kGr,"vision-text-dual-encoder"),kGr.forEach(t),Zto=r(KMe," \u2014 "),XR=n(KMe,"A",{href:!0});var SGr=s(XR);eao=r(SGr,"VisionTextDualEncoderProcessor"),SGr.forEach(t),oao=r(KMe," (VisionTextDualEncoder model)"),KMe.forEach(t),rao=i(jo),Oh=n(jo,"LI",{});var ZMe=s(Oh);roe=n(ZMe,"STRONG",{});var RGr=s(roe);tao=r(RGr,"wav2vec2"),RGr.forEach(t),aao=r(ZMe," \u2014 "),zR=n(ZMe,"A",{href:!0});var BGr=s(zR);nao=r(BGr,"Wav2Vec2Processor"),BGr.forEach(t),sao=r(ZMe," (Wav2Vec2 model)"),ZMe.forEach(t),jo.forEach(t),lao=i(jt),m(Vh.$$.fragment,jt),iao=i(jt),toe=n(jt,"P",{});var PGr=s(toe);dao=r(PGr,"Examples:"),PGr.forEach(t),cao=i(jt),m(zC.$$.fragment,jt),jt.forEach(t),fao=i(zs),Xh=n(zs,"DIV",{class:!0});var JBe=s(Xh);m(QC.$$.fragment,JBe),mao=i(JBe),aoe=n(JBe,"P",{});var $Gr=s(aoe);gao=r($Gr,"Register a new processor for this class."),$Gr.forEach(t),JBe.forEach(t),zs.forEach(t),OSe=i(c),Ji=n(c,"H2",{class:!0});var YBe=s(Ji);zh=n(YBe,"A",{id:!0,class:!0,href:!0});var IGr=s(zh);noe=n(IGr,"SPAN",{});var qGr=s(noe);m(WC.$$.fragment,qGr),qGr.forEach(t),IGr.forEach(t),hao=i(YBe),soe=n(YBe,"SPAN",{});var NGr=s(soe);pao=r(NGr,"AutoModel"),NGr.forEach(t),YBe.forEach(t),VSe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(HC.$$.fragment,Qs),_ao=i(Qs),Yi=n(Qs,"P",{});var zH=s(Yi);uao=r(zH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QR=n(zH,"A",{href:!0});var jGr=s(QR);bao=r(jGr,"from_pretrained()"),jGr.forEach(t),Fao=r(zH," class method or the "),WR=n(zH,"A",{href:!0});var DGr=s(WR);vao=r(DGr,"from_config()"),DGr.forEach(t),Tao=r(zH,` class
method.`),zH.forEach(t),Mao=i(Qs),UC=n(Qs,"P",{});var KBe=s(UC);Eao=r(KBe,"This class cannot be instantiated directly using "),loe=n(KBe,"CODE",{});var GGr=s(loe);Cao=r(GGr,"__init__()"),GGr.forEach(t),wao=r(KBe," (throws an error)."),KBe.forEach(t),Aao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(JC.$$.fragment,Ws),yao=i(Ws),ioe=n(Ws,"P",{});var OGr=s(ioe);Lao=r(OGr,"Instantiates one of the base model classes of the library from a configuration."),OGr.forEach(t),xao=i(Ws),Ki=n(Ws,"P",{});var QH=s(Ki);kao=r(QH,`Note:
Loading a model from its configuration file does `),doe=n(QH,"STRONG",{});var VGr=s(doe);Sao=r(VGr,"not"),VGr.forEach(t),Rao=r(QH,` load the model weights. It only affects the
model\u2019s configuration. Use `),HR=n(QH,"A",{href:!0});var XGr=s(HR);Bao=r(XGr,"from_pretrained()"),XGr.forEach(t),Pao=r(QH," to load the model weights."),QH.forEach(t),$ao=i(Ws),coe=n(Ws,"P",{});var zGr=s(coe);Iao=r(zGr,"Examples:"),zGr.forEach(t),qao=i(Ws),m(YC.$$.fragment,Ws),Ws.forEach(t),Nao=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(KC.$$.fragment,Dt),jao=i(Dt),foe=n(Dt,"P",{});var QGr=s(foe);Dao=r(QGr,"Instantiate one of the base model classes of the library from a pretrained model."),QGr.forEach(t),Gao=i(Dt),Xa=n(Dt,"P",{});var uE=s(Xa);Oao=r(uE,"The model class to instantiate is selected based on the "),moe=n(uE,"CODE",{});var WGr=s(moe);Vao=r(WGr,"model_type"),WGr.forEach(t),Xao=r(uE,` property of the config object (either
passed as an argument or loaded from `),goe=n(uE,"CODE",{});var HGr=s(goe);zao=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),Qao=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=n(uE,"CODE",{});var UGr=s(hoe);Wao=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),Hao=r(uE,":"),uE.forEach(t),Uao=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var e4e=s(Qh);poe=n(e4e,"STRONG",{});var JGr=s(poe);Jao=r(JGr,"albert"),JGr.forEach(t),Yao=r(e4e," \u2014 "),UR=n(e4e,"A",{href:!0});var YGr=s(UR);Kao=r(YGr,"AlbertModel"),YGr.forEach(t),Zao=r(e4e," (ALBERT model)"),e4e.forEach(t),eno=i(M),Wh=n(M,"LI",{});var o4e=s(Wh);_oe=n(o4e,"STRONG",{});var KGr=s(_oe);ono=r(KGr,"bart"),KGr.forEach(t),rno=r(o4e," \u2014 "),JR=n(o4e,"A",{href:!0});var ZGr=s(JR);tno=r(ZGr,"BartModel"),ZGr.forEach(t),ano=r(o4e," (BART model)"),o4e.forEach(t),nno=i(M),Hh=n(M,"LI",{});var r4e=s(Hh);uoe=n(r4e,"STRONG",{});var eOr=s(uoe);sno=r(eOr,"beit"),eOr.forEach(t),lno=r(r4e," \u2014 "),YR=n(r4e,"A",{href:!0});var oOr=s(YR);ino=r(oOr,"BeitModel"),oOr.forEach(t),dno=r(r4e," (BEiT model)"),r4e.forEach(t),cno=i(M),Uh=n(M,"LI",{});var t4e=s(Uh);boe=n(t4e,"STRONG",{});var rOr=s(boe);fno=r(rOr,"bert"),rOr.forEach(t),mno=r(t4e," \u2014 "),KR=n(t4e,"A",{href:!0});var tOr=s(KR);gno=r(tOr,"BertModel"),tOr.forEach(t),hno=r(t4e," (BERT model)"),t4e.forEach(t),pno=i(M),Jh=n(M,"LI",{});var a4e=s(Jh);Foe=n(a4e,"STRONG",{});var aOr=s(Foe);_no=r(aOr,"bert-generation"),aOr.forEach(t),uno=r(a4e," \u2014 "),ZR=n(a4e,"A",{href:!0});var nOr=s(ZR);bno=r(nOr,"BertGenerationEncoder"),nOr.forEach(t),Fno=r(a4e," (Bert Generation model)"),a4e.forEach(t),vno=i(M),Yh=n(M,"LI",{});var n4e=s(Yh);voe=n(n4e,"STRONG",{});var sOr=s(voe);Tno=r(sOr,"big_bird"),sOr.forEach(t),Mno=r(n4e," \u2014 "),eB=n(n4e,"A",{href:!0});var lOr=s(eB);Eno=r(lOr,"BigBirdModel"),lOr.forEach(t),Cno=r(n4e," (BigBird model)"),n4e.forEach(t),wno=i(M),Kh=n(M,"LI",{});var s4e=s(Kh);Toe=n(s4e,"STRONG",{});var iOr=s(Toe);Ano=r(iOr,"bigbird_pegasus"),iOr.forEach(t),yno=r(s4e," \u2014 "),oB=n(s4e,"A",{href:!0});var dOr=s(oB);Lno=r(dOr,"BigBirdPegasusModel"),dOr.forEach(t),xno=r(s4e," (BigBirdPegasus model)"),s4e.forEach(t),kno=i(M),Zh=n(M,"LI",{});var l4e=s(Zh);Moe=n(l4e,"STRONG",{});var cOr=s(Moe);Sno=r(cOr,"blenderbot"),cOr.forEach(t),Rno=r(l4e," \u2014 "),rB=n(l4e,"A",{href:!0});var fOr=s(rB);Bno=r(fOr,"BlenderbotModel"),fOr.forEach(t),Pno=r(l4e," (Blenderbot model)"),l4e.forEach(t),$no=i(M),ep=n(M,"LI",{});var i4e=s(ep);Eoe=n(i4e,"STRONG",{});var mOr=s(Eoe);Ino=r(mOr,"blenderbot-small"),mOr.forEach(t),qno=r(i4e," \u2014 "),tB=n(i4e,"A",{href:!0});var gOr=s(tB);Nno=r(gOr,"BlenderbotSmallModel"),gOr.forEach(t),jno=r(i4e," (BlenderbotSmall model)"),i4e.forEach(t),Dno=i(M),op=n(M,"LI",{});var d4e=s(op);Coe=n(d4e,"STRONG",{});var hOr=s(Coe);Gno=r(hOr,"camembert"),hOr.forEach(t),Ono=r(d4e," \u2014 "),aB=n(d4e,"A",{href:!0});var pOr=s(aB);Vno=r(pOr,"CamembertModel"),pOr.forEach(t),Xno=r(d4e," (CamemBERT model)"),d4e.forEach(t),zno=i(M),rp=n(M,"LI",{});var c4e=s(rp);woe=n(c4e,"STRONG",{});var _Or=s(woe);Qno=r(_Or,"canine"),_Or.forEach(t),Wno=r(c4e," \u2014 "),nB=n(c4e,"A",{href:!0});var uOr=s(nB);Hno=r(uOr,"CanineModel"),uOr.forEach(t),Uno=r(c4e," (Canine model)"),c4e.forEach(t),Jno=i(M),tp=n(M,"LI",{});var f4e=s(tp);Aoe=n(f4e,"STRONG",{});var bOr=s(Aoe);Yno=r(bOr,"clip"),bOr.forEach(t),Kno=r(f4e," \u2014 "),sB=n(f4e,"A",{href:!0});var FOr=s(sB);Zno=r(FOr,"CLIPModel"),FOr.forEach(t),eso=r(f4e," (CLIP model)"),f4e.forEach(t),oso=i(M),ap=n(M,"LI",{});var m4e=s(ap);yoe=n(m4e,"STRONG",{});var vOr=s(yoe);rso=r(vOr,"convbert"),vOr.forEach(t),tso=r(m4e," \u2014 "),lB=n(m4e,"A",{href:!0});var TOr=s(lB);aso=r(TOr,"ConvBertModel"),TOr.forEach(t),nso=r(m4e," (ConvBERT model)"),m4e.forEach(t),sso=i(M),np=n(M,"LI",{});var g4e=s(np);Loe=n(g4e,"STRONG",{});var MOr=s(Loe);lso=r(MOr,"convnext"),MOr.forEach(t),iso=r(g4e," \u2014 "),iB=n(g4e,"A",{href:!0});var EOr=s(iB);dso=r(EOr,"ConvNextModel"),EOr.forEach(t),cso=r(g4e," (ConvNext model)"),g4e.forEach(t),fso=i(M),sp=n(M,"LI",{});var h4e=s(sp);xoe=n(h4e,"STRONG",{});var COr=s(xoe);mso=r(COr,"ctrl"),COr.forEach(t),gso=r(h4e," \u2014 "),dB=n(h4e,"A",{href:!0});var wOr=s(dB);hso=r(wOr,"CTRLModel"),wOr.forEach(t),pso=r(h4e," (CTRL model)"),h4e.forEach(t),_so=i(M),lp=n(M,"LI",{});var p4e=s(lp);koe=n(p4e,"STRONG",{});var AOr=s(koe);uso=r(AOr,"data2vec-audio"),AOr.forEach(t),bso=r(p4e," \u2014 "),cB=n(p4e,"A",{href:!0});var yOr=s(cB);Fso=r(yOr,"Data2VecAudioModel"),yOr.forEach(t),vso=r(p4e," (Data2VecAudio model)"),p4e.forEach(t),Tso=i(M),ip=n(M,"LI",{});var _4e=s(ip);Soe=n(_4e,"STRONG",{});var LOr=s(Soe);Mso=r(LOr,"data2vec-text"),LOr.forEach(t),Eso=r(_4e," \u2014 "),fB=n(_4e,"A",{href:!0});var xOr=s(fB);Cso=r(xOr,"Data2VecTextModel"),xOr.forEach(t),wso=r(_4e," (Data2VecText model)"),_4e.forEach(t),Aso=i(M),dp=n(M,"LI",{});var u4e=s(dp);Roe=n(u4e,"STRONG",{});var kOr=s(Roe);yso=r(kOr,"deberta"),kOr.forEach(t),Lso=r(u4e," \u2014 "),mB=n(u4e,"A",{href:!0});var SOr=s(mB);xso=r(SOr,"DebertaModel"),SOr.forEach(t),kso=r(u4e," (DeBERTa model)"),u4e.forEach(t),Sso=i(M),cp=n(M,"LI",{});var b4e=s(cp);Boe=n(b4e,"STRONG",{});var ROr=s(Boe);Rso=r(ROr,"deberta-v2"),ROr.forEach(t),Bso=r(b4e," \u2014 "),gB=n(b4e,"A",{href:!0});var BOr=s(gB);Pso=r(BOr,"DebertaV2Model"),BOr.forEach(t),$so=r(b4e," (DeBERTa-v2 model)"),b4e.forEach(t),Iso=i(M),fp=n(M,"LI",{});var F4e=s(fp);Poe=n(F4e,"STRONG",{});var POr=s(Poe);qso=r(POr,"decision_transformer"),POr.forEach(t),Nso=r(F4e," \u2014 "),hB=n(F4e,"A",{href:!0});var $Or=s(hB);jso=r($Or,"DecisionTransformerModel"),$Or.forEach(t),Dso=r(F4e," (Decision Transformer model)"),F4e.forEach(t),Gso=i(M),mp=n(M,"LI",{});var v4e=s(mp);$oe=n(v4e,"STRONG",{});var IOr=s($oe);Oso=r(IOr,"deit"),IOr.forEach(t),Vso=r(v4e," \u2014 "),pB=n(v4e,"A",{href:!0});var qOr=s(pB);Xso=r(qOr,"DeiTModel"),qOr.forEach(t),zso=r(v4e," (DeiT model)"),v4e.forEach(t),Qso=i(M),gp=n(M,"LI",{});var T4e=s(gp);Ioe=n(T4e,"STRONG",{});var NOr=s(Ioe);Wso=r(NOr,"detr"),NOr.forEach(t),Hso=r(T4e," \u2014 "),_B=n(T4e,"A",{href:!0});var jOr=s(_B);Uso=r(jOr,"DetrModel"),jOr.forEach(t),Jso=r(T4e," (DETR model)"),T4e.forEach(t),Yso=i(M),hp=n(M,"LI",{});var M4e=s(hp);qoe=n(M4e,"STRONG",{});var DOr=s(qoe);Kso=r(DOr,"distilbert"),DOr.forEach(t),Zso=r(M4e," \u2014 "),uB=n(M4e,"A",{href:!0});var GOr=s(uB);elo=r(GOr,"DistilBertModel"),GOr.forEach(t),olo=r(M4e," (DistilBERT model)"),M4e.forEach(t),rlo=i(M),pp=n(M,"LI",{});var E4e=s(pp);Noe=n(E4e,"STRONG",{});var OOr=s(Noe);tlo=r(OOr,"dpr"),OOr.forEach(t),alo=r(E4e," \u2014 "),bB=n(E4e,"A",{href:!0});var VOr=s(bB);nlo=r(VOr,"DPRQuestionEncoder"),VOr.forEach(t),slo=r(E4e," (DPR model)"),E4e.forEach(t),llo=i(M),_p=n(M,"LI",{});var C4e=s(_p);joe=n(C4e,"STRONG",{});var XOr=s(joe);ilo=r(XOr,"dpt"),XOr.forEach(t),dlo=r(C4e," \u2014 "),FB=n(C4e,"A",{href:!0});var zOr=s(FB);clo=r(zOr,"DPTModel"),zOr.forEach(t),flo=r(C4e," (DPT model)"),C4e.forEach(t),mlo=i(M),up=n(M,"LI",{});var w4e=s(up);Doe=n(w4e,"STRONG",{});var QOr=s(Doe);glo=r(QOr,"electra"),QOr.forEach(t),hlo=r(w4e," \u2014 "),vB=n(w4e,"A",{href:!0});var WOr=s(vB);plo=r(WOr,"ElectraModel"),WOr.forEach(t),_lo=r(w4e," (ELECTRA model)"),w4e.forEach(t),ulo=i(M),bp=n(M,"LI",{});var A4e=s(bp);Goe=n(A4e,"STRONG",{});var HOr=s(Goe);blo=r(HOr,"flaubert"),HOr.forEach(t),Flo=r(A4e," \u2014 "),TB=n(A4e,"A",{href:!0});var UOr=s(TB);vlo=r(UOr,"FlaubertModel"),UOr.forEach(t),Tlo=r(A4e," (FlauBERT model)"),A4e.forEach(t),Mlo=i(M),Fp=n(M,"LI",{});var y4e=s(Fp);Ooe=n(y4e,"STRONG",{});var JOr=s(Ooe);Elo=r(JOr,"fnet"),JOr.forEach(t),Clo=r(y4e," \u2014 "),MB=n(y4e,"A",{href:!0});var YOr=s(MB);wlo=r(YOr,"FNetModel"),YOr.forEach(t),Alo=r(y4e," (FNet model)"),y4e.forEach(t),ylo=i(M),vp=n(M,"LI",{});var L4e=s(vp);Voe=n(L4e,"STRONG",{});var KOr=s(Voe);Llo=r(KOr,"fsmt"),KOr.forEach(t),xlo=r(L4e," \u2014 "),EB=n(L4e,"A",{href:!0});var ZOr=s(EB);klo=r(ZOr,"FSMTModel"),ZOr.forEach(t),Slo=r(L4e," (FairSeq Machine-Translation model)"),L4e.forEach(t),Rlo=i(M),js=n(M,"LI",{});var r9=s(js);Xoe=n(r9,"STRONG",{});var eVr=s(Xoe);Blo=r(eVr,"funnel"),eVr.forEach(t),Plo=r(r9," \u2014 "),CB=n(r9,"A",{href:!0});var oVr=s(CB);$lo=r(oVr,"FunnelModel"),oVr.forEach(t),Ilo=r(r9," or "),wB=n(r9,"A",{href:!0});var rVr=s(wB);qlo=r(rVr,"FunnelBaseModel"),rVr.forEach(t),Nlo=r(r9," (Funnel Transformer model)"),r9.forEach(t),jlo=i(M),Tp=n(M,"LI",{});var x4e=s(Tp);zoe=n(x4e,"STRONG",{});var tVr=s(zoe);Dlo=r(tVr,"glpn"),tVr.forEach(t),Glo=r(x4e," \u2014 "),AB=n(x4e,"A",{href:!0});var aVr=s(AB);Olo=r(aVr,"GLPNModel"),aVr.forEach(t),Vlo=r(x4e," (GLPN model)"),x4e.forEach(t),Xlo=i(M),Mp=n(M,"LI",{});var k4e=s(Mp);Qoe=n(k4e,"STRONG",{});var nVr=s(Qoe);zlo=r(nVr,"gpt2"),nVr.forEach(t),Qlo=r(k4e," \u2014 "),yB=n(k4e,"A",{href:!0});var sVr=s(yB);Wlo=r(sVr,"GPT2Model"),sVr.forEach(t),Hlo=r(k4e," (OpenAI GPT-2 model)"),k4e.forEach(t),Ulo=i(M),Ep=n(M,"LI",{});var S4e=s(Ep);Woe=n(S4e,"STRONG",{});var lVr=s(Woe);Jlo=r(lVr,"gpt_neo"),lVr.forEach(t),Ylo=r(S4e," \u2014 "),LB=n(S4e,"A",{href:!0});var iVr=s(LB);Klo=r(iVr,"GPTNeoModel"),iVr.forEach(t),Zlo=r(S4e," (GPT Neo model)"),S4e.forEach(t),eio=i(M),Cp=n(M,"LI",{});var R4e=s(Cp);Hoe=n(R4e,"STRONG",{});var dVr=s(Hoe);oio=r(dVr,"gptj"),dVr.forEach(t),rio=r(R4e," \u2014 "),xB=n(R4e,"A",{href:!0});var cVr=s(xB);tio=r(cVr,"GPTJModel"),cVr.forEach(t),aio=r(R4e," (GPT-J model)"),R4e.forEach(t),nio=i(M),wp=n(M,"LI",{});var B4e=s(wp);Uoe=n(B4e,"STRONG",{});var fVr=s(Uoe);sio=r(fVr,"hubert"),fVr.forEach(t),lio=r(B4e," \u2014 "),kB=n(B4e,"A",{href:!0});var mVr=s(kB);iio=r(mVr,"HubertModel"),mVr.forEach(t),dio=r(B4e," (Hubert model)"),B4e.forEach(t),cio=i(M),Ap=n(M,"LI",{});var P4e=s(Ap);Joe=n(P4e,"STRONG",{});var gVr=s(Joe);fio=r(gVr,"ibert"),gVr.forEach(t),mio=r(P4e," \u2014 "),SB=n(P4e,"A",{href:!0});var hVr=s(SB);gio=r(hVr,"IBertModel"),hVr.forEach(t),hio=r(P4e," (I-BERT model)"),P4e.forEach(t),pio=i(M),yp=n(M,"LI",{});var $4e=s(yp);Yoe=n($4e,"STRONG",{});var pVr=s(Yoe);_io=r(pVr,"imagegpt"),pVr.forEach(t),uio=r($4e," \u2014 "),RB=n($4e,"A",{href:!0});var _Vr=s(RB);bio=r(_Vr,"ImageGPTModel"),_Vr.forEach(t),Fio=r($4e," (ImageGPT model)"),$4e.forEach(t),vio=i(M),Lp=n(M,"LI",{});var I4e=s(Lp);Koe=n(I4e,"STRONG",{});var uVr=s(Koe);Tio=r(uVr,"layoutlm"),uVr.forEach(t),Mio=r(I4e," \u2014 "),BB=n(I4e,"A",{href:!0});var bVr=s(BB);Eio=r(bVr,"LayoutLMModel"),bVr.forEach(t),Cio=r(I4e," (LayoutLM model)"),I4e.forEach(t),wio=i(M),xp=n(M,"LI",{});var q4e=s(xp);Zoe=n(q4e,"STRONG",{});var FVr=s(Zoe);Aio=r(FVr,"layoutlmv2"),FVr.forEach(t),yio=r(q4e," \u2014 "),PB=n(q4e,"A",{href:!0});var vVr=s(PB);Lio=r(vVr,"LayoutLMv2Model"),vVr.forEach(t),xio=r(q4e," (LayoutLMv2 model)"),q4e.forEach(t),kio=i(M),kp=n(M,"LI",{});var N4e=s(kp);ere=n(N4e,"STRONG",{});var TVr=s(ere);Sio=r(TVr,"led"),TVr.forEach(t),Rio=r(N4e," \u2014 "),$B=n(N4e,"A",{href:!0});var MVr=s($B);Bio=r(MVr,"LEDModel"),MVr.forEach(t),Pio=r(N4e," (LED model)"),N4e.forEach(t),$io=i(M),Sp=n(M,"LI",{});var j4e=s(Sp);ore=n(j4e,"STRONG",{});var EVr=s(ore);Iio=r(EVr,"longformer"),EVr.forEach(t),qio=r(j4e," \u2014 "),IB=n(j4e,"A",{href:!0});var CVr=s(IB);Nio=r(CVr,"LongformerModel"),CVr.forEach(t),jio=r(j4e," (Longformer model)"),j4e.forEach(t),Dio=i(M),Rp=n(M,"LI",{});var D4e=s(Rp);rre=n(D4e,"STRONG",{});var wVr=s(rre);Gio=r(wVr,"luke"),wVr.forEach(t),Oio=r(D4e," \u2014 "),qB=n(D4e,"A",{href:!0});var AVr=s(qB);Vio=r(AVr,"LukeModel"),AVr.forEach(t),Xio=r(D4e," (LUKE model)"),D4e.forEach(t),zio=i(M),Bp=n(M,"LI",{});var G4e=s(Bp);tre=n(G4e,"STRONG",{});var yVr=s(tre);Qio=r(yVr,"lxmert"),yVr.forEach(t),Wio=r(G4e," \u2014 "),NB=n(G4e,"A",{href:!0});var LVr=s(NB);Hio=r(LVr,"LxmertModel"),LVr.forEach(t),Uio=r(G4e," (LXMERT model)"),G4e.forEach(t),Jio=i(M),Pp=n(M,"LI",{});var O4e=s(Pp);are=n(O4e,"STRONG",{});var xVr=s(are);Yio=r(xVr,"m2m_100"),xVr.forEach(t),Kio=r(O4e," \u2014 "),jB=n(O4e,"A",{href:!0});var kVr=s(jB);Zio=r(kVr,"M2M100Model"),kVr.forEach(t),edo=r(O4e," (M2M100 model)"),O4e.forEach(t),odo=i(M),$p=n(M,"LI",{});var V4e=s($p);nre=n(V4e,"STRONG",{});var SVr=s(nre);rdo=r(SVr,"marian"),SVr.forEach(t),tdo=r(V4e," \u2014 "),DB=n(V4e,"A",{href:!0});var RVr=s(DB);ado=r(RVr,"MarianModel"),RVr.forEach(t),ndo=r(V4e," (Marian model)"),V4e.forEach(t),sdo=i(M),Ip=n(M,"LI",{});var X4e=s(Ip);sre=n(X4e,"STRONG",{});var BVr=s(sre);ldo=r(BVr,"maskformer"),BVr.forEach(t),ido=r(X4e," \u2014 "),GB=n(X4e,"A",{href:!0});var PVr=s(GB);ddo=r(PVr,"MaskFormerModel"),PVr.forEach(t),cdo=r(X4e," (MaskFormer model)"),X4e.forEach(t),fdo=i(M),qp=n(M,"LI",{});var z4e=s(qp);lre=n(z4e,"STRONG",{});var $Vr=s(lre);mdo=r($Vr,"mbart"),$Vr.forEach(t),gdo=r(z4e," \u2014 "),OB=n(z4e,"A",{href:!0});var IVr=s(OB);hdo=r(IVr,"MBartModel"),IVr.forEach(t),pdo=r(z4e," (mBART model)"),z4e.forEach(t),_do=i(M),Np=n(M,"LI",{});var Q4e=s(Np);ire=n(Q4e,"STRONG",{});var qVr=s(ire);udo=r(qVr,"megatron-bert"),qVr.forEach(t),bdo=r(Q4e," \u2014 "),VB=n(Q4e,"A",{href:!0});var NVr=s(VB);Fdo=r(NVr,"MegatronBertModel"),NVr.forEach(t),vdo=r(Q4e," (MegatronBert model)"),Q4e.forEach(t),Tdo=i(M),jp=n(M,"LI",{});var W4e=s(jp);dre=n(W4e,"STRONG",{});var jVr=s(dre);Mdo=r(jVr,"mobilebert"),jVr.forEach(t),Edo=r(W4e," \u2014 "),XB=n(W4e,"A",{href:!0});var DVr=s(XB);Cdo=r(DVr,"MobileBertModel"),DVr.forEach(t),wdo=r(W4e," (MobileBERT model)"),W4e.forEach(t),Ado=i(M),Dp=n(M,"LI",{});var H4e=s(Dp);cre=n(H4e,"STRONG",{});var GVr=s(cre);ydo=r(GVr,"mpnet"),GVr.forEach(t),Ldo=r(H4e," \u2014 "),zB=n(H4e,"A",{href:!0});var OVr=s(zB);xdo=r(OVr,"MPNetModel"),OVr.forEach(t),kdo=r(H4e," (MPNet model)"),H4e.forEach(t),Sdo=i(M),Gp=n(M,"LI",{});var U4e=s(Gp);fre=n(U4e,"STRONG",{});var VVr=s(fre);Rdo=r(VVr,"mt5"),VVr.forEach(t),Bdo=r(U4e," \u2014 "),QB=n(U4e,"A",{href:!0});var XVr=s(QB);Pdo=r(XVr,"MT5Model"),XVr.forEach(t),$do=r(U4e," (mT5 model)"),U4e.forEach(t),Ido=i(M),Op=n(M,"LI",{});var J4e=s(Op);mre=n(J4e,"STRONG",{});var zVr=s(mre);qdo=r(zVr,"nystromformer"),zVr.forEach(t),Ndo=r(J4e," \u2014 "),WB=n(J4e,"A",{href:!0});var QVr=s(WB);jdo=r(QVr,"NystromformerModel"),QVr.forEach(t),Ddo=r(J4e," (Nystromformer model)"),J4e.forEach(t),Gdo=i(M),Vp=n(M,"LI",{});var Y4e=s(Vp);gre=n(Y4e,"STRONG",{});var WVr=s(gre);Odo=r(WVr,"openai-gpt"),WVr.forEach(t),Vdo=r(Y4e," \u2014 "),HB=n(Y4e,"A",{href:!0});var HVr=s(HB);Xdo=r(HVr,"OpenAIGPTModel"),HVr.forEach(t),zdo=r(Y4e," (OpenAI GPT model)"),Y4e.forEach(t),Qdo=i(M),Xp=n(M,"LI",{});var K4e=s(Xp);hre=n(K4e,"STRONG",{});var UVr=s(hre);Wdo=r(UVr,"pegasus"),UVr.forEach(t),Hdo=r(K4e," \u2014 "),UB=n(K4e,"A",{href:!0});var JVr=s(UB);Udo=r(JVr,"PegasusModel"),JVr.forEach(t),Jdo=r(K4e," (Pegasus model)"),K4e.forEach(t),Ydo=i(M),zp=n(M,"LI",{});var Z4e=s(zp);pre=n(Z4e,"STRONG",{});var YVr=s(pre);Kdo=r(YVr,"perceiver"),YVr.forEach(t),Zdo=r(Z4e," \u2014 "),JB=n(Z4e,"A",{href:!0});var KVr=s(JB);eco=r(KVr,"PerceiverModel"),KVr.forEach(t),oco=r(Z4e," (Perceiver model)"),Z4e.forEach(t),rco=i(M),Qp=n(M,"LI",{});var eEe=s(Qp);_re=n(eEe,"STRONG",{});var ZVr=s(_re);tco=r(ZVr,"plbart"),ZVr.forEach(t),aco=r(eEe," \u2014 "),YB=n(eEe,"A",{href:!0});var eXr=s(YB);nco=r(eXr,"PLBartModel"),eXr.forEach(t),sco=r(eEe," (PLBart model)"),eEe.forEach(t),lco=i(M),Wp=n(M,"LI",{});var oEe=s(Wp);ure=n(oEe,"STRONG",{});var oXr=s(ure);ico=r(oXr,"poolformer"),oXr.forEach(t),dco=r(oEe," \u2014 "),KB=n(oEe,"A",{href:!0});var rXr=s(KB);cco=r(rXr,"PoolFormerModel"),rXr.forEach(t),fco=r(oEe," (PoolFormer model)"),oEe.forEach(t),mco=i(M),Hp=n(M,"LI",{});var rEe=s(Hp);bre=n(rEe,"STRONG",{});var tXr=s(bre);gco=r(tXr,"prophetnet"),tXr.forEach(t),hco=r(rEe," \u2014 "),ZB=n(rEe,"A",{href:!0});var aXr=s(ZB);pco=r(aXr,"ProphetNetModel"),aXr.forEach(t),_co=r(rEe," (ProphetNet model)"),rEe.forEach(t),uco=i(M),Up=n(M,"LI",{});var tEe=s(Up);Fre=n(tEe,"STRONG",{});var nXr=s(Fre);bco=r(nXr,"qdqbert"),nXr.forEach(t),Fco=r(tEe," \u2014 "),eP=n(tEe,"A",{href:!0});var sXr=s(eP);vco=r(sXr,"QDQBertModel"),sXr.forEach(t),Tco=r(tEe," (QDQBert model)"),tEe.forEach(t),Mco=i(M),Jp=n(M,"LI",{});var aEe=s(Jp);vre=n(aEe,"STRONG",{});var lXr=s(vre);Eco=r(lXr,"reformer"),lXr.forEach(t),Cco=r(aEe," \u2014 "),oP=n(aEe,"A",{href:!0});var iXr=s(oP);wco=r(iXr,"ReformerModel"),iXr.forEach(t),Aco=r(aEe," (Reformer model)"),aEe.forEach(t),yco=i(M),Yp=n(M,"LI",{});var nEe=s(Yp);Tre=n(nEe,"STRONG",{});var dXr=s(Tre);Lco=r(dXr,"rembert"),dXr.forEach(t),xco=r(nEe," \u2014 "),rP=n(nEe,"A",{href:!0});var cXr=s(rP);kco=r(cXr,"RemBertModel"),cXr.forEach(t),Sco=r(nEe," (RemBERT model)"),nEe.forEach(t),Rco=i(M),Kp=n(M,"LI",{});var sEe=s(Kp);Mre=n(sEe,"STRONG",{});var fXr=s(Mre);Bco=r(fXr,"resnet"),fXr.forEach(t),Pco=r(sEe," \u2014 "),tP=n(sEe,"A",{href:!0});var mXr=s(tP);$co=r(mXr,"ResNetModel"),mXr.forEach(t),Ico=r(sEe," (ResNet model)"),sEe.forEach(t),qco=i(M),Zp=n(M,"LI",{});var lEe=s(Zp);Ere=n(lEe,"STRONG",{});var gXr=s(Ere);Nco=r(gXr,"retribert"),gXr.forEach(t),jco=r(lEe," \u2014 "),aP=n(lEe,"A",{href:!0});var hXr=s(aP);Dco=r(hXr,"RetriBertModel"),hXr.forEach(t),Gco=r(lEe," (RetriBERT model)"),lEe.forEach(t),Oco=i(M),e_=n(M,"LI",{});var iEe=s(e_);Cre=n(iEe,"STRONG",{});var pXr=s(Cre);Vco=r(pXr,"roberta"),pXr.forEach(t),Xco=r(iEe," \u2014 "),nP=n(iEe,"A",{href:!0});var _Xr=s(nP);zco=r(_Xr,"RobertaModel"),_Xr.forEach(t),Qco=r(iEe," (RoBERTa model)"),iEe.forEach(t),Wco=i(M),o_=n(M,"LI",{});var dEe=s(o_);wre=n(dEe,"STRONG",{});var uXr=s(wre);Hco=r(uXr,"roformer"),uXr.forEach(t),Uco=r(dEe," \u2014 "),sP=n(dEe,"A",{href:!0});var bXr=s(sP);Jco=r(bXr,"RoFormerModel"),bXr.forEach(t),Yco=r(dEe," (RoFormer model)"),dEe.forEach(t),Kco=i(M),r_=n(M,"LI",{});var cEe=s(r_);Are=n(cEe,"STRONG",{});var FXr=s(Are);Zco=r(FXr,"segformer"),FXr.forEach(t),efo=r(cEe," \u2014 "),lP=n(cEe,"A",{href:!0});var vXr=s(lP);ofo=r(vXr,"SegformerModel"),vXr.forEach(t),rfo=r(cEe," (SegFormer model)"),cEe.forEach(t),tfo=i(M),t_=n(M,"LI",{});var fEe=s(t_);yre=n(fEe,"STRONG",{});var TXr=s(yre);afo=r(TXr,"sew"),TXr.forEach(t),nfo=r(fEe," \u2014 "),iP=n(fEe,"A",{href:!0});var MXr=s(iP);sfo=r(MXr,"SEWModel"),MXr.forEach(t),lfo=r(fEe," (SEW model)"),fEe.forEach(t),ifo=i(M),a_=n(M,"LI",{});var mEe=s(a_);Lre=n(mEe,"STRONG",{});var EXr=s(Lre);dfo=r(EXr,"sew-d"),EXr.forEach(t),cfo=r(mEe," \u2014 "),dP=n(mEe,"A",{href:!0});var CXr=s(dP);ffo=r(CXr,"SEWDModel"),CXr.forEach(t),mfo=r(mEe," (SEW-D model)"),mEe.forEach(t),gfo=i(M),n_=n(M,"LI",{});var gEe=s(n_);xre=n(gEe,"STRONG",{});var wXr=s(xre);hfo=r(wXr,"speech_to_text"),wXr.forEach(t),pfo=r(gEe," \u2014 "),cP=n(gEe,"A",{href:!0});var AXr=s(cP);_fo=r(AXr,"Speech2TextModel"),AXr.forEach(t),ufo=r(gEe," (Speech2Text model)"),gEe.forEach(t),bfo=i(M),s_=n(M,"LI",{});var hEe=s(s_);kre=n(hEe,"STRONG",{});var yXr=s(kre);Ffo=r(yXr,"splinter"),yXr.forEach(t),vfo=r(hEe," \u2014 "),fP=n(hEe,"A",{href:!0});var LXr=s(fP);Tfo=r(LXr,"SplinterModel"),LXr.forEach(t),Mfo=r(hEe," (Splinter model)"),hEe.forEach(t),Efo=i(M),l_=n(M,"LI",{});var pEe=s(l_);Sre=n(pEe,"STRONG",{});var xXr=s(Sre);Cfo=r(xXr,"squeezebert"),xXr.forEach(t),wfo=r(pEe," \u2014 "),mP=n(pEe,"A",{href:!0});var kXr=s(mP);Afo=r(kXr,"SqueezeBertModel"),kXr.forEach(t),yfo=r(pEe," (SqueezeBERT model)"),pEe.forEach(t),Lfo=i(M),i_=n(M,"LI",{});var _Ee=s(i_);Rre=n(_Ee,"STRONG",{});var SXr=s(Rre);xfo=r(SXr,"swin"),SXr.forEach(t),kfo=r(_Ee," \u2014 "),gP=n(_Ee,"A",{href:!0});var RXr=s(gP);Sfo=r(RXr,"SwinModel"),RXr.forEach(t),Rfo=r(_Ee," (Swin model)"),_Ee.forEach(t),Bfo=i(M),d_=n(M,"LI",{});var uEe=s(d_);Bre=n(uEe,"STRONG",{});var BXr=s(Bre);Pfo=r(BXr,"t5"),BXr.forEach(t),$fo=r(uEe," \u2014 "),hP=n(uEe,"A",{href:!0});var PXr=s(hP);Ifo=r(PXr,"T5Model"),PXr.forEach(t),qfo=r(uEe," (T5 model)"),uEe.forEach(t),Nfo=i(M),c_=n(M,"LI",{});var bEe=s(c_);Pre=n(bEe,"STRONG",{});var $Xr=s(Pre);jfo=r($Xr,"tapas"),$Xr.forEach(t),Dfo=r(bEe," \u2014 "),pP=n(bEe,"A",{href:!0});var IXr=s(pP);Gfo=r(IXr,"TapasModel"),IXr.forEach(t),Ofo=r(bEe," (TAPAS model)"),bEe.forEach(t),Vfo=i(M),f_=n(M,"LI",{});var FEe=s(f_);$re=n(FEe,"STRONG",{});var qXr=s($re);Xfo=r(qXr,"transfo-xl"),qXr.forEach(t),zfo=r(FEe," \u2014 "),_P=n(FEe,"A",{href:!0});var NXr=s(_P);Qfo=r(NXr,"TransfoXLModel"),NXr.forEach(t),Wfo=r(FEe," (Transformer-XL model)"),FEe.forEach(t),Hfo=i(M),m_=n(M,"LI",{});var vEe=s(m_);Ire=n(vEe,"STRONG",{});var jXr=s(Ire);Ufo=r(jXr,"unispeech"),jXr.forEach(t),Jfo=r(vEe," \u2014 "),uP=n(vEe,"A",{href:!0});var DXr=s(uP);Yfo=r(DXr,"UniSpeechModel"),DXr.forEach(t),Kfo=r(vEe," (UniSpeech model)"),vEe.forEach(t),Zfo=i(M),g_=n(M,"LI",{});var TEe=s(g_);qre=n(TEe,"STRONG",{});var GXr=s(qre);emo=r(GXr,"unispeech-sat"),GXr.forEach(t),omo=r(TEe," \u2014 "),bP=n(TEe,"A",{href:!0});var OXr=s(bP);rmo=r(OXr,"UniSpeechSatModel"),OXr.forEach(t),tmo=r(TEe," (UniSpeechSat model)"),TEe.forEach(t),amo=i(M),h_=n(M,"LI",{});var MEe=s(h_);Nre=n(MEe,"STRONG",{});var VXr=s(Nre);nmo=r(VXr,"van"),VXr.forEach(t),smo=r(MEe," \u2014 "),FP=n(MEe,"A",{href:!0});var XXr=s(FP);lmo=r(XXr,"VanModel"),XXr.forEach(t),imo=r(MEe," (VAN model)"),MEe.forEach(t),dmo=i(M),p_=n(M,"LI",{});var EEe=s(p_);jre=n(EEe,"STRONG",{});var zXr=s(jre);cmo=r(zXr,"vilt"),zXr.forEach(t),fmo=r(EEe," \u2014 "),vP=n(EEe,"A",{href:!0});var QXr=s(vP);mmo=r(QXr,"ViltModel"),QXr.forEach(t),gmo=r(EEe," (ViLT model)"),EEe.forEach(t),hmo=i(M),__=n(M,"LI",{});var CEe=s(__);Dre=n(CEe,"STRONG",{});var WXr=s(Dre);pmo=r(WXr,"vision-text-dual-encoder"),WXr.forEach(t),_mo=r(CEe," \u2014 "),TP=n(CEe,"A",{href:!0});var HXr=s(TP);umo=r(HXr,"VisionTextDualEncoderModel"),HXr.forEach(t),bmo=r(CEe," (VisionTextDualEncoder model)"),CEe.forEach(t),Fmo=i(M),u_=n(M,"LI",{});var wEe=s(u_);Gre=n(wEe,"STRONG",{});var UXr=s(Gre);vmo=r(UXr,"visual_bert"),UXr.forEach(t),Tmo=r(wEe," \u2014 "),MP=n(wEe,"A",{href:!0});var JXr=s(MP);Mmo=r(JXr,"VisualBertModel"),JXr.forEach(t),Emo=r(wEe," (VisualBert model)"),wEe.forEach(t),Cmo=i(M),b_=n(M,"LI",{});var AEe=s(b_);Ore=n(AEe,"STRONG",{});var YXr=s(Ore);wmo=r(YXr,"vit"),YXr.forEach(t),Amo=r(AEe," \u2014 "),EP=n(AEe,"A",{href:!0});var KXr=s(EP);ymo=r(KXr,"ViTModel"),KXr.forEach(t),Lmo=r(AEe," (ViT model)"),AEe.forEach(t),xmo=i(M),F_=n(M,"LI",{});var yEe=s(F_);Vre=n(yEe,"STRONG",{});var ZXr=s(Vre);kmo=r(ZXr,"vit_mae"),ZXr.forEach(t),Smo=r(yEe," \u2014 "),CP=n(yEe,"A",{href:!0});var ezr=s(CP);Rmo=r(ezr,"ViTMAEModel"),ezr.forEach(t),Bmo=r(yEe," (ViTMAE model)"),yEe.forEach(t),Pmo=i(M),v_=n(M,"LI",{});var LEe=s(v_);Xre=n(LEe,"STRONG",{});var ozr=s(Xre);$mo=r(ozr,"wav2vec2"),ozr.forEach(t),Imo=r(LEe," \u2014 "),wP=n(LEe,"A",{href:!0});var rzr=s(wP);qmo=r(rzr,"Wav2Vec2Model"),rzr.forEach(t),Nmo=r(LEe," (Wav2Vec2 model)"),LEe.forEach(t),jmo=i(M),T_=n(M,"LI",{});var xEe=s(T_);zre=n(xEe,"STRONG",{});var tzr=s(zre);Dmo=r(tzr,"wavlm"),tzr.forEach(t),Gmo=r(xEe," \u2014 "),AP=n(xEe,"A",{href:!0});var azr=s(AP);Omo=r(azr,"WavLMModel"),azr.forEach(t),Vmo=r(xEe," (WavLM model)"),xEe.forEach(t),Xmo=i(M),M_=n(M,"LI",{});var kEe=s(M_);Qre=n(kEe,"STRONG",{});var nzr=s(Qre);zmo=r(nzr,"xglm"),nzr.forEach(t),Qmo=r(kEe," \u2014 "),yP=n(kEe,"A",{href:!0});var szr=s(yP);Wmo=r(szr,"XGLMModel"),szr.forEach(t),Hmo=r(kEe," (XGLM model)"),kEe.forEach(t),Umo=i(M),E_=n(M,"LI",{});var SEe=s(E_);Wre=n(SEe,"STRONG",{});var lzr=s(Wre);Jmo=r(lzr,"xlm"),lzr.forEach(t),Ymo=r(SEe," \u2014 "),LP=n(SEe,"A",{href:!0});var izr=s(LP);Kmo=r(izr,"XLMModel"),izr.forEach(t),Zmo=r(SEe," (XLM model)"),SEe.forEach(t),ego=i(M),C_=n(M,"LI",{});var REe=s(C_);Hre=n(REe,"STRONG",{});var dzr=s(Hre);ogo=r(dzr,"xlm-prophetnet"),dzr.forEach(t),rgo=r(REe," \u2014 "),xP=n(REe,"A",{href:!0});var czr=s(xP);tgo=r(czr,"XLMProphetNetModel"),czr.forEach(t),ago=r(REe," (XLMProphetNet model)"),REe.forEach(t),ngo=i(M),w_=n(M,"LI",{});var BEe=s(w_);Ure=n(BEe,"STRONG",{});var fzr=s(Ure);sgo=r(fzr,"xlm-roberta"),fzr.forEach(t),lgo=r(BEe," \u2014 "),kP=n(BEe,"A",{href:!0});var mzr=s(kP);igo=r(mzr,"XLMRobertaModel"),mzr.forEach(t),dgo=r(BEe," (XLM-RoBERTa model)"),BEe.forEach(t),cgo=i(M),A_=n(M,"LI",{});var PEe=s(A_);Jre=n(PEe,"STRONG",{});var gzr=s(Jre);fgo=r(gzr,"xlm-roberta-xl"),gzr.forEach(t),mgo=r(PEe," \u2014 "),SP=n(PEe,"A",{href:!0});var hzr=s(SP);ggo=r(hzr,"XLMRobertaXLModel"),hzr.forEach(t),hgo=r(PEe," (XLM-RoBERTa-XL model)"),PEe.forEach(t),pgo=i(M),y_=n(M,"LI",{});var $Ee=s(y_);Yre=n($Ee,"STRONG",{});var pzr=s(Yre);_go=r(pzr,"xlnet"),pzr.forEach(t),ugo=r($Ee," \u2014 "),RP=n($Ee,"A",{href:!0});var _zr=s(RP);bgo=r(_zr,"XLNetModel"),_zr.forEach(t),Fgo=r($Ee," (XLNet model)"),$Ee.forEach(t),vgo=i(M),L_=n(M,"LI",{});var IEe=s(L_);Kre=n(IEe,"STRONG",{});var uzr=s(Kre);Tgo=r(uzr,"yoso"),uzr.forEach(t),Mgo=r(IEe," \u2014 "),BP=n(IEe,"A",{href:!0});var bzr=s(BP);Ego=r(bzr,"YosoModel"),bzr.forEach(t),Cgo=r(IEe," (YOSO model)"),IEe.forEach(t),M.forEach(t),wgo=i(Dt),x_=n(Dt,"P",{});var qEe=s(x_);Ago=r(qEe,"The model is set in evaluation mode by default using "),Zre=n(qEe,"CODE",{});var Fzr=s(Zre);ygo=r(Fzr,"model.eval()"),Fzr.forEach(t),Lgo=r(qEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=n(qEe,"CODE",{});var vzr=s(ete);xgo=r(vzr,"model.train()"),vzr.forEach(t),qEe.forEach(t),kgo=i(Dt),ote=n(Dt,"P",{});var Tzr=s(ote);Sgo=r(Tzr,"Examples:"),Tzr.forEach(t),Rgo=i(Dt),m(ZC.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),XSe=i(c),Zi=n(c,"H2",{class:!0});var ZBe=s(Zi);k_=n(ZBe,"A",{id:!0,class:!0,href:!0});var Mzr=s(k_);rte=n(Mzr,"SPAN",{});var Ezr=s(rte);m(e5.$$.fragment,Ezr),Ezr.forEach(t),Mzr.forEach(t),Bgo=i(ZBe),tte=n(ZBe,"SPAN",{});var Czr=s(tte);Pgo=r(Czr,"AutoModelForPreTraining"),Czr.forEach(t),ZBe.forEach(t),zSe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(o5.$$.fragment,Hs),$go=i(Hs),ed=n(Hs,"P",{});var WH=s(ed);Igo=r(WH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PP=n(WH,"A",{href:!0});var wzr=s(PP);qgo=r(wzr,"from_pretrained()"),wzr.forEach(t),Ngo=r(WH," class method or the "),$P=n(WH,"A",{href:!0});var Azr=s($P);jgo=r(Azr,"from_config()"),Azr.forEach(t),Dgo=r(WH,` class
method.`),WH.forEach(t),Ggo=i(Hs),r5=n(Hs,"P",{});var ePe=s(r5);Ogo=r(ePe,"This class cannot be instantiated directly using "),ate=n(ePe,"CODE",{});var yzr=s(ate);Vgo=r(yzr,"__init__()"),yzr.forEach(t),Xgo=r(ePe," (throws an error)."),ePe.forEach(t),zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(t5.$$.fragment,Us),Qgo=i(Us),nte=n(Us,"P",{});var Lzr=s(nte);Wgo=r(Lzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lzr.forEach(t),Hgo=i(Us),od=n(Us,"P",{});var HH=s(od);Ugo=r(HH,`Note:
Loading a model from its configuration file does `),ste=n(HH,"STRONG",{});var xzr=s(ste);Jgo=r(xzr,"not"),xzr.forEach(t),Ygo=r(HH,` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=n(HH,"A",{href:!0});var kzr=s(IP);Kgo=r(kzr,"from_pretrained()"),kzr.forEach(t),Zgo=r(HH," to load the model weights."),HH.forEach(t),eho=i(Us),lte=n(Us,"P",{});var Szr=s(lte);oho=r(Szr,"Examples:"),Szr.forEach(t),rho=i(Us),m(a5.$$.fragment,Us),Us.forEach(t),tho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(n5.$$.fragment,Gt),aho=i(Gt),ite=n(Gt,"P",{});var Rzr=s(ite);nho=r(Rzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rzr.forEach(t),sho=i(Gt),za=n(Gt,"P",{});var bE=s(za);lho=r(bE,"The model class to instantiate is selected based on the "),dte=n(bE,"CODE",{});var Bzr=s(dte);iho=r(Bzr,"model_type"),Bzr.forEach(t),dho=r(bE,` property of the config object (either
passed as an argument or loaded from `),cte=n(bE,"CODE",{});var Pzr=s(cte);cho=r(Pzr,"pretrained_model_name_or_path"),Pzr.forEach(t),fho=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=n(bE,"CODE",{});var $zr=s(fte);mho=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),gho=r(bE,":"),bE.forEach(t),hho=i(Gt),S=n(Gt,"UL",{});var B=s(S);S_=n(B,"LI",{});var NEe=s(S_);mte=n(NEe,"STRONG",{});var Izr=s(mte);pho=r(Izr,"albert"),Izr.forEach(t),_ho=r(NEe," \u2014 "),qP=n(NEe,"A",{href:!0});var qzr=s(qP);uho=r(qzr,"AlbertForPreTraining"),qzr.forEach(t),bho=r(NEe," (ALBERT model)"),NEe.forEach(t),Fho=i(B),R_=n(B,"LI",{});var jEe=s(R_);gte=n(jEe,"STRONG",{});var Nzr=s(gte);vho=r(Nzr,"bart"),Nzr.forEach(t),Tho=r(jEe," \u2014 "),NP=n(jEe,"A",{href:!0});var jzr=s(NP);Mho=r(jzr,"BartForConditionalGeneration"),jzr.forEach(t),Eho=r(jEe," (BART model)"),jEe.forEach(t),Cho=i(B),B_=n(B,"LI",{});var DEe=s(B_);hte=n(DEe,"STRONG",{});var Dzr=s(hte);who=r(Dzr,"bert"),Dzr.forEach(t),Aho=r(DEe," \u2014 "),jP=n(DEe,"A",{href:!0});var Gzr=s(jP);yho=r(Gzr,"BertForPreTraining"),Gzr.forEach(t),Lho=r(DEe," (BERT model)"),DEe.forEach(t),xho=i(B),P_=n(B,"LI",{});var GEe=s(P_);pte=n(GEe,"STRONG",{});var Ozr=s(pte);kho=r(Ozr,"big_bird"),Ozr.forEach(t),Sho=r(GEe," \u2014 "),DP=n(GEe,"A",{href:!0});var Vzr=s(DP);Rho=r(Vzr,"BigBirdForPreTraining"),Vzr.forEach(t),Bho=r(GEe," (BigBird model)"),GEe.forEach(t),Pho=i(B),$_=n(B,"LI",{});var OEe=s($_);_te=n(OEe,"STRONG",{});var Xzr=s(_te);$ho=r(Xzr,"camembert"),Xzr.forEach(t),Iho=r(OEe," \u2014 "),GP=n(OEe,"A",{href:!0});var zzr=s(GP);qho=r(zzr,"CamembertForMaskedLM"),zzr.forEach(t),Nho=r(OEe," (CamemBERT model)"),OEe.forEach(t),jho=i(B),I_=n(B,"LI",{});var VEe=s(I_);ute=n(VEe,"STRONG",{});var Qzr=s(ute);Dho=r(Qzr,"ctrl"),Qzr.forEach(t),Gho=r(VEe," \u2014 "),OP=n(VEe,"A",{href:!0});var Wzr=s(OP);Oho=r(Wzr,"CTRLLMHeadModel"),Wzr.forEach(t),Vho=r(VEe," (CTRL model)"),VEe.forEach(t),Xho=i(B),q_=n(B,"LI",{});var XEe=s(q_);bte=n(XEe,"STRONG",{});var Hzr=s(bte);zho=r(Hzr,"data2vec-text"),Hzr.forEach(t),Qho=r(XEe," \u2014 "),VP=n(XEe,"A",{href:!0});var Uzr=s(VP);Who=r(Uzr,"Data2VecTextForMaskedLM"),Uzr.forEach(t),Hho=r(XEe," (Data2VecText model)"),XEe.forEach(t),Uho=i(B),N_=n(B,"LI",{});var zEe=s(N_);Fte=n(zEe,"STRONG",{});var Jzr=s(Fte);Jho=r(Jzr,"deberta"),Jzr.forEach(t),Yho=r(zEe," \u2014 "),XP=n(zEe,"A",{href:!0});var Yzr=s(XP);Kho=r(Yzr,"DebertaForMaskedLM"),Yzr.forEach(t),Zho=r(zEe," (DeBERTa model)"),zEe.forEach(t),epo=i(B),j_=n(B,"LI",{});var QEe=s(j_);vte=n(QEe,"STRONG",{});var Kzr=s(vte);opo=r(Kzr,"deberta-v2"),Kzr.forEach(t),rpo=r(QEe," \u2014 "),zP=n(QEe,"A",{href:!0});var Zzr=s(zP);tpo=r(Zzr,"DebertaV2ForMaskedLM"),Zzr.forEach(t),apo=r(QEe," (DeBERTa-v2 model)"),QEe.forEach(t),npo=i(B),D_=n(B,"LI",{});var WEe=s(D_);Tte=n(WEe,"STRONG",{});var eQr=s(Tte);spo=r(eQr,"distilbert"),eQr.forEach(t),lpo=r(WEe," \u2014 "),QP=n(WEe,"A",{href:!0});var oQr=s(QP);ipo=r(oQr,"DistilBertForMaskedLM"),oQr.forEach(t),dpo=r(WEe," (DistilBERT model)"),WEe.forEach(t),cpo=i(B),G_=n(B,"LI",{});var HEe=s(G_);Mte=n(HEe,"STRONG",{});var rQr=s(Mte);fpo=r(rQr,"electra"),rQr.forEach(t),mpo=r(HEe," \u2014 "),WP=n(HEe,"A",{href:!0});var tQr=s(WP);gpo=r(tQr,"ElectraForPreTraining"),tQr.forEach(t),hpo=r(HEe," (ELECTRA model)"),HEe.forEach(t),ppo=i(B),O_=n(B,"LI",{});var UEe=s(O_);Ete=n(UEe,"STRONG",{});var aQr=s(Ete);_po=r(aQr,"flaubert"),aQr.forEach(t),upo=r(UEe," \u2014 "),HP=n(UEe,"A",{href:!0});var nQr=s(HP);bpo=r(nQr,"FlaubertWithLMHeadModel"),nQr.forEach(t),Fpo=r(UEe," (FlauBERT model)"),UEe.forEach(t),vpo=i(B),V_=n(B,"LI",{});var JEe=s(V_);Cte=n(JEe,"STRONG",{});var sQr=s(Cte);Tpo=r(sQr,"fnet"),sQr.forEach(t),Mpo=r(JEe," \u2014 "),UP=n(JEe,"A",{href:!0});var lQr=s(UP);Epo=r(lQr,"FNetForPreTraining"),lQr.forEach(t),Cpo=r(JEe," (FNet model)"),JEe.forEach(t),wpo=i(B),X_=n(B,"LI",{});var YEe=s(X_);wte=n(YEe,"STRONG",{});var iQr=s(wte);Apo=r(iQr,"fsmt"),iQr.forEach(t),ypo=r(YEe," \u2014 "),JP=n(YEe,"A",{href:!0});var dQr=s(JP);Lpo=r(dQr,"FSMTForConditionalGeneration"),dQr.forEach(t),xpo=r(YEe," (FairSeq Machine-Translation model)"),YEe.forEach(t),kpo=i(B),z_=n(B,"LI",{});var KEe=s(z_);Ate=n(KEe,"STRONG",{});var cQr=s(Ate);Spo=r(cQr,"funnel"),cQr.forEach(t),Rpo=r(KEe," \u2014 "),YP=n(KEe,"A",{href:!0});var fQr=s(YP);Bpo=r(fQr,"FunnelForPreTraining"),fQr.forEach(t),Ppo=r(KEe," (Funnel Transformer model)"),KEe.forEach(t),$po=i(B),Q_=n(B,"LI",{});var ZEe=s(Q_);yte=n(ZEe,"STRONG",{});var mQr=s(yte);Ipo=r(mQr,"gpt2"),mQr.forEach(t),qpo=r(ZEe," \u2014 "),KP=n(ZEe,"A",{href:!0});var gQr=s(KP);Npo=r(gQr,"GPT2LMHeadModel"),gQr.forEach(t),jpo=r(ZEe," (OpenAI GPT-2 model)"),ZEe.forEach(t),Dpo=i(B),W_=n(B,"LI",{});var eCe=s(W_);Lte=n(eCe,"STRONG",{});var hQr=s(Lte);Gpo=r(hQr,"ibert"),hQr.forEach(t),Opo=r(eCe," \u2014 "),ZP=n(eCe,"A",{href:!0});var pQr=s(ZP);Vpo=r(pQr,"IBertForMaskedLM"),pQr.forEach(t),Xpo=r(eCe," (I-BERT model)"),eCe.forEach(t),zpo=i(B),H_=n(B,"LI",{});var oCe=s(H_);xte=n(oCe,"STRONG",{});var _Qr=s(xte);Qpo=r(_Qr,"layoutlm"),_Qr.forEach(t),Wpo=r(oCe," \u2014 "),e$=n(oCe,"A",{href:!0});var uQr=s(e$);Hpo=r(uQr,"LayoutLMForMaskedLM"),uQr.forEach(t),Upo=r(oCe," (LayoutLM model)"),oCe.forEach(t),Jpo=i(B),U_=n(B,"LI",{});var rCe=s(U_);kte=n(rCe,"STRONG",{});var bQr=s(kte);Ypo=r(bQr,"longformer"),bQr.forEach(t),Kpo=r(rCe," \u2014 "),o$=n(rCe,"A",{href:!0});var FQr=s(o$);Zpo=r(FQr,"LongformerForMaskedLM"),FQr.forEach(t),e_o=r(rCe," (Longformer model)"),rCe.forEach(t),o_o=i(B),J_=n(B,"LI",{});var tCe=s(J_);Ste=n(tCe,"STRONG",{});var vQr=s(Ste);r_o=r(vQr,"lxmert"),vQr.forEach(t),t_o=r(tCe," \u2014 "),r$=n(tCe,"A",{href:!0});var TQr=s(r$);a_o=r(TQr,"LxmertForPreTraining"),TQr.forEach(t),n_o=r(tCe," (LXMERT model)"),tCe.forEach(t),s_o=i(B),Y_=n(B,"LI",{});var aCe=s(Y_);Rte=n(aCe,"STRONG",{});var MQr=s(Rte);l_o=r(MQr,"megatron-bert"),MQr.forEach(t),i_o=r(aCe," \u2014 "),t$=n(aCe,"A",{href:!0});var EQr=s(t$);d_o=r(EQr,"MegatronBertForPreTraining"),EQr.forEach(t),c_o=r(aCe," (MegatronBert model)"),aCe.forEach(t),f_o=i(B),K_=n(B,"LI",{});var nCe=s(K_);Bte=n(nCe,"STRONG",{});var CQr=s(Bte);m_o=r(CQr,"mobilebert"),CQr.forEach(t),g_o=r(nCe," \u2014 "),a$=n(nCe,"A",{href:!0});var wQr=s(a$);h_o=r(wQr,"MobileBertForPreTraining"),wQr.forEach(t),p_o=r(nCe," (MobileBERT model)"),nCe.forEach(t),__o=i(B),Z_=n(B,"LI",{});var sCe=s(Z_);Pte=n(sCe,"STRONG",{});var AQr=s(Pte);u_o=r(AQr,"mpnet"),AQr.forEach(t),b_o=r(sCe," \u2014 "),n$=n(sCe,"A",{href:!0});var yQr=s(n$);F_o=r(yQr,"MPNetForMaskedLM"),yQr.forEach(t),v_o=r(sCe," (MPNet model)"),sCe.forEach(t),T_o=i(B),eu=n(B,"LI",{});var lCe=s(eu);$te=n(lCe,"STRONG",{});var LQr=s($te);M_o=r(LQr,"openai-gpt"),LQr.forEach(t),E_o=r(lCe," \u2014 "),s$=n(lCe,"A",{href:!0});var xQr=s(s$);C_o=r(xQr,"OpenAIGPTLMHeadModel"),xQr.forEach(t),w_o=r(lCe," (OpenAI GPT model)"),lCe.forEach(t),A_o=i(B),ou=n(B,"LI",{});var iCe=s(ou);Ite=n(iCe,"STRONG",{});var kQr=s(Ite);y_o=r(kQr,"retribert"),kQr.forEach(t),L_o=r(iCe," \u2014 "),l$=n(iCe,"A",{href:!0});var SQr=s(l$);x_o=r(SQr,"RetriBertModel"),SQr.forEach(t),k_o=r(iCe," (RetriBERT model)"),iCe.forEach(t),S_o=i(B),ru=n(B,"LI",{});var dCe=s(ru);qte=n(dCe,"STRONG",{});var RQr=s(qte);R_o=r(RQr,"roberta"),RQr.forEach(t),B_o=r(dCe," \u2014 "),i$=n(dCe,"A",{href:!0});var BQr=s(i$);P_o=r(BQr,"RobertaForMaskedLM"),BQr.forEach(t),$_o=r(dCe," (RoBERTa model)"),dCe.forEach(t),I_o=i(B),tu=n(B,"LI",{});var cCe=s(tu);Nte=n(cCe,"STRONG",{});var PQr=s(Nte);q_o=r(PQr,"squeezebert"),PQr.forEach(t),N_o=r(cCe," \u2014 "),d$=n(cCe,"A",{href:!0});var $Qr=s(d$);j_o=r($Qr,"SqueezeBertForMaskedLM"),$Qr.forEach(t),D_o=r(cCe," (SqueezeBERT model)"),cCe.forEach(t),G_o=i(B),au=n(B,"LI",{});var fCe=s(au);jte=n(fCe,"STRONG",{});var IQr=s(jte);O_o=r(IQr,"t5"),IQr.forEach(t),V_o=r(fCe," \u2014 "),c$=n(fCe,"A",{href:!0});var qQr=s(c$);X_o=r(qQr,"T5ForConditionalGeneration"),qQr.forEach(t),z_o=r(fCe," (T5 model)"),fCe.forEach(t),Q_o=i(B),nu=n(B,"LI",{});var mCe=s(nu);Dte=n(mCe,"STRONG",{});var NQr=s(Dte);W_o=r(NQr,"tapas"),NQr.forEach(t),H_o=r(mCe," \u2014 "),f$=n(mCe,"A",{href:!0});var jQr=s(f$);U_o=r(jQr,"TapasForMaskedLM"),jQr.forEach(t),J_o=r(mCe," (TAPAS model)"),mCe.forEach(t),Y_o=i(B),su=n(B,"LI",{});var gCe=s(su);Gte=n(gCe,"STRONG",{});var DQr=s(Gte);K_o=r(DQr,"transfo-xl"),DQr.forEach(t),Z_o=r(gCe," \u2014 "),m$=n(gCe,"A",{href:!0});var GQr=s(m$);euo=r(GQr,"TransfoXLLMHeadModel"),GQr.forEach(t),ouo=r(gCe," (Transformer-XL model)"),gCe.forEach(t),ruo=i(B),lu=n(B,"LI",{});var hCe=s(lu);Ote=n(hCe,"STRONG",{});var OQr=s(Ote);tuo=r(OQr,"unispeech"),OQr.forEach(t),auo=r(hCe," \u2014 "),g$=n(hCe,"A",{href:!0});var VQr=s(g$);nuo=r(VQr,"UniSpeechForPreTraining"),VQr.forEach(t),suo=r(hCe," (UniSpeech model)"),hCe.forEach(t),luo=i(B),iu=n(B,"LI",{});var pCe=s(iu);Vte=n(pCe,"STRONG",{});var XQr=s(Vte);iuo=r(XQr,"unispeech-sat"),XQr.forEach(t),duo=r(pCe," \u2014 "),h$=n(pCe,"A",{href:!0});var zQr=s(h$);cuo=r(zQr,"UniSpeechSatForPreTraining"),zQr.forEach(t),fuo=r(pCe," (UniSpeechSat model)"),pCe.forEach(t),muo=i(B),du=n(B,"LI",{});var _Ce=s(du);Xte=n(_Ce,"STRONG",{});var QQr=s(Xte);guo=r(QQr,"visual_bert"),QQr.forEach(t),huo=r(_Ce," \u2014 "),p$=n(_Ce,"A",{href:!0});var WQr=s(p$);puo=r(WQr,"VisualBertForPreTraining"),WQr.forEach(t),_uo=r(_Ce," (VisualBert model)"),_Ce.forEach(t),uuo=i(B),cu=n(B,"LI",{});var uCe=s(cu);zte=n(uCe,"STRONG",{});var HQr=s(zte);buo=r(HQr,"vit_mae"),HQr.forEach(t),Fuo=r(uCe," \u2014 "),_$=n(uCe,"A",{href:!0});var UQr=s(_$);vuo=r(UQr,"ViTMAEForPreTraining"),UQr.forEach(t),Tuo=r(uCe," (ViTMAE model)"),uCe.forEach(t),Muo=i(B),fu=n(B,"LI",{});var bCe=s(fu);Qte=n(bCe,"STRONG",{});var JQr=s(Qte);Euo=r(JQr,"wav2vec2"),JQr.forEach(t),Cuo=r(bCe," \u2014 "),u$=n(bCe,"A",{href:!0});var YQr=s(u$);wuo=r(YQr,"Wav2Vec2ForPreTraining"),YQr.forEach(t),Auo=r(bCe," (Wav2Vec2 model)"),bCe.forEach(t),yuo=i(B),mu=n(B,"LI",{});var FCe=s(mu);Wte=n(FCe,"STRONG",{});var KQr=s(Wte);Luo=r(KQr,"xlm"),KQr.forEach(t),xuo=r(FCe," \u2014 "),b$=n(FCe,"A",{href:!0});var ZQr=s(b$);kuo=r(ZQr,"XLMWithLMHeadModel"),ZQr.forEach(t),Suo=r(FCe," (XLM model)"),FCe.forEach(t),Ruo=i(B),gu=n(B,"LI",{});var vCe=s(gu);Hte=n(vCe,"STRONG",{});var eWr=s(Hte);Buo=r(eWr,"xlm-roberta"),eWr.forEach(t),Puo=r(vCe," \u2014 "),F$=n(vCe,"A",{href:!0});var oWr=s(F$);$uo=r(oWr,"XLMRobertaForMaskedLM"),oWr.forEach(t),Iuo=r(vCe," (XLM-RoBERTa model)"),vCe.forEach(t),quo=i(B),hu=n(B,"LI",{});var TCe=s(hu);Ute=n(TCe,"STRONG",{});var rWr=s(Ute);Nuo=r(rWr,"xlm-roberta-xl"),rWr.forEach(t),juo=r(TCe," \u2014 "),v$=n(TCe,"A",{href:!0});var tWr=s(v$);Duo=r(tWr,"XLMRobertaXLForMaskedLM"),tWr.forEach(t),Guo=r(TCe," (XLM-RoBERTa-XL model)"),TCe.forEach(t),Ouo=i(B),pu=n(B,"LI",{});var MCe=s(pu);Jte=n(MCe,"STRONG",{});var aWr=s(Jte);Vuo=r(aWr,"xlnet"),aWr.forEach(t),Xuo=r(MCe," \u2014 "),T$=n(MCe,"A",{href:!0});var nWr=s(T$);zuo=r(nWr,"XLNetLMHeadModel"),nWr.forEach(t),Quo=r(MCe," (XLNet model)"),MCe.forEach(t),B.forEach(t),Wuo=i(Gt),_u=n(Gt,"P",{});var ECe=s(_u);Huo=r(ECe,"The model is set in evaluation mode by default using "),Yte=n(ECe,"CODE",{});var sWr=s(Yte);Uuo=r(sWr,"model.eval()"),sWr.forEach(t),Juo=r(ECe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=n(ECe,"CODE",{});var lWr=s(Kte);Yuo=r(lWr,"model.train()"),lWr.forEach(t),ECe.forEach(t),Kuo=i(Gt),Zte=n(Gt,"P",{});var iWr=s(Zte);Zuo=r(iWr,"Examples:"),iWr.forEach(t),e1o=i(Gt),m(s5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),QSe=i(c),rd=n(c,"H2",{class:!0});var oPe=s(rd);uu=n(oPe,"A",{id:!0,class:!0,href:!0});var dWr=s(uu);eae=n(dWr,"SPAN",{});var cWr=s(eae);m(l5.$$.fragment,cWr),cWr.forEach(t),dWr.forEach(t),o1o=i(oPe),oae=n(oPe,"SPAN",{});var fWr=s(oae);r1o=r(fWr,"AutoModelForCausalLM"),fWr.forEach(t),oPe.forEach(t),WSe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(i5.$$.fragment,Js),t1o=i(Js),td=n(Js,"P",{});var UH=s(td);a1o=r(UH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),M$=n(UH,"A",{href:!0});var mWr=s(M$);n1o=r(mWr,"from_pretrained()"),mWr.forEach(t),s1o=r(UH," class method or the "),E$=n(UH,"A",{href:!0});var gWr=s(E$);l1o=r(gWr,"from_config()"),gWr.forEach(t),i1o=r(UH,` class
method.`),UH.forEach(t),d1o=i(Js),d5=n(Js,"P",{});var rPe=s(d5);c1o=r(rPe,"This class cannot be instantiated directly using "),rae=n(rPe,"CODE",{});var hWr=s(rae);f1o=r(hWr,"__init__()"),hWr.forEach(t),m1o=r(rPe," (throws an error)."),rPe.forEach(t),g1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(c5.$$.fragment,Ys),h1o=i(Ys),tae=n(Ys,"P",{});var pWr=s(tae);p1o=r(pWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pWr.forEach(t),_1o=i(Ys),ad=n(Ys,"P",{});var JH=s(ad);u1o=r(JH,`Note:
Loading a model from its configuration file does `),aae=n(JH,"STRONG",{});var _Wr=s(aae);b1o=r(_Wr,"not"),_Wr.forEach(t),F1o=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),C$=n(JH,"A",{href:!0});var uWr=s(C$);v1o=r(uWr,"from_pretrained()"),uWr.forEach(t),T1o=r(JH," to load the model weights."),JH.forEach(t),M1o=i(Ys),nae=n(Ys,"P",{});var bWr=s(nae);E1o=r(bWr,"Examples:"),bWr.forEach(t),C1o=i(Ys),m(f5.$$.fragment,Ys),Ys.forEach(t),w1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(m5.$$.fragment,Ot),A1o=i(Ot),sae=n(Ot,"P",{});var FWr=s(sae);y1o=r(FWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FWr.forEach(t),L1o=i(Ot),Qa=n(Ot,"P",{});var FE=s(Qa);x1o=r(FE,"The model class to instantiate is selected based on the "),lae=n(FE,"CODE",{});var vWr=s(lae);k1o=r(vWr,"model_type"),vWr.forEach(t),S1o=r(FE,` property of the config object (either
passed as an argument or loaded from `),iae=n(FE,"CODE",{});var TWr=s(iae);R1o=r(TWr,"pretrained_model_name_or_path"),TWr.forEach(t),B1o=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=n(FE,"CODE",{});var MWr=s(dae);P1o=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),$1o=r(FE,":"),FE.forEach(t),I1o=i(Ot),$=n(Ot,"UL",{});var q=s($);bu=n(q,"LI",{});var CCe=s(bu);cae=n(CCe,"STRONG",{});var EWr=s(cae);q1o=r(EWr,"bart"),EWr.forEach(t),N1o=r(CCe," \u2014 "),w$=n(CCe,"A",{href:!0});var CWr=s(w$);j1o=r(CWr,"BartForCausalLM"),CWr.forEach(t),D1o=r(CCe," (BART model)"),CCe.forEach(t),G1o=i(q),Fu=n(q,"LI",{});var wCe=s(Fu);fae=n(wCe,"STRONG",{});var wWr=s(fae);O1o=r(wWr,"bert"),wWr.forEach(t),V1o=r(wCe," \u2014 "),A$=n(wCe,"A",{href:!0});var AWr=s(A$);X1o=r(AWr,"BertLMHeadModel"),AWr.forEach(t),z1o=r(wCe," (BERT model)"),wCe.forEach(t),Q1o=i(q),vu=n(q,"LI",{});var ACe=s(vu);mae=n(ACe,"STRONG",{});var yWr=s(mae);W1o=r(yWr,"bert-generation"),yWr.forEach(t),H1o=r(ACe," \u2014 "),y$=n(ACe,"A",{href:!0});var LWr=s(y$);U1o=r(LWr,"BertGenerationDecoder"),LWr.forEach(t),J1o=r(ACe," (Bert Generation model)"),ACe.forEach(t),Y1o=i(q),Tu=n(q,"LI",{});var yCe=s(Tu);gae=n(yCe,"STRONG",{});var xWr=s(gae);K1o=r(xWr,"big_bird"),xWr.forEach(t),Z1o=r(yCe," \u2014 "),L$=n(yCe,"A",{href:!0});var kWr=s(L$);ebo=r(kWr,"BigBirdForCausalLM"),kWr.forEach(t),obo=r(yCe," (BigBird model)"),yCe.forEach(t),rbo=i(q),Mu=n(q,"LI",{});var LCe=s(Mu);hae=n(LCe,"STRONG",{});var SWr=s(hae);tbo=r(SWr,"bigbird_pegasus"),SWr.forEach(t),abo=r(LCe," \u2014 "),x$=n(LCe,"A",{href:!0});var RWr=s(x$);nbo=r(RWr,"BigBirdPegasusForCausalLM"),RWr.forEach(t),sbo=r(LCe," (BigBirdPegasus model)"),LCe.forEach(t),lbo=i(q),Eu=n(q,"LI",{});var xCe=s(Eu);pae=n(xCe,"STRONG",{});var BWr=s(pae);ibo=r(BWr,"blenderbot"),BWr.forEach(t),dbo=r(xCe," \u2014 "),k$=n(xCe,"A",{href:!0});var PWr=s(k$);cbo=r(PWr,"BlenderbotForCausalLM"),PWr.forEach(t),fbo=r(xCe," (Blenderbot model)"),xCe.forEach(t),mbo=i(q),Cu=n(q,"LI",{});var kCe=s(Cu);_ae=n(kCe,"STRONG",{});var $Wr=s(_ae);gbo=r($Wr,"blenderbot-small"),$Wr.forEach(t),hbo=r(kCe," \u2014 "),S$=n(kCe,"A",{href:!0});var IWr=s(S$);pbo=r(IWr,"BlenderbotSmallForCausalLM"),IWr.forEach(t),_bo=r(kCe," (BlenderbotSmall model)"),kCe.forEach(t),ubo=i(q),wu=n(q,"LI",{});var SCe=s(wu);uae=n(SCe,"STRONG",{});var qWr=s(uae);bbo=r(qWr,"camembert"),qWr.forEach(t),Fbo=r(SCe," \u2014 "),R$=n(SCe,"A",{href:!0});var NWr=s(R$);vbo=r(NWr,"CamembertForCausalLM"),NWr.forEach(t),Tbo=r(SCe," (CamemBERT model)"),SCe.forEach(t),Mbo=i(q),Au=n(q,"LI",{});var RCe=s(Au);bae=n(RCe,"STRONG",{});var jWr=s(bae);Ebo=r(jWr,"ctrl"),jWr.forEach(t),Cbo=r(RCe," \u2014 "),B$=n(RCe,"A",{href:!0});var DWr=s(B$);wbo=r(DWr,"CTRLLMHeadModel"),DWr.forEach(t),Abo=r(RCe," (CTRL model)"),RCe.forEach(t),ybo=i(q),yu=n(q,"LI",{});var BCe=s(yu);Fae=n(BCe,"STRONG",{});var GWr=s(Fae);Lbo=r(GWr,"data2vec-text"),GWr.forEach(t),xbo=r(BCe," \u2014 "),P$=n(BCe,"A",{href:!0});var OWr=s(P$);kbo=r(OWr,"Data2VecTextForCausalLM"),OWr.forEach(t),Sbo=r(BCe," (Data2VecText model)"),BCe.forEach(t),Rbo=i(q),Lu=n(q,"LI",{});var PCe=s(Lu);vae=n(PCe,"STRONG",{});var VWr=s(vae);Bbo=r(VWr,"electra"),VWr.forEach(t),Pbo=r(PCe," \u2014 "),$$=n(PCe,"A",{href:!0});var XWr=s($$);$bo=r(XWr,"ElectraForCausalLM"),XWr.forEach(t),Ibo=r(PCe," (ELECTRA model)"),PCe.forEach(t),qbo=i(q),xu=n(q,"LI",{});var $Ce=s(xu);Tae=n($Ce,"STRONG",{});var zWr=s(Tae);Nbo=r(zWr,"gpt2"),zWr.forEach(t),jbo=r($Ce," \u2014 "),I$=n($Ce,"A",{href:!0});var QWr=s(I$);Dbo=r(QWr,"GPT2LMHeadModel"),QWr.forEach(t),Gbo=r($Ce," (OpenAI GPT-2 model)"),$Ce.forEach(t),Obo=i(q),ku=n(q,"LI",{});var ICe=s(ku);Mae=n(ICe,"STRONG",{});var WWr=s(Mae);Vbo=r(WWr,"gpt_neo"),WWr.forEach(t),Xbo=r(ICe," \u2014 "),q$=n(ICe,"A",{href:!0});var HWr=s(q$);zbo=r(HWr,"GPTNeoForCausalLM"),HWr.forEach(t),Qbo=r(ICe," (GPT Neo model)"),ICe.forEach(t),Wbo=i(q),Su=n(q,"LI",{});var qCe=s(Su);Eae=n(qCe,"STRONG",{});var UWr=s(Eae);Hbo=r(UWr,"gptj"),UWr.forEach(t),Ubo=r(qCe," \u2014 "),N$=n(qCe,"A",{href:!0});var JWr=s(N$);Jbo=r(JWr,"GPTJForCausalLM"),JWr.forEach(t),Ybo=r(qCe," (GPT-J model)"),qCe.forEach(t),Kbo=i(q),Ru=n(q,"LI",{});var NCe=s(Ru);Cae=n(NCe,"STRONG",{});var YWr=s(Cae);Zbo=r(YWr,"marian"),YWr.forEach(t),e3o=r(NCe," \u2014 "),j$=n(NCe,"A",{href:!0});var KWr=s(j$);o3o=r(KWr,"MarianForCausalLM"),KWr.forEach(t),r3o=r(NCe," (Marian model)"),NCe.forEach(t),t3o=i(q),Bu=n(q,"LI",{});var jCe=s(Bu);wae=n(jCe,"STRONG",{});var ZWr=s(wae);a3o=r(ZWr,"mbart"),ZWr.forEach(t),n3o=r(jCe," \u2014 "),D$=n(jCe,"A",{href:!0});var eHr=s(D$);s3o=r(eHr,"MBartForCausalLM"),eHr.forEach(t),l3o=r(jCe," (mBART model)"),jCe.forEach(t),i3o=i(q),Pu=n(q,"LI",{});var DCe=s(Pu);Aae=n(DCe,"STRONG",{});var oHr=s(Aae);d3o=r(oHr,"megatron-bert"),oHr.forEach(t),c3o=r(DCe," \u2014 "),G$=n(DCe,"A",{href:!0});var rHr=s(G$);f3o=r(rHr,"MegatronBertForCausalLM"),rHr.forEach(t),m3o=r(DCe," (MegatronBert model)"),DCe.forEach(t),g3o=i(q),$u=n(q,"LI",{});var GCe=s($u);yae=n(GCe,"STRONG",{});var tHr=s(yae);h3o=r(tHr,"openai-gpt"),tHr.forEach(t),p3o=r(GCe," \u2014 "),O$=n(GCe,"A",{href:!0});var aHr=s(O$);_3o=r(aHr,"OpenAIGPTLMHeadModel"),aHr.forEach(t),u3o=r(GCe," (OpenAI GPT model)"),GCe.forEach(t),b3o=i(q),Iu=n(q,"LI",{});var OCe=s(Iu);Lae=n(OCe,"STRONG",{});var nHr=s(Lae);F3o=r(nHr,"pegasus"),nHr.forEach(t),v3o=r(OCe," \u2014 "),V$=n(OCe,"A",{href:!0});var sHr=s(V$);T3o=r(sHr,"PegasusForCausalLM"),sHr.forEach(t),M3o=r(OCe," (Pegasus model)"),OCe.forEach(t),E3o=i(q),qu=n(q,"LI",{});var VCe=s(qu);xae=n(VCe,"STRONG",{});var lHr=s(xae);C3o=r(lHr,"plbart"),lHr.forEach(t),w3o=r(VCe," \u2014 "),X$=n(VCe,"A",{href:!0});var iHr=s(X$);A3o=r(iHr,"PLBartForCausalLM"),iHr.forEach(t),y3o=r(VCe," (PLBart model)"),VCe.forEach(t),L3o=i(q),Nu=n(q,"LI",{});var XCe=s(Nu);kae=n(XCe,"STRONG",{});var dHr=s(kae);x3o=r(dHr,"prophetnet"),dHr.forEach(t),k3o=r(XCe," \u2014 "),z$=n(XCe,"A",{href:!0});var cHr=s(z$);S3o=r(cHr,"ProphetNetForCausalLM"),cHr.forEach(t),R3o=r(XCe," (ProphetNet model)"),XCe.forEach(t),B3o=i(q),ju=n(q,"LI",{});var zCe=s(ju);Sae=n(zCe,"STRONG",{});var fHr=s(Sae);P3o=r(fHr,"qdqbert"),fHr.forEach(t),$3o=r(zCe," \u2014 "),Q$=n(zCe,"A",{href:!0});var mHr=s(Q$);I3o=r(mHr,"QDQBertLMHeadModel"),mHr.forEach(t),q3o=r(zCe," (QDQBert model)"),zCe.forEach(t),N3o=i(q),Du=n(q,"LI",{});var QCe=s(Du);Rae=n(QCe,"STRONG",{});var gHr=s(Rae);j3o=r(gHr,"reformer"),gHr.forEach(t),D3o=r(QCe," \u2014 "),W$=n(QCe,"A",{href:!0});var hHr=s(W$);G3o=r(hHr,"ReformerModelWithLMHead"),hHr.forEach(t),O3o=r(QCe," (Reformer model)"),QCe.forEach(t),V3o=i(q),Gu=n(q,"LI",{});var WCe=s(Gu);Bae=n(WCe,"STRONG",{});var pHr=s(Bae);X3o=r(pHr,"rembert"),pHr.forEach(t),z3o=r(WCe," \u2014 "),H$=n(WCe,"A",{href:!0});var _Hr=s(H$);Q3o=r(_Hr,"RemBertForCausalLM"),_Hr.forEach(t),W3o=r(WCe," (RemBERT model)"),WCe.forEach(t),H3o=i(q),Ou=n(q,"LI",{});var HCe=s(Ou);Pae=n(HCe,"STRONG",{});var uHr=s(Pae);U3o=r(uHr,"roberta"),uHr.forEach(t),J3o=r(HCe," \u2014 "),U$=n(HCe,"A",{href:!0});var bHr=s(U$);Y3o=r(bHr,"RobertaForCausalLM"),bHr.forEach(t),K3o=r(HCe," (RoBERTa model)"),HCe.forEach(t),Z3o=i(q),Vu=n(q,"LI",{});var UCe=s(Vu);$ae=n(UCe,"STRONG",{});var FHr=s($ae);e2o=r(FHr,"roformer"),FHr.forEach(t),o2o=r(UCe," \u2014 "),J$=n(UCe,"A",{href:!0});var vHr=s(J$);r2o=r(vHr,"RoFormerForCausalLM"),vHr.forEach(t),t2o=r(UCe," (RoFormer model)"),UCe.forEach(t),a2o=i(q),Xu=n(q,"LI",{});var JCe=s(Xu);Iae=n(JCe,"STRONG",{});var THr=s(Iae);n2o=r(THr,"speech_to_text_2"),THr.forEach(t),s2o=r(JCe," \u2014 "),Y$=n(JCe,"A",{href:!0});var MHr=s(Y$);l2o=r(MHr,"Speech2Text2ForCausalLM"),MHr.forEach(t),i2o=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),d2o=i(q),zu=n(q,"LI",{});var YCe=s(zu);qae=n(YCe,"STRONG",{});var EHr=s(qae);c2o=r(EHr,"transfo-xl"),EHr.forEach(t),f2o=r(YCe," \u2014 "),K$=n(YCe,"A",{href:!0});var CHr=s(K$);m2o=r(CHr,"TransfoXLLMHeadModel"),CHr.forEach(t),g2o=r(YCe," (Transformer-XL model)"),YCe.forEach(t),h2o=i(q),Qu=n(q,"LI",{});var KCe=s(Qu);Nae=n(KCe,"STRONG",{});var wHr=s(Nae);p2o=r(wHr,"trocr"),wHr.forEach(t),_2o=r(KCe," \u2014 "),Z$=n(KCe,"A",{href:!0});var AHr=s(Z$);u2o=r(AHr,"TrOCRForCausalLM"),AHr.forEach(t),b2o=r(KCe," (TrOCR model)"),KCe.forEach(t),F2o=i(q),Wu=n(q,"LI",{});var ZCe=s(Wu);jae=n(ZCe,"STRONG",{});var yHr=s(jae);v2o=r(yHr,"xglm"),yHr.forEach(t),T2o=r(ZCe," \u2014 "),eI=n(ZCe,"A",{href:!0});var LHr=s(eI);M2o=r(LHr,"XGLMForCausalLM"),LHr.forEach(t),E2o=r(ZCe," (XGLM model)"),ZCe.forEach(t),C2o=i(q),Hu=n(q,"LI",{});var e5e=s(Hu);Dae=n(e5e,"STRONG",{});var xHr=s(Dae);w2o=r(xHr,"xlm"),xHr.forEach(t),A2o=r(e5e," \u2014 "),oI=n(e5e,"A",{href:!0});var kHr=s(oI);y2o=r(kHr,"XLMWithLMHeadModel"),kHr.forEach(t),L2o=r(e5e," (XLM model)"),e5e.forEach(t),x2o=i(q),Uu=n(q,"LI",{});var o5e=s(Uu);Gae=n(o5e,"STRONG",{});var SHr=s(Gae);k2o=r(SHr,"xlm-prophetnet"),SHr.forEach(t),S2o=r(o5e," \u2014 "),rI=n(o5e,"A",{href:!0});var RHr=s(rI);R2o=r(RHr,"XLMProphetNetForCausalLM"),RHr.forEach(t),B2o=r(o5e," (XLMProphetNet model)"),o5e.forEach(t),P2o=i(q),Ju=n(q,"LI",{});var r5e=s(Ju);Oae=n(r5e,"STRONG",{});var BHr=s(Oae);$2o=r(BHr,"xlm-roberta"),BHr.forEach(t),I2o=r(r5e," \u2014 "),tI=n(r5e,"A",{href:!0});var PHr=s(tI);q2o=r(PHr,"XLMRobertaForCausalLM"),PHr.forEach(t),N2o=r(r5e," (XLM-RoBERTa model)"),r5e.forEach(t),j2o=i(q),Yu=n(q,"LI",{});var t5e=s(Yu);Vae=n(t5e,"STRONG",{});var $Hr=s(Vae);D2o=r($Hr,"xlm-roberta-xl"),$Hr.forEach(t),G2o=r(t5e," \u2014 "),aI=n(t5e,"A",{href:!0});var IHr=s(aI);O2o=r(IHr,"XLMRobertaXLForCausalLM"),IHr.forEach(t),V2o=r(t5e," (XLM-RoBERTa-XL model)"),t5e.forEach(t),X2o=i(q),Ku=n(q,"LI",{});var a5e=s(Ku);Xae=n(a5e,"STRONG",{});var qHr=s(Xae);z2o=r(qHr,"xlnet"),qHr.forEach(t),Q2o=r(a5e," \u2014 "),nI=n(a5e,"A",{href:!0});var NHr=s(nI);W2o=r(NHr,"XLNetLMHeadModel"),NHr.forEach(t),H2o=r(a5e," (XLNet model)"),a5e.forEach(t),q.forEach(t),U2o=i(Ot),Zu=n(Ot,"P",{});var n5e=s(Zu);J2o=r(n5e,"The model is set in evaluation mode by default using "),zae=n(n5e,"CODE",{});var jHr=s(zae);Y2o=r(jHr,"model.eval()"),jHr.forEach(t),K2o=r(n5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qae=n(n5e,"CODE",{});var DHr=s(Qae);Z2o=r(DHr,"model.train()"),DHr.forEach(t),n5e.forEach(t),eFo=i(Ot),Wae=n(Ot,"P",{});var GHr=s(Wae);oFo=r(GHr,"Examples:"),GHr.forEach(t),rFo=i(Ot),m(g5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),HSe=i(c),nd=n(c,"H2",{class:!0});var tPe=s(nd);e1=n(tPe,"A",{id:!0,class:!0,href:!0});var OHr=s(e1);Hae=n(OHr,"SPAN",{});var VHr=s(Hae);m(h5.$$.fragment,VHr),VHr.forEach(t),OHr.forEach(t),tFo=i(tPe),Uae=n(tPe,"SPAN",{});var XHr=s(Uae);aFo=r(XHr,"AutoModelForMaskedLM"),XHr.forEach(t),tPe.forEach(t),USe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(p5.$$.fragment,Ks),nFo=i(Ks),sd=n(Ks,"P",{});var YH=s(sd);sFo=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sI=n(YH,"A",{href:!0});var zHr=s(sI);lFo=r(zHr,"from_pretrained()"),zHr.forEach(t),iFo=r(YH," class method or the "),lI=n(YH,"A",{href:!0});var QHr=s(lI);dFo=r(QHr,"from_config()"),QHr.forEach(t),cFo=r(YH,` class
method.`),YH.forEach(t),fFo=i(Ks),_5=n(Ks,"P",{});var aPe=s(_5);mFo=r(aPe,"This class cannot be instantiated directly using "),Jae=n(aPe,"CODE",{});var WHr=s(Jae);gFo=r(WHr,"__init__()"),WHr.forEach(t),hFo=r(aPe," (throws an error)."),aPe.forEach(t),pFo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(u5.$$.fragment,Zs),_Fo=i(Zs),Yae=n(Zs,"P",{});var HHr=s(Yae);uFo=r(HHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HHr.forEach(t),bFo=i(Zs),ld=n(Zs,"P",{});var KH=s(ld);FFo=r(KH,`Note:
Loading a model from its configuration file does `),Kae=n(KH,"STRONG",{});var UHr=s(Kae);vFo=r(UHr,"not"),UHr.forEach(t),TFo=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=n(KH,"A",{href:!0});var JHr=s(iI);MFo=r(JHr,"from_pretrained()"),JHr.forEach(t),EFo=r(KH," to load the model weights."),KH.forEach(t),CFo=i(Zs),Zae=n(Zs,"P",{});var YHr=s(Zae);wFo=r(YHr,"Examples:"),YHr.forEach(t),AFo=i(Zs),m(b5.$$.fragment,Zs),Zs.forEach(t),yFo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(F5.$$.fragment,Vt),LFo=i(Vt),ene=n(Vt,"P",{});var KHr=s(ene);xFo=r(KHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KHr.forEach(t),kFo=i(Vt),Wa=n(Vt,"P",{});var vE=s(Wa);SFo=r(vE,"The model class to instantiate is selected based on the "),one=n(vE,"CODE",{});var ZHr=s(one);RFo=r(ZHr,"model_type"),ZHr.forEach(t),BFo=r(vE,` property of the config object (either
passed as an argument or loaded from `),rne=n(vE,"CODE",{});var eUr=s(rne);PFo=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),$Fo=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(vE,"CODE",{});var oUr=s(tne);IFo=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),qFo=r(vE,":"),vE.forEach(t),NFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);o1=n(N,"LI",{});var s5e=s(o1);ane=n(s5e,"STRONG",{});var rUr=s(ane);jFo=r(rUr,"albert"),rUr.forEach(t),DFo=r(s5e," \u2014 "),dI=n(s5e,"A",{href:!0});var tUr=s(dI);GFo=r(tUr,"AlbertForMaskedLM"),tUr.forEach(t),OFo=r(s5e," (ALBERT model)"),s5e.forEach(t),VFo=i(N),r1=n(N,"LI",{});var l5e=s(r1);nne=n(l5e,"STRONG",{});var aUr=s(nne);XFo=r(aUr,"bart"),aUr.forEach(t),zFo=r(l5e," \u2014 "),cI=n(l5e,"A",{href:!0});var nUr=s(cI);QFo=r(nUr,"BartForConditionalGeneration"),nUr.forEach(t),WFo=r(l5e," (BART model)"),l5e.forEach(t),HFo=i(N),t1=n(N,"LI",{});var i5e=s(t1);sne=n(i5e,"STRONG",{});var sUr=s(sne);UFo=r(sUr,"bert"),sUr.forEach(t),JFo=r(i5e," \u2014 "),fI=n(i5e,"A",{href:!0});var lUr=s(fI);YFo=r(lUr,"BertForMaskedLM"),lUr.forEach(t),KFo=r(i5e," (BERT model)"),i5e.forEach(t),ZFo=i(N),a1=n(N,"LI",{});var d5e=s(a1);lne=n(d5e,"STRONG",{});var iUr=s(lne);evo=r(iUr,"big_bird"),iUr.forEach(t),ovo=r(d5e," \u2014 "),mI=n(d5e,"A",{href:!0});var dUr=s(mI);rvo=r(dUr,"BigBirdForMaskedLM"),dUr.forEach(t),tvo=r(d5e," (BigBird model)"),d5e.forEach(t),avo=i(N),n1=n(N,"LI",{});var c5e=s(n1);ine=n(c5e,"STRONG",{});var cUr=s(ine);nvo=r(cUr,"camembert"),cUr.forEach(t),svo=r(c5e," \u2014 "),gI=n(c5e,"A",{href:!0});var fUr=s(gI);lvo=r(fUr,"CamembertForMaskedLM"),fUr.forEach(t),ivo=r(c5e," (CamemBERT model)"),c5e.forEach(t),dvo=i(N),s1=n(N,"LI",{});var f5e=s(s1);dne=n(f5e,"STRONG",{});var mUr=s(dne);cvo=r(mUr,"convbert"),mUr.forEach(t),fvo=r(f5e," \u2014 "),hI=n(f5e,"A",{href:!0});var gUr=s(hI);mvo=r(gUr,"ConvBertForMaskedLM"),gUr.forEach(t),gvo=r(f5e," (ConvBERT model)"),f5e.forEach(t),hvo=i(N),l1=n(N,"LI",{});var m5e=s(l1);cne=n(m5e,"STRONG",{});var hUr=s(cne);pvo=r(hUr,"data2vec-text"),hUr.forEach(t),_vo=r(m5e," \u2014 "),pI=n(m5e,"A",{href:!0});var pUr=s(pI);uvo=r(pUr,"Data2VecTextForMaskedLM"),pUr.forEach(t),bvo=r(m5e," (Data2VecText model)"),m5e.forEach(t),Fvo=i(N),i1=n(N,"LI",{});var g5e=s(i1);fne=n(g5e,"STRONG",{});var _Ur=s(fne);vvo=r(_Ur,"deberta"),_Ur.forEach(t),Tvo=r(g5e," \u2014 "),_I=n(g5e,"A",{href:!0});var uUr=s(_I);Mvo=r(uUr,"DebertaForMaskedLM"),uUr.forEach(t),Evo=r(g5e," (DeBERTa model)"),g5e.forEach(t),Cvo=i(N),d1=n(N,"LI",{});var h5e=s(d1);mne=n(h5e,"STRONG",{});var bUr=s(mne);wvo=r(bUr,"deberta-v2"),bUr.forEach(t),Avo=r(h5e," \u2014 "),uI=n(h5e,"A",{href:!0});var FUr=s(uI);yvo=r(FUr,"DebertaV2ForMaskedLM"),FUr.forEach(t),Lvo=r(h5e," (DeBERTa-v2 model)"),h5e.forEach(t),xvo=i(N),c1=n(N,"LI",{});var p5e=s(c1);gne=n(p5e,"STRONG",{});var vUr=s(gne);kvo=r(vUr,"distilbert"),vUr.forEach(t),Svo=r(p5e," \u2014 "),bI=n(p5e,"A",{href:!0});var TUr=s(bI);Rvo=r(TUr,"DistilBertForMaskedLM"),TUr.forEach(t),Bvo=r(p5e," (DistilBERT model)"),p5e.forEach(t),Pvo=i(N),f1=n(N,"LI",{});var _5e=s(f1);hne=n(_5e,"STRONG",{});var MUr=s(hne);$vo=r(MUr,"electra"),MUr.forEach(t),Ivo=r(_5e," \u2014 "),FI=n(_5e,"A",{href:!0});var EUr=s(FI);qvo=r(EUr,"ElectraForMaskedLM"),EUr.forEach(t),Nvo=r(_5e," (ELECTRA model)"),_5e.forEach(t),jvo=i(N),m1=n(N,"LI",{});var u5e=s(m1);pne=n(u5e,"STRONG",{});var CUr=s(pne);Dvo=r(CUr,"flaubert"),CUr.forEach(t),Gvo=r(u5e," \u2014 "),vI=n(u5e,"A",{href:!0});var wUr=s(vI);Ovo=r(wUr,"FlaubertWithLMHeadModel"),wUr.forEach(t),Vvo=r(u5e," (FlauBERT model)"),u5e.forEach(t),Xvo=i(N),g1=n(N,"LI",{});var b5e=s(g1);_ne=n(b5e,"STRONG",{});var AUr=s(_ne);zvo=r(AUr,"fnet"),AUr.forEach(t),Qvo=r(b5e," \u2014 "),TI=n(b5e,"A",{href:!0});var yUr=s(TI);Wvo=r(yUr,"FNetForMaskedLM"),yUr.forEach(t),Hvo=r(b5e," (FNet model)"),b5e.forEach(t),Uvo=i(N),h1=n(N,"LI",{});var F5e=s(h1);une=n(F5e,"STRONG",{});var LUr=s(une);Jvo=r(LUr,"funnel"),LUr.forEach(t),Yvo=r(F5e," \u2014 "),MI=n(F5e,"A",{href:!0});var xUr=s(MI);Kvo=r(xUr,"FunnelForMaskedLM"),xUr.forEach(t),Zvo=r(F5e," (Funnel Transformer model)"),F5e.forEach(t),e6o=i(N),p1=n(N,"LI",{});var v5e=s(p1);bne=n(v5e,"STRONG",{});var kUr=s(bne);o6o=r(kUr,"ibert"),kUr.forEach(t),r6o=r(v5e," \u2014 "),EI=n(v5e,"A",{href:!0});var SUr=s(EI);t6o=r(SUr,"IBertForMaskedLM"),SUr.forEach(t),a6o=r(v5e," (I-BERT model)"),v5e.forEach(t),n6o=i(N),_1=n(N,"LI",{});var T5e=s(_1);Fne=n(T5e,"STRONG",{});var RUr=s(Fne);s6o=r(RUr,"layoutlm"),RUr.forEach(t),l6o=r(T5e," \u2014 "),CI=n(T5e,"A",{href:!0});var BUr=s(CI);i6o=r(BUr,"LayoutLMForMaskedLM"),BUr.forEach(t),d6o=r(T5e," (LayoutLM model)"),T5e.forEach(t),c6o=i(N),u1=n(N,"LI",{});var M5e=s(u1);vne=n(M5e,"STRONG",{});var PUr=s(vne);f6o=r(PUr,"longformer"),PUr.forEach(t),m6o=r(M5e," \u2014 "),wI=n(M5e,"A",{href:!0});var $Ur=s(wI);g6o=r($Ur,"LongformerForMaskedLM"),$Ur.forEach(t),h6o=r(M5e," (Longformer model)"),M5e.forEach(t),p6o=i(N),b1=n(N,"LI",{});var E5e=s(b1);Tne=n(E5e,"STRONG",{});var IUr=s(Tne);_6o=r(IUr,"mbart"),IUr.forEach(t),u6o=r(E5e," \u2014 "),AI=n(E5e,"A",{href:!0});var qUr=s(AI);b6o=r(qUr,"MBartForConditionalGeneration"),qUr.forEach(t),F6o=r(E5e," (mBART model)"),E5e.forEach(t),v6o=i(N),F1=n(N,"LI",{});var C5e=s(F1);Mne=n(C5e,"STRONG",{});var NUr=s(Mne);T6o=r(NUr,"megatron-bert"),NUr.forEach(t),M6o=r(C5e," \u2014 "),yI=n(C5e,"A",{href:!0});var jUr=s(yI);E6o=r(jUr,"MegatronBertForMaskedLM"),jUr.forEach(t),C6o=r(C5e," (MegatronBert model)"),C5e.forEach(t),w6o=i(N),v1=n(N,"LI",{});var w5e=s(v1);Ene=n(w5e,"STRONG",{});var DUr=s(Ene);A6o=r(DUr,"mobilebert"),DUr.forEach(t),y6o=r(w5e," \u2014 "),LI=n(w5e,"A",{href:!0});var GUr=s(LI);L6o=r(GUr,"MobileBertForMaskedLM"),GUr.forEach(t),x6o=r(w5e," (MobileBERT model)"),w5e.forEach(t),k6o=i(N),T1=n(N,"LI",{});var A5e=s(T1);Cne=n(A5e,"STRONG",{});var OUr=s(Cne);S6o=r(OUr,"mpnet"),OUr.forEach(t),R6o=r(A5e," \u2014 "),xI=n(A5e,"A",{href:!0});var VUr=s(xI);B6o=r(VUr,"MPNetForMaskedLM"),VUr.forEach(t),P6o=r(A5e," (MPNet model)"),A5e.forEach(t),$6o=i(N),M1=n(N,"LI",{});var y5e=s(M1);wne=n(y5e,"STRONG",{});var XUr=s(wne);I6o=r(XUr,"nystromformer"),XUr.forEach(t),q6o=r(y5e," \u2014 "),kI=n(y5e,"A",{href:!0});var zUr=s(kI);N6o=r(zUr,"NystromformerForMaskedLM"),zUr.forEach(t),j6o=r(y5e," (Nystromformer model)"),y5e.forEach(t),D6o=i(N),E1=n(N,"LI",{});var L5e=s(E1);Ane=n(L5e,"STRONG",{});var QUr=s(Ane);G6o=r(QUr,"perceiver"),QUr.forEach(t),O6o=r(L5e," \u2014 "),SI=n(L5e,"A",{href:!0});var WUr=s(SI);V6o=r(WUr,"PerceiverForMaskedLM"),WUr.forEach(t),X6o=r(L5e," (Perceiver model)"),L5e.forEach(t),z6o=i(N),C1=n(N,"LI",{});var x5e=s(C1);yne=n(x5e,"STRONG",{});var HUr=s(yne);Q6o=r(HUr,"qdqbert"),HUr.forEach(t),W6o=r(x5e," \u2014 "),RI=n(x5e,"A",{href:!0});var UUr=s(RI);H6o=r(UUr,"QDQBertForMaskedLM"),UUr.forEach(t),U6o=r(x5e," (QDQBert model)"),x5e.forEach(t),J6o=i(N),w1=n(N,"LI",{});var k5e=s(w1);Lne=n(k5e,"STRONG",{});var JUr=s(Lne);Y6o=r(JUr,"reformer"),JUr.forEach(t),K6o=r(k5e," \u2014 "),BI=n(k5e,"A",{href:!0});var YUr=s(BI);Z6o=r(YUr,"ReformerForMaskedLM"),YUr.forEach(t),eTo=r(k5e," (Reformer model)"),k5e.forEach(t),oTo=i(N),A1=n(N,"LI",{});var S5e=s(A1);xne=n(S5e,"STRONG",{});var KUr=s(xne);rTo=r(KUr,"rembert"),KUr.forEach(t),tTo=r(S5e," \u2014 "),PI=n(S5e,"A",{href:!0});var ZUr=s(PI);aTo=r(ZUr,"RemBertForMaskedLM"),ZUr.forEach(t),nTo=r(S5e," (RemBERT model)"),S5e.forEach(t),sTo=i(N),y1=n(N,"LI",{});var R5e=s(y1);kne=n(R5e,"STRONG",{});var eJr=s(kne);lTo=r(eJr,"roberta"),eJr.forEach(t),iTo=r(R5e," \u2014 "),$I=n(R5e,"A",{href:!0});var oJr=s($I);dTo=r(oJr,"RobertaForMaskedLM"),oJr.forEach(t),cTo=r(R5e," (RoBERTa model)"),R5e.forEach(t),fTo=i(N),L1=n(N,"LI",{});var B5e=s(L1);Sne=n(B5e,"STRONG",{});var rJr=s(Sne);mTo=r(rJr,"roformer"),rJr.forEach(t),gTo=r(B5e," \u2014 "),II=n(B5e,"A",{href:!0});var tJr=s(II);hTo=r(tJr,"RoFormerForMaskedLM"),tJr.forEach(t),pTo=r(B5e," (RoFormer model)"),B5e.forEach(t),_To=i(N),x1=n(N,"LI",{});var P5e=s(x1);Rne=n(P5e,"STRONG",{});var aJr=s(Rne);uTo=r(aJr,"squeezebert"),aJr.forEach(t),bTo=r(P5e," \u2014 "),qI=n(P5e,"A",{href:!0});var nJr=s(qI);FTo=r(nJr,"SqueezeBertForMaskedLM"),nJr.forEach(t),vTo=r(P5e," (SqueezeBERT model)"),P5e.forEach(t),TTo=i(N),k1=n(N,"LI",{});var $5e=s(k1);Bne=n($5e,"STRONG",{});var sJr=s(Bne);MTo=r(sJr,"tapas"),sJr.forEach(t),ETo=r($5e," \u2014 "),NI=n($5e,"A",{href:!0});var lJr=s(NI);CTo=r(lJr,"TapasForMaskedLM"),lJr.forEach(t),wTo=r($5e," (TAPAS model)"),$5e.forEach(t),ATo=i(N),S1=n(N,"LI",{});var I5e=s(S1);Pne=n(I5e,"STRONG",{});var iJr=s(Pne);yTo=r(iJr,"wav2vec2"),iJr.forEach(t),LTo=r(I5e," \u2014 "),$ne=n(I5e,"CODE",{});var dJr=s($ne);xTo=r(dJr,"Wav2Vec2ForMaskedLM"),dJr.forEach(t),kTo=r(I5e,"(Wav2Vec2 model)"),I5e.forEach(t),STo=i(N),R1=n(N,"LI",{});var q5e=s(R1);Ine=n(q5e,"STRONG",{});var cJr=s(Ine);RTo=r(cJr,"xlm"),cJr.forEach(t),BTo=r(q5e," \u2014 "),jI=n(q5e,"A",{href:!0});var fJr=s(jI);PTo=r(fJr,"XLMWithLMHeadModel"),fJr.forEach(t),$To=r(q5e," (XLM model)"),q5e.forEach(t),ITo=i(N),B1=n(N,"LI",{});var N5e=s(B1);qne=n(N5e,"STRONG",{});var mJr=s(qne);qTo=r(mJr,"xlm-roberta"),mJr.forEach(t),NTo=r(N5e," \u2014 "),DI=n(N5e,"A",{href:!0});var gJr=s(DI);jTo=r(gJr,"XLMRobertaForMaskedLM"),gJr.forEach(t),DTo=r(N5e," (XLM-RoBERTa model)"),N5e.forEach(t),GTo=i(N),P1=n(N,"LI",{});var j5e=s(P1);Nne=n(j5e,"STRONG",{});var hJr=s(Nne);OTo=r(hJr,"xlm-roberta-xl"),hJr.forEach(t),VTo=r(j5e," \u2014 "),GI=n(j5e,"A",{href:!0});var pJr=s(GI);XTo=r(pJr,"XLMRobertaXLForMaskedLM"),pJr.forEach(t),zTo=r(j5e," (XLM-RoBERTa-XL model)"),j5e.forEach(t),QTo=i(N),$1=n(N,"LI",{});var D5e=s($1);jne=n(D5e,"STRONG",{});var _Jr=s(jne);WTo=r(_Jr,"yoso"),_Jr.forEach(t),HTo=r(D5e," \u2014 "),OI=n(D5e,"A",{href:!0});var uJr=s(OI);UTo=r(uJr,"YosoForMaskedLM"),uJr.forEach(t),JTo=r(D5e," (YOSO model)"),D5e.forEach(t),N.forEach(t),YTo=i(Vt),I1=n(Vt,"P",{});var G5e=s(I1);KTo=r(G5e,"The model is set in evaluation mode by default using "),Dne=n(G5e,"CODE",{});var bJr=s(Dne);ZTo=r(bJr,"model.eval()"),bJr.forEach(t),e7o=r(G5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=n(G5e,"CODE",{});var FJr=s(Gne);o7o=r(FJr,"model.train()"),FJr.forEach(t),G5e.forEach(t),r7o=i(Vt),One=n(Vt,"P",{});var vJr=s(One);t7o=r(vJr,"Examples:"),vJr.forEach(t),a7o=i(Vt),m(v5.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),JSe=i(c),id=n(c,"H2",{class:!0});var nPe=s(id);q1=n(nPe,"A",{id:!0,class:!0,href:!0});var TJr=s(q1);Vne=n(TJr,"SPAN",{});var MJr=s(Vne);m(T5.$$.fragment,MJr),MJr.forEach(t),TJr.forEach(t),n7o=i(nPe),Xne=n(nPe,"SPAN",{});var EJr=s(Xne);s7o=r(EJr,"AutoModelForSeq2SeqLM"),EJr.forEach(t),nPe.forEach(t),YSe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(M5.$$.fragment,el),l7o=i(el),dd=n(el,"P",{});var ZH=s(dd);i7o=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VI=n(ZH,"A",{href:!0});var CJr=s(VI);d7o=r(CJr,"from_pretrained()"),CJr.forEach(t),c7o=r(ZH," class method or the "),XI=n(ZH,"A",{href:!0});var wJr=s(XI);f7o=r(wJr,"from_config()"),wJr.forEach(t),m7o=r(ZH,` class
method.`),ZH.forEach(t),g7o=i(el),E5=n(el,"P",{});var sPe=s(E5);h7o=r(sPe,"This class cannot be instantiated directly using "),zne=n(sPe,"CODE",{});var AJr=s(zne);p7o=r(AJr,"__init__()"),AJr.forEach(t),_7o=r(sPe," (throws an error)."),sPe.forEach(t),u7o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(C5.$$.fragment,ol),b7o=i(ol),Qne=n(ol,"P",{});var yJr=s(Qne);F7o=r(yJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yJr.forEach(t),v7o=i(ol),cd=n(ol,"P",{});var eU=s(cd);T7o=r(eU,`Note:
Loading a model from its configuration file does `),Wne=n(eU,"STRONG",{});var LJr=s(Wne);M7o=r(LJr,"not"),LJr.forEach(t),E7o=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=n(eU,"A",{href:!0});var xJr=s(zI);C7o=r(xJr,"from_pretrained()"),xJr.forEach(t),w7o=r(eU," to load the model weights."),eU.forEach(t),A7o=i(ol),Hne=n(ol,"P",{});var kJr=s(Hne);y7o=r(kJr,"Examples:"),kJr.forEach(t),L7o=i(ol),m(w5.$$.fragment,ol),ol.forEach(t),x7o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(A5.$$.fragment,Xt),k7o=i(Xt),Une=n(Xt,"P",{});var SJr=s(Une);S7o=r(SJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SJr.forEach(t),R7o=i(Xt),Ha=n(Xt,"P",{});var TE=s(Ha);B7o=r(TE,"The model class to instantiate is selected based on the "),Jne=n(TE,"CODE",{});var RJr=s(Jne);P7o=r(RJr,"model_type"),RJr.forEach(t),$7o=r(TE,` property of the config object (either
passed as an argument or loaded from `),Yne=n(TE,"CODE",{});var BJr=s(Yne);I7o=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),q7o=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(TE,"CODE",{});var PJr=s(Kne);N7o=r(PJr,"pretrained_model_name_or_path"),PJr.forEach(t),j7o=r(TE,":"),TE.forEach(t),D7o=i(Xt),se=n(Xt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var O5e=s(N1);Zne=n(O5e,"STRONG",{});var $Jr=s(Zne);G7o=r($Jr,"bart"),$Jr.forEach(t),O7o=r(O5e," \u2014 "),QI=n(O5e,"A",{href:!0});var IJr=s(QI);V7o=r(IJr,"BartForConditionalGeneration"),IJr.forEach(t),X7o=r(O5e," (BART model)"),O5e.forEach(t),z7o=i(ie),j1=n(ie,"LI",{});var V5e=s(j1);ese=n(V5e,"STRONG",{});var qJr=s(ese);Q7o=r(qJr,"bigbird_pegasus"),qJr.forEach(t),W7o=r(V5e," \u2014 "),WI=n(V5e,"A",{href:!0});var NJr=s(WI);H7o=r(NJr,"BigBirdPegasusForConditionalGeneration"),NJr.forEach(t),U7o=r(V5e," (BigBirdPegasus model)"),V5e.forEach(t),J7o=i(ie),D1=n(ie,"LI",{});var X5e=s(D1);ose=n(X5e,"STRONG",{});var jJr=s(ose);Y7o=r(jJr,"blenderbot"),jJr.forEach(t),K7o=r(X5e," \u2014 "),HI=n(X5e,"A",{href:!0});var DJr=s(HI);Z7o=r(DJr,"BlenderbotForConditionalGeneration"),DJr.forEach(t),eMo=r(X5e," (Blenderbot model)"),X5e.forEach(t),oMo=i(ie),G1=n(ie,"LI",{});var z5e=s(G1);rse=n(z5e,"STRONG",{});var GJr=s(rse);rMo=r(GJr,"blenderbot-small"),GJr.forEach(t),tMo=r(z5e," \u2014 "),UI=n(z5e,"A",{href:!0});var OJr=s(UI);aMo=r(OJr,"BlenderbotSmallForConditionalGeneration"),OJr.forEach(t),nMo=r(z5e," (BlenderbotSmall model)"),z5e.forEach(t),sMo=i(ie),O1=n(ie,"LI",{});var Q5e=s(O1);tse=n(Q5e,"STRONG",{});var VJr=s(tse);lMo=r(VJr,"encoder-decoder"),VJr.forEach(t),iMo=r(Q5e," \u2014 "),JI=n(Q5e,"A",{href:!0});var XJr=s(JI);dMo=r(XJr,"EncoderDecoderModel"),XJr.forEach(t),cMo=r(Q5e," (Encoder decoder model)"),Q5e.forEach(t),fMo=i(ie),V1=n(ie,"LI",{});var W5e=s(V1);ase=n(W5e,"STRONG",{});var zJr=s(ase);mMo=r(zJr,"fsmt"),zJr.forEach(t),gMo=r(W5e," \u2014 "),YI=n(W5e,"A",{href:!0});var QJr=s(YI);hMo=r(QJr,"FSMTForConditionalGeneration"),QJr.forEach(t),pMo=r(W5e," (FairSeq Machine-Translation model)"),W5e.forEach(t),_Mo=i(ie),X1=n(ie,"LI",{});var H5e=s(X1);nse=n(H5e,"STRONG",{});var WJr=s(nse);uMo=r(WJr,"led"),WJr.forEach(t),bMo=r(H5e," \u2014 "),KI=n(H5e,"A",{href:!0});var HJr=s(KI);FMo=r(HJr,"LEDForConditionalGeneration"),HJr.forEach(t),vMo=r(H5e," (LED model)"),H5e.forEach(t),TMo=i(ie),z1=n(ie,"LI",{});var U5e=s(z1);sse=n(U5e,"STRONG",{});var UJr=s(sse);MMo=r(UJr,"m2m_100"),UJr.forEach(t),EMo=r(U5e," \u2014 "),ZI=n(U5e,"A",{href:!0});var JJr=s(ZI);CMo=r(JJr,"M2M100ForConditionalGeneration"),JJr.forEach(t),wMo=r(U5e," (M2M100 model)"),U5e.forEach(t),AMo=i(ie),Q1=n(ie,"LI",{});var J5e=s(Q1);lse=n(J5e,"STRONG",{});var YJr=s(lse);yMo=r(YJr,"marian"),YJr.forEach(t),LMo=r(J5e," \u2014 "),eq=n(J5e,"A",{href:!0});var KJr=s(eq);xMo=r(KJr,"MarianMTModel"),KJr.forEach(t),kMo=r(J5e," (Marian model)"),J5e.forEach(t),SMo=i(ie),W1=n(ie,"LI",{});var Y5e=s(W1);ise=n(Y5e,"STRONG",{});var ZJr=s(ise);RMo=r(ZJr,"mbart"),ZJr.forEach(t),BMo=r(Y5e," \u2014 "),oq=n(Y5e,"A",{href:!0});var eYr=s(oq);PMo=r(eYr,"MBartForConditionalGeneration"),eYr.forEach(t),$Mo=r(Y5e," (mBART model)"),Y5e.forEach(t),IMo=i(ie),H1=n(ie,"LI",{});var K5e=s(H1);dse=n(K5e,"STRONG",{});var oYr=s(dse);qMo=r(oYr,"mt5"),oYr.forEach(t),NMo=r(K5e," \u2014 "),rq=n(K5e,"A",{href:!0});var rYr=s(rq);jMo=r(rYr,"MT5ForConditionalGeneration"),rYr.forEach(t),DMo=r(K5e," (mT5 model)"),K5e.forEach(t),GMo=i(ie),U1=n(ie,"LI",{});var Z5e=s(U1);cse=n(Z5e,"STRONG",{});var tYr=s(cse);OMo=r(tYr,"pegasus"),tYr.forEach(t),VMo=r(Z5e," \u2014 "),tq=n(Z5e,"A",{href:!0});var aYr=s(tq);XMo=r(aYr,"PegasusForConditionalGeneration"),aYr.forEach(t),zMo=r(Z5e," (Pegasus model)"),Z5e.forEach(t),QMo=i(ie),J1=n(ie,"LI",{});var ewe=s(J1);fse=n(ewe,"STRONG",{});var nYr=s(fse);WMo=r(nYr,"plbart"),nYr.forEach(t),HMo=r(ewe," \u2014 "),aq=n(ewe,"A",{href:!0});var sYr=s(aq);UMo=r(sYr,"PLBartForConditionalGeneration"),sYr.forEach(t),JMo=r(ewe," (PLBart model)"),ewe.forEach(t),YMo=i(ie),Y1=n(ie,"LI",{});var owe=s(Y1);mse=n(owe,"STRONG",{});var lYr=s(mse);KMo=r(lYr,"prophetnet"),lYr.forEach(t),ZMo=r(owe," \u2014 "),nq=n(owe,"A",{href:!0});var iYr=s(nq);e4o=r(iYr,"ProphetNetForConditionalGeneration"),iYr.forEach(t),o4o=r(owe," (ProphetNet model)"),owe.forEach(t),r4o=i(ie),K1=n(ie,"LI",{});var rwe=s(K1);gse=n(rwe,"STRONG",{});var dYr=s(gse);t4o=r(dYr,"t5"),dYr.forEach(t),a4o=r(rwe," \u2014 "),sq=n(rwe,"A",{href:!0});var cYr=s(sq);n4o=r(cYr,"T5ForConditionalGeneration"),cYr.forEach(t),s4o=r(rwe," (T5 model)"),rwe.forEach(t),l4o=i(ie),Z1=n(ie,"LI",{});var twe=s(Z1);hse=n(twe,"STRONG",{});var fYr=s(hse);i4o=r(fYr,"xlm-prophetnet"),fYr.forEach(t),d4o=r(twe," \u2014 "),lq=n(twe,"A",{href:!0});var mYr=s(lq);c4o=r(mYr,"XLMProphetNetForConditionalGeneration"),mYr.forEach(t),f4o=r(twe," (XLMProphetNet model)"),twe.forEach(t),ie.forEach(t),m4o=i(Xt),eb=n(Xt,"P",{});var awe=s(eb);g4o=r(awe,"The model is set in evaluation mode by default using "),pse=n(awe,"CODE",{});var gYr=s(pse);h4o=r(gYr,"model.eval()"),gYr.forEach(t),p4o=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=n(awe,"CODE",{});var hYr=s(_se);_4o=r(hYr,"model.train()"),hYr.forEach(t),awe.forEach(t),u4o=i(Xt),use=n(Xt,"P",{});var pYr=s(use);b4o=r(pYr,"Examples:"),pYr.forEach(t),F4o=i(Xt),m(y5.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),KSe=i(c),fd=n(c,"H2",{class:!0});var lPe=s(fd);ob=n(lPe,"A",{id:!0,class:!0,href:!0});var _Yr=s(ob);bse=n(_Yr,"SPAN",{});var uYr=s(bse);m(L5.$$.fragment,uYr),uYr.forEach(t),_Yr.forEach(t),v4o=i(lPe),Fse=n(lPe,"SPAN",{});var bYr=s(Fse);T4o=r(bYr,"AutoModelForSequenceClassification"),bYr.forEach(t),lPe.forEach(t),ZSe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(x5.$$.fragment,rl),M4o=i(rl),md=n(rl,"P",{});var oU=s(md);E4o=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iq=n(oU,"A",{href:!0});var FYr=s(iq);C4o=r(FYr,"from_pretrained()"),FYr.forEach(t),w4o=r(oU," class method or the "),dq=n(oU,"A",{href:!0});var vYr=s(dq);A4o=r(vYr,"from_config()"),vYr.forEach(t),y4o=r(oU,` class
method.`),oU.forEach(t),L4o=i(rl),k5=n(rl,"P",{});var iPe=s(k5);x4o=r(iPe,"This class cannot be instantiated directly using "),vse=n(iPe,"CODE",{});var TYr=s(vse);k4o=r(TYr,"__init__()"),TYr.forEach(t),S4o=r(iPe," (throws an error)."),iPe.forEach(t),R4o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(S5.$$.fragment,tl),B4o=i(tl),Tse=n(tl,"P",{});var MYr=s(Tse);P4o=r(MYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MYr.forEach(t),$4o=i(tl),gd=n(tl,"P",{});var rU=s(gd);I4o=r(rU,`Note:
Loading a model from its configuration file does `),Mse=n(rU,"STRONG",{});var EYr=s(Mse);q4o=r(EYr,"not"),EYr.forEach(t),N4o=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=n(rU,"A",{href:!0});var CYr=s(cq);j4o=r(CYr,"from_pretrained()"),CYr.forEach(t),D4o=r(rU," to load the model weights."),rU.forEach(t),G4o=i(tl),Ese=n(tl,"P",{});var wYr=s(Ese);O4o=r(wYr,"Examples:"),wYr.forEach(t),V4o=i(tl),m(R5.$$.fragment,tl),tl.forEach(t),X4o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(B5.$$.fragment,zt),z4o=i(zt),Cse=n(zt,"P",{});var AYr=s(Cse);Q4o=r(AYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AYr.forEach(t),W4o=i(zt),Ua=n(zt,"P",{});var ME=s(Ua);H4o=r(ME,"The model class to instantiate is selected based on the "),wse=n(ME,"CODE",{});var yYr=s(wse);U4o=r(yYr,"model_type"),yYr.forEach(t),J4o=r(ME,` property of the config object (either
passed as an argument or loaded from `),Ase=n(ME,"CODE",{});var LYr=s(Ase);Y4o=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),K4o=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(ME,"CODE",{});var xYr=s(yse);Z4o=r(xYr,"pretrained_model_name_or_path"),xYr.forEach(t),eEo=r(ME,":"),ME.forEach(t),oEo=i(zt),y=n(zt,"UL",{});var L=s(y);rb=n(L,"LI",{});var nwe=s(rb);Lse=n(nwe,"STRONG",{});var kYr=s(Lse);rEo=r(kYr,"albert"),kYr.forEach(t),tEo=r(nwe," \u2014 "),fq=n(nwe,"A",{href:!0});var SYr=s(fq);aEo=r(SYr,"AlbertForSequenceClassification"),SYr.forEach(t),nEo=r(nwe," (ALBERT model)"),nwe.forEach(t),sEo=i(L),tb=n(L,"LI",{});var swe=s(tb);xse=n(swe,"STRONG",{});var RYr=s(xse);lEo=r(RYr,"bart"),RYr.forEach(t),iEo=r(swe," \u2014 "),mq=n(swe,"A",{href:!0});var BYr=s(mq);dEo=r(BYr,"BartForSequenceClassification"),BYr.forEach(t),cEo=r(swe," (BART model)"),swe.forEach(t),fEo=i(L),ab=n(L,"LI",{});var lwe=s(ab);kse=n(lwe,"STRONG",{});var PYr=s(kse);mEo=r(PYr,"bert"),PYr.forEach(t),gEo=r(lwe," \u2014 "),gq=n(lwe,"A",{href:!0});var $Yr=s(gq);hEo=r($Yr,"BertForSequenceClassification"),$Yr.forEach(t),pEo=r(lwe," (BERT model)"),lwe.forEach(t),_Eo=i(L),nb=n(L,"LI",{});var iwe=s(nb);Sse=n(iwe,"STRONG",{});var IYr=s(Sse);uEo=r(IYr,"big_bird"),IYr.forEach(t),bEo=r(iwe," \u2014 "),hq=n(iwe,"A",{href:!0});var qYr=s(hq);FEo=r(qYr,"BigBirdForSequenceClassification"),qYr.forEach(t),vEo=r(iwe," (BigBird model)"),iwe.forEach(t),TEo=i(L),sb=n(L,"LI",{});var dwe=s(sb);Rse=n(dwe,"STRONG",{});var NYr=s(Rse);MEo=r(NYr,"bigbird_pegasus"),NYr.forEach(t),EEo=r(dwe," \u2014 "),pq=n(dwe,"A",{href:!0});var jYr=s(pq);CEo=r(jYr,"BigBirdPegasusForSequenceClassification"),jYr.forEach(t),wEo=r(dwe," (BigBirdPegasus model)"),dwe.forEach(t),AEo=i(L),lb=n(L,"LI",{});var cwe=s(lb);Bse=n(cwe,"STRONG",{});var DYr=s(Bse);yEo=r(DYr,"camembert"),DYr.forEach(t),LEo=r(cwe," \u2014 "),_q=n(cwe,"A",{href:!0});var GYr=s(_q);xEo=r(GYr,"CamembertForSequenceClassification"),GYr.forEach(t),kEo=r(cwe," (CamemBERT model)"),cwe.forEach(t),SEo=i(L),ib=n(L,"LI",{});var fwe=s(ib);Pse=n(fwe,"STRONG",{});var OYr=s(Pse);REo=r(OYr,"canine"),OYr.forEach(t),BEo=r(fwe," \u2014 "),uq=n(fwe,"A",{href:!0});var VYr=s(uq);PEo=r(VYr,"CanineForSequenceClassification"),VYr.forEach(t),$Eo=r(fwe," (Canine model)"),fwe.forEach(t),IEo=i(L),db=n(L,"LI",{});var mwe=s(db);$se=n(mwe,"STRONG",{});var XYr=s($se);qEo=r(XYr,"convbert"),XYr.forEach(t),NEo=r(mwe," \u2014 "),bq=n(mwe,"A",{href:!0});var zYr=s(bq);jEo=r(zYr,"ConvBertForSequenceClassification"),zYr.forEach(t),DEo=r(mwe," (ConvBERT model)"),mwe.forEach(t),GEo=i(L),cb=n(L,"LI",{});var gwe=s(cb);Ise=n(gwe,"STRONG",{});var QYr=s(Ise);OEo=r(QYr,"ctrl"),QYr.forEach(t),VEo=r(gwe," \u2014 "),Fq=n(gwe,"A",{href:!0});var WYr=s(Fq);XEo=r(WYr,"CTRLForSequenceClassification"),WYr.forEach(t),zEo=r(gwe," (CTRL model)"),gwe.forEach(t),QEo=i(L),fb=n(L,"LI",{});var hwe=s(fb);qse=n(hwe,"STRONG",{});var HYr=s(qse);WEo=r(HYr,"data2vec-text"),HYr.forEach(t),HEo=r(hwe," \u2014 "),vq=n(hwe,"A",{href:!0});var UYr=s(vq);UEo=r(UYr,"Data2VecTextForSequenceClassification"),UYr.forEach(t),JEo=r(hwe," (Data2VecText model)"),hwe.forEach(t),YEo=i(L),mb=n(L,"LI",{});var pwe=s(mb);Nse=n(pwe,"STRONG",{});var JYr=s(Nse);KEo=r(JYr,"deberta"),JYr.forEach(t),ZEo=r(pwe," \u2014 "),Tq=n(pwe,"A",{href:!0});var YYr=s(Tq);eCo=r(YYr,"DebertaForSequenceClassification"),YYr.forEach(t),oCo=r(pwe," (DeBERTa model)"),pwe.forEach(t),rCo=i(L),gb=n(L,"LI",{});var _we=s(gb);jse=n(_we,"STRONG",{});var KYr=s(jse);tCo=r(KYr,"deberta-v2"),KYr.forEach(t),aCo=r(_we," \u2014 "),Mq=n(_we,"A",{href:!0});var ZYr=s(Mq);nCo=r(ZYr,"DebertaV2ForSequenceClassification"),ZYr.forEach(t),sCo=r(_we," (DeBERTa-v2 model)"),_we.forEach(t),lCo=i(L),hb=n(L,"LI",{});var uwe=s(hb);Dse=n(uwe,"STRONG",{});var eKr=s(Dse);iCo=r(eKr,"distilbert"),eKr.forEach(t),dCo=r(uwe," \u2014 "),Eq=n(uwe,"A",{href:!0});var oKr=s(Eq);cCo=r(oKr,"DistilBertForSequenceClassification"),oKr.forEach(t),fCo=r(uwe," (DistilBERT model)"),uwe.forEach(t),mCo=i(L),pb=n(L,"LI",{});var bwe=s(pb);Gse=n(bwe,"STRONG",{});var rKr=s(Gse);gCo=r(rKr,"electra"),rKr.forEach(t),hCo=r(bwe," \u2014 "),Cq=n(bwe,"A",{href:!0});var tKr=s(Cq);pCo=r(tKr,"ElectraForSequenceClassification"),tKr.forEach(t),_Co=r(bwe," (ELECTRA model)"),bwe.forEach(t),uCo=i(L),_b=n(L,"LI",{});var Fwe=s(_b);Ose=n(Fwe,"STRONG",{});var aKr=s(Ose);bCo=r(aKr,"flaubert"),aKr.forEach(t),FCo=r(Fwe," \u2014 "),wq=n(Fwe,"A",{href:!0});var nKr=s(wq);vCo=r(nKr,"FlaubertForSequenceClassification"),nKr.forEach(t),TCo=r(Fwe," (FlauBERT model)"),Fwe.forEach(t),MCo=i(L),ub=n(L,"LI",{});var vwe=s(ub);Vse=n(vwe,"STRONG",{});var sKr=s(Vse);ECo=r(sKr,"fnet"),sKr.forEach(t),CCo=r(vwe," \u2014 "),Aq=n(vwe,"A",{href:!0});var lKr=s(Aq);wCo=r(lKr,"FNetForSequenceClassification"),lKr.forEach(t),ACo=r(vwe," (FNet model)"),vwe.forEach(t),yCo=i(L),bb=n(L,"LI",{});var Twe=s(bb);Xse=n(Twe,"STRONG",{});var iKr=s(Xse);LCo=r(iKr,"funnel"),iKr.forEach(t),xCo=r(Twe," \u2014 "),yq=n(Twe,"A",{href:!0});var dKr=s(yq);kCo=r(dKr,"FunnelForSequenceClassification"),dKr.forEach(t),SCo=r(Twe," (Funnel Transformer model)"),Twe.forEach(t),RCo=i(L),Fb=n(L,"LI",{});var Mwe=s(Fb);zse=n(Mwe,"STRONG",{});var cKr=s(zse);BCo=r(cKr,"gpt2"),cKr.forEach(t),PCo=r(Mwe," \u2014 "),Lq=n(Mwe,"A",{href:!0});var fKr=s(Lq);$Co=r(fKr,"GPT2ForSequenceClassification"),fKr.forEach(t),ICo=r(Mwe," (OpenAI GPT-2 model)"),Mwe.forEach(t),qCo=i(L),vb=n(L,"LI",{});var Ewe=s(vb);Qse=n(Ewe,"STRONG",{});var mKr=s(Qse);NCo=r(mKr,"gpt_neo"),mKr.forEach(t),jCo=r(Ewe," \u2014 "),xq=n(Ewe,"A",{href:!0});var gKr=s(xq);DCo=r(gKr,"GPTNeoForSequenceClassification"),gKr.forEach(t),GCo=r(Ewe," (GPT Neo model)"),Ewe.forEach(t),OCo=i(L),Tb=n(L,"LI",{});var Cwe=s(Tb);Wse=n(Cwe,"STRONG",{});var hKr=s(Wse);VCo=r(hKr,"gptj"),hKr.forEach(t),XCo=r(Cwe," \u2014 "),kq=n(Cwe,"A",{href:!0});var pKr=s(kq);zCo=r(pKr,"GPTJForSequenceClassification"),pKr.forEach(t),QCo=r(Cwe," (GPT-J model)"),Cwe.forEach(t),WCo=i(L),Mb=n(L,"LI",{});var wwe=s(Mb);Hse=n(wwe,"STRONG",{});var _Kr=s(Hse);HCo=r(_Kr,"ibert"),_Kr.forEach(t),UCo=r(wwe," \u2014 "),Sq=n(wwe,"A",{href:!0});var uKr=s(Sq);JCo=r(uKr,"IBertForSequenceClassification"),uKr.forEach(t),YCo=r(wwe," (I-BERT model)"),wwe.forEach(t),KCo=i(L),Eb=n(L,"LI",{});var Awe=s(Eb);Use=n(Awe,"STRONG",{});var bKr=s(Use);ZCo=r(bKr,"layoutlm"),bKr.forEach(t),e5o=r(Awe," \u2014 "),Rq=n(Awe,"A",{href:!0});var FKr=s(Rq);o5o=r(FKr,"LayoutLMForSequenceClassification"),FKr.forEach(t),r5o=r(Awe," (LayoutLM model)"),Awe.forEach(t),t5o=i(L),Cb=n(L,"LI",{});var ywe=s(Cb);Jse=n(ywe,"STRONG",{});var vKr=s(Jse);a5o=r(vKr,"layoutlmv2"),vKr.forEach(t),n5o=r(ywe," \u2014 "),Bq=n(ywe,"A",{href:!0});var TKr=s(Bq);s5o=r(TKr,"LayoutLMv2ForSequenceClassification"),TKr.forEach(t),l5o=r(ywe," (LayoutLMv2 model)"),ywe.forEach(t),i5o=i(L),wb=n(L,"LI",{});var Lwe=s(wb);Yse=n(Lwe,"STRONG",{});var MKr=s(Yse);d5o=r(MKr,"led"),MKr.forEach(t),c5o=r(Lwe," \u2014 "),Pq=n(Lwe,"A",{href:!0});var EKr=s(Pq);f5o=r(EKr,"LEDForSequenceClassification"),EKr.forEach(t),m5o=r(Lwe," (LED model)"),Lwe.forEach(t),g5o=i(L),Ab=n(L,"LI",{});var xwe=s(Ab);Kse=n(xwe,"STRONG",{});var CKr=s(Kse);h5o=r(CKr,"longformer"),CKr.forEach(t),p5o=r(xwe," \u2014 "),$q=n(xwe,"A",{href:!0});var wKr=s($q);_5o=r(wKr,"LongformerForSequenceClassification"),wKr.forEach(t),u5o=r(xwe," (Longformer model)"),xwe.forEach(t),b5o=i(L),yb=n(L,"LI",{});var kwe=s(yb);Zse=n(kwe,"STRONG",{});var AKr=s(Zse);F5o=r(AKr,"mbart"),AKr.forEach(t),v5o=r(kwe," \u2014 "),Iq=n(kwe,"A",{href:!0});var yKr=s(Iq);T5o=r(yKr,"MBartForSequenceClassification"),yKr.forEach(t),M5o=r(kwe," (mBART model)"),kwe.forEach(t),E5o=i(L),Lb=n(L,"LI",{});var Swe=s(Lb);ele=n(Swe,"STRONG",{});var LKr=s(ele);C5o=r(LKr,"megatron-bert"),LKr.forEach(t),w5o=r(Swe," \u2014 "),qq=n(Swe,"A",{href:!0});var xKr=s(qq);A5o=r(xKr,"MegatronBertForSequenceClassification"),xKr.forEach(t),y5o=r(Swe," (MegatronBert model)"),Swe.forEach(t),L5o=i(L),xb=n(L,"LI",{});var Rwe=s(xb);ole=n(Rwe,"STRONG",{});var kKr=s(ole);x5o=r(kKr,"mobilebert"),kKr.forEach(t),k5o=r(Rwe," \u2014 "),Nq=n(Rwe,"A",{href:!0});var SKr=s(Nq);S5o=r(SKr,"MobileBertForSequenceClassification"),SKr.forEach(t),R5o=r(Rwe," (MobileBERT model)"),Rwe.forEach(t),B5o=i(L),kb=n(L,"LI",{});var Bwe=s(kb);rle=n(Bwe,"STRONG",{});var RKr=s(rle);P5o=r(RKr,"mpnet"),RKr.forEach(t),$5o=r(Bwe," \u2014 "),jq=n(Bwe,"A",{href:!0});var BKr=s(jq);I5o=r(BKr,"MPNetForSequenceClassification"),BKr.forEach(t),q5o=r(Bwe," (MPNet model)"),Bwe.forEach(t),N5o=i(L),Sb=n(L,"LI",{});var Pwe=s(Sb);tle=n(Pwe,"STRONG",{});var PKr=s(tle);j5o=r(PKr,"nystromformer"),PKr.forEach(t),D5o=r(Pwe," \u2014 "),Dq=n(Pwe,"A",{href:!0});var $Kr=s(Dq);G5o=r($Kr,"NystromformerForSequenceClassification"),$Kr.forEach(t),O5o=r(Pwe," (Nystromformer model)"),Pwe.forEach(t),V5o=i(L),Rb=n(L,"LI",{});var $we=s(Rb);ale=n($we,"STRONG",{});var IKr=s(ale);X5o=r(IKr,"openai-gpt"),IKr.forEach(t),z5o=r($we," \u2014 "),Gq=n($we,"A",{href:!0});var qKr=s(Gq);Q5o=r(qKr,"OpenAIGPTForSequenceClassification"),qKr.forEach(t),W5o=r($we," (OpenAI GPT model)"),$we.forEach(t),H5o=i(L),Bb=n(L,"LI",{});var Iwe=s(Bb);nle=n(Iwe,"STRONG",{});var NKr=s(nle);U5o=r(NKr,"perceiver"),NKr.forEach(t),J5o=r(Iwe," \u2014 "),Oq=n(Iwe,"A",{href:!0});var jKr=s(Oq);Y5o=r(jKr,"PerceiverForSequenceClassification"),jKr.forEach(t),K5o=r(Iwe," (Perceiver model)"),Iwe.forEach(t),Z5o=i(L),Pb=n(L,"LI",{});var qwe=s(Pb);sle=n(qwe,"STRONG",{});var DKr=s(sle);ewo=r(DKr,"plbart"),DKr.forEach(t),owo=r(qwe," \u2014 "),Vq=n(qwe,"A",{href:!0});var GKr=s(Vq);rwo=r(GKr,"PLBartForSequenceClassification"),GKr.forEach(t),two=r(qwe," (PLBart model)"),qwe.forEach(t),awo=i(L),$b=n(L,"LI",{});var Nwe=s($b);lle=n(Nwe,"STRONG",{});var OKr=s(lle);nwo=r(OKr,"qdqbert"),OKr.forEach(t),swo=r(Nwe," \u2014 "),Xq=n(Nwe,"A",{href:!0});var VKr=s(Xq);lwo=r(VKr,"QDQBertForSequenceClassification"),VKr.forEach(t),iwo=r(Nwe," (QDQBert model)"),Nwe.forEach(t),dwo=i(L),Ib=n(L,"LI",{});var jwe=s(Ib);ile=n(jwe,"STRONG",{});var XKr=s(ile);cwo=r(XKr,"reformer"),XKr.forEach(t),fwo=r(jwe," \u2014 "),zq=n(jwe,"A",{href:!0});var zKr=s(zq);mwo=r(zKr,"ReformerForSequenceClassification"),zKr.forEach(t),gwo=r(jwe," (Reformer model)"),jwe.forEach(t),hwo=i(L),qb=n(L,"LI",{});var Dwe=s(qb);dle=n(Dwe,"STRONG",{});var QKr=s(dle);pwo=r(QKr,"rembert"),QKr.forEach(t),_wo=r(Dwe," \u2014 "),Qq=n(Dwe,"A",{href:!0});var WKr=s(Qq);uwo=r(WKr,"RemBertForSequenceClassification"),WKr.forEach(t),bwo=r(Dwe," (RemBERT model)"),Dwe.forEach(t),Fwo=i(L),Nb=n(L,"LI",{});var Gwe=s(Nb);cle=n(Gwe,"STRONG",{});var HKr=s(cle);vwo=r(HKr,"roberta"),HKr.forEach(t),Two=r(Gwe," \u2014 "),Wq=n(Gwe,"A",{href:!0});var UKr=s(Wq);Mwo=r(UKr,"RobertaForSequenceClassification"),UKr.forEach(t),Ewo=r(Gwe," (RoBERTa model)"),Gwe.forEach(t),Cwo=i(L),jb=n(L,"LI",{});var Owe=s(jb);fle=n(Owe,"STRONG",{});var JKr=s(fle);wwo=r(JKr,"roformer"),JKr.forEach(t),Awo=r(Owe," \u2014 "),Hq=n(Owe,"A",{href:!0});var YKr=s(Hq);ywo=r(YKr,"RoFormerForSequenceClassification"),YKr.forEach(t),Lwo=r(Owe," (RoFormer model)"),Owe.forEach(t),xwo=i(L),Db=n(L,"LI",{});var Vwe=s(Db);mle=n(Vwe,"STRONG",{});var KKr=s(mle);kwo=r(KKr,"squeezebert"),KKr.forEach(t),Swo=r(Vwe," \u2014 "),Uq=n(Vwe,"A",{href:!0});var ZKr=s(Uq);Rwo=r(ZKr,"SqueezeBertForSequenceClassification"),ZKr.forEach(t),Bwo=r(Vwe," (SqueezeBERT model)"),Vwe.forEach(t),Pwo=i(L),Gb=n(L,"LI",{});var Xwe=s(Gb);gle=n(Xwe,"STRONG",{});var eZr=s(gle);$wo=r(eZr,"tapas"),eZr.forEach(t),Iwo=r(Xwe," \u2014 "),Jq=n(Xwe,"A",{href:!0});var oZr=s(Jq);qwo=r(oZr,"TapasForSequenceClassification"),oZr.forEach(t),Nwo=r(Xwe," (TAPAS model)"),Xwe.forEach(t),jwo=i(L),Ob=n(L,"LI",{});var zwe=s(Ob);hle=n(zwe,"STRONG",{});var rZr=s(hle);Dwo=r(rZr,"transfo-xl"),rZr.forEach(t),Gwo=r(zwe," \u2014 "),Yq=n(zwe,"A",{href:!0});var tZr=s(Yq);Owo=r(tZr,"TransfoXLForSequenceClassification"),tZr.forEach(t),Vwo=r(zwe," (Transformer-XL model)"),zwe.forEach(t),Xwo=i(L),Vb=n(L,"LI",{});var Qwe=s(Vb);ple=n(Qwe,"STRONG",{});var aZr=s(ple);zwo=r(aZr,"xlm"),aZr.forEach(t),Qwo=r(Qwe," \u2014 "),Kq=n(Qwe,"A",{href:!0});var nZr=s(Kq);Wwo=r(nZr,"XLMForSequenceClassification"),nZr.forEach(t),Hwo=r(Qwe," (XLM model)"),Qwe.forEach(t),Uwo=i(L),Xb=n(L,"LI",{});var Wwe=s(Xb);_le=n(Wwe,"STRONG",{});var sZr=s(_le);Jwo=r(sZr,"xlm-roberta"),sZr.forEach(t),Ywo=r(Wwe," \u2014 "),Zq=n(Wwe,"A",{href:!0});var lZr=s(Zq);Kwo=r(lZr,"XLMRobertaForSequenceClassification"),lZr.forEach(t),Zwo=r(Wwe," (XLM-RoBERTa model)"),Wwe.forEach(t),eAo=i(L),zb=n(L,"LI",{});var Hwe=s(zb);ule=n(Hwe,"STRONG",{});var iZr=s(ule);oAo=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),rAo=r(Hwe," \u2014 "),eN=n(Hwe,"A",{href:!0});var dZr=s(eN);tAo=r(dZr,"XLMRobertaXLForSequenceClassification"),dZr.forEach(t),aAo=r(Hwe," (XLM-RoBERTa-XL model)"),Hwe.forEach(t),nAo=i(L),Qb=n(L,"LI",{});var Uwe=s(Qb);ble=n(Uwe,"STRONG",{});var cZr=s(ble);sAo=r(cZr,"xlnet"),cZr.forEach(t),lAo=r(Uwe," \u2014 "),oN=n(Uwe,"A",{href:!0});var fZr=s(oN);iAo=r(fZr,"XLNetForSequenceClassification"),fZr.forEach(t),dAo=r(Uwe," (XLNet model)"),Uwe.forEach(t),cAo=i(L),Wb=n(L,"LI",{});var Jwe=s(Wb);Fle=n(Jwe,"STRONG",{});var mZr=s(Fle);fAo=r(mZr,"yoso"),mZr.forEach(t),mAo=r(Jwe," \u2014 "),rN=n(Jwe,"A",{href:!0});var gZr=s(rN);gAo=r(gZr,"YosoForSequenceClassification"),gZr.forEach(t),hAo=r(Jwe," (YOSO model)"),Jwe.forEach(t),L.forEach(t),pAo=i(zt),Hb=n(zt,"P",{});var Ywe=s(Hb);_Ao=r(Ywe,"The model is set in evaluation mode by default using "),vle=n(Ywe,"CODE",{});var hZr=s(vle);uAo=r(hZr,"model.eval()"),hZr.forEach(t),bAo=r(Ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=n(Ywe,"CODE",{});var pZr=s(Tle);FAo=r(pZr,"model.train()"),pZr.forEach(t),Ywe.forEach(t),vAo=i(zt),Mle=n(zt,"P",{});var _Zr=s(Mle);TAo=r(_Zr,"Examples:"),_Zr.forEach(t),MAo=i(zt),m(P5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),eRe=i(c),hd=n(c,"H2",{class:!0});var dPe=s(hd);Ub=n(dPe,"A",{id:!0,class:!0,href:!0});var uZr=s(Ub);Ele=n(uZr,"SPAN",{});var bZr=s(Ele);m($5.$$.fragment,bZr),bZr.forEach(t),uZr.forEach(t),EAo=i(dPe),Cle=n(dPe,"SPAN",{});var FZr=s(Cle);CAo=r(FZr,"AutoModelForMultipleChoice"),FZr.forEach(t),dPe.forEach(t),oRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(I5.$$.fragment,al),wAo=i(al),pd=n(al,"P",{});var tU=s(pd);AAo=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tN=n(tU,"A",{href:!0});var vZr=s(tN);yAo=r(vZr,"from_pretrained()"),vZr.forEach(t),LAo=r(tU," class method or the "),aN=n(tU,"A",{href:!0});var TZr=s(aN);xAo=r(TZr,"from_config()"),TZr.forEach(t),kAo=r(tU,` class
method.`),tU.forEach(t),SAo=i(al),q5=n(al,"P",{});var cPe=s(q5);RAo=r(cPe,"This class cannot be instantiated directly using "),wle=n(cPe,"CODE",{});var MZr=s(wle);BAo=r(MZr,"__init__()"),MZr.forEach(t),PAo=r(cPe," (throws an error)."),cPe.forEach(t),$Ao=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(N5.$$.fragment,nl),IAo=i(nl),Ale=n(nl,"P",{});var EZr=s(Ale);qAo=r(EZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EZr.forEach(t),NAo=i(nl),_d=n(nl,"P",{});var aU=s(_d);jAo=r(aU,`Note:
Loading a model from its configuration file does `),yle=n(aU,"STRONG",{});var CZr=s(yle);DAo=r(CZr,"not"),CZr.forEach(t),GAo=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(aU,"A",{href:!0});var wZr=s(nN);OAo=r(wZr,"from_pretrained()"),wZr.forEach(t),VAo=r(aU," to load the model weights."),aU.forEach(t),XAo=i(nl),Lle=n(nl,"P",{});var AZr=s(Lle);zAo=r(AZr,"Examples:"),AZr.forEach(t),QAo=i(nl),m(j5.$$.fragment,nl),nl.forEach(t),WAo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(D5.$$.fragment,Qt),HAo=i(Qt),xle=n(Qt,"P",{});var yZr=s(xle);UAo=r(yZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yZr.forEach(t),JAo=i(Qt),Ja=n(Qt,"P",{});var EE=s(Ja);YAo=r(EE,"The model class to instantiate is selected based on the "),kle=n(EE,"CODE",{});var LZr=s(kle);KAo=r(LZr,"model_type"),LZr.forEach(t),ZAo=r(EE,` property of the config object (either
passed as an argument or loaded from `),Sle=n(EE,"CODE",{});var xZr=s(Sle);e0o=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),o0o=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(EE,"CODE",{});var kZr=s(Rle);r0o=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),t0o=r(EE,":"),EE.forEach(t),a0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Jb=n(O,"LI",{});var Kwe=s(Jb);Ble=n(Kwe,"STRONG",{});var SZr=s(Ble);n0o=r(SZr,"albert"),SZr.forEach(t),s0o=r(Kwe," \u2014 "),sN=n(Kwe,"A",{href:!0});var RZr=s(sN);l0o=r(RZr,"AlbertForMultipleChoice"),RZr.forEach(t),i0o=r(Kwe," (ALBERT model)"),Kwe.forEach(t),d0o=i(O),Yb=n(O,"LI",{});var Zwe=s(Yb);Ple=n(Zwe,"STRONG",{});var BZr=s(Ple);c0o=r(BZr,"bert"),BZr.forEach(t),f0o=r(Zwe," \u2014 "),lN=n(Zwe,"A",{href:!0});var PZr=s(lN);m0o=r(PZr,"BertForMultipleChoice"),PZr.forEach(t),g0o=r(Zwe," (BERT model)"),Zwe.forEach(t),h0o=i(O),Kb=n(O,"LI",{});var eAe=s(Kb);$le=n(eAe,"STRONG",{});var $Zr=s($le);p0o=r($Zr,"big_bird"),$Zr.forEach(t),_0o=r(eAe," \u2014 "),iN=n(eAe,"A",{href:!0});var IZr=s(iN);u0o=r(IZr,"BigBirdForMultipleChoice"),IZr.forEach(t),b0o=r(eAe," (BigBird model)"),eAe.forEach(t),F0o=i(O),Zb=n(O,"LI",{});var oAe=s(Zb);Ile=n(oAe,"STRONG",{});var qZr=s(Ile);v0o=r(qZr,"camembert"),qZr.forEach(t),T0o=r(oAe," \u2014 "),dN=n(oAe,"A",{href:!0});var NZr=s(dN);M0o=r(NZr,"CamembertForMultipleChoice"),NZr.forEach(t),E0o=r(oAe," (CamemBERT model)"),oAe.forEach(t),C0o=i(O),e3=n(O,"LI",{});var rAe=s(e3);qle=n(rAe,"STRONG",{});var jZr=s(qle);w0o=r(jZr,"canine"),jZr.forEach(t),A0o=r(rAe," \u2014 "),cN=n(rAe,"A",{href:!0});var DZr=s(cN);y0o=r(DZr,"CanineForMultipleChoice"),DZr.forEach(t),L0o=r(rAe," (Canine model)"),rAe.forEach(t),x0o=i(O),o3=n(O,"LI",{});var tAe=s(o3);Nle=n(tAe,"STRONG",{});var GZr=s(Nle);k0o=r(GZr,"convbert"),GZr.forEach(t),S0o=r(tAe," \u2014 "),fN=n(tAe,"A",{href:!0});var OZr=s(fN);R0o=r(OZr,"ConvBertForMultipleChoice"),OZr.forEach(t),B0o=r(tAe," (ConvBERT model)"),tAe.forEach(t),P0o=i(O),r3=n(O,"LI",{});var aAe=s(r3);jle=n(aAe,"STRONG",{});var VZr=s(jle);$0o=r(VZr,"data2vec-text"),VZr.forEach(t),I0o=r(aAe," \u2014 "),mN=n(aAe,"A",{href:!0});var XZr=s(mN);q0o=r(XZr,"Data2VecTextForMultipleChoice"),XZr.forEach(t),N0o=r(aAe," (Data2VecText model)"),aAe.forEach(t),j0o=i(O),t3=n(O,"LI",{});var nAe=s(t3);Dle=n(nAe,"STRONG",{});var zZr=s(Dle);D0o=r(zZr,"distilbert"),zZr.forEach(t),G0o=r(nAe," \u2014 "),gN=n(nAe,"A",{href:!0});var QZr=s(gN);O0o=r(QZr,"DistilBertForMultipleChoice"),QZr.forEach(t),V0o=r(nAe," (DistilBERT model)"),nAe.forEach(t),X0o=i(O),a3=n(O,"LI",{});var sAe=s(a3);Gle=n(sAe,"STRONG",{});var WZr=s(Gle);z0o=r(WZr,"electra"),WZr.forEach(t),Q0o=r(sAe," \u2014 "),hN=n(sAe,"A",{href:!0});var HZr=s(hN);W0o=r(HZr,"ElectraForMultipleChoice"),HZr.forEach(t),H0o=r(sAe," (ELECTRA model)"),sAe.forEach(t),U0o=i(O),n3=n(O,"LI",{});var lAe=s(n3);Ole=n(lAe,"STRONG",{});var UZr=s(Ole);J0o=r(UZr,"flaubert"),UZr.forEach(t),Y0o=r(lAe," \u2014 "),pN=n(lAe,"A",{href:!0});var JZr=s(pN);K0o=r(JZr,"FlaubertForMultipleChoice"),JZr.forEach(t),Z0o=r(lAe," (FlauBERT model)"),lAe.forEach(t),eyo=i(O),s3=n(O,"LI",{});var iAe=s(s3);Vle=n(iAe,"STRONG",{});var YZr=s(Vle);oyo=r(YZr,"fnet"),YZr.forEach(t),ryo=r(iAe," \u2014 "),_N=n(iAe,"A",{href:!0});var KZr=s(_N);tyo=r(KZr,"FNetForMultipleChoice"),KZr.forEach(t),ayo=r(iAe," (FNet model)"),iAe.forEach(t),nyo=i(O),l3=n(O,"LI",{});var dAe=s(l3);Xle=n(dAe,"STRONG",{});var ZZr=s(Xle);syo=r(ZZr,"funnel"),ZZr.forEach(t),lyo=r(dAe," \u2014 "),uN=n(dAe,"A",{href:!0});var eet=s(uN);iyo=r(eet,"FunnelForMultipleChoice"),eet.forEach(t),dyo=r(dAe," (Funnel Transformer model)"),dAe.forEach(t),cyo=i(O),i3=n(O,"LI",{});var cAe=s(i3);zle=n(cAe,"STRONG",{});var oet=s(zle);fyo=r(oet,"ibert"),oet.forEach(t),myo=r(cAe," \u2014 "),bN=n(cAe,"A",{href:!0});var ret=s(bN);gyo=r(ret,"IBertForMultipleChoice"),ret.forEach(t),hyo=r(cAe," (I-BERT model)"),cAe.forEach(t),pyo=i(O),d3=n(O,"LI",{});var fAe=s(d3);Qle=n(fAe,"STRONG",{});var tet=s(Qle);_yo=r(tet,"longformer"),tet.forEach(t),uyo=r(fAe," \u2014 "),FN=n(fAe,"A",{href:!0});var aet=s(FN);byo=r(aet,"LongformerForMultipleChoice"),aet.forEach(t),Fyo=r(fAe," (Longformer model)"),fAe.forEach(t),vyo=i(O),c3=n(O,"LI",{});var mAe=s(c3);Wle=n(mAe,"STRONG",{});var net=s(Wle);Tyo=r(net,"megatron-bert"),net.forEach(t),Myo=r(mAe," \u2014 "),vN=n(mAe,"A",{href:!0});var set=s(vN);Eyo=r(set,"MegatronBertForMultipleChoice"),set.forEach(t),Cyo=r(mAe," (MegatronBert model)"),mAe.forEach(t),wyo=i(O),f3=n(O,"LI",{});var gAe=s(f3);Hle=n(gAe,"STRONG",{});var iet=s(Hle);Ayo=r(iet,"mobilebert"),iet.forEach(t),yyo=r(gAe," \u2014 "),TN=n(gAe,"A",{href:!0});var det=s(TN);Lyo=r(det,"MobileBertForMultipleChoice"),det.forEach(t),xyo=r(gAe," (MobileBERT model)"),gAe.forEach(t),kyo=i(O),m3=n(O,"LI",{});var hAe=s(m3);Ule=n(hAe,"STRONG",{});var cet=s(Ule);Syo=r(cet,"mpnet"),cet.forEach(t),Ryo=r(hAe," \u2014 "),MN=n(hAe,"A",{href:!0});var fet=s(MN);Byo=r(fet,"MPNetForMultipleChoice"),fet.forEach(t),Pyo=r(hAe," (MPNet model)"),hAe.forEach(t),$yo=i(O),g3=n(O,"LI",{});var pAe=s(g3);Jle=n(pAe,"STRONG",{});var met=s(Jle);Iyo=r(met,"nystromformer"),met.forEach(t),qyo=r(pAe," \u2014 "),EN=n(pAe,"A",{href:!0});var get=s(EN);Nyo=r(get,"NystromformerForMultipleChoice"),get.forEach(t),jyo=r(pAe," (Nystromformer model)"),pAe.forEach(t),Dyo=i(O),h3=n(O,"LI",{});var _Ae=s(h3);Yle=n(_Ae,"STRONG",{});var het=s(Yle);Gyo=r(het,"qdqbert"),het.forEach(t),Oyo=r(_Ae," \u2014 "),CN=n(_Ae,"A",{href:!0});var pet=s(CN);Vyo=r(pet,"QDQBertForMultipleChoice"),pet.forEach(t),Xyo=r(_Ae," (QDQBert model)"),_Ae.forEach(t),zyo=i(O),p3=n(O,"LI",{});var uAe=s(p3);Kle=n(uAe,"STRONG",{});var _et=s(Kle);Qyo=r(_et,"rembert"),_et.forEach(t),Wyo=r(uAe," \u2014 "),wN=n(uAe,"A",{href:!0});var uet=s(wN);Hyo=r(uet,"RemBertForMultipleChoice"),uet.forEach(t),Uyo=r(uAe," (RemBERT model)"),uAe.forEach(t),Jyo=i(O),_3=n(O,"LI",{});var bAe=s(_3);Zle=n(bAe,"STRONG",{});var bet=s(Zle);Yyo=r(bet,"roberta"),bet.forEach(t),Kyo=r(bAe," \u2014 "),AN=n(bAe,"A",{href:!0});var Fet=s(AN);Zyo=r(Fet,"RobertaForMultipleChoice"),Fet.forEach(t),eLo=r(bAe," (RoBERTa model)"),bAe.forEach(t),oLo=i(O),u3=n(O,"LI",{});var FAe=s(u3);eie=n(FAe,"STRONG",{});var vet=s(eie);rLo=r(vet,"roformer"),vet.forEach(t),tLo=r(FAe," \u2014 "),yN=n(FAe,"A",{href:!0});var Tet=s(yN);aLo=r(Tet,"RoFormerForMultipleChoice"),Tet.forEach(t),nLo=r(FAe," (RoFormer model)"),FAe.forEach(t),sLo=i(O),b3=n(O,"LI",{});var vAe=s(b3);oie=n(vAe,"STRONG",{});var Met=s(oie);lLo=r(Met,"squeezebert"),Met.forEach(t),iLo=r(vAe," \u2014 "),LN=n(vAe,"A",{href:!0});var Eet=s(LN);dLo=r(Eet,"SqueezeBertForMultipleChoice"),Eet.forEach(t),cLo=r(vAe," (SqueezeBERT model)"),vAe.forEach(t),fLo=i(O),F3=n(O,"LI",{});var TAe=s(F3);rie=n(TAe,"STRONG",{});var Cet=s(rie);mLo=r(Cet,"xlm"),Cet.forEach(t),gLo=r(TAe," \u2014 "),xN=n(TAe,"A",{href:!0});var wet=s(xN);hLo=r(wet,"XLMForMultipleChoice"),wet.forEach(t),pLo=r(TAe," (XLM model)"),TAe.forEach(t),_Lo=i(O),v3=n(O,"LI",{});var MAe=s(v3);tie=n(MAe,"STRONG",{});var Aet=s(tie);uLo=r(Aet,"xlm-roberta"),Aet.forEach(t),bLo=r(MAe," \u2014 "),kN=n(MAe,"A",{href:!0});var yet=s(kN);FLo=r(yet,"XLMRobertaForMultipleChoice"),yet.forEach(t),vLo=r(MAe," (XLM-RoBERTa model)"),MAe.forEach(t),TLo=i(O),T3=n(O,"LI",{});var EAe=s(T3);aie=n(EAe,"STRONG",{});var Let=s(aie);MLo=r(Let,"xlm-roberta-xl"),Let.forEach(t),ELo=r(EAe," \u2014 "),SN=n(EAe,"A",{href:!0});var xet=s(SN);CLo=r(xet,"XLMRobertaXLForMultipleChoice"),xet.forEach(t),wLo=r(EAe," (XLM-RoBERTa-XL model)"),EAe.forEach(t),ALo=i(O),M3=n(O,"LI",{});var CAe=s(M3);nie=n(CAe,"STRONG",{});var ket=s(nie);yLo=r(ket,"xlnet"),ket.forEach(t),LLo=r(CAe," \u2014 "),RN=n(CAe,"A",{href:!0});var Set=s(RN);xLo=r(Set,"XLNetForMultipleChoice"),Set.forEach(t),kLo=r(CAe," (XLNet model)"),CAe.forEach(t),SLo=i(O),E3=n(O,"LI",{});var wAe=s(E3);sie=n(wAe,"STRONG",{});var Ret=s(sie);RLo=r(Ret,"yoso"),Ret.forEach(t),BLo=r(wAe," \u2014 "),BN=n(wAe,"A",{href:!0});var Bet=s(BN);PLo=r(Bet,"YosoForMultipleChoice"),Bet.forEach(t),$Lo=r(wAe," (YOSO model)"),wAe.forEach(t),O.forEach(t),ILo=i(Qt),C3=n(Qt,"P",{});var AAe=s(C3);qLo=r(AAe,"The model is set in evaluation mode by default using "),lie=n(AAe,"CODE",{});var Pet=s(lie);NLo=r(Pet,"model.eval()"),Pet.forEach(t),jLo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(AAe,"CODE",{});var $et=s(iie);DLo=r($et,"model.train()"),$et.forEach(t),AAe.forEach(t),GLo=i(Qt),die=n(Qt,"P",{});var Iet=s(die);OLo=r(Iet,"Examples:"),Iet.forEach(t),VLo=i(Qt),m(G5.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),rRe=i(c),ud=n(c,"H2",{class:!0});var fPe=s(ud);w3=n(fPe,"A",{id:!0,class:!0,href:!0});var qet=s(w3);cie=n(qet,"SPAN",{});var Net=s(cie);m(O5.$$.fragment,Net),Net.forEach(t),qet.forEach(t),XLo=i(fPe),fie=n(fPe,"SPAN",{});var jet=s(fie);zLo=r(jet,"AutoModelForNextSentencePrediction"),jet.forEach(t),fPe.forEach(t),tRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(V5.$$.fragment,sl),QLo=i(sl),bd=n(sl,"P",{});var nU=s(bd);WLo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PN=n(nU,"A",{href:!0});var Det=s(PN);HLo=r(Det,"from_pretrained()"),Det.forEach(t),ULo=r(nU," class method or the "),$N=n(nU,"A",{href:!0});var Get=s($N);JLo=r(Get,"from_config()"),Get.forEach(t),YLo=r(nU,` class
method.`),nU.forEach(t),KLo=i(sl),X5=n(sl,"P",{});var mPe=s(X5);ZLo=r(mPe,"This class cannot be instantiated directly using "),mie=n(mPe,"CODE",{});var Oet=s(mie);e8o=r(Oet,"__init__()"),Oet.forEach(t),o8o=r(mPe," (throws an error)."),mPe.forEach(t),r8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(z5.$$.fragment,ll),t8o=i(ll),gie=n(ll,"P",{});var Vet=s(gie);a8o=r(Vet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vet.forEach(t),n8o=i(ll),Fd=n(ll,"P",{});var sU=s(Fd);s8o=r(sU,`Note:
Loading a model from its configuration file does `),hie=n(sU,"STRONG",{});var Xet=s(hie);l8o=r(Xet,"not"),Xet.forEach(t),i8o=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IN=n(sU,"A",{href:!0});var zet=s(IN);d8o=r(zet,"from_pretrained()"),zet.forEach(t),c8o=r(sU," to load the model weights."),sU.forEach(t),f8o=i(ll),pie=n(ll,"P",{});var Qet=s(pie);m8o=r(Qet,"Examples:"),Qet.forEach(t),g8o=i(ll),m(Q5.$$.fragment,ll),ll.forEach(t),h8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(W5.$$.fragment,Wt),p8o=i(Wt),_ie=n(Wt,"P",{});var Wet=s(_ie);_8o=r(Wet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wet.forEach(t),u8o=i(Wt),Ya=n(Wt,"P",{});var CE=s(Ya);b8o=r(CE,"The model class to instantiate is selected based on the "),uie=n(CE,"CODE",{});var Het=s(uie);F8o=r(Het,"model_type"),Het.forEach(t),v8o=r(CE,` property of the config object (either
passed as an argument or loaded from `),bie=n(CE,"CODE",{});var Uet=s(bie);T8o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),M8o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(CE,"CODE",{});var Jet=s(Fie);E8o=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),C8o=r(CE,":"),CE.forEach(t),w8o=i(Wt),da=n(Wt,"UL",{});var il=s(da);A3=n(il,"LI",{});var yAe=s(A3);vie=n(yAe,"STRONG",{});var Yet=s(vie);A8o=r(Yet,"bert"),Yet.forEach(t),y8o=r(yAe," \u2014 "),qN=n(yAe,"A",{href:!0});var Ket=s(qN);L8o=r(Ket,"BertForNextSentencePrediction"),Ket.forEach(t),x8o=r(yAe," (BERT model)"),yAe.forEach(t),k8o=i(il),y3=n(il,"LI",{});var LAe=s(y3);Tie=n(LAe,"STRONG",{});var Zet=s(Tie);S8o=r(Zet,"fnet"),Zet.forEach(t),R8o=r(LAe," \u2014 "),NN=n(LAe,"A",{href:!0});var eot=s(NN);B8o=r(eot,"FNetForNextSentencePrediction"),eot.forEach(t),P8o=r(LAe," (FNet model)"),LAe.forEach(t),$8o=i(il),L3=n(il,"LI",{});var xAe=s(L3);Mie=n(xAe,"STRONG",{});var oot=s(Mie);I8o=r(oot,"megatron-bert"),oot.forEach(t),q8o=r(xAe," \u2014 "),jN=n(xAe,"A",{href:!0});var rot=s(jN);N8o=r(rot,"MegatronBertForNextSentencePrediction"),rot.forEach(t),j8o=r(xAe," (MegatronBert model)"),xAe.forEach(t),D8o=i(il),x3=n(il,"LI",{});var kAe=s(x3);Eie=n(kAe,"STRONG",{});var tot=s(Eie);G8o=r(tot,"mobilebert"),tot.forEach(t),O8o=r(kAe," \u2014 "),DN=n(kAe,"A",{href:!0});var aot=s(DN);V8o=r(aot,"MobileBertForNextSentencePrediction"),aot.forEach(t),X8o=r(kAe," (MobileBERT model)"),kAe.forEach(t),z8o=i(il),k3=n(il,"LI",{});var SAe=s(k3);Cie=n(SAe,"STRONG",{});var not=s(Cie);Q8o=r(not,"qdqbert"),not.forEach(t),W8o=r(SAe," \u2014 "),GN=n(SAe,"A",{href:!0});var sot=s(GN);H8o=r(sot,"QDQBertForNextSentencePrediction"),sot.forEach(t),U8o=r(SAe," (QDQBert model)"),SAe.forEach(t),il.forEach(t),J8o=i(Wt),S3=n(Wt,"P",{});var RAe=s(S3);Y8o=r(RAe,"The model is set in evaluation mode by default using "),wie=n(RAe,"CODE",{});var lot=s(wie);K8o=r(lot,"model.eval()"),lot.forEach(t),Z8o=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(RAe,"CODE",{});var iot=s(Aie);e9o=r(iot,"model.train()"),iot.forEach(t),RAe.forEach(t),o9o=i(Wt),yie=n(Wt,"P",{});var dot=s(yie);r9o=r(dot,"Examples:"),dot.forEach(t),t9o=i(Wt),m(H5.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),aRe=i(c),vd=n(c,"H2",{class:!0});var gPe=s(vd);R3=n(gPe,"A",{id:!0,class:!0,href:!0});var cot=s(R3);Lie=n(cot,"SPAN",{});var fot=s(Lie);m(U5.$$.fragment,fot),fot.forEach(t),cot.forEach(t),a9o=i(gPe),xie=n(gPe,"SPAN",{});var mot=s(xie);n9o=r(mot,"AutoModelForTokenClassification"),mot.forEach(t),gPe.forEach(t),nRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(J5.$$.fragment,dl),s9o=i(dl),Td=n(dl,"P",{});var lU=s(Td);l9o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ON=n(lU,"A",{href:!0});var got=s(ON);i9o=r(got,"from_pretrained()"),got.forEach(t),d9o=r(lU," class method or the "),VN=n(lU,"A",{href:!0});var hot=s(VN);c9o=r(hot,"from_config()"),hot.forEach(t),f9o=r(lU,` class
method.`),lU.forEach(t),m9o=i(dl),Y5=n(dl,"P",{});var hPe=s(Y5);g9o=r(hPe,"This class cannot be instantiated directly using "),kie=n(hPe,"CODE",{});var pot=s(kie);h9o=r(pot,"__init__()"),pot.forEach(t),p9o=r(hPe," (throws an error)."),hPe.forEach(t),_9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(K5.$$.fragment,cl),u9o=i(cl),Sie=n(cl,"P",{});var _ot=s(Sie);b9o=r(_ot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_ot.forEach(t),F9o=i(cl),Md=n(cl,"P",{});var iU=s(Md);v9o=r(iU,`Note:
Loading a model from its configuration file does `),Rie=n(iU,"STRONG",{});var uot=s(Rie);T9o=r(uot,"not"),uot.forEach(t),M9o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(iU,"A",{href:!0});var bot=s(XN);E9o=r(bot,"from_pretrained()"),bot.forEach(t),C9o=r(iU," to load the model weights."),iU.forEach(t),w9o=i(cl),Bie=n(cl,"P",{});var Fot=s(Bie);A9o=r(Fot,"Examples:"),Fot.forEach(t),y9o=i(cl),m(Z5.$$.fragment,cl),cl.forEach(t),L9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(ew.$$.fragment,Ht),x9o=i(Ht),Pie=n(Ht,"P",{});var vot=s(Pie);k9o=r(vot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vot.forEach(t),S9o=i(Ht),Ka=n(Ht,"P",{});var wE=s(Ka);R9o=r(wE,"The model class to instantiate is selected based on the "),$ie=n(wE,"CODE",{});var Tot=s($ie);B9o=r(Tot,"model_type"),Tot.forEach(t),P9o=r(wE,` property of the config object (either
passed as an argument or loaded from `),Iie=n(wE,"CODE",{});var Mot=s(Iie);$9o=r(Mot,"pretrained_model_name_or_path"),Mot.forEach(t),I9o=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(wE,"CODE",{});var Eot=s(qie);q9o=r(Eot,"pretrained_model_name_or_path"),Eot.forEach(t),N9o=r(wE,":"),wE.forEach(t),j9o=i(Ht),j=n(Ht,"UL",{});var D=s(j);B3=n(D,"LI",{});var BAe=s(B3);Nie=n(BAe,"STRONG",{});var Cot=s(Nie);D9o=r(Cot,"albert"),Cot.forEach(t),G9o=r(BAe," \u2014 "),zN=n(BAe,"A",{href:!0});var wot=s(zN);O9o=r(wot,"AlbertForTokenClassification"),wot.forEach(t),V9o=r(BAe," (ALBERT model)"),BAe.forEach(t),X9o=i(D),P3=n(D,"LI",{});var PAe=s(P3);jie=n(PAe,"STRONG",{});var Aot=s(jie);z9o=r(Aot,"bert"),Aot.forEach(t),Q9o=r(PAe," \u2014 "),QN=n(PAe,"A",{href:!0});var yot=s(QN);W9o=r(yot,"BertForTokenClassification"),yot.forEach(t),H9o=r(PAe," (BERT model)"),PAe.forEach(t),U9o=i(D),$3=n(D,"LI",{});var $Ae=s($3);Die=n($Ae,"STRONG",{});var Lot=s(Die);J9o=r(Lot,"big_bird"),Lot.forEach(t),Y9o=r($Ae," \u2014 "),WN=n($Ae,"A",{href:!0});var xot=s(WN);K9o=r(xot,"BigBirdForTokenClassification"),xot.forEach(t),Z9o=r($Ae," (BigBird model)"),$Ae.forEach(t),exo=i(D),I3=n(D,"LI",{});var IAe=s(I3);Gie=n(IAe,"STRONG",{});var kot=s(Gie);oxo=r(kot,"camembert"),kot.forEach(t),rxo=r(IAe," \u2014 "),HN=n(IAe,"A",{href:!0});var Sot=s(HN);txo=r(Sot,"CamembertForTokenClassification"),Sot.forEach(t),axo=r(IAe," (CamemBERT model)"),IAe.forEach(t),nxo=i(D),q3=n(D,"LI",{});var qAe=s(q3);Oie=n(qAe,"STRONG",{});var Rot=s(Oie);sxo=r(Rot,"canine"),Rot.forEach(t),lxo=r(qAe," \u2014 "),UN=n(qAe,"A",{href:!0});var Bot=s(UN);ixo=r(Bot,"CanineForTokenClassification"),Bot.forEach(t),dxo=r(qAe," (Canine model)"),qAe.forEach(t),cxo=i(D),N3=n(D,"LI",{});var NAe=s(N3);Vie=n(NAe,"STRONG",{});var Pot=s(Vie);fxo=r(Pot,"convbert"),Pot.forEach(t),mxo=r(NAe," \u2014 "),JN=n(NAe,"A",{href:!0});var $ot=s(JN);gxo=r($ot,"ConvBertForTokenClassification"),$ot.forEach(t),hxo=r(NAe," (ConvBERT model)"),NAe.forEach(t),pxo=i(D),j3=n(D,"LI",{});var jAe=s(j3);Xie=n(jAe,"STRONG",{});var Iot=s(Xie);_xo=r(Iot,"data2vec-text"),Iot.forEach(t),uxo=r(jAe," \u2014 "),YN=n(jAe,"A",{href:!0});var qot=s(YN);bxo=r(qot,"Data2VecTextForTokenClassification"),qot.forEach(t),Fxo=r(jAe," (Data2VecText model)"),jAe.forEach(t),vxo=i(D),D3=n(D,"LI",{});var DAe=s(D3);zie=n(DAe,"STRONG",{});var Not=s(zie);Txo=r(Not,"deberta"),Not.forEach(t),Mxo=r(DAe," \u2014 "),KN=n(DAe,"A",{href:!0});var jot=s(KN);Exo=r(jot,"DebertaForTokenClassification"),jot.forEach(t),Cxo=r(DAe," (DeBERTa model)"),DAe.forEach(t),wxo=i(D),G3=n(D,"LI",{});var GAe=s(G3);Qie=n(GAe,"STRONG",{});var Dot=s(Qie);Axo=r(Dot,"deberta-v2"),Dot.forEach(t),yxo=r(GAe," \u2014 "),ZN=n(GAe,"A",{href:!0});var Got=s(ZN);Lxo=r(Got,"DebertaV2ForTokenClassification"),Got.forEach(t),xxo=r(GAe," (DeBERTa-v2 model)"),GAe.forEach(t),kxo=i(D),O3=n(D,"LI",{});var OAe=s(O3);Wie=n(OAe,"STRONG",{});var Oot=s(Wie);Sxo=r(Oot,"distilbert"),Oot.forEach(t),Rxo=r(OAe," \u2014 "),ej=n(OAe,"A",{href:!0});var Vot=s(ej);Bxo=r(Vot,"DistilBertForTokenClassification"),Vot.forEach(t),Pxo=r(OAe," (DistilBERT model)"),OAe.forEach(t),$xo=i(D),V3=n(D,"LI",{});var VAe=s(V3);Hie=n(VAe,"STRONG",{});var Xot=s(Hie);Ixo=r(Xot,"electra"),Xot.forEach(t),qxo=r(VAe," \u2014 "),oj=n(VAe,"A",{href:!0});var zot=s(oj);Nxo=r(zot,"ElectraForTokenClassification"),zot.forEach(t),jxo=r(VAe," (ELECTRA model)"),VAe.forEach(t),Dxo=i(D),X3=n(D,"LI",{});var XAe=s(X3);Uie=n(XAe,"STRONG",{});var Qot=s(Uie);Gxo=r(Qot,"flaubert"),Qot.forEach(t),Oxo=r(XAe," \u2014 "),rj=n(XAe,"A",{href:!0});var Wot=s(rj);Vxo=r(Wot,"FlaubertForTokenClassification"),Wot.forEach(t),Xxo=r(XAe," (FlauBERT model)"),XAe.forEach(t),zxo=i(D),z3=n(D,"LI",{});var zAe=s(z3);Jie=n(zAe,"STRONG",{});var Hot=s(Jie);Qxo=r(Hot,"fnet"),Hot.forEach(t),Wxo=r(zAe," \u2014 "),tj=n(zAe,"A",{href:!0});var Uot=s(tj);Hxo=r(Uot,"FNetForTokenClassification"),Uot.forEach(t),Uxo=r(zAe," (FNet model)"),zAe.forEach(t),Jxo=i(D),Q3=n(D,"LI",{});var QAe=s(Q3);Yie=n(QAe,"STRONG",{});var Jot=s(Yie);Yxo=r(Jot,"funnel"),Jot.forEach(t),Kxo=r(QAe," \u2014 "),aj=n(QAe,"A",{href:!0});var Yot=s(aj);Zxo=r(Yot,"FunnelForTokenClassification"),Yot.forEach(t),eko=r(QAe," (Funnel Transformer model)"),QAe.forEach(t),oko=i(D),W3=n(D,"LI",{});var WAe=s(W3);Kie=n(WAe,"STRONG",{});var Kot=s(Kie);rko=r(Kot,"gpt2"),Kot.forEach(t),tko=r(WAe," \u2014 "),nj=n(WAe,"A",{href:!0});var Zot=s(nj);ako=r(Zot,"GPT2ForTokenClassification"),Zot.forEach(t),nko=r(WAe," (OpenAI GPT-2 model)"),WAe.forEach(t),sko=i(D),H3=n(D,"LI",{});var HAe=s(H3);Zie=n(HAe,"STRONG",{});var ert=s(Zie);lko=r(ert,"ibert"),ert.forEach(t),iko=r(HAe," \u2014 "),sj=n(HAe,"A",{href:!0});var ort=s(sj);dko=r(ort,"IBertForTokenClassification"),ort.forEach(t),cko=r(HAe," (I-BERT model)"),HAe.forEach(t),fko=i(D),U3=n(D,"LI",{});var UAe=s(U3);ede=n(UAe,"STRONG",{});var rrt=s(ede);mko=r(rrt,"layoutlm"),rrt.forEach(t),gko=r(UAe," \u2014 "),lj=n(UAe,"A",{href:!0});var trt=s(lj);hko=r(trt,"LayoutLMForTokenClassification"),trt.forEach(t),pko=r(UAe," (LayoutLM model)"),UAe.forEach(t),_ko=i(D),J3=n(D,"LI",{});var JAe=s(J3);ode=n(JAe,"STRONG",{});var art=s(ode);uko=r(art,"layoutlmv2"),art.forEach(t),bko=r(JAe," \u2014 "),ij=n(JAe,"A",{href:!0});var nrt=s(ij);Fko=r(nrt,"LayoutLMv2ForTokenClassification"),nrt.forEach(t),vko=r(JAe," (LayoutLMv2 model)"),JAe.forEach(t),Tko=i(D),Y3=n(D,"LI",{});var YAe=s(Y3);rde=n(YAe,"STRONG",{});var srt=s(rde);Mko=r(srt,"longformer"),srt.forEach(t),Eko=r(YAe," \u2014 "),dj=n(YAe,"A",{href:!0});var lrt=s(dj);Cko=r(lrt,"LongformerForTokenClassification"),lrt.forEach(t),wko=r(YAe," (Longformer model)"),YAe.forEach(t),Ako=i(D),K3=n(D,"LI",{});var KAe=s(K3);tde=n(KAe,"STRONG",{});var irt=s(tde);yko=r(irt,"megatron-bert"),irt.forEach(t),Lko=r(KAe," \u2014 "),cj=n(KAe,"A",{href:!0});var drt=s(cj);xko=r(drt,"MegatronBertForTokenClassification"),drt.forEach(t),kko=r(KAe," (MegatronBert model)"),KAe.forEach(t),Sko=i(D),Z3=n(D,"LI",{});var ZAe=s(Z3);ade=n(ZAe,"STRONG",{});var crt=s(ade);Rko=r(crt,"mobilebert"),crt.forEach(t),Bko=r(ZAe," \u2014 "),fj=n(ZAe,"A",{href:!0});var frt=s(fj);Pko=r(frt,"MobileBertForTokenClassification"),frt.forEach(t),$ko=r(ZAe," (MobileBERT model)"),ZAe.forEach(t),Iko=i(D),e2=n(D,"LI",{});var e0e=s(e2);nde=n(e0e,"STRONG",{});var mrt=s(nde);qko=r(mrt,"mpnet"),mrt.forEach(t),Nko=r(e0e," \u2014 "),mj=n(e0e,"A",{href:!0});var grt=s(mj);jko=r(grt,"MPNetForTokenClassification"),grt.forEach(t),Dko=r(e0e," (MPNet model)"),e0e.forEach(t),Gko=i(D),o2=n(D,"LI",{});var o0e=s(o2);sde=n(o0e,"STRONG",{});var hrt=s(sde);Oko=r(hrt,"nystromformer"),hrt.forEach(t),Vko=r(o0e," \u2014 "),gj=n(o0e,"A",{href:!0});var prt=s(gj);Xko=r(prt,"NystromformerForTokenClassification"),prt.forEach(t),zko=r(o0e," (Nystromformer model)"),o0e.forEach(t),Qko=i(D),r2=n(D,"LI",{});var r0e=s(r2);lde=n(r0e,"STRONG",{});var _rt=s(lde);Wko=r(_rt,"qdqbert"),_rt.forEach(t),Hko=r(r0e," \u2014 "),hj=n(r0e,"A",{href:!0});var urt=s(hj);Uko=r(urt,"QDQBertForTokenClassification"),urt.forEach(t),Jko=r(r0e," (QDQBert model)"),r0e.forEach(t),Yko=i(D),t2=n(D,"LI",{});var t0e=s(t2);ide=n(t0e,"STRONG",{});var brt=s(ide);Kko=r(brt,"rembert"),brt.forEach(t),Zko=r(t0e," \u2014 "),pj=n(t0e,"A",{href:!0});var Frt=s(pj);eSo=r(Frt,"RemBertForTokenClassification"),Frt.forEach(t),oSo=r(t0e," (RemBERT model)"),t0e.forEach(t),rSo=i(D),a2=n(D,"LI",{});var a0e=s(a2);dde=n(a0e,"STRONG",{});var vrt=s(dde);tSo=r(vrt,"roberta"),vrt.forEach(t),aSo=r(a0e," \u2014 "),_j=n(a0e,"A",{href:!0});var Trt=s(_j);nSo=r(Trt,"RobertaForTokenClassification"),Trt.forEach(t),sSo=r(a0e," (RoBERTa model)"),a0e.forEach(t),lSo=i(D),n2=n(D,"LI",{});var n0e=s(n2);cde=n(n0e,"STRONG",{});var Mrt=s(cde);iSo=r(Mrt,"roformer"),Mrt.forEach(t),dSo=r(n0e," \u2014 "),uj=n(n0e,"A",{href:!0});var Ert=s(uj);cSo=r(Ert,"RoFormerForTokenClassification"),Ert.forEach(t),fSo=r(n0e," (RoFormer model)"),n0e.forEach(t),mSo=i(D),s2=n(D,"LI",{});var s0e=s(s2);fde=n(s0e,"STRONG",{});var Crt=s(fde);gSo=r(Crt,"squeezebert"),Crt.forEach(t),hSo=r(s0e," \u2014 "),bj=n(s0e,"A",{href:!0});var wrt=s(bj);pSo=r(wrt,"SqueezeBertForTokenClassification"),wrt.forEach(t),_So=r(s0e," (SqueezeBERT model)"),s0e.forEach(t),uSo=i(D),l2=n(D,"LI",{});var l0e=s(l2);mde=n(l0e,"STRONG",{});var Art=s(mde);bSo=r(Art,"xlm"),Art.forEach(t),FSo=r(l0e," \u2014 "),Fj=n(l0e,"A",{href:!0});var yrt=s(Fj);vSo=r(yrt,"XLMForTokenClassification"),yrt.forEach(t),TSo=r(l0e," (XLM model)"),l0e.forEach(t),MSo=i(D),i2=n(D,"LI",{});var i0e=s(i2);gde=n(i0e,"STRONG",{});var Lrt=s(gde);ESo=r(Lrt,"xlm-roberta"),Lrt.forEach(t),CSo=r(i0e," \u2014 "),vj=n(i0e,"A",{href:!0});var xrt=s(vj);wSo=r(xrt,"XLMRobertaForTokenClassification"),xrt.forEach(t),ASo=r(i0e," (XLM-RoBERTa model)"),i0e.forEach(t),ySo=i(D),d2=n(D,"LI",{});var d0e=s(d2);hde=n(d0e,"STRONG",{});var krt=s(hde);LSo=r(krt,"xlm-roberta-xl"),krt.forEach(t),xSo=r(d0e," \u2014 "),Tj=n(d0e,"A",{href:!0});var Srt=s(Tj);kSo=r(Srt,"XLMRobertaXLForTokenClassification"),Srt.forEach(t),SSo=r(d0e," (XLM-RoBERTa-XL model)"),d0e.forEach(t),RSo=i(D),c2=n(D,"LI",{});var c0e=s(c2);pde=n(c0e,"STRONG",{});var Rrt=s(pde);BSo=r(Rrt,"xlnet"),Rrt.forEach(t),PSo=r(c0e," \u2014 "),Mj=n(c0e,"A",{href:!0});var Brt=s(Mj);$So=r(Brt,"XLNetForTokenClassification"),Brt.forEach(t),ISo=r(c0e," (XLNet model)"),c0e.forEach(t),qSo=i(D),f2=n(D,"LI",{});var f0e=s(f2);_de=n(f0e,"STRONG",{});var Prt=s(_de);NSo=r(Prt,"yoso"),Prt.forEach(t),jSo=r(f0e," \u2014 "),Ej=n(f0e,"A",{href:!0});var $rt=s(Ej);DSo=r($rt,"YosoForTokenClassification"),$rt.forEach(t),GSo=r(f0e," (YOSO model)"),f0e.forEach(t),D.forEach(t),OSo=i(Ht),m2=n(Ht,"P",{});var m0e=s(m2);VSo=r(m0e,"The model is set in evaluation mode by default using "),ude=n(m0e,"CODE",{});var Irt=s(ude);XSo=r(Irt,"model.eval()"),Irt.forEach(t),zSo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(m0e,"CODE",{});var qrt=s(bde);QSo=r(qrt,"model.train()"),qrt.forEach(t),m0e.forEach(t),WSo=i(Ht),Fde=n(Ht,"P",{});var Nrt=s(Fde);HSo=r(Nrt,"Examples:"),Nrt.forEach(t),USo=i(Ht),m(ow.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),sRe=i(c),Ed=n(c,"H2",{class:!0});var pPe=s(Ed);g2=n(pPe,"A",{id:!0,class:!0,href:!0});var jrt=s(g2);vde=n(jrt,"SPAN",{});var Drt=s(vde);m(rw.$$.fragment,Drt),Drt.forEach(t),jrt.forEach(t),JSo=i(pPe),Tde=n(pPe,"SPAN",{});var Grt=s(Tde);YSo=r(Grt,"AutoModelForQuestionAnswering"),Grt.forEach(t),pPe.forEach(t),lRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(tw.$$.fragment,fl),KSo=i(fl),Cd=n(fl,"P",{});var dU=s(Cd);ZSo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cj=n(dU,"A",{href:!0});var Ort=s(Cj);eRo=r(Ort,"from_pretrained()"),Ort.forEach(t),oRo=r(dU," class method or the "),wj=n(dU,"A",{href:!0});var Vrt=s(wj);rRo=r(Vrt,"from_config()"),Vrt.forEach(t),tRo=r(dU,` class
method.`),dU.forEach(t),aRo=i(fl),aw=n(fl,"P",{});var _Pe=s(aw);nRo=r(_Pe,"This class cannot be instantiated directly using "),Mde=n(_Pe,"CODE",{});var Xrt=s(Mde);sRo=r(Xrt,"__init__()"),Xrt.forEach(t),lRo=r(_Pe," (throws an error)."),_Pe.forEach(t),iRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(nw.$$.fragment,ml),dRo=i(ml),Ede=n(ml,"P",{});var zrt=s(Ede);cRo=r(zrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zrt.forEach(t),fRo=i(ml),wd=n(ml,"P",{});var cU=s(wd);mRo=r(cU,`Note:
Loading a model from its configuration file does `),Cde=n(cU,"STRONG",{});var Qrt=s(Cde);gRo=r(Qrt,"not"),Qrt.forEach(t),hRo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=n(cU,"A",{href:!0});var Wrt=s(Aj);pRo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),_Ro=r(cU," to load the model weights."),cU.forEach(t),uRo=i(ml),wde=n(ml,"P",{});var Hrt=s(wde);bRo=r(Hrt,"Examples:"),Hrt.forEach(t),FRo=i(ml),m(sw.$$.fragment,ml),ml.forEach(t),vRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(lw.$$.fragment,Ut),TRo=i(Ut),Ade=n(Ut,"P",{});var Urt=s(Ade);MRo=r(Urt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Urt.forEach(t),ERo=i(Ut),Za=n(Ut,"P",{});var AE=s(Za);CRo=r(AE,"The model class to instantiate is selected based on the "),yde=n(AE,"CODE",{});var Jrt=s(yde);wRo=r(Jrt,"model_type"),Jrt.forEach(t),ARo=r(AE,` property of the config object (either
passed as an argument or loaded from `),Lde=n(AE,"CODE",{});var Yrt=s(Lde);yRo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),LRo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(AE,"CODE",{});var Krt=s(xde);xRo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),kRo=r(AE,":"),AE.forEach(t),SRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h2=n(P,"LI",{});var g0e=s(h2);kde=n(g0e,"STRONG",{});var Zrt=s(kde);RRo=r(Zrt,"albert"),Zrt.forEach(t),BRo=r(g0e," \u2014 "),yj=n(g0e,"A",{href:!0});var ett=s(yj);PRo=r(ett,"AlbertForQuestionAnswering"),ett.forEach(t),$Ro=r(g0e," (ALBERT model)"),g0e.forEach(t),IRo=i(P),p2=n(P,"LI",{});var h0e=s(p2);Sde=n(h0e,"STRONG",{});var ott=s(Sde);qRo=r(ott,"bart"),ott.forEach(t),NRo=r(h0e," \u2014 "),Lj=n(h0e,"A",{href:!0});var rtt=s(Lj);jRo=r(rtt,"BartForQuestionAnswering"),rtt.forEach(t),DRo=r(h0e," (BART model)"),h0e.forEach(t),GRo=i(P),_2=n(P,"LI",{});var p0e=s(_2);Rde=n(p0e,"STRONG",{});var ttt=s(Rde);ORo=r(ttt,"bert"),ttt.forEach(t),VRo=r(p0e," \u2014 "),xj=n(p0e,"A",{href:!0});var att=s(xj);XRo=r(att,"BertForQuestionAnswering"),att.forEach(t),zRo=r(p0e," (BERT model)"),p0e.forEach(t),QRo=i(P),u2=n(P,"LI",{});var _0e=s(u2);Bde=n(_0e,"STRONG",{});var ntt=s(Bde);WRo=r(ntt,"big_bird"),ntt.forEach(t),HRo=r(_0e," \u2014 "),kj=n(_0e,"A",{href:!0});var stt=s(kj);URo=r(stt,"BigBirdForQuestionAnswering"),stt.forEach(t),JRo=r(_0e," (BigBird model)"),_0e.forEach(t),YRo=i(P),b2=n(P,"LI",{});var u0e=s(b2);Pde=n(u0e,"STRONG",{});var ltt=s(Pde);KRo=r(ltt,"bigbird_pegasus"),ltt.forEach(t),ZRo=r(u0e," \u2014 "),Sj=n(u0e,"A",{href:!0});var itt=s(Sj);eBo=r(itt,"BigBirdPegasusForQuestionAnswering"),itt.forEach(t),oBo=r(u0e," (BigBirdPegasus model)"),u0e.forEach(t),rBo=i(P),F2=n(P,"LI",{});var b0e=s(F2);$de=n(b0e,"STRONG",{});var dtt=s($de);tBo=r(dtt,"camembert"),dtt.forEach(t),aBo=r(b0e," \u2014 "),Rj=n(b0e,"A",{href:!0});var ctt=s(Rj);nBo=r(ctt,"CamembertForQuestionAnswering"),ctt.forEach(t),sBo=r(b0e," (CamemBERT model)"),b0e.forEach(t),lBo=i(P),v2=n(P,"LI",{});var F0e=s(v2);Ide=n(F0e,"STRONG",{});var ftt=s(Ide);iBo=r(ftt,"canine"),ftt.forEach(t),dBo=r(F0e," \u2014 "),Bj=n(F0e,"A",{href:!0});var mtt=s(Bj);cBo=r(mtt,"CanineForQuestionAnswering"),mtt.forEach(t),fBo=r(F0e," (Canine model)"),F0e.forEach(t),mBo=i(P),T2=n(P,"LI",{});var v0e=s(T2);qde=n(v0e,"STRONG",{});var gtt=s(qde);gBo=r(gtt,"convbert"),gtt.forEach(t),hBo=r(v0e," \u2014 "),Pj=n(v0e,"A",{href:!0});var htt=s(Pj);pBo=r(htt,"ConvBertForQuestionAnswering"),htt.forEach(t),_Bo=r(v0e," (ConvBERT model)"),v0e.forEach(t),uBo=i(P),M2=n(P,"LI",{});var T0e=s(M2);Nde=n(T0e,"STRONG",{});var ptt=s(Nde);bBo=r(ptt,"data2vec-text"),ptt.forEach(t),FBo=r(T0e," \u2014 "),$j=n(T0e,"A",{href:!0});var _tt=s($j);vBo=r(_tt,"Data2VecTextForQuestionAnswering"),_tt.forEach(t),TBo=r(T0e," (Data2VecText model)"),T0e.forEach(t),MBo=i(P),E2=n(P,"LI",{});var M0e=s(E2);jde=n(M0e,"STRONG",{});var utt=s(jde);EBo=r(utt,"deberta"),utt.forEach(t),CBo=r(M0e," \u2014 "),Ij=n(M0e,"A",{href:!0});var btt=s(Ij);wBo=r(btt,"DebertaForQuestionAnswering"),btt.forEach(t),ABo=r(M0e," (DeBERTa model)"),M0e.forEach(t),yBo=i(P),C2=n(P,"LI",{});var E0e=s(C2);Dde=n(E0e,"STRONG",{});var Ftt=s(Dde);LBo=r(Ftt,"deberta-v2"),Ftt.forEach(t),xBo=r(E0e," \u2014 "),qj=n(E0e,"A",{href:!0});var vtt=s(qj);kBo=r(vtt,"DebertaV2ForQuestionAnswering"),vtt.forEach(t),SBo=r(E0e," (DeBERTa-v2 model)"),E0e.forEach(t),RBo=i(P),w2=n(P,"LI",{});var C0e=s(w2);Gde=n(C0e,"STRONG",{});var Ttt=s(Gde);BBo=r(Ttt,"distilbert"),Ttt.forEach(t),PBo=r(C0e," \u2014 "),Nj=n(C0e,"A",{href:!0});var Mtt=s(Nj);$Bo=r(Mtt,"DistilBertForQuestionAnswering"),Mtt.forEach(t),IBo=r(C0e," (DistilBERT model)"),C0e.forEach(t),qBo=i(P),A2=n(P,"LI",{});var w0e=s(A2);Ode=n(w0e,"STRONG",{});var Ett=s(Ode);NBo=r(Ett,"electra"),Ett.forEach(t),jBo=r(w0e," \u2014 "),jj=n(w0e,"A",{href:!0});var Ctt=s(jj);DBo=r(Ctt,"ElectraForQuestionAnswering"),Ctt.forEach(t),GBo=r(w0e," (ELECTRA model)"),w0e.forEach(t),OBo=i(P),y2=n(P,"LI",{});var A0e=s(y2);Vde=n(A0e,"STRONG",{});var wtt=s(Vde);VBo=r(wtt,"flaubert"),wtt.forEach(t),XBo=r(A0e," \u2014 "),Dj=n(A0e,"A",{href:!0});var Att=s(Dj);zBo=r(Att,"FlaubertForQuestionAnsweringSimple"),Att.forEach(t),QBo=r(A0e," (FlauBERT model)"),A0e.forEach(t),WBo=i(P),L2=n(P,"LI",{});var y0e=s(L2);Xde=n(y0e,"STRONG",{});var ytt=s(Xde);HBo=r(ytt,"fnet"),ytt.forEach(t),UBo=r(y0e," \u2014 "),Gj=n(y0e,"A",{href:!0});var Ltt=s(Gj);JBo=r(Ltt,"FNetForQuestionAnswering"),Ltt.forEach(t),YBo=r(y0e," (FNet model)"),y0e.forEach(t),KBo=i(P),x2=n(P,"LI",{});var L0e=s(x2);zde=n(L0e,"STRONG",{});var xtt=s(zde);ZBo=r(xtt,"funnel"),xtt.forEach(t),ePo=r(L0e," \u2014 "),Oj=n(L0e,"A",{href:!0});var ktt=s(Oj);oPo=r(ktt,"FunnelForQuestionAnswering"),ktt.forEach(t),rPo=r(L0e," (Funnel Transformer model)"),L0e.forEach(t),tPo=i(P),k2=n(P,"LI",{});var x0e=s(k2);Qde=n(x0e,"STRONG",{});var Stt=s(Qde);aPo=r(Stt,"gptj"),Stt.forEach(t),nPo=r(x0e," \u2014 "),Vj=n(x0e,"A",{href:!0});var Rtt=s(Vj);sPo=r(Rtt,"GPTJForQuestionAnswering"),Rtt.forEach(t),lPo=r(x0e," (GPT-J model)"),x0e.forEach(t),iPo=i(P),S2=n(P,"LI",{});var k0e=s(S2);Wde=n(k0e,"STRONG",{});var Btt=s(Wde);dPo=r(Btt,"ibert"),Btt.forEach(t),cPo=r(k0e," \u2014 "),Xj=n(k0e,"A",{href:!0});var Ptt=s(Xj);fPo=r(Ptt,"IBertForQuestionAnswering"),Ptt.forEach(t),mPo=r(k0e," (I-BERT model)"),k0e.forEach(t),gPo=i(P),R2=n(P,"LI",{});var S0e=s(R2);Hde=n(S0e,"STRONG",{});var $tt=s(Hde);hPo=r($tt,"layoutlmv2"),$tt.forEach(t),pPo=r(S0e," \u2014 "),zj=n(S0e,"A",{href:!0});var Itt=s(zj);_Po=r(Itt,"LayoutLMv2ForQuestionAnswering"),Itt.forEach(t),uPo=r(S0e," (LayoutLMv2 model)"),S0e.forEach(t),bPo=i(P),B2=n(P,"LI",{});var R0e=s(B2);Ude=n(R0e,"STRONG",{});var qtt=s(Ude);FPo=r(qtt,"led"),qtt.forEach(t),vPo=r(R0e," \u2014 "),Qj=n(R0e,"A",{href:!0});var Ntt=s(Qj);TPo=r(Ntt,"LEDForQuestionAnswering"),Ntt.forEach(t),MPo=r(R0e," (LED model)"),R0e.forEach(t),EPo=i(P),P2=n(P,"LI",{});var B0e=s(P2);Jde=n(B0e,"STRONG",{});var jtt=s(Jde);CPo=r(jtt,"longformer"),jtt.forEach(t),wPo=r(B0e," \u2014 "),Wj=n(B0e,"A",{href:!0});var Dtt=s(Wj);APo=r(Dtt,"LongformerForQuestionAnswering"),Dtt.forEach(t),yPo=r(B0e," (Longformer model)"),B0e.forEach(t),LPo=i(P),$2=n(P,"LI",{});var P0e=s($2);Yde=n(P0e,"STRONG",{});var Gtt=s(Yde);xPo=r(Gtt,"lxmert"),Gtt.forEach(t),kPo=r(P0e," \u2014 "),Hj=n(P0e,"A",{href:!0});var Ott=s(Hj);SPo=r(Ott,"LxmertForQuestionAnswering"),Ott.forEach(t),RPo=r(P0e," (LXMERT model)"),P0e.forEach(t),BPo=i(P),I2=n(P,"LI",{});var $0e=s(I2);Kde=n($0e,"STRONG",{});var Vtt=s(Kde);PPo=r(Vtt,"mbart"),Vtt.forEach(t),$Po=r($0e," \u2014 "),Uj=n($0e,"A",{href:!0});var Xtt=s(Uj);IPo=r(Xtt,"MBartForQuestionAnswering"),Xtt.forEach(t),qPo=r($0e," (mBART model)"),$0e.forEach(t),NPo=i(P),q2=n(P,"LI",{});var I0e=s(q2);Zde=n(I0e,"STRONG",{});var ztt=s(Zde);jPo=r(ztt,"megatron-bert"),ztt.forEach(t),DPo=r(I0e," \u2014 "),Jj=n(I0e,"A",{href:!0});var Qtt=s(Jj);GPo=r(Qtt,"MegatronBertForQuestionAnswering"),Qtt.forEach(t),OPo=r(I0e," (MegatronBert model)"),I0e.forEach(t),VPo=i(P),N2=n(P,"LI",{});var q0e=s(N2);ece=n(q0e,"STRONG",{});var Wtt=s(ece);XPo=r(Wtt,"mobilebert"),Wtt.forEach(t),zPo=r(q0e," \u2014 "),Yj=n(q0e,"A",{href:!0});var Htt=s(Yj);QPo=r(Htt,"MobileBertForQuestionAnswering"),Htt.forEach(t),WPo=r(q0e," (MobileBERT model)"),q0e.forEach(t),HPo=i(P),j2=n(P,"LI",{});var N0e=s(j2);oce=n(N0e,"STRONG",{});var Utt=s(oce);UPo=r(Utt,"mpnet"),Utt.forEach(t),JPo=r(N0e," \u2014 "),Kj=n(N0e,"A",{href:!0});var Jtt=s(Kj);YPo=r(Jtt,"MPNetForQuestionAnswering"),Jtt.forEach(t),KPo=r(N0e," (MPNet model)"),N0e.forEach(t),ZPo=i(P),D2=n(P,"LI",{});var j0e=s(D2);rce=n(j0e,"STRONG",{});var Ytt=s(rce);e$o=r(Ytt,"nystromformer"),Ytt.forEach(t),o$o=r(j0e," \u2014 "),Zj=n(j0e,"A",{href:!0});var Ktt=s(Zj);r$o=r(Ktt,"NystromformerForQuestionAnswering"),Ktt.forEach(t),t$o=r(j0e," (Nystromformer model)"),j0e.forEach(t),a$o=i(P),G2=n(P,"LI",{});var D0e=s(G2);tce=n(D0e,"STRONG",{});var Ztt=s(tce);n$o=r(Ztt,"qdqbert"),Ztt.forEach(t),s$o=r(D0e," \u2014 "),eD=n(D0e,"A",{href:!0});var eat=s(eD);l$o=r(eat,"QDQBertForQuestionAnswering"),eat.forEach(t),i$o=r(D0e," (QDQBert model)"),D0e.forEach(t),d$o=i(P),O2=n(P,"LI",{});var G0e=s(O2);ace=n(G0e,"STRONG",{});var oat=s(ace);c$o=r(oat,"reformer"),oat.forEach(t),f$o=r(G0e," \u2014 "),oD=n(G0e,"A",{href:!0});var rat=s(oD);m$o=r(rat,"ReformerForQuestionAnswering"),rat.forEach(t),g$o=r(G0e," (Reformer model)"),G0e.forEach(t),h$o=i(P),V2=n(P,"LI",{});var O0e=s(V2);nce=n(O0e,"STRONG",{});var tat=s(nce);p$o=r(tat,"rembert"),tat.forEach(t),_$o=r(O0e," \u2014 "),rD=n(O0e,"A",{href:!0});var aat=s(rD);u$o=r(aat,"RemBertForQuestionAnswering"),aat.forEach(t),b$o=r(O0e," (RemBERT model)"),O0e.forEach(t),F$o=i(P),X2=n(P,"LI",{});var V0e=s(X2);sce=n(V0e,"STRONG",{});var nat=s(sce);v$o=r(nat,"roberta"),nat.forEach(t),T$o=r(V0e," \u2014 "),tD=n(V0e,"A",{href:!0});var sat=s(tD);M$o=r(sat,"RobertaForQuestionAnswering"),sat.forEach(t),E$o=r(V0e," (RoBERTa model)"),V0e.forEach(t),C$o=i(P),z2=n(P,"LI",{});var X0e=s(z2);lce=n(X0e,"STRONG",{});var lat=s(lce);w$o=r(lat,"roformer"),lat.forEach(t),A$o=r(X0e," \u2014 "),aD=n(X0e,"A",{href:!0});var iat=s(aD);y$o=r(iat,"RoFormerForQuestionAnswering"),iat.forEach(t),L$o=r(X0e," (RoFormer model)"),X0e.forEach(t),x$o=i(P),Q2=n(P,"LI",{});var z0e=s(Q2);ice=n(z0e,"STRONG",{});var dat=s(ice);k$o=r(dat,"splinter"),dat.forEach(t),S$o=r(z0e," \u2014 "),nD=n(z0e,"A",{href:!0});var cat=s(nD);R$o=r(cat,"SplinterForQuestionAnswering"),cat.forEach(t),B$o=r(z0e," (Splinter model)"),z0e.forEach(t),P$o=i(P),W2=n(P,"LI",{});var Q0e=s(W2);dce=n(Q0e,"STRONG",{});var fat=s(dce);$$o=r(fat,"squeezebert"),fat.forEach(t),I$o=r(Q0e," \u2014 "),sD=n(Q0e,"A",{href:!0});var mat=s(sD);q$o=r(mat,"SqueezeBertForQuestionAnswering"),mat.forEach(t),N$o=r(Q0e," (SqueezeBERT model)"),Q0e.forEach(t),j$o=i(P),H2=n(P,"LI",{});var W0e=s(H2);cce=n(W0e,"STRONG",{});var gat=s(cce);D$o=r(gat,"xlm"),gat.forEach(t),G$o=r(W0e," \u2014 "),lD=n(W0e,"A",{href:!0});var hat=s(lD);O$o=r(hat,"XLMForQuestionAnsweringSimple"),hat.forEach(t),V$o=r(W0e," (XLM model)"),W0e.forEach(t),X$o=i(P),U2=n(P,"LI",{});var H0e=s(U2);fce=n(H0e,"STRONG",{});var pat=s(fce);z$o=r(pat,"xlm-roberta"),pat.forEach(t),Q$o=r(H0e," \u2014 "),iD=n(H0e,"A",{href:!0});var _at=s(iD);W$o=r(_at,"XLMRobertaForQuestionAnswering"),_at.forEach(t),H$o=r(H0e," (XLM-RoBERTa model)"),H0e.forEach(t),U$o=i(P),J2=n(P,"LI",{});var U0e=s(J2);mce=n(U0e,"STRONG",{});var uat=s(mce);J$o=r(uat,"xlm-roberta-xl"),uat.forEach(t),Y$o=r(U0e," \u2014 "),dD=n(U0e,"A",{href:!0});var bat=s(dD);K$o=r(bat,"XLMRobertaXLForQuestionAnswering"),bat.forEach(t),Z$o=r(U0e," (XLM-RoBERTa-XL model)"),U0e.forEach(t),eIo=i(P),Y2=n(P,"LI",{});var J0e=s(Y2);gce=n(J0e,"STRONG",{});var Fat=s(gce);oIo=r(Fat,"xlnet"),Fat.forEach(t),rIo=r(J0e," \u2014 "),cD=n(J0e,"A",{href:!0});var vat=s(cD);tIo=r(vat,"XLNetForQuestionAnsweringSimple"),vat.forEach(t),aIo=r(J0e," (XLNet model)"),J0e.forEach(t),nIo=i(P),K2=n(P,"LI",{});var Y0e=s(K2);hce=n(Y0e,"STRONG",{});var Tat=s(hce);sIo=r(Tat,"yoso"),Tat.forEach(t),lIo=r(Y0e," \u2014 "),fD=n(Y0e,"A",{href:!0});var Mat=s(fD);iIo=r(Mat,"YosoForQuestionAnswering"),Mat.forEach(t),dIo=r(Y0e," (YOSO model)"),Y0e.forEach(t),P.forEach(t),cIo=i(Ut),Z2=n(Ut,"P",{});var K0e=s(Z2);fIo=r(K0e,"The model is set in evaluation mode by default using "),pce=n(K0e,"CODE",{});var Eat=s(pce);mIo=r(Eat,"model.eval()"),Eat.forEach(t),gIo=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(K0e,"CODE",{});var Cat=s(_ce);hIo=r(Cat,"model.train()"),Cat.forEach(t),K0e.forEach(t),pIo=i(Ut),uce=n(Ut,"P",{});var wat=s(uce);_Io=r(wat,"Examples:"),wat.forEach(t),uIo=i(Ut),m(iw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),iRe=i(c),Ad=n(c,"H2",{class:!0});var uPe=s(Ad);eF=n(uPe,"A",{id:!0,class:!0,href:!0});var Aat=s(eF);bce=n(Aat,"SPAN",{});var yat=s(bce);m(dw.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),bIo=i(uPe),Fce=n(uPe,"SPAN",{});var Lat=s(Fce);FIo=r(Lat,"AutoModelForTableQuestionAnswering"),Lat.forEach(t),uPe.forEach(t),dRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(cw.$$.fragment,gl),vIo=i(gl),yd=n(gl,"P",{});var fU=s(yd);TIo=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mD=n(fU,"A",{href:!0});var xat=s(mD);MIo=r(xat,"from_pretrained()"),xat.forEach(t),EIo=r(fU," class method or the "),gD=n(fU,"A",{href:!0});var kat=s(gD);CIo=r(kat,"from_config()"),kat.forEach(t),wIo=r(fU,` class
method.`),fU.forEach(t),AIo=i(gl),fw=n(gl,"P",{});var bPe=s(fw);yIo=r(bPe,"This class cannot be instantiated directly using "),vce=n(bPe,"CODE",{});var Sat=s(vce);LIo=r(Sat,"__init__()"),Sat.forEach(t),xIo=r(bPe," (throws an error)."),bPe.forEach(t),kIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(mw.$$.fragment,hl),SIo=i(hl),Tce=n(hl,"P",{});var Rat=s(Tce);RIo=r(Rat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rat.forEach(t),BIo=i(hl),Ld=n(hl,"P",{});var mU=s(Ld);PIo=r(mU,`Note:
Loading a model from its configuration file does `),Mce=n(mU,"STRONG",{});var Bat=s(Mce);$Io=r(Bat,"not"),Bat.forEach(t),IIo=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=n(mU,"A",{href:!0});var Pat=s(hD);qIo=r(Pat,"from_pretrained()"),Pat.forEach(t),NIo=r(mU," to load the model weights."),mU.forEach(t),jIo=i(hl),Ece=n(hl,"P",{});var $at=s(Ece);DIo=r($at,"Examples:"),$at.forEach(t),GIo=i(hl),m(gw.$$.fragment,hl),hl.forEach(t),OIo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(hw.$$.fragment,Jt),VIo=i(Jt),Cce=n(Jt,"P",{});var Iat=s(Cce);XIo=r(Iat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iat.forEach(t),zIo=i(Jt),en=n(Jt,"P",{});var yE=s(en);QIo=r(yE,"The model class to instantiate is selected based on the "),wce=n(yE,"CODE",{});var qat=s(wce);WIo=r(qat,"model_type"),qat.forEach(t),HIo=r(yE,` property of the config object (either
passed as an argument or loaded from `),Ace=n(yE,"CODE",{});var Nat=s(Ace);UIo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),JIo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=n(yE,"CODE",{});var jat=s(yce);YIo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),KIo=r(yE,":"),yE.forEach(t),ZIo=i(Jt),Lce=n(Jt,"UL",{});var Dat=s(Lce);oF=n(Dat,"LI",{});var Z0e=s(oF);xce=n(Z0e,"STRONG",{});var Gat=s(xce);eqo=r(Gat,"tapas"),Gat.forEach(t),oqo=r(Z0e," \u2014 "),pD=n(Z0e,"A",{href:!0});var Oat=s(pD);rqo=r(Oat,"TapasForQuestionAnswering"),Oat.forEach(t),tqo=r(Z0e," (TAPAS model)"),Z0e.forEach(t),Dat.forEach(t),aqo=i(Jt),rF=n(Jt,"P",{});var eye=s(rF);nqo=r(eye,"The model is set in evaluation mode by default using "),kce=n(eye,"CODE",{});var Vat=s(kce);sqo=r(Vat,"model.eval()"),Vat.forEach(t),lqo=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(eye,"CODE",{});var Xat=s(Sce);iqo=r(Xat,"model.train()"),Xat.forEach(t),eye.forEach(t),dqo=i(Jt),Rce=n(Jt,"P",{});var zat=s(Rce);cqo=r(zat,"Examples:"),zat.forEach(t),fqo=i(Jt),m(pw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),cRe=i(c),xd=n(c,"H2",{class:!0});var FPe=s(xd);tF=n(FPe,"A",{id:!0,class:!0,href:!0});var Qat=s(tF);Bce=n(Qat,"SPAN",{});var Wat=s(Bce);m(_w.$$.fragment,Wat),Wat.forEach(t),Qat.forEach(t),mqo=i(FPe),Pce=n(FPe,"SPAN",{});var Hat=s(Pce);gqo=r(Hat,"AutoModelForImageClassification"),Hat.forEach(t),FPe.forEach(t),fRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(uw.$$.fragment,pl),hqo=i(pl),kd=n(pl,"P",{});var gU=s(kd);pqo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_D=n(gU,"A",{href:!0});var Uat=s(_D);_qo=r(Uat,"from_pretrained()"),Uat.forEach(t),uqo=r(gU," class method or the "),uD=n(gU,"A",{href:!0});var Jat=s(uD);bqo=r(Jat,"from_config()"),Jat.forEach(t),Fqo=r(gU,` class
method.`),gU.forEach(t),vqo=i(pl),bw=n(pl,"P",{});var vPe=s(bw);Tqo=r(vPe,"This class cannot be instantiated directly using "),$ce=n(vPe,"CODE",{});var Yat=s($ce);Mqo=r(Yat,"__init__()"),Yat.forEach(t),Eqo=r(vPe," (throws an error)."),vPe.forEach(t),Cqo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Fw.$$.fragment,_l),wqo=i(_l),Ice=n(_l,"P",{});var Kat=s(Ice);Aqo=r(Kat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kat.forEach(t),yqo=i(_l),Sd=n(_l,"P",{});var hU=s(Sd);Lqo=r(hU,`Note:
Loading a model from its configuration file does `),qce=n(hU,"STRONG",{});var Zat=s(qce);xqo=r(Zat,"not"),Zat.forEach(t),kqo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(hU,"A",{href:!0});var ent=s(bD);Sqo=r(ent,"from_pretrained()"),ent.forEach(t),Rqo=r(hU," to load the model weights."),hU.forEach(t),Bqo=i(_l),Nce=n(_l,"P",{});var ont=s(Nce);Pqo=r(ont,"Examples:"),ont.forEach(t),$qo=i(_l),m(vw.$$.fragment,_l),_l.forEach(t),Iqo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Tw.$$.fragment,Yt),qqo=i(Yt),jce=n(Yt,"P",{});var rnt=s(jce);Nqo=r(rnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rnt.forEach(t),jqo=i(Yt),on=n(Yt,"P",{});var LE=s(on);Dqo=r(LE,"The model class to instantiate is selected based on the "),Dce=n(LE,"CODE",{});var tnt=s(Dce);Gqo=r(tnt,"model_type"),tnt.forEach(t),Oqo=r(LE,` property of the config object (either
passed as an argument or loaded from `),Gce=n(LE,"CODE",{});var ant=s(Gce);Vqo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),Xqo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(LE,"CODE",{});var nnt=s(Oce);zqo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),Qqo=r(LE,":"),LE.forEach(t),Wqo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);aF=n(Te,"LI",{});var oye=s(aF);Vce=n(oye,"STRONG",{});var snt=s(Vce);Hqo=r(snt,"beit"),snt.forEach(t),Uqo=r(oye," \u2014 "),FD=n(oye,"A",{href:!0});var lnt=s(FD);Jqo=r(lnt,"BeitForImageClassification"),lnt.forEach(t),Yqo=r(oye," (BEiT model)"),oye.forEach(t),Kqo=i(Te),nF=n(Te,"LI",{});var rye=s(nF);Xce=n(rye,"STRONG",{});var int=s(Xce);Zqo=r(int,"convnext"),int.forEach(t),eNo=r(rye," \u2014 "),vD=n(rye,"A",{href:!0});var dnt=s(vD);oNo=r(dnt,"ConvNextForImageClassification"),dnt.forEach(t),rNo=r(rye," (ConvNext model)"),rye.forEach(t),tNo=i(Te),Ds=n(Te,"LI",{});var t9=s(Ds);zce=n(t9,"STRONG",{});var cnt=s(zce);aNo=r(cnt,"deit"),cnt.forEach(t),nNo=r(t9," \u2014 "),TD=n(t9,"A",{href:!0});var fnt=s(TD);sNo=r(fnt,"DeiTForImageClassification"),fnt.forEach(t),lNo=r(t9," or "),MD=n(t9,"A",{href:!0});var mnt=s(MD);iNo=r(mnt,"DeiTForImageClassificationWithTeacher"),mnt.forEach(t),dNo=r(t9," (DeiT model)"),t9.forEach(t),cNo=i(Te),sF=n(Te,"LI",{});var tye=s(sF);Qce=n(tye,"STRONG",{});var gnt=s(Qce);fNo=r(gnt,"imagegpt"),gnt.forEach(t),mNo=r(tye," \u2014 "),ED=n(tye,"A",{href:!0});var hnt=s(ED);gNo=r(hnt,"ImageGPTForImageClassification"),hnt.forEach(t),hNo=r(tye," (ImageGPT model)"),tye.forEach(t),pNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);Wce=n($f,"STRONG",{});var pnt=s(Wce);_No=r(pnt,"perceiver"),pnt.forEach(t),uNo=r($f," \u2014 "),CD=n($f,"A",{href:!0});var _nt=s(CD);bNo=r(_nt,"PerceiverForImageClassificationLearned"),_nt.forEach(t),FNo=r($f," or "),wD=n($f,"A",{href:!0});var unt=s(wD);vNo=r(unt,"PerceiverForImageClassificationFourier"),unt.forEach(t),TNo=r($f," or "),AD=n($f,"A",{href:!0});var bnt=s(AD);MNo=r(bnt,"PerceiverForImageClassificationConvProcessing"),bnt.forEach(t),ENo=r($f," (Perceiver model)"),$f.forEach(t),CNo=i(Te),lF=n(Te,"LI",{});var aye=s(lF);Hce=n(aye,"STRONG",{});var Fnt=s(Hce);wNo=r(Fnt,"poolformer"),Fnt.forEach(t),ANo=r(aye," \u2014 "),yD=n(aye,"A",{href:!0});var vnt=s(yD);yNo=r(vnt,"PoolFormerForImageClassification"),vnt.forEach(t),LNo=r(aye," (PoolFormer model)"),aye.forEach(t),xNo=i(Te),iF=n(Te,"LI",{});var nye=s(iF);Uce=n(nye,"STRONG",{});var Tnt=s(Uce);kNo=r(Tnt,"resnet"),Tnt.forEach(t),SNo=r(nye," \u2014 "),LD=n(nye,"A",{href:!0});var Mnt=s(LD);RNo=r(Mnt,"ResNetForImageClassification"),Mnt.forEach(t),BNo=r(nye," (ResNet model)"),nye.forEach(t),PNo=i(Te),dF=n(Te,"LI",{});var sye=s(dF);Jce=n(sye,"STRONG",{});var Ent=s(Jce);$No=r(Ent,"segformer"),Ent.forEach(t),INo=r(sye," \u2014 "),xD=n(sye,"A",{href:!0});var Cnt=s(xD);qNo=r(Cnt,"SegformerForImageClassification"),Cnt.forEach(t),NNo=r(sye," (SegFormer model)"),sye.forEach(t),jNo=i(Te),cF=n(Te,"LI",{});var lye=s(cF);Yce=n(lye,"STRONG",{});var wnt=s(Yce);DNo=r(wnt,"swin"),wnt.forEach(t),GNo=r(lye," \u2014 "),kD=n(lye,"A",{href:!0});var Ant=s(kD);ONo=r(Ant,"SwinForImageClassification"),Ant.forEach(t),VNo=r(lye," (Swin model)"),lye.forEach(t),XNo=i(Te),fF=n(Te,"LI",{});var iye=s(fF);Kce=n(iye,"STRONG",{});var ynt=s(Kce);zNo=r(ynt,"van"),ynt.forEach(t),QNo=r(iye," \u2014 "),SD=n(iye,"A",{href:!0});var Lnt=s(SD);WNo=r(Lnt,"VanForImageClassification"),Lnt.forEach(t),HNo=r(iye," (VAN model)"),iye.forEach(t),UNo=i(Te),mF=n(Te,"LI",{});var dye=s(mF);Zce=n(dye,"STRONG",{});var xnt=s(Zce);JNo=r(xnt,"vit"),xnt.forEach(t),YNo=r(dye," \u2014 "),RD=n(dye,"A",{href:!0});var knt=s(RD);KNo=r(knt,"ViTForImageClassification"),knt.forEach(t),ZNo=r(dye," (ViT model)"),dye.forEach(t),Te.forEach(t),ejo=i(Yt),gF=n(Yt,"P",{});var cye=s(gF);ojo=r(cye,"The model is set in evaluation mode by default using "),efe=n(cye,"CODE",{});var Snt=s(efe);rjo=r(Snt,"model.eval()"),Snt.forEach(t),tjo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(cye,"CODE",{});var Rnt=s(ofe);ajo=r(Rnt,"model.train()"),Rnt.forEach(t),cye.forEach(t),njo=i(Yt),rfe=n(Yt,"P",{});var Bnt=s(rfe);sjo=r(Bnt,"Examples:"),Bnt.forEach(t),ljo=i(Yt),m(Mw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),mRe=i(c),Rd=n(c,"H2",{class:!0});var TPe=s(Rd);hF=n(TPe,"A",{id:!0,class:!0,href:!0});var Pnt=s(hF);tfe=n(Pnt,"SPAN",{});var $nt=s(tfe);m(Ew.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),ijo=i(TPe),afe=n(TPe,"SPAN",{});var Int=s(afe);djo=r(Int,"AutoModelForVision2Seq"),Int.forEach(t),TPe.forEach(t),gRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Cw.$$.fragment,ul),cjo=i(ul),Bd=n(ul,"P",{});var pU=s(Bd);fjo=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BD=n(pU,"A",{href:!0});var qnt=s(BD);mjo=r(qnt,"from_pretrained()"),qnt.forEach(t),gjo=r(pU," class method or the "),PD=n(pU,"A",{href:!0});var Nnt=s(PD);hjo=r(Nnt,"from_config()"),Nnt.forEach(t),pjo=r(pU,` class
method.`),pU.forEach(t),_jo=i(ul),ww=n(ul,"P",{});var MPe=s(ww);ujo=r(MPe,"This class cannot be instantiated directly using "),nfe=n(MPe,"CODE",{});var jnt=s(nfe);bjo=r(jnt,"__init__()"),jnt.forEach(t),Fjo=r(MPe," (throws an error)."),MPe.forEach(t),vjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Aw.$$.fragment,bl),Tjo=i(bl),sfe=n(bl,"P",{});var Dnt=s(sfe);Mjo=r(Dnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dnt.forEach(t),Ejo=i(bl),Pd=n(bl,"P",{});var _U=s(Pd);Cjo=r(_U,`Note:
Loading a model from its configuration file does `),lfe=n(_U,"STRONG",{});var Gnt=s(lfe);wjo=r(Gnt,"not"),Gnt.forEach(t),Ajo=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(_U,"A",{href:!0});var Ont=s($D);yjo=r(Ont,"from_pretrained()"),Ont.forEach(t),Ljo=r(_U," to load the model weights."),_U.forEach(t),xjo=i(bl),ife=n(bl,"P",{});var Vnt=s(ife);kjo=r(Vnt,"Examples:"),Vnt.forEach(t),Sjo=i(bl),m(yw.$$.fragment,bl),bl.forEach(t),Rjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Lw.$$.fragment,Kt),Bjo=i(Kt),dfe=n(Kt,"P",{});var Xnt=s(dfe);Pjo=r(Xnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xnt.forEach(t),$jo=i(Kt),rn=n(Kt,"P",{});var xE=s(rn);Ijo=r(xE,"The model class to instantiate is selected based on the "),cfe=n(xE,"CODE",{});var znt=s(cfe);qjo=r(znt,"model_type"),znt.forEach(t),Njo=r(xE,` property of the config object (either
passed as an argument or loaded from `),ffe=n(xE,"CODE",{});var Qnt=s(ffe);jjo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Djo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(xE,"CODE",{});var Wnt=s(mfe);Gjo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Ojo=r(xE,":"),xE.forEach(t),Vjo=i(Kt),gfe=n(Kt,"UL",{});var Hnt=s(gfe);pF=n(Hnt,"LI",{});var fye=s(pF);hfe=n(fye,"STRONG",{});var Unt=s(hfe);Xjo=r(Unt,"vision-encoder-decoder"),Unt.forEach(t),zjo=r(fye," \u2014 "),ID=n(fye,"A",{href:!0});var Jnt=s(ID);Qjo=r(Jnt,"VisionEncoderDecoderModel"),Jnt.forEach(t),Wjo=r(fye," (Vision Encoder decoder model)"),fye.forEach(t),Hnt.forEach(t),Hjo=i(Kt),_F=n(Kt,"P",{});var mye=s(_F);Ujo=r(mye,"The model is set in evaluation mode by default using "),pfe=n(mye,"CODE",{});var Ynt=s(pfe);Jjo=r(Ynt,"model.eval()"),Ynt.forEach(t),Yjo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(mye,"CODE",{});var Knt=s(_fe);Kjo=r(Knt,"model.train()"),Knt.forEach(t),mye.forEach(t),Zjo=i(Kt),ufe=n(Kt,"P",{});var Znt=s(ufe);eDo=r(Znt,"Examples:"),Znt.forEach(t),oDo=i(Kt),m(xw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),hRe=i(c),$d=n(c,"H2",{class:!0});var EPe=s($d);uF=n(EPe,"A",{id:!0,class:!0,href:!0});var est=s(uF);bfe=n(est,"SPAN",{});var ost=s(bfe);m(kw.$$.fragment,ost),ost.forEach(t),est.forEach(t),rDo=i(EPe),Ffe=n(EPe,"SPAN",{});var rst=s(Ffe);tDo=r(rst,"AutoModelForAudioClassification"),rst.forEach(t),EPe.forEach(t),pRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Sw.$$.fragment,Fl),aDo=i(Fl),Id=n(Fl,"P",{});var uU=s(Id);nDo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qD=n(uU,"A",{href:!0});var tst=s(qD);sDo=r(tst,"from_pretrained()"),tst.forEach(t),lDo=r(uU," class method or the "),ND=n(uU,"A",{href:!0});var ast=s(ND);iDo=r(ast,"from_config()"),ast.forEach(t),dDo=r(uU,` class
method.`),uU.forEach(t),cDo=i(Fl),Rw=n(Fl,"P",{});var CPe=s(Rw);fDo=r(CPe,"This class cannot be instantiated directly using "),vfe=n(CPe,"CODE",{});var nst=s(vfe);mDo=r(nst,"__init__()"),nst.forEach(t),gDo=r(CPe," (throws an error)."),CPe.forEach(t),hDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(Bw.$$.fragment,vl),pDo=i(vl),Tfe=n(vl,"P",{});var sst=s(Tfe);_Do=r(sst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sst.forEach(t),uDo=i(vl),qd=n(vl,"P",{});var bU=s(qd);bDo=r(bU,`Note:
Loading a model from its configuration file does `),Mfe=n(bU,"STRONG",{});var lst=s(Mfe);FDo=r(lst,"not"),lst.forEach(t),vDo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(bU,"A",{href:!0});var ist=s(jD);TDo=r(ist,"from_pretrained()"),ist.forEach(t),MDo=r(bU," to load the model weights."),bU.forEach(t),EDo=i(vl),Efe=n(vl,"P",{});var dst=s(Efe);CDo=r(dst,"Examples:"),dst.forEach(t),wDo=i(vl),m(Pw.$$.fragment,vl),vl.forEach(t),ADo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m($w.$$.fragment,Zt),yDo=i(Zt),Cfe=n(Zt,"P",{});var cst=s(Cfe);LDo=r(cst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cst.forEach(t),xDo=i(Zt),tn=n(Zt,"P",{});var kE=s(tn);kDo=r(kE,"The model class to instantiate is selected based on the "),wfe=n(kE,"CODE",{});var fst=s(wfe);SDo=r(fst,"model_type"),fst.forEach(t),RDo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Afe=n(kE,"CODE",{});var mst=s(Afe);BDo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),PDo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(kE,"CODE",{});var gst=s(yfe);$Do=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),IDo=r(kE,":"),kE.forEach(t),qDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);bF=n(Do,"LI",{});var gye=s(bF);Lfe=n(gye,"STRONG",{});var hst=s(Lfe);NDo=r(hst,"data2vec-audio"),hst.forEach(t),jDo=r(gye," \u2014 "),DD=n(gye,"A",{href:!0});var pst=s(DD);DDo=r(pst,"Data2VecAudioForSequenceClassification"),pst.forEach(t),GDo=r(gye," (Data2VecAudio model)"),gye.forEach(t),ODo=i(Do),FF=n(Do,"LI",{});var hye=s(FF);xfe=n(hye,"STRONG",{});var _st=s(xfe);VDo=r(_st,"hubert"),_st.forEach(t),XDo=r(hye," \u2014 "),GD=n(hye,"A",{href:!0});var ust=s(GD);zDo=r(ust,"HubertForSequenceClassification"),ust.forEach(t),QDo=r(hye," (Hubert model)"),hye.forEach(t),WDo=i(Do),vF=n(Do,"LI",{});var pye=s(vF);kfe=n(pye,"STRONG",{});var bst=s(kfe);HDo=r(bst,"sew"),bst.forEach(t),UDo=r(pye," \u2014 "),OD=n(pye,"A",{href:!0});var Fst=s(OD);JDo=r(Fst,"SEWForSequenceClassification"),Fst.forEach(t),YDo=r(pye," (SEW model)"),pye.forEach(t),KDo=i(Do),TF=n(Do,"LI",{});var _ye=s(TF);Sfe=n(_ye,"STRONG",{});var vst=s(Sfe);ZDo=r(vst,"sew-d"),vst.forEach(t),eGo=r(_ye," \u2014 "),VD=n(_ye,"A",{href:!0});var Tst=s(VD);oGo=r(Tst,"SEWDForSequenceClassification"),Tst.forEach(t),rGo=r(_ye," (SEW-D model)"),_ye.forEach(t),tGo=i(Do),MF=n(Do,"LI",{});var uye=s(MF);Rfe=n(uye,"STRONG",{});var Mst=s(Rfe);aGo=r(Mst,"unispeech"),Mst.forEach(t),nGo=r(uye," \u2014 "),XD=n(uye,"A",{href:!0});var Est=s(XD);sGo=r(Est,"UniSpeechForSequenceClassification"),Est.forEach(t),lGo=r(uye," (UniSpeech model)"),uye.forEach(t),iGo=i(Do),EF=n(Do,"LI",{});var bye=s(EF);Bfe=n(bye,"STRONG",{});var Cst=s(Bfe);dGo=r(Cst,"unispeech-sat"),Cst.forEach(t),cGo=r(bye," \u2014 "),zD=n(bye,"A",{href:!0});var wst=s(zD);fGo=r(wst,"UniSpeechSatForSequenceClassification"),wst.forEach(t),mGo=r(bye," (UniSpeechSat model)"),bye.forEach(t),gGo=i(Do),CF=n(Do,"LI",{});var Fye=s(CF);Pfe=n(Fye,"STRONG",{});var Ast=s(Pfe);hGo=r(Ast,"wav2vec2"),Ast.forEach(t),pGo=r(Fye," \u2014 "),QD=n(Fye,"A",{href:!0});var yst=s(QD);_Go=r(yst,"Wav2Vec2ForSequenceClassification"),yst.forEach(t),uGo=r(Fye," (Wav2Vec2 model)"),Fye.forEach(t),bGo=i(Do),wF=n(Do,"LI",{});var vye=s(wF);$fe=n(vye,"STRONG",{});var Lst=s($fe);FGo=r(Lst,"wavlm"),Lst.forEach(t),vGo=r(vye," \u2014 "),WD=n(vye,"A",{href:!0});var xst=s(WD);TGo=r(xst,"WavLMForSequenceClassification"),xst.forEach(t),MGo=r(vye," (WavLM model)"),vye.forEach(t),Do.forEach(t),EGo=i(Zt),AF=n(Zt,"P",{});var Tye=s(AF);CGo=r(Tye,"The model is set in evaluation mode by default using "),Ife=n(Tye,"CODE",{});var kst=s(Ife);wGo=r(kst,"model.eval()"),kst.forEach(t),AGo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(Tye,"CODE",{});var Sst=s(qfe);yGo=r(Sst,"model.train()"),Sst.forEach(t),Tye.forEach(t),LGo=i(Zt),Nfe=n(Zt,"P",{});var Rst=s(Nfe);xGo=r(Rst,"Examples:"),Rst.forEach(t),kGo=i(Zt),m(Iw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),_Re=i(c),Nd=n(c,"H2",{class:!0});var wPe=s(Nd);yF=n(wPe,"A",{id:!0,class:!0,href:!0});var Bst=s(yF);jfe=n(Bst,"SPAN",{});var Pst=s(jfe);m(qw.$$.fragment,Pst),Pst.forEach(t),Bst.forEach(t),SGo=i(wPe),Dfe=n(wPe,"SPAN",{});var $st=s(Dfe);RGo=r($st,"AutoModelForAudioFrameClassification"),$st.forEach(t),wPe.forEach(t),uRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Nw.$$.fragment,Tl),BGo=i(Tl),jd=n(Tl,"P",{});var FU=s(jd);PGo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HD=n(FU,"A",{href:!0});var Ist=s(HD);$Go=r(Ist,"from_pretrained()"),Ist.forEach(t),IGo=r(FU," class method or the "),UD=n(FU,"A",{href:!0});var qst=s(UD);qGo=r(qst,"from_config()"),qst.forEach(t),NGo=r(FU,` class
method.`),FU.forEach(t),jGo=i(Tl),jw=n(Tl,"P",{});var APe=s(jw);DGo=r(APe,"This class cannot be instantiated directly using "),Gfe=n(APe,"CODE",{});var Nst=s(Gfe);GGo=r(Nst,"__init__()"),Nst.forEach(t),OGo=r(APe," (throws an error)."),APe.forEach(t),VGo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Dw.$$.fragment,Ml),XGo=i(Ml),Ofe=n(Ml,"P",{});var jst=s(Ofe);zGo=r(jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jst.forEach(t),QGo=i(Ml),Dd=n(Ml,"P",{});var vU=s(Dd);WGo=r(vU,`Note:
Loading a model from its configuration file does `),Vfe=n(vU,"STRONG",{});var Dst=s(Vfe);HGo=r(Dst,"not"),Dst.forEach(t),UGo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(vU,"A",{href:!0});var Gst=s(JD);JGo=r(Gst,"from_pretrained()"),Gst.forEach(t),YGo=r(vU," to load the model weights."),vU.forEach(t),KGo=i(Ml),Xfe=n(Ml,"P",{});var Ost=s(Xfe);ZGo=r(Ost,"Examples:"),Ost.forEach(t),eOo=i(Ml),m(Gw.$$.fragment,Ml),Ml.forEach(t),oOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Ow.$$.fragment,ea),rOo=i(ea),zfe=n(ea,"P",{});var Vst=s(zfe);tOo=r(Vst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vst.forEach(t),aOo=i(ea),an=n(ea,"P",{});var SE=s(an);nOo=r(SE,"The model class to instantiate is selected based on the "),Qfe=n(SE,"CODE",{});var Xst=s(Qfe);sOo=r(Xst,"model_type"),Xst.forEach(t),lOo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(SE,"CODE",{});var zst=s(Wfe);iOo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),dOo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(SE,"CODE",{});var Qst=s(Hfe);cOo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),fOo=r(SE,":"),SE.forEach(t),mOo=i(ea),nn=n(ea,"UL",{});var RE=s(nn);LF=n(RE,"LI",{});var Mye=s(LF);Ufe=n(Mye,"STRONG",{});var Wst=s(Ufe);gOo=r(Wst,"data2vec-audio"),Wst.forEach(t),hOo=r(Mye," \u2014 "),YD=n(Mye,"A",{href:!0});var Hst=s(YD);pOo=r(Hst,"Data2VecAudioForAudioFrameClassification"),Hst.forEach(t),_Oo=r(Mye," (Data2VecAudio model)"),Mye.forEach(t),uOo=i(RE),xF=n(RE,"LI",{});var Eye=s(xF);Jfe=n(Eye,"STRONG",{});var Ust=s(Jfe);bOo=r(Ust,"unispeech-sat"),Ust.forEach(t),FOo=r(Eye," \u2014 "),KD=n(Eye,"A",{href:!0});var Jst=s(KD);vOo=r(Jst,"UniSpeechSatForAudioFrameClassification"),Jst.forEach(t),TOo=r(Eye," (UniSpeechSat model)"),Eye.forEach(t),MOo=i(RE),kF=n(RE,"LI",{});var Cye=s(kF);Yfe=n(Cye,"STRONG",{});var Yst=s(Yfe);EOo=r(Yst,"wav2vec2"),Yst.forEach(t),COo=r(Cye," \u2014 "),ZD=n(Cye,"A",{href:!0});var Kst=s(ZD);wOo=r(Kst,"Wav2Vec2ForAudioFrameClassification"),Kst.forEach(t),AOo=r(Cye," (Wav2Vec2 model)"),Cye.forEach(t),yOo=i(RE),SF=n(RE,"LI",{});var wye=s(SF);Kfe=n(wye,"STRONG",{});var Zst=s(Kfe);LOo=r(Zst,"wavlm"),Zst.forEach(t),xOo=r(wye," \u2014 "),eG=n(wye,"A",{href:!0});var elt=s(eG);kOo=r(elt,"WavLMForAudioFrameClassification"),elt.forEach(t),SOo=r(wye," (WavLM model)"),wye.forEach(t),RE.forEach(t),ROo=i(ea),RF=n(ea,"P",{});var Aye=s(RF);BOo=r(Aye,"The model is set in evaluation mode by default using "),Zfe=n(Aye,"CODE",{});var olt=s(Zfe);POo=r(olt,"model.eval()"),olt.forEach(t),$Oo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(Aye,"CODE",{});var rlt=s(eme);IOo=r(rlt,"model.train()"),rlt.forEach(t),Aye.forEach(t),qOo=i(ea),ome=n(ea,"P",{});var tlt=s(ome);NOo=r(tlt,"Examples:"),tlt.forEach(t),jOo=i(ea),m(Vw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),bRe=i(c),Gd=n(c,"H2",{class:!0});var yPe=s(Gd);BF=n(yPe,"A",{id:!0,class:!0,href:!0});var alt=s(BF);rme=n(alt,"SPAN",{});var nlt=s(rme);m(Xw.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),DOo=i(yPe),tme=n(yPe,"SPAN",{});var slt=s(tme);GOo=r(slt,"AutoModelForCTC"),slt.forEach(t),yPe.forEach(t),FRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(zw.$$.fragment,El),OOo=i(El),Od=n(El,"P",{});var TU=s(Od);VOo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oG=n(TU,"A",{href:!0});var llt=s(oG);XOo=r(llt,"from_pretrained()"),llt.forEach(t),zOo=r(TU," class method or the "),rG=n(TU,"A",{href:!0});var ilt=s(rG);QOo=r(ilt,"from_config()"),ilt.forEach(t),WOo=r(TU,` class
method.`),TU.forEach(t),HOo=i(El),Qw=n(El,"P",{});var LPe=s(Qw);UOo=r(LPe,"This class cannot be instantiated directly using "),ame=n(LPe,"CODE",{});var dlt=s(ame);JOo=r(dlt,"__init__()"),dlt.forEach(t),YOo=r(LPe," (throws an error)."),LPe.forEach(t),KOo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Ww.$$.fragment,Cl),ZOo=i(Cl),nme=n(Cl,"P",{});var clt=s(nme);eVo=r(clt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),clt.forEach(t),oVo=i(Cl),Vd=n(Cl,"P",{});var MU=s(Vd);rVo=r(MU,`Note:
Loading a model from its configuration file does `),sme=n(MU,"STRONG",{});var flt=s(sme);tVo=r(flt,"not"),flt.forEach(t),aVo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(MU,"A",{href:!0});var mlt=s(tG);nVo=r(mlt,"from_pretrained()"),mlt.forEach(t),sVo=r(MU," to load the model weights."),MU.forEach(t),lVo=i(Cl),lme=n(Cl,"P",{});var glt=s(lme);iVo=r(glt,"Examples:"),glt.forEach(t),dVo=i(Cl),m(Hw.$$.fragment,Cl),Cl.forEach(t),cVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Uw.$$.fragment,oa),fVo=i(oa),ime=n(oa,"P",{});var hlt=s(ime);mVo=r(hlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hlt.forEach(t),gVo=i(oa),sn=n(oa,"P",{});var BE=s(sn);hVo=r(BE,"The model class to instantiate is selected based on the "),dme=n(BE,"CODE",{});var plt=s(dme);pVo=r(plt,"model_type"),plt.forEach(t),_Vo=r(BE,` property of the config object (either
passed as an argument or loaded from `),cme=n(BE,"CODE",{});var _lt=s(cme);uVo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),bVo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(BE,"CODE",{});var ult=s(fme);FVo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),vVo=r(BE,":"),BE.forEach(t),TVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);PF=n(Go,"LI",{});var yye=s(PF);mme=n(yye,"STRONG",{});var blt=s(mme);MVo=r(blt,"data2vec-audio"),blt.forEach(t),EVo=r(yye," \u2014 "),aG=n(yye,"A",{href:!0});var Flt=s(aG);CVo=r(Flt,"Data2VecAudioForCTC"),Flt.forEach(t),wVo=r(yye," (Data2VecAudio model)"),yye.forEach(t),AVo=i(Go),$F=n(Go,"LI",{});var Lye=s($F);gme=n(Lye,"STRONG",{});var vlt=s(gme);yVo=r(vlt,"hubert"),vlt.forEach(t),LVo=r(Lye," \u2014 "),nG=n(Lye,"A",{href:!0});var Tlt=s(nG);xVo=r(Tlt,"HubertForCTC"),Tlt.forEach(t),kVo=r(Lye," (Hubert model)"),Lye.forEach(t),SVo=i(Go),IF=n(Go,"LI",{});var xye=s(IF);hme=n(xye,"STRONG",{});var Mlt=s(hme);RVo=r(Mlt,"sew"),Mlt.forEach(t),BVo=r(xye," \u2014 "),sG=n(xye,"A",{href:!0});var Elt=s(sG);PVo=r(Elt,"SEWForCTC"),Elt.forEach(t),$Vo=r(xye," (SEW model)"),xye.forEach(t),IVo=i(Go),qF=n(Go,"LI",{});var kye=s(qF);pme=n(kye,"STRONG",{});var Clt=s(pme);qVo=r(Clt,"sew-d"),Clt.forEach(t),NVo=r(kye," \u2014 "),lG=n(kye,"A",{href:!0});var wlt=s(lG);jVo=r(wlt,"SEWDForCTC"),wlt.forEach(t),DVo=r(kye," (SEW-D model)"),kye.forEach(t),GVo=i(Go),NF=n(Go,"LI",{});var Sye=s(NF);_me=n(Sye,"STRONG",{});var Alt=s(_me);OVo=r(Alt,"unispeech"),Alt.forEach(t),VVo=r(Sye," \u2014 "),iG=n(Sye,"A",{href:!0});var ylt=s(iG);XVo=r(ylt,"UniSpeechForCTC"),ylt.forEach(t),zVo=r(Sye," (UniSpeech model)"),Sye.forEach(t),QVo=i(Go),jF=n(Go,"LI",{});var Rye=s(jF);ume=n(Rye,"STRONG",{});var Llt=s(ume);WVo=r(Llt,"unispeech-sat"),Llt.forEach(t),HVo=r(Rye," \u2014 "),dG=n(Rye,"A",{href:!0});var xlt=s(dG);UVo=r(xlt,"UniSpeechSatForCTC"),xlt.forEach(t),JVo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),YVo=i(Go),DF=n(Go,"LI",{});var Bye=s(DF);bme=n(Bye,"STRONG",{});var klt=s(bme);KVo=r(klt,"wav2vec2"),klt.forEach(t),ZVo=r(Bye," \u2014 "),cG=n(Bye,"A",{href:!0});var Slt=s(cG);eXo=r(Slt,"Wav2Vec2ForCTC"),Slt.forEach(t),oXo=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),rXo=i(Go),GF=n(Go,"LI",{});var Pye=s(GF);Fme=n(Pye,"STRONG",{});var Rlt=s(Fme);tXo=r(Rlt,"wavlm"),Rlt.forEach(t),aXo=r(Pye," \u2014 "),fG=n(Pye,"A",{href:!0});var Blt=s(fG);nXo=r(Blt,"WavLMForCTC"),Blt.forEach(t),sXo=r(Pye," (WavLM model)"),Pye.forEach(t),Go.forEach(t),lXo=i(oa),OF=n(oa,"P",{});var $ye=s(OF);iXo=r($ye,"The model is set in evaluation mode by default using "),vme=n($ye,"CODE",{});var Plt=s(vme);dXo=r(Plt,"model.eval()"),Plt.forEach(t),cXo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n($ye,"CODE",{});var $lt=s(Tme);fXo=r($lt,"model.train()"),$lt.forEach(t),$ye.forEach(t),mXo=i(oa),Mme=n(oa,"P",{});var Ilt=s(Mme);gXo=r(Ilt,"Examples:"),Ilt.forEach(t),hXo=i(oa),m(Jw.$$.fragment,oa),oa.forEach(t),El.forEach(t),vRe=i(c),Xd=n(c,"H2",{class:!0});var xPe=s(Xd);VF=n(xPe,"A",{id:!0,class:!0,href:!0});var qlt=s(VF);Eme=n(qlt,"SPAN",{});var Nlt=s(Eme);m(Yw.$$.fragment,Nlt),Nlt.forEach(t),qlt.forEach(t),pXo=i(xPe),Cme=n(xPe,"SPAN",{});var jlt=s(Cme);_Xo=r(jlt,"AutoModelForSpeechSeq2Seq"),jlt.forEach(t),xPe.forEach(t),TRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(Kw.$$.fragment,wl),uXo=i(wl),zd=n(wl,"P",{});var EU=s(zd);bXo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mG=n(EU,"A",{href:!0});var Dlt=s(mG);FXo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),vXo=r(EU," class method or the "),gG=n(EU,"A",{href:!0});var Glt=s(gG);TXo=r(Glt,"from_config()"),Glt.forEach(t),MXo=r(EU,` class
method.`),EU.forEach(t),EXo=i(wl),Zw=n(wl,"P",{});var kPe=s(Zw);CXo=r(kPe,"This class cannot be instantiated directly using "),wme=n(kPe,"CODE",{});var Olt=s(wme);wXo=r(Olt,"__init__()"),Olt.forEach(t),AXo=r(kPe," (throws an error)."),kPe.forEach(t),yXo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(eA.$$.fragment,Al),LXo=i(Al),Ame=n(Al,"P",{});var Vlt=s(Ame);xXo=r(Vlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vlt.forEach(t),kXo=i(Al),Qd=n(Al,"P",{});var CU=s(Qd);SXo=r(CU,`Note:
Loading a model from its configuration file does `),yme=n(CU,"STRONG",{});var Xlt=s(yme);RXo=r(Xlt,"not"),Xlt.forEach(t),BXo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(CU,"A",{href:!0});var zlt=s(hG);PXo=r(zlt,"from_pretrained()"),zlt.forEach(t),$Xo=r(CU," to load the model weights."),CU.forEach(t),IXo=i(Al),Lme=n(Al,"P",{});var Qlt=s(Lme);qXo=r(Qlt,"Examples:"),Qlt.forEach(t),NXo=i(Al),m(oA.$$.fragment,Al),Al.forEach(t),jXo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(rA.$$.fragment,ra),DXo=i(ra),xme=n(ra,"P",{});var Wlt=s(xme);GXo=r(Wlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wlt.forEach(t),OXo=i(ra),ln=n(ra,"P",{});var PE=s(ln);VXo=r(PE,"The model class to instantiate is selected based on the "),kme=n(PE,"CODE",{});var Hlt=s(kme);XXo=r(Hlt,"model_type"),Hlt.forEach(t),zXo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Sme=n(PE,"CODE",{});var Ult=s(Sme);QXo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),WXo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(PE,"CODE",{});var Jlt=s(Rme);HXo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),UXo=r(PE,":"),PE.forEach(t),JXo=i(ra),tA=n(ra,"UL",{});var SPe=s(tA);XF=n(SPe,"LI",{});var Iye=s(XF);Bme=n(Iye,"STRONG",{});var Ylt=s(Bme);YXo=r(Ylt,"speech-encoder-decoder"),Ylt.forEach(t),KXo=r(Iye," \u2014 "),pG=n(Iye,"A",{href:!0});var Klt=s(pG);ZXo=r(Klt,"SpeechEncoderDecoderModel"),Klt.forEach(t),ezo=r(Iye," (Speech Encoder decoder model)"),Iye.forEach(t),ozo=i(SPe),zF=n(SPe,"LI",{});var qye=s(zF);Pme=n(qye,"STRONG",{});var Zlt=s(Pme);rzo=r(Zlt,"speech_to_text"),Zlt.forEach(t),tzo=r(qye," \u2014 "),_G=n(qye,"A",{href:!0});var eit=s(_G);azo=r(eit,"Speech2TextForConditionalGeneration"),eit.forEach(t),nzo=r(qye," (Speech2Text model)"),qye.forEach(t),SPe.forEach(t),szo=i(ra),QF=n(ra,"P",{});var Nye=s(QF);lzo=r(Nye,"The model is set in evaluation mode by default using "),$me=n(Nye,"CODE",{});var oit=s($me);izo=r(oit,"model.eval()"),oit.forEach(t),dzo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(Nye,"CODE",{});var rit=s(Ime);czo=r(rit,"model.train()"),rit.forEach(t),Nye.forEach(t),fzo=i(ra),qme=n(ra,"P",{});var tit=s(qme);mzo=r(tit,"Examples:"),tit.forEach(t),gzo=i(ra),m(aA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),MRe=i(c),Wd=n(c,"H2",{class:!0});var RPe=s(Wd);WF=n(RPe,"A",{id:!0,class:!0,href:!0});var ait=s(WF);Nme=n(ait,"SPAN",{});var nit=s(Nme);m(nA.$$.fragment,nit),nit.forEach(t),ait.forEach(t),hzo=i(RPe),jme=n(RPe,"SPAN",{});var sit=s(jme);pzo=r(sit,"AutoModelForAudioXVector"),sit.forEach(t),RPe.forEach(t),ERe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(sA.$$.fragment,yl),_zo=i(yl),Hd=n(yl,"P",{});var wU=s(Hd);uzo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uG=n(wU,"A",{href:!0});var lit=s(uG);bzo=r(lit,"from_pretrained()"),lit.forEach(t),Fzo=r(wU," class method or the "),bG=n(wU,"A",{href:!0});var iit=s(bG);vzo=r(iit,"from_config()"),iit.forEach(t),Tzo=r(wU,` class
method.`),wU.forEach(t),Mzo=i(yl),lA=n(yl,"P",{});var BPe=s(lA);Ezo=r(BPe,"This class cannot be instantiated directly using "),Dme=n(BPe,"CODE",{});var dit=s(Dme);Czo=r(dit,"__init__()"),dit.forEach(t),wzo=r(BPe," (throws an error)."),BPe.forEach(t),Azo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(iA.$$.fragment,Ll),yzo=i(Ll),Gme=n(Ll,"P",{});var cit=s(Gme);Lzo=r(cit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cit.forEach(t),xzo=i(Ll),Ud=n(Ll,"P",{});var AU=s(Ud);kzo=r(AU,`Note:
Loading a model from its configuration file does `),Ome=n(AU,"STRONG",{});var fit=s(Ome);Szo=r(fit,"not"),fit.forEach(t),Rzo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(AU,"A",{href:!0});var mit=s(FG);Bzo=r(mit,"from_pretrained()"),mit.forEach(t),Pzo=r(AU," to load the model weights."),AU.forEach(t),$zo=i(Ll),Vme=n(Ll,"P",{});var git=s(Vme);Izo=r(git,"Examples:"),git.forEach(t),qzo=i(Ll),m(dA.$$.fragment,Ll),Ll.forEach(t),Nzo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(cA.$$.fragment,ta),jzo=i(ta),Xme=n(ta,"P",{});var hit=s(Xme);Dzo=r(hit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hit.forEach(t),Gzo=i(ta),dn=n(ta,"P",{});var $E=s(dn);Ozo=r($E,"The model class to instantiate is selected based on the "),zme=n($E,"CODE",{});var pit=s(zme);Vzo=r(pit,"model_type"),pit.forEach(t),Xzo=r($E,` property of the config object (either
passed as an argument or loaded from `),Qme=n($E,"CODE",{});var _it=s(Qme);zzo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),Qzo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=n($E,"CODE",{});var uit=s(Wme);Wzo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),Hzo=r($E,":"),$E.forEach(t),Uzo=i(ta),cn=n(ta,"UL",{});var IE=s(cn);HF=n(IE,"LI",{});var jye=s(HF);Hme=n(jye,"STRONG",{});var bit=s(Hme);Jzo=r(bit,"data2vec-audio"),bit.forEach(t),Yzo=r(jye," \u2014 "),vG=n(jye,"A",{href:!0});var Fit=s(vG);Kzo=r(Fit,"Data2VecAudioForXVector"),Fit.forEach(t),Zzo=r(jye," (Data2VecAudio model)"),jye.forEach(t),eQo=i(IE),UF=n(IE,"LI",{});var Dye=s(UF);Ume=n(Dye,"STRONG",{});var vit=s(Ume);oQo=r(vit,"unispeech-sat"),vit.forEach(t),rQo=r(Dye," \u2014 "),TG=n(Dye,"A",{href:!0});var Tit=s(TG);tQo=r(Tit,"UniSpeechSatForXVector"),Tit.forEach(t),aQo=r(Dye," (UniSpeechSat model)"),Dye.forEach(t),nQo=i(IE),JF=n(IE,"LI",{});var Gye=s(JF);Jme=n(Gye,"STRONG",{});var Mit=s(Jme);sQo=r(Mit,"wav2vec2"),Mit.forEach(t),lQo=r(Gye," \u2014 "),MG=n(Gye,"A",{href:!0});var Eit=s(MG);iQo=r(Eit,"Wav2Vec2ForXVector"),Eit.forEach(t),dQo=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),cQo=i(IE),YF=n(IE,"LI",{});var Oye=s(YF);Yme=n(Oye,"STRONG",{});var Cit=s(Yme);fQo=r(Cit,"wavlm"),Cit.forEach(t),mQo=r(Oye," \u2014 "),EG=n(Oye,"A",{href:!0});var wit=s(EG);gQo=r(wit,"WavLMForXVector"),wit.forEach(t),hQo=r(Oye," (WavLM model)"),Oye.forEach(t),IE.forEach(t),pQo=i(ta),KF=n(ta,"P",{});var Vye=s(KF);_Qo=r(Vye,"The model is set in evaluation mode by default using "),Kme=n(Vye,"CODE",{});var Ait=s(Kme);uQo=r(Ait,"model.eval()"),Ait.forEach(t),bQo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(Vye,"CODE",{});var yit=s(Zme);FQo=r(yit,"model.train()"),yit.forEach(t),Vye.forEach(t),vQo=i(ta),ege=n(ta,"P",{});var Lit=s(ege);TQo=r(Lit,"Examples:"),Lit.forEach(t),MQo=i(ta),m(fA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),CRe=i(c),Jd=n(c,"H2",{class:!0});var PPe=s(Jd);ZF=n(PPe,"A",{id:!0,class:!0,href:!0});var xit=s(ZF);oge=n(xit,"SPAN",{});var kit=s(oge);m(mA.$$.fragment,kit),kit.forEach(t),xit.forEach(t),EQo=i(PPe),rge=n(PPe,"SPAN",{});var Sit=s(rge);CQo=r(Sit,"AutoModelForMaskedImageModeling"),Sit.forEach(t),PPe.forEach(t),wRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(gA.$$.fragment,xl),wQo=i(xl),Yd=n(xl,"P",{});var yU=s(Yd);AQo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CG=n(yU,"A",{href:!0});var Rit=s(CG);yQo=r(Rit,"from_pretrained()"),Rit.forEach(t),LQo=r(yU," class method or the "),wG=n(yU,"A",{href:!0});var Bit=s(wG);xQo=r(Bit,"from_config()"),Bit.forEach(t),kQo=r(yU,` class
method.`),yU.forEach(t),SQo=i(xl),hA=n(xl,"P",{});var $Pe=s(hA);RQo=r($Pe,"This class cannot be instantiated directly using "),tge=n($Pe,"CODE",{});var Pit=s(tge);BQo=r(Pit,"__init__()"),Pit.forEach(t),PQo=r($Pe," (throws an error)."),$Pe.forEach(t),$Qo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(pA.$$.fragment,kl),IQo=i(kl),age=n(kl,"P",{});var $it=s(age);qQo=r($it,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$it.forEach(t),NQo=i(kl),Kd=n(kl,"P",{});var LU=s(Kd);jQo=r(LU,`Note:
Loading a model from its configuration file does `),nge=n(LU,"STRONG",{});var Iit=s(nge);DQo=r(Iit,"not"),Iit.forEach(t),GQo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(LU,"A",{href:!0});var qit=s(AG);OQo=r(qit,"from_pretrained()"),qit.forEach(t),VQo=r(LU," to load the model weights."),LU.forEach(t),XQo=i(kl),sge=n(kl,"P",{});var Nit=s(sge);zQo=r(Nit,"Examples:"),Nit.forEach(t),QQo=i(kl),m(_A.$$.fragment,kl),kl.forEach(t),WQo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(uA.$$.fragment,aa),HQo=i(aa),lge=n(aa,"P",{});var jit=s(lge);UQo=r(jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jit.forEach(t),JQo=i(aa),fn=n(aa,"P",{});var qE=s(fn);YQo=r(qE,"The model class to instantiate is selected based on the "),ige=n(qE,"CODE",{});var Dit=s(ige);KQo=r(Dit,"model_type"),Dit.forEach(t),ZQo=r(qE,` property of the config object (either
passed as an argument or loaded from `),dge=n(qE,"CODE",{});var Git=s(dge);eWo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),oWo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(qE,"CODE",{});var Oit=s(cge);rWo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),tWo=r(qE,":"),qE.forEach(t),aWo=i(aa),Zd=n(aa,"UL",{});var xU=s(Zd);ev=n(xU,"LI",{});var Xye=s(ev);fge=n(Xye,"STRONG",{});var Vit=s(fge);nWo=r(Vit,"deit"),Vit.forEach(t),sWo=r(Xye," \u2014 "),yG=n(Xye,"A",{href:!0});var Xit=s(yG);lWo=r(Xit,"DeiTForMaskedImageModeling"),Xit.forEach(t),iWo=r(Xye," (DeiT model)"),Xye.forEach(t),dWo=i(xU),ov=n(xU,"LI",{});var zye=s(ov);mge=n(zye,"STRONG",{});var zit=s(mge);cWo=r(zit,"swin"),zit.forEach(t),fWo=r(zye," \u2014 "),LG=n(zye,"A",{href:!0});var Qit=s(LG);mWo=r(Qit,"SwinForMaskedImageModeling"),Qit.forEach(t),gWo=r(zye," (Swin model)"),zye.forEach(t),hWo=i(xU),rv=n(xU,"LI",{});var Qye=s(rv);gge=n(Qye,"STRONG",{});var Wit=s(gge);pWo=r(Wit,"vit"),Wit.forEach(t),_Wo=r(Qye," \u2014 "),xG=n(Qye,"A",{href:!0});var Hit=s(xG);uWo=r(Hit,"ViTForMaskedImageModeling"),Hit.forEach(t),bWo=r(Qye," (ViT model)"),Qye.forEach(t),xU.forEach(t),FWo=i(aa),tv=n(aa,"P",{});var Wye=s(tv);vWo=r(Wye,"The model is set in evaluation mode by default using "),hge=n(Wye,"CODE",{});var Uit=s(hge);TWo=r(Uit,"model.eval()"),Uit.forEach(t),MWo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(Wye,"CODE",{});var Jit=s(pge);EWo=r(Jit,"model.train()"),Jit.forEach(t),Wye.forEach(t),CWo=i(aa),_ge=n(aa,"P",{});var Yit=s(_ge);wWo=r(Yit,"Examples:"),Yit.forEach(t),AWo=i(aa),m(bA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),ARe=i(c),ec=n(c,"H2",{class:!0});var IPe=s(ec);av=n(IPe,"A",{id:!0,class:!0,href:!0});var Kit=s(av);uge=n(Kit,"SPAN",{});var Zit=s(uge);m(FA.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),yWo=i(IPe),bge=n(IPe,"SPAN",{});var edt=s(bge);LWo=r(edt,"AutoModelForObjectDetection"),edt.forEach(t),IPe.forEach(t),yRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(vA.$$.fragment,Sl),xWo=i(Sl),oc=n(Sl,"P",{});var kU=s(oc);kWo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kG=n(kU,"A",{href:!0});var odt=s(kG);SWo=r(odt,"from_pretrained()"),odt.forEach(t),RWo=r(kU," class method or the "),SG=n(kU,"A",{href:!0});var rdt=s(SG);BWo=r(rdt,"from_config()"),rdt.forEach(t),PWo=r(kU,` class
method.`),kU.forEach(t),$Wo=i(Sl),TA=n(Sl,"P",{});var qPe=s(TA);IWo=r(qPe,"This class cannot be instantiated directly using "),Fge=n(qPe,"CODE",{});var tdt=s(Fge);qWo=r(tdt,"__init__()"),tdt.forEach(t),NWo=r(qPe," (throws an error)."),qPe.forEach(t),jWo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(MA.$$.fragment,Rl),DWo=i(Rl),vge=n(Rl,"P",{});var adt=s(vge);GWo=r(adt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),adt.forEach(t),OWo=i(Rl),rc=n(Rl,"P",{});var SU=s(rc);VWo=r(SU,`Note:
Loading a model from its configuration file does `),Tge=n(SU,"STRONG",{});var ndt=s(Tge);XWo=r(ndt,"not"),ndt.forEach(t),zWo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(SU,"A",{href:!0});var sdt=s(RG);QWo=r(sdt,"from_pretrained()"),sdt.forEach(t),WWo=r(SU," to load the model weights."),SU.forEach(t),HWo=i(Rl),Mge=n(Rl,"P",{});var ldt=s(Mge);UWo=r(ldt,"Examples:"),ldt.forEach(t),JWo=i(Rl),m(EA.$$.fragment,Rl),Rl.forEach(t),YWo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(CA.$$.fragment,na),KWo=i(na),Ege=n(na,"P",{});var idt=s(Ege);ZWo=r(idt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),idt.forEach(t),eHo=i(na),mn=n(na,"P",{});var NE=s(mn);oHo=r(NE,"The model class to instantiate is selected based on the "),Cge=n(NE,"CODE",{});var ddt=s(Cge);rHo=r(ddt,"model_type"),ddt.forEach(t),tHo=r(NE,` property of the config object (either
passed as an argument or loaded from `),wge=n(NE,"CODE",{});var cdt=s(wge);aHo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),nHo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(NE,"CODE",{});var fdt=s(Age);sHo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),lHo=r(NE,":"),NE.forEach(t),iHo=i(na),yge=n(na,"UL",{});var mdt=s(yge);nv=n(mdt,"LI",{});var Hye=s(nv);Lge=n(Hye,"STRONG",{});var gdt=s(Lge);dHo=r(gdt,"detr"),gdt.forEach(t),cHo=r(Hye," \u2014 "),BG=n(Hye,"A",{href:!0});var hdt=s(BG);fHo=r(hdt,"DetrForObjectDetection"),hdt.forEach(t),mHo=r(Hye," (DETR model)"),Hye.forEach(t),mdt.forEach(t),gHo=i(na),sv=n(na,"P",{});var Uye=s(sv);hHo=r(Uye,"The model is set in evaluation mode by default using "),xge=n(Uye,"CODE",{});var pdt=s(xge);pHo=r(pdt,"model.eval()"),pdt.forEach(t),_Ho=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(Uye,"CODE",{});var _dt=s(kge);uHo=r(_dt,"model.train()"),_dt.forEach(t),Uye.forEach(t),bHo=i(na),Sge=n(na,"P",{});var udt=s(Sge);FHo=r(udt,"Examples:"),udt.forEach(t),vHo=i(na),m(wA.$$.fragment,na),na.forEach(t),Sl.forEach(t),LRe=i(c),tc=n(c,"H2",{class:!0});var NPe=s(tc);lv=n(NPe,"A",{id:!0,class:!0,href:!0});var bdt=s(lv);Rge=n(bdt,"SPAN",{});var Fdt=s(Rge);m(AA.$$.fragment,Fdt),Fdt.forEach(t),bdt.forEach(t),THo=i(NPe),Bge=n(NPe,"SPAN",{});var vdt=s(Bge);MHo=r(vdt,"AutoModelForImageSegmentation"),vdt.forEach(t),NPe.forEach(t),xRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(yA.$$.fragment,Bl),EHo=i(Bl),ac=n(Bl,"P",{});var RU=s(ac);CHo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PG=n(RU,"A",{href:!0});var Tdt=s(PG);wHo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),AHo=r(RU," class method or the "),$G=n(RU,"A",{href:!0});var Mdt=s($G);yHo=r(Mdt,"from_config()"),Mdt.forEach(t),LHo=r(RU,` class
method.`),RU.forEach(t),xHo=i(Bl),LA=n(Bl,"P",{});var jPe=s(LA);kHo=r(jPe,"This class cannot be instantiated directly using "),Pge=n(jPe,"CODE",{});var Edt=s(Pge);SHo=r(Edt,"__init__()"),Edt.forEach(t),RHo=r(jPe," (throws an error)."),jPe.forEach(t),BHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(xA.$$.fragment,Pl),PHo=i(Pl),$ge=n(Pl,"P",{});var Cdt=s($ge);$Ho=r(Cdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cdt.forEach(t),IHo=i(Pl),nc=n(Pl,"P",{});var BU=s(nc);qHo=r(BU,`Note:
Loading a model from its configuration file does `),Ige=n(BU,"STRONG",{});var wdt=s(Ige);NHo=r(wdt,"not"),wdt.forEach(t),jHo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(BU,"A",{href:!0});var Adt=s(IG);DHo=r(Adt,"from_pretrained()"),Adt.forEach(t),GHo=r(BU," to load the model weights."),BU.forEach(t),OHo=i(Pl),qge=n(Pl,"P",{});var ydt=s(qge);VHo=r(ydt,"Examples:"),ydt.forEach(t),XHo=i(Pl),m(kA.$$.fragment,Pl),Pl.forEach(t),zHo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(SA.$$.fragment,sa),QHo=i(sa),Nge=n(sa,"P",{});var Ldt=s(Nge);WHo=r(Ldt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ldt.forEach(t),HHo=i(sa),gn=n(sa,"P",{});var jE=s(gn);UHo=r(jE,"The model class to instantiate is selected based on the "),jge=n(jE,"CODE",{});var xdt=s(jge);JHo=r(xdt,"model_type"),xdt.forEach(t),YHo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Dge=n(jE,"CODE",{});var kdt=s(Dge);KHo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),ZHo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(jE,"CODE",{});var Sdt=s(Gge);eUo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),oUo=r(jE,":"),jE.forEach(t),rUo=i(sa),Oge=n(sa,"UL",{});var Rdt=s(Oge);iv=n(Rdt,"LI",{});var Jye=s(iv);Vge=n(Jye,"STRONG",{});var Bdt=s(Vge);tUo=r(Bdt,"detr"),Bdt.forEach(t),aUo=r(Jye," \u2014 "),qG=n(Jye,"A",{href:!0});var Pdt=s(qG);nUo=r(Pdt,"DetrForSegmentation"),Pdt.forEach(t),sUo=r(Jye," (DETR model)"),Jye.forEach(t),Rdt.forEach(t),lUo=i(sa),dv=n(sa,"P",{});var Yye=s(dv);iUo=r(Yye,"The model is set in evaluation mode by default using "),Xge=n(Yye,"CODE",{});var $dt=s(Xge);dUo=r($dt,"model.eval()"),$dt.forEach(t),cUo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(Yye,"CODE",{});var Idt=s(zge);fUo=r(Idt,"model.train()"),Idt.forEach(t),Yye.forEach(t),mUo=i(sa),Qge=n(sa,"P",{});var qdt=s(Qge);gUo=r(qdt,"Examples:"),qdt.forEach(t),hUo=i(sa),m(RA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),kRe=i(c),sc=n(c,"H2",{class:!0});var DPe=s(sc);cv=n(DPe,"A",{id:!0,class:!0,href:!0});var Ndt=s(cv);Wge=n(Ndt,"SPAN",{});var jdt=s(Wge);m(BA.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),pUo=i(DPe),Hge=n(DPe,"SPAN",{});var Ddt=s(Hge);_Uo=r(Ddt,"AutoModelForSemanticSegmentation"),Ddt.forEach(t),DPe.forEach(t),SRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(PA.$$.fragment,$l),uUo=i($l),lc=n($l,"P",{});var PU=s(lc);bUo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NG=n(PU,"A",{href:!0});var Gdt=s(NG);FUo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),vUo=r(PU," class method or the "),jG=n(PU,"A",{href:!0});var Odt=s(jG);TUo=r(Odt,"from_config()"),Odt.forEach(t),MUo=r(PU,` class
method.`),PU.forEach(t),EUo=i($l),$A=n($l,"P",{});var GPe=s($A);CUo=r(GPe,"This class cannot be instantiated directly using "),Uge=n(GPe,"CODE",{});var Vdt=s(Uge);wUo=r(Vdt,"__init__()"),Vdt.forEach(t),AUo=r(GPe," (throws an error)."),GPe.forEach(t),yUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(IA.$$.fragment,Il),LUo=i(Il),Jge=n(Il,"P",{});var Xdt=s(Jge);xUo=r(Xdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xdt.forEach(t),kUo=i(Il),ic=n(Il,"P",{});var $U=s(ic);SUo=r($U,`Note:
Loading a model from its configuration file does `),Yge=n($U,"STRONG",{});var zdt=s(Yge);RUo=r(zdt,"not"),zdt.forEach(t),BUo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n($U,"A",{href:!0});var Qdt=s(DG);PUo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),$Uo=r($U," to load the model weights."),$U.forEach(t),IUo=i(Il),Kge=n(Il,"P",{});var Wdt=s(Kge);qUo=r(Wdt,"Examples:"),Wdt.forEach(t),NUo=i(Il),m(qA.$$.fragment,Il),Il.forEach(t),jUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(NA.$$.fragment,la),DUo=i(la),Zge=n(la,"P",{});var Hdt=s(Zge);GUo=r(Hdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hdt.forEach(t),OUo=i(la),hn=n(la,"P",{});var DE=s(hn);VUo=r(DE,"The model class to instantiate is selected based on the "),ehe=n(DE,"CODE",{});var Udt=s(ehe);XUo=r(Udt,"model_type"),Udt.forEach(t),zUo=r(DE,` property of the config object (either
passed as an argument or loaded from `),ohe=n(DE,"CODE",{});var Jdt=s(ohe);QUo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),WUo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(DE,"CODE",{});var Ydt=s(rhe);HUo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),UUo=r(DE,":"),DE.forEach(t),JUo=i(la),dc=n(la,"UL",{});var IU=s(dc);fv=n(IU,"LI",{});var Kye=s(fv);the=n(Kye,"STRONG",{});var Kdt=s(the);YUo=r(Kdt,"beit"),Kdt.forEach(t),KUo=r(Kye," \u2014 "),GG=n(Kye,"A",{href:!0});var Zdt=s(GG);ZUo=r(Zdt,"BeitForSemanticSegmentation"),Zdt.forEach(t),eJo=r(Kye," (BEiT model)"),Kye.forEach(t),oJo=i(IU),mv=n(IU,"LI",{});var Zye=s(mv);ahe=n(Zye,"STRONG",{});var ect=s(ahe);rJo=r(ect,"dpt"),ect.forEach(t),tJo=r(Zye," \u2014 "),OG=n(Zye,"A",{href:!0});var oct=s(OG);aJo=r(oct,"DPTForSemanticSegmentation"),oct.forEach(t),nJo=r(Zye," (DPT model)"),Zye.forEach(t),sJo=i(IU),gv=n(IU,"LI",{});var eLe=s(gv);nhe=n(eLe,"STRONG",{});var rct=s(nhe);lJo=r(rct,"segformer"),rct.forEach(t),iJo=r(eLe," \u2014 "),VG=n(eLe,"A",{href:!0});var tct=s(VG);dJo=r(tct,"SegformerForSemanticSegmentation"),tct.forEach(t),cJo=r(eLe," (SegFormer model)"),eLe.forEach(t),IU.forEach(t),fJo=i(la),hv=n(la,"P",{});var oLe=s(hv);mJo=r(oLe,"The model is set in evaluation mode by default using "),she=n(oLe,"CODE",{});var act=s(she);gJo=r(act,"model.eval()"),act.forEach(t),hJo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(oLe,"CODE",{});var nct=s(lhe);pJo=r(nct,"model.train()"),nct.forEach(t),oLe.forEach(t),_Jo=i(la),ihe=n(la,"P",{});var sct=s(ihe);uJo=r(sct,"Examples:"),sct.forEach(t),bJo=i(la),m(jA.$$.fragment,la),la.forEach(t),$l.forEach(t),RRe=i(c),cc=n(c,"H2",{class:!0});var OPe=s(cc);pv=n(OPe,"A",{id:!0,class:!0,href:!0});var lct=s(pv);dhe=n(lct,"SPAN",{});var ict=s(dhe);m(DA.$$.fragment,ict),ict.forEach(t),lct.forEach(t),FJo=i(OPe),che=n(OPe,"SPAN",{});var dct=s(che);vJo=r(dct,"AutoModelForInstanceSegmentation"),dct.forEach(t),OPe.forEach(t),BRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(GA.$$.fragment,ql),TJo=i(ql),fc=n(ql,"P",{});var qU=s(fc);MJo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XG=n(qU,"A",{href:!0});var cct=s(XG);EJo=r(cct,"from_pretrained()"),cct.forEach(t),CJo=r(qU," class method or the "),zG=n(qU,"A",{href:!0});var fct=s(zG);wJo=r(fct,"from_config()"),fct.forEach(t),AJo=r(qU,` class
method.`),qU.forEach(t),yJo=i(ql),OA=n(ql,"P",{});var VPe=s(OA);LJo=r(VPe,"This class cannot be instantiated directly using "),fhe=n(VPe,"CODE",{});var mct=s(fhe);xJo=r(mct,"__init__()"),mct.forEach(t),kJo=r(VPe," (throws an error)."),VPe.forEach(t),SJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(VA.$$.fragment,Nl),RJo=i(Nl),mhe=n(Nl,"P",{});var gct=s(mhe);BJo=r(gct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gct.forEach(t),PJo=i(Nl),mc=n(Nl,"P",{});var NU=s(mc);$Jo=r(NU,`Note:
Loading a model from its configuration file does `),ghe=n(NU,"STRONG",{});var hct=s(ghe);IJo=r(hct,"not"),hct.forEach(t),qJo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(NU,"A",{href:!0});var pct=s(QG);NJo=r(pct,"from_pretrained()"),pct.forEach(t),jJo=r(NU," to load the model weights."),NU.forEach(t),DJo=i(Nl),hhe=n(Nl,"P",{});var _ct=s(hhe);GJo=r(_ct,"Examples:"),_ct.forEach(t),OJo=i(Nl),m(XA.$$.fragment,Nl),Nl.forEach(t),VJo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(zA.$$.fragment,ia),XJo=i(ia),phe=n(ia,"P",{});var uct=s(phe);zJo=r(uct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uct.forEach(t),QJo=i(ia),pn=n(ia,"P",{});var GE=s(pn);WJo=r(GE,"The model class to instantiate is selected based on the "),_he=n(GE,"CODE",{});var bct=s(_he);HJo=r(bct,"model_type"),bct.forEach(t),UJo=r(GE,` property of the config object (either
passed as an argument or loaded from `),uhe=n(GE,"CODE",{});var Fct=s(uhe);JJo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),YJo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(GE,"CODE",{});var vct=s(bhe);KJo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),ZJo=r(GE,":"),GE.forEach(t),eYo=i(ia),Fhe=n(ia,"UL",{});var Tct=s(Fhe);_v=n(Tct,"LI",{});var rLe=s(_v);vhe=n(rLe,"STRONG",{});var Mct=s(vhe);oYo=r(Mct,"maskformer"),Mct.forEach(t),rYo=r(rLe," \u2014 "),WG=n(rLe,"A",{href:!0});var Ect=s(WG);tYo=r(Ect,"MaskFormerForInstanceSegmentation"),Ect.forEach(t),aYo=r(rLe," (MaskFormer model)"),rLe.forEach(t),Tct.forEach(t),nYo=i(ia),uv=n(ia,"P",{});var tLe=s(uv);sYo=r(tLe,"The model is set in evaluation mode by default using "),The=n(tLe,"CODE",{});var Cct=s(The);lYo=r(Cct,"model.eval()"),Cct.forEach(t),iYo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(tLe,"CODE",{});var wct=s(Mhe);dYo=r(wct,"model.train()"),wct.forEach(t),tLe.forEach(t),cYo=i(ia),Ehe=n(ia,"P",{});var Act=s(Ehe);fYo=r(Act,"Examples:"),Act.forEach(t),mYo=i(ia),m(QA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),PRe=i(c),gc=n(c,"H2",{class:!0});var XPe=s(gc);bv=n(XPe,"A",{id:!0,class:!0,href:!0});var yct=s(bv);Che=n(yct,"SPAN",{});var Lct=s(Che);m(WA.$$.fragment,Lct),Lct.forEach(t),yct.forEach(t),gYo=i(XPe),whe=n(XPe,"SPAN",{});var xct=s(whe);hYo=r(xct,"TFAutoModel"),xct.forEach(t),XPe.forEach(t),$Re=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(HA.$$.fragment,jl),pYo=i(jl),hc=n(jl,"P",{});var jU=s(hc);_Yo=r(jU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HG=n(jU,"A",{href:!0});var kct=s(HG);uYo=r(kct,"from_pretrained()"),kct.forEach(t),bYo=r(jU," class method or the "),UG=n(jU,"A",{href:!0});var Sct=s(UG);FYo=r(Sct,"from_config()"),Sct.forEach(t),vYo=r(jU,` class
method.`),jU.forEach(t),TYo=i(jl),UA=n(jl,"P",{});var zPe=s(UA);MYo=r(zPe,"This class cannot be instantiated directly using "),Ahe=n(zPe,"CODE",{});var Rct=s(Ahe);EYo=r(Rct,"__init__()"),Rct.forEach(t),CYo=r(zPe," (throws an error)."),zPe.forEach(t),wYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(JA.$$.fragment,Dl),AYo=i(Dl),yhe=n(Dl,"P",{});var Bct=s(yhe);yYo=r(Bct,"Instantiates one of the base model classes of the library from a configuration."),Bct.forEach(t),LYo=i(Dl),pc=n(Dl,"P",{});var DU=s(pc);xYo=r(DU,`Note:
Loading a model from its configuration file does `),Lhe=n(DU,"STRONG",{});var Pct=s(Lhe);kYo=r(Pct,"not"),Pct.forEach(t),SYo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(DU,"A",{href:!0});var $ct=s(JG);RYo=r($ct,"from_pretrained()"),$ct.forEach(t),BYo=r(DU," to load the model weights."),DU.forEach(t),PYo=i(Dl),xhe=n(Dl,"P",{});var Ict=s(xhe);$Yo=r(Ict,"Examples:"),Ict.forEach(t),IYo=i(Dl),m(YA.$$.fragment,Dl),Dl.forEach(t),qYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(KA.$$.fragment,pa),NYo=i(pa),khe=n(pa,"P",{});var qct=s(khe);jYo=r(qct,"Instantiate one of the base model classes of the library from a pretrained model."),qct.forEach(t),DYo=i(pa),_n=n(pa,"P",{});var OE=s(_n);GYo=r(OE,"The model class to instantiate is selected based on the "),She=n(OE,"CODE",{});var Nct=s(She);OYo=r(Nct,"model_type"),Nct.forEach(t),VYo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(OE,"CODE",{});var jct=s(Rhe);XYo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zYo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(OE,"CODE",{});var Dct=s(Bhe);QYo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),WYo=r(OE,":"),OE.forEach(t),HYo=i(pa),x=n(pa,"UL",{});var k=s(x);Fv=n(k,"LI",{});var aLe=s(Fv);Phe=n(aLe,"STRONG",{});var Gct=s(Phe);UYo=r(Gct,"albert"),Gct.forEach(t),JYo=r(aLe," \u2014 "),YG=n(aLe,"A",{href:!0});var Oct=s(YG);YYo=r(Oct,"TFAlbertModel"),Oct.forEach(t),KYo=r(aLe," (ALBERT model)"),aLe.forEach(t),ZYo=i(k),vv=n(k,"LI",{});var nLe=s(vv);$he=n(nLe,"STRONG",{});var Vct=s($he);eKo=r(Vct,"bart"),Vct.forEach(t),oKo=r(nLe," \u2014 "),KG=n(nLe,"A",{href:!0});var Xct=s(KG);rKo=r(Xct,"TFBartModel"),Xct.forEach(t),tKo=r(nLe," (BART model)"),nLe.forEach(t),aKo=i(k),Tv=n(k,"LI",{});var sLe=s(Tv);Ihe=n(sLe,"STRONG",{});var zct=s(Ihe);nKo=r(zct,"bert"),zct.forEach(t),sKo=r(sLe," \u2014 "),ZG=n(sLe,"A",{href:!0});var Qct=s(ZG);lKo=r(Qct,"TFBertModel"),Qct.forEach(t),iKo=r(sLe," (BERT model)"),sLe.forEach(t),dKo=i(k),Mv=n(k,"LI",{});var lLe=s(Mv);qhe=n(lLe,"STRONG",{});var Wct=s(qhe);cKo=r(Wct,"blenderbot"),Wct.forEach(t),fKo=r(lLe," \u2014 "),eO=n(lLe,"A",{href:!0});var Hct=s(eO);mKo=r(Hct,"TFBlenderbotModel"),Hct.forEach(t),gKo=r(lLe," (Blenderbot model)"),lLe.forEach(t),hKo=i(k),Ev=n(k,"LI",{});var iLe=s(Ev);Nhe=n(iLe,"STRONG",{});var Uct=s(Nhe);pKo=r(Uct,"blenderbot-small"),Uct.forEach(t),_Ko=r(iLe," \u2014 "),oO=n(iLe,"A",{href:!0});var Jct=s(oO);uKo=r(Jct,"TFBlenderbotSmallModel"),Jct.forEach(t),bKo=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),FKo=i(k),Cv=n(k,"LI",{});var dLe=s(Cv);jhe=n(dLe,"STRONG",{});var Yct=s(jhe);vKo=r(Yct,"camembert"),Yct.forEach(t),TKo=r(dLe," \u2014 "),rO=n(dLe,"A",{href:!0});var Kct=s(rO);MKo=r(Kct,"TFCamembertModel"),Kct.forEach(t),EKo=r(dLe," (CamemBERT model)"),dLe.forEach(t),CKo=i(k),wv=n(k,"LI",{});var cLe=s(wv);Dhe=n(cLe,"STRONG",{});var Zct=s(Dhe);wKo=r(Zct,"clip"),Zct.forEach(t),AKo=r(cLe," \u2014 "),tO=n(cLe,"A",{href:!0});var eft=s(tO);yKo=r(eft,"TFCLIPModel"),eft.forEach(t),LKo=r(cLe," (CLIP model)"),cLe.forEach(t),xKo=i(k),Av=n(k,"LI",{});var fLe=s(Av);Ghe=n(fLe,"STRONG",{});var oft=s(Ghe);kKo=r(oft,"convbert"),oft.forEach(t),SKo=r(fLe," \u2014 "),aO=n(fLe,"A",{href:!0});var rft=s(aO);RKo=r(rft,"TFConvBertModel"),rft.forEach(t),BKo=r(fLe," (ConvBERT model)"),fLe.forEach(t),PKo=i(k),yv=n(k,"LI",{});var mLe=s(yv);Ohe=n(mLe,"STRONG",{});var tft=s(Ohe);$Ko=r(tft,"convnext"),tft.forEach(t),IKo=r(mLe," \u2014 "),nO=n(mLe,"A",{href:!0});var aft=s(nO);qKo=r(aft,"TFConvNextModel"),aft.forEach(t),NKo=r(mLe," (ConvNext model)"),mLe.forEach(t),jKo=i(k),Lv=n(k,"LI",{});var gLe=s(Lv);Vhe=n(gLe,"STRONG",{});var nft=s(Vhe);DKo=r(nft,"ctrl"),nft.forEach(t),GKo=r(gLe," \u2014 "),sO=n(gLe,"A",{href:!0});var sft=s(sO);OKo=r(sft,"TFCTRLModel"),sft.forEach(t),VKo=r(gLe," (CTRL model)"),gLe.forEach(t),XKo=i(k),xv=n(k,"LI",{});var hLe=s(xv);Xhe=n(hLe,"STRONG",{});var lft=s(Xhe);zKo=r(lft,"deberta"),lft.forEach(t),QKo=r(hLe," \u2014 "),lO=n(hLe,"A",{href:!0});var ift=s(lO);WKo=r(ift,"TFDebertaModel"),ift.forEach(t),HKo=r(hLe," (DeBERTa model)"),hLe.forEach(t),UKo=i(k),kv=n(k,"LI",{});var pLe=s(kv);zhe=n(pLe,"STRONG",{});var dft=s(zhe);JKo=r(dft,"deberta-v2"),dft.forEach(t),YKo=r(pLe," \u2014 "),iO=n(pLe,"A",{href:!0});var cft=s(iO);KKo=r(cft,"TFDebertaV2Model"),cft.forEach(t),ZKo=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),eZo=i(k),Sv=n(k,"LI",{});var _Le=s(Sv);Qhe=n(_Le,"STRONG",{});var fft=s(Qhe);oZo=r(fft,"distilbert"),fft.forEach(t),rZo=r(_Le," \u2014 "),dO=n(_Le,"A",{href:!0});var mft=s(dO);tZo=r(mft,"TFDistilBertModel"),mft.forEach(t),aZo=r(_Le," (DistilBERT model)"),_Le.forEach(t),nZo=i(k),Rv=n(k,"LI",{});var uLe=s(Rv);Whe=n(uLe,"STRONG",{});var gft=s(Whe);sZo=r(gft,"dpr"),gft.forEach(t),lZo=r(uLe," \u2014 "),cO=n(uLe,"A",{href:!0});var hft=s(cO);iZo=r(hft,"TFDPRQuestionEncoder"),hft.forEach(t),dZo=r(uLe," (DPR model)"),uLe.forEach(t),cZo=i(k),Bv=n(k,"LI",{});var bLe=s(Bv);Hhe=n(bLe,"STRONG",{});var pft=s(Hhe);fZo=r(pft,"electra"),pft.forEach(t),mZo=r(bLe," \u2014 "),fO=n(bLe,"A",{href:!0});var _ft=s(fO);gZo=r(_ft,"TFElectraModel"),_ft.forEach(t),hZo=r(bLe," (ELECTRA model)"),bLe.forEach(t),pZo=i(k),Pv=n(k,"LI",{});var FLe=s(Pv);Uhe=n(FLe,"STRONG",{});var uft=s(Uhe);_Zo=r(uft,"flaubert"),uft.forEach(t),uZo=r(FLe," \u2014 "),mO=n(FLe,"A",{href:!0});var bft=s(mO);bZo=r(bft,"TFFlaubertModel"),bft.forEach(t),FZo=r(FLe," (FlauBERT model)"),FLe.forEach(t),vZo=i(k),Gs=n(k,"LI",{});var a9=s(Gs);Jhe=n(a9,"STRONG",{});var Fft=s(Jhe);TZo=r(Fft,"funnel"),Fft.forEach(t),MZo=r(a9," \u2014 "),gO=n(a9,"A",{href:!0});var vft=s(gO);EZo=r(vft,"TFFunnelModel"),vft.forEach(t),CZo=r(a9," or "),hO=n(a9,"A",{href:!0});var Tft=s(hO);wZo=r(Tft,"TFFunnelBaseModel"),Tft.forEach(t),AZo=r(a9," (Funnel Transformer model)"),a9.forEach(t),yZo=i(k),$v=n(k,"LI",{});var vLe=s($v);Yhe=n(vLe,"STRONG",{});var Mft=s(Yhe);LZo=r(Mft,"gpt2"),Mft.forEach(t),xZo=r(vLe," \u2014 "),pO=n(vLe,"A",{href:!0});var Eft=s(pO);kZo=r(Eft,"TFGPT2Model"),Eft.forEach(t),SZo=r(vLe," (OpenAI GPT-2 model)"),vLe.forEach(t),RZo=i(k),Iv=n(k,"LI",{});var TLe=s(Iv);Khe=n(TLe,"STRONG",{});var Cft=s(Khe);BZo=r(Cft,"gptj"),Cft.forEach(t),PZo=r(TLe," \u2014 "),_O=n(TLe,"A",{href:!0});var wft=s(_O);$Zo=r(wft,"TFGPTJModel"),wft.forEach(t),IZo=r(TLe," (GPT-J model)"),TLe.forEach(t),qZo=i(k),qv=n(k,"LI",{});var MLe=s(qv);Zhe=n(MLe,"STRONG",{});var Aft=s(Zhe);NZo=r(Aft,"hubert"),Aft.forEach(t),jZo=r(MLe," \u2014 "),uO=n(MLe,"A",{href:!0});var yft=s(uO);DZo=r(yft,"TFHubertModel"),yft.forEach(t),GZo=r(MLe," (Hubert model)"),MLe.forEach(t),OZo=i(k),Nv=n(k,"LI",{});var ELe=s(Nv);epe=n(ELe,"STRONG",{});var Lft=s(epe);VZo=r(Lft,"layoutlm"),Lft.forEach(t),XZo=r(ELe," \u2014 "),bO=n(ELe,"A",{href:!0});var xft=s(bO);zZo=r(xft,"TFLayoutLMModel"),xft.forEach(t),QZo=r(ELe," (LayoutLM model)"),ELe.forEach(t),WZo=i(k),jv=n(k,"LI",{});var CLe=s(jv);ope=n(CLe,"STRONG",{});var kft=s(ope);HZo=r(kft,"led"),kft.forEach(t),UZo=r(CLe," \u2014 "),FO=n(CLe,"A",{href:!0});var Sft=s(FO);JZo=r(Sft,"TFLEDModel"),Sft.forEach(t),YZo=r(CLe," (LED model)"),CLe.forEach(t),KZo=i(k),Dv=n(k,"LI",{});var wLe=s(Dv);rpe=n(wLe,"STRONG",{});var Rft=s(rpe);ZZo=r(Rft,"longformer"),Rft.forEach(t),eer=r(wLe," \u2014 "),vO=n(wLe,"A",{href:!0});var Bft=s(vO);oer=r(Bft,"TFLongformerModel"),Bft.forEach(t),rer=r(wLe," (Longformer model)"),wLe.forEach(t),ter=i(k),Gv=n(k,"LI",{});var ALe=s(Gv);tpe=n(ALe,"STRONG",{});var Pft=s(tpe);aer=r(Pft,"lxmert"),Pft.forEach(t),ner=r(ALe," \u2014 "),TO=n(ALe,"A",{href:!0});var $ft=s(TO);ser=r($ft,"TFLxmertModel"),$ft.forEach(t),ler=r(ALe," (LXMERT model)"),ALe.forEach(t),ier=i(k),Ov=n(k,"LI",{});var yLe=s(Ov);ape=n(yLe,"STRONG",{});var Ift=s(ape);der=r(Ift,"marian"),Ift.forEach(t),cer=r(yLe," \u2014 "),MO=n(yLe,"A",{href:!0});var qft=s(MO);fer=r(qft,"TFMarianModel"),qft.forEach(t),mer=r(yLe," (Marian model)"),yLe.forEach(t),ger=i(k),Vv=n(k,"LI",{});var LLe=s(Vv);npe=n(LLe,"STRONG",{});var Nft=s(npe);her=r(Nft,"mbart"),Nft.forEach(t),per=r(LLe," \u2014 "),EO=n(LLe,"A",{href:!0});var jft=s(EO);_er=r(jft,"TFMBartModel"),jft.forEach(t),uer=r(LLe," (mBART model)"),LLe.forEach(t),ber=i(k),Xv=n(k,"LI",{});var xLe=s(Xv);spe=n(xLe,"STRONG",{});var Dft=s(spe);Fer=r(Dft,"mobilebert"),Dft.forEach(t),ver=r(xLe," \u2014 "),CO=n(xLe,"A",{href:!0});var Gft=s(CO);Ter=r(Gft,"TFMobileBertModel"),Gft.forEach(t),Mer=r(xLe," (MobileBERT model)"),xLe.forEach(t),Eer=i(k),zv=n(k,"LI",{});var kLe=s(zv);lpe=n(kLe,"STRONG",{});var Oft=s(lpe);Cer=r(Oft,"mpnet"),Oft.forEach(t),wer=r(kLe," \u2014 "),wO=n(kLe,"A",{href:!0});var Vft=s(wO);Aer=r(Vft,"TFMPNetModel"),Vft.forEach(t),yer=r(kLe," (MPNet model)"),kLe.forEach(t),Ler=i(k),Qv=n(k,"LI",{});var SLe=s(Qv);ipe=n(SLe,"STRONG",{});var Xft=s(ipe);xer=r(Xft,"mt5"),Xft.forEach(t),ker=r(SLe," \u2014 "),AO=n(SLe,"A",{href:!0});var zft=s(AO);Ser=r(zft,"TFMT5Model"),zft.forEach(t),Rer=r(SLe," (mT5 model)"),SLe.forEach(t),Ber=i(k),Wv=n(k,"LI",{});var RLe=s(Wv);dpe=n(RLe,"STRONG",{});var Qft=s(dpe);Per=r(Qft,"openai-gpt"),Qft.forEach(t),$er=r(RLe," \u2014 "),yO=n(RLe,"A",{href:!0});var Wft=s(yO);Ier=r(Wft,"TFOpenAIGPTModel"),Wft.forEach(t),qer=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),Ner=i(k),Hv=n(k,"LI",{});var BLe=s(Hv);cpe=n(BLe,"STRONG",{});var Hft=s(cpe);jer=r(Hft,"pegasus"),Hft.forEach(t),Der=r(BLe," \u2014 "),LO=n(BLe,"A",{href:!0});var Uft=s(LO);Ger=r(Uft,"TFPegasusModel"),Uft.forEach(t),Oer=r(BLe," (Pegasus model)"),BLe.forEach(t),Ver=i(k),Uv=n(k,"LI",{});var PLe=s(Uv);fpe=n(PLe,"STRONG",{});var Jft=s(fpe);Xer=r(Jft,"rembert"),Jft.forEach(t),zer=r(PLe," \u2014 "),xO=n(PLe,"A",{href:!0});var Yft=s(xO);Qer=r(Yft,"TFRemBertModel"),Yft.forEach(t),Wer=r(PLe," (RemBERT model)"),PLe.forEach(t),Her=i(k),Jv=n(k,"LI",{});var $Le=s(Jv);mpe=n($Le,"STRONG",{});var Kft=s(mpe);Uer=r(Kft,"roberta"),Kft.forEach(t),Jer=r($Le," \u2014 "),kO=n($Le,"A",{href:!0});var Zft=s(kO);Yer=r(Zft,"TFRobertaModel"),Zft.forEach(t),Ker=r($Le," (RoBERTa model)"),$Le.forEach(t),Zer=i(k),Yv=n(k,"LI",{});var ILe=s(Yv);gpe=n(ILe,"STRONG",{});var emt=s(gpe);eor=r(emt,"roformer"),emt.forEach(t),oor=r(ILe," \u2014 "),SO=n(ILe,"A",{href:!0});var omt=s(SO);ror=r(omt,"TFRoFormerModel"),omt.forEach(t),tor=r(ILe," (RoFormer model)"),ILe.forEach(t),aor=i(k),Kv=n(k,"LI",{});var qLe=s(Kv);hpe=n(qLe,"STRONG",{});var rmt=s(hpe);nor=r(rmt,"speech_to_text"),rmt.forEach(t),sor=r(qLe," \u2014 "),RO=n(qLe,"A",{href:!0});var tmt=s(RO);lor=r(tmt,"TFSpeech2TextModel"),tmt.forEach(t),ior=r(qLe," (Speech2Text model)"),qLe.forEach(t),dor=i(k),Zv=n(k,"LI",{});var NLe=s(Zv);ppe=n(NLe,"STRONG",{});var amt=s(ppe);cor=r(amt,"t5"),amt.forEach(t),mor=r(NLe," \u2014 "),BO=n(NLe,"A",{href:!0});var nmt=s(BO);gor=r(nmt,"TFT5Model"),nmt.forEach(t),hor=r(NLe," (T5 model)"),NLe.forEach(t),por=i(k),e6=n(k,"LI",{});var jLe=s(e6);_pe=n(jLe,"STRONG",{});var smt=s(_pe);_or=r(smt,"tapas"),smt.forEach(t),uor=r(jLe," \u2014 "),PO=n(jLe,"A",{href:!0});var lmt=s(PO);bor=r(lmt,"TFTapasModel"),lmt.forEach(t),For=r(jLe," (TAPAS model)"),jLe.forEach(t),vor=i(k),o6=n(k,"LI",{});var DLe=s(o6);upe=n(DLe,"STRONG",{});var imt=s(upe);Tor=r(imt,"transfo-xl"),imt.forEach(t),Mor=r(DLe," \u2014 "),$O=n(DLe,"A",{href:!0});var dmt=s($O);Eor=r(dmt,"TFTransfoXLModel"),dmt.forEach(t),Cor=r(DLe," (Transformer-XL model)"),DLe.forEach(t),wor=i(k),r6=n(k,"LI",{});var GLe=s(r6);bpe=n(GLe,"STRONG",{});var cmt=s(bpe);Aor=r(cmt,"vit"),cmt.forEach(t),yor=r(GLe," \u2014 "),IO=n(GLe,"A",{href:!0});var fmt=s(IO);Lor=r(fmt,"TFViTModel"),fmt.forEach(t),xor=r(GLe," (ViT model)"),GLe.forEach(t),kor=i(k),t6=n(k,"LI",{});var OLe=s(t6);Fpe=n(OLe,"STRONG",{});var mmt=s(Fpe);Sor=r(mmt,"wav2vec2"),mmt.forEach(t),Ror=r(OLe," \u2014 "),qO=n(OLe,"A",{href:!0});var gmt=s(qO);Bor=r(gmt,"TFWav2Vec2Model"),gmt.forEach(t),Por=r(OLe," (Wav2Vec2 model)"),OLe.forEach(t),$or=i(k),a6=n(k,"LI",{});var VLe=s(a6);vpe=n(VLe,"STRONG",{});var hmt=s(vpe);Ior=r(hmt,"xlm"),hmt.forEach(t),qor=r(VLe," \u2014 "),NO=n(VLe,"A",{href:!0});var pmt=s(NO);Nor=r(pmt,"TFXLMModel"),pmt.forEach(t),jor=r(VLe," (XLM model)"),VLe.forEach(t),Dor=i(k),n6=n(k,"LI",{});var XLe=s(n6);Tpe=n(XLe,"STRONG",{});var _mt=s(Tpe);Gor=r(_mt,"xlm-roberta"),_mt.forEach(t),Oor=r(XLe," \u2014 "),jO=n(XLe,"A",{href:!0});var umt=s(jO);Vor=r(umt,"TFXLMRobertaModel"),umt.forEach(t),Xor=r(XLe," (XLM-RoBERTa model)"),XLe.forEach(t),zor=i(k),s6=n(k,"LI",{});var zLe=s(s6);Mpe=n(zLe,"STRONG",{});var bmt=s(Mpe);Qor=r(bmt,"xlnet"),bmt.forEach(t),Wor=r(zLe," \u2014 "),DO=n(zLe,"A",{href:!0});var Fmt=s(DO);Hor=r(Fmt,"TFXLNetModel"),Fmt.forEach(t),Uor=r(zLe," (XLNet model)"),zLe.forEach(t),k.forEach(t),Jor=i(pa),Epe=n(pa,"P",{});var vmt=s(Epe);Yor=r(vmt,"Examples:"),vmt.forEach(t),Kor=i(pa),m(ZA.$$.fragment,pa),pa.forEach(t),jl.forEach(t),IRe=i(c),_c=n(c,"H2",{class:!0});var QPe=s(_c);l6=n(QPe,"A",{id:!0,class:!0,href:!0});var Tmt=s(l6);Cpe=n(Tmt,"SPAN",{});var Mmt=s(Cpe);m(e0.$$.fragment,Mmt),Mmt.forEach(t),Tmt.forEach(t),Zor=i(QPe),wpe=n(QPe,"SPAN",{});var Emt=s(wpe);err=r(Emt,"TFAutoModelForPreTraining"),Emt.forEach(t),QPe.forEach(t),qRe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(o0.$$.fragment,Gl),orr=i(Gl),uc=n(Gl,"P",{});var GU=s(uc);rrr=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GO=n(GU,"A",{href:!0});var Cmt=s(GO);trr=r(Cmt,"from_pretrained()"),Cmt.forEach(t),arr=r(GU," class method or the "),OO=n(GU,"A",{href:!0});var wmt=s(OO);nrr=r(wmt,"from_config()"),wmt.forEach(t),srr=r(GU,` class
method.`),GU.forEach(t),lrr=i(Gl),r0=n(Gl,"P",{});var WPe=s(r0);irr=r(WPe,"This class cannot be instantiated directly using "),Ape=n(WPe,"CODE",{});var Amt=s(Ape);drr=r(Amt,"__init__()"),Amt.forEach(t),crr=r(WPe," (throws an error)."),WPe.forEach(t),frr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(t0.$$.fragment,Ol),mrr=i(Ol),ype=n(Ol,"P",{});var ymt=s(ype);grr=r(ymt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ymt.forEach(t),hrr=i(Ol),bc=n(Ol,"P",{});var OU=s(bc);prr=r(OU,`Note:
Loading a model from its configuration file does `),Lpe=n(OU,"STRONG",{});var Lmt=s(Lpe);_rr=r(Lmt,"not"),Lmt.forEach(t),urr=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(OU,"A",{href:!0});var xmt=s(VO);brr=r(xmt,"from_pretrained()"),xmt.forEach(t),Frr=r(OU," to load the model weights."),OU.forEach(t),vrr=i(Ol),xpe=n(Ol,"P",{});var kmt=s(xpe);Trr=r(kmt,"Examples:"),kmt.forEach(t),Mrr=i(Ol),m(a0.$$.fragment,Ol),Ol.forEach(t),Err=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(n0.$$.fragment,_a),Crr=i(_a),kpe=n(_a,"P",{});var Smt=s(kpe);wrr=r(Smt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Smt.forEach(t),Arr=i(_a),un=n(_a,"P",{});var VE=s(un);yrr=r(VE,"The model class to instantiate is selected based on the "),Spe=n(VE,"CODE",{});var Rmt=s(Spe);Lrr=r(Rmt,"model_type"),Rmt.forEach(t),xrr=r(VE,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(VE,"CODE",{});var Bmt=s(Rpe);krr=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),Srr=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(VE,"CODE",{});var Pmt=s(Bpe);Rrr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Brr=r(VE,":"),VE.forEach(t),Prr=i(_a),H=n(_a,"UL",{});var U=s(H);i6=n(U,"LI",{});var QLe=s(i6);Ppe=n(QLe,"STRONG",{});var $mt=s(Ppe);$rr=r($mt,"albert"),$mt.forEach(t),Irr=r(QLe," \u2014 "),XO=n(QLe,"A",{href:!0});var Imt=s(XO);qrr=r(Imt,"TFAlbertForPreTraining"),Imt.forEach(t),Nrr=r(QLe," (ALBERT model)"),QLe.forEach(t),jrr=i(U),d6=n(U,"LI",{});var WLe=s(d6);$pe=n(WLe,"STRONG",{});var qmt=s($pe);Drr=r(qmt,"bart"),qmt.forEach(t),Grr=r(WLe," \u2014 "),zO=n(WLe,"A",{href:!0});var Nmt=s(zO);Orr=r(Nmt,"TFBartForConditionalGeneration"),Nmt.forEach(t),Vrr=r(WLe," (BART model)"),WLe.forEach(t),Xrr=i(U),c6=n(U,"LI",{});var HLe=s(c6);Ipe=n(HLe,"STRONG",{});var jmt=s(Ipe);zrr=r(jmt,"bert"),jmt.forEach(t),Qrr=r(HLe," \u2014 "),QO=n(HLe,"A",{href:!0});var Dmt=s(QO);Wrr=r(Dmt,"TFBertForPreTraining"),Dmt.forEach(t),Hrr=r(HLe," (BERT model)"),HLe.forEach(t),Urr=i(U),f6=n(U,"LI",{});var ULe=s(f6);qpe=n(ULe,"STRONG",{});var Gmt=s(qpe);Jrr=r(Gmt,"camembert"),Gmt.forEach(t),Yrr=r(ULe," \u2014 "),WO=n(ULe,"A",{href:!0});var Omt=s(WO);Krr=r(Omt,"TFCamembertForMaskedLM"),Omt.forEach(t),Zrr=r(ULe," (CamemBERT model)"),ULe.forEach(t),etr=i(U),m6=n(U,"LI",{});var JLe=s(m6);Npe=n(JLe,"STRONG",{});var Vmt=s(Npe);otr=r(Vmt,"ctrl"),Vmt.forEach(t),rtr=r(JLe," \u2014 "),HO=n(JLe,"A",{href:!0});var Xmt=s(HO);ttr=r(Xmt,"TFCTRLLMHeadModel"),Xmt.forEach(t),atr=r(JLe," (CTRL model)"),JLe.forEach(t),ntr=i(U),g6=n(U,"LI",{});var YLe=s(g6);jpe=n(YLe,"STRONG",{});var zmt=s(jpe);str=r(zmt,"distilbert"),zmt.forEach(t),ltr=r(YLe," \u2014 "),UO=n(YLe,"A",{href:!0});var Qmt=s(UO);itr=r(Qmt,"TFDistilBertForMaskedLM"),Qmt.forEach(t),dtr=r(YLe," (DistilBERT model)"),YLe.forEach(t),ctr=i(U),h6=n(U,"LI",{});var KLe=s(h6);Dpe=n(KLe,"STRONG",{});var Wmt=s(Dpe);ftr=r(Wmt,"electra"),Wmt.forEach(t),mtr=r(KLe," \u2014 "),JO=n(KLe,"A",{href:!0});var Hmt=s(JO);gtr=r(Hmt,"TFElectraForPreTraining"),Hmt.forEach(t),htr=r(KLe," (ELECTRA model)"),KLe.forEach(t),ptr=i(U),p6=n(U,"LI",{});var ZLe=s(p6);Gpe=n(ZLe,"STRONG",{});var Umt=s(Gpe);_tr=r(Umt,"flaubert"),Umt.forEach(t),utr=r(ZLe," \u2014 "),YO=n(ZLe,"A",{href:!0});var Jmt=s(YO);btr=r(Jmt,"TFFlaubertWithLMHeadModel"),Jmt.forEach(t),Ftr=r(ZLe," (FlauBERT model)"),ZLe.forEach(t),vtr=i(U),_6=n(U,"LI",{});var e8e=s(_6);Ope=n(e8e,"STRONG",{});var Ymt=s(Ope);Ttr=r(Ymt,"funnel"),Ymt.forEach(t),Mtr=r(e8e," \u2014 "),KO=n(e8e,"A",{href:!0});var Kmt=s(KO);Etr=r(Kmt,"TFFunnelForPreTraining"),Kmt.forEach(t),Ctr=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),wtr=i(U),u6=n(U,"LI",{});var o8e=s(u6);Vpe=n(o8e,"STRONG",{});var Zmt=s(Vpe);Atr=r(Zmt,"gpt2"),Zmt.forEach(t),ytr=r(o8e," \u2014 "),ZO=n(o8e,"A",{href:!0});var egt=s(ZO);Ltr=r(egt,"TFGPT2LMHeadModel"),egt.forEach(t),xtr=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),ktr=i(U),b6=n(U,"LI",{});var r8e=s(b6);Xpe=n(r8e,"STRONG",{});var ogt=s(Xpe);Str=r(ogt,"layoutlm"),ogt.forEach(t),Rtr=r(r8e," \u2014 "),eV=n(r8e,"A",{href:!0});var rgt=s(eV);Btr=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Ptr=r(r8e," (LayoutLM model)"),r8e.forEach(t),$tr=i(U),F6=n(U,"LI",{});var t8e=s(F6);zpe=n(t8e,"STRONG",{});var tgt=s(zpe);Itr=r(tgt,"lxmert"),tgt.forEach(t),qtr=r(t8e," \u2014 "),oV=n(t8e,"A",{href:!0});var agt=s(oV);Ntr=r(agt,"TFLxmertForPreTraining"),agt.forEach(t),jtr=r(t8e," (LXMERT model)"),t8e.forEach(t),Dtr=i(U),v6=n(U,"LI",{});var a8e=s(v6);Qpe=n(a8e,"STRONG",{});var ngt=s(Qpe);Gtr=r(ngt,"mobilebert"),ngt.forEach(t),Otr=r(a8e," \u2014 "),rV=n(a8e,"A",{href:!0});var sgt=s(rV);Vtr=r(sgt,"TFMobileBertForPreTraining"),sgt.forEach(t),Xtr=r(a8e," (MobileBERT model)"),a8e.forEach(t),ztr=i(U),T6=n(U,"LI",{});var n8e=s(T6);Wpe=n(n8e,"STRONG",{});var lgt=s(Wpe);Qtr=r(lgt,"mpnet"),lgt.forEach(t),Wtr=r(n8e," \u2014 "),tV=n(n8e,"A",{href:!0});var igt=s(tV);Htr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Utr=r(n8e," (MPNet model)"),n8e.forEach(t),Jtr=i(U),M6=n(U,"LI",{});var s8e=s(M6);Hpe=n(s8e,"STRONG",{});var dgt=s(Hpe);Ytr=r(dgt,"openai-gpt"),dgt.forEach(t),Ktr=r(s8e," \u2014 "),aV=n(s8e,"A",{href:!0});var cgt=s(aV);Ztr=r(cgt,"TFOpenAIGPTLMHeadModel"),cgt.forEach(t),ear=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),oar=i(U),E6=n(U,"LI",{});var l8e=s(E6);Upe=n(l8e,"STRONG",{});var fgt=s(Upe);rar=r(fgt,"roberta"),fgt.forEach(t),tar=r(l8e," \u2014 "),nV=n(l8e,"A",{href:!0});var mgt=s(nV);aar=r(mgt,"TFRobertaForMaskedLM"),mgt.forEach(t),nar=r(l8e," (RoBERTa model)"),l8e.forEach(t),sar=i(U),C6=n(U,"LI",{});var i8e=s(C6);Jpe=n(i8e,"STRONG",{});var ggt=s(Jpe);lar=r(ggt,"t5"),ggt.forEach(t),iar=r(i8e," \u2014 "),sV=n(i8e,"A",{href:!0});var hgt=s(sV);dar=r(hgt,"TFT5ForConditionalGeneration"),hgt.forEach(t),car=r(i8e," (T5 model)"),i8e.forEach(t),far=i(U),w6=n(U,"LI",{});var d8e=s(w6);Ype=n(d8e,"STRONG",{});var pgt=s(Ype);mar=r(pgt,"tapas"),pgt.forEach(t),gar=r(d8e," \u2014 "),lV=n(d8e,"A",{href:!0});var _gt=s(lV);har=r(_gt,"TFTapasForMaskedLM"),_gt.forEach(t),par=r(d8e," (TAPAS model)"),d8e.forEach(t),_ar=i(U),A6=n(U,"LI",{});var c8e=s(A6);Kpe=n(c8e,"STRONG",{});var ugt=s(Kpe);uar=r(ugt,"transfo-xl"),ugt.forEach(t),bar=r(c8e," \u2014 "),iV=n(c8e,"A",{href:!0});var bgt=s(iV);Far=r(bgt,"TFTransfoXLLMHeadModel"),bgt.forEach(t),Tar=r(c8e," (Transformer-XL model)"),c8e.forEach(t),Mar=i(U),y6=n(U,"LI",{});var f8e=s(y6);Zpe=n(f8e,"STRONG",{});var Fgt=s(Zpe);Ear=r(Fgt,"xlm"),Fgt.forEach(t),Car=r(f8e," \u2014 "),dV=n(f8e,"A",{href:!0});var vgt=s(dV);war=r(vgt,"TFXLMWithLMHeadModel"),vgt.forEach(t),Aar=r(f8e," (XLM model)"),f8e.forEach(t),yar=i(U),L6=n(U,"LI",{});var m8e=s(L6);e_e=n(m8e,"STRONG",{});var Tgt=s(e_e);Lar=r(Tgt,"xlm-roberta"),Tgt.forEach(t),xar=r(m8e," \u2014 "),cV=n(m8e,"A",{href:!0});var Mgt=s(cV);kar=r(Mgt,"TFXLMRobertaForMaskedLM"),Mgt.forEach(t),Sar=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),Rar=i(U),x6=n(U,"LI",{});var g8e=s(x6);o_e=n(g8e,"STRONG",{});var Egt=s(o_e);Bar=r(Egt,"xlnet"),Egt.forEach(t),Par=r(g8e," \u2014 "),fV=n(g8e,"A",{href:!0});var Cgt=s(fV);$ar=r(Cgt,"TFXLNetLMHeadModel"),Cgt.forEach(t),Iar=r(g8e," (XLNet model)"),g8e.forEach(t),U.forEach(t),qar=i(_a),r_e=n(_a,"P",{});var wgt=s(r_e);Nar=r(wgt,"Examples:"),wgt.forEach(t),jar=i(_a),m(s0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),NRe=i(c),Fc=n(c,"H2",{class:!0});var HPe=s(Fc);k6=n(HPe,"A",{id:!0,class:!0,href:!0});var Agt=s(k6);t_e=n(Agt,"SPAN",{});var ygt=s(t_e);m(l0.$$.fragment,ygt),ygt.forEach(t),Agt.forEach(t),Dar=i(HPe),a_e=n(HPe,"SPAN",{});var Lgt=s(a_e);Gar=r(Lgt,"TFAutoModelForCausalLM"),Lgt.forEach(t),HPe.forEach(t),jRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(i0.$$.fragment,Vl),Oar=i(Vl),vc=n(Vl,"P",{});var VU=s(vc);Var=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mV=n(VU,"A",{href:!0});var xgt=s(mV);Xar=r(xgt,"from_pretrained()"),xgt.forEach(t),zar=r(VU," class method or the "),gV=n(VU,"A",{href:!0});var kgt=s(gV);Qar=r(kgt,"from_config()"),kgt.forEach(t),War=r(VU,` class
method.`),VU.forEach(t),Har=i(Vl),d0=n(Vl,"P",{});var UPe=s(d0);Uar=r(UPe,"This class cannot be instantiated directly using "),n_e=n(UPe,"CODE",{});var Sgt=s(n_e);Jar=r(Sgt,"__init__()"),Sgt.forEach(t),Yar=r(UPe," (throws an error)."),UPe.forEach(t),Kar=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(c0.$$.fragment,Xl),Zar=i(Xl),s_e=n(Xl,"P",{});var Rgt=s(s_e);enr=r(Rgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt.forEach(t),onr=i(Xl),Tc=n(Xl,"P",{});var XU=s(Tc);rnr=r(XU,`Note:
Loading a model from its configuration file does `),l_e=n(XU,"STRONG",{});var Bgt=s(l_e);tnr=r(Bgt,"not"),Bgt.forEach(t),anr=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(XU,"A",{href:!0});var Pgt=s(hV);nnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),snr=r(XU," to load the model weights."),XU.forEach(t),lnr=i(Xl),i_e=n(Xl,"P",{});var $gt=s(i_e);inr=r($gt,"Examples:"),$gt.forEach(t),dnr=i(Xl),m(f0.$$.fragment,Xl),Xl.forEach(t),cnr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(m0.$$.fragment,ua),fnr=i(ua),d_e=n(ua,"P",{});var Igt=s(d_e);mnr=r(Igt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Igt.forEach(t),gnr=i(ua),bn=n(ua,"P",{});var XE=s(bn);hnr=r(XE,"The model class to instantiate is selected based on the "),c_e=n(XE,"CODE",{});var qgt=s(c_e);pnr=r(qgt,"model_type"),qgt.forEach(t),_nr=r(XE,` property of the config object (either
passed as an argument or loaded from `),f_e=n(XE,"CODE",{});var Ngt=s(f_e);unr=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),bnr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(XE,"CODE",{});var jgt=s(m_e);Fnr=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),vnr=r(XE,":"),XE.forEach(t),Tnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);S6=n(he,"LI",{});var h8e=s(S6);g_e=n(h8e,"STRONG",{});var Dgt=s(g_e);Mnr=r(Dgt,"bert"),Dgt.forEach(t),Enr=r(h8e," \u2014 "),pV=n(h8e,"A",{href:!0});var Ggt=s(pV);Cnr=r(Ggt,"TFBertLMHeadModel"),Ggt.forEach(t),wnr=r(h8e," (BERT model)"),h8e.forEach(t),Anr=i(he),R6=n(he,"LI",{});var p8e=s(R6);h_e=n(p8e,"STRONG",{});var Ogt=s(h_e);ynr=r(Ogt,"camembert"),Ogt.forEach(t),Lnr=r(p8e," \u2014 "),_V=n(p8e,"A",{href:!0});var Vgt=s(_V);xnr=r(Vgt,"TFCamembertForCausalLM"),Vgt.forEach(t),knr=r(p8e," (CamemBERT model)"),p8e.forEach(t),Snr=i(he),B6=n(he,"LI",{});var _8e=s(B6);p_e=n(_8e,"STRONG",{});var Xgt=s(p_e);Rnr=r(Xgt,"ctrl"),Xgt.forEach(t),Bnr=r(_8e," \u2014 "),uV=n(_8e,"A",{href:!0});var zgt=s(uV);Pnr=r(zgt,"TFCTRLLMHeadModel"),zgt.forEach(t),$nr=r(_8e," (CTRL model)"),_8e.forEach(t),Inr=i(he),P6=n(he,"LI",{});var u8e=s(P6);__e=n(u8e,"STRONG",{});var Qgt=s(__e);qnr=r(Qgt,"gpt2"),Qgt.forEach(t),Nnr=r(u8e," \u2014 "),bV=n(u8e,"A",{href:!0});var Wgt=s(bV);jnr=r(Wgt,"TFGPT2LMHeadModel"),Wgt.forEach(t),Dnr=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),Gnr=i(he),$6=n(he,"LI",{});var b8e=s($6);u_e=n(b8e,"STRONG",{});var Hgt=s(u_e);Onr=r(Hgt,"gptj"),Hgt.forEach(t),Vnr=r(b8e," \u2014 "),FV=n(b8e,"A",{href:!0});var Ugt=s(FV);Xnr=r(Ugt,"TFGPTJForCausalLM"),Ugt.forEach(t),znr=r(b8e," (GPT-J model)"),b8e.forEach(t),Qnr=i(he),I6=n(he,"LI",{});var F8e=s(I6);b_e=n(F8e,"STRONG",{});var Jgt=s(b_e);Wnr=r(Jgt,"openai-gpt"),Jgt.forEach(t),Hnr=r(F8e," \u2014 "),vV=n(F8e,"A",{href:!0});var Ygt=s(vV);Unr=r(Ygt,"TFOpenAIGPTLMHeadModel"),Ygt.forEach(t),Jnr=r(F8e," (OpenAI GPT model)"),F8e.forEach(t),Ynr=i(he),q6=n(he,"LI",{});var v8e=s(q6);F_e=n(v8e,"STRONG",{});var Kgt=s(F_e);Knr=r(Kgt,"rembert"),Kgt.forEach(t),Znr=r(v8e," \u2014 "),TV=n(v8e,"A",{href:!0});var Zgt=s(TV);esr=r(Zgt,"TFRemBertForCausalLM"),Zgt.forEach(t),osr=r(v8e," (RemBERT model)"),v8e.forEach(t),rsr=i(he),N6=n(he,"LI",{});var T8e=s(N6);v_e=n(T8e,"STRONG",{});var eht=s(v_e);tsr=r(eht,"roberta"),eht.forEach(t),asr=r(T8e," \u2014 "),MV=n(T8e,"A",{href:!0});var oht=s(MV);nsr=r(oht,"TFRobertaForCausalLM"),oht.forEach(t),ssr=r(T8e," (RoBERTa model)"),T8e.forEach(t),lsr=i(he),j6=n(he,"LI",{});var M8e=s(j6);T_e=n(M8e,"STRONG",{});var rht=s(T_e);isr=r(rht,"roformer"),rht.forEach(t),dsr=r(M8e," \u2014 "),EV=n(M8e,"A",{href:!0});var tht=s(EV);csr=r(tht,"TFRoFormerForCausalLM"),tht.forEach(t),fsr=r(M8e," (RoFormer model)"),M8e.forEach(t),msr=i(he),D6=n(he,"LI",{});var E8e=s(D6);M_e=n(E8e,"STRONG",{});var aht=s(M_e);gsr=r(aht,"transfo-xl"),aht.forEach(t),hsr=r(E8e," \u2014 "),CV=n(E8e,"A",{href:!0});var nht=s(CV);psr=r(nht,"TFTransfoXLLMHeadModel"),nht.forEach(t),_sr=r(E8e," (Transformer-XL model)"),E8e.forEach(t),usr=i(he),G6=n(he,"LI",{});var C8e=s(G6);E_e=n(C8e,"STRONG",{});var sht=s(E_e);bsr=r(sht,"xlm"),sht.forEach(t),Fsr=r(C8e," \u2014 "),wV=n(C8e,"A",{href:!0});var lht=s(wV);vsr=r(lht,"TFXLMWithLMHeadModel"),lht.forEach(t),Tsr=r(C8e," (XLM model)"),C8e.forEach(t),Msr=i(he),O6=n(he,"LI",{});var w8e=s(O6);C_e=n(w8e,"STRONG",{});var iht=s(C_e);Esr=r(iht,"xlnet"),iht.forEach(t),Csr=r(w8e," \u2014 "),AV=n(w8e,"A",{href:!0});var dht=s(AV);wsr=r(dht,"TFXLNetLMHeadModel"),dht.forEach(t),Asr=r(w8e," (XLNet model)"),w8e.forEach(t),he.forEach(t),ysr=i(ua),w_e=n(ua,"P",{});var cht=s(w_e);Lsr=r(cht,"Examples:"),cht.forEach(t),xsr=i(ua),m(g0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),DRe=i(c),Mc=n(c,"H2",{class:!0});var JPe=s(Mc);V6=n(JPe,"A",{id:!0,class:!0,href:!0});var fht=s(V6);A_e=n(fht,"SPAN",{});var mht=s(A_e);m(h0.$$.fragment,mht),mht.forEach(t),fht.forEach(t),ksr=i(JPe),y_e=n(JPe,"SPAN",{});var ght=s(y_e);Ssr=r(ght,"TFAutoModelForImageClassification"),ght.forEach(t),JPe.forEach(t),GRe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(p0.$$.fragment,zl),Rsr=i(zl),Ec=n(zl,"P",{});var zU=s(Ec);Bsr=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yV=n(zU,"A",{href:!0});var hht=s(yV);Psr=r(hht,"from_pretrained()"),hht.forEach(t),$sr=r(zU," class method or the "),LV=n(zU,"A",{href:!0});var pht=s(LV);Isr=r(pht,"from_config()"),pht.forEach(t),qsr=r(zU,` class
method.`),zU.forEach(t),Nsr=i(zl),_0=n(zl,"P",{});var YPe=s(_0);jsr=r(YPe,"This class cannot be instantiated directly using "),L_e=n(YPe,"CODE",{});var _ht=s(L_e);Dsr=r(_ht,"__init__()"),_ht.forEach(t),Gsr=r(YPe," (throws an error)."),YPe.forEach(t),Osr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(u0.$$.fragment,Ql),Vsr=i(Ql),x_e=n(Ql,"P",{});var uht=s(x_e);Xsr=r(uht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uht.forEach(t),zsr=i(Ql),Cc=n(Ql,"P",{});var QU=s(Cc);Qsr=r(QU,`Note:
Loading a model from its configuration file does `),k_e=n(QU,"STRONG",{});var bht=s(k_e);Wsr=r(bht,"not"),bht.forEach(t),Hsr=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(QU,"A",{href:!0});var Fht=s(xV);Usr=r(Fht,"from_pretrained()"),Fht.forEach(t),Jsr=r(QU," to load the model weights."),QU.forEach(t),Ysr=i(Ql),S_e=n(Ql,"P",{});var vht=s(S_e);Ksr=r(vht,"Examples:"),vht.forEach(t),Zsr=i(Ql),m(b0.$$.fragment,Ql),Ql.forEach(t),elr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(F0.$$.fragment,ba),olr=i(ba),R_e=n(ba,"P",{});var Tht=s(R_e);rlr=r(Tht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tht.forEach(t),tlr=i(ba),Fn=n(ba,"P",{});var zE=s(Fn);alr=r(zE,"The model class to instantiate is selected based on the "),B_e=n(zE,"CODE",{});var Mht=s(B_e);nlr=r(Mht,"model_type"),Mht.forEach(t),slr=r(zE,` property of the config object (either
passed as an argument or loaded from `),P_e=n(zE,"CODE",{});var Eht=s(P_e);llr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),ilr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(zE,"CODE",{});var Cht=s($_e);dlr=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),clr=r(zE,":"),zE.forEach(t),flr=i(ba),v0=n(ba,"UL",{});var KPe=s(v0);X6=n(KPe,"LI",{});var A8e=s(X6);I_e=n(A8e,"STRONG",{});var wht=s(I_e);mlr=r(wht,"convnext"),wht.forEach(t),glr=r(A8e," \u2014 "),kV=n(A8e,"A",{href:!0});var Aht=s(kV);hlr=r(Aht,"TFConvNextForImageClassification"),Aht.forEach(t),plr=r(A8e," (ConvNext model)"),A8e.forEach(t),_lr=i(KPe),z6=n(KPe,"LI",{});var y8e=s(z6);q_e=n(y8e,"STRONG",{});var yht=s(q_e);ulr=r(yht,"vit"),yht.forEach(t),blr=r(y8e," \u2014 "),SV=n(y8e,"A",{href:!0});var Lht=s(SV);Flr=r(Lht,"TFViTForImageClassification"),Lht.forEach(t),vlr=r(y8e," (ViT model)"),y8e.forEach(t),KPe.forEach(t),Tlr=i(ba),N_e=n(ba,"P",{});var xht=s(N_e);Mlr=r(xht,"Examples:"),xht.forEach(t),Elr=i(ba),m(T0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),ORe=i(c),wc=n(c,"H2",{class:!0});var ZPe=s(wc);Q6=n(ZPe,"A",{id:!0,class:!0,href:!0});var kht=s(Q6);j_e=n(kht,"SPAN",{});var Sht=s(j_e);m(M0.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),Clr=i(ZPe),D_e=n(ZPe,"SPAN",{});var Rht=s(D_e);wlr=r(Rht,"TFAutoModelForMaskedLM"),Rht.forEach(t),ZPe.forEach(t),VRe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(E0.$$.fragment,Wl),Alr=i(Wl),Ac=n(Wl,"P",{});var WU=s(Ac);ylr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RV=n(WU,"A",{href:!0});var Bht=s(RV);Llr=r(Bht,"from_pretrained()"),Bht.forEach(t),xlr=r(WU," class method or the "),BV=n(WU,"A",{href:!0});var Pht=s(BV);klr=r(Pht,"from_config()"),Pht.forEach(t),Slr=r(WU,` class
method.`),WU.forEach(t),Rlr=i(Wl),C0=n(Wl,"P",{});var e$e=s(C0);Blr=r(e$e,"This class cannot be instantiated directly using "),G_e=n(e$e,"CODE",{});var $ht=s(G_e);Plr=r($ht,"__init__()"),$ht.forEach(t),$lr=r(e$e," (throws an error)."),e$e.forEach(t),Ilr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(w0.$$.fragment,Hl),qlr=i(Hl),O_e=n(Hl,"P",{});var Iht=s(O_e);Nlr=r(Iht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iht.forEach(t),jlr=i(Hl),yc=n(Hl,"P",{});var HU=s(yc);Dlr=r(HU,`Note:
Loading a model from its configuration file does `),V_e=n(HU,"STRONG",{});var qht=s(V_e);Glr=r(qht,"not"),qht.forEach(t),Olr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(HU,"A",{href:!0});var Nht=s(PV);Vlr=r(Nht,"from_pretrained()"),Nht.forEach(t),Xlr=r(HU," to load the model weights."),HU.forEach(t),zlr=i(Hl),X_e=n(Hl,"P",{});var jht=s(X_e);Qlr=r(jht,"Examples:"),jht.forEach(t),Wlr=i(Hl),m(A0.$$.fragment,Hl),Hl.forEach(t),Hlr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(y0.$$.fragment,Fa),Ulr=i(Fa),z_e=n(Fa,"P",{});var Dht=s(z_e);Jlr=r(Dht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dht.forEach(t),Ylr=i(Fa),vn=n(Fa,"P",{});var QE=s(vn);Klr=r(QE,"The model class to instantiate is selected based on the "),Q_e=n(QE,"CODE",{});var Ght=s(Q_e);Zlr=r(Ght,"model_type"),Ght.forEach(t),eir=r(QE,` property of the config object (either
passed as an argument or loaded from `),W_e=n(QE,"CODE",{});var Oht=s(W_e);oir=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),rir=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(QE,"CODE",{});var Vht=s(H_e);tir=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),air=r(QE,":"),QE.forEach(t),nir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);W6=n(ee,"LI",{});var L8e=s(W6);U_e=n(L8e,"STRONG",{});var Xht=s(U_e);sir=r(Xht,"albert"),Xht.forEach(t),lir=r(L8e," \u2014 "),$V=n(L8e,"A",{href:!0});var zht=s($V);iir=r(zht,"TFAlbertForMaskedLM"),zht.forEach(t),dir=r(L8e," (ALBERT model)"),L8e.forEach(t),cir=i(ee),H6=n(ee,"LI",{});var x8e=s(H6);J_e=n(x8e,"STRONG",{});var Qht=s(J_e);fir=r(Qht,"bert"),Qht.forEach(t),mir=r(x8e," \u2014 "),IV=n(x8e,"A",{href:!0});var Wht=s(IV);gir=r(Wht,"TFBertForMaskedLM"),Wht.forEach(t),hir=r(x8e," (BERT model)"),x8e.forEach(t),pir=i(ee),U6=n(ee,"LI",{});var k8e=s(U6);Y_e=n(k8e,"STRONG",{});var Hht=s(Y_e);_ir=r(Hht,"camembert"),Hht.forEach(t),uir=r(k8e," \u2014 "),qV=n(k8e,"A",{href:!0});var Uht=s(qV);bir=r(Uht,"TFCamembertForMaskedLM"),Uht.forEach(t),Fir=r(k8e," (CamemBERT model)"),k8e.forEach(t),vir=i(ee),J6=n(ee,"LI",{});var S8e=s(J6);K_e=n(S8e,"STRONG",{});var Jht=s(K_e);Tir=r(Jht,"convbert"),Jht.forEach(t),Mir=r(S8e," \u2014 "),NV=n(S8e,"A",{href:!0});var Yht=s(NV);Eir=r(Yht,"TFConvBertForMaskedLM"),Yht.forEach(t),Cir=r(S8e," (ConvBERT model)"),S8e.forEach(t),wir=i(ee),Y6=n(ee,"LI",{});var R8e=s(Y6);Z_e=n(R8e,"STRONG",{});var Kht=s(Z_e);Air=r(Kht,"deberta"),Kht.forEach(t),yir=r(R8e," \u2014 "),jV=n(R8e,"A",{href:!0});var Zht=s(jV);Lir=r(Zht,"TFDebertaForMaskedLM"),Zht.forEach(t),xir=r(R8e," (DeBERTa model)"),R8e.forEach(t),kir=i(ee),K6=n(ee,"LI",{});var B8e=s(K6);eue=n(B8e,"STRONG",{});var ept=s(eue);Sir=r(ept,"deberta-v2"),ept.forEach(t),Rir=r(B8e," \u2014 "),DV=n(B8e,"A",{href:!0});var opt=s(DV);Bir=r(opt,"TFDebertaV2ForMaskedLM"),opt.forEach(t),Pir=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),$ir=i(ee),Z6=n(ee,"LI",{});var P8e=s(Z6);oue=n(P8e,"STRONG",{});var rpt=s(oue);Iir=r(rpt,"distilbert"),rpt.forEach(t),qir=r(P8e," \u2014 "),GV=n(P8e,"A",{href:!0});var tpt=s(GV);Nir=r(tpt,"TFDistilBertForMaskedLM"),tpt.forEach(t),jir=r(P8e," (DistilBERT model)"),P8e.forEach(t),Dir=i(ee),eT=n(ee,"LI",{});var $8e=s(eT);rue=n($8e,"STRONG",{});var apt=s(rue);Gir=r(apt,"electra"),apt.forEach(t),Oir=r($8e," \u2014 "),OV=n($8e,"A",{href:!0});var npt=s(OV);Vir=r(npt,"TFElectraForMaskedLM"),npt.forEach(t),Xir=r($8e," (ELECTRA model)"),$8e.forEach(t),zir=i(ee),oT=n(ee,"LI",{});var I8e=s(oT);tue=n(I8e,"STRONG",{});var spt=s(tue);Qir=r(spt,"flaubert"),spt.forEach(t),Wir=r(I8e," \u2014 "),VV=n(I8e,"A",{href:!0});var lpt=s(VV);Hir=r(lpt,"TFFlaubertWithLMHeadModel"),lpt.forEach(t),Uir=r(I8e," (FlauBERT model)"),I8e.forEach(t),Jir=i(ee),rT=n(ee,"LI",{});var q8e=s(rT);aue=n(q8e,"STRONG",{});var ipt=s(aue);Yir=r(ipt,"funnel"),ipt.forEach(t),Kir=r(q8e," \u2014 "),XV=n(q8e,"A",{href:!0});var dpt=s(XV);Zir=r(dpt,"TFFunnelForMaskedLM"),dpt.forEach(t),edr=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),odr=i(ee),tT=n(ee,"LI",{});var N8e=s(tT);nue=n(N8e,"STRONG",{});var cpt=s(nue);rdr=r(cpt,"layoutlm"),cpt.forEach(t),tdr=r(N8e," \u2014 "),zV=n(N8e,"A",{href:!0});var fpt=s(zV);adr=r(fpt,"TFLayoutLMForMaskedLM"),fpt.forEach(t),ndr=r(N8e," (LayoutLM model)"),N8e.forEach(t),sdr=i(ee),aT=n(ee,"LI",{});var j8e=s(aT);sue=n(j8e,"STRONG",{});var mpt=s(sue);ldr=r(mpt,"longformer"),mpt.forEach(t),idr=r(j8e," \u2014 "),QV=n(j8e,"A",{href:!0});var gpt=s(QV);ddr=r(gpt,"TFLongformerForMaskedLM"),gpt.forEach(t),cdr=r(j8e," (Longformer model)"),j8e.forEach(t),fdr=i(ee),nT=n(ee,"LI",{});var D8e=s(nT);lue=n(D8e,"STRONG",{});var hpt=s(lue);mdr=r(hpt,"mobilebert"),hpt.forEach(t),gdr=r(D8e," \u2014 "),WV=n(D8e,"A",{href:!0});var ppt=s(WV);hdr=r(ppt,"TFMobileBertForMaskedLM"),ppt.forEach(t),pdr=r(D8e," (MobileBERT model)"),D8e.forEach(t),_dr=i(ee),sT=n(ee,"LI",{});var G8e=s(sT);iue=n(G8e,"STRONG",{});var _pt=s(iue);udr=r(_pt,"mpnet"),_pt.forEach(t),bdr=r(G8e," \u2014 "),HV=n(G8e,"A",{href:!0});var upt=s(HV);Fdr=r(upt,"TFMPNetForMaskedLM"),upt.forEach(t),vdr=r(G8e," (MPNet model)"),G8e.forEach(t),Tdr=i(ee),lT=n(ee,"LI",{});var O8e=s(lT);due=n(O8e,"STRONG",{});var bpt=s(due);Mdr=r(bpt,"rembert"),bpt.forEach(t),Edr=r(O8e," \u2014 "),UV=n(O8e,"A",{href:!0});var Fpt=s(UV);Cdr=r(Fpt,"TFRemBertForMaskedLM"),Fpt.forEach(t),wdr=r(O8e," (RemBERT model)"),O8e.forEach(t),Adr=i(ee),iT=n(ee,"LI",{});var V8e=s(iT);cue=n(V8e,"STRONG",{});var vpt=s(cue);ydr=r(vpt,"roberta"),vpt.forEach(t),Ldr=r(V8e," \u2014 "),JV=n(V8e,"A",{href:!0});var Tpt=s(JV);xdr=r(Tpt,"TFRobertaForMaskedLM"),Tpt.forEach(t),kdr=r(V8e," (RoBERTa model)"),V8e.forEach(t),Sdr=i(ee),dT=n(ee,"LI",{});var X8e=s(dT);fue=n(X8e,"STRONG",{});var Mpt=s(fue);Rdr=r(Mpt,"roformer"),Mpt.forEach(t),Bdr=r(X8e," \u2014 "),YV=n(X8e,"A",{href:!0});var Ept=s(YV);Pdr=r(Ept,"TFRoFormerForMaskedLM"),Ept.forEach(t),$dr=r(X8e," (RoFormer model)"),X8e.forEach(t),Idr=i(ee),cT=n(ee,"LI",{});var z8e=s(cT);mue=n(z8e,"STRONG",{});var Cpt=s(mue);qdr=r(Cpt,"tapas"),Cpt.forEach(t),Ndr=r(z8e," \u2014 "),KV=n(z8e,"A",{href:!0});var wpt=s(KV);jdr=r(wpt,"TFTapasForMaskedLM"),wpt.forEach(t),Ddr=r(z8e," (TAPAS model)"),z8e.forEach(t),Gdr=i(ee),fT=n(ee,"LI",{});var Q8e=s(fT);gue=n(Q8e,"STRONG",{});var Apt=s(gue);Odr=r(Apt,"xlm"),Apt.forEach(t),Vdr=r(Q8e," \u2014 "),ZV=n(Q8e,"A",{href:!0});var ypt=s(ZV);Xdr=r(ypt,"TFXLMWithLMHeadModel"),ypt.forEach(t),zdr=r(Q8e," (XLM model)"),Q8e.forEach(t),Qdr=i(ee),mT=n(ee,"LI",{});var W8e=s(mT);hue=n(W8e,"STRONG",{});var Lpt=s(hue);Wdr=r(Lpt,"xlm-roberta"),Lpt.forEach(t),Hdr=r(W8e," \u2014 "),eX=n(W8e,"A",{href:!0});var xpt=s(eX);Udr=r(xpt,"TFXLMRobertaForMaskedLM"),xpt.forEach(t),Jdr=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),ee.forEach(t),Ydr=i(Fa),pue=n(Fa,"P",{});var kpt=s(pue);Kdr=r(kpt,"Examples:"),kpt.forEach(t),Zdr=i(Fa),m(L0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),XRe=i(c),Lc=n(c,"H2",{class:!0});var o$e=s(Lc);gT=n(o$e,"A",{id:!0,class:!0,href:!0});var Spt=s(gT);_ue=n(Spt,"SPAN",{});var Rpt=s(_ue);m(x0.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),ecr=i(o$e),uue=n(o$e,"SPAN",{});var Bpt=s(uue);ocr=r(Bpt,"TFAutoModelForSeq2SeqLM"),Bpt.forEach(t),o$e.forEach(t),zRe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(k0.$$.fragment,Ul),rcr=i(Ul),xc=n(Ul,"P",{});var UU=s(xc);tcr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=n(UU,"A",{href:!0});var Ppt=s(oX);acr=r(Ppt,"from_pretrained()"),Ppt.forEach(t),ncr=r(UU," class method or the "),rX=n(UU,"A",{href:!0});var $pt=s(rX);scr=r($pt,"from_config()"),$pt.forEach(t),lcr=r(UU,` class
method.`),UU.forEach(t),icr=i(Ul),S0=n(Ul,"P",{});var r$e=s(S0);dcr=r(r$e,"This class cannot be instantiated directly using "),bue=n(r$e,"CODE",{});var Ipt=s(bue);ccr=r(Ipt,"__init__()"),Ipt.forEach(t),fcr=r(r$e," (throws an error)."),r$e.forEach(t),mcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(R0.$$.fragment,Jl),gcr=i(Jl),Fue=n(Jl,"P",{});var qpt=s(Fue);hcr=r(qpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qpt.forEach(t),pcr=i(Jl),kc=n(Jl,"P",{});var JU=s(kc);_cr=r(JU,`Note:
Loading a model from its configuration file does `),vue=n(JU,"STRONG",{});var Npt=s(vue);ucr=r(Npt,"not"),Npt.forEach(t),bcr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(JU,"A",{href:!0});var jpt=s(tX);Fcr=r(jpt,"from_pretrained()"),jpt.forEach(t),vcr=r(JU," to load the model weights."),JU.forEach(t),Tcr=i(Jl),Tue=n(Jl,"P",{});var Dpt=s(Tue);Mcr=r(Dpt,"Examples:"),Dpt.forEach(t),Ecr=i(Jl),m(B0.$$.fragment,Jl),Jl.forEach(t),Ccr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(P0.$$.fragment,va),wcr=i(va),Mue=n(va,"P",{});var Gpt=s(Mue);Acr=r(Gpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gpt.forEach(t),ycr=i(va),Tn=n(va,"P",{});var WE=s(Tn);Lcr=r(WE,"The model class to instantiate is selected based on the "),Eue=n(WE,"CODE",{});var Opt=s(Eue);xcr=r(Opt,"model_type"),Opt.forEach(t),kcr=r(WE,` property of the config object (either
passed as an argument or loaded from `),Cue=n(WE,"CODE",{});var Vpt=s(Cue);Scr=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Rcr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(WE,"CODE",{});var Xpt=s(wue);Bcr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Pcr=r(WE,":"),WE.forEach(t),$cr=i(va),ue=n(va,"UL",{});var we=s(ue);hT=n(we,"LI",{});var H8e=s(hT);Aue=n(H8e,"STRONG",{});var zpt=s(Aue);Icr=r(zpt,"bart"),zpt.forEach(t),qcr=r(H8e," \u2014 "),aX=n(H8e,"A",{href:!0});var Qpt=s(aX);Ncr=r(Qpt,"TFBartForConditionalGeneration"),Qpt.forEach(t),jcr=r(H8e," (BART model)"),H8e.forEach(t),Dcr=i(we),pT=n(we,"LI",{});var U8e=s(pT);yue=n(U8e,"STRONG",{});var Wpt=s(yue);Gcr=r(Wpt,"blenderbot"),Wpt.forEach(t),Ocr=r(U8e," \u2014 "),nX=n(U8e,"A",{href:!0});var Hpt=s(nX);Vcr=r(Hpt,"TFBlenderbotForConditionalGeneration"),Hpt.forEach(t),Xcr=r(U8e," (Blenderbot model)"),U8e.forEach(t),zcr=i(we),_T=n(we,"LI",{});var J8e=s(_T);Lue=n(J8e,"STRONG",{});var Upt=s(Lue);Qcr=r(Upt,"blenderbot-small"),Upt.forEach(t),Wcr=r(J8e," \u2014 "),sX=n(J8e,"A",{href:!0});var Jpt=s(sX);Hcr=r(Jpt,"TFBlenderbotSmallForConditionalGeneration"),Jpt.forEach(t),Ucr=r(J8e," (BlenderbotSmall model)"),J8e.forEach(t),Jcr=i(we),uT=n(we,"LI",{});var Y8e=s(uT);xue=n(Y8e,"STRONG",{});var Ypt=s(xue);Ycr=r(Ypt,"encoder-decoder"),Ypt.forEach(t),Kcr=r(Y8e," \u2014 "),lX=n(Y8e,"A",{href:!0});var Kpt=s(lX);Zcr=r(Kpt,"TFEncoderDecoderModel"),Kpt.forEach(t),efr=r(Y8e," (Encoder decoder model)"),Y8e.forEach(t),ofr=i(we),bT=n(we,"LI",{});var K8e=s(bT);kue=n(K8e,"STRONG",{});var Zpt=s(kue);rfr=r(Zpt,"led"),Zpt.forEach(t),tfr=r(K8e," \u2014 "),iX=n(K8e,"A",{href:!0});var e_t=s(iX);afr=r(e_t,"TFLEDForConditionalGeneration"),e_t.forEach(t),nfr=r(K8e," (LED model)"),K8e.forEach(t),sfr=i(we),FT=n(we,"LI",{});var Z8e=s(FT);Sue=n(Z8e,"STRONG",{});var o_t=s(Sue);lfr=r(o_t,"marian"),o_t.forEach(t),ifr=r(Z8e," \u2014 "),dX=n(Z8e,"A",{href:!0});var r_t=s(dX);dfr=r(r_t,"TFMarianMTModel"),r_t.forEach(t),cfr=r(Z8e," (Marian model)"),Z8e.forEach(t),ffr=i(we),vT=n(we,"LI",{});var e9e=s(vT);Rue=n(e9e,"STRONG",{});var t_t=s(Rue);mfr=r(t_t,"mbart"),t_t.forEach(t),gfr=r(e9e," \u2014 "),cX=n(e9e,"A",{href:!0});var a_t=s(cX);hfr=r(a_t,"TFMBartForConditionalGeneration"),a_t.forEach(t),pfr=r(e9e," (mBART model)"),e9e.forEach(t),_fr=i(we),TT=n(we,"LI",{});var o9e=s(TT);Bue=n(o9e,"STRONG",{});var n_t=s(Bue);ufr=r(n_t,"mt5"),n_t.forEach(t),bfr=r(o9e," \u2014 "),fX=n(o9e,"A",{href:!0});var s_t=s(fX);Ffr=r(s_t,"TFMT5ForConditionalGeneration"),s_t.forEach(t),vfr=r(o9e," (mT5 model)"),o9e.forEach(t),Tfr=i(we),MT=n(we,"LI",{});var r9e=s(MT);Pue=n(r9e,"STRONG",{});var l_t=s(Pue);Mfr=r(l_t,"pegasus"),l_t.forEach(t),Efr=r(r9e," \u2014 "),mX=n(r9e,"A",{href:!0});var i_t=s(mX);Cfr=r(i_t,"TFPegasusForConditionalGeneration"),i_t.forEach(t),wfr=r(r9e," (Pegasus model)"),r9e.forEach(t),Afr=i(we),ET=n(we,"LI",{});var t9e=s(ET);$ue=n(t9e,"STRONG",{});var d_t=s($ue);yfr=r(d_t,"t5"),d_t.forEach(t),Lfr=r(t9e," \u2014 "),gX=n(t9e,"A",{href:!0});var c_t=s(gX);xfr=r(c_t,"TFT5ForConditionalGeneration"),c_t.forEach(t),kfr=r(t9e," (T5 model)"),t9e.forEach(t),we.forEach(t),Sfr=i(va),Iue=n(va,"P",{});var f_t=s(Iue);Rfr=r(f_t,"Examples:"),f_t.forEach(t),Bfr=i(va),m($0.$$.fragment,va),va.forEach(t),Ul.forEach(t),QRe=i(c),Sc=n(c,"H2",{class:!0});var t$e=s(Sc);CT=n(t$e,"A",{id:!0,class:!0,href:!0});var m_t=s(CT);que=n(m_t,"SPAN",{});var g_t=s(que);m(I0.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),Pfr=i(t$e),Nue=n(t$e,"SPAN",{});var h_t=s(Nue);$fr=r(h_t,"TFAutoModelForSequenceClassification"),h_t.forEach(t),t$e.forEach(t),WRe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(q0.$$.fragment,Yl),Ifr=i(Yl),Rc=n(Yl,"P",{});var YU=s(Rc);qfr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=n(YU,"A",{href:!0});var p_t=s(hX);Nfr=r(p_t,"from_pretrained()"),p_t.forEach(t),jfr=r(YU," class method or the "),pX=n(YU,"A",{href:!0});var __t=s(pX);Dfr=r(__t,"from_config()"),__t.forEach(t),Gfr=r(YU,` class
method.`),YU.forEach(t),Ofr=i(Yl),N0=n(Yl,"P",{});var a$e=s(N0);Vfr=r(a$e,"This class cannot be instantiated directly using "),jue=n(a$e,"CODE",{});var u_t=s(jue);Xfr=r(u_t,"__init__()"),u_t.forEach(t),zfr=r(a$e," (throws an error)."),a$e.forEach(t),Qfr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(j0.$$.fragment,Kl),Wfr=i(Kl),Due=n(Kl,"P",{});var b_t=s(Due);Hfr=r(b_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b_t.forEach(t),Ufr=i(Kl),Bc=n(Kl,"P",{});var KU=s(Bc);Jfr=r(KU,`Note:
Loading a model from its configuration file does `),Gue=n(KU,"STRONG",{});var F_t=s(Gue);Yfr=r(F_t,"not"),F_t.forEach(t),Kfr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(KU,"A",{href:!0});var v_t=s(_X);Zfr=r(v_t,"from_pretrained()"),v_t.forEach(t),emr=r(KU," to load the model weights."),KU.forEach(t),omr=i(Kl),Oue=n(Kl,"P",{});var T_t=s(Oue);rmr=r(T_t,"Examples:"),T_t.forEach(t),tmr=i(Kl),m(D0.$$.fragment,Kl),Kl.forEach(t),amr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(G0.$$.fragment,Ta),nmr=i(Ta),Vue=n(Ta,"P",{});var M_t=s(Vue);smr=r(M_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M_t.forEach(t),lmr=i(Ta),Mn=n(Ta,"P",{});var HE=s(Mn);imr=r(HE,"The model class to instantiate is selected based on the "),Xue=n(HE,"CODE",{});var E_t=s(Xue);dmr=r(E_t,"model_type"),E_t.forEach(t),cmr=r(HE,` property of the config object (either
passed as an argument or loaded from `),zue=n(HE,"CODE",{});var C_t=s(zue);fmr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),mmr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(HE,"CODE",{});var w_t=s(Que);gmr=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),hmr=r(HE,":"),HE.forEach(t),pmr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);wT=n(Q,"LI",{});var a9e=s(wT);Wue=n(a9e,"STRONG",{});var A_t=s(Wue);_mr=r(A_t,"albert"),A_t.forEach(t),umr=r(a9e," \u2014 "),uX=n(a9e,"A",{href:!0});var y_t=s(uX);bmr=r(y_t,"TFAlbertForSequenceClassification"),y_t.forEach(t),Fmr=r(a9e," (ALBERT model)"),a9e.forEach(t),vmr=i(Q),AT=n(Q,"LI",{});var n9e=s(AT);Hue=n(n9e,"STRONG",{});var L_t=s(Hue);Tmr=r(L_t,"bert"),L_t.forEach(t),Mmr=r(n9e," \u2014 "),bX=n(n9e,"A",{href:!0});var x_t=s(bX);Emr=r(x_t,"TFBertForSequenceClassification"),x_t.forEach(t),Cmr=r(n9e," (BERT model)"),n9e.forEach(t),wmr=i(Q),yT=n(Q,"LI",{});var s9e=s(yT);Uue=n(s9e,"STRONG",{});var k_t=s(Uue);Amr=r(k_t,"camembert"),k_t.forEach(t),ymr=r(s9e," \u2014 "),FX=n(s9e,"A",{href:!0});var S_t=s(FX);Lmr=r(S_t,"TFCamembertForSequenceClassification"),S_t.forEach(t),xmr=r(s9e," (CamemBERT model)"),s9e.forEach(t),kmr=i(Q),LT=n(Q,"LI",{});var l9e=s(LT);Jue=n(l9e,"STRONG",{});var R_t=s(Jue);Smr=r(R_t,"convbert"),R_t.forEach(t),Rmr=r(l9e," \u2014 "),vX=n(l9e,"A",{href:!0});var B_t=s(vX);Bmr=r(B_t,"TFConvBertForSequenceClassification"),B_t.forEach(t),Pmr=r(l9e," (ConvBERT model)"),l9e.forEach(t),$mr=i(Q),xT=n(Q,"LI",{});var i9e=s(xT);Yue=n(i9e,"STRONG",{});var P_t=s(Yue);Imr=r(P_t,"ctrl"),P_t.forEach(t),qmr=r(i9e," \u2014 "),TX=n(i9e,"A",{href:!0});var $_t=s(TX);Nmr=r($_t,"TFCTRLForSequenceClassification"),$_t.forEach(t),jmr=r(i9e," (CTRL model)"),i9e.forEach(t),Dmr=i(Q),kT=n(Q,"LI",{});var d9e=s(kT);Kue=n(d9e,"STRONG",{});var I_t=s(Kue);Gmr=r(I_t,"deberta"),I_t.forEach(t),Omr=r(d9e," \u2014 "),MX=n(d9e,"A",{href:!0});var q_t=s(MX);Vmr=r(q_t,"TFDebertaForSequenceClassification"),q_t.forEach(t),Xmr=r(d9e," (DeBERTa model)"),d9e.forEach(t),zmr=i(Q),ST=n(Q,"LI",{});var c9e=s(ST);Zue=n(c9e,"STRONG",{});var N_t=s(Zue);Qmr=r(N_t,"deberta-v2"),N_t.forEach(t),Wmr=r(c9e," \u2014 "),EX=n(c9e,"A",{href:!0});var j_t=s(EX);Hmr=r(j_t,"TFDebertaV2ForSequenceClassification"),j_t.forEach(t),Umr=r(c9e," (DeBERTa-v2 model)"),c9e.forEach(t),Jmr=i(Q),RT=n(Q,"LI",{});var f9e=s(RT);e1e=n(f9e,"STRONG",{});var D_t=s(e1e);Ymr=r(D_t,"distilbert"),D_t.forEach(t),Kmr=r(f9e," \u2014 "),CX=n(f9e,"A",{href:!0});var G_t=s(CX);Zmr=r(G_t,"TFDistilBertForSequenceClassification"),G_t.forEach(t),egr=r(f9e," (DistilBERT model)"),f9e.forEach(t),ogr=i(Q),BT=n(Q,"LI",{});var m9e=s(BT);o1e=n(m9e,"STRONG",{});var O_t=s(o1e);rgr=r(O_t,"electra"),O_t.forEach(t),tgr=r(m9e," \u2014 "),wX=n(m9e,"A",{href:!0});var V_t=s(wX);agr=r(V_t,"TFElectraForSequenceClassification"),V_t.forEach(t),ngr=r(m9e," (ELECTRA model)"),m9e.forEach(t),sgr=i(Q),PT=n(Q,"LI",{});var g9e=s(PT);r1e=n(g9e,"STRONG",{});var X_t=s(r1e);lgr=r(X_t,"flaubert"),X_t.forEach(t),igr=r(g9e," \u2014 "),AX=n(g9e,"A",{href:!0});var z_t=s(AX);dgr=r(z_t,"TFFlaubertForSequenceClassification"),z_t.forEach(t),cgr=r(g9e," (FlauBERT model)"),g9e.forEach(t),fgr=i(Q),$T=n(Q,"LI",{});var h9e=s($T);t1e=n(h9e,"STRONG",{});var Q_t=s(t1e);mgr=r(Q_t,"funnel"),Q_t.forEach(t),ggr=r(h9e," \u2014 "),yX=n(h9e,"A",{href:!0});var W_t=s(yX);hgr=r(W_t,"TFFunnelForSequenceClassification"),W_t.forEach(t),pgr=r(h9e," (Funnel Transformer model)"),h9e.forEach(t),_gr=i(Q),IT=n(Q,"LI",{});var p9e=s(IT);a1e=n(p9e,"STRONG",{});var H_t=s(a1e);ugr=r(H_t,"gpt2"),H_t.forEach(t),bgr=r(p9e," \u2014 "),LX=n(p9e,"A",{href:!0});var U_t=s(LX);Fgr=r(U_t,"TFGPT2ForSequenceClassification"),U_t.forEach(t),vgr=r(p9e," (OpenAI GPT-2 model)"),p9e.forEach(t),Tgr=i(Q),qT=n(Q,"LI",{});var _9e=s(qT);n1e=n(_9e,"STRONG",{});var J_t=s(n1e);Mgr=r(J_t,"gptj"),J_t.forEach(t),Egr=r(_9e," \u2014 "),xX=n(_9e,"A",{href:!0});var Y_t=s(xX);Cgr=r(Y_t,"TFGPTJForSequenceClassification"),Y_t.forEach(t),wgr=r(_9e," (GPT-J model)"),_9e.forEach(t),Agr=i(Q),NT=n(Q,"LI",{});var u9e=s(NT);s1e=n(u9e,"STRONG",{});var K_t=s(s1e);ygr=r(K_t,"layoutlm"),K_t.forEach(t),Lgr=r(u9e," \u2014 "),kX=n(u9e,"A",{href:!0});var Z_t=s(kX);xgr=r(Z_t,"TFLayoutLMForSequenceClassification"),Z_t.forEach(t),kgr=r(u9e," (LayoutLM model)"),u9e.forEach(t),Sgr=i(Q),jT=n(Q,"LI",{});var b9e=s(jT);l1e=n(b9e,"STRONG",{});var eut=s(l1e);Rgr=r(eut,"longformer"),eut.forEach(t),Bgr=r(b9e," \u2014 "),SX=n(b9e,"A",{href:!0});var out=s(SX);Pgr=r(out,"TFLongformerForSequenceClassification"),out.forEach(t),$gr=r(b9e," (Longformer model)"),b9e.forEach(t),Igr=i(Q),DT=n(Q,"LI",{});var F9e=s(DT);i1e=n(F9e,"STRONG",{});var rut=s(i1e);qgr=r(rut,"mobilebert"),rut.forEach(t),Ngr=r(F9e," \u2014 "),RX=n(F9e,"A",{href:!0});var tut=s(RX);jgr=r(tut,"TFMobileBertForSequenceClassification"),tut.forEach(t),Dgr=r(F9e," (MobileBERT model)"),F9e.forEach(t),Ggr=i(Q),GT=n(Q,"LI",{});var v9e=s(GT);d1e=n(v9e,"STRONG",{});var aut=s(d1e);Ogr=r(aut,"mpnet"),aut.forEach(t),Vgr=r(v9e," \u2014 "),BX=n(v9e,"A",{href:!0});var nut=s(BX);Xgr=r(nut,"TFMPNetForSequenceClassification"),nut.forEach(t),zgr=r(v9e," (MPNet model)"),v9e.forEach(t),Qgr=i(Q),OT=n(Q,"LI",{});var T9e=s(OT);c1e=n(T9e,"STRONG",{});var sut=s(c1e);Wgr=r(sut,"openai-gpt"),sut.forEach(t),Hgr=r(T9e," \u2014 "),PX=n(T9e,"A",{href:!0});var lut=s(PX);Ugr=r(lut,"TFOpenAIGPTForSequenceClassification"),lut.forEach(t),Jgr=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),Ygr=i(Q),VT=n(Q,"LI",{});var M9e=s(VT);f1e=n(M9e,"STRONG",{});var iut=s(f1e);Kgr=r(iut,"rembert"),iut.forEach(t),Zgr=r(M9e," \u2014 "),$X=n(M9e,"A",{href:!0});var dut=s($X);ehr=r(dut,"TFRemBertForSequenceClassification"),dut.forEach(t),ohr=r(M9e," (RemBERT model)"),M9e.forEach(t),rhr=i(Q),XT=n(Q,"LI",{});var E9e=s(XT);m1e=n(E9e,"STRONG",{});var cut=s(m1e);thr=r(cut,"roberta"),cut.forEach(t),ahr=r(E9e," \u2014 "),IX=n(E9e,"A",{href:!0});var fut=s(IX);nhr=r(fut,"TFRobertaForSequenceClassification"),fut.forEach(t),shr=r(E9e," (RoBERTa model)"),E9e.forEach(t),lhr=i(Q),zT=n(Q,"LI",{});var C9e=s(zT);g1e=n(C9e,"STRONG",{});var mut=s(g1e);ihr=r(mut,"roformer"),mut.forEach(t),dhr=r(C9e," \u2014 "),qX=n(C9e,"A",{href:!0});var gut=s(qX);chr=r(gut,"TFRoFormerForSequenceClassification"),gut.forEach(t),fhr=r(C9e," (RoFormer model)"),C9e.forEach(t),mhr=i(Q),QT=n(Q,"LI",{});var w9e=s(QT);h1e=n(w9e,"STRONG",{});var hut=s(h1e);ghr=r(hut,"tapas"),hut.forEach(t),hhr=r(w9e," \u2014 "),NX=n(w9e,"A",{href:!0});var put=s(NX);phr=r(put,"TFTapasForSequenceClassification"),put.forEach(t),_hr=r(w9e," (TAPAS model)"),w9e.forEach(t),uhr=i(Q),WT=n(Q,"LI",{});var A9e=s(WT);p1e=n(A9e,"STRONG",{});var _ut=s(p1e);bhr=r(_ut,"transfo-xl"),_ut.forEach(t),Fhr=r(A9e," \u2014 "),jX=n(A9e,"A",{href:!0});var uut=s(jX);vhr=r(uut,"TFTransfoXLForSequenceClassification"),uut.forEach(t),Thr=r(A9e," (Transformer-XL model)"),A9e.forEach(t),Mhr=i(Q),HT=n(Q,"LI",{});var y9e=s(HT);_1e=n(y9e,"STRONG",{});var but=s(_1e);Ehr=r(but,"xlm"),but.forEach(t),Chr=r(y9e," \u2014 "),DX=n(y9e,"A",{href:!0});var Fut=s(DX);whr=r(Fut,"TFXLMForSequenceClassification"),Fut.forEach(t),Ahr=r(y9e," (XLM model)"),y9e.forEach(t),yhr=i(Q),UT=n(Q,"LI",{});var L9e=s(UT);u1e=n(L9e,"STRONG",{});var vut=s(u1e);Lhr=r(vut,"xlm-roberta"),vut.forEach(t),xhr=r(L9e," \u2014 "),GX=n(L9e,"A",{href:!0});var Tut=s(GX);khr=r(Tut,"TFXLMRobertaForSequenceClassification"),Tut.forEach(t),Shr=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),Rhr=i(Q),JT=n(Q,"LI",{});var x9e=s(JT);b1e=n(x9e,"STRONG",{});var Mut=s(b1e);Bhr=r(Mut,"xlnet"),Mut.forEach(t),Phr=r(x9e," \u2014 "),OX=n(x9e,"A",{href:!0});var Eut=s(OX);$hr=r(Eut,"TFXLNetForSequenceClassification"),Eut.forEach(t),Ihr=r(x9e," (XLNet model)"),x9e.forEach(t),Q.forEach(t),qhr=i(Ta),F1e=n(Ta,"P",{});var Cut=s(F1e);Nhr=r(Cut,"Examples:"),Cut.forEach(t),jhr=i(Ta),m(O0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),HRe=i(c),Pc=n(c,"H2",{class:!0});var n$e=s(Pc);YT=n(n$e,"A",{id:!0,class:!0,href:!0});var wut=s(YT);v1e=n(wut,"SPAN",{});var Aut=s(v1e);m(V0.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),Dhr=i(n$e),T1e=n(n$e,"SPAN",{});var yut=s(T1e);Ghr=r(yut,"TFAutoModelForMultipleChoice"),yut.forEach(t),n$e.forEach(t),URe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(X0.$$.fragment,Zl),Ohr=i(Zl),$c=n(Zl,"P",{});var ZU=s($c);Vhr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=n(ZU,"A",{href:!0});var Lut=s(VX);Xhr=r(Lut,"from_pretrained()"),Lut.forEach(t),zhr=r(ZU," class method or the "),XX=n(ZU,"A",{href:!0});var xut=s(XX);Qhr=r(xut,"from_config()"),xut.forEach(t),Whr=r(ZU,` class
method.`),ZU.forEach(t),Hhr=i(Zl),z0=n(Zl,"P",{});var s$e=s(z0);Uhr=r(s$e,"This class cannot be instantiated directly using "),M1e=n(s$e,"CODE",{});var kut=s(M1e);Jhr=r(kut,"__init__()"),kut.forEach(t),Yhr=r(s$e," (throws an error)."),s$e.forEach(t),Khr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(Q0.$$.fragment,ei),Zhr=i(ei),E1e=n(ei,"P",{});var Sut=s(E1e);epr=r(Sut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sut.forEach(t),opr=i(ei),Ic=n(ei,"P",{});var eJ=s(Ic);rpr=r(eJ,`Note:
Loading a model from its configuration file does `),C1e=n(eJ,"STRONG",{});var Rut=s(C1e);tpr=r(Rut,"not"),Rut.forEach(t),apr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(eJ,"A",{href:!0});var But=s(zX);npr=r(But,"from_pretrained()"),But.forEach(t),spr=r(eJ," to load the model weights."),eJ.forEach(t),lpr=i(ei),w1e=n(ei,"P",{});var Put=s(w1e);ipr=r(Put,"Examples:"),Put.forEach(t),dpr=i(ei),m(W0.$$.fragment,ei),ei.forEach(t),cpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(H0.$$.fragment,Ma),fpr=i(Ma),A1e=n(Ma,"P",{});var $ut=s(A1e);mpr=r($ut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$ut.forEach(t),gpr=i(Ma),En=n(Ma,"P",{});var UE=s(En);hpr=r(UE,"The model class to instantiate is selected based on the "),y1e=n(UE,"CODE",{});var Iut=s(y1e);ppr=r(Iut,"model_type"),Iut.forEach(t),_pr=r(UE,` property of the config object (either
passed as an argument or loaded from `),L1e=n(UE,"CODE",{});var qut=s(L1e);upr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),bpr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(UE,"CODE",{});var Nut=s(x1e);Fpr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),vpr=r(UE,":"),UE.forEach(t),Tpr=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);KT=n(le,"LI",{});var k9e=s(KT);k1e=n(k9e,"STRONG",{});var jut=s(k1e);Mpr=r(jut,"albert"),jut.forEach(t),Epr=r(k9e," \u2014 "),QX=n(k9e,"A",{href:!0});var Dut=s(QX);Cpr=r(Dut,"TFAlbertForMultipleChoice"),Dut.forEach(t),wpr=r(k9e," (ALBERT model)"),k9e.forEach(t),Apr=i(le),ZT=n(le,"LI",{});var S9e=s(ZT);S1e=n(S9e,"STRONG",{});var Gut=s(S1e);ypr=r(Gut,"bert"),Gut.forEach(t),Lpr=r(S9e," \u2014 "),WX=n(S9e,"A",{href:!0});var Out=s(WX);xpr=r(Out,"TFBertForMultipleChoice"),Out.forEach(t),kpr=r(S9e," (BERT model)"),S9e.forEach(t),Spr=i(le),e7=n(le,"LI",{});var R9e=s(e7);R1e=n(R9e,"STRONG",{});var Vut=s(R1e);Rpr=r(Vut,"camembert"),Vut.forEach(t),Bpr=r(R9e," \u2014 "),HX=n(R9e,"A",{href:!0});var Xut=s(HX);Ppr=r(Xut,"TFCamembertForMultipleChoice"),Xut.forEach(t),$pr=r(R9e," (CamemBERT model)"),R9e.forEach(t),Ipr=i(le),o7=n(le,"LI",{});var B9e=s(o7);B1e=n(B9e,"STRONG",{});var zut=s(B1e);qpr=r(zut,"convbert"),zut.forEach(t),Npr=r(B9e," \u2014 "),UX=n(B9e,"A",{href:!0});var Qut=s(UX);jpr=r(Qut,"TFConvBertForMultipleChoice"),Qut.forEach(t),Dpr=r(B9e," (ConvBERT model)"),B9e.forEach(t),Gpr=i(le),r7=n(le,"LI",{});var P9e=s(r7);P1e=n(P9e,"STRONG",{});var Wut=s(P1e);Opr=r(Wut,"distilbert"),Wut.forEach(t),Vpr=r(P9e," \u2014 "),JX=n(P9e,"A",{href:!0});var Hut=s(JX);Xpr=r(Hut,"TFDistilBertForMultipleChoice"),Hut.forEach(t),zpr=r(P9e," (DistilBERT model)"),P9e.forEach(t),Qpr=i(le),t7=n(le,"LI",{});var $9e=s(t7);$1e=n($9e,"STRONG",{});var Uut=s($1e);Wpr=r(Uut,"electra"),Uut.forEach(t),Hpr=r($9e," \u2014 "),YX=n($9e,"A",{href:!0});var Jut=s(YX);Upr=r(Jut,"TFElectraForMultipleChoice"),Jut.forEach(t),Jpr=r($9e," (ELECTRA model)"),$9e.forEach(t),Ypr=i(le),a7=n(le,"LI",{});var I9e=s(a7);I1e=n(I9e,"STRONG",{});var Yut=s(I1e);Kpr=r(Yut,"flaubert"),Yut.forEach(t),Zpr=r(I9e," \u2014 "),KX=n(I9e,"A",{href:!0});var Kut=s(KX);e_r=r(Kut,"TFFlaubertForMultipleChoice"),Kut.forEach(t),o_r=r(I9e," (FlauBERT model)"),I9e.forEach(t),r_r=i(le),n7=n(le,"LI",{});var q9e=s(n7);q1e=n(q9e,"STRONG",{});var Zut=s(q1e);t_r=r(Zut,"funnel"),Zut.forEach(t),a_r=r(q9e," \u2014 "),ZX=n(q9e,"A",{href:!0});var e1t=s(ZX);n_r=r(e1t,"TFFunnelForMultipleChoice"),e1t.forEach(t),s_r=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),l_r=i(le),s7=n(le,"LI",{});var N9e=s(s7);N1e=n(N9e,"STRONG",{});var o1t=s(N1e);i_r=r(o1t,"longformer"),o1t.forEach(t),d_r=r(N9e," \u2014 "),ez=n(N9e,"A",{href:!0});var r1t=s(ez);c_r=r(r1t,"TFLongformerForMultipleChoice"),r1t.forEach(t),f_r=r(N9e," (Longformer model)"),N9e.forEach(t),m_r=i(le),l7=n(le,"LI",{});var j9e=s(l7);j1e=n(j9e,"STRONG",{});var t1t=s(j1e);g_r=r(t1t,"mobilebert"),t1t.forEach(t),h_r=r(j9e," \u2014 "),oz=n(j9e,"A",{href:!0});var a1t=s(oz);p_r=r(a1t,"TFMobileBertForMultipleChoice"),a1t.forEach(t),__r=r(j9e," (MobileBERT model)"),j9e.forEach(t),u_r=i(le),i7=n(le,"LI",{});var D9e=s(i7);D1e=n(D9e,"STRONG",{});var n1t=s(D1e);b_r=r(n1t,"mpnet"),n1t.forEach(t),F_r=r(D9e," \u2014 "),rz=n(D9e,"A",{href:!0});var s1t=s(rz);v_r=r(s1t,"TFMPNetForMultipleChoice"),s1t.forEach(t),T_r=r(D9e," (MPNet model)"),D9e.forEach(t),M_r=i(le),d7=n(le,"LI",{});var G9e=s(d7);G1e=n(G9e,"STRONG",{});var l1t=s(G1e);E_r=r(l1t,"rembert"),l1t.forEach(t),C_r=r(G9e," \u2014 "),tz=n(G9e,"A",{href:!0});var i1t=s(tz);w_r=r(i1t,"TFRemBertForMultipleChoice"),i1t.forEach(t),A_r=r(G9e," (RemBERT model)"),G9e.forEach(t),y_r=i(le),c7=n(le,"LI",{});var O9e=s(c7);O1e=n(O9e,"STRONG",{});var d1t=s(O1e);L_r=r(d1t,"roberta"),d1t.forEach(t),x_r=r(O9e," \u2014 "),az=n(O9e,"A",{href:!0});var c1t=s(az);k_r=r(c1t,"TFRobertaForMultipleChoice"),c1t.forEach(t),S_r=r(O9e," (RoBERTa model)"),O9e.forEach(t),R_r=i(le),f7=n(le,"LI",{});var V9e=s(f7);V1e=n(V9e,"STRONG",{});var f1t=s(V1e);B_r=r(f1t,"roformer"),f1t.forEach(t),P_r=r(V9e," \u2014 "),nz=n(V9e,"A",{href:!0});var m1t=s(nz);$_r=r(m1t,"TFRoFormerForMultipleChoice"),m1t.forEach(t),I_r=r(V9e," (RoFormer model)"),V9e.forEach(t),q_r=i(le),m7=n(le,"LI",{});var X9e=s(m7);X1e=n(X9e,"STRONG",{});var g1t=s(X1e);N_r=r(g1t,"xlm"),g1t.forEach(t),j_r=r(X9e," \u2014 "),sz=n(X9e,"A",{href:!0});var h1t=s(sz);D_r=r(h1t,"TFXLMForMultipleChoice"),h1t.forEach(t),G_r=r(X9e," (XLM model)"),X9e.forEach(t),O_r=i(le),g7=n(le,"LI",{});var z9e=s(g7);z1e=n(z9e,"STRONG",{});var p1t=s(z1e);V_r=r(p1t,"xlm-roberta"),p1t.forEach(t),X_r=r(z9e," \u2014 "),lz=n(z9e,"A",{href:!0});var _1t=s(lz);z_r=r(_1t,"TFXLMRobertaForMultipleChoice"),_1t.forEach(t),Q_r=r(z9e," (XLM-RoBERTa model)"),z9e.forEach(t),W_r=i(le),h7=n(le,"LI",{});var Q9e=s(h7);Q1e=n(Q9e,"STRONG",{});var u1t=s(Q1e);H_r=r(u1t,"xlnet"),u1t.forEach(t),U_r=r(Q9e," \u2014 "),iz=n(Q9e,"A",{href:!0});var b1t=s(iz);J_r=r(b1t,"TFXLNetForMultipleChoice"),b1t.forEach(t),Y_r=r(Q9e," (XLNet model)"),Q9e.forEach(t),le.forEach(t),K_r=i(Ma),W1e=n(Ma,"P",{});var F1t=s(W1e);Z_r=r(F1t,"Examples:"),F1t.forEach(t),eur=i(Ma),m(U0.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),JRe=i(c),qc=n(c,"H2",{class:!0});var l$e=s(qc);p7=n(l$e,"A",{id:!0,class:!0,href:!0});var v1t=s(p7);H1e=n(v1t,"SPAN",{});var T1t=s(H1e);m(J0.$$.fragment,T1t),T1t.forEach(t),v1t.forEach(t),our=i(l$e),U1e=n(l$e,"SPAN",{});var M1t=s(U1e);rur=r(M1t,"TFAutoModelForTableQuestionAnswering"),M1t.forEach(t),l$e.forEach(t),YRe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(Y0.$$.fragment,oi),tur=i(oi),Nc=n(oi,"P",{});var oJ=s(Nc);aur=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=n(oJ,"A",{href:!0});var E1t=s(dz);nur=r(E1t,"from_pretrained()"),E1t.forEach(t),sur=r(oJ," class method or the "),cz=n(oJ,"A",{href:!0});var C1t=s(cz);lur=r(C1t,"from_config()"),C1t.forEach(t),iur=r(oJ,` class
method.`),oJ.forEach(t),dur=i(oi),K0=n(oi,"P",{});var i$e=s(K0);cur=r(i$e,"This class cannot be instantiated directly using "),J1e=n(i$e,"CODE",{});var w1t=s(J1e);fur=r(w1t,"__init__()"),w1t.forEach(t),mur=r(i$e," (throws an error)."),i$e.forEach(t),gur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(Z0.$$.fragment,ri),hur=i(ri),Y1e=n(ri,"P",{});var A1t=s(Y1e);pur=r(A1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A1t.forEach(t),_ur=i(ri),jc=n(ri,"P",{});var rJ=s(jc);uur=r(rJ,`Note:
Loading a model from its configuration file does `),K1e=n(rJ,"STRONG",{});var y1t=s(K1e);bur=r(y1t,"not"),y1t.forEach(t),Fur=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(rJ,"A",{href:!0});var L1t=s(fz);vur=r(L1t,"from_pretrained()"),L1t.forEach(t),Tur=r(rJ," to load the model weights."),rJ.forEach(t),Mur=i(ri),Z1e=n(ri,"P",{});var x1t=s(Z1e);Eur=r(x1t,"Examples:"),x1t.forEach(t),Cur=i(ri),m(ey.$$.fragment,ri),ri.forEach(t),wur=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(oy.$$.fragment,Ea),Aur=i(Ea),ebe=n(Ea,"P",{});var k1t=s(ebe);yur=r(k1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),k1t.forEach(t),Lur=i(Ea),Cn=n(Ea,"P",{});var JE=s(Cn);xur=r(JE,"The model class to instantiate is selected based on the "),obe=n(JE,"CODE",{});var S1t=s(obe);kur=r(S1t,"model_type"),S1t.forEach(t),Sur=r(JE,` property of the config object (either
passed as an argument or loaded from `),rbe=n(JE,"CODE",{});var R1t=s(rbe);Rur=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Bur=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(JE,"CODE",{});var B1t=s(tbe);Pur=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),$ur=r(JE,":"),JE.forEach(t),Iur=i(Ea),abe=n(Ea,"UL",{});var P1t=s(abe);_7=n(P1t,"LI",{});var W9e=s(_7);nbe=n(W9e,"STRONG",{});var $1t=s(nbe);qur=r($1t,"tapas"),$1t.forEach(t),Nur=r(W9e," \u2014 "),mz=n(W9e,"A",{href:!0});var I1t=s(mz);jur=r(I1t,"TFTapasForQuestionAnswering"),I1t.forEach(t),Dur=r(W9e," (TAPAS model)"),W9e.forEach(t),P1t.forEach(t),Gur=i(Ea),sbe=n(Ea,"P",{});var q1t=s(sbe);Our=r(q1t,"Examples:"),q1t.forEach(t),Vur=i(Ea),m(ry.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),KRe=i(c),Dc=n(c,"H2",{class:!0});var d$e=s(Dc);u7=n(d$e,"A",{id:!0,class:!0,href:!0});var N1t=s(u7);lbe=n(N1t,"SPAN",{});var j1t=s(lbe);m(ty.$$.fragment,j1t),j1t.forEach(t),N1t.forEach(t),Xur=i(d$e),ibe=n(d$e,"SPAN",{});var D1t=s(ibe);zur=r(D1t,"TFAutoModelForTokenClassification"),D1t.forEach(t),d$e.forEach(t),ZRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(ay.$$.fragment,ti),Qur=i(ti),Gc=n(ti,"P",{});var tJ=s(Gc);Wur=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gz=n(tJ,"A",{href:!0});var G1t=s(gz);Hur=r(G1t,"from_pretrained()"),G1t.forEach(t),Uur=r(tJ," class method or the "),hz=n(tJ,"A",{href:!0});var O1t=s(hz);Jur=r(O1t,"from_config()"),O1t.forEach(t),Yur=r(tJ,` class
method.`),tJ.forEach(t),Kur=i(ti),ny=n(ti,"P",{});var c$e=s(ny);Zur=r(c$e,"This class cannot be instantiated directly using "),dbe=n(c$e,"CODE",{});var V1t=s(dbe);e1r=r(V1t,"__init__()"),V1t.forEach(t),o1r=r(c$e," (throws an error)."),c$e.forEach(t),r1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(sy.$$.fragment,ai),t1r=i(ai),cbe=n(ai,"P",{});var X1t=s(cbe);a1r=r(X1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X1t.forEach(t),n1r=i(ai),Oc=n(ai,"P",{});var aJ=s(Oc);s1r=r(aJ,`Note:
Loading a model from its configuration file does `),fbe=n(aJ,"STRONG",{});var z1t=s(fbe);l1r=r(z1t,"not"),z1t.forEach(t),i1r=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(aJ,"A",{href:!0});var Q1t=s(pz);d1r=r(Q1t,"from_pretrained()"),Q1t.forEach(t),c1r=r(aJ," to load the model weights."),aJ.forEach(t),f1r=i(ai),mbe=n(ai,"P",{});var W1t=s(mbe);m1r=r(W1t,"Examples:"),W1t.forEach(t),g1r=i(ai),m(ly.$$.fragment,ai),ai.forEach(t),h1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(iy.$$.fragment,Ca),p1r=i(Ca),gbe=n(Ca,"P",{});var H1t=s(gbe);_1r=r(H1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H1t.forEach(t),u1r=i(Ca),wn=n(Ca,"P",{});var YE=s(wn);b1r=r(YE,"The model class to instantiate is selected based on the "),hbe=n(YE,"CODE",{});var U1t=s(hbe);F1r=r(U1t,"model_type"),U1t.forEach(t),v1r=r(YE,` property of the config object (either
passed as an argument or loaded from `),pbe=n(YE,"CODE",{});var J1t=s(pbe);T1r=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),M1r=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(YE,"CODE",{});var Y1t=s(_be);E1r=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),C1r=r(YE,":"),YE.forEach(t),w1r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);b7=n(oe,"LI",{});var H9e=s(b7);ube=n(H9e,"STRONG",{});var K1t=s(ube);A1r=r(K1t,"albert"),K1t.forEach(t),y1r=r(H9e," \u2014 "),_z=n(H9e,"A",{href:!0});var Z1t=s(_z);L1r=r(Z1t,"TFAlbertForTokenClassification"),Z1t.forEach(t),x1r=r(H9e," (ALBERT model)"),H9e.forEach(t),k1r=i(oe),F7=n(oe,"LI",{});var U9e=s(F7);bbe=n(U9e,"STRONG",{});var ebt=s(bbe);S1r=r(ebt,"bert"),ebt.forEach(t),R1r=r(U9e," \u2014 "),uz=n(U9e,"A",{href:!0});var obt=s(uz);B1r=r(obt,"TFBertForTokenClassification"),obt.forEach(t),P1r=r(U9e," (BERT model)"),U9e.forEach(t),$1r=i(oe),v7=n(oe,"LI",{});var J9e=s(v7);Fbe=n(J9e,"STRONG",{});var rbt=s(Fbe);I1r=r(rbt,"camembert"),rbt.forEach(t),q1r=r(J9e," \u2014 "),bz=n(J9e,"A",{href:!0});var tbt=s(bz);N1r=r(tbt,"TFCamembertForTokenClassification"),tbt.forEach(t),j1r=r(J9e," (CamemBERT model)"),J9e.forEach(t),D1r=i(oe),T7=n(oe,"LI",{});var Y9e=s(T7);vbe=n(Y9e,"STRONG",{});var abt=s(vbe);G1r=r(abt,"convbert"),abt.forEach(t),O1r=r(Y9e," \u2014 "),Fz=n(Y9e,"A",{href:!0});var nbt=s(Fz);V1r=r(nbt,"TFConvBertForTokenClassification"),nbt.forEach(t),X1r=r(Y9e," (ConvBERT model)"),Y9e.forEach(t),z1r=i(oe),M7=n(oe,"LI",{});var K9e=s(M7);Tbe=n(K9e,"STRONG",{});var sbt=s(Tbe);Q1r=r(sbt,"deberta"),sbt.forEach(t),W1r=r(K9e," \u2014 "),vz=n(K9e,"A",{href:!0});var lbt=s(vz);H1r=r(lbt,"TFDebertaForTokenClassification"),lbt.forEach(t),U1r=r(K9e," (DeBERTa model)"),K9e.forEach(t),J1r=i(oe),E7=n(oe,"LI",{});var Z9e=s(E7);Mbe=n(Z9e,"STRONG",{});var ibt=s(Mbe);Y1r=r(ibt,"deberta-v2"),ibt.forEach(t),K1r=r(Z9e," \u2014 "),Tz=n(Z9e,"A",{href:!0});var dbt=s(Tz);Z1r=r(dbt,"TFDebertaV2ForTokenClassification"),dbt.forEach(t),ebr=r(Z9e," (DeBERTa-v2 model)"),Z9e.forEach(t),obr=i(oe),C7=n(oe,"LI",{});var exe=s(C7);Ebe=n(exe,"STRONG",{});var cbt=s(Ebe);rbr=r(cbt,"distilbert"),cbt.forEach(t),tbr=r(exe," \u2014 "),Mz=n(exe,"A",{href:!0});var fbt=s(Mz);abr=r(fbt,"TFDistilBertForTokenClassification"),fbt.forEach(t),nbr=r(exe," (DistilBERT model)"),exe.forEach(t),sbr=i(oe),w7=n(oe,"LI",{});var oxe=s(w7);Cbe=n(oxe,"STRONG",{});var mbt=s(Cbe);lbr=r(mbt,"electra"),mbt.forEach(t),ibr=r(oxe," \u2014 "),Ez=n(oxe,"A",{href:!0});var gbt=s(Ez);dbr=r(gbt,"TFElectraForTokenClassification"),gbt.forEach(t),cbr=r(oxe," (ELECTRA model)"),oxe.forEach(t),fbr=i(oe),A7=n(oe,"LI",{});var rxe=s(A7);wbe=n(rxe,"STRONG",{});var hbt=s(wbe);mbr=r(hbt,"flaubert"),hbt.forEach(t),gbr=r(rxe," \u2014 "),Cz=n(rxe,"A",{href:!0});var pbt=s(Cz);hbr=r(pbt,"TFFlaubertForTokenClassification"),pbt.forEach(t),pbr=r(rxe," (FlauBERT model)"),rxe.forEach(t),_br=i(oe),y7=n(oe,"LI",{});var txe=s(y7);Abe=n(txe,"STRONG",{});var _bt=s(Abe);ubr=r(_bt,"funnel"),_bt.forEach(t),bbr=r(txe," \u2014 "),wz=n(txe,"A",{href:!0});var ubt=s(wz);Fbr=r(ubt,"TFFunnelForTokenClassification"),ubt.forEach(t),vbr=r(txe," (Funnel Transformer model)"),txe.forEach(t),Tbr=i(oe),L7=n(oe,"LI",{});var axe=s(L7);ybe=n(axe,"STRONG",{});var bbt=s(ybe);Mbr=r(bbt,"layoutlm"),bbt.forEach(t),Ebr=r(axe," \u2014 "),Az=n(axe,"A",{href:!0});var Fbt=s(Az);Cbr=r(Fbt,"TFLayoutLMForTokenClassification"),Fbt.forEach(t),wbr=r(axe," (LayoutLM model)"),axe.forEach(t),Abr=i(oe),x7=n(oe,"LI",{});var nxe=s(x7);Lbe=n(nxe,"STRONG",{});var vbt=s(Lbe);ybr=r(vbt,"longformer"),vbt.forEach(t),Lbr=r(nxe," \u2014 "),yz=n(nxe,"A",{href:!0});var Tbt=s(yz);xbr=r(Tbt,"TFLongformerForTokenClassification"),Tbt.forEach(t),kbr=r(nxe," (Longformer model)"),nxe.forEach(t),Sbr=i(oe),k7=n(oe,"LI",{});var sxe=s(k7);xbe=n(sxe,"STRONG",{});var Mbt=s(xbe);Rbr=r(Mbt,"mobilebert"),Mbt.forEach(t),Bbr=r(sxe," \u2014 "),Lz=n(sxe,"A",{href:!0});var Ebt=s(Lz);Pbr=r(Ebt,"TFMobileBertForTokenClassification"),Ebt.forEach(t),$br=r(sxe," (MobileBERT model)"),sxe.forEach(t),Ibr=i(oe),S7=n(oe,"LI",{});var lxe=s(S7);kbe=n(lxe,"STRONG",{});var Cbt=s(kbe);qbr=r(Cbt,"mpnet"),Cbt.forEach(t),Nbr=r(lxe," \u2014 "),xz=n(lxe,"A",{href:!0});var wbt=s(xz);jbr=r(wbt,"TFMPNetForTokenClassification"),wbt.forEach(t),Dbr=r(lxe," (MPNet model)"),lxe.forEach(t),Gbr=i(oe),R7=n(oe,"LI",{});var ixe=s(R7);Sbe=n(ixe,"STRONG",{});var Abt=s(Sbe);Obr=r(Abt,"rembert"),Abt.forEach(t),Vbr=r(ixe," \u2014 "),kz=n(ixe,"A",{href:!0});var ybt=s(kz);Xbr=r(ybt,"TFRemBertForTokenClassification"),ybt.forEach(t),zbr=r(ixe," (RemBERT model)"),ixe.forEach(t),Qbr=i(oe),B7=n(oe,"LI",{});var dxe=s(B7);Rbe=n(dxe,"STRONG",{});var Lbt=s(Rbe);Wbr=r(Lbt,"roberta"),Lbt.forEach(t),Hbr=r(dxe," \u2014 "),Sz=n(dxe,"A",{href:!0});var xbt=s(Sz);Ubr=r(xbt,"TFRobertaForTokenClassification"),xbt.forEach(t),Jbr=r(dxe," (RoBERTa model)"),dxe.forEach(t),Ybr=i(oe),P7=n(oe,"LI",{});var cxe=s(P7);Bbe=n(cxe,"STRONG",{});var kbt=s(Bbe);Kbr=r(kbt,"roformer"),kbt.forEach(t),Zbr=r(cxe," \u2014 "),Rz=n(cxe,"A",{href:!0});var Sbt=s(Rz);e3r=r(Sbt,"TFRoFormerForTokenClassification"),Sbt.forEach(t),o3r=r(cxe," (RoFormer model)"),cxe.forEach(t),r3r=i(oe),$7=n(oe,"LI",{});var fxe=s($7);Pbe=n(fxe,"STRONG",{});var Rbt=s(Pbe);t3r=r(Rbt,"xlm"),Rbt.forEach(t),a3r=r(fxe," \u2014 "),Bz=n(fxe,"A",{href:!0});var Bbt=s(Bz);n3r=r(Bbt,"TFXLMForTokenClassification"),Bbt.forEach(t),s3r=r(fxe," (XLM model)"),fxe.forEach(t),l3r=i(oe),I7=n(oe,"LI",{});var mxe=s(I7);$be=n(mxe,"STRONG",{});var Pbt=s($be);i3r=r(Pbt,"xlm-roberta"),Pbt.forEach(t),d3r=r(mxe," \u2014 "),Pz=n(mxe,"A",{href:!0});var $bt=s(Pz);c3r=r($bt,"TFXLMRobertaForTokenClassification"),$bt.forEach(t),f3r=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),m3r=i(oe),q7=n(oe,"LI",{});var gxe=s(q7);Ibe=n(gxe,"STRONG",{});var Ibt=s(Ibe);g3r=r(Ibt,"xlnet"),Ibt.forEach(t),h3r=r(gxe," \u2014 "),$z=n(gxe,"A",{href:!0});var qbt=s($z);p3r=r(qbt,"TFXLNetForTokenClassification"),qbt.forEach(t),_3r=r(gxe," (XLNet model)"),gxe.forEach(t),oe.forEach(t),u3r=i(Ca),qbe=n(Ca,"P",{});var Nbt=s(qbe);b3r=r(Nbt,"Examples:"),Nbt.forEach(t),F3r=i(Ca),m(dy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),eBe=i(c),Vc=n(c,"H2",{class:!0});var f$e=s(Vc);N7=n(f$e,"A",{id:!0,class:!0,href:!0});var jbt=s(N7);Nbe=n(jbt,"SPAN",{});var Dbt=s(Nbe);m(cy.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),v3r=i(f$e),jbe=n(f$e,"SPAN",{});var Gbt=s(jbe);T3r=r(Gbt,"TFAutoModelForQuestionAnswering"),Gbt.forEach(t),f$e.forEach(t),oBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(fy.$$.fragment,ni),M3r=i(ni),Xc=n(ni,"P",{});var nJ=s(Xc);E3r=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=n(nJ,"A",{href:!0});var Obt=s(Iz);C3r=r(Obt,"from_pretrained()"),Obt.forEach(t),w3r=r(nJ," class method or the "),qz=n(nJ,"A",{href:!0});var Vbt=s(qz);A3r=r(Vbt,"from_config()"),Vbt.forEach(t),y3r=r(nJ,` class
method.`),nJ.forEach(t),L3r=i(ni),my=n(ni,"P",{});var m$e=s(my);x3r=r(m$e,"This class cannot be instantiated directly using "),Dbe=n(m$e,"CODE",{});var Xbt=s(Dbe);k3r=r(Xbt,"__init__()"),Xbt.forEach(t),S3r=r(m$e," (throws an error)."),m$e.forEach(t),R3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(gy.$$.fragment,si),B3r=i(si),Gbe=n(si,"P",{});var zbt=s(Gbe);P3r=r(zbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zbt.forEach(t),$3r=i(si),zc=n(si,"P",{});var sJ=s(zc);I3r=r(sJ,`Note:
Loading a model from its configuration file does `),Obe=n(sJ,"STRONG",{});var Qbt=s(Obe);q3r=r(Qbt,"not"),Qbt.forEach(t),N3r=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(sJ,"A",{href:!0});var Wbt=s(Nz);j3r=r(Wbt,"from_pretrained()"),Wbt.forEach(t),D3r=r(sJ," to load the model weights."),sJ.forEach(t),G3r=i(si),Vbe=n(si,"P",{});var Hbt=s(Vbe);O3r=r(Hbt,"Examples:"),Hbt.forEach(t),V3r=i(si),m(hy.$$.fragment,si),si.forEach(t),X3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(py.$$.fragment,wa),z3r=i(wa),Xbe=n(wa,"P",{});var Ubt=s(Xbe);Q3r=r(Ubt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ubt.forEach(t),W3r=i(wa),An=n(wa,"P",{});var KE=s(An);H3r=r(KE,"The model class to instantiate is selected based on the "),zbe=n(KE,"CODE",{});var Jbt=s(zbe);U3r=r(Jbt,"model_type"),Jbt.forEach(t),J3r=r(KE,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(KE,"CODE",{});var Ybt=s(Qbe);Y3r=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),K3r=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(KE,"CODE",{});var Kbt=s(Wbe);Z3r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),e2r=r(KE,":"),KE.forEach(t),o2r=i(wa),K=n(wa,"UL",{});var re=s(K);j7=n(re,"LI",{});var hxe=s(j7);Hbe=n(hxe,"STRONG",{});var Zbt=s(Hbe);r2r=r(Zbt,"albert"),Zbt.forEach(t),t2r=r(hxe," \u2014 "),jz=n(hxe,"A",{href:!0});var e3t=s(jz);a2r=r(e3t,"TFAlbertForQuestionAnswering"),e3t.forEach(t),n2r=r(hxe," (ALBERT model)"),hxe.forEach(t),s2r=i(re),D7=n(re,"LI",{});var pxe=s(D7);Ube=n(pxe,"STRONG",{});var o3t=s(Ube);l2r=r(o3t,"bert"),o3t.forEach(t),i2r=r(pxe," \u2014 "),Dz=n(pxe,"A",{href:!0});var r3t=s(Dz);d2r=r(r3t,"TFBertForQuestionAnswering"),r3t.forEach(t),c2r=r(pxe," (BERT model)"),pxe.forEach(t),f2r=i(re),G7=n(re,"LI",{});var _xe=s(G7);Jbe=n(_xe,"STRONG",{});var t3t=s(Jbe);m2r=r(t3t,"camembert"),t3t.forEach(t),g2r=r(_xe," \u2014 "),Gz=n(_xe,"A",{href:!0});var a3t=s(Gz);h2r=r(a3t,"TFCamembertForQuestionAnswering"),a3t.forEach(t),p2r=r(_xe," (CamemBERT model)"),_xe.forEach(t),_2r=i(re),O7=n(re,"LI",{});var uxe=s(O7);Ybe=n(uxe,"STRONG",{});var n3t=s(Ybe);u2r=r(n3t,"convbert"),n3t.forEach(t),b2r=r(uxe," \u2014 "),Oz=n(uxe,"A",{href:!0});var s3t=s(Oz);F2r=r(s3t,"TFConvBertForQuestionAnswering"),s3t.forEach(t),v2r=r(uxe," (ConvBERT model)"),uxe.forEach(t),T2r=i(re),V7=n(re,"LI",{});var bxe=s(V7);Kbe=n(bxe,"STRONG",{});var l3t=s(Kbe);M2r=r(l3t,"deberta"),l3t.forEach(t),E2r=r(bxe," \u2014 "),Vz=n(bxe,"A",{href:!0});var i3t=s(Vz);C2r=r(i3t,"TFDebertaForQuestionAnswering"),i3t.forEach(t),w2r=r(bxe," (DeBERTa model)"),bxe.forEach(t),A2r=i(re),X7=n(re,"LI",{});var Fxe=s(X7);Zbe=n(Fxe,"STRONG",{});var d3t=s(Zbe);y2r=r(d3t,"deberta-v2"),d3t.forEach(t),L2r=r(Fxe," \u2014 "),Xz=n(Fxe,"A",{href:!0});var c3t=s(Xz);x2r=r(c3t,"TFDebertaV2ForQuestionAnswering"),c3t.forEach(t),k2r=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),S2r=i(re),z7=n(re,"LI",{});var vxe=s(z7);e3e=n(vxe,"STRONG",{});var f3t=s(e3e);R2r=r(f3t,"distilbert"),f3t.forEach(t),B2r=r(vxe," \u2014 "),zz=n(vxe,"A",{href:!0});var m3t=s(zz);P2r=r(m3t,"TFDistilBertForQuestionAnswering"),m3t.forEach(t),$2r=r(vxe," (DistilBERT model)"),vxe.forEach(t),I2r=i(re),Q7=n(re,"LI",{});var Txe=s(Q7);o3e=n(Txe,"STRONG",{});var g3t=s(o3e);q2r=r(g3t,"electra"),g3t.forEach(t),N2r=r(Txe," \u2014 "),Qz=n(Txe,"A",{href:!0});var h3t=s(Qz);j2r=r(h3t,"TFElectraForQuestionAnswering"),h3t.forEach(t),D2r=r(Txe," (ELECTRA model)"),Txe.forEach(t),G2r=i(re),W7=n(re,"LI",{});var Mxe=s(W7);r3e=n(Mxe,"STRONG",{});var p3t=s(r3e);O2r=r(p3t,"flaubert"),p3t.forEach(t),V2r=r(Mxe," \u2014 "),Wz=n(Mxe,"A",{href:!0});var _3t=s(Wz);X2r=r(_3t,"TFFlaubertForQuestionAnsweringSimple"),_3t.forEach(t),z2r=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Q2r=i(re),H7=n(re,"LI",{});var Exe=s(H7);t3e=n(Exe,"STRONG",{});var u3t=s(t3e);W2r=r(u3t,"funnel"),u3t.forEach(t),H2r=r(Exe," \u2014 "),Hz=n(Exe,"A",{href:!0});var b3t=s(Hz);U2r=r(b3t,"TFFunnelForQuestionAnswering"),b3t.forEach(t),J2r=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),Y2r=i(re),U7=n(re,"LI",{});var Cxe=s(U7);a3e=n(Cxe,"STRONG",{});var F3t=s(a3e);K2r=r(F3t,"gptj"),F3t.forEach(t),Z2r=r(Cxe," \u2014 "),Uz=n(Cxe,"A",{href:!0});var v3t=s(Uz);eFr=r(v3t,"TFGPTJForQuestionAnswering"),v3t.forEach(t),oFr=r(Cxe," (GPT-J model)"),Cxe.forEach(t),rFr=i(re),J7=n(re,"LI",{});var wxe=s(J7);n3e=n(wxe,"STRONG",{});var T3t=s(n3e);tFr=r(T3t,"longformer"),T3t.forEach(t),aFr=r(wxe," \u2014 "),Jz=n(wxe,"A",{href:!0});var M3t=s(Jz);nFr=r(M3t,"TFLongformerForQuestionAnswering"),M3t.forEach(t),sFr=r(wxe," (Longformer model)"),wxe.forEach(t),lFr=i(re),Y7=n(re,"LI",{});var Axe=s(Y7);s3e=n(Axe,"STRONG",{});var E3t=s(s3e);iFr=r(E3t,"mobilebert"),E3t.forEach(t),dFr=r(Axe," \u2014 "),Yz=n(Axe,"A",{href:!0});var C3t=s(Yz);cFr=r(C3t,"TFMobileBertForQuestionAnswering"),C3t.forEach(t),fFr=r(Axe," (MobileBERT model)"),Axe.forEach(t),mFr=i(re),K7=n(re,"LI",{});var yxe=s(K7);l3e=n(yxe,"STRONG",{});var w3t=s(l3e);gFr=r(w3t,"mpnet"),w3t.forEach(t),hFr=r(yxe," \u2014 "),Kz=n(yxe,"A",{href:!0});var A3t=s(Kz);pFr=r(A3t,"TFMPNetForQuestionAnswering"),A3t.forEach(t),_Fr=r(yxe," (MPNet model)"),yxe.forEach(t),uFr=i(re),Z7=n(re,"LI",{});var Lxe=s(Z7);i3e=n(Lxe,"STRONG",{});var y3t=s(i3e);bFr=r(y3t,"rembert"),y3t.forEach(t),FFr=r(Lxe," \u2014 "),Zz=n(Lxe,"A",{href:!0});var L3t=s(Zz);vFr=r(L3t,"TFRemBertForQuestionAnswering"),L3t.forEach(t),TFr=r(Lxe," (RemBERT model)"),Lxe.forEach(t),MFr=i(re),eM=n(re,"LI",{});var xxe=s(eM);d3e=n(xxe,"STRONG",{});var x3t=s(d3e);EFr=r(x3t,"roberta"),x3t.forEach(t),CFr=r(xxe," \u2014 "),eQ=n(xxe,"A",{href:!0});var k3t=s(eQ);wFr=r(k3t,"TFRobertaForQuestionAnswering"),k3t.forEach(t),AFr=r(xxe," (RoBERTa model)"),xxe.forEach(t),yFr=i(re),oM=n(re,"LI",{});var kxe=s(oM);c3e=n(kxe,"STRONG",{});var S3t=s(c3e);LFr=r(S3t,"roformer"),S3t.forEach(t),xFr=r(kxe," \u2014 "),oQ=n(kxe,"A",{href:!0});var R3t=s(oQ);kFr=r(R3t,"TFRoFormerForQuestionAnswering"),R3t.forEach(t),SFr=r(kxe," (RoFormer model)"),kxe.forEach(t),RFr=i(re),rM=n(re,"LI",{});var Sxe=s(rM);f3e=n(Sxe,"STRONG",{});var B3t=s(f3e);BFr=r(B3t,"xlm"),B3t.forEach(t),PFr=r(Sxe," \u2014 "),rQ=n(Sxe,"A",{href:!0});var P3t=s(rQ);$Fr=r(P3t,"TFXLMForQuestionAnsweringSimple"),P3t.forEach(t),IFr=r(Sxe," (XLM model)"),Sxe.forEach(t),qFr=i(re),tM=n(re,"LI",{});var Rxe=s(tM);m3e=n(Rxe,"STRONG",{});var $3t=s(m3e);NFr=r($3t,"xlm-roberta"),$3t.forEach(t),jFr=r(Rxe," \u2014 "),tQ=n(Rxe,"A",{href:!0});var I3t=s(tQ);DFr=r(I3t,"TFXLMRobertaForQuestionAnswering"),I3t.forEach(t),GFr=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),OFr=i(re),aM=n(re,"LI",{});var Bxe=s(aM);g3e=n(Bxe,"STRONG",{});var q3t=s(g3e);VFr=r(q3t,"xlnet"),q3t.forEach(t),XFr=r(Bxe," \u2014 "),aQ=n(Bxe,"A",{href:!0});var N3t=s(aQ);zFr=r(N3t,"TFXLNetForQuestionAnsweringSimple"),N3t.forEach(t),QFr=r(Bxe," (XLNet model)"),Bxe.forEach(t),re.forEach(t),WFr=i(wa),h3e=n(wa,"P",{});var j3t=s(h3e);HFr=r(j3t,"Examples:"),j3t.forEach(t),UFr=i(wa),m(_y.$$.fragment,wa),wa.forEach(t),ni.forEach(t),rBe=i(c),Qc=n(c,"H2",{class:!0});var g$e=s(Qc);nM=n(g$e,"A",{id:!0,class:!0,href:!0});var D3t=s(nM);p3e=n(D3t,"SPAN",{});var G3t=s(p3e);m(uy.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),JFr=i(g$e),_3e=n(g$e,"SPAN",{});var O3t=s(_3e);YFr=r(O3t,"TFAutoModelForVision2Seq"),O3t.forEach(t),g$e.forEach(t),tBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(by.$$.fragment,li),KFr=i(li),Wc=n(li,"P",{});var lJ=s(Wc);ZFr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nQ=n(lJ,"A",{href:!0});var V3t=s(nQ);evr=r(V3t,"from_pretrained()"),V3t.forEach(t),ovr=r(lJ," class method or the "),sQ=n(lJ,"A",{href:!0});var X3t=s(sQ);rvr=r(X3t,"from_config()"),X3t.forEach(t),tvr=r(lJ,` class
method.`),lJ.forEach(t),avr=i(li),Fy=n(li,"P",{});var h$e=s(Fy);nvr=r(h$e,"This class cannot be instantiated directly using "),u3e=n(h$e,"CODE",{});var z3t=s(u3e);svr=r(z3t,"__init__()"),z3t.forEach(t),lvr=r(h$e," (throws an error)."),h$e.forEach(t),ivr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(vy.$$.fragment,ii),dvr=i(ii),b3e=n(ii,"P",{});var Q3t=s(b3e);cvr=r(Q3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q3t.forEach(t),fvr=i(ii),Hc=n(ii,"P",{});var iJ=s(Hc);mvr=r(iJ,`Note:
Loading a model from its configuration file does `),F3e=n(iJ,"STRONG",{});var W3t=s(F3e);gvr=r(W3t,"not"),W3t.forEach(t),hvr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(iJ,"A",{href:!0});var H3t=s(lQ);pvr=r(H3t,"from_pretrained()"),H3t.forEach(t),_vr=r(iJ," to load the model weights."),iJ.forEach(t),uvr=i(ii),v3e=n(ii,"P",{});var U3t=s(v3e);bvr=r(U3t,"Examples:"),U3t.forEach(t),Fvr=i(ii),m(Ty.$$.fragment,ii),ii.forEach(t),vvr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(My.$$.fragment,Aa),Tvr=i(Aa),T3e=n(Aa,"P",{});var J3t=s(T3e);Mvr=r(J3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J3t.forEach(t),Evr=i(Aa),yn=n(Aa,"P",{});var ZE=s(yn);Cvr=r(ZE,"The model class to instantiate is selected based on the "),M3e=n(ZE,"CODE",{});var Y3t=s(M3e);wvr=r(Y3t,"model_type"),Y3t.forEach(t),Avr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),E3e=n(ZE,"CODE",{});var K3t=s(E3e);yvr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),Lvr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(ZE,"CODE",{});var Z3t=s(C3e);xvr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),kvr=r(ZE,":"),ZE.forEach(t),Svr=i(Aa),w3e=n(Aa,"UL",{});var e2t=s(w3e);sM=n(e2t,"LI",{});var Pxe=s(sM);A3e=n(Pxe,"STRONG",{});var o2t=s(A3e);Rvr=r(o2t,"vision-encoder-decoder"),o2t.forEach(t),Bvr=r(Pxe," \u2014 "),iQ=n(Pxe,"A",{href:!0});var r2t=s(iQ);Pvr=r(r2t,"TFVisionEncoderDecoderModel"),r2t.forEach(t),$vr=r(Pxe," (Vision Encoder decoder model)"),Pxe.forEach(t),e2t.forEach(t),Ivr=i(Aa),y3e=n(Aa,"P",{});var t2t=s(y3e);qvr=r(t2t,"Examples:"),t2t.forEach(t),Nvr=i(Aa),m(Ey.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),aBe=i(c),Uc=n(c,"H2",{class:!0});var p$e=s(Uc);lM=n(p$e,"A",{id:!0,class:!0,href:!0});var a2t=s(lM);L3e=n(a2t,"SPAN",{});var n2t=s(L3e);m(Cy.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),jvr=i(p$e),x3e=n(p$e,"SPAN",{});var s2t=s(x3e);Dvr=r(s2t,"TFAutoModelForSpeechSeq2Seq"),s2t.forEach(t),p$e.forEach(t),nBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(wy.$$.fragment,di),Gvr=i(di),Jc=n(di,"P",{});var dJ=s(Jc);Ovr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dQ=n(dJ,"A",{href:!0});var l2t=s(dQ);Vvr=r(l2t,"from_pretrained()"),l2t.forEach(t),Xvr=r(dJ," class method or the "),cQ=n(dJ,"A",{href:!0});var i2t=s(cQ);zvr=r(i2t,"from_config()"),i2t.forEach(t),Qvr=r(dJ,` class
method.`),dJ.forEach(t),Wvr=i(di),Ay=n(di,"P",{});var _$e=s(Ay);Hvr=r(_$e,"This class cannot be instantiated directly using "),k3e=n(_$e,"CODE",{});var d2t=s(k3e);Uvr=r(d2t,"__init__()"),d2t.forEach(t),Jvr=r(_$e," (throws an error)."),_$e.forEach(t),Yvr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(yy.$$.fragment,ci),Kvr=i(ci),S3e=n(ci,"P",{});var c2t=s(S3e);Zvr=r(c2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c2t.forEach(t),e6r=i(ci),Yc=n(ci,"P",{});var cJ=s(Yc);o6r=r(cJ,`Note:
Loading a model from its configuration file does `),R3e=n(cJ,"STRONG",{});var f2t=s(R3e);r6r=r(f2t,"not"),f2t.forEach(t),t6r=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(cJ,"A",{href:!0});var m2t=s(fQ);a6r=r(m2t,"from_pretrained()"),m2t.forEach(t),n6r=r(cJ," to load the model weights."),cJ.forEach(t),s6r=i(ci),B3e=n(ci,"P",{});var g2t=s(B3e);l6r=r(g2t,"Examples:"),g2t.forEach(t),i6r=i(ci),m(Ly.$$.fragment,ci),ci.forEach(t),d6r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(xy.$$.fragment,ya),c6r=i(ya),P3e=n(ya,"P",{});var h2t=s(P3e);f6r=r(h2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h2t.forEach(t),m6r=i(ya),Ln=n(ya,"P",{});var eC=s(Ln);g6r=r(eC,"The model class to instantiate is selected based on the "),$3e=n(eC,"CODE",{});var p2t=s($3e);h6r=r(p2t,"model_type"),p2t.forEach(t),p6r=r(eC,` property of the config object (either
passed as an argument or loaded from `),I3e=n(eC,"CODE",{});var _2t=s(I3e);_6r=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),u6r=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(eC,"CODE",{});var u2t=s(q3e);b6r=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),F6r=r(eC,":"),eC.forEach(t),v6r=i(ya),N3e=n(ya,"UL",{});var b2t=s(N3e);iM=n(b2t,"LI",{});var $xe=s(iM);j3e=n($xe,"STRONG",{});var F2t=s(j3e);T6r=r(F2t,"speech_to_text"),F2t.forEach(t),M6r=r($xe," \u2014 "),mQ=n($xe,"A",{href:!0});var v2t=s(mQ);E6r=r(v2t,"TFSpeech2TextForConditionalGeneration"),v2t.forEach(t),C6r=r($xe," (Speech2Text model)"),$xe.forEach(t),b2t.forEach(t),w6r=i(ya),D3e=n(ya,"P",{});var T2t=s(D3e);A6r=r(T2t,"Examples:"),T2t.forEach(t),y6r=i(ya),m(ky.$$.fragment,ya),ya.forEach(t),di.forEach(t),sBe=i(c),Kc=n(c,"H2",{class:!0});var u$e=s(Kc);dM=n(u$e,"A",{id:!0,class:!0,href:!0});var M2t=s(dM);G3e=n(M2t,"SPAN",{});var E2t=s(G3e);m(Sy.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),L6r=i(u$e),O3e=n(u$e,"SPAN",{});var C2t=s(O3e);x6r=r(C2t,"FlaxAutoModel"),C2t.forEach(t),u$e.forEach(t),lBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Ry.$$.fragment,fi),k6r=i(fi),Zc=n(fi,"P",{});var fJ=s(Zc);S6r=r(fJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gQ=n(fJ,"A",{href:!0});var w2t=s(gQ);R6r=r(w2t,"from_pretrained()"),w2t.forEach(t),B6r=r(fJ," class method or the "),hQ=n(fJ,"A",{href:!0});var A2t=s(hQ);P6r=r(A2t,"from_config()"),A2t.forEach(t),$6r=r(fJ,` class
method.`),fJ.forEach(t),I6r=i(fi),By=n(fi,"P",{});var b$e=s(By);q6r=r(b$e,"This class cannot be instantiated directly using "),V3e=n(b$e,"CODE",{});var y2t=s(V3e);N6r=r(y2t,"__init__()"),y2t.forEach(t),j6r=r(b$e," (throws an error)."),b$e.forEach(t),D6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Py.$$.fragment,mi),G6r=i(mi),X3e=n(mi,"P",{});var L2t=s(X3e);O6r=r(L2t,"Instantiates one of the base model classes of the library from a configuration."),L2t.forEach(t),V6r=i(mi),ef=n(mi,"P",{});var mJ=s(ef);X6r=r(mJ,`Note:
Loading a model from its configuration file does `),z3e=n(mJ,"STRONG",{});var x2t=s(z3e);z6r=r(x2t,"not"),x2t.forEach(t),Q6r=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(mJ,"A",{href:!0});var k2t=s(pQ);W6r=r(k2t,"from_pretrained()"),k2t.forEach(t),H6r=r(mJ," to load the model weights."),mJ.forEach(t),U6r=i(mi),Q3e=n(mi,"P",{});var S2t=s(Q3e);J6r=r(S2t,"Examples:"),S2t.forEach(t),Y6r=i(mi),m($y.$$.fragment,mi),mi.forEach(t),K6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Iy.$$.fragment,La),Z6r=i(La),W3e=n(La,"P",{});var R2t=s(W3e);eTr=r(R2t,"Instantiate one of the base model classes of the library from a pretrained model."),R2t.forEach(t),oTr=i(La),xn=n(La,"P",{});var oC=s(xn);rTr=r(oC,"The model class to instantiate is selected based on the "),H3e=n(oC,"CODE",{});var B2t=s(H3e);tTr=r(B2t,"model_type"),B2t.forEach(t),aTr=r(oC,` property of the config object (either
passed as an argument or loaded from `),U3e=n(oC,"CODE",{});var P2t=s(U3e);nTr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),sTr=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(oC,"CODE",{});var $2t=s(J3e);lTr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),iTr=r(oC,":"),oC.forEach(t),dTr=i(La),z=n(La,"UL",{});var W=s(z);cM=n(W,"LI",{});var Ixe=s(cM);Y3e=n(Ixe,"STRONG",{});var I2t=s(Y3e);cTr=r(I2t,"albert"),I2t.forEach(t),fTr=r(Ixe," \u2014 "),_Q=n(Ixe,"A",{href:!0});var q2t=s(_Q);mTr=r(q2t,"FlaxAlbertModel"),q2t.forEach(t),gTr=r(Ixe," (ALBERT model)"),Ixe.forEach(t),hTr=i(W),fM=n(W,"LI",{});var qxe=s(fM);K3e=n(qxe,"STRONG",{});var N2t=s(K3e);pTr=r(N2t,"bart"),N2t.forEach(t),_Tr=r(qxe," \u2014 "),uQ=n(qxe,"A",{href:!0});var j2t=s(uQ);uTr=r(j2t,"FlaxBartModel"),j2t.forEach(t),bTr=r(qxe," (BART model)"),qxe.forEach(t),FTr=i(W),mM=n(W,"LI",{});var Nxe=s(mM);Z3e=n(Nxe,"STRONG",{});var D2t=s(Z3e);vTr=r(D2t,"beit"),D2t.forEach(t),TTr=r(Nxe," \u2014 "),bQ=n(Nxe,"A",{href:!0});var G2t=s(bQ);MTr=r(G2t,"FlaxBeitModel"),G2t.forEach(t),ETr=r(Nxe," (BEiT model)"),Nxe.forEach(t),CTr=i(W),gM=n(W,"LI",{});var jxe=s(gM);e2e=n(jxe,"STRONG",{});var O2t=s(e2e);wTr=r(O2t,"bert"),O2t.forEach(t),ATr=r(jxe," \u2014 "),FQ=n(jxe,"A",{href:!0});var V2t=s(FQ);yTr=r(V2t,"FlaxBertModel"),V2t.forEach(t),LTr=r(jxe," (BERT model)"),jxe.forEach(t),xTr=i(W),hM=n(W,"LI",{});var Dxe=s(hM);o2e=n(Dxe,"STRONG",{});var X2t=s(o2e);kTr=r(X2t,"big_bird"),X2t.forEach(t),STr=r(Dxe," \u2014 "),vQ=n(Dxe,"A",{href:!0});var z2t=s(vQ);RTr=r(z2t,"FlaxBigBirdModel"),z2t.forEach(t),BTr=r(Dxe," (BigBird model)"),Dxe.forEach(t),PTr=i(W),pM=n(W,"LI",{});var Gxe=s(pM);r2e=n(Gxe,"STRONG",{});var Q2t=s(r2e);$Tr=r(Q2t,"blenderbot"),Q2t.forEach(t),ITr=r(Gxe," \u2014 "),TQ=n(Gxe,"A",{href:!0});var W2t=s(TQ);qTr=r(W2t,"FlaxBlenderbotModel"),W2t.forEach(t),NTr=r(Gxe," (Blenderbot model)"),Gxe.forEach(t),jTr=i(W),_M=n(W,"LI",{});var Oxe=s(_M);t2e=n(Oxe,"STRONG",{});var H2t=s(t2e);DTr=r(H2t,"blenderbot-small"),H2t.forEach(t),GTr=r(Oxe," \u2014 "),MQ=n(Oxe,"A",{href:!0});var U2t=s(MQ);OTr=r(U2t,"FlaxBlenderbotSmallModel"),U2t.forEach(t),VTr=r(Oxe," (BlenderbotSmall model)"),Oxe.forEach(t),XTr=i(W),uM=n(W,"LI",{});var Vxe=s(uM);a2e=n(Vxe,"STRONG",{});var J2t=s(a2e);zTr=r(J2t,"clip"),J2t.forEach(t),QTr=r(Vxe," \u2014 "),EQ=n(Vxe,"A",{href:!0});var Y2t=s(EQ);WTr=r(Y2t,"FlaxCLIPModel"),Y2t.forEach(t),HTr=r(Vxe," (CLIP model)"),Vxe.forEach(t),UTr=i(W),bM=n(W,"LI",{});var Xxe=s(bM);n2e=n(Xxe,"STRONG",{});var K2t=s(n2e);JTr=r(K2t,"distilbert"),K2t.forEach(t),YTr=r(Xxe," \u2014 "),CQ=n(Xxe,"A",{href:!0});var Z2t=s(CQ);KTr=r(Z2t,"FlaxDistilBertModel"),Z2t.forEach(t),ZTr=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),e7r=i(W),FM=n(W,"LI",{});var zxe=s(FM);s2e=n(zxe,"STRONG",{});var eFt=s(s2e);o7r=r(eFt,"electra"),eFt.forEach(t),r7r=r(zxe," \u2014 "),wQ=n(zxe,"A",{href:!0});var oFt=s(wQ);t7r=r(oFt,"FlaxElectraModel"),oFt.forEach(t),a7r=r(zxe," (ELECTRA model)"),zxe.forEach(t),n7r=i(W),vM=n(W,"LI",{});var Qxe=s(vM);l2e=n(Qxe,"STRONG",{});var rFt=s(l2e);s7r=r(rFt,"gpt2"),rFt.forEach(t),l7r=r(Qxe," \u2014 "),AQ=n(Qxe,"A",{href:!0});var tFt=s(AQ);i7r=r(tFt,"FlaxGPT2Model"),tFt.forEach(t),d7r=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),c7r=i(W),TM=n(W,"LI",{});var Wxe=s(TM);i2e=n(Wxe,"STRONG",{});var aFt=s(i2e);f7r=r(aFt,"gpt_neo"),aFt.forEach(t),m7r=r(Wxe," \u2014 "),yQ=n(Wxe,"A",{href:!0});var nFt=s(yQ);g7r=r(nFt,"FlaxGPTNeoModel"),nFt.forEach(t),h7r=r(Wxe," (GPT Neo model)"),Wxe.forEach(t),p7r=i(W),MM=n(W,"LI",{});var Hxe=s(MM);d2e=n(Hxe,"STRONG",{});var sFt=s(d2e);_7r=r(sFt,"gptj"),sFt.forEach(t),u7r=r(Hxe," \u2014 "),LQ=n(Hxe,"A",{href:!0});var lFt=s(LQ);b7r=r(lFt,"FlaxGPTJModel"),lFt.forEach(t),F7r=r(Hxe," (GPT-J model)"),Hxe.forEach(t),v7r=i(W),EM=n(W,"LI",{});var Uxe=s(EM);c2e=n(Uxe,"STRONG",{});var iFt=s(c2e);T7r=r(iFt,"marian"),iFt.forEach(t),M7r=r(Uxe," \u2014 "),xQ=n(Uxe,"A",{href:!0});var dFt=s(xQ);E7r=r(dFt,"FlaxMarianModel"),dFt.forEach(t),C7r=r(Uxe," (Marian model)"),Uxe.forEach(t),w7r=i(W),CM=n(W,"LI",{});var Jxe=s(CM);f2e=n(Jxe,"STRONG",{});var cFt=s(f2e);A7r=r(cFt,"mbart"),cFt.forEach(t),y7r=r(Jxe," \u2014 "),kQ=n(Jxe,"A",{href:!0});var fFt=s(kQ);L7r=r(fFt,"FlaxMBartModel"),fFt.forEach(t),x7r=r(Jxe," (mBART model)"),Jxe.forEach(t),k7r=i(W),wM=n(W,"LI",{});var Yxe=s(wM);m2e=n(Yxe,"STRONG",{});var mFt=s(m2e);S7r=r(mFt,"mt5"),mFt.forEach(t),R7r=r(Yxe," \u2014 "),SQ=n(Yxe,"A",{href:!0});var gFt=s(SQ);B7r=r(gFt,"FlaxMT5Model"),gFt.forEach(t),P7r=r(Yxe," (mT5 model)"),Yxe.forEach(t),$7r=i(W),AM=n(W,"LI",{});var Kxe=s(AM);g2e=n(Kxe,"STRONG",{});var hFt=s(g2e);I7r=r(hFt,"pegasus"),hFt.forEach(t),q7r=r(Kxe," \u2014 "),RQ=n(Kxe,"A",{href:!0});var pFt=s(RQ);N7r=r(pFt,"FlaxPegasusModel"),pFt.forEach(t),j7r=r(Kxe," (Pegasus model)"),Kxe.forEach(t),D7r=i(W),yM=n(W,"LI",{});var Zxe=s(yM);h2e=n(Zxe,"STRONG",{});var _Ft=s(h2e);G7r=r(_Ft,"roberta"),_Ft.forEach(t),O7r=r(Zxe," \u2014 "),BQ=n(Zxe,"A",{href:!0});var uFt=s(BQ);V7r=r(uFt,"FlaxRobertaModel"),uFt.forEach(t),X7r=r(Zxe," (RoBERTa model)"),Zxe.forEach(t),z7r=i(W),LM=n(W,"LI",{});var eke=s(LM);p2e=n(eke,"STRONG",{});var bFt=s(p2e);Q7r=r(bFt,"roformer"),bFt.forEach(t),W7r=r(eke," \u2014 "),PQ=n(eke,"A",{href:!0});var FFt=s(PQ);H7r=r(FFt,"FlaxRoFormerModel"),FFt.forEach(t),U7r=r(eke," (RoFormer model)"),eke.forEach(t),J7r=i(W),xM=n(W,"LI",{});var oke=s(xM);_2e=n(oke,"STRONG",{});var vFt=s(_2e);Y7r=r(vFt,"t5"),vFt.forEach(t),K7r=r(oke," \u2014 "),$Q=n(oke,"A",{href:!0});var TFt=s($Q);Z7r=r(TFt,"FlaxT5Model"),TFt.forEach(t),eMr=r(oke," (T5 model)"),oke.forEach(t),oMr=i(W),kM=n(W,"LI",{});var rke=s(kM);u2e=n(rke,"STRONG",{});var MFt=s(u2e);rMr=r(MFt,"vision-text-dual-encoder"),MFt.forEach(t),tMr=r(rke," \u2014 "),IQ=n(rke,"A",{href:!0});var EFt=s(IQ);aMr=r(EFt,"FlaxVisionTextDualEncoderModel"),EFt.forEach(t),nMr=r(rke," (VisionTextDualEncoder model)"),rke.forEach(t),sMr=i(W),SM=n(W,"LI",{});var tke=s(SM);b2e=n(tke,"STRONG",{});var CFt=s(b2e);lMr=r(CFt,"vit"),CFt.forEach(t),iMr=r(tke," \u2014 "),qQ=n(tke,"A",{href:!0});var wFt=s(qQ);dMr=r(wFt,"FlaxViTModel"),wFt.forEach(t),cMr=r(tke," (ViT model)"),tke.forEach(t),fMr=i(W),RM=n(W,"LI",{});var ake=s(RM);F2e=n(ake,"STRONG",{});var AFt=s(F2e);mMr=r(AFt,"wav2vec2"),AFt.forEach(t),gMr=r(ake," \u2014 "),NQ=n(ake,"A",{href:!0});var yFt=s(NQ);hMr=r(yFt,"FlaxWav2Vec2Model"),yFt.forEach(t),pMr=r(ake," (Wav2Vec2 model)"),ake.forEach(t),_Mr=i(W),BM=n(W,"LI",{});var nke=s(BM);v2e=n(nke,"STRONG",{});var LFt=s(v2e);uMr=r(LFt,"xglm"),LFt.forEach(t),bMr=r(nke," \u2014 "),jQ=n(nke,"A",{href:!0});var xFt=s(jQ);FMr=r(xFt,"FlaxXGLMModel"),xFt.forEach(t),vMr=r(nke," (XGLM model)"),nke.forEach(t),TMr=i(W),PM=n(W,"LI",{});var ske=s(PM);T2e=n(ske,"STRONG",{});var kFt=s(T2e);MMr=r(kFt,"xlm-roberta"),kFt.forEach(t),EMr=r(ske," \u2014 "),DQ=n(ske,"A",{href:!0});var SFt=s(DQ);CMr=r(SFt,"FlaxXLMRobertaModel"),SFt.forEach(t),wMr=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),W.forEach(t),AMr=i(La),M2e=n(La,"P",{});var RFt=s(M2e);yMr=r(RFt,"Examples:"),RFt.forEach(t),LMr=i(La),m(qy.$$.fragment,La),La.forEach(t),fi.forEach(t),iBe=i(c),of=n(c,"H2",{class:!0});var F$e=s(of);$M=n(F$e,"A",{id:!0,class:!0,href:!0});var BFt=s($M);E2e=n(BFt,"SPAN",{});var PFt=s(E2e);m(Ny.$$.fragment,PFt),PFt.forEach(t),BFt.forEach(t),xMr=i(F$e),C2e=n(F$e,"SPAN",{});var $Ft=s(C2e);kMr=r($Ft,"FlaxAutoModelForCausalLM"),$Ft.forEach(t),F$e.forEach(t),dBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(jy.$$.fragment,gi),SMr=i(gi),rf=n(gi,"P",{});var gJ=s(rf);RMr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=n(gJ,"A",{href:!0});var IFt=s(GQ);BMr=r(IFt,"from_pretrained()"),IFt.forEach(t),PMr=r(gJ," class method or the "),OQ=n(gJ,"A",{href:!0});var qFt=s(OQ);$Mr=r(qFt,"from_config()"),qFt.forEach(t),IMr=r(gJ,` class
method.`),gJ.forEach(t),qMr=i(gi),Dy=n(gi,"P",{});var v$e=s(Dy);NMr=r(v$e,"This class cannot be instantiated directly using "),w2e=n(v$e,"CODE",{});var NFt=s(w2e);jMr=r(NFt,"__init__()"),NFt.forEach(t),DMr=r(v$e," (throws an error)."),v$e.forEach(t),GMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Gy.$$.fragment,hi),OMr=i(hi),A2e=n(hi,"P",{});var jFt=s(A2e);VMr=r(jFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jFt.forEach(t),XMr=i(hi),tf=n(hi,"P",{});var hJ=s(tf);zMr=r(hJ,`Note:
Loading a model from its configuration file does `),y2e=n(hJ,"STRONG",{});var DFt=s(y2e);QMr=r(DFt,"not"),DFt.forEach(t),WMr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(hJ,"A",{href:!0});var GFt=s(VQ);HMr=r(GFt,"from_pretrained()"),GFt.forEach(t),UMr=r(hJ," to load the model weights."),hJ.forEach(t),JMr=i(hi),L2e=n(hi,"P",{});var OFt=s(L2e);YMr=r(OFt,"Examples:"),OFt.forEach(t),KMr=i(hi),m(Oy.$$.fragment,hi),hi.forEach(t),ZMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Vy.$$.fragment,xa),e4r=i(xa),x2e=n(xa,"P",{});var VFt=s(x2e);o4r=r(VFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VFt.forEach(t),r4r=i(xa),kn=n(xa,"P",{});var rC=s(kn);t4r=r(rC,"The model class to instantiate is selected based on the "),k2e=n(rC,"CODE",{});var XFt=s(k2e);a4r=r(XFt,"model_type"),XFt.forEach(t),n4r=r(rC,` property of the config object (either
passed as an argument or loaded from `),S2e=n(rC,"CODE",{});var zFt=s(S2e);s4r=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),l4r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(rC,"CODE",{});var QFt=s(R2e);i4r=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),d4r=r(rC,":"),rC.forEach(t),c4r=i(xa),ca=n(xa,"UL",{});var pi=s(ca);IM=n(pi,"LI",{});var lke=s(IM);B2e=n(lke,"STRONG",{});var WFt=s(B2e);f4r=r(WFt,"bart"),WFt.forEach(t),m4r=r(lke," \u2014 "),XQ=n(lke,"A",{href:!0});var HFt=s(XQ);g4r=r(HFt,"FlaxBartForCausalLM"),HFt.forEach(t),h4r=r(lke," (BART model)"),lke.forEach(t),p4r=i(pi),qM=n(pi,"LI",{});var ike=s(qM);P2e=n(ike,"STRONG",{});var UFt=s(P2e);_4r=r(UFt,"gpt2"),UFt.forEach(t),u4r=r(ike," \u2014 "),zQ=n(ike,"A",{href:!0});var JFt=s(zQ);b4r=r(JFt,"FlaxGPT2LMHeadModel"),JFt.forEach(t),F4r=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),v4r=i(pi),NM=n(pi,"LI",{});var dke=s(NM);$2e=n(dke,"STRONG",{});var YFt=s($2e);T4r=r(YFt,"gpt_neo"),YFt.forEach(t),M4r=r(dke," \u2014 "),QQ=n(dke,"A",{href:!0});var KFt=s(QQ);E4r=r(KFt,"FlaxGPTNeoForCausalLM"),KFt.forEach(t),C4r=r(dke," (GPT Neo model)"),dke.forEach(t),w4r=i(pi),jM=n(pi,"LI",{});var cke=s(jM);I2e=n(cke,"STRONG",{});var ZFt=s(I2e);A4r=r(ZFt,"gptj"),ZFt.forEach(t),y4r=r(cke," \u2014 "),WQ=n(cke,"A",{href:!0});var evt=s(WQ);L4r=r(evt,"FlaxGPTJForCausalLM"),evt.forEach(t),x4r=r(cke," (GPT-J model)"),cke.forEach(t),k4r=i(pi),DM=n(pi,"LI",{});var fke=s(DM);q2e=n(fke,"STRONG",{});var ovt=s(q2e);S4r=r(ovt,"xglm"),ovt.forEach(t),R4r=r(fke," \u2014 "),HQ=n(fke,"A",{href:!0});var rvt=s(HQ);B4r=r(rvt,"FlaxXGLMForCausalLM"),rvt.forEach(t),P4r=r(fke," (XGLM model)"),fke.forEach(t),pi.forEach(t),$4r=i(xa),N2e=n(xa,"P",{});var tvt=s(N2e);I4r=r(tvt,"Examples:"),tvt.forEach(t),q4r=i(xa),m(Xy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),cBe=i(c),af=n(c,"H2",{class:!0});var T$e=s(af);GM=n(T$e,"A",{id:!0,class:!0,href:!0});var avt=s(GM);j2e=n(avt,"SPAN",{});var nvt=s(j2e);m(zy.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),N4r=i(T$e),D2e=n(T$e,"SPAN",{});var svt=s(D2e);j4r=r(svt,"FlaxAutoModelForPreTraining"),svt.forEach(t),T$e.forEach(t),fBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Qy.$$.fragment,_i),D4r=i(_i),nf=n(_i,"P",{});var pJ=s(nf);G4r=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=n(pJ,"A",{href:!0});var lvt=s(UQ);O4r=r(lvt,"from_pretrained()"),lvt.forEach(t),V4r=r(pJ," class method or the "),JQ=n(pJ,"A",{href:!0});var ivt=s(JQ);X4r=r(ivt,"from_config()"),ivt.forEach(t),z4r=r(pJ,` class
method.`),pJ.forEach(t),Q4r=i(_i),Wy=n(_i,"P",{});var M$e=s(Wy);W4r=r(M$e,"This class cannot be instantiated directly using "),G2e=n(M$e,"CODE",{});var dvt=s(G2e);H4r=r(dvt,"__init__()"),dvt.forEach(t),U4r=r(M$e," (throws an error)."),M$e.forEach(t),J4r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Hy.$$.fragment,ui),Y4r=i(ui),O2e=n(ui,"P",{});var cvt=s(O2e);K4r=r(cvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cvt.forEach(t),Z4r=i(ui),sf=n(ui,"P",{});var _J=s(sf);eEr=r(_J,`Note:
Loading a model from its configuration file does `),V2e=n(_J,"STRONG",{});var fvt=s(V2e);oEr=r(fvt,"not"),fvt.forEach(t),rEr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(_J,"A",{href:!0});var mvt=s(YQ);tEr=r(mvt,"from_pretrained()"),mvt.forEach(t),aEr=r(_J," to load the model weights."),_J.forEach(t),nEr=i(ui),X2e=n(ui,"P",{});var gvt=s(X2e);sEr=r(gvt,"Examples:"),gvt.forEach(t),lEr=i(ui),m(Uy.$$.fragment,ui),ui.forEach(t),iEr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(Jy.$$.fragment,ka),dEr=i(ka),z2e=n(ka,"P",{});var hvt=s(z2e);cEr=r(hvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hvt.forEach(t),fEr=i(ka),Sn=n(ka,"P",{});var tC=s(Sn);mEr=r(tC,"The model class to instantiate is selected based on the "),Q2e=n(tC,"CODE",{});var pvt=s(Q2e);gEr=r(pvt,"model_type"),pvt.forEach(t),hEr=r(tC,` property of the config object (either
passed as an argument or loaded from `),W2e=n(tC,"CODE",{});var _vt=s(W2e);pEr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),_Er=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(tC,"CODE",{});var uvt=s(H2e);uEr=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),bEr=r(tC,":"),tC.forEach(t),FEr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);OM=n(pe,"LI",{});var mke=s(OM);U2e=n(mke,"STRONG",{});var bvt=s(U2e);vEr=r(bvt,"albert"),bvt.forEach(t),TEr=r(mke," \u2014 "),KQ=n(mke,"A",{href:!0});var Fvt=s(KQ);MEr=r(Fvt,"FlaxAlbertForPreTraining"),Fvt.forEach(t),EEr=r(mke," (ALBERT model)"),mke.forEach(t),CEr=i(pe),VM=n(pe,"LI",{});var gke=s(VM);J2e=n(gke,"STRONG",{});var vvt=s(J2e);wEr=r(vvt,"bart"),vvt.forEach(t),AEr=r(gke," \u2014 "),ZQ=n(gke,"A",{href:!0});var Tvt=s(ZQ);yEr=r(Tvt,"FlaxBartForConditionalGeneration"),Tvt.forEach(t),LEr=r(gke," (BART model)"),gke.forEach(t),xEr=i(pe),XM=n(pe,"LI",{});var hke=s(XM);Y2e=n(hke,"STRONG",{});var Mvt=s(Y2e);kEr=r(Mvt,"bert"),Mvt.forEach(t),SEr=r(hke," \u2014 "),eW=n(hke,"A",{href:!0});var Evt=s(eW);REr=r(Evt,"FlaxBertForPreTraining"),Evt.forEach(t),BEr=r(hke," (BERT model)"),hke.forEach(t),PEr=i(pe),zM=n(pe,"LI",{});var pke=s(zM);K2e=n(pke,"STRONG",{});var Cvt=s(K2e);$Er=r(Cvt,"big_bird"),Cvt.forEach(t),IEr=r(pke," \u2014 "),oW=n(pke,"A",{href:!0});var wvt=s(oW);qEr=r(wvt,"FlaxBigBirdForPreTraining"),wvt.forEach(t),NEr=r(pke," (BigBird model)"),pke.forEach(t),jEr=i(pe),QM=n(pe,"LI",{});var _ke=s(QM);Z2e=n(_ke,"STRONG",{});var Avt=s(Z2e);DEr=r(Avt,"electra"),Avt.forEach(t),GEr=r(_ke," \u2014 "),rW=n(_ke,"A",{href:!0});var yvt=s(rW);OEr=r(yvt,"FlaxElectraForPreTraining"),yvt.forEach(t),VEr=r(_ke," (ELECTRA model)"),_ke.forEach(t),XEr=i(pe),WM=n(pe,"LI",{});var uke=s(WM);eFe=n(uke,"STRONG",{});var Lvt=s(eFe);zEr=r(Lvt,"mbart"),Lvt.forEach(t),QEr=r(uke," \u2014 "),tW=n(uke,"A",{href:!0});var xvt=s(tW);WEr=r(xvt,"FlaxMBartForConditionalGeneration"),xvt.forEach(t),HEr=r(uke," (mBART model)"),uke.forEach(t),UEr=i(pe),HM=n(pe,"LI",{});var bke=s(HM);oFe=n(bke,"STRONG",{});var kvt=s(oFe);JEr=r(kvt,"mt5"),kvt.forEach(t),YEr=r(bke," \u2014 "),aW=n(bke,"A",{href:!0});var Svt=s(aW);KEr=r(Svt,"FlaxMT5ForConditionalGeneration"),Svt.forEach(t),ZEr=r(bke," (mT5 model)"),bke.forEach(t),eCr=i(pe),UM=n(pe,"LI",{});var Fke=s(UM);rFe=n(Fke,"STRONG",{});var Rvt=s(rFe);oCr=r(Rvt,"roberta"),Rvt.forEach(t),rCr=r(Fke," \u2014 "),nW=n(Fke,"A",{href:!0});var Bvt=s(nW);tCr=r(Bvt,"FlaxRobertaForMaskedLM"),Bvt.forEach(t),aCr=r(Fke," (RoBERTa model)"),Fke.forEach(t),nCr=i(pe),JM=n(pe,"LI",{});var vke=s(JM);tFe=n(vke,"STRONG",{});var Pvt=s(tFe);sCr=r(Pvt,"roformer"),Pvt.forEach(t),lCr=r(vke," \u2014 "),sW=n(vke,"A",{href:!0});var $vt=s(sW);iCr=r($vt,"FlaxRoFormerForMaskedLM"),$vt.forEach(t),dCr=r(vke," (RoFormer model)"),vke.forEach(t),cCr=i(pe),YM=n(pe,"LI",{});var Tke=s(YM);aFe=n(Tke,"STRONG",{});var Ivt=s(aFe);fCr=r(Ivt,"t5"),Ivt.forEach(t),mCr=r(Tke," \u2014 "),lW=n(Tke,"A",{href:!0});var qvt=s(lW);gCr=r(qvt,"FlaxT5ForConditionalGeneration"),qvt.forEach(t),hCr=r(Tke," (T5 model)"),Tke.forEach(t),pCr=i(pe),KM=n(pe,"LI",{});var Mke=s(KM);nFe=n(Mke,"STRONG",{});var Nvt=s(nFe);_Cr=r(Nvt,"wav2vec2"),Nvt.forEach(t),uCr=r(Mke," \u2014 "),iW=n(Mke,"A",{href:!0});var jvt=s(iW);bCr=r(jvt,"FlaxWav2Vec2ForPreTraining"),jvt.forEach(t),FCr=r(Mke," (Wav2Vec2 model)"),Mke.forEach(t),vCr=i(pe),ZM=n(pe,"LI",{});var Eke=s(ZM);sFe=n(Eke,"STRONG",{});var Dvt=s(sFe);TCr=r(Dvt,"xlm-roberta"),Dvt.forEach(t),MCr=r(Eke," \u2014 "),dW=n(Eke,"A",{href:!0});var Gvt=s(dW);ECr=r(Gvt,"FlaxXLMRobertaForMaskedLM"),Gvt.forEach(t),CCr=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),pe.forEach(t),wCr=i(ka),lFe=n(ka,"P",{});var Ovt=s(lFe);ACr=r(Ovt,"Examples:"),Ovt.forEach(t),yCr=i(ka),m(Yy.$$.fragment,ka),ka.forEach(t),_i.forEach(t),mBe=i(c),lf=n(c,"H2",{class:!0});var E$e=s(lf);e4=n(E$e,"A",{id:!0,class:!0,href:!0});var Vvt=s(e4);iFe=n(Vvt,"SPAN",{});var Xvt=s(iFe);m(Ky.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),LCr=i(E$e),dFe=n(E$e,"SPAN",{});var zvt=s(dFe);xCr=r(zvt,"FlaxAutoModelForMaskedLM"),zvt.forEach(t),E$e.forEach(t),gBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(Zy.$$.fragment,bi),kCr=i(bi),df=n(bi,"P",{});var uJ=s(df);SCr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cW=n(uJ,"A",{href:!0});var Qvt=s(cW);RCr=r(Qvt,"from_pretrained()"),Qvt.forEach(t),BCr=r(uJ," class method or the "),fW=n(uJ,"A",{href:!0});var Wvt=s(fW);PCr=r(Wvt,"from_config()"),Wvt.forEach(t),$Cr=r(uJ,` class
method.`),uJ.forEach(t),ICr=i(bi),eL=n(bi,"P",{});var C$e=s(eL);qCr=r(C$e,"This class cannot be instantiated directly using "),cFe=n(C$e,"CODE",{});var Hvt=s(cFe);NCr=r(Hvt,"__init__()"),Hvt.forEach(t),jCr=r(C$e," (throws an error)."),C$e.forEach(t),DCr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(oL.$$.fragment,Fi),GCr=i(Fi),fFe=n(Fi,"P",{});var Uvt=s(fFe);OCr=r(Uvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Uvt.forEach(t),VCr=i(Fi),cf=n(Fi,"P",{});var bJ=s(cf);XCr=r(bJ,`Note:
Loading a model from its configuration file does `),mFe=n(bJ,"STRONG",{});var Jvt=s(mFe);zCr=r(Jvt,"not"),Jvt.forEach(t),QCr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(bJ,"A",{href:!0});var Yvt=s(mW);WCr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),HCr=r(bJ," to load the model weights."),bJ.forEach(t),UCr=i(Fi),gFe=n(Fi,"P",{});var Kvt=s(gFe);JCr=r(Kvt,"Examples:"),Kvt.forEach(t),YCr=i(Fi),m(rL.$$.fragment,Fi),Fi.forEach(t),KCr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(tL.$$.fragment,Sa),ZCr=i(Sa),hFe=n(Sa,"P",{});var Zvt=s(hFe);e5r=r(Zvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zvt.forEach(t),o5r=i(Sa),Rn=n(Sa,"P",{});var aC=s(Rn);r5r=r(aC,"The model class to instantiate is selected based on the "),pFe=n(aC,"CODE",{});var e6t=s(pFe);t5r=r(e6t,"model_type"),e6t.forEach(t),a5r=r(aC,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(aC,"CODE",{});var o6t=s(_Fe);n5r=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),s5r=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(aC,"CODE",{});var r6t=s(uFe);l5r=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),i5r=r(aC,":"),aC.forEach(t),d5r=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);o4=n(Ae,"LI",{});var Cke=s(o4);bFe=n(Cke,"STRONG",{});var t6t=s(bFe);c5r=r(t6t,"albert"),t6t.forEach(t),f5r=r(Cke," \u2014 "),gW=n(Cke,"A",{href:!0});var a6t=s(gW);m5r=r(a6t,"FlaxAlbertForMaskedLM"),a6t.forEach(t),g5r=r(Cke," (ALBERT model)"),Cke.forEach(t),h5r=i(Ae),r4=n(Ae,"LI",{});var wke=s(r4);FFe=n(wke,"STRONG",{});var n6t=s(FFe);p5r=r(n6t,"bart"),n6t.forEach(t),_5r=r(wke," \u2014 "),hW=n(wke,"A",{href:!0});var s6t=s(hW);u5r=r(s6t,"FlaxBartForConditionalGeneration"),s6t.forEach(t),b5r=r(wke," (BART model)"),wke.forEach(t),F5r=i(Ae),t4=n(Ae,"LI",{});var Ake=s(t4);vFe=n(Ake,"STRONG",{});var l6t=s(vFe);v5r=r(l6t,"bert"),l6t.forEach(t),T5r=r(Ake," \u2014 "),pW=n(Ake,"A",{href:!0});var i6t=s(pW);M5r=r(i6t,"FlaxBertForMaskedLM"),i6t.forEach(t),E5r=r(Ake," (BERT model)"),Ake.forEach(t),C5r=i(Ae),a4=n(Ae,"LI",{});var yke=s(a4);TFe=n(yke,"STRONG",{});var d6t=s(TFe);w5r=r(d6t,"big_bird"),d6t.forEach(t),A5r=r(yke," \u2014 "),_W=n(yke,"A",{href:!0});var c6t=s(_W);y5r=r(c6t,"FlaxBigBirdForMaskedLM"),c6t.forEach(t),L5r=r(yke," (BigBird model)"),yke.forEach(t),x5r=i(Ae),n4=n(Ae,"LI",{});var Lke=s(n4);MFe=n(Lke,"STRONG",{});var f6t=s(MFe);k5r=r(f6t,"distilbert"),f6t.forEach(t),S5r=r(Lke," \u2014 "),uW=n(Lke,"A",{href:!0});var m6t=s(uW);R5r=r(m6t,"FlaxDistilBertForMaskedLM"),m6t.forEach(t),B5r=r(Lke," (DistilBERT model)"),Lke.forEach(t),P5r=i(Ae),s4=n(Ae,"LI",{});var xke=s(s4);EFe=n(xke,"STRONG",{});var g6t=s(EFe);$5r=r(g6t,"electra"),g6t.forEach(t),I5r=r(xke," \u2014 "),bW=n(xke,"A",{href:!0});var h6t=s(bW);q5r=r(h6t,"FlaxElectraForMaskedLM"),h6t.forEach(t),N5r=r(xke," (ELECTRA model)"),xke.forEach(t),j5r=i(Ae),l4=n(Ae,"LI",{});var kke=s(l4);CFe=n(kke,"STRONG",{});var p6t=s(CFe);D5r=r(p6t,"mbart"),p6t.forEach(t),G5r=r(kke," \u2014 "),FW=n(kke,"A",{href:!0});var _6t=s(FW);O5r=r(_6t,"FlaxMBartForConditionalGeneration"),_6t.forEach(t),V5r=r(kke," (mBART model)"),kke.forEach(t),X5r=i(Ae),i4=n(Ae,"LI",{});var Ske=s(i4);wFe=n(Ske,"STRONG",{});var u6t=s(wFe);z5r=r(u6t,"roberta"),u6t.forEach(t),Q5r=r(Ske," \u2014 "),vW=n(Ske,"A",{href:!0});var b6t=s(vW);W5r=r(b6t,"FlaxRobertaForMaskedLM"),b6t.forEach(t),H5r=r(Ske," (RoBERTa model)"),Ske.forEach(t),U5r=i(Ae),d4=n(Ae,"LI",{});var Rke=s(d4);AFe=n(Rke,"STRONG",{});var F6t=s(AFe);J5r=r(F6t,"roformer"),F6t.forEach(t),Y5r=r(Rke," \u2014 "),TW=n(Rke,"A",{href:!0});var v6t=s(TW);K5r=r(v6t,"FlaxRoFormerForMaskedLM"),v6t.forEach(t),Z5r=r(Rke," (RoFormer model)"),Rke.forEach(t),ewr=i(Ae),c4=n(Ae,"LI",{});var Bke=s(c4);yFe=n(Bke,"STRONG",{});var T6t=s(yFe);owr=r(T6t,"xlm-roberta"),T6t.forEach(t),rwr=r(Bke," \u2014 "),MW=n(Bke,"A",{href:!0});var M6t=s(MW);twr=r(M6t,"FlaxXLMRobertaForMaskedLM"),M6t.forEach(t),awr=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),Ae.forEach(t),nwr=i(Sa),LFe=n(Sa,"P",{});var E6t=s(LFe);swr=r(E6t,"Examples:"),E6t.forEach(t),lwr=i(Sa),m(aL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),hBe=i(c),ff=n(c,"H2",{class:!0});var w$e=s(ff);f4=n(w$e,"A",{id:!0,class:!0,href:!0});var C6t=s(f4);xFe=n(C6t,"SPAN",{});var w6t=s(xFe);m(nL.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),iwr=i(w$e),kFe=n(w$e,"SPAN",{});var A6t=s(kFe);dwr=r(A6t,"FlaxAutoModelForSeq2SeqLM"),A6t.forEach(t),w$e.forEach(t),pBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(sL.$$.fragment,vi),cwr=i(vi),mf=n(vi,"P",{});var FJ=s(mf);fwr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=n(FJ,"A",{href:!0});var y6t=s(EW);mwr=r(y6t,"from_pretrained()"),y6t.forEach(t),gwr=r(FJ," class method or the "),CW=n(FJ,"A",{href:!0});var L6t=s(CW);hwr=r(L6t,"from_config()"),L6t.forEach(t),pwr=r(FJ,` class
method.`),FJ.forEach(t),_wr=i(vi),lL=n(vi,"P",{});var A$e=s(lL);uwr=r(A$e,"This class cannot be instantiated directly using "),SFe=n(A$e,"CODE",{});var x6t=s(SFe);bwr=r(x6t,"__init__()"),x6t.forEach(t),Fwr=r(A$e," (throws an error)."),A$e.forEach(t),vwr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(iL.$$.fragment,Ti),Twr=i(Ti),RFe=n(Ti,"P",{});var k6t=s(RFe);Mwr=r(k6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k6t.forEach(t),Ewr=i(Ti),gf=n(Ti,"P",{});var vJ=s(gf);Cwr=r(vJ,`Note:
Loading a model from its configuration file does `),BFe=n(vJ,"STRONG",{});var S6t=s(BFe);wwr=r(S6t,"not"),S6t.forEach(t),Awr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(vJ,"A",{href:!0});var R6t=s(wW);ywr=r(R6t,"from_pretrained()"),R6t.forEach(t),Lwr=r(vJ," to load the model weights."),vJ.forEach(t),xwr=i(Ti),PFe=n(Ti,"P",{});var B6t=s(PFe);kwr=r(B6t,"Examples:"),B6t.forEach(t),Swr=i(Ti),m(dL.$$.fragment,Ti),Ti.forEach(t),Rwr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(cL.$$.fragment,Ra),Bwr=i(Ra),$Fe=n(Ra,"P",{});var P6t=s($Fe);Pwr=r(P6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P6t.forEach(t),$wr=i(Ra),Bn=n(Ra,"P",{});var nC=s(Bn);Iwr=r(nC,"The model class to instantiate is selected based on the "),IFe=n(nC,"CODE",{});var $6t=s(IFe);qwr=r($6t,"model_type"),$6t.forEach(t),Nwr=r(nC,` property of the config object (either
passed as an argument or loaded from `),qFe=n(nC,"CODE",{});var I6t=s(qFe);jwr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Dwr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(nC,"CODE",{});var q6t=s(NFe);Gwr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),Owr=r(nC,":"),nC.forEach(t),Vwr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);m4=n(so,"LI",{});var Pke=s(m4);jFe=n(Pke,"STRONG",{});var N6t=s(jFe);Xwr=r(N6t,"bart"),N6t.forEach(t),zwr=r(Pke," \u2014 "),AW=n(Pke,"A",{href:!0});var j6t=s(AW);Qwr=r(j6t,"FlaxBartForConditionalGeneration"),j6t.forEach(t),Wwr=r(Pke," (BART model)"),Pke.forEach(t),Hwr=i(so),g4=n(so,"LI",{});var $ke=s(g4);DFe=n($ke,"STRONG",{});var D6t=s(DFe);Uwr=r(D6t,"blenderbot"),D6t.forEach(t),Jwr=r($ke," \u2014 "),yW=n($ke,"A",{href:!0});var G6t=s(yW);Ywr=r(G6t,"FlaxBlenderbotForConditionalGeneration"),G6t.forEach(t),Kwr=r($ke," (Blenderbot model)"),$ke.forEach(t),Zwr=i(so),h4=n(so,"LI",{});var Ike=s(h4);GFe=n(Ike,"STRONG",{});var O6t=s(GFe);eAr=r(O6t,"blenderbot-small"),O6t.forEach(t),oAr=r(Ike," \u2014 "),LW=n(Ike,"A",{href:!0});var V6t=s(LW);rAr=r(V6t,"FlaxBlenderbotSmallForConditionalGeneration"),V6t.forEach(t),tAr=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),aAr=i(so),p4=n(so,"LI",{});var qke=s(p4);OFe=n(qke,"STRONG",{});var X6t=s(OFe);nAr=r(X6t,"encoder-decoder"),X6t.forEach(t),sAr=r(qke," \u2014 "),xW=n(qke,"A",{href:!0});var z6t=s(xW);lAr=r(z6t,"FlaxEncoderDecoderModel"),z6t.forEach(t),iAr=r(qke," (Encoder decoder model)"),qke.forEach(t),dAr=i(so),_4=n(so,"LI",{});var Nke=s(_4);VFe=n(Nke,"STRONG",{});var Q6t=s(VFe);cAr=r(Q6t,"marian"),Q6t.forEach(t),fAr=r(Nke," \u2014 "),kW=n(Nke,"A",{href:!0});var W6t=s(kW);mAr=r(W6t,"FlaxMarianMTModel"),W6t.forEach(t),gAr=r(Nke," (Marian model)"),Nke.forEach(t),hAr=i(so),u4=n(so,"LI",{});var jke=s(u4);XFe=n(jke,"STRONG",{});var H6t=s(XFe);pAr=r(H6t,"mbart"),H6t.forEach(t),_Ar=r(jke," \u2014 "),SW=n(jke,"A",{href:!0});var U6t=s(SW);uAr=r(U6t,"FlaxMBartForConditionalGeneration"),U6t.forEach(t),bAr=r(jke," (mBART model)"),jke.forEach(t),FAr=i(so),b4=n(so,"LI",{});var Dke=s(b4);zFe=n(Dke,"STRONG",{});var J6t=s(zFe);vAr=r(J6t,"mt5"),J6t.forEach(t),TAr=r(Dke," \u2014 "),RW=n(Dke,"A",{href:!0});var Y6t=s(RW);MAr=r(Y6t,"FlaxMT5ForConditionalGeneration"),Y6t.forEach(t),EAr=r(Dke," (mT5 model)"),Dke.forEach(t),CAr=i(so),F4=n(so,"LI",{});var Gke=s(F4);QFe=n(Gke,"STRONG",{});var K6t=s(QFe);wAr=r(K6t,"pegasus"),K6t.forEach(t),AAr=r(Gke," \u2014 "),BW=n(Gke,"A",{href:!0});var Z6t=s(BW);yAr=r(Z6t,"FlaxPegasusForConditionalGeneration"),Z6t.forEach(t),LAr=r(Gke," (Pegasus model)"),Gke.forEach(t),xAr=i(so),v4=n(so,"LI",{});var Oke=s(v4);WFe=n(Oke,"STRONG",{});var eTt=s(WFe);kAr=r(eTt,"t5"),eTt.forEach(t),SAr=r(Oke," \u2014 "),PW=n(Oke,"A",{href:!0});var oTt=s(PW);RAr=r(oTt,"FlaxT5ForConditionalGeneration"),oTt.forEach(t),BAr=r(Oke," (T5 model)"),Oke.forEach(t),so.forEach(t),PAr=i(Ra),HFe=n(Ra,"P",{});var rTt=s(HFe);$Ar=r(rTt,"Examples:"),rTt.forEach(t),IAr=i(Ra),m(fL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),_Be=i(c),hf=n(c,"H2",{class:!0});var y$e=s(hf);T4=n(y$e,"A",{id:!0,class:!0,href:!0});var tTt=s(T4);UFe=n(tTt,"SPAN",{});var aTt=s(UFe);m(mL.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),qAr=i(y$e),JFe=n(y$e,"SPAN",{});var nTt=s(JFe);NAr=r(nTt,"FlaxAutoModelForSequenceClassification"),nTt.forEach(t),y$e.forEach(t),uBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(gL.$$.fragment,Mi),jAr=i(Mi),pf=n(Mi,"P",{});var TJ=s(pf);DAr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=n(TJ,"A",{href:!0});var sTt=s($W);GAr=r(sTt,"from_pretrained()"),sTt.forEach(t),OAr=r(TJ," class method or the "),IW=n(TJ,"A",{href:!0});var lTt=s(IW);VAr=r(lTt,"from_config()"),lTt.forEach(t),XAr=r(TJ,` class
method.`),TJ.forEach(t),zAr=i(Mi),hL=n(Mi,"P",{});var L$e=s(hL);QAr=r(L$e,"This class cannot be instantiated directly using "),YFe=n(L$e,"CODE",{});var iTt=s(YFe);WAr=r(iTt,"__init__()"),iTt.forEach(t),HAr=r(L$e," (throws an error)."),L$e.forEach(t),UAr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(pL.$$.fragment,Ei),JAr=i(Ei),KFe=n(Ei,"P",{});var dTt=s(KFe);YAr=r(dTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dTt.forEach(t),KAr=i(Ei),_f=n(Ei,"P",{});var MJ=s(_f);ZAr=r(MJ,`Note:
Loading a model from its configuration file does `),ZFe=n(MJ,"STRONG",{});var cTt=s(ZFe);e0r=r(cTt,"not"),cTt.forEach(t),o0r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(MJ,"A",{href:!0});var fTt=s(qW);r0r=r(fTt,"from_pretrained()"),fTt.forEach(t),t0r=r(MJ," to load the model weights."),MJ.forEach(t),a0r=i(Ei),eve=n(Ei,"P",{});var mTt=s(eve);n0r=r(mTt,"Examples:"),mTt.forEach(t),s0r=i(Ei),m(_L.$$.fragment,Ei),Ei.forEach(t),l0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(uL.$$.fragment,Ba),i0r=i(Ba),ove=n(Ba,"P",{});var gTt=s(ove);d0r=r(gTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gTt.forEach(t),c0r=i(Ba),Pn=n(Ba,"P",{});var sC=s(Pn);f0r=r(sC,"The model class to instantiate is selected based on the "),rve=n(sC,"CODE",{});var hTt=s(rve);m0r=r(hTt,"model_type"),hTt.forEach(t),g0r=r(sC,` property of the config object (either
passed as an argument or loaded from `),tve=n(sC,"CODE",{});var pTt=s(tve);h0r=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),p0r=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(sC,"CODE",{});var _Tt=s(ave);_0r=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),u0r=r(sC,":"),sC.forEach(t),b0r=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);M4=n(ye,"LI",{});var Vke=s(M4);nve=n(Vke,"STRONG",{});var uTt=s(nve);F0r=r(uTt,"albert"),uTt.forEach(t),v0r=r(Vke," \u2014 "),NW=n(Vke,"A",{href:!0});var bTt=s(NW);T0r=r(bTt,"FlaxAlbertForSequenceClassification"),bTt.forEach(t),M0r=r(Vke," (ALBERT model)"),Vke.forEach(t),E0r=i(ye),E4=n(ye,"LI",{});var Xke=s(E4);sve=n(Xke,"STRONG",{});var FTt=s(sve);C0r=r(FTt,"bart"),FTt.forEach(t),w0r=r(Xke," \u2014 "),jW=n(Xke,"A",{href:!0});var vTt=s(jW);A0r=r(vTt,"FlaxBartForSequenceClassification"),vTt.forEach(t),y0r=r(Xke," (BART model)"),Xke.forEach(t),L0r=i(ye),C4=n(ye,"LI",{});var zke=s(C4);lve=n(zke,"STRONG",{});var TTt=s(lve);x0r=r(TTt,"bert"),TTt.forEach(t),k0r=r(zke," \u2014 "),DW=n(zke,"A",{href:!0});var MTt=s(DW);S0r=r(MTt,"FlaxBertForSequenceClassification"),MTt.forEach(t),R0r=r(zke," (BERT model)"),zke.forEach(t),B0r=i(ye),w4=n(ye,"LI",{});var Qke=s(w4);ive=n(Qke,"STRONG",{});var ETt=s(ive);P0r=r(ETt,"big_bird"),ETt.forEach(t),$0r=r(Qke," \u2014 "),GW=n(Qke,"A",{href:!0});var CTt=s(GW);I0r=r(CTt,"FlaxBigBirdForSequenceClassification"),CTt.forEach(t),q0r=r(Qke," (BigBird model)"),Qke.forEach(t),N0r=i(ye),A4=n(ye,"LI",{});var Wke=s(A4);dve=n(Wke,"STRONG",{});var wTt=s(dve);j0r=r(wTt,"distilbert"),wTt.forEach(t),D0r=r(Wke," \u2014 "),OW=n(Wke,"A",{href:!0});var ATt=s(OW);G0r=r(ATt,"FlaxDistilBertForSequenceClassification"),ATt.forEach(t),O0r=r(Wke," (DistilBERT model)"),Wke.forEach(t),V0r=i(ye),y4=n(ye,"LI",{});var Hke=s(y4);cve=n(Hke,"STRONG",{});var yTt=s(cve);X0r=r(yTt,"electra"),yTt.forEach(t),z0r=r(Hke," \u2014 "),VW=n(Hke,"A",{href:!0});var LTt=s(VW);Q0r=r(LTt,"FlaxElectraForSequenceClassification"),LTt.forEach(t),W0r=r(Hke," (ELECTRA model)"),Hke.forEach(t),H0r=i(ye),L4=n(ye,"LI",{});var Uke=s(L4);fve=n(Uke,"STRONG",{});var xTt=s(fve);U0r=r(xTt,"mbart"),xTt.forEach(t),J0r=r(Uke," \u2014 "),XW=n(Uke,"A",{href:!0});var kTt=s(XW);Y0r=r(kTt,"FlaxMBartForSequenceClassification"),kTt.forEach(t),K0r=r(Uke," (mBART model)"),Uke.forEach(t),Z0r=i(ye),x4=n(ye,"LI",{});var Jke=s(x4);mve=n(Jke,"STRONG",{});var STt=s(mve);eyr=r(STt,"roberta"),STt.forEach(t),oyr=r(Jke," \u2014 "),zW=n(Jke,"A",{href:!0});var RTt=s(zW);ryr=r(RTt,"FlaxRobertaForSequenceClassification"),RTt.forEach(t),tyr=r(Jke," (RoBERTa model)"),Jke.forEach(t),ayr=i(ye),k4=n(ye,"LI",{});var Yke=s(k4);gve=n(Yke,"STRONG",{});var BTt=s(gve);nyr=r(BTt,"roformer"),BTt.forEach(t),syr=r(Yke," \u2014 "),QW=n(Yke,"A",{href:!0});var PTt=s(QW);lyr=r(PTt,"FlaxRoFormerForSequenceClassification"),PTt.forEach(t),iyr=r(Yke," (RoFormer model)"),Yke.forEach(t),dyr=i(ye),S4=n(ye,"LI",{});var Kke=s(S4);hve=n(Kke,"STRONG",{});var $Tt=s(hve);cyr=r($Tt,"xlm-roberta"),$Tt.forEach(t),fyr=r(Kke," \u2014 "),WW=n(Kke,"A",{href:!0});var ITt=s(WW);myr=r(ITt,"FlaxXLMRobertaForSequenceClassification"),ITt.forEach(t),gyr=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),ye.forEach(t),hyr=i(Ba),pve=n(Ba,"P",{});var qTt=s(pve);pyr=r(qTt,"Examples:"),qTt.forEach(t),_yr=i(Ba),m(bL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),bBe=i(c),uf=n(c,"H2",{class:!0});var x$e=s(uf);R4=n(x$e,"A",{id:!0,class:!0,href:!0});var NTt=s(R4);_ve=n(NTt,"SPAN",{});var jTt=s(_ve);m(FL.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),uyr=i(x$e),uve=n(x$e,"SPAN",{});var DTt=s(uve);byr=r(DTt,"FlaxAutoModelForQuestionAnswering"),DTt.forEach(t),x$e.forEach(t),FBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(vL.$$.fragment,Ci),Fyr=i(Ci),bf=n(Ci,"P",{});var EJ=s(bf);vyr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=n(EJ,"A",{href:!0});var GTt=s(HW);Tyr=r(GTt,"from_pretrained()"),GTt.forEach(t),Myr=r(EJ," class method or the "),UW=n(EJ,"A",{href:!0});var OTt=s(UW);Eyr=r(OTt,"from_config()"),OTt.forEach(t),Cyr=r(EJ,` class
method.`),EJ.forEach(t),wyr=i(Ci),TL=n(Ci,"P",{});var k$e=s(TL);Ayr=r(k$e,"This class cannot be instantiated directly using "),bve=n(k$e,"CODE",{});var VTt=s(bve);yyr=r(VTt,"__init__()"),VTt.forEach(t),Lyr=r(k$e," (throws an error)."),k$e.forEach(t),xyr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(ML.$$.fragment,wi),kyr=i(wi),Fve=n(wi,"P",{});var XTt=s(Fve);Syr=r(XTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XTt.forEach(t),Ryr=i(wi),Ff=n(wi,"P",{});var CJ=s(Ff);Byr=r(CJ,`Note:
Loading a model from its configuration file does `),vve=n(CJ,"STRONG",{});var zTt=s(vve);Pyr=r(zTt,"not"),zTt.forEach(t),$yr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(CJ,"A",{href:!0});var QTt=s(JW);Iyr=r(QTt,"from_pretrained()"),QTt.forEach(t),qyr=r(CJ," to load the model weights."),CJ.forEach(t),Nyr=i(wi),Tve=n(wi,"P",{});var WTt=s(Tve);jyr=r(WTt,"Examples:"),WTt.forEach(t),Dyr=i(wi),m(EL.$$.fragment,wi),wi.forEach(t),Gyr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(CL.$$.fragment,Pa),Oyr=i(Pa),Mve=n(Pa,"P",{});var HTt=s(Mve);Vyr=r(HTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HTt.forEach(t),Xyr=i(Pa),$n=n(Pa,"P",{});var lC=s($n);zyr=r(lC,"The model class to instantiate is selected based on the "),Eve=n(lC,"CODE",{});var UTt=s(Eve);Qyr=r(UTt,"model_type"),UTt.forEach(t),Wyr=r(lC,` property of the config object (either
passed as an argument or loaded from `),Cve=n(lC,"CODE",{});var JTt=s(Cve);Hyr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),Uyr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(lC,"CODE",{});var YTt=s(wve);Jyr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),Yyr=r(lC,":"),lC.forEach(t),Kyr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);B4=n(Le,"LI",{});var Zke=s(B4);Ave=n(Zke,"STRONG",{});var KTt=s(Ave);Zyr=r(KTt,"albert"),KTt.forEach(t),eLr=r(Zke," \u2014 "),YW=n(Zke,"A",{href:!0});var ZTt=s(YW);oLr=r(ZTt,"FlaxAlbertForQuestionAnswering"),ZTt.forEach(t),rLr=r(Zke," (ALBERT model)"),Zke.forEach(t),tLr=i(Le),P4=n(Le,"LI",{});var eSe=s(P4);yve=n(eSe,"STRONG",{});var e7t=s(yve);aLr=r(e7t,"bart"),e7t.forEach(t),nLr=r(eSe," \u2014 "),KW=n(eSe,"A",{href:!0});var o7t=s(KW);sLr=r(o7t,"FlaxBartForQuestionAnswering"),o7t.forEach(t),lLr=r(eSe," (BART model)"),eSe.forEach(t),iLr=i(Le),$4=n(Le,"LI",{});var oSe=s($4);Lve=n(oSe,"STRONG",{});var r7t=s(Lve);dLr=r(r7t,"bert"),r7t.forEach(t),cLr=r(oSe," \u2014 "),ZW=n(oSe,"A",{href:!0});var t7t=s(ZW);fLr=r(t7t,"FlaxBertForQuestionAnswering"),t7t.forEach(t),mLr=r(oSe," (BERT model)"),oSe.forEach(t),gLr=i(Le),I4=n(Le,"LI",{});var rSe=s(I4);xve=n(rSe,"STRONG",{});var a7t=s(xve);hLr=r(a7t,"big_bird"),a7t.forEach(t),pLr=r(rSe," \u2014 "),eH=n(rSe,"A",{href:!0});var n7t=s(eH);_Lr=r(n7t,"FlaxBigBirdForQuestionAnswering"),n7t.forEach(t),uLr=r(rSe," (BigBird model)"),rSe.forEach(t),bLr=i(Le),q4=n(Le,"LI",{});var tSe=s(q4);kve=n(tSe,"STRONG",{});var s7t=s(kve);FLr=r(s7t,"distilbert"),s7t.forEach(t),vLr=r(tSe," \u2014 "),oH=n(tSe,"A",{href:!0});var l7t=s(oH);TLr=r(l7t,"FlaxDistilBertForQuestionAnswering"),l7t.forEach(t),MLr=r(tSe," (DistilBERT model)"),tSe.forEach(t),ELr=i(Le),N4=n(Le,"LI",{});var aSe=s(N4);Sve=n(aSe,"STRONG",{});var i7t=s(Sve);CLr=r(i7t,"electra"),i7t.forEach(t),wLr=r(aSe," \u2014 "),rH=n(aSe,"A",{href:!0});var d7t=s(rH);ALr=r(d7t,"FlaxElectraForQuestionAnswering"),d7t.forEach(t),yLr=r(aSe," (ELECTRA model)"),aSe.forEach(t),LLr=i(Le),j4=n(Le,"LI",{});var nSe=s(j4);Rve=n(nSe,"STRONG",{});var c7t=s(Rve);xLr=r(c7t,"mbart"),c7t.forEach(t),kLr=r(nSe," \u2014 "),tH=n(nSe,"A",{href:!0});var f7t=s(tH);SLr=r(f7t,"FlaxMBartForQuestionAnswering"),f7t.forEach(t),RLr=r(nSe," (mBART model)"),nSe.forEach(t),BLr=i(Le),D4=n(Le,"LI",{});var sSe=s(D4);Bve=n(sSe,"STRONG",{});var m7t=s(Bve);PLr=r(m7t,"roberta"),m7t.forEach(t),$Lr=r(sSe," \u2014 "),aH=n(sSe,"A",{href:!0});var g7t=s(aH);ILr=r(g7t,"FlaxRobertaForQuestionAnswering"),g7t.forEach(t),qLr=r(sSe," (RoBERTa model)"),sSe.forEach(t),NLr=i(Le),G4=n(Le,"LI",{});var lSe=s(G4);Pve=n(lSe,"STRONG",{});var h7t=s(Pve);jLr=r(h7t,"roformer"),h7t.forEach(t),DLr=r(lSe," \u2014 "),nH=n(lSe,"A",{href:!0});var p7t=s(nH);GLr=r(p7t,"FlaxRoFormerForQuestionAnswering"),p7t.forEach(t),OLr=r(lSe," (RoFormer model)"),lSe.forEach(t),VLr=i(Le),O4=n(Le,"LI",{});var iSe=s(O4);$ve=n(iSe,"STRONG",{});var _7t=s($ve);XLr=r(_7t,"xlm-roberta"),_7t.forEach(t),zLr=r(iSe," \u2014 "),sH=n(iSe,"A",{href:!0});var u7t=s(sH);QLr=r(u7t,"FlaxXLMRobertaForQuestionAnswering"),u7t.forEach(t),WLr=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),Le.forEach(t),HLr=i(Pa),Ive=n(Pa,"P",{});var b7t=s(Ive);ULr=r(b7t,"Examples:"),b7t.forEach(t),JLr=i(Pa),m(wL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),vBe=i(c),vf=n(c,"H2",{class:!0});var S$e=s(vf);V4=n(S$e,"A",{id:!0,class:!0,href:!0});var F7t=s(V4);qve=n(F7t,"SPAN",{});var v7t=s(qve);m(AL.$$.fragment,v7t),v7t.forEach(t),F7t.forEach(t),YLr=i(S$e),Nve=n(S$e,"SPAN",{});var T7t=s(Nve);KLr=r(T7t,"FlaxAutoModelForTokenClassification"),T7t.forEach(t),S$e.forEach(t),TBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(yL.$$.fragment,Ai),ZLr=i(Ai),Tf=n(Ai,"P",{});var wJ=s(Tf);e8r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lH=n(wJ,"A",{href:!0});var M7t=s(lH);o8r=r(M7t,"from_pretrained()"),M7t.forEach(t),r8r=r(wJ," class method or the "),iH=n(wJ,"A",{href:!0});var E7t=s(iH);t8r=r(E7t,"from_config()"),E7t.forEach(t),a8r=r(wJ,` class
method.`),wJ.forEach(t),n8r=i(Ai),LL=n(Ai,"P",{});var R$e=s(LL);s8r=r(R$e,"This class cannot be instantiated directly using "),jve=n(R$e,"CODE",{});var C7t=s(jve);l8r=r(C7t,"__init__()"),C7t.forEach(t),i8r=r(R$e," (throws an error)."),R$e.forEach(t),d8r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(xL.$$.fragment,yi),c8r=i(yi),Dve=n(yi,"P",{});var w7t=s(Dve);f8r=r(w7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w7t.forEach(t),m8r=i(yi),Mf=n(yi,"P",{});var AJ=s(Mf);g8r=r(AJ,`Note:
Loading a model from its configuration file does `),Gve=n(AJ,"STRONG",{});var A7t=s(Gve);h8r=r(A7t,"not"),A7t.forEach(t),p8r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(AJ,"A",{href:!0});var y7t=s(dH);_8r=r(y7t,"from_pretrained()"),y7t.forEach(t),u8r=r(AJ," to load the model weights."),AJ.forEach(t),b8r=i(yi),Ove=n(yi,"P",{});var L7t=s(Ove);F8r=r(L7t,"Examples:"),L7t.forEach(t),v8r=i(yi),m(kL.$$.fragment,yi),yi.forEach(t),T8r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(SL.$$.fragment,$a),M8r=i($a),Vve=n($a,"P",{});var x7t=s(Vve);E8r=r(x7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x7t.forEach(t),C8r=i($a),In=n($a,"P",{});var iC=s(In);w8r=r(iC,"The model class to instantiate is selected based on the "),Xve=n(iC,"CODE",{});var k7t=s(Xve);A8r=r(k7t,"model_type"),k7t.forEach(t),y8r=r(iC,` property of the config object (either
passed as an argument or loaded from `),zve=n(iC,"CODE",{});var S7t=s(zve);L8r=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),x8r=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(iC,"CODE",{});var R7t=s(Qve);k8r=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),S8r=r(iC,":"),iC.forEach(t),R8r=i($a),Be=n($a,"UL",{});var Oo=s(Be);X4=n(Oo,"LI",{});var dSe=s(X4);Wve=n(dSe,"STRONG",{});var B7t=s(Wve);B8r=r(B7t,"albert"),B7t.forEach(t),P8r=r(dSe," \u2014 "),cH=n(dSe,"A",{href:!0});var P7t=s(cH);$8r=r(P7t,"FlaxAlbertForTokenClassification"),P7t.forEach(t),I8r=r(dSe," (ALBERT model)"),dSe.forEach(t),q8r=i(Oo),z4=n(Oo,"LI",{});var cSe=s(z4);Hve=n(cSe,"STRONG",{});var $7t=s(Hve);N8r=r($7t,"bert"),$7t.forEach(t),j8r=r(cSe," \u2014 "),fH=n(cSe,"A",{href:!0});var I7t=s(fH);D8r=r(I7t,"FlaxBertForTokenClassification"),I7t.forEach(t),G8r=r(cSe," (BERT model)"),cSe.forEach(t),O8r=i(Oo),Q4=n(Oo,"LI",{});var fSe=s(Q4);Uve=n(fSe,"STRONG",{});var q7t=s(Uve);V8r=r(q7t,"big_bird"),q7t.forEach(t),X8r=r(fSe," \u2014 "),mH=n(fSe,"A",{href:!0});var N7t=s(mH);z8r=r(N7t,"FlaxBigBirdForTokenClassification"),N7t.forEach(t),Q8r=r(fSe," (BigBird model)"),fSe.forEach(t),W8r=i(Oo),W4=n(Oo,"LI",{});var mSe=s(W4);Jve=n(mSe,"STRONG",{});var j7t=s(Jve);H8r=r(j7t,"distilbert"),j7t.forEach(t),U8r=r(mSe," \u2014 "),gH=n(mSe,"A",{href:!0});var D7t=s(gH);J8r=r(D7t,"FlaxDistilBertForTokenClassification"),D7t.forEach(t),Y8r=r(mSe," (DistilBERT model)"),mSe.forEach(t),K8r=i(Oo),H4=n(Oo,"LI",{});var gSe=s(H4);Yve=n(gSe,"STRONG",{});var G7t=s(Yve);Z8r=r(G7t,"electra"),G7t.forEach(t),e9r=r(gSe," \u2014 "),hH=n(gSe,"A",{href:!0});var O7t=s(hH);o9r=r(O7t,"FlaxElectraForTokenClassification"),O7t.forEach(t),r9r=r(gSe," (ELECTRA model)"),gSe.forEach(t),t9r=i(Oo),U4=n(Oo,"LI",{});var hSe=s(U4);Kve=n(hSe,"STRONG",{});var V7t=s(Kve);a9r=r(V7t,"roberta"),V7t.forEach(t),n9r=r(hSe," \u2014 "),pH=n(hSe,"A",{href:!0});var X7t=s(pH);s9r=r(X7t,"FlaxRobertaForTokenClassification"),X7t.forEach(t),l9r=r(hSe," (RoBERTa model)"),hSe.forEach(t),i9r=i(Oo),J4=n(Oo,"LI",{});var pSe=s(J4);Zve=n(pSe,"STRONG",{});var z7t=s(Zve);d9r=r(z7t,"roformer"),z7t.forEach(t),c9r=r(pSe," \u2014 "),_H=n(pSe,"A",{href:!0});var Q7t=s(_H);f9r=r(Q7t,"FlaxRoFormerForTokenClassification"),Q7t.forEach(t),m9r=r(pSe," (RoFormer model)"),pSe.forEach(t),g9r=i(Oo),Y4=n(Oo,"LI",{});var _Se=s(Y4);e6e=n(_Se,"STRONG",{});var W7t=s(e6e);h9r=r(W7t,"xlm-roberta"),W7t.forEach(t),p9r=r(_Se," \u2014 "),uH=n(_Se,"A",{href:!0});var H7t=s(uH);_9r=r(H7t,"FlaxXLMRobertaForTokenClassification"),H7t.forEach(t),u9r=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),Oo.forEach(t),b9r=i($a),o6e=n($a,"P",{});var U7t=s(o6e);F9r=r(U7t,"Examples:"),U7t.forEach(t),v9r=i($a),m(RL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),MBe=i(c),Ef=n(c,"H2",{class:!0});var B$e=s(Ef);K4=n(B$e,"A",{id:!0,class:!0,href:!0});var J7t=s(K4);r6e=n(J7t,"SPAN",{});var Y7t=s(r6e);m(BL.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),T9r=i(B$e),t6e=n(B$e,"SPAN",{});var K7t=s(t6e);M9r=r(K7t,"FlaxAutoModelForMultipleChoice"),K7t.forEach(t),B$e.forEach(t),EBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(PL.$$.fragment,Li),E9r=i(Li),Cf=n(Li,"P",{});var yJ=s(Cf);C9r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=n(yJ,"A",{href:!0});var Z7t=s(bH);w9r=r(Z7t,"from_pretrained()"),Z7t.forEach(t),A9r=r(yJ," class method or the "),FH=n(yJ,"A",{href:!0});var eMt=s(FH);y9r=r(eMt,"from_config()"),eMt.forEach(t),L9r=r(yJ,` class
method.`),yJ.forEach(t),x9r=i(Li),$L=n(Li,"P",{});var P$e=s($L);k9r=r(P$e,"This class cannot be instantiated directly using "),a6e=n(P$e,"CODE",{});var oMt=s(a6e);S9r=r(oMt,"__init__()"),oMt.forEach(t),R9r=r(P$e," (throws an error)."),P$e.forEach(t),B9r=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(IL.$$.fragment,xi),P9r=i(xi),n6e=n(xi,"P",{});var rMt=s(n6e);$9r=r(rMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rMt.forEach(t),I9r=i(xi),wf=n(xi,"P",{});var LJ=s(wf);q9r=r(LJ,`Note:
Loading a model from its configuration file does `),s6e=n(LJ,"STRONG",{});var tMt=s(s6e);N9r=r(tMt,"not"),tMt.forEach(t),j9r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(LJ,"A",{href:!0});var aMt=s(vH);D9r=r(aMt,"from_pretrained()"),aMt.forEach(t),G9r=r(LJ," to load the model weights."),LJ.forEach(t),O9r=i(xi),l6e=n(xi,"P",{});var nMt=s(l6e);V9r=r(nMt,"Examples:"),nMt.forEach(t),X9r=i(xi),m(qL.$$.fragment,xi),xi.forEach(t),z9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(NL.$$.fragment,Ia),Q9r=i(Ia),i6e=n(Ia,"P",{});var sMt=s(i6e);W9r=r(sMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sMt.forEach(t),H9r=i(Ia),qn=n(Ia,"P",{});var dC=s(qn);U9r=r(dC,"The model class to instantiate is selected based on the "),d6e=n(dC,"CODE",{});var lMt=s(d6e);J9r=r(lMt,"model_type"),lMt.forEach(t),Y9r=r(dC,` property of the config object (either
passed as an argument or loaded from `),c6e=n(dC,"CODE",{});var iMt=s(c6e);K9r=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),Z9r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(dC,"CODE",{});var dMt=s(f6e);exr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),oxr=r(dC,":"),dC.forEach(t),rxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);Z4=n(Vo,"LI",{});var uSe=s(Z4);m6e=n(uSe,"STRONG",{});var cMt=s(m6e);txr=r(cMt,"albert"),cMt.forEach(t),axr=r(uSe," \u2014 "),TH=n(uSe,"A",{href:!0});var fMt=s(TH);nxr=r(fMt,"FlaxAlbertForMultipleChoice"),fMt.forEach(t),sxr=r(uSe," (ALBERT model)"),uSe.forEach(t),lxr=i(Vo),eE=n(Vo,"LI",{});var bSe=s(eE);g6e=n(bSe,"STRONG",{});var mMt=s(g6e);ixr=r(mMt,"bert"),mMt.forEach(t),dxr=r(bSe," \u2014 "),MH=n(bSe,"A",{href:!0});var gMt=s(MH);cxr=r(gMt,"FlaxBertForMultipleChoice"),gMt.forEach(t),fxr=r(bSe," (BERT model)"),bSe.forEach(t),mxr=i(Vo),oE=n(Vo,"LI",{});var FSe=s(oE);h6e=n(FSe,"STRONG",{});var hMt=s(h6e);gxr=r(hMt,"big_bird"),hMt.forEach(t),hxr=r(FSe," \u2014 "),EH=n(FSe,"A",{href:!0});var pMt=s(EH);pxr=r(pMt,"FlaxBigBirdForMultipleChoice"),pMt.forEach(t),_xr=r(FSe," (BigBird model)"),FSe.forEach(t),uxr=i(Vo),rE=n(Vo,"LI",{});var vSe=s(rE);p6e=n(vSe,"STRONG",{});var _Mt=s(p6e);bxr=r(_Mt,"distilbert"),_Mt.forEach(t),Fxr=r(vSe," \u2014 "),CH=n(vSe,"A",{href:!0});var uMt=s(CH);vxr=r(uMt,"FlaxDistilBertForMultipleChoice"),uMt.forEach(t),Txr=r(vSe," (DistilBERT model)"),vSe.forEach(t),Mxr=i(Vo),tE=n(Vo,"LI",{});var TSe=s(tE);_6e=n(TSe,"STRONG",{});var bMt=s(_6e);Exr=r(bMt,"electra"),bMt.forEach(t),Cxr=r(TSe," \u2014 "),wH=n(TSe,"A",{href:!0});var FMt=s(wH);wxr=r(FMt,"FlaxElectraForMultipleChoice"),FMt.forEach(t),Axr=r(TSe," (ELECTRA model)"),TSe.forEach(t),yxr=i(Vo),aE=n(Vo,"LI",{});var MSe=s(aE);u6e=n(MSe,"STRONG",{});var vMt=s(u6e);Lxr=r(vMt,"roberta"),vMt.forEach(t),xxr=r(MSe," \u2014 "),AH=n(MSe,"A",{href:!0});var TMt=s(AH);kxr=r(TMt,"FlaxRobertaForMultipleChoice"),TMt.forEach(t),Sxr=r(MSe," (RoBERTa model)"),MSe.forEach(t),Rxr=i(Vo),nE=n(Vo,"LI",{});var ESe=s(nE);b6e=n(ESe,"STRONG",{});var MMt=s(b6e);Bxr=r(MMt,"roformer"),MMt.forEach(t),Pxr=r(ESe," \u2014 "),yH=n(ESe,"A",{href:!0});var EMt=s(yH);$xr=r(EMt,"FlaxRoFormerForMultipleChoice"),EMt.forEach(t),Ixr=r(ESe," (RoFormer model)"),ESe.forEach(t),qxr=i(Vo),sE=n(Vo,"LI",{});var CSe=s(sE);F6e=n(CSe,"STRONG",{});var CMt=s(F6e);Nxr=r(CMt,"xlm-roberta"),CMt.forEach(t),jxr=r(CSe," \u2014 "),LH=n(CSe,"A",{href:!0});var wMt=s(LH);Dxr=r(wMt,"FlaxXLMRobertaForMultipleChoice"),wMt.forEach(t),Gxr=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Vo.forEach(t),Oxr=i(Ia),v6e=n(Ia,"P",{});var AMt=s(v6e);Vxr=r(AMt,"Examples:"),AMt.forEach(t),Xxr=i(Ia),m(jL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),CBe=i(c),Af=n(c,"H2",{class:!0});var $$e=s(Af);lE=n($$e,"A",{id:!0,class:!0,href:!0});var yMt=s(lE);T6e=n(yMt,"SPAN",{});var LMt=s(T6e);m(DL.$$.fragment,LMt),LMt.forEach(t),yMt.forEach(t),zxr=i($$e),M6e=n($$e,"SPAN",{});var xMt=s(M6e);Qxr=r(xMt,"FlaxAutoModelForNextSentencePrediction"),xMt.forEach(t),$$e.forEach(t),wBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(GL.$$.fragment,ki),Wxr=i(ki),yf=n(ki,"P",{});var xJ=s(yf);Hxr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=n(xJ,"A",{href:!0});var kMt=s(xH);Uxr=r(kMt,"from_pretrained()"),kMt.forEach(t),Jxr=r(xJ," class method or the "),kH=n(xJ,"A",{href:!0});var SMt=s(kH);Yxr=r(SMt,"from_config()"),SMt.forEach(t),Kxr=r(xJ,` class
method.`),xJ.forEach(t),Zxr=i(ki),OL=n(ki,"P",{});var I$e=s(OL);ekr=r(I$e,"This class cannot be instantiated directly using "),E6e=n(I$e,"CODE",{});var RMt=s(E6e);okr=r(RMt,"__init__()"),RMt.forEach(t),rkr=r(I$e," (throws an error)."),I$e.forEach(t),tkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(VL.$$.fragment,Si),akr=i(Si),C6e=n(Si,"P",{});var BMt=s(C6e);nkr=r(BMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BMt.forEach(t),skr=i(Si),Lf=n(Si,"P",{});var kJ=s(Lf);lkr=r(kJ,`Note:
Loading a model from its configuration file does `),w6e=n(kJ,"STRONG",{});var PMt=s(w6e);ikr=r(PMt,"not"),PMt.forEach(t),dkr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(kJ,"A",{href:!0});var $Mt=s(SH);ckr=r($Mt,"from_pretrained()"),$Mt.forEach(t),fkr=r(kJ," to load the model weights."),kJ.forEach(t),mkr=i(Si),A6e=n(Si,"P",{});var IMt=s(A6e);gkr=r(IMt,"Examples:"),IMt.forEach(t),hkr=i(Si),m(XL.$$.fragment,Si),Si.forEach(t),pkr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(zL.$$.fragment,qa),_kr=i(qa),y6e=n(qa,"P",{});var qMt=s(y6e);ukr=r(qMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qMt.forEach(t),bkr=i(qa),Nn=n(qa,"P",{});var cC=s(Nn);Fkr=r(cC,"The model class to instantiate is selected based on the "),L6e=n(cC,"CODE",{});var NMt=s(L6e);vkr=r(NMt,"model_type"),NMt.forEach(t),Tkr=r(cC,` property of the config object (either
passed as an argument or loaded from `),x6e=n(cC,"CODE",{});var jMt=s(x6e);Mkr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),Ekr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(cC,"CODE",{});var DMt=s(k6e);Ckr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),wkr=r(cC,":"),cC.forEach(t),Akr=i(qa),S6e=n(qa,"UL",{});var GMt=s(S6e);iE=n(GMt,"LI",{});var wSe=s(iE);R6e=n(wSe,"STRONG",{});var OMt=s(R6e);ykr=r(OMt,"bert"),OMt.forEach(t),Lkr=r(wSe," \u2014 "),RH=n(wSe,"A",{href:!0});var VMt=s(RH);xkr=r(VMt,"FlaxBertForNextSentencePrediction"),VMt.forEach(t),kkr=r(wSe," (BERT model)"),wSe.forEach(t),GMt.forEach(t),Skr=i(qa),B6e=n(qa,"P",{});var XMt=s(B6e);Rkr=r(XMt,"Examples:"),XMt.forEach(t),Bkr=i(qa),m(QL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),ABe=i(c),xf=n(c,"H2",{class:!0});var q$e=s(xf);dE=n(q$e,"A",{id:!0,class:!0,href:!0});var zMt=s(dE);P6e=n(zMt,"SPAN",{});var QMt=s(P6e);m(WL.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),Pkr=i(q$e),$6e=n(q$e,"SPAN",{});var WMt=s($6e);$kr=r(WMt,"FlaxAutoModelForImageClassification"),WMt.forEach(t),q$e.forEach(t),yBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(HL.$$.fragment,Ri),Ikr=i(Ri),kf=n(Ri,"P",{});var SJ=s(kf);qkr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BH=n(SJ,"A",{href:!0});var HMt=s(BH);Nkr=r(HMt,"from_pretrained()"),HMt.forEach(t),jkr=r(SJ," class method or the "),PH=n(SJ,"A",{href:!0});var UMt=s(PH);Dkr=r(UMt,"from_config()"),UMt.forEach(t),Gkr=r(SJ,` class
method.`),SJ.forEach(t),Okr=i(Ri),UL=n(Ri,"P",{});var N$e=s(UL);Vkr=r(N$e,"This class cannot be instantiated directly using "),I6e=n(N$e,"CODE",{});var JMt=s(I6e);Xkr=r(JMt,"__init__()"),JMt.forEach(t),zkr=r(N$e," (throws an error)."),N$e.forEach(t),Qkr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(JL.$$.fragment,Bi),Wkr=i(Bi),q6e=n(Bi,"P",{});var YMt=s(q6e);Hkr=r(YMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YMt.forEach(t),Ukr=i(Bi),Sf=n(Bi,"P",{});var RJ=s(Sf);Jkr=r(RJ,`Note:
Loading a model from its configuration file does `),N6e=n(RJ,"STRONG",{});var KMt=s(N6e);Ykr=r(KMt,"not"),KMt.forEach(t),Kkr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(RJ,"A",{href:!0});var ZMt=s($H);Zkr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),eSr=r(RJ," to load the model weights."),RJ.forEach(t),oSr=i(Bi),j6e=n(Bi,"P",{});var e4t=s(j6e);rSr=r(e4t,"Examples:"),e4t.forEach(t),tSr=i(Bi),m(YL.$$.fragment,Bi),Bi.forEach(t),aSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(KL.$$.fragment,Na),nSr=i(Na),D6e=n(Na,"P",{});var o4t=s(D6e);sSr=r(o4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o4t.forEach(t),lSr=i(Na),jn=n(Na,"P",{});var fC=s(jn);iSr=r(fC,"The model class to instantiate is selected based on the "),G6e=n(fC,"CODE",{});var r4t=s(G6e);dSr=r(r4t,"model_type"),r4t.forEach(t),cSr=r(fC,` property of the config object (either
passed as an argument or loaded from `),O6e=n(fC,"CODE",{});var t4t=s(O6e);fSr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),mSr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=n(fC,"CODE",{});var a4t=s(V6e);gSr=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),hSr=r(fC,":"),fC.forEach(t),pSr=i(Na),ZL=n(Na,"UL",{});var j$e=s(ZL);cE=n(j$e,"LI",{});var ASe=s(cE);X6e=n(ASe,"STRONG",{});var n4t=s(X6e);_Sr=r(n4t,"beit"),n4t.forEach(t),uSr=r(ASe," \u2014 "),IH=n(ASe,"A",{href:!0});var s4t=s(IH);bSr=r(s4t,"FlaxBeitForImageClassification"),s4t.forEach(t),FSr=r(ASe," (BEiT model)"),ASe.forEach(t),vSr=i(j$e),fE=n(j$e,"LI",{});var ySe=s(fE);z6e=n(ySe,"STRONG",{});var l4t=s(z6e);TSr=r(l4t,"vit"),l4t.forEach(t),MSr=r(ySe," \u2014 "),qH=n(ySe,"A",{href:!0});var i4t=s(qH);ESr=r(i4t,"FlaxViTForImageClassification"),i4t.forEach(t),CSr=r(ySe," (ViT model)"),ySe.forEach(t),j$e.forEach(t),wSr=i(Na),Q6e=n(Na,"P",{});var d4t=s(Q6e);ASr=r(d4t,"Examples:"),d4t.forEach(t),ySr=i(Na),m(e8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),LBe=i(c),Rf=n(c,"H2",{class:!0});var D$e=s(Rf);mE=n(D$e,"A",{id:!0,class:!0,href:!0});var c4t=s(mE);W6e=n(c4t,"SPAN",{});var f4t=s(W6e);m(o8.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),LSr=i(D$e),H6e=n(D$e,"SPAN",{});var m4t=s(H6e);xSr=r(m4t,"FlaxAutoModelForVision2Seq"),m4t.forEach(t),D$e.forEach(t),xBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(r8.$$.fragment,Pi),kSr=i(Pi),Bf=n(Pi,"P",{});var BJ=s(Bf);SSr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=n(BJ,"A",{href:!0});var g4t=s(NH);RSr=r(g4t,"from_pretrained()"),g4t.forEach(t),BSr=r(BJ," class method or the "),jH=n(BJ,"A",{href:!0});var h4t=s(jH);PSr=r(h4t,"from_config()"),h4t.forEach(t),$Sr=r(BJ,` class
method.`),BJ.forEach(t),ISr=i(Pi),t8=n(Pi,"P",{});var G$e=s(t8);qSr=r(G$e,"This class cannot be instantiated directly using "),U6e=n(G$e,"CODE",{});var p4t=s(U6e);NSr=r(p4t,"__init__()"),p4t.forEach(t),jSr=r(G$e," (throws an error)."),G$e.forEach(t),DSr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(a8.$$.fragment,$i),GSr=i($i),J6e=n($i,"P",{});var _4t=s(J6e);OSr=r(_4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_4t.forEach(t),VSr=i($i),Pf=n($i,"P",{});var PJ=s(Pf);XSr=r(PJ,`Note:
Loading a model from its configuration file does `),Y6e=n(PJ,"STRONG",{});var u4t=s(Y6e);zSr=r(u4t,"not"),u4t.forEach(t),QSr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(PJ,"A",{href:!0});var b4t=s(DH);WSr=r(b4t,"from_pretrained()"),b4t.forEach(t),HSr=r(PJ," to load the model weights."),PJ.forEach(t),USr=i($i),K6e=n($i,"P",{});var F4t=s(K6e);JSr=r(F4t,"Examples:"),F4t.forEach(t),YSr=i($i),m(n8.$$.fragment,$i),$i.forEach(t),KSr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(s8.$$.fragment,ja),ZSr=i(ja),Z6e=n(ja,"P",{});var v4t=s(Z6e);eRr=r(v4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v4t.forEach(t),oRr=i(ja),Dn=n(ja,"P",{});var mC=s(Dn);rRr=r(mC,"The model class to instantiate is selected based on the "),eTe=n(mC,"CODE",{});var T4t=s(eTe);tRr=r(T4t,"model_type"),T4t.forEach(t),aRr=r(mC,` property of the config object (either
passed as an argument or loaded from `),oTe=n(mC,"CODE",{});var M4t=s(oTe);nRr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),sRr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(mC,"CODE",{});var E4t=s(rTe);lRr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),iRr=r(mC,":"),mC.forEach(t),dRr=i(ja),tTe=n(ja,"UL",{});var C4t=s(tTe);gE=n(C4t,"LI",{});var LSe=s(gE);aTe=n(LSe,"STRONG",{});var w4t=s(aTe);cRr=r(w4t,"vision-encoder-decoder"),w4t.forEach(t),fRr=r(LSe," \u2014 "),GH=n(LSe,"A",{href:!0});var A4t=s(GH);mRr=r(A4t,"FlaxVisionEncoderDecoderModel"),A4t.forEach(t),gRr=r(LSe," (Vision Encoder decoder model)"),LSe.forEach(t),C4t.forEach(t),hRr=i(ja),nTe=n(ja,"P",{});var y4t=s(nTe);pRr=r(y4t,"Examples:"),y4t.forEach(t),_Rr=i(ja),m(l8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(q4t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(f9,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(m9,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertConfig"),d(g9,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartConfig"),d(h9,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitConfig"),d(p9,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertConfig"),d(_9,"href","/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(u9,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdConfig"),d(b9,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(F9,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(v9,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(T9,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertConfig"),d(M9,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineConfig"),d(E9,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPConfig"),d(C9,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertConfig"),d(w9,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextConfig"),d(A9,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLConfig"),d(y9,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(L9,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(x9,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaConfig"),d(k9,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(S9,"href","/docs/transformers/pr_16371/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(R9,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTConfig"),d(B9,"href","/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrConfig"),d(P9,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertConfig"),d($9,"href","/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRConfig"),d(I9,"href","/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTConfig"),d(q9,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraConfig"),d(N9,"href","/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(j9,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertConfig"),d(D9,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetConfig"),d(G9,"href","/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTConfig"),d(O9,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelConfig"),d(V9,"href","/docs/transformers/pr_16371/en/model_doc/glpn#transformers.GLPNConfig"),d(X9,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Config"),d(z9,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Q9,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJConfig"),d(W9,"href","/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertConfig"),d(H9,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertConfig"),d(U9,"href","/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(J9,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Y9,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(K9,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDConfig"),d(Z9,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerConfig"),d(ex,"href","/docs/transformers/pr_16371/en/model_doc/luke#transformers.LukeConfig"),d(ox,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertConfig"),d(rx,"href","/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Config"),d(tx,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianConfig"),d(ax,"href","/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(nx,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartConfig"),d(sx,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lx,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(ix,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetConfig"),d(dx,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Config"),d(cx,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(fx,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(mx,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusConfig"),d(gx,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverConfig"),d(hx,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartConfig"),d(px,"href","/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(_x,"href","/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(ux,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(bx,"href","/docs/transformers/pr_16371/en/model_doc/rag#transformers.RagConfig"),d(Fx,"href","/docs/transformers/pr_16371/en/model_doc/realm#transformers.RealmConfig"),d(vx,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerConfig"),d(Tx,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertConfig"),d(Mx,"href","/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetConfig"),d(Ex,"href","/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertConfig"),d(Cx,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaConfig"),d(wx,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerConfig"),d(Ax,"href","/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerConfig"),d(yx,"href","/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWConfig"),d(Lx,"href","/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDConfig"),d(xx,"href","/docs/transformers/pr_16371/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(kx,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Sx,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Rx,"href","/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterConfig"),d(Bx,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Px,"href","/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinConfig"),d($x,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Config"),d(Ix,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasConfig"),d(qx,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Nx,"href","/docs/transformers/pr_16371/en/model_doc/trocr#transformers.TrOCRConfig"),d(jx,"href","/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Dx,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Gx,"href","/docs/transformers/pr_16371/en/model_doc/van#transformers.VanConfig"),d(Ox,"href","/docs/transformers/pr_16371/en/model_doc/vilt#transformers.ViltConfig"),d(Vx,"href","/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Xx,"href","/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(zx,"href","/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Qx,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTConfig"),d(Wx,"href","/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Hx,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Ux,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMConfig"),d(Jx,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMConfig"),d(Yx,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMConfig"),d(Kx,"href","/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Zx,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ek,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ok,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetConfig"),d(rk,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(tk,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ak,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertTokenizer"),d(nk,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(sk,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartTokenizer"),d(lk,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartTokenizerFast"),d(ik,"href","/docs/transformers/pr_16371/en/model_doc/barthez#transformers.BarthezTokenizer"),d(dk,"href","/docs/transformers/pr_16371/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ck,"href","/docs/transformers/pr_16371/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(fk,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertTokenizer"),d(mk,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertTokenizerFast"),d(gk,"href","/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(hk,"href","/docs/transformers/pr_16371/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(pk,"href","/docs/transformers/pr_16371/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(_k,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(uk,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(bk,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Fk,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vk,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Tk,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ek,"href","/docs/transformers/pr_16371/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ck,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertTokenizer"),d(wk,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineTokenizer"),d(yk,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPTokenizer"),d(Lk,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(xk,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(kk,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16371/en/model_doc/cpm#transformers.CpmTokenizer"),d(Rk,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Bk,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Pk,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d($k,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Ik,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(qk,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jk,"href","/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraTokenizer"),d(Gk,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Vk,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetTokenizer"),d(Xk,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(zk,"href","/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Qk,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Wk,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Uk,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Jk,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yk,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kk,"href","/docs/transformers/pr_16371/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Zk,"href","/docs/transformers/pr_16371/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(eS,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(oS,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rS,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tS,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(aS,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(nS,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(sS,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(lS,"href","/docs/transformers/pr_16371/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(iS,"href","/docs/transformers/pr_16371/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(dS,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDTokenizer"),d(cS,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDTokenizerFast"),d(fS,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerTokenizer"),d(mS,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(gS,"href","/docs/transformers/pr_16371/en/model_doc/luke#transformers.LukeTokenizer"),d(hS,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(pS,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(_S,"href","/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(uS,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianTokenizer"),d(bS,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartTokenizer"),d(FS,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(vS,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(TS,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(MS,"href","/docs/transformers/pr_16371/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ES,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(CS,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(wS,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(AS,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(yS,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.T5Tokenizer"),d(LS,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.T5TokenizerFast"),d(xS,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(kS,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(SS,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(RS,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(BS,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(PS,"href","/docs/transformers/pr_16371/en/model_doc/phobert#transformers.PhobertTokenizer"),d($S,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartTokenizer"),d(IS,"href","/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(qS,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertTokenizer"),d(NS,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertTokenizerFast"),d(jS,"href","/docs/transformers/pr_16371/en/model_doc/rag#transformers.RagTokenizer"),d(DS,"href","/docs/transformers/pr_16371/en/model_doc/realm#transformers.RealmTokenizer"),d(GS,"href","/docs/transformers/pr_16371/en/model_doc/realm#transformers.RealmTokenizerFast"),d(OS,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerTokenizer"),d(VS,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(XS,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zS,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(QS,"href","/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(WS,"href","/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(HS,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaTokenizer"),d(US,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(JS,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(YS,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(KS,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ZS,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(eR,"href","/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterTokenizer"),d(oR,"href","/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rR,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tR,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(aR,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.T5Tokenizer"),d(nR,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sR,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasTokenizer"),d(lR,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(iR,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dR,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(cR,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fR,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(mR,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMTokenizer"),d(gR,"href","/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hR,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pR,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_R,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uR,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Wo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(bR,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(FR,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(wR,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(AR,"href","/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(qR,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(NR,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPProcessor"),d(jR,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(DR,"href","/docs/transformers/pr_16371/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(GR,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(OR,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(VR,"href","/docs/transformers/pr_16371/en/model_doc/trocr#transformers.TrOCRProcessor"),d(XR,"href","/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(zR,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(QR,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WR,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HR,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(UR,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertModel"),d(JR,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartModel"),d(YR,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitModel"),d(KR,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertModel"),d(ZR,"href","/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(eB,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdModel"),d(oB,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(rB,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(tB,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(aB,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertModel"),d(nB,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineModel"),d(sB,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.CLIPModel"),d(lB,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertModel"),d(iB,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextModel"),d(dB,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLModel"),d(cB,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(fB,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(mB,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaModel"),d(gB,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(hB,"href","/docs/transformers/pr_16371/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(pB,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTModel"),d(_B,"href","/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrModel"),d(uB,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertModel"),d(bB,"href","/docs/transformers/pr_16371/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(FB,"href","/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTModel"),d(vB,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraModel"),d(TB,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertModel"),d(MB,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetModel"),d(EB,"href","/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTModel"),d(CB,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelModel"),d(wB,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelBaseModel"),d(AB,"href","/docs/transformers/pr_16371/en/model_doc/glpn#transformers.GLPNModel"),d(yB,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2Model"),d(LB,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(xB,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJModel"),d(kB,"href","/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertModel"),d(SB,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertModel"),d(RB,"href","/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(BB,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(PB,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d($B,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDModel"),d(IB,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerModel"),d(qB,"href","/docs/transformers/pr_16371/en/model_doc/luke#transformers.LukeModel"),d(NB,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertModel"),d(jB,"href","/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100Model"),d(DB,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianModel"),d(GB,"href","/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerModel"),d(OB,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartModel"),d(VB,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(XB,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertModel"),d(zB,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetModel"),d(QB,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5Model"),d(WB,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerModel"),d(HB,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(UB,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusModel"),d(JB,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverModel"),d(YB,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartModel"),d(KB,"href","/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerModel"),d(ZB,"href","/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(eP,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertModel"),d(oP,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerModel"),d(rP,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertModel"),d(tP,"href","/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetModel"),d(aP,"href","/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertModel"),d(nP,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaModel"),d(sP,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerModel"),d(lP,"href","/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerModel"),d(iP,"href","/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWModel"),d(dP,"href","/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDModel"),d(cP,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(fP,"href","/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterModel"),d(mP,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(gP,"href","/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinModel"),d(hP,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5Model"),d(pP,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasModel"),d(_P,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(uP,"href","/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechModel"),d(bP,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(FP,"href","/docs/transformers/pr_16371/en/model_doc/van#transformers.VanModel"),d(vP,"href","/docs/transformers/pr_16371/en/model_doc/vilt#transformers.ViltModel"),d(TP,"href","/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(MP,"href","/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertModel"),d(EP,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTModel"),d(CP,"href","/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(wP,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(AP,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMModel"),d(yP,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMModel"),d(LP,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMModel"),d(xP,"href","/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(kP,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(SP,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(RP,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetModel"),d(BP,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(k_,"id","transformers.AutoModelForPreTraining"),d(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(PP,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($P,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IP,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(qP,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForPreTraining"),d(NP,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(jP,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForPreTraining"),d(DP,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(GP,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OP,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(VP,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XP,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zP,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QP,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WP,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForPreTraining"),d(HP,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UP,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForPreTraining"),d(JP,"href","/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(YP,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(KP,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(ZP,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(e$,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(o$,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(r$,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(t$,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(a$,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(n$,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(s$,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(l$,"href","/docs/transformers/pr_16371/en/model_doc/retribert#transformers.RetriBertModel"),d(i$,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(d$,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(f$,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(m$,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(g$,"href","/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(h$,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(p$,"href","/docs/transformers/pr_16371/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(_$,"href","/docs/transformers/pr_16371/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(u$,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(b$,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(F$,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(v$,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(T$,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(M$,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(E$,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(C$,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(w$,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForCausalLM"),d(A$,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertLMHeadModel"),d(y$,"href","/docs/transformers/pr_16371/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(L$,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(x$,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(k$,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(S$,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(R$,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(B$,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(P$,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d($$,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForCausalLM"),d(I$,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(q$,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(N$,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(j$,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianForCausalLM"),d(D$,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForCausalLM"),d(G$,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(O$,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(V$,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(X$,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(z$,"href","/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(Q$,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(W$,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(H$,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(U$,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(J$,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Y$,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(K$,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(Z$,"href","/docs/transformers/pr_16371/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(eI,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(oI,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rI,"href","/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(tI,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(aI,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(nI,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(sI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(dI,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(cI,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(fI,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(gI,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(pI,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(_I,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(uI,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(bI,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(vI,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(TI,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(MI,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(EI,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(CI,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(wI,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(AI,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(LI,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(kI,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(SI,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(RI,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(PI,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d($I,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(II,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(qI,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(jI,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(DI,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(GI,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(OI,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(q1,"id","transformers.AutoModelForSeq2SeqLM"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(VI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zI,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(QI,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(WI,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(HI,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(JI,"href","/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(YI,"href","/docs/transformers/pr_16371/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16371/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.MarianMTModel"),d(oq,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16371/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16371/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(ob,"id","transformers.AutoModelForSequenceClassification"),d(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ob,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(iq,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dq,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cq,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(fq,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(mq,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForSequenceClassification"),d(gq,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForSequenceClassification"),d(hq,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(pq,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForSequenceClassification"),d($q,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16371/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(Ub,"id","transformers.AutoModelForMultipleChoice"),d(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ub,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(tN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(sN,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(lN,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForMultipleChoice"),d(iN,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(dN,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(w3,"id","transformers.AutoModelForNextSentencePrediction"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(PN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($N,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(qN,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(NN,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(jN,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(DN,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(GN,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(R3,"id","transformers.AutoModelForTokenClassification"),d(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R3,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(ON,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XN,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(zN,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(QN,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForTokenClassification"),d(WN,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(HN,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(UN,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForTokenClassification"),d(JN,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(YN,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(KN,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(ej,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(oj,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(rj,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(tj,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(aj,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(nj,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(sj,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(lj,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(ij,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(dj,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(cj,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(mj,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(gj,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(hj,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(uj,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(bj,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(vj,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g2,"id","transformers.AutoModelForQuestionAnswering"),d(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g2,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Cj,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wj,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aj,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(yj,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(xj,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16371/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16371/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Gj,"href","/docs/transformers/pr_16371/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16371/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16371/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16371/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16371/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16371/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16371/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16371/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16371/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(iD,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(fD,"href","/docs/transformers/pr_16371/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(eF,"id","transformers.AutoModelForTableQuestionAnswering"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(mD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(pD,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(tF,"id","transformers.AutoModelForImageClassification"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(_D,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(FD,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitForImageClassification"),d(vD,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(TD,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForImageClassification"),d(MD,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ED,"href","/docs/transformers/pr_16371/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(CD,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(wD,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(AD,"href","/docs/transformers/pr_16371/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(yD,"href","/docs/transformers/pr_16371/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(LD,"href","/docs/transformers/pr_16371/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(xD,"href","/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(kD,"href","/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinForImageClassification"),d(SD,"href","/docs/transformers/pr_16371/en/model_doc/van#transformers.VanForImageClassification"),d(RD,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(hF,"id","transformers.AutoModelForVision2Seq"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(BD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(ID,"href","/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(uF,"id","transformers.AutoModelForAudioClassification"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(qD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(DD,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(GD,"href","/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(OD,"href","/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(VD,"href","/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(yF,"id","transformers.AutoModelForAudioFrameClassification"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(HD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JD,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(YD,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(KD,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(ZD,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(eG,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(BF,"id","transformers.AutoModelForCTC"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(oG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(aG,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(nG,"href","/docs/transformers/pr_16371/en/model_doc/hubert#transformers.HubertForCTC"),d(sG,"href","/docs/transformers/pr_16371/en/model_doc/sew#transformers.SEWForCTC"),d(lG,"href","/docs/transformers/pr_16371/en/model_doc/sew-d#transformers.SEWDForCTC"),d(iG,"href","/docs/transformers/pr_16371/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(dG,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(cG,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(fG,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(VF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(mG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(pG,"href","/docs/transformers/pr_16371/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(_G,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(WF,"id","transformers.AutoModelForAudioXVector"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(uG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(vG,"href","/docs/transformers/pr_16371/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(TG,"href","/docs/transformers/pr_16371/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(MG,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(EG,"href","/docs/transformers/pr_16371/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(ZF,"id","transformers.AutoModelForMaskedImageModeling"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(CG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(yG,"href","/docs/transformers/pr_16371/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(LG,"href","/docs/transformers/pr_16371/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(xG,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(av,"id","transformers.AutoModelForObjectDetection"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(kG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(BG,"href","/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(lv,"id","transformers.AutoModelForImageSegmentation"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(PG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(qG,"href","/docs/transformers/pr_16371/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(cv,"id","transformers.AutoModelForSemanticSegmentation"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(NG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(GG,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(OG,"href","/docs/transformers/pr_16371/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(VG,"href","/docs/transformers/pr_16371/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(pv,"id","transformers.AutoModelForInstanceSegmentation"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(XG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(WG,"href","/docs/transformers/pr_16371/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(bv,"id","transformers.TFAutoModel"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(HG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(YG,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertModel"),d(KG,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartModel"),d(ZG,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertModel"),d(eO,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(oO,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(rO,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertModel"),d(tO,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.TFCLIPModel"),d(aO,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertModel"),d(nO,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.TFConvNextModel"),d(sO,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLModel"),d(lO,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaModel"),d(iO,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(dO,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(cO,"href","/docs/transformers/pr_16371/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(fO,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraModel"),d(mO,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(gO,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelModel"),d(hO,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(pO,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2Model"),d(_O,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJModel"),d(uO,"href","/docs/transformers/pr_16371/en/model_doc/hubert#transformers.TFHubertModel"),d(bO,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(FO,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.TFLEDModel"),d(vO,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerModel"),d(TO,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.TFLxmertModel"),d(MO,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.TFMarianModel"),d(EO,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.TFMBartModel"),d(CO,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(wO,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetModel"),d(AO,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.TFMT5Model"),d(yO,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(LO,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.TFPegasusModel"),d(xO,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertModel"),d(kO,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaModel"),d(SO,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerModel"),d(RO,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(BO,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5Model"),d(PO,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasModel"),d($O,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(IO,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.TFViTModel"),d(qO,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(NO,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMModel"),d(jO,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(DO,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(l6,"id","transformers.TFAutoModelForPreTraining"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(GO,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OO,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VO,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(XO,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(zO,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(QO,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForPreTraining"),d(WO,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(HO,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(UO,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(JO,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(YO,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(KO,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(ZO,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eV,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(oV,"href","/docs/transformers/pr_16371/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(rV,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(tV,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(aV,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(nV,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(sV,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(lV,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(iV,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(dV,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(cV,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(fV,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(k6,"id","transformers.TFAutoModelForCausalLM"),d(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k6,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(mV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(pV,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(_V,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(uV,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(bV,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FV,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(vV,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(TV,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(MV,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(EV,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(CV,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(wV,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(AV,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(V6,"id","transformers.TFAutoModelForImageClassification"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(yV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(kV,"href","/docs/transformers/pr_16371/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(SV,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Q6,"id","transformers.TFAutoModelForMaskedLM"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(RV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d($V,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(IV,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(qV,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(NV,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(DV,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(GV,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(VV,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(XV,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(zV,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QV,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(WV,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(HV,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(UV,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eX,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(gT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(oX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(aX,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(nX,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(iX,"href","/docs/transformers/pr_16371/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.TFMarianMTModel"),d(cX,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(CT,"id","transformers.TFAutoModelForSequenceClassification"),d(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(hX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_X,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(uX,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(bX,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FX,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(vX,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(TX,"href","/docs/transformers/pr_16371/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(MX,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(EX,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CX,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(wX,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16371/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d($X,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16371/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(YT,"id","transformers.TFAutoModelForMultipleChoice"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(VX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zX,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(QX,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(WX,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(HX,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(UX,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(JX,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(YX,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(KX,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(ZX,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(ez,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(az,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(p7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(dz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(mz,"href","/docs/transformers/pr_16371/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(u7,"id","transformers.TFAutoModelForTokenClassification"),d(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u7,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(gz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(uz,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(bz,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Fz,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(vz,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Tz,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Az,"href","/docs/transformers/pr_16371/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(yz,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(kz,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d($z,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(N7,"id","transformers.TFAutoModelForQuestionAnswering"),d(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N7,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Iz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Nz,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(jz,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Dz,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Gz,"href","/docs/transformers/pr_16371/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Oz,"href","/docs/transformers/pr_16371/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Vz,"href","/docs/transformers/pr_16371/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Xz,"href","/docs/transformers/pr_16371/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(zz,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Qz,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_16371/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Hz,"href","/docs/transformers/pr_16371/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16371/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16371/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16371/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16371/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16371/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(tQ,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16371/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(nM,"id","transformers.TFAutoModelForVision2Seq"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(nQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(iQ,"href","/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(lM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(dQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(mQ,"href","/docs/transformers/pr_16371/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(dM,"id","transformers.FlaxAutoModel"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(gQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(_Q,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertModel"),d(uQ,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartModel"),d(bQ,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.FlaxBeitModel"),d(FQ,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertModel"),d(vQ,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(TQ,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(MQ,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(EQ,"href","/docs/transformers/pr_16371/en/model_doc/clip#transformers.FlaxCLIPModel"),d(CQ,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(wQ,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraModel"),d(AQ,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(yQ,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(LQ,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(xQ,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.FlaxMarianModel"),d(kQ,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartModel"),d(SQ,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5Model"),d(RQ,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(BQ,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(PQ,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d($Q,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5Model"),d(IQ,"href","/docs/transformers/pr_16371/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(qQ,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.FlaxViTModel"),d(NQ,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(jQ,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(DQ,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForCausalLM"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(GQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(XQ,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(zQ,"href","/docs/transformers/pr_16371/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(QQ,"href","/docs/transformers/pr_16371/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(WQ,"href","/docs/transformers/pr_16371/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(HQ,"href","/docs/transformers/pr_16371/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(GM,"id","transformers.FlaxAutoModelForPreTraining"),d(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(UQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YQ,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(KQ,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(ZQ,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(eW,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(oW,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(rW,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(tW,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(aW,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(nW,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(sW,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(lW,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(iW,"href","/docs/transformers/pr_16371/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(dW,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(e4,"id","transformers.FlaxAutoModelForMaskedLM"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(cW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(gW,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(hW,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(pW,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(_W,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(uW,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(bW,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(FW,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(TW,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(MW,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(f4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(EW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(AW,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yW,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16371/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16371/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(kW,"href","/docs/transformers/pr_16371/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(SW,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16371/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16371/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_16371/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(T4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d($W,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(NW,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(jW,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(DW,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(GW,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(OW,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(VW,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(XW,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(zW,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(QW,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(R4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(HW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JW,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(YW,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(KW,"href","/docs/transformers/pr_16371/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(ZW,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(eH,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(oH,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(rH,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(tH,"href","/docs/transformers/pr_16371/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(aH,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(V4,"id","transformers.FlaxAutoModelForTokenClassification"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(lH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(cH,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(fH,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(mH,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(gH,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(hH,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(pH,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(_H,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(uH,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(K4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(bH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(TH,"href","/docs/transformers/pr_16371/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(MH,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(EH,"href","/docs/transformers/pr_16371/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(CH,"href","/docs/transformers/pr_16371/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(wH,"href","/docs/transformers/pr_16371/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(AH,"href","/docs/transformers/pr_16371/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(yH,"href","/docs/transformers/pr_16371/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(LH,"href","/docs/transformers/pr_16371/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(lE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(xH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(RH,"href","/docs/transformers/pr_16371/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(dE,"id","transformers.FlaxAutoModelForImageClassification"),d(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(BH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(IH,"href","/docs/transformers/pr_16371/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(qH,"href","/docs/transformers/pr_16371/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForVision2Seq"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(NH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_16371/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(GH,"href","/docs/transformers/pr_16371/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,gC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,hC),e(co,On),e(co,Vn),e(Vn,pC),e(co,Di),e(co,Xn),e(Xn,_C),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,n9),e(_e,Oi),e(Oi,s9),e(_e,l9),b(c,zo,u),b(c,Ga,u),e(Ga,i9),e(Ga,Df),e(Df,d9),e(Ga,O$e),b(c,xSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,$J),g(uC,$J,null),e(Vi,V$e),e(Vi,IJ),e(IJ,X$e),b(c,kSe,u),b(c,zn,u),e(zn,z$e),e(zn,qJ),e(qJ,Q$e),e(zn,W$e),e(zn,NJ),e(NJ,H$e),e(zn,U$e),b(c,SSe,u),g(bC,c,u),b(c,RSe,u),b(c,c9,u),e(c9,J$e),b(c,BSe,u),g(Of,c,u),b(c,PSe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,jJ),g(FC,jJ,null),e(Xi,Y$e),e(Xi,DJ),e(DJ,K$e),b(c,$Se,u),b(c,Qo,u),g(vC,Qo,null),e(Qo,Z$e),e(Qo,TC),e(TC,eIe),e(TC,f9),e(f9,oIe),e(TC,rIe),e(Qo,tIe),e(Qo,MC),e(MC,aIe),e(MC,GJ),e(GJ,nIe),e(MC,sIe),e(Qo,lIe),e(Qo,mo),g(EC,mo,null),e(mo,iIe),e(mo,OJ),e(OJ,dIe),e(mo,cIe),e(mo,zi),e(zi,fIe),e(zi,VJ),e(VJ,mIe),e(zi,gIe),e(zi,XJ),e(XJ,hIe),e(zi,pIe),e(mo,_Ie),e(mo,F),e(F,Xf),e(Xf,zJ),e(zJ,uIe),e(Xf,bIe),e(Xf,m9),e(m9,FIe),e(Xf,vIe),e(F,TIe),e(F,zf),e(zf,QJ),e(QJ,MIe),e(zf,EIe),e(zf,g9),e(g9,CIe),e(zf,wIe),e(F,AIe),e(F,Qf),e(Qf,WJ),e(WJ,yIe),e(Qf,LIe),e(Qf,h9),e(h9,xIe),e(Qf,kIe),e(F,SIe),e(F,Wf),e(Wf,HJ),e(HJ,RIe),e(Wf,BIe),e(Wf,p9),e(p9,PIe),e(Wf,$Ie),e(F,IIe),e(F,Hf),e(Hf,UJ),e(UJ,qIe),e(Hf,NIe),e(Hf,_9),e(_9,jIe),e(Hf,DIe),e(F,GIe),e(F,Uf),e(Uf,JJ),e(JJ,OIe),e(Uf,VIe),e(Uf,u9),e(u9,XIe),e(Uf,zIe),e(F,QIe),e(F,Jf),e(Jf,YJ),e(YJ,WIe),e(Jf,HIe),e(Jf,b9),e(b9,UIe),e(Jf,JIe),e(F,YIe),e(F,Yf),e(Yf,KJ),e(KJ,KIe),e(Yf,ZIe),e(Yf,F9),e(F9,eqe),e(Yf,oqe),e(F,rqe),e(F,Kf),e(Kf,ZJ),e(ZJ,tqe),e(Kf,aqe),e(Kf,v9),e(v9,nqe),e(Kf,sqe),e(F,lqe),e(F,Zf),e(Zf,eY),e(eY,iqe),e(Zf,dqe),e(Zf,T9),e(T9,cqe),e(Zf,fqe),e(F,mqe),e(F,em),e(em,oY),e(oY,gqe),e(em,hqe),e(em,M9),e(M9,pqe),e(em,_qe),e(F,uqe),e(F,om),e(om,rY),e(rY,bqe),e(om,Fqe),e(om,E9),e(E9,vqe),e(om,Tqe),e(F,Mqe),e(F,rm),e(rm,tY),e(tY,Eqe),e(rm,Cqe),e(rm,C9),e(C9,wqe),e(rm,Aqe),e(F,yqe),e(F,tm),e(tm,aY),e(aY,Lqe),e(tm,xqe),e(tm,w9),e(w9,kqe),e(tm,Sqe),e(F,Rqe),e(F,am),e(am,nY),e(nY,Bqe),e(am,Pqe),e(am,A9),e(A9,$qe),e(am,Iqe),e(F,qqe),e(F,nm),e(nm,sY),e(sY,Nqe),e(nm,jqe),e(nm,y9),e(y9,Dqe),e(nm,Gqe),e(F,Oqe),e(F,sm),e(sm,lY),e(lY,Vqe),e(sm,Xqe),e(sm,L9),e(L9,zqe),e(sm,Qqe),e(F,Wqe),e(F,lm),e(lm,iY),e(iY,Hqe),e(lm,Uqe),e(lm,x9),e(x9,Jqe),e(lm,Yqe),e(F,Kqe),e(F,im),e(im,dY),e(dY,Zqe),e(im,eNe),e(im,k9),e(k9,oNe),e(im,rNe),e(F,tNe),e(F,dm),e(dm,cY),e(cY,aNe),e(dm,nNe),e(dm,S9),e(S9,sNe),e(dm,lNe),e(F,iNe),e(F,cm),e(cm,fY),e(fY,dNe),e(cm,cNe),e(cm,R9),e(R9,fNe),e(cm,mNe),e(F,gNe),e(F,fm),e(fm,mY),e(mY,hNe),e(fm,pNe),e(fm,B9),e(B9,_Ne),e(fm,uNe),e(F,bNe),e(F,mm),e(mm,gY),e(gY,FNe),e(mm,vNe),e(mm,P9),e(P9,TNe),e(mm,MNe),e(F,ENe),e(F,gm),e(gm,hY),e(hY,CNe),e(gm,wNe),e(gm,$9),e($9,ANe),e(gm,yNe),e(F,LNe),e(F,hm),e(hm,pY),e(pY,xNe),e(hm,kNe),e(hm,I9),e(I9,SNe),e(hm,RNe),e(F,BNe),e(F,pm),e(pm,_Y),e(_Y,PNe),e(pm,$Ne),e(pm,q9),e(q9,INe),e(pm,qNe),e(F,NNe),e(F,_m),e(_m,uY),e(uY,jNe),e(_m,DNe),e(_m,N9),e(N9,GNe),e(_m,ONe),e(F,VNe),e(F,um),e(um,bY),e(bY,XNe),e(um,zNe),e(um,j9),e(j9,QNe),e(um,WNe),e(F,HNe),e(F,bm),e(bm,FY),e(FY,UNe),e(bm,JNe),e(bm,D9),e(D9,YNe),e(bm,KNe),e(F,ZNe),e(F,Fm),e(Fm,vY),e(vY,eje),e(Fm,oje),e(Fm,G9),e(G9,rje),e(Fm,tje),e(F,aje),e(F,vm),e(vm,TY),e(TY,nje),e(vm,sje),e(vm,O9),e(O9,lje),e(vm,ije),e(F,dje),e(F,Tm),e(Tm,MY),e(MY,cje),e(Tm,fje),e(Tm,V9),e(V9,mje),e(Tm,gje),e(F,hje),e(F,Mm),e(Mm,EY),e(EY,pje),e(Mm,_je),e(Mm,X9),e(X9,uje),e(Mm,bje),e(F,Fje),e(F,Em),e(Em,CY),e(CY,vje),e(Em,Tje),e(Em,z9),e(z9,Mje),e(Em,Eje),e(F,Cje),e(F,Cm),e(Cm,wY),e(wY,wje),e(Cm,Aje),e(Cm,Q9),e(Q9,yje),e(Cm,Lje),e(F,xje),e(F,wm),e(wm,AY),e(AY,kje),e(wm,Sje),e(wm,W9),e(W9,Rje),e(wm,Bje),e(F,Pje),e(F,Am),e(Am,yY),e(yY,$je),e(Am,Ije),e(Am,H9),e(H9,qje),e(Am,Nje),e(F,jje),e(F,ym),e(ym,LY),e(LY,Dje),e(ym,Gje),e(ym,U9),e(U9,Oje),e(ym,Vje),e(F,Xje),e(F,Lm),e(Lm,xY),e(xY,zje),e(Lm,Qje),e(Lm,J9),e(J9,Wje),e(Lm,Hje),e(F,Uje),e(F,xm),e(xm,kY),e(kY,Jje),e(xm,Yje),e(xm,Y9),e(Y9,Kje),e(xm,Zje),e(F,eDe),e(F,km),e(km,SY),e(SY,oDe),e(km,rDe),e(km,K9),e(K9,tDe),e(km,aDe),e(F,nDe),e(F,Sm),e(Sm,RY),e(RY,sDe),e(Sm,lDe),e(Sm,Z9),e(Z9,iDe),e(Sm,dDe),e(F,cDe),e(F,Rm),e(Rm,BY),e(BY,fDe),e(Rm,mDe),e(Rm,ex),e(ex,gDe),e(Rm,hDe),e(F,pDe),e(F,Bm),e(Bm,PY),e(PY,_De),e(Bm,uDe),e(Bm,ox),e(ox,bDe),e(Bm,FDe),e(F,vDe),e(F,Pm),e(Pm,$Y),e($Y,TDe),e(Pm,MDe),e(Pm,rx),e(rx,EDe),e(Pm,CDe),e(F,wDe),e(F,$m),e($m,IY),e(IY,ADe),e($m,yDe),e($m,tx),e(tx,LDe),e($m,xDe),e(F,kDe),e(F,Im),e(Im,qY),e(qY,SDe),e(Im,RDe),e(Im,ax),e(ax,BDe),e(Im,PDe),e(F,$De),e(F,qm),e(qm,NY),e(NY,IDe),e(qm,qDe),e(qm,nx),e(nx,NDe),e(qm,jDe),e(F,DDe),e(F,Nm),e(Nm,jY),e(jY,GDe),e(Nm,ODe),e(Nm,sx),e(sx,VDe),e(Nm,XDe),e(F,zDe),e(F,jm),e(jm,DY),e(DY,QDe),e(jm,WDe),e(jm,lx),e(lx,HDe),e(jm,UDe),e(F,JDe),e(F,Dm),e(Dm,GY),e(GY,YDe),e(Dm,KDe),e(Dm,ix),e(ix,ZDe),e(Dm,eGe),e(F,oGe),e(F,Gm),e(Gm,OY),e(OY,rGe),e(Gm,tGe),e(Gm,dx),e(dx,aGe),e(Gm,nGe),e(F,sGe),e(F,Om),e(Om,VY),e(VY,lGe),e(Om,iGe),e(Om,cx),e(cx,dGe),e(Om,cGe),e(F,fGe),e(F,Vm),e(Vm,XY),e(XY,mGe),e(Vm,gGe),e(Vm,fx),e(fx,hGe),e(Vm,pGe),e(F,_Ge),e(F,Xm),e(Xm,zY),e(zY,uGe),e(Xm,bGe),e(Xm,mx),e(mx,FGe),e(Xm,vGe),e(F,TGe),e(F,zm),e(zm,QY),e(QY,MGe),e(zm,EGe),e(zm,gx),e(gx,CGe),e(zm,wGe),e(F,AGe),e(F,Qm),e(Qm,WY),e(WY,yGe),e(Qm,LGe),e(Qm,hx),e(hx,xGe),e(Qm,kGe),e(F,SGe),e(F,Wm),e(Wm,HY),e(HY,RGe),e(Wm,BGe),e(Wm,px),e(px,PGe),e(Wm,$Ge),e(F,IGe),e(F,Hm),e(Hm,UY),e(UY,qGe),e(Hm,NGe),e(Hm,_x),e(_x,jGe),e(Hm,DGe),e(F,GGe),e(F,Um),e(Um,JY),e(JY,OGe),e(Um,VGe),e(Um,ux),e(ux,XGe),e(Um,zGe),e(F,QGe),e(F,Jm),e(Jm,YY),e(YY,WGe),e(Jm,HGe),e(Jm,bx),e(bx,UGe),e(Jm,JGe),e(F,YGe),e(F,Ym),e(Ym,KY),e(KY,KGe),e(Ym,ZGe),e(Ym,Fx),e(Fx,eOe),e(Ym,oOe),e(F,rOe),e(F,Km),e(Km,ZY),e(ZY,tOe),e(Km,aOe),e(Km,vx),e(vx,nOe),e(Km,sOe),e(F,lOe),e(F,Zm),e(Zm,eK),e(eK,iOe),e(Zm,dOe),e(Zm,Tx),e(Tx,cOe),e(Zm,fOe),e(F,mOe),e(F,eg),e(eg,oK),e(oK,gOe),e(eg,hOe),e(eg,Mx),e(Mx,pOe),e(eg,_Oe),e(F,uOe),e(F,og),e(og,rK),e(rK,bOe),e(og,FOe),e(og,Ex),e(Ex,vOe),e(og,TOe),e(F,MOe),e(F,rg),e(rg,tK),e(tK,EOe),e(rg,COe),e(rg,Cx),e(Cx,wOe),e(rg,AOe),e(F,yOe),e(F,tg),e(tg,aK),e(aK,LOe),e(tg,xOe),e(tg,wx),e(wx,kOe),e(tg,SOe),e(F,ROe),e(F,ag),e(ag,nK),e(nK,BOe),e(ag,POe),e(ag,Ax),e(Ax,$Oe),e(ag,IOe),e(F,qOe),e(F,ng),e(ng,sK),e(sK,NOe),e(ng,jOe),e(ng,yx),e(yx,DOe),e(ng,GOe),e(F,OOe),e(F,sg),e(sg,lK),e(lK,VOe),e(sg,XOe),e(sg,Lx),e(Lx,zOe),e(sg,QOe),e(F,WOe),e(F,lg),e(lg,iK),e(iK,HOe),e(lg,UOe),e(lg,xx),e(xx,JOe),e(lg,YOe),e(F,KOe),e(F,ig),e(ig,dK),e(dK,ZOe),e(ig,eVe),e(ig,kx),e(kx,oVe),e(ig,rVe),e(F,tVe),e(F,dg),e(dg,cK),e(cK,aVe),e(dg,nVe),e(dg,Sx),e(Sx,sVe),e(dg,lVe),e(F,iVe),e(F,cg),e(cg,fK),e(fK,dVe),e(cg,cVe),e(cg,Rx),e(Rx,fVe),e(cg,mVe),e(F,gVe),e(F,fg),e(fg,mK),e(mK,hVe),e(fg,pVe),e(fg,Bx),e(Bx,_Ve),e(fg,uVe),e(F,bVe),e(F,mg),e(mg,gK),e(gK,FVe),e(mg,vVe),e(mg,Px),e(Px,TVe),e(mg,MVe),e(F,EVe),e(F,gg),e(gg,hK),e(hK,CVe),e(gg,wVe),e(gg,$x),e($x,AVe),e(gg,yVe),e(F,LVe),e(F,hg),e(hg,pK),e(pK,xVe),e(hg,kVe),e(hg,Ix),e(Ix,SVe),e(hg,RVe),e(F,BVe),e(F,pg),e(pg,_K),e(_K,PVe),e(pg,$Ve),e(pg,qx),e(qx,IVe),e(pg,qVe),e(F,NVe),e(F,_g),e(_g,uK),e(uK,jVe),e(_g,DVe),e(_g,Nx),e(Nx,GVe),e(_g,OVe),e(F,VVe),e(F,ug),e(ug,bK),e(bK,XVe),e(ug,zVe),e(ug,jx),e(jx,QVe),e(ug,WVe),e(F,HVe),e(F,bg),e(bg,FK),e(FK,UVe),e(bg,JVe),e(bg,Dx),e(Dx,YVe),e(bg,KVe),e(F,ZVe),e(F,Fg),e(Fg,vK),e(vK,eXe),e(Fg,oXe),e(Fg,Gx),e(Gx,rXe),e(Fg,tXe),e(F,aXe),e(F,vg),e(vg,TK),e(TK,nXe),e(vg,sXe),e(vg,Ox),e(Ox,lXe),e(vg,iXe),e(F,dXe),e(F,Tg),e(Tg,MK),e(MK,cXe),e(Tg,fXe),e(Tg,Vx),e(Vx,mXe),e(Tg,gXe),e(F,hXe),e(F,Mg),e(Mg,EK),e(EK,pXe),e(Mg,_Xe),e(Mg,Xx),e(Xx,uXe),e(Mg,bXe),e(F,FXe),e(F,Eg),e(Eg,CK),e(CK,vXe),e(Eg,TXe),e(Eg,zx),e(zx,MXe),e(Eg,EXe),e(F,CXe),e(F,Cg),e(Cg,wK),e(wK,wXe),e(Cg,AXe),e(Cg,Qx),e(Qx,yXe),e(Cg,LXe),e(F,xXe),e(F,wg),e(wg,AK),e(AK,kXe),e(wg,SXe),e(wg,Wx),e(Wx,RXe),e(wg,BXe),e(F,PXe),e(F,Ag),e(Ag,yK),e(yK,$Xe),e(Ag,IXe),e(Ag,Hx),e(Hx,qXe),e(Ag,NXe),e(F,jXe),e(F,yg),e(yg,LK),e(LK,DXe),e(yg,GXe),e(yg,Ux),e(Ux,OXe),e(yg,VXe),e(F,XXe),e(F,Lg),e(Lg,xK),e(xK,zXe),e(Lg,QXe),e(Lg,Jx),e(Jx,WXe),e(Lg,HXe),e(F,UXe),e(F,xg),e(xg,kK),e(kK,JXe),e(xg,YXe),e(xg,Yx),e(Yx,KXe),e(xg,ZXe),e(F,eze),e(F,kg),e(kg,SK),e(SK,oze),e(kg,rze),e(kg,Kx),e(Kx,tze),e(kg,aze),e(F,nze),e(F,Sg),e(Sg,RK),e(RK,sze),e(Sg,lze),e(Sg,Zx),e(Zx,ize),e(Sg,dze),e(F,cze),e(F,Rg),e(Rg,BK),e(BK,fze),e(Rg,mze),e(Rg,ek),e(ek,gze),e(Rg,hze),e(F,pze),e(F,Bg),e(Bg,PK),e(PK,_ze),e(Bg,uze),e(Bg,ok),e(ok,bze),e(Bg,Fze),e(F,vze),e(F,Pg),e(Pg,$K),e($K,Tze),e(Pg,Mze),e(Pg,rk),e(rk,Eze),e(Pg,Cze),e(mo,wze),e(mo,IK),e(IK,Aze),e(mo,yze),g(CC,mo,null),e(Qo,Lze),e(Qo,$g),g(wC,$g,null),e($g,xze),e($g,qK),e(qK,kze),b(c,ISe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,NK),g(AC,NK,null),e(Qi,Sze),e(Qi,jK),e(jK,Rze),b(c,qSe,u),b(c,Wo,u),g(yC,Wo,null),e(Wo,Bze),e(Wo,LC),e(LC,Pze),e(LC,tk),e(tk,$ze),e(LC,Ize),e(Wo,qze),e(Wo,xC),e(xC,Nze),e(xC,DK),e(DK,jze),e(xC,Dze),e(Wo,Gze),e(Wo,go),g(kC,go,null),e(go,Oze),e(go,GK),e(GK,Vze),e(go,Xze),e(go,Oa),e(Oa,zze),e(Oa,OK),e(OK,Qze),e(Oa,Wze),e(Oa,VK),e(VK,Hze),e(Oa,Uze),e(Oa,XK),e(XK,Jze),e(Oa,Yze),e(go,Kze),e(go,C),e(C,Qn),e(Qn,zK),e(zK,Zze),e(Qn,eQe),e(Qn,ak),e(ak,oQe),e(Qn,rQe),e(Qn,nk),e(nk,tQe),e(Qn,aQe),e(C,nQe),e(C,Wn),e(Wn,QK),e(QK,sQe),e(Wn,lQe),e(Wn,sk),e(sk,iQe),e(Wn,dQe),e(Wn,lk),e(lk,cQe),e(Wn,fQe),e(C,mQe),e(C,Hn),e(Hn,WK),e(WK,gQe),e(Hn,hQe),e(Hn,ik),e(ik,pQe),e(Hn,_Qe),e(Hn,dk),e(dk,uQe),e(Hn,bQe),e(C,FQe),e(C,qg),e(qg,HK),e(HK,vQe),e(qg,TQe),e(qg,ck),e(ck,MQe),e(qg,EQe),e(C,CQe),e(C,Un),e(Un,UK),e(UK,wQe),e(Un,AQe),e(Un,fk),e(fk,yQe),e(Un,LQe),e(Un,mk),e(mk,xQe),e(Un,kQe),e(C,SQe),e(C,Ng),e(Ng,JK),e(JK,RQe),e(Ng,BQe),e(Ng,gk),e(gk,PQe),e(Ng,$Qe),e(C,IQe),e(C,jg),e(jg,YK),e(YK,qQe),e(jg,NQe),e(jg,hk),e(hk,jQe),e(jg,DQe),e(C,GQe),e(C,Dg),e(Dg,KK),e(KK,OQe),e(Dg,VQe),e(Dg,pk),e(pk,XQe),e(Dg,zQe),e(C,QQe),e(C,Jn),e(Jn,ZK),e(ZK,WQe),e(Jn,HQe),e(Jn,_k),e(_k,UQe),e(Jn,JQe),e(Jn,uk),e(uk,YQe),e(Jn,KQe),e(C,ZQe),e(C,Yn),e(Yn,eZ),e(eZ,eWe),e(Yn,oWe),e(Yn,bk),e(bk,rWe),e(Yn,tWe),e(Yn,Fk),e(Fk,aWe),e(Yn,nWe),e(C,sWe),e(C,Kn),e(Kn,oZ),e(oZ,lWe),e(Kn,iWe),e(Kn,vk),e(vk,dWe),e(Kn,cWe),e(Kn,Tk),e(Tk,fWe),e(Kn,mWe),e(C,gWe),e(C,Gg),e(Gg,rZ),e(rZ,hWe),e(Gg,pWe),e(Gg,Mk),e(Mk,_We),e(Gg,uWe),e(C,bWe),e(C,Og),e(Og,tZ),e(tZ,FWe),e(Og,vWe),e(Og,Ek),e(Ek,TWe),e(Og,MWe),e(C,EWe),e(C,Zn),e(Zn,aZ),e(aZ,CWe),e(Zn,wWe),e(Zn,Ck),e(Ck,AWe),e(Zn,yWe),e(Zn,wk),e(wk,LWe),e(Zn,xWe),e(C,kWe),e(C,Vg),e(Vg,nZ),e(nZ,SWe),e(Vg,RWe),e(Vg,Ak),e(Ak,BWe),e(Vg,PWe),e(C,$We),e(C,es),e(es,sZ),e(sZ,IWe),e(es,qWe),e(es,yk),e(yk,NWe),e(es,jWe),e(es,Lk),e(Lk,DWe),e(es,GWe),e(C,OWe),e(C,os),e(os,lZ),e(lZ,VWe),e(os,XWe),e(os,xk),e(xk,zWe),e(os,QWe),e(os,kk),e(kk,WWe),e(os,HWe),e(C,UWe),e(C,rs),e(rs,iZ),e(iZ,JWe),e(rs,YWe),e(rs,Sk),e(Sk,KWe),e(rs,ZWe),e(rs,dZ),e(dZ,eHe),e(rs,oHe),e(C,rHe),e(C,Xg),e(Xg,cZ),e(cZ,tHe),e(Xg,aHe),e(Xg,Rk),e(Rk,nHe),e(Xg,sHe),e(C,lHe),e(C,ts),e(ts,fZ),e(fZ,iHe),e(ts,dHe),e(ts,Bk),e(Bk,cHe),e(ts,fHe),e(ts,Pk),e(Pk,mHe),e(ts,gHe),e(C,hHe),e(C,zg),e(zg,mZ),e(mZ,pHe),e(zg,_He),e(zg,$k),e($k,uHe),e(zg,bHe),e(C,FHe),e(C,as),e(as,gZ),e(gZ,vHe),e(as,THe),e(as,Ik),e(Ik,MHe),e(as,EHe),e(as,qk),e(qk,CHe),e(as,wHe),e(C,AHe),e(C,ns),e(ns,hZ),e(hZ,yHe),e(ns,LHe),e(ns,Nk),e(Nk,xHe),e(ns,kHe),e(ns,jk),e(jk,SHe),e(ns,RHe),e(C,BHe),e(C,ss),e(ss,pZ),e(pZ,PHe),e(ss,$He),e(ss,Dk),e(Dk,IHe),e(ss,qHe),e(ss,Gk),e(Gk,NHe),e(ss,jHe),e(C,DHe),e(C,Qg),e(Qg,_Z),e(_Z,GHe),e(Qg,OHe),e(Qg,Ok),e(Ok,VHe),e(Qg,XHe),e(C,zHe),e(C,ls),e(ls,uZ),e(uZ,QHe),e(ls,WHe),e(ls,Vk),e(Vk,HHe),e(ls,UHe),e(ls,Xk),e(Xk,JHe),e(ls,YHe),e(C,KHe),e(C,Wg),e(Wg,bZ),e(bZ,ZHe),e(Wg,eUe),e(Wg,zk),e(zk,oUe),e(Wg,rUe),e(C,tUe),e(C,is),e(is,FZ),e(FZ,aUe),e(is,nUe),e(is,Qk),e(Qk,sUe),e(is,lUe),e(is,Wk),e(Wk,iUe),e(is,dUe),e(C,cUe),e(C,ds),e(ds,vZ),e(vZ,fUe),e(ds,mUe),e(ds,Hk),e(Hk,gUe),e(ds,hUe),e(ds,Uk),e(Uk,pUe),e(ds,_Ue),e(C,uUe),e(C,cs),e(cs,TZ),e(TZ,bUe),e(cs,FUe),e(cs,Jk),e(Jk,vUe),e(cs,TUe),e(cs,Yk),e(Yk,MUe),e(cs,EUe),e(C,CUe),e(C,fs),e(fs,MZ),e(MZ,wUe),e(fs,AUe),e(fs,Kk),e(Kk,yUe),e(fs,LUe),e(fs,Zk),e(Zk,xUe),e(fs,kUe),e(C,SUe),e(C,Hg),e(Hg,EZ),e(EZ,RUe),e(Hg,BUe),e(Hg,eS),e(eS,PUe),e(Hg,$Ue),e(C,IUe),e(C,ms),e(ms,CZ),e(CZ,qUe),e(ms,NUe),e(ms,oS),e(oS,jUe),e(ms,DUe),e(ms,rS),e(rS,GUe),e(ms,OUe),e(C,VUe),e(C,gs),e(gs,wZ),e(wZ,XUe),e(gs,zUe),e(gs,tS),e(tS,QUe),e(gs,WUe),e(gs,aS),e(aS,HUe),e(gs,UUe),e(C,JUe),e(C,hs),e(hs,AZ),e(AZ,YUe),e(hs,KUe),e(hs,nS),e(nS,ZUe),e(hs,eJe),e(hs,sS),e(sS,oJe),e(hs,rJe),e(C,tJe),e(C,ps),e(ps,yZ),e(yZ,aJe),e(ps,nJe),e(ps,lS),e(lS,sJe),e(ps,lJe),e(ps,iS),e(iS,iJe),e(ps,dJe),e(C,cJe),e(C,_s),e(_s,LZ),e(LZ,fJe),e(_s,mJe),e(_s,dS),e(dS,gJe),e(_s,hJe),e(_s,cS),e(cS,pJe),e(_s,_Je),e(C,uJe),e(C,us),e(us,xZ),e(xZ,bJe),e(us,FJe),e(us,fS),e(fS,vJe),e(us,TJe),e(us,mS),e(mS,MJe),e(us,EJe),e(C,CJe),e(C,Ug),e(Ug,kZ),e(kZ,wJe),e(Ug,AJe),e(Ug,gS),e(gS,yJe),e(Ug,LJe),e(C,xJe),e(C,bs),e(bs,SZ),e(SZ,kJe),e(bs,SJe),e(bs,hS),e(hS,RJe),e(bs,BJe),e(bs,pS),e(pS,PJe),e(bs,$Je),e(C,IJe),e(C,Jg),e(Jg,RZ),e(RZ,qJe),e(Jg,NJe),e(Jg,_S),e(_S,jJe),e(Jg,DJe),e(C,GJe),e(C,Yg),e(Yg,BZ),e(BZ,OJe),e(Yg,VJe),e(Yg,uS),e(uS,XJe),e(Yg,zJe),e(C,QJe),e(C,Fs),e(Fs,PZ),e(PZ,WJe),e(Fs,HJe),e(Fs,bS),e(bS,UJe),e(Fs,JJe),e(Fs,FS),e(FS,YJe),e(Fs,KJe),e(C,ZJe),e(C,vs),e(vs,$Z),e($Z,eYe),e(vs,oYe),e(vs,vS),e(vS,rYe),e(vs,tYe),e(vs,TS),e(TS,aYe),e(vs,nYe),e(C,sYe),e(C,Kg),e(Kg,IZ),e(IZ,lYe),e(Kg,iYe),e(Kg,MS),e(MS,dYe),e(Kg,cYe),e(C,fYe),e(C,Ts),e(Ts,qZ),e(qZ,mYe),e(Ts,gYe),e(Ts,ES),e(ES,hYe),e(Ts,pYe),e(Ts,CS),e(CS,_Ye),e(Ts,uYe),e(C,bYe),e(C,Ms),e(Ms,NZ),e(NZ,FYe),e(Ms,vYe),e(Ms,wS),e(wS,TYe),e(Ms,MYe),e(Ms,AS),e(AS,EYe),e(Ms,CYe),e(C,wYe),e(C,Es),e(Es,jZ),e(jZ,AYe),e(Es,yYe),e(Es,yS),e(yS,LYe),e(Es,xYe),e(Es,LS),e(LS,kYe),e(Es,SYe),e(C,RYe),e(C,Cs),e(Cs,DZ),e(DZ,BYe),e(Cs,PYe),e(Cs,xS),e(xS,$Ye),e(Cs,IYe),e(Cs,kS),e(kS,qYe),e(Cs,NYe),e(C,jYe),e(C,ws),e(ws,GZ),e(GZ,DYe),e(ws,GYe),e(ws,SS),e(SS,OYe),e(ws,VYe),e(ws,RS),e(RS,XYe),e(ws,zYe),e(C,QYe),e(C,Zg),e(Zg,OZ),e(OZ,WYe),e(Zg,HYe),e(Zg,BS),e(BS,UYe),e(Zg,JYe),e(C,YYe),e(C,eh),e(eh,VZ),e(VZ,KYe),e(eh,ZYe),e(eh,PS),e(PS,eKe),e(eh,oKe),e(C,rKe),e(C,oh),e(oh,XZ),e(XZ,tKe),e(oh,aKe),e(oh,$S),e($S,nKe),e(oh,sKe),e(C,lKe),e(C,rh),e(rh,zZ),e(zZ,iKe),e(rh,dKe),e(rh,IS),e(IS,cKe),e(rh,fKe),e(C,mKe),e(C,As),e(As,QZ),e(QZ,gKe),e(As,hKe),e(As,qS),e(qS,pKe),e(As,_Ke),e(As,NS),e(NS,uKe),e(As,bKe),e(C,FKe),e(C,th),e(th,WZ),e(WZ,vKe),e(th,TKe),e(th,jS),e(jS,MKe),e(th,EKe),e(C,CKe),e(C,ys),e(ys,HZ),e(HZ,wKe),e(ys,AKe),e(ys,DS),e(DS,yKe),e(ys,LKe),e(ys,GS),e(GS,xKe),e(ys,kKe),e(C,SKe),e(C,Ls),e(Ls,UZ),e(UZ,RKe),e(Ls,BKe),e(Ls,OS),e(OS,PKe),e(Ls,$Ke),e(Ls,VS),e(VS,IKe),e(Ls,qKe),e(C,NKe),e(C,xs),e(xs,JZ),e(JZ,jKe),e(xs,DKe),e(xs,XS),e(XS,GKe),e(xs,OKe),e(xs,zS),e(zS,VKe),e(xs,XKe),e(C,zKe),e(C,ks),e(ks,YZ),e(YZ,QKe),e(ks,WKe),e(ks,QS),e(QS,HKe),e(ks,UKe),e(ks,WS),e(WS,JKe),e(ks,YKe),e(C,KKe),e(C,Ss),e(Ss,KZ),e(KZ,ZKe),e(Ss,eZe),e(Ss,HS),e(HS,oZe),e(Ss,rZe),e(Ss,US),e(US,tZe),e(Ss,aZe),e(C,nZe),e(C,Rs),e(Rs,ZZ),e(ZZ,sZe),e(Rs,lZe),e(Rs,JS),e(JS,iZe),e(Rs,dZe),e(Rs,YS),e(YS,cZe),e(Rs,fZe),e(C,mZe),e(C,ah),e(ah,eee),e(eee,gZe),e(ah,hZe),e(ah,KS),e(KS,pZe),e(ah,_Ze),e(C,uZe),e(C,nh),e(nh,oee),e(oee,bZe),e(nh,FZe),e(nh,ZS),e(ZS,vZe),e(nh,TZe),e(C,MZe),e(C,Bs),e(Bs,ree),e(ree,EZe),e(Bs,CZe),e(Bs,eR),e(eR,wZe),e(Bs,AZe),e(Bs,oR),e(oR,yZe),e(Bs,LZe),e(C,xZe),e(C,Ps),e(Ps,tee),e(tee,kZe),e(Ps,SZe),e(Ps,rR),e(rR,RZe),e(Ps,BZe),e(Ps,tR),e(tR,PZe),e(Ps,$Ze),e(C,IZe),e(C,$s),e($s,aee),e(aee,qZe),e($s,NZe),e($s,aR),e(aR,jZe),e($s,DZe),e($s,nR),e(nR,GZe),e($s,OZe),e(C,VZe),e(C,sh),e(sh,nee),e(nee,XZe),e(sh,zZe),e(sh,sR),e(sR,QZe),e(sh,WZe),e(C,HZe),e(C,lh),e(lh,see),e(see,UZe),e(lh,JZe),e(lh,lR),e(lR,YZe),e(lh,KZe),e(C,ZZe),e(C,ih),e(ih,lee),e(lee,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(C,aeo),e(C,dh),e(dh,iee),e(iee,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(C,deo),e(C,Is),e(Is,dee),e(dee,ceo),e(Is,feo),e(Is,cR),e(cR,meo),e(Is,geo),e(Is,fR),e(fR,heo),e(Is,peo),e(C,_eo),e(C,ch),e(ch,cee),e(cee,ueo),e(ch,beo),e(ch,mR),e(mR,Feo),e(ch,veo),e(C,Teo),e(C,fh),e(fh,fee),e(fee,Meo),e(fh,Eeo),e(fh,gR),e(gR,Ceo),e(fh,weo),e(C,Aeo),e(C,qs),e(qs,mee),e(mee,yeo),e(qs,Leo),e(qs,hR),e(hR,xeo),e(qs,keo),e(qs,pR),e(pR,Seo),e(qs,Reo),e(C,Beo),e(C,Ns),e(Ns,gee),e(gee,Peo),e(Ns,$eo),e(Ns,_R),e(_R,Ieo),e(Ns,qeo),e(Ns,uR),e(uR,Neo),e(Ns,jeo),e(go,Deo),e(go,hee),e(hee,Geo),e(go,Oeo),g(SC,go,null),e(Wo,Veo),e(Wo,mh),g(RC,mh,null),e(mh,Xeo),e(mh,pee),e(pee,zeo),b(c,NSe,u),b(c,Wi,u),e(Wi,gh),e(gh,_ee),g(BC,_ee,null),e(Wi,Qeo),e(Wi,uee),e(uee,Weo),b(c,jSe,u),b(c,Ho,u),g(PC,Ho,null),e(Ho,Heo),e(Ho,$C),e($C,Ueo),e($C,bR),e(bR,Jeo),e($C,Yeo),e(Ho,Keo),e(Ho,IC),e(IC,Zeo),e(IC,bee),e(bee,eoo),e(IC,ooo),e(Ho,roo),e(Ho,$e),g(qC,$e,null),e($e,too),e($e,Fee),e(Fee,aoo),e($e,noo),e($e,Va),e(Va,soo),e(Va,vee),e(vee,loo),e(Va,ioo),e(Va,Tee),e(Tee,doo),e(Va,coo),e(Va,Mee),e(Mee,foo),e(Va,moo),e($e,goo),e($e,te),e(te,hh),e(hh,Eee),e(Eee,hoo),e(hh,poo),e(hh,FR),e(FR,_oo),e(hh,uoo),e(te,boo),e(te,ph),e(ph,Cee),e(Cee,Foo),e(ph,voo),e(ph,vR),e(vR,Too),e(ph,Moo),e(te,Eoo),e(te,_h),e(_h,wee),e(wee,Coo),e(_h,woo),e(_h,TR),e(TR,Aoo),e(_h,yoo),e(te,Loo),e(te,uh),e(uh,Aee),e(Aee,xoo),e(uh,koo),e(uh,MR),e(MR,Soo),e(uh,Roo),e(te,Boo),e(te,bh),e(bh,yee),e(yee,Poo),e(bh,$oo),e(bh,ER),e(ER,Ioo),e(bh,qoo),e(te,Noo),e(te,Fh),e(Fh,Lee),e(Lee,joo),e(Fh,Doo),e(Fh,CR),e(CR,Goo),e(Fh,Ooo),e(te,Voo),e(te,vh),e(vh,xee),e(xee,Xoo),e(vh,zoo),e(vh,wR),e(wR,Qoo),e(vh,Woo),e(te,Hoo),e(te,Th),e(Th,kee),e(kee,Uoo),e(Th,Joo),e(Th,AR),e(AR,Yoo),e(Th,Koo),e(te,Zoo),e(te,Mh),e(Mh,See),e(See,ero),e(Mh,oro),e(Mh,yR),e(yR,rro),e(Mh,tro),e(te,aro),e(te,Eh),e(Eh,Ree),e(Ree,nro),e(Eh,sro),e(Eh,LR),e(LR,lro),e(Eh,iro),e(te,dro),e(te,Ch),e(Ch,Bee),e(Bee,cro),e(Ch,fro),e(Ch,xR),e(xR,mro),e(Ch,gro),e(te,hro),e(te,wh),e(wh,Pee),e(Pee,pro),e(wh,_ro),e(wh,kR),e(kR,uro),e(wh,bro),e(te,Fro),e(te,Ah),e(Ah,$ee),e($ee,vro),e(Ah,Tro),e(Ah,SR),e(SR,Mro),e(Ah,Ero),e(te,Cro),e(te,yh),e(yh,Iee),e(Iee,wro),e(yh,Aro),e(yh,RR),e(RR,yro),e(yh,Lro),e(te,xro),e(te,Lh),e(Lh,qee),e(qee,kro),e(Lh,Sro),e(Lh,BR),e(BR,Rro),e(Lh,Bro),e(te,Pro),e(te,xh),e(xh,Nee),e(Nee,$ro),e(xh,Iro),e(xh,PR),e(PR,qro),e(xh,Nro),e(te,jro),e(te,kh),e(kh,jee),e(jee,Dro),e(kh,Gro),e(kh,$R),e($R,Oro),e(kh,Vro),e(te,Xro),e(te,Sh),e(Sh,Dee),e(Dee,zro),e(Sh,Qro),e(Sh,IR),e(IR,Wro),e(Sh,Hro),e($e,Uro),g(Rh,$e,null),e($e,Jro),e($e,Gee),e(Gee,Yro),e($e,Kro),g(NC,$e,null),e(Ho,Zro),e(Ho,Bh),g(jC,Bh,null),e(Bh,eto),e(Bh,Oee),e(Oee,oto),b(c,DSe,u),b(c,Hi,u),e(Hi,Ph),e(Ph,Vee),g(DC,Vee,null),e(Hi,rto),e(Hi,Xee),e(Xee,tto),b(c,GSe,u),b(c,Uo,u),g(GC,Uo,null),e(Uo,ato),e(Uo,OC),e(OC,nto),e(OC,qR),e(qR,sto),e(OC,lto),e(Uo,ito),e(Uo,VC),e(VC,dto),e(VC,zee),e(zee,cto),e(VC,fto),e(Uo,mto),e(Uo,Ie),g(XC,Ie,null),e(Ie,gto),e(Ie,Qee),e(Qee,hto),e(Ie,pto),e(Ie,Ui),e(Ui,_to),e(Ui,Wee),e(Wee,uto),e(Ui,bto),e(Ui,Hee),e(Hee,Fto),e(Ui,vto),e(Ie,Tto),e(Ie,ke),e(ke,$h),e($h,Uee),e(Uee,Mto),e($h,Eto),e($h,NR),e(NR,Cto),e($h,wto),e(ke,Ato),e(ke,Ih),e(Ih,Jee),e(Jee,yto),e(Ih,Lto),e(Ih,jR),e(jR,xto),e(Ih,kto),e(ke,Sto),e(ke,qh),e(qh,Yee),e(Yee,Rto),e(qh,Bto),e(qh,DR),e(DR,Pto),e(qh,$to),e(ke,Ito),e(ke,Nh),e(Nh,Kee),e(Kee,qto),e(Nh,Nto),e(Nh,GR),e(GR,jto),e(Nh,Dto),e(ke,Gto),e(ke,jh),e(jh,Zee),e(Zee,Oto),e(jh,Vto),e(jh,OR),e(OR,Xto),e(jh,zto),e(ke,Qto),e(ke,Dh),e(Dh,eoe),e(eoe,Wto),e(Dh,Hto),e(Dh,VR),e(VR,Uto),e(Dh,Jto),e(ke,Yto),e(ke,Gh),e(Gh,ooe),e(ooe,Kto),e(Gh,Zto),e(Gh,XR),e(XR,eao),e(Gh,oao),e(ke,rao),e(ke,Oh),e(Oh,roe),e(roe,tao),e(Oh,aao),e(Oh,zR),e(zR,nao),e(Oh,sao),e(Ie,lao),g(Vh,Ie,null),e(Ie,iao),e(Ie,toe),e(toe,dao),e(Ie,cao),g(zC,Ie,null),e(Uo,fao),e(Uo,Xh),g(QC,Xh,null),e(Xh,mao),e(Xh,aoe),e(aoe,gao),b(c,OSe,u),b(c,Ji,u),e(Ji,zh),e(zh,noe),g(WC,noe,null),e(Ji,hao),e(Ji,soe),e(soe,pao),b(c,VSe,u),b(c,Jo,u),g(HC,Jo,null),e(Jo,_ao),e(Jo,Yi),e(Yi,uao),e(Yi,QR),e(QR,bao),e(Yi,Fao),e(Yi,WR),e(WR,vao),e(Yi,Tao),e(Jo,Mao),e(Jo,UC),e(UC,Eao),e(UC,loe),e(loe,Cao),e(UC,wao),e(Jo,Aao),e(Jo,Xr),g(JC,Xr,null),e(Xr,yao),e(Xr,ioe),e(ioe,Lao),e(Xr,xao),e(Xr,Ki),e(Ki,kao),e(Ki,doe),e(doe,Sao),e(Ki,Rao),e(Ki,HR),e(HR,Bao),e(Ki,Pao),e(Xr,$ao),e(Xr,coe),e(coe,Iao),e(Xr,qao),g(YC,Xr,null),e(Jo,Nao),e(Jo,qe),g(KC,qe,null),e(qe,jao),e(qe,foe),e(foe,Dao),e(qe,Gao),e(qe,Xa),e(Xa,Oao),e(Xa,moe),e(moe,Vao),e(Xa,Xao),e(Xa,goe),e(goe,zao),e(Xa,Qao),e(Xa,hoe),e(hoe,Wao),e(Xa,Hao),e(qe,Uao),e(qe,T),e(T,Qh),e(Qh,poe),e(poe,Jao),e(Qh,Yao),e(Qh,UR),e(UR,Kao),e(Qh,Zao),e(T,eno),e(T,Wh),e(Wh,_oe),e(_oe,ono),e(Wh,rno),e(Wh,JR),e(JR,tno),e(Wh,ano),e(T,nno),e(T,Hh),e(Hh,uoe),e(uoe,sno),e(Hh,lno),e(Hh,YR),e(YR,ino),e(Hh,dno),e(T,cno),e(T,Uh),e(Uh,boe),e(boe,fno),e(Uh,mno),e(Uh,KR),e(KR,gno),e(Uh,hno),e(T,pno),e(T,Jh),e(Jh,Foe),e(Foe,_no),e(Jh,uno),e(Jh,ZR),e(ZR,bno),e(Jh,Fno),e(T,vno),e(T,Yh),e(Yh,voe),e(voe,Tno),e(Yh,Mno),e(Yh,eB),e(eB,Eno),e(Yh,Cno),e(T,wno),e(T,Kh),e(Kh,Toe),e(Toe,Ano),e(Kh,yno),e(Kh,oB),e(oB,Lno),e(Kh,xno),e(T,kno),e(T,Zh),e(Zh,Moe),e(Moe,Sno),e(Zh,Rno),e(Zh,rB),e(rB,Bno),e(Zh,Pno),e(T,$no),e(T,ep),e(ep,Eoe),e(Eoe,Ino),e(ep,qno),e(ep,tB),e(tB,Nno),e(ep,jno),e(T,Dno),e(T,op),e(op,Coe),e(Coe,Gno),e(op,Ono),e(op,aB),e(aB,Vno),e(op,Xno),e(T,zno),e(T,rp),e(rp,woe),e(woe,Qno),e(rp,Wno),e(rp,nB),e(nB,Hno),e(rp,Uno),e(T,Jno),e(T,tp),e(tp,Aoe),e(Aoe,Yno),e(tp,Kno),e(tp,sB),e(sB,Zno),e(tp,eso),e(T,oso),e(T,ap),e(ap,yoe),e(yoe,rso),e(ap,tso),e(ap,lB),e(lB,aso),e(ap,nso),e(T,sso),e(T,np),e(np,Loe),e(Loe,lso),e(np,iso),e(np,iB),e(iB,dso),e(np,cso),e(T,fso),e(T,sp),e(sp,xoe),e(xoe,mso),e(sp,gso),e(sp,dB),e(dB,hso),e(sp,pso),e(T,_so),e(T,lp),e(lp,koe),e(koe,uso),e(lp,bso),e(lp,cB),e(cB,Fso),e(lp,vso),e(T,Tso),e(T,ip),e(ip,Soe),e(Soe,Mso),e(ip,Eso),e(ip,fB),e(fB,Cso),e(ip,wso),e(T,Aso),e(T,dp),e(dp,Roe),e(Roe,yso),e(dp,Lso),e(dp,mB),e(mB,xso),e(dp,kso),e(T,Sso),e(T,cp),e(cp,Boe),e(Boe,Rso),e(cp,Bso),e(cp,gB),e(gB,Pso),e(cp,$so),e(T,Iso),e(T,fp),e(fp,Poe),e(Poe,qso),e(fp,Nso),e(fp,hB),e(hB,jso),e(fp,Dso),e(T,Gso),e(T,mp),e(mp,$oe),e($oe,Oso),e(mp,Vso),e(mp,pB),e(pB,Xso),e(mp,zso),e(T,Qso),e(T,gp),e(gp,Ioe),e(Ioe,Wso),e(gp,Hso),e(gp,_B),e(_B,Uso),e(gp,Jso),e(T,Yso),e(T,hp),e(hp,qoe),e(qoe,Kso),e(hp,Zso),e(hp,uB),e(uB,elo),e(hp,olo),e(T,rlo),e(T,pp),e(pp,Noe),e(Noe,tlo),e(pp,alo),e(pp,bB),e(bB,nlo),e(pp,slo),e(T,llo),e(T,_p),e(_p,joe),e(joe,ilo),e(_p,dlo),e(_p,FB),e(FB,clo),e(_p,flo),e(T,mlo),e(T,up),e(up,Doe),e(Doe,glo),e(up,hlo),e(up,vB),e(vB,plo),e(up,_lo),e(T,ulo),e(T,bp),e(bp,Goe),e(Goe,blo),e(bp,Flo),e(bp,TB),e(TB,vlo),e(bp,Tlo),e(T,Mlo),e(T,Fp),e(Fp,Ooe),e(Ooe,Elo),e(Fp,Clo),e(Fp,MB),e(MB,wlo),e(Fp,Alo),e(T,ylo),e(T,vp),e(vp,Voe),e(Voe,Llo),e(vp,xlo),e(vp,EB),e(EB,klo),e(vp,Slo),e(T,Rlo),e(T,js),e(js,Xoe),e(Xoe,Blo),e(js,Plo),e(js,CB),e(CB,$lo),e(js,Ilo),e(js,wB),e(wB,qlo),e(js,Nlo),e(T,jlo),e(T,Tp),e(Tp,zoe),e(zoe,Dlo),e(Tp,Glo),e(Tp,AB),e(AB,Olo),e(Tp,Vlo),e(T,Xlo),e(T,Mp),e(Mp,Qoe),e(Qoe,zlo),e(Mp,Qlo),e(Mp,yB),e(yB,Wlo),e(Mp,Hlo),e(T,Ulo),e(T,Ep),e(Ep,Woe),e(Woe,Jlo),e(Ep,Ylo),e(Ep,LB),e(LB,Klo),e(Ep,Zlo),e(T,eio),e(T,Cp),e(Cp,Hoe),e(Hoe,oio),e(Cp,rio),e(Cp,xB),e(xB,tio),e(Cp,aio),e(T,nio),e(T,wp),e(wp,Uoe),e(Uoe,sio),e(wp,lio),e(wp,kB),e(kB,iio),e(wp,dio),e(T,cio),e(T,Ap),e(Ap,Joe),e(Joe,fio),e(Ap,mio),e(Ap,SB),e(SB,gio),e(Ap,hio),e(T,pio),e(T,yp),e(yp,Yoe),e(Yoe,_io),e(yp,uio),e(yp,RB),e(RB,bio),e(yp,Fio),e(T,vio),e(T,Lp),e(Lp,Koe),e(Koe,Tio),e(Lp,Mio),e(Lp,BB),e(BB,Eio),e(Lp,Cio),e(T,wio),e(T,xp),e(xp,Zoe),e(Zoe,Aio),e(xp,yio),e(xp,PB),e(PB,Lio),e(xp,xio),e(T,kio),e(T,kp),e(kp,ere),e(ere,Sio),e(kp,Rio),e(kp,$B),e($B,Bio),e(kp,Pio),e(T,$io),e(T,Sp),e(Sp,ore),e(ore,Iio),e(Sp,qio),e(Sp,IB),e(IB,Nio),e(Sp,jio),e(T,Dio),e(T,Rp),e(Rp,rre),e(rre,Gio),e(Rp,Oio),e(Rp,qB),e(qB,Vio),e(Rp,Xio),e(T,zio),e(T,Bp),e(Bp,tre),e(tre,Qio),e(Bp,Wio),e(Bp,NB),e(NB,Hio),e(Bp,Uio),e(T,Jio),e(T,Pp),e(Pp,are),e(are,Yio),e(Pp,Kio),e(Pp,jB),e(jB,Zio),e(Pp,edo),e(T,odo),e(T,$p),e($p,nre),e(nre,rdo),e($p,tdo),e($p,DB),e(DB,ado),e($p,ndo),e(T,sdo),e(T,Ip),e(Ip,sre),e(sre,ldo),e(Ip,ido),e(Ip,GB),e(GB,ddo),e(Ip,cdo),e(T,fdo),e(T,qp),e(qp,lre),e(lre,mdo),e(qp,gdo),e(qp,OB),e(OB,hdo),e(qp,pdo),e(T,_do),e(T,Np),e(Np,ire),e(ire,udo),e(Np,bdo),e(Np,VB),e(VB,Fdo),e(Np,vdo),e(T,Tdo),e(T,jp),e(jp,dre),e(dre,Mdo),e(jp,Edo),e(jp,XB),e(XB,Cdo),e(jp,wdo),e(T,Ado),e(T,Dp),e(Dp,cre),e(cre,ydo),e(Dp,Ldo),e(Dp,zB),e(zB,xdo),e(Dp,kdo),e(T,Sdo),e(T,Gp),e(Gp,fre),e(fre,Rdo),e(Gp,Bdo),e(Gp,QB),e(QB,Pdo),e(Gp,$do),e(T,Ido),e(T,Op),e(Op,mre),e(mre,qdo),e(Op,Ndo),e(Op,WB),e(WB,jdo),e(Op,Ddo),e(T,Gdo),e(T,Vp),e(Vp,gre),e(gre,Odo),e(Vp,Vdo),e(Vp,HB),e(HB,Xdo),e(Vp,zdo),e(T,Qdo),e(T,Xp),e(Xp,hre),e(hre,Wdo),e(Xp,Hdo),e(Xp,UB),e(UB,Udo),e(Xp,Jdo),e(T,Ydo),e(T,zp),e(zp,pre),e(pre,Kdo),e(zp,Zdo),e(zp,JB),e(JB,eco),e(zp,oco),e(T,rco),e(T,Qp),e(Qp,_re),e(_re,tco),e(Qp,aco),e(Qp,YB),e(YB,nco),e(Qp,sco),e(T,lco),e(T,Wp),e(Wp,ure),e(ure,ico),e(Wp,dco),e(Wp,KB),e(KB,cco),e(Wp,fco),e(T,mco),e(T,Hp),e(Hp,bre),e(bre,gco),e(Hp,hco),e(Hp,ZB),e(ZB,pco),e(Hp,_co),e(T,uco),e(T,Up),e(Up,Fre),e(Fre,bco),e(Up,Fco),e(Up,eP),e(eP,vco),e(Up,Tco),e(T,Mco),e(T,Jp),e(Jp,vre),e(vre,Eco),e(Jp,Cco),e(Jp,oP),e(oP,wco),e(Jp,Aco),e(T,yco),e(T,Yp),e(Yp,Tre),e(Tre,Lco),e(Yp,xco),e(Yp,rP),e(rP,kco),e(Yp,Sco),e(T,Rco),e(T,Kp),e(Kp,Mre),e(Mre,Bco),e(Kp,Pco),e(Kp,tP),e(tP,$co),e(Kp,Ico),e(T,qco),e(T,Zp),e(Zp,Ere),e(Ere,Nco),e(Zp,jco),e(Zp,aP),e(aP,Dco),e(Zp,Gco),e(T,Oco),e(T,e_),e(e_,Cre),e(Cre,Vco),e(e_,Xco),e(e_,nP),e(nP,zco),e(e_,Qco),e(T,Wco),e(T,o_),e(o_,wre),e(wre,Hco),e(o_,Uco),e(o_,sP),e(sP,Jco),e(o_,Yco),e(T,Kco),e(T,r_),e(r_,Are),e(Are,Zco),e(r_,efo),e(r_,lP),e(lP,ofo),e(r_,rfo),e(T,tfo),e(T,t_),e(t_,yre),e(yre,afo),e(t_,nfo),e(t_,iP),e(iP,sfo),e(t_,lfo),e(T,ifo),e(T,a_),e(a_,Lre),e(Lre,dfo),e(a_,cfo),e(a_,dP),e(dP,ffo),e(a_,mfo),e(T,gfo),e(T,n_),e(n_,xre),e(xre,hfo),e(n_,pfo),e(n_,cP),e(cP,_fo),e(n_,ufo),e(T,bfo),e(T,s_),e(s_,kre),e(kre,Ffo),e(s_,vfo),e(s_,fP),e(fP,Tfo),e(s_,Mfo),e(T,Efo),e(T,l_),e(l_,Sre),e(Sre,Cfo),e(l_,wfo),e(l_,mP),e(mP,Afo),e(l_,yfo),e(T,Lfo),e(T,i_),e(i_,Rre),e(Rre,xfo),e(i_,kfo),e(i_,gP),e(gP,Sfo),e(i_,Rfo),e(T,Bfo),e(T,d_),e(d_,Bre),e(Bre,Pfo),e(d_,$fo),e(d_,hP),e(hP,Ifo),e(d_,qfo),e(T,Nfo),e(T,c_),e(c_,Pre),e(Pre,jfo),e(c_,Dfo),e(c_,pP),e(pP,Gfo),e(c_,Ofo),e(T,Vfo),e(T,f_),e(f_,$re),e($re,Xfo),e(f_,zfo),e(f_,_P),e(_P,Qfo),e(f_,Wfo),e(T,Hfo),e(T,m_),e(m_,Ire),e(Ire,Ufo),e(m_,Jfo),e(m_,uP),e(uP,Yfo),e(m_,Kfo),e(T,Zfo),e(T,g_),e(g_,qre),e(qre,emo),e(g_,omo),e(g_,bP),e(bP,rmo),e(g_,tmo),e(T,amo),e(T,h_),e(h_,Nre),e(Nre,nmo),e(h_,smo),e(h_,FP),e(FP,lmo),e(h_,imo),e(T,dmo),e(T,p_),e(p_,jre),e(jre,cmo),e(p_,fmo),e(p_,vP),e(vP,mmo),e(p_,gmo),e(T,hmo),e(T,__),e(__,Dre),e(Dre,pmo),e(__,_mo),e(__,TP),e(TP,umo),e(__,bmo),e(T,Fmo),e(T,u_),e(u_,Gre),e(Gre,vmo),e(u_,Tmo),e(u_,MP),e(MP,Mmo),e(u_,Emo),e(T,Cmo),e(T,b_),e(b_,Ore),e(Ore,wmo),e(b_,Amo),e(b_,EP),e(EP,ymo),e(b_,Lmo),e(T,xmo),e(T,F_),e(F_,Vre),e(Vre,kmo),e(F_,Smo),e(F_,CP),e(CP,Rmo),e(F_,Bmo),e(T,Pmo),e(T,v_),e(v_,Xre),e(Xre,$mo),e(v_,Imo),e(v_,wP),e(wP,qmo),e(v_,Nmo),e(T,jmo),e(T,T_),e(T_,zre),e(zre,Dmo),e(T_,Gmo),e(T_,AP),e(AP,Omo),e(T_,Vmo),e(T,Xmo),e(T,M_),e(M_,Qre),e(Qre,zmo),e(M_,Qmo),e(M_,yP),e(yP,Wmo),e(M_,Hmo),e(T,Umo),e(T,E_),e(E_,Wre),e(Wre,Jmo),e(E_,Ymo),e(E_,LP),e(LP,Kmo),e(E_,Zmo),e(T,ego),e(T,C_),e(C_,Hre),e(Hre,ogo),e(C_,rgo),e(C_,xP),e(xP,tgo),e(C_,ago),e(T,ngo),e(T,w_),e(w_,Ure),e(Ure,sgo),e(w_,lgo),e(w_,kP),e(kP,igo),e(w_,dgo),e(T,cgo),e(T,A_),e(A_,Jre),e(Jre,fgo),e(A_,mgo),e(A_,SP),e(SP,ggo),e(A_,hgo),e(T,pgo),e(T,y_),e(y_,Yre),e(Yre,_go),e(y_,ugo),e(y_,RP),e(RP,bgo),e(y_,Fgo),e(T,vgo),e(T,L_),e(L_,Kre),e(Kre,Tgo),e(L_,Mgo),e(L_,BP),e(BP,Ego),e(L_,Cgo),e(qe,wgo),e(qe,x_),e(x_,Ago),e(x_,Zre),e(Zre,ygo),e(x_,Lgo),e(x_,ete),e(ete,xgo),e(qe,kgo),e(qe,ote),e(ote,Sgo),e(qe,Rgo),g(ZC,qe,null),b(c,XSe,u),b(c,Zi,u),e(Zi,k_),e(k_,rte),g(e5,rte,null),e(Zi,Bgo),e(Zi,tte),e(tte,Pgo),b(c,zSe,u),b(c,Yo,u),g(o5,Yo,null),e(Yo,$go),e(Yo,ed),e(ed,Igo),e(ed,PP),e(PP,qgo),e(ed,Ngo),e(ed,$P),e($P,jgo),e(ed,Dgo),e(Yo,Ggo),e(Yo,r5),e(r5,Ogo),e(r5,ate),e(ate,Vgo),e(r5,Xgo),e(Yo,zgo),e(Yo,zr),g(t5,zr,null),e(zr,Qgo),e(zr,nte),e(nte,Wgo),e(zr,Hgo),e(zr,od),e(od,Ugo),e(od,ste),e(ste,Jgo),e(od,Ygo),e(od,IP),e(IP,Kgo),e(od,Zgo),e(zr,eho),e(zr,lte),e(lte,oho),e(zr,rho),g(a5,zr,null),e(Yo,tho),e(Yo,Ne),g(n5,Ne,null),e(Ne,aho),e(Ne,ite),e(ite,nho),e(Ne,sho),e(Ne,za),e(za,lho),e(za,dte),e(dte,iho),e(za,dho),e(za,cte),e(cte,cho),e(za,fho),e(za,fte),e(fte,mho),e(za,gho),e(Ne,hho),e(Ne,S),e(S,S_),e(S_,mte),e(mte,pho),e(S_,_ho),e(S_,qP),e(qP,uho),e(S_,bho),e(S,Fho),e(S,R_),e(R_,gte),e(gte,vho),e(R_,Tho),e(R_,NP),e(NP,Mho),e(R_,Eho),e(S,Cho),e(S,B_),e(B_,hte),e(hte,who),e(B_,Aho),e(B_,jP),e(jP,yho),e(B_,Lho),e(S,xho),e(S,P_),e(P_,pte),e(pte,kho),e(P_,Sho),e(P_,DP),e(DP,Rho),e(P_,Bho),e(S,Pho),e(S,$_),e($_,_te),e(_te,$ho),e($_,Iho),e($_,GP),e(GP,qho),e($_,Nho),e(S,jho),e(S,I_),e(I_,ute),e(ute,Dho),e(I_,Gho),e(I_,OP),e(OP,Oho),e(I_,Vho),e(S,Xho),e(S,q_),e(q_,bte),e(bte,zho),e(q_,Qho),e(q_,VP),e(VP,Who),e(q_,Hho),e(S,Uho),e(S,N_),e(N_,Fte),e(Fte,Jho),e(N_,Yho),e(N_,XP),e(XP,Kho),e(N_,Zho),e(S,epo),e(S,j_),e(j_,vte),e(vte,opo),e(j_,rpo),e(j_,zP),e(zP,tpo),e(j_,apo),e(S,npo),e(S,D_),e(D_,Tte),e(Tte,spo),e(D_,lpo),e(D_,QP),e(QP,ipo),e(D_,dpo),e(S,cpo),e(S,G_),e(G_,Mte),e(Mte,fpo),e(G_,mpo),e(G_,WP),e(WP,gpo),e(G_,hpo),e(S,ppo),e(S,O_),e(O_,Ete),e(Ete,_po),e(O_,upo),e(O_,HP),e(HP,bpo),e(O_,Fpo),e(S,vpo),e(S,V_),e(V_,Cte),e(Cte,Tpo),e(V_,Mpo),e(V_,UP),e(UP,Epo),e(V_,Cpo),e(S,wpo),e(S,X_),e(X_,wte),e(wte,Apo),e(X_,ypo),e(X_,JP),e(JP,Lpo),e(X_,xpo),e(S,kpo),e(S,z_),e(z_,Ate),e(Ate,Spo),e(z_,Rpo),e(z_,YP),e(YP,Bpo),e(z_,Ppo),e(S,$po),e(S,Q_),e(Q_,yte),e(yte,Ipo),e(Q_,qpo),e(Q_,KP),e(KP,Npo),e(Q_,jpo),e(S,Dpo),e(S,W_),e(W_,Lte),e(Lte,Gpo),e(W_,Opo),e(W_,ZP),e(ZP,Vpo),e(W_,Xpo),e(S,zpo),e(S,H_),e(H_,xte),e(xte,Qpo),e(H_,Wpo),e(H_,e$),e(e$,Hpo),e(H_,Upo),e(S,Jpo),e(S,U_),e(U_,kte),e(kte,Ypo),e(U_,Kpo),e(U_,o$),e(o$,Zpo),e(U_,e_o),e(S,o_o),e(S,J_),e(J_,Ste),e(Ste,r_o),e(J_,t_o),e(J_,r$),e(r$,a_o),e(J_,n_o),e(S,s_o),e(S,Y_),e(Y_,Rte),e(Rte,l_o),e(Y_,i_o),e(Y_,t$),e(t$,d_o),e(Y_,c_o),e(S,f_o),e(S,K_),e(K_,Bte),e(Bte,m_o),e(K_,g_o),e(K_,a$),e(a$,h_o),e(K_,p_o),e(S,__o),e(S,Z_),e(Z_,Pte),e(Pte,u_o),e(Z_,b_o),e(Z_,n$),e(n$,F_o),e(Z_,v_o),e(S,T_o),e(S,eu),e(eu,$te),e($te,M_o),e(eu,E_o),e(eu,s$),e(s$,C_o),e(eu,w_o),e(S,A_o),e(S,ou),e(ou,Ite),e(Ite,y_o),e(ou,L_o),e(ou,l$),e(l$,x_o),e(ou,k_o),e(S,S_o),e(S,ru),e(ru,qte),e(qte,R_o),e(ru,B_o),e(ru,i$),e(i$,P_o),e(ru,$_o),e(S,I_o),e(S,tu),e(tu,Nte),e(Nte,q_o),e(tu,N_o),e(tu,d$),e(d$,j_o),e(tu,D_o),e(S,G_o),e(S,au),e(au,jte),e(jte,O_o),e(au,V_o),e(au,c$),e(c$,X_o),e(au,z_o),e(S,Q_o),e(S,nu),e(nu,Dte),e(Dte,W_o),e(nu,H_o),e(nu,f$),e(f$,U_o),e(nu,J_o),e(S,Y_o),e(S,su),e(su,Gte),e(Gte,K_o),e(su,Z_o),e(su,m$),e(m$,euo),e(su,ouo),e(S,ruo),e(S,lu),e(lu,Ote),e(Ote,tuo),e(lu,auo),e(lu,g$),e(g$,nuo),e(lu,suo),e(S,luo),e(S,iu),e(iu,Vte),e(Vte,iuo),e(iu,duo),e(iu,h$),e(h$,cuo),e(iu,fuo),e(S,muo),e(S,du),e(du,Xte),e(Xte,guo),e(du,huo),e(du,p$),e(p$,puo),e(du,_uo),e(S,uuo),e(S,cu),e(cu,zte),e(zte,buo),e(cu,Fuo),e(cu,_$),e(_$,vuo),e(cu,Tuo),e(S,Muo),e(S,fu),e(fu,Qte),e(Qte,Euo),e(fu,Cuo),e(fu,u$),e(u$,wuo),e(fu,Auo),e(S,yuo),e(S,mu),e(mu,Wte),e(Wte,Luo),e(mu,xuo),e(mu,b$),e(b$,kuo),e(mu,Suo),e(S,Ruo),e(S,gu),e(gu,Hte),e(Hte,Buo),e(gu,Puo),e(gu,F$),e(F$,$uo),e(gu,Iuo),e(S,quo),e(S,hu),e(hu,Ute),e(Ute,Nuo),e(hu,juo),e(hu,v$),e(v$,Duo),e(hu,Guo),e(S,Ouo),e(S,pu),e(pu,Jte),e(Jte,Vuo),e(pu,Xuo),e(pu,T$),e(T$,zuo),e(pu,Quo),e(Ne,Wuo),e(Ne,_u),e(_u,Huo),e(_u,Yte),e(Yte,Uuo),e(_u,Juo),e(_u,Kte),e(Kte,Yuo),e(Ne,Kuo),e(Ne,Zte),e(Zte,Zuo),e(Ne,e1o),g(s5,Ne,null),b(c,QSe,u),b(c,rd,u),e(rd,uu),e(uu,eae),g(l5,eae,null),e(rd,o1o),e(rd,oae),e(oae,r1o),b(c,WSe,u),b(c,Ko,u),g(i5,Ko,null),e(Ko,t1o),e(Ko,td),e(td,a1o),e(td,M$),e(M$,n1o),e(td,s1o),e(td,E$),e(E$,l1o),e(td,i1o),e(Ko,d1o),e(Ko,d5),e(d5,c1o),e(d5,rae),e(rae,f1o),e(d5,m1o),e(Ko,g1o),e(Ko,Qr),g(c5,Qr,null),e(Qr,h1o),e(Qr,tae),e(tae,p1o),e(Qr,_1o),e(Qr,ad),e(ad,u1o),e(ad,aae),e(aae,b1o),e(ad,F1o),e(ad,C$),e(C$,v1o),e(ad,T1o),e(Qr,M1o),e(Qr,nae),e(nae,E1o),e(Qr,C1o),g(f5,Qr,null),e(Ko,w1o),e(Ko,je),g(m5,je,null),e(je,A1o),e(je,sae),e(sae,y1o),e(je,L1o),e(je,Qa),e(Qa,x1o),e(Qa,lae),e(lae,k1o),e(Qa,S1o),e(Qa,iae),e(iae,R1o),e(Qa,B1o),e(Qa,dae),e(dae,P1o),e(Qa,$1o),e(je,I1o),e(je,$),e($,bu),e(bu,cae),e(cae,q1o),e(bu,N1o),e(bu,w$),e(w$,j1o),e(bu,D1o),e($,G1o),e($,Fu),e(Fu,fae),e(fae,O1o),e(Fu,V1o),e(Fu,A$),e(A$,X1o),e(Fu,z1o),e($,Q1o),e($,vu),e(vu,mae),e(mae,W1o),e(vu,H1o),e(vu,y$),e(y$,U1o),e(vu,J1o),e($,Y1o),e($,Tu),e(Tu,gae),e(gae,K1o),e(Tu,Z1o),e(Tu,L$),e(L$,ebo),e(Tu,obo),e($,rbo),e($,Mu),e(Mu,hae),e(hae,tbo),e(Mu,abo),e(Mu,x$),e(x$,nbo),e(Mu,sbo),e($,lbo),e($,Eu),e(Eu,pae),e(pae,ibo),e(Eu,dbo),e(Eu,k$),e(k$,cbo),e(Eu,fbo),e($,mbo),e($,Cu),e(Cu,_ae),e(_ae,gbo),e(Cu,hbo),e(Cu,S$),e(S$,pbo),e(Cu,_bo),e($,ubo),e($,wu),e(wu,uae),e(uae,bbo),e(wu,Fbo),e(wu,R$),e(R$,vbo),e(wu,Tbo),e($,Mbo),e($,Au),e(Au,bae),e(bae,Ebo),e(Au,Cbo),e(Au,B$),e(B$,wbo),e(Au,Abo),e($,ybo),e($,yu),e(yu,Fae),e(Fae,Lbo),e(yu,xbo),e(yu,P$),e(P$,kbo),e(yu,Sbo),e($,Rbo),e($,Lu),e(Lu,vae),e(vae,Bbo),e(Lu,Pbo),e(Lu,$$),e($$,$bo),e(Lu,Ibo),e($,qbo),e($,xu),e(xu,Tae),e(Tae,Nbo),e(xu,jbo),e(xu,I$),e(I$,Dbo),e(xu,Gbo),e($,Obo),e($,ku),e(ku,Mae),e(Mae,Vbo),e(ku,Xbo),e(ku,q$),e(q$,zbo),e(ku,Qbo),e($,Wbo),e($,Su),e(Su,Eae),e(Eae,Hbo),e(Su,Ubo),e(Su,N$),e(N$,Jbo),e(Su,Ybo),e($,Kbo),e($,Ru),e(Ru,Cae),e(Cae,Zbo),e(Ru,e3o),e(Ru,j$),e(j$,o3o),e(Ru,r3o),e($,t3o),e($,Bu),e(Bu,wae),e(wae,a3o),e(Bu,n3o),e(Bu,D$),e(D$,s3o),e(Bu,l3o),e($,i3o),e($,Pu),e(Pu,Aae),e(Aae,d3o),e(Pu,c3o),e(Pu,G$),e(G$,f3o),e(Pu,m3o),e($,g3o),e($,$u),e($u,yae),e(yae,h3o),e($u,p3o),e($u,O$),e(O$,_3o),e($u,u3o),e($,b3o),e($,Iu),e(Iu,Lae),e(Lae,F3o),e(Iu,v3o),e(Iu,V$),e(V$,T3o),e(Iu,M3o),e($,E3o),e($,qu),e(qu,xae),e(xae,C3o),e(qu,w3o),e(qu,X$),e(X$,A3o),e(qu,y3o),e($,L3o),e($,Nu),e(Nu,kae),e(kae,x3o),e(Nu,k3o),e(Nu,z$),e(z$,S3o),e(Nu,R3o),e($,B3o),e($,ju),e(ju,Sae),e(Sae,P3o),e(ju,$3o),e(ju,Q$),e(Q$,I3o),e(ju,q3o),e($,N3o),e($,Du),e(Du,Rae),e(Rae,j3o),e(Du,D3o),e(Du,W$),e(W$,G3o),e(Du,O3o),e($,V3o),e($,Gu),e(Gu,Bae),e(Bae,X3o),e(Gu,z3o),e(Gu,H$),e(H$,Q3o),e(Gu,W3o),e($,H3o),e($,Ou),e(Ou,Pae),e(Pae,U3o),e(Ou,J3o),e(Ou,U$),e(U$,Y3o),e(Ou,K3o),e($,Z3o),e($,Vu),e(Vu,$ae),e($ae,e2o),e(Vu,o2o),e(Vu,J$),e(J$,r2o),e(Vu,t2o),e($,a2o),e($,Xu),e(Xu,Iae),e(Iae,n2o),e(Xu,s2o),e(Xu,Y$),e(Y$,l2o),e(Xu,i2o),e($,d2o),e($,zu),e(zu,qae),e(qae,c2o),e(zu,f2o),e(zu,K$),e(K$,m2o),e(zu,g2o),e($,h2o),e($,Qu),e(Qu,Nae),e(Nae,p2o),e(Qu,_2o),e(Qu,Z$),e(Z$,u2o),e(Qu,b2o),e($,F2o),e($,Wu),e(Wu,jae),e(jae,v2o),e(Wu,T2o),e(Wu,eI),e(eI,M2o),e(Wu,E2o),e($,C2o),e($,Hu),e(Hu,Dae),e(Dae,w2o),e(Hu,A2o),e(Hu,oI),e(oI,y2o),e(Hu,L2o),e($,x2o),e($,Uu),e(Uu,Gae),e(Gae,k2o),e(Uu,S2o),e(Uu,rI),e(rI,R2o),e(Uu,B2o),e($,P2o),e($,Ju),e(Ju,Oae),e(Oae,$2o),e(Ju,I2o),e(Ju,tI),e(tI,q2o),e(Ju,N2o),e($,j2o),e($,Yu),e(Yu,Vae),e(Vae,D2o),e(Yu,G2o),e(Yu,aI),e(aI,O2o),e(Yu,V2o),e($,X2o),e($,Ku),e(Ku,Xae),e(Xae,z2o),e(Ku,Q2o),e(Ku,nI),e(nI,W2o),e(Ku,H2o),e(je,U2o),e(je,Zu),e(Zu,J2o),e(Zu,zae),e(zae,Y2o),e(Zu,K2o),e(Zu,Qae),e(Qae,Z2o),e(je,eFo),e(je,Wae),e(Wae,oFo),e(je,rFo),g(g5,je,null),b(c,HSe,u),b(c,nd,u),e(nd,e1),e(e1,Hae),g(h5,Hae,null),e(nd,tFo),e(nd,Uae),e(Uae,aFo),b(c,USe,u),b(c,Zo,u),g(p5,Zo,null),e(Zo,nFo),e(Zo,sd),e(sd,sFo),e(sd,sI),e(sI,lFo),e(sd,iFo),e(sd,lI),e(lI,dFo),e(sd,cFo),e(Zo,fFo),e(Zo,_5),e(_5,mFo),e(_5,Jae),e(Jae,gFo),e(_5,hFo),e(Zo,pFo),e(Zo,Wr),g(u5,Wr,null),e(Wr,_Fo),e(Wr,Yae),e(Yae,uFo),e(Wr,bFo),e(Wr,ld),e(ld,FFo),e(ld,Kae),e(Kae,vFo),e(ld,TFo),e(ld,iI),e(iI,MFo),e(ld,EFo),e(Wr,CFo),e(Wr,Zae),e(Zae,wFo),e(Wr,AFo),g(b5,Wr,null),e(Zo,yFo),e(Zo,De),g(F5,De,null),e(De,LFo),e(De,ene),e(ene,xFo),e(De,kFo),e(De,Wa),e(Wa,SFo),e(Wa,one),e(one,RFo),e(Wa,BFo),e(Wa,rne),e(rne,PFo),e(Wa,$Fo),e(Wa,tne),e(tne,IFo),e(Wa,qFo),e(De,NFo),e(De,I),e(I,o1),e(o1,ane),e(ane,jFo),e(o1,DFo),e(o1,dI),e(dI,GFo),e(o1,OFo),e(I,VFo),e(I,r1),e(r1,nne),e(nne,XFo),e(r1,zFo),e(r1,cI),e(cI,QFo),e(r1,WFo),e(I,HFo),e(I,t1),e(t1,sne),e(sne,UFo),e(t1,JFo),e(t1,fI),e(fI,YFo),e(t1,KFo),e(I,ZFo),e(I,a1),e(a1,lne),e(lne,evo),e(a1,ovo),e(a1,mI),e(mI,rvo),e(a1,tvo),e(I,avo),e(I,n1),e(n1,ine),e(ine,nvo),e(n1,svo),e(n1,gI),e(gI,lvo),e(n1,ivo),e(I,dvo),e(I,s1),e(s1,dne),e(dne,cvo),e(s1,fvo),e(s1,hI),e(hI,mvo),e(s1,gvo),e(I,hvo),e(I,l1),e(l1,cne),e(cne,pvo),e(l1,_vo),e(l1,pI),e(pI,uvo),e(l1,bvo),e(I,Fvo),e(I,i1),e(i1,fne),e(fne,vvo),e(i1,Tvo),e(i1,_I),e(_I,Mvo),e(i1,Evo),e(I,Cvo),e(I,d1),e(d1,mne),e(mne,wvo),e(d1,Avo),e(d1,uI),e(uI,yvo),e(d1,Lvo),e(I,xvo),e(I,c1),e(c1,gne),e(gne,kvo),e(c1,Svo),e(c1,bI),e(bI,Rvo),e(c1,Bvo),e(I,Pvo),e(I,f1),e(f1,hne),e(hne,$vo),e(f1,Ivo),e(f1,FI),e(FI,qvo),e(f1,Nvo),e(I,jvo),e(I,m1),e(m1,pne),e(pne,Dvo),e(m1,Gvo),e(m1,vI),e(vI,Ovo),e(m1,Vvo),e(I,Xvo),e(I,g1),e(g1,_ne),e(_ne,zvo),e(g1,Qvo),e(g1,TI),e(TI,Wvo),e(g1,Hvo),e(I,Uvo),e(I,h1),e(h1,une),e(une,Jvo),e(h1,Yvo),e(h1,MI),e(MI,Kvo),e(h1,Zvo),e(I,e6o),e(I,p1),e(p1,bne),e(bne,o6o),e(p1,r6o),e(p1,EI),e(EI,t6o),e(p1,a6o),e(I,n6o),e(I,_1),e(_1,Fne),e(Fne,s6o),e(_1,l6o),e(_1,CI),e(CI,i6o),e(_1,d6o),e(I,c6o),e(I,u1),e(u1,vne),e(vne,f6o),e(u1,m6o),e(u1,wI),e(wI,g6o),e(u1,h6o),e(I,p6o),e(I,b1),e(b1,Tne),e(Tne,_6o),e(b1,u6o),e(b1,AI),e(AI,b6o),e(b1,F6o),e(I,v6o),e(I,F1),e(F1,Mne),e(Mne,T6o),e(F1,M6o),e(F1,yI),e(yI,E6o),e(F1,C6o),e(I,w6o),e(I,v1),e(v1,Ene),e(Ene,A6o),e(v1,y6o),e(v1,LI),e(LI,L6o),e(v1,x6o),e(I,k6o),e(I,T1),e(T1,Cne),e(Cne,S6o),e(T1,R6o),e(T1,xI),e(xI,B6o),e(T1,P6o),e(I,$6o),e(I,M1),e(M1,wne),e(wne,I6o),e(M1,q6o),e(M1,kI),e(kI,N6o),e(M1,j6o),e(I,D6o),e(I,E1),e(E1,Ane),e(Ane,G6o),e(E1,O6o),e(E1,SI),e(SI,V6o),e(E1,X6o),e(I,z6o),e(I,C1),e(C1,yne),e(yne,Q6o),e(C1,W6o),e(C1,RI),e(RI,H6o),e(C1,U6o),e(I,J6o),e(I,w1),e(w1,Lne),e(Lne,Y6o),e(w1,K6o),e(w1,BI),e(BI,Z6o),e(w1,eTo),e(I,oTo),e(I,A1),e(A1,xne),e(xne,rTo),e(A1,tTo),e(A1,PI),e(PI,aTo),e(A1,nTo),e(I,sTo),e(I,y1),e(y1,kne),e(kne,lTo),e(y1,iTo),e(y1,$I),e($I,dTo),e(y1,cTo),e(I,fTo),e(I,L1),e(L1,Sne),e(Sne,mTo),e(L1,gTo),e(L1,II),e(II,hTo),e(L1,pTo),e(I,_To),e(I,x1),e(x1,Rne),e(Rne,uTo),e(x1,bTo),e(x1,qI),e(qI,FTo),e(x1,vTo),e(I,TTo),e(I,k1),e(k1,Bne),e(Bne,MTo),e(k1,ETo),e(k1,NI),e(NI,CTo),e(k1,wTo),e(I,ATo),e(I,S1),e(S1,Pne),e(Pne,yTo),e(S1,LTo),e(S1,$ne),e($ne,xTo),e(S1,kTo),e(I,STo),e(I,R1),e(R1,Ine),e(Ine,RTo),e(R1,BTo),e(R1,jI),e(jI,PTo),e(R1,$To),e(I,ITo),e(I,B1),e(B1,qne),e(qne,qTo),e(B1,NTo),e(B1,DI),e(DI,jTo),e(B1,DTo),e(I,GTo),e(I,P1),e(P1,Nne),e(Nne,OTo),e(P1,VTo),e(P1,GI),e(GI,XTo),e(P1,zTo),e(I,QTo),e(I,$1),e($1,jne),e(jne,WTo),e($1,HTo),e($1,OI),e(OI,UTo),e($1,JTo),e(De,YTo),e(De,I1),e(I1,KTo),e(I1,Dne),e(Dne,ZTo),e(I1,e7o),e(I1,Gne),e(Gne,o7o),e(De,r7o),e(De,One),e(One,t7o),e(De,a7o),g(v5,De,null),b(c,JSe,u),b(c,id,u),e(id,q1),e(q1,Vne),g(T5,Vne,null),e(id,n7o),e(id,Xne),e(Xne,s7o),b(c,YSe,u),b(c,er,u),g(M5,er,null),e(er,l7o),e(er,dd),e(dd,i7o),e(dd,VI),e(VI,d7o),e(dd,c7o),e(dd,XI),e(XI,f7o),e(dd,m7o),e(er,g7o),e(er,E5),e(E5,h7o),e(E5,zne),e(zne,p7o),e(E5,_7o),e(er,u7o),e(er,Hr),g(C5,Hr,null),e(Hr,b7o),e(Hr,Qne),e(Qne,F7o),e(Hr,v7o),e(Hr,cd),e(cd,T7o),e(cd,Wne),e(Wne,M7o),e(cd,E7o),e(cd,zI),e(zI,C7o),e(cd,w7o),e(Hr,A7o),e(Hr,Hne),e(Hne,y7o),e(Hr,L7o),g(w5,Hr,null),e(er,x7o),e(er,Ge),g(A5,Ge,null),e(Ge,k7o),e(Ge,Une),e(Une,S7o),e(Ge,R7o),e(Ge,Ha),e(Ha,B7o),e(Ha,Jne),e(Jne,P7o),e(Ha,$7o),e(Ha,Yne),e(Yne,I7o),e(Ha,q7o),e(Ha,Kne),e(Kne,N7o),e(Ha,j7o),e(Ge,D7o),e(Ge,se),e(se,N1),e(N1,Zne),e(Zne,G7o),e(N1,O7o),e(N1,QI),e(QI,V7o),e(N1,X7o),e(se,z7o),e(se,j1),e(j1,ese),e(ese,Q7o),e(j1,W7o),e(j1,WI),e(WI,H7o),e(j1,U7o),e(se,J7o),e(se,D1),e(D1,ose),e(ose,Y7o),e(D1,K7o),e(D1,HI),e(HI,Z7o),e(D1,eMo),e(se,oMo),e(se,G1),e(G1,rse),e(rse,rMo),e(G1,tMo),e(G1,UI),e(UI,aMo),e(G1,nMo),e(se,sMo),e(se,O1),e(O1,tse),e(tse,lMo),e(O1,iMo),e(O1,JI),e(JI,dMo),e(O1,cMo),e(se,fMo),e(se,V1),e(V1,ase),e(ase,mMo),e(V1,gMo),e(V1,YI),e(YI,hMo),e(V1,pMo),e(se,_Mo),e(se,X1),e(X1,nse),e(nse,uMo),e(X1,bMo),e(X1,KI),e(KI,FMo),e(X1,vMo),e(se,TMo),e(se,z1),e(z1,sse),e(sse,MMo),e(z1,EMo),e(z1,ZI),e(ZI,CMo),e(z1,wMo),e(se,AMo),e(se,Q1),e(Q1,lse),e(lse,yMo),e(Q1,LMo),e(Q1,eq),e(eq,xMo),e(Q1,kMo),e(se,SMo),e(se,W1),e(W1,ise),e(ise,RMo),e(W1,BMo),e(W1,oq),e(oq,PMo),e(W1,$Mo),e(se,IMo),e(se,H1),e(H1,dse),e(dse,qMo),e(H1,NMo),e(H1,rq),e(rq,jMo),e(H1,DMo),e(se,GMo),e(se,U1),e(U1,cse),e(cse,OMo),e(U1,VMo),e(U1,tq),e(tq,XMo),e(U1,zMo),e(se,QMo),e(se,J1),e(J1,fse),e(fse,WMo),e(J1,HMo),e(J1,aq),e(aq,UMo),e(J1,JMo),e(se,YMo),e(se,Y1),e(Y1,mse),e(mse,KMo),e(Y1,ZMo),e(Y1,nq),e(nq,e4o),e(Y1,o4o),e(se,r4o),e(se,K1),e(K1,gse),e(gse,t4o),e(K1,a4o),e(K1,sq),e(sq,n4o),e(K1,s4o),e(se,l4o),e(se,Z1),e(Z1,hse),e(hse,i4o),e(Z1,d4o),e(Z1,lq),e(lq,c4o),e(Z1,f4o),e(Ge,m4o),e(Ge,eb),e(eb,g4o),e(eb,pse),e(pse,h4o),e(eb,p4o),e(eb,_se),e(_se,_4o),e(Ge,u4o),e(Ge,use),e(use,b4o),e(Ge,F4o),g(y5,Ge,null),b(c,KSe,u),b(c,fd,u),e(fd,ob),e(ob,bse),g(L5,bse,null),e(fd,v4o),e(fd,Fse),e(Fse,T4o),b(c,ZSe,u),b(c,or,u),g(x5,or,null),e(or,M4o),e(or,md),e(md,E4o),e(md,iq),e(iq,C4o),e(md,w4o),e(md,dq),e(dq,A4o),e(md,y4o),e(or,L4o),e(or,k5),e(k5,x4o),e(k5,vse),e(vse,k4o),e(k5,S4o),e(or,R4o),e(or,Ur),g(S5,Ur,null),e(Ur,B4o),e(Ur,Tse),e(Tse,P4o),e(Ur,$4o),e(Ur,gd),e(gd,I4o),e(gd,Mse),e(Mse,q4o),e(gd,N4o),e(gd,cq),e(cq,j4o),e(gd,D4o),e(Ur,G4o),e(Ur,Ese),e(Ese,O4o),e(Ur,V4o),g(R5,Ur,null),e(or,X4o),e(or,Oe),g(B5,Oe,null),e(Oe,z4o),e(Oe,Cse),e(Cse,Q4o),e(Oe,W4o),e(Oe,Ua),e(Ua,H4o),e(Ua,wse),e(wse,U4o),e(Ua,J4o),e(Ua,Ase),e(Ase,Y4o),e(Ua,K4o),e(Ua,yse),e(yse,Z4o),e(Ua,eEo),e(Oe,oEo),e(Oe,y),e(y,rb),e(rb,Lse),e(Lse,rEo),e(rb,tEo),e(rb,fq),e(fq,aEo),e(rb,nEo),e(y,sEo),e(y,tb),e(tb,xse),e(xse,lEo),e(tb,iEo),e(tb,mq),e(mq,dEo),e(tb,cEo),e(y,fEo),e(y,ab),e(ab,kse),e(kse,mEo),e(ab,gEo),e(ab,gq),e(gq,hEo),e(ab,pEo),e(y,_Eo),e(y,nb),e(nb,Sse),e(Sse,uEo),e(nb,bEo),e(nb,hq),e(hq,FEo),e(nb,vEo),e(y,TEo),e(y,sb),e(sb,Rse),e(Rse,MEo),e(sb,EEo),e(sb,pq),e(pq,CEo),e(sb,wEo),e(y,AEo),e(y,lb),e(lb,Bse),e(Bse,yEo),e(lb,LEo),e(lb,_q),e(_q,xEo),e(lb,kEo),e(y,SEo),e(y,ib),e(ib,Pse),e(Pse,REo),e(ib,BEo),e(ib,uq),e(uq,PEo),e(ib,$Eo),e(y,IEo),e(y,db),e(db,$se),e($se,qEo),e(db,NEo),e(db,bq),e(bq,jEo),e(db,DEo),e(y,GEo),e(y,cb),e(cb,Ise),e(Ise,OEo),e(cb,VEo),e(cb,Fq),e(Fq,XEo),e(cb,zEo),e(y,QEo),e(y,fb),e(fb,qse),e(qse,WEo),e(fb,HEo),e(fb,vq),e(vq,UEo),e(fb,JEo),e(y,YEo),e(y,mb),e(mb,Nse),e(Nse,KEo),e(mb,ZEo),e(mb,Tq),e(Tq,eCo),e(mb,oCo),e(y,rCo),e(y,gb),e(gb,jse),e(jse,tCo),e(gb,aCo),e(gb,Mq),e(Mq,nCo),e(gb,sCo),e(y,lCo),e(y,hb),e(hb,Dse),e(Dse,iCo),e(hb,dCo),e(hb,Eq),e(Eq,cCo),e(hb,fCo),e(y,mCo),e(y,pb),e(pb,Gse),e(Gse,gCo),e(pb,hCo),e(pb,Cq),e(Cq,pCo),e(pb,_Co),e(y,uCo),e(y,_b),e(_b,Ose),e(Ose,bCo),e(_b,FCo),e(_b,wq),e(wq,vCo),e(_b,TCo),e(y,MCo),e(y,ub),e(ub,Vse),e(Vse,ECo),e(ub,CCo),e(ub,Aq),e(Aq,wCo),e(ub,ACo),e(y,yCo),e(y,bb),e(bb,Xse),e(Xse,LCo),e(bb,xCo),e(bb,yq),e(yq,kCo),e(bb,SCo),e(y,RCo),e(y,Fb),e(Fb,zse),e(zse,BCo),e(Fb,PCo),e(Fb,Lq),e(Lq,$Co),e(Fb,ICo),e(y,qCo),e(y,vb),e(vb,Qse),e(Qse,NCo),e(vb,jCo),e(vb,xq),e(xq,DCo),e(vb,GCo),e(y,OCo),e(y,Tb),e(Tb,Wse),e(Wse,VCo),e(Tb,XCo),e(Tb,kq),e(kq,zCo),e(Tb,QCo),e(y,WCo),e(y,Mb),e(Mb,Hse),e(Hse,HCo),e(Mb,UCo),e(Mb,Sq),e(Sq,JCo),e(Mb,YCo),e(y,KCo),e(y,Eb),e(Eb,Use),e(Use,ZCo),e(Eb,e5o),e(Eb,Rq),e(Rq,o5o),e(Eb,r5o),e(y,t5o),e(y,Cb),e(Cb,Jse),e(Jse,a5o),e(Cb,n5o),e(Cb,Bq),e(Bq,s5o),e(Cb,l5o),e(y,i5o),e(y,wb),e(wb,Yse),e(Yse,d5o),e(wb,c5o),e(wb,Pq),e(Pq,f5o),e(wb,m5o),e(y,g5o),e(y,Ab),e(Ab,Kse),e(Kse,h5o),e(Ab,p5o),e(Ab,$q),e($q,_5o),e(Ab,u5o),e(y,b5o),e(y,yb),e(yb,Zse),e(Zse,F5o),e(yb,v5o),e(yb,Iq),e(Iq,T5o),e(yb,M5o),e(y,E5o),e(y,Lb),e(Lb,ele),e(ele,C5o),e(Lb,w5o),e(Lb,qq),e(qq,A5o),e(Lb,y5o),e(y,L5o),e(y,xb),e(xb,ole),e(ole,x5o),e(xb,k5o),e(xb,Nq),e(Nq,S5o),e(xb,R5o),e(y,B5o),e(y,kb),e(kb,rle),e(rle,P5o),e(kb,$5o),e(kb,jq),e(jq,I5o),e(kb,q5o),e(y,N5o),e(y,Sb),e(Sb,tle),e(tle,j5o),e(Sb,D5o),e(Sb,Dq),e(Dq,G5o),e(Sb,O5o),e(y,V5o),e(y,Rb),e(Rb,ale),e(ale,X5o),e(Rb,z5o),e(Rb,Gq),e(Gq,Q5o),e(Rb,W5o),e(y,H5o),e(y,Bb),e(Bb,nle),e(nle,U5o),e(Bb,J5o),e(Bb,Oq),e(Oq,Y5o),e(Bb,K5o),e(y,Z5o),e(y,Pb),e(Pb,sle),e(sle,ewo),e(Pb,owo),e(Pb,Vq),e(Vq,rwo),e(Pb,two),e(y,awo),e(y,$b),e($b,lle),e(lle,nwo),e($b,swo),e($b,Xq),e(Xq,lwo),e($b,iwo),e(y,dwo),e(y,Ib),e(Ib,ile),e(ile,cwo),e(Ib,fwo),e(Ib,zq),e(zq,mwo),e(Ib,gwo),e(y,hwo),e(y,qb),e(qb,dle),e(dle,pwo),e(qb,_wo),e(qb,Qq),e(Qq,uwo),e(qb,bwo),e(y,Fwo),e(y,Nb),e(Nb,cle),e(cle,vwo),e(Nb,Two),e(Nb,Wq),e(Wq,Mwo),e(Nb,Ewo),e(y,Cwo),e(y,jb),e(jb,fle),e(fle,wwo),e(jb,Awo),e(jb,Hq),e(Hq,ywo),e(jb,Lwo),e(y,xwo),e(y,Db),e(Db,mle),e(mle,kwo),e(Db,Swo),e(Db,Uq),e(Uq,Rwo),e(Db,Bwo),e(y,Pwo),e(y,Gb),e(Gb,gle),e(gle,$wo),e(Gb,Iwo),e(Gb,Jq),e(Jq,qwo),e(Gb,Nwo),e(y,jwo),e(y,Ob),e(Ob,hle),e(hle,Dwo),e(Ob,Gwo),e(Ob,Yq),e(Yq,Owo),e(Ob,Vwo),e(y,Xwo),e(y,Vb),e(Vb,ple),e(ple,zwo),e(Vb,Qwo),e(Vb,Kq),e(Kq,Wwo),e(Vb,Hwo),e(y,Uwo),e(y,Xb),e(Xb,_le),e(_le,Jwo),e(Xb,Ywo),e(Xb,Zq),e(Zq,Kwo),e(Xb,Zwo),e(y,eAo),e(y,zb),e(zb,ule),e(ule,oAo),e(zb,rAo),e(zb,eN),e(eN,tAo),e(zb,aAo),e(y,nAo),e(y,Qb),e(Qb,ble),e(ble,sAo),e(Qb,lAo),e(Qb,oN),e(oN,iAo),e(Qb,dAo),e(y,cAo),e(y,Wb),e(Wb,Fle),e(Fle,fAo),e(Wb,mAo),e(Wb,rN),e(rN,gAo),e(Wb,hAo),e(Oe,pAo),e(Oe,Hb),e(Hb,_Ao),e(Hb,vle),e(vle,uAo),e(Hb,bAo),e(Hb,Tle),e(Tle,FAo),e(Oe,vAo),e(Oe,Mle),e(Mle,TAo),e(Oe,MAo),g(P5,Oe,null),b(c,eRe,u),b(c,hd,u),e(hd,Ub),e(Ub,Ele),g($5,Ele,null),e(hd,EAo),e(hd,Cle),e(Cle,CAo),b(c,oRe,u),b(c,rr,u),g(I5,rr,null),e(rr,wAo),e(rr,pd),e(pd,AAo),e(pd,tN),e(tN,yAo),e(pd,LAo),e(pd,aN),e(aN,xAo),e(pd,kAo),e(rr,SAo),e(rr,q5),e(q5,RAo),e(q5,wle),e(wle,BAo),e(q5,PAo),e(rr,$Ao),e(rr,Jr),g(N5,Jr,null),e(Jr,IAo),e(Jr,Ale),e(Ale,qAo),e(Jr,NAo),e(Jr,_d),e(_d,jAo),e(_d,yle),e(yle,DAo),e(_d,GAo),e(_d,nN),e(nN,OAo),e(_d,VAo),e(Jr,XAo),e(Jr,Lle),e(Lle,zAo),e(Jr,QAo),g(j5,Jr,null),e(rr,WAo),e(rr,Ve),g(D5,Ve,null),e(Ve,HAo),e(Ve,xle),e(xle,UAo),e(Ve,JAo),e(Ve,Ja),e(Ja,YAo),e(Ja,kle),e(kle,KAo),e(Ja,ZAo),e(Ja,Sle),e(Sle,e0o),e(Ja,o0o),e(Ja,Rle),e(Rle,r0o),e(Ja,t0o),e(Ve,a0o),e(Ve,G),e(G,Jb),e(Jb,Ble),e(Ble,n0o),e(Jb,s0o),e(Jb,sN),e(sN,l0o),e(Jb,i0o),e(G,d0o),e(G,Yb),e(Yb,Ple),e(Ple,c0o),e(Yb,f0o),e(Yb,lN),e(lN,m0o),e(Yb,g0o),e(G,h0o),e(G,Kb),e(Kb,$le),e($le,p0o),e(Kb,_0o),e(Kb,iN),e(iN,u0o),e(Kb,b0o),e(G,F0o),e(G,Zb),e(Zb,Ile),e(Ile,v0o),e(Zb,T0o),e(Zb,dN),e(dN,M0o),e(Zb,E0o),e(G,C0o),e(G,e3),e(e3,qle),e(qle,w0o),e(e3,A0o),e(e3,cN),e(cN,y0o),e(e3,L0o),e(G,x0o),e(G,o3),e(o3,Nle),e(Nle,k0o),e(o3,S0o),e(o3,fN),e(fN,R0o),e(o3,B0o),e(G,P0o),e(G,r3),e(r3,jle),e(jle,$0o),e(r3,I0o),e(r3,mN),e(mN,q0o),e(r3,N0o),e(G,j0o),e(G,t3),e(t3,Dle),e(Dle,D0o),e(t3,G0o),e(t3,gN),e(gN,O0o),e(t3,V0o),e(G,X0o),e(G,a3),e(a3,Gle),e(Gle,z0o),e(a3,Q0o),e(a3,hN),e(hN,W0o),e(a3,H0o),e(G,U0o),e(G,n3),e(n3,Ole),e(Ole,J0o),e(n3,Y0o),e(n3,pN),e(pN,K0o),e(n3,Z0o),e(G,eyo),e(G,s3),e(s3,Vle),e(Vle,oyo),e(s3,ryo),e(s3,_N),e(_N,tyo),e(s3,ayo),e(G,nyo),e(G,l3),e(l3,Xle),e(Xle,syo),e(l3,lyo),e(l3,uN),e(uN,iyo),e(l3,dyo),e(G,cyo),e(G,i3),e(i3,zle),e(zle,fyo),e(i3,myo),e(i3,bN),e(bN,gyo),e(i3,hyo),e(G,pyo),e(G,d3),e(d3,Qle),e(Qle,_yo),e(d3,uyo),e(d3,FN),e(FN,byo),e(d3,Fyo),e(G,vyo),e(G,c3),e(c3,Wle),e(Wle,Tyo),e(c3,Myo),e(c3,vN),e(vN,Eyo),e(c3,Cyo),e(G,wyo),e(G,f3),e(f3,Hle),e(Hle,Ayo),e(f3,yyo),e(f3,TN),e(TN,Lyo),e(f3,xyo),e(G,kyo),e(G,m3),e(m3,Ule),e(Ule,Syo),e(m3,Ryo),e(m3,MN),e(MN,Byo),e(m3,Pyo),e(G,$yo),e(G,g3),e(g3,Jle),e(Jle,Iyo),e(g3,qyo),e(g3,EN),e(EN,Nyo),e(g3,jyo),e(G,Dyo),e(G,h3),e(h3,Yle),e(Yle,Gyo),e(h3,Oyo),e(h3,CN),e(CN,Vyo),e(h3,Xyo),e(G,zyo),e(G,p3),e(p3,Kle),e(Kle,Qyo),e(p3,Wyo),e(p3,wN),e(wN,Hyo),e(p3,Uyo),e(G,Jyo),e(G,_3),e(_3,Zle),e(Zle,Yyo),e(_3,Kyo),e(_3,AN),e(AN,Zyo),e(_3,eLo),e(G,oLo),e(G,u3),e(u3,eie),e(eie,rLo),e(u3,tLo),e(u3,yN),e(yN,aLo),e(u3,nLo),e(G,sLo),e(G,b3),e(b3,oie),e(oie,lLo),e(b3,iLo),e(b3,LN),e(LN,dLo),e(b3,cLo),e(G,fLo),e(G,F3),e(F3,rie),e(rie,mLo),e(F3,gLo),e(F3,xN),e(xN,hLo),e(F3,pLo),e(G,_Lo),e(G,v3),e(v3,tie),e(tie,uLo),e(v3,bLo),e(v3,kN),e(kN,FLo),e(v3,vLo),e(G,TLo),e(G,T3),e(T3,aie),e(aie,MLo),e(T3,ELo),e(T3,SN),e(SN,CLo),e(T3,wLo),e(G,ALo),e(G,M3),e(M3,nie),e(nie,yLo),e(M3,LLo),e(M3,RN),e(RN,xLo),e(M3,kLo),e(G,SLo),e(G,E3),e(E3,sie),e(sie,RLo),e(E3,BLo),e(E3,BN),e(BN,PLo),e(E3,$Lo),e(Ve,ILo),e(Ve,C3),e(C3,qLo),e(C3,lie),e(lie,NLo),e(C3,jLo),e(C3,iie),e(iie,DLo),e(Ve,GLo),e(Ve,die),e(die,OLo),e(Ve,VLo),g(G5,Ve,null),b(c,rRe,u),b(c,ud,u),e(ud,w3),e(w3,cie),g(O5,cie,null),e(ud,XLo),e(ud,fie),e(fie,zLo),b(c,tRe,u),b(c,tr,u),g(V5,tr,null),e(tr,QLo),e(tr,bd),e(bd,WLo),e(bd,PN),e(PN,HLo),e(bd,ULo),e(bd,$N),e($N,JLo),e(bd,YLo),e(tr,KLo),e(tr,X5),e(X5,ZLo),e(X5,mie),e(mie,e8o),e(X5,o8o),e(tr,r8o),e(tr,Yr),g(z5,Yr,null),e(Yr,t8o),e(Yr,gie),e(gie,a8o),e(Yr,n8o),e(Yr,Fd),e(Fd,s8o),e(Fd,hie),e(hie,l8o),e(Fd,i8o),e(Fd,IN),e(IN,d8o),e(Fd,c8o),e(Yr,f8o),e(Yr,pie),e(pie,m8o),e(Yr,g8o),g(Q5,Yr,null),e(tr,h8o),e(tr,Xe),g(W5,Xe,null),e(Xe,p8o),e(Xe,_ie),e(_ie,_8o),e(Xe,u8o),e(Xe,Ya),e(Ya,b8o),e(Ya,uie),e(uie,F8o),e(Ya,v8o),e(Ya,bie),e(bie,T8o),e(Ya,M8o),e(Ya,Fie),e(Fie,E8o),e(Ya,C8o),e(Xe,w8o),e(Xe,da),e(da,A3),e(A3,vie),e(vie,A8o),e(A3,y8o),e(A3,qN),e(qN,L8o),e(A3,x8o),e(da,k8o),e(da,y3),e(y3,Tie),e(Tie,S8o),e(y3,R8o),e(y3,NN),e(NN,B8o),e(y3,P8o),e(da,$8o),e(da,L3),e(L3,Mie),e(Mie,I8o),e(L3,q8o),e(L3,jN),e(jN,N8o),e(L3,j8o),e(da,D8o),e(da,x3),e(x3,Eie),e(Eie,G8o),e(x3,O8o),e(x3,DN),e(DN,V8o),e(x3,X8o),e(da,z8o),e(da,k3),e(k3,Cie),e(Cie,Q8o),e(k3,W8o),e(k3,GN),e(GN,H8o),e(k3,U8o),e(Xe,J8o),e(Xe,S3),e(S3,Y8o),e(S3,wie),e(wie,K8o),e(S3,Z8o),e(S3,Aie),e(Aie,e9o),e(Xe,o9o),e(Xe,yie),e(yie,r9o),e(Xe,t9o),g(H5,Xe,null),b(c,aRe,u),b(c,vd,u),e(vd,R3),e(R3,Lie),g(U5,Lie,null),e(vd,a9o),e(vd,xie),e(xie,n9o),b(c,nRe,u),b(c,ar,u),g(J5,ar,null),e(ar,s9o),e(ar,Td),e(Td,l9o),e(Td,ON),e(ON,i9o),e(Td,d9o),e(Td,VN),e(VN,c9o),e(Td,f9o),e(ar,m9o),e(ar,Y5),e(Y5,g9o),e(Y5,kie),e(kie,h9o),e(Y5,p9o),e(ar,_9o),e(ar,Kr),g(K5,Kr,null),e(Kr,u9o),e(Kr,Sie),e(Sie,b9o),e(Kr,F9o),e(Kr,Md),e(Md,v9o),e(Md,Rie),e(Rie,T9o),e(Md,M9o),e(Md,XN),e(XN,E9o),e(Md,C9o),e(Kr,w9o),e(Kr,Bie),e(Bie,A9o),e(Kr,y9o),g(Z5,Kr,null),e(ar,L9o),e(ar,ze),g(ew,ze,null),e(ze,x9o),e(ze,Pie),e(Pie,k9o),e(ze,S9o),e(ze,Ka),e(Ka,R9o),e(Ka,$ie),e($ie,B9o),e(Ka,P9o),e(Ka,Iie),e(Iie,$9o),e(Ka,I9o),e(Ka,qie),e(qie,q9o),e(Ka,N9o),e(ze,j9o),e(ze,j),e(j,B3),e(B3,Nie),e(Nie,D9o),e(B3,G9o),e(B3,zN),e(zN,O9o),e(B3,V9o),e(j,X9o),e(j,P3),e(P3,jie),e(jie,z9o),e(P3,Q9o),e(P3,QN),e(QN,W9o),e(P3,H9o),e(j,U9o),e(j,$3),e($3,Die),e(Die,J9o),e($3,Y9o),e($3,WN),e(WN,K9o),e($3,Z9o),e(j,exo),e(j,I3),e(I3,Gie),e(Gie,oxo),e(I3,rxo),e(I3,HN),e(HN,txo),e(I3,axo),e(j,nxo),e(j,q3),e(q3,Oie),e(Oie,sxo),e(q3,lxo),e(q3,UN),e(UN,ixo),e(q3,dxo),e(j,cxo),e(j,N3),e(N3,Vie),e(Vie,fxo),e(N3,mxo),e(N3,JN),e(JN,gxo),e(N3,hxo),e(j,pxo),e(j,j3),e(j3,Xie),e(Xie,_xo),e(j3,uxo),e(j3,YN),e(YN,bxo),e(j3,Fxo),e(j,vxo),e(j,D3),e(D3,zie),e(zie,Txo),e(D3,Mxo),e(D3,KN),e(KN,Exo),e(D3,Cxo),e(j,wxo),e(j,G3),e(G3,Qie),e(Qie,Axo),e(G3,yxo),e(G3,ZN),e(ZN,Lxo),e(G3,xxo),e(j,kxo),e(j,O3),e(O3,Wie),e(Wie,Sxo),e(O3,Rxo),e(O3,ej),e(ej,Bxo),e(O3,Pxo),e(j,$xo),e(j,V3),e(V3,Hie),e(Hie,Ixo),e(V3,qxo),e(V3,oj),e(oj,Nxo),e(V3,jxo),e(j,Dxo),e(j,X3),e(X3,Uie),e(Uie,Gxo),e(X3,Oxo),e(X3,rj),e(rj,Vxo),e(X3,Xxo),e(j,zxo),e(j,z3),e(z3,Jie),e(Jie,Qxo),e(z3,Wxo),e(z3,tj),e(tj,Hxo),e(z3,Uxo),e(j,Jxo),e(j,Q3),e(Q3,Yie),e(Yie,Yxo),e(Q3,Kxo),e(Q3,aj),e(aj,Zxo),e(Q3,eko),e(j,oko),e(j,W3),e(W3,Kie),e(Kie,rko),e(W3,tko),e(W3,nj),e(nj,ako),e(W3,nko),e(j,sko),e(j,H3),e(H3,Zie),e(Zie,lko),e(H3,iko),e(H3,sj),e(sj,dko),e(H3,cko),e(j,fko),e(j,U3),e(U3,ede),e(ede,mko),e(U3,gko),e(U3,lj),e(lj,hko),e(U3,pko),e(j,_ko),e(j,J3),e(J3,ode),e(ode,uko),e(J3,bko),e(J3,ij),e(ij,Fko),e(J3,vko),e(j,Tko),e(j,Y3),e(Y3,rde),e(rde,Mko),e(Y3,Eko),e(Y3,dj),e(dj,Cko),e(Y3,wko),e(j,Ako),e(j,K3),e(K3,tde),e(tde,yko),e(K3,Lko),e(K3,cj),e(cj,xko),e(K3,kko),e(j,Sko),e(j,Z3),e(Z3,ade),e(ade,Rko),e(Z3,Bko),e(Z3,fj),e(fj,Pko),e(Z3,$ko),e(j,Iko),e(j,e2),e(e2,nde),e(nde,qko),e(e2,Nko),e(e2,mj),e(mj,jko),e(e2,Dko),e(j,Gko),e(j,o2),e(o2,sde),e(sde,Oko),e(o2,Vko),e(o2,gj),e(gj,Xko),e(o2,zko),e(j,Qko),e(j,r2),e(r2,lde),e(lde,Wko),e(r2,Hko),e(r2,hj),e(hj,Uko),e(r2,Jko),e(j,Yko),e(j,t2),e(t2,ide),e(ide,Kko),e(t2,Zko),e(t2,pj),e(pj,eSo),e(t2,oSo),e(j,rSo),e(j,a2),e(a2,dde),e(dde,tSo),e(a2,aSo),e(a2,_j),e(_j,nSo),e(a2,sSo),e(j,lSo),e(j,n2),e(n2,cde),e(cde,iSo),e(n2,dSo),e(n2,uj),e(uj,cSo),e(n2,fSo),e(j,mSo),e(j,s2),e(s2,fde),e(fde,gSo),e(s2,hSo),e(s2,bj),e(bj,pSo),e(s2,_So),e(j,uSo),e(j,l2),e(l2,mde),e(mde,bSo),e(l2,FSo),e(l2,Fj),e(Fj,vSo),e(l2,TSo),e(j,MSo),e(j,i2),e(i2,gde),e(gde,ESo),e(i2,CSo),e(i2,vj),e(vj,wSo),e(i2,ASo),e(j,ySo),e(j,d2),e(d2,hde),e(hde,LSo),e(d2,xSo),e(d2,Tj),e(Tj,kSo),e(d2,SSo),e(j,RSo),e(j,c2),e(c2,pde),e(pde,BSo),e(c2,PSo),e(c2,Mj),e(Mj,$So),e(c2,ISo),e(j,qSo),e(j,f2),e(f2,_de),e(_de,NSo),e(f2,jSo),e(f2,Ej),e(Ej,DSo),e(f2,GSo),e(ze,OSo),e(ze,m2),e(m2,VSo),e(m2,ude),e(ude,XSo),e(m2,zSo),e(m2,bde),e(bde,QSo),e(ze,WSo),e(ze,Fde),e(Fde,HSo),e(ze,USo),g(ow,ze,null),b(c,sRe,u),b(c,Ed,u),e(Ed,g2),e(g2,vde),g(rw,vde,null),e(Ed,JSo),e(Ed,Tde),e(Tde,YSo),b(c,lRe,u),b(c,nr,u),g(tw,nr,null),e(nr,KSo),e(nr,Cd),e(Cd,ZSo),e(Cd,Cj),e(Cj,eRo),e(Cd,oRo),e(Cd,wj),e(wj,rRo),e(Cd,tRo),e(nr,aRo),e(nr,aw),e(aw,nRo),e(aw,Mde),e(Mde,sRo),e(aw,lRo),e(nr,iRo),e(nr,Zr),g(nw,Zr,null),e(Zr,dRo),e(Zr,Ede),e(Ede,cRo),e(Zr,fRo),e(Zr,wd),e(wd,mRo),e(wd,Cde),e(Cde,gRo),e(wd,hRo),e(wd,Aj),e(Aj,pRo),e(wd,_Ro),e(Zr,uRo),e(Zr,wde),e(wde,bRo),e(Zr,FRo),g(sw,Zr,null),e(nr,vRo),e(nr,Qe),g(lw,Qe,null),e(Qe,TRo),e(Qe,Ade),e(Ade,MRo),e(Qe,ERo),e(Qe,Za),e(Za,CRo),e(Za,yde),e(yde,wRo),e(Za,ARo),e(Za,Lde),e(Lde,yRo),e(Za,LRo),e(Za,xde),e(xde,xRo),e(Za,kRo),e(Qe,SRo),e(Qe,R),e(R,h2),e(h2,kde),e(kde,RRo),e(h2,BRo),e(h2,yj),e(yj,PRo),e(h2,$Ro),e(R,IRo),e(R,p2),e(p2,Sde),e(Sde,qRo),e(p2,NRo),e(p2,Lj),e(Lj,jRo),e(p2,DRo),e(R,GRo),e(R,_2),e(_2,Rde),e(Rde,ORo),e(_2,VRo),e(_2,xj),e(xj,XRo),e(_2,zRo),e(R,QRo),e(R,u2),e(u2,Bde),e(Bde,WRo),e(u2,HRo),e(u2,kj),e(kj,URo),e(u2,JRo),e(R,YRo),e(R,b2),e(b2,Pde),e(Pde,KRo),e(b2,ZRo),e(b2,Sj),e(Sj,eBo),e(b2,oBo),e(R,rBo),e(R,F2),e(F2,$de),e($de,tBo),e(F2,aBo),e(F2,Rj),e(Rj,nBo),e(F2,sBo),e(R,lBo),e(R,v2),e(v2,Ide),e(Ide,iBo),e(v2,dBo),e(v2,Bj),e(Bj,cBo),e(v2,fBo),e(R,mBo),e(R,T2),e(T2,qde),e(qde,gBo),e(T2,hBo),e(T2,Pj),e(Pj,pBo),e(T2,_Bo),e(R,uBo),e(R,M2),e(M2,Nde),e(Nde,bBo),e(M2,FBo),e(M2,$j),e($j,vBo),e(M2,TBo),e(R,MBo),e(R,E2),e(E2,jde),e(jde,EBo),e(E2,CBo),e(E2,Ij),e(Ij,wBo),e(E2,ABo),e(R,yBo),e(R,C2),e(C2,Dde),e(Dde,LBo),e(C2,xBo),e(C2,qj),e(qj,kBo),e(C2,SBo),e(R,RBo),e(R,w2),e(w2,Gde),e(Gde,BBo),e(w2,PBo),e(w2,Nj),e(Nj,$Bo),e(w2,IBo),e(R,qBo),e(R,A2),e(A2,Ode),e(Ode,NBo),e(A2,jBo),e(A2,jj),e(jj,DBo),e(A2,GBo),e(R,OBo),e(R,y2),e(y2,Vde),e(Vde,VBo),e(y2,XBo),e(y2,Dj),e(Dj,zBo),e(y2,QBo),e(R,WBo),e(R,L2),e(L2,Xde),e(Xde,HBo),e(L2,UBo),e(L2,Gj),e(Gj,JBo),e(L2,YBo),e(R,KBo),e(R,x2),e(x2,zde),e(zde,ZBo),e(x2,ePo),e(x2,Oj),e(Oj,oPo),e(x2,rPo),e(R,tPo),e(R,k2),e(k2,Qde),e(Qde,aPo),e(k2,nPo),e(k2,Vj),e(Vj,sPo),e(k2,lPo),e(R,iPo),e(R,S2),e(S2,Wde),e(Wde,dPo),e(S2,cPo),e(S2,Xj),e(Xj,fPo),e(S2,mPo),e(R,gPo),e(R,R2),e(R2,Hde),e(Hde,hPo),e(R2,pPo),e(R2,zj),e(zj,_Po),e(R2,uPo),e(R,bPo),e(R,B2),e(B2,Ude),e(Ude,FPo),e(B2,vPo),e(B2,Qj),e(Qj,TPo),e(B2,MPo),e(R,EPo),e(R,P2),e(P2,Jde),e(Jde,CPo),e(P2,wPo),e(P2,Wj),e(Wj,APo),e(P2,yPo),e(R,LPo),e(R,$2),e($2,Yde),e(Yde,xPo),e($2,kPo),e($2,Hj),e(Hj,SPo),e($2,RPo),e(R,BPo),e(R,I2),e(I2,Kde),e(Kde,PPo),e(I2,$Po),e(I2,Uj),e(Uj,IPo),e(I2,qPo),e(R,NPo),e(R,q2),e(q2,Zde),e(Zde,jPo),e(q2,DPo),e(q2,Jj),e(Jj,GPo),e(q2,OPo),e(R,VPo),e(R,N2),e(N2,ece),e(ece,XPo),e(N2,zPo),e(N2,Yj),e(Yj,QPo),e(N2,WPo),e(R,HPo),e(R,j2),e(j2,oce),e(oce,UPo),e(j2,JPo),e(j2,Kj),e(Kj,YPo),e(j2,KPo),e(R,ZPo),e(R,D2),e(D2,rce),e(rce,e$o),e(D2,o$o),e(D2,Zj),e(Zj,r$o),e(D2,t$o),e(R,a$o),e(R,G2),e(G2,tce),e(tce,n$o),e(G2,s$o),e(G2,eD),e(eD,l$o),e(G2,i$o),e(R,d$o),e(R,O2),e(O2,ace),e(ace,c$o),e(O2,f$o),e(O2,oD),e(oD,m$o),e(O2,g$o),e(R,h$o),e(R,V2),e(V2,nce),e(nce,p$o),e(V2,_$o),e(V2,rD),e(rD,u$o),e(V2,b$o),e(R,F$o),e(R,X2),e(X2,sce),e(sce,v$o),e(X2,T$o),e(X2,tD),e(tD,M$o),e(X2,E$o),e(R,C$o),e(R,z2),e(z2,lce),e(lce,w$o),e(z2,A$o),e(z2,aD),e(aD,y$o),e(z2,L$o),e(R,x$o),e(R,Q2),e(Q2,ice),e(ice,k$o),e(Q2,S$o),e(Q2,nD),e(nD,R$o),e(Q2,B$o),e(R,P$o),e(R,W2),e(W2,dce),e(dce,$$o),e(W2,I$o),e(W2,sD),e(sD,q$o),e(W2,N$o),e(R,j$o),e(R,H2),e(H2,cce),e(cce,D$o),e(H2,G$o),e(H2,lD),e(lD,O$o),e(H2,V$o),e(R,X$o),e(R,U2),e(U2,fce),e(fce,z$o),e(U2,Q$o),e(U2,iD),e(iD,W$o),e(U2,H$o),e(R,U$o),e(R,J2),e(J2,mce),e(mce,J$o),e(J2,Y$o),e(J2,dD),e(dD,K$o),e(J2,Z$o),e(R,eIo),e(R,Y2),e(Y2,gce),e(gce,oIo),e(Y2,rIo),e(Y2,cD),e(cD,tIo),e(Y2,aIo),e(R,nIo),e(R,K2),e(K2,hce),e(hce,sIo),e(K2,lIo),e(K2,fD),e(fD,iIo),e(K2,dIo),e(Qe,cIo),e(Qe,Z2),e(Z2,fIo),e(Z2,pce),e(pce,mIo),e(Z2,gIo),e(Z2,_ce),e(_ce,hIo),e(Qe,pIo),e(Qe,uce),e(uce,_Io),e(Qe,uIo),g(iw,Qe,null),b(c,iRe,u),b(c,Ad,u),e(Ad,eF),e(eF,bce),g(dw,bce,null),e(Ad,bIo),e(Ad,Fce),e(Fce,FIo),b(c,dRe,u),b(c,sr,u),g(cw,sr,null),e(sr,vIo),e(sr,yd),e(yd,TIo),e(yd,mD),e(mD,MIo),e(yd,EIo),e(yd,gD),e(gD,CIo),e(yd,wIo),e(sr,AIo),e(sr,fw),e(fw,yIo),e(fw,vce),e(vce,LIo),e(fw,xIo),e(sr,kIo),e(sr,et),g(mw,et,null),e(et,SIo),e(et,Tce),e(Tce,RIo),e(et,BIo),e(et,Ld),e(Ld,PIo),e(Ld,Mce),e(Mce,$Io),e(Ld,IIo),e(Ld,hD),e(hD,qIo),e(Ld,NIo),e(et,jIo),e(et,Ece),e(Ece,DIo),e(et,GIo),g(gw,et,null),e(sr,OIo),e(sr,We),g(hw,We,null),e(We,VIo),e(We,Cce),e(Cce,XIo),e(We,zIo),e(We,en),e(en,QIo),e(en,wce),e(wce,WIo),e(en,HIo),e(en,Ace),e(Ace,UIo),e(en,JIo),e(en,yce),e(yce,YIo),e(en,KIo),e(We,ZIo),e(We,Lce),e(Lce,oF),e(oF,xce),e(xce,eqo),e(oF,oqo),e(oF,pD),e(pD,rqo),e(oF,tqo),e(We,aqo),e(We,rF),e(rF,nqo),e(rF,kce),e(kce,sqo),e(rF,lqo),e(rF,Sce),e(Sce,iqo),e(We,dqo),e(We,Rce),e(Rce,cqo),e(We,fqo),g(pw,We,null),b(c,cRe,u),b(c,xd,u),e(xd,tF),e(tF,Bce),g(_w,Bce,null),e(xd,mqo),e(xd,Pce),e(Pce,gqo),b(c,fRe,u),b(c,lr,u),g(uw,lr,null),e(lr,hqo),e(lr,kd),e(kd,pqo),e(kd,_D),e(_D,_qo),e(kd,uqo),e(kd,uD),e(uD,bqo),e(kd,Fqo),e(lr,vqo),e(lr,bw),e(bw,Tqo),e(bw,$ce),e($ce,Mqo),e(bw,Eqo),e(lr,Cqo),e(lr,ot),g(Fw,ot,null),e(ot,wqo),e(ot,Ice),e(Ice,Aqo),e(ot,yqo),e(ot,Sd),e(Sd,Lqo),e(Sd,qce),e(qce,xqo),e(Sd,kqo),e(Sd,bD),e(bD,Sqo),e(Sd,Rqo),e(ot,Bqo),e(ot,Nce),e(Nce,Pqo),e(ot,$qo),g(vw,ot,null),e(lr,Iqo),e(lr,He),g(Tw,He,null),e(He,qqo),e(He,jce),e(jce,Nqo),e(He,jqo),e(He,on),e(on,Dqo),e(on,Dce),e(Dce,Gqo),e(on,Oqo),e(on,Gce),e(Gce,Vqo),e(on,Xqo),e(on,Oce),e(Oce,zqo),e(on,Qqo),e(He,Wqo),e(He,ge),e(ge,aF),e(aF,Vce),e(Vce,Hqo),e(aF,Uqo),e(aF,FD),e(FD,Jqo),e(aF,Yqo),e(ge,Kqo),e(ge,nF),e(nF,Xce),e(Xce,Zqo),e(nF,eNo),e(nF,vD),e(vD,oNo),e(nF,rNo),e(ge,tNo),e(ge,Ds),e(Ds,zce),e(zce,aNo),e(Ds,nNo),e(Ds,TD),e(TD,sNo),e(Ds,lNo),e(Ds,MD),e(MD,iNo),e(Ds,dNo),e(ge,cNo),e(ge,sF),e(sF,Qce),e(Qce,fNo),e(sF,mNo),e(sF,ED),e(ED,gNo),e(sF,hNo),e(ge,pNo),e(ge,ma),e(ma,Wce),e(Wce,_No),e(ma,uNo),e(ma,CD),e(CD,bNo),e(ma,FNo),e(ma,wD),e(wD,vNo),e(ma,TNo),e(ma,AD),e(AD,MNo),e(ma,ENo),e(ge,CNo),e(ge,lF),e(lF,Hce),e(Hce,wNo),e(lF,ANo),e(lF,yD),e(yD,yNo),e(lF,LNo),e(ge,xNo),e(ge,iF),e(iF,Uce),e(Uce,kNo),e(iF,SNo),e(iF,LD),e(LD,RNo),e(iF,BNo),e(ge,PNo),e(ge,dF),e(dF,Jce),e(Jce,$No),e(dF,INo),e(dF,xD),e(xD,qNo),e(dF,NNo),e(ge,jNo),e(ge,cF),e(cF,Yce),e(Yce,DNo),e(cF,GNo),e(cF,kD),e(kD,ONo),e(cF,VNo),e(ge,XNo),e(ge,fF),e(fF,Kce),e(Kce,zNo),e(fF,QNo),e(fF,SD),e(SD,WNo),e(fF,HNo),e(ge,UNo),e(ge,mF),e(mF,Zce),e(Zce,JNo),e(mF,YNo),e(mF,RD),e(RD,KNo),e(mF,ZNo),e(He,ejo),e(He,gF),e(gF,ojo),e(gF,efe),e(efe,rjo),e(gF,tjo),e(gF,ofe),e(ofe,ajo),e(He,njo),e(He,rfe),e(rfe,sjo),e(He,ljo),g(Mw,He,null),b(c,mRe,u),b(c,Rd,u),e(Rd,hF),e(hF,tfe),g(Ew,tfe,null),e(Rd,ijo),e(Rd,afe),e(afe,djo),b(c,gRe,u),b(c,ir,u),g(Cw,ir,null),e(ir,cjo),e(ir,Bd),e(Bd,fjo),e(Bd,BD),e(BD,mjo),e(Bd,gjo),e(Bd,PD),e(PD,hjo),e(Bd,pjo),e(ir,_jo),e(ir,ww),e(ww,ujo),e(ww,nfe),e(nfe,bjo),e(ww,Fjo),e(ir,vjo),e(ir,rt),g(Aw,rt,null),e(rt,Tjo),e(rt,sfe),e(sfe,Mjo),e(rt,Ejo),e(rt,Pd),e(Pd,Cjo),e(Pd,lfe),e(lfe,wjo),e(Pd,Ajo),e(Pd,$D),e($D,yjo),e(Pd,Ljo),e(rt,xjo),e(rt,ife),e(ife,kjo),e(rt,Sjo),g(yw,rt,null),e(ir,Rjo),e(ir,Ue),g(Lw,Ue,null),e(Ue,Bjo),e(Ue,dfe),e(dfe,Pjo),e(Ue,$jo),e(Ue,rn),e(rn,Ijo),e(rn,cfe),e(cfe,qjo),e(rn,Njo),e(rn,ffe),e(ffe,jjo),e(rn,Djo),e(rn,mfe),e(mfe,Gjo),e(rn,Ojo),e(Ue,Vjo),e(Ue,gfe),e(gfe,pF),e(pF,hfe),e(hfe,Xjo),e(pF,zjo),e(pF,ID),e(ID,Qjo),e(pF,Wjo),e(Ue,Hjo),e(Ue,_F),e(_F,Ujo),e(_F,pfe),e(pfe,Jjo),e(_F,Yjo),e(_F,_fe),e(_fe,Kjo),e(Ue,Zjo),e(Ue,ufe),e(ufe,eDo),e(Ue,oDo),g(xw,Ue,null),b(c,hRe,u),b(c,$d,u),e($d,uF),e(uF,bfe),g(kw,bfe,null),e($d,rDo),e($d,Ffe),e(Ffe,tDo),b(c,pRe,u),b(c,dr,u),g(Sw,dr,null),e(dr,aDo),e(dr,Id),e(Id,nDo),e(Id,qD),e(qD,sDo),e(Id,lDo),e(Id,ND),e(ND,iDo),e(Id,dDo),e(dr,cDo),e(dr,Rw),e(Rw,fDo),e(Rw,vfe),e(vfe,mDo),e(Rw,gDo),e(dr,hDo),e(dr,tt),g(Bw,tt,null),e(tt,pDo),e(tt,Tfe),e(Tfe,_Do),e(tt,uDo),e(tt,qd),e(qd,bDo),e(qd,Mfe),e(Mfe,FDo),e(qd,vDo),e(qd,jD),e(jD,TDo),e(qd,MDo),e(tt,EDo),e(tt,Efe),e(Efe,CDo),e(tt,wDo),g(Pw,tt,null),e(dr,ADo),e(dr,Je),g($w,Je,null),e(Je,yDo),e(Je,Cfe),e(Cfe,LDo),e(Je,xDo),e(Je,tn),e(tn,kDo),e(tn,wfe),e(wfe,SDo),e(tn,RDo),e(tn,Afe),e(Afe,BDo),e(tn,PDo),e(tn,yfe),e(yfe,$Do),e(tn,IDo),e(Je,qDo),e(Je,Se),e(Se,bF),e(bF,Lfe),e(Lfe,NDo),e(bF,jDo),e(bF,DD),e(DD,DDo),e(bF,GDo),e(Se,ODo),e(Se,FF),e(FF,xfe),e(xfe,VDo),e(FF,XDo),e(FF,GD),e(GD,zDo),e(FF,QDo),e(Se,WDo),e(Se,vF),e(vF,kfe),e(kfe,HDo),e(vF,UDo),e(vF,OD),e(OD,JDo),e(vF,YDo),e(Se,KDo),e(Se,TF),e(TF,Sfe),e(Sfe,ZDo),e(TF,eGo),e(TF,VD),e(VD,oGo),e(TF,rGo),e(Se,tGo),e(Se,MF),e(MF,Rfe),e(Rfe,aGo),e(MF,nGo),e(MF,XD),e(XD,sGo),e(MF,lGo),e(Se,iGo),e(Se,EF),e(EF,Bfe),e(Bfe,dGo),e(EF,cGo),e(EF,zD),e(zD,fGo),e(EF,mGo),e(Se,gGo),e(Se,CF),e(CF,Pfe),e(Pfe,hGo),e(CF,pGo),e(CF,QD),e(QD,_Go),e(CF,uGo),e(Se,bGo),e(Se,wF),e(wF,$fe),e($fe,FGo),e(wF,vGo),e(wF,WD),e(WD,TGo),e(wF,MGo),e(Je,EGo),e(Je,AF),e(AF,CGo),e(AF,Ife),e(Ife,wGo),e(AF,AGo),e(AF,qfe),e(qfe,yGo),e(Je,LGo),e(Je,Nfe),e(Nfe,xGo),e(Je,kGo),g(Iw,Je,null),b(c,_Re,u),b(c,Nd,u),e(Nd,yF),e(yF,jfe),g(qw,jfe,null),e(Nd,SGo),e(Nd,Dfe),e(Dfe,RGo),b(c,uRe,u),b(c,cr,u),g(Nw,cr,null),e(cr,BGo),e(cr,jd),e(jd,PGo),e(jd,HD),e(HD,$Go),e(jd,IGo),e(jd,UD),e(UD,qGo),e(jd,NGo),e(cr,jGo),e(cr,jw),e(jw,DGo),e(jw,Gfe),e(Gfe,GGo),e(jw,OGo),e(cr,VGo),e(cr,at),g(Dw,at,null),e(at,XGo),e(at,Ofe),e(Ofe,zGo),e(at,QGo),e(at,Dd),e(Dd,WGo),e(Dd,Vfe),e(Vfe,HGo),e(Dd,UGo),e(Dd,JD),e(JD,JGo),e(Dd,YGo),e(at,KGo),e(at,Xfe),e(Xfe,ZGo),e(at,eOo),g(Gw,at,null),e(cr,oOo),e(cr,Ye),g(Ow,Ye,null),e(Ye,rOo),e(Ye,zfe),e(zfe,tOo),e(Ye,aOo),e(Ye,an),e(an,nOo),e(an,Qfe),e(Qfe,sOo),e(an,lOo),e(an,Wfe),e(Wfe,iOo),e(an,dOo),e(an,Hfe),e(Hfe,cOo),e(an,fOo),e(Ye,mOo),e(Ye,nn),e(nn,LF),e(LF,Ufe),e(Ufe,gOo),e(LF,hOo),e(LF,YD),e(YD,pOo),e(LF,_Oo),e(nn,uOo),e(nn,xF),e(xF,Jfe),e(Jfe,bOo),e(xF,FOo),e(xF,KD),e(KD,vOo),e(xF,TOo),e(nn,MOo),e(nn,kF),e(kF,Yfe),e(Yfe,EOo),e(kF,COo),e(kF,ZD),e(ZD,wOo),e(kF,AOo),e(nn,yOo),e(nn,SF),e(SF,Kfe),e(Kfe,LOo),e(SF,xOo),e(SF,eG),e(eG,kOo),e(SF,SOo),e(Ye,ROo),e(Ye,RF),e(RF,BOo),e(RF,Zfe),e(Zfe,POo),e(RF,$Oo),e(RF,eme),e(eme,IOo),e(Ye,qOo),e(Ye,ome),e(ome,NOo),e(Ye,jOo),g(Vw,Ye,null),b(c,bRe,u),b(c,Gd,u),e(Gd,BF),e(BF,rme),g(Xw,rme,null),e(Gd,DOo),e(Gd,tme),e(tme,GOo),b(c,FRe,u),b(c,fr,u),g(zw,fr,null),e(fr,OOo),e(fr,Od),e(Od,VOo),e(Od,oG),e(oG,XOo),e(Od,zOo),e(Od,rG),e(rG,QOo),e(Od,WOo),e(fr,HOo),e(fr,Qw),e(Qw,UOo),e(Qw,ame),e(ame,JOo),e(Qw,YOo),e(fr,KOo),e(fr,nt),g(Ww,nt,null),e(nt,ZOo),e(nt,nme),e(nme,eVo),e(nt,oVo),e(nt,Vd),e(Vd,rVo),e(Vd,sme),e(sme,tVo),e(Vd,aVo),e(Vd,tG),e(tG,nVo),e(Vd,sVo),e(nt,lVo),e(nt,lme),e(lme,iVo),e(nt,dVo),g(Hw,nt,null),e(fr,cVo),e(fr,Ke),g(Uw,Ke,null),e(Ke,fVo),e(Ke,ime),e(ime,mVo),e(Ke,gVo),e(Ke,sn),e(sn,hVo),e(sn,dme),e(dme,pVo),e(sn,_Vo),e(sn,cme),e(cme,uVo),e(sn,bVo),e(sn,fme),e(fme,FVo),e(sn,vVo),e(Ke,TVo),e(Ke,Re),e(Re,PF),e(PF,mme),e(mme,MVo),e(PF,EVo),e(PF,aG),e(aG,CVo),e(PF,wVo),e(Re,AVo),e(Re,$F),e($F,gme),e(gme,yVo),e($F,LVo),e($F,nG),e(nG,xVo),e($F,kVo),e(Re,SVo),e(Re,IF),e(IF,hme),e(hme,RVo),e(IF,BVo),e(IF,sG),e(sG,PVo),e(IF,$Vo),e(Re,IVo),e(Re,qF),e(qF,pme),e(pme,qVo),e(qF,NVo),e(qF,lG),e(lG,jVo),e(qF,DVo),e(Re,GVo),e(Re,NF),e(NF,_me),e(_me,OVo),e(NF,VVo),e(NF,iG),e(iG,XVo),e(NF,zVo),e(Re,QVo),e(Re,jF),e(jF,ume),e(ume,WVo),e(jF,HVo),e(jF,dG),e(dG,UVo),e(jF,JVo),e(Re,YVo),e(Re,DF),e(DF,bme),e(bme,KVo),e(DF,ZVo),e(DF,cG),e(cG,eXo),e(DF,oXo),e(Re,rXo),e(Re,GF),e(GF,Fme),e(Fme,tXo),e(GF,aXo),e(GF,fG),e(fG,nXo),e(GF,sXo),e(Ke,lXo),e(Ke,OF),e(OF,iXo),e(OF,vme),e(vme,dXo),e(OF,cXo),e(OF,Tme),e(Tme,fXo),e(Ke,mXo),e(Ke,Mme),e(Mme,gXo),e(Ke,hXo),g(Jw,Ke,null),b(c,vRe,u),b(c,Xd,u),e(Xd,VF),e(VF,Eme),g(Yw,Eme,null),e(Xd,pXo),e(Xd,Cme),e(Cme,_Xo),b(c,TRe,u),b(c,mr,u),g(Kw,mr,null),e(mr,uXo),e(mr,zd),e(zd,bXo),e(zd,mG),e(mG,FXo),e(zd,vXo),e(zd,gG),e(gG,TXo),e(zd,MXo),e(mr,EXo),e(mr,Zw),e(Zw,CXo),e(Zw,wme),e(wme,wXo),e(Zw,AXo),e(mr,yXo),e(mr,st),g(eA,st,null),e(st,LXo),e(st,Ame),e(Ame,xXo),e(st,kXo),e(st,Qd),e(Qd,SXo),e(Qd,yme),e(yme,RXo),e(Qd,BXo),e(Qd,hG),e(hG,PXo),e(Qd,$Xo),e(st,IXo),e(st,Lme),e(Lme,qXo),e(st,NXo),g(oA,st,null),e(mr,jXo),e(mr,Ze),g(rA,Ze,null),e(Ze,DXo),e(Ze,xme),e(xme,GXo),e(Ze,OXo),e(Ze,ln),e(ln,VXo),e(ln,kme),e(kme,XXo),e(ln,zXo),e(ln,Sme),e(Sme,QXo),e(ln,WXo),e(ln,Rme),e(Rme,HXo),e(ln,UXo),e(Ze,JXo),e(Ze,tA),e(tA,XF),e(XF,Bme),e(Bme,YXo),e(XF,KXo),e(XF,pG),e(pG,ZXo),e(XF,ezo),e(tA,ozo),e(tA,zF),e(zF,Pme),e(Pme,rzo),e(zF,tzo),e(zF,_G),e(_G,azo),e(zF,nzo),e(Ze,szo),e(Ze,QF),e(QF,lzo),e(QF,$me),e($me,izo),e(QF,dzo),e(QF,Ime),e(Ime,czo),e(Ze,fzo),e(Ze,qme),e(qme,mzo),e(Ze,gzo),g(aA,Ze,null),b(c,MRe,u),b(c,Wd,u),e(Wd,WF),e(WF,Nme),g(nA,Nme,null),e(Wd,hzo),e(Wd,jme),e(jme,pzo),b(c,ERe,u),b(c,gr,u),g(sA,gr,null),e(gr,_zo),e(gr,Hd),e(Hd,uzo),e(Hd,uG),e(uG,bzo),e(Hd,Fzo),e(Hd,bG),e(bG,vzo),e(Hd,Tzo),e(gr,Mzo),e(gr,lA),e(lA,Ezo),e(lA,Dme),e(Dme,Czo),e(lA,wzo),e(gr,Azo),e(gr,lt),g(iA,lt,null),e(lt,yzo),e(lt,Gme),e(Gme,Lzo),e(lt,xzo),e(lt,Ud),e(Ud,kzo),e(Ud,Ome),e(Ome,Szo),e(Ud,Rzo),e(Ud,FG),e(FG,Bzo),e(Ud,Pzo),e(lt,$zo),e(lt,Vme),e(Vme,Izo),e(lt,qzo),g(dA,lt,null),e(gr,Nzo),e(gr,eo),g(cA,eo,null),e(eo,jzo),e(eo,Xme),e(Xme,Dzo),e(eo,Gzo),e(eo,dn),e(dn,Ozo),e(dn,zme),e(zme,Vzo),e(dn,Xzo),e(dn,Qme),e(Qme,zzo),e(dn,Qzo),e(dn,Wme),e(Wme,Wzo),e(dn,Hzo),e(eo,Uzo),e(eo,cn),e(cn,HF),e(HF,Hme),e(Hme,Jzo),e(HF,Yzo),e(HF,vG),e(vG,Kzo),e(HF,Zzo),e(cn,eQo),e(cn,UF),e(UF,Ume),e(Ume,oQo),e(UF,rQo),e(UF,TG),e(TG,tQo),e(UF,aQo),e(cn,nQo),e(cn,JF),e(JF,Jme),e(Jme,sQo),e(JF,lQo),e(JF,MG),e(MG,iQo),e(JF,dQo),e(cn,cQo),e(cn,YF),e(YF,Yme),e(Yme,fQo),e(YF,mQo),e(YF,EG),e(EG,gQo),e(YF,hQo),e(eo,pQo),e(eo,KF),e(KF,_Qo),e(KF,Kme),e(Kme,uQo),e(KF,bQo),e(KF,Zme),e(Zme,FQo),e(eo,vQo),e(eo,ege),e(ege,TQo),e(eo,MQo),g(fA,eo,null),b(c,CRe,u),b(c,Jd,u),e(Jd,ZF),e(ZF,oge),g(mA,oge,null),e(Jd,EQo),e(Jd,rge),e(rge,CQo),b(c,wRe,u),b(c,hr,u),g(gA,hr,null),e(hr,wQo),e(hr,Yd),e(Yd,AQo),e(Yd,CG),e(CG,yQo),e(Yd,LQo),e(Yd,wG),e(wG,xQo),e(Yd,kQo),e(hr,SQo),e(hr,hA),e(hA,RQo),e(hA,tge),e(tge,BQo),e(hA,PQo),e(hr,$Qo),e(hr,it),g(pA,it,null),e(it,IQo),e(it,age),e(age,qQo),e(it,NQo),e(it,Kd),e(Kd,jQo),e(Kd,nge),e(nge,DQo),e(Kd,GQo),e(Kd,AG),e(AG,OQo),e(Kd,VQo),e(it,XQo),e(it,sge),e(sge,zQo),e(it,QQo),g(_A,it,null),e(hr,WQo),e(hr,oo),g(uA,oo,null),e(oo,HQo),e(oo,lge),e(lge,UQo),e(oo,JQo),e(oo,fn),e(fn,YQo),e(fn,ige),e(ige,KQo),e(fn,ZQo),e(fn,dge),e(dge,eWo),e(fn,oWo),e(fn,cge),e(cge,rWo),e(fn,tWo),e(oo,aWo),e(oo,Zd),e(Zd,ev),e(ev,fge),e(fge,nWo),e(ev,sWo),e(ev,yG),e(yG,lWo),e(ev,iWo),e(Zd,dWo),e(Zd,ov),e(ov,mge),e(mge,cWo),e(ov,fWo),e(ov,LG),e(LG,mWo),e(ov,gWo),e(Zd,hWo),e(Zd,rv),e(rv,gge),e(gge,pWo),e(rv,_Wo),e(rv,xG),e(xG,uWo),e(rv,bWo),e(oo,FWo),e(oo,tv),e(tv,vWo),e(tv,hge),e(hge,TWo),e(tv,MWo),e(tv,pge),e(pge,EWo),e(oo,CWo),e(oo,_ge),e(_ge,wWo),e(oo,AWo),g(bA,oo,null),b(c,ARe,u),b(c,ec,u),e(ec,av),e(av,uge),g(FA,uge,null),e(ec,yWo),e(ec,bge),e(bge,LWo),b(c,yRe,u),b(c,pr,u),g(vA,pr,null),e(pr,xWo),e(pr,oc),e(oc,kWo),e(oc,kG),e(kG,SWo),e(oc,RWo),e(oc,SG),e(SG,BWo),e(oc,PWo),e(pr,$Wo),e(pr,TA),e(TA,IWo),e(TA,Fge),e(Fge,qWo),e(TA,NWo),e(pr,jWo),e(pr,dt),g(MA,dt,null),e(dt,DWo),e(dt,vge),e(vge,GWo),e(dt,OWo),e(dt,rc),e(rc,VWo),e(rc,Tge),e(Tge,XWo),e(rc,zWo),e(rc,RG),e(RG,QWo),e(rc,WWo),e(dt,HWo),e(dt,Mge),e(Mge,UWo),e(dt,JWo),g(EA,dt,null),e(pr,YWo),e(pr,ro),g(CA,ro,null),e(ro,KWo),e(ro,Ege),e(Ege,ZWo),e(ro,eHo),e(ro,mn),e(mn,oHo),e(mn,Cge),e(Cge,rHo),e(mn,tHo),e(mn,wge),e(wge,aHo),e(mn,nHo),e(mn,Age),e(Age,sHo),e(mn,lHo),e(ro,iHo),e(ro,yge),e(yge,nv),e(nv,Lge),e(Lge,dHo),e(nv,cHo),e(nv,BG),e(BG,fHo),e(nv,mHo),e(ro,gHo),e(ro,sv),e(sv,hHo),e(sv,xge),e(xge,pHo),e(sv,_Ho),e(sv,kge),e(kge,uHo),e(ro,bHo),e(ro,Sge),e(Sge,FHo),e(ro,vHo),g(wA,ro,null),b(c,LRe,u),b(c,tc,u),e(tc,lv),e(lv,Rge),g(AA,Rge,null),e(tc,THo),e(tc,Bge),e(Bge,MHo),b(c,xRe,u),b(c,_r,u),g(yA,_r,null),e(_r,EHo),e(_r,ac),e(ac,CHo),e(ac,PG),e(PG,wHo),e(ac,AHo),e(ac,$G),e($G,yHo),e(ac,LHo),e(_r,xHo),e(_r,LA),e(LA,kHo),e(LA,Pge),e(Pge,SHo),e(LA,RHo),e(_r,BHo),e(_r,ct),g(xA,ct,null),e(ct,PHo),e(ct,$ge),e($ge,$Ho),e(ct,IHo),e(ct,nc),e(nc,qHo),e(nc,Ige),e(Ige,NHo),e(nc,jHo),e(nc,IG),e(IG,DHo),e(nc,GHo),e(ct,OHo),e(ct,qge),e(qge,VHo),e(ct,XHo),g(kA,ct,null),e(_r,zHo),e(_r,to),g(SA,to,null),e(to,QHo),e(to,Nge),e(Nge,WHo),e(to,HHo),e(to,gn),e(gn,UHo),e(gn,jge),e(jge,JHo),e(gn,YHo),e(gn,Dge),e(Dge,KHo),e(gn,ZHo),e(gn,Gge),e(Gge,eUo),e(gn,oUo),e(to,rUo),e(to,Oge),e(Oge,iv),e(iv,Vge),e(Vge,tUo),e(iv,aUo),e(iv,qG),e(qG,nUo),e(iv,sUo),e(to,lUo),e(to,dv),e(dv,iUo),e(dv,Xge),e(Xge,dUo),e(dv,cUo),e(dv,zge),e(zge,fUo),e(to,mUo),e(to,Qge),e(Qge,gUo),e(to,hUo),g(RA,to,null),b(c,kRe,u),b(c,sc,u),e(sc,cv),e(cv,Wge),g(BA,Wge,null),e(sc,pUo),e(sc,Hge),e(Hge,_Uo),b(c,SRe,u),b(c,ur,u),g(PA,ur,null),e(ur,uUo),e(ur,lc),e(lc,bUo),e(lc,NG),e(NG,FUo),e(lc,vUo),e(lc,jG),e(jG,TUo),e(lc,MUo),e(ur,EUo),e(ur,$A),e($A,CUo),e($A,Uge),e(Uge,wUo),e($A,AUo),e(ur,yUo),e(ur,ft),g(IA,ft,null),e(ft,LUo),e(ft,Jge),e(Jge,xUo),e(ft,kUo),e(ft,ic),e(ic,SUo),e(ic,Yge),e(Yge,RUo),e(ic,BUo),e(ic,DG),e(DG,PUo),e(ic,$Uo),e(ft,IUo),e(ft,Kge),e(Kge,qUo),e(ft,NUo),g(qA,ft,null),e(ur,jUo),e(ur,ao),g(NA,ao,null),e(ao,DUo),e(ao,Zge),e(Zge,GUo),e(ao,OUo),e(ao,hn),e(hn,VUo),e(hn,ehe),e(ehe,XUo),e(hn,zUo),e(hn,ohe),e(ohe,QUo),e(hn,WUo),e(hn,rhe),e(rhe,HUo),e(hn,UUo),e(ao,JUo),e(ao,dc),e(dc,fv),e(fv,the),e(the,YUo),e(fv,KUo),e(fv,GG),e(GG,ZUo),e(fv,eJo),e(dc,oJo),e(dc,mv),e(mv,ahe),e(ahe,rJo),e(mv,tJo),e(mv,OG),e(OG,aJo),e(mv,nJo),e(dc,sJo),e(dc,gv),e(gv,nhe),e(nhe,lJo),e(gv,iJo),e(gv,VG),e(VG,dJo),e(gv,cJo),e(ao,fJo),e(ao,hv),e(hv,mJo),e(hv,she),e(she,gJo),e(hv,hJo),e(hv,lhe),e(lhe,pJo),e(ao,_Jo),e(ao,ihe),e(ihe,uJo),e(ao,bJo),g(jA,ao,null),b(c,RRe,u),b(c,cc,u),e(cc,pv),e(pv,dhe),g(DA,dhe,null),e(cc,FJo),e(cc,che),e(che,vJo),b(c,BRe,u),b(c,br,u),g(GA,br,null),e(br,TJo),e(br,fc),e(fc,MJo),e(fc,XG),e(XG,EJo),e(fc,CJo),e(fc,zG),e(zG,wJo),e(fc,AJo),e(br,yJo),e(br,OA),e(OA,LJo),e(OA,fhe),e(fhe,xJo),e(OA,kJo),e(br,SJo),e(br,mt),g(VA,mt,null),e(mt,RJo),e(mt,mhe),e(mhe,BJo),e(mt,PJo),e(mt,mc),e(mc,$Jo),e(mc,ghe),e(ghe,IJo),e(mc,qJo),e(mc,QG),e(QG,NJo),e(mc,jJo),e(mt,DJo),e(mt,hhe),e(hhe,GJo),e(mt,OJo),g(XA,mt,null),e(br,VJo),e(br,no),g(zA,no,null),e(no,XJo),e(no,phe),e(phe,zJo),e(no,QJo),e(no,pn),e(pn,WJo),e(pn,_he),e(_he,HJo),e(pn,UJo),e(pn,uhe),e(uhe,JJo),e(pn,YJo),e(pn,bhe),e(bhe,KJo),e(pn,ZJo),e(no,eYo),e(no,Fhe),e(Fhe,_v),e(_v,vhe),e(vhe,oYo),e(_v,rYo),e(_v,WG),e(WG,tYo),e(_v,aYo),e(no,nYo),e(no,uv),e(uv,sYo),e(uv,The),e(The,lYo),e(uv,iYo),e(uv,Mhe),e(Mhe,dYo),e(no,cYo),e(no,Ehe),e(Ehe,fYo),e(no,mYo),g(QA,no,null),b(c,PRe,u),b(c,gc,u),e(gc,bv),e(bv,Che),g(WA,Che,null),e(gc,gYo),e(gc,whe),e(whe,hYo),b(c,$Re,u),b(c,Fr,u),g(HA,Fr,null),e(Fr,pYo),e(Fr,hc),e(hc,_Yo),e(hc,HG),e(HG,uYo),e(hc,bYo),e(hc,UG),e(UG,FYo),e(hc,vYo),e(Fr,TYo),e(Fr,UA),e(UA,MYo),e(UA,Ahe),e(Ahe,EYo),e(UA,CYo),e(Fr,wYo),e(Fr,gt),g(JA,gt,null),e(gt,AYo),e(gt,yhe),e(yhe,yYo),e(gt,LYo),e(gt,pc),e(pc,xYo),e(pc,Lhe),e(Lhe,kYo),e(pc,SYo),e(pc,JG),e(JG,RYo),e(pc,BYo),e(gt,PYo),e(gt,xhe),e(xhe,$Yo),e(gt,IYo),g(YA,gt,null),e(Fr,qYo),e(Fr,ho),g(KA,ho,null),e(ho,NYo),e(ho,khe),e(khe,jYo),e(ho,DYo),e(ho,_n),e(_n,GYo),e(_n,She),e(She,OYo),e(_n,VYo),e(_n,Rhe),e(Rhe,XYo),e(_n,zYo),e(_n,Bhe),e(Bhe,QYo),e(_n,WYo),e(ho,HYo),e(ho,x),e(x,Fv),e(Fv,Phe),e(Phe,UYo),e(Fv,JYo),e(Fv,YG),e(YG,YYo),e(Fv,KYo),e(x,ZYo),e(x,vv),e(vv,$he),e($he,eKo),e(vv,oKo),e(vv,KG),e(KG,rKo),e(vv,tKo),e(x,aKo),e(x,Tv),e(Tv,Ihe),e(Ihe,nKo),e(Tv,sKo),e(Tv,ZG),e(ZG,lKo),e(Tv,iKo),e(x,dKo),e(x,Mv),e(Mv,qhe),e(qhe,cKo),e(Mv,fKo),e(Mv,eO),e(eO,mKo),e(Mv,gKo),e(x,hKo),e(x,Ev),e(Ev,Nhe),e(Nhe,pKo),e(Ev,_Ko),e(Ev,oO),e(oO,uKo),e(Ev,bKo),e(x,FKo),e(x,Cv),e(Cv,jhe),e(jhe,vKo),e(Cv,TKo),e(Cv,rO),e(rO,MKo),e(Cv,EKo),e(x,CKo),e(x,wv),e(wv,Dhe),e(Dhe,wKo),e(wv,AKo),e(wv,tO),e(tO,yKo),e(wv,LKo),e(x,xKo),e(x,Av),e(Av,Ghe),e(Ghe,kKo),e(Av,SKo),e(Av,aO),e(aO,RKo),e(Av,BKo),e(x,PKo),e(x,yv),e(yv,Ohe),e(Ohe,$Ko),e(yv,IKo),e(yv,nO),e(nO,qKo),e(yv,NKo),e(x,jKo),e(x,Lv),e(Lv,Vhe),e(Vhe,DKo),e(Lv,GKo),e(Lv,sO),e(sO,OKo),e(Lv,VKo),e(x,XKo),e(x,xv),e(xv,Xhe),e(Xhe,zKo),e(xv,QKo),e(xv,lO),e(lO,WKo),e(xv,HKo),e(x,UKo),e(x,kv),e(kv,zhe),e(zhe,JKo),e(kv,YKo),e(kv,iO),e(iO,KKo),e(kv,ZKo),e(x,eZo),e(x,Sv),e(Sv,Qhe),e(Qhe,oZo),e(Sv,rZo),e(Sv,dO),e(dO,tZo),e(Sv,aZo),e(x,nZo),e(x,Rv),e(Rv,Whe),e(Whe,sZo),e(Rv,lZo),e(Rv,cO),e(cO,iZo),e(Rv,dZo),e(x,cZo),e(x,Bv),e(Bv,Hhe),e(Hhe,fZo),e(Bv,mZo),e(Bv,fO),e(fO,gZo),e(Bv,hZo),e(x,pZo),e(x,Pv),e(Pv,Uhe),e(Uhe,_Zo),e(Pv,uZo),e(Pv,mO),e(mO,bZo),e(Pv,FZo),e(x,vZo),e(x,Gs),e(Gs,Jhe),e(Jhe,TZo),e(Gs,MZo),e(Gs,gO),e(gO,EZo),e(Gs,CZo),e(Gs,hO),e(hO,wZo),e(Gs,AZo),e(x,yZo),e(x,$v),e($v,Yhe),e(Yhe,LZo),e($v,xZo),e($v,pO),e(pO,kZo),e($v,SZo),e(x,RZo),e(x,Iv),e(Iv,Khe),e(Khe,BZo),e(Iv,PZo),e(Iv,_O),e(_O,$Zo),e(Iv,IZo),e(x,qZo),e(x,qv),e(qv,Zhe),e(Zhe,NZo),e(qv,jZo),e(qv,uO),e(uO,DZo),e(qv,GZo),e(x,OZo),e(x,Nv),e(Nv,epe),e(epe,VZo),e(Nv,XZo),e(Nv,bO),e(bO,zZo),e(Nv,QZo),e(x,WZo),e(x,jv),e(jv,ope),e(ope,HZo),e(jv,UZo),e(jv,FO),e(FO,JZo),e(jv,YZo),e(x,KZo),e(x,Dv),e(Dv,rpe),e(rpe,ZZo),e(Dv,eer),e(Dv,vO),e(vO,oer),e(Dv,rer),e(x,ter),e(x,Gv),e(Gv,tpe),e(tpe,aer),e(Gv,ner),e(Gv,TO),e(TO,ser),e(Gv,ler),e(x,ier),e(x,Ov),e(Ov,ape),e(ape,der),e(Ov,cer),e(Ov,MO),e(MO,fer),e(Ov,mer),e(x,ger),e(x,Vv),e(Vv,npe),e(npe,her),e(Vv,per),e(Vv,EO),e(EO,_er),e(Vv,uer),e(x,ber),e(x,Xv),e(Xv,spe),e(spe,Fer),e(Xv,ver),e(Xv,CO),e(CO,Ter),e(Xv,Mer),e(x,Eer),e(x,zv),e(zv,lpe),e(lpe,Cer),e(zv,wer),e(zv,wO),e(wO,Aer),e(zv,yer),e(x,Ler),e(x,Qv),e(Qv,ipe),e(ipe,xer),e(Qv,ker),e(Qv,AO),e(AO,Ser),e(Qv,Rer),e(x,Ber),e(x,Wv),e(Wv,dpe),e(dpe,Per),e(Wv,$er),e(Wv,yO),e(yO,Ier),e(Wv,qer),e(x,Ner),e(x,Hv),e(Hv,cpe),e(cpe,jer),e(Hv,Der),e(Hv,LO),e(LO,Ger),e(Hv,Oer),e(x,Ver),e(x,Uv),e(Uv,fpe),e(fpe,Xer),e(Uv,zer),e(Uv,xO),e(xO,Qer),e(Uv,Wer),e(x,Her),e(x,Jv),e(Jv,mpe),e(mpe,Uer),e(Jv,Jer),e(Jv,kO),e(kO,Yer),e(Jv,Ker),e(x,Zer),e(x,Yv),e(Yv,gpe),e(gpe,eor),e(Yv,oor),e(Yv,SO),e(SO,ror),e(Yv,tor),e(x,aor),e(x,Kv),e(Kv,hpe),e(hpe,nor),e(Kv,sor),e(Kv,RO),e(RO,lor),e(Kv,ior),e(x,dor),e(x,Zv),e(Zv,ppe),e(ppe,cor),e(Zv,mor),e(Zv,BO),e(BO,gor),e(Zv,hor),e(x,por),e(x,e6),e(e6,_pe),e(_pe,_or),e(e6,uor),e(e6,PO),e(PO,bor),e(e6,For),e(x,vor),e(x,o6),e(o6,upe),e(upe,Tor),e(o6,Mor),e(o6,$O),e($O,Eor),e(o6,Cor),e(x,wor),e(x,r6),e(r6,bpe),e(bpe,Aor),e(r6,yor),e(r6,IO),e(IO,Lor),e(r6,xor),e(x,kor),e(x,t6),e(t6,Fpe),e(Fpe,Sor),e(t6,Ror),e(t6,qO),e(qO,Bor),e(t6,Por),e(x,$or),e(x,a6),e(a6,vpe),e(vpe,Ior),e(a6,qor),e(a6,NO),e(NO,Nor),e(a6,jor),e(x,Dor),e(x,n6),e(n6,Tpe),e(Tpe,Gor),e(n6,Oor),e(n6,jO),e(jO,Vor),e(n6,Xor),e(x,zor),e(x,s6),e(s6,Mpe),e(Mpe,Qor),e(s6,Wor),e(s6,DO),e(DO,Hor),e(s6,Uor),e(ho,Jor),e(ho,Epe),e(Epe,Yor),e(ho,Kor),g(ZA,ho,null),b(c,IRe,u),b(c,_c,u),e(_c,l6),e(l6,Cpe),g(e0,Cpe,null),e(_c,Zor),e(_c,wpe),e(wpe,err),b(c,qRe,u),b(c,vr,u),g(o0,vr,null),e(vr,orr),e(vr,uc),e(uc,rrr),e(uc,GO),e(GO,trr),e(uc,arr),e(uc,OO),e(OO,nrr),e(uc,srr),e(vr,lrr),e(vr,r0),e(r0,irr),e(r0,Ape),e(Ape,drr),e(r0,crr),e(vr,frr),e(vr,ht),g(t0,ht,null),e(ht,mrr),e(ht,ype),e(ype,grr),e(ht,hrr),e(ht,bc),e(bc,prr),e(bc,Lpe),e(Lpe,_rr),e(bc,urr),e(bc,VO),e(VO,brr),e(bc,Frr),e(ht,vrr),e(ht,xpe),e(xpe,Trr),e(ht,Mrr),g(a0,ht,null),e(vr,Err),e(vr,po),g(n0,po,null),e(po,Crr),e(po,kpe),e(kpe,wrr),e(po,Arr),e(po,un),e(un,yrr),e(un,Spe),e(Spe,Lrr),e(un,xrr),e(un,Rpe),e(Rpe,krr),e(un,Srr),e(un,Bpe),e(Bpe,Rrr),e(un,Brr),e(po,Prr),e(po,H),e(H,i6),e(i6,Ppe),e(Ppe,$rr),e(i6,Irr),e(i6,XO),e(XO,qrr),e(i6,Nrr),e(H,jrr),e(H,d6),e(d6,$pe),e($pe,Drr),e(d6,Grr),e(d6,zO),e(zO,Orr),e(d6,Vrr),e(H,Xrr),e(H,c6),e(c6,Ipe),e(Ipe,zrr),e(c6,Qrr),e(c6,QO),e(QO,Wrr),e(c6,Hrr),e(H,Urr),e(H,f6),e(f6,qpe),e(qpe,Jrr),e(f6,Yrr),e(f6,WO),e(WO,Krr),e(f6,Zrr),e(H,etr),e(H,m6),e(m6,Npe),e(Npe,otr),e(m6,rtr),e(m6,HO),e(HO,ttr),e(m6,atr),e(H,ntr),e(H,g6),e(g6,jpe),e(jpe,str),e(g6,ltr),e(g6,UO),e(UO,itr),e(g6,dtr),e(H,ctr),e(H,h6),e(h6,Dpe),e(Dpe,ftr),e(h6,mtr),e(h6,JO),e(JO,gtr),e(h6,htr),e(H,ptr),e(H,p6),e(p6,Gpe),e(Gpe,_tr),e(p6,utr),e(p6,YO),e(YO,btr),e(p6,Ftr),e(H,vtr),e(H,_6),e(_6,Ope),e(Ope,Ttr),e(_6,Mtr),e(_6,KO),e(KO,Etr),e(_6,Ctr),e(H,wtr),e(H,u6),e(u6,Vpe),e(Vpe,Atr),e(u6,ytr),e(u6,ZO),e(ZO,Ltr),e(u6,xtr),e(H,ktr),e(H,b6),e(b6,Xpe),e(Xpe,Str),e(b6,Rtr),e(b6,eV),e(eV,Btr),e(b6,Ptr),e(H,$tr),e(H,F6),e(F6,zpe),e(zpe,Itr),e(F6,qtr),e(F6,oV),e(oV,Ntr),e(F6,jtr),e(H,Dtr),e(H,v6),e(v6,Qpe),e(Qpe,Gtr),e(v6,Otr),e(v6,rV),e(rV,Vtr),e(v6,Xtr),e(H,ztr),e(H,T6),e(T6,Wpe),e(Wpe,Qtr),e(T6,Wtr),e(T6,tV),e(tV,Htr),e(T6,Utr),e(H,Jtr),e(H,M6),e(M6,Hpe),e(Hpe,Ytr),e(M6,Ktr),e(M6,aV),e(aV,Ztr),e(M6,ear),e(H,oar),e(H,E6),e(E6,Upe),e(Upe,rar),e(E6,tar),e(E6,nV),e(nV,aar),e(E6,nar),e(H,sar),e(H,C6),e(C6,Jpe),e(Jpe,lar),e(C6,iar),e(C6,sV),e(sV,dar),e(C6,car),e(H,far),e(H,w6),e(w6,Ype),e(Ype,mar),e(w6,gar),e(w6,lV),e(lV,har),e(w6,par),e(H,_ar),e(H,A6),e(A6,Kpe),e(Kpe,uar),e(A6,bar),e(A6,iV),e(iV,Far),e(A6,Tar),e(H,Mar),e(H,y6),e(y6,Zpe),e(Zpe,Ear),e(y6,Car),e(y6,dV),e(dV,war),e(y6,Aar),e(H,yar),e(H,L6),e(L6,e_e),e(e_e,Lar),e(L6,xar),e(L6,cV),e(cV,kar),e(L6,Sar),e(H,Rar),e(H,x6),e(x6,o_e),e(o_e,Bar),e(x6,Par),e(x6,fV),e(fV,$ar),e(x6,Iar),e(po,qar),e(po,r_e),e(r_e,Nar),e(po,jar),g(s0,po,null),b(c,NRe,u),b(c,Fc,u),e(Fc,k6),e(k6,t_e),g(l0,t_e,null),e(Fc,Dar),e(Fc,a_e),e(a_e,Gar),b(c,jRe,u),b(c,Tr,u),g(i0,Tr,null),e(Tr,Oar),e(Tr,vc),e(vc,Var),e(vc,mV),e(mV,Xar),e(vc,zar),e(vc,gV),e(gV,Qar),e(vc,War),e(Tr,Har),e(Tr,d0),e(d0,Uar),e(d0,n_e),e(n_e,Jar),e(d0,Yar),e(Tr,Kar),e(Tr,pt),g(c0,pt,null),e(pt,Zar),e(pt,s_e),e(s_e,enr),e(pt,onr),e(pt,Tc),e(Tc,rnr),e(Tc,l_e),e(l_e,tnr),e(Tc,anr),e(Tc,hV),e(hV,nnr),e(Tc,snr),e(pt,lnr),e(pt,i_e),e(i_e,inr),e(pt,dnr),g(f0,pt,null),e(Tr,cnr),e(Tr,_o),g(m0,_o,null),e(_o,fnr),e(_o,d_e),e(d_e,mnr),e(_o,gnr),e(_o,bn),e(bn,hnr),e(bn,c_e),e(c_e,pnr),e(bn,_nr),e(bn,f_e),e(f_e,unr),e(bn,bnr),e(bn,m_e),e(m_e,Fnr),e(bn,vnr),e(_o,Tnr),e(_o,ce),e(ce,S6),e(S6,g_e),e(g_e,Mnr),e(S6,Enr),e(S6,pV),e(pV,Cnr),e(S6,wnr),e(ce,Anr),e(ce,R6),e(R6,h_e),e(h_e,ynr),e(R6,Lnr),e(R6,_V),e(_V,xnr),e(R6,knr),e(ce,Snr),e(ce,B6),e(B6,p_e),e(p_e,Rnr),e(B6,Bnr),e(B6,uV),e(uV,Pnr),e(B6,$nr),e(ce,Inr),e(ce,P6),e(P6,__e),e(__e,qnr),e(P6,Nnr),e(P6,bV),e(bV,jnr),e(P6,Dnr),e(ce,Gnr),e(ce,$6),e($6,u_e),e(u_e,Onr),e($6,Vnr),e($6,FV),e(FV,Xnr),e($6,znr),e(ce,Qnr),e(ce,I6),e(I6,b_e),e(b_e,Wnr),e(I6,Hnr),e(I6,vV),e(vV,Unr),e(I6,Jnr),e(ce,Ynr),e(ce,q6),e(q6,F_e),e(F_e,Knr),e(q6,Znr),e(q6,TV),e(TV,esr),e(q6,osr),e(ce,rsr),e(ce,N6),e(N6,v_e),e(v_e,tsr),e(N6,asr),e(N6,MV),e(MV,nsr),e(N6,ssr),e(ce,lsr),e(ce,j6),e(j6,T_e),e(T_e,isr),e(j6,dsr),e(j6,EV),e(EV,csr),e(j6,fsr),e(ce,msr),e(ce,D6),e(D6,M_e),e(M_e,gsr),e(D6,hsr),e(D6,CV),e(CV,psr),e(D6,_sr),e(ce,usr),e(ce,G6),e(G6,E_e),e(E_e,bsr),e(G6,Fsr),e(G6,wV),e(wV,vsr),e(G6,Tsr),e(ce,Msr),e(ce,O6),e(O6,C_e),e(C_e,Esr),e(O6,Csr),e(O6,AV),e(AV,wsr),e(O6,Asr),e(_o,ysr),e(_o,w_e),e(w_e,Lsr),e(_o,xsr),g(g0,_o,null),b(c,DRe,u),b(c,Mc,u),e(Mc,V6),e(V6,A_e),g(h0,A_e,null),e(Mc,ksr),e(Mc,y_e),e(y_e,Ssr),b(c,GRe,u),b(c,Mr,u),g(p0,Mr,null),e(Mr,Rsr),e(Mr,Ec),e(Ec,Bsr),e(Ec,yV),e(yV,Psr),e(Ec,$sr),e(Ec,LV),e(LV,Isr),e(Ec,qsr),e(Mr,Nsr),e(Mr,_0),e(_0,jsr),e(_0,L_e),e(L_e,Dsr),e(_0,Gsr),e(Mr,Osr),e(Mr,_t),g(u0,_t,null),e(_t,Vsr),e(_t,x_e),e(x_e,Xsr),e(_t,zsr),e(_t,Cc),e(Cc,Qsr),e(Cc,k_e),e(k_e,Wsr),e(Cc,Hsr),e(Cc,xV),e(xV,Usr),e(Cc,Jsr),e(_t,Ysr),e(_t,S_e),e(S_e,Ksr),e(_t,Zsr),g(b0,_t,null),e(Mr,elr),e(Mr,uo),g(F0,uo,null),e(uo,olr),e(uo,R_e),e(R_e,rlr),e(uo,tlr),e(uo,Fn),e(Fn,alr),e(Fn,B_e),e(B_e,nlr),e(Fn,slr),e(Fn,P_e),e(P_e,llr),e(Fn,ilr),e(Fn,$_e),e($_e,dlr),e(Fn,clr),e(uo,flr),e(uo,v0),e(v0,X6),e(X6,I_e),e(I_e,mlr),e(X6,glr),e(X6,kV),e(kV,hlr),e(X6,plr),e(v0,_lr),e(v0,z6),e(z6,q_e),e(q_e,ulr),e(z6,blr),e(z6,SV),e(SV,Flr),e(z6,vlr),e(uo,Tlr),e(uo,N_e),e(N_e,Mlr),e(uo,Elr),g(T0,uo,null),b(c,ORe,u),b(c,wc,u),e(wc,Q6),e(Q6,j_e),g(M0,j_e,null),e(wc,Clr),e(wc,D_e),e(D_e,wlr),b(c,VRe,u),b(c,Er,u),g(E0,Er,null),e(Er,Alr),e(Er,Ac),e(Ac,ylr),e(Ac,RV),e(RV,Llr),e(Ac,xlr),e(Ac,BV),e(BV,klr),e(Ac,Slr),e(Er,Rlr),e(Er,C0),e(C0,Blr),e(C0,G_e),e(G_e,Plr),e(C0,$lr),e(Er,Ilr),e(Er,ut),g(w0,ut,null),e(ut,qlr),e(ut,O_e),e(O_e,Nlr),e(ut,jlr),e(ut,yc),e(yc,Dlr),e(yc,V_e),e(V_e,Glr),e(yc,Olr),e(yc,PV),e(PV,Vlr),e(yc,Xlr),e(ut,zlr),e(ut,X_e),e(X_e,Qlr),e(ut,Wlr),g(A0,ut,null),e(Er,Hlr),e(Er,bo),g(y0,bo,null),e(bo,Ulr),e(bo,z_e),e(z_e,Jlr),e(bo,Ylr),e(bo,vn),e(vn,Klr),e(vn,Q_e),e(Q_e,Zlr),e(vn,eir),e(vn,W_e),e(W_e,oir),e(vn,rir),e(vn,H_e),e(H_e,tir),e(vn,air),e(bo,nir),e(bo,J),e(J,W6),e(W6,U_e),e(U_e,sir),e(W6,lir),e(W6,$V),e($V,iir),e(W6,dir),e(J,cir),e(J,H6),e(H6,J_e),e(J_e,fir),e(H6,mir),e(H6,IV),e(IV,gir),e(H6,hir),e(J,pir),e(J,U6),e(U6,Y_e),e(Y_e,_ir),e(U6,uir),e(U6,qV),e(qV,bir),e(U6,Fir),e(J,vir),e(J,J6),e(J6,K_e),e(K_e,Tir),e(J6,Mir),e(J6,NV),e(NV,Eir),e(J6,Cir),e(J,wir),e(J,Y6),e(Y6,Z_e),e(Z_e,Air),e(Y6,yir),e(Y6,jV),e(jV,Lir),e(Y6,xir),e(J,kir),e(J,K6),e(K6,eue),e(eue,Sir),e(K6,Rir),e(K6,DV),e(DV,Bir),e(K6,Pir),e(J,$ir),e(J,Z6),e(Z6,oue),e(oue,Iir),e(Z6,qir),e(Z6,GV),e(GV,Nir),e(Z6,jir),e(J,Dir),e(J,eT),e(eT,rue),e(rue,Gir),e(eT,Oir),e(eT,OV),e(OV,Vir),e(eT,Xir),e(J,zir),e(J,oT),e(oT,tue),e(tue,Qir),e(oT,Wir),e(oT,VV),e(VV,Hir),e(oT,Uir),e(J,Jir),e(J,rT),e(rT,aue),e(aue,Yir),e(rT,Kir),e(rT,XV),e(XV,Zir),e(rT,edr),e(J,odr),e(J,tT),e(tT,nue),e(nue,rdr),e(tT,tdr),e(tT,zV),e(zV,adr),e(tT,ndr),e(J,sdr),e(J,aT),e(aT,sue),e(sue,ldr),e(aT,idr),e(aT,QV),e(QV,ddr),e(aT,cdr),e(J,fdr),e(J,nT),e(nT,lue),e(lue,mdr),e(nT,gdr),e(nT,WV),e(WV,hdr),e(nT,pdr),e(J,_dr),e(J,sT),e(sT,iue),e(iue,udr),e(sT,bdr),e(sT,HV),e(HV,Fdr),e(sT,vdr),e(J,Tdr),e(J,lT),e(lT,due),e(due,Mdr),e(lT,Edr),e(lT,UV),e(UV,Cdr),e(lT,wdr),e(J,Adr),e(J,iT),e(iT,cue),e(cue,ydr),e(iT,Ldr),e(iT,JV),e(JV,xdr),e(iT,kdr),e(J,Sdr),e(J,dT),e(dT,fue),e(fue,Rdr),e(dT,Bdr),e(dT,YV),e(YV,Pdr),e(dT,$dr),e(J,Idr),e(J,cT),e(cT,mue),e(mue,qdr),e(cT,Ndr),e(cT,KV),e(KV,jdr),e(cT,Ddr),e(J,Gdr),e(J,fT),e(fT,gue),e(gue,Odr),e(fT,Vdr),e(fT,ZV),e(ZV,Xdr),e(fT,zdr),e(J,Qdr),e(J,mT),e(mT,hue),e(hue,Wdr),e(mT,Hdr),e(mT,eX),e(eX,Udr),e(mT,Jdr),e(bo,Ydr),e(bo,pue),e(pue,Kdr),e(bo,Zdr),g(L0,bo,null),b(c,XRe,u),b(c,Lc,u),e(Lc,gT),e(gT,_ue),g(x0,_ue,null),e(Lc,ecr),e(Lc,uue),e(uue,ocr),b(c,zRe,u),b(c,Cr,u),g(k0,Cr,null),e(Cr,rcr),e(Cr,xc),e(xc,tcr),e(xc,oX),e(oX,acr),e(xc,ncr),e(xc,rX),e(rX,scr),e(xc,lcr),e(Cr,icr),e(Cr,S0),e(S0,dcr),e(S0,bue),e(bue,ccr),e(S0,fcr),e(Cr,mcr),e(Cr,bt),g(R0,bt,null),e(bt,gcr),e(bt,Fue),e(Fue,hcr),e(bt,pcr),e(bt,kc),e(kc,_cr),e(kc,vue),e(vue,ucr),e(kc,bcr),e(kc,tX),e(tX,Fcr),e(kc,vcr),e(bt,Tcr),e(bt,Tue),e(Tue,Mcr),e(bt,Ecr),g(B0,bt,null),e(Cr,Ccr),e(Cr,Fo),g(P0,Fo,null),e(Fo,wcr),e(Fo,Mue),e(Mue,Acr),e(Fo,ycr),e(Fo,Tn),e(Tn,Lcr),e(Tn,Eue),e(Eue,xcr),e(Tn,kcr),e(Tn,Cue),e(Cue,Scr),e(Tn,Rcr),e(Tn,wue),e(wue,Bcr),e(Tn,Pcr),e(Fo,$cr),e(Fo,ue),e(ue,hT),e(hT,Aue),e(Aue,Icr),e(hT,qcr),e(hT,aX),e(aX,Ncr),e(hT,jcr),e(ue,Dcr),e(ue,pT),e(pT,yue),e(yue,Gcr),e(pT,Ocr),e(pT,nX),e(nX,Vcr),e(pT,Xcr),e(ue,zcr),e(ue,_T),e(_T,Lue),e(Lue,Qcr),e(_T,Wcr),e(_T,sX),e(sX,Hcr),e(_T,Ucr),e(ue,Jcr),e(ue,uT),e(uT,xue),e(xue,Ycr),e(uT,Kcr),e(uT,lX),e(lX,Zcr),e(uT,efr),e(ue,ofr),e(ue,bT),e(bT,kue),e(kue,rfr),e(bT,tfr),e(bT,iX),e(iX,afr),e(bT,nfr),e(ue,sfr),e(ue,FT),e(FT,Sue),e(Sue,lfr),e(FT,ifr),e(FT,dX),e(dX,dfr),e(FT,cfr),e(ue,ffr),e(ue,vT),e(vT,Rue),e(Rue,mfr),e(vT,gfr),e(vT,cX),e(cX,hfr),e(vT,pfr),e(ue,_fr),e(ue,TT),e(TT,Bue),e(Bue,ufr),e(TT,bfr),e(TT,fX),e(fX,Ffr),e(TT,vfr),e(ue,Tfr),e(ue,MT),e(MT,Pue),e(Pue,Mfr),e(MT,Efr),e(MT,mX),e(mX,Cfr),e(MT,wfr),e(ue,Afr),e(ue,ET),e(ET,$ue),e($ue,yfr),e(ET,Lfr),e(ET,gX),e(gX,xfr),e(ET,kfr),e(Fo,Sfr),e(Fo,Iue),e(Iue,Rfr),e(Fo,Bfr),g($0,Fo,null),b(c,QRe,u),b(c,Sc,u),e(Sc,CT),e(CT,que),g(I0,que,null),e(Sc,Pfr),e(Sc,Nue),e(Nue,$fr),b(c,WRe,u),b(c,wr,u),g(q0,wr,null),e(wr,Ifr),e(wr,Rc),e(Rc,qfr),e(Rc,hX),e(hX,Nfr),e(Rc,jfr),e(Rc,pX),e(pX,Dfr),e(Rc,Gfr),e(wr,Ofr),e(wr,N0),e(N0,Vfr),e(N0,jue),e(jue,Xfr),e(N0,zfr),e(wr,Qfr),e(wr,Ft),g(j0,Ft,null),e(Ft,Wfr),e(Ft,Due),e(Due,Hfr),e(Ft,Ufr),e(Ft,Bc),e(Bc,Jfr),e(Bc,Gue),e(Gue,Yfr),e(Bc,Kfr),e(Bc,_X),e(_X,Zfr),e(Bc,emr),e(Ft,omr),e(Ft,Oue),e(Oue,rmr),e(Ft,tmr),g(D0,Ft,null),e(wr,amr),e(wr,vo),g(G0,vo,null),e(vo,nmr),e(vo,Vue),e(Vue,smr),e(vo,lmr),e(vo,Mn),e(Mn,imr),e(Mn,Xue),e(Xue,dmr),e(Mn,cmr),e(Mn,zue),e(zue,fmr),e(Mn,mmr),e(Mn,Que),e(Que,gmr),e(Mn,hmr),e(vo,pmr),e(vo,V),e(V,wT),e(wT,Wue),e(Wue,_mr),e(wT,umr),e(wT,uX),e(uX,bmr),e(wT,Fmr),e(V,vmr),e(V,AT),e(AT,Hue),e(Hue,Tmr),e(AT,Mmr),e(AT,bX),e(bX,Emr),e(AT,Cmr),e(V,wmr),e(V,yT),e(yT,Uue),e(Uue,Amr),e(yT,ymr),e(yT,FX),e(FX,Lmr),e(yT,xmr),e(V,kmr),e(V,LT),e(LT,Jue),e(Jue,Smr),e(LT,Rmr),e(LT,vX),e(vX,Bmr),e(LT,Pmr),e(V,$mr),e(V,xT),e(xT,Yue),e(Yue,Imr),e(xT,qmr),e(xT,TX),e(TX,Nmr),e(xT,jmr),e(V,Dmr),e(V,kT),e(kT,Kue),e(Kue,Gmr),e(kT,Omr),e(kT,MX),e(MX,Vmr),e(kT,Xmr),e(V,zmr),e(V,ST),e(ST,Zue),e(Zue,Qmr),e(ST,Wmr),e(ST,EX),e(EX,Hmr),e(ST,Umr),e(V,Jmr),e(V,RT),e(RT,e1e),e(e1e,Ymr),e(RT,Kmr),e(RT,CX),e(CX,Zmr),e(RT,egr),e(V,ogr),e(V,BT),e(BT,o1e),e(o1e,rgr),e(BT,tgr),e(BT,wX),e(wX,agr),e(BT,ngr),e(V,sgr),e(V,PT),e(PT,r1e),e(r1e,lgr),e(PT,igr),e(PT,AX),e(AX,dgr),e(PT,cgr),e(V,fgr),e(V,$T),e($T,t1e),e(t1e,mgr),e($T,ggr),e($T,yX),e(yX,hgr),e($T,pgr),e(V,_gr),e(V,IT),e(IT,a1e),e(a1e,ugr),e(IT,bgr),e(IT,LX),e(LX,Fgr),e(IT,vgr),e(V,Tgr),e(V,qT),e(qT,n1e),e(n1e,Mgr),e(qT,Egr),e(qT,xX),e(xX,Cgr),e(qT,wgr),e(V,Agr),e(V,NT),e(NT,s1e),e(s1e,ygr),e(NT,Lgr),e(NT,kX),e(kX,xgr),e(NT,kgr),e(V,Sgr),e(V,jT),e(jT,l1e),e(l1e,Rgr),e(jT,Bgr),e(jT,SX),e(SX,Pgr),e(jT,$gr),e(V,Igr),e(V,DT),e(DT,i1e),e(i1e,qgr),e(DT,Ngr),e(DT,RX),e(RX,jgr),e(DT,Dgr),e(V,Ggr),e(V,GT),e(GT,d1e),e(d1e,Ogr),e(GT,Vgr),e(GT,BX),e(BX,Xgr),e(GT,zgr),e(V,Qgr),e(V,OT),e(OT,c1e),e(c1e,Wgr),e(OT,Hgr),e(OT,PX),e(PX,Ugr),e(OT,Jgr),e(V,Ygr),e(V,VT),e(VT,f1e),e(f1e,Kgr),e(VT,Zgr),e(VT,$X),e($X,ehr),e(VT,ohr),e(V,rhr),e(V,XT),e(XT,m1e),e(m1e,thr),e(XT,ahr),e(XT,IX),e(IX,nhr),e(XT,shr),e(V,lhr),e(V,zT),e(zT,g1e),e(g1e,ihr),e(zT,dhr),e(zT,qX),e(qX,chr),e(zT,fhr),e(V,mhr),e(V,QT),e(QT,h1e),e(h1e,ghr),e(QT,hhr),e(QT,NX),e(NX,phr),e(QT,_hr),e(V,uhr),e(V,WT),e(WT,p1e),e(p1e,bhr),e(WT,Fhr),e(WT,jX),e(jX,vhr),e(WT,Thr),e(V,Mhr),e(V,HT),e(HT,_1e),e(_1e,Ehr),e(HT,Chr),e(HT,DX),e(DX,whr),e(HT,Ahr),e(V,yhr),e(V,UT),e(UT,u1e),e(u1e,Lhr),e(UT,xhr),e(UT,GX),e(GX,khr),e(UT,Shr),e(V,Rhr),e(V,JT),e(JT,b1e),e(b1e,Bhr),e(JT,Phr),e(JT,OX),e(OX,$hr),e(JT,Ihr),e(vo,qhr),e(vo,F1e),e(F1e,Nhr),e(vo,jhr),g(O0,vo,null),b(c,HRe,u),b(c,Pc,u),e(Pc,YT),e(YT,v1e),g(V0,v1e,null),e(Pc,Dhr),e(Pc,T1e),e(T1e,Ghr),b(c,URe,u),b(c,Ar,u),g(X0,Ar,null),e(Ar,Ohr),e(Ar,$c),e($c,Vhr),e($c,VX),e(VX,Xhr),e($c,zhr),e($c,XX),e(XX,Qhr),e($c,Whr),e(Ar,Hhr),e(Ar,z0),e(z0,Uhr),e(z0,M1e),e(M1e,Jhr),e(z0,Yhr),e(Ar,Khr),e(Ar,vt),g(Q0,vt,null),e(vt,Zhr),e(vt,E1e),e(E1e,epr),e(vt,opr),e(vt,Ic),e(Ic,rpr),e(Ic,C1e),e(C1e,tpr),e(Ic,apr),e(Ic,zX),e(zX,npr),e(Ic,spr),e(vt,lpr),e(vt,w1e),e(w1e,ipr),e(vt,dpr),g(W0,vt,null),e(Ar,cpr),e(Ar,To),g(H0,To,null),e(To,fpr),e(To,A1e),e(A1e,mpr),e(To,gpr),e(To,En),e(En,hpr),e(En,y1e),e(y1e,ppr),e(En,_pr),e(En,L1e),e(L1e,upr),e(En,bpr),e(En,x1e),e(x1e,Fpr),e(En,vpr),e(To,Tpr),e(To,ae),e(ae,KT),e(KT,k1e),e(k1e,Mpr),e(KT,Epr),e(KT,QX),e(QX,Cpr),e(KT,wpr),e(ae,Apr),e(ae,ZT),e(ZT,S1e),e(S1e,ypr),e(ZT,Lpr),e(ZT,WX),e(WX,xpr),e(ZT,kpr),e(ae,Spr),e(ae,e7),e(e7,R1e),e(R1e,Rpr),e(e7,Bpr),e(e7,HX),e(HX,Ppr),e(e7,$pr),e(ae,Ipr),e(ae,o7),e(o7,B1e),e(B1e,qpr),e(o7,Npr),e(o7,UX),e(UX,jpr),e(o7,Dpr),e(ae,Gpr),e(ae,r7),e(r7,P1e),e(P1e,Opr),e(r7,Vpr),e(r7,JX),e(JX,Xpr),e(r7,zpr),e(ae,Qpr),e(ae,t7),e(t7,$1e),e($1e,Wpr),e(t7,Hpr),e(t7,YX),e(YX,Upr),e(t7,Jpr),e(ae,Ypr),e(ae,a7),e(a7,I1e),e(I1e,Kpr),e(a7,Zpr),e(a7,KX),e(KX,e_r),e(a7,o_r),e(ae,r_r),e(ae,n7),e(n7,q1e),e(q1e,t_r),e(n7,a_r),e(n7,ZX),e(ZX,n_r),e(n7,s_r),e(ae,l_r),e(ae,s7),e(s7,N1e),e(N1e,i_r),e(s7,d_r),e(s7,ez),e(ez,c_r),e(s7,f_r),e(ae,m_r),e(ae,l7),e(l7,j1e),e(j1e,g_r),e(l7,h_r),e(l7,oz),e(oz,p_r),e(l7,__r),e(ae,u_r),e(ae,i7),e(i7,D1e),e(D1e,b_r),e(i7,F_r),e(i7,rz),e(rz,v_r),e(i7,T_r),e(ae,M_r),e(ae,d7),e(d7,G1e),e(G1e,E_r),e(d7,C_r),e(d7,tz),e(tz,w_r),e(d7,A_r),e(ae,y_r),e(ae,c7),e(c7,O1e),e(O1e,L_r),e(c7,x_r),e(c7,az),e(az,k_r),e(c7,S_r),e(ae,R_r),e(ae,f7),e(f7,V1e),e(V1e,B_r),e(f7,P_r),e(f7,nz),e(nz,$_r),e(f7,I_r),e(ae,q_r),e(ae,m7),e(m7,X1e),e(X1e,N_r),e(m7,j_r),e(m7,sz),e(sz,D_r),e(m7,G_r),e(ae,O_r),e(ae,g7),e(g7,z1e),e(z1e,V_r),e(g7,X_r),e(g7,lz),e(lz,z_r),e(g7,Q_r),e(ae,W_r),e(ae,h7),e(h7,Q1e),e(Q1e,H_r),e(h7,U_r),e(h7,iz),e(iz,J_r),e(h7,Y_r),e(To,K_r),e(To,W1e),e(W1e,Z_r),e(To,eur),g(U0,To,null),b(c,JRe,u),b(c,qc,u),e(qc,p7),e(p7,H1e),g(J0,H1e,null),e(qc,our),e(qc,U1e),e(U1e,rur),b(c,YRe,u),b(c,yr,u),g(Y0,yr,null),e(yr,tur),e(yr,Nc),e(Nc,aur),e(Nc,dz),e(dz,nur),e(Nc,sur),e(Nc,cz),e(cz,lur),e(Nc,iur),e(yr,dur),e(yr,K0),e(K0,cur),e(K0,J1e),e(J1e,fur),e(K0,mur),e(yr,gur),e(yr,Tt),g(Z0,Tt,null),e(Tt,hur),e(Tt,Y1e),e(Y1e,pur),e(Tt,_ur),e(Tt,jc),e(jc,uur),e(jc,K1e),e(K1e,bur),e(jc,Fur),e(jc,fz),e(fz,vur),e(jc,Tur),e(Tt,Mur),e(Tt,Z1e),e(Z1e,Eur),e(Tt,Cur),g(ey,Tt,null),e(yr,wur),e(yr,Mo),g(oy,Mo,null),e(Mo,Aur),e(Mo,ebe),e(ebe,yur),e(Mo,Lur),e(Mo,Cn),e(Cn,xur),e(Cn,obe),e(obe,kur),e(Cn,Sur),e(Cn,rbe),e(rbe,Rur),e(Cn,Bur),e(Cn,tbe),e(tbe,Pur),e(Cn,$ur),e(Mo,Iur),e(Mo,abe),e(abe,_7),e(_7,nbe),e(nbe,qur),e(_7,Nur),e(_7,mz),e(mz,jur),e(_7,Dur),e(Mo,Gur),e(Mo,sbe),e(sbe,Our),e(Mo,Vur),g(ry,Mo,null),b(c,KRe,u),b(c,Dc,u),e(Dc,u7),e(u7,lbe),g(ty,lbe,null),e(Dc,Xur),e(Dc,ibe),e(ibe,zur),b(c,ZRe,u),b(c,Lr,u),g(ay,Lr,null),e(Lr,Qur),e(Lr,Gc),e(Gc,Wur),e(Gc,gz),e(gz,Hur),e(Gc,Uur),e(Gc,hz),e(hz,Jur),e(Gc,Yur),e(Lr,Kur),e(Lr,ny),e(ny,Zur),e(ny,dbe),e(dbe,e1r),e(ny,o1r),e(Lr,r1r),e(Lr,Mt),g(sy,Mt,null),e(Mt,t1r),e(Mt,cbe),e(cbe,a1r),e(Mt,n1r),e(Mt,Oc),e(Oc,s1r),e(Oc,fbe),e(fbe,l1r),e(Oc,i1r),e(Oc,pz),e(pz,d1r),e(Oc,c1r),e(Mt,f1r),e(Mt,mbe),e(mbe,m1r),e(Mt,g1r),g(ly,Mt,null),e(Lr,h1r),e(Lr,Eo),g(iy,Eo,null),e(Eo,p1r),e(Eo,gbe),e(gbe,_1r),e(Eo,u1r),e(Eo,wn),e(wn,b1r),e(wn,hbe),e(hbe,F1r),e(wn,v1r),e(wn,pbe),e(pbe,T1r),e(wn,M1r),e(wn,_be),e(_be,E1r),e(wn,C1r),e(Eo,w1r),e(Eo,Y),e(Y,b7),e(b7,ube),e(ube,A1r),e(b7,y1r),e(b7,_z),e(_z,L1r),e(b7,x1r),e(Y,k1r),e(Y,F7),e(F7,bbe),e(bbe,S1r),e(F7,R1r),e(F7,uz),e(uz,B1r),e(F7,P1r),e(Y,$1r),e(Y,v7),e(v7,Fbe),e(Fbe,I1r),e(v7,q1r),e(v7,bz),e(bz,N1r),e(v7,j1r),e(Y,D1r),e(Y,T7),e(T7,vbe),e(vbe,G1r),e(T7,O1r),e(T7,Fz),e(Fz,V1r),e(T7,X1r),e(Y,z1r),e(Y,M7),e(M7,Tbe),e(Tbe,Q1r),e(M7,W1r),e(M7,vz),e(vz,H1r),e(M7,U1r),e(Y,J1r),e(Y,E7),e(E7,Mbe),e(Mbe,Y1r),e(E7,K1r),e(E7,Tz),e(Tz,Z1r),e(E7,ebr),e(Y,obr),e(Y,C7),e(C7,Ebe),e(Ebe,rbr),e(C7,tbr),e(C7,Mz),e(Mz,abr),e(C7,nbr),e(Y,sbr),e(Y,w7),e(w7,Cbe),e(Cbe,lbr),e(w7,ibr),e(w7,Ez),e(Ez,dbr),e(w7,cbr),e(Y,fbr),e(Y,A7),e(A7,wbe),e(wbe,mbr),e(A7,gbr),e(A7,Cz),e(Cz,hbr),e(A7,pbr),e(Y,_br),e(Y,y7),e(y7,Abe),e(Abe,ubr),e(y7,bbr),e(y7,wz),e(wz,Fbr),e(y7,vbr),e(Y,Tbr),e(Y,L7),e(L7,ybe),e(ybe,Mbr),e(L7,Ebr),e(L7,Az),e(Az,Cbr),e(L7,wbr),e(Y,Abr),e(Y,x7),e(x7,Lbe),e(Lbe,ybr),e(x7,Lbr),e(x7,yz),e(yz,xbr),e(x7,kbr),e(Y,Sbr),e(Y,k7),e(k7,xbe),e(xbe,Rbr),e(k7,Bbr),e(k7,Lz),e(Lz,Pbr),e(k7,$br),e(Y,Ibr),e(Y,S7),e(S7,kbe),e(kbe,qbr),e(S7,Nbr),e(S7,xz),e(xz,jbr),e(S7,Dbr),e(Y,Gbr),e(Y,R7),e(R7,Sbe),e(Sbe,Obr),e(R7,Vbr),e(R7,kz),e(kz,Xbr),e(R7,zbr),e(Y,Qbr),e(Y,B7),e(B7,Rbe),e(Rbe,Wbr),e(B7,Hbr),e(B7,Sz),e(Sz,Ubr),e(B7,Jbr),e(Y,Ybr),e(Y,P7),e(P7,Bbe),e(Bbe,Kbr),e(P7,Zbr),e(P7,Rz),e(Rz,e3r),e(P7,o3r),e(Y,r3r),e(Y,$7),e($7,Pbe),e(Pbe,t3r),e($7,a3r),e($7,Bz),e(Bz,n3r),e($7,s3r),e(Y,l3r),e(Y,I7),e(I7,$be),e($be,i3r),e(I7,d3r),e(I7,Pz),e(Pz,c3r),e(I7,f3r),e(Y,m3r),e(Y,q7),e(q7,Ibe),e(Ibe,g3r),e(q7,h3r),e(q7,$z),e($z,p3r),e(q7,_3r),e(Eo,u3r),e(Eo,qbe),e(qbe,b3r),e(Eo,F3r),g(dy,Eo,null),b(c,eBe,u),b(c,Vc,u),e(Vc,N7),e(N7,Nbe),g(cy,Nbe,null),e(Vc,v3r),e(Vc,jbe),e(jbe,T3r),b(c,oBe,u),b(c,xr,u),g(fy,xr,null),e(xr,M3r),e(xr,Xc),e(Xc,E3r),e(Xc,Iz),e(Iz,C3r),e(Xc,w3r),e(Xc,qz),e(qz,A3r),e(Xc,y3r),e(xr,L3r),e(xr,my),e(my,x3r),e(my,Dbe),e(Dbe,k3r),e(my,S3r),e(xr,R3r),e(xr,Et),g(gy,Et,null),e(Et,B3r),e(Et,Gbe),e(Gbe,P3r),e(Et,$3r),e(Et,zc),e(zc,I3r),e(zc,Obe),e(Obe,q3r),e(zc,N3r),e(zc,Nz),e(Nz,j3r),e(zc,D3r),e(Et,G3r),e(Et,Vbe),e(Vbe,O3r),e(Et,V3r),g(hy,Et,null),e(xr,X3r),e(xr,Co),g(py,Co,null),e(Co,z3r),e(Co,Xbe),e(Xbe,Q3r),e(Co,W3r),e(Co,An),e(An,H3r),e(An,zbe),e(zbe,U3r),e(An,J3r),e(An,Qbe),e(Qbe,Y3r),e(An,K3r),e(An,Wbe),e(Wbe,Z3r),e(An,e2r),e(Co,o2r),e(Co,K),e(K,j7),e(j7,Hbe),e(Hbe,r2r),e(j7,t2r),e(j7,jz),e(jz,a2r),e(j7,n2r),e(K,s2r),e(K,D7),e(D7,Ube),e(Ube,l2r),e(D7,i2r),e(D7,Dz),e(Dz,d2r),e(D7,c2r),e(K,f2r),e(K,G7),e(G7,Jbe),e(Jbe,m2r),e(G7,g2r),e(G7,Gz),e(Gz,h2r),e(G7,p2r),e(K,_2r),e(K,O7),e(O7,Ybe),e(Ybe,u2r),e(O7,b2r),e(O7,Oz),e(Oz,F2r),e(O7,v2r),e(K,T2r),e(K,V7),e(V7,Kbe),e(Kbe,M2r),e(V7,E2r),e(V7,Vz),e(Vz,C2r),e(V7,w2r),e(K,A2r),e(K,X7),e(X7,Zbe),e(Zbe,y2r),e(X7,L2r),e(X7,Xz),e(Xz,x2r),e(X7,k2r),e(K,S2r),e(K,z7),e(z7,e3e),e(e3e,R2r),e(z7,B2r),e(z7,zz),e(zz,P2r),e(z7,$2r),e(K,I2r),e(K,Q7),e(Q7,o3e),e(o3e,q2r),e(Q7,N2r),e(Q7,Qz),e(Qz,j2r),e(Q7,D2r),e(K,G2r),e(K,W7),e(W7,r3e),e(r3e,O2r),e(W7,V2r),e(W7,Wz),e(Wz,X2r),e(W7,z2r),e(K,Q2r),e(K,H7),e(H7,t3e),e(t3e,W2r),e(H7,H2r),e(H7,Hz),e(Hz,U2r),e(H7,J2r),e(K,Y2r),e(K,U7),e(U7,a3e),e(a3e,K2r),e(U7,Z2r),e(U7,Uz),e(Uz,eFr),e(U7,oFr),e(K,rFr),e(K,J7),e(J7,n3e),e(n3e,tFr),e(J7,aFr),e(J7,Jz),e(Jz,nFr),e(J7,sFr),e(K,lFr),e(K,Y7),e(Y7,s3e),e(s3e,iFr),e(Y7,dFr),e(Y7,Yz),e(Yz,cFr),e(Y7,fFr),e(K,mFr),e(K,K7),e(K7,l3e),e(l3e,gFr),e(K7,hFr),e(K7,Kz),e(Kz,pFr),e(K7,_Fr),e(K,uFr),e(K,Z7),e(Z7,i3e),e(i3e,bFr),e(Z7,FFr),e(Z7,Zz),e(Zz,vFr),e(Z7,TFr),e(K,MFr),e(K,eM),e(eM,d3e),e(d3e,EFr),e(eM,CFr),e(eM,eQ),e(eQ,wFr),e(eM,AFr),e(K,yFr),e(K,oM),e(oM,c3e),e(c3e,LFr),e(oM,xFr),e(oM,oQ),e(oQ,kFr),e(oM,SFr),e(K,RFr),e(K,rM),e(rM,f3e),e(f3e,BFr),e(rM,PFr),e(rM,rQ),e(rQ,$Fr),e(rM,IFr),e(K,qFr),e(K,tM),e(tM,m3e),e(m3e,NFr),e(tM,jFr),e(tM,tQ),e(tQ,DFr),e(tM,GFr),e(K,OFr),e(K,aM),e(aM,g3e),e(g3e,VFr),e(aM,XFr),e(aM,aQ),e(aQ,zFr),e(aM,QFr),e(Co,WFr),e(Co,h3e),e(h3e,HFr),e(Co,UFr),g(_y,Co,null),b(c,rBe,u),b(c,Qc,u),e(Qc,nM),e(nM,p3e),g(uy,p3e,null),e(Qc,JFr),e(Qc,_3e),e(_3e,YFr),b(c,tBe,u),b(c,kr,u),g(by,kr,null),e(kr,KFr),e(kr,Wc),e(Wc,ZFr),e(Wc,nQ),e(nQ,evr),e(Wc,ovr),e(Wc,sQ),e(sQ,rvr),e(Wc,tvr),e(kr,avr),e(kr,Fy),e(Fy,nvr),e(Fy,u3e),e(u3e,svr),e(Fy,lvr),e(kr,ivr),e(kr,Ct),g(vy,Ct,null),e(Ct,dvr),e(Ct,b3e),e(b3e,cvr),e(Ct,fvr),e(Ct,Hc),e(Hc,mvr),e(Hc,F3e),e(F3e,gvr),e(Hc,hvr),e(Hc,lQ),e(lQ,pvr),e(Hc,_vr),e(Ct,uvr),e(Ct,v3e),e(v3e,bvr),e(Ct,Fvr),g(Ty,Ct,null),e(kr,vvr),e(kr,wo),g(My,wo,null),e(wo,Tvr),e(wo,T3e),e(T3e,Mvr),e(wo,Evr),e(wo,yn),e(yn,Cvr),e(yn,M3e),e(M3e,wvr),e(yn,Avr),e(yn,E3e),e(E3e,yvr),e(yn,Lvr),e(yn,C3e),e(C3e,xvr),e(yn,kvr),e(wo,Svr),e(wo,w3e),e(w3e,sM),e(sM,A3e),e(A3e,Rvr),e(sM,Bvr),e(sM,iQ),e(iQ,Pvr),e(sM,$vr),e(wo,Ivr),e(wo,y3e),e(y3e,qvr),e(wo,Nvr),g(Ey,wo,null),b(c,aBe,u),b(c,Uc,u),e(Uc,lM),e(lM,L3e),g(Cy,L3e,null),e(Uc,jvr),e(Uc,x3e),e(x3e,Dvr),b(c,nBe,u),b(c,Sr,u),g(wy,Sr,null),e(Sr,Gvr),e(Sr,Jc),e(Jc,Ovr),e(Jc,dQ),e(dQ,Vvr),e(Jc,Xvr),e(Jc,cQ),e(cQ,zvr),e(Jc,Qvr),e(Sr,Wvr),e(Sr,Ay),e(Ay,Hvr),e(Ay,k3e),e(k3e,Uvr),e(Ay,Jvr),e(Sr,Yvr),e(Sr,wt),g(yy,wt,null),e(wt,Kvr),e(wt,S3e),e(S3e,Zvr),e(wt,e6r),e(wt,Yc),e(Yc,o6r),e(Yc,R3e),e(R3e,r6r),e(Yc,t6r),e(Yc,fQ),e(fQ,a6r),e(Yc,n6r),e(wt,s6r),e(wt,B3e),e(B3e,l6r),e(wt,i6r),g(Ly,wt,null),e(Sr,d6r),e(Sr,Ao),g(xy,Ao,null),e(Ao,c6r),e(Ao,P3e),e(P3e,f6r),e(Ao,m6r),e(Ao,Ln),e(Ln,g6r),e(Ln,$3e),e($3e,h6r),e(Ln,p6r),e(Ln,I3e),e(I3e,_6r),e(Ln,u6r),e(Ln,q3e),e(q3e,b6r),e(Ln,F6r),e(Ao,v6r),e(Ao,N3e),e(N3e,iM),e(iM,j3e),e(j3e,T6r),e(iM,M6r),e(iM,mQ),e(mQ,E6r),e(iM,C6r),e(Ao,w6r),e(Ao,D3e),e(D3e,A6r),e(Ao,y6r),g(ky,Ao,null),b(c,sBe,u),b(c,Kc,u),e(Kc,dM),e(dM,G3e),g(Sy,G3e,null),e(Kc,L6r),e(Kc,O3e),e(O3e,x6r),b(c,lBe,u),b(c,Rr,u),g(Ry,Rr,null),e(Rr,k6r),e(Rr,Zc),e(Zc,S6r),e(Zc,gQ),e(gQ,R6r),e(Zc,B6r),e(Zc,hQ),e(hQ,P6r),e(Zc,$6r),e(Rr,I6r),e(Rr,By),e(By,q6r),e(By,V3e),e(V3e,N6r),e(By,j6r),e(Rr,D6r),e(Rr,At),g(Py,At,null),e(At,G6r),e(At,X3e),e(X3e,O6r),e(At,V6r),e(At,ef),e(ef,X6r),e(ef,z3e),e(z3e,z6r),e(ef,Q6r),e(ef,pQ),e(pQ,W6r),e(ef,H6r),e(At,U6r),e(At,Q3e),e(Q3e,J6r),e(At,Y6r),g($y,At,null),e(Rr,K6r),e(Rr,yo),g(Iy,yo,null),e(yo,Z6r),e(yo,W3e),e(W3e,eTr),e(yo,oTr),e(yo,xn),e(xn,rTr),e(xn,H3e),e(H3e,tTr),e(xn,aTr),e(xn,U3e),e(U3e,nTr),e(xn,sTr),e(xn,J3e),e(J3e,lTr),e(xn,iTr),e(yo,dTr),e(yo,z),e(z,cM),e(cM,Y3e),e(Y3e,cTr),e(cM,fTr),e(cM,_Q),e(_Q,mTr),e(cM,gTr),e(z,hTr),e(z,fM),e(fM,K3e),e(K3e,pTr),e(fM,_Tr),e(fM,uQ),e(uQ,uTr),e(fM,bTr),e(z,FTr),e(z,mM),e(mM,Z3e),e(Z3e,vTr),e(mM,TTr),e(mM,bQ),e(bQ,MTr),e(mM,ETr),e(z,CTr),e(z,gM),e(gM,e2e),e(e2e,wTr),e(gM,ATr),e(gM,FQ),e(FQ,yTr),e(gM,LTr),e(z,xTr),e(z,hM),e(hM,o2e),e(o2e,kTr),e(hM,STr),e(hM,vQ),e(vQ,RTr),e(hM,BTr),e(z,PTr),e(z,pM),e(pM,r2e),e(r2e,$Tr),e(pM,ITr),e(pM,TQ),e(TQ,qTr),e(pM,NTr),e(z,jTr),e(z,_M),e(_M,t2e),e(t2e,DTr),e(_M,GTr),e(_M,MQ),e(MQ,OTr),e(_M,VTr),e(z,XTr),e(z,uM),e(uM,a2e),e(a2e,zTr),e(uM,QTr),e(uM,EQ),e(EQ,WTr),e(uM,HTr),e(z,UTr),e(z,bM),e(bM,n2e),e(n2e,JTr),e(bM,YTr),e(bM,CQ),e(CQ,KTr),e(bM,ZTr),e(z,e7r),e(z,FM),e(FM,s2e),e(s2e,o7r),e(FM,r7r),e(FM,wQ),e(wQ,t7r),e(FM,a7r),e(z,n7r),e(z,vM),e(vM,l2e),e(l2e,s7r),e(vM,l7r),e(vM,AQ),e(AQ,i7r),e(vM,d7r),e(z,c7r),e(z,TM),e(TM,i2e),e(i2e,f7r),e(TM,m7r),e(TM,yQ),e(yQ,g7r),e(TM,h7r),e(z,p7r),e(z,MM),e(MM,d2e),e(d2e,_7r),e(MM,u7r),e(MM,LQ),e(LQ,b7r),e(MM,F7r),e(z,v7r),e(z,EM),e(EM,c2e),e(c2e,T7r),e(EM,M7r),e(EM,xQ),e(xQ,E7r),e(EM,C7r),e(z,w7r),e(z,CM),e(CM,f2e),e(f2e,A7r),e(CM,y7r),e(CM,kQ),e(kQ,L7r),e(CM,x7r),e(z,k7r),e(z,wM),e(wM,m2e),e(m2e,S7r),e(wM,R7r),e(wM,SQ),e(SQ,B7r),e(wM,P7r),e(z,$7r),e(z,AM),e(AM,g2e),e(g2e,I7r),e(AM,q7r),e(AM,RQ),e(RQ,N7r),e(AM,j7r),e(z,D7r),e(z,yM),e(yM,h2e),e(h2e,G7r),e(yM,O7r),e(yM,BQ),e(BQ,V7r),e(yM,X7r),e(z,z7r),e(z,LM),e(LM,p2e),e(p2e,Q7r),e(LM,W7r),e(LM,PQ),e(PQ,H7r),e(LM,U7r),e(z,J7r),e(z,xM),e(xM,_2e),e(_2e,Y7r),e(xM,K7r),e(xM,$Q),e($Q,Z7r),e(xM,eMr),e(z,oMr),e(z,kM),e(kM,u2e),e(u2e,rMr),e(kM,tMr),e(kM,IQ),e(IQ,aMr),e(kM,nMr),e(z,sMr),e(z,SM),e(SM,b2e),e(b2e,lMr),e(SM,iMr),e(SM,qQ),e(qQ,dMr),e(SM,cMr),e(z,fMr),e(z,RM),e(RM,F2e),e(F2e,mMr),e(RM,gMr),e(RM,NQ),e(NQ,hMr),e(RM,pMr),e(z,_Mr),e(z,BM),e(BM,v2e),e(v2e,uMr),e(BM,bMr),e(BM,jQ),e(jQ,FMr),e(BM,vMr),e(z,TMr),e(z,PM),e(PM,T2e),e(T2e,MMr),e(PM,EMr),e(PM,DQ),e(DQ,CMr),e(PM,wMr),e(yo,AMr),e(yo,M2e),e(M2e,yMr),e(yo,LMr),g(qy,yo,null),b(c,iBe,u),b(c,of,u),e(of,$M),e($M,E2e),g(Ny,E2e,null),e(of,xMr),e(of,C2e),e(C2e,kMr),b(c,dBe,u),b(c,Br,u),g(jy,Br,null),e(Br,SMr),e(Br,rf),e(rf,RMr),e(rf,GQ),e(GQ,BMr),e(rf,PMr),e(rf,OQ),e(OQ,$Mr),e(rf,IMr),e(Br,qMr),e(Br,Dy),e(Dy,NMr),e(Dy,w2e),e(w2e,jMr),e(Dy,DMr),e(Br,GMr),e(Br,yt),g(Gy,yt,null),e(yt,OMr),e(yt,A2e),e(A2e,VMr),e(yt,XMr),e(yt,tf),e(tf,zMr),e(tf,y2e),e(y2e,QMr),e(tf,WMr),e(tf,VQ),e(VQ,HMr),e(tf,UMr),e(yt,JMr),e(yt,L2e),e(L2e,YMr),e(yt,KMr),g(Oy,yt,null),e(Br,ZMr),e(Br,Lo),g(Vy,Lo,null),e(Lo,e4r),e(Lo,x2e),e(x2e,o4r),e(Lo,r4r),e(Lo,kn),e(kn,t4r),e(kn,k2e),e(k2e,a4r),e(kn,n4r),e(kn,S2e),e(S2e,s4r),e(kn,l4r),e(kn,R2e),e(R2e,i4r),e(kn,d4r),e(Lo,c4r),e(Lo,ca),e(ca,IM),e(IM,B2e),e(B2e,f4r),e(IM,m4r),e(IM,XQ),e(XQ,g4r),e(IM,h4r),e(ca,p4r),e(ca,qM),e(qM,P2e),e(P2e,_4r),e(qM,u4r),e(qM,zQ),e(zQ,b4r),e(qM,F4r),e(ca,v4r),e(ca,NM),e(NM,$2e),e($2e,T4r),e(NM,M4r),e(NM,QQ),e(QQ,E4r),e(NM,C4r),e(ca,w4r),e(ca,jM),e(jM,I2e),e(I2e,A4r),e(jM,y4r),e(jM,WQ),e(WQ,L4r),e(jM,x4r),e(ca,k4r),e(ca,DM),e(DM,q2e),e(q2e,S4r),e(DM,R4r),e(DM,HQ),e(HQ,B4r),e(DM,P4r),e(Lo,$4r),e(Lo,N2e),e(N2e,I4r),e(Lo,q4r),g(Xy,Lo,null),b(c,cBe,u),b(c,af,u),e(af,GM),e(GM,j2e),g(zy,j2e,null),e(af,N4r),e(af,D2e),e(D2e,j4r),b(c,fBe,u),b(c,Pr,u),g(Qy,Pr,null),e(Pr,D4r),e(Pr,nf),e(nf,G4r),e(nf,UQ),e(UQ,O4r),e(nf,V4r),e(nf,JQ),e(JQ,X4r),e(nf,z4r),e(Pr,Q4r),e(Pr,Wy),e(Wy,W4r),e(Wy,G2e),e(G2e,H4r),e(Wy,U4r),e(Pr,J4r),e(Pr,Lt),g(Hy,Lt,null),e(Lt,Y4r),e(Lt,O2e),e(O2e,K4r),e(Lt,Z4r),e(Lt,sf),e(sf,eEr),e(sf,V2e),e(V2e,oEr),e(sf,rEr),e(sf,YQ),e(YQ,tEr),e(sf,aEr),e(Lt,nEr),e(Lt,X2e),e(X2e,sEr),e(Lt,lEr),g(Uy,Lt,null),e(Pr,iEr),e(Pr,xo),g(Jy,xo,null),e(xo,dEr),e(xo,z2e),e(z2e,cEr),e(xo,fEr),e(xo,Sn),e(Sn,mEr),e(Sn,Q2e),e(Q2e,gEr),e(Sn,hEr),e(Sn,W2e),e(W2e,pEr),e(Sn,_Er),e(Sn,H2e),e(H2e,uEr),e(Sn,bEr),e(xo,FEr),e(xo,fe),e(fe,OM),e(OM,U2e),e(U2e,vEr),e(OM,TEr),e(OM,KQ),e(KQ,MEr),e(OM,EEr),e(fe,CEr),e(fe,VM),e(VM,J2e),e(J2e,wEr),e(VM,AEr),e(VM,ZQ),e(ZQ,yEr),e(VM,LEr),e(fe,xEr),e(fe,XM),e(XM,Y2e),e(Y2e,kEr),e(XM,SEr),e(XM,eW),e(eW,REr),e(XM,BEr),e(fe,PEr),e(fe,zM),e(zM,K2e),e(K2e,$Er),e(zM,IEr),e(zM,oW),e(oW,qEr),e(zM,NEr),e(fe,jEr),e(fe,QM),e(QM,Z2e),e(Z2e,DEr),e(QM,GEr),e(QM,rW),e(rW,OEr),e(QM,VEr),e(fe,XEr),e(fe,WM),e(WM,eFe),e(eFe,zEr),e(WM,QEr),e(WM,tW),e(tW,WEr),e(WM,HEr),e(fe,UEr),e(fe,HM),e(HM,oFe),e(oFe,JEr),e(HM,YEr),e(HM,aW),e(aW,KEr),e(HM,ZEr),e(fe,eCr),e(fe,UM),e(UM,rFe),e(rFe,oCr),e(UM,rCr),e(UM,nW),e(nW,tCr),e(UM,aCr),e(fe,nCr),e(fe,JM),e(JM,tFe),e(tFe,sCr),e(JM,lCr),e(JM,sW),e(sW,iCr),e(JM,dCr),e(fe,cCr),e(fe,YM),e(YM,aFe),e(aFe,fCr),e(YM,mCr),e(YM,lW),e(lW,gCr),e(YM,hCr),e(fe,pCr),e(fe,KM),e(KM,nFe),e(nFe,_Cr),e(KM,uCr),e(KM,iW),e(iW,bCr),e(KM,FCr),e(fe,vCr),e(fe,ZM),e(ZM,sFe),e(sFe,TCr),e(ZM,MCr),e(ZM,dW),e(dW,ECr),e(ZM,CCr),e(xo,wCr),e(xo,lFe),e(lFe,ACr),e(xo,yCr),g(Yy,xo,null),b(c,mBe,u),b(c,lf,u),e(lf,e4),e(e4,iFe),g(Ky,iFe,null),e(lf,LCr),e(lf,dFe),e(dFe,xCr),b(c,gBe,u),b(c,$r,u),g(Zy,$r,null),e($r,kCr),e($r,df),e(df,SCr),e(df,cW),e(cW,RCr),e(df,BCr),e(df,fW),e(fW,PCr),e(df,$Cr),e($r,ICr),e($r,eL),e(eL,qCr),e(eL,cFe),e(cFe,NCr),e(eL,jCr),e($r,DCr),e($r,xt),g(oL,xt,null),e(xt,GCr),e(xt,fFe),e(fFe,OCr),e(xt,VCr),e(xt,cf),e(cf,XCr),e(cf,mFe),e(mFe,zCr),e(cf,QCr),e(cf,mW),e(mW,WCr),e(cf,HCr),e(xt,UCr),e(xt,gFe),e(gFe,JCr),e(xt,YCr),g(rL,xt,null),e($r,KCr),e($r,ko),g(tL,ko,null),e(ko,ZCr),e(ko,hFe),e(hFe,e5r),e(ko,o5r),e(ko,Rn),e(Rn,r5r),e(Rn,pFe),e(pFe,t5r),e(Rn,a5r),e(Rn,_Fe),e(_Fe,n5r),e(Rn,s5r),e(Rn,uFe),e(uFe,l5r),e(Rn,i5r),e(ko,d5r),e(ko,be),e(be,o4),e(o4,bFe),e(bFe,c5r),e(o4,f5r),e(o4,gW),e(gW,m5r),e(o4,g5r),e(be,h5r),e(be,r4),e(r4,FFe),e(FFe,p5r),e(r4,_5r),e(r4,hW),e(hW,u5r),e(r4,b5r),e(be,F5r),e(be,t4),e(t4,vFe),e(vFe,v5r),e(t4,T5r),e(t4,pW),e(pW,M5r),e(t4,E5r),e(be,C5r),e(be,a4),e(a4,TFe),e(TFe,w5r),e(a4,A5r),e(a4,_W),e(_W,y5r),e(a4,L5r),e(be,x5r),e(be,n4),e(n4,MFe),e(MFe,k5r),e(n4,S5r),e(n4,uW),e(uW,R5r),e(n4,B5r),e(be,P5r),e(be,s4),e(s4,EFe),e(EFe,$5r),e(s4,I5r),e(s4,bW),e(bW,q5r),e(s4,N5r),e(be,j5r),e(be,l4),e(l4,CFe),e(CFe,D5r),e(l4,G5r),e(l4,FW),e(FW,O5r),e(l4,V5r),e(be,X5r),e(be,i4),e(i4,wFe),e(wFe,z5r),e(i4,Q5r),e(i4,vW),e(vW,W5r),e(i4,H5r),e(be,U5r),e(be,d4),e(d4,AFe),e(AFe,J5r),e(d4,Y5r),e(d4,TW),e(TW,K5r),e(d4,Z5r),e(be,ewr),e(be,c4),e(c4,yFe),e(yFe,owr),e(c4,rwr),e(c4,MW),e(MW,twr),e(c4,awr),e(ko,nwr),e(ko,LFe),e(LFe,swr),e(ko,lwr),g(aL,ko,null),b(c,hBe,u),b(c,ff,u),e(ff,f4),e(f4,xFe),g(nL,xFe,null),e(ff,iwr),e(ff,kFe),e(kFe,dwr),b(c,pBe,u),b(c,Ir,u),g(sL,Ir,null),e(Ir,cwr),e(Ir,mf),e(mf,fwr),e(mf,EW),e(EW,mwr),e(mf,gwr),e(mf,CW),e(CW,hwr),e(mf,pwr),e(Ir,_wr),e(Ir,lL),e(lL,uwr),e(lL,SFe),e(SFe,bwr),e(lL,Fwr),e(Ir,vwr),e(Ir,kt),g(iL,kt,null),e(kt,Twr),e(kt,RFe),e(RFe,Mwr),e(kt,Ewr),e(kt,gf),e(gf,Cwr),e(gf,BFe),e(BFe,wwr),e(gf,Awr),e(gf,wW),e(wW,ywr),e(gf,Lwr),e(kt,xwr),e(kt,PFe),e(PFe,kwr),e(kt,Swr),g(dL,kt,null),e(Ir,Rwr),e(Ir,So),g(cL,So,null),e(So,Bwr),e(So,$Fe),e($Fe,Pwr),e(So,$wr),e(So,Bn),e(Bn,Iwr),e(Bn,IFe),e(IFe,qwr),e(Bn,Nwr),e(Bn,qFe),e(qFe,jwr),e(Bn,Dwr),e(Bn,NFe),e(NFe,Gwr),e(Bn,Owr),e(So,Vwr),e(So,Ee),e(Ee,m4),e(m4,jFe),e(jFe,Xwr),e(m4,zwr),e(m4,AW),e(AW,Qwr),e(m4,Wwr),e(Ee,Hwr),e(Ee,g4),e(g4,DFe),e(DFe,Uwr),e(g4,Jwr),e(g4,yW),e(yW,Ywr),e(g4,Kwr),e(Ee,Zwr),e(Ee,h4),e(h4,GFe),e(GFe,eAr),e(h4,oAr),e(h4,LW),e(LW,rAr),e(h4,tAr),e(Ee,aAr),e(Ee,p4),e(p4,OFe),e(OFe,nAr),e(p4,sAr),e(p4,xW),e(xW,lAr),e(p4,iAr),e(Ee,dAr),e(Ee,_4),e(_4,VFe),e(VFe,cAr),e(_4,fAr),e(_4,kW),e(kW,mAr),e(_4,gAr),e(Ee,hAr),e(Ee,u4),e(u4,XFe),e(XFe,pAr),e(u4,_Ar),e(u4,SW),e(SW,uAr),e(u4,bAr),e(Ee,FAr),e(Ee,b4),e(b4,zFe),e(zFe,vAr),e(b4,TAr),e(b4,RW),e(RW,MAr),e(b4,EAr),e(Ee,CAr),e(Ee,F4),e(F4,QFe),e(QFe,wAr),e(F4,AAr),e(F4,BW),e(BW,yAr),e(F4,LAr),e(Ee,xAr),e(Ee,v4),e(v4,WFe),e(WFe,kAr),e(v4,SAr),e(v4,PW),e(PW,RAr),e(v4,BAr),e(So,PAr),e(So,HFe),e(HFe,$Ar),e(So,IAr),g(fL,So,null),b(c,_Be,u),b(c,hf,u),e(hf,T4),e(T4,UFe),g(mL,UFe,null),e(hf,qAr),e(hf,JFe),e(JFe,NAr),b(c,uBe,u),b(c,qr,u),g(gL,qr,null),e(qr,jAr),e(qr,pf),e(pf,DAr),e(pf,$W),e($W,GAr),e(pf,OAr),e(pf,IW),e(IW,VAr),e(pf,XAr),e(qr,zAr),e(qr,hL),e(hL,QAr),e(hL,YFe),e(YFe,WAr),e(hL,HAr),e(qr,UAr),e(qr,St),g(pL,St,null),e(St,JAr),e(St,KFe),e(KFe,YAr),e(St,KAr),e(St,_f),e(_f,ZAr),e(_f,ZFe),e(ZFe,e0r),e(_f,o0r),e(_f,qW),e(qW,r0r),e(_f,t0r),e(St,a0r),e(St,eve),e(eve,n0r),e(St,s0r),g(_L,St,null),e(qr,l0r),e(qr,Ro),g(uL,Ro,null),e(Ro,i0r),e(Ro,ove),e(ove,d0r),e(Ro,c0r),e(Ro,Pn),e(Pn,f0r),e(Pn,rve),e(rve,m0r),e(Pn,g0r),e(Pn,tve),e(tve,h0r),e(Pn,p0r),e(Pn,ave),e(ave,_0r),e(Pn,u0r),e(Ro,b0r),e(Ro,Fe),e(Fe,M4),e(M4,nve),e(nve,F0r),e(M4,v0r),e(M4,NW),e(NW,T0r),e(M4,M0r),e(Fe,E0r),e(Fe,E4),e(E4,sve),e(sve,C0r),e(E4,w0r),e(E4,jW),e(jW,A0r),e(E4,y0r),e(Fe,L0r),e(Fe,C4),e(C4,lve),e(lve,x0r),e(C4,k0r),e(C4,DW),e(DW,S0r),e(C4,R0r),e(Fe,B0r),e(Fe,w4),e(w4,ive),e(ive,P0r),e(w4,$0r),e(w4,GW),e(GW,I0r),e(w4,q0r),e(Fe,N0r),e(Fe,A4),e(A4,dve),e(dve,j0r),e(A4,D0r),e(A4,OW),e(OW,G0r),e(A4,O0r),e(Fe,V0r),e(Fe,y4),e(y4,cve),e(cve,X0r),e(y4,z0r),e(y4,VW),e(VW,Q0r),e(y4,W0r),e(Fe,H0r),e(Fe,L4),e(L4,fve),e(fve,U0r),e(L4,J0r),e(L4,XW),e(XW,Y0r),e(L4,K0r),e(Fe,Z0r),e(Fe,x4),e(x4,mve),e(mve,eyr),e(x4,oyr),e(x4,zW),e(zW,ryr),e(x4,tyr),e(Fe,ayr),e(Fe,k4),e(k4,gve),e(gve,nyr),e(k4,syr),e(k4,QW),e(QW,lyr),e(k4,iyr),e(Fe,dyr),e(Fe,S4),e(S4,hve),e(hve,cyr),e(S4,fyr),e(S4,WW),e(WW,myr),e(S4,gyr),e(Ro,hyr),e(Ro,pve),e(pve,pyr),e(Ro,_yr),g(bL,Ro,null),b(c,bBe,u),b(c,uf,u),e(uf,R4),e(R4,_ve),g(FL,_ve,null),e(uf,uyr),e(uf,uve),e(uve,byr),b(c,FBe,u),b(c,Nr,u),g(vL,Nr,null),e(Nr,Fyr),e(Nr,bf),e(bf,vyr),e(bf,HW),e(HW,Tyr),e(bf,Myr),e(bf,UW),e(UW,Eyr),e(bf,Cyr),e(Nr,wyr),e(Nr,TL),e(TL,Ayr),e(TL,bve),e(bve,yyr),e(TL,Lyr),e(Nr,xyr),e(Nr,Rt),g(ML,Rt,null),e(Rt,kyr),e(Rt,Fve),e(Fve,Syr),e(Rt,Ryr),e(Rt,Ff),e(Ff,Byr),e(Ff,vve),e(vve,Pyr),e(Ff,$yr),e(Ff,JW),e(JW,Iyr),e(Ff,qyr),e(Rt,Nyr),e(Rt,Tve),e(Tve,jyr),e(Rt,Dyr),g(EL,Rt,null),e(Nr,Gyr),e(Nr,Bo),g(CL,Bo,null),e(Bo,Oyr),e(Bo,Mve),e(Mve,Vyr),e(Bo,Xyr),e(Bo,$n),e($n,zyr),e($n,Eve),e(Eve,Qyr),e($n,Wyr),e($n,Cve),e(Cve,Hyr),e($n,Uyr),e($n,wve),e(wve,Jyr),e($n,Yyr),e(Bo,Kyr),e(Bo,ve),e(ve,B4),e(B4,Ave),e(Ave,Zyr),e(B4,eLr),e(B4,YW),e(YW,oLr),e(B4,rLr),e(ve,tLr),e(ve,P4),e(P4,yve),e(yve,aLr),e(P4,nLr),e(P4,KW),e(KW,sLr),e(P4,lLr),e(ve,iLr),e(ve,$4),e($4,Lve),e(Lve,dLr),e($4,cLr),e($4,ZW),e(ZW,fLr),e($4,mLr),e(ve,gLr),e(ve,I4),e(I4,xve),e(xve,hLr),e(I4,pLr),e(I4,eH),e(eH,_Lr),e(I4,uLr),e(ve,bLr),e(ve,q4),e(q4,kve),e(kve,FLr),e(q4,vLr),e(q4,oH),e(oH,TLr),e(q4,MLr),e(ve,ELr),e(ve,N4),e(N4,Sve),e(Sve,CLr),e(N4,wLr),e(N4,rH),e(rH,ALr),e(N4,yLr),e(ve,LLr),e(ve,j4),e(j4,Rve),e(Rve,xLr),e(j4,kLr),e(j4,tH),e(tH,SLr),e(j4,RLr),e(ve,BLr),e(ve,D4),e(D4,Bve),e(Bve,PLr),e(D4,$Lr),e(D4,aH),e(aH,ILr),e(D4,qLr),e(ve,NLr),e(ve,G4),e(G4,Pve),e(Pve,jLr),e(G4,DLr),e(G4,nH),e(nH,GLr),e(G4,OLr),e(ve,VLr),e(ve,O4),e(O4,$ve),e($ve,XLr),e(O4,zLr),e(O4,sH),e(sH,QLr),e(O4,WLr),e(Bo,HLr),e(Bo,Ive),e(Ive,ULr),e(Bo,JLr),g(wL,Bo,null),b(c,vBe,u),b(c,vf,u),e(vf,V4),e(V4,qve),g(AL,qve,null),e(vf,YLr),e(vf,Nve),e(Nve,KLr),b(c,TBe,u),b(c,jr,u),g(yL,jr,null),e(jr,ZLr),e(jr,Tf),e(Tf,e8r),e(Tf,lH),e(lH,o8r),e(Tf,r8r),e(Tf,iH),e(iH,t8r),e(Tf,a8r),e(jr,n8r),e(jr,LL),e(LL,s8r),e(LL,jve),e(jve,l8r),e(LL,i8r),e(jr,d8r),e(jr,Bt),g(xL,Bt,null),e(Bt,c8r),e(Bt,Dve),e(Dve,f8r),e(Bt,m8r),e(Bt,Mf),e(Mf,g8r),e(Mf,Gve),e(Gve,h8r),e(Mf,p8r),e(Mf,dH),e(dH,_8r),e(Mf,u8r),e(Bt,b8r),e(Bt,Ove),e(Ove,F8r),e(Bt,v8r),g(kL,Bt,null),e(jr,T8r),e(jr,Po),g(SL,Po,null),e(Po,M8r),e(Po,Vve),e(Vve,E8r),e(Po,C8r),e(Po,In),e(In,w8r),e(In,Xve),e(Xve,A8r),e(In,y8r),e(In,zve),e(zve,L8r),e(In,x8r),e(In,Qve),e(Qve,k8r),e(In,S8r),e(Po,R8r),e(Po,Be),e(Be,X4),e(X4,Wve),e(Wve,B8r),e(X4,P8r),e(X4,cH),e(cH,$8r),e(X4,I8r),e(Be,q8r),e(Be,z4),e(z4,Hve),e(Hve,N8r),e(z4,j8r),e(z4,fH),e(fH,D8r),e(z4,G8r),e(Be,O8r),e(Be,Q4),e(Q4,Uve),e(Uve,V8r),e(Q4,X8r),e(Q4,mH),e(mH,z8r),e(Q4,Q8r),e(Be,W8r),e(Be,W4),e(W4,Jve),e(Jve,H8r),e(W4,U8r),e(W4,gH),e(gH,J8r),e(W4,Y8r),e(Be,K8r),e(Be,H4),e(H4,Yve),e(Yve,Z8r),e(H4,e9r),e(H4,hH),e(hH,o9r),e(H4,r9r),e(Be,t9r),e(Be,U4),e(U4,Kve),e(Kve,a9r),e(U4,n9r),e(U4,pH),e(pH,s9r),e(U4,l9r),e(Be,i9r),e(Be,J4),e(J4,Zve),e(Zve,d9r),e(J4,c9r),e(J4,_H),e(_H,f9r),e(J4,m9r),e(Be,g9r),e(Be,Y4),e(Y4,e6e),e(e6e,h9r),e(Y4,p9r),e(Y4,uH),e(uH,_9r),e(Y4,u9r),e(Po,b9r),e(Po,o6e),e(o6e,F9r),e(Po,v9r),g(RL,Po,null),b(c,MBe,u),b(c,Ef,u),e(Ef,K4),e(K4,r6e),g(BL,r6e,null),e(Ef,T9r),e(Ef,t6e),e(t6e,M9r),b(c,EBe,u),b(c,Dr,u),g(PL,Dr,null),e(Dr,E9r),e(Dr,Cf),e(Cf,C9r),e(Cf,bH),e(bH,w9r),e(Cf,A9r),e(Cf,FH),e(FH,y9r),e(Cf,L9r),e(Dr,x9r),e(Dr,$L),e($L,k9r),e($L,a6e),e(a6e,S9r),e($L,R9r),e(Dr,B9r),e(Dr,Pt),g(IL,Pt,null),e(Pt,P9r),e(Pt,n6e),e(n6e,$9r),e(Pt,I9r),e(Pt,wf),e(wf,q9r),e(wf,s6e),e(s6e,N9r),e(wf,j9r),e(wf,vH),e(vH,D9r),e(wf,G9r),e(Pt,O9r),e(Pt,l6e),e(l6e,V9r),e(Pt,X9r),g(qL,Pt,null),e(Dr,z9r),e(Dr,$o),g(NL,$o,null),e($o,Q9r),e($o,i6e),e(i6e,W9r),e($o,H9r),e($o,qn),e(qn,U9r),e(qn,d6e),e(d6e,J9r),e(qn,Y9r),e(qn,c6e),e(c6e,K9r),e(qn,Z9r),e(qn,f6e),e(f6e,exr),e(qn,oxr),e($o,rxr),e($o,Pe),e(Pe,Z4),e(Z4,m6e),e(m6e,txr),e(Z4,axr),e(Z4,TH),e(TH,nxr),e(Z4,sxr),e(Pe,lxr),e(Pe,eE),e(eE,g6e),e(g6e,ixr),e(eE,dxr),e(eE,MH),e(MH,cxr),e(eE,fxr),e(Pe,mxr),e(Pe,oE),e(oE,h6e),e(h6e,gxr),e(oE,hxr),e(oE,EH),e(EH,pxr),e(oE,_xr),e(Pe,uxr),e(Pe,rE),e(rE,p6e),e(p6e,bxr),e(rE,Fxr),e(rE,CH),e(CH,vxr),e(rE,Txr),e(Pe,Mxr),e(Pe,tE),e(tE,_6e),e(_6e,Exr),e(tE,Cxr),e(tE,wH),e(wH,wxr),e(tE,Axr),e(Pe,yxr),e(Pe,aE),e(aE,u6e),e(u6e,Lxr),e(aE,xxr),e(aE,AH),e(AH,kxr),e(aE,Sxr),e(Pe,Rxr),e(Pe,nE),e(nE,b6e),e(b6e,Bxr),e(nE,Pxr),e(nE,yH),e(yH,$xr),e(nE,Ixr),e(Pe,qxr),e(Pe,sE),e(sE,F6e),e(F6e,Nxr),e(sE,jxr),e(sE,LH),e(LH,Dxr),e(sE,Gxr),e($o,Oxr),e($o,v6e),e(v6e,Vxr),e($o,Xxr),g(jL,$o,null),b(c,CBe,u),b(c,Af,u),e(Af,lE),e(lE,T6e),g(DL,T6e,null),e(Af,zxr),e(Af,M6e),e(M6e,Qxr),b(c,wBe,u),b(c,Gr,u),g(GL,Gr,null),e(Gr,Wxr),e(Gr,yf),e(yf,Hxr),e(yf,xH),e(xH,Uxr),e(yf,Jxr),e(yf,kH),e(kH,Yxr),e(yf,Kxr),e(Gr,Zxr),e(Gr,OL),e(OL,ekr),e(OL,E6e),e(E6e,okr),e(OL,rkr),e(Gr,tkr),e(Gr,$t),g(VL,$t,null),e($t,akr),e($t,C6e),e(C6e,nkr),e($t,skr),e($t,Lf),e(Lf,lkr),e(Lf,w6e),e(w6e,ikr),e(Lf,dkr),e(Lf,SH),e(SH,ckr),e(Lf,fkr),e($t,mkr),e($t,A6e),e(A6e,gkr),e($t,hkr),g(XL,$t,null),e(Gr,pkr),e(Gr,Io),g(zL,Io,null),e(Io,_kr),e(Io,y6e),e(y6e,ukr),e(Io,bkr),e(Io,Nn),e(Nn,Fkr),e(Nn,L6e),e(L6e,vkr),e(Nn,Tkr),e(Nn,x6e),e(x6e,Mkr),e(Nn,Ekr),e(Nn,k6e),e(k6e,Ckr),e(Nn,wkr),e(Io,Akr),e(Io,S6e),e(S6e,iE),e(iE,R6e),e(R6e,ykr),e(iE,Lkr),e(iE,RH),e(RH,xkr),e(iE,kkr),e(Io,Skr),e(Io,B6e),e(B6e,Rkr),e(Io,Bkr),g(QL,Io,null),b(c,ABe,u),b(c,xf,u),e(xf,dE),e(dE,P6e),g(WL,P6e,null),e(xf,Pkr),e(xf,$6e),e($6e,$kr),b(c,yBe,u),b(c,Or,u),g(HL,Or,null),e(Or,Ikr),e(Or,kf),e(kf,qkr),e(kf,BH),e(BH,Nkr),e(kf,jkr),e(kf,PH),e(PH,Dkr),e(kf,Gkr),e(Or,Okr),e(Or,UL),e(UL,Vkr),e(UL,I6e),e(I6e,Xkr),e(UL,zkr),e(Or,Qkr),e(Or,It),g(JL,It,null),e(It,Wkr),e(It,q6e),e(q6e,Hkr),e(It,Ukr),e(It,Sf),e(Sf,Jkr),e(Sf,N6e),e(N6e,Ykr),e(Sf,Kkr),e(Sf,$H),e($H,Zkr),e(Sf,eSr),e(It,oSr),e(It,j6e),e(j6e,rSr),e(It,tSr),g(YL,It,null),e(Or,aSr),e(Or,qo),g(KL,qo,null),e(qo,nSr),e(qo,D6e),e(D6e,sSr),e(qo,lSr),e(qo,jn),e(jn,iSr),e(jn,G6e),e(G6e,dSr),e(jn,cSr),e(jn,O6e),e(O6e,fSr),e(jn,mSr),e(jn,V6e),e(V6e,gSr),e(jn,hSr),e(qo,pSr),e(qo,ZL),e(ZL,cE),e(cE,X6e),e(X6e,_Sr),e(cE,uSr),e(cE,IH),e(IH,bSr),e(cE,FSr),e(ZL,vSr),e(ZL,fE),e(fE,z6e),e(z6e,TSr),e(fE,MSr),e(fE,qH),e(qH,ESr),e(fE,CSr),e(qo,wSr),e(qo,Q6e),e(Q6e,ASr),e(qo,ySr),g(e8,qo,null),b(c,LBe,u),b(c,Rf,u),e(Rf,mE),e(mE,W6e),g(o8,W6e,null),e(Rf,LSr),e(Rf,H6e),e(H6e,xSr),b(c,xBe,u),b(c,Vr,u),g(r8,Vr,null),e(Vr,kSr),e(Vr,Bf),e(Bf,SSr),e(Bf,NH),e(NH,RSr),e(Bf,BSr),e(Bf,jH),e(jH,PSr),e(Bf,$Sr),e(Vr,ISr),e(Vr,t8),e(t8,qSr),e(t8,U6e),e(U6e,NSr),e(t8,jSr),e(Vr,DSr),e(Vr,qt),g(a8,qt,null),e(qt,GSr),e(qt,J6e),e(J6e,OSr),e(qt,VSr),e(qt,Pf),e(Pf,XSr),e(Pf,Y6e),e(Y6e,zSr),e(Pf,QSr),e(Pf,DH),e(DH,WSr),e(Pf,HSr),e(qt,USr),e(qt,K6e),e(K6e,JSr),e(qt,YSr),g(n8,qt,null),e(Vr,KSr),e(Vr,No),g(s8,No,null),e(No,ZSr),e(No,Z6e),e(Z6e,eRr),e(No,oRr),e(No,Dn),e(Dn,rRr),e(Dn,eTe),e(eTe,tRr),e(Dn,aRr),e(Dn,oTe),e(oTe,nRr),e(Dn,sRr),e(Dn,rTe),e(rTe,lRr),e(Dn,iRr),e(No,dRr),e(No,tTe),e(tTe,gE),e(gE,aTe),e(aTe,cRr),e(gE,fRr),e(gE,GH),e(GH,mRr),e(gE,gRr),e(No,hRr),e(No,nTe),e(nTe,pRr),e(No,_Rr),g(l8,No,null),kBe=!0},p(c,[u]){const i8={};u&2&&(i8.$$scope={dirty:u,ctx:c}),Of.$set(i8);const sTe={};u&2&&(sTe.$$scope={dirty:u,ctx:c}),Rh.$set(sTe);const lTe={};u&2&&(lTe.$$scope={dirty:u,ctx:c}),Vh.$set(lTe)},i(c){kBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(Of.$$.fragment,c),h(FC.$$.fragment,c),h(vC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h(qC.$$.fragment,c),h(Rh.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(XC.$$.fragment,c),h(Vh.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(M5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),kBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(Of.$$.fragment,c),p(FC.$$.fragment,c),p(vC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p(qC.$$.fragment,c),p(Rh.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(XC.$$.fragment,c),p(Vh.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(F5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(M5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),kBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(xSe),c&&t(Vi),_(uC),c&&t(kSe),c&&t(zn),c&&t(SSe),_(bC,c),c&&t(RSe),c&&t(c9),c&&t(BSe),_(Of,c),c&&t(PSe),c&&t(Xi),_(FC),c&&t($Se),c&&t(Qo),_(vC),_(EC),_(CC),_(wC),c&&t(ISe),c&&t(Qi),_(AC),c&&t(qSe),c&&t(Wo),_(yC),_(kC),_(SC),_(RC),c&&t(NSe),c&&t(Wi),_(BC),c&&t(jSe),c&&t(Ho),_(PC),_(qC),_(Rh),_(NC),_(jC),c&&t(DSe),c&&t(Hi),_(DC),c&&t(GSe),c&&t(Uo),_(GC),_(XC),_(Vh),_(zC),_(QC),c&&t(OSe),c&&t(Ji),_(WC),c&&t(VSe),c&&t(Jo),_(HC),_(JC),_(YC),_(KC),_(ZC),c&&t(XSe),c&&t(Zi),_(e5),c&&t(zSe),c&&t(Yo),_(o5),_(t5),_(a5),_(n5),_(s5),c&&t(QSe),c&&t(rd),_(l5),c&&t(WSe),c&&t(Ko),_(i5),_(c5),_(f5),_(m5),_(g5),c&&t(HSe),c&&t(nd),_(h5),c&&t(USe),c&&t(Zo),_(p5),_(u5),_(b5),_(F5),_(v5),c&&t(JSe),c&&t(id),_(T5),c&&t(YSe),c&&t(er),_(M5),_(C5),_(w5),_(A5),_(y5),c&&t(KSe),c&&t(fd),_(L5),c&&t(ZSe),c&&t(or),_(x5),_(S5),_(R5),_(B5),_(P5),c&&t(eRe),c&&t(hd),_($5),c&&t(oRe),c&&t(rr),_(I5),_(N5),_(j5),_(D5),_(G5),c&&t(rRe),c&&t(ud),_(O5),c&&t(tRe),c&&t(tr),_(V5),_(z5),_(Q5),_(W5),_(H5),c&&t(aRe),c&&t(vd),_(U5),c&&t(nRe),c&&t(ar),_(J5),_(K5),_(Z5),_(ew),_(ow),c&&t(sRe),c&&t(Ed),_(rw),c&&t(lRe),c&&t(nr),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(iRe),c&&t(Ad),_(dw),c&&t(dRe),c&&t(sr),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(cRe),c&&t(xd),_(_w),c&&t(fRe),c&&t(lr),_(uw),_(Fw),_(vw),_(Tw),_(Mw),c&&t(mRe),c&&t(Rd),_(Ew),c&&t(gRe),c&&t(ir),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(hRe),c&&t($d),_(kw),c&&t(pRe),c&&t(dr),_(Sw),_(Bw),_(Pw),_($w),_(Iw),c&&t(_Re),c&&t(Nd),_(qw),c&&t(uRe),c&&t(cr),_(Nw),_(Dw),_(Gw),_(Ow),_(Vw),c&&t(bRe),c&&t(Gd),_(Xw),c&&t(FRe),c&&t(fr),_(zw),_(Ww),_(Hw),_(Uw),_(Jw),c&&t(vRe),c&&t(Xd),_(Yw),c&&t(TRe),c&&t(mr),_(Kw),_(eA),_(oA),_(rA),_(aA),c&&t(MRe),c&&t(Wd),_(nA),c&&t(ERe),c&&t(gr),_(sA),_(iA),_(dA),_(cA),_(fA),c&&t(CRe),c&&t(Jd),_(mA),c&&t(wRe),c&&t(hr),_(gA),_(pA),_(_A),_(uA),_(bA),c&&t(ARe),c&&t(ec),_(FA),c&&t(yRe),c&&t(pr),_(vA),_(MA),_(EA),_(CA),_(wA),c&&t(LRe),c&&t(tc),_(AA),c&&t(xRe),c&&t(_r),_(yA),_(xA),_(kA),_(SA),_(RA),c&&t(kRe),c&&t(sc),_(BA),c&&t(SRe),c&&t(ur),_(PA),_(IA),_(qA),_(NA),_(jA),c&&t(RRe),c&&t(cc),_(DA),c&&t(BRe),c&&t(br),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(PRe),c&&t(gc),_(WA),c&&t($Re),c&&t(Fr),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(IRe),c&&t(_c),_(e0),c&&t(qRe),c&&t(vr),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(NRe),c&&t(Fc),_(l0),c&&t(jRe),c&&t(Tr),_(i0),_(c0),_(f0),_(m0),_(g0),c&&t(DRe),c&&t(Mc),_(h0),c&&t(GRe),c&&t(Mr),_(p0),_(u0),_(b0),_(F0),_(T0),c&&t(ORe),c&&t(wc),_(M0),c&&t(VRe),c&&t(Er),_(E0),_(w0),_(A0),_(y0),_(L0),c&&t(XRe),c&&t(Lc),_(x0),c&&t(zRe),c&&t(Cr),_(k0),_(R0),_(B0),_(P0),_($0),c&&t(QRe),c&&t(Sc),_(I0),c&&t(WRe),c&&t(wr),_(q0),_(j0),_(D0),_(G0),_(O0),c&&t(HRe),c&&t(Pc),_(V0),c&&t(URe),c&&t(Ar),_(X0),_(Q0),_(W0),_(H0),_(U0),c&&t(JRe),c&&t(qc),_(J0),c&&t(YRe),c&&t(yr),_(Y0),_(Z0),_(ey),_(oy),_(ry),c&&t(KRe),c&&t(Dc),_(ty),c&&t(ZRe),c&&t(Lr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(eBe),c&&t(Vc),_(cy),c&&t(oBe),c&&t(xr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(rBe),c&&t(Qc),_(uy),c&&t(tBe),c&&t(kr),_(by),_(vy),_(Ty),_(My),_(Ey),c&&t(aBe),c&&t(Uc),_(Cy),c&&t(nBe),c&&t(Sr),_(wy),_(yy),_(Ly),_(xy),_(ky),c&&t(sBe),c&&t(Kc),_(Sy),c&&t(lBe),c&&t(Rr),_(Ry),_(Py),_($y),_(Iy),_(qy),c&&t(iBe),c&&t(of),_(Ny),c&&t(dBe),c&&t(Br),_(jy),_(Gy),_(Oy),_(Vy),_(Xy),c&&t(cBe),c&&t(af),_(zy),c&&t(fBe),c&&t(Pr),_(Qy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(mBe),c&&t(lf),_(Ky),c&&t(gBe),c&&t($r),_(Zy),_(oL),_(rL),_(tL),_(aL),c&&t(hBe),c&&t(ff),_(nL),c&&t(pBe),c&&t(Ir),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(_Be),c&&t(hf),_(mL),c&&t(uBe),c&&t(qr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(bBe),c&&t(uf),_(FL),c&&t(FBe),c&&t(Nr),_(vL),_(ML),_(EL),_(CL),_(wL),c&&t(vBe),c&&t(vf),_(AL),c&&t(TBe),c&&t(jr),_(yL),_(xL),_(kL),_(SL),_(RL),c&&t(MBe),c&&t(Ef),_(BL),c&&t(EBe),c&&t(Dr),_(PL),_(IL),_(qL),_(NL),_(jL),c&&t(CBe),c&&t(Af),_(DL),c&&t(wBe),c&&t(Gr),_(GL),_(VL),_(XL),_(zL),_(QL),c&&t(ABe),c&&t(xf),_(WL),c&&t(yBe),c&&t(Or),_(HL),_(JL),_(YL),_(KL),_(e8),c&&t(LBe),c&&t(Rf),_(o8),c&&t(xBe),c&&t(Vr),_(r8),_(a8),_(n8),_(s8),_(l8)}}}const q4t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function N4t(If){return R4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class X4t extends L4t{constructor(Z){super();x4t(this,Z,N4t,I4t,k4t,{})}}export{X4t as default,q4t as metadata};
