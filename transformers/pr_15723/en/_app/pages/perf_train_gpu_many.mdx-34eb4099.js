import{S as U6,i as I6,s as S6,e as a,k as h,w as m,t as o,M as O6,c as s,d as t,m as f,a as i,x as v,h as r,b as c,N as ee,F as l,g as p,y as P,L as A6,q as w,o as _,B as y,v as j6}from"../chunks/vendor-6b77c823.js";import{I as U}from"../chunks/IconCopyLink-7a11ce68.js";import{C as Up}from"../chunks/CodeBlock-3a8b25a8.js";function x6(Hb){let te,Ip,le,Ge,ro,mt,Jd,no,Qd,Sp,na,eu,Op,pa,tu,Ap,ae,Ue,po,vt,lu,ho,au,jp,ha,su,xp,E,fa,fo,iu,ou,ru,ca,co,nu,pu,hu,da,uo,fu,cu,du,ua,mo,uu,mu,vu,ma,vo,Pu,wu,Mp,va,_u,$p,se,Ie,Po,Pt,yu,wo,bu,Np,Pa,_o,gu,zp,M,wt,yo,Eu,Du,_t,bo,Lu,Tu,go,ku,Gu,yt,Eo,Uu,Iu,ie,Do,Lo,Su,Ou,To,ko,Au,ju,oe,Go,xu,Mu,Uo,$u,Nu,Io,zu,Cu,bt,So,Ru,Zu,gt,Oo,Bu,Vu,Ao,qu,Cp,wa,jo,Fu,Rp,Se,Et,xo,Wu,Hu,Dt,Mo,Yu,Xu,$o,Ku,Ju,Lt,No,Qu,em,zo,Co,tm,Zp,re,Oe,Ro,Tt,lm,Zo,am,Bp,$,sm,Bo,im,om,Vo,rm,nm,Vp,ne,Ae,qo,kt,pm,Fo,hm,qp,pe,Wo,fm,cm,Ho,dm,um,Fp,je,Yo,mm,vm,Xo,Pm,Wp,_a,wm,Hp,Gt,Ut,_m,ym,Yp,xe,Ko,bm,gm,ya,Em,It,Jo,Dm,Lm,St,Tm,Qo,km,Gm,Xp,Ot,At,Um,Im,Kp,ba,Sm,Jp,D,er,Om,Am,tr,jm,xm,jt,Mm,lr,$m,Nm,zm,ga,Cm,ar,Rm,Zm,sr,Bm,Qp,Ea,Vm,eh,Me,qm,xt,Fm,Wm,th,Da,Hm,lh,La,Ym,ah,Ta,Xm,sh,$e,Km,Mt,Jm,Qm,ih,ka,ev,oh,Ne,ir,he,Ga,tv,lv,or,av,sv,Ua,iv,ov,fe,ce,Ia,rv,nv,rr,pv,hv,Sa,fv,cv,de,Oa,dv,uv,nr,mv,vv,Aa,Pv,wv,ue,ja,_v,yv,pr,bv,gv,xa,Ev,rh,Ma,Dv,nh,$a,Lv,ph,Na,Tv,hh,za,kv,fh,$t,hr,Gv,Uv,ch,Nt,dh,g,Iv,fr,Sv,Ov,cr,Av,jv,dr,xv,Mv,ur,$v,Nv,mr,zv,uh,me,ze,vr,zt,Cv,Pr,Rv,mh,ve,Zv,Ct,Bv,Vv,Ca,Yb,vh,Ce,qv,wr,Fv,Wv,Ph,Ra,Hv,wh,Rt,_h,Za,Yv,yh,Ba,Xv,bh,Zt,gh,Va,Kv,Eh,qa,Jv,Dh,Bt,Lh,Fa,Qv,Th,Wa,eP,kh,Ha,tP,Gh,Ya,lP,Uh,Xa,aP,Ih,Ka,sP,Sh,Ja,iP,Oh,Qa,oP,Ah,es,rP,jh,N,_r,nP,pP,yr,hP,fP,br,cP,xh,ts,dP,Mh,ls,uP,$h,as,mP,Nh,ss,vP,zh,is,PP,Ch,z,os,Vt,wP,_P,yP,rs,qt,bP,gP,EP,gr,Ft,Er,DP,LP,Rh,Pe,Re,Dr,Wt,TP,Lr,kP,Zh,Ze,GP,Tr,UP,IP,Bh,ns,SP,Vh,Ht,qh,ps,OP,Fh,hs,AP,Wh,fs,jP,Hh,cs,xP,Yh,Be,kr,MP,$P,Gr,NP,Xh,ds,zP,Kh,Ve,CP,Yt,RP,ZP,Jh,us,ms,Xb,Qh,vs,BP,ef,Ps,VP,tf,C,qP,Ur,FP,WP,Ir,HP,YP,lf,qe,XP,Sr,KP,JP,af,Fe,QP,Or,e1,t1,sf,R,l1,Ar,a1,s1,jr,i1,o1,of,ws,r1,rf,Z,n1,xr,p1,h1,Mr,f1,c1,nf,I,d1,$r,u1,m1,Nr,v1,P1,zr,w1,_1,pf,_s,y1,hf,ys,b1,ff,S,Cr,g1,E1,Rr,D1,L1,Zr,T1,k1,Br,G1,cf,bs,U1,df,We,Vr,I1,S1,qr,O1,uf,gs,A1,mf,O,Xt,j1,Fr,x1,M1,$1,Es,N1,Kt,z1,C1,Wr,R1,Z1,Hr,B1,vf,Ds,V1,Pf,Ls,q1,wf,u,Jt,Qt,F1,W1,el,H1,Y1,Yr,tl,X1,K1,Xr,ll,J1,Q1,Ts,al,ew,tw,lw,Kr,sl,aw,sw,ks,il,iw,ow,rw,Gs,ol,nw,pw,_f,He,hw,Jr,fw,cw,yf,Us,dw,bf,we,uw,rl,mw,vw,Is,Kb,gf,Ss,Pw,Ef,Os,ww,Df,Ye,_w,Qr,yw,bw,Lf,_e,Xe,en,nl,gw,tn,Ew,Tf,As,Dw,kf,B,Lw,pl,Tw,kw,hl,Gw,Uw,Gf,V,Iw,ln,Sw,Ow,an,Aw,jw,Uf,L,xw,sn,Mw,$w,on,Nw,zw,rn,Cw,Rw,nn,Zw,Bw,If,fl,Vw,js,Jb,Sf,d,qw,pn,Fw,Ww,hn,Hw,Yw,fn,Xw,Kw,cn,Jw,Qw,dn,e2,t2,un,l2,a2,mn,s2,i2,xs,Qb,Of,cl,o2,Ms,eg,Af,dl,r2,$s,tg,jf,Ns,n2,xf,q,p2,ul,h2,f2,ml,c2,d2,Mf,zs,u2,$f,Cs,m2,Nf,Rs,Zs,v2,vl,P2,zf,Bs,w2,Cf,A,Vs,Pl,_2,y2,b2,qs,wl,g2,E2,D2,Fs,_l,L2,T2,k2,Ws,yl,G2,U2,Rf,Hs,I2,Zf,F,vn,S2,O2,bl,A2,gl,j2,x2,M2,Ys,$2,El,N2,Bf,ye,Ke,Pn,Dl,z2,wn,C2,Vf,Je,R2,Ll,Z2,B2,qf,Xs,Ks,lg,Ff,Js,V2,Wf,Qs,q2,Hf,ei,F2,Yf,T,_n,Tl,W2,H2,yn,kl,Y2,X2,bn,Gl,K2,J2,gn,Ul,Q2,e_,En,Il,t_,Xf,ti,l_,Kf,be,Qe,Dn,Sl,a_,Ln,s_,Jf,li,i_,Qf,ai,si,ag,ec,et,o_,Ol,r_,n_,tc,ii,p_,lc,oi,h_,ac,k,ri,Al,f_,c_,d_,Tn,jl,u_,m_,kn,xl,v_,P_,Gn,Ml,w_,__,Un,$l,y_,sc,ni,b_,ic,ge,tt,In,Nl,g_,Sn,E_,oc,lt,D_,pi,L_,T_,rc,hi,k_,nc,fi,G_,pc,at,U_,On,I_,S_,hc,ci,O_,fc,di,A_,cc,ui,j_,dc,st,it,zl,x_,M_,Cl,$_,N_,z_,An,Rl,C_,uc,mi,R_,mc,vi,jn,Zl,Z_,vc,Pi,B_,Pc,Ee,ot,xn,Bl,V_,Mn,q_,wc,Vl,ql,F_,W_,_c,Fl,H_,Wl,Y_,yc,wi,X_,bc,j,$n,K_,J_,Nn,Q_,ey,zn,ty,ly,Cn,ay,gc,_i,sy,Ec,yi,Rn,iy,Dc,bi,oy,Lc,gi,Zn,ry,Tc,Ei,ny,kc,Di,Bn,py,Gc,Li,hy,Uc,Ti,Vn,fy,Ic,ki,cy,Sc,Gi,Ui,sg,Oc,Ii,dy,Ac,Si,uy,jc,Oi,my,xc,rt,vy,Hl,Py,wy,Mc,De,nt,qn,Yl,_y,Fn,yy,$c,Ai,by,Nc,ji,Wn,gy,zc,W,Xl,Hn,Ey,Dy,Yn,Xn,Ly,Ty,Kl,Kn,ky,Gy,Jl,Jn,Uy,Iy,Qn,Sy,Oy,ep,tp,Ay,Cc,xi,Le,jy,Ql,xy,My,lp,$y,Ny,Rc,Mi,ap,zy,Zc,H,ea,sp,Cy,Ry,ta,ip,Zy,By,op,Vy,qy,la,rp,Fy,Wy,Te,np,pp,Hy,Yy,hp,fp,Xy,Ky,ke,cp,Jy,Qy,dp,eb,tb,up,lb,ab,aa,mp,sb,ib,sa,vp,ob,rb,Pp,nb,Bc,$i,wp,pb,Vc,pt,ia,_p,hb,fb,oa,yp,cb,db,bp,ub,mb,ra,gp,vb,Pb,Ep,Dp,wb,qc;return mt=new U({}),vt=new U({}),Pt=new U({}),Tt=new U({}),kt=new U({}),Nt=new Up({props:{code:`
# DP
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 110.5948, 'train_samples_per_second': 1.808, 'epoch': 0.69}

# DDP w/ NVlink
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 101.9003, 'train_samples_per_second': 1.963, 'epoch': 0.69}

# DDP w/o NVlink
rm -r /tmp/test-clm; NCCL_P2P_DISABLE=1 CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 131.4367, 'train_samples_per_second': 1.522, 'epoch': 0.69}`,highlighted:`
<span class="hljs-comment"># DP</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">110</span>.<span class="hljs-string">5948</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">808</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/ NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),zt=new U({}),Rt=new Up({props:{code:`La | Lb | Lc
---|----|---
a0 | b0 | c0
a1 | b1 | c1
a2 | b2 | c2`,highlighted:`La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),Zt=new Up({props:{code:`GPU0:
La | Lb | Lc
---|----|---
a0 | b0 | c0

GPU1:
La | Lb | Lc
---|----|---
a1 | b1 | c1

GPU2:
La | Lb | Lc
---|----|---
a2 | b2 | c2`,highlighted:`GPU0:
La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0

GPU1:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1

GPU2:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),Bt=new Up({props:{code:`x0 => GPU0
x1 => GPU1
x2 => GPU2`,highlighted:`<span class="hljs-attribute">x0</span> <span class="hljs-operator">=</span>&gt; GPU0
<span class="hljs-attribute">x1</span> <span class="hljs-operator">=</span>&gt; GPU1
<span class="hljs-attribute">x2</span> <span class="hljs-operator">=</span>&gt; GPU2`}}),Wt=new U({}),Ht=new Up({props:{code:`===================  ===================
|  0 | 1 | 2 | 3  |  |  4 | 5 | 6 | 7  |
===================  ===================
        gpu0                 gpu1`,highlighted:`===================  ===================
|<span class="hljs-string">  0 </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string"> 3  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> 7  </span>|
===================  ===================
        gpu0                 gpu1`}}),nl=new U({}),Dl=new U({}),Sl=new U({}),Nl=new U({}),Bl=new U({}),Yl=new U({}),{c(){te=a("meta"),Ip=h(),le=a("h1"),Ge=a("a"),ro=a("span"),m(mt.$$.fragment),Jd=h(),no=a("span"),Qd=o("Efficient Training on Multiple GPUs"),Sp=h(),na=a("p"),eu=o("When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),Op=h(),pa=a("p"),tu=o("We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),Ap=h(),ae=a("h2"),Ue=a("a"),po=a("span"),m(vt.$$.fragment),lu=h(),ho=a("span"),au=o("Concepts"),jp=h(),ha=a("p"),su=o("The following is the brief description of the main concepts that will be described later in depth in this document."),xp=h(),E=a("ol"),fa=a("li"),fo=a("strong"),iu=o("DataParallel (DP)"),ou=o(" - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),ru=h(),ca=a("li"),co=a("strong"),nu=o("TensorParallel (TP)"),pu=o(" - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),hu=h(),da=a("li"),uo=a("strong"),fu=o("PipelineParallel (PP)"),cu=o(" - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),du=h(),ua=a("li"),mo=a("strong"),uu=o("Zero Redundancy Optimizer (ZeRO)"),mu=o(" - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),vu=h(),ma=a("li"),vo=a("strong"),Pu=o("Sharded DDP"),wu=o(" - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),Mp=h(),va=a("p"),_u=o("Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),$p=h(),se=a("h2"),Ie=a("a"),Po=a("span"),m(Pt.$$.fragment),yu=h(),wo=a("span"),bu=o("Scalability Strategy"),Np=h(),Pa=a("p"),_o=a("strong"),gu=o("\u21E8 Single Node / Multi-GPU"),zp=h(),M=a("ul"),wt=a("li"),yo=a("p"),Eu=o("Model fits onto a single GPU:"),Du=h(),_t=a("ol"),bo=a("li"),Lu=o("DDP - Distributed DP"),Tu=h(),go=a("li"),ku=o("ZeRO - may or may not be faster depending on the situation and configuration used"),Gu=h(),yt=a("li"),Eo=a("p"),Uu=o("Model doesn\u2019t fit onto a single GPU:"),Iu=h(),ie=a("ol"),Do=a("li"),Lo=a("p"),Su=o("PP"),Ou=h(),To=a("li"),ko=a("p"),Au=o("ZeRO"),ju=h(),oe=a("li"),Go=a("p"),xu=o("TP"),Mu=h(),Uo=a("p"),$u=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),Nu=h(),Io=a("p"),zu=o("TP is almost always used within a single node. That is TP size <= gpus per node."),Cu=h(),bt=a("li"),So=a("p"),Ru=o("Largest Layer not fitting into a single GPU:"),Zu=h(),gt=a("ol"),Oo=a("li"),Bu=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),Vu=h(),Ao=a("li"),qu=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Cp=h(),wa=a("p"),jo=a("strong"),Fu=o("\u21E8 Multi-Node / Multi-GPU"),Rp=h(),Se=a("ul"),Et=a("li"),xo=a("p"),Wu=o("When you have fast inter-node connectivity:"),Hu=h(),Dt=a("ol"),Mo=a("li"),Yu=o("ZeRO - as it requires close to no modifications to the model"),Xu=h(),$o=a("li"),Ku=o("PP+TP+DP - less communications, but requires massive changes to the model"),Ju=h(),Lt=a("li"),No=a("p"),Qu=o("when you have slow inter-node connectivity and still low on GPU memory:"),em=h(),zo=a("ol"),Co=a("li"),tm=o("DP+PP+TP+ZeRO-1"),Zp=h(),re=a("h2"),Oe=a("a"),Ro=a("span"),m(Tt.$$.fragment),lm=h(),Zo=a("span"),am=o("Data Parallelism"),Bp=h(),$=a("p"),sm=o("Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Bo=a("code"),im=o("DataParallel"),om=o(" (DP) and "),Vo=a("code"),rm=o("DistributedDataParallel"),nm=o(" (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is adviced to use DDP as it is better maintained and works for all models while DP might fail for some models."),Vp=h(),ne=a("h3"),Ae=a("a"),qo=a("span"),m(kt.$$.fragment),pm=h(),Fo=a("span"),hm=o("DP vs DDP"),qp=h(),pe=a("p"),Wo=a("code"),fm=o("DistributedDataParallel"),cm=o(" (DDP) is typically faster than "),Ho=a("code"),dm=o("DataParallel"),um=o(" (DP), but it is not always the case:"),Fp=h(),je=a("ul"),Yo=a("li"),mm=o("while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),vm=h(),Xo=a("li"),Pm=o("on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),Wp=h(),_a=a("p"),wm=o("Here are the main differences in the inter-GPU communication overhead between the two modes:"),Hp=h(),Gt=a("p"),Ut=a("a"),_m=o("DDP"),ym=o(":"),Yp=h(),xe=a("ul"),Ko=a("li"),bm=o("At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),gm=h(),ya=a("li"),Em=o("Then for each batch:"),It=a("ol"),Jo=a("li"),Dm=o("each gpu consumes each own mini-batch of data directly"),Lm=h(),St=a("li"),Tm=o("during "),Qo=a("code"),km=o("backward"),Gm=o(", once the local gradients are ready, they are then averaged across all processes"),Xp=h(),Ot=a("p"),At=a("a"),Um=o("DP"),Im=o(":"),Kp=h(),ba=a("p"),Sm=o("For each batch:"),Jp=h(),D=a("ol"),er=a("li"),Om=o("gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),Am=h(),tr=a("li"),jm=o("replicates the up-to-date model from gpu 0 to each gpu"),xm=h(),jt=a("li"),Mm=o("runs "),lr=a("code"),$m=o("forward"),Nm=o(" and sends output from each gpu to gpu 0, computes loss"),zm=h(),ga=a("li"),Cm=o("scatters loss from gpu 0 to all gpus, runs "),ar=a("code"),Rm=o("backward"),Zm=h(),sr=a("li"),Bm=o("sends gradients from each gpu to gpu 0 and averages those"),Qp=h(),Ea=a("p"),Vm=o("The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),eh=h(),Me=a("p"),qm=o("DP copies data within the process via python threads, whereas DDP copies data via "),xt=a("a"),Fm=o("torch.distributed"),Wm=o("."),th=h(),Da=a("p"),Hm=o("Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),lh=h(),La=a("p"),Ym=o("You can use DDP across multiple machines, but this is not the case with DP."),ah=h(),Ta=a("p"),Xm=o("There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),sh=h(),$e=a("p"),Km=o("If you want to go really deep into understanding these 2 modes, this "),Mt=a("a"),Jm=o("article"),Qm=o(" is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),ih=h(),ka=a("p"),ev=o("Let\u2019s look at an actual benchmark:"),oh=h(),Ne=a("table"),ir=a("thead"),he=a("tr"),Ga=a("th"),tv=o("Type"),lv=h(),or=a("th"),av=o("NVlink"),sv=h(),Ua=a("th"),iv=o("Time"),ov=h(),fe=a("tbody"),ce=a("tr"),Ia=a("td"),rv=o("2:DP"),nv=h(),rr=a("td"),pv=o("Y"),hv=h(),Sa=a("td"),fv=o("110s"),cv=h(),de=a("tr"),Oa=a("td"),dv=o("2:DDP"),uv=h(),nr=a("td"),mv=o("Y"),vv=h(),Aa=a("td"),Pv=o("101s"),wv=h(),ue=a("tr"),ja=a("td"),_v=o("2:DDP"),yv=h(),pr=a("td"),bv=o("N"),gv=h(),xa=a("td"),Ev=o("131s"),rh=h(),Ma=a("p"),Dv=o("Analysis:"),nh=h(),$a=a("p"),Lv=o("Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),ph=h(),Na=a("p"),Tv=o("The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),hh=h(),za=a("p"),kv=o("Here is the full benchmark code and outputs:"),fh=h(),$t=a("p"),hr=a("code"),Gv=o("NCCL_P2P_DISABLE=1"),Uv=o(" was used to disable the NVLink feature on the corresponding benchmark."),ch=h(),m(Nt.$$.fragment),dh=h(),g=a("p"),Iv=o("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),fr=a("code"),Sv=o("NV2"),Ov=o(" in "),cr=a("code"),Av=o("nvidia-smi topo -m"),jv=o(`)
Software: `),dr=a("code"),xv=o("pytorch-1.8-to-be"),Mv=o(" + "),ur=a("code"),$v=o("cuda-11.0"),Nv=o(" / "),mr=a("code"),zv=o("transformers==4.3.0.dev0"),uh=h(),me=a("h2"),ze=a("a"),vr=a("span"),m(zt.$$.fragment),Cv=h(),Pr=a("span"),Rv=o("ZeRO Data Parallelism"),mh=h(),ve=a("p"),Zv=o("ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Ct=a("a"),Bv=o("blog post"),Vv=h(),Ca=a("img"),vh=h(),Ce=a("p"),qv=o("It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),wr=a("code"),Fv=o("DataParallel"),Wv=o(" (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),Ph=h(),Ra=a("p"),Hv=o("Consider this simple model with 3 layers, where each layer has 3 params:"),wh=h(),m(Rt.$$.fragment),_h=h(),Za=a("p"),Yv=o("Layer La has weights a0, a1 and a2."),yh=h(),Ba=a("p"),Xv=o("If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),bh=h(),m(Zt.$$.fragment),gh=h(),Va=a("p"),Kv=o("In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),Eh=h(),qa=a("p"),Jv=o("Now each of these GPUs will get the usual mini-batch as it works in DP:"),Dh=h(),m(Bt.$$.fragment),Lh=h(),Fa=a("p"),Qv=o("The inputs are unmodified - they think they are going to be processed by the normal model."),Th=h(),Wa=a("p"),eP=o("First, the inputs hit the layer La."),kh=h(),Ha=a("p"),tP=o("Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),Gh=h(),Ya=a("p"),lP=o("In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),Uh=h(),Xa=a("p"),aP=o("Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),Ih=h(),Ka=a("p"),sP=o("All 3 GPUs get the full tensors reconstructed and a forward happens."),Sh=h(),Ja=a("p"),iP=o("As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),Oh=h(),Qa=a("p"),oP=o("And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),Ah=h(),es=a("p"),rP=o("To me this sounds like an efficient group backpacking weight distribution strategy:"),jh=h(),N=a("ol"),_r=a("li"),nP=o("person A carries the tent"),pP=h(),yr=a("li"),hP=o("person B carries the stove"),fP=h(),br=a("li"),cP=o("person C carries the axe"),xh=h(),ts=a("p"),dP=o("Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),Mh=h(),ls=a("p"),uP=o("Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),$h=h(),as=a("p"),mP=o("While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),Nh=h(),ss=a("p"),vP=o("If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),zh=h(),is=a("p"),PP=o("Implementations:"),Ch=h(),z=a("ul"),os=a("li"),Vt=a("a"),wP=o("DeepSpeed"),_P=o(" ZeRO-DP stages 1+2+3"),yP=h(),rs=a("li"),qt=a("a"),bP=o("Fairscale"),gP=o(" ZeRO-DP stages 1+2+3"),EP=h(),gr=a("li"),Ft=a("a"),Er=a("code"),DP=o("transformers"),LP=o(" integration"),Rh=h(),Pe=a("h2"),Re=a("a"),Dr=a("span"),m(Wt.$$.fragment),TP=h(),Lr=a("span"),kP=o("Naive Model Parallelism (Vertical) and Pipeline Parallelism"),Zh=h(),Ze=a("p"),GP=o("Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Tr=a("code"),UP=o(".to()"),IP=o(" the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),Bh=h(),ns=a("p"),SP=o("We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),Vh=h(),m(Ht.$$.fragment),qh=h(),ps=a("p"),OP=o("we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),Fh=h(),hs=a("p"),AP=o("Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),Wh=h(),fs=a("p"),jP=o("Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),Hh=h(),cs=a("p"),xP=o("Problems:"),Yh=h(),Be=a("ul"),kr=a("li"),MP=o("the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),$P=h(),Gr=a("li"),NP=o("shared embeddings may need to get copied back and forth between GPUs."),Xh=h(),ds=a("p"),zP=o("Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),Kh=h(),Ve=a("p"),CP=o("The following illustration from the "),Yt=a("a"),RP=o("GPipe paper"),ZP=o(" shows the naive MP on the top, and PP on the bottom:"),Jh=h(),us=a("p"),ms=a("img"),Qh=h(),vs=a("p"),BP=o("It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),ef=h(),Ps=a("p"),VP=o("Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),tf=h(),C=a("p"),qP=o("PP introduces a new hyper-parameter to tune and it\u2019s "),Ur=a("code"),FP=o("chunks"),WP=o(" which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),Ir=a("code"),HP=o("chunks=4"),YP=o(". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),lf=h(),qe=a("p"),XP=o("Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Sr=a("code"),KP=o("chunks"),JP=o(", whereas DeepSpeed refers to the same hyper-parameter as GAS."),af=h(),Fe=a("p"),QP=o("Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),Or=a("code"),e1=o("chunks"),t1=o(" (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),sf=h(),R=a("p"),l1=o("To calculate the global batch size of the DP + PP setup we then do: "),Ar=a("code"),a1=o("mbs*chunks*dp_degree"),s1=o(" ("),jr=a("code"),i1=o("8*32*4=1024"),o1=o(")."),of=h(),ws=a("p"),r1=o("Let\u2019s go back to the diagram."),rf=h(),Z=a("p"),n1=o("With "),xr=a("code"),p1=o("chunks=1"),h1=o(" you end up with the naive MP, which is very inefficient. With a very large "),Mr=a("code"),f1=o("chunks"),c1=o(" value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),nf=h(),I=a("p"),d1=o("While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),$r=a("code"),u1=o("forward"),m1=o(" stage has to wait for "),Nr=a("code"),v1=o("backward"),P1=o(" to complete the pipeline, the purpose of finding the best value for "),zr=a("code"),w1=o("chunks"),_1=o(" is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),pf=h(),_s=a("p"),y1=o("There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),hf=h(),ys=a("p"),b1=o("Traditional Pipeline API solutions:"),ff=h(),S=a("ul"),Cr=a("li"),g1=o("PyTorch"),E1=h(),Rr=a("li"),D1=o("FairScale"),L1=h(),Zr=a("li"),T1=o("DeepSpeed"),k1=h(),Br=a("li"),G1=o("Megatron-LM"),cf=h(),bs=a("p"),U1=o("Modern solutions:"),df=h(),We=a("ul"),Vr=a("li"),I1=o("Varuna"),S1=h(),qr=a("li"),O1=o("Sagemaker"),uf=h(),gs=a("p"),A1=o("Problems with traditional Pipeline API solutions:"),mf=h(),O=a("ul"),Xt=a("li"),j1=o("have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Fr=a("code"),x1=o("nn.Sequential"),M1=o(" sequence of the same, which may require changes to the design of the model."),$1=h(),Es=a("li"),N1=o("currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),Kt=a("a"),z1=o("https://github.com/pytorch/pytorch/pull/50693"),C1=h(),Wr=a("li"),R1=o("conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),Z1=h(),Hr=a("li"),B1=o("have to arrange each layer so that the output of one model becomes an input to the other model."),vf=h(),Ds=a("p"),V1=o("We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),Pf=h(),Ls=a("p"),q1=o("Implementations:"),wf=h(),u=a("ul"),Jt=a("li"),Qt=a("a"),F1=o("Pytorch"),W1=o(" (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),el=a("a"),H1=o("examples"),Y1=h(),Yr=a("li"),tl=a("a"),X1=o("FairScale"),K1=h(),Xr=a("li"),ll=a("a"),J1=o("DeepSpeed"),Q1=h(),Ts=a("li"),al=a("a"),ew=o("Megatron-LM"),tw=o(" has an internal implementation - no API."),lw=h(),Kr=a("li"),sl=a("a"),aw=o("Varuna"),sw=h(),ks=a("li"),il=a("a"),iw=o("SageMaker"),ow=o(" - this is a proprietary solution that can only be used on AWS."),rw=h(),Gs=a("li"),ol=a("a"),nw=o("OSLO"),pw=o(" - this is implemented based on the Hugging Face Transformers."),_f=h(),He=a("p"),hw=o("\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),Jr=a("code"),fw=o("nn.Sequential"),cw=o(" and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),yf=h(),Us=a("p"),dw=o("Other approaches:"),bf=h(),we=a("p"),uw=o("DeepSpeed, Varuna and SageMaker use the concept of an "),rl=a("a"),mw=o("Interleaved Pipeline"),vw=h(),Is=a("img"),gf=h(),Ss=a("p"),Pw=o("Here the bubble (idle time) is further minimized by prioritizing backward passes."),Ef=h(),Os=a("p"),ww=o("Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),Df=h(),Ye=a("p"),_w=o("OSLO has pipeline parallelism implementation based on the Transformers without "),Qr=a("code"),yw=o("nn.Sequential"),bw=o(" converting."),Lf=h(),_e=a("h2"),Xe=a("a"),en=a("span"),m(nl.$$.fragment),gw=h(),tn=a("span"),Ew=o("Tensor Parallelism"),Tf=h(),As=a("p"),Dw=o("In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),kf=h(),B=a("p"),Lw=o("In this section we use concepts and diagrams from the "),pl=a("a"),Tw=o("Megatron-LM"),kw=o(" paper: "),hl=a("a"),Gw=o("Efficient Large-Scale Language Model Training on GPU Clusters"),Uw=o("."),Gf=h(),V=a("p"),Iw=o("The main building block of any transformer is a fully connected "),ln=a("code"),Sw=o("nn.Linear"),Ow=o(" followed by a nonlinear activation "),an=a("code"),Aw=o("GeLU"),jw=o("."),Uf=h(),L=a("p"),xw=o("Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),sn=a("code"),Mw=o("Y = GeLU(XA)"),$w=o(", where "),on=a("code"),Nw=o("X"),zw=o(" and "),rn=a("code"),Cw=o("Y"),Rw=o(" are the input and output vectors, and "),nn=a("code"),Zw=o("A"),Bw=o(" is the weight matrix."),If=h(),fl=a("p"),Vw=o(`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),js=a("img"),Sf=h(),d=a("p"),qw=o("If we split the weight matrix "),pn=a("code"),Fw=o("A"),Ww=o(" column-wise across "),hn=a("code"),Hw=o("N"),Yw=o(" GPUs and perform matrix multiplications "),fn=a("code"),Xw=o("XA_1"),Kw=o(" through "),cn=a("code"),Jw=o("XA_n"),Qw=o(" in parallel, then we will end up with "),dn=a("code"),e2=o("N"),t2=o(" output vectors "),un=a("code"),l2=o("Y_1, Y_2, ..., Y_n"),a2=o(" which can be fed into "),mn=a("code"),s2=o("GeLU"),i2=o(` independently:
`),xs=a("img"),Of=h(),cl=a("p"),o2=o(`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),Ms=a("img"),Af=h(),dl=a("p"),r2=o(`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),$s=a("img"),jf=h(),Ns=a("p"),n2=o("Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),xf=h(),q=a("p"),p2=o("This section is based on the original much more "),ul=a("a"),h2=o("detailed TP overview"),f2=o(`.
by `),ml=a("a"),c2=o("@anton-l"),d2=o("."),Mf=h(),zs=a("p"),u2=o("SageMaker combines TP with DP for a more efficient processing."),$f=h(),Cs=a("p"),m2=o("Alternative names:"),Nf=h(),Rs=a("ul"),Zs=a("li"),v2=o("DeepSpeed calls it "),vl=a("a"),P2=o("tensor slicing"),zf=h(),Bs=a("p"),w2=o("Implementations:"),Cf=h(),A=a("ul"),Vs=a("li"),Pl=a("a"),_2=o("Megatron-LM"),y2=o(" has an internal implementation, as it\u2019s very model-specific"),b2=h(),qs=a("li"),wl=a("a"),g2=o("parallelformers"),E2=o(" (only inference at the moment)"),D2=h(),Fs=a("li"),_l=a("a"),L2=o("SageMaker"),T2=o(" - this is a proprietary solution that can only be used on AWS."),k2=h(),Ws=a("li"),yl=a("a"),G2=o("OSLO"),U2=o(" has the tensor parallelism implementation based on the Transformers."),Rf=h(),Hs=a("p"),I2=o("\u{1F917} Transformers status:"),Zf=h(),F=a("ul"),vn=a("li"),S2=o("core: not yet implemented in the core"),O2=h(),bl=a("li"),A2=o("but if you want inference "),gl=a("a"),j2=o("parallelformers"),x2=o(" provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),M2=h(),Ys=a("li"),$2=o("Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),El=a("a"),N2=o("here"),Bf=h(),ye=a("h2"),Ke=a("a"),Pn=a("span"),m(Dl.$$.fragment),z2=h(),wn=a("span"),C2=o("DP+PP"),Vf=h(),Je=a("p"),R2=o("The following diagram from the DeepSpeed "),Ll=a("a"),Z2=o("pipeline tutorial"),B2=o(" demonstrates how one combines DP with PP."),qf=h(),Xs=a("p"),Ks=a("img"),Ff=h(),Js=a("p"),V2=o("Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),Wf=h(),Qs=a("p"),q2=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),Hf=h(),ei=a("p"),F2=o("Implementations:"),Yf=h(),T=a("ul"),_n=a("li"),Tl=a("a"),W2=o("DeepSpeed"),H2=h(),yn=a("li"),kl=a("a"),Y2=o("Megatron-LM"),X2=h(),bn=a("li"),Gl=a("a"),K2=o("Varuna"),J2=h(),gn=a("li"),Ul=a("a"),Q2=o("SageMaker"),e_=h(),En=a("li"),Il=a("a"),t_=o("OSLO"),Xf=h(),ti=a("p"),l_=o("\u{1F917} Transformers status: not yet implemented"),Kf=h(),be=a("h2"),Qe=a("a"),Dn=a("span"),m(Sl.$$.fragment),a_=h(),Ln=a("span"),s_=o("DP+PP+TP"),Jf=h(),li=a("p"),i_=o("To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),Qf=h(),ai=a("p"),si=a("img"),ec=h(),et=a("p"),o_=o("This diagram is from a blog post "),Ol=a("a"),r_=o("3D parallelism: Scaling to trillion-parameter models"),n_=o(", which is a good read as well."),tc=h(),ii=a("p"),p_=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),lc=h(),oi=a("p"),h_=o("Implementations:"),ac=h(),k=a("ul"),ri=a("li"),Al=a("a"),f_=o("DeepSpeed"),c_=o(" - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),d_=h(),Tn=a("li"),jl=a("a"),u_=o("Megatron-LM"),m_=h(),kn=a("li"),xl=a("a"),v_=o("Varuna"),P_=h(),Gn=a("li"),Ml=a("a"),w_=o("SageMaker"),__=h(),Un=a("li"),$l=a("a"),y_=o("OSLO"),sc=h(),ni=a("p"),b_=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),ic=h(),ge=a("h2"),tt=a("a"),In=a("span"),m(Nl.$$.fragment),g_=h(),Sn=a("span"),E_=o("ZeRO DP+PP+TP"),oc=h(),lt=a("p"),D_=o("One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),pi=a("a"),L_=o("ZeRO Data Parallelism"),T_=o(". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),rc=h(),hi=a("p"),k_=o("When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),nc=h(),fi=a("p"),G_=o("While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),pc=h(),at=a("p"),U_=o("In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),On=a("code"),I_=o("1/PP"),S_=o(", and so gradient sharding savings on top of that are less significant than pure DP."),hc=h(),ci=a("p"),O_=o("ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),fc=h(),di=a("p"),A_=o("And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),cc=h(),ui=a("p"),j_=o("Implementations:"),dc=h(),st=a("ul"),it=a("li"),zl=a("a"),x_=o("Megatron-DeepSpeed"),M_=o(" and "),Cl=a("a"),$_=o("Megatron-Deepspeed from BigScience"),N_=o(", which is the fork of the former repo."),z_=h(),An=a("li"),Rl=a("a"),C_=o("OSLO"),uc=h(),mi=a("p"),R_=o("Important papers:"),mc=h(),vi=a("ul"),jn=a("li"),Zl=a("a"),Z_=o("Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),vc=h(),Pi=a("p"),B_=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),Pc=h(),Ee=a("h2"),ot=a("a"),xn=a("span"),m(Bl.$$.fragment),V_=h(),Mn=a("span"),q_=o("FlexFlow"),wc=h(),Vl=a("p"),ql=a("a"),F_=o("FlexFlow"),W_=o(" also solves the parallelization problem in a slightly different approach."),_c=h(),Fl=a("p"),H_=o("Paper: "),Wl=a("a"),Y_=o("\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),yc=h(),wi=a("p"),X_=o("It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),bc=h(),j=a("ol"),$n=a("li"),K_=o("Sample = Data Parallelism (sample-wise parallel)"),J_=h(),Nn=a("li"),Q_=o("Operator = Parallelize a single operation into several sub-operations"),ey=h(),zn=a("li"),ty=o("Attribute = Data Parallelism (length-wise parallel)"),ly=h(),Cn=a("li"),ay=o("Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),gc=h(),_i=a("p"),sy=o("Examples:"),Ec=h(),yi=a("ul"),Rn=a("li"),iy=o("Sample"),Dc=h(),bi=a("p"),oy=o("Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),Lc=h(),gi=a("ul"),Zn=a("li"),ry=o("Operator"),Tc=h(),Ei=a("p"),ny=o("If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),kc=h(),Di=a("ul"),Bn=a("li"),py=o("Attribute"),Gc=h(),Li=a("p"),hy=o("We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),Uc=h(),Ti=a("ul"),Vn=a("li"),fy=o("Parameter"),Ic=h(),ki=a("p"),cy=o("It is similar with tensor model parallelism or naive layer-wise model parallelism."),Sc=h(),Gi=a("p"),Ui=a("img"),Oc=h(),Ii=a("p"),dy=o("The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),Ac=h(),Si=a("p"),uy=o("One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),jc=h(),Oi=a("p"),my=o("So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),xc=h(),rt=a("p"),vy=o("\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),Hl=a("a"),Py=o("transformers.utils.fx"),wy=o(", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Mc=h(),De=a("h2"),nt=a("a"),qn=a("span"),m(Yl.$$.fragment),_y=h(),Fn=a("span"),yy=o("Which Strategy To Use When"),$c=h(),Ai=a("p"),by=o("Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),Nc=h(),ji=a("p"),Wn=a("strong"),gy=o("\u21E8 Single GPU"),zc=h(),W=a("ul"),Xl=a("li"),Hn=a("p"),Ey=o("Model fits onto a single GPU:"),Dy=h(),Yn=a("ol"),Xn=a("li"),Ly=o("Normal use"),Ty=h(),Kl=a("li"),Kn=a("p"),ky=o("Model doesn\u2019t fit onto a single GPU:"),Gy=h(),Jl=a("ol"),Jn=a("li"),Uy=o("ZeRO + Offload CPU and optionally NVMe"),Iy=h(),Qn=a("li"),Sy=o("as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),Oy=h(),ep=a("li"),tp=a("p"),Ay=o("Largest Layer not fitting into a single GPU:"),Cc=h(),xi=a("ol"),Le=a("li"),jy=o("ZeRO - Enable "),Ql=a("a"),xy=o("Memory Centric Tiling"),My=o(" (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),lp=a("code"),$y=o("torch.nn.Linear"),Ny=o(" needs to be done by the user."),Rc=h(),Mi=a("p"),ap=a("strong"),zy=o("\u21E8 Single Node / Multi-GPU"),Zc=h(),H=a("ul"),ea=a("li"),sp=a("p"),Cy=o("Model fits onto a single GPU:"),Ry=h(),ta=a("ol"),ip=a("li"),Zy=o("DDP - Distributed DP"),By=h(),op=a("li"),Vy=o("ZeRO - may or may not be faster depending on the situation and configuration used"),qy=h(),la=a("li"),rp=a("p"),Fy=o("Model doesn\u2019t fit onto a single GPU:"),Wy=h(),Te=a("ol"),np=a("li"),pp=a("p"),Hy=o("PP"),Yy=h(),hp=a("li"),fp=a("p"),Xy=o("ZeRO"),Ky=h(),ke=a("li"),cp=a("p"),Jy=o("TP"),Qy=h(),dp=a("p"),eb=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),tb=h(),up=a("p"),lb=o("TP is almost always used within a single node. That is TP size <= gpus per node."),ab=h(),aa=a("li"),mp=a("p"),sb=o("Largest Layer not fitting into a single GPU:"),ib=h(),sa=a("ol"),vp=a("li"),ob=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),rb=h(),Pp=a("li"),nb=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Bc=h(),$i=a("p"),wp=a("strong"),pb=o("\u21E8 Multi-Node / Multi-GPU"),Vc=h(),pt=a("ul"),ia=a("li"),_p=a("p"),hb=o("When you have fast inter-node connectivity:"),fb=h(),oa=a("ol"),yp=a("li"),cb=o("ZeRO - as it requires close to no modifications to the model"),db=h(),bp=a("li"),ub=o("PP+TP+DP - less communications, but requires massive changes to the model"),mb=h(),ra=a("li"),gp=a("p"),vb=o("when you have slow inter-node connectivity and still low on GPU memory:"),Pb=h(),Ep=a("ol"),Dp=a("li"),wb=o("DP+PP+TP+ZeRO-1"),this.h()},l(e){const n=O6('[data-svelte="svelte-1phssyn"]',document.head);te=s(n,"META",{name:!0,content:!0}),n.forEach(t),Ip=f(e),le=s(e,"H1",{class:!0});var Fc=i(le);Ge=s(Fc,"A",{id:!0,class:!0,href:!0});var ig=i(Ge);ro=s(ig,"SPAN",{});var og=i(ro);v(mt.$$.fragment,og),og.forEach(t),ig.forEach(t),Jd=f(Fc),no=s(Fc,"SPAN",{});var rg=i(no);Qd=r(rg,"Efficient Training on Multiple GPUs"),rg.forEach(t),Fc.forEach(t),Sp=f(e),na=s(e,"P",{});var ng=i(na);eu=r(ng,"When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),ng.forEach(t),Op=f(e),pa=s(e,"P",{});var pg=i(pa);tu=r(pg,"We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),pg.forEach(t),Ap=f(e),ae=s(e,"H2",{class:!0});var Wc=i(ae);Ue=s(Wc,"A",{id:!0,class:!0,href:!0});var hg=i(Ue);po=s(hg,"SPAN",{});var fg=i(po);v(vt.$$.fragment,fg),fg.forEach(t),hg.forEach(t),lu=f(Wc),ho=s(Wc,"SPAN",{});var cg=i(ho);au=r(cg,"Concepts"),cg.forEach(t),Wc.forEach(t),jp=f(e),ha=s(e,"P",{});var dg=i(ha);su=r(dg,"The following is the brief description of the main concepts that will be described later in depth in this document."),dg.forEach(t),xp=f(e),E=s(e,"OL",{});var Y=i(E);fa=s(Y,"LI",{});var _b=i(fa);fo=s(_b,"STRONG",{});var ug=i(fo);iu=r(ug,"DataParallel (DP)"),ug.forEach(t),ou=r(_b," - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),_b.forEach(t),ru=f(Y),ca=s(Y,"LI",{});var yb=i(ca);co=s(yb,"STRONG",{});var mg=i(co);nu=r(mg,"TensorParallel (TP)"),mg.forEach(t),pu=r(yb," - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),yb.forEach(t),hu=f(Y),da=s(Y,"LI",{});var bb=i(da);uo=s(bb,"STRONG",{});var vg=i(uo);fu=r(vg,"PipelineParallel (PP)"),vg.forEach(t),cu=r(bb," - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),bb.forEach(t),du=f(Y),ua=s(Y,"LI",{});var gb=i(ua);mo=s(gb,"STRONG",{});var Pg=i(mo);uu=r(Pg,"Zero Redundancy Optimizer (ZeRO)"),Pg.forEach(t),mu=r(gb," - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),gb.forEach(t),vu=f(Y),ma=s(Y,"LI",{});var Eb=i(ma);vo=s(Eb,"STRONG",{});var wg=i(vo);Pu=r(wg,"Sharded DDP"),wg.forEach(t),wu=r(Eb," - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),Eb.forEach(t),Y.forEach(t),Mp=f(e),va=s(e,"P",{});var _g=i(va);_u=r(_g,"Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),_g.forEach(t),$p=f(e),se=s(e,"H2",{class:!0});var Hc=i(se);Ie=s(Hc,"A",{id:!0,class:!0,href:!0});var yg=i(Ie);Po=s(yg,"SPAN",{});var bg=i(Po);v(Pt.$$.fragment,bg),bg.forEach(t),yg.forEach(t),yu=f(Hc),wo=s(Hc,"SPAN",{});var gg=i(wo);bu=r(gg,"Scalability Strategy"),gg.forEach(t),Hc.forEach(t),Np=f(e),Pa=s(e,"P",{});var Eg=i(Pa);_o=s(Eg,"STRONG",{});var Dg=i(_o);gu=r(Dg,"\u21E8 Single Node / Multi-GPU"),Dg.forEach(t),Eg.forEach(t),zp=f(e),M=s(e,"UL",{});var Ni=i(M);wt=s(Ni,"LI",{});var Yc=i(wt);yo=s(Yc,"P",{});var Lg=i(yo);Eu=r(Lg,"Model fits onto a single GPU:"),Lg.forEach(t),Du=f(Yc),_t=s(Yc,"OL",{});var Xc=i(_t);bo=s(Xc,"LI",{});var Tg=i(bo);Lu=r(Tg,"DDP - Distributed DP"),Tg.forEach(t),Tu=f(Xc),go=s(Xc,"LI",{});var kg=i(go);ku=r(kg,"ZeRO - may or may not be faster depending on the situation and configuration used"),kg.forEach(t),Xc.forEach(t),Yc.forEach(t),Gu=f(Ni),yt=s(Ni,"LI",{});var Kc=i(yt);Eo=s(Kc,"P",{});var Gg=i(Eo);Uu=r(Gg,"Model doesn\u2019t fit onto a single GPU:"),Gg.forEach(t),Iu=f(Kc),ie=s(Kc,"OL",{});var zi=i(ie);Do=s(zi,"LI",{});var Ug=i(Do);Lo=s(Ug,"P",{});var Ig=i(Lo);Su=r(Ig,"PP"),Ig.forEach(t),Ug.forEach(t),Ou=f(zi),To=s(zi,"LI",{});var Sg=i(To);ko=s(Sg,"P",{});var Og=i(ko);Au=r(Og,"ZeRO"),Og.forEach(t),Sg.forEach(t),ju=f(zi),oe=s(zi,"LI",{});var Ci=i(oe);Go=s(Ci,"P",{});var Ag=i(Go);xu=r(Ag,"TP"),Ag.forEach(t),Mu=f(Ci),Uo=s(Ci,"P",{});var jg=i(Uo);$u=r(jg,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),jg.forEach(t),Nu=f(Ci),Io=s(Ci,"P",{});var xg=i(Io);zu=r(xg,"TP is almost always used within a single node. That is TP size <= gpus per node."),xg.forEach(t),Ci.forEach(t),zi.forEach(t),Kc.forEach(t),Cu=f(Ni),bt=s(Ni,"LI",{});var Jc=i(bt);So=s(Jc,"P",{});var Mg=i(So);Ru=r(Mg,"Largest Layer not fitting into a single GPU:"),Mg.forEach(t),Zu=f(Jc),gt=s(Jc,"OL",{});var Qc=i(gt);Oo=s(Qc,"LI",{});var $g=i(Oo);Bu=r($g,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),$g.forEach(t),Vu=f(Qc),Ao=s(Qc,"LI",{});var Ng=i(Ao);qu=r(Ng,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Ng.forEach(t),Qc.forEach(t),Jc.forEach(t),Ni.forEach(t),Cp=f(e),wa=s(e,"P",{});var zg=i(wa);jo=s(zg,"STRONG",{});var Cg=i(jo);Fu=r(Cg,"\u21E8 Multi-Node / Multi-GPU"),Cg.forEach(t),zg.forEach(t),Rp=f(e),Se=s(e,"UL",{});var ed=i(Se);Et=s(ed,"LI",{});var td=i(Et);xo=s(td,"P",{});var Rg=i(xo);Wu=r(Rg,"When you have fast inter-node connectivity:"),Rg.forEach(t),Hu=f(td),Dt=s(td,"OL",{});var ld=i(Dt);Mo=s(ld,"LI",{});var Zg=i(Mo);Yu=r(Zg,"ZeRO - as it requires close to no modifications to the model"),Zg.forEach(t),Xu=f(ld),$o=s(ld,"LI",{});var Bg=i($o);Ku=r(Bg,"PP+TP+DP - less communications, but requires massive changes to the model"),Bg.forEach(t),ld.forEach(t),td.forEach(t),Ju=f(ed),Lt=s(ed,"LI",{});var ad=i(Lt);No=s(ad,"P",{});var Vg=i(No);Qu=r(Vg,"when you have slow inter-node connectivity and still low on GPU memory:"),Vg.forEach(t),em=f(ad),zo=s(ad,"OL",{});var qg=i(zo);Co=s(qg,"LI",{});var Fg=i(Co);tm=r(Fg,"DP+PP+TP+ZeRO-1"),Fg.forEach(t),qg.forEach(t),ad.forEach(t),ed.forEach(t),Zp=f(e),re=s(e,"H2",{class:!0});var sd=i(re);Oe=s(sd,"A",{id:!0,class:!0,href:!0});var Wg=i(Oe);Ro=s(Wg,"SPAN",{});var Hg=i(Ro);v(Tt.$$.fragment,Hg),Hg.forEach(t),Wg.forEach(t),lm=f(sd),Zo=s(sd,"SPAN",{});var Yg=i(Zo);am=r(Yg,"Data Parallelism"),Yg.forEach(t),sd.forEach(t),Bp=f(e),$=s(e,"P",{});var Ri=i($);sm=r(Ri,"Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Bo=s(Ri,"CODE",{});var Xg=i(Bo);im=r(Xg,"DataParallel"),Xg.forEach(t),om=r(Ri," (DP) and "),Vo=s(Ri,"CODE",{});var Kg=i(Vo);rm=r(Kg,"DistributedDataParallel"),Kg.forEach(t),nm=r(Ri," (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is adviced to use DDP as it is better maintained and works for all models while DP might fail for some models."),Ri.forEach(t),Vp=f(e),ne=s(e,"H3",{class:!0});var id=i(ne);Ae=s(id,"A",{id:!0,class:!0,href:!0});var Jg=i(Ae);qo=s(Jg,"SPAN",{});var Qg=i(qo);v(kt.$$.fragment,Qg),Qg.forEach(t),Jg.forEach(t),pm=f(id),Fo=s(id,"SPAN",{});var eE=i(Fo);hm=r(eE,"DP vs DDP"),eE.forEach(t),id.forEach(t),qp=f(e),pe=s(e,"P",{});var Lp=i(pe);Wo=s(Lp,"CODE",{});var tE=i(Wo);fm=r(tE,"DistributedDataParallel"),tE.forEach(t),cm=r(Lp," (DDP) is typically faster than "),Ho=s(Lp,"CODE",{});var lE=i(Ho);dm=r(lE,"DataParallel"),lE.forEach(t),um=r(Lp," (DP), but it is not always the case:"),Lp.forEach(t),Fp=f(e),je=s(e,"UL",{});var od=i(je);Yo=s(od,"LI",{});var aE=i(Yo);mm=r(aE,"while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),aE.forEach(t),vm=f(od),Xo=s(od,"LI",{});var sE=i(Xo);Pm=r(sE,"on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),sE.forEach(t),od.forEach(t),Wp=f(e),_a=s(e,"P",{});var iE=i(_a);wm=r(iE,"Here are the main differences in the inter-GPU communication overhead between the two modes:"),iE.forEach(t),Hp=f(e),Gt=s(e,"P",{});var Db=i(Gt);Ut=s(Db,"A",{href:!0,rel:!0});var oE=i(Ut);_m=r(oE,"DDP"),oE.forEach(t),ym=r(Db,":"),Db.forEach(t),Yp=f(e),xe=s(e,"UL",{});var rd=i(xe);Ko=s(rd,"LI",{});var rE=i(Ko);bm=r(rE,"At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),rE.forEach(t),gm=f(rd),ya=s(rd,"LI",{});var Lb=i(ya);Em=r(Lb,"Then for each batch:"),It=s(Lb,"OL",{});var nd=i(It);Jo=s(nd,"LI",{});var nE=i(Jo);Dm=r(nE,"each gpu consumes each own mini-batch of data directly"),nE.forEach(t),Lm=f(nd),St=s(nd,"LI",{});var pd=i(St);Tm=r(pd,"during "),Qo=s(pd,"CODE",{});var pE=i(Qo);km=r(pE,"backward"),pE.forEach(t),Gm=r(pd,", once the local gradients are ready, they are then averaged across all processes"),pd.forEach(t),nd.forEach(t),Lb.forEach(t),rd.forEach(t),Xp=f(e),Ot=s(e,"P",{});var Tb=i(Ot);At=s(Tb,"A",{href:!0,rel:!0});var hE=i(At);Um=r(hE,"DP"),hE.forEach(t),Im=r(Tb,":"),Tb.forEach(t),Kp=f(e),ba=s(e,"P",{});var fE=i(ba);Sm=r(fE,"For each batch:"),fE.forEach(t),Jp=f(e),D=s(e,"OL",{});var X=i(D);er=s(X,"LI",{});var cE=i(er);Om=r(cE,"gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),cE.forEach(t),Am=f(X),tr=s(X,"LI",{});var dE=i(tr);jm=r(dE,"replicates the up-to-date model from gpu 0 to each gpu"),dE.forEach(t),xm=f(X),jt=s(X,"LI",{});var hd=i(jt);Mm=r(hd,"runs "),lr=s(hd,"CODE",{});var uE=i(lr);$m=r(uE,"forward"),uE.forEach(t),Nm=r(hd," and sends output from each gpu to gpu 0, computes loss"),hd.forEach(t),zm=f(X),ga=s(X,"LI",{});var kb=i(ga);Cm=r(kb,"scatters loss from gpu 0 to all gpus, runs "),ar=s(kb,"CODE",{});var mE=i(ar);Rm=r(mE,"backward"),mE.forEach(t),kb.forEach(t),Zm=f(X),sr=s(X,"LI",{});var vE=i(sr);Bm=r(vE,"sends gradients from each gpu to gpu 0 and averages those"),vE.forEach(t),X.forEach(t),Qp=f(e),Ea=s(e,"P",{});var PE=i(Ea);Vm=r(PE,"The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),PE.forEach(t),eh=f(e),Me=s(e,"P",{});var fd=i(Me);qm=r(fd,"DP copies data within the process via python threads, whereas DDP copies data via "),xt=s(fd,"A",{href:!0,rel:!0});var wE=i(xt);Fm=r(wE,"torch.distributed"),wE.forEach(t),Wm=r(fd,"."),fd.forEach(t),th=f(e),Da=s(e,"P",{});var _E=i(Da);Hm=r(_E,"Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),_E.forEach(t),lh=f(e),La=s(e,"P",{});var yE=i(La);Ym=r(yE,"You can use DDP across multiple machines, but this is not the case with DP."),yE.forEach(t),ah=f(e),Ta=s(e,"P",{});var bE=i(Ta);Xm=r(bE,"There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),bE.forEach(t),sh=f(e),$e=s(e,"P",{});var cd=i($e);Km=r(cd,"If you want to go really deep into understanding these 2 modes, this "),Mt=s(cd,"A",{href:!0,rel:!0});var gE=i(Mt);Jm=r(gE,"article"),gE.forEach(t),Qm=r(cd," is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),cd.forEach(t),ih=f(e),ka=s(e,"P",{});var EE=i(ka);ev=r(EE,"Let\u2019s look at an actual benchmark:"),EE.forEach(t),oh=f(e),Ne=s(e,"TABLE",{});var dd=i(Ne);ir=s(dd,"THEAD",{});var DE=i(ir);he=s(DE,"TR",{});var Zi=i(he);Ga=s(Zi,"TH",{align:!0});var LE=i(Ga);tv=r(LE,"Type"),LE.forEach(t),lv=f(Zi),or=s(Zi,"TH",{});var TE=i(or);av=r(TE,"NVlink"),TE.forEach(t),sv=f(Zi),Ua=s(Zi,"TH",{align:!0});var kE=i(Ua);iv=r(kE,"Time"),kE.forEach(t),Zi.forEach(t),DE.forEach(t),ov=f(dd),fe=s(dd,"TBODY",{});var Bi=i(fe);ce=s(Bi,"TR",{});var Vi=i(ce);Ia=s(Vi,"TD",{align:!0});var GE=i(Ia);rv=r(GE,"2:DP"),GE.forEach(t),nv=f(Vi),rr=s(Vi,"TD",{});var UE=i(rr);pv=r(UE,"Y"),UE.forEach(t),hv=f(Vi),Sa=s(Vi,"TD",{align:!0});var IE=i(Sa);fv=r(IE,"110s"),IE.forEach(t),Vi.forEach(t),cv=f(Bi),de=s(Bi,"TR",{});var qi=i(de);Oa=s(qi,"TD",{align:!0});var SE=i(Oa);dv=r(SE,"2:DDP"),SE.forEach(t),uv=f(qi),nr=s(qi,"TD",{});var OE=i(nr);mv=r(OE,"Y"),OE.forEach(t),vv=f(qi),Aa=s(qi,"TD",{align:!0});var AE=i(Aa);Pv=r(AE,"101s"),AE.forEach(t),qi.forEach(t),wv=f(Bi),ue=s(Bi,"TR",{});var Fi=i(ue);ja=s(Fi,"TD",{align:!0});var jE=i(ja);_v=r(jE,"2:DDP"),jE.forEach(t),yv=f(Fi),pr=s(Fi,"TD",{});var xE=i(pr);bv=r(xE,"N"),xE.forEach(t),gv=f(Fi),xa=s(Fi,"TD",{align:!0});var ME=i(xa);Ev=r(ME,"131s"),ME.forEach(t),Fi.forEach(t),Bi.forEach(t),dd.forEach(t),rh=f(e),Ma=s(e,"P",{});var $E=i(Ma);Dv=r($E,"Analysis:"),$E.forEach(t),nh=f(e),$a=s(e,"P",{});var NE=i($a);Lv=r(NE,"Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),NE.forEach(t),ph=f(e),Na=s(e,"P",{});var zE=i(Na);Tv=r(zE,"The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),zE.forEach(t),hh=f(e),za=s(e,"P",{});var CE=i(za);kv=r(CE,"Here is the full benchmark code and outputs:"),CE.forEach(t),fh=f(e),$t=s(e,"P",{});var Gb=i($t);hr=s(Gb,"CODE",{});var RE=i(hr);Gv=r(RE,"NCCL_P2P_DISABLE=1"),RE.forEach(t),Uv=r(Gb," was used to disable the NVLink feature on the corresponding benchmark."),Gb.forEach(t),ch=f(e),v(Nt.$$.fragment,e),dh=f(e),g=s(e,"P",{});var x=i(g);Iv=r(x,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),fr=s(x,"CODE",{});var ZE=i(fr);Sv=r(ZE,"NV2"),ZE.forEach(t),Ov=r(x," in "),cr=s(x,"CODE",{});var BE=i(cr);Av=r(BE,"nvidia-smi topo -m"),BE.forEach(t),jv=r(x,`)
Software: `),dr=s(x,"CODE",{});var VE=i(dr);xv=r(VE,"pytorch-1.8-to-be"),VE.forEach(t),Mv=r(x," + "),ur=s(x,"CODE",{});var qE=i(ur);$v=r(qE,"cuda-11.0"),qE.forEach(t),Nv=r(x," / "),mr=s(x,"CODE",{});var FE=i(mr);zv=r(FE,"transformers==4.3.0.dev0"),FE.forEach(t),x.forEach(t),uh=f(e),me=s(e,"H2",{class:!0});var ud=i(me);ze=s(ud,"A",{id:!0,class:!0,href:!0});var WE=i(ze);vr=s(WE,"SPAN",{});var HE=i(vr);v(zt.$$.fragment,HE),HE.forEach(t),WE.forEach(t),Cv=f(ud),Pr=s(ud,"SPAN",{});var YE=i(Pr);Rv=r(YE,"ZeRO Data Parallelism"),YE.forEach(t),ud.forEach(t),mh=f(e),ve=s(e,"P",{});var Tp=i(ve);Zv=r(Tp,"ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Ct=s(Tp,"A",{href:!0,rel:!0});var XE=i(Ct);Bv=r(XE,"blog post"),XE.forEach(t),Vv=f(Tp),Ca=s(Tp,"IMG",{src:!0,alt:!0}),Tp.forEach(t),vh=f(e),Ce=s(e,"P",{});var md=i(Ce);qv=r(md,"It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),wr=s(md,"CODE",{});var KE=i(wr);Fv=r(KE,"DataParallel"),KE.forEach(t),Wv=r(md," (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),md.forEach(t),Ph=f(e),Ra=s(e,"P",{});var JE=i(Ra);Hv=r(JE,"Consider this simple model with 3 layers, where each layer has 3 params:"),JE.forEach(t),wh=f(e),v(Rt.$$.fragment,e),_h=f(e),Za=s(e,"P",{});var QE=i(Za);Yv=r(QE,"Layer La has weights a0, a1 and a2."),QE.forEach(t),yh=f(e),Ba=s(e,"P",{});var e3=i(Ba);Xv=r(e3,"If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),e3.forEach(t),bh=f(e),v(Zt.$$.fragment,e),gh=f(e),Va=s(e,"P",{});var t3=i(Va);Kv=r(t3,"In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),t3.forEach(t),Eh=f(e),qa=s(e,"P",{});var l3=i(qa);Jv=r(l3,"Now each of these GPUs will get the usual mini-batch as it works in DP:"),l3.forEach(t),Dh=f(e),v(Bt.$$.fragment,e),Lh=f(e),Fa=s(e,"P",{});var a3=i(Fa);Qv=r(a3,"The inputs are unmodified - they think they are going to be processed by the normal model."),a3.forEach(t),Th=f(e),Wa=s(e,"P",{});var s3=i(Wa);eP=r(s3,"First, the inputs hit the layer La."),s3.forEach(t),kh=f(e),Ha=s(e,"P",{});var i3=i(Ha);tP=r(i3,"Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),i3.forEach(t),Gh=f(e),Ya=s(e,"P",{});var o3=i(Ya);lP=r(o3,"In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),o3.forEach(t),Uh=f(e),Xa=s(e,"P",{});var r3=i(Xa);aP=r(r3,"Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),r3.forEach(t),Ih=f(e),Ka=s(e,"P",{});var n3=i(Ka);sP=r(n3,"All 3 GPUs get the full tensors reconstructed and a forward happens."),n3.forEach(t),Sh=f(e),Ja=s(e,"P",{});var p3=i(Ja);iP=r(p3,"As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),p3.forEach(t),Oh=f(e),Qa=s(e,"P",{});var h3=i(Qa);oP=r(h3,"And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),h3.forEach(t),Ah=f(e),es=s(e,"P",{});var f3=i(es);rP=r(f3,"To me this sounds like an efficient group backpacking weight distribution strategy:"),f3.forEach(t),jh=f(e),N=s(e,"OL",{});var Wi=i(N);_r=s(Wi,"LI",{});var c3=i(_r);nP=r(c3,"person A carries the tent"),c3.forEach(t),pP=f(Wi),yr=s(Wi,"LI",{});var d3=i(yr);hP=r(d3,"person B carries the stove"),d3.forEach(t),fP=f(Wi),br=s(Wi,"LI",{});var u3=i(br);cP=r(u3,"person C carries the axe"),u3.forEach(t),Wi.forEach(t),xh=f(e),ts=s(e,"P",{});var m3=i(ts);dP=r(m3,"Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),m3.forEach(t),Mh=f(e),ls=s(e,"P",{});var v3=i(ls);uP=r(v3,"Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),v3.forEach(t),$h=f(e),as=s(e,"P",{});var P3=i(as);mP=r(P3,"While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),P3.forEach(t),Nh=f(e),ss=s(e,"P",{});var w3=i(ss);vP=r(w3,"If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),w3.forEach(t),zh=f(e),is=s(e,"P",{});var _3=i(is);PP=r(_3,"Implementations:"),_3.forEach(t),Ch=f(e),z=s(e,"UL",{});var Hi=i(z);os=s(Hi,"LI",{});var Ub=i(os);Vt=s(Ub,"A",{href:!0,rel:!0});var y3=i(Vt);wP=r(y3,"DeepSpeed"),y3.forEach(t),_P=r(Ub," ZeRO-DP stages 1+2+3"),Ub.forEach(t),yP=f(Hi),rs=s(Hi,"LI",{});var Ib=i(rs);qt=s(Ib,"A",{href:!0,rel:!0});var b3=i(qt);bP=r(b3,"Fairscale"),b3.forEach(t),gP=r(Ib," ZeRO-DP stages 1+2+3"),Ib.forEach(t),EP=f(Hi),gr=s(Hi,"LI",{});var g3=i(gr);Ft=s(g3,"A",{href:!0});var Sb=i(Ft);Er=s(Sb,"CODE",{});var E3=i(Er);DP=r(E3,"transformers"),E3.forEach(t),LP=r(Sb," integration"),Sb.forEach(t),g3.forEach(t),Hi.forEach(t),Rh=f(e),Pe=s(e,"H2",{class:!0});var vd=i(Pe);Re=s(vd,"A",{id:!0,class:!0,href:!0});var D3=i(Re);Dr=s(D3,"SPAN",{});var L3=i(Dr);v(Wt.$$.fragment,L3),L3.forEach(t),D3.forEach(t),TP=f(vd),Lr=s(vd,"SPAN",{});var T3=i(Lr);kP=r(T3,"Naive Model Parallelism (Vertical) and Pipeline Parallelism"),T3.forEach(t),vd.forEach(t),Zh=f(e),Ze=s(e,"P",{});var Pd=i(Ze);GP=r(Pd,"Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Tr=s(Pd,"CODE",{});var k3=i(Tr);UP=r(k3,".to()"),k3.forEach(t),IP=r(Pd," the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),Pd.forEach(t),Bh=f(e),ns=s(e,"P",{});var G3=i(ns);SP=r(G3,"We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),G3.forEach(t),Vh=f(e),v(Ht.$$.fragment,e),qh=f(e),ps=s(e,"P",{});var U3=i(ps);OP=r(U3,"we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),U3.forEach(t),Fh=f(e),hs=s(e,"P",{});var I3=i(hs);AP=r(I3,"Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),I3.forEach(t),Wh=f(e),fs=s(e,"P",{});var S3=i(fs);jP=r(S3,"Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),S3.forEach(t),Hh=f(e),cs=s(e,"P",{});var O3=i(cs);xP=r(O3,"Problems:"),O3.forEach(t),Yh=f(e),Be=s(e,"UL",{});var wd=i(Be);kr=s(wd,"LI",{});var A3=i(kr);MP=r(A3,"the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),A3.forEach(t),$P=f(wd),Gr=s(wd,"LI",{});var j3=i(Gr);NP=r(j3,"shared embeddings may need to get copied back and forth between GPUs."),j3.forEach(t),wd.forEach(t),Xh=f(e),ds=s(e,"P",{});var x3=i(ds);zP=r(x3,"Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),x3.forEach(t),Kh=f(e),Ve=s(e,"P",{});var _d=i(Ve);CP=r(_d,"The following illustration from the "),Yt=s(_d,"A",{href:!0,rel:!0});var M3=i(Yt);RP=r(M3,"GPipe paper"),M3.forEach(t),ZP=r(_d," shows the naive MP on the top, and PP on the bottom:"),_d.forEach(t),Jh=f(e),us=s(e,"P",{});var $3=i(us);ms=s($3,"IMG",{src:!0,alt:!0}),$3.forEach(t),Qh=f(e),vs=s(e,"P",{});var N3=i(vs);BP=r(N3,"It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),N3.forEach(t),ef=f(e),Ps=s(e,"P",{});var z3=i(Ps);VP=r(z3,"Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),z3.forEach(t),tf=f(e),C=s(e,"P",{});var Yi=i(C);qP=r(Yi,"PP introduces a new hyper-parameter to tune and it\u2019s "),Ur=s(Yi,"CODE",{});var C3=i(Ur);FP=r(C3,"chunks"),C3.forEach(t),WP=r(Yi," which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),Ir=s(Yi,"CODE",{});var R3=i(Ir);HP=r(R3,"chunks=4"),R3.forEach(t),YP=r(Yi,". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),Yi.forEach(t),lf=f(e),qe=s(e,"P",{});var yd=i(qe);XP=r(yd,"Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Sr=s(yd,"CODE",{});var Z3=i(Sr);KP=r(Z3,"chunks"),Z3.forEach(t),JP=r(yd,", whereas DeepSpeed refers to the same hyper-parameter as GAS."),yd.forEach(t),af=f(e),Fe=s(e,"P",{});var bd=i(Fe);QP=r(bd,"Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),Or=s(bd,"CODE",{});var B3=i(Or);e1=r(B3,"chunks"),B3.forEach(t),t1=r(bd," (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),bd.forEach(t),sf=f(e),R=s(e,"P",{});var Xi=i(R);l1=r(Xi,"To calculate the global batch size of the DP + PP setup we then do: "),Ar=s(Xi,"CODE",{});var V3=i(Ar);a1=r(V3,"mbs*chunks*dp_degree"),V3.forEach(t),s1=r(Xi," ("),jr=s(Xi,"CODE",{});var q3=i(jr);i1=r(q3,"8*32*4=1024"),q3.forEach(t),o1=r(Xi,")."),Xi.forEach(t),of=f(e),ws=s(e,"P",{});var F3=i(ws);r1=r(F3,"Let\u2019s go back to the diagram."),F3.forEach(t),rf=f(e),Z=s(e,"P",{});var Ki=i(Z);n1=r(Ki,"With "),xr=s(Ki,"CODE",{});var W3=i(xr);p1=r(W3,"chunks=1"),W3.forEach(t),h1=r(Ki," you end up with the naive MP, which is very inefficient. With a very large "),Mr=s(Ki,"CODE",{});var H3=i(Mr);f1=r(H3,"chunks"),H3.forEach(t),c1=r(Ki," value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),Ki.forEach(t),nf=f(e),I=s(e,"P",{});var ht=i(I);d1=r(ht,"While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),$r=s(ht,"CODE",{});var Y3=i($r);u1=r(Y3,"forward"),Y3.forEach(t),m1=r(ht," stage has to wait for "),Nr=s(ht,"CODE",{});var X3=i(Nr);v1=r(X3,"backward"),X3.forEach(t),P1=r(ht," to complete the pipeline, the purpose of finding the best value for "),zr=s(ht,"CODE",{});var K3=i(zr);w1=r(K3,"chunks"),K3.forEach(t),_1=r(ht," is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),ht.forEach(t),pf=f(e),_s=s(e,"P",{});var J3=i(_s);y1=r(J3,"There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),J3.forEach(t),hf=f(e),ys=s(e,"P",{});var Q3=i(ys);b1=r(Q3,"Traditional Pipeline API solutions:"),Q3.forEach(t),ff=f(e),S=s(e,"UL",{});var ft=i(S);Cr=s(ft,"LI",{});var e0=i(Cr);g1=r(e0,"PyTorch"),e0.forEach(t),E1=f(ft),Rr=s(ft,"LI",{});var t0=i(Rr);D1=r(t0,"FairScale"),t0.forEach(t),L1=f(ft),Zr=s(ft,"LI",{});var l0=i(Zr);T1=r(l0,"DeepSpeed"),l0.forEach(t),k1=f(ft),Br=s(ft,"LI",{});var a0=i(Br);G1=r(a0,"Megatron-LM"),a0.forEach(t),ft.forEach(t),cf=f(e),bs=s(e,"P",{});var s0=i(bs);U1=r(s0,"Modern solutions:"),s0.forEach(t),df=f(e),We=s(e,"UL",{});var gd=i(We);Vr=s(gd,"LI",{});var i0=i(Vr);I1=r(i0,"Varuna"),i0.forEach(t),S1=f(gd),qr=s(gd,"LI",{});var o0=i(qr);O1=r(o0,"Sagemaker"),o0.forEach(t),gd.forEach(t),uf=f(e),gs=s(e,"P",{});var r0=i(gs);A1=r(r0,"Problems with traditional Pipeline API solutions:"),r0.forEach(t),mf=f(e),O=s(e,"UL",{});var ct=i(O);Xt=s(ct,"LI",{});var Ed=i(Xt);j1=r(Ed,"have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Fr=s(Ed,"CODE",{});var n0=i(Fr);x1=r(n0,"nn.Sequential"),n0.forEach(t),M1=r(Ed," sequence of the same, which may require changes to the design of the model."),Ed.forEach(t),$1=f(ct),Es=s(ct,"LI",{});var Ob=i(Es);N1=r(Ob,"currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),Kt=s(Ob,"A",{href:!0,rel:!0});var p0=i(Kt);z1=r(p0,"https://github.com/pytorch/pytorch/pull/50693"),p0.forEach(t),Ob.forEach(t),C1=f(ct),Wr=s(ct,"LI",{});var h0=i(Wr);R1=r(h0,"conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),h0.forEach(t),Z1=f(ct),Hr=s(ct,"LI",{});var f0=i(Hr);B1=r(f0,"have to arrange each layer so that the output of one model becomes an input to the other model."),f0.forEach(t),ct.forEach(t),vf=f(e),Ds=s(e,"P",{});var c0=i(Ds);V1=r(c0,"We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),c0.forEach(t),Pf=f(e),Ls=s(e,"P",{});var d0=i(Ls);q1=r(d0,"Implementations:"),d0.forEach(t),wf=f(e),u=s(e,"UL",{});var G=i(u);Jt=s(G,"LI",{});var Dd=i(Jt);Qt=s(Dd,"A",{href:!0,rel:!0});var u0=i(Qt);F1=r(u0,"Pytorch"),u0.forEach(t),W1=r(Dd," (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),el=s(Dd,"A",{href:!0,rel:!0});var m0=i(el);H1=r(m0,"examples"),m0.forEach(t),Dd.forEach(t),Y1=f(G),Yr=s(G,"LI",{});var v0=i(Yr);tl=s(v0,"A",{href:!0,rel:!0});var P0=i(tl);X1=r(P0,"FairScale"),P0.forEach(t),v0.forEach(t),K1=f(G),Xr=s(G,"LI",{});var w0=i(Xr);ll=s(w0,"A",{href:!0,rel:!0});var _0=i(ll);J1=r(_0,"DeepSpeed"),_0.forEach(t),w0.forEach(t),Q1=f(G),Ts=s(G,"LI",{});var Ab=i(Ts);al=s(Ab,"A",{href:!0,rel:!0});var y0=i(al);ew=r(y0,"Megatron-LM"),y0.forEach(t),tw=r(Ab," has an internal implementation - no API."),Ab.forEach(t),lw=f(G),Kr=s(G,"LI",{});var b0=i(Kr);sl=s(b0,"A",{href:!0,rel:!0});var g0=i(sl);aw=r(g0,"Varuna"),g0.forEach(t),b0.forEach(t),sw=f(G),ks=s(G,"LI",{});var jb=i(ks);il=s(jb,"A",{href:!0,rel:!0});var E0=i(il);iw=r(E0,"SageMaker"),E0.forEach(t),ow=r(jb," - this is a proprietary solution that can only be used on AWS."),jb.forEach(t),rw=f(G),Gs=s(G,"LI",{});var xb=i(Gs);ol=s(xb,"A",{href:!0,rel:!0});var D0=i(ol);nw=r(D0,"OSLO"),D0.forEach(t),pw=r(xb," - this is implemented based on the Hugging Face Transformers."),xb.forEach(t),G.forEach(t),_f=f(e),He=s(e,"P",{});var Ld=i(He);hw=r(Ld,"\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),Jr=s(Ld,"CODE",{});var L0=i(Jr);fw=r(L0,"nn.Sequential"),L0.forEach(t),cw=r(Ld," and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),Ld.forEach(t),yf=f(e),Us=s(e,"P",{});var T0=i(Us);dw=r(T0,"Other approaches:"),T0.forEach(t),bf=f(e),we=s(e,"P",{});var kp=i(we);uw=r(kp,"DeepSpeed, Varuna and SageMaker use the concept of an "),rl=s(kp,"A",{href:!0,rel:!0});var k0=i(rl);mw=r(k0,"Interleaved Pipeline"),k0.forEach(t),vw=f(kp),Is=s(kp,"IMG",{src:!0,alt:!0}),kp.forEach(t),gf=f(e),Ss=s(e,"P",{});var G0=i(Ss);Pw=r(G0,"Here the bubble (idle time) is further minimized by prioritizing backward passes."),G0.forEach(t),Ef=f(e),Os=s(e,"P",{});var U0=i(Os);ww=r(U0,"Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),U0.forEach(t),Df=f(e),Ye=s(e,"P",{});var Td=i(Ye);_w=r(Td,"OSLO has pipeline parallelism implementation based on the Transformers without "),Qr=s(Td,"CODE",{});var I0=i(Qr);yw=r(I0,"nn.Sequential"),I0.forEach(t),bw=r(Td," converting."),Td.forEach(t),Lf=f(e),_e=s(e,"H2",{class:!0});var kd=i(_e);Xe=s(kd,"A",{id:!0,class:!0,href:!0});var S0=i(Xe);en=s(S0,"SPAN",{});var O0=i(en);v(nl.$$.fragment,O0),O0.forEach(t),S0.forEach(t),gw=f(kd),tn=s(kd,"SPAN",{});var A0=i(tn);Ew=r(A0,"Tensor Parallelism"),A0.forEach(t),kd.forEach(t),Tf=f(e),As=s(e,"P",{});var j0=i(As);Dw=r(j0,"In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),j0.forEach(t),kf=f(e),B=s(e,"P",{});var Ji=i(B);Lw=r(Ji,"In this section we use concepts and diagrams from the "),pl=s(Ji,"A",{href:!0,rel:!0});var x0=i(pl);Tw=r(x0,"Megatron-LM"),x0.forEach(t),kw=r(Ji," paper: "),hl=s(Ji,"A",{href:!0,rel:!0});var M0=i(hl);Gw=r(M0,"Efficient Large-Scale Language Model Training on GPU Clusters"),M0.forEach(t),Uw=r(Ji,"."),Ji.forEach(t),Gf=f(e),V=s(e,"P",{});var Qi=i(V);Iw=r(Qi,"The main building block of any transformer is a fully connected "),ln=s(Qi,"CODE",{});var $0=i(ln);Sw=r($0,"nn.Linear"),$0.forEach(t),Ow=r(Qi," followed by a nonlinear activation "),an=s(Qi,"CODE",{});var N0=i(an);Aw=r(N0,"GeLU"),N0.forEach(t),jw=r(Qi,"."),Qi.forEach(t),Uf=f(e),L=s(e,"P",{});var K=i(L);xw=r(K,"Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),sn=s(K,"CODE",{});var z0=i(sn);Mw=r(z0,"Y = GeLU(XA)"),z0.forEach(t),$w=r(K,", where "),on=s(K,"CODE",{});var C0=i(on);Nw=r(C0,"X"),C0.forEach(t),zw=r(K," and "),rn=s(K,"CODE",{});var R0=i(rn);Cw=r(R0,"Y"),R0.forEach(t),Rw=r(K," are the input and output vectors, and "),nn=s(K,"CODE",{});var Z0=i(nn);Zw=r(Z0,"A"),Z0.forEach(t),Bw=r(K," is the weight matrix."),K.forEach(t),If=f(e),fl=s(e,"P",{});var Mb=i(fl);Vw=r(Mb,`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),js=s(Mb,"IMG",{src:!0,alt:!0}),Mb.forEach(t),Sf=f(e),d=s(e,"P",{});var b=i(d);qw=r(b,"If we split the weight matrix "),pn=s(b,"CODE",{});var B0=i(pn);Fw=r(B0,"A"),B0.forEach(t),Ww=r(b," column-wise across "),hn=s(b,"CODE",{});var V0=i(hn);Hw=r(V0,"N"),V0.forEach(t),Yw=r(b," GPUs and perform matrix multiplications "),fn=s(b,"CODE",{});var q0=i(fn);Xw=r(q0,"XA_1"),q0.forEach(t),Kw=r(b," through "),cn=s(b,"CODE",{});var F0=i(cn);Jw=r(F0,"XA_n"),F0.forEach(t),Qw=r(b," in parallel, then we will end up with "),dn=s(b,"CODE",{});var W0=i(dn);e2=r(W0,"N"),W0.forEach(t),t2=r(b," output vectors "),un=s(b,"CODE",{});var H0=i(un);l2=r(H0,"Y_1, Y_2, ..., Y_n"),H0.forEach(t),a2=r(b," which can be fed into "),mn=s(b,"CODE",{});var Y0=i(mn);s2=r(Y0,"GeLU"),Y0.forEach(t),i2=r(b,` independently:
`),xs=s(b,"IMG",{src:!0,alt:!0}),b.forEach(t),Of=f(e),cl=s(e,"P",{});var $b=i(cl);o2=r($b,`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),Ms=s($b,"IMG",{src:!0,alt:!0}),$b.forEach(t),Af=f(e),dl=s(e,"P",{});var Nb=i(dl);r2=r(Nb,`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),$s=s(Nb,"IMG",{src:!0,alt:!0}),Nb.forEach(t),jf=f(e),Ns=s(e,"P",{});var X0=i(Ns);n2=r(X0,"Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),X0.forEach(t),xf=f(e),q=s(e,"P",{});var eo=i(q);p2=r(eo,"This section is based on the original much more "),ul=s(eo,"A",{href:!0,rel:!0});var K0=i(ul);h2=r(K0,"detailed TP overview"),K0.forEach(t),f2=r(eo,`.
by `),ml=s(eo,"A",{href:!0,rel:!0});var J0=i(ml);c2=r(J0,"@anton-l"),J0.forEach(t),d2=r(eo,"."),eo.forEach(t),Mf=f(e),zs=s(e,"P",{});var Q0=i(zs);u2=r(Q0,"SageMaker combines TP with DP for a more efficient processing."),Q0.forEach(t),$f=f(e),Cs=s(e,"P",{});var e4=i(Cs);m2=r(e4,"Alternative names:"),e4.forEach(t),Nf=f(e),Rs=s(e,"UL",{});var t4=i(Rs);Zs=s(t4,"LI",{});var zb=i(Zs);v2=r(zb,"DeepSpeed calls it "),vl=s(zb,"A",{href:!0,rel:!0});var l4=i(vl);P2=r(l4,"tensor slicing"),l4.forEach(t),zb.forEach(t),t4.forEach(t),zf=f(e),Bs=s(e,"P",{});var a4=i(Bs);w2=r(a4,"Implementations:"),a4.forEach(t),Cf=f(e),A=s(e,"UL",{});var dt=i(A);Vs=s(dt,"LI",{});var Cb=i(Vs);Pl=s(Cb,"A",{href:!0,rel:!0});var s4=i(Pl);_2=r(s4,"Megatron-LM"),s4.forEach(t),y2=r(Cb," has an internal implementation, as it\u2019s very model-specific"),Cb.forEach(t),b2=f(dt),qs=s(dt,"LI",{});var Rb=i(qs);wl=s(Rb,"A",{href:!0,rel:!0});var i4=i(wl);g2=r(i4,"parallelformers"),i4.forEach(t),E2=r(Rb," (only inference at the moment)"),Rb.forEach(t),D2=f(dt),Fs=s(dt,"LI",{});var Zb=i(Fs);_l=s(Zb,"A",{href:!0,rel:!0});var o4=i(_l);L2=r(o4,"SageMaker"),o4.forEach(t),T2=r(Zb," - this is a proprietary solution that can only be used on AWS."),Zb.forEach(t),k2=f(dt),Ws=s(dt,"LI",{});var Bb=i(Ws);yl=s(Bb,"A",{href:!0,rel:!0});var r4=i(yl);G2=r(r4,"OSLO"),r4.forEach(t),U2=r(Bb," has the tensor parallelism implementation based on the Transformers."),Bb.forEach(t),dt.forEach(t),Rf=f(e),Hs=s(e,"P",{});var n4=i(Hs);I2=r(n4,"\u{1F917} Transformers status:"),n4.forEach(t),Zf=f(e),F=s(e,"UL",{});var to=i(F);vn=s(to,"LI",{});var p4=i(vn);S2=r(p4,"core: not yet implemented in the core"),p4.forEach(t),O2=f(to),bl=s(to,"LI",{});var Gd=i(bl);A2=r(Gd,"but if you want inference "),gl=s(Gd,"A",{href:!0,rel:!0});var h4=i(gl);j2=r(h4,"parallelformers"),h4.forEach(t),x2=r(Gd," provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),Gd.forEach(t),M2=f(to),Ys=s(to,"LI",{});var Vb=i(Ys);$2=r(Vb,"Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),El=s(Vb,"A",{href:!0,rel:!0});var f4=i(El);N2=r(f4,"here"),f4.forEach(t),Vb.forEach(t),to.forEach(t),Bf=f(e),ye=s(e,"H2",{class:!0});var Ud=i(ye);Ke=s(Ud,"A",{id:!0,class:!0,href:!0});var c4=i(Ke);Pn=s(c4,"SPAN",{});var d4=i(Pn);v(Dl.$$.fragment,d4),d4.forEach(t),c4.forEach(t),z2=f(Ud),wn=s(Ud,"SPAN",{});var u4=i(wn);C2=r(u4,"DP+PP"),u4.forEach(t),Ud.forEach(t),Vf=f(e),Je=s(e,"P",{});var Id=i(Je);R2=r(Id,"The following diagram from the DeepSpeed "),Ll=s(Id,"A",{href:!0,rel:!0});var m4=i(Ll);Z2=r(m4,"pipeline tutorial"),m4.forEach(t),B2=r(Id," demonstrates how one combines DP with PP."),Id.forEach(t),qf=f(e),Xs=s(e,"P",{});var v4=i(Xs);Ks=s(v4,"IMG",{src:!0,alt:!0}),v4.forEach(t),Ff=f(e),Js=s(e,"P",{});var P4=i(Js);V2=r(P4,"Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),P4.forEach(t),Wf=f(e),Qs=s(e,"P",{});var w4=i(Qs);q2=r(w4,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),w4.forEach(t),Hf=f(e),ei=s(e,"P",{});var _4=i(ei);F2=r(_4,"Implementations:"),_4.forEach(t),Yf=f(e),T=s(e,"UL",{});var J=i(T);_n=s(J,"LI",{});var y4=i(_n);Tl=s(y4,"A",{href:!0,rel:!0});var b4=i(Tl);W2=r(b4,"DeepSpeed"),b4.forEach(t),y4.forEach(t),H2=f(J),yn=s(J,"LI",{});var g4=i(yn);kl=s(g4,"A",{href:!0,rel:!0});var E4=i(kl);Y2=r(E4,"Megatron-LM"),E4.forEach(t),g4.forEach(t),X2=f(J),bn=s(J,"LI",{});var D4=i(bn);Gl=s(D4,"A",{href:!0,rel:!0});var L4=i(Gl);K2=r(L4,"Varuna"),L4.forEach(t),D4.forEach(t),J2=f(J),gn=s(J,"LI",{});var T4=i(gn);Ul=s(T4,"A",{href:!0,rel:!0});var k4=i(Ul);Q2=r(k4,"SageMaker"),k4.forEach(t),T4.forEach(t),e_=f(J),En=s(J,"LI",{});var G4=i(En);Il=s(G4,"A",{href:!0,rel:!0});var U4=i(Il);t_=r(U4,"OSLO"),U4.forEach(t),G4.forEach(t),J.forEach(t),Xf=f(e),ti=s(e,"P",{});var I4=i(ti);l_=r(I4,"\u{1F917} Transformers status: not yet implemented"),I4.forEach(t),Kf=f(e),be=s(e,"H2",{class:!0});var Sd=i(be);Qe=s(Sd,"A",{id:!0,class:!0,href:!0});var S4=i(Qe);Dn=s(S4,"SPAN",{});var O4=i(Dn);v(Sl.$$.fragment,O4),O4.forEach(t),S4.forEach(t),a_=f(Sd),Ln=s(Sd,"SPAN",{});var A4=i(Ln);s_=r(A4,"DP+PP+TP"),A4.forEach(t),Sd.forEach(t),Jf=f(e),li=s(e,"P",{});var j4=i(li);i_=r(j4,"To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),j4.forEach(t),Qf=f(e),ai=s(e,"P",{});var x4=i(ai);si=s(x4,"IMG",{src:!0,alt:!0}),x4.forEach(t),ec=f(e),et=s(e,"P",{});var Od=i(et);o_=r(Od,"This diagram is from a blog post "),Ol=s(Od,"A",{href:!0,rel:!0});var M4=i(Ol);r_=r(M4,"3D parallelism: Scaling to trillion-parameter models"),M4.forEach(t),n_=r(Od,", which is a good read as well."),Od.forEach(t),tc=f(e),ii=s(e,"P",{});var $4=i(ii);p_=r($4,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),$4.forEach(t),lc=f(e),oi=s(e,"P",{});var N4=i(oi);h_=r(N4,"Implementations:"),N4.forEach(t),ac=f(e),k=s(e,"UL",{});var Q=i(k);ri=s(Q,"LI",{});var qb=i(ri);Al=s(qb,"A",{href:!0,rel:!0});var z4=i(Al);f_=r(z4,"DeepSpeed"),z4.forEach(t),c_=r(qb," - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),qb.forEach(t),d_=f(Q),Tn=s(Q,"LI",{});var C4=i(Tn);jl=s(C4,"A",{href:!0,rel:!0});var R4=i(jl);u_=r(R4,"Megatron-LM"),R4.forEach(t),C4.forEach(t),m_=f(Q),kn=s(Q,"LI",{});var Z4=i(kn);xl=s(Z4,"A",{href:!0,rel:!0});var B4=i(xl);v_=r(B4,"Varuna"),B4.forEach(t),Z4.forEach(t),P_=f(Q),Gn=s(Q,"LI",{});var V4=i(Gn);Ml=s(V4,"A",{href:!0,rel:!0});var q4=i(Ml);w_=r(q4,"SageMaker"),q4.forEach(t),V4.forEach(t),__=f(Q),Un=s(Q,"LI",{});var F4=i(Un);$l=s(F4,"A",{href:!0,rel:!0});var W4=i($l);y_=r(W4,"OSLO"),W4.forEach(t),F4.forEach(t),Q.forEach(t),sc=f(e),ni=s(e,"P",{});var H4=i(ni);b_=r(H4,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),H4.forEach(t),ic=f(e),ge=s(e,"H2",{class:!0});var Ad=i(ge);tt=s(Ad,"A",{id:!0,class:!0,href:!0});var Y4=i(tt);In=s(Y4,"SPAN",{});var X4=i(In);v(Nl.$$.fragment,X4),X4.forEach(t),Y4.forEach(t),g_=f(Ad),Sn=s(Ad,"SPAN",{});var K4=i(Sn);E_=r(K4,"ZeRO DP+PP+TP"),K4.forEach(t),Ad.forEach(t),oc=f(e),lt=s(e,"P",{});var jd=i(lt);D_=r(jd,"One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),pi=s(jd,"A",{href:!0});var J4=i(pi);L_=r(J4,"ZeRO Data Parallelism"),J4.forEach(t),T_=r(jd,". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),jd.forEach(t),rc=f(e),hi=s(e,"P",{});var Q4=i(hi);k_=r(Q4,"When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),Q4.forEach(t),nc=f(e),fi=s(e,"P",{});var e5=i(fi);G_=r(e5,"While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),e5.forEach(t),pc=f(e),at=s(e,"P",{});var xd=i(at);U_=r(xd,"In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),On=s(xd,"CODE",{});var t5=i(On);I_=r(t5,"1/PP"),t5.forEach(t),S_=r(xd,", and so gradient sharding savings on top of that are less significant than pure DP."),xd.forEach(t),hc=f(e),ci=s(e,"P",{});var l5=i(ci);O_=r(l5,"ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),l5.forEach(t),fc=f(e),di=s(e,"P",{});var a5=i(di);A_=r(a5,"And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),a5.forEach(t),cc=f(e),ui=s(e,"P",{});var s5=i(ui);j_=r(s5,"Implementations:"),s5.forEach(t),dc=f(e),st=s(e,"UL",{});var Md=i(st);it=s(Md,"LI",{});var Gp=i(it);zl=s(Gp,"A",{href:!0,rel:!0});var i5=i(zl);x_=r(i5,"Megatron-DeepSpeed"),i5.forEach(t),M_=r(Gp," and "),Cl=s(Gp,"A",{href:!0,rel:!0});var o5=i(Cl);$_=r(o5,"Megatron-Deepspeed from BigScience"),o5.forEach(t),N_=r(Gp,", which is the fork of the former repo."),Gp.forEach(t),z_=f(Md),An=s(Md,"LI",{});var r5=i(An);Rl=s(r5,"A",{href:!0,rel:!0});var n5=i(Rl);C_=r(n5,"OSLO"),n5.forEach(t),r5.forEach(t),Md.forEach(t),uc=f(e),mi=s(e,"P",{});var p5=i(mi);R_=r(p5,"Important papers:"),p5.forEach(t),mc=f(e),vi=s(e,"UL",{});var h5=i(vi);jn=s(h5,"LI",{});var f5=i(jn);Zl=s(f5,"A",{href:!0,rel:!0});var c5=i(Zl);Z_=r(c5,"Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),c5.forEach(t),f5.forEach(t),h5.forEach(t),vc=f(e),Pi=s(e,"P",{});var d5=i(Pi);B_=r(d5,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),d5.forEach(t),Pc=f(e),Ee=s(e,"H2",{class:!0});var $d=i(Ee);ot=s($d,"A",{id:!0,class:!0,href:!0});var u5=i(ot);xn=s(u5,"SPAN",{});var m5=i(xn);v(Bl.$$.fragment,m5),m5.forEach(t),u5.forEach(t),V_=f($d),Mn=s($d,"SPAN",{});var v5=i(Mn);q_=r(v5,"FlexFlow"),v5.forEach(t),$d.forEach(t),wc=f(e),Vl=s(e,"P",{});var Fb=i(Vl);ql=s(Fb,"A",{href:!0,rel:!0});var P5=i(ql);F_=r(P5,"FlexFlow"),P5.forEach(t),W_=r(Fb," also solves the parallelization problem in a slightly different approach."),Fb.forEach(t),_c=f(e),Fl=s(e,"P",{});var Wb=i(Fl);H_=r(Wb,"Paper: "),Wl=s(Wb,"A",{href:!0,rel:!0});var w5=i(Wl);Y_=r(w5,"\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),w5.forEach(t),Wb.forEach(t),yc=f(e),wi=s(e,"P",{});var _5=i(wi);X_=r(_5,"It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),_5.forEach(t),bc=f(e),j=s(e,"OL",{});var ut=i(j);$n=s(ut,"LI",{});var y5=i($n);K_=r(y5,"Sample = Data Parallelism (sample-wise parallel)"),y5.forEach(t),J_=f(ut),Nn=s(ut,"LI",{});var b5=i(Nn);Q_=r(b5,"Operator = Parallelize a single operation into several sub-operations"),b5.forEach(t),ey=f(ut),zn=s(ut,"LI",{});var g5=i(zn);ty=r(g5,"Attribute = Data Parallelism (length-wise parallel)"),g5.forEach(t),ly=f(ut),Cn=s(ut,"LI",{});var E5=i(Cn);ay=r(E5,"Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),E5.forEach(t),ut.forEach(t),gc=f(e),_i=s(e,"P",{});var D5=i(_i);sy=r(D5,"Examples:"),D5.forEach(t),Ec=f(e),yi=s(e,"UL",{});var L5=i(yi);Rn=s(L5,"LI",{});var T5=i(Rn);iy=r(T5,"Sample"),T5.forEach(t),L5.forEach(t),Dc=f(e),bi=s(e,"P",{});var k5=i(bi);oy=r(k5,"Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),k5.forEach(t),Lc=f(e),gi=s(e,"UL",{});var G5=i(gi);Zn=s(G5,"LI",{});var U5=i(Zn);ry=r(U5,"Operator"),U5.forEach(t),G5.forEach(t),Tc=f(e),Ei=s(e,"P",{});var I5=i(Ei);ny=r(I5,"If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),I5.forEach(t),kc=f(e),Di=s(e,"UL",{});var S5=i(Di);Bn=s(S5,"LI",{});var O5=i(Bn);py=r(O5,"Attribute"),O5.forEach(t),S5.forEach(t),Gc=f(e),Li=s(e,"P",{});var A5=i(Li);hy=r(A5,"We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),A5.forEach(t),Uc=f(e),Ti=s(e,"UL",{});var j5=i(Ti);Vn=s(j5,"LI",{});var x5=i(Vn);fy=r(x5,"Parameter"),x5.forEach(t),j5.forEach(t),Ic=f(e),ki=s(e,"P",{});var M5=i(ki);cy=r(M5,"It is similar with tensor model parallelism or naive layer-wise model parallelism."),M5.forEach(t),Sc=f(e),Gi=s(e,"P",{});var $5=i(Gi);Ui=s($5,"IMG",{src:!0,alt:!0}),$5.forEach(t),Oc=f(e),Ii=s(e,"P",{});var N5=i(Ii);dy=r(N5,"The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),N5.forEach(t),Ac=f(e),Si=s(e,"P",{});var z5=i(Si);uy=r(z5,"One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),z5.forEach(t),jc=f(e),Oi=s(e,"P",{});var C5=i(Oi);my=r(C5,"So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),C5.forEach(t),xc=f(e),rt=s(e,"P",{});var Nd=i(rt);vy=r(Nd,"\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),Hl=s(Nd,"A",{href:!0,rel:!0});var R5=i(Hl);Py=r(R5,"transformers.utils.fx"),R5.forEach(t),wy=r(Nd,", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Nd.forEach(t),Mc=f(e),De=s(e,"H2",{class:!0});var zd=i(De);nt=s(zd,"A",{id:!0,class:!0,href:!0});var Z5=i(nt);qn=s(Z5,"SPAN",{});var B5=i(qn);v(Yl.$$.fragment,B5),B5.forEach(t),Z5.forEach(t),_y=f(zd),Fn=s(zd,"SPAN",{});var V5=i(Fn);yy=r(V5,"Which Strategy To Use When"),V5.forEach(t),zd.forEach(t),$c=f(e),Ai=s(e,"P",{});var q5=i(Ai);by=r(q5,"Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),q5.forEach(t),Nc=f(e),ji=s(e,"P",{});var F5=i(ji);Wn=s(F5,"STRONG",{});var W5=i(Wn);gy=r(W5,"\u21E8 Single GPU"),W5.forEach(t),F5.forEach(t),zc=f(e),W=s(e,"UL",{});var lo=i(W);Xl=s(lo,"LI",{});var Cd=i(Xl);Hn=s(Cd,"P",{});var H5=i(Hn);Ey=r(H5,"Model fits onto a single GPU:"),H5.forEach(t),Dy=f(Cd),Yn=s(Cd,"OL",{});var Y5=i(Yn);Xn=s(Y5,"LI",{});var X5=i(Xn);Ly=r(X5,"Normal use"),X5.forEach(t),Y5.forEach(t),Cd.forEach(t),Ty=f(lo),Kl=s(lo,"LI",{});var Rd=i(Kl);Kn=s(Rd,"P",{});var K5=i(Kn);ky=r(K5,"Model doesn\u2019t fit onto a single GPU:"),K5.forEach(t),Gy=f(Rd),Jl=s(Rd,"OL",{});var Zd=i(Jl);Jn=s(Zd,"LI",{});var J5=i(Jn);Uy=r(J5,"ZeRO + Offload CPU and optionally NVMe"),J5.forEach(t),Iy=f(Zd),Qn=s(Zd,"LI",{});var Q5=i(Qn);Sy=r(Q5,"as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),Q5.forEach(t),Zd.forEach(t),Rd.forEach(t),Oy=f(lo),ep=s(lo,"LI",{});var e6=i(ep);tp=s(e6,"P",{});var t6=i(tp);Ay=r(t6,"Largest Layer not fitting into a single GPU:"),t6.forEach(t),e6.forEach(t),lo.forEach(t),Cc=f(e),xi=s(e,"OL",{});var l6=i(xi);Le=s(l6,"LI",{});var ao=i(Le);jy=r(ao,"ZeRO - Enable "),Ql=s(ao,"A",{href:!0,rel:!0});var a6=i(Ql);xy=r(a6,"Memory Centric Tiling"),a6.forEach(t),My=r(ao," (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),lp=s(ao,"CODE",{});var s6=i(lp);$y=r(s6,"torch.nn.Linear"),s6.forEach(t),Ny=r(ao," needs to be done by the user."),ao.forEach(t),l6.forEach(t),Rc=f(e),Mi=s(e,"P",{});var i6=i(Mi);ap=s(i6,"STRONG",{});var o6=i(ap);zy=r(o6,"\u21E8 Single Node / Multi-GPU"),o6.forEach(t),i6.forEach(t),Zc=f(e),H=s(e,"UL",{});var so=i(H);ea=s(so,"LI",{});var Bd=i(ea);sp=s(Bd,"P",{});var r6=i(sp);Cy=r(r6,"Model fits onto a single GPU:"),r6.forEach(t),Ry=f(Bd),ta=s(Bd,"OL",{});var Vd=i(ta);ip=s(Vd,"LI",{});var n6=i(ip);Zy=r(n6,"DDP - Distributed DP"),n6.forEach(t),By=f(Vd),op=s(Vd,"LI",{});var p6=i(op);Vy=r(p6,"ZeRO - may or may not be faster depending on the situation and configuration used"),p6.forEach(t),Vd.forEach(t),Bd.forEach(t),qy=f(so),la=s(so,"LI",{});var qd=i(la);rp=s(qd,"P",{});var h6=i(rp);Fy=r(h6,"Model doesn\u2019t fit onto a single GPU:"),h6.forEach(t),Wy=f(qd),Te=s(qd,"OL",{});var io=i(Te);np=s(io,"LI",{});var f6=i(np);pp=s(f6,"P",{});var c6=i(pp);Hy=r(c6,"PP"),c6.forEach(t),f6.forEach(t),Yy=f(io),hp=s(io,"LI",{});var d6=i(hp);fp=s(d6,"P",{});var u6=i(fp);Xy=r(u6,"ZeRO"),u6.forEach(t),d6.forEach(t),Ky=f(io),ke=s(io,"LI",{});var oo=i(ke);cp=s(oo,"P",{});var m6=i(cp);Jy=r(m6,"TP"),m6.forEach(t),Qy=f(oo),dp=s(oo,"P",{});var v6=i(dp);eb=r(v6,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),v6.forEach(t),tb=f(oo),up=s(oo,"P",{});var P6=i(up);lb=r(P6,"TP is almost always used within a single node. That is TP size <= gpus per node."),P6.forEach(t),oo.forEach(t),io.forEach(t),qd.forEach(t),ab=f(so),aa=s(so,"LI",{});var Fd=i(aa);mp=s(Fd,"P",{});var w6=i(mp);sb=r(w6,"Largest Layer not fitting into a single GPU:"),w6.forEach(t),ib=f(Fd),sa=s(Fd,"OL",{});var Wd=i(sa);vp=s(Wd,"LI",{});var _6=i(vp);ob=r(_6,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),_6.forEach(t),rb=f(Wd),Pp=s(Wd,"LI",{});var y6=i(Pp);nb=r(y6,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),y6.forEach(t),Wd.forEach(t),Fd.forEach(t),so.forEach(t),Bc=f(e),$i=s(e,"P",{});var b6=i($i);wp=s(b6,"STRONG",{});var g6=i(wp);pb=r(g6,"\u21E8 Multi-Node / Multi-GPU"),g6.forEach(t),b6.forEach(t),Vc=f(e),pt=s(e,"UL",{});var Hd=i(pt);ia=s(Hd,"LI",{});var Yd=i(ia);_p=s(Yd,"P",{});var E6=i(_p);hb=r(E6,"When you have fast inter-node connectivity:"),E6.forEach(t),fb=f(Yd),oa=s(Yd,"OL",{});var Xd=i(oa);yp=s(Xd,"LI",{});var D6=i(yp);cb=r(D6,"ZeRO - as it requires close to no modifications to the model"),D6.forEach(t),db=f(Xd),bp=s(Xd,"LI",{});var L6=i(bp);ub=r(L6,"PP+TP+DP - less communications, but requires massive changes to the model"),L6.forEach(t),Xd.forEach(t),Yd.forEach(t),mb=f(Hd),ra=s(Hd,"LI",{});var Kd=i(ra);gp=s(Kd,"P",{});var T6=i(gp);vb=r(T6,"when you have slow inter-node connectivity and still low on GPU memory:"),T6.forEach(t),Pb=f(Kd),Ep=s(Kd,"OL",{});var k6=i(Ep);Dp=s(k6,"LI",{});var G6=i(Dp);wb=r(G6,"DP+PP+TP+ZeRO-1"),G6.forEach(t),k6.forEach(t),Kd.forEach(t),Hd.forEach(t),this.h()},h(){c(te,"name","hf:doc:metadata"),c(te,"content",JSON.stringify(M6)),c(Ge,"id","efficient-training-on-multiple-gpus"),c(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ge,"href","#efficient-training-on-multiple-gpus"),c(le,"class","relative group"),c(Ue,"id","concepts"),c(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ue,"href","#concepts"),c(ae,"class","relative group"),c(Ie,"id","scalability-strategy"),c(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ie,"href","#scalability-strategy"),c(se,"class","relative group"),c(Oe,"id","data-parallelism"),c(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oe,"href","#data-parallelism"),c(re,"class","relative group"),c(Ae,"id","dp-vs-ddp"),c(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ae,"href","#dp-vs-ddp"),c(ne,"class","relative group"),c(Ut,"href","https://pytorch.org/docs/master/notes/ddp.html"),c(Ut,"rel","nofollow"),c(At,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(At,"rel","nofollow"),c(xt,"href","https://pytorch.org/docs/master/distributed.html"),c(xt,"rel","nofollow"),c(Mt,"href","https://www.telesens.co/2019/04/04/distributed-data-parallel-training-using-pytorch-on-aws/"),c(Mt,"rel","nofollow"),c(Ga,"align","left"),c(Ua,"align","right"),c(Ia,"align","left"),c(Sa,"align","right"),c(Oa,"align","left"),c(Aa,"align","right"),c(ja,"align","left"),c(xa,"align","right"),c(ze,"id","zero-data-parallelism"),c(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ze,"href","#zero-data-parallelism"),c(me,"class","relative group"),c(Ct,"href","https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/"),c(Ct,"rel","nofollow"),ee(Ca.src,Yb="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero.png")||c(Ca,"src",Yb),c(Ca,"alt","DeepSpeed-Image-1"),c(Vt,"href","https://www.deepspeed.ai/features/#the-zero-redundancy-optimizer"),c(Vt,"rel","nofollow"),c(qt,"href","https://github.com/facebookresearch/fairscale/#optimizer-state-sharding-zero"),c(qt,"rel","nofollow"),c(Ft,"href","main_classes/trainer#trainer-integrations"),c(Re,"id","naive-model-parallelism-vertical-and-pipeline-parallelism"),c(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Re,"href","#naive-model-parallelism-vertical-and-pipeline-parallelism"),c(Pe,"class","relative group"),c(Yt,"href","https://ai.googleblog.com/2019/03/introducing-gpipe-open-source-library.html"),c(Yt,"rel","nofollow"),ee(ms.src,Xb="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-gpipe-bubble.png")||c(ms,"src",Xb),c(ms,"alt","mp-pp"),c(Kt,"href","https://github.com/pytorch/pytorch/pull/50693"),c(Kt,"rel","nofollow"),c(Qt,"href","https://pytorch.org/docs/stable/pipeline.html"),c(Qt,"rel","nofollow"),c(el,"href","https://github.com/pytorch/pytorch/blob/master/benchmarks/distributed/pipeline/pipe.py"),c(el,"rel","nofollow"),c(tl,"href","https://fairscale.readthedocs.io/en/latest/tutorials/pipe.html"),c(tl,"rel","nofollow"),c(ll,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(ll,"rel","nofollow"),c(al,"href","https://github.com/NVIDIA/Megatron-LM"),c(al,"rel","nofollow"),c(sl,"href","https://github.com/microsoft/varuna"),c(sl,"rel","nofollow"),c(il,"href","https://arxiv.org/abs/2111.05972"),c(il,"rel","nofollow"),c(ol,"href","https://github.com/tunib-ai/oslo"),c(ol,"rel","nofollow"),c(rl,"href","https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-core-features.html"),c(rl,"rel","nofollow"),ee(Is.src,Kb="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-sagemaker-interleaved-pipeline.png")||c(Is,"src",Kb),c(Is,"alt","interleaved-pipeline-execution"),c(Xe,"id","tensor-parallelism"),c(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xe,"href","#tensor-parallelism"),c(_e,"class","relative group"),c(pl,"href","https://github.com/NVIDIA/Megatron-LM"),c(pl,"rel","nofollow"),c(hl,"href","https://arxiv.org/abs/2104.04473"),c(hl,"rel","nofollow"),ee(js.src,Jb="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_gemm.png")||c(js,"src",Jb),c(js,"alt","Parallel GEMM"),ee(xs.src,Qb="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-independent-gelu.png")||c(xs,"src",Qb),c(xs,"alt","independent GeLU"),ee(Ms.src,eg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_shard_processing.png")||c(Ms,"src",eg),c(Ms,"alt","parallel shard processing"),ee($s.src,tg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_self_attention.png")||c($s,"src",tg),c($s,"alt","parallel self-attention"),c(ul,"href","https://github.com/huggingface/transformers/issues/10321#issuecomment-783543530"),c(ul,"rel","nofollow"),c(ml,"href","https://github.com/anton-l"),c(ml,"rel","nofollow"),c(vl,"href","https://www.deepspeed.ai/features/#model-parallelism"),c(vl,"rel","nofollow"),c(Pl,"href","https://github.com/NVIDIA/Megatron-LM"),c(Pl,"rel","nofollow"),c(wl,"href","https://github.com/tunib-ai/parallelformers"),c(wl,"rel","nofollow"),c(_l,"href","https://arxiv.org/abs/2111.05972"),c(_l,"rel","nofollow"),c(yl,"href","https://github.com/tunib-ai/oslo"),c(yl,"rel","nofollow"),c(gl,"href","https://github.com/tunib-ai/parallelformers"),c(gl,"rel","nofollow"),c(El,"href","https://www.deepspeed.ai/tutorials/inference-tutorial/"),c(El,"rel","nofollow"),c(Ke,"id","dppp"),c(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ke,"href","#dppp"),c(ye,"class","relative group"),c(Ll,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(Ll,"rel","nofollow"),ee(Ks.src,lg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero-dp-pp.png")||c(Ks,"src",lg),c(Ks,"alt","dp-pp-2d"),c(Tl,"href","https://github.com/microsoft/DeepSpeed"),c(Tl,"rel","nofollow"),c(kl,"href","https://github.com/NVIDIA/Megatron-LM"),c(kl,"rel","nofollow"),c(Gl,"href","https://github.com/microsoft/varuna"),c(Gl,"rel","nofollow"),c(Ul,"href","https://arxiv.org/abs/2111.05972"),c(Ul,"rel","nofollow"),c(Il,"href","https://github.com/tunib-ai/oslo"),c(Il,"rel","nofollow"),c(Qe,"id","dppptp"),c(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qe,"href","#dppptp"),c(be,"class","relative group"),ee(si.src,ag="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-deepspeed-3d.png")||c(si,"src",ag),c(si,"alt","dp-pp-tp-3d"),c(Ol,"href","https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/"),c(Ol,"rel","nofollow"),c(Al,"href","https://github.com/microsoft/DeepSpeed"),c(Al,"rel","nofollow"),c(jl,"href","https://github.com/NVIDIA/Megatron-LM"),c(jl,"rel","nofollow"),c(xl,"href","https://github.com/microsoft/varuna"),c(xl,"rel","nofollow"),c(Ml,"href","https://arxiv.org/abs/2111.05972"),c(Ml,"rel","nofollow"),c($l,"href","https://github.com/tunib-ai/oslo"),c($l,"rel","nofollow"),c(tt,"id","zero-dppptp"),c(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tt,"href","#zero-dppptp"),c(ge,"class","relative group"),c(pi,"href","#zero-data-parallelism"),c(zl,"href","https://github.com/microsoft/Megatron-DeepSpeed"),c(zl,"rel","nofollow"),c(Cl,"href","https://github.com/bigscience-workshop/Megatron-DeepSpeed"),c(Cl,"rel","nofollow"),c(Rl,"href","https://github.com/tunib-ai/oslo"),c(Rl,"rel","nofollow"),c(Zl,"href","https://arxiv.org/abs/2201.11990"),c(Zl,"rel","nofollow"),c(ot,"id","flexflow"),c(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ot,"href","#flexflow"),c(Ee,"class","relative group"),c(ql,"href","https://github.com/flexflow/FlexFlow"),c(ql,"rel","nofollow"),c(Wl,"href","https://arxiv.org/abs/1807.05358"),c(Wl,"rel","nofollow"),ee(Ui.src,sg="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-flexflow.jpeg")||c(Ui,"src",sg),c(Ui,"alt","flex-flow-soap"),c(Hl,"href","https://github.com/huggingface/transformers/blob/master/src/transformers/utils/fx.py"),c(Hl,"rel","nofollow"),c(nt,"id","which-strategy-to-use-when"),c(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nt,"href","#which-strategy-to-use-when"),c(De,"class","relative group"),c(Ql,"href","https://deepspeed.readthedocs.io/en/latest/zero3.html#memory-centric-tiling"),c(Ql,"rel","nofollow")},m(e,n){l(document.head,te),p(e,Ip,n),p(e,le,n),l(le,Ge),l(Ge,ro),P(mt,ro,null),l(le,Jd),l(le,no),l(no,Qd),p(e,Sp,n),p(e,na,n),l(na,eu),p(e,Op,n),p(e,pa,n),l(pa,tu),p(e,Ap,n),p(e,ae,n),l(ae,Ue),l(Ue,po),P(vt,po,null),l(ae,lu),l(ae,ho),l(ho,au),p(e,jp,n),p(e,ha,n),l(ha,su),p(e,xp,n),p(e,E,n),l(E,fa),l(fa,fo),l(fo,iu),l(fa,ou),l(E,ru),l(E,ca),l(ca,co),l(co,nu),l(ca,pu),l(E,hu),l(E,da),l(da,uo),l(uo,fu),l(da,cu),l(E,du),l(E,ua),l(ua,mo),l(mo,uu),l(ua,mu),l(E,vu),l(E,ma),l(ma,vo),l(vo,Pu),l(ma,wu),p(e,Mp,n),p(e,va,n),l(va,_u),p(e,$p,n),p(e,se,n),l(se,Ie),l(Ie,Po),P(Pt,Po,null),l(se,yu),l(se,wo),l(wo,bu),p(e,Np,n),p(e,Pa,n),l(Pa,_o),l(_o,gu),p(e,zp,n),p(e,M,n),l(M,wt),l(wt,yo),l(yo,Eu),l(wt,Du),l(wt,_t),l(_t,bo),l(bo,Lu),l(_t,Tu),l(_t,go),l(go,ku),l(M,Gu),l(M,yt),l(yt,Eo),l(Eo,Uu),l(yt,Iu),l(yt,ie),l(ie,Do),l(Do,Lo),l(Lo,Su),l(ie,Ou),l(ie,To),l(To,ko),l(ko,Au),l(ie,ju),l(ie,oe),l(oe,Go),l(Go,xu),l(oe,Mu),l(oe,Uo),l(Uo,$u),l(oe,Nu),l(oe,Io),l(Io,zu),l(M,Cu),l(M,bt),l(bt,So),l(So,Ru),l(bt,Zu),l(bt,gt),l(gt,Oo),l(Oo,Bu),l(gt,Vu),l(gt,Ao),l(Ao,qu),p(e,Cp,n),p(e,wa,n),l(wa,jo),l(jo,Fu),p(e,Rp,n),p(e,Se,n),l(Se,Et),l(Et,xo),l(xo,Wu),l(Et,Hu),l(Et,Dt),l(Dt,Mo),l(Mo,Yu),l(Dt,Xu),l(Dt,$o),l($o,Ku),l(Se,Ju),l(Se,Lt),l(Lt,No),l(No,Qu),l(Lt,em),l(Lt,zo),l(zo,Co),l(Co,tm),p(e,Zp,n),p(e,re,n),l(re,Oe),l(Oe,Ro),P(Tt,Ro,null),l(re,lm),l(re,Zo),l(Zo,am),p(e,Bp,n),p(e,$,n),l($,sm),l($,Bo),l(Bo,im),l($,om),l($,Vo),l(Vo,rm),l($,nm),p(e,Vp,n),p(e,ne,n),l(ne,Ae),l(Ae,qo),P(kt,qo,null),l(ne,pm),l(ne,Fo),l(Fo,hm),p(e,qp,n),p(e,pe,n),l(pe,Wo),l(Wo,fm),l(pe,cm),l(pe,Ho),l(Ho,dm),l(pe,um),p(e,Fp,n),p(e,je,n),l(je,Yo),l(Yo,mm),l(je,vm),l(je,Xo),l(Xo,Pm),p(e,Wp,n),p(e,_a,n),l(_a,wm),p(e,Hp,n),p(e,Gt,n),l(Gt,Ut),l(Ut,_m),l(Gt,ym),p(e,Yp,n),p(e,xe,n),l(xe,Ko),l(Ko,bm),l(xe,gm),l(xe,ya),l(ya,Em),l(ya,It),l(It,Jo),l(Jo,Dm),l(It,Lm),l(It,St),l(St,Tm),l(St,Qo),l(Qo,km),l(St,Gm),p(e,Xp,n),p(e,Ot,n),l(Ot,At),l(At,Um),l(Ot,Im),p(e,Kp,n),p(e,ba,n),l(ba,Sm),p(e,Jp,n),p(e,D,n),l(D,er),l(er,Om),l(D,Am),l(D,tr),l(tr,jm),l(D,xm),l(D,jt),l(jt,Mm),l(jt,lr),l(lr,$m),l(jt,Nm),l(D,zm),l(D,ga),l(ga,Cm),l(ga,ar),l(ar,Rm),l(D,Zm),l(D,sr),l(sr,Bm),p(e,Qp,n),p(e,Ea,n),l(Ea,Vm),p(e,eh,n),p(e,Me,n),l(Me,qm),l(Me,xt),l(xt,Fm),l(Me,Wm),p(e,th,n),p(e,Da,n),l(Da,Hm),p(e,lh,n),p(e,La,n),l(La,Ym),p(e,ah,n),p(e,Ta,n),l(Ta,Xm),p(e,sh,n),p(e,$e,n),l($e,Km),l($e,Mt),l(Mt,Jm),l($e,Qm),p(e,ih,n),p(e,ka,n),l(ka,ev),p(e,oh,n),p(e,Ne,n),l(Ne,ir),l(ir,he),l(he,Ga),l(Ga,tv),l(he,lv),l(he,or),l(or,av),l(he,sv),l(he,Ua),l(Ua,iv),l(Ne,ov),l(Ne,fe),l(fe,ce),l(ce,Ia),l(Ia,rv),l(ce,nv),l(ce,rr),l(rr,pv),l(ce,hv),l(ce,Sa),l(Sa,fv),l(fe,cv),l(fe,de),l(de,Oa),l(Oa,dv),l(de,uv),l(de,nr),l(nr,mv),l(de,vv),l(de,Aa),l(Aa,Pv),l(fe,wv),l(fe,ue),l(ue,ja),l(ja,_v),l(ue,yv),l(ue,pr),l(pr,bv),l(ue,gv),l(ue,xa),l(xa,Ev),p(e,rh,n),p(e,Ma,n),l(Ma,Dv),p(e,nh,n),p(e,$a,n),l($a,Lv),p(e,ph,n),p(e,Na,n),l(Na,Tv),p(e,hh,n),p(e,za,n),l(za,kv),p(e,fh,n),p(e,$t,n),l($t,hr),l(hr,Gv),l($t,Uv),p(e,ch,n),P(Nt,e,n),p(e,dh,n),p(e,g,n),l(g,Iv),l(g,fr),l(fr,Sv),l(g,Ov),l(g,cr),l(cr,Av),l(g,jv),l(g,dr),l(dr,xv),l(g,Mv),l(g,ur),l(ur,$v),l(g,Nv),l(g,mr),l(mr,zv),p(e,uh,n),p(e,me,n),l(me,ze),l(ze,vr),P(zt,vr,null),l(me,Cv),l(me,Pr),l(Pr,Rv),p(e,mh,n),p(e,ve,n),l(ve,Zv),l(ve,Ct),l(Ct,Bv),l(ve,Vv),l(ve,Ca),p(e,vh,n),p(e,Ce,n),l(Ce,qv),l(Ce,wr),l(wr,Fv),l(Ce,Wv),p(e,Ph,n),p(e,Ra,n),l(Ra,Hv),p(e,wh,n),P(Rt,e,n),p(e,_h,n),p(e,Za,n),l(Za,Yv),p(e,yh,n),p(e,Ba,n),l(Ba,Xv),p(e,bh,n),P(Zt,e,n),p(e,gh,n),p(e,Va,n),l(Va,Kv),p(e,Eh,n),p(e,qa,n),l(qa,Jv),p(e,Dh,n),P(Bt,e,n),p(e,Lh,n),p(e,Fa,n),l(Fa,Qv),p(e,Th,n),p(e,Wa,n),l(Wa,eP),p(e,kh,n),p(e,Ha,n),l(Ha,tP),p(e,Gh,n),p(e,Ya,n),l(Ya,lP),p(e,Uh,n),p(e,Xa,n),l(Xa,aP),p(e,Ih,n),p(e,Ka,n),l(Ka,sP),p(e,Sh,n),p(e,Ja,n),l(Ja,iP),p(e,Oh,n),p(e,Qa,n),l(Qa,oP),p(e,Ah,n),p(e,es,n),l(es,rP),p(e,jh,n),p(e,N,n),l(N,_r),l(_r,nP),l(N,pP),l(N,yr),l(yr,hP),l(N,fP),l(N,br),l(br,cP),p(e,xh,n),p(e,ts,n),l(ts,dP),p(e,Mh,n),p(e,ls,n),l(ls,uP),p(e,$h,n),p(e,as,n),l(as,mP),p(e,Nh,n),p(e,ss,n),l(ss,vP),p(e,zh,n),p(e,is,n),l(is,PP),p(e,Ch,n),p(e,z,n),l(z,os),l(os,Vt),l(Vt,wP),l(os,_P),l(z,yP),l(z,rs),l(rs,qt),l(qt,bP),l(rs,gP),l(z,EP),l(z,gr),l(gr,Ft),l(Ft,Er),l(Er,DP),l(Ft,LP),p(e,Rh,n),p(e,Pe,n),l(Pe,Re),l(Re,Dr),P(Wt,Dr,null),l(Pe,TP),l(Pe,Lr),l(Lr,kP),p(e,Zh,n),p(e,Ze,n),l(Ze,GP),l(Ze,Tr),l(Tr,UP),l(Ze,IP),p(e,Bh,n),p(e,ns,n),l(ns,SP),p(e,Vh,n),P(Ht,e,n),p(e,qh,n),p(e,ps,n),l(ps,OP),p(e,Fh,n),p(e,hs,n),l(hs,AP),p(e,Wh,n),p(e,fs,n),l(fs,jP),p(e,Hh,n),p(e,cs,n),l(cs,xP),p(e,Yh,n),p(e,Be,n),l(Be,kr),l(kr,MP),l(Be,$P),l(Be,Gr),l(Gr,NP),p(e,Xh,n),p(e,ds,n),l(ds,zP),p(e,Kh,n),p(e,Ve,n),l(Ve,CP),l(Ve,Yt),l(Yt,RP),l(Ve,ZP),p(e,Jh,n),p(e,us,n),l(us,ms),p(e,Qh,n),p(e,vs,n),l(vs,BP),p(e,ef,n),p(e,Ps,n),l(Ps,VP),p(e,tf,n),p(e,C,n),l(C,qP),l(C,Ur),l(Ur,FP),l(C,WP),l(C,Ir),l(Ir,HP),l(C,YP),p(e,lf,n),p(e,qe,n),l(qe,XP),l(qe,Sr),l(Sr,KP),l(qe,JP),p(e,af,n),p(e,Fe,n),l(Fe,QP),l(Fe,Or),l(Or,e1),l(Fe,t1),p(e,sf,n),p(e,R,n),l(R,l1),l(R,Ar),l(Ar,a1),l(R,s1),l(R,jr),l(jr,i1),l(R,o1),p(e,of,n),p(e,ws,n),l(ws,r1),p(e,rf,n),p(e,Z,n),l(Z,n1),l(Z,xr),l(xr,p1),l(Z,h1),l(Z,Mr),l(Mr,f1),l(Z,c1),p(e,nf,n),p(e,I,n),l(I,d1),l(I,$r),l($r,u1),l(I,m1),l(I,Nr),l(Nr,v1),l(I,P1),l(I,zr),l(zr,w1),l(I,_1),p(e,pf,n),p(e,_s,n),l(_s,y1),p(e,hf,n),p(e,ys,n),l(ys,b1),p(e,ff,n),p(e,S,n),l(S,Cr),l(Cr,g1),l(S,E1),l(S,Rr),l(Rr,D1),l(S,L1),l(S,Zr),l(Zr,T1),l(S,k1),l(S,Br),l(Br,G1),p(e,cf,n),p(e,bs,n),l(bs,U1),p(e,df,n),p(e,We,n),l(We,Vr),l(Vr,I1),l(We,S1),l(We,qr),l(qr,O1),p(e,uf,n),p(e,gs,n),l(gs,A1),p(e,mf,n),p(e,O,n),l(O,Xt),l(Xt,j1),l(Xt,Fr),l(Fr,x1),l(Xt,M1),l(O,$1),l(O,Es),l(Es,N1),l(Es,Kt),l(Kt,z1),l(O,C1),l(O,Wr),l(Wr,R1),l(O,Z1),l(O,Hr),l(Hr,B1),p(e,vf,n),p(e,Ds,n),l(Ds,V1),p(e,Pf,n),p(e,Ls,n),l(Ls,q1),p(e,wf,n),p(e,u,n),l(u,Jt),l(Jt,Qt),l(Qt,F1),l(Jt,W1),l(Jt,el),l(el,H1),l(u,Y1),l(u,Yr),l(Yr,tl),l(tl,X1),l(u,K1),l(u,Xr),l(Xr,ll),l(ll,J1),l(u,Q1),l(u,Ts),l(Ts,al),l(al,ew),l(Ts,tw),l(u,lw),l(u,Kr),l(Kr,sl),l(sl,aw),l(u,sw),l(u,ks),l(ks,il),l(il,iw),l(ks,ow),l(u,rw),l(u,Gs),l(Gs,ol),l(ol,nw),l(Gs,pw),p(e,_f,n),p(e,He,n),l(He,hw),l(He,Jr),l(Jr,fw),l(He,cw),p(e,yf,n),p(e,Us,n),l(Us,dw),p(e,bf,n),p(e,we,n),l(we,uw),l(we,rl),l(rl,mw),l(we,vw),l(we,Is),p(e,gf,n),p(e,Ss,n),l(Ss,Pw),p(e,Ef,n),p(e,Os,n),l(Os,ww),p(e,Df,n),p(e,Ye,n),l(Ye,_w),l(Ye,Qr),l(Qr,yw),l(Ye,bw),p(e,Lf,n),p(e,_e,n),l(_e,Xe),l(Xe,en),P(nl,en,null),l(_e,gw),l(_e,tn),l(tn,Ew),p(e,Tf,n),p(e,As,n),l(As,Dw),p(e,kf,n),p(e,B,n),l(B,Lw),l(B,pl),l(pl,Tw),l(B,kw),l(B,hl),l(hl,Gw),l(B,Uw),p(e,Gf,n),p(e,V,n),l(V,Iw),l(V,ln),l(ln,Sw),l(V,Ow),l(V,an),l(an,Aw),l(V,jw),p(e,Uf,n),p(e,L,n),l(L,xw),l(L,sn),l(sn,Mw),l(L,$w),l(L,on),l(on,Nw),l(L,zw),l(L,rn),l(rn,Cw),l(L,Rw),l(L,nn),l(nn,Zw),l(L,Bw),p(e,If,n),p(e,fl,n),l(fl,Vw),l(fl,js),p(e,Sf,n),p(e,d,n),l(d,qw),l(d,pn),l(pn,Fw),l(d,Ww),l(d,hn),l(hn,Hw),l(d,Yw),l(d,fn),l(fn,Xw),l(d,Kw),l(d,cn),l(cn,Jw),l(d,Qw),l(d,dn),l(dn,e2),l(d,t2),l(d,un),l(un,l2),l(d,a2),l(d,mn),l(mn,s2),l(d,i2),l(d,xs),p(e,Of,n),p(e,cl,n),l(cl,o2),l(cl,Ms),p(e,Af,n),p(e,dl,n),l(dl,r2),l(dl,$s),p(e,jf,n),p(e,Ns,n),l(Ns,n2),p(e,xf,n),p(e,q,n),l(q,p2),l(q,ul),l(ul,h2),l(q,f2),l(q,ml),l(ml,c2),l(q,d2),p(e,Mf,n),p(e,zs,n),l(zs,u2),p(e,$f,n),p(e,Cs,n),l(Cs,m2),p(e,Nf,n),p(e,Rs,n),l(Rs,Zs),l(Zs,v2),l(Zs,vl),l(vl,P2),p(e,zf,n),p(e,Bs,n),l(Bs,w2),p(e,Cf,n),p(e,A,n),l(A,Vs),l(Vs,Pl),l(Pl,_2),l(Vs,y2),l(A,b2),l(A,qs),l(qs,wl),l(wl,g2),l(qs,E2),l(A,D2),l(A,Fs),l(Fs,_l),l(_l,L2),l(Fs,T2),l(A,k2),l(A,Ws),l(Ws,yl),l(yl,G2),l(Ws,U2),p(e,Rf,n),p(e,Hs,n),l(Hs,I2),p(e,Zf,n),p(e,F,n),l(F,vn),l(vn,S2),l(F,O2),l(F,bl),l(bl,A2),l(bl,gl),l(gl,j2),l(bl,x2),l(F,M2),l(F,Ys),l(Ys,$2),l(Ys,El),l(El,N2),p(e,Bf,n),p(e,ye,n),l(ye,Ke),l(Ke,Pn),P(Dl,Pn,null),l(ye,z2),l(ye,wn),l(wn,C2),p(e,Vf,n),p(e,Je,n),l(Je,R2),l(Je,Ll),l(Ll,Z2),l(Je,B2),p(e,qf,n),p(e,Xs,n),l(Xs,Ks),p(e,Ff,n),p(e,Js,n),l(Js,V2),p(e,Wf,n),p(e,Qs,n),l(Qs,q2),p(e,Hf,n),p(e,ei,n),l(ei,F2),p(e,Yf,n),p(e,T,n),l(T,_n),l(_n,Tl),l(Tl,W2),l(T,H2),l(T,yn),l(yn,kl),l(kl,Y2),l(T,X2),l(T,bn),l(bn,Gl),l(Gl,K2),l(T,J2),l(T,gn),l(gn,Ul),l(Ul,Q2),l(T,e_),l(T,En),l(En,Il),l(Il,t_),p(e,Xf,n),p(e,ti,n),l(ti,l_),p(e,Kf,n),p(e,be,n),l(be,Qe),l(Qe,Dn),P(Sl,Dn,null),l(be,a_),l(be,Ln),l(Ln,s_),p(e,Jf,n),p(e,li,n),l(li,i_),p(e,Qf,n),p(e,ai,n),l(ai,si),p(e,ec,n),p(e,et,n),l(et,o_),l(et,Ol),l(Ol,r_),l(et,n_),p(e,tc,n),p(e,ii,n),l(ii,p_),p(e,lc,n),p(e,oi,n),l(oi,h_),p(e,ac,n),p(e,k,n),l(k,ri),l(ri,Al),l(Al,f_),l(ri,c_),l(k,d_),l(k,Tn),l(Tn,jl),l(jl,u_),l(k,m_),l(k,kn),l(kn,xl),l(xl,v_),l(k,P_),l(k,Gn),l(Gn,Ml),l(Ml,w_),l(k,__),l(k,Un),l(Un,$l),l($l,y_),p(e,sc,n),p(e,ni,n),l(ni,b_),p(e,ic,n),p(e,ge,n),l(ge,tt),l(tt,In),P(Nl,In,null),l(ge,g_),l(ge,Sn),l(Sn,E_),p(e,oc,n),p(e,lt,n),l(lt,D_),l(lt,pi),l(pi,L_),l(lt,T_),p(e,rc,n),p(e,hi,n),l(hi,k_),p(e,nc,n),p(e,fi,n),l(fi,G_),p(e,pc,n),p(e,at,n),l(at,U_),l(at,On),l(On,I_),l(at,S_),p(e,hc,n),p(e,ci,n),l(ci,O_),p(e,fc,n),p(e,di,n),l(di,A_),p(e,cc,n),p(e,ui,n),l(ui,j_),p(e,dc,n),p(e,st,n),l(st,it),l(it,zl),l(zl,x_),l(it,M_),l(it,Cl),l(Cl,$_),l(it,N_),l(st,z_),l(st,An),l(An,Rl),l(Rl,C_),p(e,uc,n),p(e,mi,n),l(mi,R_),p(e,mc,n),p(e,vi,n),l(vi,jn),l(jn,Zl),l(Zl,Z_),p(e,vc,n),p(e,Pi,n),l(Pi,B_),p(e,Pc,n),p(e,Ee,n),l(Ee,ot),l(ot,xn),P(Bl,xn,null),l(Ee,V_),l(Ee,Mn),l(Mn,q_),p(e,wc,n),p(e,Vl,n),l(Vl,ql),l(ql,F_),l(Vl,W_),p(e,_c,n),p(e,Fl,n),l(Fl,H_),l(Fl,Wl),l(Wl,Y_),p(e,yc,n),p(e,wi,n),l(wi,X_),p(e,bc,n),p(e,j,n),l(j,$n),l($n,K_),l(j,J_),l(j,Nn),l(Nn,Q_),l(j,ey),l(j,zn),l(zn,ty),l(j,ly),l(j,Cn),l(Cn,ay),p(e,gc,n),p(e,_i,n),l(_i,sy),p(e,Ec,n),p(e,yi,n),l(yi,Rn),l(Rn,iy),p(e,Dc,n),p(e,bi,n),l(bi,oy),p(e,Lc,n),p(e,gi,n),l(gi,Zn),l(Zn,ry),p(e,Tc,n),p(e,Ei,n),l(Ei,ny),p(e,kc,n),p(e,Di,n),l(Di,Bn),l(Bn,py),p(e,Gc,n),p(e,Li,n),l(Li,hy),p(e,Uc,n),p(e,Ti,n),l(Ti,Vn),l(Vn,fy),p(e,Ic,n),p(e,ki,n),l(ki,cy),p(e,Sc,n),p(e,Gi,n),l(Gi,Ui),p(e,Oc,n),p(e,Ii,n),l(Ii,dy),p(e,Ac,n),p(e,Si,n),l(Si,uy),p(e,jc,n),p(e,Oi,n),l(Oi,my),p(e,xc,n),p(e,rt,n),l(rt,vy),l(rt,Hl),l(Hl,Py),l(rt,wy),p(e,Mc,n),p(e,De,n),l(De,nt),l(nt,qn),P(Yl,qn,null),l(De,_y),l(De,Fn),l(Fn,yy),p(e,$c,n),p(e,Ai,n),l(Ai,by),p(e,Nc,n),p(e,ji,n),l(ji,Wn),l(Wn,gy),p(e,zc,n),p(e,W,n),l(W,Xl),l(Xl,Hn),l(Hn,Ey),l(Xl,Dy),l(Xl,Yn),l(Yn,Xn),l(Xn,Ly),l(W,Ty),l(W,Kl),l(Kl,Kn),l(Kn,ky),l(Kl,Gy),l(Kl,Jl),l(Jl,Jn),l(Jn,Uy),l(Jl,Iy),l(Jl,Qn),l(Qn,Sy),l(W,Oy),l(W,ep),l(ep,tp),l(tp,Ay),p(e,Cc,n),p(e,xi,n),l(xi,Le),l(Le,jy),l(Le,Ql),l(Ql,xy),l(Le,My),l(Le,lp),l(lp,$y),l(Le,Ny),p(e,Rc,n),p(e,Mi,n),l(Mi,ap),l(ap,zy),p(e,Zc,n),p(e,H,n),l(H,ea),l(ea,sp),l(sp,Cy),l(ea,Ry),l(ea,ta),l(ta,ip),l(ip,Zy),l(ta,By),l(ta,op),l(op,Vy),l(H,qy),l(H,la),l(la,rp),l(rp,Fy),l(la,Wy),l(la,Te),l(Te,np),l(np,pp),l(pp,Hy),l(Te,Yy),l(Te,hp),l(hp,fp),l(fp,Xy),l(Te,Ky),l(Te,ke),l(ke,cp),l(cp,Jy),l(ke,Qy),l(ke,dp),l(dp,eb),l(ke,tb),l(ke,up),l(up,lb),l(H,ab),l(H,aa),l(aa,mp),l(mp,sb),l(aa,ib),l(aa,sa),l(sa,vp),l(vp,ob),l(sa,rb),l(sa,Pp),l(Pp,nb),p(e,Bc,n),p(e,$i,n),l($i,wp),l(wp,pb),p(e,Vc,n),p(e,pt,n),l(pt,ia),l(ia,_p),l(_p,hb),l(ia,fb),l(ia,oa),l(oa,yp),l(yp,cb),l(oa,db),l(oa,bp),l(bp,ub),l(pt,mb),l(pt,ra),l(ra,gp),l(gp,vb),l(ra,Pb),l(ra,Ep),l(Ep,Dp),l(Dp,wb),qc=!0},p:A6,i(e){qc||(w(mt.$$.fragment,e),w(vt.$$.fragment,e),w(Pt.$$.fragment,e),w(Tt.$$.fragment,e),w(kt.$$.fragment,e),w(Nt.$$.fragment,e),w(zt.$$.fragment,e),w(Rt.$$.fragment,e),w(Zt.$$.fragment,e),w(Bt.$$.fragment,e),w(Wt.$$.fragment,e),w(Ht.$$.fragment,e),w(nl.$$.fragment,e),w(Dl.$$.fragment,e),w(Sl.$$.fragment,e),w(Nl.$$.fragment,e),w(Bl.$$.fragment,e),w(Yl.$$.fragment,e),qc=!0)},o(e){_(mt.$$.fragment,e),_(vt.$$.fragment,e),_(Pt.$$.fragment,e),_(Tt.$$.fragment,e),_(kt.$$.fragment,e),_(Nt.$$.fragment,e),_(zt.$$.fragment,e),_(Rt.$$.fragment,e),_(Zt.$$.fragment,e),_(Bt.$$.fragment,e),_(Wt.$$.fragment,e),_(Ht.$$.fragment,e),_(nl.$$.fragment,e),_(Dl.$$.fragment,e),_(Sl.$$.fragment,e),_(Nl.$$.fragment,e),_(Bl.$$.fragment,e),_(Yl.$$.fragment,e),qc=!1},d(e){t(te),e&&t(Ip),e&&t(le),y(mt),e&&t(Sp),e&&t(na),e&&t(Op),e&&t(pa),e&&t(Ap),e&&t(ae),y(vt),e&&t(jp),e&&t(ha),e&&t(xp),e&&t(E),e&&t(Mp),e&&t(va),e&&t($p),e&&t(se),y(Pt),e&&t(Np),e&&t(Pa),e&&t(zp),e&&t(M),e&&t(Cp),e&&t(wa),e&&t(Rp),e&&t(Se),e&&t(Zp),e&&t(re),y(Tt),e&&t(Bp),e&&t($),e&&t(Vp),e&&t(ne),y(kt),e&&t(qp),e&&t(pe),e&&t(Fp),e&&t(je),e&&t(Wp),e&&t(_a),e&&t(Hp),e&&t(Gt),e&&t(Yp),e&&t(xe),e&&t(Xp),e&&t(Ot),e&&t(Kp),e&&t(ba),e&&t(Jp),e&&t(D),e&&t(Qp),e&&t(Ea),e&&t(eh),e&&t(Me),e&&t(th),e&&t(Da),e&&t(lh),e&&t(La),e&&t(ah),e&&t(Ta),e&&t(sh),e&&t($e),e&&t(ih),e&&t(ka),e&&t(oh),e&&t(Ne),e&&t(rh),e&&t(Ma),e&&t(nh),e&&t($a),e&&t(ph),e&&t(Na),e&&t(hh),e&&t(za),e&&t(fh),e&&t($t),e&&t(ch),y(Nt,e),e&&t(dh),e&&t(g),e&&t(uh),e&&t(me),y(zt),e&&t(mh),e&&t(ve),e&&t(vh),e&&t(Ce),e&&t(Ph),e&&t(Ra),e&&t(wh),y(Rt,e),e&&t(_h),e&&t(Za),e&&t(yh),e&&t(Ba),e&&t(bh),y(Zt,e),e&&t(gh),e&&t(Va),e&&t(Eh),e&&t(qa),e&&t(Dh),y(Bt,e),e&&t(Lh),e&&t(Fa),e&&t(Th),e&&t(Wa),e&&t(kh),e&&t(Ha),e&&t(Gh),e&&t(Ya),e&&t(Uh),e&&t(Xa),e&&t(Ih),e&&t(Ka),e&&t(Sh),e&&t(Ja),e&&t(Oh),e&&t(Qa),e&&t(Ah),e&&t(es),e&&t(jh),e&&t(N),e&&t(xh),e&&t(ts),e&&t(Mh),e&&t(ls),e&&t($h),e&&t(as),e&&t(Nh),e&&t(ss),e&&t(zh),e&&t(is),e&&t(Ch),e&&t(z),e&&t(Rh),e&&t(Pe),y(Wt),e&&t(Zh),e&&t(Ze),e&&t(Bh),e&&t(ns),e&&t(Vh),y(Ht,e),e&&t(qh),e&&t(ps),e&&t(Fh),e&&t(hs),e&&t(Wh),e&&t(fs),e&&t(Hh),e&&t(cs),e&&t(Yh),e&&t(Be),e&&t(Xh),e&&t(ds),e&&t(Kh),e&&t(Ve),e&&t(Jh),e&&t(us),e&&t(Qh),e&&t(vs),e&&t(ef),e&&t(Ps),e&&t(tf),e&&t(C),e&&t(lf),e&&t(qe),e&&t(af),e&&t(Fe),e&&t(sf),e&&t(R),e&&t(of),e&&t(ws),e&&t(rf),e&&t(Z),e&&t(nf),e&&t(I),e&&t(pf),e&&t(_s),e&&t(hf),e&&t(ys),e&&t(ff),e&&t(S),e&&t(cf),e&&t(bs),e&&t(df),e&&t(We),e&&t(uf),e&&t(gs),e&&t(mf),e&&t(O),e&&t(vf),e&&t(Ds),e&&t(Pf),e&&t(Ls),e&&t(wf),e&&t(u),e&&t(_f),e&&t(He),e&&t(yf),e&&t(Us),e&&t(bf),e&&t(we),e&&t(gf),e&&t(Ss),e&&t(Ef),e&&t(Os),e&&t(Df),e&&t(Ye),e&&t(Lf),e&&t(_e),y(nl),e&&t(Tf),e&&t(As),e&&t(kf),e&&t(B),e&&t(Gf),e&&t(V),e&&t(Uf),e&&t(L),e&&t(If),e&&t(fl),e&&t(Sf),e&&t(d),e&&t(Of),e&&t(cl),e&&t(Af),e&&t(dl),e&&t(jf),e&&t(Ns),e&&t(xf),e&&t(q),e&&t(Mf),e&&t(zs),e&&t($f),e&&t(Cs),e&&t(Nf),e&&t(Rs),e&&t(zf),e&&t(Bs),e&&t(Cf),e&&t(A),e&&t(Rf),e&&t(Hs),e&&t(Zf),e&&t(F),e&&t(Bf),e&&t(ye),y(Dl),e&&t(Vf),e&&t(Je),e&&t(qf),e&&t(Xs),e&&t(Ff),e&&t(Js),e&&t(Wf),e&&t(Qs),e&&t(Hf),e&&t(ei),e&&t(Yf),e&&t(T),e&&t(Xf),e&&t(ti),e&&t(Kf),e&&t(be),y(Sl),e&&t(Jf),e&&t(li),e&&t(Qf),e&&t(ai),e&&t(ec),e&&t(et),e&&t(tc),e&&t(ii),e&&t(lc),e&&t(oi),e&&t(ac),e&&t(k),e&&t(sc),e&&t(ni),e&&t(ic),e&&t(ge),y(Nl),e&&t(oc),e&&t(lt),e&&t(rc),e&&t(hi),e&&t(nc),e&&t(fi),e&&t(pc),e&&t(at),e&&t(hc),e&&t(ci),e&&t(fc),e&&t(di),e&&t(cc),e&&t(ui),e&&t(dc),e&&t(st),e&&t(uc),e&&t(mi),e&&t(mc),e&&t(vi),e&&t(vc),e&&t(Pi),e&&t(Pc),e&&t(Ee),y(Bl),e&&t(wc),e&&t(Vl),e&&t(_c),e&&t(Fl),e&&t(yc),e&&t(wi),e&&t(bc),e&&t(j),e&&t(gc),e&&t(_i),e&&t(Ec),e&&t(yi),e&&t(Dc),e&&t(bi),e&&t(Lc),e&&t(gi),e&&t(Tc),e&&t(Ei),e&&t(kc),e&&t(Di),e&&t(Gc),e&&t(Li),e&&t(Uc),e&&t(Ti),e&&t(Ic),e&&t(ki),e&&t(Sc),e&&t(Gi),e&&t(Oc),e&&t(Ii),e&&t(Ac),e&&t(Si),e&&t(jc),e&&t(Oi),e&&t(xc),e&&t(rt),e&&t(Mc),e&&t(De),y(Yl),e&&t($c),e&&t(Ai),e&&t(Nc),e&&t(ji),e&&t(zc),e&&t(W),e&&t(Cc),e&&t(xi),e&&t(Rc),e&&t(Mi),e&&t(Zc),e&&t(H),e&&t(Bc),e&&t($i),e&&t(Vc),e&&t(pt)}}}const M6={local:"efficient-training-on-multiple-gpus",sections:[{local:"concepts",title:"Concepts"},{local:"scalability-strategy",title:"Scalability Strategy"},{local:"data-parallelism",sections:[{local:"dp-vs-ddp",title:"DP vs DDP"}],title:"Data Parallelism"},{local:"zero-data-parallelism",title:"ZeRO Data Parallelism"},{local:"naive-model-parallelism-vertical-and-pipeline-parallelism",title:"Naive Model Parallelism (Vertical) and Pipeline Parallelism"},{local:"tensor-parallelism",title:"Tensor Parallelism"},{local:"dppp",title:"DP+PP"},{local:"dppptp",title:"DP+PP+TP"},{local:"zero-dppptp",title:"ZeRO DP+PP+TP"},{local:"flexflow",title:"FlexFlow"},{local:"which-strategy-to-use-when",title:"Which Strategy To Use When"}],title:"Efficient Training on Multiple GPUs"};function $6(Hb){return j6(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class R6 extends U6{constructor(te){super();I6(this,te,$6,x6,S6,{})}}export{R6 as default,M6 as metadata};
