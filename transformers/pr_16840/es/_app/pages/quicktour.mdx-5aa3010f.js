import{D as dc,S as Ge,i as Je,s as Be,O as I,P as N,a as n,d as o,b as d,g as $,F as s,L as ne,t as i,h as p,e as u,w as x,k as g,c as f,x as O,m as v,y as M,Q as bi,q as j,o as q,B as P,n as Ca,p as Ta,Y as mc,v as fc,Z as hr,X as hc,V as $c,H as Ls,I as Hs,J as Us,K as Rs,M as _c}from"../chunks/vendor-c570b7f7.js";import{T as qa}from"../chunks/Tip-4965f0b6.js";import{Y as oc}from"../chunks/Youtube-ea859fc9.js";import{I as jt,C as Z}from"../chunks/CodeBlock-8a2530c2.js";import{D as gc}from"../chunks/DocNotebookDropdown-e51be72e.js";var Fe=(m=>(m.OPEN="OPEN",m.CLOSED="CLOSED",m.HASHASHLINK="HASHASHLINK",m))(Fe||{});const Ei={};function vc(m){return Ei[m]||(Ei[m]=dc("OPEN")),Ei[m]}function Ec(m){let e,l,a,r,c,_;return{c(){e=I("svg"),l=I("defs"),a=I("clipPath"),r=I("rect"),c=I("g"),_=I("path"),this.h()},l(E){e=N(E,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var b=n(e);l=N(b,"defs",{});var k=n(l);a=N(k,"clipPath",{id:!0});var C=n(a);r=N(C,"rect",{x:!0,y:!0,width:!0,height:!0,fill:!0}),n(r).forEach(o),C.forEach(o),k.forEach(o),c=N(b,"g",{"clip-path":!0});var A=n(c);_=N(A,"path",{d:!0,fill:!0}),n(_).forEach(o),A.forEach(o),b.forEach(o),this.h()},h(){d(r,"x","3.05"),d(r,"y","0.5"),d(r,"width","25.73"),d(r,"height","31"),d(r,"fill","none"),d(a,"id","a"),d(_,"d","M24.94,9.51a12.81,12.81,0,0,1,0,18.16,12.68,12.68,0,0,1-18,0,12.81,12.81,0,0,1,0-18.16l9-9V5l-.84.83-6,6a9.58,9.58,0,1,0,13.55,0ZM20.44,9a1.68,1.68,0,1,1,1.67-1.67A1.68,1.68,0,0,1,20.44,9Z"),d(_,"fill","#ee4c2c"),d(c,"clip-path","url(#a)"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 32 32")},m(E,b){$(E,e,b),s(e,l),s(l,a),s(a,r),s(e,c),s(c,_)},p(E,[b]){b&1&&d(e,"class",E[0])},i:ne,o:ne,d(E){E&&o(e)}}}function bc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class wc extends Ge{constructor(e){super();Je(this,e,bc,Ec,Be,{classNames:0})}}function kc(m){let e,l,a,r;return{c(){e=I("svg"),l=I("path"),a=I("path"),r=I("path"),this.h()},l(c){e=N(c,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var _=n(e);l=N(_,"path",{d:!0,fill:!0}),n(l).forEach(o),a=N(_,"path",{d:!0,fill:!0}),n(a).forEach(o),r=N(_,"path",{d:!0,fill:!0}),n(r).forEach(o),_.forEach(o),this.h()},h(){d(l,"d","M145.726 42.065v42.07l72.861 42.07v-42.07l-72.86-42.07zM0 84.135v42.07l36.43 21.03V105.17L0 84.135zm109.291 21.035l-36.43 21.034v126.2l36.43 21.035v-84.135l36.435 21.035v-42.07l-36.435-21.034V105.17z"),d(l,"fill","#E55B2D"),d(a,"d","M145.726 42.065L36.43 105.17v42.065l72.861-42.065v42.065l36.435-21.03v-84.14zM255.022 63.1l-36.435 21.035v42.07l36.435-21.035V63.1zm-72.865 84.135l-36.43 21.035v42.07l36.43-21.036v-42.07zm-36.43 63.104l-36.436-21.035v84.135l36.435-21.035V210.34z"),d(a,"fill","#ED8E24"),d(r,"d","M145.726 0L0 84.135l36.43 21.035l109.296-63.105l72.861 42.07L255.022 63.1L145.726 0zm0 126.204l-36.435 21.03l36.435 21.036l36.43-21.035l-36.43-21.03z"),d(r,"fill","#F8BF3C"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","0.94em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 256 274")},m(c,_){$(c,e,_),s(e,l),s(e,a),s(e,r)},p(c,[_]){_&1&&d(e,"class",c[0])},i:ne,o:ne,d(c){c&&o(e)}}}function jc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class yc extends Ge{constructor(e){super();Je(this,e,jc,kc,Be,{classNames:0})}}function Ac(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W,w,z,J,R,L,V,Y,K,B,re,se,oe,ue,ie,fe,le,X,pe,de,D,H,te,S,G,ce;return{c(){e=I("svg"),l=I("style"),a=i(`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),r=I("g"),c=I("path"),_=I("path"),E=I("path"),b=I("path"),k=I("path"),C=I("path"),A=I("path"),y=I("path"),T=I("g"),U=I("path"),F=I("path"),W=I("path"),w=I("g"),z=I("path"),J=I("path"),R=I("path"),L=I("g"),V=I("path"),Y=I("path"),K=I("g"),B=I("path"),re=I("path"),se=I("path"),oe=I("path"),ue=I("path"),ie=I("path"),fe=I("path"),le=I("path"),X=I("g"),pe=I("path"),de=I("path"),D=I("path"),H=I("path"),te=I("g"),S=I("path"),G=I("path"),ce=I("path"),this.h()},l($e){e=N($e,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var Q=n(e);l=N(Q,"style",{});var ke=n(l);a=p(ke,`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),ke.forEach(o),r=N(Q,"g",{fill:!0,class:!0});var ae=n(r);c=N(ae,"path",{d:!0}),n(c).forEach(o),_=N(ae,"path",{d:!0}),n(_).forEach(o),E=N(ae,"path",{d:!0}),n(E).forEach(o),b=N(ae,"path",{d:!0}),n(b).forEach(o),k=N(ae,"path",{d:!0}),n(k).forEach(o),C=N(ae,"path",{d:!0}),n(C).forEach(o),A=N(ae,"path",{d:!0}),n(A).forEach(o),y=N(ae,"path",{d:!0}),n(y).forEach(o),ae.forEach(o),T=N(Q,"g",{fill:!0,class:!0});var je=n(T);U=N(je,"path",{d:!0}),n(U).forEach(o),F=N(je,"path",{d:!0}),n(F).forEach(o),W=N(je,"path",{d:!0}),n(W).forEach(o),je.forEach(o),w=N(Q,"g",{fill:!0,class:!0});var ve=n(w);z=N(ve,"path",{d:!0}),n(z).forEach(o),J=N(ve,"path",{d:!0}),n(J).forEach(o),ve.forEach(o),R=N(Q,"path",{d:!0,fill:!0,class:!0}),n(R).forEach(o),L=N(Q,"g",{fill:!0,class:!0});var qe=n(L);V=N(qe,"path",{d:!0}),n(V).forEach(o),Y=N(qe,"path",{d:!0}),n(Y).forEach(o),qe.forEach(o),K=N(Q,"g",{fill:!0,class:!0});var _e=n(K);B=N(_e,"path",{d:!0}),n(B).forEach(o),re=N(_e,"path",{d:!0}),n(re).forEach(o),se=N(_e,"path",{d:!0}),n(se).forEach(o),oe=N(_e,"path",{d:!0}),n(oe).forEach(o),ue=N(_e,"path",{d:!0}),n(ue).forEach(o),ie=N(_e,"path",{d:!0}),n(ie).forEach(o),fe=N(_e,"path",{d:!0}),n(fe).forEach(o),_e.forEach(o),le=N(Q,"path",{d:!0,fill:!0,class:!0}),n(le).forEach(o),X=N(Q,"g",{fill:!0,class:!0});var ee=n(X);pe=N(ee,"path",{d:!0}),n(pe).forEach(o),de=N(ee,"path",{d:!0}),n(de).forEach(o),D=N(ee,"path",{d:!0}),n(D).forEach(o),H=N(ee,"path",{d:!0}),n(H).forEach(o),ee.forEach(o),te=N(Q,"g",{fill:!0,class:!0});var Ce=n(te);S=N(Ce,"path",{d:!0}),n(S).forEach(o),G=N(Ce,"path",{d:!0}),n(G).forEach(o),ce=N(Ce,"path",{d:!0}),n(ce).forEach(o),Ce.forEach(o),Q.forEach(o),this.h()},h(){d(c,"d","M50.5 130.4l-25 43.31h50l25-43.31h-50z"),d(_,"d","M.5 217.01l25-43.3h50l-25 43.3H.5z"),d(E,"d","M125.5 173.71h-50l-25 43.3h50l25-43.3z"),d(b,"d","M175.5 173.71h-50l-25 43.3h50l25-43.3z"),d(k,"d","M150.5 130.4l-25 43.31h50l25-43.31h-50z"),d(C,"d","M175.5 87.1l-25 43.3h50l25-43.3h-50z"),d(A,"d","M200.5 43.8l-25 43.3h50l25-43.3h-50z"),d(y,"d","M225.5.5l-25 43.3h50l25-43.3h-50z"),d(r,"fill","#5e97f6"),d(r,"class","J K"),d(U,"d","M.5 217.01l25 43.3h50l-25-43.3H.5z"),d(F,"d","M125.5 260.31h-50l-25-43.3h50l25 43.3z"),d(W,"d","M175.5 260.31h-50l-25-43.3h50l25 43.3z"),d(T,"fill","#2a56c6"),d(T,"class","J K"),d(z,"d","M200.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zm50-86.61l-25-43.3-25 43.3h50z"),d(J,"d","M250.5 43.8l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(w,"fill","#00796b"),d(w,"class","J K"),d(R,"d","M125.5 173.71l-25-43.31-25 43.31h50z"),d(R,"fill","#3367d6"),d(R,"class","J K"),d(V,"d","M250.5 130.4h-50l-25 43.31h50l25-43.31z"),d(Y,"d","M300.5 130.4h-50l-25 43.31h50l25-43.31z"),d(L,"fill","#26a69a"),d(L,"class","J K"),d(B,"d","M350.5 43.8L325.5.5l-25 43.3 25 43.3 25-43.3z"),d(re,"d","M375.5 87.1l-25-43.3-25 43.3 25 43.3 25-43.3z"),d(se,"d","M400.5 130.4l-25-43.3-25 43.3 25 43.31 25-43.31z"),d(oe,"d","M425.5 173.71l-25-43.31-25 43.31 25 43.3 25-43.3z"),d(ue,"d","M450.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zM425.5.5l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(ie,"d","M375.5 87.1l25-43.3 25 43.3-25 43.3-25-43.3zm-25 43.3l-25 43.31 25 43.3 25-43.3-25-43.31z"),d(fe,"d","M325.5 260.31l-25-43.3 25-43.3 25 43.3-25 43.3z"),d(K,"fill","#9c27b0"),d(K,"class","J K"),d(le,"d","M275.5 260.31l-25-43.3h50l25 43.3h-50z"),d(le,"fill","#6a1b9a"),d(le,"class","J K"),d(pe,"d","M225.5 173.71h-50l25 43.3h50l-25-43.3z"),d(de,"d","M275.5 173.71h-50l25 43.3 25-43.3zm0-86.61l25 43.3h50l-25-43.3h-50z"),d(D,"d","M300.5 43.8h-50l25 43.3h50l-25-43.3zm125 216.51l-25-43.3h-50l25 43.3h50z"),d(H,"d","M375.5 173.71l-25 43.3h50l-25-43.3z"),d(X,"fill","#00695c"),d(X,"class","J K"),d(S,"d","M325.5.5h-50l-25 43.3h50l25-43.3zm0 173.21h-50l-25 43.3h50l25-43.3z"),d(G,"d","M350.5 130.4h-50l-25 43.31h50l25-43.31zM425.5.5h-50l-25 43.3h50l25-43.3z"),d(ce,"d","M375.5 87.1l-25-43.3h50l-25 43.3z"),d(te,"fill","#ea80fc"),d(te,"class","J K"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1.73em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 451 260.81")},m($e,Q){$($e,e,Q),s(e,l),s(l,a),s(e,r),s(r,c),s(r,_),s(r,E),s(r,b),s(r,k),s(r,C),s(r,A),s(r,y),s(e,T),s(T,U),s(T,F),s(T,W),s(e,w),s(w,z),s(w,J),s(e,R),s(e,L),s(L,V),s(L,Y),s(e,K),s(K,B),s(K,re),s(K,se),s(K,oe),s(K,ue),s(K,ie),s(K,fe),s(e,le),s(e,X),s(X,pe),s(X,de),s(X,D),s(X,H),s(e,te),s(te,S),s(te,G),s(te,ce)},p($e,[Q]){Q&1&&d(e,"class",$e[0])},i:ne,o:ne,d($e){$e&&o(e)}}}function qc(m,e,l){let{classNames:a=""}=e;return m.$$set=r=>{"classNames"in r&&l(0,a=r.classNames)},[a]}class Cc extends Ge{constructor(e){super();Je(this,e,qc,Ac,Be,{classNames:0})}}function Tc(m){let e,l;return{c(){e=I("svg"),l=I("path"),this.h()},l(a){e=N(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=N(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M0 4.50001C0.390979 2.37042 2.25728 0.756592 4.5 0.756592C6.74272 0.756592 8.60861 2.37042 9 4.50001C8.60902 6.62959 6.74272 8.24342 4.5 8.24342C2.25728 8.24342 0.391395 6.62959 0 4.50001ZM4.5 6.57968C5.05156 6.57968 5.58054 6.36057 5.97055 5.97056C6.36057 5.58054 6.57967 5.05157 6.57967 4.50001C6.57967 3.94844 6.36057 3.41947 5.97055 3.02945C5.58054 2.63944 5.05156 2.42033 4.5 2.42033C3.94844 2.42033 3.41946 2.63944 3.02945 3.02945C2.63943 3.41947 2.42033 3.94844 2.42033 4.50001C2.42033 5.05157 2.63943 5.58054 3.02945 5.97056C3.41946 6.36057 3.94844 6.57968 4.5 6.57968ZM4.5 5.74781C4.16906 5.74781 3.85168 5.61635 3.61767 5.38234C3.38366 5.14833 3.2522 4.83094 3.2522 4.50001C3.2522 4.16907 3.38366 3.85168 3.61767 3.61767C3.85168 3.38367 4.16906 3.2522 4.5 3.2522C4.83094 3.2522 5.14832 3.38367 5.38233 3.61767C5.61634 3.85168 5.7478 4.16907 5.7478 4.50001C5.7478 4.83094 5.61634 5.14833 5.38233 5.38234C5.14832 5.61635 4.83094 5.74781 4.5 5.74781Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 9 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function zc(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class xc extends Ge{constructor(e){super();Je(this,e,zc,Tc,Be,{classNames:0,size:1})}}function Mc(m){let e,l;return{c(){e=I("svg"),l=I("path"),this.h()},l(a){e=N(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var r=n(e);l=N(r,"path",{d:!0,fill:!0}),n(l).forEach(o),r.forEach(o),this.h()},h(){d(l,"d","M1.39125 1.9725L0.0883333 0.669997L0.677917 0.0804138L8.9275 8.33041L8.33792 8.91958L6.95875 7.54041C6.22592 8.00523 5.37572 8.25138 4.50792 8.25C2.26125 8.25 0.392083 6.63333 0 4.5C0.179179 3.52946 0.667345 2.64287 1.39167 1.9725H1.39125ZM5.65667 6.23833L5.04667 5.62833C4.81335 5.73996 4.55116 5.77647 4.29622 5.73282C4.04129 5.68918 3.80617 5.56752 3.62328 5.38463C3.44039 5.20175 3.31874 4.96663 3.27509 4.71169C3.23144 4.45676 3.26795 4.19456 3.37958 3.96125L2.76958 3.35125C2.50447 3.75187 2.38595 4.2318 2.4341 4.70978C2.48225 5.18777 2.6941 5.63442 3.0338 5.97411C3.37349 6.31381 3.82015 6.52567 4.29813 6.57382C4.77611 6.62197 5.25605 6.50345 5.65667 6.23833ZM2.83042 1.06666C3.35 0.862497 3.91625 0.749997 4.50792 0.749997C6.75458 0.749997 8.62375 2.36666 9.01583 4.5C8.88816 5.19404 8.60119 5.84899 8.1775 6.41333L6.56917 4.805C6.61694 4.48317 6.58868 4.15463 6.48664 3.84569C6.3846 3.53675 6.21162 3.256 5.98156 3.02594C5.7515 2.79588 5.47075 2.6229 5.16181 2.52086C4.85287 2.41882 4.52433 2.39056 4.2025 2.43833L2.83042 1.06708V1.06666Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 10 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,r){$(a,e,r),s(e,l)},p(a,[r]){r&1&&d(e,"class",a[0]),r&2&&d(e,"width",a[1]),r&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&o(e)}}}function Pc(m,e,l){let{classNames:a=""}=e,{size:r="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,r=c.size)},[a,r]}class Sc extends Ge{constructor(e){super();Je(this,e,Pc,Mc,Be,{classNames:0,size:1})}}const{window:Oc}=hc;function rc(m){let e,l,a,r,c,_,E,b,k,C;return l=new Sc({props:{size:"0.9em"}}),{c(){e=u("div"),x(l.$$.fragment),a=g(),r=u("span"),c=i("Hide "),_=i(m[3]),E=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);O(l.$$.fragment,y),a=v(y),r=f(y,"SPAN",{});var T=n(r);c=p(T,"Hide "),_=p(T,m[3]),E=p(T," content"),T.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer flex items-center justify-center space-x-1 text-sm px-2 bg-white dark:bg-gray-950 hover:underline leading-none")},m(A,y){$(A,e,y),M(l,e,null),s(e,a),s(e,r),s(r,c),s(r,_),s(r,E),b=!0,k||(C=bi(e,"click",m[5]),k=!0)},p:ne,i(A){b||(j(l.$$.fragment,A),b=!0)},o(A){q(l.$$.fragment,A),b=!1},d(A){A&&o(e),P(l),k=!1,C()}}}function Dc(m){let e,l;const a=m[10].default,r=Ls(a,m,m[9],null);return{c(){e=u("div"),r&&r.c(),this.h()},l(c){e=f(c,"DIV",{class:!0});var _=n(e);r&&r.l(_),_.forEach(o),this.h()},h(){d(e,"class","framework-content")},m(c,_){$(c,e,_),r&&r.m(e,null),l=!0},p(c,_){r&&r.p&&(!l||_&512)&&Hs(r,a,c,c[9],l?Rs(a,c[9],_,null):Us(c[9]),null)},i(c){l||(j(r,c),l=!0)},o(c){q(r,c),l=!1},d(c){c&&o(e),r&&r.d(c)}}}function Ic(m){let e,l,a,r,c,_,E,b,k,C;return l=new xc({props:{size:"0.9em"}}),{c(){e=u("div"),x(l.$$.fragment),a=g(),r=u("span"),c=i("Show "),_=i(m[3]),E=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);O(l.$$.fragment,y),a=v(y),r=f(y,"SPAN",{});var T=n(r);c=p(T,"Show "),_=p(T,m[3]),E=p(T," content"),T.forEach(o),y.forEach(o),this.h()},h(){d(e,"class","cursor-pointer mt-[-12.5px] flex items-center justify-center space-x-1 py-4 text-sm hover:underline leading-none")},m(A,y){$(A,e,y),M(l,e,null),s(e,a),s(e,r),s(r,c),s(r,_),s(r,E),b=!0,k||(C=bi(e,"click",m[5]),k=!0)},p:ne,i(A){b||(j(l.$$.fragment,A),b=!0)},o(A){q(l.$$.fragment,A),b=!1},d(A){A&&o(e),P(l),k=!1,C()}}}function Nc(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U;var F=m[2];function W(L){return{}}F&&(r=new F(W()));let w=!m[1]&&rc(m);const z=[Ic,Dc],J=[];function R(L,V){return L[1]?0:1}return C=R(m),A=J[C]=z[C](m),{c(){e=u("div"),l=u("div"),a=u("div"),r&&x(r.$$.fragment),c=g(),_=u("span"),E=i(m[3]),b=g(),w&&w.c(),k=g(),A.c(),this.h()},l(L){e=f(L,"DIV",{class:!0});var V=n(e);l=f(V,"DIV",{class:!0});var Y=n(l);a=f(Y,"DIV",{class:!0});var K=n(a);r&&O(r.$$.fragment,K),c=v(K),_=f(K,"SPAN",{});var B=n(_);E=p(B,m[3]),B.forEach(o),K.forEach(o),b=v(Y),w&&w.l(Y),Y.forEach(o),k=v(V),A.l(V),V.forEach(o),this.h()},h(){d(a,"class","flex px-1 items-center space-x-1 bg-white dark:bg-gray-950"),d(l,"class","flex h-[22px] mt-[-12.5px] justify-between leading-none"),d(e,"class","border border-gray-200 rounded-xl px-4 relative")},m(L,V){$(L,e,V),s(e,l),s(l,a),r&&M(r,a,null),s(a,c),s(a,_),s(_,E),s(l,b),w&&w.m(l,null),s(e,k),J[C].m(e,null),m[11](e),y=!0,T||(U=bi(Oc,"hashchange",m[6]),T=!0)},p(L,[V]){if(F!==(F=L[2])){if(r){Ca();const K=r;q(K.$$.fragment,1,0,()=>{P(K,1)}),Ta()}F?(r=new F(W()),x(r.$$.fragment),j(r.$$.fragment,1),M(r,a,c)):r=null}L[1]?w&&(Ca(),q(w,1,1,()=>{w=null}),Ta()):w?(w.p(L,V),V&2&&j(w,1)):(w=rc(L),w.c(),j(w,1),w.m(l,null));let Y=C;C=R(L),C===Y?J[C].p(L,V):(Ca(),q(J[Y],1,1,()=>{J[Y]=null}),Ta(),A=J[C],A?A.p(L,V):(A=J[C]=z[C](L),A.c()),j(A,1),A.m(e,null))},i(L){y||(r&&j(r.$$.fragment,L),j(w),j(A),y=!0)},o(L){r&&q(r.$$.fragment,L),q(w),q(A),y=!1},d(L){L&&o(e),r&&P(r),w&&w.d(),J[C].d(),m[11](null),T=!1,U()}}}function Fc(m,e,l){let a,r,{$$slots:c={},$$scope:_}=e,{framework:E}=e,b,k=new Set;const C={pytorch:{Icon:wc,label:"Pytorch"},tensorflow:{Icon:yc,label:"TensorFlow"},jax:{Icon:Cc,label:"JAX"}},{Icon:A,label:y}=C[E],T=`hf_doc_framework_${E}_is_hidden`,U=vc(E);mc(m,U,z=>l(8,r=z));function F(){hr(U,r=r!==Fe.CLOSED?Fe.CLOSED:Fe.OPEN,r),localStorage.setItem(T,r)}function W(){const z=window.location.hash.slice(1);k.has(z)&&(hr(U,r=Fe.HASHASHLINK,r),localStorage.setItem(T,r))}fc(()=>{const z=window.location.hash.slice(1),J="header-link",R=b.querySelectorAll(`.${J}`);k=new Set([...R].map(V=>V.id));const L=localStorage.getItem(T);k.has(z)?hr(U,r=Fe.HASHASHLINK,r):L===Fe.CLOSED&&r!==Fe.HASHASHLINK&&hr(U,r=Fe.CLOSED,r)});function w(z){$c[z?"unshift":"push"](()=>{b=z,l(0,b)})}return m.$$set=z=>{"framework"in z&&l(7,E=z.framework),"$$scope"in z&&l(9,_=z.$$scope)},m.$$.update=()=>{m.$$.dirty&256&&l(1,a=r===Fe.CLOSED)},[b,a,A,y,U,F,W,E,r,_,c,w]}class wi extends Ge{constructor(e){super();Je(this,e,Fc,Nc,Be,{framework:7})}}const Lc=m=>({}),lc=m=>({}),Hc=m=>({}),nc=m=>({}),Uc=m=>({}),ic=m=>({});function pc(m){let e,l;return e=new wi({props:{framework:"pytorch",$$slots:{default:[Rc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Rc(m){let e;const l=m[3].pytorch,a=Ls(l,m,m[4],ic);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Hs(a,l,r,r[4],e?Rs(l,r[4],c,Uc):Us(r[4]),ic)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function cc(m){let e,l;return e=new wi({props:{framework:"tensorflow",$$slots:{default:[Wc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Wc(m){let e;const l=m[3].tensorflow,a=Ls(l,m,m[4],nc);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Hs(a,l,r,r[4],e?Rs(l,r[4],c,Hc):Us(r[4]),nc)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function uc(m){let e,l;return e=new wi({props:{framework:"jax",$$slots:{default:[Vc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&16&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Vc(m){let e;const l=m[3].jax,a=Ls(l,m,m[4],lc);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,c){a&&a.p&&(!e||c&16)&&Hs(a,l,r,r[4],e?Rs(l,r[4],c,Lc):Us(r[4]),lc)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function Kc(m){let e,l,a,r,c=m[0]&&pc(m),_=m[1]&&cc(m),E=m[2]&&uc(m);return{c(){e=u("div"),c&&c.c(),l=g(),_&&_.c(),a=g(),E&&E.c(),this.h()},l(b){e=f(b,"DIV",{class:!0});var k=n(e);c&&c.l(k),l=v(k),_&&_.l(k),a=v(k),E&&E.l(k),k.forEach(o),this.h()},h(){d(e,"class","space-y-10 py-6 2xl:py-8 2xl:-mx-4")},m(b,k){$(b,e,k),c&&c.m(e,null),s(e,l),_&&_.m(e,null),s(e,a),E&&E.m(e,null),r=!0},p(b,[k]){b[0]?c?(c.p(b,k),k&1&&j(c,1)):(c=pc(b),c.c(),j(c,1),c.m(e,l)):c&&(Ca(),q(c,1,1,()=>{c=null}),Ta()),b[1]?_?(_.p(b,k),k&2&&j(_,1)):(_=cc(b),_.c(),j(_,1),_.m(e,a)):_&&(Ca(),q(_,1,1,()=>{_=null}),Ta()),b[2]?E?(E.p(b,k),k&4&&j(E,1)):(E=uc(b),E.c(),j(E,1),E.m(e,null)):E&&(Ca(),q(E,1,1,()=>{E=null}),Ta())},i(b){r||(j(c),j(_),j(E),r=!0)},o(b){q(c),q(_),q(E),r=!1},d(b){b&&o(e),c&&c.d(),_&&_.d(),E&&E.d()}}}function Gc(m,e,l){let{$$slots:a={},$$scope:r}=e,{pytorch:c=!1}=e,{tensorflow:_=!1}=e,{jax:E=!1}=e;return m.$$set=b=>{"pytorch"in b&&l(0,c=b.pytorch),"tensorflow"in b&&l(1,_=b.tensorflow),"jax"in b&&l(2,E=b.jax),"$$scope"in b&&l(4,r=b.$$scope)},[c,_,E,a,r]}class Aa extends Ge{constructor(e){super();Je(this,e,Gc,Kc,Be,{pytorch:0,tensorflow:1,jax:2})}}function Jc(m){let e;const l=m[1].default,a=Ls(l,m,m[0],null);return{c(){a&&a.c()},l(r){a&&a.l(r)},m(r,c){a&&a.m(r,c),e=!0},p(r,[c]){a&&a.p&&(!e||c&1)&&Hs(a,l,r,r[0],e?Rs(l,r[0],c,null):Us(r[0]),null)},i(r){e||(j(a,r),e=!0)},o(r){q(a,r),e=!1},d(r){a&&a.d(r)}}}function Bc(m,e,l){let{$$slots:a={},$$scope:r}=e;return m.$$set=c=>{"$$scope"in c&&l(0,r=c.$$scope)},[r,a]}class Ae extends Ge{constructor(e){super();Je(this,e,Bc,Jc,Be,{})}}function Yc(m){let e,l;return{c(){e=u("p"),l=i(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(a){e=f(a,"P",{});var r=n(e);l=p(r,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),r.forEach(o)},m(a,r){$(a,e,r),s(e,l)},d(a){a&&o(e)}}}function Zc(m){let e,l,a,r,c,_,E,b;return{c(){e=u("p"),l=i("Para m\xE1s detalles acerca del "),a=u("code"),r=i("pipeline()"),c=i(" y tareas asociadas, consulta la documentaci\xF3n "),_=u("a"),E=i("aqu\xED"),b=i("."),this.h()},l(k){e=f(k,"P",{});var C=n(e);l=p(C,"Para m\xE1s detalles acerca del "),a=f(C,"CODE",{});var A=n(a);r=p(A,"pipeline()"),A.forEach(o),c=p(C," y tareas asociadas, consulta la documentaci\xF3n "),_=f(C,"A",{href:!0});var y=n(_);E=p(y,"aqu\xED"),y.forEach(o),b=p(C,"."),C.forEach(o),this.h()},h(){d(_,"href","./main_classes/pipelines")},m(k,C){$(k,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b)},d(k){k&&o(e)}}}function Qc(m){let e,l;return e=new Z({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Xc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Qc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function eu(m){let e,l;return e=new Z({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function tu(m){let e,l;return e=new Ae({props:{$$slots:{default:[eu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function au(m){let e,l,a,r,c,_,E,b,k,C,A;return C=new Z({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("AutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),E=i("AutoClass"),b=i(" debajo):"),k=g(),x(C.$$.fragment)},l(y){e=f(y,"P",{});var T=n(e);l=p(T,"Usa "),a=f(T,"CODE",{});var U=n(a);r=p(U,"AutoModelForSequenceClassification"),U.forEach(o),c=p(T," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(T,"CODE",{});var F=n(_);E=p(F,"AutoClass"),F.forEach(o),b=p(T," debajo):"),T.forEach(o),k=v(y),O(C.$$.fragment,y)},m(y,T){$(y,e,T),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b),$(y,k,T),M(C,y,T),A=!0},p:ne,i(y){A||(j(C.$$.fragment,y),A=!0)},o(y){q(C.$$.fragment,y),A=!1},d(y){y&&o(e),y&&o(k),P(C,y)}}}function su(m){let e,l;return e=new Ae({props:{$$slots:{default:[au]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function ou(m){let e,l,a,r,c,_,E,b,k,C,A;return C=new Z({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),r=i("TFAutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),E=i("TFAutoClass"),b=i(" debajo):"),k=g(),x(C.$$.fragment)},l(y){e=f(y,"P",{});var T=n(e);l=p(T,"Usa "),a=f(T,"CODE",{});var U=n(a);r=p(U,"TFAutoModelForSequenceClassification"),U.forEach(o),c=p(T," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(T,"CODE",{});var F=n(_);E=p(F,"TFAutoClass"),F.forEach(o),b=p(T," debajo):"),T.forEach(o),k=v(y),O(C.$$.fragment,y)},m(y,T){$(y,e,T),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b),$(y,k,T),M(C,y,T),A=!0},p:ne,i(y){A||(j(C.$$.fragment,y),A=!0)},o(y){q(C.$$.fragment,y),A=!1},d(y){y&&o(e),y&&o(k),P(C,y)}}}function ru(m){let e,l;return e=new Ae({props:{$$slots:{default:[ou]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function lu(m){let e,l;return e=new Z({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function nu(m){let e,l;return e=new Ae({props:{$$slots:{default:[lu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function iu(m){let e,l;return e=new Z({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function pu(m){let e,l;return e=new Ae({props:{$$slots:{default:[iu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function cu(m){let e,l,a,r,c,_,E,b;return{c(){e=u("p"),l=i("Ve el "),a=u("a"),r=i("task summary"),c=i(" para revisar qu\xE9 clase del "),_=u("code"),E=i("AutoModel"),b=i(" deber\xEDas usar para cada tarea."),this.h()},l(k){e=f(k,"P",{});var C=n(e);l=p(C,"Ve el "),a=f(C,"A",{href:!0});var A=n(a);r=p(A,"task summary"),A.forEach(o),c=p(C," para revisar qu\xE9 clase del "),_=f(C,"CODE",{});var y=n(_);E=p(y,"AutoModel"),y.forEach(o),b=p(C," deber\xEDas usar para cada tarea."),C.forEach(o),this.h()},h(){d(a,"href","./task_summary")},m(k,C){$(k,e,C),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b)},d(k){k&&o(e)}}}function uu(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W,w,z,J,R,L,V,Y,K,B,re,se,oe,ue,ie,fe,le,X,pe,de,D,H,te;return W=new Z({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),z=new qa({props:{$$slots:{default:[cu]},$$scope:{ctx:m}}}),re=new Z({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),H=new Z({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("AutoModel"),c=i(" como cargar\xEDas un "),_=u("code"),E=i("AutoTokenizer"),b=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),C=i("AutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),T=i("AutoModelForSequenceClassification"),U=i(":"),F=g(),x(W.$$.fragment),w=g(),x(z.$$.fragment),J=g(),R=u("p"),L=i("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),V=u("code"),Y=i("**"),K=i(":"),B=g(),x(re.$$.fragment),se=g(),oe=u("p"),ue=i("El modelo producir\xE1 las activaciones finales en el atributo "),ie=u("code"),fe=i("logits"),le=i(". Aplica la funci\xF3n softmax a "),X=u("code"),pe=i("logits"),de=i(" para obtener las probabilidades:"),D=g(),x(H.$$.fragment)},l(S){e=f(S,"P",{});var G=n(e);l=p(G,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(G,"CODE",{});var ce=n(a);r=p(ce,"AutoModel"),ce.forEach(o),c=p(G," como cargar\xEDas un "),_=f(G,"CODE",{});var $e=n(_);E=p($e,"AutoTokenizer"),$e.forEach(o),b=p(G,". La \xFAnica diferencia es seleccionar el "),k=f(G,"CODE",{});var Q=n(k);C=p(Q,"AutoModel"),Q.forEach(o),A=p(G," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(G,"CODE",{});var ke=n(y);T=p(ke,"AutoModelForSequenceClassification"),ke.forEach(o),U=p(G,":"),G.forEach(o),F=v(S),O(W.$$.fragment,S),w=v(S),O(z.$$.fragment,S),J=v(S),R=f(S,"P",{});var ae=n(R);L=p(ae,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),V=f(ae,"CODE",{});var je=n(V);Y=p(je,"**"),je.forEach(o),K=p(ae,":"),ae.forEach(o),B=v(S),O(re.$$.fragment,S),se=v(S),oe=f(S,"P",{});var ve=n(oe);ue=p(ve,"El modelo producir\xE1 las activaciones finales en el atributo "),ie=f(ve,"CODE",{});var qe=n(ie);fe=p(qe,"logits"),qe.forEach(o),le=p(ve,". Aplica la funci\xF3n softmax a "),X=f(ve,"CODE",{});var _e=n(X);pe=p(_e,"logits"),_e.forEach(o),de=p(ve," para obtener las probabilidades:"),ve.forEach(o),D=v(S),O(H.$$.fragment,S)},m(S,G){$(S,e,G),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b),s(e,k),s(k,C),s(e,A),s(e,y),s(y,T),s(e,U),$(S,F,G),M(W,S,G),$(S,w,G),M(z,S,G),$(S,J,G),$(S,R,G),s(R,L),s(R,V),s(V,Y),s(R,K),$(S,B,G),M(re,S,G),$(S,se,G),$(S,oe,G),s(oe,ue),s(oe,ie),s(ie,fe),s(oe,le),s(oe,X),s(X,pe),s(oe,de),$(S,D,G),M(H,S,G),te=!0},p(S,G){const ce={};G&2&&(ce.$$scope={dirty:G,ctx:S}),z.$set(ce)},i(S){te||(j(W.$$.fragment,S),j(z.$$.fragment,S),j(re.$$.fragment,S),j(H.$$.fragment,S),te=!0)},o(S){q(W.$$.fragment,S),q(z.$$.fragment,S),q(re.$$.fragment,S),q(H.$$.fragment,S),te=!1},d(S){S&&o(e),S&&o(F),P(W,S),S&&o(w),P(z,S),S&&o(J),S&&o(R),S&&o(B),P(re,S),S&&o(se),S&&o(oe),S&&o(D),P(H,S)}}}function fu(m){let e,l;return e=new Ae({props:{$$slots:{default:[uu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function du(m){let e;return{c(){e=i("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},l(l){e=p(l,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},m(l,a){$(l,e,a)},d(l){l&&o(e)}}}function mu(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W,w,z,J,R,L,V,Y,K,B,re,se,oe,ue,ie,fe,le,X,pe,de;return W=new Z({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),z=new qa({props:{$$slots:{default:[du]},$$scope:{ctx:m}}}),Y=new Z({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),pe=new Z({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),r=i("TFAutoModel"),c=i(" como cargar\xEDas un "),_=u("code"),E=i("AutoTokenizer"),b=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),C=i("TFAutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),T=i("TFAutoModelForSequenceClassification"),U=i(":"),F=g(),x(W.$$.fragment),w=g(),x(z.$$.fragment),J=g(),R=u("p"),L=i("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),V=g(),x(Y.$$.fragment),K=g(),B=u("p"),re=i("El modelo producir\xE1 las activaciones finales en el atributo "),se=u("code"),oe=i("logits"),ue=i(". Aplica la funci\xF3n softmax a "),ie=u("code"),fe=i("logits"),le=i(" para obtener las probabilidades:"),X=g(),x(pe.$$.fragment)},l(D){e=f(D,"P",{});var H=n(e);l=p(H,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(H,"CODE",{});var te=n(a);r=p(te,"TFAutoModel"),te.forEach(o),c=p(H," como cargar\xEDas un "),_=f(H,"CODE",{});var S=n(_);E=p(S,"AutoTokenizer"),S.forEach(o),b=p(H,". La \xFAnica diferencia es seleccionar el "),k=f(H,"CODE",{});var G=n(k);C=p(G,"TFAutoModel"),G.forEach(o),A=p(H," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(H,"CODE",{});var ce=n(y);T=p(ce,"TFAutoModelForSequenceClassification"),ce.forEach(o),U=p(H,":"),H.forEach(o),F=v(D),O(W.$$.fragment,D),w=v(D),O(z.$$.fragment,D),J=v(D),R=f(D,"P",{});var $e=n(R);L=p($e,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),$e.forEach(o),V=v(D),O(Y.$$.fragment,D),K=v(D),B=f(D,"P",{});var Q=n(B);re=p(Q,"El modelo producir\xE1 las activaciones finales en el atributo "),se=f(Q,"CODE",{});var ke=n(se);oe=p(ke,"logits"),ke.forEach(o),ue=p(Q,". Aplica la funci\xF3n softmax a "),ie=f(Q,"CODE",{});var ae=n(ie);fe=p(ae,"logits"),ae.forEach(o),le=p(Q," para obtener las probabilidades:"),Q.forEach(o),X=v(D),O(pe.$$.fragment,D)},m(D,H){$(D,e,H),s(e,l),s(e,a),s(a,r),s(e,c),s(e,_),s(_,E),s(e,b),s(e,k),s(k,C),s(e,A),s(e,y),s(y,T),s(e,U),$(D,F,H),M(W,D,H),$(D,w,H),M(z,D,H),$(D,J,H),$(D,R,H),s(R,L),$(D,V,H),M(Y,D,H),$(D,K,H),$(D,B,H),s(B,re),s(B,se),s(se,oe),s(B,ue),s(B,ie),s(ie,fe),s(B,le),$(D,X,H),M(pe,D,H),de=!0},p(D,H){const te={};H&2&&(te.$$scope={dirty:H,ctx:D}),z.$set(te)},i(D){de||(j(W.$$.fragment,D),j(z.$$.fragment,D),j(Y.$$.fragment,D),j(pe.$$.fragment,D),de=!0)},o(D){q(W.$$.fragment,D),q(z.$$.fragment,D),q(Y.$$.fragment,D),q(pe.$$.fragment,D),de=!1},d(D){D&&o(e),D&&o(F),P(W,D),D&&o(w),P(z,D),D&&o(J),D&&o(R),D&&o(V),P(Y,D),D&&o(K),D&&o(B),D&&o(X),P(pe,D)}}}function hu(m){let e,l;return e=new Ae({props:{$$slots:{default:[mu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function $u(m){let e,l,a,r,c;return{c(){e=u("p"),l=i("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=u("em"),r=i("antes"),c=i(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(_){e=f(_,"P",{});var E=n(e);l=p(E,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=f(E,"EM",{});var b=n(a);r=p(b,"antes"),b.forEach(o),c=p(E,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),E.forEach(o)},m(_,E){$(_,e,E),s(e,l),s(e,a),s(a,r),s(e,c)},d(_){_&&o(e)}}}function _u(m){let e,l,a,r,c;return{c(){e=u("p"),l=i(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=u("code"),r=i("None"),c=i(" son ignorados.")},l(_){e=f(_,"P",{});var E=n(e);l=p(E,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=f(E,"CODE",{});var b=n(a);r=p(b,"None"),b.forEach(o),c=p(E," son ignorados."),E.forEach(o)},m(_,E){$(_,e,E),s(e,l),s(e,a),s(a,r),s(e,c)},d(_){_&&o(e)}}}function gu(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W;return E=new Z({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),F=new Z({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("PreTrainedModel.save_pretrained()"),c=i(":"),_=g(),x(E.$$.fragment),b=g(),k=u("p"),C=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("PreTrainedModel.from_pretrained()"),T=i(":"),U=g(),x(F.$$.fragment)},l(w){e=f(w,"P",{});var z=n(e);l=p(z,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(z,"CODE",{});var J=n(a);r=p(J,"PreTrainedModel.save_pretrained()"),J.forEach(o),c=p(z,":"),z.forEach(o),_=v(w),O(E.$$.fragment,w),b=v(w),k=f(w,"P",{});var R=n(k);C=p(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(R,"CODE",{});var L=n(A);y=p(L,"PreTrainedModel.from_pretrained()"),L.forEach(o),T=p(R,":"),R.forEach(o),U=v(w),O(F.$$.fragment,w)},m(w,z){$(w,e,z),s(e,l),s(e,a),s(a,r),s(e,c),$(w,_,z),M(E,w,z),$(w,b,z),$(w,k,z),s(k,C),s(k,A),s(A,y),s(k,T),$(w,U,z),M(F,w,z),W=!0},p:ne,i(w){W||(j(E.$$.fragment,w),j(F.$$.fragment,w),W=!0)},o(w){q(E.$$.fragment,w),q(F.$$.fragment,w),W=!1},d(w){w&&o(e),w&&o(_),P(E,w),w&&o(b),w&&o(k),w&&o(U),P(F,w)}}}function vu(m){let e,l;return e=new Ae({props:{$$slots:{default:[gu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Eu(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W;return E=new Z({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),F=new Z({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),r=i("TFPreTrainedModel.save_pretrained()"),c=i(":"),_=g(),x(E.$$.fragment),b=g(),k=u("p"),C=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("TFPreTrainedModel.from_pretrained()"),T=i(":"),U=g(),x(F.$$.fragment)},l(w){e=f(w,"P",{});var z=n(e);l=p(z,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(z,"CODE",{});var J=n(a);r=p(J,"TFPreTrainedModel.save_pretrained()"),J.forEach(o),c=p(z,":"),z.forEach(o),_=v(w),O(E.$$.fragment,w),b=v(w),k=f(w,"P",{});var R=n(k);C=p(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(R,"CODE",{});var L=n(A);y=p(L,"TFPreTrainedModel.from_pretrained()"),L.forEach(o),T=p(R,":"),R.forEach(o),U=v(w),O(F.$$.fragment,w)},m(w,z){$(w,e,z),s(e,l),s(e,a),s(a,r),s(e,c),$(w,_,z),M(E,w,z),$(w,b,z),$(w,k,z),s(k,C),s(k,A),s(A,y),s(k,T),$(w,U,z),M(F,w,z),W=!0},p:ne,i(w){W||(j(E.$$.fragment,w),j(F.$$.fragment,w),W=!0)},o(w){q(E.$$.fragment,w),q(F.$$.fragment,w),W=!1},d(w){w&&o(e),w&&o(_),P(E,w),w&&o(b),w&&o(k),w&&o(U),P(F,w)}}}function bu(m){let e,l;return e=new Ae({props:{$$slots:{default:[Eu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function wu(m){let e,l;return e=new Z({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function ku(m){let e,l;return e=new Ae({props:{$$slots:{default:[wu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function ju(m){let e,l;return e=new Z({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function yu(m){let e,l;return e=new Ae({props:{$$slots:{default:[ju]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,r){M(e,a,r),l=!0},p(a,r){const c={};r&2&&(c.$$scope={dirty:r,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Au(m){let e,l,a,r,c,_,E,b,k,C,A,y,T,U,F,W,w,z,J,R,L,V,Y,K,B,re,se,oe,ue,ie,fe,le,X,pe,de,D,H,te,S,G,ce,$e,Q,ke,ae,je,ve,qe,_e,ee,Ce,$r,_r,za,gr,vr,xa,Er,br,Ma,wr,kr,Pa,jr,yr,Sa,Ar,qr,Oa,Cr,Tr,Da,zr,Ws,yt,Ia,xr,Mr,Vs,Te,Na,Pr,Sr,Fa,Or,Dr,La,Ir,Ks,At,Ha,Nr,Fr,Gs,Ye,Ua,Lr,Hr,Ra,Ur,Js,Ze,Bs,Le,Qe,Wa,qt,Rr,Va,Wr,Ys,Xe,Vr,Ka,Kr,Gr,Zs,sa,Jr,Qs,et,Xs,tt,Br,Ga,Yr,Zr,eo,Ct,to,ze,Qr,Tt,Xr,el,Ja,tl,al,ao,zt,so,at,sl,Ba,ol,rl,oo,xt,ro,xe,ll,Ya,nl,il,Mt,pl,cl,lo,Pt,no,ye,ul,Za,fl,dl,Qa,ml,hl,Xa,$l,_l,io,St,po,Me,gl,Ot,vl,El,Dt,bl,wl,co,It,uo,st,kl,es,jl,yl,fo,Nt,mo,ot,Al,ts,ql,Cl,ho,Ft,$o,rt,Tl,oa,zl,xl,_o,He,lt,as,Lt,Ml,ss,Pl,go,Ee,Sl,os,Ol,Dl,Ht,Il,Nl,rs,Fl,Ll,Ut,Hl,Ul,vo,Rt,Eo,nt,bo,Pe,Rl,ls,Wl,Vl,ns,Kl,Gl,wo,Wt,ko,Se,Jl,ra,Bl,Yl,la,Zl,Ql,jo,Ue,it,is,Vt,Xl,ps,en,yo,Kt,Ao,me,tn,cs,an,sn,us,on,rn,fs,ln,nn,na,pn,cn,ds,un,fn,ms,dn,mn,qo,Oe,hn,hs,$n,_n,$s,gn,vn,Co,Re,pt,_s,Gt,En,gs,bn,To,De,wn,vs,kn,jn,ia,yn,An,zo,ct,qn,Es,Cn,Tn,xo,Jt,Mo,ut,zn,bs,xn,Mn,Po,pa,Pn,So,Bt,Oo,ca,Sn,Do,ft,ua,fa,On,Dn,In,da,ma,Nn,Fn,Io,dt,Ln,ws,Hn,Un,No,mt,Fo,ht,Rn,ha,Wn,Vn,Lo,We,$t,ks,Yt,Kn,js,Gn,Ho,_t,Uo,gt,Ro,he,Jn,Zt,ys,Bn,Yn,Qt,As,Zn,Qn,qs,Xn,ei,Cs,ti,ai,Xt,si,oi,$a,ri,li,Wo,vt,Vo,Ve,Et,Ts,ea,ni,zs,ii,Ko,bt,Go,Ie,pi,xs,ci,ui,Ms,fi,di,Jo,wt,Bo;return _=new jt({}),A=new gc({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),V=new qa({props:{$$slots:{default:[Yc]},$$scope:{ctx:m}}}),se=new jt({}),H=new oc({props:{id:"tiZFewofSLM"}}),Ze=new qa({props:{$$slots:{default:[Zc]},$$scope:{ctx:m}}}),qt=new jt({}),et=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[tu],pytorch:[Xc]},$$scope:{ctx:m}}}),Ct=new Z({props:{code:`from transformers import pipeline

classifier = pipeline("sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)`}}),zt=new Z({props:{code:'classifier("We are very happy to show you the \u{1F917} Transformers library.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998</span>}]`}}),xt=new Z({props:{code:`results = classifier(["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."])
for result in results:
    print(f"label: {result['label']}, with score: {round(result['score'], 4)}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>results = classifier([<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;label: <span class="hljs-subst">{result[<span class="hljs-string">&#x27;label&#x27;</span>]}</span>, with score: <span class="hljs-subst">{<span class="hljs-built_in">round</span>(result[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}</span>&quot;</span>)
label: POSITIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.9998</span>
label: NEGATIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.5309</span>`}}),Pt=new Z({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),St=new Z({props:{code:`import torch
from transformers import pipeline

speech_recognizer = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-base-960h", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, device=<span class="hljs-number">0</span>)`}}),It=new Z({props:{code:`from datasets import load_dataset, Audio

dataset = load_dataset("PolyAI/minds14", name="en-US", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Nt=new Z({props:{code:'dataset = dataset.cast_column("audio", Audio(sampling_rate=speech_recognizer.feature_extractor.sampling_rate))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=speech_recognizer.feature_extractor.sampling_rate))'}}),Ft=new Z({props:{code:`raw_audio_waveforms = [d["array"] for d in dataset[:4]["audio"]]
speech_recognizer(raw_audio_waveforms)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>raw_audio_waveforms = [d[<span class="hljs-string">&quot;array&quot;</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dataset[:<span class="hljs-number">4</span>][<span class="hljs-string">&quot;audio&quot;</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer(raw_audio_waveforms)
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;I WOULD LIKE TO SET UP A JOINT ACCOUNT WITH MY PARTNER HOW DO I PROCEED WITH DOING THAT&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;FONDERING HOW I&#x27;D SET UP A JOIN TO HET WITH MY WIFE AND WHERE THE AP MIGHT BE&quot;</span>}, 
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;I I&#x27;D LIKE TOY SET UP A JOINT ACCOUNT WITH MY PARTNER I&#x27;M NOT SEEING THE OPTION TO DO IT ON THE APSO I CALLED IN TO GET SOME HELP CAN I JUST DO IT OVER THE PHONE WITH YOU AND GIVE YOU THE INFORMATION OR SHOULD I DO IT IN THE AP AND I&#x27;M MISSING SOMETHING UQUETTE HAD PREFERRED TO JUST DO IT OVER THE PHONE OF POSSIBLE THINGS&quot;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;HOW DO I TURN A JOIN A COUNT&#x27;</span>}]`}}),Lt=new jt({}),Rt=new Z({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),nt=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[ru],pytorch:[su]},$$scope:{ctx:m}}}),Wt=new Z({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Vt=new jt({}),Kt=new oc({props:{id:"AhChOFRegn4"}}),Gt=new jt({}),Jt=new Z({props:{code:`from transformers import AutoTokenizer

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),Bt=new Z({props:{code:`encoding = tokenizer("We are very happy to show you the \u{1F917} Transformers library.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">11312</span>, <span class="hljs-number">10320</span>, <span class="hljs-number">12495</span>, <span class="hljs-number">19308</span>, <span class="hljs-number">10114</span>, <span class="hljs-number">11391</span>, <span class="hljs-number">10855</span>, <span class="hljs-number">10103</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">13299</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),mt=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[pu],pytorch:[nu]},$$scope:{ctx:m}}}),Yt=new jt({}),_t=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[hu],pytorch:[fu]},$$scope:{ctx:m}}}),gt=new qa({props:{$$slots:{default:[$u]},$$scope:{ctx:m}}}),vt=new qa({props:{$$slots:{default:[_u]},$$scope:{ctx:m}}}),ea=new jt({}),bt=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[bu],pytorch:[vu]},$$scope:{ctx:m}}}),wt=new Aa({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[yu],pytorch:[ku]},$$scope:{ctx:m}}}),{c(){e=u("meta"),l=g(),a=u("h1"),r=u("a"),c=u("span"),x(_.$$.fragment),E=g(),b=u("span"),k=i("Quick tour"),C=g(),x(A.$$.fragment),y=g(),T=u("p"),U=i("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),F=u("code"),W=i("pipeline()"),w=i(" para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),z=u("a"),J=i("AutoClass"),R=i(" para resolver tu tarea de texto, visi\xF3n o audio."),L=g(),x(V.$$.fragment),Y=g(),K=u("h2"),B=u("a"),re=u("span"),x(se.$$.fragment),oe=g(),ue=u("span"),ie=i("Pipeline"),fe=g(),le=u("p"),X=u("code"),pe=i("pipeline()"),de=i(" es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),D=g(),x(H.$$.fragment),te=g(),S=u("p"),G=i("El "),ce=u("code"),$e=i("pipeline()"),Q=i(" soporta muchas tareas comunes listas para usar:"),ke=g(),ae=u("p"),je=u("strong"),ve=i("Texto"),qe=i(":"),_e=g(),ee=u("ul"),Ce=u("li"),$r=i("An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),_r=g(),za=u("li"),gr=i("Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),vr=g(),xa=u("li"),Er=i("Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),br=g(),Ma=u("li"),wr=i("Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),kr=g(),Pa=u("li"),jr=i("Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),yr=g(),Sa=u("li"),Ar=i("Summarization: genera un resumen de una secuencia larga de texto o un documento."),qr=g(),Oa=u("li"),Cr=i("Traducci\xF3n: traduce un texto a otro idioma."),Tr=g(),Da=u("li"),zr=i("Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),Ws=g(),yt=u("p"),Ia=u("strong"),xr=i("Imagen"),Mr=i(":"),Vs=g(),Te=u("ul"),Na=u("li"),Pr=i("Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),Sr=g(),Fa=u("li"),Or=i("Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),Dr=g(),La=u("li"),Ir=i("Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),Ks=g(),At=u("p"),Ha=u("strong"),Nr=i("Audio"),Fr=i(":"),Gs=g(),Ye=u("ul"),Ua=u("li"),Lr=i("Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),Hr=g(),Ra=u("li"),Ur=i("Automatic speech recognition (ASR): transcribe datos de audio a un texto."),Js=g(),x(Ze.$$.fragment),Bs=g(),Le=u("h3"),Qe=u("a"),Wa=u("span"),x(qt.$$.fragment),Rr=g(),Va=u("span"),Wr=i("Uso del Pipeline"),Ys=g(),Xe=u("p"),Vr=i("En el siguiente ejemplo, usar\xE1s el "),Ka=u("code"),Kr=i("pipeline()"),Gr=i(" para an\xE1lisis de sentimiento."),Zs=g(),sa=u("p"),Jr=i("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Qs=g(),x(et.$$.fragment),Xs=g(),tt=u("p"),Br=i("Importa "),Ga=u("code"),Yr=i("pipeline()"),Zr=i(" y especifica la tarea que deseas completar:"),eo=g(),x(Ct.$$.fragment),to=g(),ze=u("p"),Qr=i("El pipeline descarga y almacena en cach\xE9 un "),Tt=u("a"),Xr=i("modelo preentrenado"),el=i(" por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Ja=u("code"),tl=i("classifier"),al=i(" en tu texto objetivo:"),ao=g(),x(zt.$$.fragment),so=g(),at=u("p"),sl=i("Para m\xE1s de un enunciado entrega una lista de frases al "),Ba=u("code"),ol=i("pipeline()"),rl=i(" que devolver\xE1 una lista de diccionarios:"),oo=g(),x(xt.$$.fragment),ro=g(),xe=u("p"),ll=i("El "),Ya=u("code"),nl=i("pipeline()"),il=i(" tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Mt=u("a"),pl=i("\u{1F917} Datasets"),cl=i(":"),lo=g(),x(Pt.$$.fragment),no=g(),ye=u("p"),ul=i("Crea un "),Za=u("code"),fl=i("pipeline()"),dl=i(" con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Qa=u("code"),ml=i("device"),hl=i(" a "),Xa=u("code"),$l=i("0"),_l=i(" para poner los tensores en un dispositivo CUDA:"),io=g(),x(St.$$.fragment),po=g(),Me=u("p"),gl=i("A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Ot=u("a"),vl=i("Quick Start"),El=i(" para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Dt=u("a"),bl=i("MInDS-14"),wl=i(":"),co=g(),x(It.$$.fragment),uo=g(),st=u("p"),kl=i("Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),es=u("code"),jl=i("facebook/wav2vec2-base-960h"),yl=i("."),fo=g(),x(Nt.$$.fragment),mo=g(),ot=u("p"),Al=i("Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando se llama a la columna "),ts=u("code"),ql=i('"audio"'),Cl=i(`.
Extraigamos las matrices de forma de onda cruda de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),ho=g(),x(Ft.$$.fragment),$o=g(),rt=u("p"),Tl=i("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),oa=u("a"),zl=i("documentaci\xF3n del pipeline"),xl=i(" para m\xE1s informaci\xF3n."),_o=g(),He=u("h3"),lt=u("a"),as=u("span"),x(Lt.$$.fragment),Ml=g(),ss=u("span"),Pl=i("Use otro modelo y otro tokenizador en el pipeline"),go=g(),Ee=u("p"),Sl=i("El "),os=u("code"),Ol=i("pipeline()"),Dl=i(" puede adaptarse a cualquier modelo del "),Ht=u("a"),Il=i("Model Hub"),Nl=i(" haciendo m\xE1s f\xE1cil adaptar el "),rs=u("code"),Fl=i("pipeline()"),Ll=i(" para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ut=u("a"),Hl=i("modelo BERT"),Ul=i(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),vo=g(),x(Rt.$$.fragment),Eo=g(),x(nt.$$.fragment),bo=g(),Pe=u("p"),Rl=i("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),ls=u("code"),Wl=i("pipeline()"),Vl=i(", y aplicar el "),ns=u("code"),Kl=i("classifier"),Gl=i(" en tu texto objetivo:"),wo=g(),x(Wt.$$.fragment),ko=g(),Se=u("p"),Jl=i("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),ra=u("a"),Bl=i("tutorial de fine-tuning"),Yl=i(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),la=u("a"),Zl=i("aqu\xED"),Ql=i(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),jo=g(),Ue=u("h2"),it=u("a"),is=u("span"),x(Vt.$$.fragment),Xl=g(),ps=u("span"),en=i("AutoClass"),yo=g(),x(Kt.$$.fragment),Ao=g(),me=u("p"),tn=i("Debajo del cap\xF3, las clases "),cs=u("code"),an=i("AutoModelForSequenceClassification"),sn=i(" y "),us=u("code"),on=i("AutoTokenizer"),rn=i(" trabajan juntas para dar poder al "),fs=u("code"),ln=i("pipeline()"),nn=i(". Una "),na=u("a"),pn=i("AutoClass"),cn=i(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ds=u("code"),un=i("AutoClass"),fn=i(" apropiado para tu tarea y tu tokenizador asociado con "),ms=u("code"),dn=i("AutoTokenizer"),mn=i("."),qo=g(),Oe=u("p"),hn=i("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),hs=u("code"),$n=i("AutoClass"),_n=i(" para reproducir los resultados del "),$s=u("code"),gn=i("pipeline()"),vn=i("."),Co=g(),Re=u("h3"),pt=u("a"),_s=u("span"),x(Gt.$$.fragment),En=g(),gs=u("span"),bn=i("AutoTokenizer"),To=g(),De=u("p"),wn=i("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),vs=u("em"),kn=i("tokens"),jn=i(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),ia=u("a"),yn=i("aqu\xED"),An=i("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),zo=g(),ct=u("p"),qn=i("Carga un tokenizador con "),Es=u("code"),Cn=i("AutoTokenizer"),Tn=i(":"),xo=g(),x(Jt.$$.fragment),Mo=g(),ut=u("p"),zn=i("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),bs=u("em"),xn=i("vocabulario"),Mn=i(" del modelo."),Po=g(),pa=u("p"),Pn=i("Pasa tu texto al tokenizador:"),So=g(),x(Bt.$$.fragment),Oo=g(),ca=u("p"),Sn=i("El tokenizador devolver\xE1 un diccionario conteniendo:"),Do=g(),ft=u("ul"),ua=u("li"),fa=u("a"),On=i("input_ids"),Dn=i(": representaciones num\xE9ricas de los tokens."),In=g(),da=u("li"),ma=u("a"),Nn=i("atttention_mask"),Fn=i(": indica cu\xE1les tokens deben ser atendidos."),Io=g(),dt=u("p"),Ln=i("Como con el "),ws=u("code"),Hn=i("pipeline()"),Un=i(", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),No=g(),x(mt.$$.fragment),Fo=g(),ht=u("p"),Rn=i("Lee el tutorial de "),ha=u("a"),Wn=i("preprocessing"),Vn=i(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),Lo=g(),We=u("h3"),$t=u("a"),ks=u("span"),x(Yt.$$.fragment),Kn=g(),js=u("span"),Gn=i("AutoModel"),Ho=g(),x(_t.$$.fragment),Uo=g(),x(gt.$$.fragment),Ro=g(),he=u("p"),Jn=i("Los modelos son "),Zt=u("a"),ys=u("code"),Bn=i("torch.nn.Module"),Yn=i(" o "),Qt=u("a"),As=u("code"),Zn=i("tf.keras.Model"),Qn=i(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),qs=u("code"),Xn=i("Trainer"),ei=i(" para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),Cs=u("code"),ti=i("fit"),ai=i(" desde "),Xt=u("a"),si=i("Keras"),oi=i(". Consulta el "),$a=u("a"),ri=i("tutorial de entrenamiento"),li=i(" para m\xE1s detalles."),Wo=g(),x(vt.$$.fragment),Vo=g(),Ve=u("h3"),Et=u("a"),Ts=u("span"),x(ea.$$.fragment),ni=g(),zs=u("span"),ii=i("Guarda un modelo"),Ko=g(),x(bt.$$.fragment),Go=g(),Ie=u("p"),pi=i("Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),xs=u("code"),ci=i("from_pt"),ui=i(" o "),Ms=u("code"),fi=i("from_tf"),di=i(" puede convertir el modelo de un framework al otro:"),Jo=g(),x(wt.$$.fragment),this.h()},l(t){const h=_c('[data-svelte="svelte-1phssyn"]',document.head);e=f(h,"META",{name:!0,content:!0}),h.forEach(o),l=v(t),a=f(t,"H1",{class:!0});var ta=n(a);r=f(ta,"A",{id:!0,class:!0,href:!0});var Ps=n(r);c=f(Ps,"SPAN",{});var Ss=n(c);O(_.$$.fragment,Ss),Ss.forEach(o),Ps.forEach(o),E=v(ta),b=f(ta,"SPAN",{});var Os=n(b);k=p(Os,"Quick tour"),Os.forEach(o),ta.forEach(o),C=v(t),O(A.$$.fragment,t),y=v(t),T=f(t,"P",{});var Ke=n(T);U=p(Ke,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),F=f(Ke,"CODE",{});var Ds=n(F);W=p(Ds,"pipeline()"),Ds.forEach(o),w=p(Ke," para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),z=f(Ke,"A",{href:!0});var Is=n(z);J=p(Is,"AutoClass"),Is.forEach(o),R=p(Ke," para resolver tu tarea de texto, visi\xF3n o audio."),Ke.forEach(o),L=v(t),O(V.$$.fragment,t),Y=v(t),K=f(t,"H2",{class:!0});var aa=n(K);B=f(aa,"A",{id:!0,class:!0,href:!0});var Ns=n(B);re=f(Ns,"SPAN",{});var Fs=n(re);O(se.$$.fragment,Fs),Fs.forEach(o),Ns.forEach(o),oe=v(aa),ue=f(aa,"SPAN",{});var ki=n(ue);ie=p(ki,"Pipeline"),ki.forEach(o),aa.forEach(o),fe=v(t),le=f(t,"P",{});var mi=n(le);X=f(mi,"CODE",{});var ji=n(X);pe=p(ji,"pipeline()"),ji.forEach(o),de=p(mi," es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),mi.forEach(o),D=v(t),O(H.$$.fragment,t),te=v(t),S=f(t,"P",{});var Yo=n(S);G=p(Yo,"El "),ce=f(Yo,"CODE",{});var yi=n(ce);$e=p(yi,"pipeline()"),yi.forEach(o),Q=p(Yo," soporta muchas tareas comunes listas para usar:"),Yo.forEach(o),ke=v(t),ae=f(t,"P",{});var hi=n(ae);je=f(hi,"STRONG",{});var Ai=n(je);ve=p(Ai,"Texto"),Ai.forEach(o),qe=p(hi,":"),hi.forEach(o),_e=v(t),ee=f(t,"UL",{});var ge=n(ee);Ce=f(ge,"LI",{});var qi=n(Ce);$r=p(qi,"An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),qi.forEach(o),_r=v(ge),za=f(ge,"LI",{});var Ci=n(za);gr=p(Ci,"Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),Ci.forEach(o),vr=v(ge),xa=f(ge,"LI",{});var Ti=n(xa);Er=p(Ti,"Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),Ti.forEach(o),br=v(ge),Ma=f(ge,"LI",{});var zi=n(Ma);wr=p(zi,"Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),zi.forEach(o),kr=v(ge),Pa=f(ge,"LI",{});var xi=n(Pa);jr=p(xi,"Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),xi.forEach(o),yr=v(ge),Sa=f(ge,"LI",{});var Mi=n(Sa);Ar=p(Mi,"Summarization: genera un resumen de una secuencia larga de texto o un documento."),Mi.forEach(o),qr=v(ge),Oa=f(ge,"LI",{});var Pi=n(Oa);Cr=p(Pi,"Traducci\xF3n: traduce un texto a otro idioma."),Pi.forEach(o),Tr=v(ge),Da=f(ge,"LI",{});var Si=n(Da);zr=p(Si,"Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),Si.forEach(o),ge.forEach(o),Ws=v(t),yt=f(t,"P",{});var $i=n(yt);Ia=f($i,"STRONG",{});var Oi=n(Ia);xr=p(Oi,"Imagen"),Oi.forEach(o),Mr=p($i,":"),$i.forEach(o),Vs=v(t),Te=f(t,"UL",{});var _a=n(Te);Na=f(_a,"LI",{});var Di=n(Na);Pr=p(Di,"Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),Di.forEach(o),Sr=v(_a),Fa=f(_a,"LI",{});var Ii=n(Fa);Or=p(Ii,"Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),Ii.forEach(o),Dr=v(_a),La=f(_a,"LI",{});var Ni=n(La);Ir=p(Ni,"Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),Ni.forEach(o),_a.forEach(o),Ks=v(t),At=f(t,"P",{});var _i=n(At);Ha=f(_i,"STRONG",{});var Fi=n(Ha);Nr=p(Fi,"Audio"),Fi.forEach(o),Fr=p(_i,":"),_i.forEach(o),Gs=v(t),Ye=f(t,"UL",{});var Zo=n(Ye);Ua=f(Zo,"LI",{});var Li=n(Ua);Lr=p(Li,"Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),Li.forEach(o),Hr=v(Zo),Ra=f(Zo,"LI",{});var Hi=n(Ra);Ur=p(Hi,"Automatic speech recognition (ASR): transcribe datos de audio a un texto."),Hi.forEach(o),Zo.forEach(o),Js=v(t),O(Ze.$$.fragment,t),Bs=v(t),Le=f(t,"H3",{class:!0});var Qo=n(Le);Qe=f(Qo,"A",{id:!0,class:!0,href:!0});var Ui=n(Qe);Wa=f(Ui,"SPAN",{});var Ri=n(Wa);O(qt.$$.fragment,Ri),Ri.forEach(o),Ui.forEach(o),Rr=v(Qo),Va=f(Qo,"SPAN",{});var Wi=n(Va);Wr=p(Wi,"Uso del Pipeline"),Wi.forEach(o),Qo.forEach(o),Ys=v(t),Xe=f(t,"P",{});var Xo=n(Xe);Vr=p(Xo,"En el siguiente ejemplo, usar\xE1s el "),Ka=f(Xo,"CODE",{});var Vi=n(Ka);Kr=p(Vi,"pipeline()"),Vi.forEach(o),Gr=p(Xo," para an\xE1lisis de sentimiento."),Xo.forEach(o),Zs=v(t),sa=f(t,"P",{});var Ki=n(sa);Jr=p(Ki,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Ki.forEach(o),Qs=v(t),O(et.$$.fragment,t),Xs=v(t),tt=f(t,"P",{});var er=n(tt);Br=p(er,"Importa "),Ga=f(er,"CODE",{});var Gi=n(Ga);Yr=p(Gi,"pipeline()"),Gi.forEach(o),Zr=p(er," y especifica la tarea que deseas completar:"),er.forEach(o),eo=v(t),O(Ct.$$.fragment,t),to=v(t),ze=f(t,"P",{});var ga=n(ze);Qr=p(ga,"El pipeline descarga y almacena en cach\xE9 un "),Tt=f(ga,"A",{href:!0,rel:!0});var Ji=n(Tt);Xr=p(Ji,"modelo preentrenado"),Ji.forEach(o),el=p(ga," por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Ja=f(ga,"CODE",{});var Bi=n(Ja);tl=p(Bi,"classifier"),Bi.forEach(o),al=p(ga," en tu texto objetivo:"),ga.forEach(o),ao=v(t),O(zt.$$.fragment,t),so=v(t),at=f(t,"P",{});var tr=n(at);sl=p(tr,"Para m\xE1s de un enunciado entrega una lista de frases al "),Ba=f(tr,"CODE",{});var Yi=n(Ba);ol=p(Yi,"pipeline()"),Yi.forEach(o),rl=p(tr," que devolver\xE1 una lista de diccionarios:"),tr.forEach(o),oo=v(t),O(xt.$$.fragment,t),ro=v(t),xe=f(t,"P",{});var va=n(xe);ll=p(va,"El "),Ya=f(va,"CODE",{});var Zi=n(Ya);nl=p(Zi,"pipeline()"),Zi.forEach(o),il=p(va," tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Mt=f(va,"A",{href:!0,rel:!0});var Qi=n(Mt);pl=p(Qi,"\u{1F917} Datasets"),Qi.forEach(o),cl=p(va,":"),va.forEach(o),lo=v(t),O(Pt.$$.fragment,t),no=v(t),ye=f(t,"P",{});var kt=n(ye);ul=p(kt,"Crea un "),Za=f(kt,"CODE",{});var Xi=n(Za);fl=p(Xi,"pipeline()"),Xi.forEach(o),dl=p(kt," con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Qa=f(kt,"CODE",{});var ep=n(Qa);ml=p(ep,"device"),ep.forEach(o),hl=p(kt," a "),Xa=f(kt,"CODE",{});var tp=n(Xa);$l=p(tp,"0"),tp.forEach(o),_l=p(kt," para poner los tensores en un dispositivo CUDA:"),kt.forEach(o),io=v(t),O(St.$$.fragment,t),po=v(t),Me=f(t,"P",{});var Ea=n(Me);gl=p(Ea,"A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Ot=f(Ea,"A",{href:!0,rel:!0});var ap=n(Ot);vl=p(ap,"Quick Start"),ap.forEach(o),El=p(Ea," para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Dt=f(Ea,"A",{href:!0,rel:!0});var sp=n(Dt);bl=p(sp,"MInDS-14"),sp.forEach(o),wl=p(Ea,":"),Ea.forEach(o),co=v(t),O(It.$$.fragment,t),uo=v(t),st=f(t,"P",{});var ar=n(st);kl=p(ar,"Debemos asegurarnos de que la frecuencia de muestreo del conjunto de datos coincide con la frecuencia de muestreo con la que se entren\xF3 "),es=f(ar,"CODE",{});var op=n(es);jl=p(op,"facebook/wav2vec2-base-960h"),op.forEach(o),yl=p(ar,"."),ar.forEach(o),fo=v(t),O(Nt.$$.fragment,t),mo=v(t),ot=f(t,"P",{});var sr=n(ot);Al=p(sr,"Los archivos de audio se cargan y remuestrean autom\xE1ticamente cuando se llama a la columna "),ts=f(sr,"CODE",{});var rp=n(ts);ql=p(rp,'"audio"'),rp.forEach(o),Cl=p(sr,`.
Extraigamos las matrices de forma de onda cruda de las primeras 4 muestras y pas\xE9mosla como una lista al pipeline:`),sr.forEach(o),ho=v(t),O(Ft.$$.fragment,t),$o=v(t),rt=f(t,"P",{});var or=n(rt);Tl=p(or,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),oa=f(or,"A",{href:!0});var lp=n(oa);zl=p(lp,"documentaci\xF3n del pipeline"),lp.forEach(o),xl=p(or," para m\xE1s informaci\xF3n."),or.forEach(o),_o=v(t),He=f(t,"H3",{class:!0});var rr=n(He);lt=f(rr,"A",{id:!0,class:!0,href:!0});var np=n(lt);as=f(np,"SPAN",{});var ip=n(as);O(Lt.$$.fragment,ip),ip.forEach(o),np.forEach(o),Ml=v(rr),ss=f(rr,"SPAN",{});var pp=n(ss);Pl=p(pp,"Use otro modelo y otro tokenizador en el pipeline"),pp.forEach(o),rr.forEach(o),go=v(t),Ee=f(t,"P",{});var Ne=n(Ee);Sl=p(Ne,"El "),os=f(Ne,"CODE",{});var cp=n(os);Ol=p(cp,"pipeline()"),cp.forEach(o),Dl=p(Ne," puede adaptarse a cualquier modelo del "),Ht=f(Ne,"A",{href:!0,rel:!0});var up=n(Ht);Il=p(up,"Model Hub"),up.forEach(o),Nl=p(Ne," haciendo m\xE1s f\xE1cil adaptar el "),rs=f(Ne,"CODE",{});var fp=n(rs);Fl=p(fp,"pipeline()"),fp.forEach(o),Ll=p(Ne," para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ut=f(Ne,"A",{href:!0,rel:!0});var dp=n(Ut);Hl=p(dp,"modelo BERT"),dp.forEach(o),Ul=p(Ne," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Ne.forEach(o),vo=v(t),O(Rt.$$.fragment,t),Eo=v(t),O(nt.$$.fragment,t),bo=v(t),Pe=f(t,"P",{});var ba=n(Pe);Rl=p(ba,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),ls=f(ba,"CODE",{});var mp=n(ls);Wl=p(mp,"pipeline()"),mp.forEach(o),Vl=p(ba,", y aplicar el "),ns=f(ba,"CODE",{});var hp=n(ns);Kl=p(hp,"classifier"),hp.forEach(o),Gl=p(ba," en tu texto objetivo:"),ba.forEach(o),wo=v(t),O(Wt.$$.fragment,t),ko=v(t),Se=f(t,"P",{});var wa=n(Se);Jl=p(wa,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),ra=f(wa,"A",{href:!0});var $p=n(ra);Bl=p($p,"tutorial de fine-tuning"),$p.forEach(o),Yl=p(wa," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),la=f(wa,"A",{href:!0});var _p=n(la);Zl=p(_p,"aqu\xED"),_p.forEach(o),Ql=p(wa,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),wa.forEach(o),jo=v(t),Ue=f(t,"H2",{class:!0});var lr=n(Ue);it=f(lr,"A",{id:!0,class:!0,href:!0});var gp=n(it);is=f(gp,"SPAN",{});var vp=n(is);O(Vt.$$.fragment,vp),vp.forEach(o),gp.forEach(o),Xl=v(lr),ps=f(lr,"SPAN",{});var Ep=n(ps);en=p(Ep,"AutoClass"),Ep.forEach(o),lr.forEach(o),yo=v(t),O(Kt.$$.fragment,t),Ao=v(t),me=f(t,"P",{});var be=n(me);tn=p(be,"Debajo del cap\xF3, las clases "),cs=f(be,"CODE",{});var bp=n(cs);an=p(bp,"AutoModelForSequenceClassification"),bp.forEach(o),sn=p(be," y "),us=f(be,"CODE",{});var wp=n(us);on=p(wp,"AutoTokenizer"),wp.forEach(o),rn=p(be," trabajan juntas para dar poder al "),fs=f(be,"CODE",{});var kp=n(fs);ln=p(kp,"pipeline()"),kp.forEach(o),nn=p(be,". Una "),na=f(be,"A",{href:!0});var jp=n(na);pn=p(jp,"AutoClass"),jp.forEach(o),cn=p(be," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ds=f(be,"CODE",{});var yp=n(ds);un=p(yp,"AutoClass"),yp.forEach(o),fn=p(be," apropiado para tu tarea y tu tokenizador asociado con "),ms=f(be,"CODE",{});var Ap=n(ms);dn=p(Ap,"AutoTokenizer"),Ap.forEach(o),mn=p(be,"."),be.forEach(o),qo=v(t),Oe=f(t,"P",{});var ka=n(Oe);hn=p(ka,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),hs=f(ka,"CODE",{});var qp=n(hs);$n=p(qp,"AutoClass"),qp.forEach(o),_n=p(ka," para reproducir los resultados del "),$s=f(ka,"CODE",{});var Cp=n($s);gn=p(Cp,"pipeline()"),Cp.forEach(o),vn=p(ka,"."),ka.forEach(o),Co=v(t),Re=f(t,"H3",{class:!0});var nr=n(Re);pt=f(nr,"A",{id:!0,class:!0,href:!0});var Tp=n(pt);_s=f(Tp,"SPAN",{});var zp=n(_s);O(Gt.$$.fragment,zp),zp.forEach(o),Tp.forEach(o),En=v(nr),gs=f(nr,"SPAN",{});var xp=n(gs);bn=p(xp,"AutoTokenizer"),xp.forEach(o),nr.forEach(o),To=v(t),De=f(t,"P",{});var ja=n(De);wn=p(ja,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),vs=f(ja,"EM",{});var Mp=n(vs);kn=p(Mp,"tokens"),Mp.forEach(o),jn=p(ja,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),ia=f(ja,"A",{href:!0});var Pp=n(ia);yn=p(Pp,"aqu\xED"),Pp.forEach(o),An=p(ja,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),ja.forEach(o),zo=v(t),ct=f(t,"P",{});var ir=n(ct);qn=p(ir,"Carga un tokenizador con "),Es=f(ir,"CODE",{});var Sp=n(Es);Cn=p(Sp,"AutoTokenizer"),Sp.forEach(o),Tn=p(ir,":"),ir.forEach(o),xo=v(t),O(Jt.$$.fragment,t),Mo=v(t),ut=f(t,"P",{});var pr=n(ut);zn=p(pr,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),bs=f(pr,"EM",{});var Op=n(bs);xn=p(Op,"vocabulario"),Op.forEach(o),Mn=p(pr," del modelo."),pr.forEach(o),Po=v(t),pa=f(t,"P",{});var Dp=n(pa);Pn=p(Dp,"Pasa tu texto al tokenizador:"),Dp.forEach(o),So=v(t),O(Bt.$$.fragment,t),Oo=v(t),ca=f(t,"P",{});var Ip=n(ca);Sn=p(Ip,"El tokenizador devolver\xE1 un diccionario conteniendo:"),Ip.forEach(o),Do=v(t),ft=f(t,"UL",{});var cr=n(ft);ua=f(cr,"LI",{});var gi=n(ua);fa=f(gi,"A",{href:!0});var Np=n(fa);On=p(Np,"input_ids"),Np.forEach(o),Dn=p(gi,": representaciones num\xE9ricas de los tokens."),gi.forEach(o),In=v(cr),da=f(cr,"LI",{});var vi=n(da);ma=f(vi,"A",{href:!0});var Fp=n(ma);Nn=p(Fp,"atttention_mask"),Fp.forEach(o),Fn=p(vi,": indica cu\xE1les tokens deben ser atendidos."),vi.forEach(o),cr.forEach(o),Io=v(t),dt=f(t,"P",{});var ur=n(dt);Ln=p(ur,"Como con el "),ws=f(ur,"CODE",{});var Lp=n(ws);Hn=p(Lp,"pipeline()"),Lp.forEach(o),Un=p(ur,", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),ur.forEach(o),No=v(t),O(mt.$$.fragment,t),Fo=v(t),ht=f(t,"P",{});var fr=n(ht);Rn=p(fr,"Lee el tutorial de "),ha=f(fr,"A",{href:!0});var Hp=n(ha);Wn=p(Hp,"preprocessing"),Hp.forEach(o),Vn=p(fr," para m\xE1s detalles acerca de la tokenizaci\xF3n."),fr.forEach(o),Lo=v(t),We=f(t,"H3",{class:!0});var dr=n(We);$t=f(dr,"A",{id:!0,class:!0,href:!0});var Up=n($t);ks=f(Up,"SPAN",{});var Rp=n(ks);O(Yt.$$.fragment,Rp),Rp.forEach(o),Up.forEach(o),Kn=v(dr),js=f(dr,"SPAN",{});var Wp=n(js);Gn=p(Wp,"AutoModel"),Wp.forEach(o),dr.forEach(o),Ho=v(t),O(_t.$$.fragment,t),Uo=v(t),O(gt.$$.fragment,t),Ro=v(t),he=f(t,"P",{});var we=n(he);Jn=p(we,"Los modelos son "),Zt=f(we,"A",{href:!0,rel:!0});var Vp=n(Zt);ys=f(Vp,"CODE",{});var Kp=n(ys);Bn=p(Kp,"torch.nn.Module"),Kp.forEach(o),Vp.forEach(o),Yn=p(we," o "),Qt=f(we,"A",{href:!0,rel:!0});var Gp=n(Qt);As=f(Gp,"CODE",{});var Jp=n(As);Zn=p(Jp,"tf.keras.Model"),Jp.forEach(o),Gp.forEach(o),Qn=p(we," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),qs=f(we,"CODE",{});var Bp=n(qs);Xn=p(Bp,"Trainer"),Bp.forEach(o),ei=p(we," para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),Cs=f(we,"CODE",{});var Yp=n(Cs);ti=p(Yp,"fit"),Yp.forEach(o),ai=p(we," desde "),Xt=f(we,"A",{href:!0,rel:!0});var Zp=n(Xt);si=p(Zp,"Keras"),Zp.forEach(o),oi=p(we,". Consulta el "),$a=f(we,"A",{href:!0});var Qp=n($a);ri=p(Qp,"tutorial de entrenamiento"),Qp.forEach(o),li=p(we," para m\xE1s detalles."),we.forEach(o),Wo=v(t),O(vt.$$.fragment,t),Vo=v(t),Ve=f(t,"H3",{class:!0});var mr=n(Ve);Et=f(mr,"A",{id:!0,class:!0,href:!0});var Xp=n(Et);Ts=f(Xp,"SPAN",{});var ec=n(Ts);O(ea.$$.fragment,ec),ec.forEach(o),Xp.forEach(o),ni=v(mr),zs=f(mr,"SPAN",{});var tc=n(zs);ii=p(tc,"Guarda un modelo"),tc.forEach(o),mr.forEach(o),Ko=v(t),O(bt.$$.fragment,t),Go=v(t),Ie=f(t,"P",{});var ya=n(Ie);pi=p(ya,"Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),xs=f(ya,"CODE",{});var ac=n(xs);ci=p(ac,"from_pt"),ac.forEach(o),ui=p(ya," o "),Ms=f(ya,"CODE",{});var sc=n(Ms);fi=p(sc,"from_tf"),sc.forEach(o),di=p(ya," puede convertir el modelo de un framework al otro:"),ya.forEach(o),Jo=v(t),O(wt.$$.fragment,t),this.h()},h(){d(e,"name","hf:doc:metadata"),d(e,"content",JSON.stringify(qu)),d(r,"id","quick-tour"),d(r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r,"href","#quick-tour"),d(a,"class","relative group"),d(z,"href","./model_doc/auto"),d(B,"id","pipeline"),d(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B,"href","#pipeline"),d(K,"class","relative group"),d(Qe,"id","uso-del-pipeline"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#uso-del-pipeline"),d(Le,"class","relative group"),d(Tt,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),d(Tt,"rel","nofollow"),d(Mt,"href","https://huggingface.co/docs/datasets/"),d(Mt,"rel","nofollow"),d(Ot,"href","https://huggingface.co/docs/datasets/quickstart.html"),d(Ot,"rel","nofollow"),d(Dt,"href","https://huggingface.co/datasets/PolyAI/minds14"),d(Dt,"rel","nofollow"),d(oa,"href","./main_classes/pipelines"),d(lt,"id","use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lt,"href","#use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(He,"class","relative group"),d(Ht,"href","https://huggingface.co/models"),d(Ht,"rel","nofollow"),d(Ut,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),d(Ut,"rel","nofollow"),d(ra,"href","./training"),d(la,"href","./model_sharing"),d(it,"id","autoclass"),d(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(it,"href","#autoclass"),d(Ue,"class","relative group"),d(na,"href","./model_doc/auto"),d(pt,"id","autotokenizer"),d(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pt,"href","#autotokenizer"),d(Re,"class","relative group"),d(ia,"href","./tokenizer_summary"),d(fa,"href","./glossary#input-ids"),d(ma,"href",".glossary#attention-mask"),d(ha,"href","./preprocessing"),d($t,"id","automodel"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#automodel"),d(We,"class","relative group"),d(Zt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Zt,"rel","nofollow"),d(Qt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Qt,"rel","nofollow"),d(Xt,"href","https://keras.io/"),d(Xt,"rel","nofollow"),d($a,"href","./training"),d(Et,"id","guarda-un-modelo"),d(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Et,"href","#guarda-un-modelo"),d(Ve,"class","relative group")},m(t,h){s(document.head,e),$(t,l,h),$(t,a,h),s(a,r),s(r,c),M(_,c,null),s(a,E),s(a,b),s(b,k),$(t,C,h),M(A,t,h),$(t,y,h),$(t,T,h),s(T,U),s(T,F),s(F,W),s(T,w),s(T,z),s(z,J),s(T,R),$(t,L,h),M(V,t,h),$(t,Y,h),$(t,K,h),s(K,B),s(B,re),M(se,re,null),s(K,oe),s(K,ue),s(ue,ie),$(t,fe,h),$(t,le,h),s(le,X),s(X,pe),s(le,de),$(t,D,h),M(H,t,h),$(t,te,h),$(t,S,h),s(S,G),s(S,ce),s(ce,$e),s(S,Q),$(t,ke,h),$(t,ae,h),s(ae,je),s(je,ve),s(ae,qe),$(t,_e,h),$(t,ee,h),s(ee,Ce),s(Ce,$r),s(ee,_r),s(ee,za),s(za,gr),s(ee,vr),s(ee,xa),s(xa,Er),s(ee,br),s(ee,Ma),s(Ma,wr),s(ee,kr),s(ee,Pa),s(Pa,jr),s(ee,yr),s(ee,Sa),s(Sa,Ar),s(ee,qr),s(ee,Oa),s(Oa,Cr),s(ee,Tr),s(ee,Da),s(Da,zr),$(t,Ws,h),$(t,yt,h),s(yt,Ia),s(Ia,xr),s(yt,Mr),$(t,Vs,h),$(t,Te,h),s(Te,Na),s(Na,Pr),s(Te,Sr),s(Te,Fa),s(Fa,Or),s(Te,Dr),s(Te,La),s(La,Ir),$(t,Ks,h),$(t,At,h),s(At,Ha),s(Ha,Nr),s(At,Fr),$(t,Gs,h),$(t,Ye,h),s(Ye,Ua),s(Ua,Lr),s(Ye,Hr),s(Ye,Ra),s(Ra,Ur),$(t,Js,h),M(Ze,t,h),$(t,Bs,h),$(t,Le,h),s(Le,Qe),s(Qe,Wa),M(qt,Wa,null),s(Le,Rr),s(Le,Va),s(Va,Wr),$(t,Ys,h),$(t,Xe,h),s(Xe,Vr),s(Xe,Ka),s(Ka,Kr),s(Xe,Gr),$(t,Zs,h),$(t,sa,h),s(sa,Jr),$(t,Qs,h),M(et,t,h),$(t,Xs,h),$(t,tt,h),s(tt,Br),s(tt,Ga),s(Ga,Yr),s(tt,Zr),$(t,eo,h),M(Ct,t,h),$(t,to,h),$(t,ze,h),s(ze,Qr),s(ze,Tt),s(Tt,Xr),s(ze,el),s(ze,Ja),s(Ja,tl),s(ze,al),$(t,ao,h),M(zt,t,h),$(t,so,h),$(t,at,h),s(at,sl),s(at,Ba),s(Ba,ol),s(at,rl),$(t,oo,h),M(xt,t,h),$(t,ro,h),$(t,xe,h),s(xe,ll),s(xe,Ya),s(Ya,nl),s(xe,il),s(xe,Mt),s(Mt,pl),s(xe,cl),$(t,lo,h),M(Pt,t,h),$(t,no,h),$(t,ye,h),s(ye,ul),s(ye,Za),s(Za,fl),s(ye,dl),s(ye,Qa),s(Qa,ml),s(ye,hl),s(ye,Xa),s(Xa,$l),s(ye,_l),$(t,io,h),M(St,t,h),$(t,po,h),$(t,Me,h),s(Me,gl),s(Me,Ot),s(Ot,vl),s(Me,El),s(Me,Dt),s(Dt,bl),s(Me,wl),$(t,co,h),M(It,t,h),$(t,uo,h),$(t,st,h),s(st,kl),s(st,es),s(es,jl),s(st,yl),$(t,fo,h),M(Nt,t,h),$(t,mo,h),$(t,ot,h),s(ot,Al),s(ot,ts),s(ts,ql),s(ot,Cl),$(t,ho,h),M(Ft,t,h),$(t,$o,h),$(t,rt,h),s(rt,Tl),s(rt,oa),s(oa,zl),s(rt,xl),$(t,_o,h),$(t,He,h),s(He,lt),s(lt,as),M(Lt,as,null),s(He,Ml),s(He,ss),s(ss,Pl),$(t,go,h),$(t,Ee,h),s(Ee,Sl),s(Ee,os),s(os,Ol),s(Ee,Dl),s(Ee,Ht),s(Ht,Il),s(Ee,Nl),s(Ee,rs),s(rs,Fl),s(Ee,Ll),s(Ee,Ut),s(Ut,Hl),s(Ee,Ul),$(t,vo,h),M(Rt,t,h),$(t,Eo,h),M(nt,t,h),$(t,bo,h),$(t,Pe,h),s(Pe,Rl),s(Pe,ls),s(ls,Wl),s(Pe,Vl),s(Pe,ns),s(ns,Kl),s(Pe,Gl),$(t,wo,h),M(Wt,t,h),$(t,ko,h),$(t,Se,h),s(Se,Jl),s(Se,ra),s(ra,Bl),s(Se,Yl),s(Se,la),s(la,Zl),s(Se,Ql),$(t,jo,h),$(t,Ue,h),s(Ue,it),s(it,is),M(Vt,is,null),s(Ue,Xl),s(Ue,ps),s(ps,en),$(t,yo,h),M(Kt,t,h),$(t,Ao,h),$(t,me,h),s(me,tn),s(me,cs),s(cs,an),s(me,sn),s(me,us),s(us,on),s(me,rn),s(me,fs),s(fs,ln),s(me,nn),s(me,na),s(na,pn),s(me,cn),s(me,ds),s(ds,un),s(me,fn),s(me,ms),s(ms,dn),s(me,mn),$(t,qo,h),$(t,Oe,h),s(Oe,hn),s(Oe,hs),s(hs,$n),s(Oe,_n),s(Oe,$s),s($s,gn),s(Oe,vn),$(t,Co,h),$(t,Re,h),s(Re,pt),s(pt,_s),M(Gt,_s,null),s(Re,En),s(Re,gs),s(gs,bn),$(t,To,h),$(t,De,h),s(De,wn),s(De,vs),s(vs,kn),s(De,jn),s(De,ia),s(ia,yn),s(De,An),$(t,zo,h),$(t,ct,h),s(ct,qn),s(ct,Es),s(Es,Cn),s(ct,Tn),$(t,xo,h),M(Jt,t,h),$(t,Mo,h),$(t,ut,h),s(ut,zn),s(ut,bs),s(bs,xn),s(ut,Mn),$(t,Po,h),$(t,pa,h),s(pa,Pn),$(t,So,h),M(Bt,t,h),$(t,Oo,h),$(t,ca,h),s(ca,Sn),$(t,Do,h),$(t,ft,h),s(ft,ua),s(ua,fa),s(fa,On),s(ua,Dn),s(ft,In),s(ft,da),s(da,ma),s(ma,Nn),s(da,Fn),$(t,Io,h),$(t,dt,h),s(dt,Ln),s(dt,ws),s(ws,Hn),s(dt,Un),$(t,No,h),M(mt,t,h),$(t,Fo,h),$(t,ht,h),s(ht,Rn),s(ht,ha),s(ha,Wn),s(ht,Vn),$(t,Lo,h),$(t,We,h),s(We,$t),s($t,ks),M(Yt,ks,null),s(We,Kn),s(We,js),s(js,Gn),$(t,Ho,h),M(_t,t,h),$(t,Uo,h),M(gt,t,h),$(t,Ro,h),$(t,he,h),s(he,Jn),s(he,Zt),s(Zt,ys),s(ys,Bn),s(he,Yn),s(he,Qt),s(Qt,As),s(As,Zn),s(he,Qn),s(he,qs),s(qs,Xn),s(he,ei),s(he,Cs),s(Cs,ti),s(he,ai),s(he,Xt),s(Xt,si),s(he,oi),s(he,$a),s($a,ri),s(he,li),$(t,Wo,h),M(vt,t,h),$(t,Vo,h),$(t,Ve,h),s(Ve,Et),s(Et,Ts),M(ea,Ts,null),s(Ve,ni),s(Ve,zs),s(zs,ii),$(t,Ko,h),M(bt,t,h),$(t,Go,h),$(t,Ie,h),s(Ie,pi),s(Ie,xs),s(xs,ci),s(Ie,ui),s(Ie,Ms),s(Ms,fi),s(Ie,di),$(t,Jo,h),M(wt,t,h),Bo=!0},p(t,[h]){const ta={};h&2&&(ta.$$scope={dirty:h,ctx:t}),V.$set(ta);const Ps={};h&2&&(Ps.$$scope={dirty:h,ctx:t}),Ze.$set(Ps);const Ss={};h&2&&(Ss.$$scope={dirty:h,ctx:t}),et.$set(Ss);const Os={};h&2&&(Os.$$scope={dirty:h,ctx:t}),nt.$set(Os);const Ke={};h&2&&(Ke.$$scope={dirty:h,ctx:t}),mt.$set(Ke);const Ds={};h&2&&(Ds.$$scope={dirty:h,ctx:t}),_t.$set(Ds);const Is={};h&2&&(Is.$$scope={dirty:h,ctx:t}),gt.$set(Is);const aa={};h&2&&(aa.$$scope={dirty:h,ctx:t}),vt.$set(aa);const Ns={};h&2&&(Ns.$$scope={dirty:h,ctx:t}),bt.$set(Ns);const Fs={};h&2&&(Fs.$$scope={dirty:h,ctx:t}),wt.$set(Fs)},i(t){Bo||(j(_.$$.fragment,t),j(A.$$.fragment,t),j(V.$$.fragment,t),j(se.$$.fragment,t),j(H.$$.fragment,t),j(Ze.$$.fragment,t),j(qt.$$.fragment,t),j(et.$$.fragment,t),j(Ct.$$.fragment,t),j(zt.$$.fragment,t),j(xt.$$.fragment,t),j(Pt.$$.fragment,t),j(St.$$.fragment,t),j(It.$$.fragment,t),j(Nt.$$.fragment,t),j(Ft.$$.fragment,t),j(Lt.$$.fragment,t),j(Rt.$$.fragment,t),j(nt.$$.fragment,t),j(Wt.$$.fragment,t),j(Vt.$$.fragment,t),j(Kt.$$.fragment,t),j(Gt.$$.fragment,t),j(Jt.$$.fragment,t),j(Bt.$$.fragment,t),j(mt.$$.fragment,t),j(Yt.$$.fragment,t),j(_t.$$.fragment,t),j(gt.$$.fragment,t),j(vt.$$.fragment,t),j(ea.$$.fragment,t),j(bt.$$.fragment,t),j(wt.$$.fragment,t),Bo=!0)},o(t){q(_.$$.fragment,t),q(A.$$.fragment,t),q(V.$$.fragment,t),q(se.$$.fragment,t),q(H.$$.fragment,t),q(Ze.$$.fragment,t),q(qt.$$.fragment,t),q(et.$$.fragment,t),q(Ct.$$.fragment,t),q(zt.$$.fragment,t),q(xt.$$.fragment,t),q(Pt.$$.fragment,t),q(St.$$.fragment,t),q(It.$$.fragment,t),q(Nt.$$.fragment,t),q(Ft.$$.fragment,t),q(Lt.$$.fragment,t),q(Rt.$$.fragment,t),q(nt.$$.fragment,t),q(Wt.$$.fragment,t),q(Vt.$$.fragment,t),q(Kt.$$.fragment,t),q(Gt.$$.fragment,t),q(Jt.$$.fragment,t),q(Bt.$$.fragment,t),q(mt.$$.fragment,t),q(Yt.$$.fragment,t),q(_t.$$.fragment,t),q(gt.$$.fragment,t),q(vt.$$.fragment,t),q(ea.$$.fragment,t),q(bt.$$.fragment,t),q(wt.$$.fragment,t),Bo=!1},d(t){o(e),t&&o(l),t&&o(a),P(_),t&&o(C),P(A,t),t&&o(y),t&&o(T),t&&o(L),P(V,t),t&&o(Y),t&&o(K),P(se),t&&o(fe),t&&o(le),t&&o(D),P(H,t),t&&o(te),t&&o(S),t&&o(ke),t&&o(ae),t&&o(_e),t&&o(ee),t&&o(Ws),t&&o(yt),t&&o(Vs),t&&o(Te),t&&o(Ks),t&&o(At),t&&o(Gs),t&&o(Ye),t&&o(Js),P(Ze,t),t&&o(Bs),t&&o(Le),P(qt),t&&o(Ys),t&&o(Xe),t&&o(Zs),t&&o(sa),t&&o(Qs),P(et,t),t&&o(Xs),t&&o(tt),t&&o(eo),P(Ct,t),t&&o(to),t&&o(ze),t&&o(ao),P(zt,t),t&&o(so),t&&o(at),t&&o(oo),P(xt,t),t&&o(ro),t&&o(xe),t&&o(lo),P(Pt,t),t&&o(no),t&&o(ye),t&&o(io),P(St,t),t&&o(po),t&&o(Me),t&&o(co),P(It,t),t&&o(uo),t&&o(st),t&&o(fo),P(Nt,t),t&&o(mo),t&&o(ot),t&&o(ho),P(Ft,t),t&&o($o),t&&o(rt),t&&o(_o),t&&o(He),P(Lt),t&&o(go),t&&o(Ee),t&&o(vo),P(Rt,t),t&&o(Eo),P(nt,t),t&&o(bo),t&&o(Pe),t&&o(wo),P(Wt,t),t&&o(ko),t&&o(Se),t&&o(jo),t&&o(Ue),P(Vt),t&&o(yo),P(Kt,t),t&&o(Ao),t&&o(me),t&&o(qo),t&&o(Oe),t&&o(Co),t&&o(Re),P(Gt),t&&o(To),t&&o(De),t&&o(zo),t&&o(ct),t&&o(xo),P(Jt,t),t&&o(Mo),t&&o(ut),t&&o(Po),t&&o(pa),t&&o(So),P(Bt,t),t&&o(Oo),t&&o(ca),t&&o(Do),t&&o(ft),t&&o(Io),t&&o(dt),t&&o(No),P(mt,t),t&&o(Fo),t&&o(ht),t&&o(Lo),t&&o(We),P(Yt),t&&o(Ho),P(_t,t),t&&o(Uo),P(gt,t),t&&o(Ro),t&&o(he),t&&o(Wo),P(vt,t),t&&o(Vo),t&&o(Ve),P(ea),t&&o(Ko),P(bt,t),t&&o(Go),t&&o(Ie),t&&o(Jo),P(wt,t)}}}const qu={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"use-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Use otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function Cu(m){return fc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Su extends Ge{constructor(e){super();Je(this,e,Cu,Au,Be,{})}}export{Su as default,qu as metadata};
