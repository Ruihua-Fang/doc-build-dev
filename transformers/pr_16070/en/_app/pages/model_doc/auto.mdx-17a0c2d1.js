import{S as y7t,i as w7t,s as A7t,e as a,k as l,w as f,t as o,M as L7t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as VBr}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function B7t(Ii){let J,$e,de,he,io,fe,Ce,Vo,ji,If,fa,Di,Ni,Y4,jf,Be,co,qi,On,K4,Gn,Xn,Z4,Oi,Vn,eE,Gi,Df,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),he=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),Y4=o(")."),jf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),K4=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),Z4=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),eE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var pe=s(J);$e=r(pe,"If your "),de=n(pe,"CODE",{});var V8=s(de);he=r(V8,"NewModelConfig"),V8.forEach(t),io=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Xi=s(fe);Ce=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(pe,`, make sure its
`),ji=n(pe,"CODE",{});var z8=s(ji);If=r(z8,"model_type"),z8.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Di=n(pe,"CODE",{});var W8=s(Di);Ni=r(W8,'"new-model"'),W8.forEach(t),Y4=r(pe,")."),pe.forEach(t),jf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),K4=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var Q8=s(Gn);Xn=r(Q8,"PreTrainedModel"),Q8.forEach(t),Z4=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Nf=s(Oi);Vn=r(Nf,"config_class"),Nf.forEach(t),eE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var H8=s(Gi);Df=r(H8,"NewModelConfig"),H8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(Gn,"href","/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,J,pe),e(J,$e),e(J,de),e(de,he),e(J,io),e(J,fe),e(fe,Ce),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Di),e(Di,Ni),e(J,Y4),b(fo,jf,pe),b(fo,Be,pe),e(Be,co),e(Be,qi),e(qi,On),e(Be,K4),e(Be,Gn),e(Gn,Xn),e(Be,Z4),e(Be,Oi),e(Oi,Vn),e(Be,eE),e(Be,Gi),e(Gi,Df),e(Be,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Be)}}}function x7t(Ii){let J,$e,de,he,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Ce=s(J);$e=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,J,Ce),e(J,$e),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function k7t(Ii){let J,$e,de,he,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Ce=s(J);$e=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,J,Ce),e(J,$e),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function R7t(Ii){let J,$e,de,he,io,fe,Ce,Vo,ji,If,fa,Di,Ni,Y4,jf,Be,co,qi,On,K4,Gn,Xn,Z4,Oi,Vn,eE,Gi,Df,qa,fo,pe,V8,Xi,z8,W8,zo,Oa,Q8,Nf,H8,IPe,Cxe,Vi,qf,CQ,oE,jPe,MQ,DPe,Mxe,zn,NPe,EQ,qPe,OPe,yQ,GPe,XPe,Exe,rE,yxe,U8,VPe,wxe,Of,Axe,zi,Gf,wQ,tE,zPe,AQ,WPe,Lxe,Wo,aE,QPe,nE,HPe,J8,UPe,JPe,YPe,sE,KPe,LQ,ZPe,e$e,o$e,mo,lE,r$e,BQ,t$e,a$e,Wi,n$e,xQ,s$e,l$e,kQ,i$e,d$e,c$e,v,Xf,RQ,f$e,m$e,Y8,g$e,h$e,p$e,Vf,SQ,_$e,u$e,K8,b$e,v$e,T$e,zf,PQ,F$e,C$e,Z8,M$e,E$e,y$e,Wf,$Q,w$e,A$e,e9,L$e,B$e,x$e,Qf,IQ,k$e,R$e,o9,S$e,P$e,$$e,Hf,jQ,I$e,j$e,r9,D$e,N$e,q$e,Uf,DQ,O$e,G$e,t9,X$e,V$e,z$e,Jf,NQ,W$e,Q$e,a9,H$e,U$e,J$e,Yf,qQ,Y$e,K$e,n9,Z$e,eIe,oIe,Kf,OQ,rIe,tIe,s9,aIe,nIe,sIe,Zf,GQ,lIe,iIe,l9,dIe,cIe,fIe,em,XQ,mIe,gIe,i9,hIe,pIe,_Ie,om,VQ,uIe,bIe,d9,vIe,TIe,FIe,rm,zQ,CIe,MIe,c9,EIe,yIe,wIe,tm,WQ,AIe,LIe,f9,BIe,xIe,kIe,am,QQ,RIe,SIe,m9,PIe,$Ie,IIe,nm,HQ,jIe,DIe,g9,NIe,qIe,OIe,sm,UQ,GIe,XIe,h9,VIe,zIe,WIe,lm,JQ,QIe,HIe,p9,UIe,JIe,YIe,im,YQ,KIe,ZIe,_9,eje,oje,rje,dm,KQ,tje,aje,u9,nje,sje,lje,cm,ZQ,ije,dje,b9,cje,fje,mje,fm,eH,gje,hje,v9,pje,_je,uje,mm,oH,bje,vje,T9,Tje,Fje,Cje,gm,rH,Mje,Eje,F9,yje,wje,Aje,hm,tH,Lje,Bje,C9,xje,kje,Rje,pm,aH,Sje,Pje,M9,$je,Ije,jje,_m,nH,Dje,Nje,E9,qje,Oje,Gje,um,sH,Xje,Vje,y9,zje,Wje,Qje,bm,lH,Hje,Uje,w9,Jje,Yje,Kje,vm,iH,Zje,eDe,A9,oDe,rDe,tDe,Tm,dH,aDe,nDe,L9,sDe,lDe,iDe,Fm,cH,dDe,cDe,B9,fDe,mDe,gDe,Cm,fH,hDe,pDe,x9,_De,uDe,bDe,Mm,mH,vDe,TDe,k9,FDe,CDe,MDe,Em,gH,EDe,yDe,R9,wDe,ADe,LDe,ym,hH,BDe,xDe,S9,kDe,RDe,SDe,wm,pH,PDe,$De,P9,IDe,jDe,DDe,Am,_H,NDe,qDe,$9,ODe,GDe,XDe,Lm,uH,VDe,zDe,I9,WDe,QDe,HDe,Bm,bH,UDe,JDe,j9,YDe,KDe,ZDe,xm,vH,eNe,oNe,D9,rNe,tNe,aNe,km,TH,nNe,sNe,N9,lNe,iNe,dNe,Rm,FH,cNe,fNe,q9,mNe,gNe,hNe,Sm,CH,pNe,_Ne,O9,uNe,bNe,vNe,Pm,MH,TNe,FNe,G9,CNe,MNe,ENe,$m,EH,yNe,wNe,X9,ANe,LNe,BNe,Im,yH,xNe,kNe,V9,RNe,SNe,PNe,jm,wH,$Ne,INe,z9,jNe,DNe,NNe,Dm,AH,qNe,ONe,W9,GNe,XNe,VNe,Nm,LH,zNe,WNe,Q9,QNe,HNe,UNe,qm,BH,JNe,YNe,H9,KNe,ZNe,eqe,Om,xH,oqe,rqe,U9,tqe,aqe,nqe,Gm,kH,sqe,lqe,J9,iqe,dqe,cqe,Xm,RH,fqe,mqe,Y9,gqe,hqe,pqe,Vm,SH,_qe,uqe,K9,bqe,vqe,Tqe,zm,PH,Fqe,Cqe,Z9,Mqe,Eqe,yqe,Wm,$H,wqe,Aqe,eB,Lqe,Bqe,xqe,Qm,IH,kqe,Rqe,oB,Sqe,Pqe,$qe,Hm,jH,Iqe,jqe,rB,Dqe,Nqe,qqe,Um,DH,Oqe,Gqe,tB,Xqe,Vqe,zqe,Jm,NH,Wqe,Qqe,aB,Hqe,Uqe,Jqe,Ym,qH,Yqe,Kqe,nB,Zqe,eOe,oOe,Km,OH,rOe,tOe,sB,aOe,nOe,sOe,Zm,GH,lOe,iOe,lB,dOe,cOe,fOe,eg,XH,mOe,gOe,iB,hOe,pOe,_Oe,og,VH,uOe,bOe,dB,vOe,TOe,FOe,rg,zH,COe,MOe,cB,EOe,yOe,wOe,tg,WH,AOe,LOe,fB,BOe,xOe,kOe,ag,QH,ROe,SOe,mB,POe,$Oe,IOe,ng,HH,jOe,DOe,gB,NOe,qOe,OOe,sg,UH,GOe,XOe,hB,VOe,zOe,WOe,lg,JH,QOe,HOe,pB,UOe,JOe,YOe,ig,YH,KOe,ZOe,_B,eGe,oGe,rGe,dg,KH,tGe,aGe,uB,nGe,sGe,lGe,cg,ZH,iGe,dGe,bB,cGe,fGe,mGe,fg,eU,gGe,hGe,vB,pGe,_Ge,uGe,mg,oU,bGe,vGe,TB,TGe,FGe,CGe,gg,rU,MGe,EGe,FB,yGe,wGe,AGe,hg,tU,LGe,BGe,CB,xGe,kGe,RGe,pg,aU,SGe,PGe,MB,$Ge,IGe,jGe,_g,nU,DGe,NGe,EB,qGe,OGe,GGe,ug,sU,XGe,VGe,yB,zGe,WGe,QGe,bg,lU,HGe,UGe,wB,JGe,YGe,KGe,vg,iU,ZGe,eXe,AB,oXe,rXe,tXe,Tg,dU,aXe,nXe,LB,sXe,lXe,iXe,Fg,cU,dXe,cXe,BB,fXe,mXe,gXe,Cg,fU,hXe,pXe,xB,_Xe,uXe,bXe,Mg,mU,vXe,TXe,kB,FXe,CXe,MXe,Eg,gU,EXe,yXe,RB,wXe,AXe,LXe,yg,hU,BXe,xXe,SB,kXe,RXe,SXe,wg,pU,PXe,$Xe,PB,IXe,jXe,DXe,Ag,_U,NXe,qXe,$B,OXe,GXe,XXe,Lg,uU,VXe,zXe,IB,WXe,QXe,HXe,Bg,bU,UXe,JXe,jB,YXe,KXe,ZXe,vU,eVe,oVe,iE,rVe,xg,dE,tVe,TU,aVe,Bxe,Qi,kg,FU,cE,nVe,CU,sVe,xxe,Qo,fE,lVe,mE,iVe,DB,dVe,cVe,fVe,gE,mVe,MU,gVe,hVe,pVe,go,hE,_Ve,EU,uVe,bVe,Ga,vVe,yU,TVe,FVe,wU,CVe,MVe,AU,EVe,yVe,wVe,E,Wn,LU,AVe,LVe,NB,BVe,xVe,qB,kVe,RVe,SVe,Qn,BU,PVe,$Ve,OB,IVe,jVe,GB,DVe,NVe,qVe,Hn,xU,OVe,GVe,XB,XVe,VVe,VB,zVe,WVe,QVe,Rg,kU,HVe,UVe,zB,JVe,YVe,KVe,Un,RU,ZVe,eze,WB,oze,rze,QB,tze,aze,nze,Sg,SU,sze,lze,HB,ize,dze,cze,Pg,PU,fze,mze,UB,gze,hze,pze,$g,$U,_ze,uze,JB,bze,vze,Tze,Jn,IU,Fze,Cze,YB,Mze,Eze,KB,yze,wze,Aze,Yn,jU,Lze,Bze,ZB,xze,kze,ex,Rze,Sze,Pze,Kn,DU,$ze,Ize,ox,jze,Dze,rx,Nze,qze,Oze,Ig,NU,Gze,Xze,tx,Vze,zze,Wze,jg,qU,Qze,Hze,ax,Uze,Jze,Yze,Zn,OU,Kze,Zze,nx,eWe,oWe,sx,rWe,tWe,aWe,Dg,GU,nWe,sWe,lx,lWe,iWe,dWe,es,XU,cWe,fWe,ix,mWe,gWe,dx,hWe,pWe,_We,os,VU,uWe,bWe,cx,vWe,TWe,fx,FWe,CWe,MWe,rs,zU,EWe,yWe,mx,wWe,AWe,WU,LWe,BWe,xWe,Ng,QU,kWe,RWe,gx,SWe,PWe,$We,ts,HU,IWe,jWe,hx,DWe,NWe,px,qWe,OWe,GWe,qg,UU,XWe,VWe,_x,zWe,WWe,QWe,as,JU,HWe,UWe,ux,JWe,YWe,bx,KWe,ZWe,eQe,ns,YU,oQe,rQe,vx,tQe,aQe,Tx,nQe,sQe,lQe,ss,KU,iQe,dQe,Fx,cQe,fQe,Cx,mQe,gQe,hQe,Og,ZU,pQe,_Qe,Mx,uQe,bQe,vQe,ls,eJ,TQe,FQe,Ex,CQe,MQe,yx,EQe,yQe,wQe,Gg,oJ,AQe,LQe,wx,BQe,xQe,kQe,is,rJ,RQe,SQe,Ax,PQe,$Qe,Lx,IQe,jQe,DQe,ds,tJ,NQe,qQe,Bx,OQe,GQe,xx,XQe,VQe,zQe,cs,aJ,WQe,QQe,kx,HQe,UQe,Rx,JQe,YQe,KQe,fs,nJ,ZQe,eHe,Sx,oHe,rHe,Px,tHe,aHe,nHe,Xg,sJ,sHe,lHe,$x,iHe,dHe,cHe,ms,lJ,fHe,mHe,Ix,gHe,hHe,jx,pHe,_He,uHe,gs,iJ,bHe,vHe,Dx,THe,FHe,Nx,CHe,MHe,EHe,hs,dJ,yHe,wHe,qx,AHe,LHe,Ox,BHe,xHe,kHe,ps,cJ,RHe,SHe,Gx,PHe,$He,Xx,IHe,jHe,DHe,_s,fJ,NHe,qHe,Vx,OHe,GHe,zx,XHe,VHe,zHe,us,mJ,WHe,QHe,Wx,HHe,UHe,Qx,JHe,YHe,KHe,Vg,gJ,ZHe,eUe,Hx,oUe,rUe,tUe,bs,hJ,aUe,nUe,Ux,sUe,lUe,Jx,iUe,dUe,cUe,zg,pJ,fUe,mUe,Yx,gUe,hUe,pUe,Wg,_J,_Ue,uUe,Kx,bUe,vUe,TUe,vs,uJ,FUe,CUe,Zx,MUe,EUe,ek,yUe,wUe,AUe,Ts,bJ,LUe,BUe,ok,xUe,kUe,rk,RUe,SUe,PUe,Qg,vJ,$Ue,IUe,tk,jUe,DUe,NUe,Fs,TJ,qUe,OUe,ak,GUe,XUe,nk,VUe,zUe,WUe,Cs,FJ,QUe,HUe,sk,UUe,JUe,lk,YUe,KUe,ZUe,Ms,CJ,eJe,oJe,ik,rJe,tJe,dk,aJe,nJe,sJe,Es,MJ,lJe,iJe,ck,dJe,cJe,fk,fJe,mJe,gJe,ys,EJ,hJe,pJe,mk,_Je,uJe,gk,bJe,vJe,TJe,Hg,yJ,FJe,CJe,hk,MJe,EJe,yJe,Ug,wJ,wJe,AJe,pk,LJe,BJe,xJe,Jg,AJ,kJe,RJe,_k,SJe,PJe,$Je,Yg,LJ,IJe,jJe,uk,DJe,NJe,qJe,ws,BJ,OJe,GJe,bk,XJe,VJe,vk,zJe,WJe,QJe,Kg,xJ,HJe,UJe,Tk,JJe,YJe,KJe,As,kJ,ZJe,eYe,Fk,oYe,rYe,Ck,tYe,aYe,nYe,Ls,RJ,sYe,lYe,Mk,iYe,dYe,Ek,cYe,fYe,mYe,Bs,SJ,gYe,hYe,yk,pYe,_Ye,wk,uYe,bYe,vYe,xs,PJ,TYe,FYe,Ak,CYe,MYe,Lk,EYe,yYe,wYe,ks,$J,AYe,LYe,Bk,BYe,xYe,xk,kYe,RYe,SYe,Rs,IJ,PYe,$Ye,kk,IYe,jYe,Rk,DYe,NYe,qYe,Zg,jJ,OYe,GYe,Sk,XYe,VYe,zYe,eh,DJ,WYe,QYe,Pk,HYe,UYe,JYe,Ss,NJ,YYe,KYe,$k,ZYe,eKe,Ik,oKe,rKe,tKe,Ps,qJ,aKe,nKe,jk,sKe,lKe,Dk,iKe,dKe,cKe,$s,OJ,fKe,mKe,Nk,gKe,hKe,qk,pKe,_Ke,uKe,oh,GJ,bKe,vKe,Ok,TKe,FKe,CKe,rh,XJ,MKe,EKe,Gk,yKe,wKe,AKe,th,VJ,LKe,BKe,Xk,xKe,kKe,RKe,ah,zJ,SKe,PKe,Vk,$Ke,IKe,jKe,Is,WJ,DKe,NKe,zk,qKe,OKe,Wk,GKe,XKe,VKe,nh,QJ,zKe,WKe,Qk,QKe,HKe,UKe,sh,HJ,JKe,YKe,Hk,KKe,ZKe,eZe,js,UJ,oZe,rZe,Uk,tZe,aZe,Jk,nZe,sZe,lZe,Ds,JJ,iZe,dZe,Yk,cZe,fZe,Kk,mZe,gZe,hZe,YJ,pZe,_Ze,pE,uZe,lh,_E,bZe,KJ,vZe,kxe,Hi,ih,ZJ,uE,TZe,eY,FZe,Rxe,Ho,bE,CZe,vE,MZe,Zk,EZe,yZe,wZe,TE,AZe,oY,LZe,BZe,xZe,Ie,FE,kZe,rY,RZe,SZe,Xa,PZe,tY,$Ze,IZe,aY,jZe,DZe,nY,NZe,qZe,OZe,te,dh,sY,GZe,XZe,eR,VZe,zZe,WZe,ch,lY,QZe,HZe,oR,UZe,JZe,YZe,fh,iY,KZe,ZZe,rR,eeo,oeo,reo,mh,dY,teo,aeo,tR,neo,seo,leo,gh,cY,ieo,deo,aR,ceo,feo,meo,hh,fY,geo,heo,nR,peo,_eo,ueo,ph,mY,beo,veo,sR,Teo,Feo,Ceo,_h,gY,Meo,Eeo,lR,yeo,weo,Aeo,uh,hY,Leo,Beo,iR,xeo,keo,Reo,bh,pY,Seo,Peo,dR,$eo,Ieo,jeo,vh,_Y,Deo,Neo,cR,qeo,Oeo,Geo,Th,uY,Xeo,Veo,fR,zeo,Weo,Qeo,Fh,bY,Heo,Ueo,mR,Jeo,Yeo,Keo,Ch,vY,Zeo,eoo,gR,ooo,roo,too,Mh,TY,aoo,noo,hR,soo,loo,ioo,Eh,FY,doo,coo,pR,foo,moo,goo,yh,CY,hoo,poo,_R,_oo,uoo,boo,wh,voo,MY,Too,Foo,CE,Coo,Ah,ME,Moo,EY,Eoo,Sxe,Ui,Lh,yY,EE,yoo,wY,woo,Pxe,Uo,yE,Aoo,wE,Loo,uR,Boo,xoo,koo,AE,Roo,AY,Soo,Poo,$oo,je,LE,Ioo,LY,joo,Doo,Ji,Noo,BY,qoo,Ooo,xY,Goo,Xoo,Voo,xe,Bh,kY,zoo,Woo,bR,Qoo,Hoo,Uoo,xh,RY,Joo,Yoo,vR,Koo,Zoo,ero,kh,SY,oro,rro,TR,tro,aro,nro,Rh,PY,sro,lro,FR,iro,dro,cro,Sh,$Y,fro,mro,CR,gro,hro,pro,Ph,IY,_ro,uro,MR,bro,vro,Tro,$h,jY,Fro,Cro,ER,Mro,Ero,yro,Ih,DY,wro,Aro,yR,Lro,Bro,xro,jh,kro,NY,Rro,Sro,BE,Pro,Dh,xE,$ro,qY,Iro,$xe,Yi,Nh,OY,kE,jro,GY,Dro,Ixe,Jo,RE,Nro,Ki,qro,XY,Oro,Gro,VY,Xro,Vro,zro,SE,Wro,zY,Qro,Hro,Uro,Vr,PE,Jro,WY,Yro,Kro,Zi,Zro,QY,eto,oto,HY,rto,tto,ato,UY,nto,sto,$E,lto,De,IE,ito,JY,dto,cto,Va,fto,YY,mto,gto,KY,hto,pto,ZY,_to,uto,bto,F,qh,eK,vto,Tto,wR,Fto,Cto,Mto,Oh,oK,Eto,yto,AR,wto,Ato,Lto,Gh,rK,Bto,xto,LR,kto,Rto,Sto,Xh,tK,Pto,$to,BR,Ito,jto,Dto,Vh,aK,Nto,qto,xR,Oto,Gto,Xto,zh,nK,Vto,zto,kR,Wto,Qto,Hto,Wh,sK,Uto,Jto,RR,Yto,Kto,Zto,Qh,lK,eao,oao,SR,rao,tao,aao,Hh,iK,nao,sao,PR,lao,iao,dao,Uh,dK,cao,fao,$R,mao,gao,hao,Jh,cK,pao,_ao,IR,uao,bao,vao,Yh,fK,Tao,Fao,jR,Cao,Mao,Eao,Kh,mK,yao,wao,DR,Aao,Lao,Bao,Zh,gK,xao,kao,NR,Rao,Sao,Pao,ep,hK,$ao,Iao,qR,jao,Dao,Nao,op,pK,qao,Oao,OR,Gao,Xao,Vao,rp,_K,zao,Wao,GR,Qao,Hao,Uao,tp,uK,Jao,Yao,XR,Kao,Zao,eno,ap,bK,ono,rno,VR,tno,ano,nno,np,vK,sno,lno,zR,ino,dno,cno,sp,TK,fno,mno,WR,gno,hno,pno,lp,FK,_no,uno,QR,bno,vno,Tno,ip,CK,Fno,Cno,HR,Mno,Eno,yno,dp,MK,wno,Ano,UR,Lno,Bno,xno,cp,EK,kno,Rno,JR,Sno,Pno,$no,fp,yK,Ino,jno,YR,Dno,Nno,qno,mp,wK,Ono,Gno,KR,Xno,Vno,zno,Ns,AK,Wno,Qno,ZR,Hno,Uno,eS,Jno,Yno,Kno,gp,LK,Zno,eso,oS,oso,rso,tso,hp,BK,aso,nso,rS,sso,lso,iso,pp,xK,dso,cso,tS,fso,mso,gso,_p,kK,hso,pso,aS,_so,uso,bso,up,RK,vso,Tso,nS,Fso,Cso,Mso,bp,SK,Eso,yso,sS,wso,Aso,Lso,vp,PK,Bso,xso,lS,kso,Rso,Sso,Tp,$K,Pso,$so,iS,Iso,jso,Dso,Fp,IK,Nso,qso,dS,Oso,Gso,Xso,Cp,jK,Vso,zso,cS,Wso,Qso,Hso,Mp,DK,Uso,Jso,fS,Yso,Kso,Zso,Ep,NK,elo,olo,mS,rlo,tlo,alo,yp,qK,nlo,slo,gS,llo,ilo,dlo,wp,OK,clo,flo,hS,mlo,glo,hlo,Ap,GK,plo,_lo,pS,ulo,blo,vlo,Lp,XK,Tlo,Flo,_S,Clo,Mlo,Elo,Bp,VK,ylo,wlo,uS,Alo,Llo,Blo,xp,zK,xlo,klo,bS,Rlo,Slo,Plo,kp,WK,$lo,Ilo,vS,jlo,Dlo,Nlo,Rp,QK,qlo,Olo,TS,Glo,Xlo,Vlo,Sp,HK,zlo,Wlo,FS,Qlo,Hlo,Ulo,Pp,UK,Jlo,Ylo,CS,Klo,Zlo,eio,$p,JK,oio,rio,MS,tio,aio,nio,Ip,YK,sio,lio,ES,iio,dio,cio,jp,KK,fio,mio,yS,gio,hio,pio,Dp,ZK,_io,uio,wS,bio,vio,Tio,Np,eZ,Fio,Cio,AS,Mio,Eio,yio,qp,oZ,wio,Aio,LS,Lio,Bio,xio,Op,rZ,kio,Rio,BS,Sio,Pio,$io,Gp,tZ,Iio,jio,xS,Dio,Nio,qio,Xp,aZ,Oio,Gio,kS,Xio,Vio,zio,Vp,nZ,Wio,Qio,RS,Hio,Uio,Jio,zp,sZ,Yio,Kio,SS,Zio,edo,odo,Wp,lZ,rdo,tdo,PS,ado,ndo,sdo,Qp,iZ,ldo,ido,$S,ddo,cdo,fdo,Hp,dZ,mdo,gdo,IS,hdo,pdo,_do,Up,cZ,udo,bdo,jS,vdo,Tdo,Fdo,Jp,fZ,Cdo,Mdo,DS,Edo,ydo,wdo,Yp,mZ,Ado,Ldo,NS,Bdo,xdo,kdo,Kp,gZ,Rdo,Sdo,qS,Pdo,$do,Ido,Zp,hZ,jdo,Ddo,OS,Ndo,qdo,Odo,e_,pZ,Gdo,Xdo,GS,Vdo,zdo,Wdo,o_,_Z,Qdo,Hdo,XS,Udo,Jdo,Ydo,r_,uZ,Kdo,Zdo,VS,eco,oco,rco,t_,bZ,tco,aco,zS,nco,sco,lco,a_,vZ,ico,dco,WS,cco,fco,mco,n_,TZ,gco,hco,QS,pco,_co,uco,s_,FZ,bco,vco,HS,Tco,Fco,Cco,l_,CZ,Mco,Eco,US,yco,wco,Aco,i_,MZ,Lco,Bco,JS,xco,kco,Rco,d_,EZ,Sco,Pco,YS,$co,Ico,jco,c_,yZ,Dco,Nco,KS,qco,Oco,Gco,f_,wZ,Xco,Vco,ZS,zco,Wco,Qco,m_,AZ,Hco,Uco,eP,Jco,Yco,Kco,g_,LZ,Zco,efo,oP,ofo,rfo,tfo,h_,BZ,afo,nfo,rP,sfo,lfo,ifo,p_,xZ,dfo,cfo,tP,ffo,mfo,gfo,__,kZ,hfo,pfo,aP,_fo,ufo,bfo,u_,RZ,vfo,Tfo,nP,Ffo,Cfo,Mfo,b_,SZ,Efo,yfo,sP,wfo,Afo,Lfo,v_,Bfo,PZ,xfo,kfo,$Z,Rfo,Sfo,IZ,Pfo,$fo,jE,jxe,ed,T_,jZ,DE,Ifo,DZ,jfo,Dxe,Yo,NE,Dfo,od,Nfo,NZ,qfo,Ofo,qZ,Gfo,Xfo,Vfo,qE,zfo,OZ,Wfo,Qfo,Hfo,zr,OE,Ufo,GZ,Jfo,Yfo,rd,Kfo,XZ,Zfo,emo,VZ,omo,rmo,tmo,zZ,amo,nmo,GE,smo,Ne,XE,lmo,WZ,imo,dmo,za,cmo,QZ,fmo,mmo,HZ,gmo,hmo,UZ,pmo,_mo,umo,k,F_,JZ,bmo,vmo,lP,Tmo,Fmo,Cmo,C_,YZ,Mmo,Emo,iP,ymo,wmo,Amo,M_,KZ,Lmo,Bmo,dP,xmo,kmo,Rmo,E_,ZZ,Smo,Pmo,cP,$mo,Imo,jmo,y_,eee,Dmo,Nmo,fP,qmo,Omo,Gmo,w_,oee,Xmo,Vmo,mP,zmo,Wmo,Qmo,A_,ree,Hmo,Umo,gP,Jmo,Ymo,Kmo,L_,tee,Zmo,ego,hP,ogo,rgo,tgo,B_,aee,ago,ngo,pP,sgo,lgo,igo,x_,nee,dgo,cgo,_P,fgo,mgo,ggo,k_,see,hgo,pgo,uP,_go,ugo,bgo,R_,lee,vgo,Tgo,bP,Fgo,Cgo,Mgo,S_,iee,Ego,ygo,vP,wgo,Ago,Lgo,P_,dee,Bgo,xgo,TP,kgo,Rgo,Sgo,$_,cee,Pgo,$go,FP,Igo,jgo,Dgo,I_,fee,Ngo,qgo,CP,Ogo,Ggo,Xgo,j_,mee,Vgo,zgo,MP,Wgo,Qgo,Hgo,D_,gee,Ugo,Jgo,EP,Ygo,Kgo,Zgo,N_,hee,eho,oho,yP,rho,tho,aho,q_,pee,nho,sho,wP,lho,iho,dho,O_,_ee,cho,fho,AP,mho,gho,hho,G_,uee,pho,_ho,LP,uho,bho,vho,X_,bee,Tho,Fho,BP,Cho,Mho,Eho,V_,vee,yho,who,xP,Aho,Lho,Bho,z_,Tee,xho,kho,kP,Rho,Sho,Pho,W_,Fee,$ho,Iho,RP,jho,Dho,Nho,Q_,Cee,qho,Oho,SP,Gho,Xho,Vho,H_,Mee,zho,Who,PP,Qho,Hho,Uho,U_,Eee,Jho,Yho,$P,Kho,Zho,epo,J_,yee,opo,rpo,IP,tpo,apo,npo,Y_,wee,spo,lpo,jP,ipo,dpo,cpo,K_,Aee,fpo,mpo,DP,gpo,hpo,ppo,Z_,Lee,_po,upo,NP,bpo,vpo,Tpo,eu,Bee,Fpo,Cpo,qP,Mpo,Epo,ypo,ou,xee,wpo,Apo,OP,Lpo,Bpo,xpo,ru,kee,kpo,Rpo,GP,Spo,Ppo,$po,tu,Ree,Ipo,jpo,XP,Dpo,Npo,qpo,au,See,Opo,Gpo,VP,Xpo,Vpo,zpo,nu,Pee,Wpo,Qpo,zP,Hpo,Upo,Jpo,su,Ypo,$ee,Kpo,Zpo,Iee,e_o,o_o,jee,r_o,t_o,VE,Nxe,td,lu,Dee,zE,a_o,Nee,n_o,qxe,Ko,WE,s_o,ad,l_o,qee,i_o,d_o,Oee,c_o,f_o,m_o,QE,g_o,Gee,h_o,p_o,__o,Wr,HE,u_o,Xee,b_o,v_o,nd,T_o,Vee,F_o,C_o,zee,M_o,E_o,y_o,Wee,w_o,A_o,UE,L_o,qe,JE,B_o,Qee,x_o,k_o,Wa,R_o,Hee,S_o,P_o,Uee,$_o,I_o,Jee,j_o,D_o,N_o,$,iu,Yee,q_o,O_o,WP,G_o,X_o,V_o,du,Kee,z_o,W_o,QP,Q_o,H_o,U_o,cu,Zee,J_o,Y_o,HP,K_o,Z_o,euo,fu,eoe,ouo,ruo,UP,tuo,auo,nuo,mu,ooe,suo,luo,JP,iuo,duo,cuo,gu,roe,fuo,muo,YP,guo,huo,puo,hu,toe,_uo,uuo,KP,buo,vuo,Tuo,pu,aoe,Fuo,Cuo,ZP,Muo,Euo,yuo,_u,noe,wuo,Auo,e$,Luo,Buo,xuo,uu,soe,kuo,Ruo,o$,Suo,Puo,$uo,bu,loe,Iuo,juo,r$,Duo,Nuo,quo,vu,ioe,Ouo,Guo,t$,Xuo,Vuo,zuo,Tu,doe,Wuo,Quo,a$,Huo,Uuo,Juo,Fu,coe,Yuo,Kuo,n$,Zuo,e0o,o0o,Cu,foe,r0o,t0o,s$,a0o,n0o,s0o,Mu,moe,l0o,i0o,l$,d0o,c0o,f0o,Eu,goe,m0o,g0o,i$,h0o,p0o,_0o,yu,hoe,u0o,b0o,d$,v0o,T0o,F0o,wu,poe,C0o,M0o,c$,E0o,y0o,w0o,Au,_oe,A0o,L0o,f$,B0o,x0o,k0o,Lu,uoe,R0o,S0o,m$,P0o,$0o,I0o,Bu,boe,j0o,D0o,g$,N0o,q0o,O0o,xu,voe,G0o,X0o,h$,V0o,z0o,W0o,ku,Toe,Q0o,H0o,p$,U0o,J0o,Y0o,Ru,Foe,K0o,Z0o,_$,e1o,o1o,r1o,Su,Coe,t1o,a1o,u$,n1o,s1o,l1o,Pu,Moe,i1o,d1o,b$,c1o,f1o,m1o,$u,Eoe,g1o,h1o,v$,p1o,_1o,u1o,Iu,yoe,b1o,v1o,T$,T1o,F1o,C1o,ju,woe,M1o,E1o,F$,y1o,w1o,A1o,Du,Aoe,L1o,B1o,C$,x1o,k1o,R1o,Nu,Loe,S1o,P1o,M$,$1o,I1o,j1o,qu,Boe,D1o,N1o,E$,q1o,O1o,G1o,Ou,xoe,X1o,V1o,y$,z1o,W1o,Q1o,Gu,koe,H1o,U1o,w$,J1o,Y1o,K1o,Xu,Z1o,Roe,ebo,obo,Soe,rbo,tbo,Poe,abo,nbo,YE,Oxe,sd,Vu,$oe,KE,sbo,Ioe,lbo,Gxe,Zo,ZE,ibo,ld,dbo,joe,cbo,fbo,Doe,mbo,gbo,hbo,e3,pbo,Noe,_bo,ubo,bbo,Qr,o3,vbo,qoe,Tbo,Fbo,id,Cbo,Ooe,Mbo,Ebo,Goe,ybo,wbo,Abo,Xoe,Lbo,Bbo,r3,xbo,Oe,t3,kbo,Voe,Rbo,Sbo,Qa,Pbo,zoe,$bo,Ibo,Woe,jbo,Dbo,Qoe,Nbo,qbo,Obo,I,zu,Hoe,Gbo,Xbo,A$,Vbo,zbo,Wbo,Wu,Uoe,Qbo,Hbo,L$,Ubo,Jbo,Ybo,Qu,Joe,Kbo,Zbo,B$,e2o,o2o,r2o,Hu,Yoe,t2o,a2o,x$,n2o,s2o,l2o,Uu,Koe,i2o,d2o,k$,c2o,f2o,m2o,Ju,Zoe,g2o,h2o,R$,p2o,_2o,u2o,Yu,ere,b2o,v2o,S$,T2o,F2o,C2o,Ku,ore,M2o,E2o,P$,y2o,w2o,A2o,Zu,rre,L2o,B2o,$$,x2o,k2o,R2o,e0,tre,S2o,P2o,I$,$2o,I2o,j2o,o0,are,D2o,N2o,j$,q2o,O2o,G2o,r0,nre,X2o,V2o,D$,z2o,W2o,Q2o,t0,sre,H2o,U2o,N$,J2o,Y2o,K2o,a0,lre,Z2o,evo,q$,ovo,rvo,tvo,n0,ire,avo,nvo,O$,svo,lvo,ivo,s0,dre,dvo,cvo,G$,fvo,mvo,gvo,l0,cre,hvo,pvo,X$,_vo,uvo,bvo,i0,fre,vvo,Tvo,V$,Fvo,Cvo,Mvo,d0,mre,Evo,yvo,z$,wvo,Avo,Lvo,c0,gre,Bvo,xvo,W$,kvo,Rvo,Svo,f0,hre,Pvo,$vo,Q$,Ivo,jvo,Dvo,m0,pre,Nvo,qvo,H$,Ovo,Gvo,Xvo,g0,_re,Vvo,zvo,U$,Wvo,Qvo,Hvo,h0,ure,Uvo,Jvo,J$,Yvo,Kvo,Zvo,p0,bre,e6o,o6o,Y$,r6o,t6o,a6o,_0,vre,n6o,s6o,K$,l6o,i6o,d6o,u0,Tre,c6o,f6o,Z$,m6o,g6o,h6o,b0,Fre,p6o,_6o,eI,u6o,b6o,v6o,v0,Cre,T6o,F6o,oI,C6o,M6o,E6o,T0,Mre,y6o,w6o,rI,A6o,L6o,B6o,F0,Ere,x6o,k6o,yre,R6o,S6o,P6o,C0,wre,$6o,I6o,tI,j6o,D6o,N6o,M0,Are,q6o,O6o,aI,G6o,X6o,V6o,E0,Lre,z6o,W6o,nI,Q6o,H6o,U6o,y0,Bre,J6o,Y6o,sI,K6o,Z6o,eTo,w0,oTo,xre,rTo,tTo,kre,aTo,nTo,Rre,sTo,lTo,a3,Xxe,dd,A0,Sre,n3,iTo,Pre,dTo,Vxe,er,s3,cTo,cd,fTo,$re,mTo,gTo,Ire,hTo,pTo,_To,l3,uTo,jre,bTo,vTo,TTo,Hr,i3,FTo,Dre,CTo,MTo,fd,ETo,Nre,yTo,wTo,qre,ATo,LTo,BTo,Ore,xTo,kTo,d3,RTo,Ge,c3,STo,Gre,PTo,$To,Ha,ITo,Xre,jTo,DTo,Vre,NTo,qTo,zre,OTo,GTo,XTo,ne,L0,Wre,VTo,zTo,lI,WTo,QTo,HTo,B0,Qre,UTo,JTo,iI,YTo,KTo,ZTo,x0,Hre,e7o,o7o,dI,r7o,t7o,a7o,k0,Ure,n7o,s7o,cI,l7o,i7o,d7o,R0,Jre,c7o,f7o,fI,m7o,g7o,h7o,S0,Yre,p7o,_7o,mI,u7o,b7o,v7o,P0,Kre,T7o,F7o,gI,C7o,M7o,E7o,$0,Zre,y7o,w7o,hI,A7o,L7o,B7o,I0,ete,x7o,k7o,pI,R7o,S7o,P7o,j0,ote,$7o,I7o,_I,j7o,D7o,N7o,D0,rte,q7o,O7o,uI,G7o,X7o,V7o,N0,tte,z7o,W7o,bI,Q7o,H7o,U7o,q0,ate,J7o,Y7o,vI,K7o,Z7o,eFo,O0,nte,oFo,rFo,TI,tFo,aFo,nFo,G0,ste,sFo,lFo,FI,iFo,dFo,cFo,X0,lte,fFo,mFo,CI,gFo,hFo,pFo,V0,_Fo,ite,uFo,bFo,dte,vFo,TFo,cte,FFo,CFo,f3,zxe,md,z0,fte,m3,MFo,mte,EFo,Wxe,or,g3,yFo,gd,wFo,gte,AFo,LFo,hte,BFo,xFo,kFo,h3,RFo,pte,SFo,PFo,$Fo,Ur,p3,IFo,_te,jFo,DFo,hd,NFo,ute,qFo,OFo,bte,GFo,XFo,VFo,vte,zFo,WFo,_3,QFo,Xe,u3,HFo,Tte,UFo,JFo,Ua,YFo,Fte,KFo,ZFo,Cte,eCo,oCo,Mte,rCo,tCo,aCo,A,W0,Ete,nCo,sCo,MI,lCo,iCo,dCo,Q0,yte,cCo,fCo,EI,mCo,gCo,hCo,H0,wte,pCo,_Co,yI,uCo,bCo,vCo,U0,Ate,TCo,FCo,wI,CCo,MCo,ECo,J0,Lte,yCo,wCo,AI,ACo,LCo,BCo,Y0,Bte,xCo,kCo,LI,RCo,SCo,PCo,K0,xte,$Co,ICo,BI,jCo,DCo,NCo,Z0,kte,qCo,OCo,xI,GCo,XCo,VCo,e1,Rte,zCo,WCo,kI,QCo,HCo,UCo,o1,Ste,JCo,YCo,RI,KCo,ZCo,eMo,r1,Pte,oMo,rMo,SI,tMo,aMo,nMo,t1,$te,sMo,lMo,PI,iMo,dMo,cMo,a1,Ite,fMo,mMo,$I,gMo,hMo,pMo,n1,jte,_Mo,uMo,II,bMo,vMo,TMo,s1,Dte,FMo,CMo,jI,MMo,EMo,yMo,l1,Nte,wMo,AMo,DI,LMo,BMo,xMo,i1,qte,kMo,RMo,NI,SMo,PMo,$Mo,d1,Ote,IMo,jMo,qI,DMo,NMo,qMo,c1,Gte,OMo,GMo,OI,XMo,VMo,zMo,f1,Xte,WMo,QMo,GI,HMo,UMo,JMo,m1,Vte,YMo,KMo,XI,ZMo,e4o,o4o,g1,zte,r4o,t4o,VI,a4o,n4o,s4o,h1,Wte,l4o,i4o,zI,d4o,c4o,f4o,p1,Qte,m4o,g4o,WI,h4o,p4o,_4o,_1,Hte,u4o,b4o,QI,v4o,T4o,F4o,u1,Ute,C4o,M4o,HI,E4o,y4o,w4o,b1,Jte,A4o,L4o,UI,B4o,x4o,k4o,v1,Yte,R4o,S4o,JI,P4o,$4o,I4o,T1,Kte,j4o,D4o,YI,N4o,q4o,O4o,F1,Zte,G4o,X4o,KI,V4o,z4o,W4o,C1,eae,Q4o,H4o,ZI,U4o,J4o,Y4o,M1,oae,K4o,Z4o,ej,eEo,oEo,rEo,E1,rae,tEo,aEo,oj,nEo,sEo,lEo,y1,tae,iEo,dEo,rj,cEo,fEo,mEo,w1,aae,gEo,hEo,tj,pEo,_Eo,uEo,A1,nae,bEo,vEo,aj,TEo,FEo,CEo,L1,sae,MEo,EEo,nj,yEo,wEo,AEo,B1,lae,LEo,BEo,sj,xEo,kEo,REo,x1,iae,SEo,PEo,lj,$Eo,IEo,jEo,k1,dae,DEo,NEo,ij,qEo,OEo,GEo,R1,cae,XEo,VEo,dj,zEo,WEo,QEo,S1,fae,HEo,UEo,cj,JEo,YEo,KEo,P1,mae,ZEo,e3o,fj,o3o,r3o,t3o,$1,gae,a3o,n3o,mj,s3o,l3o,i3o,I1,hae,d3o,c3o,gj,f3o,m3o,g3o,j1,pae,h3o,p3o,hj,_3o,u3o,b3o,D1,v3o,_ae,T3o,F3o,uae,C3o,M3o,bae,E3o,y3o,b3,Qxe,pd,N1,vae,v3,w3o,Tae,A3o,Hxe,rr,T3,L3o,_d,B3o,Fae,x3o,k3o,Cae,R3o,S3o,P3o,F3,$3o,Mae,I3o,j3o,D3o,Jr,C3,N3o,Eae,q3o,O3o,ud,G3o,yae,X3o,V3o,wae,z3o,W3o,Q3o,Aae,H3o,U3o,M3,J3o,Ve,E3,Y3o,Lae,K3o,Z3o,Ja,e5o,Bae,o5o,r5o,xae,t5o,a5o,kae,n5o,s5o,l5o,O,q1,Rae,i5o,d5o,pj,c5o,f5o,m5o,O1,Sae,g5o,h5o,_j,p5o,_5o,u5o,G1,Pae,b5o,v5o,uj,T5o,F5o,C5o,X1,$ae,M5o,E5o,bj,y5o,w5o,A5o,V1,Iae,L5o,B5o,vj,x5o,k5o,R5o,z1,jae,S5o,P5o,Tj,$5o,I5o,j5o,W1,Dae,D5o,N5o,Fj,q5o,O5o,G5o,Q1,Nae,X5o,V5o,Cj,z5o,W5o,Q5o,H1,qae,H5o,U5o,Mj,J5o,Y5o,K5o,U1,Oae,Z5o,eyo,Ej,oyo,ryo,tyo,J1,Gae,ayo,nyo,yj,syo,lyo,iyo,Y1,Xae,dyo,cyo,wj,fyo,myo,gyo,K1,Vae,hyo,pyo,Aj,_yo,uyo,byo,Z1,zae,vyo,Tyo,Lj,Fyo,Cyo,Myo,eb,Wae,Eyo,yyo,Bj,wyo,Ayo,Lyo,ob,Qae,Byo,xyo,xj,kyo,Ryo,Syo,rb,Hae,Pyo,$yo,kj,Iyo,jyo,Dyo,tb,Uae,Nyo,qyo,Rj,Oyo,Gyo,Xyo,ab,Jae,Vyo,zyo,Sj,Wyo,Qyo,Hyo,nb,Yae,Uyo,Jyo,Pj,Yyo,Kyo,Zyo,sb,Kae,ewo,owo,$j,rwo,two,awo,lb,Zae,nwo,swo,Ij,lwo,iwo,dwo,ib,ene,cwo,fwo,jj,mwo,gwo,hwo,db,one,pwo,_wo,Dj,uwo,bwo,vwo,cb,rne,Two,Fwo,Nj,Cwo,Mwo,Ewo,fb,tne,ywo,wwo,qj,Awo,Lwo,Bwo,mb,ane,xwo,kwo,Oj,Rwo,Swo,Pwo,gb,nne,$wo,Iwo,Gj,jwo,Dwo,Nwo,hb,qwo,sne,Owo,Gwo,lne,Xwo,Vwo,ine,zwo,Wwo,y3,Uxe,bd,pb,dne,w3,Qwo,cne,Hwo,Jxe,tr,A3,Uwo,vd,Jwo,fne,Ywo,Kwo,mne,Zwo,eAo,oAo,L3,rAo,gne,tAo,aAo,nAo,Yr,B3,sAo,hne,lAo,iAo,Td,dAo,pne,cAo,fAo,_ne,mAo,gAo,hAo,une,pAo,_Ao,x3,uAo,ze,k3,bAo,bne,vAo,TAo,Ya,FAo,vne,CAo,MAo,Tne,EAo,yAo,Fne,wAo,AAo,LAo,da,_b,Cne,BAo,xAo,Xj,kAo,RAo,SAo,ub,Mne,PAo,$Ao,Vj,IAo,jAo,DAo,bb,Ene,NAo,qAo,zj,OAo,GAo,XAo,vb,yne,VAo,zAo,Wj,WAo,QAo,HAo,Tb,wne,UAo,JAo,Qj,YAo,KAo,ZAo,Fb,eLo,Ane,oLo,rLo,Lne,tLo,aLo,Bne,nLo,sLo,R3,Yxe,Fd,Cb,xne,S3,lLo,kne,iLo,Kxe,ar,P3,dLo,Cd,cLo,Rne,fLo,mLo,Sne,gLo,hLo,pLo,$3,_Lo,Pne,uLo,bLo,vLo,Kr,I3,TLo,$ne,FLo,CLo,Md,MLo,Ine,ELo,yLo,jne,wLo,ALo,LLo,Dne,BLo,xLo,j3,kLo,We,D3,RLo,Nne,SLo,PLo,Ka,$Lo,qne,ILo,jLo,One,DLo,NLo,Gne,qLo,OLo,GLo,N,Mb,Xne,XLo,VLo,Hj,zLo,WLo,QLo,Eb,Vne,HLo,ULo,Uj,JLo,YLo,KLo,yb,zne,ZLo,e8o,Jj,o8o,r8o,t8o,wb,Wne,a8o,n8o,Yj,s8o,l8o,i8o,Ab,Qne,d8o,c8o,Kj,f8o,m8o,g8o,Lb,Hne,h8o,p8o,Zj,_8o,u8o,b8o,Bb,Une,v8o,T8o,eD,F8o,C8o,M8o,xb,Jne,E8o,y8o,oD,w8o,A8o,L8o,kb,Yne,B8o,x8o,rD,k8o,R8o,S8o,Rb,Kne,P8o,$8o,tD,I8o,j8o,D8o,Sb,Zne,N8o,q8o,aD,O8o,G8o,X8o,Pb,ese,V8o,z8o,nD,W8o,Q8o,H8o,$b,ose,U8o,J8o,sD,Y8o,K8o,Z8o,Ib,rse,e9o,o9o,lD,r9o,t9o,a9o,jb,tse,n9o,s9o,iD,l9o,i9o,d9o,Db,ase,c9o,f9o,dD,m9o,g9o,h9o,Nb,nse,p9o,_9o,cD,u9o,b9o,v9o,qb,sse,T9o,F9o,fD,C9o,M9o,E9o,Ob,lse,y9o,w9o,mD,A9o,L9o,B9o,Gb,ise,x9o,k9o,gD,R9o,S9o,P9o,Xb,dse,$9o,I9o,hD,j9o,D9o,N9o,Vb,cse,q9o,O9o,pD,G9o,X9o,V9o,zb,fse,z9o,W9o,_D,Q9o,H9o,U9o,Wb,mse,J9o,Y9o,uD,K9o,Z9o,eBo,Qb,gse,oBo,rBo,bD,tBo,aBo,nBo,Hb,hse,sBo,lBo,vD,iBo,dBo,cBo,Ub,pse,fBo,mBo,TD,gBo,hBo,pBo,Jb,_se,_Bo,uBo,FD,bBo,vBo,TBo,Yb,use,FBo,CBo,CD,MBo,EBo,yBo,Kb,bse,wBo,ABo,MD,LBo,BBo,xBo,Zb,vse,kBo,RBo,ED,SBo,PBo,$Bo,e2,Tse,IBo,jBo,yD,DBo,NBo,qBo,o2,Fse,OBo,GBo,wD,XBo,VBo,zBo,r2,WBo,Cse,QBo,HBo,Mse,UBo,JBo,Ese,YBo,KBo,N3,Zxe,Ed,t2,yse,q3,ZBo,wse,exo,eke,nr,O3,oxo,yd,rxo,Ase,txo,axo,Lse,nxo,sxo,lxo,G3,ixo,Bse,dxo,cxo,fxo,Zr,X3,mxo,xse,gxo,hxo,wd,pxo,kse,_xo,uxo,Rse,bxo,vxo,Txo,Sse,Fxo,Cxo,V3,Mxo,Qe,z3,Exo,Pse,yxo,wxo,Za,Axo,$se,Lxo,Bxo,Ise,xxo,kxo,jse,Rxo,Sxo,Pxo,R,a2,Dse,$xo,Ixo,AD,jxo,Dxo,Nxo,n2,Nse,qxo,Oxo,LD,Gxo,Xxo,Vxo,s2,qse,zxo,Wxo,BD,Qxo,Hxo,Uxo,l2,Ose,Jxo,Yxo,xD,Kxo,Zxo,eko,i2,Gse,oko,rko,kD,tko,ako,nko,d2,Xse,sko,lko,RD,iko,dko,cko,c2,Vse,fko,mko,SD,gko,hko,pko,f2,zse,_ko,uko,PD,bko,vko,Tko,m2,Wse,Fko,Cko,$D,Mko,Eko,yko,g2,Qse,wko,Ako,ID,Lko,Bko,xko,h2,Hse,kko,Rko,jD,Sko,Pko,$ko,p2,Use,Iko,jko,DD,Dko,Nko,qko,_2,Jse,Oko,Gko,ND,Xko,Vko,zko,u2,Yse,Wko,Qko,qD,Hko,Uko,Jko,b2,Kse,Yko,Kko,OD,Zko,eRo,oRo,v2,Zse,rRo,tRo,GD,aRo,nRo,sRo,T2,ele,lRo,iRo,XD,dRo,cRo,fRo,F2,ole,mRo,gRo,VD,hRo,pRo,_Ro,C2,rle,uRo,bRo,zD,vRo,TRo,FRo,M2,tle,CRo,MRo,WD,ERo,yRo,wRo,E2,ale,ARo,LRo,QD,BRo,xRo,kRo,y2,nle,RRo,SRo,HD,PRo,$Ro,IRo,w2,sle,jRo,DRo,UD,NRo,qRo,ORo,A2,lle,GRo,XRo,JD,VRo,zRo,WRo,L2,ile,QRo,HRo,YD,URo,JRo,YRo,B2,dle,KRo,ZRo,KD,eSo,oSo,rSo,x2,cle,tSo,aSo,ZD,nSo,sSo,lSo,k2,fle,iSo,dSo,eN,cSo,fSo,mSo,R2,mle,gSo,hSo,oN,pSo,_So,uSo,S2,gle,bSo,vSo,rN,TSo,FSo,CSo,P2,hle,MSo,ESo,tN,ySo,wSo,ASo,$2,ple,LSo,BSo,aN,xSo,kSo,RSo,I2,_le,SSo,PSo,nN,$So,ISo,jSo,j2,ule,DSo,NSo,sN,qSo,OSo,GSo,D2,ble,XSo,VSo,lN,zSo,WSo,QSo,N2,vle,HSo,USo,iN,JSo,YSo,KSo,q2,Tle,ZSo,ePo,dN,oPo,rPo,tPo,O2,Fle,aPo,nPo,cN,sPo,lPo,iPo,G2,Cle,dPo,cPo,fN,fPo,mPo,gPo,X2,hPo,Mle,pPo,_Po,Ele,uPo,bPo,yle,vPo,TPo,W3,oke,Ad,V2,wle,Q3,FPo,Ale,CPo,rke,sr,H3,MPo,Ld,EPo,Lle,yPo,wPo,Ble,APo,LPo,BPo,U3,xPo,xle,kPo,RPo,SPo,et,J3,PPo,kle,$Po,IPo,Bd,jPo,Rle,DPo,NPo,Sle,qPo,OPo,GPo,Ple,XPo,VPo,Y3,zPo,He,K3,WPo,$le,QPo,HPo,en,UPo,Ile,JPo,YPo,jle,KPo,ZPo,Dle,e$o,o$o,r$o,Nle,z2,qle,t$o,a$o,mN,n$o,s$o,l$o,W2,i$o,Ole,d$o,c$o,Gle,f$o,m$o,Xle,g$o,h$o,Z3,tke,xd,Q2,Vle,e5,p$o,zle,_$o,ake,lr,o5,u$o,kd,b$o,Wle,v$o,T$o,Qle,F$o,C$o,M$o,r5,E$o,Hle,y$o,w$o,A$o,ot,t5,L$o,Ule,B$o,x$o,Rd,k$o,Jle,R$o,S$o,Yle,P$o,$$o,I$o,Kle,j$o,D$o,a5,N$o,Ue,n5,q$o,Zle,O$o,G$o,on,X$o,eie,V$o,z$o,oie,W$o,Q$o,rie,H$o,U$o,J$o,_e,H2,tie,Y$o,K$o,gN,Z$o,eIo,oIo,U2,aie,rIo,tIo,hN,aIo,nIo,sIo,qs,nie,lIo,iIo,pN,dIo,cIo,_N,fIo,mIo,gIo,J2,sie,hIo,pIo,uN,_Io,uIo,bIo,ma,lie,vIo,TIo,bN,FIo,CIo,vN,MIo,EIo,TN,yIo,wIo,AIo,Y2,iie,LIo,BIo,FN,xIo,kIo,RIo,K2,die,SIo,PIo,CN,$Io,IIo,jIo,Z2,cie,DIo,NIo,MN,qIo,OIo,GIo,ev,fie,XIo,VIo,EN,zIo,WIo,QIo,ov,mie,HIo,UIo,yN,JIo,YIo,KIo,rv,ZIo,gie,ejo,ojo,hie,rjo,tjo,pie,ajo,njo,s5,nke,Sd,tv,_ie,l5,sjo,uie,ljo,ske,ir,i5,ijo,Pd,djo,bie,cjo,fjo,vie,mjo,gjo,hjo,d5,pjo,Tie,_jo,ujo,bjo,rt,c5,vjo,Fie,Tjo,Fjo,$d,Cjo,Cie,Mjo,Ejo,Mie,yjo,wjo,Ajo,Eie,Ljo,Bjo,f5,xjo,Je,m5,kjo,yie,Rjo,Sjo,rn,Pjo,wie,$jo,Ijo,Aie,jjo,Djo,Lie,Njo,qjo,Ojo,Bie,av,xie,Gjo,Xjo,wN,Vjo,zjo,Wjo,nv,Qjo,kie,Hjo,Ujo,Rie,Jjo,Yjo,Sie,Kjo,Zjo,g5,lke,Id,sv,Pie,h5,eDo,$ie,oDo,ike,dr,p5,rDo,jd,tDo,Iie,aDo,nDo,jie,sDo,lDo,iDo,_5,dDo,Die,cDo,fDo,mDo,tt,u5,gDo,Nie,hDo,pDo,Dd,_Do,qie,uDo,bDo,Oie,vDo,TDo,FDo,Gie,CDo,MDo,b5,EDo,Ye,v5,yDo,Xie,wDo,ADo,tn,LDo,Vie,BDo,xDo,zie,kDo,RDo,Wie,SDo,PDo,$Do,ke,lv,Qie,IDo,jDo,AN,DDo,NDo,qDo,iv,Hie,ODo,GDo,LN,XDo,VDo,zDo,dv,Uie,WDo,QDo,BN,HDo,UDo,JDo,cv,Jie,YDo,KDo,xN,ZDo,eNo,oNo,fv,Yie,rNo,tNo,kN,aNo,nNo,sNo,mv,Kie,lNo,iNo,RN,dNo,cNo,fNo,gv,Zie,mNo,gNo,SN,hNo,pNo,_No,hv,ede,uNo,bNo,PN,vNo,TNo,FNo,pv,CNo,ode,MNo,ENo,rde,yNo,wNo,tde,ANo,LNo,T5,dke,Nd,_v,ade,F5,BNo,nde,xNo,cke,cr,C5,kNo,qd,RNo,sde,SNo,PNo,lde,$No,INo,jNo,M5,DNo,ide,NNo,qNo,ONo,at,E5,GNo,dde,XNo,VNo,Od,zNo,cde,WNo,QNo,fde,HNo,UNo,JNo,mde,YNo,KNo,y5,ZNo,Ke,w5,eqo,gde,oqo,rqo,an,tqo,hde,aqo,nqo,pde,sqo,lqo,_de,iqo,dqo,cqo,nn,uv,ude,fqo,mqo,$N,gqo,hqo,pqo,bv,bde,_qo,uqo,IN,bqo,vqo,Tqo,vv,vde,Fqo,Cqo,jN,Mqo,Eqo,yqo,Tv,Tde,wqo,Aqo,DN,Lqo,Bqo,xqo,Fv,kqo,Fde,Rqo,Sqo,Cde,Pqo,$qo,Mde,Iqo,jqo,A5,fke,Gd,Cv,Ede,L5,Dqo,yde,Nqo,mke,fr,B5,qqo,Xd,Oqo,wde,Gqo,Xqo,Ade,Vqo,zqo,Wqo,x5,Qqo,Lde,Hqo,Uqo,Jqo,nt,k5,Yqo,Bde,Kqo,Zqo,Vd,eOo,xde,oOo,rOo,kde,tOo,aOo,nOo,Rde,sOo,lOo,R5,iOo,Ze,S5,dOo,Sde,cOo,fOo,sn,mOo,Pde,gOo,hOo,$de,pOo,_Oo,Ide,uOo,bOo,vOo,Re,Mv,jde,TOo,FOo,NN,COo,MOo,EOo,Ev,Dde,yOo,wOo,qN,AOo,LOo,BOo,yv,Nde,xOo,kOo,ON,ROo,SOo,POo,wv,qde,$Oo,IOo,GN,jOo,DOo,NOo,Av,Ode,qOo,OOo,XN,GOo,XOo,VOo,Lv,Gde,zOo,WOo,VN,QOo,HOo,UOo,Bv,Xde,JOo,YOo,zN,KOo,ZOo,eGo,xv,Vde,oGo,rGo,WN,tGo,aGo,nGo,kv,sGo,zde,lGo,iGo,Wde,dGo,cGo,Qde,fGo,mGo,P5,gke,zd,Rv,Hde,$5,gGo,Ude,hGo,hke,mr,I5,pGo,Wd,_Go,Jde,uGo,bGo,Yde,vGo,TGo,FGo,j5,CGo,Kde,MGo,EGo,yGo,st,D5,wGo,Zde,AGo,LGo,Qd,BGo,ece,xGo,kGo,oce,RGo,SGo,PGo,rce,$Go,IGo,N5,jGo,eo,q5,DGo,tce,NGo,qGo,ln,OGo,ace,GGo,XGo,nce,VGo,zGo,sce,WGo,QGo,HGo,O5,Sv,lce,UGo,JGo,QN,YGo,KGo,ZGo,Pv,ice,eXo,oXo,HN,rXo,tXo,aXo,$v,nXo,dce,sXo,lXo,cce,iXo,dXo,fce,cXo,fXo,G5,pke,Hd,Iv,mce,X5,mXo,gce,gXo,_ke,gr,V5,hXo,Ud,pXo,hce,_Xo,uXo,pce,bXo,vXo,TXo,z5,FXo,_ce,CXo,MXo,EXo,lt,W5,yXo,uce,wXo,AXo,Jd,LXo,bce,BXo,xXo,vce,kXo,RXo,SXo,Tce,PXo,$Xo,Q5,IXo,oo,H5,jXo,Fce,DXo,NXo,dn,qXo,Cce,OXo,GXo,Mce,XXo,VXo,Ece,zXo,WXo,QXo,cn,jv,yce,HXo,UXo,UN,JXo,YXo,KXo,Dv,wce,ZXo,eVo,JN,oVo,rVo,tVo,Nv,Ace,aVo,nVo,YN,sVo,lVo,iVo,qv,Lce,dVo,cVo,KN,fVo,mVo,gVo,Ov,hVo,Bce,pVo,_Vo,xce,uVo,bVo,kce,vVo,TVo,U5,uke,Yd,Gv,Rce,J5,FVo,Sce,CVo,bke,hr,Y5,MVo,Kd,EVo,Pce,yVo,wVo,$ce,AVo,LVo,BVo,K5,xVo,Ice,kVo,RVo,SVo,it,Z5,PVo,jce,$Vo,IVo,Zd,jVo,Dce,DVo,NVo,Nce,qVo,OVo,GVo,qce,XVo,VVo,ey,zVo,ro,oy,WVo,Oce,QVo,HVo,fn,UVo,Gce,JVo,YVo,Xce,KVo,ZVo,Vce,ezo,ozo,rzo,ec,Xv,zce,tzo,azo,ZN,nzo,szo,lzo,Vv,Wce,izo,dzo,eq,czo,fzo,mzo,zv,Qce,gzo,hzo,oq,pzo,_zo,uzo,Wv,bzo,Hce,vzo,Tzo,Uce,Fzo,Czo,Jce,Mzo,Ezo,ry,vke,oc,Qv,Yce,ty,yzo,Kce,wzo,Tke,pr,ay,Azo,rc,Lzo,Zce,Bzo,xzo,efe,kzo,Rzo,Szo,ny,Pzo,ofe,$zo,Izo,jzo,dt,sy,Dzo,rfe,Nzo,qzo,tc,Ozo,tfe,Gzo,Xzo,afe,Vzo,zzo,Wzo,nfe,Qzo,Hzo,ly,Uzo,to,iy,Jzo,sfe,Yzo,Kzo,mn,Zzo,lfe,eWo,oWo,ife,rWo,tWo,dfe,aWo,nWo,sWo,cfe,Hv,ffe,lWo,iWo,rq,dWo,cWo,fWo,Uv,mWo,mfe,gWo,hWo,gfe,pWo,_Wo,hfe,uWo,bWo,dy,Fke,ac,Jv,pfe,cy,vWo,_fe,TWo,Cke,_r,fy,FWo,nc,CWo,ufe,MWo,EWo,bfe,yWo,wWo,AWo,my,LWo,vfe,BWo,xWo,kWo,ct,gy,RWo,Tfe,SWo,PWo,sc,$Wo,Ffe,IWo,jWo,Cfe,DWo,NWo,qWo,Mfe,OWo,GWo,hy,XWo,ao,py,VWo,Efe,zWo,WWo,gn,QWo,yfe,HWo,UWo,wfe,JWo,YWo,Afe,KWo,ZWo,eQo,Lfe,Yv,Bfe,oQo,rQo,tq,tQo,aQo,nQo,Kv,sQo,xfe,lQo,iQo,kfe,dQo,cQo,Rfe,fQo,mQo,_y,Mke,lc,Zv,Sfe,uy,gQo,Pfe,hQo,Eke,ur,by,pQo,ic,_Qo,$fe,uQo,bQo,Ife,vQo,TQo,FQo,vy,CQo,jfe,MQo,EQo,yQo,ft,Ty,wQo,Dfe,AQo,LQo,dc,BQo,Nfe,xQo,kQo,qfe,RQo,SQo,PQo,Ofe,$Qo,IQo,Fy,jQo,no,Cy,DQo,Gfe,NQo,qQo,hn,OQo,Xfe,GQo,XQo,Vfe,VQo,zQo,zfe,WQo,QQo,HQo,My,e6,Wfe,UQo,JQo,aq,YQo,KQo,ZQo,o6,Qfe,eHo,oHo,nq,rHo,tHo,aHo,r6,nHo,Hfe,sHo,lHo,Ufe,iHo,dHo,Jfe,cHo,fHo,Ey,yke,cc,t6,Yfe,yy,mHo,Kfe,gHo,wke,br,wy,hHo,fc,pHo,Zfe,_Ho,uHo,eme,bHo,vHo,THo,Ay,FHo,ome,CHo,MHo,EHo,mt,Ly,yHo,rme,wHo,AHo,mc,LHo,tme,BHo,xHo,ame,kHo,RHo,SHo,nme,PHo,$Ho,By,IHo,so,xy,jHo,sme,DHo,NHo,pn,qHo,lme,OHo,GHo,ime,XHo,VHo,dme,zHo,WHo,QHo,cme,a6,fme,HHo,UHo,sq,JHo,YHo,KHo,n6,ZHo,mme,eUo,oUo,gme,rUo,tUo,hme,aUo,nUo,ky,Ake,gc,s6,pme,Ry,sUo,_me,lUo,Lke,vr,Sy,iUo,hc,dUo,ume,cUo,fUo,bme,mUo,gUo,hUo,Py,pUo,vme,_Uo,uUo,bUo,gt,$y,vUo,Tme,TUo,FUo,pc,CUo,Fme,MUo,EUo,Cme,yUo,wUo,AUo,Mme,LUo,BUo,Iy,xUo,ho,jy,kUo,Eme,RUo,SUo,_n,PUo,yme,$Uo,IUo,wme,jUo,DUo,Ame,NUo,qUo,OUo,B,l6,Lme,GUo,XUo,lq,VUo,zUo,WUo,i6,Bme,QUo,HUo,iq,UUo,JUo,YUo,d6,xme,KUo,ZUo,dq,eJo,oJo,rJo,c6,kme,tJo,aJo,cq,nJo,sJo,lJo,f6,Rme,iJo,dJo,fq,cJo,fJo,mJo,m6,Sme,gJo,hJo,mq,pJo,_Jo,uJo,g6,Pme,bJo,vJo,gq,TJo,FJo,CJo,h6,$me,MJo,EJo,hq,yJo,wJo,AJo,p6,Ime,LJo,BJo,pq,xJo,kJo,RJo,_6,jme,SJo,PJo,_q,$Jo,IJo,jJo,u6,Dme,DJo,NJo,uq,qJo,OJo,GJo,b6,Nme,XJo,VJo,bq,zJo,WJo,QJo,v6,qme,HJo,UJo,vq,JJo,YJo,KJo,T6,Ome,ZJo,eYo,Tq,oYo,rYo,tYo,F6,Gme,aYo,nYo,Fq,sYo,lYo,iYo,C6,Xme,dYo,cYo,Cq,fYo,mYo,gYo,Os,Vme,hYo,pYo,Mq,_Yo,uYo,Eq,bYo,vYo,TYo,M6,zme,FYo,CYo,yq,MYo,EYo,yYo,E6,Wme,wYo,AYo,wq,LYo,BYo,xYo,y6,Qme,kYo,RYo,Aq,SYo,PYo,$Yo,w6,Hme,IYo,jYo,Lq,DYo,NYo,qYo,A6,Ume,OYo,GYo,Bq,XYo,VYo,zYo,L6,Jme,WYo,QYo,xq,HYo,UYo,JYo,B6,Yme,YYo,KYo,kq,ZYo,eKo,oKo,x6,Kme,rKo,tKo,Rq,aKo,nKo,sKo,k6,Zme,lKo,iKo,Sq,dKo,cKo,fKo,R6,ege,mKo,gKo,Pq,hKo,pKo,_Ko,S6,oge,uKo,bKo,$q,vKo,TKo,FKo,P6,rge,CKo,MKo,Iq,EKo,yKo,wKo,$6,tge,AKo,LKo,jq,BKo,xKo,kKo,I6,age,RKo,SKo,Dq,PKo,$Ko,IKo,j6,nge,jKo,DKo,Nq,NKo,qKo,OKo,D6,sge,GKo,XKo,qq,VKo,zKo,WKo,N6,lge,QKo,HKo,Oq,UKo,JKo,YKo,q6,ige,KKo,ZKo,Gq,eZo,oZo,rZo,O6,dge,tZo,aZo,Xq,nZo,sZo,lZo,G6,cge,iZo,dZo,Vq,cZo,fZo,mZo,X6,fge,gZo,hZo,zq,pZo,_Zo,uZo,V6,mge,bZo,vZo,Wq,TZo,FZo,CZo,z6,gge,MZo,EZo,Qq,yZo,wZo,AZo,W6,hge,LZo,BZo,Hq,xZo,kZo,RZo,Q6,pge,SZo,PZo,Uq,$Zo,IZo,jZo,_ge,DZo,NZo,Dy,Bke,_c,H6,uge,Ny,qZo,bge,OZo,xke,Tr,qy,GZo,uc,XZo,vge,VZo,zZo,Tge,WZo,QZo,HZo,Oy,UZo,Fge,JZo,YZo,KZo,ht,Gy,ZZo,Cge,eer,oer,bc,rer,Mge,ter,aer,Ege,ner,ser,ler,yge,ier,der,Xy,cer,po,Vy,fer,wge,mer,ger,un,her,Age,per,_er,Lge,uer,ber,Bge,ver,Ter,Fer,H,U6,xge,Cer,Mer,Jq,Eer,yer,wer,J6,kge,Aer,Ler,Yq,Ber,xer,ker,Y6,Rge,Rer,Ser,Kq,Per,$er,Ier,K6,Sge,jer,Der,Zq,Ner,qer,Oer,Z6,Pge,Ger,Xer,eO,Ver,zer,Wer,eT,$ge,Qer,Her,oO,Uer,Jer,Yer,oT,Ige,Ker,Zer,rO,eor,oor,ror,rT,jge,tor,aor,tO,nor,sor,lor,tT,Dge,ior,dor,aO,cor,mor,gor,aT,Nge,hor,por,nO,_or,uor,bor,nT,qge,vor,Tor,sO,For,Cor,Mor,sT,Oge,Eor,yor,lO,wor,Aor,Lor,lT,Gge,Bor,xor,iO,kor,Ror,Sor,iT,Xge,Por,$or,dO,Ior,jor,Dor,dT,Vge,Nor,qor,cO,Oor,Gor,Xor,cT,zge,Vor,zor,fO,Wor,Qor,Hor,fT,Wge,Uor,Jor,mO,Yor,Kor,Zor,mT,Qge,err,orr,gO,rrr,trr,arr,gT,Hge,nrr,srr,hO,lrr,irr,drr,hT,Uge,crr,frr,pO,mrr,grr,hrr,pT,Jge,prr,_rr,_O,urr,brr,vrr,_T,Yge,Trr,Frr,uO,Crr,Mrr,Err,Kge,yrr,wrr,zy,kke,vc,uT,Zge,Wy,Arr,ehe,Lrr,Rke,Fr,Qy,Brr,Tc,xrr,ohe,krr,Rrr,rhe,Srr,Prr,$rr,Hy,Irr,the,jrr,Drr,Nrr,pt,Uy,qrr,ahe,Orr,Grr,Fc,Xrr,nhe,Vrr,zrr,she,Wrr,Qrr,Hrr,lhe,Urr,Jrr,Jy,Yrr,_o,Yy,Krr,ihe,Zrr,etr,bn,otr,dhe,rtr,ttr,che,atr,ntr,fhe,str,ltr,itr,me,bT,mhe,dtr,ctr,bO,ftr,mtr,gtr,vT,ghe,htr,ptr,vO,_tr,utr,btr,TT,hhe,vtr,Ttr,TO,Ftr,Ctr,Mtr,FT,phe,Etr,ytr,FO,wtr,Atr,Ltr,CT,_he,Btr,xtr,CO,ktr,Rtr,Str,MT,uhe,Ptr,$tr,MO,Itr,jtr,Dtr,ET,bhe,Ntr,qtr,EO,Otr,Gtr,Xtr,yT,vhe,Vtr,ztr,yO,Wtr,Qtr,Htr,wT,The,Utr,Jtr,wO,Ytr,Ktr,Ztr,AT,Fhe,ear,oar,AO,rar,tar,aar,LT,Che,nar,sar,LO,lar,iar,dar,Mhe,car,far,Ky,Ske,Cc,BT,Ehe,Zy,mar,yhe,gar,Pke,Cr,ew,har,Mc,par,whe,_ar,uar,Ahe,bar,Tar,Far,ow,Car,Lhe,Mar,Ear,yar,_t,rw,war,Bhe,Aar,Lar,Ec,Bar,xhe,xar,kar,khe,Rar,Sar,Par,Rhe,$ar,Iar,tw,jar,uo,aw,Dar,She,Nar,qar,vn,Oar,Phe,Gar,Xar,$he,Var,zar,Ihe,War,Qar,Har,nw,xT,jhe,Uar,Jar,BO,Yar,Kar,Zar,kT,Dhe,enr,onr,xO,rnr,tnr,anr,Nhe,nnr,snr,sw,$ke,yc,RT,qhe,lw,lnr,Ohe,inr,Ike,Mr,iw,dnr,wc,cnr,Ghe,fnr,mnr,Xhe,gnr,hnr,pnr,dw,_nr,Vhe,unr,bnr,vnr,ut,cw,Tnr,zhe,Fnr,Cnr,Ac,Mnr,Whe,Enr,ynr,Qhe,wnr,Anr,Lnr,Hhe,Bnr,xnr,fw,knr,bo,mw,Rnr,Uhe,Snr,Pnr,Tn,$nr,Jhe,Inr,jnr,Yhe,Dnr,Nnr,Khe,qnr,Onr,Gnr,Y,ST,Zhe,Xnr,Vnr,kO,znr,Wnr,Qnr,PT,epe,Hnr,Unr,RO,Jnr,Ynr,Knr,$T,ope,Znr,esr,SO,osr,rsr,tsr,IT,rpe,asr,nsr,PO,ssr,lsr,isr,jT,tpe,dsr,csr,$O,fsr,msr,gsr,DT,ape,hsr,psr,IO,_sr,usr,bsr,NT,npe,vsr,Tsr,jO,Fsr,Csr,Msr,qT,spe,Esr,ysr,DO,wsr,Asr,Lsr,OT,lpe,Bsr,xsr,NO,ksr,Rsr,Ssr,GT,ipe,Psr,$sr,qO,Isr,jsr,Dsr,XT,dpe,Nsr,qsr,OO,Osr,Gsr,Xsr,VT,cpe,Vsr,zsr,GO,Wsr,Qsr,Hsr,zT,fpe,Usr,Jsr,XO,Ysr,Ksr,Zsr,WT,mpe,elr,olr,VO,rlr,tlr,alr,QT,gpe,nlr,slr,zO,llr,ilr,dlr,HT,hpe,clr,flr,WO,mlr,glr,hlr,UT,ppe,plr,_lr,QO,ulr,blr,vlr,JT,_pe,Tlr,Flr,HO,Clr,Mlr,Elr,YT,upe,ylr,wlr,UO,Alr,Llr,Blr,KT,bpe,xlr,klr,JO,Rlr,Slr,Plr,vpe,$lr,Ilr,gw,jke,Lc,ZT,Tpe,hw,jlr,Fpe,Dlr,Dke,Er,pw,Nlr,Bc,qlr,Cpe,Olr,Glr,Mpe,Xlr,Vlr,zlr,_w,Wlr,Epe,Qlr,Hlr,Ulr,bt,uw,Jlr,ype,Ylr,Klr,xc,Zlr,wpe,eir,oir,Ape,rir,tir,air,Lpe,nir,sir,bw,lir,vo,vw,iir,Bpe,dir,cir,Fn,fir,xpe,mir,gir,kpe,hir,pir,Rpe,_ir,uir,bir,ue,e7,Spe,vir,Tir,YO,Fir,Cir,Mir,o7,Ppe,Eir,yir,KO,wir,Air,Lir,r7,$pe,Bir,xir,ZO,kir,Rir,Sir,t7,Ipe,Pir,$ir,eG,Iir,jir,Dir,a7,jpe,Nir,qir,oG,Oir,Gir,Xir,n7,Dpe,Vir,zir,rG,Wir,Qir,Hir,s7,Npe,Uir,Jir,tG,Yir,Kir,Zir,l7,qpe,edr,odr,aG,rdr,tdr,adr,i7,Ope,ndr,sdr,nG,ldr,idr,ddr,d7,Gpe,cdr,fdr,sG,mdr,gdr,hdr,Xpe,pdr,_dr,Tw,Nke,kc,c7,Vpe,Fw,udr,zpe,bdr,qke,yr,Cw,vdr,Rc,Tdr,Wpe,Fdr,Cdr,Qpe,Mdr,Edr,ydr,Mw,wdr,Hpe,Adr,Ldr,Bdr,vt,Ew,xdr,Upe,kdr,Rdr,Sc,Sdr,Jpe,Pdr,$dr,Ype,Idr,jdr,Ddr,Kpe,Ndr,qdr,yw,Odr,To,ww,Gdr,Zpe,Xdr,Vdr,Cn,zdr,e_e,Wdr,Qdr,o_e,Hdr,Udr,r_e,Jdr,Ydr,Kdr,V,f7,t_e,Zdr,ecr,lG,ocr,rcr,tcr,m7,a_e,acr,ncr,iG,scr,lcr,icr,g7,n_e,dcr,ccr,dG,fcr,mcr,gcr,h7,s_e,hcr,pcr,cG,_cr,ucr,bcr,p7,l_e,vcr,Tcr,fG,Fcr,Ccr,Mcr,_7,i_e,Ecr,ycr,mG,wcr,Acr,Lcr,u7,d_e,Bcr,xcr,gG,kcr,Rcr,Scr,b7,c_e,Pcr,$cr,hG,Icr,jcr,Dcr,v7,f_e,Ncr,qcr,pG,Ocr,Gcr,Xcr,T7,m_e,Vcr,zcr,_G,Wcr,Qcr,Hcr,F7,g_e,Ucr,Jcr,uG,Ycr,Kcr,Zcr,C7,h_e,efr,ofr,bG,rfr,tfr,afr,M7,p_e,nfr,sfr,vG,lfr,ifr,dfr,E7,__e,cfr,ffr,TG,mfr,gfr,hfr,y7,u_e,pfr,_fr,FG,ufr,bfr,vfr,w7,b_e,Tfr,Ffr,CG,Cfr,Mfr,Efr,A7,v_e,yfr,wfr,MG,Afr,Lfr,Bfr,L7,T_e,xfr,kfr,EG,Rfr,Sfr,Pfr,B7,F_e,$fr,Ifr,yG,jfr,Dfr,Nfr,x7,C_e,qfr,Ofr,wG,Gfr,Xfr,Vfr,k7,M_e,zfr,Wfr,AG,Qfr,Hfr,Ufr,R7,E_e,Jfr,Yfr,LG,Kfr,Zfr,emr,S7,y_e,omr,rmr,BG,tmr,amr,nmr,P7,w_e,smr,lmr,xG,imr,dmr,cmr,$7,A_e,fmr,mmr,kG,gmr,hmr,pmr,L_e,_mr,umr,Aw,Oke,Pc,I7,B_e,Lw,bmr,x_e,vmr,Gke,wr,Bw,Tmr,$c,Fmr,k_e,Cmr,Mmr,R_e,Emr,ymr,wmr,xw,Amr,S_e,Lmr,Bmr,xmr,Tt,kw,kmr,P_e,Rmr,Smr,Ic,Pmr,$_e,$mr,Imr,I_e,jmr,Dmr,Nmr,j_e,qmr,Omr,Rw,Gmr,Fo,Sw,Xmr,D_e,Vmr,zmr,Mn,Wmr,N_e,Qmr,Hmr,q_e,Umr,Jmr,O_e,Ymr,Kmr,Zmr,ae,j7,G_e,egr,ogr,RG,rgr,tgr,agr,D7,X_e,ngr,sgr,SG,lgr,igr,dgr,N7,V_e,cgr,fgr,PG,mgr,ggr,hgr,q7,z_e,pgr,_gr,$G,ugr,bgr,vgr,O7,W_e,Tgr,Fgr,IG,Cgr,Mgr,Egr,G7,Q_e,ygr,wgr,jG,Agr,Lgr,Bgr,X7,H_e,xgr,kgr,DG,Rgr,Sgr,Pgr,V7,U_e,$gr,Igr,NG,jgr,Dgr,Ngr,z7,J_e,qgr,Ogr,qG,Ggr,Xgr,Vgr,W7,Y_e,zgr,Wgr,OG,Qgr,Hgr,Ugr,Q7,K_e,Jgr,Ygr,GG,Kgr,Zgr,ehr,H7,Z_e,ohr,rhr,XG,thr,ahr,nhr,U7,eue,shr,lhr,VG,ihr,dhr,chr,J7,oue,fhr,mhr,zG,ghr,hhr,phr,Y7,rue,_hr,uhr,WG,bhr,vhr,Thr,K7,tue,Fhr,Chr,QG,Mhr,Ehr,yhr,Z7,aue,whr,Ahr,HG,Lhr,Bhr,xhr,nue,khr,Rhr,Pw,Xke,jc,eF,sue,$w,Shr,lue,Phr,Vke,Ar,Iw,$hr,Dc,Ihr,iue,jhr,Dhr,due,Nhr,qhr,Ohr,jw,Ghr,cue,Xhr,Vhr,zhr,Ft,Dw,Whr,fue,Qhr,Hhr,Nc,Uhr,mue,Jhr,Yhr,gue,Khr,Zhr,epr,hue,opr,rpr,Nw,tpr,Co,qw,apr,pue,npr,spr,En,lpr,_ue,ipr,dpr,uue,cpr,fpr,bue,mpr,gpr,hpr,vue,oF,Tue,ppr,_pr,UG,upr,bpr,vpr,Fue,Tpr,Fpr,Ow,zke,qc,rF,Cue,Gw,Cpr,Mue,Mpr,Wke,Lr,Xw,Epr,Oc,ypr,Eue,wpr,Apr,yue,Lpr,Bpr,xpr,Vw,kpr,wue,Rpr,Spr,Ppr,Ct,zw,$pr,Aue,Ipr,jpr,Gc,Dpr,Lue,Npr,qpr,Bue,Opr,Gpr,Xpr,xue,Vpr,zpr,Ww,Wpr,Mo,Qw,Qpr,kue,Hpr,Upr,yn,Jpr,Rue,Ypr,Kpr,Sue,Zpr,e_r,Pue,o_r,r_r,t_r,K,tF,$ue,a_r,n_r,JG,s_r,l_r,i_r,aF,Iue,d_r,c_r,YG,f_r,m_r,g_r,nF,jue,h_r,p_r,KG,__r,u_r,b_r,sF,Due,v_r,T_r,ZG,F_r,C_r,M_r,lF,Nue,E_r,y_r,eX,w_r,A_r,L_r,iF,que,B_r,x_r,oX,k_r,R_r,S_r,dF,Oue,P_r,$_r,rX,I_r,j_r,D_r,cF,Gue,N_r,q_r,tX,O_r,G_r,X_r,fF,Xue,V_r,z_r,aX,W_r,Q_r,H_r,mF,Vue,U_r,J_r,nX,Y_r,K_r,Z_r,gF,zue,eur,our,sX,rur,tur,aur,hF,Wue,nur,sur,lX,lur,iur,dur,pF,Que,cur,fur,iX,mur,gur,hur,_F,Hue,pur,_ur,dX,uur,bur,vur,uF,Uue,Tur,Fur,cX,Cur,Mur,Eur,bF,Jue,yur,wur,fX,Aur,Lur,Bur,vF,Yue,xur,kur,mX,Rur,Sur,Pur,TF,Kue,$ur,Iur,gX,jur,Dur,Nur,FF,Zue,qur,Our,hX,Gur,Xur,Vur,CF,e0e,zur,Wur,pX,Qur,Hur,Uur,o0e,Jur,Yur,Hw,Qke,Xc,MF,r0e,Uw,Kur,t0e,Zur,Hke,Br,Jw,e0r,Vc,o0r,a0e,r0r,t0r,n0e,a0r,n0r,s0r,Yw,l0r,s0e,i0r,d0r,c0r,Mt,Kw,f0r,l0e,m0r,g0r,zc,h0r,i0e,p0r,_0r,d0e,u0r,b0r,v0r,c0e,T0r,F0r,Zw,C0r,Eo,eA,M0r,f0e,E0r,y0r,wn,w0r,m0e,A0r,L0r,g0e,B0r,x0r,h0e,k0r,R0r,S0r,Z,EF,p0e,P0r,$0r,_X,I0r,j0r,D0r,yF,_0e,N0r,q0r,uX,O0r,G0r,X0r,wF,u0e,V0r,z0r,bX,W0r,Q0r,H0r,AF,b0e,U0r,J0r,vX,Y0r,K0r,Z0r,LF,v0e,e1r,o1r,TX,r1r,t1r,a1r,BF,T0e,n1r,s1r,FX,l1r,i1r,d1r,xF,F0e,c1r,f1r,CX,m1r,g1r,h1r,kF,C0e,p1r,_1r,MX,u1r,b1r,v1r,RF,M0e,T1r,F1r,EX,C1r,M1r,E1r,SF,E0e,y1r,w1r,yX,A1r,L1r,B1r,PF,y0e,x1r,k1r,wX,R1r,S1r,P1r,$F,w0e,$1r,I1r,AX,j1r,D1r,N1r,IF,A0e,q1r,O1r,LX,G1r,X1r,V1r,jF,L0e,z1r,W1r,BX,Q1r,H1r,U1r,DF,B0e,J1r,Y1r,xX,K1r,Z1r,ebr,NF,x0e,obr,rbr,kX,tbr,abr,nbr,qF,k0e,sbr,lbr,RX,ibr,dbr,cbr,OF,R0e,fbr,mbr,SX,gbr,hbr,pbr,GF,S0e,_br,ubr,PX,bbr,vbr,Tbr,P0e,Fbr,Cbr,oA,Uke,Wc,XF,$0e,rA,Mbr,I0e,Ebr,Jke,xr,tA,ybr,Qc,wbr,j0e,Abr,Lbr,D0e,Bbr,xbr,kbr,aA,Rbr,N0e,Sbr,Pbr,$br,Et,nA,Ibr,q0e,jbr,Dbr,Hc,Nbr,O0e,qbr,Obr,G0e,Gbr,Xbr,Vbr,X0e,zbr,Wbr,sA,Qbr,yo,lA,Hbr,V0e,Ubr,Jbr,An,Ybr,z0e,Kbr,Zbr,W0e,e2r,o2r,Q0e,r2r,t2r,a2r,H0e,VF,U0e,n2r,s2r,$X,l2r,i2r,d2r,J0e,c2r,f2r,iA,Yke,Uc,zF,Y0e,dA,m2r,K0e,g2r,Kke,kr,cA,h2r,Jc,p2r,Z0e,_2r,u2r,e1e,b2r,v2r,T2r,fA,F2r,o1e,C2r,M2r,E2r,yt,mA,y2r,r1e,w2r,A2r,Yc,L2r,t1e,B2r,x2r,a1e,k2r,R2r,S2r,n1e,P2r,$2r,gA,I2r,wo,hA,j2r,s1e,D2r,N2r,Ln,q2r,l1e,O2r,G2r,i1e,X2r,V2r,d1e,z2r,W2r,Q2r,c1e,WF,f1e,H2r,U2r,IX,J2r,Y2r,K2r,m1e,Z2r,evr,pA,Zke,Kc,QF,g1e,_A,ovr,h1e,rvr,eRe,Rr,uA,tvr,Zc,avr,p1e,nvr,svr,_1e,lvr,ivr,dvr,bA,cvr,u1e,fvr,mvr,gvr,wt,vA,hvr,b1e,pvr,_vr,ef,uvr,v1e,bvr,vvr,T1e,Tvr,Fvr,Cvr,F1e,Mvr,Evr,TA,yvr,Ao,FA,wvr,C1e,Avr,Lvr,Bn,Bvr,M1e,xvr,kvr,E1e,Rvr,Svr,y1e,Pvr,$vr,Ivr,z,HF,w1e,jvr,Dvr,jX,Nvr,qvr,Ovr,UF,A1e,Gvr,Xvr,DX,Vvr,zvr,Wvr,JF,L1e,Qvr,Hvr,NX,Uvr,Jvr,Yvr,YF,B1e,Kvr,Zvr,qX,e6r,o6r,r6r,KF,x1e,t6r,a6r,OX,n6r,s6r,l6r,ZF,k1e,i6r,d6r,GX,c6r,f6r,m6r,eC,R1e,g6r,h6r,XX,p6r,_6r,u6r,oC,S1e,b6r,v6r,VX,T6r,F6r,C6r,rC,P1e,M6r,E6r,zX,y6r,w6r,A6r,tC,$1e,L6r,B6r,WX,x6r,k6r,R6r,aC,I1e,S6r,P6r,QX,$6r,I6r,j6r,nC,j1e,D6r,N6r,HX,q6r,O6r,G6r,sC,D1e,X6r,V6r,UX,z6r,W6r,Q6r,lC,N1e,H6r,U6r,JX,J6r,Y6r,K6r,iC,q1e,Z6r,eTr,YX,oTr,rTr,tTr,dC,O1e,aTr,nTr,KX,sTr,lTr,iTr,cC,G1e,dTr,cTr,ZX,fTr,mTr,gTr,fC,X1e,hTr,pTr,eV,_Tr,uTr,bTr,mC,V1e,vTr,TTr,oV,FTr,CTr,MTr,gC,z1e,ETr,yTr,rV,wTr,ATr,LTr,hC,W1e,BTr,xTr,tV,kTr,RTr,STr,pC,Q1e,PTr,$Tr,aV,ITr,jTr,DTr,_C,H1e,NTr,qTr,nV,OTr,GTr,XTr,uC,U1e,VTr,zTr,sV,WTr,QTr,HTr,bC,J1e,UTr,JTr,lV,YTr,KTr,ZTr,Y1e,e7r,o7r,CA,oRe,of,vC,K1e,MA,r7r,Z1e,t7r,rRe,Sr,EA,a7r,rf,n7r,ebe,s7r,l7r,obe,i7r,d7r,c7r,yA,f7r,rbe,m7r,g7r,h7r,At,wA,p7r,tbe,_7r,u7r,tf,b7r,abe,v7r,T7r,nbe,F7r,C7r,M7r,sbe,E7r,y7r,AA,w7r,Lo,LA,A7r,lbe,L7r,B7r,xn,x7r,ibe,k7r,R7r,dbe,S7r,P7r,cbe,$7r,I7r,j7r,ca,TC,fbe,D7r,N7r,iV,q7r,O7r,G7r,FC,mbe,X7r,V7r,dV,z7r,W7r,Q7r,CC,gbe,H7r,U7r,cV,J7r,Y7r,K7r,MC,hbe,Z7r,eFr,fV,oFr,rFr,tFr,EC,pbe,aFr,nFr,mV,sFr,lFr,iFr,_be,dFr,cFr,BA,tRe,af,yC,ube,xA,fFr,bbe,mFr,aRe,Pr,kA,gFr,nf,hFr,vbe,pFr,_Fr,Tbe,uFr,bFr,vFr,RA,TFr,Fbe,FFr,CFr,MFr,Lt,SA,EFr,Cbe,yFr,wFr,sf,AFr,Mbe,LFr,BFr,Ebe,xFr,kFr,RFr,ybe,SFr,PFr,PA,$Fr,Bo,$A,IFr,wbe,jFr,DFr,kn,NFr,Abe,qFr,OFr,Lbe,GFr,XFr,Bbe,VFr,zFr,WFr,ce,wC,xbe,QFr,HFr,gV,UFr,JFr,YFr,AC,kbe,KFr,ZFr,hV,eCr,oCr,rCr,LC,Rbe,tCr,aCr,pV,nCr,sCr,lCr,BC,Sbe,iCr,dCr,_V,cCr,fCr,mCr,xC,Pbe,gCr,hCr,uV,pCr,_Cr,uCr,kC,$be,bCr,vCr,bV,TCr,FCr,CCr,RC,Ibe,MCr,ECr,vV,yCr,wCr,ACr,SC,jbe,LCr,BCr,TV,xCr,kCr,RCr,PC,Dbe,SCr,PCr,FV,$Cr,ICr,jCr,$C,Nbe,DCr,NCr,CV,qCr,OCr,GCr,IC,qbe,XCr,VCr,MV,zCr,WCr,QCr,jC,Obe,HCr,UCr,EV,JCr,YCr,KCr,Gbe,ZCr,eMr,IA,nRe,lf,DC,Xbe,jA,oMr,Vbe,rMr,sRe,$r,DA,tMr,df,aMr,zbe,nMr,sMr,Wbe,lMr,iMr,dMr,NA,cMr,Qbe,fMr,mMr,gMr,Bt,qA,hMr,Hbe,pMr,_Mr,cf,uMr,Ube,bMr,vMr,Jbe,TMr,FMr,CMr,Ybe,MMr,EMr,OA,yMr,xo,GA,wMr,Kbe,AMr,LMr,Rn,BMr,Zbe,xMr,kMr,e2e,RMr,SMr,o2e,PMr,$Mr,IMr,be,NC,r2e,jMr,DMr,yV,NMr,qMr,OMr,qC,t2e,GMr,XMr,wV,VMr,zMr,WMr,OC,a2e,QMr,HMr,AV,UMr,JMr,YMr,GC,n2e,KMr,ZMr,LV,e4r,o4r,r4r,XC,s2e,t4r,a4r,BV,n4r,s4r,l4r,VC,l2e,i4r,d4r,xV,c4r,f4r,m4r,zC,i2e,g4r,h4r,kV,p4r,_4r,u4r,WC,d2e,b4r,v4r,RV,T4r,F4r,C4r,QC,c2e,M4r,E4r,SV,y4r,w4r,A4r,HC,f2e,L4r,B4r,PV,x4r,k4r,R4r,m2e,S4r,P4r,XA,lRe,ff,UC,g2e,VA,$4r,h2e,I4r,iRe,Ir,zA,j4r,mf,D4r,p2e,N4r,q4r,_2e,O4r,G4r,X4r,WA,V4r,u2e,z4r,W4r,Q4r,xt,QA,H4r,b2e,U4r,J4r,gf,Y4r,v2e,K4r,Z4r,T2e,eEr,oEr,rEr,F2e,tEr,aEr,HA,nEr,ko,UA,sEr,C2e,lEr,iEr,Sn,dEr,M2e,cEr,fEr,E2e,mEr,gEr,y2e,hEr,pEr,_Er,Me,JC,w2e,uEr,bEr,$V,vEr,TEr,FEr,YC,A2e,CEr,MEr,IV,EEr,yEr,wEr,KC,L2e,AEr,LEr,jV,BEr,xEr,kEr,ZC,B2e,REr,SEr,DV,PEr,$Er,IEr,eM,x2e,jEr,DEr,NV,NEr,qEr,OEr,oM,k2e,GEr,XEr,qV,VEr,zEr,WEr,rM,R2e,QEr,HEr,OV,UEr,JEr,YEr,tM,S2e,KEr,ZEr,GV,e3r,o3r,r3r,aM,P2e,t3r,a3r,XV,n3r,s3r,l3r,$2e,i3r,d3r,JA,dRe,hf,nM,I2e,YA,c3r,j2e,f3r,cRe,jr,KA,m3r,pf,g3r,D2e,h3r,p3r,N2e,_3r,u3r,b3r,ZA,v3r,q2e,T3r,F3r,C3r,kt,eL,M3r,O2e,E3r,y3r,_f,w3r,G2e,A3r,L3r,X2e,B3r,x3r,k3r,V2e,R3r,S3r,oL,P3r,Ro,rL,$3r,z2e,I3r,j3r,Pn,D3r,W2e,N3r,q3r,Q2e,O3r,G3r,H2e,X3r,V3r,z3r,ve,sM,U2e,W3r,Q3r,VV,H3r,U3r,J3r,lM,J2e,Y3r,K3r,zV,Z3r,e5r,o5r,iM,Y2e,r5r,t5r,WV,a5r,n5r,s5r,dM,K2e,l5r,i5r,QV,d5r,c5r,f5r,cM,Z2e,m5r,g5r,HV,h5r,p5r,_5r,fM,eve,u5r,b5r,UV,v5r,T5r,F5r,mM,ove,C5r,M5r,JV,E5r,y5r,w5r,gM,rve,A5r,L5r,YV,B5r,x5r,k5r,hM,tve,R5r,S5r,KV,P5r,$5r,I5r,pM,ave,j5r,D5r,ZV,N5r,q5r,O5r,nve,G5r,X5r,tL,fRe,uf,_M,sve,aL,V5r,lve,z5r,mRe,Dr,nL,W5r,bf,Q5r,ive,H5r,U5r,dve,J5r,Y5r,K5r,sL,Z5r,cve,eyr,oyr,ryr,Rt,lL,tyr,fve,ayr,nyr,vf,syr,mve,lyr,iyr,gve,dyr,cyr,fyr,hve,myr,gyr,iL,hyr,So,dL,pyr,pve,_yr,uyr,$n,byr,_ve,vyr,Tyr,uve,Fyr,Cyr,bve,Myr,Eyr,yyr,Te,uM,vve,wyr,Ayr,ez,Lyr,Byr,xyr,bM,Tve,kyr,Ryr,oz,Syr,Pyr,$yr,vM,Fve,Iyr,jyr,rz,Dyr,Nyr,qyr,TM,Cve,Oyr,Gyr,tz,Xyr,Vyr,zyr,FM,Mve,Wyr,Qyr,az,Hyr,Uyr,Jyr,CM,Eve,Yyr,Kyr,nz,Zyr,ewr,owr,MM,yve,rwr,twr,sz,awr,nwr,swr,EM,wve,lwr,iwr,lz,dwr,cwr,fwr,yM,Ave,mwr,gwr,iz,hwr,pwr,_wr,wM,Lve,uwr,bwr,dz,vwr,Twr,Fwr,Bve,Cwr,Mwr,cL,gRe,Tf,AM,xve,fL,Ewr,kve,ywr,hRe,Nr,mL,wwr,Ff,Awr,Rve,Lwr,Bwr,Sve,xwr,kwr,Rwr,gL,Swr,Pve,Pwr,$wr,Iwr,St,hL,jwr,$ve,Dwr,Nwr,Cf,qwr,Ive,Owr,Gwr,jve,Xwr,Vwr,zwr,Dve,Wwr,Qwr,pL,Hwr,Po,_L,Uwr,Nve,Jwr,Ywr,In,Kwr,qve,Zwr,eAr,Ove,oAr,rAr,Gve,tAr,aAr,nAr,Se,LM,Xve,sAr,lAr,cz,iAr,dAr,cAr,BM,Vve,fAr,mAr,fz,gAr,hAr,pAr,xM,zve,_Ar,uAr,mz,bAr,vAr,TAr,kM,Wve,FAr,CAr,gz,MAr,EAr,yAr,RM,Qve,wAr,AAr,hz,LAr,BAr,xAr,SM,Hve,kAr,RAr,pz,SAr,PAr,$Ar,PM,Uve,IAr,jAr,_z,DAr,NAr,qAr,$M,Jve,OAr,GAr,uz,XAr,VAr,zAr,Yve,WAr,QAr,uL,pRe,Mf,IM,Kve,bL,HAr,Zve,UAr,_Re,qr,vL,JAr,Ef,YAr,e6e,KAr,ZAr,o6e,eLr,oLr,rLr,TL,tLr,r6e,aLr,nLr,sLr,Pt,FL,lLr,t6e,iLr,dLr,yf,cLr,a6e,fLr,mLr,n6e,gLr,hLr,pLr,s6e,_Lr,uLr,CL,bLr,$o,ML,vLr,l6e,TLr,FLr,jn,CLr,i6e,MLr,ELr,d6e,yLr,wLr,c6e,ALr,LLr,BLr,Pe,jM,f6e,xLr,kLr,bz,RLr,SLr,PLr,DM,m6e,$Lr,ILr,vz,jLr,DLr,NLr,NM,g6e,qLr,OLr,Tz,GLr,XLr,VLr,qM,h6e,zLr,WLr,Fz,QLr,HLr,ULr,OM,p6e,JLr,YLr,Cz,KLr,ZLr,e8r,GM,_6e,o8r,r8r,Mz,t8r,a8r,n8r,XM,u6e,s8r,l8r,Ez,i8r,d8r,c8r,VM,b6e,f8r,m8r,yz,g8r,h8r,p8r,v6e,_8r,u8r,EL,uRe,wf,zM,T6e,yL,b8r,F6e,v8r,bRe,Or,wL,T8r,Af,F8r,C6e,C8r,M8r,M6e,E8r,y8r,w8r,AL,A8r,E6e,L8r,B8r,x8r,$t,LL,k8r,y6e,R8r,S8r,Lf,P8r,w6e,$8r,I8r,A6e,j8r,D8r,N8r,L6e,q8r,O8r,BL,G8r,Io,xL,X8r,B6e,V8r,z8r,Dn,W8r,x6e,Q8r,H8r,k6e,U8r,J8r,R6e,Y8r,K8r,Z8r,S6e,WM,P6e,e9r,o9r,wz,r9r,t9r,a9r,$6e,n9r,s9r,kL,vRe,Bf,QM,I6e,RL,l9r,j6e,i9r,TRe,Gr,SL,d9r,xf,c9r,D6e,f9r,m9r,N6e,g9r,h9r,p9r,PL,_9r,q6e,u9r,b9r,v9r,It,$L,T9r,O6e,F9r,C9r,kf,M9r,G6e,E9r,y9r,X6e,w9r,A9r,L9r,V6e,B9r,x9r,IL,k9r,jo,jL,R9r,z6e,S9r,P9r,Nn,$9r,W6e,I9r,j9r,Q6e,D9r,N9r,H6e,q9r,O9r,G9r,DL,HM,U6e,X9r,V9r,Az,z9r,W9r,Q9r,UM,J6e,H9r,U9r,Lz,J9r,Y9r,K9r,Y6e,Z9r,eBr,NL,FRe,Rf,JM,K6e,qL,oBr,Z6e,rBr,CRe,Xr,OL,tBr,Sf,aBr,eTe,nBr,sBr,oTe,lBr,iBr,dBr,GL,cBr,rTe,fBr,mBr,gBr,jt,XL,hBr,tTe,pBr,_Br,Pf,uBr,aTe,bBr,vBr,nTe,TBr,FBr,CBr,sTe,MBr,EBr,VL,yBr,Do,zL,wBr,lTe,ABr,LBr,qn,BBr,iTe,xBr,kBr,dTe,RBr,SBr,cTe,PBr,$Br,IBr,fTe,YM,mTe,jBr,DBr,Bz,NBr,qBr,OBr,gTe,GBr,XBr,WL,MRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),oE=new X({}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new VBr({props:{warning:"&lcub;true}",$$slots:{default:[B7t]},$$scope:{ctx:Ii}}}),tE=new X({}),aE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/configuration_auto.py#L530"}}),lE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/configuration_auto.py#L553",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),iE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),dE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/configuration_auto.py#L675",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),cE=new X({}),fE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/tokenization_auto.py#L352"}}),hE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16070/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),pE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),_E=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),uE=new X({}),bE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),FE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16070/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),wh=new VBr({props:{$$slots:{default:[x7t]},$$scope:{ctx:Ii}}}),CE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ME=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),EE=new X({}),yE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/processing_auto.py#L71"}}),LE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),jh=new VBr({props:{$$slots:{default:[k7t]},$$scope:{ctx:Ii}}}),BE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),xE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),kE=new X({}),RE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L699"}}),PE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$E=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),IE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DE=new X({}),NE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L706"}}),OE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),XE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new X({}),WE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L721"}}),HE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),JE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KE=new X({}),ZE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L728"}}),o3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),r3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),t3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n3=new X({}),s3=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L735"}}),i3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),d3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),c3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m3=new X({}),g3=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L744"}}),p3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),u3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v3=new X({}),T3=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L778"}}),C3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),E3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w3=new X({}),A3=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L785"}}),B3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),k3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),P3=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L771"}}),I3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),D3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new X({}),O3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L753"}}),X3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),z3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new X({}),H3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L760"}}),J3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),K3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e5=new X({}),o5=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L794"}}),t5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),a5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),n5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l5=new X({}),i5=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L833"}}),c5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),f5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),m5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h5=new X({}),p5=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L840"}}),u5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),b5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),v5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F5=new X({}),C5=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L863"}}),E5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),y5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),w5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L5=new X({}),B5=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L847"}}),k5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),R5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),S5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$5=new X({}),I5=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L854"}}),D5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),N5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),q5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X5=new X({}),V5=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L872"}}),W5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),H5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J5=new X({}),Y5=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L879"}}),Z5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L826"}}),sy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L801"}}),gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L808"}}),Ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_auto.py#L817"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),Sy=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),qy=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Qy=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),pw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Cw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),Bw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Xw=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),lA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),mA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),hA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),wA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),LA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),SA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),$A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),qA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),GA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),zA=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),QA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),UA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),eL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),rL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),lL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),dL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),hL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),_L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),FL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),ML=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),wL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),LL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),xL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),SL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),$L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),jL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),OL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16070/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16070/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16070/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),he=a("a"),io=a("span"),f(fe.$$.fragment),Ce=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),Y4=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),K4=o("AutoConfig"),Gn=o(", "),Xn=a("a"),Z4=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),eE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),V8=o("will create a model that is an instance of "),Xi=a("a"),z8=o("BertModel"),W8=o("."),zo=l(),Oa=a("p"),Q8=o("There is one class of "),Nf=a("code"),H8=o("AutoModel"),IPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Cxe=l(),Vi=a("h2"),qf=a("a"),CQ=a("span"),f(oE.$$.fragment),jPe=l(),MQ=a("span"),DPe=o("Extending the Auto Classes"),Mxe=l(),zn=a("p"),NPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EQ=a("code"),qPe=o("NewModel"),OPe=o(", make sure you have a "),yQ=a("code"),GPe=o("NewModelConfig"),XPe=o(` then you can add those to the auto
classes like this:`),Exe=l(),f(rE.$$.fragment),yxe=l(),U8=a("p"),VPe=o("You will then be able to use the auto classes like you would usually do!"),wxe=l(),f(Of.$$.fragment),Axe=l(),zi=a("h2"),Gf=a("a"),wQ=a("span"),f(tE.$$.fragment),zPe=l(),AQ=a("span"),WPe=o("AutoConfig"),Lxe=l(),Wo=a("div"),f(aE.$$.fragment),QPe=l(),nE=a("p"),HPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J8=a("a"),UPe=o("from_pretrained()"),JPe=o(" class method."),YPe=l(),sE=a("p"),KPe=o("This class cannot be instantiated directly using "),LQ=a("code"),ZPe=o("__init__()"),e$e=o(" (throws an error)."),o$e=l(),mo=a("div"),f(lE.$$.fragment),r$e=l(),BQ=a("p"),t$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),a$e=l(),Wi=a("p"),n$e=o("The configuration class to instantiate is selected based on the "),xQ=a("code"),s$e=o("model_type"),l$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kQ=a("code"),i$e=o("pretrained_model_name_or_path"),d$e=o(":"),c$e=l(),v=a("ul"),Xf=a("li"),RQ=a("strong"),f$e=o("albert"),m$e=o(" \u2014 "),Y8=a("a"),g$e=o("AlbertConfig"),h$e=o(" (ALBERT model)"),p$e=l(),Vf=a("li"),SQ=a("strong"),_$e=o("bart"),u$e=o(" \u2014 "),K8=a("a"),b$e=o("BartConfig"),v$e=o(" (BART model)"),T$e=l(),zf=a("li"),PQ=a("strong"),F$e=o("beit"),C$e=o(" \u2014 "),Z8=a("a"),M$e=o("BeitConfig"),E$e=o(" (BEiT model)"),y$e=l(),Wf=a("li"),$Q=a("strong"),w$e=o("bert"),A$e=o(" \u2014 "),e9=a("a"),L$e=o("BertConfig"),B$e=o(" (BERT model)"),x$e=l(),Qf=a("li"),IQ=a("strong"),k$e=o("bert-generation"),R$e=o(" \u2014 "),o9=a("a"),S$e=o("BertGenerationConfig"),P$e=o(" (Bert Generation model)"),$$e=l(),Hf=a("li"),jQ=a("strong"),I$e=o("big_bird"),j$e=o(" \u2014 "),r9=a("a"),D$e=o("BigBirdConfig"),N$e=o(" (BigBird model)"),q$e=l(),Uf=a("li"),DQ=a("strong"),O$e=o("bigbird_pegasus"),G$e=o(" \u2014 "),t9=a("a"),X$e=o("BigBirdPegasusConfig"),V$e=o(" (BigBirdPegasus model)"),z$e=l(),Jf=a("li"),NQ=a("strong"),W$e=o("blenderbot"),Q$e=o(" \u2014 "),a9=a("a"),H$e=o("BlenderbotConfig"),U$e=o(" (Blenderbot model)"),J$e=l(),Yf=a("li"),qQ=a("strong"),Y$e=o("blenderbot-small"),K$e=o(" \u2014 "),n9=a("a"),Z$e=o("BlenderbotSmallConfig"),eIe=o(" (BlenderbotSmall model)"),oIe=l(),Kf=a("li"),OQ=a("strong"),rIe=o("camembert"),tIe=o(" \u2014 "),s9=a("a"),aIe=o("CamembertConfig"),nIe=o(" (CamemBERT model)"),sIe=l(),Zf=a("li"),GQ=a("strong"),lIe=o("canine"),iIe=o(" \u2014 "),l9=a("a"),dIe=o("CanineConfig"),cIe=o(" (Canine model)"),fIe=l(),em=a("li"),XQ=a("strong"),mIe=o("clip"),gIe=o(" \u2014 "),i9=a("a"),hIe=o("CLIPConfig"),pIe=o(" (CLIP model)"),_Ie=l(),om=a("li"),VQ=a("strong"),uIe=o("convbert"),bIe=o(" \u2014 "),d9=a("a"),vIe=o("ConvBertConfig"),TIe=o(" (ConvBERT model)"),FIe=l(),rm=a("li"),zQ=a("strong"),CIe=o("convnext"),MIe=o(" \u2014 "),c9=a("a"),EIe=o("ConvNextConfig"),yIe=o(" (ConvNext model)"),wIe=l(),tm=a("li"),WQ=a("strong"),AIe=o("ctrl"),LIe=o(" \u2014 "),f9=a("a"),BIe=o("CTRLConfig"),xIe=o(" (CTRL model)"),kIe=l(),am=a("li"),QQ=a("strong"),RIe=o("data2vec-audio"),SIe=o(" \u2014 "),m9=a("a"),PIe=o("Data2VecAudioConfig"),$Ie=o(" (Data2VecAudio model)"),IIe=l(),nm=a("li"),HQ=a("strong"),jIe=o("data2vec-text"),DIe=o(" \u2014 "),g9=a("a"),NIe=o("Data2VecTextConfig"),qIe=o(" (Data2VecText model)"),OIe=l(),sm=a("li"),UQ=a("strong"),GIe=o("deberta"),XIe=o(" \u2014 "),h9=a("a"),VIe=o("DebertaConfig"),zIe=o(" (DeBERTa model)"),WIe=l(),lm=a("li"),JQ=a("strong"),QIe=o("deberta-v2"),HIe=o(" \u2014 "),p9=a("a"),UIe=o("DebertaV2Config"),JIe=o(" (DeBERTa-v2 model)"),YIe=l(),im=a("li"),YQ=a("strong"),KIe=o("deit"),ZIe=o(" \u2014 "),_9=a("a"),eje=o("DeiTConfig"),oje=o(" (DeiT model)"),rje=l(),dm=a("li"),KQ=a("strong"),tje=o("detr"),aje=o(" \u2014 "),u9=a("a"),nje=o("DetrConfig"),sje=o(" (DETR model)"),lje=l(),cm=a("li"),ZQ=a("strong"),ije=o("distilbert"),dje=o(" \u2014 "),b9=a("a"),cje=o("DistilBertConfig"),fje=o(" (DistilBERT model)"),mje=l(),fm=a("li"),eH=a("strong"),gje=o("dpr"),hje=o(" \u2014 "),v9=a("a"),pje=o("DPRConfig"),_je=o(" (DPR model)"),uje=l(),mm=a("li"),oH=a("strong"),bje=o("electra"),vje=o(" \u2014 "),T9=a("a"),Tje=o("ElectraConfig"),Fje=o(" (ELECTRA model)"),Cje=l(),gm=a("li"),rH=a("strong"),Mje=o("encoder-decoder"),Eje=o(" \u2014 "),F9=a("a"),yje=o("EncoderDecoderConfig"),wje=o(" (Encoder decoder model)"),Aje=l(),hm=a("li"),tH=a("strong"),Lje=o("flaubert"),Bje=o(" \u2014 "),C9=a("a"),xje=o("FlaubertConfig"),kje=o(" (FlauBERT model)"),Rje=l(),pm=a("li"),aH=a("strong"),Sje=o("fnet"),Pje=o(" \u2014 "),M9=a("a"),$je=o("FNetConfig"),Ije=o(" (FNet model)"),jje=l(),_m=a("li"),nH=a("strong"),Dje=o("fsmt"),Nje=o(" \u2014 "),E9=a("a"),qje=o("FSMTConfig"),Oje=o(" (FairSeq Machine-Translation model)"),Gje=l(),um=a("li"),sH=a("strong"),Xje=o("funnel"),Vje=o(" \u2014 "),y9=a("a"),zje=o("FunnelConfig"),Wje=o(" (Funnel Transformer model)"),Qje=l(),bm=a("li"),lH=a("strong"),Hje=o("gpt2"),Uje=o(" \u2014 "),w9=a("a"),Jje=o("GPT2Config"),Yje=o(" (OpenAI GPT-2 model)"),Kje=l(),vm=a("li"),iH=a("strong"),Zje=o("gpt_neo"),eDe=o(" \u2014 "),A9=a("a"),oDe=o("GPTNeoConfig"),rDe=o(" (GPT Neo model)"),tDe=l(),Tm=a("li"),dH=a("strong"),aDe=o("gptj"),nDe=o(" \u2014 "),L9=a("a"),sDe=o("GPTJConfig"),lDe=o(" (GPT-J model)"),iDe=l(),Fm=a("li"),cH=a("strong"),dDe=o("hubert"),cDe=o(" \u2014 "),B9=a("a"),fDe=o("HubertConfig"),mDe=o(" (Hubert model)"),gDe=l(),Cm=a("li"),fH=a("strong"),hDe=o("ibert"),pDe=o(" \u2014 "),x9=a("a"),_De=o("IBertConfig"),uDe=o(" (I-BERT model)"),bDe=l(),Mm=a("li"),mH=a("strong"),vDe=o("imagegpt"),TDe=o(" \u2014 "),k9=a("a"),FDe=o("ImageGPTConfig"),CDe=o(" (ImageGPT model)"),MDe=l(),Em=a("li"),gH=a("strong"),EDe=o("layoutlm"),yDe=o(" \u2014 "),R9=a("a"),wDe=o("LayoutLMConfig"),ADe=o(" (LayoutLM model)"),LDe=l(),ym=a("li"),hH=a("strong"),BDe=o("layoutlmv2"),xDe=o(" \u2014 "),S9=a("a"),kDe=o("LayoutLMv2Config"),RDe=o(" (LayoutLMv2 model)"),SDe=l(),wm=a("li"),pH=a("strong"),PDe=o("led"),$De=o(" \u2014 "),P9=a("a"),IDe=o("LEDConfig"),jDe=o(" (LED model)"),DDe=l(),Am=a("li"),_H=a("strong"),NDe=o("longformer"),qDe=o(" \u2014 "),$9=a("a"),ODe=o("LongformerConfig"),GDe=o(" (Longformer model)"),XDe=l(),Lm=a("li"),uH=a("strong"),VDe=o("luke"),zDe=o(" \u2014 "),I9=a("a"),WDe=o("LukeConfig"),QDe=o(" (LUKE model)"),HDe=l(),Bm=a("li"),bH=a("strong"),UDe=o("lxmert"),JDe=o(" \u2014 "),j9=a("a"),YDe=o("LxmertConfig"),KDe=o(" (LXMERT model)"),ZDe=l(),xm=a("li"),vH=a("strong"),eNe=o("m2m_100"),oNe=o(" \u2014 "),D9=a("a"),rNe=o("M2M100Config"),tNe=o(" (M2M100 model)"),aNe=l(),km=a("li"),TH=a("strong"),nNe=o("marian"),sNe=o(" \u2014 "),N9=a("a"),lNe=o("MarianConfig"),iNe=o(" (Marian model)"),dNe=l(),Rm=a("li"),FH=a("strong"),cNe=o("maskformer"),fNe=o(" \u2014 "),q9=a("a"),mNe=o("MaskFormerConfig"),gNe=o(" (MaskFormer model)"),hNe=l(),Sm=a("li"),CH=a("strong"),pNe=o("mbart"),_Ne=o(" \u2014 "),O9=a("a"),uNe=o("MBartConfig"),bNe=o(" (mBART model)"),vNe=l(),Pm=a("li"),MH=a("strong"),TNe=o("megatron-bert"),FNe=o(" \u2014 "),G9=a("a"),CNe=o("MegatronBertConfig"),MNe=o(" (MegatronBert model)"),ENe=l(),$m=a("li"),EH=a("strong"),yNe=o("mobilebert"),wNe=o(" \u2014 "),X9=a("a"),ANe=o("MobileBertConfig"),LNe=o(" (MobileBERT model)"),BNe=l(),Im=a("li"),yH=a("strong"),xNe=o("mpnet"),kNe=o(" \u2014 "),V9=a("a"),RNe=o("MPNetConfig"),SNe=o(" (MPNet model)"),PNe=l(),jm=a("li"),wH=a("strong"),$Ne=o("mt5"),INe=o(" \u2014 "),z9=a("a"),jNe=o("MT5Config"),DNe=o(" (mT5 model)"),NNe=l(),Dm=a("li"),AH=a("strong"),qNe=o("nystromformer"),ONe=o(" \u2014 "),W9=a("a"),GNe=o("NystromformerConfig"),XNe=o(" (Nystromformer model)"),VNe=l(),Nm=a("li"),LH=a("strong"),zNe=o("openai-gpt"),WNe=o(" \u2014 "),Q9=a("a"),QNe=o("OpenAIGPTConfig"),HNe=o(" (OpenAI GPT model)"),UNe=l(),qm=a("li"),BH=a("strong"),JNe=o("pegasus"),YNe=o(" \u2014 "),H9=a("a"),KNe=o("PegasusConfig"),ZNe=o(" (Pegasus model)"),eqe=l(),Om=a("li"),xH=a("strong"),oqe=o("perceiver"),rqe=o(" \u2014 "),U9=a("a"),tqe=o("PerceiverConfig"),aqe=o(" (Perceiver model)"),nqe=l(),Gm=a("li"),kH=a("strong"),sqe=o("plbart"),lqe=o(" \u2014 "),J9=a("a"),iqe=o("PLBartConfig"),dqe=o(" (PLBart model)"),cqe=l(),Xm=a("li"),RH=a("strong"),fqe=o("poolformer"),mqe=o(" \u2014 "),Y9=a("a"),gqe=o("PoolFormerConfig"),hqe=o(" (PoolFormer model)"),pqe=l(),Vm=a("li"),SH=a("strong"),_qe=o("prophetnet"),uqe=o(" \u2014 "),K9=a("a"),bqe=o("ProphetNetConfig"),vqe=o(" (ProphetNet model)"),Tqe=l(),zm=a("li"),PH=a("strong"),Fqe=o("qdqbert"),Cqe=o(" \u2014 "),Z9=a("a"),Mqe=o("QDQBertConfig"),Eqe=o(" (QDQBert model)"),yqe=l(),Wm=a("li"),$H=a("strong"),wqe=o("rag"),Aqe=o(" \u2014 "),eB=a("a"),Lqe=o("RagConfig"),Bqe=o(" (RAG model)"),xqe=l(),Qm=a("li"),IH=a("strong"),kqe=o("realm"),Rqe=o(" \u2014 "),oB=a("a"),Sqe=o("RealmConfig"),Pqe=o(" (Realm model)"),$qe=l(),Hm=a("li"),jH=a("strong"),Iqe=o("reformer"),jqe=o(" \u2014 "),rB=a("a"),Dqe=o("ReformerConfig"),Nqe=o(" (Reformer model)"),qqe=l(),Um=a("li"),DH=a("strong"),Oqe=o("rembert"),Gqe=o(" \u2014 "),tB=a("a"),Xqe=o("RemBertConfig"),Vqe=o(" (RemBERT model)"),zqe=l(),Jm=a("li"),NH=a("strong"),Wqe=o("resnet"),Qqe=o(" \u2014 "),aB=a("a"),Hqe=o("ResNetConfig"),Uqe=o(" (ResNet model)"),Jqe=l(),Ym=a("li"),qH=a("strong"),Yqe=o("retribert"),Kqe=o(" \u2014 "),nB=a("a"),Zqe=o("RetriBertConfig"),eOe=o(" (RetriBERT model)"),oOe=l(),Km=a("li"),OH=a("strong"),rOe=o("roberta"),tOe=o(" \u2014 "),sB=a("a"),aOe=o("RobertaConfig"),nOe=o(" (RoBERTa model)"),sOe=l(),Zm=a("li"),GH=a("strong"),lOe=o("roformer"),iOe=o(" \u2014 "),lB=a("a"),dOe=o("RoFormerConfig"),cOe=o(" (RoFormer model)"),fOe=l(),eg=a("li"),XH=a("strong"),mOe=o("segformer"),gOe=o(" \u2014 "),iB=a("a"),hOe=o("SegformerConfig"),pOe=o(" (SegFormer model)"),_Oe=l(),og=a("li"),VH=a("strong"),uOe=o("sew"),bOe=o(" \u2014 "),dB=a("a"),vOe=o("SEWConfig"),TOe=o(" (SEW model)"),FOe=l(),rg=a("li"),zH=a("strong"),COe=o("sew-d"),MOe=o(" \u2014 "),cB=a("a"),EOe=o("SEWDConfig"),yOe=o(" (SEW-D model)"),wOe=l(),tg=a("li"),WH=a("strong"),AOe=o("speech-encoder-decoder"),LOe=o(" \u2014 "),fB=a("a"),BOe=o("SpeechEncoderDecoderConfig"),xOe=o(" (Speech Encoder decoder model)"),kOe=l(),ag=a("li"),QH=a("strong"),ROe=o("speech_to_text"),SOe=o(" \u2014 "),mB=a("a"),POe=o("Speech2TextConfig"),$Oe=o(" (Speech2Text model)"),IOe=l(),ng=a("li"),HH=a("strong"),jOe=o("speech_to_text_2"),DOe=o(" \u2014 "),gB=a("a"),NOe=o("Speech2Text2Config"),qOe=o(" (Speech2Text2 model)"),OOe=l(),sg=a("li"),UH=a("strong"),GOe=o("splinter"),XOe=o(" \u2014 "),hB=a("a"),VOe=o("SplinterConfig"),zOe=o(" (Splinter model)"),WOe=l(),lg=a("li"),JH=a("strong"),QOe=o("squeezebert"),HOe=o(" \u2014 "),pB=a("a"),UOe=o("SqueezeBertConfig"),JOe=o(" (SqueezeBERT model)"),YOe=l(),ig=a("li"),YH=a("strong"),KOe=o("swin"),ZOe=o(" \u2014 "),_B=a("a"),eGe=o("SwinConfig"),oGe=o(" (Swin model)"),rGe=l(),dg=a("li"),KH=a("strong"),tGe=o("t5"),aGe=o(" \u2014 "),uB=a("a"),nGe=o("T5Config"),sGe=o(" (T5 model)"),lGe=l(),cg=a("li"),ZH=a("strong"),iGe=o("tapas"),dGe=o(" \u2014 "),bB=a("a"),cGe=o("TapasConfig"),fGe=o(" (TAPAS model)"),mGe=l(),fg=a("li"),eU=a("strong"),gGe=o("transfo-xl"),hGe=o(" \u2014 "),vB=a("a"),pGe=o("TransfoXLConfig"),_Ge=o(" (Transformer-XL model)"),uGe=l(),mg=a("li"),oU=a("strong"),bGe=o("trocr"),vGe=o(" \u2014 "),TB=a("a"),TGe=o("TrOCRConfig"),FGe=o(" (TrOCR model)"),CGe=l(),gg=a("li"),rU=a("strong"),MGe=o("unispeech"),EGe=o(" \u2014 "),FB=a("a"),yGe=o("UniSpeechConfig"),wGe=o(" (UniSpeech model)"),AGe=l(),hg=a("li"),tU=a("strong"),LGe=o("unispeech-sat"),BGe=o(" \u2014 "),CB=a("a"),xGe=o("UniSpeechSatConfig"),kGe=o(" (UniSpeechSat model)"),RGe=l(),pg=a("li"),aU=a("strong"),SGe=o("vilt"),PGe=o(" \u2014 "),MB=a("a"),$Ge=o("ViltConfig"),IGe=o(" (ViLT model)"),jGe=l(),_g=a("li"),nU=a("strong"),DGe=o("vision-encoder-decoder"),NGe=o(" \u2014 "),EB=a("a"),qGe=o("VisionEncoderDecoderConfig"),OGe=o(" (Vision Encoder decoder model)"),GGe=l(),ug=a("li"),sU=a("strong"),XGe=o("vision-text-dual-encoder"),VGe=o(" \u2014 "),yB=a("a"),zGe=o("VisionTextDualEncoderConfig"),WGe=o(" (VisionTextDualEncoder model)"),QGe=l(),bg=a("li"),lU=a("strong"),HGe=o("visual_bert"),UGe=o(" \u2014 "),wB=a("a"),JGe=o("VisualBertConfig"),YGe=o(" (VisualBert model)"),KGe=l(),vg=a("li"),iU=a("strong"),ZGe=o("vit"),eXe=o(" \u2014 "),AB=a("a"),oXe=o("ViTConfig"),rXe=o(" (ViT model)"),tXe=l(),Tg=a("li"),dU=a("strong"),aXe=o("vit_mae"),nXe=o(" \u2014 "),LB=a("a"),sXe=o("ViTMAEConfig"),lXe=o(" (ViTMAE model)"),iXe=l(),Fg=a("li"),cU=a("strong"),dXe=o("wav2vec2"),cXe=o(" \u2014 "),BB=a("a"),fXe=o("Wav2Vec2Config"),mXe=o(" (Wav2Vec2 model)"),gXe=l(),Cg=a("li"),fU=a("strong"),hXe=o("wavlm"),pXe=o(" \u2014 "),xB=a("a"),_Xe=o("WavLMConfig"),uXe=o(" (WavLM model)"),bXe=l(),Mg=a("li"),mU=a("strong"),vXe=o("xglm"),TXe=o(" \u2014 "),kB=a("a"),FXe=o("XGLMConfig"),CXe=o(" (XGLM model)"),MXe=l(),Eg=a("li"),gU=a("strong"),EXe=o("xlm"),yXe=o(" \u2014 "),RB=a("a"),wXe=o("XLMConfig"),AXe=o(" (XLM model)"),LXe=l(),yg=a("li"),hU=a("strong"),BXe=o("xlm-prophetnet"),xXe=o(" \u2014 "),SB=a("a"),kXe=o("XLMProphetNetConfig"),RXe=o(" (XLMProphetNet model)"),SXe=l(),wg=a("li"),pU=a("strong"),PXe=o("xlm-roberta"),$Xe=o(" \u2014 "),PB=a("a"),IXe=o("XLMRobertaConfig"),jXe=o(" (XLM-RoBERTa model)"),DXe=l(),Ag=a("li"),_U=a("strong"),NXe=o("xlm-roberta-xl"),qXe=o(" \u2014 "),$B=a("a"),OXe=o("XLMRobertaXLConfig"),GXe=o(" (XLM-RoBERTa-XL model)"),XXe=l(),Lg=a("li"),uU=a("strong"),VXe=o("xlnet"),zXe=o(" \u2014 "),IB=a("a"),WXe=o("XLNetConfig"),QXe=o(" (XLNet model)"),HXe=l(),Bg=a("li"),bU=a("strong"),UXe=o("yoso"),JXe=o(" \u2014 "),jB=a("a"),YXe=o("YosoConfig"),KXe=o(" (YOSO model)"),ZXe=l(),vU=a("p"),eVe=o("Examples:"),oVe=l(),f(iE.$$.fragment),rVe=l(),xg=a("div"),f(dE.$$.fragment),tVe=l(),TU=a("p"),aVe=o("Register a new configuration for this class."),Bxe=l(),Qi=a("h2"),kg=a("a"),FU=a("span"),f(cE.$$.fragment),nVe=l(),CU=a("span"),sVe=o("AutoTokenizer"),xxe=l(),Qo=a("div"),f(fE.$$.fragment),lVe=l(),mE=a("p"),iVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DB=a("a"),dVe=o("AutoTokenizer.from_pretrained()"),cVe=o(" class method."),fVe=l(),gE=a("p"),mVe=o("This class cannot be instantiated directly using "),MU=a("code"),gVe=o("__init__()"),hVe=o(" (throws an error)."),pVe=l(),go=a("div"),f(hE.$$.fragment),_Ve=l(),EU=a("p"),uVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),bVe=l(),Ga=a("p"),vVe=o("The tokenizer class to instantiate is selected based on the "),yU=a("code"),TVe=o("model_type"),FVe=o(` property of the config object (either
passed as an argument or loaded from `),wU=a("code"),CVe=o("pretrained_model_name_or_path"),MVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AU=a("code"),EVe=o("pretrained_model_name_or_path"),yVe=o(":"),wVe=l(),E=a("ul"),Wn=a("li"),LU=a("strong"),AVe=o("albert"),LVe=o(" \u2014 "),NB=a("a"),BVe=o("AlbertTokenizer"),xVe=o(" or "),qB=a("a"),kVe=o("AlbertTokenizerFast"),RVe=o(" (ALBERT model)"),SVe=l(),Qn=a("li"),BU=a("strong"),PVe=o("bart"),$Ve=o(" \u2014 "),OB=a("a"),IVe=o("BartTokenizer"),jVe=o(" or "),GB=a("a"),DVe=o("BartTokenizerFast"),NVe=o(" (BART model)"),qVe=l(),Hn=a("li"),xU=a("strong"),OVe=o("barthez"),GVe=o(" \u2014 "),XB=a("a"),XVe=o("BarthezTokenizer"),VVe=o(" or "),VB=a("a"),zVe=o("BarthezTokenizerFast"),WVe=o(" (BARThez model)"),QVe=l(),Rg=a("li"),kU=a("strong"),HVe=o("bartpho"),UVe=o(" \u2014 "),zB=a("a"),JVe=o("BartphoTokenizer"),YVe=o(" (BARTpho model)"),KVe=l(),Un=a("li"),RU=a("strong"),ZVe=o("bert"),eze=o(" \u2014 "),WB=a("a"),oze=o("BertTokenizer"),rze=o(" or "),QB=a("a"),tze=o("BertTokenizerFast"),aze=o(" (BERT model)"),nze=l(),Sg=a("li"),SU=a("strong"),sze=o("bert-generation"),lze=o(" \u2014 "),HB=a("a"),ize=o("BertGenerationTokenizer"),dze=o(" (Bert Generation model)"),cze=l(),Pg=a("li"),PU=a("strong"),fze=o("bert-japanese"),mze=o(" \u2014 "),UB=a("a"),gze=o("BertJapaneseTokenizer"),hze=o(" (BertJapanese model)"),pze=l(),$g=a("li"),$U=a("strong"),_ze=o("bertweet"),uze=o(" \u2014 "),JB=a("a"),bze=o("BertweetTokenizer"),vze=o(" (Bertweet model)"),Tze=l(),Jn=a("li"),IU=a("strong"),Fze=o("big_bird"),Cze=o(" \u2014 "),YB=a("a"),Mze=o("BigBirdTokenizer"),Eze=o(" or "),KB=a("a"),yze=o("BigBirdTokenizerFast"),wze=o(" (BigBird model)"),Aze=l(),Yn=a("li"),jU=a("strong"),Lze=o("bigbird_pegasus"),Bze=o(" \u2014 "),ZB=a("a"),xze=o("PegasusTokenizer"),kze=o(" or "),ex=a("a"),Rze=o("PegasusTokenizerFast"),Sze=o(" (BigBirdPegasus model)"),Pze=l(),Kn=a("li"),DU=a("strong"),$ze=o("blenderbot"),Ize=o(" \u2014 "),ox=a("a"),jze=o("BlenderbotTokenizer"),Dze=o(" or "),rx=a("a"),Nze=o("BlenderbotTokenizerFast"),qze=o(" (Blenderbot model)"),Oze=l(),Ig=a("li"),NU=a("strong"),Gze=o("blenderbot-small"),Xze=o(" \u2014 "),tx=a("a"),Vze=o("BlenderbotSmallTokenizer"),zze=o(" (BlenderbotSmall model)"),Wze=l(),jg=a("li"),qU=a("strong"),Qze=o("byt5"),Hze=o(" \u2014 "),ax=a("a"),Uze=o("ByT5Tokenizer"),Jze=o(" (ByT5 model)"),Yze=l(),Zn=a("li"),OU=a("strong"),Kze=o("camembert"),Zze=o(" \u2014 "),nx=a("a"),eWe=o("CamembertTokenizer"),oWe=o(" or "),sx=a("a"),rWe=o("CamembertTokenizerFast"),tWe=o(" (CamemBERT model)"),aWe=l(),Dg=a("li"),GU=a("strong"),nWe=o("canine"),sWe=o(" \u2014 "),lx=a("a"),lWe=o("CanineTokenizer"),iWe=o(" (Canine model)"),dWe=l(),es=a("li"),XU=a("strong"),cWe=o("clip"),fWe=o(" \u2014 "),ix=a("a"),mWe=o("CLIPTokenizer"),gWe=o(" or "),dx=a("a"),hWe=o("CLIPTokenizerFast"),pWe=o(" (CLIP model)"),_We=l(),os=a("li"),VU=a("strong"),uWe=o("convbert"),bWe=o(" \u2014 "),cx=a("a"),vWe=o("ConvBertTokenizer"),TWe=o(" or "),fx=a("a"),FWe=o("ConvBertTokenizerFast"),CWe=o(" (ConvBERT model)"),MWe=l(),rs=a("li"),zU=a("strong"),EWe=o("cpm"),yWe=o(" \u2014 "),mx=a("a"),wWe=o("CpmTokenizer"),AWe=o(" or "),WU=a("code"),LWe=o("CpmTokenizerFast"),BWe=o(" (CPM model)"),xWe=l(),Ng=a("li"),QU=a("strong"),kWe=o("ctrl"),RWe=o(" \u2014 "),gx=a("a"),SWe=o("CTRLTokenizer"),PWe=o(" (CTRL model)"),$We=l(),ts=a("li"),HU=a("strong"),IWe=o("deberta"),jWe=o(" \u2014 "),hx=a("a"),DWe=o("DebertaTokenizer"),NWe=o(" or "),px=a("a"),qWe=o("DebertaTokenizerFast"),OWe=o(" (DeBERTa model)"),GWe=l(),qg=a("li"),UU=a("strong"),XWe=o("deberta-v2"),VWe=o(" \u2014 "),_x=a("a"),zWe=o("DebertaV2Tokenizer"),WWe=o(" (DeBERTa-v2 model)"),QWe=l(),as=a("li"),JU=a("strong"),HWe=o("distilbert"),UWe=o(" \u2014 "),ux=a("a"),JWe=o("DistilBertTokenizer"),YWe=o(" or "),bx=a("a"),KWe=o("DistilBertTokenizerFast"),ZWe=o(" (DistilBERT model)"),eQe=l(),ns=a("li"),YU=a("strong"),oQe=o("dpr"),rQe=o(" \u2014 "),vx=a("a"),tQe=o("DPRQuestionEncoderTokenizer"),aQe=o(" or "),Tx=a("a"),nQe=o("DPRQuestionEncoderTokenizerFast"),sQe=o(" (DPR model)"),lQe=l(),ss=a("li"),KU=a("strong"),iQe=o("electra"),dQe=o(" \u2014 "),Fx=a("a"),cQe=o("ElectraTokenizer"),fQe=o(" or "),Cx=a("a"),mQe=o("ElectraTokenizerFast"),gQe=o(" (ELECTRA model)"),hQe=l(),Og=a("li"),ZU=a("strong"),pQe=o("flaubert"),_Qe=o(" \u2014 "),Mx=a("a"),uQe=o("FlaubertTokenizer"),bQe=o(" (FlauBERT model)"),vQe=l(),ls=a("li"),eJ=a("strong"),TQe=o("fnet"),FQe=o(" \u2014 "),Ex=a("a"),CQe=o("FNetTokenizer"),MQe=o(" or "),yx=a("a"),EQe=o("FNetTokenizerFast"),yQe=o(" (FNet model)"),wQe=l(),Gg=a("li"),oJ=a("strong"),AQe=o("fsmt"),LQe=o(" \u2014 "),wx=a("a"),BQe=o("FSMTTokenizer"),xQe=o(" (FairSeq Machine-Translation model)"),kQe=l(),is=a("li"),rJ=a("strong"),RQe=o("funnel"),SQe=o(" \u2014 "),Ax=a("a"),PQe=o("FunnelTokenizer"),$Qe=o(" or "),Lx=a("a"),IQe=o("FunnelTokenizerFast"),jQe=o(" (Funnel Transformer model)"),DQe=l(),ds=a("li"),tJ=a("strong"),NQe=o("gpt2"),qQe=o(" \u2014 "),Bx=a("a"),OQe=o("GPT2Tokenizer"),GQe=o(" or "),xx=a("a"),XQe=o("GPT2TokenizerFast"),VQe=o(" (OpenAI GPT-2 model)"),zQe=l(),cs=a("li"),aJ=a("strong"),WQe=o("gpt_neo"),QQe=o(" \u2014 "),kx=a("a"),HQe=o("GPT2Tokenizer"),UQe=o(" or "),Rx=a("a"),JQe=o("GPT2TokenizerFast"),YQe=o(" (GPT Neo model)"),KQe=l(),fs=a("li"),nJ=a("strong"),ZQe=o("herbert"),eHe=o(" \u2014 "),Sx=a("a"),oHe=o("HerbertTokenizer"),rHe=o(" or "),Px=a("a"),tHe=o("HerbertTokenizerFast"),aHe=o(" (HerBERT model)"),nHe=l(),Xg=a("li"),sJ=a("strong"),sHe=o("hubert"),lHe=o(" \u2014 "),$x=a("a"),iHe=o("Wav2Vec2CTCTokenizer"),dHe=o(" (Hubert model)"),cHe=l(),ms=a("li"),lJ=a("strong"),fHe=o("ibert"),mHe=o(" \u2014 "),Ix=a("a"),gHe=o("RobertaTokenizer"),hHe=o(" or "),jx=a("a"),pHe=o("RobertaTokenizerFast"),_He=o(" (I-BERT model)"),uHe=l(),gs=a("li"),iJ=a("strong"),bHe=o("layoutlm"),vHe=o(" \u2014 "),Dx=a("a"),THe=o("LayoutLMTokenizer"),FHe=o(" or "),Nx=a("a"),CHe=o("LayoutLMTokenizerFast"),MHe=o(" (LayoutLM model)"),EHe=l(),hs=a("li"),dJ=a("strong"),yHe=o("layoutlmv2"),wHe=o(" \u2014 "),qx=a("a"),AHe=o("LayoutLMv2Tokenizer"),LHe=o(" or "),Ox=a("a"),BHe=o("LayoutLMv2TokenizerFast"),xHe=o(" (LayoutLMv2 model)"),kHe=l(),ps=a("li"),cJ=a("strong"),RHe=o("layoutxlm"),SHe=o(" \u2014 "),Gx=a("a"),PHe=o("LayoutXLMTokenizer"),$He=o(" or "),Xx=a("a"),IHe=o("LayoutXLMTokenizerFast"),jHe=o(" (LayoutXLM model)"),DHe=l(),_s=a("li"),fJ=a("strong"),NHe=o("led"),qHe=o(" \u2014 "),Vx=a("a"),OHe=o("LEDTokenizer"),GHe=o(" or "),zx=a("a"),XHe=o("LEDTokenizerFast"),VHe=o(" (LED model)"),zHe=l(),us=a("li"),mJ=a("strong"),WHe=o("longformer"),QHe=o(" \u2014 "),Wx=a("a"),HHe=o("LongformerTokenizer"),UHe=o(" or "),Qx=a("a"),JHe=o("LongformerTokenizerFast"),YHe=o(" (Longformer model)"),KHe=l(),Vg=a("li"),gJ=a("strong"),ZHe=o("luke"),eUe=o(" \u2014 "),Hx=a("a"),oUe=o("LukeTokenizer"),rUe=o(" (LUKE model)"),tUe=l(),bs=a("li"),hJ=a("strong"),aUe=o("lxmert"),nUe=o(" \u2014 "),Ux=a("a"),sUe=o("LxmertTokenizer"),lUe=o(" or "),Jx=a("a"),iUe=o("LxmertTokenizerFast"),dUe=o(" (LXMERT model)"),cUe=l(),zg=a("li"),pJ=a("strong"),fUe=o("m2m_100"),mUe=o(" \u2014 "),Yx=a("a"),gUe=o("M2M100Tokenizer"),hUe=o(" (M2M100 model)"),pUe=l(),Wg=a("li"),_J=a("strong"),_Ue=o("marian"),uUe=o(" \u2014 "),Kx=a("a"),bUe=o("MarianTokenizer"),vUe=o(" (Marian model)"),TUe=l(),vs=a("li"),uJ=a("strong"),FUe=o("mbart"),CUe=o(" \u2014 "),Zx=a("a"),MUe=o("MBartTokenizer"),EUe=o(" or "),ek=a("a"),yUe=o("MBartTokenizerFast"),wUe=o(" (mBART model)"),AUe=l(),Ts=a("li"),bJ=a("strong"),LUe=o("mbart50"),BUe=o(" \u2014 "),ok=a("a"),xUe=o("MBart50Tokenizer"),kUe=o(" or "),rk=a("a"),RUe=o("MBart50TokenizerFast"),SUe=o(" (mBART-50 model)"),PUe=l(),Qg=a("li"),vJ=a("strong"),$Ue=o("mluke"),IUe=o(" \u2014 "),tk=a("a"),jUe=o("MLukeTokenizer"),DUe=o(" (mLUKE model)"),NUe=l(),Fs=a("li"),TJ=a("strong"),qUe=o("mobilebert"),OUe=o(" \u2014 "),ak=a("a"),GUe=o("MobileBertTokenizer"),XUe=o(" or "),nk=a("a"),VUe=o("MobileBertTokenizerFast"),zUe=o(" (MobileBERT model)"),WUe=l(),Cs=a("li"),FJ=a("strong"),QUe=o("mpnet"),HUe=o(" \u2014 "),sk=a("a"),UUe=o("MPNetTokenizer"),JUe=o(" or "),lk=a("a"),YUe=o("MPNetTokenizerFast"),KUe=o(" (MPNet model)"),ZUe=l(),Ms=a("li"),CJ=a("strong"),eJe=o("mt5"),oJe=o(" \u2014 "),ik=a("a"),rJe=o("MT5Tokenizer"),tJe=o(" or "),dk=a("a"),aJe=o("MT5TokenizerFast"),nJe=o(" (mT5 model)"),sJe=l(),Es=a("li"),MJ=a("strong"),lJe=o("openai-gpt"),iJe=o(" \u2014 "),ck=a("a"),dJe=o("OpenAIGPTTokenizer"),cJe=o(" or "),fk=a("a"),fJe=o("OpenAIGPTTokenizerFast"),mJe=o(" (OpenAI GPT model)"),gJe=l(),ys=a("li"),EJ=a("strong"),hJe=o("pegasus"),pJe=o(" \u2014 "),mk=a("a"),_Je=o("PegasusTokenizer"),uJe=o(" or "),gk=a("a"),bJe=o("PegasusTokenizerFast"),vJe=o(" (Pegasus model)"),TJe=l(),Hg=a("li"),yJ=a("strong"),FJe=o("perceiver"),CJe=o(" \u2014 "),hk=a("a"),MJe=o("PerceiverTokenizer"),EJe=o(" (Perceiver model)"),yJe=l(),Ug=a("li"),wJ=a("strong"),wJe=o("phobert"),AJe=o(" \u2014 "),pk=a("a"),LJe=o("PhobertTokenizer"),BJe=o(" (PhoBERT model)"),xJe=l(),Jg=a("li"),AJ=a("strong"),kJe=o("plbart"),RJe=o(" \u2014 "),_k=a("a"),SJe=o("PLBartTokenizer"),PJe=o(" (PLBart model)"),$Je=l(),Yg=a("li"),LJ=a("strong"),IJe=o("prophetnet"),jJe=o(" \u2014 "),uk=a("a"),DJe=o("ProphetNetTokenizer"),NJe=o(" (ProphetNet model)"),qJe=l(),ws=a("li"),BJ=a("strong"),OJe=o("qdqbert"),GJe=o(" \u2014 "),bk=a("a"),XJe=o("BertTokenizer"),VJe=o(" or "),vk=a("a"),zJe=o("BertTokenizerFast"),WJe=o(" (QDQBert model)"),QJe=l(),Kg=a("li"),xJ=a("strong"),HJe=o("rag"),UJe=o(" \u2014 "),Tk=a("a"),JJe=o("RagTokenizer"),YJe=o(" (RAG model)"),KJe=l(),As=a("li"),kJ=a("strong"),ZJe=o("realm"),eYe=o(" \u2014 "),Fk=a("a"),oYe=o("RealmTokenizer"),rYe=o(" or "),Ck=a("a"),tYe=o("RealmTokenizerFast"),aYe=o(" (Realm model)"),nYe=l(),Ls=a("li"),RJ=a("strong"),sYe=o("reformer"),lYe=o(" \u2014 "),Mk=a("a"),iYe=o("ReformerTokenizer"),dYe=o(" or "),Ek=a("a"),cYe=o("ReformerTokenizerFast"),fYe=o(" (Reformer model)"),mYe=l(),Bs=a("li"),SJ=a("strong"),gYe=o("rembert"),hYe=o(" \u2014 "),yk=a("a"),pYe=o("RemBertTokenizer"),_Ye=o(" or "),wk=a("a"),uYe=o("RemBertTokenizerFast"),bYe=o(" (RemBERT model)"),vYe=l(),xs=a("li"),PJ=a("strong"),TYe=o("retribert"),FYe=o(" \u2014 "),Ak=a("a"),CYe=o("RetriBertTokenizer"),MYe=o(" or "),Lk=a("a"),EYe=o("RetriBertTokenizerFast"),yYe=o(" (RetriBERT model)"),wYe=l(),ks=a("li"),$J=a("strong"),AYe=o("roberta"),LYe=o(" \u2014 "),Bk=a("a"),BYe=o("RobertaTokenizer"),xYe=o(" or "),xk=a("a"),kYe=o("RobertaTokenizerFast"),RYe=o(" (RoBERTa model)"),SYe=l(),Rs=a("li"),IJ=a("strong"),PYe=o("roformer"),$Ye=o(" \u2014 "),kk=a("a"),IYe=o("RoFormerTokenizer"),jYe=o(" or "),Rk=a("a"),DYe=o("RoFormerTokenizerFast"),NYe=o(" (RoFormer model)"),qYe=l(),Zg=a("li"),jJ=a("strong"),OYe=o("speech_to_text"),GYe=o(" \u2014 "),Sk=a("a"),XYe=o("Speech2TextTokenizer"),VYe=o(" (Speech2Text model)"),zYe=l(),eh=a("li"),DJ=a("strong"),WYe=o("speech_to_text_2"),QYe=o(" \u2014 "),Pk=a("a"),HYe=o("Speech2Text2Tokenizer"),UYe=o(" (Speech2Text2 model)"),JYe=l(),Ss=a("li"),NJ=a("strong"),YYe=o("splinter"),KYe=o(" \u2014 "),$k=a("a"),ZYe=o("SplinterTokenizer"),eKe=o(" or "),Ik=a("a"),oKe=o("SplinterTokenizerFast"),rKe=o(" (Splinter model)"),tKe=l(),Ps=a("li"),qJ=a("strong"),aKe=o("squeezebert"),nKe=o(" \u2014 "),jk=a("a"),sKe=o("SqueezeBertTokenizer"),lKe=o(" or "),Dk=a("a"),iKe=o("SqueezeBertTokenizerFast"),dKe=o(" (SqueezeBERT model)"),cKe=l(),$s=a("li"),OJ=a("strong"),fKe=o("t5"),mKe=o(" \u2014 "),Nk=a("a"),gKe=o("T5Tokenizer"),hKe=o(" or "),qk=a("a"),pKe=o("T5TokenizerFast"),_Ke=o(" (T5 model)"),uKe=l(),oh=a("li"),GJ=a("strong"),bKe=o("tapas"),vKe=o(" \u2014 "),Ok=a("a"),TKe=o("TapasTokenizer"),FKe=o(" (TAPAS model)"),CKe=l(),rh=a("li"),XJ=a("strong"),MKe=o("transfo-xl"),EKe=o(" \u2014 "),Gk=a("a"),yKe=o("TransfoXLTokenizer"),wKe=o(" (Transformer-XL model)"),AKe=l(),th=a("li"),VJ=a("strong"),LKe=o("wav2vec2"),BKe=o(" \u2014 "),Xk=a("a"),xKe=o("Wav2Vec2CTCTokenizer"),kKe=o(" (Wav2Vec2 model)"),RKe=l(),ah=a("li"),zJ=a("strong"),SKe=o("wav2vec2_phoneme"),PKe=o(" \u2014 "),Vk=a("a"),$Ke=o("Wav2Vec2PhonemeCTCTokenizer"),IKe=o(" (Wav2Vec2Phoneme model)"),jKe=l(),Is=a("li"),WJ=a("strong"),DKe=o("xglm"),NKe=o(" \u2014 "),zk=a("a"),qKe=o("XGLMTokenizer"),OKe=o(" or "),Wk=a("a"),GKe=o("XGLMTokenizerFast"),XKe=o(" (XGLM model)"),VKe=l(),nh=a("li"),QJ=a("strong"),zKe=o("xlm"),WKe=o(" \u2014 "),Qk=a("a"),QKe=o("XLMTokenizer"),HKe=o(" (XLM model)"),UKe=l(),sh=a("li"),HJ=a("strong"),JKe=o("xlm-prophetnet"),YKe=o(" \u2014 "),Hk=a("a"),KKe=o("XLMProphetNetTokenizer"),ZKe=o(" (XLMProphetNet model)"),eZe=l(),js=a("li"),UJ=a("strong"),oZe=o("xlm-roberta"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("XLMRobertaTokenizer"),aZe=o(" or "),Jk=a("a"),nZe=o("XLMRobertaTokenizerFast"),sZe=o(" (XLM-RoBERTa model)"),lZe=l(),Ds=a("li"),JJ=a("strong"),iZe=o("xlnet"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("XLNetTokenizer"),fZe=o(" or "),Kk=a("a"),mZe=o("XLNetTokenizerFast"),gZe=o(" (XLNet model)"),hZe=l(),YJ=a("p"),pZe=o("Examples:"),_Ze=l(),f(pE.$$.fragment),uZe=l(),lh=a("div"),f(_E.$$.fragment),bZe=l(),KJ=a("p"),vZe=o("Register a new tokenizer in this mapping."),kxe=l(),Hi=a("h2"),ih=a("a"),ZJ=a("span"),f(uE.$$.fragment),TZe=l(),eY=a("span"),FZe=o("AutoFeatureExtractor"),Rxe=l(),Ho=a("div"),f(bE.$$.fragment),CZe=l(),vE=a("p"),MZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Zk=a("a"),EZe=o("AutoFeatureExtractor.from_pretrained()"),yZe=o(" class method."),wZe=l(),TE=a("p"),AZe=o("This class cannot be instantiated directly using "),oY=a("code"),LZe=o("__init__()"),BZe=o(" (throws an error)."),xZe=l(),Ie=a("div"),f(FE.$$.fragment),kZe=l(),rY=a("p"),RZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SZe=l(),Xa=a("p"),PZe=o("The feature extractor class to instantiate is selected based on the "),tY=a("code"),$Ze=o("model_type"),IZe=o(` property of the config object
(either passed as an argument or loaded from `),aY=a("code"),jZe=o("pretrained_model_name_or_path"),DZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nY=a("code"),NZe=o("pretrained_model_name_or_path"),qZe=o(":"),OZe=l(),te=a("ul"),dh=a("li"),sY=a("strong"),GZe=o("beit"),XZe=o(" \u2014 "),eR=a("a"),VZe=o("BeitFeatureExtractor"),zZe=o(" (BEiT model)"),WZe=l(),ch=a("li"),lY=a("strong"),QZe=o("clip"),HZe=o(" \u2014 "),oR=a("a"),UZe=o("CLIPFeatureExtractor"),JZe=o(" (CLIP model)"),YZe=l(),fh=a("li"),iY=a("strong"),KZe=o("convnext"),ZZe=o(" \u2014 "),rR=a("a"),eeo=o("ConvNextFeatureExtractor"),oeo=o(" (ConvNext model)"),reo=l(),mh=a("li"),dY=a("strong"),teo=o("deit"),aeo=o(" \u2014 "),tR=a("a"),neo=o("DeiTFeatureExtractor"),seo=o(" (DeiT model)"),leo=l(),gh=a("li"),cY=a("strong"),ieo=o("detr"),deo=o(" \u2014 "),aR=a("a"),ceo=o("DetrFeatureExtractor"),feo=o(" (DETR model)"),meo=l(),hh=a("li"),fY=a("strong"),geo=o("hubert"),heo=o(" \u2014 "),nR=a("a"),peo=o("Wav2Vec2FeatureExtractor"),_eo=o(" (Hubert model)"),ueo=l(),ph=a("li"),mY=a("strong"),beo=o("layoutlmv2"),veo=o(" \u2014 "),sR=a("a"),Teo=o("LayoutLMv2FeatureExtractor"),Feo=o(" (LayoutLMv2 model)"),Ceo=l(),_h=a("li"),gY=a("strong"),Meo=o("maskformer"),Eeo=o(" \u2014 "),lR=a("a"),yeo=o("MaskFormerFeatureExtractor"),weo=o(" (MaskFormer model)"),Aeo=l(),uh=a("li"),hY=a("strong"),Leo=o("perceiver"),Beo=o(" \u2014 "),iR=a("a"),xeo=o("PerceiverFeatureExtractor"),keo=o(" (Perceiver model)"),Reo=l(),bh=a("li"),pY=a("strong"),Seo=o("poolformer"),Peo=o(" \u2014 "),dR=a("a"),$eo=o("PoolFormerFeatureExtractor"),Ieo=o(" (PoolFormer model)"),jeo=l(),vh=a("li"),_Y=a("strong"),Deo=o("resnet"),Neo=o(" \u2014 "),cR=a("a"),qeo=o("ConvNextFeatureExtractor"),Oeo=o(" (ResNet model)"),Geo=l(),Th=a("li"),uY=a("strong"),Xeo=o("segformer"),Veo=o(" \u2014 "),fR=a("a"),zeo=o("SegformerFeatureExtractor"),Weo=o(" (SegFormer model)"),Qeo=l(),Fh=a("li"),bY=a("strong"),Heo=o("speech_to_text"),Ueo=o(" \u2014 "),mR=a("a"),Jeo=o("Speech2TextFeatureExtractor"),Yeo=o(" (Speech2Text model)"),Keo=l(),Ch=a("li"),vY=a("strong"),Zeo=o("swin"),eoo=o(" \u2014 "),gR=a("a"),ooo=o("ViTFeatureExtractor"),roo=o(" (Swin model)"),too=l(),Mh=a("li"),TY=a("strong"),aoo=o("vit"),noo=o(" \u2014 "),hR=a("a"),soo=o("ViTFeatureExtractor"),loo=o(" (ViT model)"),ioo=l(),Eh=a("li"),FY=a("strong"),doo=o("vit_mae"),coo=o(" \u2014 "),pR=a("a"),foo=o("ViTFeatureExtractor"),moo=o(" (ViTMAE model)"),goo=l(),yh=a("li"),CY=a("strong"),hoo=o("wav2vec2"),poo=o(" \u2014 "),_R=a("a"),_oo=o("Wav2Vec2FeatureExtractor"),uoo=o(" (Wav2Vec2 model)"),boo=l(),f(wh.$$.fragment),voo=l(),MY=a("p"),Too=o("Examples:"),Foo=l(),f(CE.$$.fragment),Coo=l(),Ah=a("div"),f(ME.$$.fragment),Moo=l(),EY=a("p"),Eoo=o("Register a new feature extractor for this class."),Sxe=l(),Ui=a("h2"),Lh=a("a"),yY=a("span"),f(EE.$$.fragment),yoo=l(),wY=a("span"),woo=o("AutoProcessor"),Pxe=l(),Uo=a("div"),f(yE.$$.fragment),Aoo=l(),wE=a("p"),Loo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uR=a("a"),Boo=o("AutoProcessor.from_pretrained()"),xoo=o(" class method."),koo=l(),AE=a("p"),Roo=o("This class cannot be instantiated directly using "),AY=a("code"),Soo=o("__init__()"),Poo=o(" (throws an error)."),$oo=l(),je=a("div"),f(LE.$$.fragment),Ioo=l(),LY=a("p"),joo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Doo=l(),Ji=a("p"),Noo=o("The processor class to instantiate is selected based on the "),BY=a("code"),qoo=o("model_type"),Ooo=o(` property of the config object (either
passed as an argument or loaded from `),xY=a("code"),Goo=o("pretrained_model_name_or_path"),Xoo=o(" if possible):"),Voo=l(),xe=a("ul"),Bh=a("li"),kY=a("strong"),zoo=o("clip"),Woo=o(" \u2014 "),bR=a("a"),Qoo=o("CLIPProcessor"),Hoo=o(" (CLIP model)"),Uoo=l(),xh=a("li"),RY=a("strong"),Joo=o("layoutlmv2"),Yoo=o(" \u2014 "),vR=a("a"),Koo=o("LayoutLMv2Processor"),Zoo=o(" (LayoutLMv2 model)"),ero=l(),kh=a("li"),SY=a("strong"),oro=o("layoutxlm"),rro=o(" \u2014 "),TR=a("a"),tro=o("LayoutXLMProcessor"),aro=o(" (LayoutXLM model)"),nro=l(),Rh=a("li"),PY=a("strong"),sro=o("speech_to_text"),lro=o(" \u2014 "),FR=a("a"),iro=o("Speech2TextProcessor"),dro=o(" (Speech2Text model)"),cro=l(),Sh=a("li"),$Y=a("strong"),fro=o("speech_to_text_2"),mro=o(" \u2014 "),CR=a("a"),gro=o("Speech2Text2Processor"),hro=o(" (Speech2Text2 model)"),pro=l(),Ph=a("li"),IY=a("strong"),_ro=o("trocr"),uro=o(" \u2014 "),MR=a("a"),bro=o("TrOCRProcessor"),vro=o(" (TrOCR model)"),Tro=l(),$h=a("li"),jY=a("strong"),Fro=o("vision-text-dual-encoder"),Cro=o(" \u2014 "),ER=a("a"),Mro=o("VisionTextDualEncoderProcessor"),Ero=o(" (VisionTextDualEncoder model)"),yro=l(),Ih=a("li"),DY=a("strong"),wro=o("wav2vec2"),Aro=o(" \u2014 "),yR=a("a"),Lro=o("Wav2Vec2Processor"),Bro=o(" (Wav2Vec2 model)"),xro=l(),f(jh.$$.fragment),kro=l(),NY=a("p"),Rro=o("Examples:"),Sro=l(),f(BE.$$.fragment),Pro=l(),Dh=a("div"),f(xE.$$.fragment),$ro=l(),qY=a("p"),Iro=o("Register a new processor for this class."),$xe=l(),Yi=a("h2"),Nh=a("a"),OY=a("span"),f(kE.$$.fragment),jro=l(),GY=a("span"),Dro=o("AutoModel"),Ixe=l(),Jo=a("div"),f(RE.$$.fragment),Nro=l(),Ki=a("p"),qro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XY=a("code"),Oro=o("from_pretrained()"),Gro=o("class method or the "),VY=a("code"),Xro=o("from_config()"),Vro=o(`class
method.`),zro=l(),SE=a("p"),Wro=o("This class cannot be instantiated directly using "),zY=a("code"),Qro=o("__init__()"),Hro=o(" (throws an error)."),Uro=l(),Vr=a("div"),f(PE.$$.fragment),Jro=l(),WY=a("p"),Yro=o("Instantiates one of the base model classes of the library from a configuration."),Kro=l(),Zi=a("p"),Zro=o(`Note:
Loading a model from its configuration file does `),QY=a("strong"),eto=o("not"),oto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("code"),rto=o("from_pretrained()"),tto=o("to load the model weights."),ato=l(),UY=a("p"),nto=o("Examples:"),sto=l(),f($E.$$.fragment),lto=l(),De=a("div"),f(IE.$$.fragment),ito=l(),JY=a("p"),dto=o("Instantiate one of the base model classes of the library from a pretrained model."),cto=l(),Va=a("p"),fto=o("The model class to instantiate is selected based on the "),YY=a("code"),mto=o("model_type"),gto=o(` property of the config object (either
passed as an argument or loaded from `),KY=a("code"),hto=o("pretrained_model_name_or_path"),pto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZY=a("code"),_to=o("pretrained_model_name_or_path"),uto=o(":"),bto=l(),F=a("ul"),qh=a("li"),eK=a("strong"),vto=o("albert"),Tto=o(" \u2014 "),wR=a("a"),Fto=o("AlbertModel"),Cto=o(" (ALBERT model)"),Mto=l(),Oh=a("li"),oK=a("strong"),Eto=o("bart"),yto=o(" \u2014 "),AR=a("a"),wto=o("BartModel"),Ato=o(" (BART model)"),Lto=l(),Gh=a("li"),rK=a("strong"),Bto=o("beit"),xto=o(" \u2014 "),LR=a("a"),kto=o("BeitModel"),Rto=o(" (BEiT model)"),Sto=l(),Xh=a("li"),tK=a("strong"),Pto=o("bert"),$to=o(" \u2014 "),BR=a("a"),Ito=o("BertModel"),jto=o(" (BERT model)"),Dto=l(),Vh=a("li"),aK=a("strong"),Nto=o("bert-generation"),qto=o(" \u2014 "),xR=a("a"),Oto=o("BertGenerationEncoder"),Gto=o(" (Bert Generation model)"),Xto=l(),zh=a("li"),nK=a("strong"),Vto=o("big_bird"),zto=o(" \u2014 "),kR=a("a"),Wto=o("BigBirdModel"),Qto=o(" (BigBird model)"),Hto=l(),Wh=a("li"),sK=a("strong"),Uto=o("bigbird_pegasus"),Jto=o(" \u2014 "),RR=a("a"),Yto=o("BigBirdPegasusModel"),Kto=o(" (BigBirdPegasus model)"),Zto=l(),Qh=a("li"),lK=a("strong"),eao=o("blenderbot"),oao=o(" \u2014 "),SR=a("a"),rao=o("BlenderbotModel"),tao=o(" (Blenderbot model)"),aao=l(),Hh=a("li"),iK=a("strong"),nao=o("blenderbot-small"),sao=o(" \u2014 "),PR=a("a"),lao=o("BlenderbotSmallModel"),iao=o(" (BlenderbotSmall model)"),dao=l(),Uh=a("li"),dK=a("strong"),cao=o("camembert"),fao=o(" \u2014 "),$R=a("a"),mao=o("CamembertModel"),gao=o(" (CamemBERT model)"),hao=l(),Jh=a("li"),cK=a("strong"),pao=o("canine"),_ao=o(" \u2014 "),IR=a("a"),uao=o("CanineModel"),bao=o(" (Canine model)"),vao=l(),Yh=a("li"),fK=a("strong"),Tao=o("clip"),Fao=o(" \u2014 "),jR=a("a"),Cao=o("CLIPModel"),Mao=o(" (CLIP model)"),Eao=l(),Kh=a("li"),mK=a("strong"),yao=o("convbert"),wao=o(" \u2014 "),DR=a("a"),Aao=o("ConvBertModel"),Lao=o(" (ConvBERT model)"),Bao=l(),Zh=a("li"),gK=a("strong"),xao=o("convnext"),kao=o(" \u2014 "),NR=a("a"),Rao=o("ConvNextModel"),Sao=o(" (ConvNext model)"),Pao=l(),ep=a("li"),hK=a("strong"),$ao=o("ctrl"),Iao=o(" \u2014 "),qR=a("a"),jao=o("CTRLModel"),Dao=o(" (CTRL model)"),Nao=l(),op=a("li"),pK=a("strong"),qao=o("data2vec-audio"),Oao=o(" \u2014 "),OR=a("a"),Gao=o("Data2VecAudioModel"),Xao=o(" (Data2VecAudio model)"),Vao=l(),rp=a("li"),_K=a("strong"),zao=o("data2vec-text"),Wao=o(" \u2014 "),GR=a("a"),Qao=o("Data2VecTextModel"),Hao=o(" (Data2VecText model)"),Uao=l(),tp=a("li"),uK=a("strong"),Jao=o("deberta"),Yao=o(" \u2014 "),XR=a("a"),Kao=o("DebertaModel"),Zao=o(" (DeBERTa model)"),eno=l(),ap=a("li"),bK=a("strong"),ono=o("deberta-v2"),rno=o(" \u2014 "),VR=a("a"),tno=o("DebertaV2Model"),ano=o(" (DeBERTa-v2 model)"),nno=l(),np=a("li"),vK=a("strong"),sno=o("deit"),lno=o(" \u2014 "),zR=a("a"),ino=o("DeiTModel"),dno=o(" (DeiT model)"),cno=l(),sp=a("li"),TK=a("strong"),fno=o("detr"),mno=o(" \u2014 "),WR=a("a"),gno=o("DetrModel"),hno=o(" (DETR model)"),pno=l(),lp=a("li"),FK=a("strong"),_no=o("distilbert"),uno=o(" \u2014 "),QR=a("a"),bno=o("DistilBertModel"),vno=o(" (DistilBERT model)"),Tno=l(),ip=a("li"),CK=a("strong"),Fno=o("dpr"),Cno=o(" \u2014 "),HR=a("a"),Mno=o("DPRQuestionEncoder"),Eno=o(" (DPR model)"),yno=l(),dp=a("li"),MK=a("strong"),wno=o("electra"),Ano=o(" \u2014 "),UR=a("a"),Lno=o("ElectraModel"),Bno=o(" (ELECTRA model)"),xno=l(),cp=a("li"),EK=a("strong"),kno=o("flaubert"),Rno=o(" \u2014 "),JR=a("a"),Sno=o("FlaubertModel"),Pno=o(" (FlauBERT model)"),$no=l(),fp=a("li"),yK=a("strong"),Ino=o("fnet"),jno=o(" \u2014 "),YR=a("a"),Dno=o("FNetModel"),Nno=o(" (FNet model)"),qno=l(),mp=a("li"),wK=a("strong"),Ono=o("fsmt"),Gno=o(" \u2014 "),KR=a("a"),Xno=o("FSMTModel"),Vno=o(" (FairSeq Machine-Translation model)"),zno=l(),Ns=a("li"),AK=a("strong"),Wno=o("funnel"),Qno=o(" \u2014 "),ZR=a("a"),Hno=o("FunnelModel"),Uno=o(" or "),eS=a("a"),Jno=o("FunnelBaseModel"),Yno=o(" (Funnel Transformer model)"),Kno=l(),gp=a("li"),LK=a("strong"),Zno=o("gpt2"),eso=o(" \u2014 "),oS=a("a"),oso=o("GPT2Model"),rso=o(" (OpenAI GPT-2 model)"),tso=l(),hp=a("li"),BK=a("strong"),aso=o("gpt_neo"),nso=o(" \u2014 "),rS=a("a"),sso=o("GPTNeoModel"),lso=o(" (GPT Neo model)"),iso=l(),pp=a("li"),xK=a("strong"),dso=o("gptj"),cso=o(" \u2014 "),tS=a("a"),fso=o("GPTJModel"),mso=o(" (GPT-J model)"),gso=l(),_p=a("li"),kK=a("strong"),hso=o("hubert"),pso=o(" \u2014 "),aS=a("a"),_so=o("HubertModel"),uso=o(" (Hubert model)"),bso=l(),up=a("li"),RK=a("strong"),vso=o("ibert"),Tso=o(" \u2014 "),nS=a("a"),Fso=o("IBertModel"),Cso=o(" (I-BERT model)"),Mso=l(),bp=a("li"),SK=a("strong"),Eso=o("imagegpt"),yso=o(" \u2014 "),sS=a("a"),wso=o("ImageGPTModel"),Aso=o(" (ImageGPT model)"),Lso=l(),vp=a("li"),PK=a("strong"),Bso=o("layoutlm"),xso=o(" \u2014 "),lS=a("a"),kso=o("LayoutLMModel"),Rso=o(" (LayoutLM model)"),Sso=l(),Tp=a("li"),$K=a("strong"),Pso=o("layoutlmv2"),$so=o(" \u2014 "),iS=a("a"),Iso=o("LayoutLMv2Model"),jso=o(" (LayoutLMv2 model)"),Dso=l(),Fp=a("li"),IK=a("strong"),Nso=o("led"),qso=o(" \u2014 "),dS=a("a"),Oso=o("LEDModel"),Gso=o(" (LED model)"),Xso=l(),Cp=a("li"),jK=a("strong"),Vso=o("longformer"),zso=o(" \u2014 "),cS=a("a"),Wso=o("LongformerModel"),Qso=o(" (Longformer model)"),Hso=l(),Mp=a("li"),DK=a("strong"),Uso=o("luke"),Jso=o(" \u2014 "),fS=a("a"),Yso=o("LukeModel"),Kso=o(" (LUKE model)"),Zso=l(),Ep=a("li"),NK=a("strong"),elo=o("lxmert"),olo=o(" \u2014 "),mS=a("a"),rlo=o("LxmertModel"),tlo=o(" (LXMERT model)"),alo=l(),yp=a("li"),qK=a("strong"),nlo=o("m2m_100"),slo=o(" \u2014 "),gS=a("a"),llo=o("M2M100Model"),ilo=o(" (M2M100 model)"),dlo=l(),wp=a("li"),OK=a("strong"),clo=o("marian"),flo=o(" \u2014 "),hS=a("a"),mlo=o("MarianModel"),glo=o(" (Marian model)"),hlo=l(),Ap=a("li"),GK=a("strong"),plo=o("maskformer"),_lo=o(" \u2014 "),pS=a("a"),ulo=o("MaskFormerModel"),blo=o(" (MaskFormer model)"),vlo=l(),Lp=a("li"),XK=a("strong"),Tlo=o("mbart"),Flo=o(" \u2014 "),_S=a("a"),Clo=o("MBartModel"),Mlo=o(" (mBART model)"),Elo=l(),Bp=a("li"),VK=a("strong"),ylo=o("megatron-bert"),wlo=o(" \u2014 "),uS=a("a"),Alo=o("MegatronBertModel"),Llo=o(" (MegatronBert model)"),Blo=l(),xp=a("li"),zK=a("strong"),xlo=o("mobilebert"),klo=o(" \u2014 "),bS=a("a"),Rlo=o("MobileBertModel"),Slo=o(" (MobileBERT model)"),Plo=l(),kp=a("li"),WK=a("strong"),$lo=o("mpnet"),Ilo=o(" \u2014 "),vS=a("a"),jlo=o("MPNetModel"),Dlo=o(" (MPNet model)"),Nlo=l(),Rp=a("li"),QK=a("strong"),qlo=o("mt5"),Olo=o(" \u2014 "),TS=a("a"),Glo=o("MT5Model"),Xlo=o(" (mT5 model)"),Vlo=l(),Sp=a("li"),HK=a("strong"),zlo=o("nystromformer"),Wlo=o(" \u2014 "),FS=a("a"),Qlo=o("NystromformerModel"),Hlo=o(" (Nystromformer model)"),Ulo=l(),Pp=a("li"),UK=a("strong"),Jlo=o("openai-gpt"),Ylo=o(" \u2014 "),CS=a("a"),Klo=o("OpenAIGPTModel"),Zlo=o(" (OpenAI GPT model)"),eio=l(),$p=a("li"),JK=a("strong"),oio=o("pegasus"),rio=o(" \u2014 "),MS=a("a"),tio=o("PegasusModel"),aio=o(" (Pegasus model)"),nio=l(),Ip=a("li"),YK=a("strong"),sio=o("perceiver"),lio=o(" \u2014 "),ES=a("a"),iio=o("PerceiverModel"),dio=o(" (Perceiver model)"),cio=l(),jp=a("li"),KK=a("strong"),fio=o("plbart"),mio=o(" \u2014 "),yS=a("a"),gio=o("PLBartModel"),hio=o(" (PLBart model)"),pio=l(),Dp=a("li"),ZK=a("strong"),_io=o("poolformer"),uio=o(" \u2014 "),wS=a("a"),bio=o("PoolFormerModel"),vio=o(" (PoolFormer model)"),Tio=l(),Np=a("li"),eZ=a("strong"),Fio=o("prophetnet"),Cio=o(" \u2014 "),AS=a("a"),Mio=o("ProphetNetModel"),Eio=o(" (ProphetNet model)"),yio=l(),qp=a("li"),oZ=a("strong"),wio=o("qdqbert"),Aio=o(" \u2014 "),LS=a("a"),Lio=o("QDQBertModel"),Bio=o(" (QDQBert model)"),xio=l(),Op=a("li"),rZ=a("strong"),kio=o("reformer"),Rio=o(" \u2014 "),BS=a("a"),Sio=o("ReformerModel"),Pio=o(" (Reformer model)"),$io=l(),Gp=a("li"),tZ=a("strong"),Iio=o("rembert"),jio=o(" \u2014 "),xS=a("a"),Dio=o("RemBertModel"),Nio=o(" (RemBERT model)"),qio=l(),Xp=a("li"),aZ=a("strong"),Oio=o("resnet"),Gio=o(" \u2014 "),kS=a("a"),Xio=o("ResNetModel"),Vio=o(" (ResNet model)"),zio=l(),Vp=a("li"),nZ=a("strong"),Wio=o("retribert"),Qio=o(" \u2014 "),RS=a("a"),Hio=o("RetriBertModel"),Uio=o(" (RetriBERT model)"),Jio=l(),zp=a("li"),sZ=a("strong"),Yio=o("roberta"),Kio=o(" \u2014 "),SS=a("a"),Zio=o("RobertaModel"),edo=o(" (RoBERTa model)"),odo=l(),Wp=a("li"),lZ=a("strong"),rdo=o("roformer"),tdo=o(" \u2014 "),PS=a("a"),ado=o("RoFormerModel"),ndo=o(" (RoFormer model)"),sdo=l(),Qp=a("li"),iZ=a("strong"),ldo=o("segformer"),ido=o(" \u2014 "),$S=a("a"),ddo=o("SegformerModel"),cdo=o(" (SegFormer model)"),fdo=l(),Hp=a("li"),dZ=a("strong"),mdo=o("sew"),gdo=o(" \u2014 "),IS=a("a"),hdo=o("SEWModel"),pdo=o(" (SEW model)"),_do=l(),Up=a("li"),cZ=a("strong"),udo=o("sew-d"),bdo=o(" \u2014 "),jS=a("a"),vdo=o("SEWDModel"),Tdo=o(" (SEW-D model)"),Fdo=l(),Jp=a("li"),fZ=a("strong"),Cdo=o("speech_to_text"),Mdo=o(" \u2014 "),DS=a("a"),Edo=o("Speech2TextModel"),ydo=o(" (Speech2Text model)"),wdo=l(),Yp=a("li"),mZ=a("strong"),Ado=o("splinter"),Ldo=o(" \u2014 "),NS=a("a"),Bdo=o("SplinterModel"),xdo=o(" (Splinter model)"),kdo=l(),Kp=a("li"),gZ=a("strong"),Rdo=o("squeezebert"),Sdo=o(" \u2014 "),qS=a("a"),Pdo=o("SqueezeBertModel"),$do=o(" (SqueezeBERT model)"),Ido=l(),Zp=a("li"),hZ=a("strong"),jdo=o("swin"),Ddo=o(" \u2014 "),OS=a("a"),Ndo=o("SwinModel"),qdo=o(" (Swin model)"),Odo=l(),e_=a("li"),pZ=a("strong"),Gdo=o("t5"),Xdo=o(" \u2014 "),GS=a("a"),Vdo=o("T5Model"),zdo=o(" (T5 model)"),Wdo=l(),o_=a("li"),_Z=a("strong"),Qdo=o("tapas"),Hdo=o(" \u2014 "),XS=a("a"),Udo=o("TapasModel"),Jdo=o(" (TAPAS model)"),Ydo=l(),r_=a("li"),uZ=a("strong"),Kdo=o("transfo-xl"),Zdo=o(" \u2014 "),VS=a("a"),eco=o("TransfoXLModel"),oco=o(" (Transformer-XL model)"),rco=l(),t_=a("li"),bZ=a("strong"),tco=o("unispeech"),aco=o(" \u2014 "),zS=a("a"),nco=o("UniSpeechModel"),sco=o(" (UniSpeech model)"),lco=l(),a_=a("li"),vZ=a("strong"),ico=o("unispeech-sat"),dco=o(" \u2014 "),WS=a("a"),cco=o("UniSpeechSatModel"),fco=o(" (UniSpeechSat model)"),mco=l(),n_=a("li"),TZ=a("strong"),gco=o("vilt"),hco=o(" \u2014 "),QS=a("a"),pco=o("ViltModel"),_co=o(" (ViLT model)"),uco=l(),s_=a("li"),FZ=a("strong"),bco=o("vision-text-dual-encoder"),vco=o(" \u2014 "),HS=a("a"),Tco=o("VisionTextDualEncoderModel"),Fco=o(" (VisionTextDualEncoder model)"),Cco=l(),l_=a("li"),CZ=a("strong"),Mco=o("visual_bert"),Eco=o(" \u2014 "),US=a("a"),yco=o("VisualBertModel"),wco=o(" (VisualBert model)"),Aco=l(),i_=a("li"),MZ=a("strong"),Lco=o("vit"),Bco=o(" \u2014 "),JS=a("a"),xco=o("ViTModel"),kco=o(" (ViT model)"),Rco=l(),d_=a("li"),EZ=a("strong"),Sco=o("vit_mae"),Pco=o(" \u2014 "),YS=a("a"),$co=o("ViTMAEModel"),Ico=o(" (ViTMAE model)"),jco=l(),c_=a("li"),yZ=a("strong"),Dco=o("wav2vec2"),Nco=o(" \u2014 "),KS=a("a"),qco=o("Wav2Vec2Model"),Oco=o(" (Wav2Vec2 model)"),Gco=l(),f_=a("li"),wZ=a("strong"),Xco=o("wavlm"),Vco=o(" \u2014 "),ZS=a("a"),zco=o("WavLMModel"),Wco=o(" (WavLM model)"),Qco=l(),m_=a("li"),AZ=a("strong"),Hco=o("xglm"),Uco=o(" \u2014 "),eP=a("a"),Jco=o("XGLMModel"),Yco=o(" (XGLM model)"),Kco=l(),g_=a("li"),LZ=a("strong"),Zco=o("xlm"),efo=o(" \u2014 "),oP=a("a"),ofo=o("XLMModel"),rfo=o(" (XLM model)"),tfo=l(),h_=a("li"),BZ=a("strong"),afo=o("xlm-prophetnet"),nfo=o(" \u2014 "),rP=a("a"),sfo=o("XLMProphetNetModel"),lfo=o(" (XLMProphetNet model)"),ifo=l(),p_=a("li"),xZ=a("strong"),dfo=o("xlm-roberta"),cfo=o(" \u2014 "),tP=a("a"),ffo=o("XLMRobertaModel"),mfo=o(" (XLM-RoBERTa model)"),gfo=l(),__=a("li"),kZ=a("strong"),hfo=o("xlm-roberta-xl"),pfo=o(" \u2014 "),aP=a("a"),_fo=o("XLMRobertaXLModel"),ufo=o(" (XLM-RoBERTa-XL model)"),bfo=l(),u_=a("li"),RZ=a("strong"),vfo=o("xlnet"),Tfo=o(" \u2014 "),nP=a("a"),Ffo=o("XLNetModel"),Cfo=o(" (XLNet model)"),Mfo=l(),b_=a("li"),SZ=a("strong"),Efo=o("yoso"),yfo=o(" \u2014 "),sP=a("a"),wfo=o("YosoModel"),Afo=o(" (YOSO model)"),Lfo=l(),v_=a("p"),Bfo=o("The model is set in evaluation mode by default using "),PZ=a("code"),xfo=o("model.eval()"),kfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Z=a("code"),Rfo=o("model.train()"),Sfo=l(),IZ=a("p"),Pfo=o("Examples:"),$fo=l(),f(jE.$$.fragment),jxe=l(),ed=a("h2"),T_=a("a"),jZ=a("span"),f(DE.$$.fragment),Ifo=l(),DZ=a("span"),jfo=o("AutoModelForPreTraining"),Dxe=l(),Yo=a("div"),f(NE.$$.fragment),Dfo=l(),od=a("p"),Nfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=a("code"),qfo=o("from_pretrained()"),Ofo=o("class method or the "),qZ=a("code"),Gfo=o("from_config()"),Xfo=o(`class
method.`),Vfo=l(),qE=a("p"),zfo=o("This class cannot be instantiated directly using "),OZ=a("code"),Wfo=o("__init__()"),Qfo=o(" (throws an error)."),Hfo=l(),zr=a("div"),f(OE.$$.fragment),Ufo=l(),GZ=a("p"),Jfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yfo=l(),rd=a("p"),Kfo=o(`Note:
Loading a model from its configuration file does `),XZ=a("strong"),Zfo=o("not"),emo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("code"),omo=o("from_pretrained()"),rmo=o("to load the model weights."),tmo=l(),zZ=a("p"),amo=o("Examples:"),nmo=l(),f(GE.$$.fragment),smo=l(),Ne=a("div"),f(XE.$$.fragment),lmo=l(),WZ=a("p"),imo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dmo=l(),za=a("p"),cmo=o("The model class to instantiate is selected based on the "),QZ=a("code"),fmo=o("model_type"),mmo=o(` property of the config object (either
passed as an argument or loaded from `),HZ=a("code"),gmo=o("pretrained_model_name_or_path"),hmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UZ=a("code"),pmo=o("pretrained_model_name_or_path"),_mo=o(":"),umo=l(),k=a("ul"),F_=a("li"),JZ=a("strong"),bmo=o("albert"),vmo=o(" \u2014 "),lP=a("a"),Tmo=o("AlbertForPreTraining"),Fmo=o(" (ALBERT model)"),Cmo=l(),C_=a("li"),YZ=a("strong"),Mmo=o("bart"),Emo=o(" \u2014 "),iP=a("a"),ymo=o("BartForConditionalGeneration"),wmo=o(" (BART model)"),Amo=l(),M_=a("li"),KZ=a("strong"),Lmo=o("bert"),Bmo=o(" \u2014 "),dP=a("a"),xmo=o("BertForPreTraining"),kmo=o(" (BERT model)"),Rmo=l(),E_=a("li"),ZZ=a("strong"),Smo=o("big_bird"),Pmo=o(" \u2014 "),cP=a("a"),$mo=o("BigBirdForPreTraining"),Imo=o(" (BigBird model)"),jmo=l(),y_=a("li"),eee=a("strong"),Dmo=o("camembert"),Nmo=o(" \u2014 "),fP=a("a"),qmo=o("CamembertForMaskedLM"),Omo=o(" (CamemBERT model)"),Gmo=l(),w_=a("li"),oee=a("strong"),Xmo=o("ctrl"),Vmo=o(" \u2014 "),mP=a("a"),zmo=o("CTRLLMHeadModel"),Wmo=o(" (CTRL model)"),Qmo=l(),A_=a("li"),ree=a("strong"),Hmo=o("data2vec-text"),Umo=o(" \u2014 "),gP=a("a"),Jmo=o("Data2VecTextForMaskedLM"),Ymo=o(" (Data2VecText model)"),Kmo=l(),L_=a("li"),tee=a("strong"),Zmo=o("deberta"),ego=o(" \u2014 "),hP=a("a"),ogo=o("DebertaForMaskedLM"),rgo=o(" (DeBERTa model)"),tgo=l(),B_=a("li"),aee=a("strong"),ago=o("deberta-v2"),ngo=o(" \u2014 "),pP=a("a"),sgo=o("DebertaV2ForMaskedLM"),lgo=o(" (DeBERTa-v2 model)"),igo=l(),x_=a("li"),nee=a("strong"),dgo=o("distilbert"),cgo=o(" \u2014 "),_P=a("a"),fgo=o("DistilBertForMaskedLM"),mgo=o(" (DistilBERT model)"),ggo=l(),k_=a("li"),see=a("strong"),hgo=o("electra"),pgo=o(" \u2014 "),uP=a("a"),_go=o("ElectraForPreTraining"),ugo=o(" (ELECTRA model)"),bgo=l(),R_=a("li"),lee=a("strong"),vgo=o("flaubert"),Tgo=o(" \u2014 "),bP=a("a"),Fgo=o("FlaubertWithLMHeadModel"),Cgo=o(" (FlauBERT model)"),Mgo=l(),S_=a("li"),iee=a("strong"),Ego=o("fnet"),ygo=o(" \u2014 "),vP=a("a"),wgo=o("FNetForPreTraining"),Ago=o(" (FNet model)"),Lgo=l(),P_=a("li"),dee=a("strong"),Bgo=o("fsmt"),xgo=o(" \u2014 "),TP=a("a"),kgo=o("FSMTForConditionalGeneration"),Rgo=o(" (FairSeq Machine-Translation model)"),Sgo=l(),$_=a("li"),cee=a("strong"),Pgo=o("funnel"),$go=o(" \u2014 "),FP=a("a"),Igo=o("FunnelForPreTraining"),jgo=o(" (Funnel Transformer model)"),Dgo=l(),I_=a("li"),fee=a("strong"),Ngo=o("gpt2"),qgo=o(" \u2014 "),CP=a("a"),Ogo=o("GPT2LMHeadModel"),Ggo=o(" (OpenAI GPT-2 model)"),Xgo=l(),j_=a("li"),mee=a("strong"),Vgo=o("ibert"),zgo=o(" \u2014 "),MP=a("a"),Wgo=o("IBertForMaskedLM"),Qgo=o(" (I-BERT model)"),Hgo=l(),D_=a("li"),gee=a("strong"),Ugo=o("layoutlm"),Jgo=o(" \u2014 "),EP=a("a"),Ygo=o("LayoutLMForMaskedLM"),Kgo=o(" (LayoutLM model)"),Zgo=l(),N_=a("li"),hee=a("strong"),eho=o("longformer"),oho=o(" \u2014 "),yP=a("a"),rho=o("LongformerForMaskedLM"),tho=o(" (Longformer model)"),aho=l(),q_=a("li"),pee=a("strong"),nho=o("lxmert"),sho=o(" \u2014 "),wP=a("a"),lho=o("LxmertForPreTraining"),iho=o(" (LXMERT model)"),dho=l(),O_=a("li"),_ee=a("strong"),cho=o("megatron-bert"),fho=o(" \u2014 "),AP=a("a"),mho=o("MegatronBertForPreTraining"),gho=o(" (MegatronBert model)"),hho=l(),G_=a("li"),uee=a("strong"),pho=o("mobilebert"),_ho=o(" \u2014 "),LP=a("a"),uho=o("MobileBertForPreTraining"),bho=o(" (MobileBERT model)"),vho=l(),X_=a("li"),bee=a("strong"),Tho=o("mpnet"),Fho=o(" \u2014 "),BP=a("a"),Cho=o("MPNetForMaskedLM"),Mho=o(" (MPNet model)"),Eho=l(),V_=a("li"),vee=a("strong"),yho=o("openai-gpt"),who=o(" \u2014 "),xP=a("a"),Aho=o("OpenAIGPTLMHeadModel"),Lho=o(" (OpenAI GPT model)"),Bho=l(),z_=a("li"),Tee=a("strong"),xho=o("retribert"),kho=o(" \u2014 "),kP=a("a"),Rho=o("RetriBertModel"),Sho=o(" (RetriBERT model)"),Pho=l(),W_=a("li"),Fee=a("strong"),$ho=o("roberta"),Iho=o(" \u2014 "),RP=a("a"),jho=o("RobertaForMaskedLM"),Dho=o(" (RoBERTa model)"),Nho=l(),Q_=a("li"),Cee=a("strong"),qho=o("squeezebert"),Oho=o(" \u2014 "),SP=a("a"),Gho=o("SqueezeBertForMaskedLM"),Xho=o(" (SqueezeBERT model)"),Vho=l(),H_=a("li"),Mee=a("strong"),zho=o("t5"),Who=o(" \u2014 "),PP=a("a"),Qho=o("T5ForConditionalGeneration"),Hho=o(" (T5 model)"),Uho=l(),U_=a("li"),Eee=a("strong"),Jho=o("tapas"),Yho=o(" \u2014 "),$P=a("a"),Kho=o("TapasForMaskedLM"),Zho=o(" (TAPAS model)"),epo=l(),J_=a("li"),yee=a("strong"),opo=o("transfo-xl"),rpo=o(" \u2014 "),IP=a("a"),tpo=o("TransfoXLLMHeadModel"),apo=o(" (Transformer-XL model)"),npo=l(),Y_=a("li"),wee=a("strong"),spo=o("unispeech"),lpo=o(" \u2014 "),jP=a("a"),ipo=o("UniSpeechForPreTraining"),dpo=o(" (UniSpeech model)"),cpo=l(),K_=a("li"),Aee=a("strong"),fpo=o("unispeech-sat"),mpo=o(" \u2014 "),DP=a("a"),gpo=o("UniSpeechSatForPreTraining"),hpo=o(" (UniSpeechSat model)"),ppo=l(),Z_=a("li"),Lee=a("strong"),_po=o("visual_bert"),upo=o(" \u2014 "),NP=a("a"),bpo=o("VisualBertForPreTraining"),vpo=o(" (VisualBert model)"),Tpo=l(),eu=a("li"),Bee=a("strong"),Fpo=o("vit_mae"),Cpo=o(" \u2014 "),qP=a("a"),Mpo=o("ViTMAEForPreTraining"),Epo=o(" (ViTMAE model)"),ypo=l(),ou=a("li"),xee=a("strong"),wpo=o("wav2vec2"),Apo=o(" \u2014 "),OP=a("a"),Lpo=o("Wav2Vec2ForPreTraining"),Bpo=o(" (Wav2Vec2 model)"),xpo=l(),ru=a("li"),kee=a("strong"),kpo=o("xlm"),Rpo=o(" \u2014 "),GP=a("a"),Spo=o("XLMWithLMHeadModel"),Ppo=o(" (XLM model)"),$po=l(),tu=a("li"),Ree=a("strong"),Ipo=o("xlm-roberta"),jpo=o(" \u2014 "),XP=a("a"),Dpo=o("XLMRobertaForMaskedLM"),Npo=o(" (XLM-RoBERTa model)"),qpo=l(),au=a("li"),See=a("strong"),Opo=o("xlm-roberta-xl"),Gpo=o(" \u2014 "),VP=a("a"),Xpo=o("XLMRobertaXLForMaskedLM"),Vpo=o(" (XLM-RoBERTa-XL model)"),zpo=l(),nu=a("li"),Pee=a("strong"),Wpo=o("xlnet"),Qpo=o(" \u2014 "),zP=a("a"),Hpo=o("XLNetLMHeadModel"),Upo=o(" (XLNet model)"),Jpo=l(),su=a("p"),Ypo=o("The model is set in evaluation mode by default using "),$ee=a("code"),Kpo=o("model.eval()"),Zpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iee=a("code"),e_o=o("model.train()"),o_o=l(),jee=a("p"),r_o=o("Examples:"),t_o=l(),f(VE.$$.fragment),Nxe=l(),td=a("h2"),lu=a("a"),Dee=a("span"),f(zE.$$.fragment),a_o=l(),Nee=a("span"),n_o=o("AutoModelForCausalLM"),qxe=l(),Ko=a("div"),f(WE.$$.fragment),s_o=l(),ad=a("p"),l_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qee=a("code"),i_o=o("from_pretrained()"),d_o=o("class method or the "),Oee=a("code"),c_o=o("from_config()"),f_o=o(`class
method.`),m_o=l(),QE=a("p"),g_o=o("This class cannot be instantiated directly using "),Gee=a("code"),h_o=o("__init__()"),p_o=o(" (throws an error)."),__o=l(),Wr=a("div"),f(HE.$$.fragment),u_o=l(),Xee=a("p"),b_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v_o=l(),nd=a("p"),T_o=o(`Note:
Loading a model from its configuration file does `),Vee=a("strong"),F_o=o("not"),C_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("code"),M_o=o("from_pretrained()"),E_o=o("to load the model weights."),y_o=l(),Wee=a("p"),w_o=o("Examples:"),A_o=l(),f(UE.$$.fragment),L_o=l(),qe=a("div"),f(JE.$$.fragment),B_o=l(),Qee=a("p"),x_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k_o=l(),Wa=a("p"),R_o=o("The model class to instantiate is selected based on the "),Hee=a("code"),S_o=o("model_type"),P_o=o(` property of the config object (either
passed as an argument or loaded from `),Uee=a("code"),$_o=o("pretrained_model_name_or_path"),I_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jee=a("code"),j_o=o("pretrained_model_name_or_path"),D_o=o(":"),N_o=l(),$=a("ul"),iu=a("li"),Yee=a("strong"),q_o=o("bart"),O_o=o(" \u2014 "),WP=a("a"),G_o=o("BartForCausalLM"),X_o=o(" (BART model)"),V_o=l(),du=a("li"),Kee=a("strong"),z_o=o("bert"),W_o=o(" \u2014 "),QP=a("a"),Q_o=o("BertLMHeadModel"),H_o=o(" (BERT model)"),U_o=l(),cu=a("li"),Zee=a("strong"),J_o=o("bert-generation"),Y_o=o(" \u2014 "),HP=a("a"),K_o=o("BertGenerationDecoder"),Z_o=o(" (Bert Generation model)"),euo=l(),fu=a("li"),eoe=a("strong"),ouo=o("big_bird"),ruo=o(" \u2014 "),UP=a("a"),tuo=o("BigBirdForCausalLM"),auo=o(" (BigBird model)"),nuo=l(),mu=a("li"),ooe=a("strong"),suo=o("bigbird_pegasus"),luo=o(" \u2014 "),JP=a("a"),iuo=o("BigBirdPegasusForCausalLM"),duo=o(" (BigBirdPegasus model)"),cuo=l(),gu=a("li"),roe=a("strong"),fuo=o("blenderbot"),muo=o(" \u2014 "),YP=a("a"),guo=o("BlenderbotForCausalLM"),huo=o(" (Blenderbot model)"),puo=l(),hu=a("li"),toe=a("strong"),_uo=o("blenderbot-small"),uuo=o(" \u2014 "),KP=a("a"),buo=o("BlenderbotSmallForCausalLM"),vuo=o(" (BlenderbotSmall model)"),Tuo=l(),pu=a("li"),aoe=a("strong"),Fuo=o("camembert"),Cuo=o(" \u2014 "),ZP=a("a"),Muo=o("CamembertForCausalLM"),Euo=o(" (CamemBERT model)"),yuo=l(),_u=a("li"),noe=a("strong"),wuo=o("ctrl"),Auo=o(" \u2014 "),e$=a("a"),Luo=o("CTRLLMHeadModel"),Buo=o(" (CTRL model)"),xuo=l(),uu=a("li"),soe=a("strong"),kuo=o("data2vec-text"),Ruo=o(" \u2014 "),o$=a("a"),Suo=o("Data2VecTextForCausalLM"),Puo=o(" (Data2VecText model)"),$uo=l(),bu=a("li"),loe=a("strong"),Iuo=o("electra"),juo=o(" \u2014 "),r$=a("a"),Duo=o("ElectraForCausalLM"),Nuo=o(" (ELECTRA model)"),quo=l(),vu=a("li"),ioe=a("strong"),Ouo=o("gpt2"),Guo=o(" \u2014 "),t$=a("a"),Xuo=o("GPT2LMHeadModel"),Vuo=o(" (OpenAI GPT-2 model)"),zuo=l(),Tu=a("li"),doe=a("strong"),Wuo=o("gpt_neo"),Quo=o(" \u2014 "),a$=a("a"),Huo=o("GPTNeoForCausalLM"),Uuo=o(" (GPT Neo model)"),Juo=l(),Fu=a("li"),coe=a("strong"),Yuo=o("gptj"),Kuo=o(" \u2014 "),n$=a("a"),Zuo=o("GPTJForCausalLM"),e0o=o(" (GPT-J model)"),o0o=l(),Cu=a("li"),foe=a("strong"),r0o=o("marian"),t0o=o(" \u2014 "),s$=a("a"),a0o=o("MarianForCausalLM"),n0o=o(" (Marian model)"),s0o=l(),Mu=a("li"),moe=a("strong"),l0o=o("mbart"),i0o=o(" \u2014 "),l$=a("a"),d0o=o("MBartForCausalLM"),c0o=o(" (mBART model)"),f0o=l(),Eu=a("li"),goe=a("strong"),m0o=o("megatron-bert"),g0o=o(" \u2014 "),i$=a("a"),h0o=o("MegatronBertForCausalLM"),p0o=o(" (MegatronBert model)"),_0o=l(),yu=a("li"),hoe=a("strong"),u0o=o("openai-gpt"),b0o=o(" \u2014 "),d$=a("a"),v0o=o("OpenAIGPTLMHeadModel"),T0o=o(" (OpenAI GPT model)"),F0o=l(),wu=a("li"),poe=a("strong"),C0o=o("pegasus"),M0o=o(" \u2014 "),c$=a("a"),E0o=o("PegasusForCausalLM"),y0o=o(" (Pegasus model)"),w0o=l(),Au=a("li"),_oe=a("strong"),A0o=o("plbart"),L0o=o(" \u2014 "),f$=a("a"),B0o=o("PLBartForCausalLM"),x0o=o(" (PLBart model)"),k0o=l(),Lu=a("li"),uoe=a("strong"),R0o=o("prophetnet"),S0o=o(" \u2014 "),m$=a("a"),P0o=o("ProphetNetForCausalLM"),$0o=o(" (ProphetNet model)"),I0o=l(),Bu=a("li"),boe=a("strong"),j0o=o("qdqbert"),D0o=o(" \u2014 "),g$=a("a"),N0o=o("QDQBertLMHeadModel"),q0o=o(" (QDQBert model)"),O0o=l(),xu=a("li"),voe=a("strong"),G0o=o("reformer"),X0o=o(" \u2014 "),h$=a("a"),V0o=o("ReformerModelWithLMHead"),z0o=o(" (Reformer model)"),W0o=l(),ku=a("li"),Toe=a("strong"),Q0o=o("rembert"),H0o=o(" \u2014 "),p$=a("a"),U0o=o("RemBertForCausalLM"),J0o=o(" (RemBERT model)"),Y0o=l(),Ru=a("li"),Foe=a("strong"),K0o=o("roberta"),Z0o=o(" \u2014 "),_$=a("a"),e1o=o("RobertaForCausalLM"),o1o=o(" (RoBERTa model)"),r1o=l(),Su=a("li"),Coe=a("strong"),t1o=o("roformer"),a1o=o(" \u2014 "),u$=a("a"),n1o=o("RoFormerForCausalLM"),s1o=o(" (RoFormer model)"),l1o=l(),Pu=a("li"),Moe=a("strong"),i1o=o("speech_to_text_2"),d1o=o(" \u2014 "),b$=a("a"),c1o=o("Speech2Text2ForCausalLM"),f1o=o(" (Speech2Text2 model)"),m1o=l(),$u=a("li"),Eoe=a("strong"),g1o=o("transfo-xl"),h1o=o(" \u2014 "),v$=a("a"),p1o=o("TransfoXLLMHeadModel"),_1o=o(" (Transformer-XL model)"),u1o=l(),Iu=a("li"),yoe=a("strong"),b1o=o("trocr"),v1o=o(" \u2014 "),T$=a("a"),T1o=o("TrOCRForCausalLM"),F1o=o(" (TrOCR model)"),C1o=l(),ju=a("li"),woe=a("strong"),M1o=o("xglm"),E1o=o(" \u2014 "),F$=a("a"),y1o=o("XGLMForCausalLM"),w1o=o(" (XGLM model)"),A1o=l(),Du=a("li"),Aoe=a("strong"),L1o=o("xlm"),B1o=o(" \u2014 "),C$=a("a"),x1o=o("XLMWithLMHeadModel"),k1o=o(" (XLM model)"),R1o=l(),Nu=a("li"),Loe=a("strong"),S1o=o("xlm-prophetnet"),P1o=o(" \u2014 "),M$=a("a"),$1o=o("XLMProphetNetForCausalLM"),I1o=o(" (XLMProphetNet model)"),j1o=l(),qu=a("li"),Boe=a("strong"),D1o=o("xlm-roberta"),N1o=o(" \u2014 "),E$=a("a"),q1o=o("XLMRobertaForCausalLM"),O1o=o(" (XLM-RoBERTa model)"),G1o=l(),Ou=a("li"),xoe=a("strong"),X1o=o("xlm-roberta-xl"),V1o=o(" \u2014 "),y$=a("a"),z1o=o("XLMRobertaXLForCausalLM"),W1o=o(" (XLM-RoBERTa-XL model)"),Q1o=l(),Gu=a("li"),koe=a("strong"),H1o=o("xlnet"),U1o=o(" \u2014 "),w$=a("a"),J1o=o("XLNetLMHeadModel"),Y1o=o(" (XLNet model)"),K1o=l(),Xu=a("p"),Z1o=o("The model is set in evaluation mode by default using "),Roe=a("code"),ebo=o("model.eval()"),obo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Soe=a("code"),rbo=o("model.train()"),tbo=l(),Poe=a("p"),abo=o("Examples:"),nbo=l(),f(YE.$$.fragment),Oxe=l(),sd=a("h2"),Vu=a("a"),$oe=a("span"),f(KE.$$.fragment),sbo=l(),Ioe=a("span"),lbo=o("AutoModelForMaskedLM"),Gxe=l(),Zo=a("div"),f(ZE.$$.fragment),ibo=l(),ld=a("p"),dbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),joe=a("code"),cbo=o("from_pretrained()"),fbo=o("class method or the "),Doe=a("code"),mbo=o("from_config()"),gbo=o(`class
method.`),hbo=l(),e3=a("p"),pbo=o("This class cannot be instantiated directly using "),Noe=a("code"),_bo=o("__init__()"),ubo=o(" (throws an error)."),bbo=l(),Qr=a("div"),f(o3.$$.fragment),vbo=l(),qoe=a("p"),Tbo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fbo=l(),id=a("p"),Cbo=o(`Note:
Loading a model from its configuration file does `),Ooe=a("strong"),Mbo=o("not"),Ebo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("code"),ybo=o("from_pretrained()"),wbo=o("to load the model weights."),Abo=l(),Xoe=a("p"),Lbo=o("Examples:"),Bbo=l(),f(r3.$$.fragment),xbo=l(),Oe=a("div"),f(t3.$$.fragment),kbo=l(),Voe=a("p"),Rbo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Sbo=l(),Qa=a("p"),Pbo=o("The model class to instantiate is selected based on the "),zoe=a("code"),$bo=o("model_type"),Ibo=o(` property of the config object (either
passed as an argument or loaded from `),Woe=a("code"),jbo=o("pretrained_model_name_or_path"),Dbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=a("code"),Nbo=o("pretrained_model_name_or_path"),qbo=o(":"),Obo=l(),I=a("ul"),zu=a("li"),Hoe=a("strong"),Gbo=o("albert"),Xbo=o(" \u2014 "),A$=a("a"),Vbo=o("AlbertForMaskedLM"),zbo=o(" (ALBERT model)"),Wbo=l(),Wu=a("li"),Uoe=a("strong"),Qbo=o("bart"),Hbo=o(" \u2014 "),L$=a("a"),Ubo=o("BartForConditionalGeneration"),Jbo=o(" (BART model)"),Ybo=l(),Qu=a("li"),Joe=a("strong"),Kbo=o("bert"),Zbo=o(" \u2014 "),B$=a("a"),e2o=o("BertForMaskedLM"),o2o=o(" (BERT model)"),r2o=l(),Hu=a("li"),Yoe=a("strong"),t2o=o("big_bird"),a2o=o(" \u2014 "),x$=a("a"),n2o=o("BigBirdForMaskedLM"),s2o=o(" (BigBird model)"),l2o=l(),Uu=a("li"),Koe=a("strong"),i2o=o("camembert"),d2o=o(" \u2014 "),k$=a("a"),c2o=o("CamembertForMaskedLM"),f2o=o(" (CamemBERT model)"),m2o=l(),Ju=a("li"),Zoe=a("strong"),g2o=o("convbert"),h2o=o(" \u2014 "),R$=a("a"),p2o=o("ConvBertForMaskedLM"),_2o=o(" (ConvBERT model)"),u2o=l(),Yu=a("li"),ere=a("strong"),b2o=o("data2vec-text"),v2o=o(" \u2014 "),S$=a("a"),T2o=o("Data2VecTextForMaskedLM"),F2o=o(" (Data2VecText model)"),C2o=l(),Ku=a("li"),ore=a("strong"),M2o=o("deberta"),E2o=o(" \u2014 "),P$=a("a"),y2o=o("DebertaForMaskedLM"),w2o=o(" (DeBERTa model)"),A2o=l(),Zu=a("li"),rre=a("strong"),L2o=o("deberta-v2"),B2o=o(" \u2014 "),$$=a("a"),x2o=o("DebertaV2ForMaskedLM"),k2o=o(" (DeBERTa-v2 model)"),R2o=l(),e0=a("li"),tre=a("strong"),S2o=o("distilbert"),P2o=o(" \u2014 "),I$=a("a"),$2o=o("DistilBertForMaskedLM"),I2o=o(" (DistilBERT model)"),j2o=l(),o0=a("li"),are=a("strong"),D2o=o("electra"),N2o=o(" \u2014 "),j$=a("a"),q2o=o("ElectraForMaskedLM"),O2o=o(" (ELECTRA model)"),G2o=l(),r0=a("li"),nre=a("strong"),X2o=o("flaubert"),V2o=o(" \u2014 "),D$=a("a"),z2o=o("FlaubertWithLMHeadModel"),W2o=o(" (FlauBERT model)"),Q2o=l(),t0=a("li"),sre=a("strong"),H2o=o("fnet"),U2o=o(" \u2014 "),N$=a("a"),J2o=o("FNetForMaskedLM"),Y2o=o(" (FNet model)"),K2o=l(),a0=a("li"),lre=a("strong"),Z2o=o("funnel"),evo=o(" \u2014 "),q$=a("a"),ovo=o("FunnelForMaskedLM"),rvo=o(" (Funnel Transformer model)"),tvo=l(),n0=a("li"),ire=a("strong"),avo=o("ibert"),nvo=o(" \u2014 "),O$=a("a"),svo=o("IBertForMaskedLM"),lvo=o(" (I-BERT model)"),ivo=l(),s0=a("li"),dre=a("strong"),dvo=o("layoutlm"),cvo=o(" \u2014 "),G$=a("a"),fvo=o("LayoutLMForMaskedLM"),mvo=o(" (LayoutLM model)"),gvo=l(),l0=a("li"),cre=a("strong"),hvo=o("longformer"),pvo=o(" \u2014 "),X$=a("a"),_vo=o("LongformerForMaskedLM"),uvo=o(" (Longformer model)"),bvo=l(),i0=a("li"),fre=a("strong"),vvo=o("mbart"),Tvo=o(" \u2014 "),V$=a("a"),Fvo=o("MBartForConditionalGeneration"),Cvo=o(" (mBART model)"),Mvo=l(),d0=a("li"),mre=a("strong"),Evo=o("megatron-bert"),yvo=o(" \u2014 "),z$=a("a"),wvo=o("MegatronBertForMaskedLM"),Avo=o(" (MegatronBert model)"),Lvo=l(),c0=a("li"),gre=a("strong"),Bvo=o("mobilebert"),xvo=o(" \u2014 "),W$=a("a"),kvo=o("MobileBertForMaskedLM"),Rvo=o(" (MobileBERT model)"),Svo=l(),f0=a("li"),hre=a("strong"),Pvo=o("mpnet"),$vo=o(" \u2014 "),Q$=a("a"),Ivo=o("MPNetForMaskedLM"),jvo=o(" (MPNet model)"),Dvo=l(),m0=a("li"),pre=a("strong"),Nvo=o("nystromformer"),qvo=o(" \u2014 "),H$=a("a"),Ovo=o("NystromformerForMaskedLM"),Gvo=o(" (Nystromformer model)"),Xvo=l(),g0=a("li"),_re=a("strong"),Vvo=o("perceiver"),zvo=o(" \u2014 "),U$=a("a"),Wvo=o("PerceiverForMaskedLM"),Qvo=o(" (Perceiver model)"),Hvo=l(),h0=a("li"),ure=a("strong"),Uvo=o("qdqbert"),Jvo=o(" \u2014 "),J$=a("a"),Yvo=o("QDQBertForMaskedLM"),Kvo=o(" (QDQBert model)"),Zvo=l(),p0=a("li"),bre=a("strong"),e6o=o("reformer"),o6o=o(" \u2014 "),Y$=a("a"),r6o=o("ReformerForMaskedLM"),t6o=o(" (Reformer model)"),a6o=l(),_0=a("li"),vre=a("strong"),n6o=o("rembert"),s6o=o(" \u2014 "),K$=a("a"),l6o=o("RemBertForMaskedLM"),i6o=o(" (RemBERT model)"),d6o=l(),u0=a("li"),Tre=a("strong"),c6o=o("roberta"),f6o=o(" \u2014 "),Z$=a("a"),m6o=o("RobertaForMaskedLM"),g6o=o(" (RoBERTa model)"),h6o=l(),b0=a("li"),Fre=a("strong"),p6o=o("roformer"),_6o=o(" \u2014 "),eI=a("a"),u6o=o("RoFormerForMaskedLM"),b6o=o(" (RoFormer model)"),v6o=l(),v0=a("li"),Cre=a("strong"),T6o=o("squeezebert"),F6o=o(" \u2014 "),oI=a("a"),C6o=o("SqueezeBertForMaskedLM"),M6o=o(" (SqueezeBERT model)"),E6o=l(),T0=a("li"),Mre=a("strong"),y6o=o("tapas"),w6o=o(" \u2014 "),rI=a("a"),A6o=o("TapasForMaskedLM"),L6o=o(" (TAPAS model)"),B6o=l(),F0=a("li"),Ere=a("strong"),x6o=o("wav2vec2"),k6o=o(" \u2014 "),yre=a("code"),R6o=o("Wav2Vec2ForMaskedLM"),S6o=o("(Wav2Vec2 model)"),P6o=l(),C0=a("li"),wre=a("strong"),$6o=o("xlm"),I6o=o(" \u2014 "),tI=a("a"),j6o=o("XLMWithLMHeadModel"),D6o=o(" (XLM model)"),N6o=l(),M0=a("li"),Are=a("strong"),q6o=o("xlm-roberta"),O6o=o(" \u2014 "),aI=a("a"),G6o=o("XLMRobertaForMaskedLM"),X6o=o(" (XLM-RoBERTa model)"),V6o=l(),E0=a("li"),Lre=a("strong"),z6o=o("xlm-roberta-xl"),W6o=o(" \u2014 "),nI=a("a"),Q6o=o("XLMRobertaXLForMaskedLM"),H6o=o(" (XLM-RoBERTa-XL model)"),U6o=l(),y0=a("li"),Bre=a("strong"),J6o=o("yoso"),Y6o=o(" \u2014 "),sI=a("a"),K6o=o("YosoForMaskedLM"),Z6o=o(" (YOSO model)"),eTo=l(),w0=a("p"),oTo=o("The model is set in evaluation mode by default using "),xre=a("code"),rTo=o("model.eval()"),tTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kre=a("code"),aTo=o("model.train()"),nTo=l(),Rre=a("p"),sTo=o("Examples:"),lTo=l(),f(a3.$$.fragment),Xxe=l(),dd=a("h2"),A0=a("a"),Sre=a("span"),f(n3.$$.fragment),iTo=l(),Pre=a("span"),dTo=o("AutoModelForSeq2SeqLM"),Vxe=l(),er=a("div"),f(s3.$$.fragment),cTo=l(),cd=a("p"),fTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$re=a("code"),mTo=o("from_pretrained()"),gTo=o("class method or the "),Ire=a("code"),hTo=o("from_config()"),pTo=o(`class
method.`),_To=l(),l3=a("p"),uTo=o("This class cannot be instantiated directly using "),jre=a("code"),bTo=o("__init__()"),vTo=o(" (throws an error)."),TTo=l(),Hr=a("div"),f(i3.$$.fragment),FTo=l(),Dre=a("p"),CTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MTo=l(),fd=a("p"),ETo=o(`Note:
Loading a model from its configuration file does `),Nre=a("strong"),yTo=o("not"),wTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("code"),ATo=o("from_pretrained()"),LTo=o("to load the model weights."),BTo=l(),Ore=a("p"),xTo=o("Examples:"),kTo=l(),f(d3.$$.fragment),RTo=l(),Ge=a("div"),f(c3.$$.fragment),STo=l(),Gre=a("p"),PTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$To=l(),Ha=a("p"),ITo=o("The model class to instantiate is selected based on the "),Xre=a("code"),jTo=o("model_type"),DTo=o(` property of the config object (either
passed as an argument or loaded from `),Vre=a("code"),NTo=o("pretrained_model_name_or_path"),qTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zre=a("code"),OTo=o("pretrained_model_name_or_path"),GTo=o(":"),XTo=l(),ne=a("ul"),L0=a("li"),Wre=a("strong"),VTo=o("bart"),zTo=o(" \u2014 "),lI=a("a"),WTo=o("BartForConditionalGeneration"),QTo=o(" (BART model)"),HTo=l(),B0=a("li"),Qre=a("strong"),UTo=o("bigbird_pegasus"),JTo=o(" \u2014 "),iI=a("a"),YTo=o("BigBirdPegasusForConditionalGeneration"),KTo=o(" (BigBirdPegasus model)"),ZTo=l(),x0=a("li"),Hre=a("strong"),e7o=o("blenderbot"),o7o=o(" \u2014 "),dI=a("a"),r7o=o("BlenderbotForConditionalGeneration"),t7o=o(" (Blenderbot model)"),a7o=l(),k0=a("li"),Ure=a("strong"),n7o=o("blenderbot-small"),s7o=o(" \u2014 "),cI=a("a"),l7o=o("BlenderbotSmallForConditionalGeneration"),i7o=o(" (BlenderbotSmall model)"),d7o=l(),R0=a("li"),Jre=a("strong"),c7o=o("encoder-decoder"),f7o=o(" \u2014 "),fI=a("a"),m7o=o("EncoderDecoderModel"),g7o=o(" (Encoder decoder model)"),h7o=l(),S0=a("li"),Yre=a("strong"),p7o=o("fsmt"),_7o=o(" \u2014 "),mI=a("a"),u7o=o("FSMTForConditionalGeneration"),b7o=o(" (FairSeq Machine-Translation model)"),v7o=l(),P0=a("li"),Kre=a("strong"),T7o=o("led"),F7o=o(" \u2014 "),gI=a("a"),C7o=o("LEDForConditionalGeneration"),M7o=o(" (LED model)"),E7o=l(),$0=a("li"),Zre=a("strong"),y7o=o("m2m_100"),w7o=o(" \u2014 "),hI=a("a"),A7o=o("M2M100ForConditionalGeneration"),L7o=o(" (M2M100 model)"),B7o=l(),I0=a("li"),ete=a("strong"),x7o=o("marian"),k7o=o(" \u2014 "),pI=a("a"),R7o=o("MarianMTModel"),S7o=o(" (Marian model)"),P7o=l(),j0=a("li"),ote=a("strong"),$7o=o("mbart"),I7o=o(" \u2014 "),_I=a("a"),j7o=o("MBartForConditionalGeneration"),D7o=o(" (mBART model)"),N7o=l(),D0=a("li"),rte=a("strong"),q7o=o("mt5"),O7o=o(" \u2014 "),uI=a("a"),G7o=o("MT5ForConditionalGeneration"),X7o=o(" (mT5 model)"),V7o=l(),N0=a("li"),tte=a("strong"),z7o=o("pegasus"),W7o=o(" \u2014 "),bI=a("a"),Q7o=o("PegasusForConditionalGeneration"),H7o=o(" (Pegasus model)"),U7o=l(),q0=a("li"),ate=a("strong"),J7o=o("plbart"),Y7o=o(" \u2014 "),vI=a("a"),K7o=o("PLBartForConditionalGeneration"),Z7o=o(" (PLBart model)"),eFo=l(),O0=a("li"),nte=a("strong"),oFo=o("prophetnet"),rFo=o(" \u2014 "),TI=a("a"),tFo=o("ProphetNetForConditionalGeneration"),aFo=o(" (ProphetNet model)"),nFo=l(),G0=a("li"),ste=a("strong"),sFo=o("t5"),lFo=o(" \u2014 "),FI=a("a"),iFo=o("T5ForConditionalGeneration"),dFo=o(" (T5 model)"),cFo=l(),X0=a("li"),lte=a("strong"),fFo=o("xlm-prophetnet"),mFo=o(" \u2014 "),CI=a("a"),gFo=o("XLMProphetNetForConditionalGeneration"),hFo=o(" (XLMProphetNet model)"),pFo=l(),V0=a("p"),_Fo=o("The model is set in evaluation mode by default using "),ite=a("code"),uFo=o("model.eval()"),bFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),vFo=o("model.train()"),TFo=l(),cte=a("p"),FFo=o("Examples:"),CFo=l(),f(f3.$$.fragment),zxe=l(),md=a("h2"),z0=a("a"),fte=a("span"),f(m3.$$.fragment),MFo=l(),mte=a("span"),EFo=o("AutoModelForSequenceClassification"),Wxe=l(),or=a("div"),f(g3.$$.fragment),yFo=l(),gd=a("p"),wFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gte=a("code"),AFo=o("from_pretrained()"),LFo=o("class method or the "),hte=a("code"),BFo=o("from_config()"),xFo=o(`class
method.`),kFo=l(),h3=a("p"),RFo=o("This class cannot be instantiated directly using "),pte=a("code"),SFo=o("__init__()"),PFo=o(" (throws an error)."),$Fo=l(),Ur=a("div"),f(p3.$$.fragment),IFo=l(),_te=a("p"),jFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DFo=l(),hd=a("p"),NFo=o(`Note:
Loading a model from its configuration file does `),ute=a("strong"),qFo=o("not"),OFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),GFo=o("from_pretrained()"),XFo=o("to load the model weights."),VFo=l(),vte=a("p"),zFo=o("Examples:"),WFo=l(),f(_3.$$.fragment),QFo=l(),Xe=a("div"),f(u3.$$.fragment),HFo=l(),Tte=a("p"),UFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JFo=l(),Ua=a("p"),YFo=o("The model class to instantiate is selected based on the "),Fte=a("code"),KFo=o("model_type"),ZFo=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),eCo=o("pretrained_model_name_or_path"),oCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),rCo=o("pretrained_model_name_or_path"),tCo=o(":"),aCo=l(),A=a("ul"),W0=a("li"),Ete=a("strong"),nCo=o("albert"),sCo=o(" \u2014 "),MI=a("a"),lCo=o("AlbertForSequenceClassification"),iCo=o(" (ALBERT model)"),dCo=l(),Q0=a("li"),yte=a("strong"),cCo=o("bart"),fCo=o(" \u2014 "),EI=a("a"),mCo=o("BartForSequenceClassification"),gCo=o(" (BART model)"),hCo=l(),H0=a("li"),wte=a("strong"),pCo=o("bert"),_Co=o(" \u2014 "),yI=a("a"),uCo=o("BertForSequenceClassification"),bCo=o(" (BERT model)"),vCo=l(),U0=a("li"),Ate=a("strong"),TCo=o("big_bird"),FCo=o(" \u2014 "),wI=a("a"),CCo=o("BigBirdForSequenceClassification"),MCo=o(" (BigBird model)"),ECo=l(),J0=a("li"),Lte=a("strong"),yCo=o("bigbird_pegasus"),wCo=o(" \u2014 "),AI=a("a"),ACo=o("BigBirdPegasusForSequenceClassification"),LCo=o(" (BigBirdPegasus model)"),BCo=l(),Y0=a("li"),Bte=a("strong"),xCo=o("camembert"),kCo=o(" \u2014 "),LI=a("a"),RCo=o("CamembertForSequenceClassification"),SCo=o(" (CamemBERT model)"),PCo=l(),K0=a("li"),xte=a("strong"),$Co=o("canine"),ICo=o(" \u2014 "),BI=a("a"),jCo=o("CanineForSequenceClassification"),DCo=o(" (Canine model)"),NCo=l(),Z0=a("li"),kte=a("strong"),qCo=o("convbert"),OCo=o(" \u2014 "),xI=a("a"),GCo=o("ConvBertForSequenceClassification"),XCo=o(" (ConvBERT model)"),VCo=l(),e1=a("li"),Rte=a("strong"),zCo=o("ctrl"),WCo=o(" \u2014 "),kI=a("a"),QCo=o("CTRLForSequenceClassification"),HCo=o(" (CTRL model)"),UCo=l(),o1=a("li"),Ste=a("strong"),JCo=o("data2vec-text"),YCo=o(" \u2014 "),RI=a("a"),KCo=o("Data2VecTextForSequenceClassification"),ZCo=o(" (Data2VecText model)"),eMo=l(),r1=a("li"),Pte=a("strong"),oMo=o("deberta"),rMo=o(" \u2014 "),SI=a("a"),tMo=o("DebertaForSequenceClassification"),aMo=o(" (DeBERTa model)"),nMo=l(),t1=a("li"),$te=a("strong"),sMo=o("deberta-v2"),lMo=o(" \u2014 "),PI=a("a"),iMo=o("DebertaV2ForSequenceClassification"),dMo=o(" (DeBERTa-v2 model)"),cMo=l(),a1=a("li"),Ite=a("strong"),fMo=o("distilbert"),mMo=o(" \u2014 "),$I=a("a"),gMo=o("DistilBertForSequenceClassification"),hMo=o(" (DistilBERT model)"),pMo=l(),n1=a("li"),jte=a("strong"),_Mo=o("electra"),uMo=o(" \u2014 "),II=a("a"),bMo=o("ElectraForSequenceClassification"),vMo=o(" (ELECTRA model)"),TMo=l(),s1=a("li"),Dte=a("strong"),FMo=o("flaubert"),CMo=o(" \u2014 "),jI=a("a"),MMo=o("FlaubertForSequenceClassification"),EMo=o(" (FlauBERT model)"),yMo=l(),l1=a("li"),Nte=a("strong"),wMo=o("fnet"),AMo=o(" \u2014 "),DI=a("a"),LMo=o("FNetForSequenceClassification"),BMo=o(" (FNet model)"),xMo=l(),i1=a("li"),qte=a("strong"),kMo=o("funnel"),RMo=o(" \u2014 "),NI=a("a"),SMo=o("FunnelForSequenceClassification"),PMo=o(" (Funnel Transformer model)"),$Mo=l(),d1=a("li"),Ote=a("strong"),IMo=o("gpt2"),jMo=o(" \u2014 "),qI=a("a"),DMo=o("GPT2ForSequenceClassification"),NMo=o(" (OpenAI GPT-2 model)"),qMo=l(),c1=a("li"),Gte=a("strong"),OMo=o("gpt_neo"),GMo=o(" \u2014 "),OI=a("a"),XMo=o("GPTNeoForSequenceClassification"),VMo=o(" (GPT Neo model)"),zMo=l(),f1=a("li"),Xte=a("strong"),WMo=o("gptj"),QMo=o(" \u2014 "),GI=a("a"),HMo=o("GPTJForSequenceClassification"),UMo=o(" (GPT-J model)"),JMo=l(),m1=a("li"),Vte=a("strong"),YMo=o("ibert"),KMo=o(" \u2014 "),XI=a("a"),ZMo=o("IBertForSequenceClassification"),e4o=o(" (I-BERT model)"),o4o=l(),g1=a("li"),zte=a("strong"),r4o=o("layoutlm"),t4o=o(" \u2014 "),VI=a("a"),a4o=o("LayoutLMForSequenceClassification"),n4o=o(" (LayoutLM model)"),s4o=l(),h1=a("li"),Wte=a("strong"),l4o=o("layoutlmv2"),i4o=o(" \u2014 "),zI=a("a"),d4o=o("LayoutLMv2ForSequenceClassification"),c4o=o(" (LayoutLMv2 model)"),f4o=l(),p1=a("li"),Qte=a("strong"),m4o=o("led"),g4o=o(" \u2014 "),WI=a("a"),h4o=o("LEDForSequenceClassification"),p4o=o(" (LED model)"),_4o=l(),_1=a("li"),Hte=a("strong"),u4o=o("longformer"),b4o=o(" \u2014 "),QI=a("a"),v4o=o("LongformerForSequenceClassification"),T4o=o(" (Longformer model)"),F4o=l(),u1=a("li"),Ute=a("strong"),C4o=o("mbart"),M4o=o(" \u2014 "),HI=a("a"),E4o=o("MBartForSequenceClassification"),y4o=o(" (mBART model)"),w4o=l(),b1=a("li"),Jte=a("strong"),A4o=o("megatron-bert"),L4o=o(" \u2014 "),UI=a("a"),B4o=o("MegatronBertForSequenceClassification"),x4o=o(" (MegatronBert model)"),k4o=l(),v1=a("li"),Yte=a("strong"),R4o=o("mobilebert"),S4o=o(" \u2014 "),JI=a("a"),P4o=o("MobileBertForSequenceClassification"),$4o=o(" (MobileBERT model)"),I4o=l(),T1=a("li"),Kte=a("strong"),j4o=o("mpnet"),D4o=o(" \u2014 "),YI=a("a"),N4o=o("MPNetForSequenceClassification"),q4o=o(" (MPNet model)"),O4o=l(),F1=a("li"),Zte=a("strong"),G4o=o("nystromformer"),X4o=o(" \u2014 "),KI=a("a"),V4o=o("NystromformerForSequenceClassification"),z4o=o(" (Nystromformer model)"),W4o=l(),C1=a("li"),eae=a("strong"),Q4o=o("openai-gpt"),H4o=o(" \u2014 "),ZI=a("a"),U4o=o("OpenAIGPTForSequenceClassification"),J4o=o(" (OpenAI GPT model)"),Y4o=l(),M1=a("li"),oae=a("strong"),K4o=o("perceiver"),Z4o=o(" \u2014 "),ej=a("a"),eEo=o("PerceiverForSequenceClassification"),oEo=o(" (Perceiver model)"),rEo=l(),E1=a("li"),rae=a("strong"),tEo=o("plbart"),aEo=o(" \u2014 "),oj=a("a"),nEo=o("PLBartForSequenceClassification"),sEo=o(" (PLBart model)"),lEo=l(),y1=a("li"),tae=a("strong"),iEo=o("qdqbert"),dEo=o(" \u2014 "),rj=a("a"),cEo=o("QDQBertForSequenceClassification"),fEo=o(" (QDQBert model)"),mEo=l(),w1=a("li"),aae=a("strong"),gEo=o("reformer"),hEo=o(" \u2014 "),tj=a("a"),pEo=o("ReformerForSequenceClassification"),_Eo=o(" (Reformer model)"),uEo=l(),A1=a("li"),nae=a("strong"),bEo=o("rembert"),vEo=o(" \u2014 "),aj=a("a"),TEo=o("RemBertForSequenceClassification"),FEo=o(" (RemBERT model)"),CEo=l(),L1=a("li"),sae=a("strong"),MEo=o("roberta"),EEo=o(" \u2014 "),nj=a("a"),yEo=o("RobertaForSequenceClassification"),wEo=o(" (RoBERTa model)"),AEo=l(),B1=a("li"),lae=a("strong"),LEo=o("roformer"),BEo=o(" \u2014 "),sj=a("a"),xEo=o("RoFormerForSequenceClassification"),kEo=o(" (RoFormer model)"),REo=l(),x1=a("li"),iae=a("strong"),SEo=o("squeezebert"),PEo=o(" \u2014 "),lj=a("a"),$Eo=o("SqueezeBertForSequenceClassification"),IEo=o(" (SqueezeBERT model)"),jEo=l(),k1=a("li"),dae=a("strong"),DEo=o("tapas"),NEo=o(" \u2014 "),ij=a("a"),qEo=o("TapasForSequenceClassification"),OEo=o(" (TAPAS model)"),GEo=l(),R1=a("li"),cae=a("strong"),XEo=o("transfo-xl"),VEo=o(" \u2014 "),dj=a("a"),zEo=o("TransfoXLForSequenceClassification"),WEo=o(" (Transformer-XL model)"),QEo=l(),S1=a("li"),fae=a("strong"),HEo=o("xlm"),UEo=o(" \u2014 "),cj=a("a"),JEo=o("XLMForSequenceClassification"),YEo=o(" (XLM model)"),KEo=l(),P1=a("li"),mae=a("strong"),ZEo=o("xlm-roberta"),e3o=o(" \u2014 "),fj=a("a"),o3o=o("XLMRobertaForSequenceClassification"),r3o=o(" (XLM-RoBERTa model)"),t3o=l(),$1=a("li"),gae=a("strong"),a3o=o("xlm-roberta-xl"),n3o=o(" \u2014 "),mj=a("a"),s3o=o("XLMRobertaXLForSequenceClassification"),l3o=o(" (XLM-RoBERTa-XL model)"),i3o=l(),I1=a("li"),hae=a("strong"),d3o=o("xlnet"),c3o=o(" \u2014 "),gj=a("a"),f3o=o("XLNetForSequenceClassification"),m3o=o(" (XLNet model)"),g3o=l(),j1=a("li"),pae=a("strong"),h3o=o("yoso"),p3o=o(" \u2014 "),hj=a("a"),_3o=o("YosoForSequenceClassification"),u3o=o(" (YOSO model)"),b3o=l(),D1=a("p"),v3o=o("The model is set in evaluation mode by default using "),_ae=a("code"),T3o=o("model.eval()"),F3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uae=a("code"),C3o=o("model.train()"),M3o=l(),bae=a("p"),E3o=o("Examples:"),y3o=l(),f(b3.$$.fragment),Qxe=l(),pd=a("h2"),N1=a("a"),vae=a("span"),f(v3.$$.fragment),w3o=l(),Tae=a("span"),A3o=o("AutoModelForMultipleChoice"),Hxe=l(),rr=a("div"),f(T3.$$.fragment),L3o=l(),_d=a("p"),B3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fae=a("code"),x3o=o("from_pretrained()"),k3o=o("class method or the "),Cae=a("code"),R3o=o("from_config()"),S3o=o(`class
method.`),P3o=l(),F3=a("p"),$3o=o("This class cannot be instantiated directly using "),Mae=a("code"),I3o=o("__init__()"),j3o=o(" (throws an error)."),D3o=l(),Jr=a("div"),f(C3.$$.fragment),N3o=l(),Eae=a("p"),q3o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O3o=l(),ud=a("p"),G3o=o(`Note:
Loading a model from its configuration file does `),yae=a("strong"),X3o=o("not"),V3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=a("code"),z3o=o("from_pretrained()"),W3o=o("to load the model weights."),Q3o=l(),Aae=a("p"),H3o=o("Examples:"),U3o=l(),f(M3.$$.fragment),J3o=l(),Ve=a("div"),f(E3.$$.fragment),Y3o=l(),Lae=a("p"),K3o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z3o=l(),Ja=a("p"),e5o=o("The model class to instantiate is selected based on the "),Bae=a("code"),o5o=o("model_type"),r5o=o(` property of the config object (either
passed as an argument or loaded from `),xae=a("code"),t5o=o("pretrained_model_name_or_path"),a5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kae=a("code"),n5o=o("pretrained_model_name_or_path"),s5o=o(":"),l5o=l(),O=a("ul"),q1=a("li"),Rae=a("strong"),i5o=o("albert"),d5o=o(" \u2014 "),pj=a("a"),c5o=o("AlbertForMultipleChoice"),f5o=o(" (ALBERT model)"),m5o=l(),O1=a("li"),Sae=a("strong"),g5o=o("bert"),h5o=o(" \u2014 "),_j=a("a"),p5o=o("BertForMultipleChoice"),_5o=o(" (BERT model)"),u5o=l(),G1=a("li"),Pae=a("strong"),b5o=o("big_bird"),v5o=o(" \u2014 "),uj=a("a"),T5o=o("BigBirdForMultipleChoice"),F5o=o(" (BigBird model)"),C5o=l(),X1=a("li"),$ae=a("strong"),M5o=o("camembert"),E5o=o(" \u2014 "),bj=a("a"),y5o=o("CamembertForMultipleChoice"),w5o=o(" (CamemBERT model)"),A5o=l(),V1=a("li"),Iae=a("strong"),L5o=o("canine"),B5o=o(" \u2014 "),vj=a("a"),x5o=o("CanineForMultipleChoice"),k5o=o(" (Canine model)"),R5o=l(),z1=a("li"),jae=a("strong"),S5o=o("convbert"),P5o=o(" \u2014 "),Tj=a("a"),$5o=o("ConvBertForMultipleChoice"),I5o=o(" (ConvBERT model)"),j5o=l(),W1=a("li"),Dae=a("strong"),D5o=o("data2vec-text"),N5o=o(" \u2014 "),Fj=a("a"),q5o=o("Data2VecTextForMultipleChoice"),O5o=o(" (Data2VecText model)"),G5o=l(),Q1=a("li"),Nae=a("strong"),X5o=o("distilbert"),V5o=o(" \u2014 "),Cj=a("a"),z5o=o("DistilBertForMultipleChoice"),W5o=o(" (DistilBERT model)"),Q5o=l(),H1=a("li"),qae=a("strong"),H5o=o("electra"),U5o=o(" \u2014 "),Mj=a("a"),J5o=o("ElectraForMultipleChoice"),Y5o=o(" (ELECTRA model)"),K5o=l(),U1=a("li"),Oae=a("strong"),Z5o=o("flaubert"),eyo=o(" \u2014 "),Ej=a("a"),oyo=o("FlaubertForMultipleChoice"),ryo=o(" (FlauBERT model)"),tyo=l(),J1=a("li"),Gae=a("strong"),ayo=o("fnet"),nyo=o(" \u2014 "),yj=a("a"),syo=o("FNetForMultipleChoice"),lyo=o(" (FNet model)"),iyo=l(),Y1=a("li"),Xae=a("strong"),dyo=o("funnel"),cyo=o(" \u2014 "),wj=a("a"),fyo=o("FunnelForMultipleChoice"),myo=o(" (Funnel Transformer model)"),gyo=l(),K1=a("li"),Vae=a("strong"),hyo=o("ibert"),pyo=o(" \u2014 "),Aj=a("a"),_yo=o("IBertForMultipleChoice"),uyo=o(" (I-BERT model)"),byo=l(),Z1=a("li"),zae=a("strong"),vyo=o("longformer"),Tyo=o(" \u2014 "),Lj=a("a"),Fyo=o("LongformerForMultipleChoice"),Cyo=o(" (Longformer model)"),Myo=l(),eb=a("li"),Wae=a("strong"),Eyo=o("megatron-bert"),yyo=o(" \u2014 "),Bj=a("a"),wyo=o("MegatronBertForMultipleChoice"),Ayo=o(" (MegatronBert model)"),Lyo=l(),ob=a("li"),Qae=a("strong"),Byo=o("mobilebert"),xyo=o(" \u2014 "),xj=a("a"),kyo=o("MobileBertForMultipleChoice"),Ryo=o(" (MobileBERT model)"),Syo=l(),rb=a("li"),Hae=a("strong"),Pyo=o("mpnet"),$yo=o(" \u2014 "),kj=a("a"),Iyo=o("MPNetForMultipleChoice"),jyo=o(" (MPNet model)"),Dyo=l(),tb=a("li"),Uae=a("strong"),Nyo=o("nystromformer"),qyo=o(" \u2014 "),Rj=a("a"),Oyo=o("NystromformerForMultipleChoice"),Gyo=o(" (Nystromformer model)"),Xyo=l(),ab=a("li"),Jae=a("strong"),Vyo=o("qdqbert"),zyo=o(" \u2014 "),Sj=a("a"),Wyo=o("QDQBertForMultipleChoice"),Qyo=o(" (QDQBert model)"),Hyo=l(),nb=a("li"),Yae=a("strong"),Uyo=o("rembert"),Jyo=o(" \u2014 "),Pj=a("a"),Yyo=o("RemBertForMultipleChoice"),Kyo=o(" (RemBERT model)"),Zyo=l(),sb=a("li"),Kae=a("strong"),ewo=o("roberta"),owo=o(" \u2014 "),$j=a("a"),rwo=o("RobertaForMultipleChoice"),two=o(" (RoBERTa model)"),awo=l(),lb=a("li"),Zae=a("strong"),nwo=o("roformer"),swo=o(" \u2014 "),Ij=a("a"),lwo=o("RoFormerForMultipleChoice"),iwo=o(" (RoFormer model)"),dwo=l(),ib=a("li"),ene=a("strong"),cwo=o("squeezebert"),fwo=o(" \u2014 "),jj=a("a"),mwo=o("SqueezeBertForMultipleChoice"),gwo=o(" (SqueezeBERT model)"),hwo=l(),db=a("li"),one=a("strong"),pwo=o("xlm"),_wo=o(" \u2014 "),Dj=a("a"),uwo=o("XLMForMultipleChoice"),bwo=o(" (XLM model)"),vwo=l(),cb=a("li"),rne=a("strong"),Two=o("xlm-roberta"),Fwo=o(" \u2014 "),Nj=a("a"),Cwo=o("XLMRobertaForMultipleChoice"),Mwo=o(" (XLM-RoBERTa model)"),Ewo=l(),fb=a("li"),tne=a("strong"),ywo=o("xlm-roberta-xl"),wwo=o(" \u2014 "),qj=a("a"),Awo=o("XLMRobertaXLForMultipleChoice"),Lwo=o(" (XLM-RoBERTa-XL model)"),Bwo=l(),mb=a("li"),ane=a("strong"),xwo=o("xlnet"),kwo=o(" \u2014 "),Oj=a("a"),Rwo=o("XLNetForMultipleChoice"),Swo=o(" (XLNet model)"),Pwo=l(),gb=a("li"),nne=a("strong"),$wo=o("yoso"),Iwo=o(" \u2014 "),Gj=a("a"),jwo=o("YosoForMultipleChoice"),Dwo=o(" (YOSO model)"),Nwo=l(),hb=a("p"),qwo=o("The model is set in evaluation mode by default using "),sne=a("code"),Owo=o("model.eval()"),Gwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lne=a("code"),Xwo=o("model.train()"),Vwo=l(),ine=a("p"),zwo=o("Examples:"),Wwo=l(),f(y3.$$.fragment),Uxe=l(),bd=a("h2"),pb=a("a"),dne=a("span"),f(w3.$$.fragment),Qwo=l(),cne=a("span"),Hwo=o("AutoModelForNextSentencePrediction"),Jxe=l(),tr=a("div"),f(A3.$$.fragment),Uwo=l(),vd=a("p"),Jwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fne=a("code"),Ywo=o("from_pretrained()"),Kwo=o("class method or the "),mne=a("code"),Zwo=o("from_config()"),eAo=o(`class
method.`),oAo=l(),L3=a("p"),rAo=o("This class cannot be instantiated directly using "),gne=a("code"),tAo=o("__init__()"),aAo=o(" (throws an error)."),nAo=l(),Yr=a("div"),f(B3.$$.fragment),sAo=l(),hne=a("p"),lAo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iAo=l(),Td=a("p"),dAo=o(`Note:
Loading a model from its configuration file does `),pne=a("strong"),cAo=o("not"),fAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=a("code"),mAo=o("from_pretrained()"),gAo=o("to load the model weights."),hAo=l(),une=a("p"),pAo=o("Examples:"),_Ao=l(),f(x3.$$.fragment),uAo=l(),ze=a("div"),f(k3.$$.fragment),bAo=l(),bne=a("p"),vAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TAo=l(),Ya=a("p"),FAo=o("The model class to instantiate is selected based on the "),vne=a("code"),CAo=o("model_type"),MAo=o(` property of the config object (either
passed as an argument or loaded from `),Tne=a("code"),EAo=o("pretrained_model_name_or_path"),yAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=a("code"),wAo=o("pretrained_model_name_or_path"),AAo=o(":"),LAo=l(),da=a("ul"),_b=a("li"),Cne=a("strong"),BAo=o("bert"),xAo=o(" \u2014 "),Xj=a("a"),kAo=o("BertForNextSentencePrediction"),RAo=o(" (BERT model)"),SAo=l(),ub=a("li"),Mne=a("strong"),PAo=o("fnet"),$Ao=o(" \u2014 "),Vj=a("a"),IAo=o("FNetForNextSentencePrediction"),jAo=o(" (FNet model)"),DAo=l(),bb=a("li"),Ene=a("strong"),NAo=o("megatron-bert"),qAo=o(" \u2014 "),zj=a("a"),OAo=o("MegatronBertForNextSentencePrediction"),GAo=o(" (MegatronBert model)"),XAo=l(),vb=a("li"),yne=a("strong"),VAo=o("mobilebert"),zAo=o(" \u2014 "),Wj=a("a"),WAo=o("MobileBertForNextSentencePrediction"),QAo=o(" (MobileBERT model)"),HAo=l(),Tb=a("li"),wne=a("strong"),UAo=o("qdqbert"),JAo=o(" \u2014 "),Qj=a("a"),YAo=o("QDQBertForNextSentencePrediction"),KAo=o(" (QDQBert model)"),ZAo=l(),Fb=a("p"),eLo=o("The model is set in evaluation mode by default using "),Ane=a("code"),oLo=o("model.eval()"),rLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=a("code"),tLo=o("model.train()"),aLo=l(),Bne=a("p"),nLo=o("Examples:"),sLo=l(),f(R3.$$.fragment),Yxe=l(),Fd=a("h2"),Cb=a("a"),xne=a("span"),f(S3.$$.fragment),lLo=l(),kne=a("span"),iLo=o("AutoModelForTokenClassification"),Kxe=l(),ar=a("div"),f(P3.$$.fragment),dLo=l(),Cd=a("p"),cLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rne=a("code"),fLo=o("from_pretrained()"),mLo=o("class method or the "),Sne=a("code"),gLo=o("from_config()"),hLo=o(`class
method.`),pLo=l(),$3=a("p"),_Lo=o("This class cannot be instantiated directly using "),Pne=a("code"),uLo=o("__init__()"),bLo=o(" (throws an error)."),vLo=l(),Kr=a("div"),f(I3.$$.fragment),TLo=l(),$ne=a("p"),FLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CLo=l(),Md=a("p"),MLo=o(`Note:
Loading a model from its configuration file does `),Ine=a("strong"),ELo=o("not"),yLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=a("code"),wLo=o("from_pretrained()"),ALo=o("to load the model weights."),LLo=l(),Dne=a("p"),BLo=o("Examples:"),xLo=l(),f(j3.$$.fragment),kLo=l(),We=a("div"),f(D3.$$.fragment),RLo=l(),Nne=a("p"),SLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PLo=l(),Ka=a("p"),$Lo=o("The model class to instantiate is selected based on the "),qne=a("code"),ILo=o("model_type"),jLo=o(` property of the config object (either
passed as an argument or loaded from `),One=a("code"),DLo=o("pretrained_model_name_or_path"),NLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),qLo=o("pretrained_model_name_or_path"),OLo=o(":"),GLo=l(),N=a("ul"),Mb=a("li"),Xne=a("strong"),XLo=o("albert"),VLo=o(" \u2014 "),Hj=a("a"),zLo=o("AlbertForTokenClassification"),WLo=o(" (ALBERT model)"),QLo=l(),Eb=a("li"),Vne=a("strong"),HLo=o("bert"),ULo=o(" \u2014 "),Uj=a("a"),JLo=o("BertForTokenClassification"),YLo=o(" (BERT model)"),KLo=l(),yb=a("li"),zne=a("strong"),ZLo=o("big_bird"),e8o=o(" \u2014 "),Jj=a("a"),o8o=o("BigBirdForTokenClassification"),r8o=o(" (BigBird model)"),t8o=l(),wb=a("li"),Wne=a("strong"),a8o=o("camembert"),n8o=o(" \u2014 "),Yj=a("a"),s8o=o("CamembertForTokenClassification"),l8o=o(" (CamemBERT model)"),i8o=l(),Ab=a("li"),Qne=a("strong"),d8o=o("canine"),c8o=o(" \u2014 "),Kj=a("a"),f8o=o("CanineForTokenClassification"),m8o=o(" (Canine model)"),g8o=l(),Lb=a("li"),Hne=a("strong"),h8o=o("convbert"),p8o=o(" \u2014 "),Zj=a("a"),_8o=o("ConvBertForTokenClassification"),u8o=o(" (ConvBERT model)"),b8o=l(),Bb=a("li"),Une=a("strong"),v8o=o("data2vec-text"),T8o=o(" \u2014 "),eD=a("a"),F8o=o("Data2VecTextForTokenClassification"),C8o=o(" (Data2VecText model)"),M8o=l(),xb=a("li"),Jne=a("strong"),E8o=o("deberta"),y8o=o(" \u2014 "),oD=a("a"),w8o=o("DebertaForTokenClassification"),A8o=o(" (DeBERTa model)"),L8o=l(),kb=a("li"),Yne=a("strong"),B8o=o("deberta-v2"),x8o=o(" \u2014 "),rD=a("a"),k8o=o("DebertaV2ForTokenClassification"),R8o=o(" (DeBERTa-v2 model)"),S8o=l(),Rb=a("li"),Kne=a("strong"),P8o=o("distilbert"),$8o=o(" \u2014 "),tD=a("a"),I8o=o("DistilBertForTokenClassification"),j8o=o(" (DistilBERT model)"),D8o=l(),Sb=a("li"),Zne=a("strong"),N8o=o("electra"),q8o=o(" \u2014 "),aD=a("a"),O8o=o("ElectraForTokenClassification"),G8o=o(" (ELECTRA model)"),X8o=l(),Pb=a("li"),ese=a("strong"),V8o=o("flaubert"),z8o=o(" \u2014 "),nD=a("a"),W8o=o("FlaubertForTokenClassification"),Q8o=o(" (FlauBERT model)"),H8o=l(),$b=a("li"),ose=a("strong"),U8o=o("fnet"),J8o=o(" \u2014 "),sD=a("a"),Y8o=o("FNetForTokenClassification"),K8o=o(" (FNet model)"),Z8o=l(),Ib=a("li"),rse=a("strong"),e9o=o("funnel"),o9o=o(" \u2014 "),lD=a("a"),r9o=o("FunnelForTokenClassification"),t9o=o(" (Funnel Transformer model)"),a9o=l(),jb=a("li"),tse=a("strong"),n9o=o("gpt2"),s9o=o(" \u2014 "),iD=a("a"),l9o=o("GPT2ForTokenClassification"),i9o=o(" (OpenAI GPT-2 model)"),d9o=l(),Db=a("li"),ase=a("strong"),c9o=o("ibert"),f9o=o(" \u2014 "),dD=a("a"),m9o=o("IBertForTokenClassification"),g9o=o(" (I-BERT model)"),h9o=l(),Nb=a("li"),nse=a("strong"),p9o=o("layoutlm"),_9o=o(" \u2014 "),cD=a("a"),u9o=o("LayoutLMForTokenClassification"),b9o=o(" (LayoutLM model)"),v9o=l(),qb=a("li"),sse=a("strong"),T9o=o("layoutlmv2"),F9o=o(" \u2014 "),fD=a("a"),C9o=o("LayoutLMv2ForTokenClassification"),M9o=o(" (LayoutLMv2 model)"),E9o=l(),Ob=a("li"),lse=a("strong"),y9o=o("longformer"),w9o=o(" \u2014 "),mD=a("a"),A9o=o("LongformerForTokenClassification"),L9o=o(" (Longformer model)"),B9o=l(),Gb=a("li"),ise=a("strong"),x9o=o("megatron-bert"),k9o=o(" \u2014 "),gD=a("a"),R9o=o("MegatronBertForTokenClassification"),S9o=o(" (MegatronBert model)"),P9o=l(),Xb=a("li"),dse=a("strong"),$9o=o("mobilebert"),I9o=o(" \u2014 "),hD=a("a"),j9o=o("MobileBertForTokenClassification"),D9o=o(" (MobileBERT model)"),N9o=l(),Vb=a("li"),cse=a("strong"),q9o=o("mpnet"),O9o=o(" \u2014 "),pD=a("a"),G9o=o("MPNetForTokenClassification"),X9o=o(" (MPNet model)"),V9o=l(),zb=a("li"),fse=a("strong"),z9o=o("nystromformer"),W9o=o(" \u2014 "),_D=a("a"),Q9o=o("NystromformerForTokenClassification"),H9o=o(" (Nystromformer model)"),U9o=l(),Wb=a("li"),mse=a("strong"),J9o=o("qdqbert"),Y9o=o(" \u2014 "),uD=a("a"),K9o=o("QDQBertForTokenClassification"),Z9o=o(" (QDQBert model)"),eBo=l(),Qb=a("li"),gse=a("strong"),oBo=o("rembert"),rBo=o(" \u2014 "),bD=a("a"),tBo=o("RemBertForTokenClassification"),aBo=o(" (RemBERT model)"),nBo=l(),Hb=a("li"),hse=a("strong"),sBo=o("roberta"),lBo=o(" \u2014 "),vD=a("a"),iBo=o("RobertaForTokenClassification"),dBo=o(" (RoBERTa model)"),cBo=l(),Ub=a("li"),pse=a("strong"),fBo=o("roformer"),mBo=o(" \u2014 "),TD=a("a"),gBo=o("RoFormerForTokenClassification"),hBo=o(" (RoFormer model)"),pBo=l(),Jb=a("li"),_se=a("strong"),_Bo=o("squeezebert"),uBo=o(" \u2014 "),FD=a("a"),bBo=o("SqueezeBertForTokenClassification"),vBo=o(" (SqueezeBERT model)"),TBo=l(),Yb=a("li"),use=a("strong"),FBo=o("xlm"),CBo=o(" \u2014 "),CD=a("a"),MBo=o("XLMForTokenClassification"),EBo=o(" (XLM model)"),yBo=l(),Kb=a("li"),bse=a("strong"),wBo=o("xlm-roberta"),ABo=o(" \u2014 "),MD=a("a"),LBo=o("XLMRobertaForTokenClassification"),BBo=o(" (XLM-RoBERTa model)"),xBo=l(),Zb=a("li"),vse=a("strong"),kBo=o("xlm-roberta-xl"),RBo=o(" \u2014 "),ED=a("a"),SBo=o("XLMRobertaXLForTokenClassification"),PBo=o(" (XLM-RoBERTa-XL model)"),$Bo=l(),e2=a("li"),Tse=a("strong"),IBo=o("xlnet"),jBo=o(" \u2014 "),yD=a("a"),DBo=o("XLNetForTokenClassification"),NBo=o(" (XLNet model)"),qBo=l(),o2=a("li"),Fse=a("strong"),OBo=o("yoso"),GBo=o(" \u2014 "),wD=a("a"),XBo=o("YosoForTokenClassification"),VBo=o(" (YOSO model)"),zBo=l(),r2=a("p"),WBo=o("The model is set in evaluation mode by default using "),Cse=a("code"),QBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=a("code"),UBo=o("model.train()"),JBo=l(),Ese=a("p"),YBo=o("Examples:"),KBo=l(),f(N3.$$.fragment),Zxe=l(),Ed=a("h2"),t2=a("a"),yse=a("span"),f(q3.$$.fragment),ZBo=l(),wse=a("span"),exo=o("AutoModelForQuestionAnswering"),eke=l(),nr=a("div"),f(O3.$$.fragment),oxo=l(),yd=a("p"),rxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ase=a("code"),txo=o("from_pretrained()"),axo=o("class method or the "),Lse=a("code"),nxo=o("from_config()"),sxo=o(`class
method.`),lxo=l(),G3=a("p"),ixo=o("This class cannot be instantiated directly using "),Bse=a("code"),dxo=o("__init__()"),cxo=o(" (throws an error)."),fxo=l(),Zr=a("div"),f(X3.$$.fragment),mxo=l(),xse=a("p"),gxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hxo=l(),wd=a("p"),pxo=o(`Note:
Loading a model from its configuration file does `),kse=a("strong"),_xo=o("not"),uxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rse=a("code"),bxo=o("from_pretrained()"),vxo=o("to load the model weights."),Txo=l(),Sse=a("p"),Fxo=o("Examples:"),Cxo=l(),f(V3.$$.fragment),Mxo=l(),Qe=a("div"),f(z3.$$.fragment),Exo=l(),Pse=a("p"),yxo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wxo=l(),Za=a("p"),Axo=o("The model class to instantiate is selected based on the "),$se=a("code"),Lxo=o("model_type"),Bxo=o(` property of the config object (either
passed as an argument or loaded from `),Ise=a("code"),xxo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=a("code"),Rxo=o("pretrained_model_name_or_path"),Sxo=o(":"),Pxo=l(),R=a("ul"),a2=a("li"),Dse=a("strong"),$xo=o("albert"),Ixo=o(" \u2014 "),AD=a("a"),jxo=o("AlbertForQuestionAnswering"),Dxo=o(" (ALBERT model)"),Nxo=l(),n2=a("li"),Nse=a("strong"),qxo=o("bart"),Oxo=o(" \u2014 "),LD=a("a"),Gxo=o("BartForQuestionAnswering"),Xxo=o(" (BART model)"),Vxo=l(),s2=a("li"),qse=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),BD=a("a"),Qxo=o("BertForQuestionAnswering"),Hxo=o(" (BERT model)"),Uxo=l(),l2=a("li"),Ose=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),xD=a("a"),Kxo=o("BigBirdForQuestionAnswering"),Zxo=o(" (BigBird model)"),eko=l(),i2=a("li"),Gse=a("strong"),oko=o("bigbird_pegasus"),rko=o(" \u2014 "),kD=a("a"),tko=o("BigBirdPegasusForQuestionAnswering"),ako=o(" (BigBirdPegasus model)"),nko=l(),d2=a("li"),Xse=a("strong"),sko=o("camembert"),lko=o(" \u2014 "),RD=a("a"),iko=o("CamembertForQuestionAnswering"),dko=o(" (CamemBERT model)"),cko=l(),c2=a("li"),Vse=a("strong"),fko=o("canine"),mko=o(" \u2014 "),SD=a("a"),gko=o("CanineForQuestionAnswering"),hko=o(" (Canine model)"),pko=l(),f2=a("li"),zse=a("strong"),_ko=o("convbert"),uko=o(" \u2014 "),PD=a("a"),bko=o("ConvBertForQuestionAnswering"),vko=o(" (ConvBERT model)"),Tko=l(),m2=a("li"),Wse=a("strong"),Fko=o("data2vec-text"),Cko=o(" \u2014 "),$D=a("a"),Mko=o("Data2VecTextForQuestionAnswering"),Eko=o(" (Data2VecText model)"),yko=l(),g2=a("li"),Qse=a("strong"),wko=o("deberta"),Ako=o(" \u2014 "),ID=a("a"),Lko=o("DebertaForQuestionAnswering"),Bko=o(" (DeBERTa model)"),xko=l(),h2=a("li"),Hse=a("strong"),kko=o("deberta-v2"),Rko=o(" \u2014 "),jD=a("a"),Sko=o("DebertaV2ForQuestionAnswering"),Pko=o(" (DeBERTa-v2 model)"),$ko=l(),p2=a("li"),Use=a("strong"),Iko=o("distilbert"),jko=o(" \u2014 "),DD=a("a"),Dko=o("DistilBertForQuestionAnswering"),Nko=o(" (DistilBERT model)"),qko=l(),_2=a("li"),Jse=a("strong"),Oko=o("electra"),Gko=o(" \u2014 "),ND=a("a"),Xko=o("ElectraForQuestionAnswering"),Vko=o(" (ELECTRA model)"),zko=l(),u2=a("li"),Yse=a("strong"),Wko=o("flaubert"),Qko=o(" \u2014 "),qD=a("a"),Hko=o("FlaubertForQuestionAnsweringSimple"),Uko=o(" (FlauBERT model)"),Jko=l(),b2=a("li"),Kse=a("strong"),Yko=o("fnet"),Kko=o(" \u2014 "),OD=a("a"),Zko=o("FNetForQuestionAnswering"),eRo=o(" (FNet model)"),oRo=l(),v2=a("li"),Zse=a("strong"),rRo=o("funnel"),tRo=o(" \u2014 "),GD=a("a"),aRo=o("FunnelForQuestionAnswering"),nRo=o(" (Funnel Transformer model)"),sRo=l(),T2=a("li"),ele=a("strong"),lRo=o("gptj"),iRo=o(" \u2014 "),XD=a("a"),dRo=o("GPTJForQuestionAnswering"),cRo=o(" (GPT-J model)"),fRo=l(),F2=a("li"),ole=a("strong"),mRo=o("ibert"),gRo=o(" \u2014 "),VD=a("a"),hRo=o("IBertForQuestionAnswering"),pRo=o(" (I-BERT model)"),_Ro=l(),C2=a("li"),rle=a("strong"),uRo=o("layoutlmv2"),bRo=o(" \u2014 "),zD=a("a"),vRo=o("LayoutLMv2ForQuestionAnswering"),TRo=o(" (LayoutLMv2 model)"),FRo=l(),M2=a("li"),tle=a("strong"),CRo=o("led"),MRo=o(" \u2014 "),WD=a("a"),ERo=o("LEDForQuestionAnswering"),yRo=o(" (LED model)"),wRo=l(),E2=a("li"),ale=a("strong"),ARo=o("longformer"),LRo=o(" \u2014 "),QD=a("a"),BRo=o("LongformerForQuestionAnswering"),xRo=o(" (Longformer model)"),kRo=l(),y2=a("li"),nle=a("strong"),RRo=o("lxmert"),SRo=o(" \u2014 "),HD=a("a"),PRo=o("LxmertForQuestionAnswering"),$Ro=o(" (LXMERT model)"),IRo=l(),w2=a("li"),sle=a("strong"),jRo=o("mbart"),DRo=o(" \u2014 "),UD=a("a"),NRo=o("MBartForQuestionAnswering"),qRo=o(" (mBART model)"),ORo=l(),A2=a("li"),lle=a("strong"),GRo=o("megatron-bert"),XRo=o(" \u2014 "),JD=a("a"),VRo=o("MegatronBertForQuestionAnswering"),zRo=o(" (MegatronBert model)"),WRo=l(),L2=a("li"),ile=a("strong"),QRo=o("mobilebert"),HRo=o(" \u2014 "),YD=a("a"),URo=o("MobileBertForQuestionAnswering"),JRo=o(" (MobileBERT model)"),YRo=l(),B2=a("li"),dle=a("strong"),KRo=o("mpnet"),ZRo=o(" \u2014 "),KD=a("a"),eSo=o("MPNetForQuestionAnswering"),oSo=o(" (MPNet model)"),rSo=l(),x2=a("li"),cle=a("strong"),tSo=o("nystromformer"),aSo=o(" \u2014 "),ZD=a("a"),nSo=o("NystromformerForQuestionAnswering"),sSo=o(" (Nystromformer model)"),lSo=l(),k2=a("li"),fle=a("strong"),iSo=o("qdqbert"),dSo=o(" \u2014 "),eN=a("a"),cSo=o("QDQBertForQuestionAnswering"),fSo=o(" (QDQBert model)"),mSo=l(),R2=a("li"),mle=a("strong"),gSo=o("reformer"),hSo=o(" \u2014 "),oN=a("a"),pSo=o("ReformerForQuestionAnswering"),_So=o(" (Reformer model)"),uSo=l(),S2=a("li"),gle=a("strong"),bSo=o("rembert"),vSo=o(" \u2014 "),rN=a("a"),TSo=o("RemBertForQuestionAnswering"),FSo=o(" (RemBERT model)"),CSo=l(),P2=a("li"),hle=a("strong"),MSo=o("roberta"),ESo=o(" \u2014 "),tN=a("a"),ySo=o("RobertaForQuestionAnswering"),wSo=o(" (RoBERTa model)"),ASo=l(),$2=a("li"),ple=a("strong"),LSo=o("roformer"),BSo=o(" \u2014 "),aN=a("a"),xSo=o("RoFormerForQuestionAnswering"),kSo=o(" (RoFormer model)"),RSo=l(),I2=a("li"),_le=a("strong"),SSo=o("splinter"),PSo=o(" \u2014 "),nN=a("a"),$So=o("SplinterForQuestionAnswering"),ISo=o(" (Splinter model)"),jSo=l(),j2=a("li"),ule=a("strong"),DSo=o("squeezebert"),NSo=o(" \u2014 "),sN=a("a"),qSo=o("SqueezeBertForQuestionAnswering"),OSo=o(" (SqueezeBERT model)"),GSo=l(),D2=a("li"),ble=a("strong"),XSo=o("xlm"),VSo=o(" \u2014 "),lN=a("a"),zSo=o("XLMForQuestionAnsweringSimple"),WSo=o(" (XLM model)"),QSo=l(),N2=a("li"),vle=a("strong"),HSo=o("xlm-roberta"),USo=o(" \u2014 "),iN=a("a"),JSo=o("XLMRobertaForQuestionAnswering"),YSo=o(" (XLM-RoBERTa model)"),KSo=l(),q2=a("li"),Tle=a("strong"),ZSo=o("xlm-roberta-xl"),ePo=o(" \u2014 "),dN=a("a"),oPo=o("XLMRobertaXLForQuestionAnswering"),rPo=o(" (XLM-RoBERTa-XL model)"),tPo=l(),O2=a("li"),Fle=a("strong"),aPo=o("xlnet"),nPo=o(" \u2014 "),cN=a("a"),sPo=o("XLNetForQuestionAnsweringSimple"),lPo=o(" (XLNet model)"),iPo=l(),G2=a("li"),Cle=a("strong"),dPo=o("yoso"),cPo=o(" \u2014 "),fN=a("a"),fPo=o("YosoForQuestionAnswering"),mPo=o(" (YOSO model)"),gPo=l(),X2=a("p"),hPo=o("The model is set in evaluation mode by default using "),Mle=a("code"),pPo=o("model.eval()"),_Po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),uPo=o("model.train()"),bPo=l(),yle=a("p"),vPo=o("Examples:"),TPo=l(),f(W3.$$.fragment),oke=l(),Ad=a("h2"),V2=a("a"),wle=a("span"),f(Q3.$$.fragment),FPo=l(),Ale=a("span"),CPo=o("AutoModelForTableQuestionAnswering"),rke=l(),sr=a("div"),f(H3.$$.fragment),MPo=l(),Ld=a("p"),EPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lle=a("code"),yPo=o("from_pretrained()"),wPo=o("class method or the "),Ble=a("code"),APo=o("from_config()"),LPo=o(`class
method.`),BPo=l(),U3=a("p"),xPo=o("This class cannot be instantiated directly using "),xle=a("code"),kPo=o("__init__()"),RPo=o(" (throws an error)."),SPo=l(),et=a("div"),f(J3.$$.fragment),PPo=l(),kle=a("p"),$Po=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),IPo=l(),Bd=a("p"),jPo=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),DPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("code"),qPo=o("from_pretrained()"),OPo=o("to load the model weights."),GPo=l(),Ple=a("p"),XPo=o("Examples:"),VPo=l(),f(Y3.$$.fragment),zPo=l(),He=a("div"),f(K3.$$.fragment),WPo=l(),$le=a("p"),QPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HPo=l(),en=a("p"),UPo=o("The model class to instantiate is selected based on the "),Ile=a("code"),JPo=o("model_type"),YPo=o(` property of the config object (either
passed as an argument or loaded from `),jle=a("code"),KPo=o("pretrained_model_name_or_path"),ZPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(":"),r$o=l(),Nle=a("ul"),z2=a("li"),qle=a("strong"),t$o=o("tapas"),a$o=o(" \u2014 "),mN=a("a"),n$o=o("TapasForQuestionAnswering"),s$o=o(" (TAPAS model)"),l$o=l(),W2=a("p"),i$o=o("The model is set in evaluation mode by default using "),Ole=a("code"),d$o=o("model.eval()"),c$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),f$o=o("model.train()"),m$o=l(),Xle=a("p"),g$o=o("Examples:"),h$o=l(),f(Z3.$$.fragment),tke=l(),xd=a("h2"),Q2=a("a"),Vle=a("span"),f(e5.$$.fragment),p$o=l(),zle=a("span"),_$o=o("AutoModelForImageClassification"),ake=l(),lr=a("div"),f(o5.$$.fragment),u$o=l(),kd=a("p"),b$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wle=a("code"),v$o=o("from_pretrained()"),T$o=o("class method or the "),Qle=a("code"),F$o=o("from_config()"),C$o=o(`class
method.`),M$o=l(),r5=a("p"),E$o=o("This class cannot be instantiated directly using "),Hle=a("code"),y$o=o("__init__()"),w$o=o(" (throws an error)."),A$o=l(),ot=a("div"),f(t5.$$.fragment),L$o=l(),Ule=a("p"),B$o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x$o=l(),Rd=a("p"),k$o=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),R$o=o("not"),S$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),P$o=o("from_pretrained()"),$$o=o("to load the model weights."),I$o=l(),Kle=a("p"),j$o=o("Examples:"),D$o=l(),f(a5.$$.fragment),N$o=l(),Ue=a("div"),f(n5.$$.fragment),q$o=l(),Zle=a("p"),O$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G$o=l(),on=a("p"),X$o=o("The model class to instantiate is selected based on the "),eie=a("code"),V$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),_e=a("ul"),H2=a("li"),tie=a("strong"),Y$o=o("beit"),K$o=o(" \u2014 "),gN=a("a"),Z$o=o("BeitForImageClassification"),eIo=o(" (BEiT model)"),oIo=l(),U2=a("li"),aie=a("strong"),rIo=o("convnext"),tIo=o(" \u2014 "),hN=a("a"),aIo=o("ConvNextForImageClassification"),nIo=o(" (ConvNext model)"),sIo=l(),qs=a("li"),nie=a("strong"),lIo=o("deit"),iIo=o(" \u2014 "),pN=a("a"),dIo=o("DeiTForImageClassification"),cIo=o(" or "),_N=a("a"),fIo=o("DeiTForImageClassificationWithTeacher"),mIo=o(" (DeiT model)"),gIo=l(),J2=a("li"),sie=a("strong"),hIo=o("imagegpt"),pIo=o(" \u2014 "),uN=a("a"),_Io=o("ImageGPTForImageClassification"),uIo=o(" (ImageGPT model)"),bIo=l(),ma=a("li"),lie=a("strong"),vIo=o("perceiver"),TIo=o(" \u2014 "),bN=a("a"),FIo=o("PerceiverForImageClassificationLearned"),CIo=o(" or "),vN=a("a"),MIo=o("PerceiverForImageClassificationFourier"),EIo=o(" or "),TN=a("a"),yIo=o("PerceiverForImageClassificationConvProcessing"),wIo=o(" (Perceiver model)"),AIo=l(),Y2=a("li"),iie=a("strong"),LIo=o("poolformer"),BIo=o(" \u2014 "),FN=a("a"),xIo=o("PoolFormerForImageClassification"),kIo=o(" (PoolFormer model)"),RIo=l(),K2=a("li"),die=a("strong"),SIo=o("resnet"),PIo=o(" \u2014 "),CN=a("a"),$Io=o("ResNetForImageClassification"),IIo=o(" (ResNet model)"),jIo=l(),Z2=a("li"),cie=a("strong"),DIo=o("segformer"),NIo=o(" \u2014 "),MN=a("a"),qIo=o("SegformerForImageClassification"),OIo=o(" (SegFormer model)"),GIo=l(),ev=a("li"),fie=a("strong"),XIo=o("swin"),VIo=o(" \u2014 "),EN=a("a"),zIo=o("SwinForImageClassification"),WIo=o(" (Swin model)"),QIo=l(),ov=a("li"),mie=a("strong"),HIo=o("vit"),UIo=o(" \u2014 "),yN=a("a"),JIo=o("ViTForImageClassification"),YIo=o(" (ViT model)"),KIo=l(),rv=a("p"),ZIo=o("The model is set in evaluation mode by default using "),gie=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),rjo=o("model.train()"),tjo=l(),pie=a("p"),ajo=o("Examples:"),njo=l(),f(s5.$$.fragment),nke=l(),Sd=a("h2"),tv=a("a"),_ie=a("span"),f(l5.$$.fragment),sjo=l(),uie=a("span"),ljo=o("AutoModelForVision2Seq"),ske=l(),ir=a("div"),f(i5.$$.fragment),ijo=l(),Pd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bie=a("code"),cjo=o("from_pretrained()"),fjo=o("class method or the "),vie=a("code"),mjo=o("from_config()"),gjo=o(`class
method.`),hjo=l(),d5=a("p"),pjo=o("This class cannot be instantiated directly using "),Tie=a("code"),_jo=o("__init__()"),ujo=o(" (throws an error)."),bjo=l(),rt=a("div"),f(c5.$$.fragment),vjo=l(),Fie=a("p"),Tjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fjo=l(),$d=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),yjo=o("from_pretrained()"),wjo=o("to load the model weights."),Ajo=l(),Eie=a("p"),Ljo=o("Examples:"),Bjo=l(),f(f5.$$.fragment),xjo=l(),Je=a("div"),f(m5.$$.fragment),kjo=l(),yie=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sjo=l(),rn=a("p"),Pjo=o("The model class to instantiate is selected based on the "),wie=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),Njo=o("pretrained_model_name_or_path"),qjo=o(":"),Ojo=l(),Bie=a("ul"),av=a("li"),xie=a("strong"),Gjo=o("vision-encoder-decoder"),Xjo=o(" \u2014 "),wN=a("a"),Vjo=o("VisionEncoderDecoderModel"),zjo=o(" (Vision Encoder decoder model)"),Wjo=l(),nv=a("p"),Qjo=o("The model is set in evaluation mode by default using "),kie=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),Jjo=o("model.train()"),Yjo=l(),Sie=a("p"),Kjo=o("Examples:"),Zjo=l(),f(g5.$$.fragment),lke=l(),Id=a("h2"),sv=a("a"),Pie=a("span"),f(h5.$$.fragment),eDo=l(),$ie=a("span"),oDo=o("AutoModelForAudioClassification"),ike=l(),dr=a("div"),f(p5.$$.fragment),rDo=l(),jd=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Iie=a("code"),aDo=o("from_pretrained()"),nDo=o("class method or the "),jie=a("code"),sDo=o("from_config()"),lDo=o(`class
method.`),iDo=l(),_5=a("p"),dDo=o("This class cannot be instantiated directly using "),Die=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),tt=a("div"),f(u5.$$.fragment),gDo=l(),Nie=a("p"),hDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pDo=l(),Dd=a("p"),_Do=o(`Note:
Loading a model from its configuration file does `),qie=a("strong"),uDo=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=a("code"),vDo=o("from_pretrained()"),TDo=o("to load the model weights."),FDo=l(),Gie=a("p"),CDo=o("Examples:"),MDo=l(),f(b5.$$.fragment),EDo=l(),Ye=a("div"),f(v5.$$.fragment),yDo=l(),Xie=a("p"),wDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ADo=l(),tn=a("p"),LDo=o("The model class to instantiate is selected based on the "),Vie=a("code"),BDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),kDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),SDo=o("pretrained_model_name_or_path"),PDo=o(":"),$Do=l(),ke=a("ul"),lv=a("li"),Qie=a("strong"),IDo=o("data2vec-audio"),jDo=o(" \u2014 "),AN=a("a"),DDo=o("Data2VecAudioForSequenceClassification"),NDo=o(" (Data2VecAudio model)"),qDo=l(),iv=a("li"),Hie=a("strong"),ODo=o("hubert"),GDo=o(" \u2014 "),LN=a("a"),XDo=o("HubertForSequenceClassification"),VDo=o(" (Hubert model)"),zDo=l(),dv=a("li"),Uie=a("strong"),WDo=o("sew"),QDo=o(" \u2014 "),BN=a("a"),HDo=o("SEWForSequenceClassification"),UDo=o(" (SEW model)"),JDo=l(),cv=a("li"),Jie=a("strong"),YDo=o("sew-d"),KDo=o(" \u2014 "),xN=a("a"),ZDo=o("SEWDForSequenceClassification"),eNo=o(" (SEW-D model)"),oNo=l(),fv=a("li"),Yie=a("strong"),rNo=o("unispeech"),tNo=o(" \u2014 "),kN=a("a"),aNo=o("UniSpeechForSequenceClassification"),nNo=o(" (UniSpeech model)"),sNo=l(),mv=a("li"),Kie=a("strong"),lNo=o("unispeech-sat"),iNo=o(" \u2014 "),RN=a("a"),dNo=o("UniSpeechSatForSequenceClassification"),cNo=o(" (UniSpeechSat model)"),fNo=l(),gv=a("li"),Zie=a("strong"),mNo=o("wav2vec2"),gNo=o(" \u2014 "),SN=a("a"),hNo=o("Wav2Vec2ForSequenceClassification"),pNo=o(" (Wav2Vec2 model)"),_No=l(),hv=a("li"),ede=a("strong"),uNo=o("wavlm"),bNo=o(" \u2014 "),PN=a("a"),vNo=o("WavLMForSequenceClassification"),TNo=o(" (WavLM model)"),FNo=l(),pv=a("p"),CNo=o("The model is set in evaluation mode by default using "),ode=a("code"),MNo=o("model.eval()"),ENo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),yNo=o("model.train()"),wNo=l(),tde=a("p"),ANo=o("Examples:"),LNo=l(),f(T5.$$.fragment),dke=l(),Nd=a("h2"),_v=a("a"),ade=a("span"),f(F5.$$.fragment),BNo=l(),nde=a("span"),xNo=o("AutoModelForAudioFrameClassification"),cke=l(),cr=a("div"),f(C5.$$.fragment),kNo=l(),qd=a("p"),RNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sde=a("code"),SNo=o("from_pretrained()"),PNo=o("class method or the "),lde=a("code"),$No=o("from_config()"),INo=o(`class
method.`),jNo=l(),M5=a("p"),DNo=o("This class cannot be instantiated directly using "),ide=a("code"),NNo=o("__init__()"),qNo=o(" (throws an error)."),ONo=l(),at=a("div"),f(E5.$$.fragment),GNo=l(),dde=a("p"),XNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),VNo=l(),Od=a("p"),zNo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),WNo=o("not"),QNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=a("code"),HNo=o("from_pretrained()"),UNo=o("to load the model weights."),JNo=l(),mde=a("p"),YNo=o("Examples:"),KNo=l(),f(y5.$$.fragment),ZNo=l(),Ke=a("div"),f(w5.$$.fragment),eqo=l(),gde=a("p"),oqo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rqo=l(),an=a("p"),tqo=o("The model class to instantiate is selected based on the "),hde=a("code"),aqo=o("model_type"),nqo=o(` property of the config object (either
passed as an argument or loaded from `),pde=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(":"),cqo=l(),nn=a("ul"),uv=a("li"),ude=a("strong"),fqo=o("data2vec-audio"),mqo=o(" \u2014 "),$N=a("a"),gqo=o("Data2VecAudioForAudioFrameClassification"),hqo=o(" (Data2VecAudio model)"),pqo=l(),bv=a("li"),bde=a("strong"),_qo=o("unispeech-sat"),uqo=o(" \u2014 "),IN=a("a"),bqo=o("UniSpeechSatForAudioFrameClassification"),vqo=o(" (UniSpeechSat model)"),Tqo=l(),vv=a("li"),vde=a("strong"),Fqo=o("wav2vec2"),Cqo=o(" \u2014 "),jN=a("a"),Mqo=o("Wav2Vec2ForAudioFrameClassification"),Eqo=o(" (Wav2Vec2 model)"),yqo=l(),Tv=a("li"),Tde=a("strong"),wqo=o("wavlm"),Aqo=o(" \u2014 "),DN=a("a"),Lqo=o("WavLMForAudioFrameClassification"),Bqo=o(" (WavLM model)"),xqo=l(),Fv=a("p"),kqo=o("The model is set in evaluation mode by default using "),Fde=a("code"),Rqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),Pqo=o("model.train()"),$qo=l(),Mde=a("p"),Iqo=o("Examples:"),jqo=l(),f(A5.$$.fragment),fke=l(),Gd=a("h2"),Cv=a("a"),Ede=a("span"),f(L5.$$.fragment),Dqo=l(),yde=a("span"),Nqo=o("AutoModelForCTC"),mke=l(),fr=a("div"),f(B5.$$.fragment),qqo=l(),Xd=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wde=a("code"),Gqo=o("from_pretrained()"),Xqo=o("class method or the "),Ade=a("code"),Vqo=o("from_config()"),zqo=o(`class
method.`),Wqo=l(),x5=a("p"),Qqo=o("This class cannot be instantiated directly using "),Lde=a("code"),Hqo=o("__init__()"),Uqo=o(" (throws an error)."),Jqo=l(),nt=a("div"),f(k5.$$.fragment),Yqo=l(),Bde=a("p"),Kqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zqo=l(),Vd=a("p"),eOo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),oOo=o("not"),rOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),tOo=o("from_pretrained()"),aOo=o("to load the model weights."),nOo=l(),Rde=a("p"),sOo=o("Examples:"),lOo=l(),f(R5.$$.fragment),iOo=l(),Ze=a("div"),f(S5.$$.fragment),dOo=l(),Sde=a("p"),cOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fOo=l(),sn=a("p"),mOo=o("The model class to instantiate is selected based on the "),Pde=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),Re=a("ul"),Mv=a("li"),jde=a("strong"),TOo=o("data2vec-audio"),FOo=o(" \u2014 "),NN=a("a"),COo=o("Data2VecAudioForCTC"),MOo=o(" (Data2VecAudio model)"),EOo=l(),Ev=a("li"),Dde=a("strong"),yOo=o("hubert"),wOo=o(" \u2014 "),qN=a("a"),AOo=o("HubertForCTC"),LOo=o(" (Hubert model)"),BOo=l(),yv=a("li"),Nde=a("strong"),xOo=o("sew"),kOo=o(" \u2014 "),ON=a("a"),ROo=o("SEWForCTC"),SOo=o(" (SEW model)"),POo=l(),wv=a("li"),qde=a("strong"),$Oo=o("sew-d"),IOo=o(" \u2014 "),GN=a("a"),jOo=o("SEWDForCTC"),DOo=o(" (SEW-D model)"),NOo=l(),Av=a("li"),Ode=a("strong"),qOo=o("unispeech"),OOo=o(" \u2014 "),XN=a("a"),GOo=o("UniSpeechForCTC"),XOo=o(" (UniSpeech model)"),VOo=l(),Lv=a("li"),Gde=a("strong"),zOo=o("unispeech-sat"),WOo=o(" \u2014 "),VN=a("a"),QOo=o("UniSpeechSatForCTC"),HOo=o(" (UniSpeechSat model)"),UOo=l(),Bv=a("li"),Xde=a("strong"),JOo=o("wav2vec2"),YOo=o(" \u2014 "),zN=a("a"),KOo=o("Wav2Vec2ForCTC"),ZOo=o(" (Wav2Vec2 model)"),eGo=l(),xv=a("li"),Vde=a("strong"),oGo=o("wavlm"),rGo=o(" \u2014 "),WN=a("a"),tGo=o("WavLMForCTC"),aGo=o(" (WavLM model)"),nGo=l(),kv=a("p"),sGo=o("The model is set in evaluation mode by default using "),zde=a("code"),lGo=o("model.eval()"),iGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),dGo=o("model.train()"),cGo=l(),Qde=a("p"),fGo=o("Examples:"),mGo=l(),f(P5.$$.fragment),gke=l(),zd=a("h2"),Rv=a("a"),Hde=a("span"),f($5.$$.fragment),gGo=l(),Ude=a("span"),hGo=o("AutoModelForSpeechSeq2Seq"),hke=l(),mr=a("div"),f(I5.$$.fragment),pGo=l(),Wd=a("p"),_Go=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jde=a("code"),uGo=o("from_pretrained()"),bGo=o("class method or the "),Yde=a("code"),vGo=o("from_config()"),TGo=o(`class
method.`),FGo=l(),j5=a("p"),CGo=o("This class cannot be instantiated directly using "),Kde=a("code"),MGo=o("__init__()"),EGo=o(" (throws an error)."),yGo=l(),st=a("div"),f(D5.$$.fragment),wGo=l(),Zde=a("p"),AGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LGo=l(),Qd=a("p"),BGo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),xGo=o("not"),kGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),RGo=o("from_pretrained()"),SGo=o("to load the model weights."),PGo=l(),rce=a("p"),$Go=o("Examples:"),IGo=l(),f(N5.$$.fragment),jGo=l(),eo=a("div"),f(q5.$$.fragment),DGo=l(),tce=a("p"),NGo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qGo=l(),ln=a("p"),OGo=o("The model class to instantiate is selected based on the "),ace=a("code"),GGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),VGo=o("pretrained_model_name_or_path"),zGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(":"),HGo=l(),O5=a("ul"),Sv=a("li"),lce=a("strong"),UGo=o("speech-encoder-decoder"),JGo=o(" \u2014 "),QN=a("a"),YGo=o("SpeechEncoderDecoderModel"),KGo=o(" (Speech Encoder decoder model)"),ZGo=l(),Pv=a("li"),ice=a("strong"),eXo=o("speech_to_text"),oXo=o(" \u2014 "),HN=a("a"),rXo=o("Speech2TextForConditionalGeneration"),tXo=o(" (Speech2Text model)"),aXo=l(),$v=a("p"),nXo=o("The model is set in evaluation mode by default using "),dce=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),iXo=o("model.train()"),dXo=l(),fce=a("p"),cXo=o("Examples:"),fXo=l(),f(G5.$$.fragment),pke=l(),Hd=a("h2"),Iv=a("a"),mce=a("span"),f(X5.$$.fragment),mXo=l(),gce=a("span"),gXo=o("AutoModelForAudioXVector"),_ke=l(),gr=a("div"),f(V5.$$.fragment),hXo=l(),Ud=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hce=a("code"),_Xo=o("from_pretrained()"),uXo=o("class method or the "),pce=a("code"),bXo=o("from_config()"),vXo=o(`class
method.`),TXo=l(),z5=a("p"),FXo=o("This class cannot be instantiated directly using "),_ce=a("code"),CXo=o("__init__()"),MXo=o(" (throws an error)."),EXo=l(),lt=a("div"),f(W5.$$.fragment),yXo=l(),uce=a("p"),wXo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),AXo=l(),Jd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),BXo=o("not"),xXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("code"),kXo=o("from_pretrained()"),RXo=o("to load the model weights."),SXo=l(),Tce=a("p"),PXo=o("Examples:"),$Xo=l(),f(Q5.$$.fragment),IXo=l(),oo=a("div"),f(H5.$$.fragment),jXo=l(),Fce=a("p"),DXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NXo=l(),dn=a("p"),qXo=o("The model class to instantiate is selected based on the "),Cce=a("code"),OXo=o("model_type"),GXo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),XXo=o("pretrained_model_name_or_path"),VXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),zXo=o("pretrained_model_name_or_path"),WXo=o(":"),QXo=l(),cn=a("ul"),jv=a("li"),yce=a("strong"),HXo=o("data2vec-audio"),UXo=o(" \u2014 "),UN=a("a"),JXo=o("Data2VecAudioForXVector"),YXo=o(" (Data2VecAudio model)"),KXo=l(),Dv=a("li"),wce=a("strong"),ZXo=o("unispeech-sat"),eVo=o(" \u2014 "),JN=a("a"),oVo=o("UniSpeechSatForXVector"),rVo=o(" (UniSpeechSat model)"),tVo=l(),Nv=a("li"),Ace=a("strong"),aVo=o("wav2vec2"),nVo=o(" \u2014 "),YN=a("a"),sVo=o("Wav2Vec2ForXVector"),lVo=o(" (Wav2Vec2 model)"),iVo=l(),qv=a("li"),Lce=a("strong"),dVo=o("wavlm"),cVo=o(" \u2014 "),KN=a("a"),fVo=o("WavLMForXVector"),mVo=o(" (WavLM model)"),gVo=l(),Ov=a("p"),hVo=o("The model is set in evaluation mode by default using "),Bce=a("code"),pVo=o("model.eval()"),_Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),uVo=o("model.train()"),bVo=l(),kce=a("p"),vVo=o("Examples:"),TVo=l(),f(U5.$$.fragment),uke=l(),Yd=a("h2"),Gv=a("a"),Rce=a("span"),f(J5.$$.fragment),FVo=l(),Sce=a("span"),CVo=o("AutoModelForMaskedImageModeling"),bke=l(),hr=a("div"),f(Y5.$$.fragment),MVo=l(),Kd=a("p"),EVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pce=a("code"),yVo=o("from_pretrained()"),wVo=o("class method or the "),$ce=a("code"),AVo=o("from_config()"),LVo=o(`class
method.`),BVo=l(),K5=a("p"),xVo=o("This class cannot be instantiated directly using "),Ice=a("code"),kVo=o("__init__()"),RVo=o(" (throws an error)."),SVo=l(),it=a("div"),f(Z5.$$.fragment),PVo=l(),jce=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),IVo=l(),Zd=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),DVo=o("not"),NVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),qVo=o("from_pretrained()"),OVo=o("to load the model weights."),GVo=l(),qce=a("p"),XVo=o("Examples:"),VVo=l(),f(ey.$$.fragment),zVo=l(),ro=a("div"),f(oy.$$.fragment),WVo=l(),Oce=a("p"),QVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HVo=l(),fn=a("p"),UVo=o("The model class to instantiate is selected based on the "),Gce=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),ec=a("ul"),Xv=a("li"),zce=a("strong"),tzo=o("deit"),azo=o(" \u2014 "),ZN=a("a"),nzo=o("DeiTForMaskedImageModeling"),szo=o(" (DeiT model)"),lzo=l(),Vv=a("li"),Wce=a("strong"),izo=o("swin"),dzo=o(" \u2014 "),eq=a("a"),czo=o("SwinForMaskedImageModeling"),fzo=o(" (Swin model)"),mzo=l(),zv=a("li"),Qce=a("strong"),gzo=o("vit"),hzo=o(" \u2014 "),oq=a("a"),pzo=o("ViTForMaskedImageModeling"),_zo=o(" (ViT model)"),uzo=l(),Wv=a("p"),bzo=o("The model is set in evaluation mode by default using "),Hce=a("code"),vzo=o("model.eval()"),Tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),Fzo=o("model.train()"),Czo=l(),Jce=a("p"),Mzo=o("Examples:"),Ezo=l(),f(ry.$$.fragment),vke=l(),oc=a("h2"),Qv=a("a"),Yce=a("span"),f(ty.$$.fragment),yzo=l(),Kce=a("span"),wzo=o("AutoModelForObjectDetection"),Tke=l(),pr=a("div"),f(ay.$$.fragment),Azo=l(),rc=a("p"),Lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zce=a("code"),Bzo=o("from_pretrained()"),xzo=o("class method or the "),efe=a("code"),kzo=o("from_config()"),Rzo=o(`class
method.`),Szo=l(),ny=a("p"),Pzo=o("This class cannot be instantiated directly using "),ofe=a("code"),$zo=o("__init__()"),Izo=o(" (throws an error)."),jzo=l(),dt=a("div"),f(sy.$$.fragment),Dzo=l(),rfe=a("p"),Nzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qzo=l(),tc=a("p"),Ozo=o(`Note:
Loading a model from its configuration file does `),tfe=a("strong"),Gzo=o("not"),Xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=a("code"),Vzo=o("from_pretrained()"),zzo=o("to load the model weights."),Wzo=l(),nfe=a("p"),Qzo=o("Examples:"),Hzo=l(),f(ly.$$.fragment),Uzo=l(),to=a("div"),f(iy.$$.fragment),Jzo=l(),sfe=a("p"),Yzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kzo=l(),mn=a("p"),Zzo=o("The model class to instantiate is selected based on the "),lfe=a("code"),eWo=o("model_type"),oWo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),aWo=o("pretrained_model_name_or_path"),nWo=o(":"),sWo=l(),cfe=a("ul"),Hv=a("li"),ffe=a("strong"),lWo=o("detr"),iWo=o(" \u2014 "),rq=a("a"),dWo=o("DetrForObjectDetection"),cWo=o(" (DETR model)"),fWo=l(),Uv=a("p"),mWo=o("The model is set in evaluation mode by default using "),mfe=a("code"),gWo=o("model.eval()"),hWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),pWo=o("model.train()"),_Wo=l(),hfe=a("p"),uWo=o("Examples:"),bWo=l(),f(dy.$$.fragment),Fke=l(),ac=a("h2"),Jv=a("a"),pfe=a("span"),f(cy.$$.fragment),vWo=l(),_fe=a("span"),TWo=o("AutoModelForImageSegmentation"),Cke=l(),_r=a("div"),f(fy.$$.fragment),FWo=l(),nc=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ufe=a("code"),MWo=o("from_pretrained()"),EWo=o("class method or the "),bfe=a("code"),yWo=o("from_config()"),wWo=o(`class
method.`),AWo=l(),my=a("p"),LWo=o("This class cannot be instantiated directly using "),vfe=a("code"),BWo=o("__init__()"),xWo=o(" (throws an error)."),kWo=l(),ct=a("div"),f(gy.$$.fragment),RWo=l(),Tfe=a("p"),SWo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PWo=l(),sc=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),IWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=a("code"),DWo=o("from_pretrained()"),NWo=o("to load the model weights."),qWo=l(),Mfe=a("p"),OWo=o("Examples:"),GWo=l(),f(hy.$$.fragment),XWo=l(),ao=a("div"),f(py.$$.fragment),VWo=l(),Efe=a("p"),zWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WWo=l(),gn=a("p"),QWo=o("The model class to instantiate is selected based on the "),yfe=a("code"),HWo=o("model_type"),UWo=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(":"),eQo=l(),Lfe=a("ul"),Yv=a("li"),Bfe=a("strong"),oQo=o("detr"),rQo=o(" \u2014 "),tq=a("a"),tQo=o("DetrForSegmentation"),aQo=o(" (DETR model)"),nQo=l(),Kv=a("p"),sQo=o("The model is set in evaluation mode by default using "),xfe=a("code"),lQo=o("model.eval()"),iQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),dQo=o("model.train()"),cQo=l(),Rfe=a("p"),fQo=o("Examples:"),mQo=l(),f(_y.$$.fragment),Mke=l(),lc=a("h2"),Zv=a("a"),Sfe=a("span"),f(uy.$$.fragment),gQo=l(),Pfe=a("span"),hQo=o("AutoModelForSemanticSegmentation"),Eke=l(),ur=a("div"),f(by.$$.fragment),pQo=l(),ic=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$fe=a("code"),uQo=o("from_pretrained()"),bQo=o("class method or the "),Ife=a("code"),vQo=o("from_config()"),TQo=o(`class
method.`),FQo=l(),vy=a("p"),CQo=o("This class cannot be instantiated directly using "),jfe=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),yQo=l(),ft=a("div"),f(Ty.$$.fragment),wQo=l(),Dfe=a("p"),AQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LQo=l(),dc=a("p"),BQo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),xQo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),RQo=o("from_pretrained()"),SQo=o("to load the model weights."),PQo=l(),Ofe=a("p"),$Qo=o("Examples:"),IQo=l(),f(Fy.$$.fragment),jQo=l(),no=a("div"),f(Cy.$$.fragment),DQo=l(),Gfe=a("p"),NQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qQo=l(),hn=a("p"),OQo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),GQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),VQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),WQo=o("pretrained_model_name_or_path"),QQo=o(":"),HQo=l(),My=a("ul"),e6=a("li"),Wfe=a("strong"),UQo=o("beit"),JQo=o(" \u2014 "),aq=a("a"),YQo=o("BeitForSemanticSegmentation"),KQo=o(" (BEiT model)"),ZQo=l(),o6=a("li"),Qfe=a("strong"),eHo=o("segformer"),oHo=o(" \u2014 "),nq=a("a"),rHo=o("SegformerForSemanticSegmentation"),tHo=o(" (SegFormer model)"),aHo=l(),r6=a("p"),nHo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),iHo=o("model.train()"),dHo=l(),Jfe=a("p"),cHo=o("Examples:"),fHo=l(),f(Ey.$$.fragment),yke=l(),cc=a("h2"),t6=a("a"),Yfe=a("span"),f(yy.$$.fragment),mHo=l(),Kfe=a("span"),gHo=o("AutoModelForInstanceSegmentation"),wke=l(),br=a("div"),f(wy.$$.fragment),hHo=l(),fc=a("p"),pHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Zfe=a("code"),_Ho=o("from_pretrained()"),uHo=o("class method or the "),eme=a("code"),bHo=o("from_config()"),vHo=o(`class
method.`),THo=l(),Ay=a("p"),FHo=o("This class cannot be instantiated directly using "),ome=a("code"),CHo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),mt=a("div"),f(Ly.$$.fragment),yHo=l(),rme=a("p"),wHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AHo=l(),mc=a("p"),LHo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),BHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),kHo=o("from_pretrained()"),RHo=o("to load the model weights."),SHo=l(),nme=a("p"),PHo=o("Examples:"),$Ho=l(),f(By.$$.fragment),IHo=l(),so=a("div"),f(xy.$$.fragment),jHo=l(),sme=a("p"),DHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),NHo=l(),pn=a("p"),qHo=o("The model class to instantiate is selected based on the "),lme=a("code"),OHo=o("model_type"),GHo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),XHo=o("pretrained_model_name_or_path"),VHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),zHo=o("pretrained_model_name_or_path"),WHo=o(":"),QHo=l(),cme=a("ul"),a6=a("li"),fme=a("strong"),HHo=o("maskformer"),UHo=o(" \u2014 "),sq=a("a"),JHo=o("MaskFormerForInstanceSegmentation"),YHo=o(" (MaskFormer model)"),KHo=l(),n6=a("p"),ZHo=o("The model is set in evaluation mode by default using "),mme=a("code"),eUo=o("model.eval()"),oUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),rUo=o("model.train()"),tUo=l(),hme=a("p"),aUo=o("Examples:"),nUo=l(),f(ky.$$.fragment),Ake=l(),gc=a("h2"),s6=a("a"),pme=a("span"),f(Ry.$$.fragment),sUo=l(),_me=a("span"),lUo=o("TFAutoModel"),Lke=l(),vr=a("div"),f(Sy.$$.fragment),iUo=l(),hc=a("p"),dUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ume=a("code"),cUo=o("from_pretrained()"),fUo=o("class method or the "),bme=a("code"),mUo=o("from_config()"),gUo=o(`class
method.`),hUo=l(),Py=a("p"),pUo=o("This class cannot be instantiated directly using "),vme=a("code"),_Uo=o("__init__()"),uUo=o(" (throws an error)."),bUo=l(),gt=a("div"),f($y.$$.fragment),vUo=l(),Tme=a("p"),TUo=o("Instantiates one of the base model classes of the library from a configuration."),FUo=l(),pc=a("p"),CUo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),MUo=o("not"),EUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),yUo=o("from_pretrained()"),wUo=o("to load the model weights."),AUo=l(),Mme=a("p"),LUo=o("Examples:"),BUo=l(),f(Iy.$$.fragment),xUo=l(),ho=a("div"),f(jy.$$.fragment),kUo=l(),Eme=a("p"),RUo=o("Instantiate one of the base model classes of the library from a pretrained model."),SUo=l(),_n=a("p"),PUo=o("The model class to instantiate is selected based on the "),yme=a("code"),$Uo=o("model_type"),IUo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),jUo=o("pretrained_model_name_or_path"),DUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),NUo=o("pretrained_model_name_or_path"),qUo=o(":"),OUo=l(),B=a("ul"),l6=a("li"),Lme=a("strong"),GUo=o("albert"),XUo=o(" \u2014 "),lq=a("a"),VUo=o("TFAlbertModel"),zUo=o(" (ALBERT model)"),WUo=l(),i6=a("li"),Bme=a("strong"),QUo=o("bart"),HUo=o(" \u2014 "),iq=a("a"),UUo=o("TFBartModel"),JUo=o(" (BART model)"),YUo=l(),d6=a("li"),xme=a("strong"),KUo=o("bert"),ZUo=o(" \u2014 "),dq=a("a"),eJo=o("TFBertModel"),oJo=o(" (BERT model)"),rJo=l(),c6=a("li"),kme=a("strong"),tJo=o("blenderbot"),aJo=o(" \u2014 "),cq=a("a"),nJo=o("TFBlenderbotModel"),sJo=o(" (Blenderbot model)"),lJo=l(),f6=a("li"),Rme=a("strong"),iJo=o("blenderbot-small"),dJo=o(" \u2014 "),fq=a("a"),cJo=o("TFBlenderbotSmallModel"),fJo=o(" (BlenderbotSmall model)"),mJo=l(),m6=a("li"),Sme=a("strong"),gJo=o("camembert"),hJo=o(" \u2014 "),mq=a("a"),pJo=o("TFCamembertModel"),_Jo=o(" (CamemBERT model)"),uJo=l(),g6=a("li"),Pme=a("strong"),bJo=o("clip"),vJo=o(" \u2014 "),gq=a("a"),TJo=o("TFCLIPModel"),FJo=o(" (CLIP model)"),CJo=l(),h6=a("li"),$me=a("strong"),MJo=o("convbert"),EJo=o(" \u2014 "),hq=a("a"),yJo=o("TFConvBertModel"),wJo=o(" (ConvBERT model)"),AJo=l(),p6=a("li"),Ime=a("strong"),LJo=o("convnext"),BJo=o(" \u2014 "),pq=a("a"),xJo=o("TFConvNextModel"),kJo=o(" (ConvNext model)"),RJo=l(),_6=a("li"),jme=a("strong"),SJo=o("ctrl"),PJo=o(" \u2014 "),_q=a("a"),$Jo=o("TFCTRLModel"),IJo=o(" (CTRL model)"),jJo=l(),u6=a("li"),Dme=a("strong"),DJo=o("deberta"),NJo=o(" \u2014 "),uq=a("a"),qJo=o("TFDebertaModel"),OJo=o(" (DeBERTa model)"),GJo=l(),b6=a("li"),Nme=a("strong"),XJo=o("deberta-v2"),VJo=o(" \u2014 "),bq=a("a"),zJo=o("TFDebertaV2Model"),WJo=o(" (DeBERTa-v2 model)"),QJo=l(),v6=a("li"),qme=a("strong"),HJo=o("distilbert"),UJo=o(" \u2014 "),vq=a("a"),JJo=o("TFDistilBertModel"),YJo=o(" (DistilBERT model)"),KJo=l(),T6=a("li"),Ome=a("strong"),ZJo=o("dpr"),eYo=o(" \u2014 "),Tq=a("a"),oYo=o("TFDPRQuestionEncoder"),rYo=o(" (DPR model)"),tYo=l(),F6=a("li"),Gme=a("strong"),aYo=o("electra"),nYo=o(" \u2014 "),Fq=a("a"),sYo=o("TFElectraModel"),lYo=o(" (ELECTRA model)"),iYo=l(),C6=a("li"),Xme=a("strong"),dYo=o("flaubert"),cYo=o(" \u2014 "),Cq=a("a"),fYo=o("TFFlaubertModel"),mYo=o(" (FlauBERT model)"),gYo=l(),Os=a("li"),Vme=a("strong"),hYo=o("funnel"),pYo=o(" \u2014 "),Mq=a("a"),_Yo=o("TFFunnelModel"),uYo=o(" or "),Eq=a("a"),bYo=o("TFFunnelBaseModel"),vYo=o(" (Funnel Transformer model)"),TYo=l(),M6=a("li"),zme=a("strong"),FYo=o("gpt2"),CYo=o(" \u2014 "),yq=a("a"),MYo=o("TFGPT2Model"),EYo=o(" (OpenAI GPT-2 model)"),yYo=l(),E6=a("li"),Wme=a("strong"),wYo=o("hubert"),AYo=o(" \u2014 "),wq=a("a"),LYo=o("TFHubertModel"),BYo=o(" (Hubert model)"),xYo=l(),y6=a("li"),Qme=a("strong"),kYo=o("layoutlm"),RYo=o(" \u2014 "),Aq=a("a"),SYo=o("TFLayoutLMModel"),PYo=o(" (LayoutLM model)"),$Yo=l(),w6=a("li"),Hme=a("strong"),IYo=o("led"),jYo=o(" \u2014 "),Lq=a("a"),DYo=o("TFLEDModel"),NYo=o(" (LED model)"),qYo=l(),A6=a("li"),Ume=a("strong"),OYo=o("longformer"),GYo=o(" \u2014 "),Bq=a("a"),XYo=o("TFLongformerModel"),VYo=o(" (Longformer model)"),zYo=l(),L6=a("li"),Jme=a("strong"),WYo=o("lxmert"),QYo=o(" \u2014 "),xq=a("a"),HYo=o("TFLxmertModel"),UYo=o(" (LXMERT model)"),JYo=l(),B6=a("li"),Yme=a("strong"),YYo=o("marian"),KYo=o(" \u2014 "),kq=a("a"),ZYo=o("TFMarianModel"),eKo=o(" (Marian model)"),oKo=l(),x6=a("li"),Kme=a("strong"),rKo=o("mbart"),tKo=o(" \u2014 "),Rq=a("a"),aKo=o("TFMBartModel"),nKo=o(" (mBART model)"),sKo=l(),k6=a("li"),Zme=a("strong"),lKo=o("mobilebert"),iKo=o(" \u2014 "),Sq=a("a"),dKo=o("TFMobileBertModel"),cKo=o(" (MobileBERT model)"),fKo=l(),R6=a("li"),ege=a("strong"),mKo=o("mpnet"),gKo=o(" \u2014 "),Pq=a("a"),hKo=o("TFMPNetModel"),pKo=o(" (MPNet model)"),_Ko=l(),S6=a("li"),oge=a("strong"),uKo=o("mt5"),bKo=o(" \u2014 "),$q=a("a"),vKo=o("TFMT5Model"),TKo=o(" (mT5 model)"),FKo=l(),P6=a("li"),rge=a("strong"),CKo=o("openai-gpt"),MKo=o(" \u2014 "),Iq=a("a"),EKo=o("TFOpenAIGPTModel"),yKo=o(" (OpenAI GPT model)"),wKo=l(),$6=a("li"),tge=a("strong"),AKo=o("pegasus"),LKo=o(" \u2014 "),jq=a("a"),BKo=o("TFPegasusModel"),xKo=o(" (Pegasus model)"),kKo=l(),I6=a("li"),age=a("strong"),RKo=o("rembert"),SKo=o(" \u2014 "),Dq=a("a"),PKo=o("TFRemBertModel"),$Ko=o(" (RemBERT model)"),IKo=l(),j6=a("li"),nge=a("strong"),jKo=o("roberta"),DKo=o(" \u2014 "),Nq=a("a"),NKo=o("TFRobertaModel"),qKo=o(" (RoBERTa model)"),OKo=l(),D6=a("li"),sge=a("strong"),GKo=o("roformer"),XKo=o(" \u2014 "),qq=a("a"),VKo=o("TFRoFormerModel"),zKo=o(" (RoFormer model)"),WKo=l(),N6=a("li"),lge=a("strong"),QKo=o("speech_to_text"),HKo=o(" \u2014 "),Oq=a("a"),UKo=o("TFSpeech2TextModel"),JKo=o(" (Speech2Text model)"),YKo=l(),q6=a("li"),ige=a("strong"),KKo=o("t5"),ZKo=o(" \u2014 "),Gq=a("a"),eZo=o("TFT5Model"),oZo=o(" (T5 model)"),rZo=l(),O6=a("li"),dge=a("strong"),tZo=o("tapas"),aZo=o(" \u2014 "),Xq=a("a"),nZo=o("TFTapasModel"),sZo=o(" (TAPAS model)"),lZo=l(),G6=a("li"),cge=a("strong"),iZo=o("transfo-xl"),dZo=o(" \u2014 "),Vq=a("a"),cZo=o("TFTransfoXLModel"),fZo=o(" (Transformer-XL model)"),mZo=l(),X6=a("li"),fge=a("strong"),gZo=o("vit"),hZo=o(" \u2014 "),zq=a("a"),pZo=o("TFViTModel"),_Zo=o(" (ViT model)"),uZo=l(),V6=a("li"),mge=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),Wq=a("a"),TZo=o("TFWav2Vec2Model"),FZo=o(" (Wav2Vec2 model)"),CZo=l(),z6=a("li"),gge=a("strong"),MZo=o("xlm"),EZo=o(" \u2014 "),Qq=a("a"),yZo=o("TFXLMModel"),wZo=o(" (XLM model)"),AZo=l(),W6=a("li"),hge=a("strong"),LZo=o("xlm-roberta"),BZo=o(" \u2014 "),Hq=a("a"),xZo=o("TFXLMRobertaModel"),kZo=o(" (XLM-RoBERTa model)"),RZo=l(),Q6=a("li"),pge=a("strong"),SZo=o("xlnet"),PZo=o(" \u2014 "),Uq=a("a"),$Zo=o("TFXLNetModel"),IZo=o(" (XLNet model)"),jZo=l(),_ge=a("p"),DZo=o("Examples:"),NZo=l(),f(Dy.$$.fragment),Bke=l(),_c=a("h2"),H6=a("a"),uge=a("span"),f(Ny.$$.fragment),qZo=l(),bge=a("span"),OZo=o("TFAutoModelForPreTraining"),xke=l(),Tr=a("div"),f(qy.$$.fragment),GZo=l(),uc=a("p"),XZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vge=a("code"),VZo=o("from_pretrained()"),zZo=o("class method or the "),Tge=a("code"),WZo=o("from_config()"),QZo=o(`class
method.`),HZo=l(),Oy=a("p"),UZo=o("This class cannot be instantiated directly using "),Fge=a("code"),JZo=o("__init__()"),YZo=o(" (throws an error)."),KZo=l(),ht=a("div"),f(Gy.$$.fragment),ZZo=l(),Cge=a("p"),eer=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oer=l(),bc=a("p"),rer=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),ter=o("not"),aer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ege=a("code"),ner=o("from_pretrained()"),ser=o("to load the model weights."),ler=l(),yge=a("p"),ier=o("Examples:"),der=l(),f(Xy.$$.fragment),cer=l(),po=a("div"),f(Vy.$$.fragment),fer=l(),wge=a("p"),mer=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ger=l(),un=a("p"),her=o("The model class to instantiate is selected based on the "),Age=a("code"),per=o("model_type"),_er=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),uer=o("pretrained_model_name_or_path"),ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),ver=o("pretrained_model_name_or_path"),Ter=o(":"),Fer=l(),H=a("ul"),U6=a("li"),xge=a("strong"),Cer=o("albert"),Mer=o(" \u2014 "),Jq=a("a"),Eer=o("TFAlbertForPreTraining"),yer=o(" (ALBERT model)"),wer=l(),J6=a("li"),kge=a("strong"),Aer=o("bart"),Ler=o(" \u2014 "),Yq=a("a"),Ber=o("TFBartForConditionalGeneration"),xer=o(" (BART model)"),ker=l(),Y6=a("li"),Rge=a("strong"),Rer=o("bert"),Ser=o(" \u2014 "),Kq=a("a"),Per=o("TFBertForPreTraining"),$er=o(" (BERT model)"),Ier=l(),K6=a("li"),Sge=a("strong"),jer=o("camembert"),Der=o(" \u2014 "),Zq=a("a"),Ner=o("TFCamembertForMaskedLM"),qer=o(" (CamemBERT model)"),Oer=l(),Z6=a("li"),Pge=a("strong"),Ger=o("ctrl"),Xer=o(" \u2014 "),eO=a("a"),Ver=o("TFCTRLLMHeadModel"),zer=o(" (CTRL model)"),Wer=l(),eT=a("li"),$ge=a("strong"),Qer=o("distilbert"),Her=o(" \u2014 "),oO=a("a"),Uer=o("TFDistilBertForMaskedLM"),Jer=o(" (DistilBERT model)"),Yer=l(),oT=a("li"),Ige=a("strong"),Ker=o("electra"),Zer=o(" \u2014 "),rO=a("a"),eor=o("TFElectraForPreTraining"),oor=o(" (ELECTRA model)"),ror=l(),rT=a("li"),jge=a("strong"),tor=o("flaubert"),aor=o(" \u2014 "),tO=a("a"),nor=o("TFFlaubertWithLMHeadModel"),sor=o(" (FlauBERT model)"),lor=l(),tT=a("li"),Dge=a("strong"),ior=o("funnel"),dor=o(" \u2014 "),aO=a("a"),cor=o("TFFunnelForPreTraining"),mor=o(" (Funnel Transformer model)"),gor=l(),aT=a("li"),Nge=a("strong"),hor=o("gpt2"),por=o(" \u2014 "),nO=a("a"),_or=o("TFGPT2LMHeadModel"),uor=o(" (OpenAI GPT-2 model)"),bor=l(),nT=a("li"),qge=a("strong"),vor=o("layoutlm"),Tor=o(" \u2014 "),sO=a("a"),For=o("TFLayoutLMForMaskedLM"),Cor=o(" (LayoutLM model)"),Mor=l(),sT=a("li"),Oge=a("strong"),Eor=o("lxmert"),yor=o(" \u2014 "),lO=a("a"),wor=o("TFLxmertForPreTraining"),Aor=o(" (LXMERT model)"),Lor=l(),lT=a("li"),Gge=a("strong"),Bor=o("mobilebert"),xor=o(" \u2014 "),iO=a("a"),kor=o("TFMobileBertForPreTraining"),Ror=o(" (MobileBERT model)"),Sor=l(),iT=a("li"),Xge=a("strong"),Por=o("mpnet"),$or=o(" \u2014 "),dO=a("a"),Ior=o("TFMPNetForMaskedLM"),jor=o(" (MPNet model)"),Dor=l(),dT=a("li"),Vge=a("strong"),Nor=o("openai-gpt"),qor=o(" \u2014 "),cO=a("a"),Oor=o("TFOpenAIGPTLMHeadModel"),Gor=o(" (OpenAI GPT model)"),Xor=l(),cT=a("li"),zge=a("strong"),Vor=o("roberta"),zor=o(" \u2014 "),fO=a("a"),Wor=o("TFRobertaForMaskedLM"),Qor=o(" (RoBERTa model)"),Hor=l(),fT=a("li"),Wge=a("strong"),Uor=o("t5"),Jor=o(" \u2014 "),mO=a("a"),Yor=o("TFT5ForConditionalGeneration"),Kor=o(" (T5 model)"),Zor=l(),mT=a("li"),Qge=a("strong"),err=o("tapas"),orr=o(" \u2014 "),gO=a("a"),rrr=o("TFTapasForMaskedLM"),trr=o(" (TAPAS model)"),arr=l(),gT=a("li"),Hge=a("strong"),nrr=o("transfo-xl"),srr=o(" \u2014 "),hO=a("a"),lrr=o("TFTransfoXLLMHeadModel"),irr=o(" (Transformer-XL model)"),drr=l(),hT=a("li"),Uge=a("strong"),crr=o("xlm"),frr=o(" \u2014 "),pO=a("a"),mrr=o("TFXLMWithLMHeadModel"),grr=o(" (XLM model)"),hrr=l(),pT=a("li"),Jge=a("strong"),prr=o("xlm-roberta"),_rr=o(" \u2014 "),_O=a("a"),urr=o("TFXLMRobertaForMaskedLM"),brr=o(" (XLM-RoBERTa model)"),vrr=l(),_T=a("li"),Yge=a("strong"),Trr=o("xlnet"),Frr=o(" \u2014 "),uO=a("a"),Crr=o("TFXLNetLMHeadModel"),Mrr=o(" (XLNet model)"),Err=l(),Kge=a("p"),yrr=o("Examples:"),wrr=l(),f(zy.$$.fragment),kke=l(),vc=a("h2"),uT=a("a"),Zge=a("span"),f(Wy.$$.fragment),Arr=l(),ehe=a("span"),Lrr=o("TFAutoModelForCausalLM"),Rke=l(),Fr=a("div"),f(Qy.$$.fragment),Brr=l(),Tc=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ohe=a("code"),krr=o("from_pretrained()"),Rrr=o("class method or the "),rhe=a("code"),Srr=o("from_config()"),Prr=o(`class
method.`),$rr=l(),Hy=a("p"),Irr=o("This class cannot be instantiated directly using "),the=a("code"),jrr=o("__init__()"),Drr=o(" (throws an error)."),Nrr=l(),pt=a("div"),f(Uy.$$.fragment),qrr=l(),ahe=a("p"),Orr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Grr=l(),Fc=a("p"),Xrr=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),Vrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),she=a("code"),Wrr=o("from_pretrained()"),Qrr=o("to load the model weights."),Hrr=l(),lhe=a("p"),Urr=o("Examples:"),Jrr=l(),f(Jy.$$.fragment),Yrr=l(),_o=a("div"),f(Yy.$$.fragment),Krr=l(),ihe=a("p"),Zrr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),etr=l(),bn=a("p"),otr=o("The model class to instantiate is selected based on the "),dhe=a("code"),rtr=o("model_type"),ttr=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),str=o("pretrained_model_name_or_path"),ltr=o(":"),itr=l(),me=a("ul"),bT=a("li"),mhe=a("strong"),dtr=o("bert"),ctr=o(" \u2014 "),bO=a("a"),ftr=o("TFBertLMHeadModel"),mtr=o(" (BERT model)"),gtr=l(),vT=a("li"),ghe=a("strong"),htr=o("camembert"),ptr=o(" \u2014 "),vO=a("a"),_tr=o("TFCamembertForCausalLM"),utr=o(" (CamemBERT model)"),btr=l(),TT=a("li"),hhe=a("strong"),vtr=o("ctrl"),Ttr=o(" \u2014 "),TO=a("a"),Ftr=o("TFCTRLLMHeadModel"),Ctr=o(" (CTRL model)"),Mtr=l(),FT=a("li"),phe=a("strong"),Etr=o("gpt2"),ytr=o(" \u2014 "),FO=a("a"),wtr=o("TFGPT2LMHeadModel"),Atr=o(" (OpenAI GPT-2 model)"),Ltr=l(),CT=a("li"),_he=a("strong"),Btr=o("openai-gpt"),xtr=o(" \u2014 "),CO=a("a"),ktr=o("TFOpenAIGPTLMHeadModel"),Rtr=o(" (OpenAI GPT model)"),Str=l(),MT=a("li"),uhe=a("strong"),Ptr=o("rembert"),$tr=o(" \u2014 "),MO=a("a"),Itr=o("TFRemBertForCausalLM"),jtr=o(" (RemBERT model)"),Dtr=l(),ET=a("li"),bhe=a("strong"),Ntr=o("roberta"),qtr=o(" \u2014 "),EO=a("a"),Otr=o("TFRobertaForCausalLM"),Gtr=o(" (RoBERTa model)"),Xtr=l(),yT=a("li"),vhe=a("strong"),Vtr=o("roformer"),ztr=o(" \u2014 "),yO=a("a"),Wtr=o("TFRoFormerForCausalLM"),Qtr=o(" (RoFormer model)"),Htr=l(),wT=a("li"),The=a("strong"),Utr=o("transfo-xl"),Jtr=o(" \u2014 "),wO=a("a"),Ytr=o("TFTransfoXLLMHeadModel"),Ktr=o(" (Transformer-XL model)"),Ztr=l(),AT=a("li"),Fhe=a("strong"),ear=o("xlm"),oar=o(" \u2014 "),AO=a("a"),rar=o("TFXLMWithLMHeadModel"),tar=o(" (XLM model)"),aar=l(),LT=a("li"),Che=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),LO=a("a"),lar=o("TFXLNetLMHeadModel"),iar=o(" (XLNet model)"),dar=l(),Mhe=a("p"),car=o("Examples:"),far=l(),f(Ky.$$.fragment),Ske=l(),Cc=a("h2"),BT=a("a"),Ehe=a("span"),f(Zy.$$.fragment),mar=l(),yhe=a("span"),gar=o("TFAutoModelForImageClassification"),Pke=l(),Cr=a("div"),f(ew.$$.fragment),har=l(),Mc=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),whe=a("code"),_ar=o("from_pretrained()"),uar=o("class method or the "),Ahe=a("code"),bar=o("from_config()"),Tar=o(`class
method.`),Far=l(),ow=a("p"),Car=o("This class cannot be instantiated directly using "),Lhe=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),yar=l(),_t=a("div"),f(rw.$$.fragment),war=l(),Bhe=a("p"),Aar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lar=l(),Ec=a("p"),Bar=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),xar=o("not"),kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),khe=a("code"),Rar=o("from_pretrained()"),Sar=o("to load the model weights."),Par=l(),Rhe=a("p"),$ar=o("Examples:"),Iar=l(),f(tw.$$.fragment),jar=l(),uo=a("div"),f(aw.$$.fragment),Dar=l(),She=a("p"),Nar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qar=l(),vn=a("p"),Oar=o("The model class to instantiate is selected based on the "),Phe=a("code"),Gar=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),Var=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),nw=a("ul"),xT=a("li"),jhe=a("strong"),Uar=o("convnext"),Jar=o(" \u2014 "),BO=a("a"),Yar=o("TFConvNextForImageClassification"),Kar=o(" (ConvNext model)"),Zar=l(),kT=a("li"),Dhe=a("strong"),enr=o("vit"),onr=o(" \u2014 "),xO=a("a"),rnr=o("TFViTForImageClassification"),tnr=o(" (ViT model)"),anr=l(),Nhe=a("p"),nnr=o("Examples:"),snr=l(),f(sw.$$.fragment),$ke=l(),yc=a("h2"),RT=a("a"),qhe=a("span"),f(lw.$$.fragment),lnr=l(),Ohe=a("span"),inr=o("TFAutoModelForMaskedLM"),Ike=l(),Mr=a("div"),f(iw.$$.fragment),dnr=l(),wc=a("p"),cnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ghe=a("code"),fnr=o("from_pretrained()"),mnr=o("class method or the "),Xhe=a("code"),gnr=o("from_config()"),hnr=o(`class
method.`),pnr=l(),dw=a("p"),_nr=o("This class cannot be instantiated directly using "),Vhe=a("code"),unr=o("__init__()"),bnr=o(" (throws an error)."),vnr=l(),ut=a("div"),f(cw.$$.fragment),Tnr=l(),zhe=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cnr=l(),Ac=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),Enr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=a("code"),wnr=o("from_pretrained()"),Anr=o("to load the model weights."),Lnr=l(),Hhe=a("p"),Bnr=o("Examples:"),xnr=l(),f(fw.$$.fragment),knr=l(),bo=a("div"),f(mw.$$.fragment),Rnr=l(),Uhe=a("p"),Snr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pnr=l(),Tn=a("p"),$nr=o("The model class to instantiate is selected based on the "),Jhe=a("code"),Inr=o("model_type"),jnr=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),Dnr=o("pretrained_model_name_or_path"),Nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),qnr=o("pretrained_model_name_or_path"),Onr=o(":"),Gnr=l(),Y=a("ul"),ST=a("li"),Zhe=a("strong"),Xnr=o("albert"),Vnr=o(" \u2014 "),kO=a("a"),znr=o("TFAlbertForMaskedLM"),Wnr=o(" (ALBERT model)"),Qnr=l(),PT=a("li"),epe=a("strong"),Hnr=o("bert"),Unr=o(" \u2014 "),RO=a("a"),Jnr=o("TFBertForMaskedLM"),Ynr=o(" (BERT model)"),Knr=l(),$T=a("li"),ope=a("strong"),Znr=o("camembert"),esr=o(" \u2014 "),SO=a("a"),osr=o("TFCamembertForMaskedLM"),rsr=o(" (CamemBERT model)"),tsr=l(),IT=a("li"),rpe=a("strong"),asr=o("convbert"),nsr=o(" \u2014 "),PO=a("a"),ssr=o("TFConvBertForMaskedLM"),lsr=o(" (ConvBERT model)"),isr=l(),jT=a("li"),tpe=a("strong"),dsr=o("deberta"),csr=o(" \u2014 "),$O=a("a"),fsr=o("TFDebertaForMaskedLM"),msr=o(" (DeBERTa model)"),gsr=l(),DT=a("li"),ape=a("strong"),hsr=o("deberta-v2"),psr=o(" \u2014 "),IO=a("a"),_sr=o("TFDebertaV2ForMaskedLM"),usr=o(" (DeBERTa-v2 model)"),bsr=l(),NT=a("li"),npe=a("strong"),vsr=o("distilbert"),Tsr=o(" \u2014 "),jO=a("a"),Fsr=o("TFDistilBertForMaskedLM"),Csr=o(" (DistilBERT model)"),Msr=l(),qT=a("li"),spe=a("strong"),Esr=o("electra"),ysr=o(" \u2014 "),DO=a("a"),wsr=o("TFElectraForMaskedLM"),Asr=o(" (ELECTRA model)"),Lsr=l(),OT=a("li"),lpe=a("strong"),Bsr=o("flaubert"),xsr=o(" \u2014 "),NO=a("a"),ksr=o("TFFlaubertWithLMHeadModel"),Rsr=o(" (FlauBERT model)"),Ssr=l(),GT=a("li"),ipe=a("strong"),Psr=o("funnel"),$sr=o(" \u2014 "),qO=a("a"),Isr=o("TFFunnelForMaskedLM"),jsr=o(" (Funnel Transformer model)"),Dsr=l(),XT=a("li"),dpe=a("strong"),Nsr=o("layoutlm"),qsr=o(" \u2014 "),OO=a("a"),Osr=o("TFLayoutLMForMaskedLM"),Gsr=o(" (LayoutLM model)"),Xsr=l(),VT=a("li"),cpe=a("strong"),Vsr=o("longformer"),zsr=o(" \u2014 "),GO=a("a"),Wsr=o("TFLongformerForMaskedLM"),Qsr=o(" (Longformer model)"),Hsr=l(),zT=a("li"),fpe=a("strong"),Usr=o("mobilebert"),Jsr=o(" \u2014 "),XO=a("a"),Ysr=o("TFMobileBertForMaskedLM"),Ksr=o(" (MobileBERT model)"),Zsr=l(),WT=a("li"),mpe=a("strong"),elr=o("mpnet"),olr=o(" \u2014 "),VO=a("a"),rlr=o("TFMPNetForMaskedLM"),tlr=o(" (MPNet model)"),alr=l(),QT=a("li"),gpe=a("strong"),nlr=o("rembert"),slr=o(" \u2014 "),zO=a("a"),llr=o("TFRemBertForMaskedLM"),ilr=o(" (RemBERT model)"),dlr=l(),HT=a("li"),hpe=a("strong"),clr=o("roberta"),flr=o(" \u2014 "),WO=a("a"),mlr=o("TFRobertaForMaskedLM"),glr=o(" (RoBERTa model)"),hlr=l(),UT=a("li"),ppe=a("strong"),plr=o("roformer"),_lr=o(" \u2014 "),QO=a("a"),ulr=o("TFRoFormerForMaskedLM"),blr=o(" (RoFormer model)"),vlr=l(),JT=a("li"),_pe=a("strong"),Tlr=o("tapas"),Flr=o(" \u2014 "),HO=a("a"),Clr=o("TFTapasForMaskedLM"),Mlr=o(" (TAPAS model)"),Elr=l(),YT=a("li"),upe=a("strong"),ylr=o("xlm"),wlr=o(" \u2014 "),UO=a("a"),Alr=o("TFXLMWithLMHeadModel"),Llr=o(" (XLM model)"),Blr=l(),KT=a("li"),bpe=a("strong"),xlr=o("xlm-roberta"),klr=o(" \u2014 "),JO=a("a"),Rlr=o("TFXLMRobertaForMaskedLM"),Slr=o(" (XLM-RoBERTa model)"),Plr=l(),vpe=a("p"),$lr=o("Examples:"),Ilr=l(),f(gw.$$.fragment),jke=l(),Lc=a("h2"),ZT=a("a"),Tpe=a("span"),f(hw.$$.fragment),jlr=l(),Fpe=a("span"),Dlr=o("TFAutoModelForSeq2SeqLM"),Dke=l(),Er=a("div"),f(pw.$$.fragment),Nlr=l(),Bc=a("p"),qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cpe=a("code"),Olr=o("from_pretrained()"),Glr=o("class method or the "),Mpe=a("code"),Xlr=o("from_config()"),Vlr=o(`class
method.`),zlr=l(),_w=a("p"),Wlr=o("This class cannot be instantiated directly using "),Epe=a("code"),Qlr=o("__init__()"),Hlr=o(" (throws an error)."),Ulr=l(),bt=a("div"),f(uw.$$.fragment),Jlr=l(),ype=a("p"),Ylr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Klr=l(),xc=a("p"),Zlr=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),eir=o("not"),oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=a("code"),rir=o("from_pretrained()"),tir=o("to load the model weights."),air=l(),Lpe=a("p"),nir=o("Examples:"),sir=l(),f(bw.$$.fragment),lir=l(),vo=a("div"),f(vw.$$.fragment),iir=l(),Bpe=a("p"),dir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cir=l(),Fn=a("p"),fir=o("The model class to instantiate is selected based on the "),xpe=a("code"),mir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(":"),bir=l(),ue=a("ul"),e7=a("li"),Spe=a("strong"),vir=o("bart"),Tir=o(" \u2014 "),YO=a("a"),Fir=o("TFBartForConditionalGeneration"),Cir=o(" (BART model)"),Mir=l(),o7=a("li"),Ppe=a("strong"),Eir=o("blenderbot"),yir=o(" \u2014 "),KO=a("a"),wir=o("TFBlenderbotForConditionalGeneration"),Air=o(" (Blenderbot model)"),Lir=l(),r7=a("li"),$pe=a("strong"),Bir=o("blenderbot-small"),xir=o(" \u2014 "),ZO=a("a"),kir=o("TFBlenderbotSmallForConditionalGeneration"),Rir=o(" (BlenderbotSmall model)"),Sir=l(),t7=a("li"),Ipe=a("strong"),Pir=o("encoder-decoder"),$ir=o(" \u2014 "),eG=a("a"),Iir=o("TFEncoderDecoderModel"),jir=o(" (Encoder decoder model)"),Dir=l(),a7=a("li"),jpe=a("strong"),Nir=o("led"),qir=o(" \u2014 "),oG=a("a"),Oir=o("TFLEDForConditionalGeneration"),Gir=o(" (LED model)"),Xir=l(),n7=a("li"),Dpe=a("strong"),Vir=o("marian"),zir=o(" \u2014 "),rG=a("a"),Wir=o("TFMarianMTModel"),Qir=o(" (Marian model)"),Hir=l(),s7=a("li"),Npe=a("strong"),Uir=o("mbart"),Jir=o(" \u2014 "),tG=a("a"),Yir=o("TFMBartForConditionalGeneration"),Kir=o(" (mBART model)"),Zir=l(),l7=a("li"),qpe=a("strong"),edr=o("mt5"),odr=o(" \u2014 "),aG=a("a"),rdr=o("TFMT5ForConditionalGeneration"),tdr=o(" (mT5 model)"),adr=l(),i7=a("li"),Ope=a("strong"),ndr=o("pegasus"),sdr=o(" \u2014 "),nG=a("a"),ldr=o("TFPegasusForConditionalGeneration"),idr=o(" (Pegasus model)"),ddr=l(),d7=a("li"),Gpe=a("strong"),cdr=o("t5"),fdr=o(" \u2014 "),sG=a("a"),mdr=o("TFT5ForConditionalGeneration"),gdr=o(" (T5 model)"),hdr=l(),Xpe=a("p"),pdr=o("Examples:"),_dr=l(),f(Tw.$$.fragment),Nke=l(),kc=a("h2"),c7=a("a"),Vpe=a("span"),f(Fw.$$.fragment),udr=l(),zpe=a("span"),bdr=o("TFAutoModelForSequenceClassification"),qke=l(),yr=a("div"),f(Cw.$$.fragment),vdr=l(),Rc=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wpe=a("code"),Fdr=o("from_pretrained()"),Cdr=o("class method or the "),Qpe=a("code"),Mdr=o("from_config()"),Edr=o(`class
method.`),ydr=l(),Mw=a("p"),wdr=o("This class cannot be instantiated directly using "),Hpe=a("code"),Adr=o("__init__()"),Ldr=o(" (throws an error)."),Bdr=l(),vt=a("div"),f(Ew.$$.fragment),xdr=l(),Upe=a("p"),kdr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rdr=l(),Sc=a("p"),Sdr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),Pdr=o("not"),$dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=a("code"),Idr=o("from_pretrained()"),jdr=o("to load the model weights."),Ddr=l(),Kpe=a("p"),Ndr=o("Examples:"),qdr=l(),f(yw.$$.fragment),Odr=l(),To=a("div"),f(ww.$$.fragment),Gdr=l(),Zpe=a("p"),Xdr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vdr=l(),Cn=a("p"),zdr=o("The model class to instantiate is selected based on the "),e_e=a("code"),Wdr=o("model_type"),Qdr=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),Hdr=o("pretrained_model_name_or_path"),Udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Jdr=o("pretrained_model_name_or_path"),Ydr=o(":"),Kdr=l(),V=a("ul"),f7=a("li"),t_e=a("strong"),Zdr=o("albert"),ecr=o(" \u2014 "),lG=a("a"),ocr=o("TFAlbertForSequenceClassification"),rcr=o(" (ALBERT model)"),tcr=l(),m7=a("li"),a_e=a("strong"),acr=o("bert"),ncr=o(" \u2014 "),iG=a("a"),scr=o("TFBertForSequenceClassification"),lcr=o(" (BERT model)"),icr=l(),g7=a("li"),n_e=a("strong"),dcr=o("camembert"),ccr=o(" \u2014 "),dG=a("a"),fcr=o("TFCamembertForSequenceClassification"),mcr=o(" (CamemBERT model)"),gcr=l(),h7=a("li"),s_e=a("strong"),hcr=o("convbert"),pcr=o(" \u2014 "),cG=a("a"),_cr=o("TFConvBertForSequenceClassification"),ucr=o(" (ConvBERT model)"),bcr=l(),p7=a("li"),l_e=a("strong"),vcr=o("ctrl"),Tcr=o(" \u2014 "),fG=a("a"),Fcr=o("TFCTRLForSequenceClassification"),Ccr=o(" (CTRL model)"),Mcr=l(),_7=a("li"),i_e=a("strong"),Ecr=o("deberta"),ycr=o(" \u2014 "),mG=a("a"),wcr=o("TFDebertaForSequenceClassification"),Acr=o(" (DeBERTa model)"),Lcr=l(),u7=a("li"),d_e=a("strong"),Bcr=o("deberta-v2"),xcr=o(" \u2014 "),gG=a("a"),kcr=o("TFDebertaV2ForSequenceClassification"),Rcr=o(" (DeBERTa-v2 model)"),Scr=l(),b7=a("li"),c_e=a("strong"),Pcr=o("distilbert"),$cr=o(" \u2014 "),hG=a("a"),Icr=o("TFDistilBertForSequenceClassification"),jcr=o(" (DistilBERT model)"),Dcr=l(),v7=a("li"),f_e=a("strong"),Ncr=o("electra"),qcr=o(" \u2014 "),pG=a("a"),Ocr=o("TFElectraForSequenceClassification"),Gcr=o(" (ELECTRA model)"),Xcr=l(),T7=a("li"),m_e=a("strong"),Vcr=o("flaubert"),zcr=o(" \u2014 "),_G=a("a"),Wcr=o("TFFlaubertForSequenceClassification"),Qcr=o(" (FlauBERT model)"),Hcr=l(),F7=a("li"),g_e=a("strong"),Ucr=o("funnel"),Jcr=o(" \u2014 "),uG=a("a"),Ycr=o("TFFunnelForSequenceClassification"),Kcr=o(" (Funnel Transformer model)"),Zcr=l(),C7=a("li"),h_e=a("strong"),efr=o("gpt2"),ofr=o(" \u2014 "),bG=a("a"),rfr=o("TFGPT2ForSequenceClassification"),tfr=o(" (OpenAI GPT-2 model)"),afr=l(),M7=a("li"),p_e=a("strong"),nfr=o("layoutlm"),sfr=o(" \u2014 "),vG=a("a"),lfr=o("TFLayoutLMForSequenceClassification"),ifr=o(" (LayoutLM model)"),dfr=l(),E7=a("li"),__e=a("strong"),cfr=o("longformer"),ffr=o(" \u2014 "),TG=a("a"),mfr=o("TFLongformerForSequenceClassification"),gfr=o(" (Longformer model)"),hfr=l(),y7=a("li"),u_e=a("strong"),pfr=o("mobilebert"),_fr=o(" \u2014 "),FG=a("a"),ufr=o("TFMobileBertForSequenceClassification"),bfr=o(" (MobileBERT model)"),vfr=l(),w7=a("li"),b_e=a("strong"),Tfr=o("mpnet"),Ffr=o(" \u2014 "),CG=a("a"),Cfr=o("TFMPNetForSequenceClassification"),Mfr=o(" (MPNet model)"),Efr=l(),A7=a("li"),v_e=a("strong"),yfr=o("openai-gpt"),wfr=o(" \u2014 "),MG=a("a"),Afr=o("TFOpenAIGPTForSequenceClassification"),Lfr=o(" (OpenAI GPT model)"),Bfr=l(),L7=a("li"),T_e=a("strong"),xfr=o("rembert"),kfr=o(" \u2014 "),EG=a("a"),Rfr=o("TFRemBertForSequenceClassification"),Sfr=o(" (RemBERT model)"),Pfr=l(),B7=a("li"),F_e=a("strong"),$fr=o("roberta"),Ifr=o(" \u2014 "),yG=a("a"),jfr=o("TFRobertaForSequenceClassification"),Dfr=o(" (RoBERTa model)"),Nfr=l(),x7=a("li"),C_e=a("strong"),qfr=o("roformer"),Ofr=o(" \u2014 "),wG=a("a"),Gfr=o("TFRoFormerForSequenceClassification"),Xfr=o(" (RoFormer model)"),Vfr=l(),k7=a("li"),M_e=a("strong"),zfr=o("tapas"),Wfr=o(" \u2014 "),AG=a("a"),Qfr=o("TFTapasForSequenceClassification"),Hfr=o(" (TAPAS model)"),Ufr=l(),R7=a("li"),E_e=a("strong"),Jfr=o("transfo-xl"),Yfr=o(" \u2014 "),LG=a("a"),Kfr=o("TFTransfoXLForSequenceClassification"),Zfr=o(" (Transformer-XL model)"),emr=l(),S7=a("li"),y_e=a("strong"),omr=o("xlm"),rmr=o(" \u2014 "),BG=a("a"),tmr=o("TFXLMForSequenceClassification"),amr=o(" (XLM model)"),nmr=l(),P7=a("li"),w_e=a("strong"),smr=o("xlm-roberta"),lmr=o(" \u2014 "),xG=a("a"),imr=o("TFXLMRobertaForSequenceClassification"),dmr=o(" (XLM-RoBERTa model)"),cmr=l(),$7=a("li"),A_e=a("strong"),fmr=o("xlnet"),mmr=o(" \u2014 "),kG=a("a"),gmr=o("TFXLNetForSequenceClassification"),hmr=o(" (XLNet model)"),pmr=l(),L_e=a("p"),_mr=o("Examples:"),umr=l(),f(Aw.$$.fragment),Oke=l(),Pc=a("h2"),I7=a("a"),B_e=a("span"),f(Lw.$$.fragment),bmr=l(),x_e=a("span"),vmr=o("TFAutoModelForMultipleChoice"),Gke=l(),wr=a("div"),f(Bw.$$.fragment),Tmr=l(),$c=a("p"),Fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),k_e=a("code"),Cmr=o("from_pretrained()"),Mmr=o("class method or the "),R_e=a("code"),Emr=o("from_config()"),ymr=o(`class
method.`),wmr=l(),xw=a("p"),Amr=o("This class cannot be instantiated directly using "),S_e=a("code"),Lmr=o("__init__()"),Bmr=o(" (throws an error)."),xmr=l(),Tt=a("div"),f(kw.$$.fragment),kmr=l(),P_e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Smr=l(),Ic=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),$mr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=a("code"),jmr=o("from_pretrained()"),Dmr=o("to load the model weights."),Nmr=l(),j_e=a("p"),qmr=o("Examples:"),Omr=l(),f(Rw.$$.fragment),Gmr=l(),Fo=a("div"),f(Sw.$$.fragment),Xmr=l(),D_e=a("p"),Vmr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zmr=l(),Mn=a("p"),Wmr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Qmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),ae=a("ul"),j7=a("li"),G_e=a("strong"),egr=o("albert"),ogr=o(" \u2014 "),RG=a("a"),rgr=o("TFAlbertForMultipleChoice"),tgr=o(" (ALBERT model)"),agr=l(),D7=a("li"),X_e=a("strong"),ngr=o("bert"),sgr=o(" \u2014 "),SG=a("a"),lgr=o("TFBertForMultipleChoice"),igr=o(" (BERT model)"),dgr=l(),N7=a("li"),V_e=a("strong"),cgr=o("camembert"),fgr=o(" \u2014 "),PG=a("a"),mgr=o("TFCamembertForMultipleChoice"),ggr=o(" (CamemBERT model)"),hgr=l(),q7=a("li"),z_e=a("strong"),pgr=o("convbert"),_gr=o(" \u2014 "),$G=a("a"),ugr=o("TFConvBertForMultipleChoice"),bgr=o(" (ConvBERT model)"),vgr=l(),O7=a("li"),W_e=a("strong"),Tgr=o("distilbert"),Fgr=o(" \u2014 "),IG=a("a"),Cgr=o("TFDistilBertForMultipleChoice"),Mgr=o(" (DistilBERT model)"),Egr=l(),G7=a("li"),Q_e=a("strong"),ygr=o("electra"),wgr=o(" \u2014 "),jG=a("a"),Agr=o("TFElectraForMultipleChoice"),Lgr=o(" (ELECTRA model)"),Bgr=l(),X7=a("li"),H_e=a("strong"),xgr=o("flaubert"),kgr=o(" \u2014 "),DG=a("a"),Rgr=o("TFFlaubertForMultipleChoice"),Sgr=o(" (FlauBERT model)"),Pgr=l(),V7=a("li"),U_e=a("strong"),$gr=o("funnel"),Igr=o(" \u2014 "),NG=a("a"),jgr=o("TFFunnelForMultipleChoice"),Dgr=o(" (Funnel Transformer model)"),Ngr=l(),z7=a("li"),J_e=a("strong"),qgr=o("longformer"),Ogr=o(" \u2014 "),qG=a("a"),Ggr=o("TFLongformerForMultipleChoice"),Xgr=o(" (Longformer model)"),Vgr=l(),W7=a("li"),Y_e=a("strong"),zgr=o("mobilebert"),Wgr=o(" \u2014 "),OG=a("a"),Qgr=o("TFMobileBertForMultipleChoice"),Hgr=o(" (MobileBERT model)"),Ugr=l(),Q7=a("li"),K_e=a("strong"),Jgr=o("mpnet"),Ygr=o(" \u2014 "),GG=a("a"),Kgr=o("TFMPNetForMultipleChoice"),Zgr=o(" (MPNet model)"),ehr=l(),H7=a("li"),Z_e=a("strong"),ohr=o("rembert"),rhr=o(" \u2014 "),XG=a("a"),thr=o("TFRemBertForMultipleChoice"),ahr=o(" (RemBERT model)"),nhr=l(),U7=a("li"),eue=a("strong"),shr=o("roberta"),lhr=o(" \u2014 "),VG=a("a"),ihr=o("TFRobertaForMultipleChoice"),dhr=o(" (RoBERTa model)"),chr=l(),J7=a("li"),oue=a("strong"),fhr=o("roformer"),mhr=o(" \u2014 "),zG=a("a"),ghr=o("TFRoFormerForMultipleChoice"),hhr=o(" (RoFormer model)"),phr=l(),Y7=a("li"),rue=a("strong"),_hr=o("xlm"),uhr=o(" \u2014 "),WG=a("a"),bhr=o("TFXLMForMultipleChoice"),vhr=o(" (XLM model)"),Thr=l(),K7=a("li"),tue=a("strong"),Fhr=o("xlm-roberta"),Chr=o(" \u2014 "),QG=a("a"),Mhr=o("TFXLMRobertaForMultipleChoice"),Ehr=o(" (XLM-RoBERTa model)"),yhr=l(),Z7=a("li"),aue=a("strong"),whr=o("xlnet"),Ahr=o(" \u2014 "),HG=a("a"),Lhr=o("TFXLNetForMultipleChoice"),Bhr=o(" (XLNet model)"),xhr=l(),nue=a("p"),khr=o("Examples:"),Rhr=l(),f(Pw.$$.fragment),Xke=l(),jc=a("h2"),eF=a("a"),sue=a("span"),f($w.$$.fragment),Shr=l(),lue=a("span"),Phr=o("TFAutoModelForTableQuestionAnswering"),Vke=l(),Ar=a("div"),f(Iw.$$.fragment),$hr=l(),Dc=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iue=a("code"),jhr=o("from_pretrained()"),Dhr=o("class method or the "),due=a("code"),Nhr=o("from_config()"),qhr=o(`class
method.`),Ohr=l(),jw=a("p"),Ghr=o("This class cannot be instantiated directly using "),cue=a("code"),Xhr=o("__init__()"),Vhr=o(" (throws an error)."),zhr=l(),Ft=a("div"),f(Dw.$$.fragment),Whr=l(),fue=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hhr=l(),Nc=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gue=a("code"),Khr=o("from_pretrained()"),Zhr=o("to load the model weights."),epr=l(),hue=a("p"),opr=o("Examples:"),rpr=l(),f(Nw.$$.fragment),tpr=l(),Co=a("div"),f(qw.$$.fragment),apr=l(),pue=a("p"),npr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),spr=l(),En=a("p"),lpr=o("The model class to instantiate is selected based on the "),_ue=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),vue=a("ul"),oF=a("li"),Tue=a("strong"),ppr=o("tapas"),_pr=o(" \u2014 "),UG=a("a"),upr=o("TFTapasForQuestionAnswering"),bpr=o(" (TAPAS model)"),vpr=l(),Fue=a("p"),Tpr=o("Examples:"),Fpr=l(),f(Ow.$$.fragment),zke=l(),qc=a("h2"),rF=a("a"),Cue=a("span"),f(Gw.$$.fragment),Cpr=l(),Mue=a("span"),Mpr=o("TFAutoModelForTokenClassification"),Wke=l(),Lr=a("div"),f(Xw.$$.fragment),Epr=l(),Oc=a("p"),ypr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eue=a("code"),wpr=o("from_pretrained()"),Apr=o("class method or the "),yue=a("code"),Lpr=o("from_config()"),Bpr=o(`class
method.`),xpr=l(),Vw=a("p"),kpr=o("This class cannot be instantiated directly using "),wue=a("code"),Rpr=o("__init__()"),Spr=o(" (throws an error)."),Ppr=l(),Ct=a("div"),f(zw.$$.fragment),$pr=l(),Aue=a("p"),Ipr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jpr=l(),Gc=a("p"),Dpr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Npr=o("not"),qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bue=a("code"),Opr=o("from_pretrained()"),Gpr=o("to load the model weights."),Xpr=l(),xue=a("p"),Vpr=o("Examples:"),zpr=l(),f(Ww.$$.fragment),Wpr=l(),Mo=a("div"),f(Qw.$$.fragment),Qpr=l(),kue=a("p"),Hpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Upr=l(),yn=a("p"),Jpr=o("The model class to instantiate is selected based on the "),Rue=a("code"),Ypr=o("model_type"),Kpr=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(":"),t_r=l(),K=a("ul"),tF=a("li"),$ue=a("strong"),a_r=o("albert"),n_r=o(" \u2014 "),JG=a("a"),s_r=o("TFAlbertForTokenClassification"),l_r=o(" (ALBERT model)"),i_r=l(),aF=a("li"),Iue=a("strong"),d_r=o("bert"),c_r=o(" \u2014 "),YG=a("a"),f_r=o("TFBertForTokenClassification"),m_r=o(" (BERT model)"),g_r=l(),nF=a("li"),jue=a("strong"),h_r=o("camembert"),p_r=o(" \u2014 "),KG=a("a"),__r=o("TFCamembertForTokenClassification"),u_r=o(" (CamemBERT model)"),b_r=l(),sF=a("li"),Due=a("strong"),v_r=o("convbert"),T_r=o(" \u2014 "),ZG=a("a"),F_r=o("TFConvBertForTokenClassification"),C_r=o(" (ConvBERT model)"),M_r=l(),lF=a("li"),Nue=a("strong"),E_r=o("deberta"),y_r=o(" \u2014 "),eX=a("a"),w_r=o("TFDebertaForTokenClassification"),A_r=o(" (DeBERTa model)"),L_r=l(),iF=a("li"),que=a("strong"),B_r=o("deberta-v2"),x_r=o(" \u2014 "),oX=a("a"),k_r=o("TFDebertaV2ForTokenClassification"),R_r=o(" (DeBERTa-v2 model)"),S_r=l(),dF=a("li"),Oue=a("strong"),P_r=o("distilbert"),$_r=o(" \u2014 "),rX=a("a"),I_r=o("TFDistilBertForTokenClassification"),j_r=o(" (DistilBERT model)"),D_r=l(),cF=a("li"),Gue=a("strong"),N_r=o("electra"),q_r=o(" \u2014 "),tX=a("a"),O_r=o("TFElectraForTokenClassification"),G_r=o(" (ELECTRA model)"),X_r=l(),fF=a("li"),Xue=a("strong"),V_r=o("flaubert"),z_r=o(" \u2014 "),aX=a("a"),W_r=o("TFFlaubertForTokenClassification"),Q_r=o(" (FlauBERT model)"),H_r=l(),mF=a("li"),Vue=a("strong"),U_r=o("funnel"),J_r=o(" \u2014 "),nX=a("a"),Y_r=o("TFFunnelForTokenClassification"),K_r=o(" (Funnel Transformer model)"),Z_r=l(),gF=a("li"),zue=a("strong"),eur=o("layoutlm"),our=o(" \u2014 "),sX=a("a"),rur=o("TFLayoutLMForTokenClassification"),tur=o(" (LayoutLM model)"),aur=l(),hF=a("li"),Wue=a("strong"),nur=o("longformer"),sur=o(" \u2014 "),lX=a("a"),lur=o("TFLongformerForTokenClassification"),iur=o(" (Longformer model)"),dur=l(),pF=a("li"),Que=a("strong"),cur=o("mobilebert"),fur=o(" \u2014 "),iX=a("a"),mur=o("TFMobileBertForTokenClassification"),gur=o(" (MobileBERT model)"),hur=l(),_F=a("li"),Hue=a("strong"),pur=o("mpnet"),_ur=o(" \u2014 "),dX=a("a"),uur=o("TFMPNetForTokenClassification"),bur=o(" (MPNet model)"),vur=l(),uF=a("li"),Uue=a("strong"),Tur=o("rembert"),Fur=o(" \u2014 "),cX=a("a"),Cur=o("TFRemBertForTokenClassification"),Mur=o(" (RemBERT model)"),Eur=l(),bF=a("li"),Jue=a("strong"),yur=o("roberta"),wur=o(" \u2014 "),fX=a("a"),Aur=o("TFRobertaForTokenClassification"),Lur=o(" (RoBERTa model)"),Bur=l(),vF=a("li"),Yue=a("strong"),xur=o("roformer"),kur=o(" \u2014 "),mX=a("a"),Rur=o("TFRoFormerForTokenClassification"),Sur=o(" (RoFormer model)"),Pur=l(),TF=a("li"),Kue=a("strong"),$ur=o("xlm"),Iur=o(" \u2014 "),gX=a("a"),jur=o("TFXLMForTokenClassification"),Dur=o(" (XLM model)"),Nur=l(),FF=a("li"),Zue=a("strong"),qur=o("xlm-roberta"),Our=o(" \u2014 "),hX=a("a"),Gur=o("TFXLMRobertaForTokenClassification"),Xur=o(" (XLM-RoBERTa model)"),Vur=l(),CF=a("li"),e0e=a("strong"),zur=o("xlnet"),Wur=o(" \u2014 "),pX=a("a"),Qur=o("TFXLNetForTokenClassification"),Hur=o(" (XLNet model)"),Uur=l(),o0e=a("p"),Jur=o("Examples:"),Yur=l(),f(Hw.$$.fragment),Qke=l(),Xc=a("h2"),MF=a("a"),r0e=a("span"),f(Uw.$$.fragment),Kur=l(),t0e=a("span"),Zur=o("TFAutoModelForQuestionAnswering"),Hke=l(),Br=a("div"),f(Jw.$$.fragment),e0r=l(),Vc=a("p"),o0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),a0e=a("code"),r0r=o("from_pretrained()"),t0r=o("class method or the "),n0e=a("code"),a0r=o("from_config()"),n0r=o(`class
method.`),s0r=l(),Yw=a("p"),l0r=o("This class cannot be instantiated directly using "),s0e=a("code"),i0r=o("__init__()"),d0r=o(" (throws an error)."),c0r=l(),Mt=a("div"),f(Kw.$$.fragment),f0r=l(),l0e=a("p"),m0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g0r=l(),zc=a("p"),h0r=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),p0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d0e=a("code"),u0r=o("from_pretrained()"),b0r=o("to load the model weights."),v0r=l(),c0e=a("p"),T0r=o("Examples:"),F0r=l(),f(Zw.$$.fragment),C0r=l(),Eo=a("div"),f(eA.$$.fragment),M0r=l(),f0e=a("p"),E0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y0r=l(),wn=a("p"),w0r=o("The model class to instantiate is selected based on the "),m0e=a("code"),A0r=o("model_type"),L0r=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),B0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),k0r=o("pretrained_model_name_or_path"),R0r=o(":"),S0r=l(),Z=a("ul"),EF=a("li"),p0e=a("strong"),P0r=o("albert"),$0r=o(" \u2014 "),_X=a("a"),I0r=o("TFAlbertForQuestionAnswering"),j0r=o(" (ALBERT model)"),D0r=l(),yF=a("li"),_0e=a("strong"),N0r=o("bert"),q0r=o(" \u2014 "),uX=a("a"),O0r=o("TFBertForQuestionAnswering"),G0r=o(" (BERT model)"),X0r=l(),wF=a("li"),u0e=a("strong"),V0r=o("camembert"),z0r=o(" \u2014 "),bX=a("a"),W0r=o("TFCamembertForQuestionAnswering"),Q0r=o(" (CamemBERT model)"),H0r=l(),AF=a("li"),b0e=a("strong"),U0r=o("convbert"),J0r=o(" \u2014 "),vX=a("a"),Y0r=o("TFConvBertForQuestionAnswering"),K0r=o(" (ConvBERT model)"),Z0r=l(),LF=a("li"),v0e=a("strong"),e1r=o("deberta"),o1r=o(" \u2014 "),TX=a("a"),r1r=o("TFDebertaForQuestionAnswering"),t1r=o(" (DeBERTa model)"),a1r=l(),BF=a("li"),T0e=a("strong"),n1r=o("deberta-v2"),s1r=o(" \u2014 "),FX=a("a"),l1r=o("TFDebertaV2ForQuestionAnswering"),i1r=o(" (DeBERTa-v2 model)"),d1r=l(),xF=a("li"),F0e=a("strong"),c1r=o("distilbert"),f1r=o(" \u2014 "),CX=a("a"),m1r=o("TFDistilBertForQuestionAnswering"),g1r=o(" (DistilBERT model)"),h1r=l(),kF=a("li"),C0e=a("strong"),p1r=o("electra"),_1r=o(" \u2014 "),MX=a("a"),u1r=o("TFElectraForQuestionAnswering"),b1r=o(" (ELECTRA model)"),v1r=l(),RF=a("li"),M0e=a("strong"),T1r=o("flaubert"),F1r=o(" \u2014 "),EX=a("a"),C1r=o("TFFlaubertForQuestionAnsweringSimple"),M1r=o(" (FlauBERT model)"),E1r=l(),SF=a("li"),E0e=a("strong"),y1r=o("funnel"),w1r=o(" \u2014 "),yX=a("a"),A1r=o("TFFunnelForQuestionAnswering"),L1r=o(" (Funnel Transformer model)"),B1r=l(),PF=a("li"),y0e=a("strong"),x1r=o("longformer"),k1r=o(" \u2014 "),wX=a("a"),R1r=o("TFLongformerForQuestionAnswering"),S1r=o(" (Longformer model)"),P1r=l(),$F=a("li"),w0e=a("strong"),$1r=o("mobilebert"),I1r=o(" \u2014 "),AX=a("a"),j1r=o("TFMobileBertForQuestionAnswering"),D1r=o(" (MobileBERT model)"),N1r=l(),IF=a("li"),A0e=a("strong"),q1r=o("mpnet"),O1r=o(" \u2014 "),LX=a("a"),G1r=o("TFMPNetForQuestionAnswering"),X1r=o(" (MPNet model)"),V1r=l(),jF=a("li"),L0e=a("strong"),z1r=o("rembert"),W1r=o(" \u2014 "),BX=a("a"),Q1r=o("TFRemBertForQuestionAnswering"),H1r=o(" (RemBERT model)"),U1r=l(),DF=a("li"),B0e=a("strong"),J1r=o("roberta"),Y1r=o(" \u2014 "),xX=a("a"),K1r=o("TFRobertaForQuestionAnswering"),Z1r=o(" (RoBERTa model)"),ebr=l(),NF=a("li"),x0e=a("strong"),obr=o("roformer"),rbr=o(" \u2014 "),kX=a("a"),tbr=o("TFRoFormerForQuestionAnswering"),abr=o(" (RoFormer model)"),nbr=l(),qF=a("li"),k0e=a("strong"),sbr=o("xlm"),lbr=o(" \u2014 "),RX=a("a"),ibr=o("TFXLMForQuestionAnsweringSimple"),dbr=o(" (XLM model)"),cbr=l(),OF=a("li"),R0e=a("strong"),fbr=o("xlm-roberta"),mbr=o(" \u2014 "),SX=a("a"),gbr=o("TFXLMRobertaForQuestionAnswering"),hbr=o(" (XLM-RoBERTa model)"),pbr=l(),GF=a("li"),S0e=a("strong"),_br=o("xlnet"),ubr=o(" \u2014 "),PX=a("a"),bbr=o("TFXLNetForQuestionAnsweringSimple"),vbr=o(" (XLNet model)"),Tbr=l(),P0e=a("p"),Fbr=o("Examples:"),Cbr=l(),f(oA.$$.fragment),Uke=l(),Wc=a("h2"),XF=a("a"),$0e=a("span"),f(rA.$$.fragment),Mbr=l(),I0e=a("span"),Ebr=o("TFAutoModelForVision2Seq"),Jke=l(),xr=a("div"),f(tA.$$.fragment),ybr=l(),Qc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),j0e=a("code"),Abr=o("from_pretrained()"),Lbr=o("class method or the "),D0e=a("code"),Bbr=o("from_config()"),xbr=o(`class
method.`),kbr=l(),aA=a("p"),Rbr=o("This class cannot be instantiated directly using "),N0e=a("code"),Sbr=o("__init__()"),Pbr=o(" (throws an error)."),$br=l(),Et=a("div"),f(nA.$$.fragment),Ibr=l(),q0e=a("p"),jbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dbr=l(),Hc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),qbr=o("not"),Obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G0e=a("code"),Gbr=o("from_pretrained()"),Xbr=o("to load the model weights."),Vbr=l(),X0e=a("p"),zbr=o("Examples:"),Wbr=l(),f(sA.$$.fragment),Qbr=l(),yo=a("div"),f(lA.$$.fragment),Hbr=l(),V0e=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jbr=l(),An=a("p"),Ybr=o("The model class to instantiate is selected based on the "),z0e=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),r2r=o("pretrained_model_name_or_path"),t2r=o(":"),a2r=l(),H0e=a("ul"),VF=a("li"),U0e=a("strong"),n2r=o("vision-encoder-decoder"),s2r=o(" \u2014 "),$X=a("a"),l2r=o("TFVisionEncoderDecoderModel"),i2r=o(" (Vision Encoder decoder model)"),d2r=l(),J0e=a("p"),c2r=o("Examples:"),f2r=l(),f(iA.$$.fragment),Yke=l(),Uc=a("h2"),zF=a("a"),Y0e=a("span"),f(dA.$$.fragment),m2r=l(),K0e=a("span"),g2r=o("TFAutoModelForSpeechSeq2Seq"),Kke=l(),kr=a("div"),f(cA.$$.fragment),h2r=l(),Jc=a("p"),p2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Z0e=a("code"),_2r=o("from_pretrained()"),u2r=o("class method or the "),e1e=a("code"),b2r=o("from_config()"),v2r=o(`class
method.`),T2r=l(),fA=a("p"),F2r=o("This class cannot be instantiated directly using "),o1e=a("code"),C2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),yt=a("div"),f(mA.$$.fragment),y2r=l(),r1e=a("p"),w2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A2r=l(),Yc=a("p"),L2r=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),B2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=a("code"),k2r=o("from_pretrained()"),R2r=o("to load the model weights."),S2r=l(),n1e=a("p"),P2r=o("Examples:"),$2r=l(),f(gA.$$.fragment),I2r=l(),wo=a("div"),f(hA.$$.fragment),j2r=l(),s1e=a("p"),D2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),N2r=l(),Ln=a("p"),q2r=o("The model class to instantiate is selected based on the "),l1e=a("code"),O2r=o("model_type"),G2r=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),X2r=o("pretrained_model_name_or_path"),V2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(":"),Q2r=l(),c1e=a("ul"),WF=a("li"),f1e=a("strong"),H2r=o("speech_to_text"),U2r=o(" \u2014 "),IX=a("a"),J2r=o("TFSpeech2TextForConditionalGeneration"),Y2r=o(" (Speech2Text model)"),K2r=l(),m1e=a("p"),Z2r=o("Examples:"),evr=l(),f(pA.$$.fragment),Zke=l(),Kc=a("h2"),QF=a("a"),g1e=a("span"),f(_A.$$.fragment),ovr=l(),h1e=a("span"),rvr=o("FlaxAutoModel"),eRe=l(),Rr=a("div"),f(uA.$$.fragment),tvr=l(),Zc=a("p"),avr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),p1e=a("code"),nvr=o("from_pretrained()"),svr=o("class method or the "),_1e=a("code"),lvr=o("from_config()"),ivr=o(`class
method.`),dvr=l(),bA=a("p"),cvr=o("This class cannot be instantiated directly using "),u1e=a("code"),fvr=o("__init__()"),mvr=o(" (throws an error)."),gvr=l(),wt=a("div"),f(vA.$$.fragment),hvr=l(),b1e=a("p"),pvr=o("Instantiates one of the base model classes of the library from a configuration."),_vr=l(),ef=a("p"),uvr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),bvr=o("not"),vvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=a("code"),Tvr=o("from_pretrained()"),Fvr=o("to load the model weights."),Cvr=l(),F1e=a("p"),Mvr=o("Examples:"),Evr=l(),f(TA.$$.fragment),yvr=l(),Ao=a("div"),f(FA.$$.fragment),wvr=l(),C1e=a("p"),Avr=o("Instantiate one of the base model classes of the library from a pretrained model."),Lvr=l(),Bn=a("p"),Bvr=o("The model class to instantiate is selected based on the "),M1e=a("code"),xvr=o("model_type"),kvr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Rvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),Pvr=o("pretrained_model_name_or_path"),$vr=o(":"),Ivr=l(),z=a("ul"),HF=a("li"),w1e=a("strong"),jvr=o("albert"),Dvr=o(" \u2014 "),jX=a("a"),Nvr=o("FlaxAlbertModel"),qvr=o(" (ALBERT model)"),Ovr=l(),UF=a("li"),A1e=a("strong"),Gvr=o("bart"),Xvr=o(" \u2014 "),DX=a("a"),Vvr=o("FlaxBartModel"),zvr=o(" (BART model)"),Wvr=l(),JF=a("li"),L1e=a("strong"),Qvr=o("beit"),Hvr=o(" \u2014 "),NX=a("a"),Uvr=o("FlaxBeitModel"),Jvr=o(" (BEiT model)"),Yvr=l(),YF=a("li"),B1e=a("strong"),Kvr=o("bert"),Zvr=o(" \u2014 "),qX=a("a"),e6r=o("FlaxBertModel"),o6r=o(" (BERT model)"),r6r=l(),KF=a("li"),x1e=a("strong"),t6r=o("big_bird"),a6r=o(" \u2014 "),OX=a("a"),n6r=o("FlaxBigBirdModel"),s6r=o(" (BigBird model)"),l6r=l(),ZF=a("li"),k1e=a("strong"),i6r=o("blenderbot"),d6r=o(" \u2014 "),GX=a("a"),c6r=o("FlaxBlenderbotModel"),f6r=o(" (Blenderbot model)"),m6r=l(),eC=a("li"),R1e=a("strong"),g6r=o("blenderbot-small"),h6r=o(" \u2014 "),XX=a("a"),p6r=o("FlaxBlenderbotSmallModel"),_6r=o(" (BlenderbotSmall model)"),u6r=l(),oC=a("li"),S1e=a("strong"),b6r=o("clip"),v6r=o(" \u2014 "),VX=a("a"),T6r=o("FlaxCLIPModel"),F6r=o(" (CLIP model)"),C6r=l(),rC=a("li"),P1e=a("strong"),M6r=o("distilbert"),E6r=o(" \u2014 "),zX=a("a"),y6r=o("FlaxDistilBertModel"),w6r=o(" (DistilBERT model)"),A6r=l(),tC=a("li"),$1e=a("strong"),L6r=o("electra"),B6r=o(" \u2014 "),WX=a("a"),x6r=o("FlaxElectraModel"),k6r=o(" (ELECTRA model)"),R6r=l(),aC=a("li"),I1e=a("strong"),S6r=o("gpt2"),P6r=o(" \u2014 "),QX=a("a"),$6r=o("FlaxGPT2Model"),I6r=o(" (OpenAI GPT-2 model)"),j6r=l(),nC=a("li"),j1e=a("strong"),D6r=o("gpt_neo"),N6r=o(" \u2014 "),HX=a("a"),q6r=o("FlaxGPTNeoModel"),O6r=o(" (GPT Neo model)"),G6r=l(),sC=a("li"),D1e=a("strong"),X6r=o("gptj"),V6r=o(" \u2014 "),UX=a("a"),z6r=o("FlaxGPTJModel"),W6r=o(" (GPT-J model)"),Q6r=l(),lC=a("li"),N1e=a("strong"),H6r=o("marian"),U6r=o(" \u2014 "),JX=a("a"),J6r=o("FlaxMarianModel"),Y6r=o(" (Marian model)"),K6r=l(),iC=a("li"),q1e=a("strong"),Z6r=o("mbart"),eTr=o(" \u2014 "),YX=a("a"),oTr=o("FlaxMBartModel"),rTr=o(" (mBART model)"),tTr=l(),dC=a("li"),O1e=a("strong"),aTr=o("mt5"),nTr=o(" \u2014 "),KX=a("a"),sTr=o("FlaxMT5Model"),lTr=o(" (mT5 model)"),iTr=l(),cC=a("li"),G1e=a("strong"),dTr=o("pegasus"),cTr=o(" \u2014 "),ZX=a("a"),fTr=o("FlaxPegasusModel"),mTr=o(" (Pegasus model)"),gTr=l(),fC=a("li"),X1e=a("strong"),hTr=o("roberta"),pTr=o(" \u2014 "),eV=a("a"),_Tr=o("FlaxRobertaModel"),uTr=o(" (RoBERTa model)"),bTr=l(),mC=a("li"),V1e=a("strong"),vTr=o("roformer"),TTr=o(" \u2014 "),oV=a("a"),FTr=o("FlaxRoFormerModel"),CTr=o(" (RoFormer model)"),MTr=l(),gC=a("li"),z1e=a("strong"),ETr=o("t5"),yTr=o(" \u2014 "),rV=a("a"),wTr=o("FlaxT5Model"),ATr=o(" (T5 model)"),LTr=l(),hC=a("li"),W1e=a("strong"),BTr=o("vision-text-dual-encoder"),xTr=o(" \u2014 "),tV=a("a"),kTr=o("FlaxVisionTextDualEncoderModel"),RTr=o(" (VisionTextDualEncoder model)"),STr=l(),pC=a("li"),Q1e=a("strong"),PTr=o("vit"),$Tr=o(" \u2014 "),aV=a("a"),ITr=o("FlaxViTModel"),jTr=o(" (ViT model)"),DTr=l(),_C=a("li"),H1e=a("strong"),NTr=o("wav2vec2"),qTr=o(" \u2014 "),nV=a("a"),OTr=o("FlaxWav2Vec2Model"),GTr=o(" (Wav2Vec2 model)"),XTr=l(),uC=a("li"),U1e=a("strong"),VTr=o("xglm"),zTr=o(" \u2014 "),sV=a("a"),WTr=o("FlaxXGLMModel"),QTr=o(" (XGLM model)"),HTr=l(),bC=a("li"),J1e=a("strong"),UTr=o("xlm-roberta"),JTr=o(" \u2014 "),lV=a("a"),YTr=o("FlaxXLMRobertaModel"),KTr=o(" (XLM-RoBERTa model)"),ZTr=l(),Y1e=a("p"),e7r=o("Examples:"),o7r=l(),f(CA.$$.fragment),oRe=l(),of=a("h2"),vC=a("a"),K1e=a("span"),f(MA.$$.fragment),r7r=l(),Z1e=a("span"),t7r=o("FlaxAutoModelForCausalLM"),rRe=l(),Sr=a("div"),f(EA.$$.fragment),a7r=l(),rf=a("p"),n7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ebe=a("code"),s7r=o("from_pretrained()"),l7r=o("class method or the "),obe=a("code"),i7r=o("from_config()"),d7r=o(`class
method.`),c7r=l(),yA=a("p"),f7r=o("This class cannot be instantiated directly using "),rbe=a("code"),m7r=o("__init__()"),g7r=o(" (throws an error)."),h7r=l(),At=a("div"),f(wA.$$.fragment),p7r=l(),tbe=a("p"),_7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u7r=l(),tf=a("p"),b7r=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),v7r=o("not"),T7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nbe=a("code"),F7r=o("from_pretrained()"),C7r=o("to load the model weights."),M7r=l(),sbe=a("p"),E7r=o("Examples:"),y7r=l(),f(AA.$$.fragment),w7r=l(),Lo=a("div"),f(LA.$$.fragment),A7r=l(),lbe=a("p"),L7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B7r=l(),xn=a("p"),x7r=o("The model class to instantiate is selected based on the "),ibe=a("code"),k7r=o("model_type"),R7r=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),S7r=o("pretrained_model_name_or_path"),P7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),$7r=o("pretrained_model_name_or_path"),I7r=o(":"),j7r=l(),ca=a("ul"),TC=a("li"),fbe=a("strong"),D7r=o("bart"),N7r=o(" \u2014 "),iV=a("a"),q7r=o("FlaxBartForCausalLM"),O7r=o(" (BART model)"),G7r=l(),FC=a("li"),mbe=a("strong"),X7r=o("gpt2"),V7r=o(" \u2014 "),dV=a("a"),z7r=o("FlaxGPT2LMHeadModel"),W7r=o(" (OpenAI GPT-2 model)"),Q7r=l(),CC=a("li"),gbe=a("strong"),H7r=o("gpt_neo"),U7r=o(" \u2014 "),cV=a("a"),J7r=o("FlaxGPTNeoForCausalLM"),Y7r=o(" (GPT Neo model)"),K7r=l(),MC=a("li"),hbe=a("strong"),Z7r=o("gptj"),eFr=o(" \u2014 "),fV=a("a"),oFr=o("FlaxGPTJForCausalLM"),rFr=o(" (GPT-J model)"),tFr=l(),EC=a("li"),pbe=a("strong"),aFr=o("xglm"),nFr=o(" \u2014 "),mV=a("a"),sFr=o("FlaxXGLMForCausalLM"),lFr=o(" (XGLM model)"),iFr=l(),_be=a("p"),dFr=o("Examples:"),cFr=l(),f(BA.$$.fragment),tRe=l(),af=a("h2"),yC=a("a"),ube=a("span"),f(xA.$$.fragment),fFr=l(),bbe=a("span"),mFr=o("FlaxAutoModelForPreTraining"),aRe=l(),Pr=a("div"),f(kA.$$.fragment),gFr=l(),nf=a("p"),hFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vbe=a("code"),pFr=o("from_pretrained()"),_Fr=o("class method or the "),Tbe=a("code"),uFr=o("from_config()"),bFr=o(`class
method.`),vFr=l(),RA=a("p"),TFr=o("This class cannot be instantiated directly using "),Fbe=a("code"),FFr=o("__init__()"),CFr=o(" (throws an error)."),MFr=l(),Lt=a("div"),f(SA.$$.fragment),EFr=l(),Cbe=a("p"),yFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wFr=l(),sf=a("p"),AFr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),LFr=o("not"),BFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ebe=a("code"),xFr=o("from_pretrained()"),kFr=o("to load the model weights."),RFr=l(),ybe=a("p"),SFr=o("Examples:"),PFr=l(),f(PA.$$.fragment),$Fr=l(),Bo=a("div"),f($A.$$.fragment),IFr=l(),wbe=a("p"),jFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DFr=l(),kn=a("p"),NFr=o("The model class to instantiate is selected based on the "),Abe=a("code"),qFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),GFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),VFr=o("pretrained_model_name_or_path"),zFr=o(":"),WFr=l(),ce=a("ul"),wC=a("li"),xbe=a("strong"),QFr=o("albert"),HFr=o(" \u2014 "),gV=a("a"),UFr=o("FlaxAlbertForPreTraining"),JFr=o(" (ALBERT model)"),YFr=l(),AC=a("li"),kbe=a("strong"),KFr=o("bart"),ZFr=o(" \u2014 "),hV=a("a"),eCr=o("FlaxBartForConditionalGeneration"),oCr=o(" (BART model)"),rCr=l(),LC=a("li"),Rbe=a("strong"),tCr=o("bert"),aCr=o(" \u2014 "),pV=a("a"),nCr=o("FlaxBertForPreTraining"),sCr=o(" (BERT model)"),lCr=l(),BC=a("li"),Sbe=a("strong"),iCr=o("big_bird"),dCr=o(" \u2014 "),_V=a("a"),cCr=o("FlaxBigBirdForPreTraining"),fCr=o(" (BigBird model)"),mCr=l(),xC=a("li"),Pbe=a("strong"),gCr=o("electra"),hCr=o(" \u2014 "),uV=a("a"),pCr=o("FlaxElectraForPreTraining"),_Cr=o(" (ELECTRA model)"),uCr=l(),kC=a("li"),$be=a("strong"),bCr=o("mbart"),vCr=o(" \u2014 "),bV=a("a"),TCr=o("FlaxMBartForConditionalGeneration"),FCr=o(" (mBART model)"),CCr=l(),RC=a("li"),Ibe=a("strong"),MCr=o("mt5"),ECr=o(" \u2014 "),vV=a("a"),yCr=o("FlaxMT5ForConditionalGeneration"),wCr=o(" (mT5 model)"),ACr=l(),SC=a("li"),jbe=a("strong"),LCr=o("roberta"),BCr=o(" \u2014 "),TV=a("a"),xCr=o("FlaxRobertaForMaskedLM"),kCr=o(" (RoBERTa model)"),RCr=l(),PC=a("li"),Dbe=a("strong"),SCr=o("roformer"),PCr=o(" \u2014 "),FV=a("a"),$Cr=o("FlaxRoFormerForMaskedLM"),ICr=o(" (RoFormer model)"),jCr=l(),$C=a("li"),Nbe=a("strong"),DCr=o("t5"),NCr=o(" \u2014 "),CV=a("a"),qCr=o("FlaxT5ForConditionalGeneration"),OCr=o(" (T5 model)"),GCr=l(),IC=a("li"),qbe=a("strong"),XCr=o("wav2vec2"),VCr=o(" \u2014 "),MV=a("a"),zCr=o("FlaxWav2Vec2ForPreTraining"),WCr=o(" (Wav2Vec2 model)"),QCr=l(),jC=a("li"),Obe=a("strong"),HCr=o("xlm-roberta"),UCr=o(" \u2014 "),EV=a("a"),JCr=o("FlaxXLMRobertaForMaskedLM"),YCr=o(" (XLM-RoBERTa model)"),KCr=l(),Gbe=a("p"),ZCr=o("Examples:"),eMr=l(),f(IA.$$.fragment),nRe=l(),lf=a("h2"),DC=a("a"),Xbe=a("span"),f(jA.$$.fragment),oMr=l(),Vbe=a("span"),rMr=o("FlaxAutoModelForMaskedLM"),sRe=l(),$r=a("div"),f(DA.$$.fragment),tMr=l(),df=a("p"),aMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zbe=a("code"),nMr=o("from_pretrained()"),sMr=o("class method or the "),Wbe=a("code"),lMr=o("from_config()"),iMr=o(`class
method.`),dMr=l(),NA=a("p"),cMr=o("This class cannot be instantiated directly using "),Qbe=a("code"),fMr=o("__init__()"),mMr=o(" (throws an error)."),gMr=l(),Bt=a("div"),f(qA.$$.fragment),hMr=l(),Hbe=a("p"),pMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mr=l(),cf=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),bMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jbe=a("code"),TMr=o("from_pretrained()"),FMr=o("to load the model weights."),CMr=l(),Ybe=a("p"),MMr=o("Examples:"),EMr=l(),f(OA.$$.fragment),yMr=l(),xo=a("div"),f(GA.$$.fragment),wMr=l(),Kbe=a("p"),AMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LMr=l(),Rn=a("p"),BMr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),xMr=o("model_type"),kMr=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),RMr=o("pretrained_model_name_or_path"),SMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),PMr=o("pretrained_model_name_or_path"),$Mr=o(":"),IMr=l(),be=a("ul"),NC=a("li"),r2e=a("strong"),jMr=o("albert"),DMr=o(" \u2014 "),yV=a("a"),NMr=o("FlaxAlbertForMaskedLM"),qMr=o(" (ALBERT model)"),OMr=l(),qC=a("li"),t2e=a("strong"),GMr=o("bart"),XMr=o(" \u2014 "),wV=a("a"),VMr=o("FlaxBartForConditionalGeneration"),zMr=o(" (BART model)"),WMr=l(),OC=a("li"),a2e=a("strong"),QMr=o("bert"),HMr=o(" \u2014 "),AV=a("a"),UMr=o("FlaxBertForMaskedLM"),JMr=o(" (BERT model)"),YMr=l(),GC=a("li"),n2e=a("strong"),KMr=o("big_bird"),ZMr=o(" \u2014 "),LV=a("a"),e4r=o("FlaxBigBirdForMaskedLM"),o4r=o(" (BigBird model)"),r4r=l(),XC=a("li"),s2e=a("strong"),t4r=o("distilbert"),a4r=o(" \u2014 "),BV=a("a"),n4r=o("FlaxDistilBertForMaskedLM"),s4r=o(" (DistilBERT model)"),l4r=l(),VC=a("li"),l2e=a("strong"),i4r=o("electra"),d4r=o(" \u2014 "),xV=a("a"),c4r=o("FlaxElectraForMaskedLM"),f4r=o(" (ELECTRA model)"),m4r=l(),zC=a("li"),i2e=a("strong"),g4r=o("mbart"),h4r=o(" \u2014 "),kV=a("a"),p4r=o("FlaxMBartForConditionalGeneration"),_4r=o(" (mBART model)"),u4r=l(),WC=a("li"),d2e=a("strong"),b4r=o("roberta"),v4r=o(" \u2014 "),RV=a("a"),T4r=o("FlaxRobertaForMaskedLM"),F4r=o(" (RoBERTa model)"),C4r=l(),QC=a("li"),c2e=a("strong"),M4r=o("roformer"),E4r=o(" \u2014 "),SV=a("a"),y4r=o("FlaxRoFormerForMaskedLM"),w4r=o(" (RoFormer model)"),A4r=l(),HC=a("li"),f2e=a("strong"),L4r=o("xlm-roberta"),B4r=o(" \u2014 "),PV=a("a"),x4r=o("FlaxXLMRobertaForMaskedLM"),k4r=o(" (XLM-RoBERTa model)"),R4r=l(),m2e=a("p"),S4r=o("Examples:"),P4r=l(),f(XA.$$.fragment),lRe=l(),ff=a("h2"),UC=a("a"),g2e=a("span"),f(VA.$$.fragment),$4r=l(),h2e=a("span"),I4r=o("FlaxAutoModelForSeq2SeqLM"),iRe=l(),Ir=a("div"),f(zA.$$.fragment),j4r=l(),mf=a("p"),D4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p2e=a("code"),N4r=o("from_pretrained()"),q4r=o("class method or the "),_2e=a("code"),O4r=o("from_config()"),G4r=o(`class
method.`),X4r=l(),WA=a("p"),V4r=o("This class cannot be instantiated directly using "),u2e=a("code"),z4r=o("__init__()"),W4r=o(" (throws an error)."),Q4r=l(),xt=a("div"),f(QA.$$.fragment),H4r=l(),b2e=a("p"),U4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J4r=l(),gf=a("p"),Y4r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),K4r=o("not"),Z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=a("code"),eEr=o("from_pretrained()"),oEr=o("to load the model weights."),rEr=l(),F2e=a("p"),tEr=o("Examples:"),aEr=l(),f(HA.$$.fragment),nEr=l(),ko=a("div"),f(UA.$$.fragment),sEr=l(),C2e=a("p"),lEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iEr=l(),Sn=a("p"),dEr=o("The model class to instantiate is selected based on the "),M2e=a("code"),cEr=o("model_type"),fEr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(":"),_Er=l(),Me=a("ul"),JC=a("li"),w2e=a("strong"),uEr=o("bart"),bEr=o(" \u2014 "),$V=a("a"),vEr=o("FlaxBartForConditionalGeneration"),TEr=o(" (BART model)"),FEr=l(),YC=a("li"),A2e=a("strong"),CEr=o("blenderbot"),MEr=o(" \u2014 "),IV=a("a"),EEr=o("FlaxBlenderbotForConditionalGeneration"),yEr=o(" (Blenderbot model)"),wEr=l(),KC=a("li"),L2e=a("strong"),AEr=o("blenderbot-small"),LEr=o(" \u2014 "),jV=a("a"),BEr=o("FlaxBlenderbotSmallForConditionalGeneration"),xEr=o(" (BlenderbotSmall model)"),kEr=l(),ZC=a("li"),B2e=a("strong"),REr=o("encoder-decoder"),SEr=o(" \u2014 "),DV=a("a"),PEr=o("FlaxEncoderDecoderModel"),$Er=o(" (Encoder decoder model)"),IEr=l(),eM=a("li"),x2e=a("strong"),jEr=o("marian"),DEr=o(" \u2014 "),NV=a("a"),NEr=o("FlaxMarianMTModel"),qEr=o(" (Marian model)"),OEr=l(),oM=a("li"),k2e=a("strong"),GEr=o("mbart"),XEr=o(" \u2014 "),qV=a("a"),VEr=o("FlaxMBartForConditionalGeneration"),zEr=o(" (mBART model)"),WEr=l(),rM=a("li"),R2e=a("strong"),QEr=o("mt5"),HEr=o(" \u2014 "),OV=a("a"),UEr=o("FlaxMT5ForConditionalGeneration"),JEr=o(" (mT5 model)"),YEr=l(),tM=a("li"),S2e=a("strong"),KEr=o("pegasus"),ZEr=o(" \u2014 "),GV=a("a"),e3r=o("FlaxPegasusForConditionalGeneration"),o3r=o(" (Pegasus model)"),r3r=l(),aM=a("li"),P2e=a("strong"),t3r=o("t5"),a3r=o(" \u2014 "),XV=a("a"),n3r=o("FlaxT5ForConditionalGeneration"),s3r=o(" (T5 model)"),l3r=l(),$2e=a("p"),i3r=o("Examples:"),d3r=l(),f(JA.$$.fragment),dRe=l(),hf=a("h2"),nM=a("a"),I2e=a("span"),f(YA.$$.fragment),c3r=l(),j2e=a("span"),f3r=o("FlaxAutoModelForSequenceClassification"),cRe=l(),jr=a("div"),f(KA.$$.fragment),m3r=l(),pf=a("p"),g3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),D2e=a("code"),h3r=o("from_pretrained()"),p3r=o("class method or the "),N2e=a("code"),_3r=o("from_config()"),u3r=o(`class
method.`),b3r=l(),ZA=a("p"),v3r=o("This class cannot be instantiated directly using "),q2e=a("code"),T3r=o("__init__()"),F3r=o(" (throws an error)."),C3r=l(),kt=a("div"),f(eL.$$.fragment),M3r=l(),O2e=a("p"),E3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y3r=l(),_f=a("p"),w3r=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),A3r=o("not"),L3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=a("code"),B3r=o("from_pretrained()"),x3r=o("to load the model weights."),k3r=l(),V2e=a("p"),R3r=o("Examples:"),S3r=l(),f(oL.$$.fragment),P3r=l(),Ro=a("div"),f(rL.$$.fragment),$3r=l(),z2e=a("p"),I3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j3r=l(),Pn=a("p"),D3r=o("The model class to instantiate is selected based on the "),W2e=a("code"),N3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),O3r=o("pretrained_model_name_or_path"),G3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),X3r=o("pretrained_model_name_or_path"),V3r=o(":"),z3r=l(),ve=a("ul"),sM=a("li"),U2e=a("strong"),W3r=o("albert"),Q3r=o(" \u2014 "),VV=a("a"),H3r=o("FlaxAlbertForSequenceClassification"),U3r=o(" (ALBERT model)"),J3r=l(),lM=a("li"),J2e=a("strong"),Y3r=o("bart"),K3r=o(" \u2014 "),zV=a("a"),Z3r=o("FlaxBartForSequenceClassification"),e5r=o(" (BART model)"),o5r=l(),iM=a("li"),Y2e=a("strong"),r5r=o("bert"),t5r=o(" \u2014 "),WV=a("a"),a5r=o("FlaxBertForSequenceClassification"),n5r=o(" (BERT model)"),s5r=l(),dM=a("li"),K2e=a("strong"),l5r=o("big_bird"),i5r=o(" \u2014 "),QV=a("a"),d5r=o("FlaxBigBirdForSequenceClassification"),c5r=o(" (BigBird model)"),f5r=l(),cM=a("li"),Z2e=a("strong"),m5r=o("distilbert"),g5r=o(" \u2014 "),HV=a("a"),h5r=o("FlaxDistilBertForSequenceClassification"),p5r=o(" (DistilBERT model)"),_5r=l(),fM=a("li"),eve=a("strong"),u5r=o("electra"),b5r=o(" \u2014 "),UV=a("a"),v5r=o("FlaxElectraForSequenceClassification"),T5r=o(" (ELECTRA model)"),F5r=l(),mM=a("li"),ove=a("strong"),C5r=o("mbart"),M5r=o(" \u2014 "),JV=a("a"),E5r=o("FlaxMBartForSequenceClassification"),y5r=o(" (mBART model)"),w5r=l(),gM=a("li"),rve=a("strong"),A5r=o("roberta"),L5r=o(" \u2014 "),YV=a("a"),B5r=o("FlaxRobertaForSequenceClassification"),x5r=o(" (RoBERTa model)"),k5r=l(),hM=a("li"),tve=a("strong"),R5r=o("roformer"),S5r=o(" \u2014 "),KV=a("a"),P5r=o("FlaxRoFormerForSequenceClassification"),$5r=o(" (RoFormer model)"),I5r=l(),pM=a("li"),ave=a("strong"),j5r=o("xlm-roberta"),D5r=o(" \u2014 "),ZV=a("a"),N5r=o("FlaxXLMRobertaForSequenceClassification"),q5r=o(" (XLM-RoBERTa model)"),O5r=l(),nve=a("p"),G5r=o("Examples:"),X5r=l(),f(tL.$$.fragment),fRe=l(),uf=a("h2"),_M=a("a"),sve=a("span"),f(aL.$$.fragment),V5r=l(),lve=a("span"),z5r=o("FlaxAutoModelForQuestionAnswering"),mRe=l(),Dr=a("div"),f(nL.$$.fragment),W5r=l(),bf=a("p"),Q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ive=a("code"),H5r=o("from_pretrained()"),U5r=o("class method or the "),dve=a("code"),J5r=o("from_config()"),Y5r=o(`class
method.`),K5r=l(),sL=a("p"),Z5r=o("This class cannot be instantiated directly using "),cve=a("code"),eyr=o("__init__()"),oyr=o(" (throws an error)."),ryr=l(),Rt=a("div"),f(lL.$$.fragment),tyr=l(),fve=a("p"),ayr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nyr=l(),vf=a("p"),syr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),lyr=o("not"),iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=a("code"),dyr=o("from_pretrained()"),cyr=o("to load the model weights."),fyr=l(),hve=a("p"),myr=o("Examples:"),gyr=l(),f(iL.$$.fragment),hyr=l(),So=a("div"),f(dL.$$.fragment),pyr=l(),pve=a("p"),_yr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uyr=l(),$n=a("p"),byr=o("The model class to instantiate is selected based on the "),_ve=a("code"),vyr=o("model_type"),Tyr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),Fyr=o("pretrained_model_name_or_path"),Cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),yyr=l(),Te=a("ul"),uM=a("li"),vve=a("strong"),wyr=o("albert"),Ayr=o(" \u2014 "),ez=a("a"),Lyr=o("FlaxAlbertForQuestionAnswering"),Byr=o(" (ALBERT model)"),xyr=l(),bM=a("li"),Tve=a("strong"),kyr=o("bart"),Ryr=o(" \u2014 "),oz=a("a"),Syr=o("FlaxBartForQuestionAnswering"),Pyr=o(" (BART model)"),$yr=l(),vM=a("li"),Fve=a("strong"),Iyr=o("bert"),jyr=o(" \u2014 "),rz=a("a"),Dyr=o("FlaxBertForQuestionAnswering"),Nyr=o(" (BERT model)"),qyr=l(),TM=a("li"),Cve=a("strong"),Oyr=o("big_bird"),Gyr=o(" \u2014 "),tz=a("a"),Xyr=o("FlaxBigBirdForQuestionAnswering"),Vyr=o(" (BigBird model)"),zyr=l(),FM=a("li"),Mve=a("strong"),Wyr=o("distilbert"),Qyr=o(" \u2014 "),az=a("a"),Hyr=o("FlaxDistilBertForQuestionAnswering"),Uyr=o(" (DistilBERT model)"),Jyr=l(),CM=a("li"),Eve=a("strong"),Yyr=o("electra"),Kyr=o(" \u2014 "),nz=a("a"),Zyr=o("FlaxElectraForQuestionAnswering"),ewr=o(" (ELECTRA model)"),owr=l(),MM=a("li"),yve=a("strong"),rwr=o("mbart"),twr=o(" \u2014 "),sz=a("a"),awr=o("FlaxMBartForQuestionAnswering"),nwr=o(" (mBART model)"),swr=l(),EM=a("li"),wve=a("strong"),lwr=o("roberta"),iwr=o(" \u2014 "),lz=a("a"),dwr=o("FlaxRobertaForQuestionAnswering"),cwr=o(" (RoBERTa model)"),fwr=l(),yM=a("li"),Ave=a("strong"),mwr=o("roformer"),gwr=o(" \u2014 "),iz=a("a"),hwr=o("FlaxRoFormerForQuestionAnswering"),pwr=o(" (RoFormer model)"),_wr=l(),wM=a("li"),Lve=a("strong"),uwr=o("xlm-roberta"),bwr=o(" \u2014 "),dz=a("a"),vwr=o("FlaxXLMRobertaForQuestionAnswering"),Twr=o(" (XLM-RoBERTa model)"),Fwr=l(),Bve=a("p"),Cwr=o("Examples:"),Mwr=l(),f(cL.$$.fragment),gRe=l(),Tf=a("h2"),AM=a("a"),xve=a("span"),f(fL.$$.fragment),Ewr=l(),kve=a("span"),ywr=o("FlaxAutoModelForTokenClassification"),hRe=l(),Nr=a("div"),f(mL.$$.fragment),wwr=l(),Ff=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rve=a("code"),Lwr=o("from_pretrained()"),Bwr=o("class method or the "),Sve=a("code"),xwr=o("from_config()"),kwr=o(`class
method.`),Rwr=l(),gL=a("p"),Swr=o("This class cannot be instantiated directly using "),Pve=a("code"),Pwr=o("__init__()"),$wr=o(" (throws an error)."),Iwr=l(),St=a("div"),f(hL.$$.fragment),jwr=l(),$ve=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nwr=l(),Cf=a("p"),qwr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),Owr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=a("code"),Xwr=o("from_pretrained()"),Vwr=o("to load the model weights."),zwr=l(),Dve=a("p"),Wwr=o("Examples:"),Qwr=l(),f(pL.$$.fragment),Hwr=l(),Po=a("div"),f(_L.$$.fragment),Uwr=l(),Nve=a("p"),Jwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ywr=l(),In=a("p"),Kwr=o("The model class to instantiate is selected based on the "),qve=a("code"),Zwr=o("model_type"),eAr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(":"),nAr=l(),Se=a("ul"),LM=a("li"),Xve=a("strong"),sAr=o("albert"),lAr=o(" \u2014 "),cz=a("a"),iAr=o("FlaxAlbertForTokenClassification"),dAr=o(" (ALBERT model)"),cAr=l(),BM=a("li"),Vve=a("strong"),fAr=o("bert"),mAr=o(" \u2014 "),fz=a("a"),gAr=o("FlaxBertForTokenClassification"),hAr=o(" (BERT model)"),pAr=l(),xM=a("li"),zve=a("strong"),_Ar=o("big_bird"),uAr=o(" \u2014 "),mz=a("a"),bAr=o("FlaxBigBirdForTokenClassification"),vAr=o(" (BigBird model)"),TAr=l(),kM=a("li"),Wve=a("strong"),FAr=o("distilbert"),CAr=o(" \u2014 "),gz=a("a"),MAr=o("FlaxDistilBertForTokenClassification"),EAr=o(" (DistilBERT model)"),yAr=l(),RM=a("li"),Qve=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),hz=a("a"),LAr=o("FlaxElectraForTokenClassification"),BAr=o(" (ELECTRA model)"),xAr=l(),SM=a("li"),Hve=a("strong"),kAr=o("roberta"),RAr=o(" \u2014 "),pz=a("a"),SAr=o("FlaxRobertaForTokenClassification"),PAr=o(" (RoBERTa model)"),$Ar=l(),PM=a("li"),Uve=a("strong"),IAr=o("roformer"),jAr=o(" \u2014 "),_z=a("a"),DAr=o("FlaxRoFormerForTokenClassification"),NAr=o(" (RoFormer model)"),qAr=l(),$M=a("li"),Jve=a("strong"),OAr=o("xlm-roberta"),GAr=o(" \u2014 "),uz=a("a"),XAr=o("FlaxXLMRobertaForTokenClassification"),VAr=o(" (XLM-RoBERTa model)"),zAr=l(),Yve=a("p"),WAr=o("Examples:"),QAr=l(),f(uL.$$.fragment),pRe=l(),Mf=a("h2"),IM=a("a"),Kve=a("span"),f(bL.$$.fragment),HAr=l(),Zve=a("span"),UAr=o("FlaxAutoModelForMultipleChoice"),_Re=l(),qr=a("div"),f(vL.$$.fragment),JAr=l(),Ef=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),e6e=a("code"),KAr=o("from_pretrained()"),ZAr=o("class method or the "),o6e=a("code"),eLr=o("from_config()"),oLr=o(`class
method.`),rLr=l(),TL=a("p"),tLr=o("This class cannot be instantiated directly using "),r6e=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Pt=a("div"),f(FL.$$.fragment),lLr=l(),t6e=a("p"),iLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dLr=l(),yf=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=a("code"),gLr=o("from_pretrained()"),hLr=o("to load the model weights."),pLr=l(),s6e=a("p"),_Lr=o("Examples:"),uLr=l(),f(CL.$$.fragment),bLr=l(),$o=a("div"),f(ML.$$.fragment),vLr=l(),l6e=a("p"),TLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FLr=l(),jn=a("p"),CLr=o("The model class to instantiate is selected based on the "),i6e=a("code"),MLr=o("model_type"),ELr=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),yLr=o("pretrained_model_name_or_path"),wLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),ALr=o("pretrained_model_name_or_path"),LLr=o(":"),BLr=l(),Pe=a("ul"),jM=a("li"),f6e=a("strong"),xLr=o("albert"),kLr=o(" \u2014 "),bz=a("a"),RLr=o("FlaxAlbertForMultipleChoice"),SLr=o(" (ALBERT model)"),PLr=l(),DM=a("li"),m6e=a("strong"),$Lr=o("bert"),ILr=o(" \u2014 "),vz=a("a"),jLr=o("FlaxBertForMultipleChoice"),DLr=o(" (BERT model)"),NLr=l(),NM=a("li"),g6e=a("strong"),qLr=o("big_bird"),OLr=o(" \u2014 "),Tz=a("a"),GLr=o("FlaxBigBirdForMultipleChoice"),XLr=o(" (BigBird model)"),VLr=l(),qM=a("li"),h6e=a("strong"),zLr=o("distilbert"),WLr=o(" \u2014 "),Fz=a("a"),QLr=o("FlaxDistilBertForMultipleChoice"),HLr=o(" (DistilBERT model)"),ULr=l(),OM=a("li"),p6e=a("strong"),JLr=o("electra"),YLr=o(" \u2014 "),Cz=a("a"),KLr=o("FlaxElectraForMultipleChoice"),ZLr=o(" (ELECTRA model)"),e8r=l(),GM=a("li"),_6e=a("strong"),o8r=o("roberta"),r8r=o(" \u2014 "),Mz=a("a"),t8r=o("FlaxRobertaForMultipleChoice"),a8r=o(" (RoBERTa model)"),n8r=l(),XM=a("li"),u6e=a("strong"),s8r=o("roformer"),l8r=o(" \u2014 "),Ez=a("a"),i8r=o("FlaxRoFormerForMultipleChoice"),d8r=o(" (RoFormer model)"),c8r=l(),VM=a("li"),b6e=a("strong"),f8r=o("xlm-roberta"),m8r=o(" \u2014 "),yz=a("a"),g8r=o("FlaxXLMRobertaForMultipleChoice"),h8r=o(" (XLM-RoBERTa model)"),p8r=l(),v6e=a("p"),_8r=o("Examples:"),u8r=l(),f(EL.$$.fragment),uRe=l(),wf=a("h2"),zM=a("a"),T6e=a("span"),f(yL.$$.fragment),b8r=l(),F6e=a("span"),v8r=o("FlaxAutoModelForNextSentencePrediction"),bRe=l(),Or=a("div"),f(wL.$$.fragment),T8r=l(),Af=a("p"),F8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),C6e=a("code"),C8r=o("from_pretrained()"),M8r=o("class method or the "),M6e=a("code"),E8r=o("from_config()"),y8r=o(`class
method.`),w8r=l(),AL=a("p"),A8r=o("This class cannot be instantiated directly using "),E6e=a("code"),L8r=o("__init__()"),B8r=o(" (throws an error)."),x8r=l(),$t=a("div"),f(LL.$$.fragment),k8r=l(),y6e=a("p"),R8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S8r=l(),Lf=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),$8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A6e=a("code"),j8r=o("from_pretrained()"),D8r=o("to load the model weights."),N8r=l(),L6e=a("p"),q8r=o("Examples:"),O8r=l(),f(BL.$$.fragment),G8r=l(),Io=a("div"),f(xL.$$.fragment),X8r=l(),B6e=a("p"),V8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z8r=l(),Dn=a("p"),W8r=o("The model class to instantiate is selected based on the "),x6e=a("code"),Q8r=o("model_type"),H8r=o(` property of the config object (either
passed as an argument or loaded from `),k6e=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(":"),Z8r=l(),S6e=a("ul"),WM=a("li"),P6e=a("strong"),e9r=o("bert"),o9r=o(" \u2014 "),wz=a("a"),r9r=o("FlaxBertForNextSentencePrediction"),t9r=o(" (BERT model)"),a9r=l(),$6e=a("p"),n9r=o("Examples:"),s9r=l(),f(kL.$$.fragment),vRe=l(),Bf=a("h2"),QM=a("a"),I6e=a("span"),f(RL.$$.fragment),l9r=l(),j6e=a("span"),i9r=o("FlaxAutoModelForImageClassification"),TRe=l(),Gr=a("div"),f(SL.$$.fragment),d9r=l(),xf=a("p"),c9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),D6e=a("code"),f9r=o("from_pretrained()"),m9r=o("class method or the "),N6e=a("code"),g9r=o("from_config()"),h9r=o(`class
method.`),p9r=l(),PL=a("p"),_9r=o("This class cannot be instantiated directly using "),q6e=a("code"),u9r=o("__init__()"),b9r=o(" (throws an error)."),v9r=l(),It=a("div"),f($L.$$.fragment),T9r=l(),O6e=a("p"),F9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C9r=l(),kf=a("p"),M9r=o(`Note:
Loading a model from its configuration file does `),G6e=a("strong"),E9r=o("not"),y9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X6e=a("code"),w9r=o("from_pretrained()"),A9r=o("to load the model weights."),L9r=l(),V6e=a("p"),B9r=o("Examples:"),x9r=l(),f(IL.$$.fragment),k9r=l(),jo=a("div"),f(jL.$$.fragment),R9r=l(),z6e=a("p"),S9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P9r=l(),Nn=a("p"),$9r=o("The model class to instantiate is selected based on the "),W6e=a("code"),I9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),D9r=o("pretrained_model_name_or_path"),N9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),q9r=o("pretrained_model_name_or_path"),O9r=o(":"),G9r=l(),DL=a("ul"),HM=a("li"),U6e=a("strong"),X9r=o("beit"),V9r=o(" \u2014 "),Az=a("a"),z9r=o("FlaxBeitForImageClassification"),W9r=o(" (BEiT model)"),Q9r=l(),UM=a("li"),J6e=a("strong"),H9r=o("vit"),U9r=o(" \u2014 "),Lz=a("a"),J9r=o("FlaxViTForImageClassification"),Y9r=o(" (ViT model)"),K9r=l(),Y6e=a("p"),Z9r=o("Examples:"),eBr=l(),f(NL.$$.fragment),FRe=l(),Rf=a("h2"),JM=a("a"),K6e=a("span"),f(qL.$$.fragment),oBr=l(),Z6e=a("span"),rBr=o("FlaxAutoModelForVision2Seq"),CRe=l(),Xr=a("div"),f(OL.$$.fragment),tBr=l(),Sf=a("p"),aBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eTe=a("code"),nBr=o("from_pretrained()"),sBr=o("class method or the "),oTe=a("code"),lBr=o("from_config()"),iBr=o(`class
method.`),dBr=l(),GL=a("p"),cBr=o("This class cannot be instantiated directly using "),rTe=a("code"),fBr=o("__init__()"),mBr=o(" (throws an error)."),gBr=l(),jt=a("div"),f(XL.$$.fragment),hBr=l(),tTe=a("p"),pBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Br=l(),Pf=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),bBr=o("not"),vBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nTe=a("code"),TBr=o("from_pretrained()"),FBr=o("to load the model weights."),CBr=l(),sTe=a("p"),MBr=o("Examples:"),EBr=l(),f(VL.$$.fragment),yBr=l(),Do=a("div"),f(zL.$$.fragment),wBr=l(),lTe=a("p"),ABr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LBr=l(),qn=a("p"),BBr=o("The model class to instantiate is selected based on the "),iTe=a("code"),xBr=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),RBr=o("pretrained_model_name_or_path"),SBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),PBr=o("pretrained_model_name_or_path"),$Br=o(":"),IBr=l(),fTe=a("ul"),YM=a("li"),mTe=a("strong"),jBr=o("vision-encoder-decoder"),DBr=o(" \u2014 "),Bz=a("a"),NBr=o("FlaxVisionEncoderDecoderModel"),qBr=o(" (Vision Encoder decoder model)"),OBr=l(),gTe=a("p"),GBr=o("Examples:"),XBr=l(),f(WL.$$.fragment),this.h()},l(c){const u=L7t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var QL=s(de);he=n(QL,"A",{id:!0,class:!0,href:!0});var hTe=s(he);io=n(hTe,"SPAN",{});var pTe=s(io);m(fe.$$.fragment,pTe),pTe.forEach(t),hTe.forEach(t),Ce=i(QL),Vo=n(QL,"SPAN",{});var zBr=s(Vo);ji=r(zBr,"Auto Classes"),zBr.forEach(t),QL.forEach(t),If=i(c),fa=n(c,"P",{});var ERe=s(fa);Di=r(ERe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(ERe,"CODE",{});var WBr=s(Ni);Y4=r(WBr,"from_pretrained()"),WBr.forEach(t),jf=r(ERe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ERe.forEach(t),Be=i(c),co=n(c,"P",{});var KM=s(co);qi=r(KM,"Instantiating one of "),On=n(KM,"A",{href:!0});var QBr=s(On);K4=r(QBr,"AutoConfig"),QBr.forEach(t),Gn=r(KM,", "),Xn=n(KM,"A",{href:!0});var HBr=s(Xn);Z4=r(HBr,"AutoModel"),HBr.forEach(t),Oi=r(KM,`, and
`),Vn=n(KM,"A",{href:!0});var UBr=s(Vn);eE=r(UBr,"AutoTokenizer"),UBr.forEach(t),Gi=r(KM," will directly create a class of the relevant architecture. For instance"),KM.forEach(t),Df=i(c),m(qa.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var yRe=s(pe);V8=r(yRe,"will create a model that is an instance of "),Xi=n(yRe,"A",{href:!0});var JBr=s(Xi);z8=r(JBr,"BertModel"),JBr.forEach(t),W8=r(yRe,"."),yRe.forEach(t),zo=i(c),Oa=n(c,"P",{});var wRe=s(Oa);Q8=r(wRe,"There is one class of "),Nf=n(wRe,"CODE",{});var YBr=s(Nf);H8=r(YBr,"AutoModel"),YBr.forEach(t),IPe=r(wRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wRe.forEach(t),Cxe=i(c),Vi=n(c,"H2",{class:!0});var ARe=s(Vi);qf=n(ARe,"A",{id:!0,class:!0,href:!0});var KBr=s(qf);CQ=n(KBr,"SPAN",{});var ZBr=s(CQ);m(oE.$$.fragment,ZBr),ZBr.forEach(t),KBr.forEach(t),jPe=i(ARe),MQ=n(ARe,"SPAN",{});var exr=s(MQ);DPe=r(exr,"Extending the Auto Classes"),exr.forEach(t),ARe.forEach(t),Mxe=i(c),zn=n(c,"P",{});var xz=s(zn);NPe=r(xz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EQ=n(xz,"CODE",{});var oxr=s(EQ);qPe=r(oxr,"NewModel"),oxr.forEach(t),OPe=r(xz,", make sure you have a "),yQ=n(xz,"CODE",{});var rxr=s(yQ);GPe=r(rxr,"NewModelConfig"),rxr.forEach(t),XPe=r(xz,` then you can add those to the auto
classes like this:`),xz.forEach(t),Exe=i(c),m(rE.$$.fragment,c),yxe=i(c),U8=n(c,"P",{});var txr=s(U8);VPe=r(txr,"You will then be able to use the auto classes like you would usually do!"),txr.forEach(t),wxe=i(c),m(Of.$$.fragment,c),Axe=i(c),zi=n(c,"H2",{class:!0});var LRe=s(zi);Gf=n(LRe,"A",{id:!0,class:!0,href:!0});var axr=s(Gf);wQ=n(axr,"SPAN",{});var nxr=s(wQ);m(tE.$$.fragment,nxr),nxr.forEach(t),axr.forEach(t),zPe=i(LRe),AQ=n(LRe,"SPAN",{});var sxr=s(AQ);WPe=r(sxr,"AutoConfig"),sxr.forEach(t),LRe.forEach(t),Lxe=i(c),Wo=n(c,"DIV",{class:!0});var Gs=s(Wo);m(aE.$$.fragment,Gs),QPe=i(Gs),nE=n(Gs,"P",{});var BRe=s(nE);HPe=r(BRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J8=n(BRe,"A",{href:!0});var lxr=s(J8);UPe=r(lxr,"from_pretrained()"),lxr.forEach(t),JPe=r(BRe," class method."),BRe.forEach(t),YPe=i(Gs),sE=n(Gs,"P",{});var xRe=s(sE);KPe=r(xRe,"This class cannot be instantiated directly using "),LQ=n(xRe,"CODE",{});var ixr=s(LQ);ZPe=r(ixr,"__init__()"),ixr.forEach(t),e$e=r(xRe," (throws an error)."),xRe.forEach(t),o$e=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(lE.$$.fragment,ga),r$e=i(ga),BQ=n(ga,"P",{});var dxr=s(BQ);t$e=r(dxr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dxr.forEach(t),a$e=i(ga),Wi=n(ga,"P",{});var kz=s(Wi);n$e=r(kz,"The configuration class to instantiate is selected based on the "),xQ=n(kz,"CODE",{});var cxr=s(xQ);s$e=r(cxr,"model_type"),cxr.forEach(t),l$e=r(kz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kQ=n(kz,"CODE",{});var fxr=s(kQ);i$e=r(fxr,"pretrained_model_name_or_path"),fxr.forEach(t),d$e=r(kz,":"),kz.forEach(t),c$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var _Te=s(Xf);RQ=n(_Te,"STRONG",{});var mxr=s(RQ);f$e=r(mxr,"albert"),mxr.forEach(t),m$e=r(_Te," \u2014 "),Y8=n(_Te,"A",{href:!0});var gxr=s(Y8);g$e=r(gxr,"AlbertConfig"),gxr.forEach(t),h$e=r(_Te," (ALBERT model)"),_Te.forEach(t),p$e=i(T),Vf=n(T,"LI",{});var uTe=s(Vf);SQ=n(uTe,"STRONG",{});var hxr=s(SQ);_$e=r(hxr,"bart"),hxr.forEach(t),u$e=r(uTe," \u2014 "),K8=n(uTe,"A",{href:!0});var pxr=s(K8);b$e=r(pxr,"BartConfig"),pxr.forEach(t),v$e=r(uTe," (BART model)"),uTe.forEach(t),T$e=i(T),zf=n(T,"LI",{});var bTe=s(zf);PQ=n(bTe,"STRONG",{});var _xr=s(PQ);F$e=r(_xr,"beit"),_xr.forEach(t),C$e=r(bTe," \u2014 "),Z8=n(bTe,"A",{href:!0});var uxr=s(Z8);M$e=r(uxr,"BeitConfig"),uxr.forEach(t),E$e=r(bTe," (BEiT model)"),bTe.forEach(t),y$e=i(T),Wf=n(T,"LI",{});var vTe=s(Wf);$Q=n(vTe,"STRONG",{});var bxr=s($Q);w$e=r(bxr,"bert"),bxr.forEach(t),A$e=r(vTe," \u2014 "),e9=n(vTe,"A",{href:!0});var vxr=s(e9);L$e=r(vxr,"BertConfig"),vxr.forEach(t),B$e=r(vTe," (BERT model)"),vTe.forEach(t),x$e=i(T),Qf=n(T,"LI",{});var TTe=s(Qf);IQ=n(TTe,"STRONG",{});var Txr=s(IQ);k$e=r(Txr,"bert-generation"),Txr.forEach(t),R$e=r(TTe," \u2014 "),o9=n(TTe,"A",{href:!0});var Fxr=s(o9);S$e=r(Fxr,"BertGenerationConfig"),Fxr.forEach(t),P$e=r(TTe," (Bert Generation model)"),TTe.forEach(t),$$e=i(T),Hf=n(T,"LI",{});var FTe=s(Hf);jQ=n(FTe,"STRONG",{});var Cxr=s(jQ);I$e=r(Cxr,"big_bird"),Cxr.forEach(t),j$e=r(FTe," \u2014 "),r9=n(FTe,"A",{href:!0});var Mxr=s(r9);D$e=r(Mxr,"BigBirdConfig"),Mxr.forEach(t),N$e=r(FTe," (BigBird model)"),FTe.forEach(t),q$e=i(T),Uf=n(T,"LI",{});var CTe=s(Uf);DQ=n(CTe,"STRONG",{});var Exr=s(DQ);O$e=r(Exr,"bigbird_pegasus"),Exr.forEach(t),G$e=r(CTe," \u2014 "),t9=n(CTe,"A",{href:!0});var yxr=s(t9);X$e=r(yxr,"BigBirdPegasusConfig"),yxr.forEach(t),V$e=r(CTe," (BigBirdPegasus model)"),CTe.forEach(t),z$e=i(T),Jf=n(T,"LI",{});var MTe=s(Jf);NQ=n(MTe,"STRONG",{});var wxr=s(NQ);W$e=r(wxr,"blenderbot"),wxr.forEach(t),Q$e=r(MTe," \u2014 "),a9=n(MTe,"A",{href:!0});var Axr=s(a9);H$e=r(Axr,"BlenderbotConfig"),Axr.forEach(t),U$e=r(MTe," (Blenderbot model)"),MTe.forEach(t),J$e=i(T),Yf=n(T,"LI",{});var ETe=s(Yf);qQ=n(ETe,"STRONG",{});var Lxr=s(qQ);Y$e=r(Lxr,"blenderbot-small"),Lxr.forEach(t),K$e=r(ETe," \u2014 "),n9=n(ETe,"A",{href:!0});var Bxr=s(n9);Z$e=r(Bxr,"BlenderbotSmallConfig"),Bxr.forEach(t),eIe=r(ETe," (BlenderbotSmall model)"),ETe.forEach(t),oIe=i(T),Kf=n(T,"LI",{});var yTe=s(Kf);OQ=n(yTe,"STRONG",{});var xxr=s(OQ);rIe=r(xxr,"camembert"),xxr.forEach(t),tIe=r(yTe," \u2014 "),s9=n(yTe,"A",{href:!0});var kxr=s(s9);aIe=r(kxr,"CamembertConfig"),kxr.forEach(t),nIe=r(yTe," (CamemBERT model)"),yTe.forEach(t),sIe=i(T),Zf=n(T,"LI",{});var wTe=s(Zf);GQ=n(wTe,"STRONG",{});var Rxr=s(GQ);lIe=r(Rxr,"canine"),Rxr.forEach(t),iIe=r(wTe," \u2014 "),l9=n(wTe,"A",{href:!0});var Sxr=s(l9);dIe=r(Sxr,"CanineConfig"),Sxr.forEach(t),cIe=r(wTe," (Canine model)"),wTe.forEach(t),fIe=i(T),em=n(T,"LI",{});var ATe=s(em);XQ=n(ATe,"STRONG",{});var Pxr=s(XQ);mIe=r(Pxr,"clip"),Pxr.forEach(t),gIe=r(ATe," \u2014 "),i9=n(ATe,"A",{href:!0});var $xr=s(i9);hIe=r($xr,"CLIPConfig"),$xr.forEach(t),pIe=r(ATe," (CLIP model)"),ATe.forEach(t),_Ie=i(T),om=n(T,"LI",{});var LTe=s(om);VQ=n(LTe,"STRONG",{});var Ixr=s(VQ);uIe=r(Ixr,"convbert"),Ixr.forEach(t),bIe=r(LTe," \u2014 "),d9=n(LTe,"A",{href:!0});var jxr=s(d9);vIe=r(jxr,"ConvBertConfig"),jxr.forEach(t),TIe=r(LTe," (ConvBERT model)"),LTe.forEach(t),FIe=i(T),rm=n(T,"LI",{});var BTe=s(rm);zQ=n(BTe,"STRONG",{});var Dxr=s(zQ);CIe=r(Dxr,"convnext"),Dxr.forEach(t),MIe=r(BTe," \u2014 "),c9=n(BTe,"A",{href:!0});var Nxr=s(c9);EIe=r(Nxr,"ConvNextConfig"),Nxr.forEach(t),yIe=r(BTe," (ConvNext model)"),BTe.forEach(t),wIe=i(T),tm=n(T,"LI",{});var xTe=s(tm);WQ=n(xTe,"STRONG",{});var qxr=s(WQ);AIe=r(qxr,"ctrl"),qxr.forEach(t),LIe=r(xTe," \u2014 "),f9=n(xTe,"A",{href:!0});var Oxr=s(f9);BIe=r(Oxr,"CTRLConfig"),Oxr.forEach(t),xIe=r(xTe," (CTRL model)"),xTe.forEach(t),kIe=i(T),am=n(T,"LI",{});var kTe=s(am);QQ=n(kTe,"STRONG",{});var Gxr=s(QQ);RIe=r(Gxr,"data2vec-audio"),Gxr.forEach(t),SIe=r(kTe," \u2014 "),m9=n(kTe,"A",{href:!0});var Xxr=s(m9);PIe=r(Xxr,"Data2VecAudioConfig"),Xxr.forEach(t),$Ie=r(kTe," (Data2VecAudio model)"),kTe.forEach(t),IIe=i(T),nm=n(T,"LI",{});var RTe=s(nm);HQ=n(RTe,"STRONG",{});var Vxr=s(HQ);jIe=r(Vxr,"data2vec-text"),Vxr.forEach(t),DIe=r(RTe," \u2014 "),g9=n(RTe,"A",{href:!0});var zxr=s(g9);NIe=r(zxr,"Data2VecTextConfig"),zxr.forEach(t),qIe=r(RTe," (Data2VecText model)"),RTe.forEach(t),OIe=i(T),sm=n(T,"LI",{});var STe=s(sm);UQ=n(STe,"STRONG",{});var Wxr=s(UQ);GIe=r(Wxr,"deberta"),Wxr.forEach(t),XIe=r(STe," \u2014 "),h9=n(STe,"A",{href:!0});var Qxr=s(h9);VIe=r(Qxr,"DebertaConfig"),Qxr.forEach(t),zIe=r(STe," (DeBERTa model)"),STe.forEach(t),WIe=i(T),lm=n(T,"LI",{});var PTe=s(lm);JQ=n(PTe,"STRONG",{});var Hxr=s(JQ);QIe=r(Hxr,"deberta-v2"),Hxr.forEach(t),HIe=r(PTe," \u2014 "),p9=n(PTe,"A",{href:!0});var Uxr=s(p9);UIe=r(Uxr,"DebertaV2Config"),Uxr.forEach(t),JIe=r(PTe," (DeBERTa-v2 model)"),PTe.forEach(t),YIe=i(T),im=n(T,"LI",{});var $Te=s(im);YQ=n($Te,"STRONG",{});var Jxr=s(YQ);KIe=r(Jxr,"deit"),Jxr.forEach(t),ZIe=r($Te," \u2014 "),_9=n($Te,"A",{href:!0});var Yxr=s(_9);eje=r(Yxr,"DeiTConfig"),Yxr.forEach(t),oje=r($Te," (DeiT model)"),$Te.forEach(t),rje=i(T),dm=n(T,"LI",{});var ITe=s(dm);KQ=n(ITe,"STRONG",{});var Kxr=s(KQ);tje=r(Kxr,"detr"),Kxr.forEach(t),aje=r(ITe," \u2014 "),u9=n(ITe,"A",{href:!0});var Zxr=s(u9);nje=r(Zxr,"DetrConfig"),Zxr.forEach(t),sje=r(ITe," (DETR model)"),ITe.forEach(t),lje=i(T),cm=n(T,"LI",{});var jTe=s(cm);ZQ=n(jTe,"STRONG",{});var ekr=s(ZQ);ije=r(ekr,"distilbert"),ekr.forEach(t),dje=r(jTe," \u2014 "),b9=n(jTe,"A",{href:!0});var okr=s(b9);cje=r(okr,"DistilBertConfig"),okr.forEach(t),fje=r(jTe," (DistilBERT model)"),jTe.forEach(t),mje=i(T),fm=n(T,"LI",{});var DTe=s(fm);eH=n(DTe,"STRONG",{});var rkr=s(eH);gje=r(rkr,"dpr"),rkr.forEach(t),hje=r(DTe," \u2014 "),v9=n(DTe,"A",{href:!0});var tkr=s(v9);pje=r(tkr,"DPRConfig"),tkr.forEach(t),_je=r(DTe," (DPR model)"),DTe.forEach(t),uje=i(T),mm=n(T,"LI",{});var NTe=s(mm);oH=n(NTe,"STRONG",{});var akr=s(oH);bje=r(akr,"electra"),akr.forEach(t),vje=r(NTe," \u2014 "),T9=n(NTe,"A",{href:!0});var nkr=s(T9);Tje=r(nkr,"ElectraConfig"),nkr.forEach(t),Fje=r(NTe," (ELECTRA model)"),NTe.forEach(t),Cje=i(T),gm=n(T,"LI",{});var qTe=s(gm);rH=n(qTe,"STRONG",{});var skr=s(rH);Mje=r(skr,"encoder-decoder"),skr.forEach(t),Eje=r(qTe," \u2014 "),F9=n(qTe,"A",{href:!0});var lkr=s(F9);yje=r(lkr,"EncoderDecoderConfig"),lkr.forEach(t),wje=r(qTe," (Encoder decoder model)"),qTe.forEach(t),Aje=i(T),hm=n(T,"LI",{});var OTe=s(hm);tH=n(OTe,"STRONG",{});var ikr=s(tH);Lje=r(ikr,"flaubert"),ikr.forEach(t),Bje=r(OTe," \u2014 "),C9=n(OTe,"A",{href:!0});var dkr=s(C9);xje=r(dkr,"FlaubertConfig"),dkr.forEach(t),kje=r(OTe," (FlauBERT model)"),OTe.forEach(t),Rje=i(T),pm=n(T,"LI",{});var GTe=s(pm);aH=n(GTe,"STRONG",{});var ckr=s(aH);Sje=r(ckr,"fnet"),ckr.forEach(t),Pje=r(GTe," \u2014 "),M9=n(GTe,"A",{href:!0});var fkr=s(M9);$je=r(fkr,"FNetConfig"),fkr.forEach(t),Ije=r(GTe," (FNet model)"),GTe.forEach(t),jje=i(T),_m=n(T,"LI",{});var XTe=s(_m);nH=n(XTe,"STRONG",{});var mkr=s(nH);Dje=r(mkr,"fsmt"),mkr.forEach(t),Nje=r(XTe," \u2014 "),E9=n(XTe,"A",{href:!0});var gkr=s(E9);qje=r(gkr,"FSMTConfig"),gkr.forEach(t),Oje=r(XTe," (FairSeq Machine-Translation model)"),XTe.forEach(t),Gje=i(T),um=n(T,"LI",{});var VTe=s(um);sH=n(VTe,"STRONG",{});var hkr=s(sH);Xje=r(hkr,"funnel"),hkr.forEach(t),Vje=r(VTe," \u2014 "),y9=n(VTe,"A",{href:!0});var pkr=s(y9);zje=r(pkr,"FunnelConfig"),pkr.forEach(t),Wje=r(VTe," (Funnel Transformer model)"),VTe.forEach(t),Qje=i(T),bm=n(T,"LI",{});var zTe=s(bm);lH=n(zTe,"STRONG",{});var _kr=s(lH);Hje=r(_kr,"gpt2"),_kr.forEach(t),Uje=r(zTe," \u2014 "),w9=n(zTe,"A",{href:!0});var ukr=s(w9);Jje=r(ukr,"GPT2Config"),ukr.forEach(t),Yje=r(zTe," (OpenAI GPT-2 model)"),zTe.forEach(t),Kje=i(T),vm=n(T,"LI",{});var WTe=s(vm);iH=n(WTe,"STRONG",{});var bkr=s(iH);Zje=r(bkr,"gpt_neo"),bkr.forEach(t),eDe=r(WTe," \u2014 "),A9=n(WTe,"A",{href:!0});var vkr=s(A9);oDe=r(vkr,"GPTNeoConfig"),vkr.forEach(t),rDe=r(WTe," (GPT Neo model)"),WTe.forEach(t),tDe=i(T),Tm=n(T,"LI",{});var QTe=s(Tm);dH=n(QTe,"STRONG",{});var Tkr=s(dH);aDe=r(Tkr,"gptj"),Tkr.forEach(t),nDe=r(QTe," \u2014 "),L9=n(QTe,"A",{href:!0});var Fkr=s(L9);sDe=r(Fkr,"GPTJConfig"),Fkr.forEach(t),lDe=r(QTe," (GPT-J model)"),QTe.forEach(t),iDe=i(T),Fm=n(T,"LI",{});var HTe=s(Fm);cH=n(HTe,"STRONG",{});var Ckr=s(cH);dDe=r(Ckr,"hubert"),Ckr.forEach(t),cDe=r(HTe," \u2014 "),B9=n(HTe,"A",{href:!0});var Mkr=s(B9);fDe=r(Mkr,"HubertConfig"),Mkr.forEach(t),mDe=r(HTe," (Hubert model)"),HTe.forEach(t),gDe=i(T),Cm=n(T,"LI",{});var UTe=s(Cm);fH=n(UTe,"STRONG",{});var Ekr=s(fH);hDe=r(Ekr,"ibert"),Ekr.forEach(t),pDe=r(UTe," \u2014 "),x9=n(UTe,"A",{href:!0});var ykr=s(x9);_De=r(ykr,"IBertConfig"),ykr.forEach(t),uDe=r(UTe," (I-BERT model)"),UTe.forEach(t),bDe=i(T),Mm=n(T,"LI",{});var JTe=s(Mm);mH=n(JTe,"STRONG",{});var wkr=s(mH);vDe=r(wkr,"imagegpt"),wkr.forEach(t),TDe=r(JTe," \u2014 "),k9=n(JTe,"A",{href:!0});var Akr=s(k9);FDe=r(Akr,"ImageGPTConfig"),Akr.forEach(t),CDe=r(JTe," (ImageGPT model)"),JTe.forEach(t),MDe=i(T),Em=n(T,"LI",{});var YTe=s(Em);gH=n(YTe,"STRONG",{});var Lkr=s(gH);EDe=r(Lkr,"layoutlm"),Lkr.forEach(t),yDe=r(YTe," \u2014 "),R9=n(YTe,"A",{href:!0});var Bkr=s(R9);wDe=r(Bkr,"LayoutLMConfig"),Bkr.forEach(t),ADe=r(YTe," (LayoutLM model)"),YTe.forEach(t),LDe=i(T),ym=n(T,"LI",{});var KTe=s(ym);hH=n(KTe,"STRONG",{});var xkr=s(hH);BDe=r(xkr,"layoutlmv2"),xkr.forEach(t),xDe=r(KTe," \u2014 "),S9=n(KTe,"A",{href:!0});var kkr=s(S9);kDe=r(kkr,"LayoutLMv2Config"),kkr.forEach(t),RDe=r(KTe," (LayoutLMv2 model)"),KTe.forEach(t),SDe=i(T),wm=n(T,"LI",{});var ZTe=s(wm);pH=n(ZTe,"STRONG",{});var Rkr=s(pH);PDe=r(Rkr,"led"),Rkr.forEach(t),$De=r(ZTe," \u2014 "),P9=n(ZTe,"A",{href:!0});var Skr=s(P9);IDe=r(Skr,"LEDConfig"),Skr.forEach(t),jDe=r(ZTe," (LED model)"),ZTe.forEach(t),DDe=i(T),Am=n(T,"LI",{});var e7e=s(Am);_H=n(e7e,"STRONG",{});var Pkr=s(_H);NDe=r(Pkr,"longformer"),Pkr.forEach(t),qDe=r(e7e," \u2014 "),$9=n(e7e,"A",{href:!0});var $kr=s($9);ODe=r($kr,"LongformerConfig"),$kr.forEach(t),GDe=r(e7e," (Longformer model)"),e7e.forEach(t),XDe=i(T),Lm=n(T,"LI",{});var o7e=s(Lm);uH=n(o7e,"STRONG",{});var Ikr=s(uH);VDe=r(Ikr,"luke"),Ikr.forEach(t),zDe=r(o7e," \u2014 "),I9=n(o7e,"A",{href:!0});var jkr=s(I9);WDe=r(jkr,"LukeConfig"),jkr.forEach(t),QDe=r(o7e," (LUKE model)"),o7e.forEach(t),HDe=i(T),Bm=n(T,"LI",{});var r7e=s(Bm);bH=n(r7e,"STRONG",{});var Dkr=s(bH);UDe=r(Dkr,"lxmert"),Dkr.forEach(t),JDe=r(r7e," \u2014 "),j9=n(r7e,"A",{href:!0});var Nkr=s(j9);YDe=r(Nkr,"LxmertConfig"),Nkr.forEach(t),KDe=r(r7e," (LXMERT model)"),r7e.forEach(t),ZDe=i(T),xm=n(T,"LI",{});var t7e=s(xm);vH=n(t7e,"STRONG",{});var qkr=s(vH);eNe=r(qkr,"m2m_100"),qkr.forEach(t),oNe=r(t7e," \u2014 "),D9=n(t7e,"A",{href:!0});var Okr=s(D9);rNe=r(Okr,"M2M100Config"),Okr.forEach(t),tNe=r(t7e," (M2M100 model)"),t7e.forEach(t),aNe=i(T),km=n(T,"LI",{});var a7e=s(km);TH=n(a7e,"STRONG",{});var Gkr=s(TH);nNe=r(Gkr,"marian"),Gkr.forEach(t),sNe=r(a7e," \u2014 "),N9=n(a7e,"A",{href:!0});var Xkr=s(N9);lNe=r(Xkr,"MarianConfig"),Xkr.forEach(t),iNe=r(a7e," (Marian model)"),a7e.forEach(t),dNe=i(T),Rm=n(T,"LI",{});var n7e=s(Rm);FH=n(n7e,"STRONG",{});var Vkr=s(FH);cNe=r(Vkr,"maskformer"),Vkr.forEach(t),fNe=r(n7e," \u2014 "),q9=n(n7e,"A",{href:!0});var zkr=s(q9);mNe=r(zkr,"MaskFormerConfig"),zkr.forEach(t),gNe=r(n7e," (MaskFormer model)"),n7e.forEach(t),hNe=i(T),Sm=n(T,"LI",{});var s7e=s(Sm);CH=n(s7e,"STRONG",{});var Wkr=s(CH);pNe=r(Wkr,"mbart"),Wkr.forEach(t),_Ne=r(s7e," \u2014 "),O9=n(s7e,"A",{href:!0});var Qkr=s(O9);uNe=r(Qkr,"MBartConfig"),Qkr.forEach(t),bNe=r(s7e," (mBART model)"),s7e.forEach(t),vNe=i(T),Pm=n(T,"LI",{});var l7e=s(Pm);MH=n(l7e,"STRONG",{});var Hkr=s(MH);TNe=r(Hkr,"megatron-bert"),Hkr.forEach(t),FNe=r(l7e," \u2014 "),G9=n(l7e,"A",{href:!0});var Ukr=s(G9);CNe=r(Ukr,"MegatronBertConfig"),Ukr.forEach(t),MNe=r(l7e," (MegatronBert model)"),l7e.forEach(t),ENe=i(T),$m=n(T,"LI",{});var i7e=s($m);EH=n(i7e,"STRONG",{});var Jkr=s(EH);yNe=r(Jkr,"mobilebert"),Jkr.forEach(t),wNe=r(i7e," \u2014 "),X9=n(i7e,"A",{href:!0});var Ykr=s(X9);ANe=r(Ykr,"MobileBertConfig"),Ykr.forEach(t),LNe=r(i7e," (MobileBERT model)"),i7e.forEach(t),BNe=i(T),Im=n(T,"LI",{});var d7e=s(Im);yH=n(d7e,"STRONG",{});var Kkr=s(yH);xNe=r(Kkr,"mpnet"),Kkr.forEach(t),kNe=r(d7e," \u2014 "),V9=n(d7e,"A",{href:!0});var Zkr=s(V9);RNe=r(Zkr,"MPNetConfig"),Zkr.forEach(t),SNe=r(d7e," (MPNet model)"),d7e.forEach(t),PNe=i(T),jm=n(T,"LI",{});var c7e=s(jm);wH=n(c7e,"STRONG",{});var eRr=s(wH);$Ne=r(eRr,"mt5"),eRr.forEach(t),INe=r(c7e," \u2014 "),z9=n(c7e,"A",{href:!0});var oRr=s(z9);jNe=r(oRr,"MT5Config"),oRr.forEach(t),DNe=r(c7e," (mT5 model)"),c7e.forEach(t),NNe=i(T),Dm=n(T,"LI",{});var f7e=s(Dm);AH=n(f7e,"STRONG",{});var rRr=s(AH);qNe=r(rRr,"nystromformer"),rRr.forEach(t),ONe=r(f7e," \u2014 "),W9=n(f7e,"A",{href:!0});var tRr=s(W9);GNe=r(tRr,"NystromformerConfig"),tRr.forEach(t),XNe=r(f7e," (Nystromformer model)"),f7e.forEach(t),VNe=i(T),Nm=n(T,"LI",{});var m7e=s(Nm);LH=n(m7e,"STRONG",{});var aRr=s(LH);zNe=r(aRr,"openai-gpt"),aRr.forEach(t),WNe=r(m7e," \u2014 "),Q9=n(m7e,"A",{href:!0});var nRr=s(Q9);QNe=r(nRr,"OpenAIGPTConfig"),nRr.forEach(t),HNe=r(m7e," (OpenAI GPT model)"),m7e.forEach(t),UNe=i(T),qm=n(T,"LI",{});var g7e=s(qm);BH=n(g7e,"STRONG",{});var sRr=s(BH);JNe=r(sRr,"pegasus"),sRr.forEach(t),YNe=r(g7e," \u2014 "),H9=n(g7e,"A",{href:!0});var lRr=s(H9);KNe=r(lRr,"PegasusConfig"),lRr.forEach(t),ZNe=r(g7e," (Pegasus model)"),g7e.forEach(t),eqe=i(T),Om=n(T,"LI",{});var h7e=s(Om);xH=n(h7e,"STRONG",{});var iRr=s(xH);oqe=r(iRr,"perceiver"),iRr.forEach(t),rqe=r(h7e," \u2014 "),U9=n(h7e,"A",{href:!0});var dRr=s(U9);tqe=r(dRr,"PerceiverConfig"),dRr.forEach(t),aqe=r(h7e," (Perceiver model)"),h7e.forEach(t),nqe=i(T),Gm=n(T,"LI",{});var p7e=s(Gm);kH=n(p7e,"STRONG",{});var cRr=s(kH);sqe=r(cRr,"plbart"),cRr.forEach(t),lqe=r(p7e," \u2014 "),J9=n(p7e,"A",{href:!0});var fRr=s(J9);iqe=r(fRr,"PLBartConfig"),fRr.forEach(t),dqe=r(p7e," (PLBart model)"),p7e.forEach(t),cqe=i(T),Xm=n(T,"LI",{});var _7e=s(Xm);RH=n(_7e,"STRONG",{});var mRr=s(RH);fqe=r(mRr,"poolformer"),mRr.forEach(t),mqe=r(_7e," \u2014 "),Y9=n(_7e,"A",{href:!0});var gRr=s(Y9);gqe=r(gRr,"PoolFormerConfig"),gRr.forEach(t),hqe=r(_7e," (PoolFormer model)"),_7e.forEach(t),pqe=i(T),Vm=n(T,"LI",{});var u7e=s(Vm);SH=n(u7e,"STRONG",{});var hRr=s(SH);_qe=r(hRr,"prophetnet"),hRr.forEach(t),uqe=r(u7e," \u2014 "),K9=n(u7e,"A",{href:!0});var pRr=s(K9);bqe=r(pRr,"ProphetNetConfig"),pRr.forEach(t),vqe=r(u7e," (ProphetNet model)"),u7e.forEach(t),Tqe=i(T),zm=n(T,"LI",{});var b7e=s(zm);PH=n(b7e,"STRONG",{});var _Rr=s(PH);Fqe=r(_Rr,"qdqbert"),_Rr.forEach(t),Cqe=r(b7e," \u2014 "),Z9=n(b7e,"A",{href:!0});var uRr=s(Z9);Mqe=r(uRr,"QDQBertConfig"),uRr.forEach(t),Eqe=r(b7e," (QDQBert model)"),b7e.forEach(t),yqe=i(T),Wm=n(T,"LI",{});var v7e=s(Wm);$H=n(v7e,"STRONG",{});var bRr=s($H);wqe=r(bRr,"rag"),bRr.forEach(t),Aqe=r(v7e," \u2014 "),eB=n(v7e,"A",{href:!0});var vRr=s(eB);Lqe=r(vRr,"RagConfig"),vRr.forEach(t),Bqe=r(v7e," (RAG model)"),v7e.forEach(t),xqe=i(T),Qm=n(T,"LI",{});var T7e=s(Qm);IH=n(T7e,"STRONG",{});var TRr=s(IH);kqe=r(TRr,"realm"),TRr.forEach(t),Rqe=r(T7e," \u2014 "),oB=n(T7e,"A",{href:!0});var FRr=s(oB);Sqe=r(FRr,"RealmConfig"),FRr.forEach(t),Pqe=r(T7e," (Realm model)"),T7e.forEach(t),$qe=i(T),Hm=n(T,"LI",{});var F7e=s(Hm);jH=n(F7e,"STRONG",{});var CRr=s(jH);Iqe=r(CRr,"reformer"),CRr.forEach(t),jqe=r(F7e," \u2014 "),rB=n(F7e,"A",{href:!0});var MRr=s(rB);Dqe=r(MRr,"ReformerConfig"),MRr.forEach(t),Nqe=r(F7e," (Reformer model)"),F7e.forEach(t),qqe=i(T),Um=n(T,"LI",{});var C7e=s(Um);DH=n(C7e,"STRONG",{});var ERr=s(DH);Oqe=r(ERr,"rembert"),ERr.forEach(t),Gqe=r(C7e," \u2014 "),tB=n(C7e,"A",{href:!0});var yRr=s(tB);Xqe=r(yRr,"RemBertConfig"),yRr.forEach(t),Vqe=r(C7e," (RemBERT model)"),C7e.forEach(t),zqe=i(T),Jm=n(T,"LI",{});var M7e=s(Jm);NH=n(M7e,"STRONG",{});var wRr=s(NH);Wqe=r(wRr,"resnet"),wRr.forEach(t),Qqe=r(M7e," \u2014 "),aB=n(M7e,"A",{href:!0});var ARr=s(aB);Hqe=r(ARr,"ResNetConfig"),ARr.forEach(t),Uqe=r(M7e," (ResNet model)"),M7e.forEach(t),Jqe=i(T),Ym=n(T,"LI",{});var E7e=s(Ym);qH=n(E7e,"STRONG",{});var LRr=s(qH);Yqe=r(LRr,"retribert"),LRr.forEach(t),Kqe=r(E7e," \u2014 "),nB=n(E7e,"A",{href:!0});var BRr=s(nB);Zqe=r(BRr,"RetriBertConfig"),BRr.forEach(t),eOe=r(E7e," (RetriBERT model)"),E7e.forEach(t),oOe=i(T),Km=n(T,"LI",{});var y7e=s(Km);OH=n(y7e,"STRONG",{});var xRr=s(OH);rOe=r(xRr,"roberta"),xRr.forEach(t),tOe=r(y7e," \u2014 "),sB=n(y7e,"A",{href:!0});var kRr=s(sB);aOe=r(kRr,"RobertaConfig"),kRr.forEach(t),nOe=r(y7e," (RoBERTa model)"),y7e.forEach(t),sOe=i(T),Zm=n(T,"LI",{});var w7e=s(Zm);GH=n(w7e,"STRONG",{});var RRr=s(GH);lOe=r(RRr,"roformer"),RRr.forEach(t),iOe=r(w7e," \u2014 "),lB=n(w7e,"A",{href:!0});var SRr=s(lB);dOe=r(SRr,"RoFormerConfig"),SRr.forEach(t),cOe=r(w7e," (RoFormer model)"),w7e.forEach(t),fOe=i(T),eg=n(T,"LI",{});var A7e=s(eg);XH=n(A7e,"STRONG",{});var PRr=s(XH);mOe=r(PRr,"segformer"),PRr.forEach(t),gOe=r(A7e," \u2014 "),iB=n(A7e,"A",{href:!0});var $Rr=s(iB);hOe=r($Rr,"SegformerConfig"),$Rr.forEach(t),pOe=r(A7e," (SegFormer model)"),A7e.forEach(t),_Oe=i(T),og=n(T,"LI",{});var L7e=s(og);VH=n(L7e,"STRONG",{});var IRr=s(VH);uOe=r(IRr,"sew"),IRr.forEach(t),bOe=r(L7e," \u2014 "),dB=n(L7e,"A",{href:!0});var jRr=s(dB);vOe=r(jRr,"SEWConfig"),jRr.forEach(t),TOe=r(L7e," (SEW model)"),L7e.forEach(t),FOe=i(T),rg=n(T,"LI",{});var B7e=s(rg);zH=n(B7e,"STRONG",{});var DRr=s(zH);COe=r(DRr,"sew-d"),DRr.forEach(t),MOe=r(B7e," \u2014 "),cB=n(B7e,"A",{href:!0});var NRr=s(cB);EOe=r(NRr,"SEWDConfig"),NRr.forEach(t),yOe=r(B7e," (SEW-D model)"),B7e.forEach(t),wOe=i(T),tg=n(T,"LI",{});var x7e=s(tg);WH=n(x7e,"STRONG",{});var qRr=s(WH);AOe=r(qRr,"speech-encoder-decoder"),qRr.forEach(t),LOe=r(x7e," \u2014 "),fB=n(x7e,"A",{href:!0});var ORr=s(fB);BOe=r(ORr,"SpeechEncoderDecoderConfig"),ORr.forEach(t),xOe=r(x7e," (Speech Encoder decoder model)"),x7e.forEach(t),kOe=i(T),ag=n(T,"LI",{});var k7e=s(ag);QH=n(k7e,"STRONG",{});var GRr=s(QH);ROe=r(GRr,"speech_to_text"),GRr.forEach(t),SOe=r(k7e," \u2014 "),mB=n(k7e,"A",{href:!0});var XRr=s(mB);POe=r(XRr,"Speech2TextConfig"),XRr.forEach(t),$Oe=r(k7e," (Speech2Text model)"),k7e.forEach(t),IOe=i(T),ng=n(T,"LI",{});var R7e=s(ng);HH=n(R7e,"STRONG",{});var VRr=s(HH);jOe=r(VRr,"speech_to_text_2"),VRr.forEach(t),DOe=r(R7e," \u2014 "),gB=n(R7e,"A",{href:!0});var zRr=s(gB);NOe=r(zRr,"Speech2Text2Config"),zRr.forEach(t),qOe=r(R7e," (Speech2Text2 model)"),R7e.forEach(t),OOe=i(T),sg=n(T,"LI",{});var S7e=s(sg);UH=n(S7e,"STRONG",{});var WRr=s(UH);GOe=r(WRr,"splinter"),WRr.forEach(t),XOe=r(S7e," \u2014 "),hB=n(S7e,"A",{href:!0});var QRr=s(hB);VOe=r(QRr,"SplinterConfig"),QRr.forEach(t),zOe=r(S7e," (Splinter model)"),S7e.forEach(t),WOe=i(T),lg=n(T,"LI",{});var P7e=s(lg);JH=n(P7e,"STRONG",{});var HRr=s(JH);QOe=r(HRr,"squeezebert"),HRr.forEach(t),HOe=r(P7e," \u2014 "),pB=n(P7e,"A",{href:!0});var URr=s(pB);UOe=r(URr,"SqueezeBertConfig"),URr.forEach(t),JOe=r(P7e," (SqueezeBERT model)"),P7e.forEach(t),YOe=i(T),ig=n(T,"LI",{});var $7e=s(ig);YH=n($7e,"STRONG",{});var JRr=s(YH);KOe=r(JRr,"swin"),JRr.forEach(t),ZOe=r($7e," \u2014 "),_B=n($7e,"A",{href:!0});var YRr=s(_B);eGe=r(YRr,"SwinConfig"),YRr.forEach(t),oGe=r($7e," (Swin model)"),$7e.forEach(t),rGe=i(T),dg=n(T,"LI",{});var I7e=s(dg);KH=n(I7e,"STRONG",{});var KRr=s(KH);tGe=r(KRr,"t5"),KRr.forEach(t),aGe=r(I7e," \u2014 "),uB=n(I7e,"A",{href:!0});var ZRr=s(uB);nGe=r(ZRr,"T5Config"),ZRr.forEach(t),sGe=r(I7e," (T5 model)"),I7e.forEach(t),lGe=i(T),cg=n(T,"LI",{});var j7e=s(cg);ZH=n(j7e,"STRONG",{});var eSr=s(ZH);iGe=r(eSr,"tapas"),eSr.forEach(t),dGe=r(j7e," \u2014 "),bB=n(j7e,"A",{href:!0});var oSr=s(bB);cGe=r(oSr,"TapasConfig"),oSr.forEach(t),fGe=r(j7e," (TAPAS model)"),j7e.forEach(t),mGe=i(T),fg=n(T,"LI",{});var D7e=s(fg);eU=n(D7e,"STRONG",{});var rSr=s(eU);gGe=r(rSr,"transfo-xl"),rSr.forEach(t),hGe=r(D7e," \u2014 "),vB=n(D7e,"A",{href:!0});var tSr=s(vB);pGe=r(tSr,"TransfoXLConfig"),tSr.forEach(t),_Ge=r(D7e," (Transformer-XL model)"),D7e.forEach(t),uGe=i(T),mg=n(T,"LI",{});var N7e=s(mg);oU=n(N7e,"STRONG",{});var aSr=s(oU);bGe=r(aSr,"trocr"),aSr.forEach(t),vGe=r(N7e," \u2014 "),TB=n(N7e,"A",{href:!0});var nSr=s(TB);TGe=r(nSr,"TrOCRConfig"),nSr.forEach(t),FGe=r(N7e," (TrOCR model)"),N7e.forEach(t),CGe=i(T),gg=n(T,"LI",{});var q7e=s(gg);rU=n(q7e,"STRONG",{});var sSr=s(rU);MGe=r(sSr,"unispeech"),sSr.forEach(t),EGe=r(q7e," \u2014 "),FB=n(q7e,"A",{href:!0});var lSr=s(FB);yGe=r(lSr,"UniSpeechConfig"),lSr.forEach(t),wGe=r(q7e," (UniSpeech model)"),q7e.forEach(t),AGe=i(T),hg=n(T,"LI",{});var O7e=s(hg);tU=n(O7e,"STRONG",{});var iSr=s(tU);LGe=r(iSr,"unispeech-sat"),iSr.forEach(t),BGe=r(O7e," \u2014 "),CB=n(O7e,"A",{href:!0});var dSr=s(CB);xGe=r(dSr,"UniSpeechSatConfig"),dSr.forEach(t),kGe=r(O7e," (UniSpeechSat model)"),O7e.forEach(t),RGe=i(T),pg=n(T,"LI",{});var G7e=s(pg);aU=n(G7e,"STRONG",{});var cSr=s(aU);SGe=r(cSr,"vilt"),cSr.forEach(t),PGe=r(G7e," \u2014 "),MB=n(G7e,"A",{href:!0});var fSr=s(MB);$Ge=r(fSr,"ViltConfig"),fSr.forEach(t),IGe=r(G7e," (ViLT model)"),G7e.forEach(t),jGe=i(T),_g=n(T,"LI",{});var X7e=s(_g);nU=n(X7e,"STRONG",{});var mSr=s(nU);DGe=r(mSr,"vision-encoder-decoder"),mSr.forEach(t),NGe=r(X7e," \u2014 "),EB=n(X7e,"A",{href:!0});var gSr=s(EB);qGe=r(gSr,"VisionEncoderDecoderConfig"),gSr.forEach(t),OGe=r(X7e," (Vision Encoder decoder model)"),X7e.forEach(t),GGe=i(T),ug=n(T,"LI",{});var V7e=s(ug);sU=n(V7e,"STRONG",{});var hSr=s(sU);XGe=r(hSr,"vision-text-dual-encoder"),hSr.forEach(t),VGe=r(V7e," \u2014 "),yB=n(V7e,"A",{href:!0});var pSr=s(yB);zGe=r(pSr,"VisionTextDualEncoderConfig"),pSr.forEach(t),WGe=r(V7e," (VisionTextDualEncoder model)"),V7e.forEach(t),QGe=i(T),bg=n(T,"LI",{});var z7e=s(bg);lU=n(z7e,"STRONG",{});var _Sr=s(lU);HGe=r(_Sr,"visual_bert"),_Sr.forEach(t),UGe=r(z7e," \u2014 "),wB=n(z7e,"A",{href:!0});var uSr=s(wB);JGe=r(uSr,"VisualBertConfig"),uSr.forEach(t),YGe=r(z7e," (VisualBert model)"),z7e.forEach(t),KGe=i(T),vg=n(T,"LI",{});var W7e=s(vg);iU=n(W7e,"STRONG",{});var bSr=s(iU);ZGe=r(bSr,"vit"),bSr.forEach(t),eXe=r(W7e," \u2014 "),AB=n(W7e,"A",{href:!0});var vSr=s(AB);oXe=r(vSr,"ViTConfig"),vSr.forEach(t),rXe=r(W7e," (ViT model)"),W7e.forEach(t),tXe=i(T),Tg=n(T,"LI",{});var Q7e=s(Tg);dU=n(Q7e,"STRONG",{});var TSr=s(dU);aXe=r(TSr,"vit_mae"),TSr.forEach(t),nXe=r(Q7e," \u2014 "),LB=n(Q7e,"A",{href:!0});var FSr=s(LB);sXe=r(FSr,"ViTMAEConfig"),FSr.forEach(t),lXe=r(Q7e," (ViTMAE model)"),Q7e.forEach(t),iXe=i(T),Fg=n(T,"LI",{});var H7e=s(Fg);cU=n(H7e,"STRONG",{});var CSr=s(cU);dXe=r(CSr,"wav2vec2"),CSr.forEach(t),cXe=r(H7e," \u2014 "),BB=n(H7e,"A",{href:!0});var MSr=s(BB);fXe=r(MSr,"Wav2Vec2Config"),MSr.forEach(t),mXe=r(H7e," (Wav2Vec2 model)"),H7e.forEach(t),gXe=i(T),Cg=n(T,"LI",{});var U7e=s(Cg);fU=n(U7e,"STRONG",{});var ESr=s(fU);hXe=r(ESr,"wavlm"),ESr.forEach(t),pXe=r(U7e," \u2014 "),xB=n(U7e,"A",{href:!0});var ySr=s(xB);_Xe=r(ySr,"WavLMConfig"),ySr.forEach(t),uXe=r(U7e," (WavLM model)"),U7e.forEach(t),bXe=i(T),Mg=n(T,"LI",{});var J7e=s(Mg);mU=n(J7e,"STRONG",{});var wSr=s(mU);vXe=r(wSr,"xglm"),wSr.forEach(t),TXe=r(J7e," \u2014 "),kB=n(J7e,"A",{href:!0});var ASr=s(kB);FXe=r(ASr,"XGLMConfig"),ASr.forEach(t),CXe=r(J7e," (XGLM model)"),J7e.forEach(t),MXe=i(T),Eg=n(T,"LI",{});var Y7e=s(Eg);gU=n(Y7e,"STRONG",{});var LSr=s(gU);EXe=r(LSr,"xlm"),LSr.forEach(t),yXe=r(Y7e," \u2014 "),RB=n(Y7e,"A",{href:!0});var BSr=s(RB);wXe=r(BSr,"XLMConfig"),BSr.forEach(t),AXe=r(Y7e," (XLM model)"),Y7e.forEach(t),LXe=i(T),yg=n(T,"LI",{});var K7e=s(yg);hU=n(K7e,"STRONG",{});var xSr=s(hU);BXe=r(xSr,"xlm-prophetnet"),xSr.forEach(t),xXe=r(K7e," \u2014 "),SB=n(K7e,"A",{href:!0});var kSr=s(SB);kXe=r(kSr,"XLMProphetNetConfig"),kSr.forEach(t),RXe=r(K7e," (XLMProphetNet model)"),K7e.forEach(t),SXe=i(T),wg=n(T,"LI",{});var Z7e=s(wg);pU=n(Z7e,"STRONG",{});var RSr=s(pU);PXe=r(RSr,"xlm-roberta"),RSr.forEach(t),$Xe=r(Z7e," \u2014 "),PB=n(Z7e,"A",{href:!0});var SSr=s(PB);IXe=r(SSr,"XLMRobertaConfig"),SSr.forEach(t),jXe=r(Z7e," (XLM-RoBERTa model)"),Z7e.forEach(t),DXe=i(T),Ag=n(T,"LI",{});var eFe=s(Ag);_U=n(eFe,"STRONG",{});var PSr=s(_U);NXe=r(PSr,"xlm-roberta-xl"),PSr.forEach(t),qXe=r(eFe," \u2014 "),$B=n(eFe,"A",{href:!0});var $Sr=s($B);OXe=r($Sr,"XLMRobertaXLConfig"),$Sr.forEach(t),GXe=r(eFe," (XLM-RoBERTa-XL model)"),eFe.forEach(t),XXe=i(T),Lg=n(T,"LI",{});var oFe=s(Lg);uU=n(oFe,"STRONG",{});var ISr=s(uU);VXe=r(ISr,"xlnet"),ISr.forEach(t),zXe=r(oFe," \u2014 "),IB=n(oFe,"A",{href:!0});var jSr=s(IB);WXe=r(jSr,"XLNetConfig"),jSr.forEach(t),QXe=r(oFe," (XLNet model)"),oFe.forEach(t),HXe=i(T),Bg=n(T,"LI",{});var rFe=s(Bg);bU=n(rFe,"STRONG",{});var DSr=s(bU);UXe=r(DSr,"yoso"),DSr.forEach(t),JXe=r(rFe," \u2014 "),jB=n(rFe,"A",{href:!0});var NSr=s(jB);YXe=r(NSr,"YosoConfig"),NSr.forEach(t),KXe=r(rFe," (YOSO model)"),rFe.forEach(t),T.forEach(t),ZXe=i(ga),vU=n(ga,"P",{});var qSr=s(vU);eVe=r(qSr,"Examples:"),qSr.forEach(t),oVe=i(ga),m(iE.$$.fragment,ga),ga.forEach(t),rVe=i(Gs),xg=n(Gs,"DIV",{class:!0});var kRe=s(xg);m(dE.$$.fragment,kRe),tVe=i(kRe),TU=n(kRe,"P",{});var OSr=s(TU);aVe=r(OSr,"Register a new configuration for this class."),OSr.forEach(t),kRe.forEach(t),Gs.forEach(t),Bxe=i(c),Qi=n(c,"H2",{class:!0});var RRe=s(Qi);kg=n(RRe,"A",{id:!0,class:!0,href:!0});var GSr=s(kg);FU=n(GSr,"SPAN",{});var XSr=s(FU);m(cE.$$.fragment,XSr),XSr.forEach(t),GSr.forEach(t),nVe=i(RRe),CU=n(RRe,"SPAN",{});var VSr=s(CU);sVe=r(VSr,"AutoTokenizer"),VSr.forEach(t),RRe.forEach(t),xxe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(fE.$$.fragment,Xs),lVe=i(Xs),mE=n(Xs,"P",{});var SRe=s(mE);iVe=r(SRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DB=n(SRe,"A",{href:!0});var zSr=s(DB);dVe=r(zSr,"AutoTokenizer.from_pretrained()"),zSr.forEach(t),cVe=r(SRe," class method."),SRe.forEach(t),fVe=i(Xs),gE=n(Xs,"P",{});var PRe=s(gE);mVe=r(PRe,"This class cannot be instantiated directly using "),MU=n(PRe,"CODE",{});var WSr=s(MU);gVe=r(WSr,"__init__()"),WSr.forEach(t),hVe=r(PRe," (throws an error)."),PRe.forEach(t),pVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(hE.$$.fragment,ha),_Ve=i(ha),EU=n(ha,"P",{});var QSr=s(EU);uVe=r(QSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QSr.forEach(t),bVe=i(ha),Ga=n(ha,"P",{});var ZM=s(Ga);vVe=r(ZM,"The tokenizer class to instantiate is selected based on the "),yU=n(ZM,"CODE",{});var HSr=s(yU);TVe=r(HSr,"model_type"),HSr.forEach(t),FVe=r(ZM,` property of the config object (either
passed as an argument or loaded from `),wU=n(ZM,"CODE",{});var USr=s(wU);CVe=r(USr,"pretrained_model_name_or_path"),USr.forEach(t),MVe=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AU=n(ZM,"CODE",{});var JSr=s(AU);EVe=r(JSr,"pretrained_model_name_or_path"),JSr.forEach(t),yVe=r(ZM,":"),ZM.forEach(t),wVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var HL=s(Wn);LU=n(HL,"STRONG",{});var YSr=s(LU);AVe=r(YSr,"albert"),YSr.forEach(t),LVe=r(HL," \u2014 "),NB=n(HL,"A",{href:!0});var KSr=s(NB);BVe=r(KSr,"AlbertTokenizer"),KSr.forEach(t),xVe=r(HL," or "),qB=n(HL,"A",{href:!0});var ZSr=s(qB);kVe=r(ZSr,"AlbertTokenizerFast"),ZSr.forEach(t),RVe=r(HL," (ALBERT model)"),HL.forEach(t),SVe=i(y),Qn=n(y,"LI",{});var UL=s(Qn);BU=n(UL,"STRONG",{});var ePr=s(BU);PVe=r(ePr,"bart"),ePr.forEach(t),$Ve=r(UL," \u2014 "),OB=n(UL,"A",{href:!0});var oPr=s(OB);IVe=r(oPr,"BartTokenizer"),oPr.forEach(t),jVe=r(UL," or "),GB=n(UL,"A",{href:!0});var rPr=s(GB);DVe=r(rPr,"BartTokenizerFast"),rPr.forEach(t),NVe=r(UL," (BART model)"),UL.forEach(t),qVe=i(y),Hn=n(y,"LI",{});var JL=s(Hn);xU=n(JL,"STRONG",{});var tPr=s(xU);OVe=r(tPr,"barthez"),tPr.forEach(t),GVe=r(JL," \u2014 "),XB=n(JL,"A",{href:!0});var aPr=s(XB);XVe=r(aPr,"BarthezTokenizer"),aPr.forEach(t),VVe=r(JL," or "),VB=n(JL,"A",{href:!0});var nPr=s(VB);zVe=r(nPr,"BarthezTokenizerFast"),nPr.forEach(t),WVe=r(JL," (BARThez model)"),JL.forEach(t),QVe=i(y),Rg=n(y,"LI",{});var tFe=s(Rg);kU=n(tFe,"STRONG",{});var sPr=s(kU);HVe=r(sPr,"bartpho"),sPr.forEach(t),UVe=r(tFe," \u2014 "),zB=n(tFe,"A",{href:!0});var lPr=s(zB);JVe=r(lPr,"BartphoTokenizer"),lPr.forEach(t),YVe=r(tFe," (BARTpho model)"),tFe.forEach(t),KVe=i(y),Un=n(y,"LI",{});var YL=s(Un);RU=n(YL,"STRONG",{});var iPr=s(RU);ZVe=r(iPr,"bert"),iPr.forEach(t),eze=r(YL," \u2014 "),WB=n(YL,"A",{href:!0});var dPr=s(WB);oze=r(dPr,"BertTokenizer"),dPr.forEach(t),rze=r(YL," or "),QB=n(YL,"A",{href:!0});var cPr=s(QB);tze=r(cPr,"BertTokenizerFast"),cPr.forEach(t),aze=r(YL," (BERT model)"),YL.forEach(t),nze=i(y),Sg=n(y,"LI",{});var aFe=s(Sg);SU=n(aFe,"STRONG",{});var fPr=s(SU);sze=r(fPr,"bert-generation"),fPr.forEach(t),lze=r(aFe," \u2014 "),HB=n(aFe,"A",{href:!0});var mPr=s(HB);ize=r(mPr,"BertGenerationTokenizer"),mPr.forEach(t),dze=r(aFe," (Bert Generation model)"),aFe.forEach(t),cze=i(y),Pg=n(y,"LI",{});var nFe=s(Pg);PU=n(nFe,"STRONG",{});var gPr=s(PU);fze=r(gPr,"bert-japanese"),gPr.forEach(t),mze=r(nFe," \u2014 "),UB=n(nFe,"A",{href:!0});var hPr=s(UB);gze=r(hPr,"BertJapaneseTokenizer"),hPr.forEach(t),hze=r(nFe," (BertJapanese model)"),nFe.forEach(t),pze=i(y),$g=n(y,"LI",{});var sFe=s($g);$U=n(sFe,"STRONG",{});var pPr=s($U);_ze=r(pPr,"bertweet"),pPr.forEach(t),uze=r(sFe," \u2014 "),JB=n(sFe,"A",{href:!0});var _Pr=s(JB);bze=r(_Pr,"BertweetTokenizer"),_Pr.forEach(t),vze=r(sFe," (Bertweet model)"),sFe.forEach(t),Tze=i(y),Jn=n(y,"LI",{});var KL=s(Jn);IU=n(KL,"STRONG",{});var uPr=s(IU);Fze=r(uPr,"big_bird"),uPr.forEach(t),Cze=r(KL," \u2014 "),YB=n(KL,"A",{href:!0});var bPr=s(YB);Mze=r(bPr,"BigBirdTokenizer"),bPr.forEach(t),Eze=r(KL," or "),KB=n(KL,"A",{href:!0});var vPr=s(KB);yze=r(vPr,"BigBirdTokenizerFast"),vPr.forEach(t),wze=r(KL," (BigBird model)"),KL.forEach(t),Aze=i(y),Yn=n(y,"LI",{});var ZL=s(Yn);jU=n(ZL,"STRONG",{});var TPr=s(jU);Lze=r(TPr,"bigbird_pegasus"),TPr.forEach(t),Bze=r(ZL," \u2014 "),ZB=n(ZL,"A",{href:!0});var FPr=s(ZB);xze=r(FPr,"PegasusTokenizer"),FPr.forEach(t),kze=r(ZL," or "),ex=n(ZL,"A",{href:!0});var CPr=s(ex);Rze=r(CPr,"PegasusTokenizerFast"),CPr.forEach(t),Sze=r(ZL," (BigBirdPegasus model)"),ZL.forEach(t),Pze=i(y),Kn=n(y,"LI",{});var e8=s(Kn);DU=n(e8,"STRONG",{});var MPr=s(DU);$ze=r(MPr,"blenderbot"),MPr.forEach(t),Ize=r(e8," \u2014 "),ox=n(e8,"A",{href:!0});var EPr=s(ox);jze=r(EPr,"BlenderbotTokenizer"),EPr.forEach(t),Dze=r(e8," or "),rx=n(e8,"A",{href:!0});var yPr=s(rx);Nze=r(yPr,"BlenderbotTokenizerFast"),yPr.forEach(t),qze=r(e8," (Blenderbot model)"),e8.forEach(t),Oze=i(y),Ig=n(y,"LI",{});var lFe=s(Ig);NU=n(lFe,"STRONG",{});var wPr=s(NU);Gze=r(wPr,"blenderbot-small"),wPr.forEach(t),Xze=r(lFe," \u2014 "),tx=n(lFe,"A",{href:!0});var APr=s(tx);Vze=r(APr,"BlenderbotSmallTokenizer"),APr.forEach(t),zze=r(lFe," (BlenderbotSmall model)"),lFe.forEach(t),Wze=i(y),jg=n(y,"LI",{});var iFe=s(jg);qU=n(iFe,"STRONG",{});var LPr=s(qU);Qze=r(LPr,"byt5"),LPr.forEach(t),Hze=r(iFe," \u2014 "),ax=n(iFe,"A",{href:!0});var BPr=s(ax);Uze=r(BPr,"ByT5Tokenizer"),BPr.forEach(t),Jze=r(iFe," (ByT5 model)"),iFe.forEach(t),Yze=i(y),Zn=n(y,"LI",{});var o8=s(Zn);OU=n(o8,"STRONG",{});var xPr=s(OU);Kze=r(xPr,"camembert"),xPr.forEach(t),Zze=r(o8," \u2014 "),nx=n(o8,"A",{href:!0});var kPr=s(nx);eWe=r(kPr,"CamembertTokenizer"),kPr.forEach(t),oWe=r(o8," or "),sx=n(o8,"A",{href:!0});var RPr=s(sx);rWe=r(RPr,"CamembertTokenizerFast"),RPr.forEach(t),tWe=r(o8," (CamemBERT model)"),o8.forEach(t),aWe=i(y),Dg=n(y,"LI",{});var dFe=s(Dg);GU=n(dFe,"STRONG",{});var SPr=s(GU);nWe=r(SPr,"canine"),SPr.forEach(t),sWe=r(dFe," \u2014 "),lx=n(dFe,"A",{href:!0});var PPr=s(lx);lWe=r(PPr,"CanineTokenizer"),PPr.forEach(t),iWe=r(dFe," (Canine model)"),dFe.forEach(t),dWe=i(y),es=n(y,"LI",{});var r8=s(es);XU=n(r8,"STRONG",{});var $Pr=s(XU);cWe=r($Pr,"clip"),$Pr.forEach(t),fWe=r(r8," \u2014 "),ix=n(r8,"A",{href:!0});var IPr=s(ix);mWe=r(IPr,"CLIPTokenizer"),IPr.forEach(t),gWe=r(r8," or "),dx=n(r8,"A",{href:!0});var jPr=s(dx);hWe=r(jPr,"CLIPTokenizerFast"),jPr.forEach(t),pWe=r(r8," (CLIP model)"),r8.forEach(t),_We=i(y),os=n(y,"LI",{});var t8=s(os);VU=n(t8,"STRONG",{});var DPr=s(VU);uWe=r(DPr,"convbert"),DPr.forEach(t),bWe=r(t8," \u2014 "),cx=n(t8,"A",{href:!0});var NPr=s(cx);vWe=r(NPr,"ConvBertTokenizer"),NPr.forEach(t),TWe=r(t8," or "),fx=n(t8,"A",{href:!0});var qPr=s(fx);FWe=r(qPr,"ConvBertTokenizerFast"),qPr.forEach(t),CWe=r(t8," (ConvBERT model)"),t8.forEach(t),MWe=i(y),rs=n(y,"LI",{});var a8=s(rs);zU=n(a8,"STRONG",{});var OPr=s(zU);EWe=r(OPr,"cpm"),OPr.forEach(t),yWe=r(a8," \u2014 "),mx=n(a8,"A",{href:!0});var GPr=s(mx);wWe=r(GPr,"CpmTokenizer"),GPr.forEach(t),AWe=r(a8," or "),WU=n(a8,"CODE",{});var XPr=s(WU);LWe=r(XPr,"CpmTokenizerFast"),XPr.forEach(t),BWe=r(a8," (CPM model)"),a8.forEach(t),xWe=i(y),Ng=n(y,"LI",{});var cFe=s(Ng);QU=n(cFe,"STRONG",{});var VPr=s(QU);kWe=r(VPr,"ctrl"),VPr.forEach(t),RWe=r(cFe," \u2014 "),gx=n(cFe,"A",{href:!0});var zPr=s(gx);SWe=r(zPr,"CTRLTokenizer"),zPr.forEach(t),PWe=r(cFe," (CTRL model)"),cFe.forEach(t),$We=i(y),ts=n(y,"LI",{});var n8=s(ts);HU=n(n8,"STRONG",{});var WPr=s(HU);IWe=r(WPr,"deberta"),WPr.forEach(t),jWe=r(n8," \u2014 "),hx=n(n8,"A",{href:!0});var QPr=s(hx);DWe=r(QPr,"DebertaTokenizer"),QPr.forEach(t),NWe=r(n8," or "),px=n(n8,"A",{href:!0});var HPr=s(px);qWe=r(HPr,"DebertaTokenizerFast"),HPr.forEach(t),OWe=r(n8," (DeBERTa model)"),n8.forEach(t),GWe=i(y),qg=n(y,"LI",{});var fFe=s(qg);UU=n(fFe,"STRONG",{});var UPr=s(UU);XWe=r(UPr,"deberta-v2"),UPr.forEach(t),VWe=r(fFe," \u2014 "),_x=n(fFe,"A",{href:!0});var JPr=s(_x);zWe=r(JPr,"DebertaV2Tokenizer"),JPr.forEach(t),WWe=r(fFe," (DeBERTa-v2 model)"),fFe.forEach(t),QWe=i(y),as=n(y,"LI",{});var s8=s(as);JU=n(s8,"STRONG",{});var YPr=s(JU);HWe=r(YPr,"distilbert"),YPr.forEach(t),UWe=r(s8," \u2014 "),ux=n(s8,"A",{href:!0});var KPr=s(ux);JWe=r(KPr,"DistilBertTokenizer"),KPr.forEach(t),YWe=r(s8," or "),bx=n(s8,"A",{href:!0});var ZPr=s(bx);KWe=r(ZPr,"DistilBertTokenizerFast"),ZPr.forEach(t),ZWe=r(s8," (DistilBERT model)"),s8.forEach(t),eQe=i(y),ns=n(y,"LI",{});var l8=s(ns);YU=n(l8,"STRONG",{});var e$r=s(YU);oQe=r(e$r,"dpr"),e$r.forEach(t),rQe=r(l8," \u2014 "),vx=n(l8,"A",{href:!0});var o$r=s(vx);tQe=r(o$r,"DPRQuestionEncoderTokenizer"),o$r.forEach(t),aQe=r(l8," or "),Tx=n(l8,"A",{href:!0});var r$r=s(Tx);nQe=r(r$r,"DPRQuestionEncoderTokenizerFast"),r$r.forEach(t),sQe=r(l8," (DPR model)"),l8.forEach(t),lQe=i(y),ss=n(y,"LI",{});var i8=s(ss);KU=n(i8,"STRONG",{});var t$r=s(KU);iQe=r(t$r,"electra"),t$r.forEach(t),dQe=r(i8," \u2014 "),Fx=n(i8,"A",{href:!0});var a$r=s(Fx);cQe=r(a$r,"ElectraTokenizer"),a$r.forEach(t),fQe=r(i8," or "),Cx=n(i8,"A",{href:!0});var n$r=s(Cx);mQe=r(n$r,"ElectraTokenizerFast"),n$r.forEach(t),gQe=r(i8," (ELECTRA model)"),i8.forEach(t),hQe=i(y),Og=n(y,"LI",{});var mFe=s(Og);ZU=n(mFe,"STRONG",{});var s$r=s(ZU);pQe=r(s$r,"flaubert"),s$r.forEach(t),_Qe=r(mFe," \u2014 "),Mx=n(mFe,"A",{href:!0});var l$r=s(Mx);uQe=r(l$r,"FlaubertTokenizer"),l$r.forEach(t),bQe=r(mFe," (FlauBERT model)"),mFe.forEach(t),vQe=i(y),ls=n(y,"LI",{});var d8=s(ls);eJ=n(d8,"STRONG",{});var i$r=s(eJ);TQe=r(i$r,"fnet"),i$r.forEach(t),FQe=r(d8," \u2014 "),Ex=n(d8,"A",{href:!0});var d$r=s(Ex);CQe=r(d$r,"FNetTokenizer"),d$r.forEach(t),MQe=r(d8," or "),yx=n(d8,"A",{href:!0});var c$r=s(yx);EQe=r(c$r,"FNetTokenizerFast"),c$r.forEach(t),yQe=r(d8," (FNet model)"),d8.forEach(t),wQe=i(y),Gg=n(y,"LI",{});var gFe=s(Gg);oJ=n(gFe,"STRONG",{});var f$r=s(oJ);AQe=r(f$r,"fsmt"),f$r.forEach(t),LQe=r(gFe," \u2014 "),wx=n(gFe,"A",{href:!0});var m$r=s(wx);BQe=r(m$r,"FSMTTokenizer"),m$r.forEach(t),xQe=r(gFe," (FairSeq Machine-Translation model)"),gFe.forEach(t),kQe=i(y),is=n(y,"LI",{});var c8=s(is);rJ=n(c8,"STRONG",{});var g$r=s(rJ);RQe=r(g$r,"funnel"),g$r.forEach(t),SQe=r(c8," \u2014 "),Ax=n(c8,"A",{href:!0});var h$r=s(Ax);PQe=r(h$r,"FunnelTokenizer"),h$r.forEach(t),$Qe=r(c8," or "),Lx=n(c8,"A",{href:!0});var p$r=s(Lx);IQe=r(p$r,"FunnelTokenizerFast"),p$r.forEach(t),jQe=r(c8," (Funnel Transformer model)"),c8.forEach(t),DQe=i(y),ds=n(y,"LI",{});var f8=s(ds);tJ=n(f8,"STRONG",{});var _$r=s(tJ);NQe=r(_$r,"gpt2"),_$r.forEach(t),qQe=r(f8," \u2014 "),Bx=n(f8,"A",{href:!0});var u$r=s(Bx);OQe=r(u$r,"GPT2Tokenizer"),u$r.forEach(t),GQe=r(f8," or "),xx=n(f8,"A",{href:!0});var b$r=s(xx);XQe=r(b$r,"GPT2TokenizerFast"),b$r.forEach(t),VQe=r(f8," (OpenAI GPT-2 model)"),f8.forEach(t),zQe=i(y),cs=n(y,"LI",{});var m8=s(cs);aJ=n(m8,"STRONG",{});var v$r=s(aJ);WQe=r(v$r,"gpt_neo"),v$r.forEach(t),QQe=r(m8," \u2014 "),kx=n(m8,"A",{href:!0});var T$r=s(kx);HQe=r(T$r,"GPT2Tokenizer"),T$r.forEach(t),UQe=r(m8," or "),Rx=n(m8,"A",{href:!0});var F$r=s(Rx);JQe=r(F$r,"GPT2TokenizerFast"),F$r.forEach(t),YQe=r(m8," (GPT Neo model)"),m8.forEach(t),KQe=i(y),fs=n(y,"LI",{});var g8=s(fs);nJ=n(g8,"STRONG",{});var C$r=s(nJ);ZQe=r(C$r,"herbert"),C$r.forEach(t),eHe=r(g8," \u2014 "),Sx=n(g8,"A",{href:!0});var M$r=s(Sx);oHe=r(M$r,"HerbertTokenizer"),M$r.forEach(t),rHe=r(g8," or "),Px=n(g8,"A",{href:!0});var E$r=s(Px);tHe=r(E$r,"HerbertTokenizerFast"),E$r.forEach(t),aHe=r(g8," (HerBERT model)"),g8.forEach(t),nHe=i(y),Xg=n(y,"LI",{});var hFe=s(Xg);sJ=n(hFe,"STRONG",{});var y$r=s(sJ);sHe=r(y$r,"hubert"),y$r.forEach(t),lHe=r(hFe," \u2014 "),$x=n(hFe,"A",{href:!0});var w$r=s($x);iHe=r(w$r,"Wav2Vec2CTCTokenizer"),w$r.forEach(t),dHe=r(hFe," (Hubert model)"),hFe.forEach(t),cHe=i(y),ms=n(y,"LI",{});var h8=s(ms);lJ=n(h8,"STRONG",{});var A$r=s(lJ);fHe=r(A$r,"ibert"),A$r.forEach(t),mHe=r(h8," \u2014 "),Ix=n(h8,"A",{href:!0});var L$r=s(Ix);gHe=r(L$r,"RobertaTokenizer"),L$r.forEach(t),hHe=r(h8," or "),jx=n(h8,"A",{href:!0});var B$r=s(jx);pHe=r(B$r,"RobertaTokenizerFast"),B$r.forEach(t),_He=r(h8," (I-BERT model)"),h8.forEach(t),uHe=i(y),gs=n(y,"LI",{});var p8=s(gs);iJ=n(p8,"STRONG",{});var x$r=s(iJ);bHe=r(x$r,"layoutlm"),x$r.forEach(t),vHe=r(p8," \u2014 "),Dx=n(p8,"A",{href:!0});var k$r=s(Dx);THe=r(k$r,"LayoutLMTokenizer"),k$r.forEach(t),FHe=r(p8," or "),Nx=n(p8,"A",{href:!0});var R$r=s(Nx);CHe=r(R$r,"LayoutLMTokenizerFast"),R$r.forEach(t),MHe=r(p8," (LayoutLM model)"),p8.forEach(t),EHe=i(y),hs=n(y,"LI",{});var _8=s(hs);dJ=n(_8,"STRONG",{});var S$r=s(dJ);yHe=r(S$r,"layoutlmv2"),S$r.forEach(t),wHe=r(_8," \u2014 "),qx=n(_8,"A",{href:!0});var P$r=s(qx);AHe=r(P$r,"LayoutLMv2Tokenizer"),P$r.forEach(t),LHe=r(_8," or "),Ox=n(_8,"A",{href:!0});var $$r=s(Ox);BHe=r($$r,"LayoutLMv2TokenizerFast"),$$r.forEach(t),xHe=r(_8," (LayoutLMv2 model)"),_8.forEach(t),kHe=i(y),ps=n(y,"LI",{});var u8=s(ps);cJ=n(u8,"STRONG",{});var I$r=s(cJ);RHe=r(I$r,"layoutxlm"),I$r.forEach(t),SHe=r(u8," \u2014 "),Gx=n(u8,"A",{href:!0});var j$r=s(Gx);PHe=r(j$r,"LayoutXLMTokenizer"),j$r.forEach(t),$He=r(u8," or "),Xx=n(u8,"A",{href:!0});var D$r=s(Xx);IHe=r(D$r,"LayoutXLMTokenizerFast"),D$r.forEach(t),jHe=r(u8," (LayoutXLM model)"),u8.forEach(t),DHe=i(y),_s=n(y,"LI",{});var b8=s(_s);fJ=n(b8,"STRONG",{});var N$r=s(fJ);NHe=r(N$r,"led"),N$r.forEach(t),qHe=r(b8," \u2014 "),Vx=n(b8,"A",{href:!0});var q$r=s(Vx);OHe=r(q$r,"LEDTokenizer"),q$r.forEach(t),GHe=r(b8," or "),zx=n(b8,"A",{href:!0});var O$r=s(zx);XHe=r(O$r,"LEDTokenizerFast"),O$r.forEach(t),VHe=r(b8," (LED model)"),b8.forEach(t),zHe=i(y),us=n(y,"LI",{});var v8=s(us);mJ=n(v8,"STRONG",{});var G$r=s(mJ);WHe=r(G$r,"longformer"),G$r.forEach(t),QHe=r(v8," \u2014 "),Wx=n(v8,"A",{href:!0});var X$r=s(Wx);HHe=r(X$r,"LongformerTokenizer"),X$r.forEach(t),UHe=r(v8," or "),Qx=n(v8,"A",{href:!0});var V$r=s(Qx);JHe=r(V$r,"LongformerTokenizerFast"),V$r.forEach(t),YHe=r(v8," (Longformer model)"),v8.forEach(t),KHe=i(y),Vg=n(y,"LI",{});var pFe=s(Vg);gJ=n(pFe,"STRONG",{});var z$r=s(gJ);ZHe=r(z$r,"luke"),z$r.forEach(t),eUe=r(pFe," \u2014 "),Hx=n(pFe,"A",{href:!0});var W$r=s(Hx);oUe=r(W$r,"LukeTokenizer"),W$r.forEach(t),rUe=r(pFe," (LUKE model)"),pFe.forEach(t),tUe=i(y),bs=n(y,"LI",{});var T8=s(bs);hJ=n(T8,"STRONG",{});var Q$r=s(hJ);aUe=r(Q$r,"lxmert"),Q$r.forEach(t),nUe=r(T8," \u2014 "),Ux=n(T8,"A",{href:!0});var H$r=s(Ux);sUe=r(H$r,"LxmertTokenizer"),H$r.forEach(t),lUe=r(T8," or "),Jx=n(T8,"A",{href:!0});var U$r=s(Jx);iUe=r(U$r,"LxmertTokenizerFast"),U$r.forEach(t),dUe=r(T8," (LXMERT model)"),T8.forEach(t),cUe=i(y),zg=n(y,"LI",{});var _Fe=s(zg);pJ=n(_Fe,"STRONG",{});var J$r=s(pJ);fUe=r(J$r,"m2m_100"),J$r.forEach(t),mUe=r(_Fe," \u2014 "),Yx=n(_Fe,"A",{href:!0});var Y$r=s(Yx);gUe=r(Y$r,"M2M100Tokenizer"),Y$r.forEach(t),hUe=r(_Fe," (M2M100 model)"),_Fe.forEach(t),pUe=i(y),Wg=n(y,"LI",{});var uFe=s(Wg);_J=n(uFe,"STRONG",{});var K$r=s(_J);_Ue=r(K$r,"marian"),K$r.forEach(t),uUe=r(uFe," \u2014 "),Kx=n(uFe,"A",{href:!0});var Z$r=s(Kx);bUe=r(Z$r,"MarianTokenizer"),Z$r.forEach(t),vUe=r(uFe," (Marian model)"),uFe.forEach(t),TUe=i(y),vs=n(y,"LI",{});var F8=s(vs);uJ=n(F8,"STRONG",{});var eIr=s(uJ);FUe=r(eIr,"mbart"),eIr.forEach(t),CUe=r(F8," \u2014 "),Zx=n(F8,"A",{href:!0});var oIr=s(Zx);MUe=r(oIr,"MBartTokenizer"),oIr.forEach(t),EUe=r(F8," or "),ek=n(F8,"A",{href:!0});var rIr=s(ek);yUe=r(rIr,"MBartTokenizerFast"),rIr.forEach(t),wUe=r(F8," (mBART model)"),F8.forEach(t),AUe=i(y),Ts=n(y,"LI",{});var C8=s(Ts);bJ=n(C8,"STRONG",{});var tIr=s(bJ);LUe=r(tIr,"mbart50"),tIr.forEach(t),BUe=r(C8," \u2014 "),ok=n(C8,"A",{href:!0});var aIr=s(ok);xUe=r(aIr,"MBart50Tokenizer"),aIr.forEach(t),kUe=r(C8," or "),rk=n(C8,"A",{href:!0});var nIr=s(rk);RUe=r(nIr,"MBart50TokenizerFast"),nIr.forEach(t),SUe=r(C8," (mBART-50 model)"),C8.forEach(t),PUe=i(y),Qg=n(y,"LI",{});var bFe=s(Qg);vJ=n(bFe,"STRONG",{});var sIr=s(vJ);$Ue=r(sIr,"mluke"),sIr.forEach(t),IUe=r(bFe," \u2014 "),tk=n(bFe,"A",{href:!0});var lIr=s(tk);jUe=r(lIr,"MLukeTokenizer"),lIr.forEach(t),DUe=r(bFe," (mLUKE model)"),bFe.forEach(t),NUe=i(y),Fs=n(y,"LI",{});var M8=s(Fs);TJ=n(M8,"STRONG",{});var iIr=s(TJ);qUe=r(iIr,"mobilebert"),iIr.forEach(t),OUe=r(M8," \u2014 "),ak=n(M8,"A",{href:!0});var dIr=s(ak);GUe=r(dIr,"MobileBertTokenizer"),dIr.forEach(t),XUe=r(M8," or "),nk=n(M8,"A",{href:!0});var cIr=s(nk);VUe=r(cIr,"MobileBertTokenizerFast"),cIr.forEach(t),zUe=r(M8," (MobileBERT model)"),M8.forEach(t),WUe=i(y),Cs=n(y,"LI",{});var E8=s(Cs);FJ=n(E8,"STRONG",{});var fIr=s(FJ);QUe=r(fIr,"mpnet"),fIr.forEach(t),HUe=r(E8," \u2014 "),sk=n(E8,"A",{href:!0});var mIr=s(sk);UUe=r(mIr,"MPNetTokenizer"),mIr.forEach(t),JUe=r(E8," or "),lk=n(E8,"A",{href:!0});var gIr=s(lk);YUe=r(gIr,"MPNetTokenizerFast"),gIr.forEach(t),KUe=r(E8," (MPNet model)"),E8.forEach(t),ZUe=i(y),Ms=n(y,"LI",{});var y8=s(Ms);CJ=n(y8,"STRONG",{});var hIr=s(CJ);eJe=r(hIr,"mt5"),hIr.forEach(t),oJe=r(y8," \u2014 "),ik=n(y8,"A",{href:!0});var pIr=s(ik);rJe=r(pIr,"MT5Tokenizer"),pIr.forEach(t),tJe=r(y8," or "),dk=n(y8,"A",{href:!0});var _Ir=s(dk);aJe=r(_Ir,"MT5TokenizerFast"),_Ir.forEach(t),nJe=r(y8," (mT5 model)"),y8.forEach(t),sJe=i(y),Es=n(y,"LI",{});var w8=s(Es);MJ=n(w8,"STRONG",{});var uIr=s(MJ);lJe=r(uIr,"openai-gpt"),uIr.forEach(t),iJe=r(w8," \u2014 "),ck=n(w8,"A",{href:!0});var bIr=s(ck);dJe=r(bIr,"OpenAIGPTTokenizer"),bIr.forEach(t),cJe=r(w8," or "),fk=n(w8,"A",{href:!0});var vIr=s(fk);fJe=r(vIr,"OpenAIGPTTokenizerFast"),vIr.forEach(t),mJe=r(w8," (OpenAI GPT model)"),w8.forEach(t),gJe=i(y),ys=n(y,"LI",{});var A8=s(ys);EJ=n(A8,"STRONG",{});var TIr=s(EJ);hJe=r(TIr,"pegasus"),TIr.forEach(t),pJe=r(A8," \u2014 "),mk=n(A8,"A",{href:!0});var FIr=s(mk);_Je=r(FIr,"PegasusTokenizer"),FIr.forEach(t),uJe=r(A8," or "),gk=n(A8,"A",{href:!0});var CIr=s(gk);bJe=r(CIr,"PegasusTokenizerFast"),CIr.forEach(t),vJe=r(A8," (Pegasus model)"),A8.forEach(t),TJe=i(y),Hg=n(y,"LI",{});var vFe=s(Hg);yJ=n(vFe,"STRONG",{});var MIr=s(yJ);FJe=r(MIr,"perceiver"),MIr.forEach(t),CJe=r(vFe," \u2014 "),hk=n(vFe,"A",{href:!0});var EIr=s(hk);MJe=r(EIr,"PerceiverTokenizer"),EIr.forEach(t),EJe=r(vFe," (Perceiver model)"),vFe.forEach(t),yJe=i(y),Ug=n(y,"LI",{});var TFe=s(Ug);wJ=n(TFe,"STRONG",{});var yIr=s(wJ);wJe=r(yIr,"phobert"),yIr.forEach(t),AJe=r(TFe," \u2014 "),pk=n(TFe,"A",{href:!0});var wIr=s(pk);LJe=r(wIr,"PhobertTokenizer"),wIr.forEach(t),BJe=r(TFe," (PhoBERT model)"),TFe.forEach(t),xJe=i(y),Jg=n(y,"LI",{});var FFe=s(Jg);AJ=n(FFe,"STRONG",{});var AIr=s(AJ);kJe=r(AIr,"plbart"),AIr.forEach(t),RJe=r(FFe," \u2014 "),_k=n(FFe,"A",{href:!0});var LIr=s(_k);SJe=r(LIr,"PLBartTokenizer"),LIr.forEach(t),PJe=r(FFe," (PLBart model)"),FFe.forEach(t),$Je=i(y),Yg=n(y,"LI",{});var CFe=s(Yg);LJ=n(CFe,"STRONG",{});var BIr=s(LJ);IJe=r(BIr,"prophetnet"),BIr.forEach(t),jJe=r(CFe," \u2014 "),uk=n(CFe,"A",{href:!0});var xIr=s(uk);DJe=r(xIr,"ProphetNetTokenizer"),xIr.forEach(t),NJe=r(CFe," (ProphetNet model)"),CFe.forEach(t),qJe=i(y),ws=n(y,"LI",{});var L8=s(ws);BJ=n(L8,"STRONG",{});var kIr=s(BJ);OJe=r(kIr,"qdqbert"),kIr.forEach(t),GJe=r(L8," \u2014 "),bk=n(L8,"A",{href:!0});var RIr=s(bk);XJe=r(RIr,"BertTokenizer"),RIr.forEach(t),VJe=r(L8," or "),vk=n(L8,"A",{href:!0});var SIr=s(vk);zJe=r(SIr,"BertTokenizerFast"),SIr.forEach(t),WJe=r(L8," (QDQBert model)"),L8.forEach(t),QJe=i(y),Kg=n(y,"LI",{});var MFe=s(Kg);xJ=n(MFe,"STRONG",{});var PIr=s(xJ);HJe=r(PIr,"rag"),PIr.forEach(t),UJe=r(MFe," \u2014 "),Tk=n(MFe,"A",{href:!0});var $Ir=s(Tk);JJe=r($Ir,"RagTokenizer"),$Ir.forEach(t),YJe=r(MFe," (RAG model)"),MFe.forEach(t),KJe=i(y),As=n(y,"LI",{});var B8=s(As);kJ=n(B8,"STRONG",{});var IIr=s(kJ);ZJe=r(IIr,"realm"),IIr.forEach(t),eYe=r(B8," \u2014 "),Fk=n(B8,"A",{href:!0});var jIr=s(Fk);oYe=r(jIr,"RealmTokenizer"),jIr.forEach(t),rYe=r(B8," or "),Ck=n(B8,"A",{href:!0});var DIr=s(Ck);tYe=r(DIr,"RealmTokenizerFast"),DIr.forEach(t),aYe=r(B8," (Realm model)"),B8.forEach(t),nYe=i(y),Ls=n(y,"LI",{});var x8=s(Ls);RJ=n(x8,"STRONG",{});var NIr=s(RJ);sYe=r(NIr,"reformer"),NIr.forEach(t),lYe=r(x8," \u2014 "),Mk=n(x8,"A",{href:!0});var qIr=s(Mk);iYe=r(qIr,"ReformerTokenizer"),qIr.forEach(t),dYe=r(x8," or "),Ek=n(x8,"A",{href:!0});var OIr=s(Ek);cYe=r(OIr,"ReformerTokenizerFast"),OIr.forEach(t),fYe=r(x8," (Reformer model)"),x8.forEach(t),mYe=i(y),Bs=n(y,"LI",{});var k8=s(Bs);SJ=n(k8,"STRONG",{});var GIr=s(SJ);gYe=r(GIr,"rembert"),GIr.forEach(t),hYe=r(k8," \u2014 "),yk=n(k8,"A",{href:!0});var XIr=s(yk);pYe=r(XIr,"RemBertTokenizer"),XIr.forEach(t),_Ye=r(k8," or "),wk=n(k8,"A",{href:!0});var VIr=s(wk);uYe=r(VIr,"RemBertTokenizerFast"),VIr.forEach(t),bYe=r(k8," (RemBERT model)"),k8.forEach(t),vYe=i(y),xs=n(y,"LI",{});var R8=s(xs);PJ=n(R8,"STRONG",{});var zIr=s(PJ);TYe=r(zIr,"retribert"),zIr.forEach(t),FYe=r(R8," \u2014 "),Ak=n(R8,"A",{href:!0});var WIr=s(Ak);CYe=r(WIr,"RetriBertTokenizer"),WIr.forEach(t),MYe=r(R8," or "),Lk=n(R8,"A",{href:!0});var QIr=s(Lk);EYe=r(QIr,"RetriBertTokenizerFast"),QIr.forEach(t),yYe=r(R8," (RetriBERT model)"),R8.forEach(t),wYe=i(y),ks=n(y,"LI",{});var S8=s(ks);$J=n(S8,"STRONG",{});var HIr=s($J);AYe=r(HIr,"roberta"),HIr.forEach(t),LYe=r(S8," \u2014 "),Bk=n(S8,"A",{href:!0});var UIr=s(Bk);BYe=r(UIr,"RobertaTokenizer"),UIr.forEach(t),xYe=r(S8," or "),xk=n(S8,"A",{href:!0});var JIr=s(xk);kYe=r(JIr,"RobertaTokenizerFast"),JIr.forEach(t),RYe=r(S8," (RoBERTa model)"),S8.forEach(t),SYe=i(y),Rs=n(y,"LI",{});var P8=s(Rs);IJ=n(P8,"STRONG",{});var YIr=s(IJ);PYe=r(YIr,"roformer"),YIr.forEach(t),$Ye=r(P8," \u2014 "),kk=n(P8,"A",{href:!0});var KIr=s(kk);IYe=r(KIr,"RoFormerTokenizer"),KIr.forEach(t),jYe=r(P8," or "),Rk=n(P8,"A",{href:!0});var ZIr=s(Rk);DYe=r(ZIr,"RoFormerTokenizerFast"),ZIr.forEach(t),NYe=r(P8," (RoFormer model)"),P8.forEach(t),qYe=i(y),Zg=n(y,"LI",{});var EFe=s(Zg);jJ=n(EFe,"STRONG",{});var ejr=s(jJ);OYe=r(ejr,"speech_to_text"),ejr.forEach(t),GYe=r(EFe," \u2014 "),Sk=n(EFe,"A",{href:!0});var ojr=s(Sk);XYe=r(ojr,"Speech2TextTokenizer"),ojr.forEach(t),VYe=r(EFe," (Speech2Text model)"),EFe.forEach(t),zYe=i(y),eh=n(y,"LI",{});var yFe=s(eh);DJ=n(yFe,"STRONG",{});var rjr=s(DJ);WYe=r(rjr,"speech_to_text_2"),rjr.forEach(t),QYe=r(yFe," \u2014 "),Pk=n(yFe,"A",{href:!0});var tjr=s(Pk);HYe=r(tjr,"Speech2Text2Tokenizer"),tjr.forEach(t),UYe=r(yFe," (Speech2Text2 model)"),yFe.forEach(t),JYe=i(y),Ss=n(y,"LI",{});var $8=s(Ss);NJ=n($8,"STRONG",{});var ajr=s(NJ);YYe=r(ajr,"splinter"),ajr.forEach(t),KYe=r($8," \u2014 "),$k=n($8,"A",{href:!0});var njr=s($k);ZYe=r(njr,"SplinterTokenizer"),njr.forEach(t),eKe=r($8," or "),Ik=n($8,"A",{href:!0});var sjr=s(Ik);oKe=r(sjr,"SplinterTokenizerFast"),sjr.forEach(t),rKe=r($8," (Splinter model)"),$8.forEach(t),tKe=i(y),Ps=n(y,"LI",{});var I8=s(Ps);qJ=n(I8,"STRONG",{});var ljr=s(qJ);aKe=r(ljr,"squeezebert"),ljr.forEach(t),nKe=r(I8," \u2014 "),jk=n(I8,"A",{href:!0});var ijr=s(jk);sKe=r(ijr,"SqueezeBertTokenizer"),ijr.forEach(t),lKe=r(I8," or "),Dk=n(I8,"A",{href:!0});var djr=s(Dk);iKe=r(djr,"SqueezeBertTokenizerFast"),djr.forEach(t),dKe=r(I8," (SqueezeBERT model)"),I8.forEach(t),cKe=i(y),$s=n(y,"LI",{});var j8=s($s);OJ=n(j8,"STRONG",{});var cjr=s(OJ);fKe=r(cjr,"t5"),cjr.forEach(t),mKe=r(j8," \u2014 "),Nk=n(j8,"A",{href:!0});var fjr=s(Nk);gKe=r(fjr,"T5Tokenizer"),fjr.forEach(t),hKe=r(j8," or "),qk=n(j8,"A",{href:!0});var mjr=s(qk);pKe=r(mjr,"T5TokenizerFast"),mjr.forEach(t),_Ke=r(j8," (T5 model)"),j8.forEach(t),uKe=i(y),oh=n(y,"LI",{});var wFe=s(oh);GJ=n(wFe,"STRONG",{});var gjr=s(GJ);bKe=r(gjr,"tapas"),gjr.forEach(t),vKe=r(wFe," \u2014 "),Ok=n(wFe,"A",{href:!0});var hjr=s(Ok);TKe=r(hjr,"TapasTokenizer"),hjr.forEach(t),FKe=r(wFe," (TAPAS model)"),wFe.forEach(t),CKe=i(y),rh=n(y,"LI",{});var AFe=s(rh);XJ=n(AFe,"STRONG",{});var pjr=s(XJ);MKe=r(pjr,"transfo-xl"),pjr.forEach(t),EKe=r(AFe," \u2014 "),Gk=n(AFe,"A",{href:!0});var _jr=s(Gk);yKe=r(_jr,"TransfoXLTokenizer"),_jr.forEach(t),wKe=r(AFe," (Transformer-XL model)"),AFe.forEach(t),AKe=i(y),th=n(y,"LI",{});var LFe=s(th);VJ=n(LFe,"STRONG",{});var ujr=s(VJ);LKe=r(ujr,"wav2vec2"),ujr.forEach(t),BKe=r(LFe," \u2014 "),Xk=n(LFe,"A",{href:!0});var bjr=s(Xk);xKe=r(bjr,"Wav2Vec2CTCTokenizer"),bjr.forEach(t),kKe=r(LFe," (Wav2Vec2 model)"),LFe.forEach(t),RKe=i(y),ah=n(y,"LI",{});var BFe=s(ah);zJ=n(BFe,"STRONG",{});var vjr=s(zJ);SKe=r(vjr,"wav2vec2_phoneme"),vjr.forEach(t),PKe=r(BFe," \u2014 "),Vk=n(BFe,"A",{href:!0});var Tjr=s(Vk);$Ke=r(Tjr,"Wav2Vec2PhonemeCTCTokenizer"),Tjr.forEach(t),IKe=r(BFe," (Wav2Vec2Phoneme model)"),BFe.forEach(t),jKe=i(y),Is=n(y,"LI",{});var D8=s(Is);WJ=n(D8,"STRONG",{});var Fjr=s(WJ);DKe=r(Fjr,"xglm"),Fjr.forEach(t),NKe=r(D8," \u2014 "),zk=n(D8,"A",{href:!0});var Cjr=s(zk);qKe=r(Cjr,"XGLMTokenizer"),Cjr.forEach(t),OKe=r(D8," or "),Wk=n(D8,"A",{href:!0});var Mjr=s(Wk);GKe=r(Mjr,"XGLMTokenizerFast"),Mjr.forEach(t),XKe=r(D8," (XGLM model)"),D8.forEach(t),VKe=i(y),nh=n(y,"LI",{});var xFe=s(nh);QJ=n(xFe,"STRONG",{});var Ejr=s(QJ);zKe=r(Ejr,"xlm"),Ejr.forEach(t),WKe=r(xFe," \u2014 "),Qk=n(xFe,"A",{href:!0});var yjr=s(Qk);QKe=r(yjr,"XLMTokenizer"),yjr.forEach(t),HKe=r(xFe," (XLM model)"),xFe.forEach(t),UKe=i(y),sh=n(y,"LI",{});var kFe=s(sh);HJ=n(kFe,"STRONG",{});var wjr=s(HJ);JKe=r(wjr,"xlm-prophetnet"),wjr.forEach(t),YKe=r(kFe," \u2014 "),Hk=n(kFe,"A",{href:!0});var Ajr=s(Hk);KKe=r(Ajr,"XLMProphetNetTokenizer"),Ajr.forEach(t),ZKe=r(kFe," (XLMProphetNet model)"),kFe.forEach(t),eZe=i(y),js=n(y,"LI",{});var N8=s(js);UJ=n(N8,"STRONG",{});var Ljr=s(UJ);oZe=r(Ljr,"xlm-roberta"),Ljr.forEach(t),rZe=r(N8," \u2014 "),Uk=n(N8,"A",{href:!0});var Bjr=s(Uk);tZe=r(Bjr,"XLMRobertaTokenizer"),Bjr.forEach(t),aZe=r(N8," or "),Jk=n(N8,"A",{href:!0});var xjr=s(Jk);nZe=r(xjr,"XLMRobertaTokenizerFast"),xjr.forEach(t),sZe=r(N8," (XLM-RoBERTa model)"),N8.forEach(t),lZe=i(y),Ds=n(y,"LI",{});var q8=s(Ds);JJ=n(q8,"STRONG",{});var kjr=s(JJ);iZe=r(kjr,"xlnet"),kjr.forEach(t),dZe=r(q8," \u2014 "),Yk=n(q8,"A",{href:!0});var Rjr=s(Yk);cZe=r(Rjr,"XLNetTokenizer"),Rjr.forEach(t),fZe=r(q8," or "),Kk=n(q8,"A",{href:!0});var Sjr=s(Kk);mZe=r(Sjr,"XLNetTokenizerFast"),Sjr.forEach(t),gZe=r(q8," (XLNet model)"),q8.forEach(t),y.forEach(t),hZe=i(ha),YJ=n(ha,"P",{});var Pjr=s(YJ);pZe=r(Pjr,"Examples:"),Pjr.forEach(t),_Ze=i(ha),m(pE.$$.fragment,ha),ha.forEach(t),uZe=i(Xs),lh=n(Xs,"DIV",{class:!0});var $Re=s(lh);m(_E.$$.fragment,$Re),bZe=i($Re),KJ=n($Re,"P",{});var $jr=s(KJ);vZe=r($jr,"Register a new tokenizer in this mapping."),$jr.forEach(t),$Re.forEach(t),Xs.forEach(t),kxe=i(c),Hi=n(c,"H2",{class:!0});var IRe=s(Hi);ih=n(IRe,"A",{id:!0,class:!0,href:!0});var Ijr=s(ih);ZJ=n(Ijr,"SPAN",{});var jjr=s(ZJ);m(uE.$$.fragment,jjr),jjr.forEach(t),Ijr.forEach(t),TZe=i(IRe),eY=n(IRe,"SPAN",{});var Djr=s(eY);FZe=r(Djr,"AutoFeatureExtractor"),Djr.forEach(t),IRe.forEach(t),Rxe=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(bE.$$.fragment,Vs),CZe=i(Vs),vE=n(Vs,"P",{});var jRe=s(vE);MZe=r(jRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Zk=n(jRe,"A",{href:!0});var Njr=s(Zk);EZe=r(Njr,"AutoFeatureExtractor.from_pretrained()"),Njr.forEach(t),yZe=r(jRe," class method."),jRe.forEach(t),wZe=i(Vs),TE=n(Vs,"P",{});var DRe=s(TE);AZe=r(DRe,"This class cannot be instantiated directly using "),oY=n(DRe,"CODE",{});var qjr=s(oY);LZe=r(qjr,"__init__()"),qjr.forEach(t),BZe=r(DRe," (throws an error)."),DRe.forEach(t),xZe=i(Vs),Ie=n(Vs,"DIV",{class:!0});var Dt=s(Ie);m(FE.$$.fragment,Dt),kZe=i(Dt),rY=n(Dt,"P",{});var Ojr=s(rY);RZe=r(Ojr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ojr.forEach(t),SZe=i(Dt),Xa=n(Dt,"P",{});var e4=s(Xa);PZe=r(e4,"The feature extractor class to instantiate is selected based on the "),tY=n(e4,"CODE",{});var Gjr=s(tY);$Ze=r(Gjr,"model_type"),Gjr.forEach(t),IZe=r(e4,` property of the config object
(either passed as an argument or loaded from `),aY=n(e4,"CODE",{});var Xjr=s(aY);jZe=r(Xjr,"pretrained_model_name_or_path"),Xjr.forEach(t),DZe=r(e4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nY=n(e4,"CODE",{});var Vjr=s(nY);NZe=r(Vjr,"pretrained_model_name_or_path"),Vjr.forEach(t),qZe=r(e4,":"),e4.forEach(t),OZe=i(Dt),te=n(Dt,"UL",{});var se=s(te);dh=n(se,"LI",{});var RFe=s(dh);sY=n(RFe,"STRONG",{});var zjr=s(sY);GZe=r(zjr,"beit"),zjr.forEach(t),XZe=r(RFe," \u2014 "),eR=n(RFe,"A",{href:!0});var Wjr=s(eR);VZe=r(Wjr,"BeitFeatureExtractor"),Wjr.forEach(t),zZe=r(RFe," (BEiT model)"),RFe.forEach(t),WZe=i(se),ch=n(se,"LI",{});var SFe=s(ch);lY=n(SFe,"STRONG",{});var Qjr=s(lY);QZe=r(Qjr,"clip"),Qjr.forEach(t),HZe=r(SFe," \u2014 "),oR=n(SFe,"A",{href:!0});var Hjr=s(oR);UZe=r(Hjr,"CLIPFeatureExtractor"),Hjr.forEach(t),JZe=r(SFe," (CLIP model)"),SFe.forEach(t),YZe=i(se),fh=n(se,"LI",{});var PFe=s(fh);iY=n(PFe,"STRONG",{});var Ujr=s(iY);KZe=r(Ujr,"convnext"),Ujr.forEach(t),ZZe=r(PFe," \u2014 "),rR=n(PFe,"A",{href:!0});var Jjr=s(rR);eeo=r(Jjr,"ConvNextFeatureExtractor"),Jjr.forEach(t),oeo=r(PFe," (ConvNext model)"),PFe.forEach(t),reo=i(se),mh=n(se,"LI",{});var $Fe=s(mh);dY=n($Fe,"STRONG",{});var Yjr=s(dY);teo=r(Yjr,"deit"),Yjr.forEach(t),aeo=r($Fe," \u2014 "),tR=n($Fe,"A",{href:!0});var Kjr=s(tR);neo=r(Kjr,"DeiTFeatureExtractor"),Kjr.forEach(t),seo=r($Fe," (DeiT model)"),$Fe.forEach(t),leo=i(se),gh=n(se,"LI",{});var IFe=s(gh);cY=n(IFe,"STRONG",{});var Zjr=s(cY);ieo=r(Zjr,"detr"),Zjr.forEach(t),deo=r(IFe," \u2014 "),aR=n(IFe,"A",{href:!0});var eDr=s(aR);ceo=r(eDr,"DetrFeatureExtractor"),eDr.forEach(t),feo=r(IFe," (DETR model)"),IFe.forEach(t),meo=i(se),hh=n(se,"LI",{});var jFe=s(hh);fY=n(jFe,"STRONG",{});var oDr=s(fY);geo=r(oDr,"hubert"),oDr.forEach(t),heo=r(jFe," \u2014 "),nR=n(jFe,"A",{href:!0});var rDr=s(nR);peo=r(rDr,"Wav2Vec2FeatureExtractor"),rDr.forEach(t),_eo=r(jFe," (Hubert model)"),jFe.forEach(t),ueo=i(se),ph=n(se,"LI",{});var DFe=s(ph);mY=n(DFe,"STRONG",{});var tDr=s(mY);beo=r(tDr,"layoutlmv2"),tDr.forEach(t),veo=r(DFe," \u2014 "),sR=n(DFe,"A",{href:!0});var aDr=s(sR);Teo=r(aDr,"LayoutLMv2FeatureExtractor"),aDr.forEach(t),Feo=r(DFe," (LayoutLMv2 model)"),DFe.forEach(t),Ceo=i(se),_h=n(se,"LI",{});var NFe=s(_h);gY=n(NFe,"STRONG",{});var nDr=s(gY);Meo=r(nDr,"maskformer"),nDr.forEach(t),Eeo=r(NFe," \u2014 "),lR=n(NFe,"A",{href:!0});var sDr=s(lR);yeo=r(sDr,"MaskFormerFeatureExtractor"),sDr.forEach(t),weo=r(NFe," (MaskFormer model)"),NFe.forEach(t),Aeo=i(se),uh=n(se,"LI",{});var qFe=s(uh);hY=n(qFe,"STRONG",{});var lDr=s(hY);Leo=r(lDr,"perceiver"),lDr.forEach(t),Beo=r(qFe," \u2014 "),iR=n(qFe,"A",{href:!0});var iDr=s(iR);xeo=r(iDr,"PerceiverFeatureExtractor"),iDr.forEach(t),keo=r(qFe," (Perceiver model)"),qFe.forEach(t),Reo=i(se),bh=n(se,"LI",{});var OFe=s(bh);pY=n(OFe,"STRONG",{});var dDr=s(pY);Seo=r(dDr,"poolformer"),dDr.forEach(t),Peo=r(OFe," \u2014 "),dR=n(OFe,"A",{href:!0});var cDr=s(dR);$eo=r(cDr,"PoolFormerFeatureExtractor"),cDr.forEach(t),Ieo=r(OFe," (PoolFormer model)"),OFe.forEach(t),jeo=i(se),vh=n(se,"LI",{});var GFe=s(vh);_Y=n(GFe,"STRONG",{});var fDr=s(_Y);Deo=r(fDr,"resnet"),fDr.forEach(t),Neo=r(GFe," \u2014 "),cR=n(GFe,"A",{href:!0});var mDr=s(cR);qeo=r(mDr,"ConvNextFeatureExtractor"),mDr.forEach(t),Oeo=r(GFe," (ResNet model)"),GFe.forEach(t),Geo=i(se),Th=n(se,"LI",{});var XFe=s(Th);uY=n(XFe,"STRONG",{});var gDr=s(uY);Xeo=r(gDr,"segformer"),gDr.forEach(t),Veo=r(XFe," \u2014 "),fR=n(XFe,"A",{href:!0});var hDr=s(fR);zeo=r(hDr,"SegformerFeatureExtractor"),hDr.forEach(t),Weo=r(XFe," (SegFormer model)"),XFe.forEach(t),Qeo=i(se),Fh=n(se,"LI",{});var VFe=s(Fh);bY=n(VFe,"STRONG",{});var pDr=s(bY);Heo=r(pDr,"speech_to_text"),pDr.forEach(t),Ueo=r(VFe," \u2014 "),mR=n(VFe,"A",{href:!0});var _Dr=s(mR);Jeo=r(_Dr,"Speech2TextFeatureExtractor"),_Dr.forEach(t),Yeo=r(VFe," (Speech2Text model)"),VFe.forEach(t),Keo=i(se),Ch=n(se,"LI",{});var zFe=s(Ch);vY=n(zFe,"STRONG",{});var uDr=s(vY);Zeo=r(uDr,"swin"),uDr.forEach(t),eoo=r(zFe," \u2014 "),gR=n(zFe,"A",{href:!0});var bDr=s(gR);ooo=r(bDr,"ViTFeatureExtractor"),bDr.forEach(t),roo=r(zFe," (Swin model)"),zFe.forEach(t),too=i(se),Mh=n(se,"LI",{});var WFe=s(Mh);TY=n(WFe,"STRONG",{});var vDr=s(TY);aoo=r(vDr,"vit"),vDr.forEach(t),noo=r(WFe," \u2014 "),hR=n(WFe,"A",{href:!0});var TDr=s(hR);soo=r(TDr,"ViTFeatureExtractor"),TDr.forEach(t),loo=r(WFe," (ViT model)"),WFe.forEach(t),ioo=i(se),Eh=n(se,"LI",{});var QFe=s(Eh);FY=n(QFe,"STRONG",{});var FDr=s(FY);doo=r(FDr,"vit_mae"),FDr.forEach(t),coo=r(QFe," \u2014 "),pR=n(QFe,"A",{href:!0});var CDr=s(pR);foo=r(CDr,"ViTFeatureExtractor"),CDr.forEach(t),moo=r(QFe," (ViTMAE model)"),QFe.forEach(t),goo=i(se),yh=n(se,"LI",{});var HFe=s(yh);CY=n(HFe,"STRONG",{});var MDr=s(CY);hoo=r(MDr,"wav2vec2"),MDr.forEach(t),poo=r(HFe," \u2014 "),_R=n(HFe,"A",{href:!0});var EDr=s(_R);_oo=r(EDr,"Wav2Vec2FeatureExtractor"),EDr.forEach(t),uoo=r(HFe," (Wav2Vec2 model)"),HFe.forEach(t),se.forEach(t),boo=i(Dt),m(wh.$$.fragment,Dt),voo=i(Dt),MY=n(Dt,"P",{});var yDr=s(MY);Too=r(yDr,"Examples:"),yDr.forEach(t),Foo=i(Dt),m(CE.$$.fragment,Dt),Dt.forEach(t),Coo=i(Vs),Ah=n(Vs,"DIV",{class:!0});var NRe=s(Ah);m(ME.$$.fragment,NRe),Moo=i(NRe),EY=n(NRe,"P",{});var wDr=s(EY);Eoo=r(wDr,"Register a new feature extractor for this class."),wDr.forEach(t),NRe.forEach(t),Vs.forEach(t),Sxe=i(c),Ui=n(c,"H2",{class:!0});var qRe=s(Ui);Lh=n(qRe,"A",{id:!0,class:!0,href:!0});var ADr=s(Lh);yY=n(ADr,"SPAN",{});var LDr=s(yY);m(EE.$$.fragment,LDr),LDr.forEach(t),ADr.forEach(t),yoo=i(qRe),wY=n(qRe,"SPAN",{});var BDr=s(wY);woo=r(BDr,"AutoProcessor"),BDr.forEach(t),qRe.forEach(t),Pxe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(yE.$$.fragment,zs),Aoo=i(zs),wE=n(zs,"P",{});var ORe=s(wE);Loo=r(ORe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uR=n(ORe,"A",{href:!0});var xDr=s(uR);Boo=r(xDr,"AutoProcessor.from_pretrained()"),xDr.forEach(t),xoo=r(ORe," class method."),ORe.forEach(t),koo=i(zs),AE=n(zs,"P",{});var GRe=s(AE);Roo=r(GRe,"This class cannot be instantiated directly using "),AY=n(GRe,"CODE",{});var kDr=s(AY);Soo=r(kDr,"__init__()"),kDr.forEach(t),Poo=r(GRe," (throws an error)."),GRe.forEach(t),$oo=i(zs),je=n(zs,"DIV",{class:!0});var Nt=s(je);m(LE.$$.fragment,Nt),Ioo=i(Nt),LY=n(Nt,"P",{});var RDr=s(LY);joo=r(RDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),RDr.forEach(t),Doo=i(Nt),Ji=n(Nt,"P",{});var Rz=s(Ji);Noo=r(Rz,"The processor class to instantiate is selected based on the "),BY=n(Rz,"CODE",{});var SDr=s(BY);qoo=r(SDr,"model_type"),SDr.forEach(t),Ooo=r(Rz,` property of the config object (either
passed as an argument or loaded from `),xY=n(Rz,"CODE",{});var PDr=s(xY);Goo=r(PDr,"pretrained_model_name_or_path"),PDr.forEach(t),Xoo=r(Rz," if possible):"),Rz.forEach(t),Voo=i(Nt),xe=n(Nt,"UL",{});var No=s(xe);Bh=n(No,"LI",{});var UFe=s(Bh);kY=n(UFe,"STRONG",{});var $Dr=s(kY);zoo=r($Dr,"clip"),$Dr.forEach(t),Woo=r(UFe," \u2014 "),bR=n(UFe,"A",{href:!0});var IDr=s(bR);Qoo=r(IDr,"CLIPProcessor"),IDr.forEach(t),Hoo=r(UFe," (CLIP model)"),UFe.forEach(t),Uoo=i(No),xh=n(No,"LI",{});var JFe=s(xh);RY=n(JFe,"STRONG",{});var jDr=s(RY);Joo=r(jDr,"layoutlmv2"),jDr.forEach(t),Yoo=r(JFe," \u2014 "),vR=n(JFe,"A",{href:!0});var DDr=s(vR);Koo=r(DDr,"LayoutLMv2Processor"),DDr.forEach(t),Zoo=r(JFe," (LayoutLMv2 model)"),JFe.forEach(t),ero=i(No),kh=n(No,"LI",{});var YFe=s(kh);SY=n(YFe,"STRONG",{});var NDr=s(SY);oro=r(NDr,"layoutxlm"),NDr.forEach(t),rro=r(YFe," \u2014 "),TR=n(YFe,"A",{href:!0});var qDr=s(TR);tro=r(qDr,"LayoutXLMProcessor"),qDr.forEach(t),aro=r(YFe," (LayoutXLM model)"),YFe.forEach(t),nro=i(No),Rh=n(No,"LI",{});var KFe=s(Rh);PY=n(KFe,"STRONG",{});var ODr=s(PY);sro=r(ODr,"speech_to_text"),ODr.forEach(t),lro=r(KFe," \u2014 "),FR=n(KFe,"A",{href:!0});var GDr=s(FR);iro=r(GDr,"Speech2TextProcessor"),GDr.forEach(t),dro=r(KFe," (Speech2Text model)"),KFe.forEach(t),cro=i(No),Sh=n(No,"LI",{});var ZFe=s(Sh);$Y=n(ZFe,"STRONG",{});var XDr=s($Y);fro=r(XDr,"speech_to_text_2"),XDr.forEach(t),mro=r(ZFe," \u2014 "),CR=n(ZFe,"A",{href:!0});var VDr=s(CR);gro=r(VDr,"Speech2Text2Processor"),VDr.forEach(t),hro=r(ZFe," (Speech2Text2 model)"),ZFe.forEach(t),pro=i(No),Ph=n(No,"LI",{});var eCe=s(Ph);IY=n(eCe,"STRONG",{});var zDr=s(IY);_ro=r(zDr,"trocr"),zDr.forEach(t),uro=r(eCe," \u2014 "),MR=n(eCe,"A",{href:!0});var WDr=s(MR);bro=r(WDr,"TrOCRProcessor"),WDr.forEach(t),vro=r(eCe," (TrOCR model)"),eCe.forEach(t),Tro=i(No),$h=n(No,"LI",{});var oCe=s($h);jY=n(oCe,"STRONG",{});var QDr=s(jY);Fro=r(QDr,"vision-text-dual-encoder"),QDr.forEach(t),Cro=r(oCe," \u2014 "),ER=n(oCe,"A",{href:!0});var HDr=s(ER);Mro=r(HDr,"VisionTextDualEncoderProcessor"),HDr.forEach(t),Ero=r(oCe," (VisionTextDualEncoder model)"),oCe.forEach(t),yro=i(No),Ih=n(No,"LI",{});var rCe=s(Ih);DY=n(rCe,"STRONG",{});var UDr=s(DY);wro=r(UDr,"wav2vec2"),UDr.forEach(t),Aro=r(rCe," \u2014 "),yR=n(rCe,"A",{href:!0});var JDr=s(yR);Lro=r(JDr,"Wav2Vec2Processor"),JDr.forEach(t),Bro=r(rCe," (Wav2Vec2 model)"),rCe.forEach(t),No.forEach(t),xro=i(Nt),m(jh.$$.fragment,Nt),kro=i(Nt),NY=n(Nt,"P",{});var YDr=s(NY);Rro=r(YDr,"Examples:"),YDr.forEach(t),Sro=i(Nt),m(BE.$$.fragment,Nt),Nt.forEach(t),Pro=i(zs),Dh=n(zs,"DIV",{class:!0});var XRe=s(Dh);m(xE.$$.fragment,XRe),$ro=i(XRe),qY=n(XRe,"P",{});var KDr=s(qY);Iro=r(KDr,"Register a new processor for this class."),KDr.forEach(t),XRe.forEach(t),zs.forEach(t),$xe=i(c),Yi=n(c,"H2",{class:!0});var VRe=s(Yi);Nh=n(VRe,"A",{id:!0,class:!0,href:!0});var ZDr=s(Nh);OY=n(ZDr,"SPAN",{});var eNr=s(OY);m(kE.$$.fragment,eNr),eNr.forEach(t),ZDr.forEach(t),jro=i(VRe),GY=n(VRe,"SPAN",{});var oNr=s(GY);Dro=r(oNr,"AutoModel"),oNr.forEach(t),VRe.forEach(t),Ixe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(RE.$$.fragment,Ws),Nro=i(Ws),Ki=n(Ws,"P",{});var Sz=s(Ki);qro=r(Sz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XY=n(Sz,"CODE",{});var rNr=s(XY);Oro=r(rNr,"from_pretrained()"),rNr.forEach(t),Gro=r(Sz,"class method or the "),VY=n(Sz,"CODE",{});var tNr=s(VY);Xro=r(tNr,"from_config()"),tNr.forEach(t),Vro=r(Sz,`class
method.`),Sz.forEach(t),zro=i(Ws),SE=n(Ws,"P",{});var zRe=s(SE);Wro=r(zRe,"This class cannot be instantiated directly using "),zY=n(zRe,"CODE",{});var aNr=s(zY);Qro=r(aNr,"__init__()"),aNr.forEach(t),Hro=r(zRe," (throws an error)."),zRe.forEach(t),Uro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(PE.$$.fragment,Qs),Jro=i(Qs),WY=n(Qs,"P",{});var nNr=s(WY);Yro=r(nNr,"Instantiates one of the base model classes of the library from a configuration."),nNr.forEach(t),Kro=i(Qs),Zi=n(Qs,"P",{});var Pz=s(Zi);Zro=r(Pz,`Note:
Loading a model from its configuration file does `),QY=n(Pz,"STRONG",{});var sNr=s(QY);eto=r(sNr,"not"),sNr.forEach(t),oto=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Pz,"CODE",{});var lNr=s(HY);rto=r(lNr,"from_pretrained()"),lNr.forEach(t),tto=r(Pz,"to load the model weights."),Pz.forEach(t),ato=i(Qs),UY=n(Qs,"P",{});var iNr=s(UY);nto=r(iNr,"Examples:"),iNr.forEach(t),sto=i(Qs),m($E.$$.fragment,Qs),Qs.forEach(t),lto=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(IE.$$.fragment,qt),ito=i(qt),JY=n(qt,"P",{});var dNr=s(JY);dto=r(dNr,"Instantiate one of the base model classes of the library from a pretrained model."),dNr.forEach(t),cto=i(qt),Va=n(qt,"P",{});var o4=s(Va);fto=r(o4,"The model class to instantiate is selected based on the "),YY=n(o4,"CODE",{});var cNr=s(YY);mto=r(cNr,"model_type"),cNr.forEach(t),gto=r(o4,` property of the config object (either
passed as an argument or loaded from `),KY=n(o4,"CODE",{});var fNr=s(KY);hto=r(fNr,"pretrained_model_name_or_path"),fNr.forEach(t),pto=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZY=n(o4,"CODE",{});var mNr=s(ZY);_to=r(mNr,"pretrained_model_name_or_path"),mNr.forEach(t),uto=r(o4,":"),o4.forEach(t),bto=i(qt),F=n(qt,"UL",{});var C=s(F);qh=n(C,"LI",{});var tCe=s(qh);eK=n(tCe,"STRONG",{});var gNr=s(eK);vto=r(gNr,"albert"),gNr.forEach(t),Tto=r(tCe," \u2014 "),wR=n(tCe,"A",{href:!0});var hNr=s(wR);Fto=r(hNr,"AlbertModel"),hNr.forEach(t),Cto=r(tCe," (ALBERT model)"),tCe.forEach(t),Mto=i(C),Oh=n(C,"LI",{});var aCe=s(Oh);oK=n(aCe,"STRONG",{});var pNr=s(oK);Eto=r(pNr,"bart"),pNr.forEach(t),yto=r(aCe," \u2014 "),AR=n(aCe,"A",{href:!0});var _Nr=s(AR);wto=r(_Nr,"BartModel"),_Nr.forEach(t),Ato=r(aCe," (BART model)"),aCe.forEach(t),Lto=i(C),Gh=n(C,"LI",{});var nCe=s(Gh);rK=n(nCe,"STRONG",{});var uNr=s(rK);Bto=r(uNr,"beit"),uNr.forEach(t),xto=r(nCe," \u2014 "),LR=n(nCe,"A",{href:!0});var bNr=s(LR);kto=r(bNr,"BeitModel"),bNr.forEach(t),Rto=r(nCe," (BEiT model)"),nCe.forEach(t),Sto=i(C),Xh=n(C,"LI",{});var sCe=s(Xh);tK=n(sCe,"STRONG",{});var vNr=s(tK);Pto=r(vNr,"bert"),vNr.forEach(t),$to=r(sCe," \u2014 "),BR=n(sCe,"A",{href:!0});var TNr=s(BR);Ito=r(TNr,"BertModel"),TNr.forEach(t),jto=r(sCe," (BERT model)"),sCe.forEach(t),Dto=i(C),Vh=n(C,"LI",{});var lCe=s(Vh);aK=n(lCe,"STRONG",{});var FNr=s(aK);Nto=r(FNr,"bert-generation"),FNr.forEach(t),qto=r(lCe," \u2014 "),xR=n(lCe,"A",{href:!0});var CNr=s(xR);Oto=r(CNr,"BertGenerationEncoder"),CNr.forEach(t),Gto=r(lCe," (Bert Generation model)"),lCe.forEach(t),Xto=i(C),zh=n(C,"LI",{});var iCe=s(zh);nK=n(iCe,"STRONG",{});var MNr=s(nK);Vto=r(MNr,"big_bird"),MNr.forEach(t),zto=r(iCe," \u2014 "),kR=n(iCe,"A",{href:!0});var ENr=s(kR);Wto=r(ENr,"BigBirdModel"),ENr.forEach(t),Qto=r(iCe," (BigBird model)"),iCe.forEach(t),Hto=i(C),Wh=n(C,"LI",{});var dCe=s(Wh);sK=n(dCe,"STRONG",{});var yNr=s(sK);Uto=r(yNr,"bigbird_pegasus"),yNr.forEach(t),Jto=r(dCe," \u2014 "),RR=n(dCe,"A",{href:!0});var wNr=s(RR);Yto=r(wNr,"BigBirdPegasusModel"),wNr.forEach(t),Kto=r(dCe," (BigBirdPegasus model)"),dCe.forEach(t),Zto=i(C),Qh=n(C,"LI",{});var cCe=s(Qh);lK=n(cCe,"STRONG",{});var ANr=s(lK);eao=r(ANr,"blenderbot"),ANr.forEach(t),oao=r(cCe," \u2014 "),SR=n(cCe,"A",{href:!0});var LNr=s(SR);rao=r(LNr,"BlenderbotModel"),LNr.forEach(t),tao=r(cCe," (Blenderbot model)"),cCe.forEach(t),aao=i(C),Hh=n(C,"LI",{});var fCe=s(Hh);iK=n(fCe,"STRONG",{});var BNr=s(iK);nao=r(BNr,"blenderbot-small"),BNr.forEach(t),sao=r(fCe," \u2014 "),PR=n(fCe,"A",{href:!0});var xNr=s(PR);lao=r(xNr,"BlenderbotSmallModel"),xNr.forEach(t),iao=r(fCe," (BlenderbotSmall model)"),fCe.forEach(t),dao=i(C),Uh=n(C,"LI",{});var mCe=s(Uh);dK=n(mCe,"STRONG",{});var kNr=s(dK);cao=r(kNr,"camembert"),kNr.forEach(t),fao=r(mCe," \u2014 "),$R=n(mCe,"A",{href:!0});var RNr=s($R);mao=r(RNr,"CamembertModel"),RNr.forEach(t),gao=r(mCe," (CamemBERT model)"),mCe.forEach(t),hao=i(C),Jh=n(C,"LI",{});var gCe=s(Jh);cK=n(gCe,"STRONG",{});var SNr=s(cK);pao=r(SNr,"canine"),SNr.forEach(t),_ao=r(gCe," \u2014 "),IR=n(gCe,"A",{href:!0});var PNr=s(IR);uao=r(PNr,"CanineModel"),PNr.forEach(t),bao=r(gCe," (Canine model)"),gCe.forEach(t),vao=i(C),Yh=n(C,"LI",{});var hCe=s(Yh);fK=n(hCe,"STRONG",{});var $Nr=s(fK);Tao=r($Nr,"clip"),$Nr.forEach(t),Fao=r(hCe," \u2014 "),jR=n(hCe,"A",{href:!0});var INr=s(jR);Cao=r(INr,"CLIPModel"),INr.forEach(t),Mao=r(hCe," (CLIP model)"),hCe.forEach(t),Eao=i(C),Kh=n(C,"LI",{});var pCe=s(Kh);mK=n(pCe,"STRONG",{});var jNr=s(mK);yao=r(jNr,"convbert"),jNr.forEach(t),wao=r(pCe," \u2014 "),DR=n(pCe,"A",{href:!0});var DNr=s(DR);Aao=r(DNr,"ConvBertModel"),DNr.forEach(t),Lao=r(pCe," (ConvBERT model)"),pCe.forEach(t),Bao=i(C),Zh=n(C,"LI",{});var _Ce=s(Zh);gK=n(_Ce,"STRONG",{});var NNr=s(gK);xao=r(NNr,"convnext"),NNr.forEach(t),kao=r(_Ce," \u2014 "),NR=n(_Ce,"A",{href:!0});var qNr=s(NR);Rao=r(qNr,"ConvNextModel"),qNr.forEach(t),Sao=r(_Ce," (ConvNext model)"),_Ce.forEach(t),Pao=i(C),ep=n(C,"LI",{});var uCe=s(ep);hK=n(uCe,"STRONG",{});var ONr=s(hK);$ao=r(ONr,"ctrl"),ONr.forEach(t),Iao=r(uCe," \u2014 "),qR=n(uCe,"A",{href:!0});var GNr=s(qR);jao=r(GNr,"CTRLModel"),GNr.forEach(t),Dao=r(uCe," (CTRL model)"),uCe.forEach(t),Nao=i(C),op=n(C,"LI",{});var bCe=s(op);pK=n(bCe,"STRONG",{});var XNr=s(pK);qao=r(XNr,"data2vec-audio"),XNr.forEach(t),Oao=r(bCe," \u2014 "),OR=n(bCe,"A",{href:!0});var VNr=s(OR);Gao=r(VNr,"Data2VecAudioModel"),VNr.forEach(t),Xao=r(bCe," (Data2VecAudio model)"),bCe.forEach(t),Vao=i(C),rp=n(C,"LI",{});var vCe=s(rp);_K=n(vCe,"STRONG",{});var zNr=s(_K);zao=r(zNr,"data2vec-text"),zNr.forEach(t),Wao=r(vCe," \u2014 "),GR=n(vCe,"A",{href:!0});var WNr=s(GR);Qao=r(WNr,"Data2VecTextModel"),WNr.forEach(t),Hao=r(vCe," (Data2VecText model)"),vCe.forEach(t),Uao=i(C),tp=n(C,"LI",{});var TCe=s(tp);uK=n(TCe,"STRONG",{});var QNr=s(uK);Jao=r(QNr,"deberta"),QNr.forEach(t),Yao=r(TCe," \u2014 "),XR=n(TCe,"A",{href:!0});var HNr=s(XR);Kao=r(HNr,"DebertaModel"),HNr.forEach(t),Zao=r(TCe," (DeBERTa model)"),TCe.forEach(t),eno=i(C),ap=n(C,"LI",{});var FCe=s(ap);bK=n(FCe,"STRONG",{});var UNr=s(bK);ono=r(UNr,"deberta-v2"),UNr.forEach(t),rno=r(FCe," \u2014 "),VR=n(FCe,"A",{href:!0});var JNr=s(VR);tno=r(JNr,"DebertaV2Model"),JNr.forEach(t),ano=r(FCe," (DeBERTa-v2 model)"),FCe.forEach(t),nno=i(C),np=n(C,"LI",{});var CCe=s(np);vK=n(CCe,"STRONG",{});var YNr=s(vK);sno=r(YNr,"deit"),YNr.forEach(t),lno=r(CCe," \u2014 "),zR=n(CCe,"A",{href:!0});var KNr=s(zR);ino=r(KNr,"DeiTModel"),KNr.forEach(t),dno=r(CCe," (DeiT model)"),CCe.forEach(t),cno=i(C),sp=n(C,"LI",{});var MCe=s(sp);TK=n(MCe,"STRONG",{});var ZNr=s(TK);fno=r(ZNr,"detr"),ZNr.forEach(t),mno=r(MCe," \u2014 "),WR=n(MCe,"A",{href:!0});var eqr=s(WR);gno=r(eqr,"DetrModel"),eqr.forEach(t),hno=r(MCe," (DETR model)"),MCe.forEach(t),pno=i(C),lp=n(C,"LI",{});var ECe=s(lp);FK=n(ECe,"STRONG",{});var oqr=s(FK);_no=r(oqr,"distilbert"),oqr.forEach(t),uno=r(ECe," \u2014 "),QR=n(ECe,"A",{href:!0});var rqr=s(QR);bno=r(rqr,"DistilBertModel"),rqr.forEach(t),vno=r(ECe," (DistilBERT model)"),ECe.forEach(t),Tno=i(C),ip=n(C,"LI",{});var yCe=s(ip);CK=n(yCe,"STRONG",{});var tqr=s(CK);Fno=r(tqr,"dpr"),tqr.forEach(t),Cno=r(yCe," \u2014 "),HR=n(yCe,"A",{href:!0});var aqr=s(HR);Mno=r(aqr,"DPRQuestionEncoder"),aqr.forEach(t),Eno=r(yCe," (DPR model)"),yCe.forEach(t),yno=i(C),dp=n(C,"LI",{});var wCe=s(dp);MK=n(wCe,"STRONG",{});var nqr=s(MK);wno=r(nqr,"electra"),nqr.forEach(t),Ano=r(wCe," \u2014 "),UR=n(wCe,"A",{href:!0});var sqr=s(UR);Lno=r(sqr,"ElectraModel"),sqr.forEach(t),Bno=r(wCe," (ELECTRA model)"),wCe.forEach(t),xno=i(C),cp=n(C,"LI",{});var ACe=s(cp);EK=n(ACe,"STRONG",{});var lqr=s(EK);kno=r(lqr,"flaubert"),lqr.forEach(t),Rno=r(ACe," \u2014 "),JR=n(ACe,"A",{href:!0});var iqr=s(JR);Sno=r(iqr,"FlaubertModel"),iqr.forEach(t),Pno=r(ACe," (FlauBERT model)"),ACe.forEach(t),$no=i(C),fp=n(C,"LI",{});var LCe=s(fp);yK=n(LCe,"STRONG",{});var dqr=s(yK);Ino=r(dqr,"fnet"),dqr.forEach(t),jno=r(LCe," \u2014 "),YR=n(LCe,"A",{href:!0});var cqr=s(YR);Dno=r(cqr,"FNetModel"),cqr.forEach(t),Nno=r(LCe," (FNet model)"),LCe.forEach(t),qno=i(C),mp=n(C,"LI",{});var BCe=s(mp);wK=n(BCe,"STRONG",{});var fqr=s(wK);Ono=r(fqr,"fsmt"),fqr.forEach(t),Gno=r(BCe," \u2014 "),KR=n(BCe,"A",{href:!0});var mqr=s(KR);Xno=r(mqr,"FSMTModel"),mqr.forEach(t),Vno=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),zno=i(C),Ns=n(C,"LI",{});var O8=s(Ns);AK=n(O8,"STRONG",{});var gqr=s(AK);Wno=r(gqr,"funnel"),gqr.forEach(t),Qno=r(O8," \u2014 "),ZR=n(O8,"A",{href:!0});var hqr=s(ZR);Hno=r(hqr,"FunnelModel"),hqr.forEach(t),Uno=r(O8," or "),eS=n(O8,"A",{href:!0});var pqr=s(eS);Jno=r(pqr,"FunnelBaseModel"),pqr.forEach(t),Yno=r(O8," (Funnel Transformer model)"),O8.forEach(t),Kno=i(C),gp=n(C,"LI",{});var xCe=s(gp);LK=n(xCe,"STRONG",{});var _qr=s(LK);Zno=r(_qr,"gpt2"),_qr.forEach(t),eso=r(xCe," \u2014 "),oS=n(xCe,"A",{href:!0});var uqr=s(oS);oso=r(uqr,"GPT2Model"),uqr.forEach(t),rso=r(xCe," (OpenAI GPT-2 model)"),xCe.forEach(t),tso=i(C),hp=n(C,"LI",{});var kCe=s(hp);BK=n(kCe,"STRONG",{});var bqr=s(BK);aso=r(bqr,"gpt_neo"),bqr.forEach(t),nso=r(kCe," \u2014 "),rS=n(kCe,"A",{href:!0});var vqr=s(rS);sso=r(vqr,"GPTNeoModel"),vqr.forEach(t),lso=r(kCe," (GPT Neo model)"),kCe.forEach(t),iso=i(C),pp=n(C,"LI",{});var RCe=s(pp);xK=n(RCe,"STRONG",{});var Tqr=s(xK);dso=r(Tqr,"gptj"),Tqr.forEach(t),cso=r(RCe," \u2014 "),tS=n(RCe,"A",{href:!0});var Fqr=s(tS);fso=r(Fqr,"GPTJModel"),Fqr.forEach(t),mso=r(RCe," (GPT-J model)"),RCe.forEach(t),gso=i(C),_p=n(C,"LI",{});var SCe=s(_p);kK=n(SCe,"STRONG",{});var Cqr=s(kK);hso=r(Cqr,"hubert"),Cqr.forEach(t),pso=r(SCe," \u2014 "),aS=n(SCe,"A",{href:!0});var Mqr=s(aS);_so=r(Mqr,"HubertModel"),Mqr.forEach(t),uso=r(SCe," (Hubert model)"),SCe.forEach(t),bso=i(C),up=n(C,"LI",{});var PCe=s(up);RK=n(PCe,"STRONG",{});var Eqr=s(RK);vso=r(Eqr,"ibert"),Eqr.forEach(t),Tso=r(PCe," \u2014 "),nS=n(PCe,"A",{href:!0});var yqr=s(nS);Fso=r(yqr,"IBertModel"),yqr.forEach(t),Cso=r(PCe," (I-BERT model)"),PCe.forEach(t),Mso=i(C),bp=n(C,"LI",{});var $Ce=s(bp);SK=n($Ce,"STRONG",{});var wqr=s(SK);Eso=r(wqr,"imagegpt"),wqr.forEach(t),yso=r($Ce," \u2014 "),sS=n($Ce,"A",{href:!0});var Aqr=s(sS);wso=r(Aqr,"ImageGPTModel"),Aqr.forEach(t),Aso=r($Ce," (ImageGPT model)"),$Ce.forEach(t),Lso=i(C),vp=n(C,"LI",{});var ICe=s(vp);PK=n(ICe,"STRONG",{});var Lqr=s(PK);Bso=r(Lqr,"layoutlm"),Lqr.forEach(t),xso=r(ICe," \u2014 "),lS=n(ICe,"A",{href:!0});var Bqr=s(lS);kso=r(Bqr,"LayoutLMModel"),Bqr.forEach(t),Rso=r(ICe," (LayoutLM model)"),ICe.forEach(t),Sso=i(C),Tp=n(C,"LI",{});var jCe=s(Tp);$K=n(jCe,"STRONG",{});var xqr=s($K);Pso=r(xqr,"layoutlmv2"),xqr.forEach(t),$so=r(jCe," \u2014 "),iS=n(jCe,"A",{href:!0});var kqr=s(iS);Iso=r(kqr,"LayoutLMv2Model"),kqr.forEach(t),jso=r(jCe," (LayoutLMv2 model)"),jCe.forEach(t),Dso=i(C),Fp=n(C,"LI",{});var DCe=s(Fp);IK=n(DCe,"STRONG",{});var Rqr=s(IK);Nso=r(Rqr,"led"),Rqr.forEach(t),qso=r(DCe," \u2014 "),dS=n(DCe,"A",{href:!0});var Sqr=s(dS);Oso=r(Sqr,"LEDModel"),Sqr.forEach(t),Gso=r(DCe," (LED model)"),DCe.forEach(t),Xso=i(C),Cp=n(C,"LI",{});var NCe=s(Cp);jK=n(NCe,"STRONG",{});var Pqr=s(jK);Vso=r(Pqr,"longformer"),Pqr.forEach(t),zso=r(NCe," \u2014 "),cS=n(NCe,"A",{href:!0});var $qr=s(cS);Wso=r($qr,"LongformerModel"),$qr.forEach(t),Qso=r(NCe," (Longformer model)"),NCe.forEach(t),Hso=i(C),Mp=n(C,"LI",{});var qCe=s(Mp);DK=n(qCe,"STRONG",{});var Iqr=s(DK);Uso=r(Iqr,"luke"),Iqr.forEach(t),Jso=r(qCe," \u2014 "),fS=n(qCe,"A",{href:!0});var jqr=s(fS);Yso=r(jqr,"LukeModel"),jqr.forEach(t),Kso=r(qCe," (LUKE model)"),qCe.forEach(t),Zso=i(C),Ep=n(C,"LI",{});var OCe=s(Ep);NK=n(OCe,"STRONG",{});var Dqr=s(NK);elo=r(Dqr,"lxmert"),Dqr.forEach(t),olo=r(OCe," \u2014 "),mS=n(OCe,"A",{href:!0});var Nqr=s(mS);rlo=r(Nqr,"LxmertModel"),Nqr.forEach(t),tlo=r(OCe," (LXMERT model)"),OCe.forEach(t),alo=i(C),yp=n(C,"LI",{});var GCe=s(yp);qK=n(GCe,"STRONG",{});var qqr=s(qK);nlo=r(qqr,"m2m_100"),qqr.forEach(t),slo=r(GCe," \u2014 "),gS=n(GCe,"A",{href:!0});var Oqr=s(gS);llo=r(Oqr,"M2M100Model"),Oqr.forEach(t),ilo=r(GCe," (M2M100 model)"),GCe.forEach(t),dlo=i(C),wp=n(C,"LI",{});var XCe=s(wp);OK=n(XCe,"STRONG",{});var Gqr=s(OK);clo=r(Gqr,"marian"),Gqr.forEach(t),flo=r(XCe," \u2014 "),hS=n(XCe,"A",{href:!0});var Xqr=s(hS);mlo=r(Xqr,"MarianModel"),Xqr.forEach(t),glo=r(XCe," (Marian model)"),XCe.forEach(t),hlo=i(C),Ap=n(C,"LI",{});var VCe=s(Ap);GK=n(VCe,"STRONG",{});var Vqr=s(GK);plo=r(Vqr,"maskformer"),Vqr.forEach(t),_lo=r(VCe," \u2014 "),pS=n(VCe,"A",{href:!0});var zqr=s(pS);ulo=r(zqr,"MaskFormerModel"),zqr.forEach(t),blo=r(VCe," (MaskFormer model)"),VCe.forEach(t),vlo=i(C),Lp=n(C,"LI",{});var zCe=s(Lp);XK=n(zCe,"STRONG",{});var Wqr=s(XK);Tlo=r(Wqr,"mbart"),Wqr.forEach(t),Flo=r(zCe," \u2014 "),_S=n(zCe,"A",{href:!0});var Qqr=s(_S);Clo=r(Qqr,"MBartModel"),Qqr.forEach(t),Mlo=r(zCe," (mBART model)"),zCe.forEach(t),Elo=i(C),Bp=n(C,"LI",{});var WCe=s(Bp);VK=n(WCe,"STRONG",{});var Hqr=s(VK);ylo=r(Hqr,"megatron-bert"),Hqr.forEach(t),wlo=r(WCe," \u2014 "),uS=n(WCe,"A",{href:!0});var Uqr=s(uS);Alo=r(Uqr,"MegatronBertModel"),Uqr.forEach(t),Llo=r(WCe," (MegatronBert model)"),WCe.forEach(t),Blo=i(C),xp=n(C,"LI",{});var QCe=s(xp);zK=n(QCe,"STRONG",{});var Jqr=s(zK);xlo=r(Jqr,"mobilebert"),Jqr.forEach(t),klo=r(QCe," \u2014 "),bS=n(QCe,"A",{href:!0});var Yqr=s(bS);Rlo=r(Yqr,"MobileBertModel"),Yqr.forEach(t),Slo=r(QCe," (MobileBERT model)"),QCe.forEach(t),Plo=i(C),kp=n(C,"LI",{});var HCe=s(kp);WK=n(HCe,"STRONG",{});var Kqr=s(WK);$lo=r(Kqr,"mpnet"),Kqr.forEach(t),Ilo=r(HCe," \u2014 "),vS=n(HCe,"A",{href:!0});var Zqr=s(vS);jlo=r(Zqr,"MPNetModel"),Zqr.forEach(t),Dlo=r(HCe," (MPNet model)"),HCe.forEach(t),Nlo=i(C),Rp=n(C,"LI",{});var UCe=s(Rp);QK=n(UCe,"STRONG",{});var eOr=s(QK);qlo=r(eOr,"mt5"),eOr.forEach(t),Olo=r(UCe," \u2014 "),TS=n(UCe,"A",{href:!0});var oOr=s(TS);Glo=r(oOr,"MT5Model"),oOr.forEach(t),Xlo=r(UCe," (mT5 model)"),UCe.forEach(t),Vlo=i(C),Sp=n(C,"LI",{});var JCe=s(Sp);HK=n(JCe,"STRONG",{});var rOr=s(HK);zlo=r(rOr,"nystromformer"),rOr.forEach(t),Wlo=r(JCe," \u2014 "),FS=n(JCe,"A",{href:!0});var tOr=s(FS);Qlo=r(tOr,"NystromformerModel"),tOr.forEach(t),Hlo=r(JCe," (Nystromformer model)"),JCe.forEach(t),Ulo=i(C),Pp=n(C,"LI",{});var YCe=s(Pp);UK=n(YCe,"STRONG",{});var aOr=s(UK);Jlo=r(aOr,"openai-gpt"),aOr.forEach(t),Ylo=r(YCe," \u2014 "),CS=n(YCe,"A",{href:!0});var nOr=s(CS);Klo=r(nOr,"OpenAIGPTModel"),nOr.forEach(t),Zlo=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),eio=i(C),$p=n(C,"LI",{});var KCe=s($p);JK=n(KCe,"STRONG",{});var sOr=s(JK);oio=r(sOr,"pegasus"),sOr.forEach(t),rio=r(KCe," \u2014 "),MS=n(KCe,"A",{href:!0});var lOr=s(MS);tio=r(lOr,"PegasusModel"),lOr.forEach(t),aio=r(KCe," (Pegasus model)"),KCe.forEach(t),nio=i(C),Ip=n(C,"LI",{});var ZCe=s(Ip);YK=n(ZCe,"STRONG",{});var iOr=s(YK);sio=r(iOr,"perceiver"),iOr.forEach(t),lio=r(ZCe," \u2014 "),ES=n(ZCe,"A",{href:!0});var dOr=s(ES);iio=r(dOr,"PerceiverModel"),dOr.forEach(t),dio=r(ZCe," (Perceiver model)"),ZCe.forEach(t),cio=i(C),jp=n(C,"LI",{});var eMe=s(jp);KK=n(eMe,"STRONG",{});var cOr=s(KK);fio=r(cOr,"plbart"),cOr.forEach(t),mio=r(eMe," \u2014 "),yS=n(eMe,"A",{href:!0});var fOr=s(yS);gio=r(fOr,"PLBartModel"),fOr.forEach(t),hio=r(eMe," (PLBart model)"),eMe.forEach(t),pio=i(C),Dp=n(C,"LI",{});var oMe=s(Dp);ZK=n(oMe,"STRONG",{});var mOr=s(ZK);_io=r(mOr,"poolformer"),mOr.forEach(t),uio=r(oMe," \u2014 "),wS=n(oMe,"A",{href:!0});var gOr=s(wS);bio=r(gOr,"PoolFormerModel"),gOr.forEach(t),vio=r(oMe," (PoolFormer model)"),oMe.forEach(t),Tio=i(C),Np=n(C,"LI",{});var rMe=s(Np);eZ=n(rMe,"STRONG",{});var hOr=s(eZ);Fio=r(hOr,"prophetnet"),hOr.forEach(t),Cio=r(rMe," \u2014 "),AS=n(rMe,"A",{href:!0});var pOr=s(AS);Mio=r(pOr,"ProphetNetModel"),pOr.forEach(t),Eio=r(rMe," (ProphetNet model)"),rMe.forEach(t),yio=i(C),qp=n(C,"LI",{});var tMe=s(qp);oZ=n(tMe,"STRONG",{});var _Or=s(oZ);wio=r(_Or,"qdqbert"),_Or.forEach(t),Aio=r(tMe," \u2014 "),LS=n(tMe,"A",{href:!0});var uOr=s(LS);Lio=r(uOr,"QDQBertModel"),uOr.forEach(t),Bio=r(tMe," (QDQBert model)"),tMe.forEach(t),xio=i(C),Op=n(C,"LI",{});var aMe=s(Op);rZ=n(aMe,"STRONG",{});var bOr=s(rZ);kio=r(bOr,"reformer"),bOr.forEach(t),Rio=r(aMe," \u2014 "),BS=n(aMe,"A",{href:!0});var vOr=s(BS);Sio=r(vOr,"ReformerModel"),vOr.forEach(t),Pio=r(aMe," (Reformer model)"),aMe.forEach(t),$io=i(C),Gp=n(C,"LI",{});var nMe=s(Gp);tZ=n(nMe,"STRONG",{});var TOr=s(tZ);Iio=r(TOr,"rembert"),TOr.forEach(t),jio=r(nMe," \u2014 "),xS=n(nMe,"A",{href:!0});var FOr=s(xS);Dio=r(FOr,"RemBertModel"),FOr.forEach(t),Nio=r(nMe," (RemBERT model)"),nMe.forEach(t),qio=i(C),Xp=n(C,"LI",{});var sMe=s(Xp);aZ=n(sMe,"STRONG",{});var COr=s(aZ);Oio=r(COr,"resnet"),COr.forEach(t),Gio=r(sMe," \u2014 "),kS=n(sMe,"A",{href:!0});var MOr=s(kS);Xio=r(MOr,"ResNetModel"),MOr.forEach(t),Vio=r(sMe," (ResNet model)"),sMe.forEach(t),zio=i(C),Vp=n(C,"LI",{});var lMe=s(Vp);nZ=n(lMe,"STRONG",{});var EOr=s(nZ);Wio=r(EOr,"retribert"),EOr.forEach(t),Qio=r(lMe," \u2014 "),RS=n(lMe,"A",{href:!0});var yOr=s(RS);Hio=r(yOr,"RetriBertModel"),yOr.forEach(t),Uio=r(lMe," (RetriBERT model)"),lMe.forEach(t),Jio=i(C),zp=n(C,"LI",{});var iMe=s(zp);sZ=n(iMe,"STRONG",{});var wOr=s(sZ);Yio=r(wOr,"roberta"),wOr.forEach(t),Kio=r(iMe," \u2014 "),SS=n(iMe,"A",{href:!0});var AOr=s(SS);Zio=r(AOr,"RobertaModel"),AOr.forEach(t),edo=r(iMe," (RoBERTa model)"),iMe.forEach(t),odo=i(C),Wp=n(C,"LI",{});var dMe=s(Wp);lZ=n(dMe,"STRONG",{});var LOr=s(lZ);rdo=r(LOr,"roformer"),LOr.forEach(t),tdo=r(dMe," \u2014 "),PS=n(dMe,"A",{href:!0});var BOr=s(PS);ado=r(BOr,"RoFormerModel"),BOr.forEach(t),ndo=r(dMe," (RoFormer model)"),dMe.forEach(t),sdo=i(C),Qp=n(C,"LI",{});var cMe=s(Qp);iZ=n(cMe,"STRONG",{});var xOr=s(iZ);ldo=r(xOr,"segformer"),xOr.forEach(t),ido=r(cMe," \u2014 "),$S=n(cMe,"A",{href:!0});var kOr=s($S);ddo=r(kOr,"SegformerModel"),kOr.forEach(t),cdo=r(cMe," (SegFormer model)"),cMe.forEach(t),fdo=i(C),Hp=n(C,"LI",{});var fMe=s(Hp);dZ=n(fMe,"STRONG",{});var ROr=s(dZ);mdo=r(ROr,"sew"),ROr.forEach(t),gdo=r(fMe," \u2014 "),IS=n(fMe,"A",{href:!0});var SOr=s(IS);hdo=r(SOr,"SEWModel"),SOr.forEach(t),pdo=r(fMe," (SEW model)"),fMe.forEach(t),_do=i(C),Up=n(C,"LI",{});var mMe=s(Up);cZ=n(mMe,"STRONG",{});var POr=s(cZ);udo=r(POr,"sew-d"),POr.forEach(t),bdo=r(mMe," \u2014 "),jS=n(mMe,"A",{href:!0});var $Or=s(jS);vdo=r($Or,"SEWDModel"),$Or.forEach(t),Tdo=r(mMe," (SEW-D model)"),mMe.forEach(t),Fdo=i(C),Jp=n(C,"LI",{});var gMe=s(Jp);fZ=n(gMe,"STRONG",{});var IOr=s(fZ);Cdo=r(IOr,"speech_to_text"),IOr.forEach(t),Mdo=r(gMe," \u2014 "),DS=n(gMe,"A",{href:!0});var jOr=s(DS);Edo=r(jOr,"Speech2TextModel"),jOr.forEach(t),ydo=r(gMe," (Speech2Text model)"),gMe.forEach(t),wdo=i(C),Yp=n(C,"LI",{});var hMe=s(Yp);mZ=n(hMe,"STRONG",{});var DOr=s(mZ);Ado=r(DOr,"splinter"),DOr.forEach(t),Ldo=r(hMe," \u2014 "),NS=n(hMe,"A",{href:!0});var NOr=s(NS);Bdo=r(NOr,"SplinterModel"),NOr.forEach(t),xdo=r(hMe," (Splinter model)"),hMe.forEach(t),kdo=i(C),Kp=n(C,"LI",{});var pMe=s(Kp);gZ=n(pMe,"STRONG",{});var qOr=s(gZ);Rdo=r(qOr,"squeezebert"),qOr.forEach(t),Sdo=r(pMe," \u2014 "),qS=n(pMe,"A",{href:!0});var OOr=s(qS);Pdo=r(OOr,"SqueezeBertModel"),OOr.forEach(t),$do=r(pMe," (SqueezeBERT model)"),pMe.forEach(t),Ido=i(C),Zp=n(C,"LI",{});var _Me=s(Zp);hZ=n(_Me,"STRONG",{});var GOr=s(hZ);jdo=r(GOr,"swin"),GOr.forEach(t),Ddo=r(_Me," \u2014 "),OS=n(_Me,"A",{href:!0});var XOr=s(OS);Ndo=r(XOr,"SwinModel"),XOr.forEach(t),qdo=r(_Me," (Swin model)"),_Me.forEach(t),Odo=i(C),e_=n(C,"LI",{});var uMe=s(e_);pZ=n(uMe,"STRONG",{});var VOr=s(pZ);Gdo=r(VOr,"t5"),VOr.forEach(t),Xdo=r(uMe," \u2014 "),GS=n(uMe,"A",{href:!0});var zOr=s(GS);Vdo=r(zOr,"T5Model"),zOr.forEach(t),zdo=r(uMe," (T5 model)"),uMe.forEach(t),Wdo=i(C),o_=n(C,"LI",{});var bMe=s(o_);_Z=n(bMe,"STRONG",{});var WOr=s(_Z);Qdo=r(WOr,"tapas"),WOr.forEach(t),Hdo=r(bMe," \u2014 "),XS=n(bMe,"A",{href:!0});var QOr=s(XS);Udo=r(QOr,"TapasModel"),QOr.forEach(t),Jdo=r(bMe," (TAPAS model)"),bMe.forEach(t),Ydo=i(C),r_=n(C,"LI",{});var vMe=s(r_);uZ=n(vMe,"STRONG",{});var HOr=s(uZ);Kdo=r(HOr,"transfo-xl"),HOr.forEach(t),Zdo=r(vMe," \u2014 "),VS=n(vMe,"A",{href:!0});var UOr=s(VS);eco=r(UOr,"TransfoXLModel"),UOr.forEach(t),oco=r(vMe," (Transformer-XL model)"),vMe.forEach(t),rco=i(C),t_=n(C,"LI",{});var TMe=s(t_);bZ=n(TMe,"STRONG",{});var JOr=s(bZ);tco=r(JOr,"unispeech"),JOr.forEach(t),aco=r(TMe," \u2014 "),zS=n(TMe,"A",{href:!0});var YOr=s(zS);nco=r(YOr,"UniSpeechModel"),YOr.forEach(t),sco=r(TMe," (UniSpeech model)"),TMe.forEach(t),lco=i(C),a_=n(C,"LI",{});var FMe=s(a_);vZ=n(FMe,"STRONG",{});var KOr=s(vZ);ico=r(KOr,"unispeech-sat"),KOr.forEach(t),dco=r(FMe," \u2014 "),WS=n(FMe,"A",{href:!0});var ZOr=s(WS);cco=r(ZOr,"UniSpeechSatModel"),ZOr.forEach(t),fco=r(FMe," (UniSpeechSat model)"),FMe.forEach(t),mco=i(C),n_=n(C,"LI",{});var CMe=s(n_);TZ=n(CMe,"STRONG",{});var eGr=s(TZ);gco=r(eGr,"vilt"),eGr.forEach(t),hco=r(CMe," \u2014 "),QS=n(CMe,"A",{href:!0});var oGr=s(QS);pco=r(oGr,"ViltModel"),oGr.forEach(t),_co=r(CMe," (ViLT model)"),CMe.forEach(t),uco=i(C),s_=n(C,"LI",{});var MMe=s(s_);FZ=n(MMe,"STRONG",{});var rGr=s(FZ);bco=r(rGr,"vision-text-dual-encoder"),rGr.forEach(t),vco=r(MMe," \u2014 "),HS=n(MMe,"A",{href:!0});var tGr=s(HS);Tco=r(tGr,"VisionTextDualEncoderModel"),tGr.forEach(t),Fco=r(MMe," (VisionTextDualEncoder model)"),MMe.forEach(t),Cco=i(C),l_=n(C,"LI",{});var EMe=s(l_);CZ=n(EMe,"STRONG",{});var aGr=s(CZ);Mco=r(aGr,"visual_bert"),aGr.forEach(t),Eco=r(EMe," \u2014 "),US=n(EMe,"A",{href:!0});var nGr=s(US);yco=r(nGr,"VisualBertModel"),nGr.forEach(t),wco=r(EMe," (VisualBert model)"),EMe.forEach(t),Aco=i(C),i_=n(C,"LI",{});var yMe=s(i_);MZ=n(yMe,"STRONG",{});var sGr=s(MZ);Lco=r(sGr,"vit"),sGr.forEach(t),Bco=r(yMe," \u2014 "),JS=n(yMe,"A",{href:!0});var lGr=s(JS);xco=r(lGr,"ViTModel"),lGr.forEach(t),kco=r(yMe," (ViT model)"),yMe.forEach(t),Rco=i(C),d_=n(C,"LI",{});var wMe=s(d_);EZ=n(wMe,"STRONG",{});var iGr=s(EZ);Sco=r(iGr,"vit_mae"),iGr.forEach(t),Pco=r(wMe," \u2014 "),YS=n(wMe,"A",{href:!0});var dGr=s(YS);$co=r(dGr,"ViTMAEModel"),dGr.forEach(t),Ico=r(wMe," (ViTMAE model)"),wMe.forEach(t),jco=i(C),c_=n(C,"LI",{});var AMe=s(c_);yZ=n(AMe,"STRONG",{});var cGr=s(yZ);Dco=r(cGr,"wav2vec2"),cGr.forEach(t),Nco=r(AMe," \u2014 "),KS=n(AMe,"A",{href:!0});var fGr=s(KS);qco=r(fGr,"Wav2Vec2Model"),fGr.forEach(t),Oco=r(AMe," (Wav2Vec2 model)"),AMe.forEach(t),Gco=i(C),f_=n(C,"LI",{});var LMe=s(f_);wZ=n(LMe,"STRONG",{});var mGr=s(wZ);Xco=r(mGr,"wavlm"),mGr.forEach(t),Vco=r(LMe," \u2014 "),ZS=n(LMe,"A",{href:!0});var gGr=s(ZS);zco=r(gGr,"WavLMModel"),gGr.forEach(t),Wco=r(LMe," (WavLM model)"),LMe.forEach(t),Qco=i(C),m_=n(C,"LI",{});var BMe=s(m_);AZ=n(BMe,"STRONG",{});var hGr=s(AZ);Hco=r(hGr,"xglm"),hGr.forEach(t),Uco=r(BMe," \u2014 "),eP=n(BMe,"A",{href:!0});var pGr=s(eP);Jco=r(pGr,"XGLMModel"),pGr.forEach(t),Yco=r(BMe," (XGLM model)"),BMe.forEach(t),Kco=i(C),g_=n(C,"LI",{});var xMe=s(g_);LZ=n(xMe,"STRONG",{});var _Gr=s(LZ);Zco=r(_Gr,"xlm"),_Gr.forEach(t),efo=r(xMe," \u2014 "),oP=n(xMe,"A",{href:!0});var uGr=s(oP);ofo=r(uGr,"XLMModel"),uGr.forEach(t),rfo=r(xMe," (XLM model)"),xMe.forEach(t),tfo=i(C),h_=n(C,"LI",{});var kMe=s(h_);BZ=n(kMe,"STRONG",{});var bGr=s(BZ);afo=r(bGr,"xlm-prophetnet"),bGr.forEach(t),nfo=r(kMe," \u2014 "),rP=n(kMe,"A",{href:!0});var vGr=s(rP);sfo=r(vGr,"XLMProphetNetModel"),vGr.forEach(t),lfo=r(kMe," (XLMProphetNet model)"),kMe.forEach(t),ifo=i(C),p_=n(C,"LI",{});var RMe=s(p_);xZ=n(RMe,"STRONG",{});var TGr=s(xZ);dfo=r(TGr,"xlm-roberta"),TGr.forEach(t),cfo=r(RMe," \u2014 "),tP=n(RMe,"A",{href:!0});var FGr=s(tP);ffo=r(FGr,"XLMRobertaModel"),FGr.forEach(t),mfo=r(RMe," (XLM-RoBERTa model)"),RMe.forEach(t),gfo=i(C),__=n(C,"LI",{});var SMe=s(__);kZ=n(SMe,"STRONG",{});var CGr=s(kZ);hfo=r(CGr,"xlm-roberta-xl"),CGr.forEach(t),pfo=r(SMe," \u2014 "),aP=n(SMe,"A",{href:!0});var MGr=s(aP);_fo=r(MGr,"XLMRobertaXLModel"),MGr.forEach(t),ufo=r(SMe," (XLM-RoBERTa-XL model)"),SMe.forEach(t),bfo=i(C),u_=n(C,"LI",{});var PMe=s(u_);RZ=n(PMe,"STRONG",{});var EGr=s(RZ);vfo=r(EGr,"xlnet"),EGr.forEach(t),Tfo=r(PMe," \u2014 "),nP=n(PMe,"A",{href:!0});var yGr=s(nP);Ffo=r(yGr,"XLNetModel"),yGr.forEach(t),Cfo=r(PMe," (XLNet model)"),PMe.forEach(t),Mfo=i(C),b_=n(C,"LI",{});var $Me=s(b_);SZ=n($Me,"STRONG",{});var wGr=s(SZ);Efo=r(wGr,"yoso"),wGr.forEach(t),yfo=r($Me," \u2014 "),sP=n($Me,"A",{href:!0});var AGr=s(sP);wfo=r(AGr,"YosoModel"),AGr.forEach(t),Afo=r($Me," (YOSO model)"),$Me.forEach(t),C.forEach(t),Lfo=i(qt),v_=n(qt,"P",{});var IMe=s(v_);Bfo=r(IMe,"The model is set in evaluation mode by default using "),PZ=n(IMe,"CODE",{});var LGr=s(PZ);xfo=r(LGr,"model.eval()"),LGr.forEach(t),kfo=r(IMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Z=n(IMe,"CODE",{});var BGr=s($Z);Rfo=r(BGr,"model.train()"),BGr.forEach(t),IMe.forEach(t),Sfo=i(qt),IZ=n(qt,"P",{});var xGr=s(IZ);Pfo=r(xGr,"Examples:"),xGr.forEach(t),$fo=i(qt),m(jE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),jxe=i(c),ed=n(c,"H2",{class:!0});var WRe=s(ed);T_=n(WRe,"A",{id:!0,class:!0,href:!0});var kGr=s(T_);jZ=n(kGr,"SPAN",{});var RGr=s(jZ);m(DE.$$.fragment,RGr),RGr.forEach(t),kGr.forEach(t),Ifo=i(WRe),DZ=n(WRe,"SPAN",{});var SGr=s(DZ);jfo=r(SGr,"AutoModelForPreTraining"),SGr.forEach(t),WRe.forEach(t),Dxe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(NE.$$.fragment,Hs),Dfo=i(Hs),od=n(Hs,"P",{});var $z=s(od);Nfo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=n($z,"CODE",{});var PGr=s(NZ);qfo=r(PGr,"from_pretrained()"),PGr.forEach(t),Ofo=r($z,"class method or the "),qZ=n($z,"CODE",{});var $Gr=s(qZ);Gfo=r($Gr,"from_config()"),$Gr.forEach(t),Xfo=r($z,`class
method.`),$z.forEach(t),Vfo=i(Hs),qE=n(Hs,"P",{});var QRe=s(qE);zfo=r(QRe,"This class cannot be instantiated directly using "),OZ=n(QRe,"CODE",{});var IGr=s(OZ);Wfo=r(IGr,"__init__()"),IGr.forEach(t),Qfo=r(QRe," (throws an error)."),QRe.forEach(t),Hfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(OE.$$.fragment,Us),Ufo=i(Us),GZ=n(Us,"P",{});var jGr=s(GZ);Jfo=r(jGr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jGr.forEach(t),Yfo=i(Us),rd=n(Us,"P",{});var Iz=s(rd);Kfo=r(Iz,`Note:
Loading a model from its configuration file does `),XZ=n(Iz,"STRONG",{});var DGr=s(XZ);Zfo=r(DGr,"not"),DGr.forEach(t),emo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(Iz,"CODE",{});var NGr=s(VZ);omo=r(NGr,"from_pretrained()"),NGr.forEach(t),rmo=r(Iz,"to load the model weights."),Iz.forEach(t),tmo=i(Us),zZ=n(Us,"P",{});var qGr=s(zZ);amo=r(qGr,"Examples:"),qGr.forEach(t),nmo=i(Us),m(GE.$$.fragment,Us),Us.forEach(t),smo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Ot=s(Ne);m(XE.$$.fragment,Ot),lmo=i(Ot),WZ=n(Ot,"P",{});var OGr=s(WZ);imo=r(OGr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OGr.forEach(t),dmo=i(Ot),za=n(Ot,"P",{});var r4=s(za);cmo=r(r4,"The model class to instantiate is selected based on the "),QZ=n(r4,"CODE",{});var GGr=s(QZ);fmo=r(GGr,"model_type"),GGr.forEach(t),mmo=r(r4,` property of the config object (either
passed as an argument or loaded from `),HZ=n(r4,"CODE",{});var XGr=s(HZ);gmo=r(XGr,"pretrained_model_name_or_path"),XGr.forEach(t),hmo=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UZ=n(r4,"CODE",{});var VGr=s(UZ);pmo=r(VGr,"pretrained_model_name_or_path"),VGr.forEach(t),_mo=r(r4,":"),r4.forEach(t),umo=i(Ot),k=n(Ot,"UL",{});var S=s(k);F_=n(S,"LI",{});var jMe=s(F_);JZ=n(jMe,"STRONG",{});var zGr=s(JZ);bmo=r(zGr,"albert"),zGr.forEach(t),vmo=r(jMe," \u2014 "),lP=n(jMe,"A",{href:!0});var WGr=s(lP);Tmo=r(WGr,"AlbertForPreTraining"),WGr.forEach(t),Fmo=r(jMe," (ALBERT model)"),jMe.forEach(t),Cmo=i(S),C_=n(S,"LI",{});var DMe=s(C_);YZ=n(DMe,"STRONG",{});var QGr=s(YZ);Mmo=r(QGr,"bart"),QGr.forEach(t),Emo=r(DMe," \u2014 "),iP=n(DMe,"A",{href:!0});var HGr=s(iP);ymo=r(HGr,"BartForConditionalGeneration"),HGr.forEach(t),wmo=r(DMe," (BART model)"),DMe.forEach(t),Amo=i(S),M_=n(S,"LI",{});var NMe=s(M_);KZ=n(NMe,"STRONG",{});var UGr=s(KZ);Lmo=r(UGr,"bert"),UGr.forEach(t),Bmo=r(NMe," \u2014 "),dP=n(NMe,"A",{href:!0});var JGr=s(dP);xmo=r(JGr,"BertForPreTraining"),JGr.forEach(t),kmo=r(NMe," (BERT model)"),NMe.forEach(t),Rmo=i(S),E_=n(S,"LI",{});var qMe=s(E_);ZZ=n(qMe,"STRONG",{});var YGr=s(ZZ);Smo=r(YGr,"big_bird"),YGr.forEach(t),Pmo=r(qMe," \u2014 "),cP=n(qMe,"A",{href:!0});var KGr=s(cP);$mo=r(KGr,"BigBirdForPreTraining"),KGr.forEach(t),Imo=r(qMe," (BigBird model)"),qMe.forEach(t),jmo=i(S),y_=n(S,"LI",{});var OMe=s(y_);eee=n(OMe,"STRONG",{});var ZGr=s(eee);Dmo=r(ZGr,"camembert"),ZGr.forEach(t),Nmo=r(OMe," \u2014 "),fP=n(OMe,"A",{href:!0});var eXr=s(fP);qmo=r(eXr,"CamembertForMaskedLM"),eXr.forEach(t),Omo=r(OMe," (CamemBERT model)"),OMe.forEach(t),Gmo=i(S),w_=n(S,"LI",{});var GMe=s(w_);oee=n(GMe,"STRONG",{});var oXr=s(oee);Xmo=r(oXr,"ctrl"),oXr.forEach(t),Vmo=r(GMe," \u2014 "),mP=n(GMe,"A",{href:!0});var rXr=s(mP);zmo=r(rXr,"CTRLLMHeadModel"),rXr.forEach(t),Wmo=r(GMe," (CTRL model)"),GMe.forEach(t),Qmo=i(S),A_=n(S,"LI",{});var XMe=s(A_);ree=n(XMe,"STRONG",{});var tXr=s(ree);Hmo=r(tXr,"data2vec-text"),tXr.forEach(t),Umo=r(XMe," \u2014 "),gP=n(XMe,"A",{href:!0});var aXr=s(gP);Jmo=r(aXr,"Data2VecTextForMaskedLM"),aXr.forEach(t),Ymo=r(XMe," (Data2VecText model)"),XMe.forEach(t),Kmo=i(S),L_=n(S,"LI",{});var VMe=s(L_);tee=n(VMe,"STRONG",{});var nXr=s(tee);Zmo=r(nXr,"deberta"),nXr.forEach(t),ego=r(VMe," \u2014 "),hP=n(VMe,"A",{href:!0});var sXr=s(hP);ogo=r(sXr,"DebertaForMaskedLM"),sXr.forEach(t),rgo=r(VMe," (DeBERTa model)"),VMe.forEach(t),tgo=i(S),B_=n(S,"LI",{});var zMe=s(B_);aee=n(zMe,"STRONG",{});var lXr=s(aee);ago=r(lXr,"deberta-v2"),lXr.forEach(t),ngo=r(zMe," \u2014 "),pP=n(zMe,"A",{href:!0});var iXr=s(pP);sgo=r(iXr,"DebertaV2ForMaskedLM"),iXr.forEach(t),lgo=r(zMe," (DeBERTa-v2 model)"),zMe.forEach(t),igo=i(S),x_=n(S,"LI",{});var WMe=s(x_);nee=n(WMe,"STRONG",{});var dXr=s(nee);dgo=r(dXr,"distilbert"),dXr.forEach(t),cgo=r(WMe," \u2014 "),_P=n(WMe,"A",{href:!0});var cXr=s(_P);fgo=r(cXr,"DistilBertForMaskedLM"),cXr.forEach(t),mgo=r(WMe," (DistilBERT model)"),WMe.forEach(t),ggo=i(S),k_=n(S,"LI",{});var QMe=s(k_);see=n(QMe,"STRONG",{});var fXr=s(see);hgo=r(fXr,"electra"),fXr.forEach(t),pgo=r(QMe," \u2014 "),uP=n(QMe,"A",{href:!0});var mXr=s(uP);_go=r(mXr,"ElectraForPreTraining"),mXr.forEach(t),ugo=r(QMe," (ELECTRA model)"),QMe.forEach(t),bgo=i(S),R_=n(S,"LI",{});var HMe=s(R_);lee=n(HMe,"STRONG",{});var gXr=s(lee);vgo=r(gXr,"flaubert"),gXr.forEach(t),Tgo=r(HMe," \u2014 "),bP=n(HMe,"A",{href:!0});var hXr=s(bP);Fgo=r(hXr,"FlaubertWithLMHeadModel"),hXr.forEach(t),Cgo=r(HMe," (FlauBERT model)"),HMe.forEach(t),Mgo=i(S),S_=n(S,"LI",{});var UMe=s(S_);iee=n(UMe,"STRONG",{});var pXr=s(iee);Ego=r(pXr,"fnet"),pXr.forEach(t),ygo=r(UMe," \u2014 "),vP=n(UMe,"A",{href:!0});var _Xr=s(vP);wgo=r(_Xr,"FNetForPreTraining"),_Xr.forEach(t),Ago=r(UMe," (FNet model)"),UMe.forEach(t),Lgo=i(S),P_=n(S,"LI",{});var JMe=s(P_);dee=n(JMe,"STRONG",{});var uXr=s(dee);Bgo=r(uXr,"fsmt"),uXr.forEach(t),xgo=r(JMe," \u2014 "),TP=n(JMe,"A",{href:!0});var bXr=s(TP);kgo=r(bXr,"FSMTForConditionalGeneration"),bXr.forEach(t),Rgo=r(JMe," (FairSeq Machine-Translation model)"),JMe.forEach(t),Sgo=i(S),$_=n(S,"LI",{});var YMe=s($_);cee=n(YMe,"STRONG",{});var vXr=s(cee);Pgo=r(vXr,"funnel"),vXr.forEach(t),$go=r(YMe," \u2014 "),FP=n(YMe,"A",{href:!0});var TXr=s(FP);Igo=r(TXr,"FunnelForPreTraining"),TXr.forEach(t),jgo=r(YMe," (Funnel Transformer model)"),YMe.forEach(t),Dgo=i(S),I_=n(S,"LI",{});var KMe=s(I_);fee=n(KMe,"STRONG",{});var FXr=s(fee);Ngo=r(FXr,"gpt2"),FXr.forEach(t),qgo=r(KMe," \u2014 "),CP=n(KMe,"A",{href:!0});var CXr=s(CP);Ogo=r(CXr,"GPT2LMHeadModel"),CXr.forEach(t),Ggo=r(KMe," (OpenAI GPT-2 model)"),KMe.forEach(t),Xgo=i(S),j_=n(S,"LI",{});var ZMe=s(j_);mee=n(ZMe,"STRONG",{});var MXr=s(mee);Vgo=r(MXr,"ibert"),MXr.forEach(t),zgo=r(ZMe," \u2014 "),MP=n(ZMe,"A",{href:!0});var EXr=s(MP);Wgo=r(EXr,"IBertForMaskedLM"),EXr.forEach(t),Qgo=r(ZMe," (I-BERT model)"),ZMe.forEach(t),Hgo=i(S),D_=n(S,"LI",{});var e4e=s(D_);gee=n(e4e,"STRONG",{});var yXr=s(gee);Ugo=r(yXr,"layoutlm"),yXr.forEach(t),Jgo=r(e4e," \u2014 "),EP=n(e4e,"A",{href:!0});var wXr=s(EP);Ygo=r(wXr,"LayoutLMForMaskedLM"),wXr.forEach(t),Kgo=r(e4e," (LayoutLM model)"),e4e.forEach(t),Zgo=i(S),N_=n(S,"LI",{});var o4e=s(N_);hee=n(o4e,"STRONG",{});var AXr=s(hee);eho=r(AXr,"longformer"),AXr.forEach(t),oho=r(o4e," \u2014 "),yP=n(o4e,"A",{href:!0});var LXr=s(yP);rho=r(LXr,"LongformerForMaskedLM"),LXr.forEach(t),tho=r(o4e," (Longformer model)"),o4e.forEach(t),aho=i(S),q_=n(S,"LI",{});var r4e=s(q_);pee=n(r4e,"STRONG",{});var BXr=s(pee);nho=r(BXr,"lxmert"),BXr.forEach(t),sho=r(r4e," \u2014 "),wP=n(r4e,"A",{href:!0});var xXr=s(wP);lho=r(xXr,"LxmertForPreTraining"),xXr.forEach(t),iho=r(r4e," (LXMERT model)"),r4e.forEach(t),dho=i(S),O_=n(S,"LI",{});var t4e=s(O_);_ee=n(t4e,"STRONG",{});var kXr=s(_ee);cho=r(kXr,"megatron-bert"),kXr.forEach(t),fho=r(t4e," \u2014 "),AP=n(t4e,"A",{href:!0});var RXr=s(AP);mho=r(RXr,"MegatronBertForPreTraining"),RXr.forEach(t),gho=r(t4e," (MegatronBert model)"),t4e.forEach(t),hho=i(S),G_=n(S,"LI",{});var a4e=s(G_);uee=n(a4e,"STRONG",{});var SXr=s(uee);pho=r(SXr,"mobilebert"),SXr.forEach(t),_ho=r(a4e," \u2014 "),LP=n(a4e,"A",{href:!0});var PXr=s(LP);uho=r(PXr,"MobileBertForPreTraining"),PXr.forEach(t),bho=r(a4e," (MobileBERT model)"),a4e.forEach(t),vho=i(S),X_=n(S,"LI",{});var n4e=s(X_);bee=n(n4e,"STRONG",{});var $Xr=s(bee);Tho=r($Xr,"mpnet"),$Xr.forEach(t),Fho=r(n4e," \u2014 "),BP=n(n4e,"A",{href:!0});var IXr=s(BP);Cho=r(IXr,"MPNetForMaskedLM"),IXr.forEach(t),Mho=r(n4e," (MPNet model)"),n4e.forEach(t),Eho=i(S),V_=n(S,"LI",{});var s4e=s(V_);vee=n(s4e,"STRONG",{});var jXr=s(vee);yho=r(jXr,"openai-gpt"),jXr.forEach(t),who=r(s4e," \u2014 "),xP=n(s4e,"A",{href:!0});var DXr=s(xP);Aho=r(DXr,"OpenAIGPTLMHeadModel"),DXr.forEach(t),Lho=r(s4e," (OpenAI GPT model)"),s4e.forEach(t),Bho=i(S),z_=n(S,"LI",{});var l4e=s(z_);Tee=n(l4e,"STRONG",{});var NXr=s(Tee);xho=r(NXr,"retribert"),NXr.forEach(t),kho=r(l4e," \u2014 "),kP=n(l4e,"A",{href:!0});var qXr=s(kP);Rho=r(qXr,"RetriBertModel"),qXr.forEach(t),Sho=r(l4e," (RetriBERT model)"),l4e.forEach(t),Pho=i(S),W_=n(S,"LI",{});var i4e=s(W_);Fee=n(i4e,"STRONG",{});var OXr=s(Fee);$ho=r(OXr,"roberta"),OXr.forEach(t),Iho=r(i4e," \u2014 "),RP=n(i4e,"A",{href:!0});var GXr=s(RP);jho=r(GXr,"RobertaForMaskedLM"),GXr.forEach(t),Dho=r(i4e," (RoBERTa model)"),i4e.forEach(t),Nho=i(S),Q_=n(S,"LI",{});var d4e=s(Q_);Cee=n(d4e,"STRONG",{});var XXr=s(Cee);qho=r(XXr,"squeezebert"),XXr.forEach(t),Oho=r(d4e," \u2014 "),SP=n(d4e,"A",{href:!0});var VXr=s(SP);Gho=r(VXr,"SqueezeBertForMaskedLM"),VXr.forEach(t),Xho=r(d4e," (SqueezeBERT model)"),d4e.forEach(t),Vho=i(S),H_=n(S,"LI",{});var c4e=s(H_);Mee=n(c4e,"STRONG",{});var zXr=s(Mee);zho=r(zXr,"t5"),zXr.forEach(t),Who=r(c4e," \u2014 "),PP=n(c4e,"A",{href:!0});var WXr=s(PP);Qho=r(WXr,"T5ForConditionalGeneration"),WXr.forEach(t),Hho=r(c4e," (T5 model)"),c4e.forEach(t),Uho=i(S),U_=n(S,"LI",{});var f4e=s(U_);Eee=n(f4e,"STRONG",{});var QXr=s(Eee);Jho=r(QXr,"tapas"),QXr.forEach(t),Yho=r(f4e," \u2014 "),$P=n(f4e,"A",{href:!0});var HXr=s($P);Kho=r(HXr,"TapasForMaskedLM"),HXr.forEach(t),Zho=r(f4e," (TAPAS model)"),f4e.forEach(t),epo=i(S),J_=n(S,"LI",{});var m4e=s(J_);yee=n(m4e,"STRONG",{});var UXr=s(yee);opo=r(UXr,"transfo-xl"),UXr.forEach(t),rpo=r(m4e," \u2014 "),IP=n(m4e,"A",{href:!0});var JXr=s(IP);tpo=r(JXr,"TransfoXLLMHeadModel"),JXr.forEach(t),apo=r(m4e," (Transformer-XL model)"),m4e.forEach(t),npo=i(S),Y_=n(S,"LI",{});var g4e=s(Y_);wee=n(g4e,"STRONG",{});var YXr=s(wee);spo=r(YXr,"unispeech"),YXr.forEach(t),lpo=r(g4e," \u2014 "),jP=n(g4e,"A",{href:!0});var KXr=s(jP);ipo=r(KXr,"UniSpeechForPreTraining"),KXr.forEach(t),dpo=r(g4e," (UniSpeech model)"),g4e.forEach(t),cpo=i(S),K_=n(S,"LI",{});var h4e=s(K_);Aee=n(h4e,"STRONG",{});var ZXr=s(Aee);fpo=r(ZXr,"unispeech-sat"),ZXr.forEach(t),mpo=r(h4e," \u2014 "),DP=n(h4e,"A",{href:!0});var eVr=s(DP);gpo=r(eVr,"UniSpeechSatForPreTraining"),eVr.forEach(t),hpo=r(h4e," (UniSpeechSat model)"),h4e.forEach(t),ppo=i(S),Z_=n(S,"LI",{});var p4e=s(Z_);Lee=n(p4e,"STRONG",{});var oVr=s(Lee);_po=r(oVr,"visual_bert"),oVr.forEach(t),upo=r(p4e," \u2014 "),NP=n(p4e,"A",{href:!0});var rVr=s(NP);bpo=r(rVr,"VisualBertForPreTraining"),rVr.forEach(t),vpo=r(p4e," (VisualBert model)"),p4e.forEach(t),Tpo=i(S),eu=n(S,"LI",{});var _4e=s(eu);Bee=n(_4e,"STRONG",{});var tVr=s(Bee);Fpo=r(tVr,"vit_mae"),tVr.forEach(t),Cpo=r(_4e," \u2014 "),qP=n(_4e,"A",{href:!0});var aVr=s(qP);Mpo=r(aVr,"ViTMAEForPreTraining"),aVr.forEach(t),Epo=r(_4e," (ViTMAE model)"),_4e.forEach(t),ypo=i(S),ou=n(S,"LI",{});var u4e=s(ou);xee=n(u4e,"STRONG",{});var nVr=s(xee);wpo=r(nVr,"wav2vec2"),nVr.forEach(t),Apo=r(u4e," \u2014 "),OP=n(u4e,"A",{href:!0});var sVr=s(OP);Lpo=r(sVr,"Wav2Vec2ForPreTraining"),sVr.forEach(t),Bpo=r(u4e," (Wav2Vec2 model)"),u4e.forEach(t),xpo=i(S),ru=n(S,"LI",{});var b4e=s(ru);kee=n(b4e,"STRONG",{});var lVr=s(kee);kpo=r(lVr,"xlm"),lVr.forEach(t),Rpo=r(b4e," \u2014 "),GP=n(b4e,"A",{href:!0});var iVr=s(GP);Spo=r(iVr,"XLMWithLMHeadModel"),iVr.forEach(t),Ppo=r(b4e," (XLM model)"),b4e.forEach(t),$po=i(S),tu=n(S,"LI",{});var v4e=s(tu);Ree=n(v4e,"STRONG",{});var dVr=s(Ree);Ipo=r(dVr,"xlm-roberta"),dVr.forEach(t),jpo=r(v4e," \u2014 "),XP=n(v4e,"A",{href:!0});var cVr=s(XP);Dpo=r(cVr,"XLMRobertaForMaskedLM"),cVr.forEach(t),Npo=r(v4e," (XLM-RoBERTa model)"),v4e.forEach(t),qpo=i(S),au=n(S,"LI",{});var T4e=s(au);See=n(T4e,"STRONG",{});var fVr=s(See);Opo=r(fVr,"xlm-roberta-xl"),fVr.forEach(t),Gpo=r(T4e," \u2014 "),VP=n(T4e,"A",{href:!0});var mVr=s(VP);Xpo=r(mVr,"XLMRobertaXLForMaskedLM"),mVr.forEach(t),Vpo=r(T4e," (XLM-RoBERTa-XL model)"),T4e.forEach(t),zpo=i(S),nu=n(S,"LI",{});var F4e=s(nu);Pee=n(F4e,"STRONG",{});var gVr=s(Pee);Wpo=r(gVr,"xlnet"),gVr.forEach(t),Qpo=r(F4e," \u2014 "),zP=n(F4e,"A",{href:!0});var hVr=s(zP);Hpo=r(hVr,"XLNetLMHeadModel"),hVr.forEach(t),Upo=r(F4e," (XLNet model)"),F4e.forEach(t),S.forEach(t),Jpo=i(Ot),su=n(Ot,"P",{});var C4e=s(su);Ypo=r(C4e,"The model is set in evaluation mode by default using "),$ee=n(C4e,"CODE",{});var pVr=s($ee);Kpo=r(pVr,"model.eval()"),pVr.forEach(t),Zpo=r(C4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iee=n(C4e,"CODE",{});var _Vr=s(Iee);e_o=r(_Vr,"model.train()"),_Vr.forEach(t),C4e.forEach(t),o_o=i(Ot),jee=n(Ot,"P",{});var uVr=s(jee);r_o=r(uVr,"Examples:"),uVr.forEach(t),t_o=i(Ot),m(VE.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),Nxe=i(c),td=n(c,"H2",{class:!0});var HRe=s(td);lu=n(HRe,"A",{id:!0,class:!0,href:!0});var bVr=s(lu);Dee=n(bVr,"SPAN",{});var vVr=s(Dee);m(zE.$$.fragment,vVr),vVr.forEach(t),bVr.forEach(t),a_o=i(HRe),Nee=n(HRe,"SPAN",{});var TVr=s(Nee);n_o=r(TVr,"AutoModelForCausalLM"),TVr.forEach(t),HRe.forEach(t),qxe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(WE.$$.fragment,Js),s_o=i(Js),ad=n(Js,"P",{});var jz=s(ad);l_o=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qee=n(jz,"CODE",{});var FVr=s(qee);i_o=r(FVr,"from_pretrained()"),FVr.forEach(t),d_o=r(jz,"class method or the "),Oee=n(jz,"CODE",{});var CVr=s(Oee);c_o=r(CVr,"from_config()"),CVr.forEach(t),f_o=r(jz,`class
method.`),jz.forEach(t),m_o=i(Js),QE=n(Js,"P",{});var URe=s(QE);g_o=r(URe,"This class cannot be instantiated directly using "),Gee=n(URe,"CODE",{});var MVr=s(Gee);h_o=r(MVr,"__init__()"),MVr.forEach(t),p_o=r(URe," (throws an error)."),URe.forEach(t),__o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(HE.$$.fragment,Ys),u_o=i(Ys),Xee=n(Ys,"P",{});var EVr=s(Xee);b_o=r(EVr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EVr.forEach(t),v_o=i(Ys),nd=n(Ys,"P",{});var Dz=s(nd);T_o=r(Dz,`Note:
Loading a model from its configuration file does `),Vee=n(Dz,"STRONG",{});var yVr=s(Vee);F_o=r(yVr,"not"),yVr.forEach(t),C_o=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(Dz,"CODE",{});var wVr=s(zee);M_o=r(wVr,"from_pretrained()"),wVr.forEach(t),E_o=r(Dz,"to load the model weights."),Dz.forEach(t),y_o=i(Ys),Wee=n(Ys,"P",{});var AVr=s(Wee);w_o=r(AVr,"Examples:"),AVr.forEach(t),A_o=i(Ys),m(UE.$$.fragment,Ys),Ys.forEach(t),L_o=i(Js),qe=n(Js,"DIV",{class:!0});var Gt=s(qe);m(JE.$$.fragment,Gt),B_o=i(Gt),Qee=n(Gt,"P",{});var LVr=s(Qee);x_o=r(LVr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LVr.forEach(t),k_o=i(Gt),Wa=n(Gt,"P",{});var t4=s(Wa);R_o=r(t4,"The model class to instantiate is selected based on the "),Hee=n(t4,"CODE",{});var BVr=s(Hee);S_o=r(BVr,"model_type"),BVr.forEach(t),P_o=r(t4,` property of the config object (either
passed as an argument or loaded from `),Uee=n(t4,"CODE",{});var xVr=s(Uee);$_o=r(xVr,"pretrained_model_name_or_path"),xVr.forEach(t),I_o=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jee=n(t4,"CODE",{});var kVr=s(Jee);j_o=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),D_o=r(t4,":"),t4.forEach(t),N_o=i(Gt),$=n(Gt,"UL",{});var j=s($);iu=n(j,"LI",{});var M4e=s(iu);Yee=n(M4e,"STRONG",{});var RVr=s(Yee);q_o=r(RVr,"bart"),RVr.forEach(t),O_o=r(M4e," \u2014 "),WP=n(M4e,"A",{href:!0});var SVr=s(WP);G_o=r(SVr,"BartForCausalLM"),SVr.forEach(t),X_o=r(M4e," (BART model)"),M4e.forEach(t),V_o=i(j),du=n(j,"LI",{});var E4e=s(du);Kee=n(E4e,"STRONG",{});var PVr=s(Kee);z_o=r(PVr,"bert"),PVr.forEach(t),W_o=r(E4e," \u2014 "),QP=n(E4e,"A",{href:!0});var $Vr=s(QP);Q_o=r($Vr,"BertLMHeadModel"),$Vr.forEach(t),H_o=r(E4e," (BERT model)"),E4e.forEach(t),U_o=i(j),cu=n(j,"LI",{});var y4e=s(cu);Zee=n(y4e,"STRONG",{});var IVr=s(Zee);J_o=r(IVr,"bert-generation"),IVr.forEach(t),Y_o=r(y4e," \u2014 "),HP=n(y4e,"A",{href:!0});var jVr=s(HP);K_o=r(jVr,"BertGenerationDecoder"),jVr.forEach(t),Z_o=r(y4e," (Bert Generation model)"),y4e.forEach(t),euo=i(j),fu=n(j,"LI",{});var w4e=s(fu);eoe=n(w4e,"STRONG",{});var DVr=s(eoe);ouo=r(DVr,"big_bird"),DVr.forEach(t),ruo=r(w4e," \u2014 "),UP=n(w4e,"A",{href:!0});var NVr=s(UP);tuo=r(NVr,"BigBirdForCausalLM"),NVr.forEach(t),auo=r(w4e," (BigBird model)"),w4e.forEach(t),nuo=i(j),mu=n(j,"LI",{});var A4e=s(mu);ooe=n(A4e,"STRONG",{});var qVr=s(ooe);suo=r(qVr,"bigbird_pegasus"),qVr.forEach(t),luo=r(A4e," \u2014 "),JP=n(A4e,"A",{href:!0});var OVr=s(JP);iuo=r(OVr,"BigBirdPegasusForCausalLM"),OVr.forEach(t),duo=r(A4e," (BigBirdPegasus model)"),A4e.forEach(t),cuo=i(j),gu=n(j,"LI",{});var L4e=s(gu);roe=n(L4e,"STRONG",{});var GVr=s(roe);fuo=r(GVr,"blenderbot"),GVr.forEach(t),muo=r(L4e," \u2014 "),YP=n(L4e,"A",{href:!0});var XVr=s(YP);guo=r(XVr,"BlenderbotForCausalLM"),XVr.forEach(t),huo=r(L4e," (Blenderbot model)"),L4e.forEach(t),puo=i(j),hu=n(j,"LI",{});var B4e=s(hu);toe=n(B4e,"STRONG",{});var VVr=s(toe);_uo=r(VVr,"blenderbot-small"),VVr.forEach(t),uuo=r(B4e," \u2014 "),KP=n(B4e,"A",{href:!0});var zVr=s(KP);buo=r(zVr,"BlenderbotSmallForCausalLM"),zVr.forEach(t),vuo=r(B4e," (BlenderbotSmall model)"),B4e.forEach(t),Tuo=i(j),pu=n(j,"LI",{});var x4e=s(pu);aoe=n(x4e,"STRONG",{});var WVr=s(aoe);Fuo=r(WVr,"camembert"),WVr.forEach(t),Cuo=r(x4e," \u2014 "),ZP=n(x4e,"A",{href:!0});var QVr=s(ZP);Muo=r(QVr,"CamembertForCausalLM"),QVr.forEach(t),Euo=r(x4e," (CamemBERT model)"),x4e.forEach(t),yuo=i(j),_u=n(j,"LI",{});var k4e=s(_u);noe=n(k4e,"STRONG",{});var HVr=s(noe);wuo=r(HVr,"ctrl"),HVr.forEach(t),Auo=r(k4e," \u2014 "),e$=n(k4e,"A",{href:!0});var UVr=s(e$);Luo=r(UVr,"CTRLLMHeadModel"),UVr.forEach(t),Buo=r(k4e," (CTRL model)"),k4e.forEach(t),xuo=i(j),uu=n(j,"LI",{});var R4e=s(uu);soe=n(R4e,"STRONG",{});var JVr=s(soe);kuo=r(JVr,"data2vec-text"),JVr.forEach(t),Ruo=r(R4e," \u2014 "),o$=n(R4e,"A",{href:!0});var YVr=s(o$);Suo=r(YVr,"Data2VecTextForCausalLM"),YVr.forEach(t),Puo=r(R4e," (Data2VecText model)"),R4e.forEach(t),$uo=i(j),bu=n(j,"LI",{});var S4e=s(bu);loe=n(S4e,"STRONG",{});var KVr=s(loe);Iuo=r(KVr,"electra"),KVr.forEach(t),juo=r(S4e," \u2014 "),r$=n(S4e,"A",{href:!0});var ZVr=s(r$);Duo=r(ZVr,"ElectraForCausalLM"),ZVr.forEach(t),Nuo=r(S4e," (ELECTRA model)"),S4e.forEach(t),quo=i(j),vu=n(j,"LI",{});var P4e=s(vu);ioe=n(P4e,"STRONG",{});var ezr=s(ioe);Ouo=r(ezr,"gpt2"),ezr.forEach(t),Guo=r(P4e," \u2014 "),t$=n(P4e,"A",{href:!0});var ozr=s(t$);Xuo=r(ozr,"GPT2LMHeadModel"),ozr.forEach(t),Vuo=r(P4e," (OpenAI GPT-2 model)"),P4e.forEach(t),zuo=i(j),Tu=n(j,"LI",{});var $4e=s(Tu);doe=n($4e,"STRONG",{});var rzr=s(doe);Wuo=r(rzr,"gpt_neo"),rzr.forEach(t),Quo=r($4e," \u2014 "),a$=n($4e,"A",{href:!0});var tzr=s(a$);Huo=r(tzr,"GPTNeoForCausalLM"),tzr.forEach(t),Uuo=r($4e," (GPT Neo model)"),$4e.forEach(t),Juo=i(j),Fu=n(j,"LI",{});var I4e=s(Fu);coe=n(I4e,"STRONG",{});var azr=s(coe);Yuo=r(azr,"gptj"),azr.forEach(t),Kuo=r(I4e," \u2014 "),n$=n(I4e,"A",{href:!0});var nzr=s(n$);Zuo=r(nzr,"GPTJForCausalLM"),nzr.forEach(t),e0o=r(I4e," (GPT-J model)"),I4e.forEach(t),o0o=i(j),Cu=n(j,"LI",{});var j4e=s(Cu);foe=n(j4e,"STRONG",{});var szr=s(foe);r0o=r(szr,"marian"),szr.forEach(t),t0o=r(j4e," \u2014 "),s$=n(j4e,"A",{href:!0});var lzr=s(s$);a0o=r(lzr,"MarianForCausalLM"),lzr.forEach(t),n0o=r(j4e," (Marian model)"),j4e.forEach(t),s0o=i(j),Mu=n(j,"LI",{});var D4e=s(Mu);moe=n(D4e,"STRONG",{});var izr=s(moe);l0o=r(izr,"mbart"),izr.forEach(t),i0o=r(D4e," \u2014 "),l$=n(D4e,"A",{href:!0});var dzr=s(l$);d0o=r(dzr,"MBartForCausalLM"),dzr.forEach(t),c0o=r(D4e," (mBART model)"),D4e.forEach(t),f0o=i(j),Eu=n(j,"LI",{});var N4e=s(Eu);goe=n(N4e,"STRONG",{});var czr=s(goe);m0o=r(czr,"megatron-bert"),czr.forEach(t),g0o=r(N4e," \u2014 "),i$=n(N4e,"A",{href:!0});var fzr=s(i$);h0o=r(fzr,"MegatronBertForCausalLM"),fzr.forEach(t),p0o=r(N4e," (MegatronBert model)"),N4e.forEach(t),_0o=i(j),yu=n(j,"LI",{});var q4e=s(yu);hoe=n(q4e,"STRONG",{});var mzr=s(hoe);u0o=r(mzr,"openai-gpt"),mzr.forEach(t),b0o=r(q4e," \u2014 "),d$=n(q4e,"A",{href:!0});var gzr=s(d$);v0o=r(gzr,"OpenAIGPTLMHeadModel"),gzr.forEach(t),T0o=r(q4e," (OpenAI GPT model)"),q4e.forEach(t),F0o=i(j),wu=n(j,"LI",{});var O4e=s(wu);poe=n(O4e,"STRONG",{});var hzr=s(poe);C0o=r(hzr,"pegasus"),hzr.forEach(t),M0o=r(O4e," \u2014 "),c$=n(O4e,"A",{href:!0});var pzr=s(c$);E0o=r(pzr,"PegasusForCausalLM"),pzr.forEach(t),y0o=r(O4e," (Pegasus model)"),O4e.forEach(t),w0o=i(j),Au=n(j,"LI",{});var G4e=s(Au);_oe=n(G4e,"STRONG",{});var _zr=s(_oe);A0o=r(_zr,"plbart"),_zr.forEach(t),L0o=r(G4e," \u2014 "),f$=n(G4e,"A",{href:!0});var uzr=s(f$);B0o=r(uzr,"PLBartForCausalLM"),uzr.forEach(t),x0o=r(G4e," (PLBart model)"),G4e.forEach(t),k0o=i(j),Lu=n(j,"LI",{});var X4e=s(Lu);uoe=n(X4e,"STRONG",{});var bzr=s(uoe);R0o=r(bzr,"prophetnet"),bzr.forEach(t),S0o=r(X4e," \u2014 "),m$=n(X4e,"A",{href:!0});var vzr=s(m$);P0o=r(vzr,"ProphetNetForCausalLM"),vzr.forEach(t),$0o=r(X4e," (ProphetNet model)"),X4e.forEach(t),I0o=i(j),Bu=n(j,"LI",{});var V4e=s(Bu);boe=n(V4e,"STRONG",{});var Tzr=s(boe);j0o=r(Tzr,"qdqbert"),Tzr.forEach(t),D0o=r(V4e," \u2014 "),g$=n(V4e,"A",{href:!0});var Fzr=s(g$);N0o=r(Fzr,"QDQBertLMHeadModel"),Fzr.forEach(t),q0o=r(V4e," (QDQBert model)"),V4e.forEach(t),O0o=i(j),xu=n(j,"LI",{});var z4e=s(xu);voe=n(z4e,"STRONG",{});var Czr=s(voe);G0o=r(Czr,"reformer"),Czr.forEach(t),X0o=r(z4e," \u2014 "),h$=n(z4e,"A",{href:!0});var Mzr=s(h$);V0o=r(Mzr,"ReformerModelWithLMHead"),Mzr.forEach(t),z0o=r(z4e," (Reformer model)"),z4e.forEach(t),W0o=i(j),ku=n(j,"LI",{});var W4e=s(ku);Toe=n(W4e,"STRONG",{});var Ezr=s(Toe);Q0o=r(Ezr,"rembert"),Ezr.forEach(t),H0o=r(W4e," \u2014 "),p$=n(W4e,"A",{href:!0});var yzr=s(p$);U0o=r(yzr,"RemBertForCausalLM"),yzr.forEach(t),J0o=r(W4e," (RemBERT model)"),W4e.forEach(t),Y0o=i(j),Ru=n(j,"LI",{});var Q4e=s(Ru);Foe=n(Q4e,"STRONG",{});var wzr=s(Foe);K0o=r(wzr,"roberta"),wzr.forEach(t),Z0o=r(Q4e," \u2014 "),_$=n(Q4e,"A",{href:!0});var Azr=s(_$);e1o=r(Azr,"RobertaForCausalLM"),Azr.forEach(t),o1o=r(Q4e," (RoBERTa model)"),Q4e.forEach(t),r1o=i(j),Su=n(j,"LI",{});var H4e=s(Su);Coe=n(H4e,"STRONG",{});var Lzr=s(Coe);t1o=r(Lzr,"roformer"),Lzr.forEach(t),a1o=r(H4e," \u2014 "),u$=n(H4e,"A",{href:!0});var Bzr=s(u$);n1o=r(Bzr,"RoFormerForCausalLM"),Bzr.forEach(t),s1o=r(H4e," (RoFormer model)"),H4e.forEach(t),l1o=i(j),Pu=n(j,"LI",{});var U4e=s(Pu);Moe=n(U4e,"STRONG",{});var xzr=s(Moe);i1o=r(xzr,"speech_to_text_2"),xzr.forEach(t),d1o=r(U4e," \u2014 "),b$=n(U4e,"A",{href:!0});var kzr=s(b$);c1o=r(kzr,"Speech2Text2ForCausalLM"),kzr.forEach(t),f1o=r(U4e," (Speech2Text2 model)"),U4e.forEach(t),m1o=i(j),$u=n(j,"LI",{});var J4e=s($u);Eoe=n(J4e,"STRONG",{});var Rzr=s(Eoe);g1o=r(Rzr,"transfo-xl"),Rzr.forEach(t),h1o=r(J4e," \u2014 "),v$=n(J4e,"A",{href:!0});var Szr=s(v$);p1o=r(Szr,"TransfoXLLMHeadModel"),Szr.forEach(t),_1o=r(J4e," (Transformer-XL model)"),J4e.forEach(t),u1o=i(j),Iu=n(j,"LI",{});var Y4e=s(Iu);yoe=n(Y4e,"STRONG",{});var Pzr=s(yoe);b1o=r(Pzr,"trocr"),Pzr.forEach(t),v1o=r(Y4e," \u2014 "),T$=n(Y4e,"A",{href:!0});var $zr=s(T$);T1o=r($zr,"TrOCRForCausalLM"),$zr.forEach(t),F1o=r(Y4e," (TrOCR model)"),Y4e.forEach(t),C1o=i(j),ju=n(j,"LI",{});var K4e=s(ju);woe=n(K4e,"STRONG",{});var Izr=s(woe);M1o=r(Izr,"xglm"),Izr.forEach(t),E1o=r(K4e," \u2014 "),F$=n(K4e,"A",{href:!0});var jzr=s(F$);y1o=r(jzr,"XGLMForCausalLM"),jzr.forEach(t),w1o=r(K4e," (XGLM model)"),K4e.forEach(t),A1o=i(j),Du=n(j,"LI",{});var Z4e=s(Du);Aoe=n(Z4e,"STRONG",{});var Dzr=s(Aoe);L1o=r(Dzr,"xlm"),Dzr.forEach(t),B1o=r(Z4e," \u2014 "),C$=n(Z4e,"A",{href:!0});var Nzr=s(C$);x1o=r(Nzr,"XLMWithLMHeadModel"),Nzr.forEach(t),k1o=r(Z4e," (XLM model)"),Z4e.forEach(t),R1o=i(j),Nu=n(j,"LI",{});var eEe=s(Nu);Loe=n(eEe,"STRONG",{});var qzr=s(Loe);S1o=r(qzr,"xlm-prophetnet"),qzr.forEach(t),P1o=r(eEe," \u2014 "),M$=n(eEe,"A",{href:!0});var Ozr=s(M$);$1o=r(Ozr,"XLMProphetNetForCausalLM"),Ozr.forEach(t),I1o=r(eEe," (XLMProphetNet model)"),eEe.forEach(t),j1o=i(j),qu=n(j,"LI",{});var oEe=s(qu);Boe=n(oEe,"STRONG",{});var Gzr=s(Boe);D1o=r(Gzr,"xlm-roberta"),Gzr.forEach(t),N1o=r(oEe," \u2014 "),E$=n(oEe,"A",{href:!0});var Xzr=s(E$);q1o=r(Xzr,"XLMRobertaForCausalLM"),Xzr.forEach(t),O1o=r(oEe," (XLM-RoBERTa model)"),oEe.forEach(t),G1o=i(j),Ou=n(j,"LI",{});var rEe=s(Ou);xoe=n(rEe,"STRONG",{});var Vzr=s(xoe);X1o=r(Vzr,"xlm-roberta-xl"),Vzr.forEach(t),V1o=r(rEe," \u2014 "),y$=n(rEe,"A",{href:!0});var zzr=s(y$);z1o=r(zzr,"XLMRobertaXLForCausalLM"),zzr.forEach(t),W1o=r(rEe," (XLM-RoBERTa-XL model)"),rEe.forEach(t),Q1o=i(j),Gu=n(j,"LI",{});var tEe=s(Gu);koe=n(tEe,"STRONG",{});var Wzr=s(koe);H1o=r(Wzr,"xlnet"),Wzr.forEach(t),U1o=r(tEe," \u2014 "),w$=n(tEe,"A",{href:!0});var Qzr=s(w$);J1o=r(Qzr,"XLNetLMHeadModel"),Qzr.forEach(t),Y1o=r(tEe," (XLNet model)"),tEe.forEach(t),j.forEach(t),K1o=i(Gt),Xu=n(Gt,"P",{});var aEe=s(Xu);Z1o=r(aEe,"The model is set in evaluation mode by default using "),Roe=n(aEe,"CODE",{});var Hzr=s(Roe);ebo=r(Hzr,"model.eval()"),Hzr.forEach(t),obo=r(aEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Soe=n(aEe,"CODE",{});var Uzr=s(Soe);rbo=r(Uzr,"model.train()"),Uzr.forEach(t),aEe.forEach(t),tbo=i(Gt),Poe=n(Gt,"P",{});var Jzr=s(Poe);abo=r(Jzr,"Examples:"),Jzr.forEach(t),nbo=i(Gt),m(YE.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),Oxe=i(c),sd=n(c,"H2",{class:!0});var JRe=s(sd);Vu=n(JRe,"A",{id:!0,class:!0,href:!0});var Yzr=s(Vu);$oe=n(Yzr,"SPAN",{});var Kzr=s($oe);m(KE.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),sbo=i(JRe),Ioe=n(JRe,"SPAN",{});var Zzr=s(Ioe);lbo=r(Zzr,"AutoModelForMaskedLM"),Zzr.forEach(t),JRe.forEach(t),Gxe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(ZE.$$.fragment,Ks),ibo=i(Ks),ld=n(Ks,"P",{});var Nz=s(ld);dbo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),joe=n(Nz,"CODE",{});var eWr=s(joe);cbo=r(eWr,"from_pretrained()"),eWr.forEach(t),fbo=r(Nz,"class method or the "),Doe=n(Nz,"CODE",{});var oWr=s(Doe);mbo=r(oWr,"from_config()"),oWr.forEach(t),gbo=r(Nz,`class
method.`),Nz.forEach(t),hbo=i(Ks),e3=n(Ks,"P",{});var YRe=s(e3);pbo=r(YRe,"This class cannot be instantiated directly using "),Noe=n(YRe,"CODE",{});var rWr=s(Noe);_bo=r(rWr,"__init__()"),rWr.forEach(t),ubo=r(YRe," (throws an error)."),YRe.forEach(t),bbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(o3.$$.fragment,Zs),vbo=i(Zs),qoe=n(Zs,"P",{});var tWr=s(qoe);Tbo=r(tWr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tWr.forEach(t),Fbo=i(Zs),id=n(Zs,"P",{});var qz=s(id);Cbo=r(qz,`Note:
Loading a model from its configuration file does `),Ooe=n(qz,"STRONG",{});var aWr=s(Ooe);Mbo=r(aWr,"not"),aWr.forEach(t),Ebo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(qz,"CODE",{});var nWr=s(Goe);ybo=r(nWr,"from_pretrained()"),nWr.forEach(t),wbo=r(qz,"to load the model weights."),qz.forEach(t),Abo=i(Zs),Xoe=n(Zs,"P",{});var sWr=s(Xoe);Lbo=r(sWr,"Examples:"),sWr.forEach(t),Bbo=i(Zs),m(r3.$$.fragment,Zs),Zs.forEach(t),xbo=i(Ks),Oe=n(Ks,"DIV",{class:!0});var Xt=s(Oe);m(t3.$$.fragment,Xt),kbo=i(Xt),Voe=n(Xt,"P",{});var lWr=s(Voe);Rbo=r(lWr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lWr.forEach(t),Sbo=i(Xt),Qa=n(Xt,"P",{});var a4=s(Qa);Pbo=r(a4,"The model class to instantiate is selected based on the "),zoe=n(a4,"CODE",{});var iWr=s(zoe);$bo=r(iWr,"model_type"),iWr.forEach(t),Ibo=r(a4,` property of the config object (either
passed as an argument or loaded from `),Woe=n(a4,"CODE",{});var dWr=s(Woe);jbo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),Dbo=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=n(a4,"CODE",{});var cWr=s(Qoe);Nbo=r(cWr,"pretrained_model_name_or_path"),cWr.forEach(t),qbo=r(a4,":"),a4.forEach(t),Obo=i(Xt),I=n(Xt,"UL",{});var D=s(I);zu=n(D,"LI",{});var nEe=s(zu);Hoe=n(nEe,"STRONG",{});var fWr=s(Hoe);Gbo=r(fWr,"albert"),fWr.forEach(t),Xbo=r(nEe," \u2014 "),A$=n(nEe,"A",{href:!0});var mWr=s(A$);Vbo=r(mWr,"AlbertForMaskedLM"),mWr.forEach(t),zbo=r(nEe," (ALBERT model)"),nEe.forEach(t),Wbo=i(D),Wu=n(D,"LI",{});var sEe=s(Wu);Uoe=n(sEe,"STRONG",{});var gWr=s(Uoe);Qbo=r(gWr,"bart"),gWr.forEach(t),Hbo=r(sEe," \u2014 "),L$=n(sEe,"A",{href:!0});var hWr=s(L$);Ubo=r(hWr,"BartForConditionalGeneration"),hWr.forEach(t),Jbo=r(sEe," (BART model)"),sEe.forEach(t),Ybo=i(D),Qu=n(D,"LI",{});var lEe=s(Qu);Joe=n(lEe,"STRONG",{});var pWr=s(Joe);Kbo=r(pWr,"bert"),pWr.forEach(t),Zbo=r(lEe," \u2014 "),B$=n(lEe,"A",{href:!0});var _Wr=s(B$);e2o=r(_Wr,"BertForMaskedLM"),_Wr.forEach(t),o2o=r(lEe," (BERT model)"),lEe.forEach(t),r2o=i(D),Hu=n(D,"LI",{});var iEe=s(Hu);Yoe=n(iEe,"STRONG",{});var uWr=s(Yoe);t2o=r(uWr,"big_bird"),uWr.forEach(t),a2o=r(iEe," \u2014 "),x$=n(iEe,"A",{href:!0});var bWr=s(x$);n2o=r(bWr,"BigBirdForMaskedLM"),bWr.forEach(t),s2o=r(iEe," (BigBird model)"),iEe.forEach(t),l2o=i(D),Uu=n(D,"LI",{});var dEe=s(Uu);Koe=n(dEe,"STRONG",{});var vWr=s(Koe);i2o=r(vWr,"camembert"),vWr.forEach(t),d2o=r(dEe," \u2014 "),k$=n(dEe,"A",{href:!0});var TWr=s(k$);c2o=r(TWr,"CamembertForMaskedLM"),TWr.forEach(t),f2o=r(dEe," (CamemBERT model)"),dEe.forEach(t),m2o=i(D),Ju=n(D,"LI",{});var cEe=s(Ju);Zoe=n(cEe,"STRONG",{});var FWr=s(Zoe);g2o=r(FWr,"convbert"),FWr.forEach(t),h2o=r(cEe," \u2014 "),R$=n(cEe,"A",{href:!0});var CWr=s(R$);p2o=r(CWr,"ConvBertForMaskedLM"),CWr.forEach(t),_2o=r(cEe," (ConvBERT model)"),cEe.forEach(t),u2o=i(D),Yu=n(D,"LI",{});var fEe=s(Yu);ere=n(fEe,"STRONG",{});var MWr=s(ere);b2o=r(MWr,"data2vec-text"),MWr.forEach(t),v2o=r(fEe," \u2014 "),S$=n(fEe,"A",{href:!0});var EWr=s(S$);T2o=r(EWr,"Data2VecTextForMaskedLM"),EWr.forEach(t),F2o=r(fEe," (Data2VecText model)"),fEe.forEach(t),C2o=i(D),Ku=n(D,"LI",{});var mEe=s(Ku);ore=n(mEe,"STRONG",{});var yWr=s(ore);M2o=r(yWr,"deberta"),yWr.forEach(t),E2o=r(mEe," \u2014 "),P$=n(mEe,"A",{href:!0});var wWr=s(P$);y2o=r(wWr,"DebertaForMaskedLM"),wWr.forEach(t),w2o=r(mEe," (DeBERTa model)"),mEe.forEach(t),A2o=i(D),Zu=n(D,"LI",{});var gEe=s(Zu);rre=n(gEe,"STRONG",{});var AWr=s(rre);L2o=r(AWr,"deberta-v2"),AWr.forEach(t),B2o=r(gEe," \u2014 "),$$=n(gEe,"A",{href:!0});var LWr=s($$);x2o=r(LWr,"DebertaV2ForMaskedLM"),LWr.forEach(t),k2o=r(gEe," (DeBERTa-v2 model)"),gEe.forEach(t),R2o=i(D),e0=n(D,"LI",{});var hEe=s(e0);tre=n(hEe,"STRONG",{});var BWr=s(tre);S2o=r(BWr,"distilbert"),BWr.forEach(t),P2o=r(hEe," \u2014 "),I$=n(hEe,"A",{href:!0});var xWr=s(I$);$2o=r(xWr,"DistilBertForMaskedLM"),xWr.forEach(t),I2o=r(hEe," (DistilBERT model)"),hEe.forEach(t),j2o=i(D),o0=n(D,"LI",{});var pEe=s(o0);are=n(pEe,"STRONG",{});var kWr=s(are);D2o=r(kWr,"electra"),kWr.forEach(t),N2o=r(pEe," \u2014 "),j$=n(pEe,"A",{href:!0});var RWr=s(j$);q2o=r(RWr,"ElectraForMaskedLM"),RWr.forEach(t),O2o=r(pEe," (ELECTRA model)"),pEe.forEach(t),G2o=i(D),r0=n(D,"LI",{});var _Ee=s(r0);nre=n(_Ee,"STRONG",{});var SWr=s(nre);X2o=r(SWr,"flaubert"),SWr.forEach(t),V2o=r(_Ee," \u2014 "),D$=n(_Ee,"A",{href:!0});var PWr=s(D$);z2o=r(PWr,"FlaubertWithLMHeadModel"),PWr.forEach(t),W2o=r(_Ee," (FlauBERT model)"),_Ee.forEach(t),Q2o=i(D),t0=n(D,"LI",{});var uEe=s(t0);sre=n(uEe,"STRONG",{});var $Wr=s(sre);H2o=r($Wr,"fnet"),$Wr.forEach(t),U2o=r(uEe," \u2014 "),N$=n(uEe,"A",{href:!0});var IWr=s(N$);J2o=r(IWr,"FNetForMaskedLM"),IWr.forEach(t),Y2o=r(uEe," (FNet model)"),uEe.forEach(t),K2o=i(D),a0=n(D,"LI",{});var bEe=s(a0);lre=n(bEe,"STRONG",{});var jWr=s(lre);Z2o=r(jWr,"funnel"),jWr.forEach(t),evo=r(bEe," \u2014 "),q$=n(bEe,"A",{href:!0});var DWr=s(q$);ovo=r(DWr,"FunnelForMaskedLM"),DWr.forEach(t),rvo=r(bEe," (Funnel Transformer model)"),bEe.forEach(t),tvo=i(D),n0=n(D,"LI",{});var vEe=s(n0);ire=n(vEe,"STRONG",{});var NWr=s(ire);avo=r(NWr,"ibert"),NWr.forEach(t),nvo=r(vEe," \u2014 "),O$=n(vEe,"A",{href:!0});var qWr=s(O$);svo=r(qWr,"IBertForMaskedLM"),qWr.forEach(t),lvo=r(vEe," (I-BERT model)"),vEe.forEach(t),ivo=i(D),s0=n(D,"LI",{});var TEe=s(s0);dre=n(TEe,"STRONG",{});var OWr=s(dre);dvo=r(OWr,"layoutlm"),OWr.forEach(t),cvo=r(TEe," \u2014 "),G$=n(TEe,"A",{href:!0});var GWr=s(G$);fvo=r(GWr,"LayoutLMForMaskedLM"),GWr.forEach(t),mvo=r(TEe," (LayoutLM model)"),TEe.forEach(t),gvo=i(D),l0=n(D,"LI",{});var FEe=s(l0);cre=n(FEe,"STRONG",{});var XWr=s(cre);hvo=r(XWr,"longformer"),XWr.forEach(t),pvo=r(FEe," \u2014 "),X$=n(FEe,"A",{href:!0});var VWr=s(X$);_vo=r(VWr,"LongformerForMaskedLM"),VWr.forEach(t),uvo=r(FEe," (Longformer model)"),FEe.forEach(t),bvo=i(D),i0=n(D,"LI",{});var CEe=s(i0);fre=n(CEe,"STRONG",{});var zWr=s(fre);vvo=r(zWr,"mbart"),zWr.forEach(t),Tvo=r(CEe," \u2014 "),V$=n(CEe,"A",{href:!0});var WWr=s(V$);Fvo=r(WWr,"MBartForConditionalGeneration"),WWr.forEach(t),Cvo=r(CEe," (mBART model)"),CEe.forEach(t),Mvo=i(D),d0=n(D,"LI",{});var MEe=s(d0);mre=n(MEe,"STRONG",{});var QWr=s(mre);Evo=r(QWr,"megatron-bert"),QWr.forEach(t),yvo=r(MEe," \u2014 "),z$=n(MEe,"A",{href:!0});var HWr=s(z$);wvo=r(HWr,"MegatronBertForMaskedLM"),HWr.forEach(t),Avo=r(MEe," (MegatronBert model)"),MEe.forEach(t),Lvo=i(D),c0=n(D,"LI",{});var EEe=s(c0);gre=n(EEe,"STRONG",{});var UWr=s(gre);Bvo=r(UWr,"mobilebert"),UWr.forEach(t),xvo=r(EEe," \u2014 "),W$=n(EEe,"A",{href:!0});var JWr=s(W$);kvo=r(JWr,"MobileBertForMaskedLM"),JWr.forEach(t),Rvo=r(EEe," (MobileBERT model)"),EEe.forEach(t),Svo=i(D),f0=n(D,"LI",{});var yEe=s(f0);hre=n(yEe,"STRONG",{});var YWr=s(hre);Pvo=r(YWr,"mpnet"),YWr.forEach(t),$vo=r(yEe," \u2014 "),Q$=n(yEe,"A",{href:!0});var KWr=s(Q$);Ivo=r(KWr,"MPNetForMaskedLM"),KWr.forEach(t),jvo=r(yEe," (MPNet model)"),yEe.forEach(t),Dvo=i(D),m0=n(D,"LI",{});var wEe=s(m0);pre=n(wEe,"STRONG",{});var ZWr=s(pre);Nvo=r(ZWr,"nystromformer"),ZWr.forEach(t),qvo=r(wEe," \u2014 "),H$=n(wEe,"A",{href:!0});var eQr=s(H$);Ovo=r(eQr,"NystromformerForMaskedLM"),eQr.forEach(t),Gvo=r(wEe," (Nystromformer model)"),wEe.forEach(t),Xvo=i(D),g0=n(D,"LI",{});var AEe=s(g0);_re=n(AEe,"STRONG",{});var oQr=s(_re);Vvo=r(oQr,"perceiver"),oQr.forEach(t),zvo=r(AEe," \u2014 "),U$=n(AEe,"A",{href:!0});var rQr=s(U$);Wvo=r(rQr,"PerceiverForMaskedLM"),rQr.forEach(t),Qvo=r(AEe," (Perceiver model)"),AEe.forEach(t),Hvo=i(D),h0=n(D,"LI",{});var LEe=s(h0);ure=n(LEe,"STRONG",{});var tQr=s(ure);Uvo=r(tQr,"qdqbert"),tQr.forEach(t),Jvo=r(LEe," \u2014 "),J$=n(LEe,"A",{href:!0});var aQr=s(J$);Yvo=r(aQr,"QDQBertForMaskedLM"),aQr.forEach(t),Kvo=r(LEe," (QDQBert model)"),LEe.forEach(t),Zvo=i(D),p0=n(D,"LI",{});var BEe=s(p0);bre=n(BEe,"STRONG",{});var nQr=s(bre);e6o=r(nQr,"reformer"),nQr.forEach(t),o6o=r(BEe," \u2014 "),Y$=n(BEe,"A",{href:!0});var sQr=s(Y$);r6o=r(sQr,"ReformerForMaskedLM"),sQr.forEach(t),t6o=r(BEe," (Reformer model)"),BEe.forEach(t),a6o=i(D),_0=n(D,"LI",{});var xEe=s(_0);vre=n(xEe,"STRONG",{});var lQr=s(vre);n6o=r(lQr,"rembert"),lQr.forEach(t),s6o=r(xEe," \u2014 "),K$=n(xEe,"A",{href:!0});var iQr=s(K$);l6o=r(iQr,"RemBertForMaskedLM"),iQr.forEach(t),i6o=r(xEe," (RemBERT model)"),xEe.forEach(t),d6o=i(D),u0=n(D,"LI",{});var kEe=s(u0);Tre=n(kEe,"STRONG",{});var dQr=s(Tre);c6o=r(dQr,"roberta"),dQr.forEach(t),f6o=r(kEe," \u2014 "),Z$=n(kEe,"A",{href:!0});var cQr=s(Z$);m6o=r(cQr,"RobertaForMaskedLM"),cQr.forEach(t),g6o=r(kEe," (RoBERTa model)"),kEe.forEach(t),h6o=i(D),b0=n(D,"LI",{});var REe=s(b0);Fre=n(REe,"STRONG",{});var fQr=s(Fre);p6o=r(fQr,"roformer"),fQr.forEach(t),_6o=r(REe," \u2014 "),eI=n(REe,"A",{href:!0});var mQr=s(eI);u6o=r(mQr,"RoFormerForMaskedLM"),mQr.forEach(t),b6o=r(REe," (RoFormer model)"),REe.forEach(t),v6o=i(D),v0=n(D,"LI",{});var SEe=s(v0);Cre=n(SEe,"STRONG",{});var gQr=s(Cre);T6o=r(gQr,"squeezebert"),gQr.forEach(t),F6o=r(SEe," \u2014 "),oI=n(SEe,"A",{href:!0});var hQr=s(oI);C6o=r(hQr,"SqueezeBertForMaskedLM"),hQr.forEach(t),M6o=r(SEe," (SqueezeBERT model)"),SEe.forEach(t),E6o=i(D),T0=n(D,"LI",{});var PEe=s(T0);Mre=n(PEe,"STRONG",{});var pQr=s(Mre);y6o=r(pQr,"tapas"),pQr.forEach(t),w6o=r(PEe," \u2014 "),rI=n(PEe,"A",{href:!0});var _Qr=s(rI);A6o=r(_Qr,"TapasForMaskedLM"),_Qr.forEach(t),L6o=r(PEe," (TAPAS model)"),PEe.forEach(t),B6o=i(D),F0=n(D,"LI",{});var $Ee=s(F0);Ere=n($Ee,"STRONG",{});var uQr=s(Ere);x6o=r(uQr,"wav2vec2"),uQr.forEach(t),k6o=r($Ee," \u2014 "),yre=n($Ee,"CODE",{});var bQr=s(yre);R6o=r(bQr,"Wav2Vec2ForMaskedLM"),bQr.forEach(t),S6o=r($Ee,"(Wav2Vec2 model)"),$Ee.forEach(t),P6o=i(D),C0=n(D,"LI",{});var IEe=s(C0);wre=n(IEe,"STRONG",{});var vQr=s(wre);$6o=r(vQr,"xlm"),vQr.forEach(t),I6o=r(IEe," \u2014 "),tI=n(IEe,"A",{href:!0});var TQr=s(tI);j6o=r(TQr,"XLMWithLMHeadModel"),TQr.forEach(t),D6o=r(IEe," (XLM model)"),IEe.forEach(t),N6o=i(D),M0=n(D,"LI",{});var jEe=s(M0);Are=n(jEe,"STRONG",{});var FQr=s(Are);q6o=r(FQr,"xlm-roberta"),FQr.forEach(t),O6o=r(jEe," \u2014 "),aI=n(jEe,"A",{href:!0});var CQr=s(aI);G6o=r(CQr,"XLMRobertaForMaskedLM"),CQr.forEach(t),X6o=r(jEe," (XLM-RoBERTa model)"),jEe.forEach(t),V6o=i(D),E0=n(D,"LI",{});var DEe=s(E0);Lre=n(DEe,"STRONG",{});var MQr=s(Lre);z6o=r(MQr,"xlm-roberta-xl"),MQr.forEach(t),W6o=r(DEe," \u2014 "),nI=n(DEe,"A",{href:!0});var EQr=s(nI);Q6o=r(EQr,"XLMRobertaXLForMaskedLM"),EQr.forEach(t),H6o=r(DEe," (XLM-RoBERTa-XL model)"),DEe.forEach(t),U6o=i(D),y0=n(D,"LI",{});var NEe=s(y0);Bre=n(NEe,"STRONG",{});var yQr=s(Bre);J6o=r(yQr,"yoso"),yQr.forEach(t),Y6o=r(NEe," \u2014 "),sI=n(NEe,"A",{href:!0});var wQr=s(sI);K6o=r(wQr,"YosoForMaskedLM"),wQr.forEach(t),Z6o=r(NEe," (YOSO model)"),NEe.forEach(t),D.forEach(t),eTo=i(Xt),w0=n(Xt,"P",{});var qEe=s(w0);oTo=r(qEe,"The model is set in evaluation mode by default using "),xre=n(qEe,"CODE",{});var AQr=s(xre);rTo=r(AQr,"model.eval()"),AQr.forEach(t),tTo=r(qEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kre=n(qEe,"CODE",{});var LQr=s(kre);aTo=r(LQr,"model.train()"),LQr.forEach(t),qEe.forEach(t),nTo=i(Xt),Rre=n(Xt,"P",{});var BQr=s(Rre);sTo=r(BQr,"Examples:"),BQr.forEach(t),lTo=i(Xt),m(a3.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Xxe=i(c),dd=n(c,"H2",{class:!0});var KRe=s(dd);A0=n(KRe,"A",{id:!0,class:!0,href:!0});var xQr=s(A0);Sre=n(xQr,"SPAN",{});var kQr=s(Sre);m(n3.$$.fragment,kQr),kQr.forEach(t),xQr.forEach(t),iTo=i(KRe),Pre=n(KRe,"SPAN",{});var RQr=s(Pre);dTo=r(RQr,"AutoModelForSeq2SeqLM"),RQr.forEach(t),KRe.forEach(t),Vxe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(s3.$$.fragment,el),cTo=i(el),cd=n(el,"P",{});var Oz=s(cd);fTo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$re=n(Oz,"CODE",{});var SQr=s($re);mTo=r(SQr,"from_pretrained()"),SQr.forEach(t),gTo=r(Oz,"class method or the "),Ire=n(Oz,"CODE",{});var PQr=s(Ire);hTo=r(PQr,"from_config()"),PQr.forEach(t),pTo=r(Oz,`class
method.`),Oz.forEach(t),_To=i(el),l3=n(el,"P",{});var ZRe=s(l3);uTo=r(ZRe,"This class cannot be instantiated directly using "),jre=n(ZRe,"CODE",{});var $Qr=s(jre);bTo=r($Qr,"__init__()"),$Qr.forEach(t),vTo=r(ZRe," (throws an error)."),ZRe.forEach(t),TTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(i3.$$.fragment,ol),FTo=i(ol),Dre=n(ol,"P",{});var IQr=s(Dre);CTo=r(IQr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IQr.forEach(t),MTo=i(ol),fd=n(ol,"P",{});var Gz=s(fd);ETo=r(Gz,`Note:
Loading a model from its configuration file does `),Nre=n(Gz,"STRONG",{});var jQr=s(Nre);yTo=r(jQr,"not"),jQr.forEach(t),wTo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Gz,"CODE",{});var DQr=s(qre);ATo=r(DQr,"from_pretrained()"),DQr.forEach(t),LTo=r(Gz,"to load the model weights."),Gz.forEach(t),BTo=i(ol),Ore=n(ol,"P",{});var NQr=s(Ore);xTo=r(NQr,"Examples:"),NQr.forEach(t),kTo=i(ol),m(d3.$$.fragment,ol),ol.forEach(t),RTo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(c3.$$.fragment,Vt),STo=i(Vt),Gre=n(Vt,"P",{});var qQr=s(Gre);PTo=r(qQr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qQr.forEach(t),$To=i(Vt),Ha=n(Vt,"P",{});var n4=s(Ha);ITo=r(n4,"The model class to instantiate is selected based on the "),Xre=n(n4,"CODE",{});var OQr=s(Xre);jTo=r(OQr,"model_type"),OQr.forEach(t),DTo=r(n4,` property of the config object (either
passed as an argument or loaded from `),Vre=n(n4,"CODE",{});var GQr=s(Vre);NTo=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),qTo=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zre=n(n4,"CODE",{});var XQr=s(zre);OTo=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),GTo=r(n4,":"),n4.forEach(t),XTo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);L0=n(ie,"LI",{});var OEe=s(L0);Wre=n(OEe,"STRONG",{});var VQr=s(Wre);VTo=r(VQr,"bart"),VQr.forEach(t),zTo=r(OEe," \u2014 "),lI=n(OEe,"A",{href:!0});var zQr=s(lI);WTo=r(zQr,"BartForConditionalGeneration"),zQr.forEach(t),QTo=r(OEe," (BART model)"),OEe.forEach(t),HTo=i(ie),B0=n(ie,"LI",{});var GEe=s(B0);Qre=n(GEe,"STRONG",{});var WQr=s(Qre);UTo=r(WQr,"bigbird_pegasus"),WQr.forEach(t),JTo=r(GEe," \u2014 "),iI=n(GEe,"A",{href:!0});var QQr=s(iI);YTo=r(QQr,"BigBirdPegasusForConditionalGeneration"),QQr.forEach(t),KTo=r(GEe," (BigBirdPegasus model)"),GEe.forEach(t),ZTo=i(ie),x0=n(ie,"LI",{});var XEe=s(x0);Hre=n(XEe,"STRONG",{});var HQr=s(Hre);e7o=r(HQr,"blenderbot"),HQr.forEach(t),o7o=r(XEe," \u2014 "),dI=n(XEe,"A",{href:!0});var UQr=s(dI);r7o=r(UQr,"BlenderbotForConditionalGeneration"),UQr.forEach(t),t7o=r(XEe," (Blenderbot model)"),XEe.forEach(t),a7o=i(ie),k0=n(ie,"LI",{});var VEe=s(k0);Ure=n(VEe,"STRONG",{});var JQr=s(Ure);n7o=r(JQr,"blenderbot-small"),JQr.forEach(t),s7o=r(VEe," \u2014 "),cI=n(VEe,"A",{href:!0});var YQr=s(cI);l7o=r(YQr,"BlenderbotSmallForConditionalGeneration"),YQr.forEach(t),i7o=r(VEe," (BlenderbotSmall model)"),VEe.forEach(t),d7o=i(ie),R0=n(ie,"LI",{});var zEe=s(R0);Jre=n(zEe,"STRONG",{});var KQr=s(Jre);c7o=r(KQr,"encoder-decoder"),KQr.forEach(t),f7o=r(zEe," \u2014 "),fI=n(zEe,"A",{href:!0});var ZQr=s(fI);m7o=r(ZQr,"EncoderDecoderModel"),ZQr.forEach(t),g7o=r(zEe," (Encoder decoder model)"),zEe.forEach(t),h7o=i(ie),S0=n(ie,"LI",{});var WEe=s(S0);Yre=n(WEe,"STRONG",{});var eHr=s(Yre);p7o=r(eHr,"fsmt"),eHr.forEach(t),_7o=r(WEe," \u2014 "),mI=n(WEe,"A",{href:!0});var oHr=s(mI);u7o=r(oHr,"FSMTForConditionalGeneration"),oHr.forEach(t),b7o=r(WEe," (FairSeq Machine-Translation model)"),WEe.forEach(t),v7o=i(ie),P0=n(ie,"LI",{});var QEe=s(P0);Kre=n(QEe,"STRONG",{});var rHr=s(Kre);T7o=r(rHr,"led"),rHr.forEach(t),F7o=r(QEe," \u2014 "),gI=n(QEe,"A",{href:!0});var tHr=s(gI);C7o=r(tHr,"LEDForConditionalGeneration"),tHr.forEach(t),M7o=r(QEe," (LED model)"),QEe.forEach(t),E7o=i(ie),$0=n(ie,"LI",{});var HEe=s($0);Zre=n(HEe,"STRONG",{});var aHr=s(Zre);y7o=r(aHr,"m2m_100"),aHr.forEach(t),w7o=r(HEe," \u2014 "),hI=n(HEe,"A",{href:!0});var nHr=s(hI);A7o=r(nHr,"M2M100ForConditionalGeneration"),nHr.forEach(t),L7o=r(HEe," (M2M100 model)"),HEe.forEach(t),B7o=i(ie),I0=n(ie,"LI",{});var UEe=s(I0);ete=n(UEe,"STRONG",{});var sHr=s(ete);x7o=r(sHr,"marian"),sHr.forEach(t),k7o=r(UEe," \u2014 "),pI=n(UEe,"A",{href:!0});var lHr=s(pI);R7o=r(lHr,"MarianMTModel"),lHr.forEach(t),S7o=r(UEe," (Marian model)"),UEe.forEach(t),P7o=i(ie),j0=n(ie,"LI",{});var JEe=s(j0);ote=n(JEe,"STRONG",{});var iHr=s(ote);$7o=r(iHr,"mbart"),iHr.forEach(t),I7o=r(JEe," \u2014 "),_I=n(JEe,"A",{href:!0});var dHr=s(_I);j7o=r(dHr,"MBartForConditionalGeneration"),dHr.forEach(t),D7o=r(JEe," (mBART model)"),JEe.forEach(t),N7o=i(ie),D0=n(ie,"LI",{});var YEe=s(D0);rte=n(YEe,"STRONG",{});var cHr=s(rte);q7o=r(cHr,"mt5"),cHr.forEach(t),O7o=r(YEe," \u2014 "),uI=n(YEe,"A",{href:!0});var fHr=s(uI);G7o=r(fHr,"MT5ForConditionalGeneration"),fHr.forEach(t),X7o=r(YEe," (mT5 model)"),YEe.forEach(t),V7o=i(ie),N0=n(ie,"LI",{});var KEe=s(N0);tte=n(KEe,"STRONG",{});var mHr=s(tte);z7o=r(mHr,"pegasus"),mHr.forEach(t),W7o=r(KEe," \u2014 "),bI=n(KEe,"A",{href:!0});var gHr=s(bI);Q7o=r(gHr,"PegasusForConditionalGeneration"),gHr.forEach(t),H7o=r(KEe," (Pegasus model)"),KEe.forEach(t),U7o=i(ie),q0=n(ie,"LI",{});var ZEe=s(q0);ate=n(ZEe,"STRONG",{});var hHr=s(ate);J7o=r(hHr,"plbart"),hHr.forEach(t),Y7o=r(ZEe," \u2014 "),vI=n(ZEe,"A",{href:!0});var pHr=s(vI);K7o=r(pHr,"PLBartForConditionalGeneration"),pHr.forEach(t),Z7o=r(ZEe," (PLBart model)"),ZEe.forEach(t),eFo=i(ie),O0=n(ie,"LI",{});var e3e=s(O0);nte=n(e3e,"STRONG",{});var _Hr=s(nte);oFo=r(_Hr,"prophetnet"),_Hr.forEach(t),rFo=r(e3e," \u2014 "),TI=n(e3e,"A",{href:!0});var uHr=s(TI);tFo=r(uHr,"ProphetNetForConditionalGeneration"),uHr.forEach(t),aFo=r(e3e," (ProphetNet model)"),e3e.forEach(t),nFo=i(ie),G0=n(ie,"LI",{});var o3e=s(G0);ste=n(o3e,"STRONG",{});var bHr=s(ste);sFo=r(bHr,"t5"),bHr.forEach(t),lFo=r(o3e," \u2014 "),FI=n(o3e,"A",{href:!0});var vHr=s(FI);iFo=r(vHr,"T5ForConditionalGeneration"),vHr.forEach(t),dFo=r(o3e," (T5 model)"),o3e.forEach(t),cFo=i(ie),X0=n(ie,"LI",{});var r3e=s(X0);lte=n(r3e,"STRONG",{});var THr=s(lte);fFo=r(THr,"xlm-prophetnet"),THr.forEach(t),mFo=r(r3e," \u2014 "),CI=n(r3e,"A",{href:!0});var FHr=s(CI);gFo=r(FHr,"XLMProphetNetForConditionalGeneration"),FHr.forEach(t),hFo=r(r3e," (XLMProphetNet model)"),r3e.forEach(t),ie.forEach(t),pFo=i(Vt),V0=n(Vt,"P",{});var t3e=s(V0);_Fo=r(t3e,"The model is set in evaluation mode by default using "),ite=n(t3e,"CODE",{});var CHr=s(ite);uFo=r(CHr,"model.eval()"),CHr.forEach(t),bFo=r(t3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=n(t3e,"CODE",{});var MHr=s(dte);vFo=r(MHr,"model.train()"),MHr.forEach(t),t3e.forEach(t),TFo=i(Vt),cte=n(Vt,"P",{});var EHr=s(cte);FFo=r(EHr,"Examples:"),EHr.forEach(t),CFo=i(Vt),m(f3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),zxe=i(c),md=n(c,"H2",{class:!0});var eSe=s(md);z0=n(eSe,"A",{id:!0,class:!0,href:!0});var yHr=s(z0);fte=n(yHr,"SPAN",{});var wHr=s(fte);m(m3.$$.fragment,wHr),wHr.forEach(t),yHr.forEach(t),MFo=i(eSe),mte=n(eSe,"SPAN",{});var AHr=s(mte);EFo=r(AHr,"AutoModelForSequenceClassification"),AHr.forEach(t),eSe.forEach(t),Wxe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(g3.$$.fragment,rl),yFo=i(rl),gd=n(rl,"P",{});var Xz=s(gd);wFo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gte=n(Xz,"CODE",{});var LHr=s(gte);AFo=r(LHr,"from_pretrained()"),LHr.forEach(t),LFo=r(Xz,"class method or the "),hte=n(Xz,"CODE",{});var BHr=s(hte);BFo=r(BHr,"from_config()"),BHr.forEach(t),xFo=r(Xz,`class
method.`),Xz.forEach(t),kFo=i(rl),h3=n(rl,"P",{});var oSe=s(h3);RFo=r(oSe,"This class cannot be instantiated directly using "),pte=n(oSe,"CODE",{});var xHr=s(pte);SFo=r(xHr,"__init__()"),xHr.forEach(t),PFo=r(oSe," (throws an error)."),oSe.forEach(t),$Fo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(p3.$$.fragment,tl),IFo=i(tl),_te=n(tl,"P",{});var kHr=s(_te);jFo=r(kHr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kHr.forEach(t),DFo=i(tl),hd=n(tl,"P",{});var Vz=s(hd);NFo=r(Vz,`Note:
Loading a model from its configuration file does `),ute=n(Vz,"STRONG",{});var RHr=s(ute);qFo=r(RHr,"not"),RHr.forEach(t),OFo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=n(Vz,"CODE",{});var SHr=s(bte);GFo=r(SHr,"from_pretrained()"),SHr.forEach(t),XFo=r(Vz,"to load the model weights."),Vz.forEach(t),VFo=i(tl),vte=n(tl,"P",{});var PHr=s(vte);zFo=r(PHr,"Examples:"),PHr.forEach(t),WFo=i(tl),m(_3.$$.fragment,tl),tl.forEach(t),QFo=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(u3.$$.fragment,zt),HFo=i(zt),Tte=n(zt,"P",{});var $Hr=s(Tte);UFo=r($Hr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Hr.forEach(t),JFo=i(zt),Ua=n(zt,"P",{});var s4=s(Ua);YFo=r(s4,"The model class to instantiate is selected based on the "),Fte=n(s4,"CODE",{});var IHr=s(Fte);KFo=r(IHr,"model_type"),IHr.forEach(t),ZFo=r(s4,` property of the config object (either
passed as an argument or loaded from `),Cte=n(s4,"CODE",{});var jHr=s(Cte);eCo=r(jHr,"pretrained_model_name_or_path"),jHr.forEach(t),oCo=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=n(s4,"CODE",{});var DHr=s(Mte);rCo=r(DHr,"pretrained_model_name_or_path"),DHr.forEach(t),tCo=r(s4,":"),s4.forEach(t),aCo=i(zt),A=n(zt,"UL",{});var L=s(A);W0=n(L,"LI",{});var a3e=s(W0);Ete=n(a3e,"STRONG",{});var NHr=s(Ete);nCo=r(NHr,"albert"),NHr.forEach(t),sCo=r(a3e," \u2014 "),MI=n(a3e,"A",{href:!0});var qHr=s(MI);lCo=r(qHr,"AlbertForSequenceClassification"),qHr.forEach(t),iCo=r(a3e," (ALBERT model)"),a3e.forEach(t),dCo=i(L),Q0=n(L,"LI",{});var n3e=s(Q0);yte=n(n3e,"STRONG",{});var OHr=s(yte);cCo=r(OHr,"bart"),OHr.forEach(t),fCo=r(n3e," \u2014 "),EI=n(n3e,"A",{href:!0});var GHr=s(EI);mCo=r(GHr,"BartForSequenceClassification"),GHr.forEach(t),gCo=r(n3e," (BART model)"),n3e.forEach(t),hCo=i(L),H0=n(L,"LI",{});var s3e=s(H0);wte=n(s3e,"STRONG",{});var XHr=s(wte);pCo=r(XHr,"bert"),XHr.forEach(t),_Co=r(s3e," \u2014 "),yI=n(s3e,"A",{href:!0});var VHr=s(yI);uCo=r(VHr,"BertForSequenceClassification"),VHr.forEach(t),bCo=r(s3e," (BERT model)"),s3e.forEach(t),vCo=i(L),U0=n(L,"LI",{});var l3e=s(U0);Ate=n(l3e,"STRONG",{});var zHr=s(Ate);TCo=r(zHr,"big_bird"),zHr.forEach(t),FCo=r(l3e," \u2014 "),wI=n(l3e,"A",{href:!0});var WHr=s(wI);CCo=r(WHr,"BigBirdForSequenceClassification"),WHr.forEach(t),MCo=r(l3e," (BigBird model)"),l3e.forEach(t),ECo=i(L),J0=n(L,"LI",{});var i3e=s(J0);Lte=n(i3e,"STRONG",{});var QHr=s(Lte);yCo=r(QHr,"bigbird_pegasus"),QHr.forEach(t),wCo=r(i3e," \u2014 "),AI=n(i3e,"A",{href:!0});var HHr=s(AI);ACo=r(HHr,"BigBirdPegasusForSequenceClassification"),HHr.forEach(t),LCo=r(i3e," (BigBirdPegasus model)"),i3e.forEach(t),BCo=i(L),Y0=n(L,"LI",{});var d3e=s(Y0);Bte=n(d3e,"STRONG",{});var UHr=s(Bte);xCo=r(UHr,"camembert"),UHr.forEach(t),kCo=r(d3e," \u2014 "),LI=n(d3e,"A",{href:!0});var JHr=s(LI);RCo=r(JHr,"CamembertForSequenceClassification"),JHr.forEach(t),SCo=r(d3e," (CamemBERT model)"),d3e.forEach(t),PCo=i(L),K0=n(L,"LI",{});var c3e=s(K0);xte=n(c3e,"STRONG",{});var YHr=s(xte);$Co=r(YHr,"canine"),YHr.forEach(t),ICo=r(c3e," \u2014 "),BI=n(c3e,"A",{href:!0});var KHr=s(BI);jCo=r(KHr,"CanineForSequenceClassification"),KHr.forEach(t),DCo=r(c3e," (Canine model)"),c3e.forEach(t),NCo=i(L),Z0=n(L,"LI",{});var f3e=s(Z0);kte=n(f3e,"STRONG",{});var ZHr=s(kte);qCo=r(ZHr,"convbert"),ZHr.forEach(t),OCo=r(f3e," \u2014 "),xI=n(f3e,"A",{href:!0});var eUr=s(xI);GCo=r(eUr,"ConvBertForSequenceClassification"),eUr.forEach(t),XCo=r(f3e," (ConvBERT model)"),f3e.forEach(t),VCo=i(L),e1=n(L,"LI",{});var m3e=s(e1);Rte=n(m3e,"STRONG",{});var oUr=s(Rte);zCo=r(oUr,"ctrl"),oUr.forEach(t),WCo=r(m3e," \u2014 "),kI=n(m3e,"A",{href:!0});var rUr=s(kI);QCo=r(rUr,"CTRLForSequenceClassification"),rUr.forEach(t),HCo=r(m3e," (CTRL model)"),m3e.forEach(t),UCo=i(L),o1=n(L,"LI",{});var g3e=s(o1);Ste=n(g3e,"STRONG",{});var tUr=s(Ste);JCo=r(tUr,"data2vec-text"),tUr.forEach(t),YCo=r(g3e," \u2014 "),RI=n(g3e,"A",{href:!0});var aUr=s(RI);KCo=r(aUr,"Data2VecTextForSequenceClassification"),aUr.forEach(t),ZCo=r(g3e," (Data2VecText model)"),g3e.forEach(t),eMo=i(L),r1=n(L,"LI",{});var h3e=s(r1);Pte=n(h3e,"STRONG",{});var nUr=s(Pte);oMo=r(nUr,"deberta"),nUr.forEach(t),rMo=r(h3e," \u2014 "),SI=n(h3e,"A",{href:!0});var sUr=s(SI);tMo=r(sUr,"DebertaForSequenceClassification"),sUr.forEach(t),aMo=r(h3e," (DeBERTa model)"),h3e.forEach(t),nMo=i(L),t1=n(L,"LI",{});var p3e=s(t1);$te=n(p3e,"STRONG",{});var lUr=s($te);sMo=r(lUr,"deberta-v2"),lUr.forEach(t),lMo=r(p3e," \u2014 "),PI=n(p3e,"A",{href:!0});var iUr=s(PI);iMo=r(iUr,"DebertaV2ForSequenceClassification"),iUr.forEach(t),dMo=r(p3e," (DeBERTa-v2 model)"),p3e.forEach(t),cMo=i(L),a1=n(L,"LI",{});var _3e=s(a1);Ite=n(_3e,"STRONG",{});var dUr=s(Ite);fMo=r(dUr,"distilbert"),dUr.forEach(t),mMo=r(_3e," \u2014 "),$I=n(_3e,"A",{href:!0});var cUr=s($I);gMo=r(cUr,"DistilBertForSequenceClassification"),cUr.forEach(t),hMo=r(_3e," (DistilBERT model)"),_3e.forEach(t),pMo=i(L),n1=n(L,"LI",{});var u3e=s(n1);jte=n(u3e,"STRONG",{});var fUr=s(jte);_Mo=r(fUr,"electra"),fUr.forEach(t),uMo=r(u3e," \u2014 "),II=n(u3e,"A",{href:!0});var mUr=s(II);bMo=r(mUr,"ElectraForSequenceClassification"),mUr.forEach(t),vMo=r(u3e," (ELECTRA model)"),u3e.forEach(t),TMo=i(L),s1=n(L,"LI",{});var b3e=s(s1);Dte=n(b3e,"STRONG",{});var gUr=s(Dte);FMo=r(gUr,"flaubert"),gUr.forEach(t),CMo=r(b3e," \u2014 "),jI=n(b3e,"A",{href:!0});var hUr=s(jI);MMo=r(hUr,"FlaubertForSequenceClassification"),hUr.forEach(t),EMo=r(b3e," (FlauBERT model)"),b3e.forEach(t),yMo=i(L),l1=n(L,"LI",{});var v3e=s(l1);Nte=n(v3e,"STRONG",{});var pUr=s(Nte);wMo=r(pUr,"fnet"),pUr.forEach(t),AMo=r(v3e," \u2014 "),DI=n(v3e,"A",{href:!0});var _Ur=s(DI);LMo=r(_Ur,"FNetForSequenceClassification"),_Ur.forEach(t),BMo=r(v3e," (FNet model)"),v3e.forEach(t),xMo=i(L),i1=n(L,"LI",{});var T3e=s(i1);qte=n(T3e,"STRONG",{});var uUr=s(qte);kMo=r(uUr,"funnel"),uUr.forEach(t),RMo=r(T3e," \u2014 "),NI=n(T3e,"A",{href:!0});var bUr=s(NI);SMo=r(bUr,"FunnelForSequenceClassification"),bUr.forEach(t),PMo=r(T3e," (Funnel Transformer model)"),T3e.forEach(t),$Mo=i(L),d1=n(L,"LI",{});var F3e=s(d1);Ote=n(F3e,"STRONG",{});var vUr=s(Ote);IMo=r(vUr,"gpt2"),vUr.forEach(t),jMo=r(F3e," \u2014 "),qI=n(F3e,"A",{href:!0});var TUr=s(qI);DMo=r(TUr,"GPT2ForSequenceClassification"),TUr.forEach(t),NMo=r(F3e," (OpenAI GPT-2 model)"),F3e.forEach(t),qMo=i(L),c1=n(L,"LI",{});var C3e=s(c1);Gte=n(C3e,"STRONG",{});var FUr=s(Gte);OMo=r(FUr,"gpt_neo"),FUr.forEach(t),GMo=r(C3e," \u2014 "),OI=n(C3e,"A",{href:!0});var CUr=s(OI);XMo=r(CUr,"GPTNeoForSequenceClassification"),CUr.forEach(t),VMo=r(C3e," (GPT Neo model)"),C3e.forEach(t),zMo=i(L),f1=n(L,"LI",{});var M3e=s(f1);Xte=n(M3e,"STRONG",{});var MUr=s(Xte);WMo=r(MUr,"gptj"),MUr.forEach(t),QMo=r(M3e," \u2014 "),GI=n(M3e,"A",{href:!0});var EUr=s(GI);HMo=r(EUr,"GPTJForSequenceClassification"),EUr.forEach(t),UMo=r(M3e," (GPT-J model)"),M3e.forEach(t),JMo=i(L),m1=n(L,"LI",{});var E3e=s(m1);Vte=n(E3e,"STRONG",{});var yUr=s(Vte);YMo=r(yUr,"ibert"),yUr.forEach(t),KMo=r(E3e," \u2014 "),XI=n(E3e,"A",{href:!0});var wUr=s(XI);ZMo=r(wUr,"IBertForSequenceClassification"),wUr.forEach(t),e4o=r(E3e," (I-BERT model)"),E3e.forEach(t),o4o=i(L),g1=n(L,"LI",{});var y3e=s(g1);zte=n(y3e,"STRONG",{});var AUr=s(zte);r4o=r(AUr,"layoutlm"),AUr.forEach(t),t4o=r(y3e," \u2014 "),VI=n(y3e,"A",{href:!0});var LUr=s(VI);a4o=r(LUr,"LayoutLMForSequenceClassification"),LUr.forEach(t),n4o=r(y3e," (LayoutLM model)"),y3e.forEach(t),s4o=i(L),h1=n(L,"LI",{});var w3e=s(h1);Wte=n(w3e,"STRONG",{});var BUr=s(Wte);l4o=r(BUr,"layoutlmv2"),BUr.forEach(t),i4o=r(w3e," \u2014 "),zI=n(w3e,"A",{href:!0});var xUr=s(zI);d4o=r(xUr,"LayoutLMv2ForSequenceClassification"),xUr.forEach(t),c4o=r(w3e," (LayoutLMv2 model)"),w3e.forEach(t),f4o=i(L),p1=n(L,"LI",{});var A3e=s(p1);Qte=n(A3e,"STRONG",{});var kUr=s(Qte);m4o=r(kUr,"led"),kUr.forEach(t),g4o=r(A3e," \u2014 "),WI=n(A3e,"A",{href:!0});var RUr=s(WI);h4o=r(RUr,"LEDForSequenceClassification"),RUr.forEach(t),p4o=r(A3e," (LED model)"),A3e.forEach(t),_4o=i(L),_1=n(L,"LI",{});var L3e=s(_1);Hte=n(L3e,"STRONG",{});var SUr=s(Hte);u4o=r(SUr,"longformer"),SUr.forEach(t),b4o=r(L3e," \u2014 "),QI=n(L3e,"A",{href:!0});var PUr=s(QI);v4o=r(PUr,"LongformerForSequenceClassification"),PUr.forEach(t),T4o=r(L3e," (Longformer model)"),L3e.forEach(t),F4o=i(L),u1=n(L,"LI",{});var B3e=s(u1);Ute=n(B3e,"STRONG",{});var $Ur=s(Ute);C4o=r($Ur,"mbart"),$Ur.forEach(t),M4o=r(B3e," \u2014 "),HI=n(B3e,"A",{href:!0});var IUr=s(HI);E4o=r(IUr,"MBartForSequenceClassification"),IUr.forEach(t),y4o=r(B3e," (mBART model)"),B3e.forEach(t),w4o=i(L),b1=n(L,"LI",{});var x3e=s(b1);Jte=n(x3e,"STRONG",{});var jUr=s(Jte);A4o=r(jUr,"megatron-bert"),jUr.forEach(t),L4o=r(x3e," \u2014 "),UI=n(x3e,"A",{href:!0});var DUr=s(UI);B4o=r(DUr,"MegatronBertForSequenceClassification"),DUr.forEach(t),x4o=r(x3e," (MegatronBert model)"),x3e.forEach(t),k4o=i(L),v1=n(L,"LI",{});var k3e=s(v1);Yte=n(k3e,"STRONG",{});var NUr=s(Yte);R4o=r(NUr,"mobilebert"),NUr.forEach(t),S4o=r(k3e," \u2014 "),JI=n(k3e,"A",{href:!0});var qUr=s(JI);P4o=r(qUr,"MobileBertForSequenceClassification"),qUr.forEach(t),$4o=r(k3e," (MobileBERT model)"),k3e.forEach(t),I4o=i(L),T1=n(L,"LI",{});var R3e=s(T1);Kte=n(R3e,"STRONG",{});var OUr=s(Kte);j4o=r(OUr,"mpnet"),OUr.forEach(t),D4o=r(R3e," \u2014 "),YI=n(R3e,"A",{href:!0});var GUr=s(YI);N4o=r(GUr,"MPNetForSequenceClassification"),GUr.forEach(t),q4o=r(R3e," (MPNet model)"),R3e.forEach(t),O4o=i(L),F1=n(L,"LI",{});var S3e=s(F1);Zte=n(S3e,"STRONG",{});var XUr=s(Zte);G4o=r(XUr,"nystromformer"),XUr.forEach(t),X4o=r(S3e," \u2014 "),KI=n(S3e,"A",{href:!0});var VUr=s(KI);V4o=r(VUr,"NystromformerForSequenceClassification"),VUr.forEach(t),z4o=r(S3e," (Nystromformer model)"),S3e.forEach(t),W4o=i(L),C1=n(L,"LI",{});var P3e=s(C1);eae=n(P3e,"STRONG",{});var zUr=s(eae);Q4o=r(zUr,"openai-gpt"),zUr.forEach(t),H4o=r(P3e," \u2014 "),ZI=n(P3e,"A",{href:!0});var WUr=s(ZI);U4o=r(WUr,"OpenAIGPTForSequenceClassification"),WUr.forEach(t),J4o=r(P3e," (OpenAI GPT model)"),P3e.forEach(t),Y4o=i(L),M1=n(L,"LI",{});var $3e=s(M1);oae=n($3e,"STRONG",{});var QUr=s(oae);K4o=r(QUr,"perceiver"),QUr.forEach(t),Z4o=r($3e," \u2014 "),ej=n($3e,"A",{href:!0});var HUr=s(ej);eEo=r(HUr,"PerceiverForSequenceClassification"),HUr.forEach(t),oEo=r($3e," (Perceiver model)"),$3e.forEach(t),rEo=i(L),E1=n(L,"LI",{});var I3e=s(E1);rae=n(I3e,"STRONG",{});var UUr=s(rae);tEo=r(UUr,"plbart"),UUr.forEach(t),aEo=r(I3e," \u2014 "),oj=n(I3e,"A",{href:!0});var JUr=s(oj);nEo=r(JUr,"PLBartForSequenceClassification"),JUr.forEach(t),sEo=r(I3e," (PLBart model)"),I3e.forEach(t),lEo=i(L),y1=n(L,"LI",{});var j3e=s(y1);tae=n(j3e,"STRONG",{});var YUr=s(tae);iEo=r(YUr,"qdqbert"),YUr.forEach(t),dEo=r(j3e," \u2014 "),rj=n(j3e,"A",{href:!0});var KUr=s(rj);cEo=r(KUr,"QDQBertForSequenceClassification"),KUr.forEach(t),fEo=r(j3e," (QDQBert model)"),j3e.forEach(t),mEo=i(L),w1=n(L,"LI",{});var D3e=s(w1);aae=n(D3e,"STRONG",{});var ZUr=s(aae);gEo=r(ZUr,"reformer"),ZUr.forEach(t),hEo=r(D3e," \u2014 "),tj=n(D3e,"A",{href:!0});var eJr=s(tj);pEo=r(eJr,"ReformerForSequenceClassification"),eJr.forEach(t),_Eo=r(D3e," (Reformer model)"),D3e.forEach(t),uEo=i(L),A1=n(L,"LI",{});var N3e=s(A1);nae=n(N3e,"STRONG",{});var oJr=s(nae);bEo=r(oJr,"rembert"),oJr.forEach(t),vEo=r(N3e," \u2014 "),aj=n(N3e,"A",{href:!0});var rJr=s(aj);TEo=r(rJr,"RemBertForSequenceClassification"),rJr.forEach(t),FEo=r(N3e," (RemBERT model)"),N3e.forEach(t),CEo=i(L),L1=n(L,"LI",{});var q3e=s(L1);sae=n(q3e,"STRONG",{});var tJr=s(sae);MEo=r(tJr,"roberta"),tJr.forEach(t),EEo=r(q3e," \u2014 "),nj=n(q3e,"A",{href:!0});var aJr=s(nj);yEo=r(aJr,"RobertaForSequenceClassification"),aJr.forEach(t),wEo=r(q3e," (RoBERTa model)"),q3e.forEach(t),AEo=i(L),B1=n(L,"LI",{});var O3e=s(B1);lae=n(O3e,"STRONG",{});var nJr=s(lae);LEo=r(nJr,"roformer"),nJr.forEach(t),BEo=r(O3e," \u2014 "),sj=n(O3e,"A",{href:!0});var sJr=s(sj);xEo=r(sJr,"RoFormerForSequenceClassification"),sJr.forEach(t),kEo=r(O3e," (RoFormer model)"),O3e.forEach(t),REo=i(L),x1=n(L,"LI",{});var G3e=s(x1);iae=n(G3e,"STRONG",{});var lJr=s(iae);SEo=r(lJr,"squeezebert"),lJr.forEach(t),PEo=r(G3e," \u2014 "),lj=n(G3e,"A",{href:!0});var iJr=s(lj);$Eo=r(iJr,"SqueezeBertForSequenceClassification"),iJr.forEach(t),IEo=r(G3e," (SqueezeBERT model)"),G3e.forEach(t),jEo=i(L),k1=n(L,"LI",{});var X3e=s(k1);dae=n(X3e,"STRONG",{});var dJr=s(dae);DEo=r(dJr,"tapas"),dJr.forEach(t),NEo=r(X3e," \u2014 "),ij=n(X3e,"A",{href:!0});var cJr=s(ij);qEo=r(cJr,"TapasForSequenceClassification"),cJr.forEach(t),OEo=r(X3e," (TAPAS model)"),X3e.forEach(t),GEo=i(L),R1=n(L,"LI",{});var V3e=s(R1);cae=n(V3e,"STRONG",{});var fJr=s(cae);XEo=r(fJr,"transfo-xl"),fJr.forEach(t),VEo=r(V3e," \u2014 "),dj=n(V3e,"A",{href:!0});var mJr=s(dj);zEo=r(mJr,"TransfoXLForSequenceClassification"),mJr.forEach(t),WEo=r(V3e," (Transformer-XL model)"),V3e.forEach(t),QEo=i(L),S1=n(L,"LI",{});var z3e=s(S1);fae=n(z3e,"STRONG",{});var gJr=s(fae);HEo=r(gJr,"xlm"),gJr.forEach(t),UEo=r(z3e," \u2014 "),cj=n(z3e,"A",{href:!0});var hJr=s(cj);JEo=r(hJr,"XLMForSequenceClassification"),hJr.forEach(t),YEo=r(z3e," (XLM model)"),z3e.forEach(t),KEo=i(L),P1=n(L,"LI",{});var W3e=s(P1);mae=n(W3e,"STRONG",{});var pJr=s(mae);ZEo=r(pJr,"xlm-roberta"),pJr.forEach(t),e3o=r(W3e," \u2014 "),fj=n(W3e,"A",{href:!0});var _Jr=s(fj);o3o=r(_Jr,"XLMRobertaForSequenceClassification"),_Jr.forEach(t),r3o=r(W3e," (XLM-RoBERTa model)"),W3e.forEach(t),t3o=i(L),$1=n(L,"LI",{});var Q3e=s($1);gae=n(Q3e,"STRONG",{});var uJr=s(gae);a3o=r(uJr,"xlm-roberta-xl"),uJr.forEach(t),n3o=r(Q3e," \u2014 "),mj=n(Q3e,"A",{href:!0});var bJr=s(mj);s3o=r(bJr,"XLMRobertaXLForSequenceClassification"),bJr.forEach(t),l3o=r(Q3e," (XLM-RoBERTa-XL model)"),Q3e.forEach(t),i3o=i(L),I1=n(L,"LI",{});var H3e=s(I1);hae=n(H3e,"STRONG",{});var vJr=s(hae);d3o=r(vJr,"xlnet"),vJr.forEach(t),c3o=r(H3e," \u2014 "),gj=n(H3e,"A",{href:!0});var TJr=s(gj);f3o=r(TJr,"XLNetForSequenceClassification"),TJr.forEach(t),m3o=r(H3e," (XLNet model)"),H3e.forEach(t),g3o=i(L),j1=n(L,"LI",{});var U3e=s(j1);pae=n(U3e,"STRONG",{});var FJr=s(pae);h3o=r(FJr,"yoso"),FJr.forEach(t),p3o=r(U3e," \u2014 "),hj=n(U3e,"A",{href:!0});var CJr=s(hj);_3o=r(CJr,"YosoForSequenceClassification"),CJr.forEach(t),u3o=r(U3e," (YOSO model)"),U3e.forEach(t),L.forEach(t),b3o=i(zt),D1=n(zt,"P",{});var J3e=s(D1);v3o=r(J3e,"The model is set in evaluation mode by default using "),_ae=n(J3e,"CODE",{});var MJr=s(_ae);T3o=r(MJr,"model.eval()"),MJr.forEach(t),F3o=r(J3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uae=n(J3e,"CODE",{});var EJr=s(uae);C3o=r(EJr,"model.train()"),EJr.forEach(t),J3e.forEach(t),M3o=i(zt),bae=n(zt,"P",{});var yJr=s(bae);E3o=r(yJr,"Examples:"),yJr.forEach(t),y3o=i(zt),m(b3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Qxe=i(c),pd=n(c,"H2",{class:!0});var rSe=s(pd);N1=n(rSe,"A",{id:!0,class:!0,href:!0});var wJr=s(N1);vae=n(wJr,"SPAN",{});var AJr=s(vae);m(v3.$$.fragment,AJr),AJr.forEach(t),wJr.forEach(t),w3o=i(rSe),Tae=n(rSe,"SPAN",{});var LJr=s(Tae);A3o=r(LJr,"AutoModelForMultipleChoice"),LJr.forEach(t),rSe.forEach(t),Hxe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(T3.$$.fragment,al),L3o=i(al),_d=n(al,"P",{});var zz=s(_d);B3o=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fae=n(zz,"CODE",{});var BJr=s(Fae);x3o=r(BJr,"from_pretrained()"),BJr.forEach(t),k3o=r(zz,"class method or the "),Cae=n(zz,"CODE",{});var xJr=s(Cae);R3o=r(xJr,"from_config()"),xJr.forEach(t),S3o=r(zz,`class
method.`),zz.forEach(t),P3o=i(al),F3=n(al,"P",{});var tSe=s(F3);$3o=r(tSe,"This class cannot be instantiated directly using "),Mae=n(tSe,"CODE",{});var kJr=s(Mae);I3o=r(kJr,"__init__()"),kJr.forEach(t),j3o=r(tSe," (throws an error)."),tSe.forEach(t),D3o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(C3.$$.fragment,nl),N3o=i(nl),Eae=n(nl,"P",{});var RJr=s(Eae);q3o=r(RJr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RJr.forEach(t),O3o=i(nl),ud=n(nl,"P",{});var Wz=s(ud);G3o=r(Wz,`Note:
Loading a model from its configuration file does `),yae=n(Wz,"STRONG",{});var SJr=s(yae);X3o=r(SJr,"not"),SJr.forEach(t),V3o=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=n(Wz,"CODE",{});var PJr=s(wae);z3o=r(PJr,"from_pretrained()"),PJr.forEach(t),W3o=r(Wz,"to load the model weights."),Wz.forEach(t),Q3o=i(nl),Aae=n(nl,"P",{});var $Jr=s(Aae);H3o=r($Jr,"Examples:"),$Jr.forEach(t),U3o=i(nl),m(M3.$$.fragment,nl),nl.forEach(t),J3o=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(E3.$$.fragment,Wt),Y3o=i(Wt),Lae=n(Wt,"P",{});var IJr=s(Lae);K3o=r(IJr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IJr.forEach(t),Z3o=i(Wt),Ja=n(Wt,"P",{});var l4=s(Ja);e5o=r(l4,"The model class to instantiate is selected based on the "),Bae=n(l4,"CODE",{});var jJr=s(Bae);o5o=r(jJr,"model_type"),jJr.forEach(t),r5o=r(l4,` property of the config object (either
passed as an argument or loaded from `),xae=n(l4,"CODE",{});var DJr=s(xae);t5o=r(DJr,"pretrained_model_name_or_path"),DJr.forEach(t),a5o=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kae=n(l4,"CODE",{});var NJr=s(kae);n5o=r(NJr,"pretrained_model_name_or_path"),NJr.forEach(t),s5o=r(l4,":"),l4.forEach(t),l5o=i(Wt),O=n(Wt,"UL",{});var G=s(O);q1=n(G,"LI",{});var Y3e=s(q1);Rae=n(Y3e,"STRONG",{});var qJr=s(Rae);i5o=r(qJr,"albert"),qJr.forEach(t),d5o=r(Y3e," \u2014 "),pj=n(Y3e,"A",{href:!0});var OJr=s(pj);c5o=r(OJr,"AlbertForMultipleChoice"),OJr.forEach(t),f5o=r(Y3e," (ALBERT model)"),Y3e.forEach(t),m5o=i(G),O1=n(G,"LI",{});var K3e=s(O1);Sae=n(K3e,"STRONG",{});var GJr=s(Sae);g5o=r(GJr,"bert"),GJr.forEach(t),h5o=r(K3e," \u2014 "),_j=n(K3e,"A",{href:!0});var XJr=s(_j);p5o=r(XJr,"BertForMultipleChoice"),XJr.forEach(t),_5o=r(K3e," (BERT model)"),K3e.forEach(t),u5o=i(G),G1=n(G,"LI",{});var Z3e=s(G1);Pae=n(Z3e,"STRONG",{});var VJr=s(Pae);b5o=r(VJr,"big_bird"),VJr.forEach(t),v5o=r(Z3e," \u2014 "),uj=n(Z3e,"A",{href:!0});var zJr=s(uj);T5o=r(zJr,"BigBirdForMultipleChoice"),zJr.forEach(t),F5o=r(Z3e," (BigBird model)"),Z3e.forEach(t),C5o=i(G),X1=n(G,"LI",{});var e5e=s(X1);$ae=n(e5e,"STRONG",{});var WJr=s($ae);M5o=r(WJr,"camembert"),WJr.forEach(t),E5o=r(e5e," \u2014 "),bj=n(e5e,"A",{href:!0});var QJr=s(bj);y5o=r(QJr,"CamembertForMultipleChoice"),QJr.forEach(t),w5o=r(e5e," (CamemBERT model)"),e5e.forEach(t),A5o=i(G),V1=n(G,"LI",{});var o5e=s(V1);Iae=n(o5e,"STRONG",{});var HJr=s(Iae);L5o=r(HJr,"canine"),HJr.forEach(t),B5o=r(o5e," \u2014 "),vj=n(o5e,"A",{href:!0});var UJr=s(vj);x5o=r(UJr,"CanineForMultipleChoice"),UJr.forEach(t),k5o=r(o5e," (Canine model)"),o5e.forEach(t),R5o=i(G),z1=n(G,"LI",{});var r5e=s(z1);jae=n(r5e,"STRONG",{});var JJr=s(jae);S5o=r(JJr,"convbert"),JJr.forEach(t),P5o=r(r5e," \u2014 "),Tj=n(r5e,"A",{href:!0});var YJr=s(Tj);$5o=r(YJr,"ConvBertForMultipleChoice"),YJr.forEach(t),I5o=r(r5e," (ConvBERT model)"),r5e.forEach(t),j5o=i(G),W1=n(G,"LI",{});var t5e=s(W1);Dae=n(t5e,"STRONG",{});var KJr=s(Dae);D5o=r(KJr,"data2vec-text"),KJr.forEach(t),N5o=r(t5e," \u2014 "),Fj=n(t5e,"A",{href:!0});var ZJr=s(Fj);q5o=r(ZJr,"Data2VecTextForMultipleChoice"),ZJr.forEach(t),O5o=r(t5e," (Data2VecText model)"),t5e.forEach(t),G5o=i(G),Q1=n(G,"LI",{});var a5e=s(Q1);Nae=n(a5e,"STRONG",{});var eYr=s(Nae);X5o=r(eYr,"distilbert"),eYr.forEach(t),V5o=r(a5e," \u2014 "),Cj=n(a5e,"A",{href:!0});var oYr=s(Cj);z5o=r(oYr,"DistilBertForMultipleChoice"),oYr.forEach(t),W5o=r(a5e," (DistilBERT model)"),a5e.forEach(t),Q5o=i(G),H1=n(G,"LI",{});var n5e=s(H1);qae=n(n5e,"STRONG",{});var rYr=s(qae);H5o=r(rYr,"electra"),rYr.forEach(t),U5o=r(n5e," \u2014 "),Mj=n(n5e,"A",{href:!0});var tYr=s(Mj);J5o=r(tYr,"ElectraForMultipleChoice"),tYr.forEach(t),Y5o=r(n5e," (ELECTRA model)"),n5e.forEach(t),K5o=i(G),U1=n(G,"LI",{});var s5e=s(U1);Oae=n(s5e,"STRONG",{});var aYr=s(Oae);Z5o=r(aYr,"flaubert"),aYr.forEach(t),eyo=r(s5e," \u2014 "),Ej=n(s5e,"A",{href:!0});var nYr=s(Ej);oyo=r(nYr,"FlaubertForMultipleChoice"),nYr.forEach(t),ryo=r(s5e," (FlauBERT model)"),s5e.forEach(t),tyo=i(G),J1=n(G,"LI",{});var l5e=s(J1);Gae=n(l5e,"STRONG",{});var sYr=s(Gae);ayo=r(sYr,"fnet"),sYr.forEach(t),nyo=r(l5e," \u2014 "),yj=n(l5e,"A",{href:!0});var lYr=s(yj);syo=r(lYr,"FNetForMultipleChoice"),lYr.forEach(t),lyo=r(l5e," (FNet model)"),l5e.forEach(t),iyo=i(G),Y1=n(G,"LI",{});var i5e=s(Y1);Xae=n(i5e,"STRONG",{});var iYr=s(Xae);dyo=r(iYr,"funnel"),iYr.forEach(t),cyo=r(i5e," \u2014 "),wj=n(i5e,"A",{href:!0});var dYr=s(wj);fyo=r(dYr,"FunnelForMultipleChoice"),dYr.forEach(t),myo=r(i5e," (Funnel Transformer model)"),i5e.forEach(t),gyo=i(G),K1=n(G,"LI",{});var d5e=s(K1);Vae=n(d5e,"STRONG",{});var cYr=s(Vae);hyo=r(cYr,"ibert"),cYr.forEach(t),pyo=r(d5e," \u2014 "),Aj=n(d5e,"A",{href:!0});var fYr=s(Aj);_yo=r(fYr,"IBertForMultipleChoice"),fYr.forEach(t),uyo=r(d5e," (I-BERT model)"),d5e.forEach(t),byo=i(G),Z1=n(G,"LI",{});var c5e=s(Z1);zae=n(c5e,"STRONG",{});var mYr=s(zae);vyo=r(mYr,"longformer"),mYr.forEach(t),Tyo=r(c5e," \u2014 "),Lj=n(c5e,"A",{href:!0});var gYr=s(Lj);Fyo=r(gYr,"LongformerForMultipleChoice"),gYr.forEach(t),Cyo=r(c5e," (Longformer model)"),c5e.forEach(t),Myo=i(G),eb=n(G,"LI",{});var f5e=s(eb);Wae=n(f5e,"STRONG",{});var hYr=s(Wae);Eyo=r(hYr,"megatron-bert"),hYr.forEach(t),yyo=r(f5e," \u2014 "),Bj=n(f5e,"A",{href:!0});var pYr=s(Bj);wyo=r(pYr,"MegatronBertForMultipleChoice"),pYr.forEach(t),Ayo=r(f5e," (MegatronBert model)"),f5e.forEach(t),Lyo=i(G),ob=n(G,"LI",{});var m5e=s(ob);Qae=n(m5e,"STRONG",{});var _Yr=s(Qae);Byo=r(_Yr,"mobilebert"),_Yr.forEach(t),xyo=r(m5e," \u2014 "),xj=n(m5e,"A",{href:!0});var uYr=s(xj);kyo=r(uYr,"MobileBertForMultipleChoice"),uYr.forEach(t),Ryo=r(m5e," (MobileBERT model)"),m5e.forEach(t),Syo=i(G),rb=n(G,"LI",{});var g5e=s(rb);Hae=n(g5e,"STRONG",{});var bYr=s(Hae);Pyo=r(bYr,"mpnet"),bYr.forEach(t),$yo=r(g5e," \u2014 "),kj=n(g5e,"A",{href:!0});var vYr=s(kj);Iyo=r(vYr,"MPNetForMultipleChoice"),vYr.forEach(t),jyo=r(g5e," (MPNet model)"),g5e.forEach(t),Dyo=i(G),tb=n(G,"LI",{});var h5e=s(tb);Uae=n(h5e,"STRONG",{});var TYr=s(Uae);Nyo=r(TYr,"nystromformer"),TYr.forEach(t),qyo=r(h5e," \u2014 "),Rj=n(h5e,"A",{href:!0});var FYr=s(Rj);Oyo=r(FYr,"NystromformerForMultipleChoice"),FYr.forEach(t),Gyo=r(h5e," (Nystromformer model)"),h5e.forEach(t),Xyo=i(G),ab=n(G,"LI",{});var p5e=s(ab);Jae=n(p5e,"STRONG",{});var CYr=s(Jae);Vyo=r(CYr,"qdqbert"),CYr.forEach(t),zyo=r(p5e," \u2014 "),Sj=n(p5e,"A",{href:!0});var MYr=s(Sj);Wyo=r(MYr,"QDQBertForMultipleChoice"),MYr.forEach(t),Qyo=r(p5e," (QDQBert model)"),p5e.forEach(t),Hyo=i(G),nb=n(G,"LI",{});var _5e=s(nb);Yae=n(_5e,"STRONG",{});var EYr=s(Yae);Uyo=r(EYr,"rembert"),EYr.forEach(t),Jyo=r(_5e," \u2014 "),Pj=n(_5e,"A",{href:!0});var yYr=s(Pj);Yyo=r(yYr,"RemBertForMultipleChoice"),yYr.forEach(t),Kyo=r(_5e," (RemBERT model)"),_5e.forEach(t),Zyo=i(G),sb=n(G,"LI",{});var u5e=s(sb);Kae=n(u5e,"STRONG",{});var wYr=s(Kae);ewo=r(wYr,"roberta"),wYr.forEach(t),owo=r(u5e," \u2014 "),$j=n(u5e,"A",{href:!0});var AYr=s($j);rwo=r(AYr,"RobertaForMultipleChoice"),AYr.forEach(t),two=r(u5e," (RoBERTa model)"),u5e.forEach(t),awo=i(G),lb=n(G,"LI",{});var b5e=s(lb);Zae=n(b5e,"STRONG",{});var LYr=s(Zae);nwo=r(LYr,"roformer"),LYr.forEach(t),swo=r(b5e," \u2014 "),Ij=n(b5e,"A",{href:!0});var BYr=s(Ij);lwo=r(BYr,"RoFormerForMultipleChoice"),BYr.forEach(t),iwo=r(b5e," (RoFormer model)"),b5e.forEach(t),dwo=i(G),ib=n(G,"LI",{});var v5e=s(ib);ene=n(v5e,"STRONG",{});var xYr=s(ene);cwo=r(xYr,"squeezebert"),xYr.forEach(t),fwo=r(v5e," \u2014 "),jj=n(v5e,"A",{href:!0});var kYr=s(jj);mwo=r(kYr,"SqueezeBertForMultipleChoice"),kYr.forEach(t),gwo=r(v5e," (SqueezeBERT model)"),v5e.forEach(t),hwo=i(G),db=n(G,"LI",{});var T5e=s(db);one=n(T5e,"STRONG",{});var RYr=s(one);pwo=r(RYr,"xlm"),RYr.forEach(t),_wo=r(T5e," \u2014 "),Dj=n(T5e,"A",{href:!0});var SYr=s(Dj);uwo=r(SYr,"XLMForMultipleChoice"),SYr.forEach(t),bwo=r(T5e," (XLM model)"),T5e.forEach(t),vwo=i(G),cb=n(G,"LI",{});var F5e=s(cb);rne=n(F5e,"STRONG",{});var PYr=s(rne);Two=r(PYr,"xlm-roberta"),PYr.forEach(t),Fwo=r(F5e," \u2014 "),Nj=n(F5e,"A",{href:!0});var $Yr=s(Nj);Cwo=r($Yr,"XLMRobertaForMultipleChoice"),$Yr.forEach(t),Mwo=r(F5e," (XLM-RoBERTa model)"),F5e.forEach(t),Ewo=i(G),fb=n(G,"LI",{});var C5e=s(fb);tne=n(C5e,"STRONG",{});var IYr=s(tne);ywo=r(IYr,"xlm-roberta-xl"),IYr.forEach(t),wwo=r(C5e," \u2014 "),qj=n(C5e,"A",{href:!0});var jYr=s(qj);Awo=r(jYr,"XLMRobertaXLForMultipleChoice"),jYr.forEach(t),Lwo=r(C5e," (XLM-RoBERTa-XL model)"),C5e.forEach(t),Bwo=i(G),mb=n(G,"LI",{});var M5e=s(mb);ane=n(M5e,"STRONG",{});var DYr=s(ane);xwo=r(DYr,"xlnet"),DYr.forEach(t),kwo=r(M5e," \u2014 "),Oj=n(M5e,"A",{href:!0});var NYr=s(Oj);Rwo=r(NYr,"XLNetForMultipleChoice"),NYr.forEach(t),Swo=r(M5e," (XLNet model)"),M5e.forEach(t),Pwo=i(G),gb=n(G,"LI",{});var E5e=s(gb);nne=n(E5e,"STRONG",{});var qYr=s(nne);$wo=r(qYr,"yoso"),qYr.forEach(t),Iwo=r(E5e," \u2014 "),Gj=n(E5e,"A",{href:!0});var OYr=s(Gj);jwo=r(OYr,"YosoForMultipleChoice"),OYr.forEach(t),Dwo=r(E5e," (YOSO model)"),E5e.forEach(t),G.forEach(t),Nwo=i(Wt),hb=n(Wt,"P",{});var y5e=s(hb);qwo=r(y5e,"The model is set in evaluation mode by default using "),sne=n(y5e,"CODE",{});var GYr=s(sne);Owo=r(GYr,"model.eval()"),GYr.forEach(t),Gwo=r(y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lne=n(y5e,"CODE",{});var XYr=s(lne);Xwo=r(XYr,"model.train()"),XYr.forEach(t),y5e.forEach(t),Vwo=i(Wt),ine=n(Wt,"P",{});var VYr=s(ine);zwo=r(VYr,"Examples:"),VYr.forEach(t),Wwo=i(Wt),m(y3.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Uxe=i(c),bd=n(c,"H2",{class:!0});var aSe=s(bd);pb=n(aSe,"A",{id:!0,class:!0,href:!0});var zYr=s(pb);dne=n(zYr,"SPAN",{});var WYr=s(dne);m(w3.$$.fragment,WYr),WYr.forEach(t),zYr.forEach(t),Qwo=i(aSe),cne=n(aSe,"SPAN",{});var QYr=s(cne);Hwo=r(QYr,"AutoModelForNextSentencePrediction"),QYr.forEach(t),aSe.forEach(t),Jxe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(A3.$$.fragment,sl),Uwo=i(sl),vd=n(sl,"P",{});var Qz=s(vd);Jwo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fne=n(Qz,"CODE",{});var HYr=s(fne);Ywo=r(HYr,"from_pretrained()"),HYr.forEach(t),Kwo=r(Qz,"class method or the "),mne=n(Qz,"CODE",{});var UYr=s(mne);Zwo=r(UYr,"from_config()"),UYr.forEach(t),eAo=r(Qz,`class
method.`),Qz.forEach(t),oAo=i(sl),L3=n(sl,"P",{});var nSe=s(L3);rAo=r(nSe,"This class cannot be instantiated directly using "),gne=n(nSe,"CODE",{});var JYr=s(gne);tAo=r(JYr,"__init__()"),JYr.forEach(t),aAo=r(nSe," (throws an error)."),nSe.forEach(t),nAo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(B3.$$.fragment,ll),sAo=i(ll),hne=n(ll,"P",{});var YYr=s(hne);lAo=r(YYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YYr.forEach(t),iAo=i(ll),Td=n(ll,"P",{});var Hz=s(Td);dAo=r(Hz,`Note:
Loading a model from its configuration file does `),pne=n(Hz,"STRONG",{});var KYr=s(pne);cAo=r(KYr,"not"),KYr.forEach(t),fAo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=n(Hz,"CODE",{});var ZYr=s(_ne);mAo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),gAo=r(Hz,"to load the model weights."),Hz.forEach(t),hAo=i(ll),une=n(ll,"P",{});var eKr=s(une);pAo=r(eKr,"Examples:"),eKr.forEach(t),_Ao=i(ll),m(x3.$$.fragment,ll),ll.forEach(t),uAo=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m(k3.$$.fragment,Qt),bAo=i(Qt),bne=n(Qt,"P",{});var oKr=s(bne);vAo=r(oKr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oKr.forEach(t),TAo=i(Qt),Ya=n(Qt,"P",{});var i4=s(Ya);FAo=r(i4,"The model class to instantiate is selected based on the "),vne=n(i4,"CODE",{});var rKr=s(vne);CAo=r(rKr,"model_type"),rKr.forEach(t),MAo=r(i4,` property of the config object (either
passed as an argument or loaded from `),Tne=n(i4,"CODE",{});var tKr=s(Tne);EAo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),yAo=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=n(i4,"CODE",{});var aKr=s(Fne);wAo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),AAo=r(i4,":"),i4.forEach(t),LAo=i(Qt),da=n(Qt,"UL",{});var il=s(da);_b=n(il,"LI",{});var w5e=s(_b);Cne=n(w5e,"STRONG",{});var nKr=s(Cne);BAo=r(nKr,"bert"),nKr.forEach(t),xAo=r(w5e," \u2014 "),Xj=n(w5e,"A",{href:!0});var sKr=s(Xj);kAo=r(sKr,"BertForNextSentencePrediction"),sKr.forEach(t),RAo=r(w5e," (BERT model)"),w5e.forEach(t),SAo=i(il),ub=n(il,"LI",{});var A5e=s(ub);Mne=n(A5e,"STRONG",{});var lKr=s(Mne);PAo=r(lKr,"fnet"),lKr.forEach(t),$Ao=r(A5e," \u2014 "),Vj=n(A5e,"A",{href:!0});var iKr=s(Vj);IAo=r(iKr,"FNetForNextSentencePrediction"),iKr.forEach(t),jAo=r(A5e," (FNet model)"),A5e.forEach(t),DAo=i(il),bb=n(il,"LI",{});var L5e=s(bb);Ene=n(L5e,"STRONG",{});var dKr=s(Ene);NAo=r(dKr,"megatron-bert"),dKr.forEach(t),qAo=r(L5e," \u2014 "),zj=n(L5e,"A",{href:!0});var cKr=s(zj);OAo=r(cKr,"MegatronBertForNextSentencePrediction"),cKr.forEach(t),GAo=r(L5e," (MegatronBert model)"),L5e.forEach(t),XAo=i(il),vb=n(il,"LI",{});var B5e=s(vb);yne=n(B5e,"STRONG",{});var fKr=s(yne);VAo=r(fKr,"mobilebert"),fKr.forEach(t),zAo=r(B5e," \u2014 "),Wj=n(B5e,"A",{href:!0});var mKr=s(Wj);WAo=r(mKr,"MobileBertForNextSentencePrediction"),mKr.forEach(t),QAo=r(B5e," (MobileBERT model)"),B5e.forEach(t),HAo=i(il),Tb=n(il,"LI",{});var x5e=s(Tb);wne=n(x5e,"STRONG",{});var gKr=s(wne);UAo=r(gKr,"qdqbert"),gKr.forEach(t),JAo=r(x5e," \u2014 "),Qj=n(x5e,"A",{href:!0});var hKr=s(Qj);YAo=r(hKr,"QDQBertForNextSentencePrediction"),hKr.forEach(t),KAo=r(x5e," (QDQBert model)"),x5e.forEach(t),il.forEach(t),ZAo=i(Qt),Fb=n(Qt,"P",{});var k5e=s(Fb);eLo=r(k5e,"The model is set in evaluation mode by default using "),Ane=n(k5e,"CODE",{});var pKr=s(Ane);oLo=r(pKr,"model.eval()"),pKr.forEach(t),rLo=r(k5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=n(k5e,"CODE",{});var _Kr=s(Lne);tLo=r(_Kr,"model.train()"),_Kr.forEach(t),k5e.forEach(t),aLo=i(Qt),Bne=n(Qt,"P",{});var uKr=s(Bne);nLo=r(uKr,"Examples:"),uKr.forEach(t),sLo=i(Qt),m(R3.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Yxe=i(c),Fd=n(c,"H2",{class:!0});var sSe=s(Fd);Cb=n(sSe,"A",{id:!0,class:!0,href:!0});var bKr=s(Cb);xne=n(bKr,"SPAN",{});var vKr=s(xne);m(S3.$$.fragment,vKr),vKr.forEach(t),bKr.forEach(t),lLo=i(sSe),kne=n(sSe,"SPAN",{});var TKr=s(kne);iLo=r(TKr,"AutoModelForTokenClassification"),TKr.forEach(t),sSe.forEach(t),Kxe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(P3.$$.fragment,dl),dLo=i(dl),Cd=n(dl,"P",{});var Uz=s(Cd);cLo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rne=n(Uz,"CODE",{});var FKr=s(Rne);fLo=r(FKr,"from_pretrained()"),FKr.forEach(t),mLo=r(Uz,"class method or the "),Sne=n(Uz,"CODE",{});var CKr=s(Sne);gLo=r(CKr,"from_config()"),CKr.forEach(t),hLo=r(Uz,`class
method.`),Uz.forEach(t),pLo=i(dl),$3=n(dl,"P",{});var lSe=s($3);_Lo=r(lSe,"This class cannot be instantiated directly using "),Pne=n(lSe,"CODE",{});var MKr=s(Pne);uLo=r(MKr,"__init__()"),MKr.forEach(t),bLo=r(lSe," (throws an error)."),lSe.forEach(t),vLo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(I3.$$.fragment,cl),TLo=i(cl),$ne=n(cl,"P",{});var EKr=s($ne);FLo=r(EKr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EKr.forEach(t),CLo=i(cl),Md=n(cl,"P",{});var Jz=s(Md);MLo=r(Jz,`Note:
Loading a model from its configuration file does `),Ine=n(Jz,"STRONG",{});var yKr=s(Ine);ELo=r(yKr,"not"),yKr.forEach(t),yLo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=n(Jz,"CODE",{});var wKr=s(jne);wLo=r(wKr,"from_pretrained()"),wKr.forEach(t),ALo=r(Jz,"to load the model weights."),Jz.forEach(t),LLo=i(cl),Dne=n(cl,"P",{});var AKr=s(Dne);BLo=r(AKr,"Examples:"),AKr.forEach(t),xLo=i(cl),m(j3.$$.fragment,cl),cl.forEach(t),kLo=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(D3.$$.fragment,Ht),RLo=i(Ht),Nne=n(Ht,"P",{});var LKr=s(Nne);SLo=r(LKr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LKr.forEach(t),PLo=i(Ht),Ka=n(Ht,"P",{});var d4=s(Ka);$Lo=r(d4,"The model class to instantiate is selected based on the "),qne=n(d4,"CODE",{});var BKr=s(qne);ILo=r(BKr,"model_type"),BKr.forEach(t),jLo=r(d4,` property of the config object (either
passed as an argument or loaded from `),One=n(d4,"CODE",{});var xKr=s(One);DLo=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),NLo=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(d4,"CODE",{});var kKr=s(Gne);qLo=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),OLo=r(d4,":"),d4.forEach(t),GLo=i(Ht),N=n(Ht,"UL",{});var q=s(N);Mb=n(q,"LI",{});var R5e=s(Mb);Xne=n(R5e,"STRONG",{});var RKr=s(Xne);XLo=r(RKr,"albert"),RKr.forEach(t),VLo=r(R5e," \u2014 "),Hj=n(R5e,"A",{href:!0});var SKr=s(Hj);zLo=r(SKr,"AlbertForTokenClassification"),SKr.forEach(t),WLo=r(R5e," (ALBERT model)"),R5e.forEach(t),QLo=i(q),Eb=n(q,"LI",{});var S5e=s(Eb);Vne=n(S5e,"STRONG",{});var PKr=s(Vne);HLo=r(PKr,"bert"),PKr.forEach(t),ULo=r(S5e," \u2014 "),Uj=n(S5e,"A",{href:!0});var $Kr=s(Uj);JLo=r($Kr,"BertForTokenClassification"),$Kr.forEach(t),YLo=r(S5e," (BERT model)"),S5e.forEach(t),KLo=i(q),yb=n(q,"LI",{});var P5e=s(yb);zne=n(P5e,"STRONG",{});var IKr=s(zne);ZLo=r(IKr,"big_bird"),IKr.forEach(t),e8o=r(P5e," \u2014 "),Jj=n(P5e,"A",{href:!0});var jKr=s(Jj);o8o=r(jKr,"BigBirdForTokenClassification"),jKr.forEach(t),r8o=r(P5e," (BigBird model)"),P5e.forEach(t),t8o=i(q),wb=n(q,"LI",{});var $5e=s(wb);Wne=n($5e,"STRONG",{});var DKr=s(Wne);a8o=r(DKr,"camembert"),DKr.forEach(t),n8o=r($5e," \u2014 "),Yj=n($5e,"A",{href:!0});var NKr=s(Yj);s8o=r(NKr,"CamembertForTokenClassification"),NKr.forEach(t),l8o=r($5e," (CamemBERT model)"),$5e.forEach(t),i8o=i(q),Ab=n(q,"LI",{});var I5e=s(Ab);Qne=n(I5e,"STRONG",{});var qKr=s(Qne);d8o=r(qKr,"canine"),qKr.forEach(t),c8o=r(I5e," \u2014 "),Kj=n(I5e,"A",{href:!0});var OKr=s(Kj);f8o=r(OKr,"CanineForTokenClassification"),OKr.forEach(t),m8o=r(I5e," (Canine model)"),I5e.forEach(t),g8o=i(q),Lb=n(q,"LI",{});var j5e=s(Lb);Hne=n(j5e,"STRONG",{});var GKr=s(Hne);h8o=r(GKr,"convbert"),GKr.forEach(t),p8o=r(j5e," \u2014 "),Zj=n(j5e,"A",{href:!0});var XKr=s(Zj);_8o=r(XKr,"ConvBertForTokenClassification"),XKr.forEach(t),u8o=r(j5e," (ConvBERT model)"),j5e.forEach(t),b8o=i(q),Bb=n(q,"LI",{});var D5e=s(Bb);Une=n(D5e,"STRONG",{});var VKr=s(Une);v8o=r(VKr,"data2vec-text"),VKr.forEach(t),T8o=r(D5e," \u2014 "),eD=n(D5e,"A",{href:!0});var zKr=s(eD);F8o=r(zKr,"Data2VecTextForTokenClassification"),zKr.forEach(t),C8o=r(D5e," (Data2VecText model)"),D5e.forEach(t),M8o=i(q),xb=n(q,"LI",{});var N5e=s(xb);Jne=n(N5e,"STRONG",{});var WKr=s(Jne);E8o=r(WKr,"deberta"),WKr.forEach(t),y8o=r(N5e," \u2014 "),oD=n(N5e,"A",{href:!0});var QKr=s(oD);w8o=r(QKr,"DebertaForTokenClassification"),QKr.forEach(t),A8o=r(N5e," (DeBERTa model)"),N5e.forEach(t),L8o=i(q),kb=n(q,"LI",{});var q5e=s(kb);Yne=n(q5e,"STRONG",{});var HKr=s(Yne);B8o=r(HKr,"deberta-v2"),HKr.forEach(t),x8o=r(q5e," \u2014 "),rD=n(q5e,"A",{href:!0});var UKr=s(rD);k8o=r(UKr,"DebertaV2ForTokenClassification"),UKr.forEach(t),R8o=r(q5e," (DeBERTa-v2 model)"),q5e.forEach(t),S8o=i(q),Rb=n(q,"LI",{});var O5e=s(Rb);Kne=n(O5e,"STRONG",{});var JKr=s(Kne);P8o=r(JKr,"distilbert"),JKr.forEach(t),$8o=r(O5e," \u2014 "),tD=n(O5e,"A",{href:!0});var YKr=s(tD);I8o=r(YKr,"DistilBertForTokenClassification"),YKr.forEach(t),j8o=r(O5e," (DistilBERT model)"),O5e.forEach(t),D8o=i(q),Sb=n(q,"LI",{});var G5e=s(Sb);Zne=n(G5e,"STRONG",{});var KKr=s(Zne);N8o=r(KKr,"electra"),KKr.forEach(t),q8o=r(G5e," \u2014 "),aD=n(G5e,"A",{href:!0});var ZKr=s(aD);O8o=r(ZKr,"ElectraForTokenClassification"),ZKr.forEach(t),G8o=r(G5e," (ELECTRA model)"),G5e.forEach(t),X8o=i(q),Pb=n(q,"LI",{});var X5e=s(Pb);ese=n(X5e,"STRONG",{});var eZr=s(ese);V8o=r(eZr,"flaubert"),eZr.forEach(t),z8o=r(X5e," \u2014 "),nD=n(X5e,"A",{href:!0});var oZr=s(nD);W8o=r(oZr,"FlaubertForTokenClassification"),oZr.forEach(t),Q8o=r(X5e," (FlauBERT model)"),X5e.forEach(t),H8o=i(q),$b=n(q,"LI",{});var V5e=s($b);ose=n(V5e,"STRONG",{});var rZr=s(ose);U8o=r(rZr,"fnet"),rZr.forEach(t),J8o=r(V5e," \u2014 "),sD=n(V5e,"A",{href:!0});var tZr=s(sD);Y8o=r(tZr,"FNetForTokenClassification"),tZr.forEach(t),K8o=r(V5e," (FNet model)"),V5e.forEach(t),Z8o=i(q),Ib=n(q,"LI",{});var z5e=s(Ib);rse=n(z5e,"STRONG",{});var aZr=s(rse);e9o=r(aZr,"funnel"),aZr.forEach(t),o9o=r(z5e," \u2014 "),lD=n(z5e,"A",{href:!0});var nZr=s(lD);r9o=r(nZr,"FunnelForTokenClassification"),nZr.forEach(t),t9o=r(z5e," (Funnel Transformer model)"),z5e.forEach(t),a9o=i(q),jb=n(q,"LI",{});var W5e=s(jb);tse=n(W5e,"STRONG",{});var sZr=s(tse);n9o=r(sZr,"gpt2"),sZr.forEach(t),s9o=r(W5e," \u2014 "),iD=n(W5e,"A",{href:!0});var lZr=s(iD);l9o=r(lZr,"GPT2ForTokenClassification"),lZr.forEach(t),i9o=r(W5e," (OpenAI GPT-2 model)"),W5e.forEach(t),d9o=i(q),Db=n(q,"LI",{});var Q5e=s(Db);ase=n(Q5e,"STRONG",{});var iZr=s(ase);c9o=r(iZr,"ibert"),iZr.forEach(t),f9o=r(Q5e," \u2014 "),dD=n(Q5e,"A",{href:!0});var dZr=s(dD);m9o=r(dZr,"IBertForTokenClassification"),dZr.forEach(t),g9o=r(Q5e," (I-BERT model)"),Q5e.forEach(t),h9o=i(q),Nb=n(q,"LI",{});var H5e=s(Nb);nse=n(H5e,"STRONG",{});var cZr=s(nse);p9o=r(cZr,"layoutlm"),cZr.forEach(t),_9o=r(H5e," \u2014 "),cD=n(H5e,"A",{href:!0});var fZr=s(cD);u9o=r(fZr,"LayoutLMForTokenClassification"),fZr.forEach(t),b9o=r(H5e," (LayoutLM model)"),H5e.forEach(t),v9o=i(q),qb=n(q,"LI",{});var U5e=s(qb);sse=n(U5e,"STRONG",{});var mZr=s(sse);T9o=r(mZr,"layoutlmv2"),mZr.forEach(t),F9o=r(U5e," \u2014 "),fD=n(U5e,"A",{href:!0});var gZr=s(fD);C9o=r(gZr,"LayoutLMv2ForTokenClassification"),gZr.forEach(t),M9o=r(U5e," (LayoutLMv2 model)"),U5e.forEach(t),E9o=i(q),Ob=n(q,"LI",{});var J5e=s(Ob);lse=n(J5e,"STRONG",{});var hZr=s(lse);y9o=r(hZr,"longformer"),hZr.forEach(t),w9o=r(J5e," \u2014 "),mD=n(J5e,"A",{href:!0});var pZr=s(mD);A9o=r(pZr,"LongformerForTokenClassification"),pZr.forEach(t),L9o=r(J5e," (Longformer model)"),J5e.forEach(t),B9o=i(q),Gb=n(q,"LI",{});var Y5e=s(Gb);ise=n(Y5e,"STRONG",{});var _Zr=s(ise);x9o=r(_Zr,"megatron-bert"),_Zr.forEach(t),k9o=r(Y5e," \u2014 "),gD=n(Y5e,"A",{href:!0});var uZr=s(gD);R9o=r(uZr,"MegatronBertForTokenClassification"),uZr.forEach(t),S9o=r(Y5e," (MegatronBert model)"),Y5e.forEach(t),P9o=i(q),Xb=n(q,"LI",{});var K5e=s(Xb);dse=n(K5e,"STRONG",{});var bZr=s(dse);$9o=r(bZr,"mobilebert"),bZr.forEach(t),I9o=r(K5e," \u2014 "),hD=n(K5e,"A",{href:!0});var vZr=s(hD);j9o=r(vZr,"MobileBertForTokenClassification"),vZr.forEach(t),D9o=r(K5e," (MobileBERT model)"),K5e.forEach(t),N9o=i(q),Vb=n(q,"LI",{});var Z5e=s(Vb);cse=n(Z5e,"STRONG",{});var TZr=s(cse);q9o=r(TZr,"mpnet"),TZr.forEach(t),O9o=r(Z5e," \u2014 "),pD=n(Z5e,"A",{href:!0});var FZr=s(pD);G9o=r(FZr,"MPNetForTokenClassification"),FZr.forEach(t),X9o=r(Z5e," (MPNet model)"),Z5e.forEach(t),V9o=i(q),zb=n(q,"LI",{});var eye=s(zb);fse=n(eye,"STRONG",{});var CZr=s(fse);z9o=r(CZr,"nystromformer"),CZr.forEach(t),W9o=r(eye," \u2014 "),_D=n(eye,"A",{href:!0});var MZr=s(_D);Q9o=r(MZr,"NystromformerForTokenClassification"),MZr.forEach(t),H9o=r(eye," (Nystromformer model)"),eye.forEach(t),U9o=i(q),Wb=n(q,"LI",{});var oye=s(Wb);mse=n(oye,"STRONG",{});var EZr=s(mse);J9o=r(EZr,"qdqbert"),EZr.forEach(t),Y9o=r(oye," \u2014 "),uD=n(oye,"A",{href:!0});var yZr=s(uD);K9o=r(yZr,"QDQBertForTokenClassification"),yZr.forEach(t),Z9o=r(oye," (QDQBert model)"),oye.forEach(t),eBo=i(q),Qb=n(q,"LI",{});var rye=s(Qb);gse=n(rye,"STRONG",{});var wZr=s(gse);oBo=r(wZr,"rembert"),wZr.forEach(t),rBo=r(rye," \u2014 "),bD=n(rye,"A",{href:!0});var AZr=s(bD);tBo=r(AZr,"RemBertForTokenClassification"),AZr.forEach(t),aBo=r(rye," (RemBERT model)"),rye.forEach(t),nBo=i(q),Hb=n(q,"LI",{});var tye=s(Hb);hse=n(tye,"STRONG",{});var LZr=s(hse);sBo=r(LZr,"roberta"),LZr.forEach(t),lBo=r(tye," \u2014 "),vD=n(tye,"A",{href:!0});var BZr=s(vD);iBo=r(BZr,"RobertaForTokenClassification"),BZr.forEach(t),dBo=r(tye," (RoBERTa model)"),tye.forEach(t),cBo=i(q),Ub=n(q,"LI",{});var aye=s(Ub);pse=n(aye,"STRONG",{});var xZr=s(pse);fBo=r(xZr,"roformer"),xZr.forEach(t),mBo=r(aye," \u2014 "),TD=n(aye,"A",{href:!0});var kZr=s(TD);gBo=r(kZr,"RoFormerForTokenClassification"),kZr.forEach(t),hBo=r(aye," (RoFormer model)"),aye.forEach(t),pBo=i(q),Jb=n(q,"LI",{});var nye=s(Jb);_se=n(nye,"STRONG",{});var RZr=s(_se);_Bo=r(RZr,"squeezebert"),RZr.forEach(t),uBo=r(nye," \u2014 "),FD=n(nye,"A",{href:!0});var SZr=s(FD);bBo=r(SZr,"SqueezeBertForTokenClassification"),SZr.forEach(t),vBo=r(nye," (SqueezeBERT model)"),nye.forEach(t),TBo=i(q),Yb=n(q,"LI",{});var sye=s(Yb);use=n(sye,"STRONG",{});var PZr=s(use);FBo=r(PZr,"xlm"),PZr.forEach(t),CBo=r(sye," \u2014 "),CD=n(sye,"A",{href:!0});var $Zr=s(CD);MBo=r($Zr,"XLMForTokenClassification"),$Zr.forEach(t),EBo=r(sye," (XLM model)"),sye.forEach(t),yBo=i(q),Kb=n(q,"LI",{});var lye=s(Kb);bse=n(lye,"STRONG",{});var IZr=s(bse);wBo=r(IZr,"xlm-roberta"),IZr.forEach(t),ABo=r(lye," \u2014 "),MD=n(lye,"A",{href:!0});var jZr=s(MD);LBo=r(jZr,"XLMRobertaForTokenClassification"),jZr.forEach(t),BBo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),xBo=i(q),Zb=n(q,"LI",{});var iye=s(Zb);vse=n(iye,"STRONG",{});var DZr=s(vse);kBo=r(DZr,"xlm-roberta-xl"),DZr.forEach(t),RBo=r(iye," \u2014 "),ED=n(iye,"A",{href:!0});var NZr=s(ED);SBo=r(NZr,"XLMRobertaXLForTokenClassification"),NZr.forEach(t),PBo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),$Bo=i(q),e2=n(q,"LI",{});var dye=s(e2);Tse=n(dye,"STRONG",{});var qZr=s(Tse);IBo=r(qZr,"xlnet"),qZr.forEach(t),jBo=r(dye," \u2014 "),yD=n(dye,"A",{href:!0});var OZr=s(yD);DBo=r(OZr,"XLNetForTokenClassification"),OZr.forEach(t),NBo=r(dye," (XLNet model)"),dye.forEach(t),qBo=i(q),o2=n(q,"LI",{});var cye=s(o2);Fse=n(cye,"STRONG",{});var GZr=s(Fse);OBo=r(GZr,"yoso"),GZr.forEach(t),GBo=r(cye," \u2014 "),wD=n(cye,"A",{href:!0});var XZr=s(wD);XBo=r(XZr,"YosoForTokenClassification"),XZr.forEach(t),VBo=r(cye," (YOSO model)"),cye.forEach(t),q.forEach(t),zBo=i(Ht),r2=n(Ht,"P",{});var fye=s(r2);WBo=r(fye,"The model is set in evaluation mode by default using "),Cse=n(fye,"CODE",{});var VZr=s(Cse);QBo=r(VZr,"model.eval()"),VZr.forEach(t),HBo=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=n(fye,"CODE",{});var zZr=s(Mse);UBo=r(zZr,"model.train()"),zZr.forEach(t),fye.forEach(t),JBo=i(Ht),Ese=n(Ht,"P",{});var WZr=s(Ese);YBo=r(WZr,"Examples:"),WZr.forEach(t),KBo=i(Ht),m(N3.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Zxe=i(c),Ed=n(c,"H2",{class:!0});var iSe=s(Ed);t2=n(iSe,"A",{id:!0,class:!0,href:!0});var QZr=s(t2);yse=n(QZr,"SPAN",{});var HZr=s(yse);m(q3.$$.fragment,HZr),HZr.forEach(t),QZr.forEach(t),ZBo=i(iSe),wse=n(iSe,"SPAN",{});var UZr=s(wse);exo=r(UZr,"AutoModelForQuestionAnswering"),UZr.forEach(t),iSe.forEach(t),eke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(O3.$$.fragment,fl),oxo=i(fl),yd=n(fl,"P",{});var Yz=s(yd);rxo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ase=n(Yz,"CODE",{});var JZr=s(Ase);txo=r(JZr,"from_pretrained()"),JZr.forEach(t),axo=r(Yz,"class method or the "),Lse=n(Yz,"CODE",{});var YZr=s(Lse);nxo=r(YZr,"from_config()"),YZr.forEach(t),sxo=r(Yz,`class
method.`),Yz.forEach(t),lxo=i(fl),G3=n(fl,"P",{});var dSe=s(G3);ixo=r(dSe,"This class cannot be instantiated directly using "),Bse=n(dSe,"CODE",{});var KZr=s(Bse);dxo=r(KZr,"__init__()"),KZr.forEach(t),cxo=r(dSe," (throws an error)."),dSe.forEach(t),fxo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(X3.$$.fragment,ml),mxo=i(ml),xse=n(ml,"P",{});var ZZr=s(xse);gxo=r(ZZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZZr.forEach(t),hxo=i(ml),wd=n(ml,"P",{});var Kz=s(wd);pxo=r(Kz,`Note:
Loading a model from its configuration file does `),kse=n(Kz,"STRONG",{});var eet=s(kse);_xo=r(eet,"not"),eet.forEach(t),uxo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rse=n(Kz,"CODE",{});var oet=s(Rse);bxo=r(oet,"from_pretrained()"),oet.forEach(t),vxo=r(Kz,"to load the model weights."),Kz.forEach(t),Txo=i(ml),Sse=n(ml,"P",{});var ret=s(Sse);Fxo=r(ret,"Examples:"),ret.forEach(t),Cxo=i(ml),m(V3.$$.fragment,ml),ml.forEach(t),Mxo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(z3.$$.fragment,Ut),Exo=i(Ut),Pse=n(Ut,"P",{});var tet=s(Pse);yxo=r(tet,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tet.forEach(t),wxo=i(Ut),Za=n(Ut,"P",{});var c4=s(Za);Axo=r(c4,"The model class to instantiate is selected based on the "),$se=n(c4,"CODE",{});var aet=s($se);Lxo=r(aet,"model_type"),aet.forEach(t),Bxo=r(c4,` property of the config object (either
passed as an argument or loaded from `),Ise=n(c4,"CODE",{});var net=s(Ise);xxo=r(net,"pretrained_model_name_or_path"),net.forEach(t),kxo=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=n(c4,"CODE",{});var set=s(jse);Rxo=r(set,"pretrained_model_name_or_path"),set.forEach(t),Sxo=r(c4,":"),c4.forEach(t),Pxo=i(Ut),R=n(Ut,"UL",{});var P=s(R);a2=n(P,"LI",{});var mye=s(a2);Dse=n(mye,"STRONG",{});var iet=s(Dse);$xo=r(iet,"albert"),iet.forEach(t),Ixo=r(mye," \u2014 "),AD=n(mye,"A",{href:!0});var det=s(AD);jxo=r(det,"AlbertForQuestionAnswering"),det.forEach(t),Dxo=r(mye," (ALBERT model)"),mye.forEach(t),Nxo=i(P),n2=n(P,"LI",{});var gye=s(n2);Nse=n(gye,"STRONG",{});var cet=s(Nse);qxo=r(cet,"bart"),cet.forEach(t),Oxo=r(gye," \u2014 "),LD=n(gye,"A",{href:!0});var fet=s(LD);Gxo=r(fet,"BartForQuestionAnswering"),fet.forEach(t),Xxo=r(gye," (BART model)"),gye.forEach(t),Vxo=i(P),s2=n(P,"LI",{});var hye=s(s2);qse=n(hye,"STRONG",{});var met=s(qse);zxo=r(met,"bert"),met.forEach(t),Wxo=r(hye," \u2014 "),BD=n(hye,"A",{href:!0});var get=s(BD);Qxo=r(get,"BertForQuestionAnswering"),get.forEach(t),Hxo=r(hye," (BERT model)"),hye.forEach(t),Uxo=i(P),l2=n(P,"LI",{});var pye=s(l2);Ose=n(pye,"STRONG",{});var het=s(Ose);Jxo=r(het,"big_bird"),het.forEach(t),Yxo=r(pye," \u2014 "),xD=n(pye,"A",{href:!0});var pet=s(xD);Kxo=r(pet,"BigBirdForQuestionAnswering"),pet.forEach(t),Zxo=r(pye," (BigBird model)"),pye.forEach(t),eko=i(P),i2=n(P,"LI",{});var _ye=s(i2);Gse=n(_ye,"STRONG",{});var _et=s(Gse);oko=r(_et,"bigbird_pegasus"),_et.forEach(t),rko=r(_ye," \u2014 "),kD=n(_ye,"A",{href:!0});var uet=s(kD);tko=r(uet,"BigBirdPegasusForQuestionAnswering"),uet.forEach(t),ako=r(_ye," (BigBirdPegasus model)"),_ye.forEach(t),nko=i(P),d2=n(P,"LI",{});var uye=s(d2);Xse=n(uye,"STRONG",{});var bet=s(Xse);sko=r(bet,"camembert"),bet.forEach(t),lko=r(uye," \u2014 "),RD=n(uye,"A",{href:!0});var vet=s(RD);iko=r(vet,"CamembertForQuestionAnswering"),vet.forEach(t),dko=r(uye," (CamemBERT model)"),uye.forEach(t),cko=i(P),c2=n(P,"LI",{});var bye=s(c2);Vse=n(bye,"STRONG",{});var Tet=s(Vse);fko=r(Tet,"canine"),Tet.forEach(t),mko=r(bye," \u2014 "),SD=n(bye,"A",{href:!0});var Fet=s(SD);gko=r(Fet,"CanineForQuestionAnswering"),Fet.forEach(t),hko=r(bye," (Canine model)"),bye.forEach(t),pko=i(P),f2=n(P,"LI",{});var vye=s(f2);zse=n(vye,"STRONG",{});var Cet=s(zse);_ko=r(Cet,"convbert"),Cet.forEach(t),uko=r(vye," \u2014 "),PD=n(vye,"A",{href:!0});var Met=s(PD);bko=r(Met,"ConvBertForQuestionAnswering"),Met.forEach(t),vko=r(vye," (ConvBERT model)"),vye.forEach(t),Tko=i(P),m2=n(P,"LI",{});var Tye=s(m2);Wse=n(Tye,"STRONG",{});var Eet=s(Wse);Fko=r(Eet,"data2vec-text"),Eet.forEach(t),Cko=r(Tye," \u2014 "),$D=n(Tye,"A",{href:!0});var yet=s($D);Mko=r(yet,"Data2VecTextForQuestionAnswering"),yet.forEach(t),Eko=r(Tye," (Data2VecText model)"),Tye.forEach(t),yko=i(P),g2=n(P,"LI",{});var Fye=s(g2);Qse=n(Fye,"STRONG",{});var wet=s(Qse);wko=r(wet,"deberta"),wet.forEach(t),Ako=r(Fye," \u2014 "),ID=n(Fye,"A",{href:!0});var Aet=s(ID);Lko=r(Aet,"DebertaForQuestionAnswering"),Aet.forEach(t),Bko=r(Fye," (DeBERTa model)"),Fye.forEach(t),xko=i(P),h2=n(P,"LI",{});var Cye=s(h2);Hse=n(Cye,"STRONG",{});var Let=s(Hse);kko=r(Let,"deberta-v2"),Let.forEach(t),Rko=r(Cye," \u2014 "),jD=n(Cye,"A",{href:!0});var Bet=s(jD);Sko=r(Bet,"DebertaV2ForQuestionAnswering"),Bet.forEach(t),Pko=r(Cye," (DeBERTa-v2 model)"),Cye.forEach(t),$ko=i(P),p2=n(P,"LI",{});var Mye=s(p2);Use=n(Mye,"STRONG",{});var xet=s(Use);Iko=r(xet,"distilbert"),xet.forEach(t),jko=r(Mye," \u2014 "),DD=n(Mye,"A",{href:!0});var ket=s(DD);Dko=r(ket,"DistilBertForQuestionAnswering"),ket.forEach(t),Nko=r(Mye," (DistilBERT model)"),Mye.forEach(t),qko=i(P),_2=n(P,"LI",{});var Eye=s(_2);Jse=n(Eye,"STRONG",{});var Ret=s(Jse);Oko=r(Ret,"electra"),Ret.forEach(t),Gko=r(Eye," \u2014 "),ND=n(Eye,"A",{href:!0});var Set=s(ND);Xko=r(Set,"ElectraForQuestionAnswering"),Set.forEach(t),Vko=r(Eye," (ELECTRA model)"),Eye.forEach(t),zko=i(P),u2=n(P,"LI",{});var yye=s(u2);Yse=n(yye,"STRONG",{});var Pet=s(Yse);Wko=r(Pet,"flaubert"),Pet.forEach(t),Qko=r(yye," \u2014 "),qD=n(yye,"A",{href:!0});var $et=s(qD);Hko=r($et,"FlaubertForQuestionAnsweringSimple"),$et.forEach(t),Uko=r(yye," (FlauBERT model)"),yye.forEach(t),Jko=i(P),b2=n(P,"LI",{});var wye=s(b2);Kse=n(wye,"STRONG",{});var Iet=s(Kse);Yko=r(Iet,"fnet"),Iet.forEach(t),Kko=r(wye," \u2014 "),OD=n(wye,"A",{href:!0});var jet=s(OD);Zko=r(jet,"FNetForQuestionAnswering"),jet.forEach(t),eRo=r(wye," (FNet model)"),wye.forEach(t),oRo=i(P),v2=n(P,"LI",{});var Aye=s(v2);Zse=n(Aye,"STRONG",{});var Det=s(Zse);rRo=r(Det,"funnel"),Det.forEach(t),tRo=r(Aye," \u2014 "),GD=n(Aye,"A",{href:!0});var Net=s(GD);aRo=r(Net,"FunnelForQuestionAnswering"),Net.forEach(t),nRo=r(Aye," (Funnel Transformer model)"),Aye.forEach(t),sRo=i(P),T2=n(P,"LI",{});var Lye=s(T2);ele=n(Lye,"STRONG",{});var qet=s(ele);lRo=r(qet,"gptj"),qet.forEach(t),iRo=r(Lye," \u2014 "),XD=n(Lye,"A",{href:!0});var Oet=s(XD);dRo=r(Oet,"GPTJForQuestionAnswering"),Oet.forEach(t),cRo=r(Lye," (GPT-J model)"),Lye.forEach(t),fRo=i(P),F2=n(P,"LI",{});var Bye=s(F2);ole=n(Bye,"STRONG",{});var Get=s(ole);mRo=r(Get,"ibert"),Get.forEach(t),gRo=r(Bye," \u2014 "),VD=n(Bye,"A",{href:!0});var Xet=s(VD);hRo=r(Xet,"IBertForQuestionAnswering"),Xet.forEach(t),pRo=r(Bye," (I-BERT model)"),Bye.forEach(t),_Ro=i(P),C2=n(P,"LI",{});var xye=s(C2);rle=n(xye,"STRONG",{});var Vet=s(rle);uRo=r(Vet,"layoutlmv2"),Vet.forEach(t),bRo=r(xye," \u2014 "),zD=n(xye,"A",{href:!0});var zet=s(zD);vRo=r(zet,"LayoutLMv2ForQuestionAnswering"),zet.forEach(t),TRo=r(xye," (LayoutLMv2 model)"),xye.forEach(t),FRo=i(P),M2=n(P,"LI",{});var kye=s(M2);tle=n(kye,"STRONG",{});var Wet=s(tle);CRo=r(Wet,"led"),Wet.forEach(t),MRo=r(kye," \u2014 "),WD=n(kye,"A",{href:!0});var Qet=s(WD);ERo=r(Qet,"LEDForQuestionAnswering"),Qet.forEach(t),yRo=r(kye," (LED model)"),kye.forEach(t),wRo=i(P),E2=n(P,"LI",{});var Rye=s(E2);ale=n(Rye,"STRONG",{});var Het=s(ale);ARo=r(Het,"longformer"),Het.forEach(t),LRo=r(Rye," \u2014 "),QD=n(Rye,"A",{href:!0});var Uet=s(QD);BRo=r(Uet,"LongformerForQuestionAnswering"),Uet.forEach(t),xRo=r(Rye," (Longformer model)"),Rye.forEach(t),kRo=i(P),y2=n(P,"LI",{});var Sye=s(y2);nle=n(Sye,"STRONG",{});var Jet=s(nle);RRo=r(Jet,"lxmert"),Jet.forEach(t),SRo=r(Sye," \u2014 "),HD=n(Sye,"A",{href:!0});var Yet=s(HD);PRo=r(Yet,"LxmertForQuestionAnswering"),Yet.forEach(t),$Ro=r(Sye," (LXMERT model)"),Sye.forEach(t),IRo=i(P),w2=n(P,"LI",{});var Pye=s(w2);sle=n(Pye,"STRONG",{});var Ket=s(sle);jRo=r(Ket,"mbart"),Ket.forEach(t),DRo=r(Pye," \u2014 "),UD=n(Pye,"A",{href:!0});var Zet=s(UD);NRo=r(Zet,"MBartForQuestionAnswering"),Zet.forEach(t),qRo=r(Pye," (mBART model)"),Pye.forEach(t),ORo=i(P),A2=n(P,"LI",{});var $ye=s(A2);lle=n($ye,"STRONG",{});var eot=s(lle);GRo=r(eot,"megatron-bert"),eot.forEach(t),XRo=r($ye," \u2014 "),JD=n($ye,"A",{href:!0});var oot=s(JD);VRo=r(oot,"MegatronBertForQuestionAnswering"),oot.forEach(t),zRo=r($ye," (MegatronBert model)"),$ye.forEach(t),WRo=i(P),L2=n(P,"LI",{});var Iye=s(L2);ile=n(Iye,"STRONG",{});var rot=s(ile);QRo=r(rot,"mobilebert"),rot.forEach(t),HRo=r(Iye," \u2014 "),YD=n(Iye,"A",{href:!0});var tot=s(YD);URo=r(tot,"MobileBertForQuestionAnswering"),tot.forEach(t),JRo=r(Iye," (MobileBERT model)"),Iye.forEach(t),YRo=i(P),B2=n(P,"LI",{});var jye=s(B2);dle=n(jye,"STRONG",{});var aot=s(dle);KRo=r(aot,"mpnet"),aot.forEach(t),ZRo=r(jye," \u2014 "),KD=n(jye,"A",{href:!0});var not=s(KD);eSo=r(not,"MPNetForQuestionAnswering"),not.forEach(t),oSo=r(jye," (MPNet model)"),jye.forEach(t),rSo=i(P),x2=n(P,"LI",{});var Dye=s(x2);cle=n(Dye,"STRONG",{});var sot=s(cle);tSo=r(sot,"nystromformer"),sot.forEach(t),aSo=r(Dye," \u2014 "),ZD=n(Dye,"A",{href:!0});var lot=s(ZD);nSo=r(lot,"NystromformerForQuestionAnswering"),lot.forEach(t),sSo=r(Dye," (Nystromformer model)"),Dye.forEach(t),lSo=i(P),k2=n(P,"LI",{});var Nye=s(k2);fle=n(Nye,"STRONG",{});var iot=s(fle);iSo=r(iot,"qdqbert"),iot.forEach(t),dSo=r(Nye," \u2014 "),eN=n(Nye,"A",{href:!0});var dot=s(eN);cSo=r(dot,"QDQBertForQuestionAnswering"),dot.forEach(t),fSo=r(Nye," (QDQBert model)"),Nye.forEach(t),mSo=i(P),R2=n(P,"LI",{});var qye=s(R2);mle=n(qye,"STRONG",{});var cot=s(mle);gSo=r(cot,"reformer"),cot.forEach(t),hSo=r(qye," \u2014 "),oN=n(qye,"A",{href:!0});var fot=s(oN);pSo=r(fot,"ReformerForQuestionAnswering"),fot.forEach(t),_So=r(qye," (Reformer model)"),qye.forEach(t),uSo=i(P),S2=n(P,"LI",{});var Oye=s(S2);gle=n(Oye,"STRONG",{});var mot=s(gle);bSo=r(mot,"rembert"),mot.forEach(t),vSo=r(Oye," \u2014 "),rN=n(Oye,"A",{href:!0});var got=s(rN);TSo=r(got,"RemBertForQuestionAnswering"),got.forEach(t),FSo=r(Oye," (RemBERT model)"),Oye.forEach(t),CSo=i(P),P2=n(P,"LI",{});var Gye=s(P2);hle=n(Gye,"STRONG",{});var hot=s(hle);MSo=r(hot,"roberta"),hot.forEach(t),ESo=r(Gye," \u2014 "),tN=n(Gye,"A",{href:!0});var pot=s(tN);ySo=r(pot,"RobertaForQuestionAnswering"),pot.forEach(t),wSo=r(Gye," (RoBERTa model)"),Gye.forEach(t),ASo=i(P),$2=n(P,"LI",{});var Xye=s($2);ple=n(Xye,"STRONG",{});var _ot=s(ple);LSo=r(_ot,"roformer"),_ot.forEach(t),BSo=r(Xye," \u2014 "),aN=n(Xye,"A",{href:!0});var uot=s(aN);xSo=r(uot,"RoFormerForQuestionAnswering"),uot.forEach(t),kSo=r(Xye," (RoFormer model)"),Xye.forEach(t),RSo=i(P),I2=n(P,"LI",{});var Vye=s(I2);_le=n(Vye,"STRONG",{});var bot=s(_le);SSo=r(bot,"splinter"),bot.forEach(t),PSo=r(Vye," \u2014 "),nN=n(Vye,"A",{href:!0});var vot=s(nN);$So=r(vot,"SplinterForQuestionAnswering"),vot.forEach(t),ISo=r(Vye," (Splinter model)"),Vye.forEach(t),jSo=i(P),j2=n(P,"LI",{});var zye=s(j2);ule=n(zye,"STRONG",{});var Tot=s(ule);DSo=r(Tot,"squeezebert"),Tot.forEach(t),NSo=r(zye," \u2014 "),sN=n(zye,"A",{href:!0});var Fot=s(sN);qSo=r(Fot,"SqueezeBertForQuestionAnswering"),Fot.forEach(t),OSo=r(zye," (SqueezeBERT model)"),zye.forEach(t),GSo=i(P),D2=n(P,"LI",{});var Wye=s(D2);ble=n(Wye,"STRONG",{});var Cot=s(ble);XSo=r(Cot,"xlm"),Cot.forEach(t),VSo=r(Wye," \u2014 "),lN=n(Wye,"A",{href:!0});var Mot=s(lN);zSo=r(Mot,"XLMForQuestionAnsweringSimple"),Mot.forEach(t),WSo=r(Wye," (XLM model)"),Wye.forEach(t),QSo=i(P),N2=n(P,"LI",{});var Qye=s(N2);vle=n(Qye,"STRONG",{});var Eot=s(vle);HSo=r(Eot,"xlm-roberta"),Eot.forEach(t),USo=r(Qye," \u2014 "),iN=n(Qye,"A",{href:!0});var yot=s(iN);JSo=r(yot,"XLMRobertaForQuestionAnswering"),yot.forEach(t),YSo=r(Qye," (XLM-RoBERTa model)"),Qye.forEach(t),KSo=i(P),q2=n(P,"LI",{});var Hye=s(q2);Tle=n(Hye,"STRONG",{});var wot=s(Tle);ZSo=r(wot,"xlm-roberta-xl"),wot.forEach(t),ePo=r(Hye," \u2014 "),dN=n(Hye,"A",{href:!0});var Aot=s(dN);oPo=r(Aot,"XLMRobertaXLForQuestionAnswering"),Aot.forEach(t),rPo=r(Hye," (XLM-RoBERTa-XL model)"),Hye.forEach(t),tPo=i(P),O2=n(P,"LI",{});var Uye=s(O2);Fle=n(Uye,"STRONG",{});var Lot=s(Fle);aPo=r(Lot,"xlnet"),Lot.forEach(t),nPo=r(Uye," \u2014 "),cN=n(Uye,"A",{href:!0});var Bot=s(cN);sPo=r(Bot,"XLNetForQuestionAnsweringSimple"),Bot.forEach(t),lPo=r(Uye," (XLNet model)"),Uye.forEach(t),iPo=i(P),G2=n(P,"LI",{});var Jye=s(G2);Cle=n(Jye,"STRONG",{});var xot=s(Cle);dPo=r(xot,"yoso"),xot.forEach(t),cPo=r(Jye," \u2014 "),fN=n(Jye,"A",{href:!0});var kot=s(fN);fPo=r(kot,"YosoForQuestionAnswering"),kot.forEach(t),mPo=r(Jye," (YOSO model)"),Jye.forEach(t),P.forEach(t),gPo=i(Ut),X2=n(Ut,"P",{});var Yye=s(X2);hPo=r(Yye,"The model is set in evaluation mode by default using "),Mle=n(Yye,"CODE",{});var Rot=s(Mle);pPo=r(Rot,"model.eval()"),Rot.forEach(t),_Po=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=n(Yye,"CODE",{});var Sot=s(Ele);uPo=r(Sot,"model.train()"),Sot.forEach(t),Yye.forEach(t),bPo=i(Ut),yle=n(Ut,"P",{});var Pot=s(yle);vPo=r(Pot,"Examples:"),Pot.forEach(t),TPo=i(Ut),m(W3.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),oke=i(c),Ad=n(c,"H2",{class:!0});var cSe=s(Ad);V2=n(cSe,"A",{id:!0,class:!0,href:!0});var $ot=s(V2);wle=n($ot,"SPAN",{});var Iot=s(wle);m(Q3.$$.fragment,Iot),Iot.forEach(t),$ot.forEach(t),FPo=i(cSe),Ale=n(cSe,"SPAN",{});var jot=s(Ale);CPo=r(jot,"AutoModelForTableQuestionAnswering"),jot.forEach(t),cSe.forEach(t),rke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(H3.$$.fragment,gl),MPo=i(gl),Ld=n(gl,"P",{});var Zz=s(Ld);EPo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lle=n(Zz,"CODE",{});var Dot=s(Lle);yPo=r(Dot,"from_pretrained()"),Dot.forEach(t),wPo=r(Zz,"class method or the "),Ble=n(Zz,"CODE",{});var Not=s(Ble);APo=r(Not,"from_config()"),Not.forEach(t),LPo=r(Zz,`class
method.`),Zz.forEach(t),BPo=i(gl),U3=n(gl,"P",{});var fSe=s(U3);xPo=r(fSe,"This class cannot be instantiated directly using "),xle=n(fSe,"CODE",{});var qot=s(xle);kPo=r(qot,"__init__()"),qot.forEach(t),RPo=r(fSe," (throws an error)."),fSe.forEach(t),SPo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(J3.$$.fragment,hl),PPo=i(hl),kle=n(hl,"P",{});var Oot=s(kle);$Po=r(Oot,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Oot.forEach(t),IPo=i(hl),Bd=n(hl,"P",{});var eW=s(Bd);jPo=r(eW,`Note:
Loading a model from its configuration file does `),Rle=n(eW,"STRONG",{});var Got=s(Rle);DPo=r(Got,"not"),Got.forEach(t),NPo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=n(eW,"CODE",{});var Xot=s(Sle);qPo=r(Xot,"from_pretrained()"),Xot.forEach(t),OPo=r(eW,"to load the model weights."),eW.forEach(t),GPo=i(hl),Ple=n(hl,"P",{});var Vot=s(Ple);XPo=r(Vot,"Examples:"),Vot.forEach(t),VPo=i(hl),m(Y3.$$.fragment,hl),hl.forEach(t),zPo=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(K3.$$.fragment,Jt),WPo=i(Jt),$le=n(Jt,"P",{});var zot=s($le);QPo=r(zot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zot.forEach(t),HPo=i(Jt),en=n(Jt,"P",{});var f4=s(en);UPo=r(f4,"The model class to instantiate is selected based on the "),Ile=n(f4,"CODE",{});var Wot=s(Ile);JPo=r(Wot,"model_type"),Wot.forEach(t),YPo=r(f4,` property of the config object (either
passed as an argument or loaded from `),jle=n(f4,"CODE",{});var Qot=s(jle);KPo=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),ZPo=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=n(f4,"CODE",{});var Hot=s(Dle);e$o=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),o$o=r(f4,":"),f4.forEach(t),r$o=i(Jt),Nle=n(Jt,"UL",{});var Uot=s(Nle);z2=n(Uot,"LI",{});var Kye=s(z2);qle=n(Kye,"STRONG",{});var Jot=s(qle);t$o=r(Jot,"tapas"),Jot.forEach(t),a$o=r(Kye," \u2014 "),mN=n(Kye,"A",{href:!0});var Yot=s(mN);n$o=r(Yot,"TapasForQuestionAnswering"),Yot.forEach(t),s$o=r(Kye," (TAPAS model)"),Kye.forEach(t),Uot.forEach(t),l$o=i(Jt),W2=n(Jt,"P",{});var Zye=s(W2);i$o=r(Zye,"The model is set in evaluation mode by default using "),Ole=n(Zye,"CODE",{});var Kot=s(Ole);d$o=r(Kot,"model.eval()"),Kot.forEach(t),c$o=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(Zye,"CODE",{});var Zot=s(Gle);f$o=r(Zot,"model.train()"),Zot.forEach(t),Zye.forEach(t),m$o=i(Jt),Xle=n(Jt,"P",{});var ert=s(Xle);g$o=r(ert,"Examples:"),ert.forEach(t),h$o=i(Jt),m(Z3.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),tke=i(c),xd=n(c,"H2",{class:!0});var mSe=s(xd);Q2=n(mSe,"A",{id:!0,class:!0,href:!0});var ort=s(Q2);Vle=n(ort,"SPAN",{});var rrt=s(Vle);m(e5.$$.fragment,rrt),rrt.forEach(t),ort.forEach(t),p$o=i(mSe),zle=n(mSe,"SPAN",{});var trt=s(zle);_$o=r(trt,"AutoModelForImageClassification"),trt.forEach(t),mSe.forEach(t),ake=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(o5.$$.fragment,pl),u$o=i(pl),kd=n(pl,"P",{});var oW=s(kd);b$o=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wle=n(oW,"CODE",{});var art=s(Wle);v$o=r(art,"from_pretrained()"),art.forEach(t),T$o=r(oW,"class method or the "),Qle=n(oW,"CODE",{});var nrt=s(Qle);F$o=r(nrt,"from_config()"),nrt.forEach(t),C$o=r(oW,`class
method.`),oW.forEach(t),M$o=i(pl),r5=n(pl,"P",{});var gSe=s(r5);E$o=r(gSe,"This class cannot be instantiated directly using "),Hle=n(gSe,"CODE",{});var srt=s(Hle);y$o=r(srt,"__init__()"),srt.forEach(t),w$o=r(gSe," (throws an error)."),gSe.forEach(t),A$o=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(t5.$$.fragment,_l),L$o=i(_l),Ule=n(_l,"P",{});var lrt=s(Ule);B$o=r(lrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lrt.forEach(t),x$o=i(_l),Rd=n(_l,"P",{});var rW=s(Rd);k$o=r(rW,`Note:
Loading a model from its configuration file does `),Jle=n(rW,"STRONG",{});var irt=s(Jle);R$o=r(irt,"not"),irt.forEach(t),S$o=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=n(rW,"CODE",{});var drt=s(Yle);P$o=r(drt,"from_pretrained()"),drt.forEach(t),$$o=r(rW,"to load the model weights."),rW.forEach(t),I$o=i(_l),Kle=n(_l,"P",{});var crt=s(Kle);j$o=r(crt,"Examples:"),crt.forEach(t),D$o=i(_l),m(a5.$$.fragment,_l),_l.forEach(t),N$o=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(n5.$$.fragment,Yt),q$o=i(Yt),Zle=n(Yt,"P",{});var frt=s(Zle);O$o=r(frt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),frt.forEach(t),G$o=i(Yt),on=n(Yt,"P",{});var m4=s(on);X$o=r(m4,"The model class to instantiate is selected based on the "),eie=n(m4,"CODE",{});var mrt=s(eie);V$o=r(mrt,"model_type"),mrt.forEach(t),z$o=r(m4,` property of the config object (either
passed as an argument or loaded from `),oie=n(m4,"CODE",{});var grt=s(oie);W$o=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),Q$o=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(m4,"CODE",{});var hrt=s(rie);H$o=r(hrt,"pretrained_model_name_or_path"),hrt.forEach(t),U$o=r(m4,":"),m4.forEach(t),J$o=i(Yt),_e=n(Yt,"UL",{});var Ee=s(_e);H2=n(Ee,"LI",{});var ewe=s(H2);tie=n(ewe,"STRONG",{});var prt=s(tie);Y$o=r(prt,"beit"),prt.forEach(t),K$o=r(ewe," \u2014 "),gN=n(ewe,"A",{href:!0});var _rt=s(gN);Z$o=r(_rt,"BeitForImageClassification"),_rt.forEach(t),eIo=r(ewe," (BEiT model)"),ewe.forEach(t),oIo=i(Ee),U2=n(Ee,"LI",{});var owe=s(U2);aie=n(owe,"STRONG",{});var urt=s(aie);rIo=r(urt,"convnext"),urt.forEach(t),tIo=r(owe," \u2014 "),hN=n(owe,"A",{href:!0});var brt=s(hN);aIo=r(brt,"ConvNextForImageClassification"),brt.forEach(t),nIo=r(owe," (ConvNext model)"),owe.forEach(t),sIo=i(Ee),qs=n(Ee,"LI",{});var G8=s(qs);nie=n(G8,"STRONG",{});var vrt=s(nie);lIo=r(vrt,"deit"),vrt.forEach(t),iIo=r(G8," \u2014 "),pN=n(G8,"A",{href:!0});var Trt=s(pN);dIo=r(Trt,"DeiTForImageClassification"),Trt.forEach(t),cIo=r(G8," or "),_N=n(G8,"A",{href:!0});var Frt=s(_N);fIo=r(Frt,"DeiTForImageClassificationWithTeacher"),Frt.forEach(t),mIo=r(G8," (DeiT model)"),G8.forEach(t),gIo=i(Ee),J2=n(Ee,"LI",{});var rwe=s(J2);sie=n(rwe,"STRONG",{});var Crt=s(sie);hIo=r(Crt,"imagegpt"),Crt.forEach(t),pIo=r(rwe," \u2014 "),uN=n(rwe,"A",{href:!0});var Mrt=s(uN);_Io=r(Mrt,"ImageGPTForImageClassification"),Mrt.forEach(t),uIo=r(rwe," (ImageGPT model)"),rwe.forEach(t),bIo=i(Ee),ma=n(Ee,"LI",{});var $f=s(ma);lie=n($f,"STRONG",{});var Ert=s(lie);vIo=r(Ert,"perceiver"),Ert.forEach(t),TIo=r($f," \u2014 "),bN=n($f,"A",{href:!0});var yrt=s(bN);FIo=r(yrt,"PerceiverForImageClassificationLearned"),yrt.forEach(t),CIo=r($f," or "),vN=n($f,"A",{href:!0});var wrt=s(vN);MIo=r(wrt,"PerceiverForImageClassificationFourier"),wrt.forEach(t),EIo=r($f," or "),TN=n($f,"A",{href:!0});var Art=s(TN);yIo=r(Art,"PerceiverForImageClassificationConvProcessing"),Art.forEach(t),wIo=r($f," (Perceiver model)"),$f.forEach(t),AIo=i(Ee),Y2=n(Ee,"LI",{});var twe=s(Y2);iie=n(twe,"STRONG",{});var Lrt=s(iie);LIo=r(Lrt,"poolformer"),Lrt.forEach(t),BIo=r(twe," \u2014 "),FN=n(twe,"A",{href:!0});var Brt=s(FN);xIo=r(Brt,"PoolFormerForImageClassification"),Brt.forEach(t),kIo=r(twe," (PoolFormer model)"),twe.forEach(t),RIo=i(Ee),K2=n(Ee,"LI",{});var awe=s(K2);die=n(awe,"STRONG",{});var xrt=s(die);SIo=r(xrt,"resnet"),xrt.forEach(t),PIo=r(awe," \u2014 "),CN=n(awe,"A",{href:!0});var krt=s(CN);$Io=r(krt,"ResNetForImageClassification"),krt.forEach(t),IIo=r(awe," (ResNet model)"),awe.forEach(t),jIo=i(Ee),Z2=n(Ee,"LI",{});var nwe=s(Z2);cie=n(nwe,"STRONG",{});var Rrt=s(cie);DIo=r(Rrt,"segformer"),Rrt.forEach(t),NIo=r(nwe," \u2014 "),MN=n(nwe,"A",{href:!0});var Srt=s(MN);qIo=r(Srt,"SegformerForImageClassification"),Srt.forEach(t),OIo=r(nwe," (SegFormer model)"),nwe.forEach(t),GIo=i(Ee),ev=n(Ee,"LI",{});var swe=s(ev);fie=n(swe,"STRONG",{});var Prt=s(fie);XIo=r(Prt,"swin"),Prt.forEach(t),VIo=r(swe," \u2014 "),EN=n(swe,"A",{href:!0});var $rt=s(EN);zIo=r($rt,"SwinForImageClassification"),$rt.forEach(t),WIo=r(swe," (Swin model)"),swe.forEach(t),QIo=i(Ee),ov=n(Ee,"LI",{});var lwe=s(ov);mie=n(lwe,"STRONG",{});var Irt=s(mie);HIo=r(Irt,"vit"),Irt.forEach(t),UIo=r(lwe," \u2014 "),yN=n(lwe,"A",{href:!0});var jrt=s(yN);JIo=r(jrt,"ViTForImageClassification"),jrt.forEach(t),YIo=r(lwe," (ViT model)"),lwe.forEach(t),Ee.forEach(t),KIo=i(Yt),rv=n(Yt,"P",{});var iwe=s(rv);ZIo=r(iwe,"The model is set in evaluation mode by default using "),gie=n(iwe,"CODE",{});var Drt=s(gie);ejo=r(Drt,"model.eval()"),Drt.forEach(t),ojo=r(iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(iwe,"CODE",{});var Nrt=s(hie);rjo=r(Nrt,"model.train()"),Nrt.forEach(t),iwe.forEach(t),tjo=i(Yt),pie=n(Yt,"P",{});var qrt=s(pie);ajo=r(qrt,"Examples:"),qrt.forEach(t),njo=i(Yt),m(s5.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),nke=i(c),Sd=n(c,"H2",{class:!0});var hSe=s(Sd);tv=n(hSe,"A",{id:!0,class:!0,href:!0});var Ort=s(tv);_ie=n(Ort,"SPAN",{});var Grt=s(_ie);m(l5.$$.fragment,Grt),Grt.forEach(t),Ort.forEach(t),sjo=i(hSe),uie=n(hSe,"SPAN",{});var Xrt=s(uie);ljo=r(Xrt,"AutoModelForVision2Seq"),Xrt.forEach(t),hSe.forEach(t),ske=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(i5.$$.fragment,ul),ijo=i(ul),Pd=n(ul,"P",{});var tW=s(Pd);djo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bie=n(tW,"CODE",{});var Vrt=s(bie);cjo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),fjo=r(tW,"class method or the "),vie=n(tW,"CODE",{});var zrt=s(vie);mjo=r(zrt,"from_config()"),zrt.forEach(t),gjo=r(tW,`class
method.`),tW.forEach(t),hjo=i(ul),d5=n(ul,"P",{});var pSe=s(d5);pjo=r(pSe,"This class cannot be instantiated directly using "),Tie=n(pSe,"CODE",{});var Wrt=s(Tie);_jo=r(Wrt,"__init__()"),Wrt.forEach(t),ujo=r(pSe," (throws an error)."),pSe.forEach(t),bjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(c5.$$.fragment,bl),vjo=i(bl),Fie=n(bl,"P",{});var Qrt=s(Fie);Tjo=r(Qrt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qrt.forEach(t),Fjo=i(bl),$d=n(bl,"P",{});var aW=s($d);Cjo=r(aW,`Note:
Loading a model from its configuration file does `),Cie=n(aW,"STRONG",{});var Hrt=s(Cie);Mjo=r(Hrt,"not"),Hrt.forEach(t),Ejo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(aW,"CODE",{});var Urt=s(Mie);yjo=r(Urt,"from_pretrained()"),Urt.forEach(t),wjo=r(aW,"to load the model weights."),aW.forEach(t),Ajo=i(bl),Eie=n(bl,"P",{});var Jrt=s(Eie);Ljo=r(Jrt,"Examples:"),Jrt.forEach(t),Bjo=i(bl),m(f5.$$.fragment,bl),bl.forEach(t),xjo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(m5.$$.fragment,Kt),kjo=i(Kt),yie=n(Kt,"P",{});var Yrt=s(yie);Rjo=r(Yrt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yrt.forEach(t),Sjo=i(Kt),rn=n(Kt,"P",{});var g4=s(rn);Pjo=r(g4,"The model class to instantiate is selected based on the "),wie=n(g4,"CODE",{});var Krt=s(wie);$jo=r(Krt,"model_type"),Krt.forEach(t),Ijo=r(g4,` property of the config object (either
passed as an argument or loaded from `),Aie=n(g4,"CODE",{});var Zrt=s(Aie);jjo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),Djo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(g4,"CODE",{});var ett=s(Lie);Njo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),qjo=r(g4,":"),g4.forEach(t),Ojo=i(Kt),Bie=n(Kt,"UL",{});var ott=s(Bie);av=n(ott,"LI",{});var dwe=s(av);xie=n(dwe,"STRONG",{});var rtt=s(xie);Gjo=r(rtt,"vision-encoder-decoder"),rtt.forEach(t),Xjo=r(dwe," \u2014 "),wN=n(dwe,"A",{href:!0});var ttt=s(wN);Vjo=r(ttt,"VisionEncoderDecoderModel"),ttt.forEach(t),zjo=r(dwe," (Vision Encoder decoder model)"),dwe.forEach(t),ott.forEach(t),Wjo=i(Kt),nv=n(Kt,"P",{});var cwe=s(nv);Qjo=r(cwe,"The model is set in evaluation mode by default using "),kie=n(cwe,"CODE",{});var att=s(kie);Hjo=r(att,"model.eval()"),att.forEach(t),Ujo=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=n(cwe,"CODE",{});var ntt=s(Rie);Jjo=r(ntt,"model.train()"),ntt.forEach(t),cwe.forEach(t),Yjo=i(Kt),Sie=n(Kt,"P",{});var stt=s(Sie);Kjo=r(stt,"Examples:"),stt.forEach(t),Zjo=i(Kt),m(g5.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),lke=i(c),Id=n(c,"H2",{class:!0});var _Se=s(Id);sv=n(_Se,"A",{id:!0,class:!0,href:!0});var ltt=s(sv);Pie=n(ltt,"SPAN",{});var itt=s(Pie);m(h5.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),eDo=i(_Se),$ie=n(_Se,"SPAN",{});var dtt=s($ie);oDo=r(dtt,"AutoModelForAudioClassification"),dtt.forEach(t),_Se.forEach(t),ike=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(p5.$$.fragment,vl),rDo=i(vl),jd=n(vl,"P",{});var nW=s(jd);tDo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Iie=n(nW,"CODE",{});var ctt=s(Iie);aDo=r(ctt,"from_pretrained()"),ctt.forEach(t),nDo=r(nW,"class method or the "),jie=n(nW,"CODE",{});var ftt=s(jie);sDo=r(ftt,"from_config()"),ftt.forEach(t),lDo=r(nW,`class
method.`),nW.forEach(t),iDo=i(vl),_5=n(vl,"P",{});var uSe=s(_5);dDo=r(uSe,"This class cannot be instantiated directly using "),Die=n(uSe,"CODE",{});var mtt=s(Die);cDo=r(mtt,"__init__()"),mtt.forEach(t),fDo=r(uSe," (throws an error)."),uSe.forEach(t),mDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(u5.$$.fragment,Tl),gDo=i(Tl),Nie=n(Tl,"P",{});var gtt=s(Nie);hDo=r(gtt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gtt.forEach(t),pDo=i(Tl),Dd=n(Tl,"P",{});var sW=s(Dd);_Do=r(sW,`Note:
Loading a model from its configuration file does `),qie=n(sW,"STRONG",{});var htt=s(qie);uDo=r(htt,"not"),htt.forEach(t),bDo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=n(sW,"CODE",{});var ptt=s(Oie);vDo=r(ptt,"from_pretrained()"),ptt.forEach(t),TDo=r(sW,"to load the model weights."),sW.forEach(t),FDo=i(Tl),Gie=n(Tl,"P",{});var _tt=s(Gie);CDo=r(_tt,"Examples:"),_tt.forEach(t),MDo=i(Tl),m(b5.$$.fragment,Tl),Tl.forEach(t),EDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(v5.$$.fragment,Zt),yDo=i(Zt),Xie=n(Zt,"P",{});var utt=s(Xie);wDo=r(utt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),utt.forEach(t),ADo=i(Zt),tn=n(Zt,"P",{});var h4=s(tn);LDo=r(h4,"The model class to instantiate is selected based on the "),Vie=n(h4,"CODE",{});var btt=s(Vie);BDo=r(btt,"model_type"),btt.forEach(t),xDo=r(h4,` property of the config object (either
passed as an argument or loaded from `),zie=n(h4,"CODE",{});var vtt=s(zie);kDo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),RDo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(h4,"CODE",{});var Ttt=s(Wie);SDo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),PDo=r(h4,":"),h4.forEach(t),$Do=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);lv=n(qo,"LI",{});var fwe=s(lv);Qie=n(fwe,"STRONG",{});var Ftt=s(Qie);IDo=r(Ftt,"data2vec-audio"),Ftt.forEach(t),jDo=r(fwe," \u2014 "),AN=n(fwe,"A",{href:!0});var Ctt=s(AN);DDo=r(Ctt,"Data2VecAudioForSequenceClassification"),Ctt.forEach(t),NDo=r(fwe," (Data2VecAudio model)"),fwe.forEach(t),qDo=i(qo),iv=n(qo,"LI",{});var mwe=s(iv);Hie=n(mwe,"STRONG",{});var Mtt=s(Hie);ODo=r(Mtt,"hubert"),Mtt.forEach(t),GDo=r(mwe," \u2014 "),LN=n(mwe,"A",{href:!0});var Ett=s(LN);XDo=r(Ett,"HubertForSequenceClassification"),Ett.forEach(t),VDo=r(mwe," (Hubert model)"),mwe.forEach(t),zDo=i(qo),dv=n(qo,"LI",{});var gwe=s(dv);Uie=n(gwe,"STRONG",{});var ytt=s(Uie);WDo=r(ytt,"sew"),ytt.forEach(t),QDo=r(gwe," \u2014 "),BN=n(gwe,"A",{href:!0});var wtt=s(BN);HDo=r(wtt,"SEWForSequenceClassification"),wtt.forEach(t),UDo=r(gwe," (SEW model)"),gwe.forEach(t),JDo=i(qo),cv=n(qo,"LI",{});var hwe=s(cv);Jie=n(hwe,"STRONG",{});var Att=s(Jie);YDo=r(Att,"sew-d"),Att.forEach(t),KDo=r(hwe," \u2014 "),xN=n(hwe,"A",{href:!0});var Ltt=s(xN);ZDo=r(Ltt,"SEWDForSequenceClassification"),Ltt.forEach(t),eNo=r(hwe," (SEW-D model)"),hwe.forEach(t),oNo=i(qo),fv=n(qo,"LI",{});var pwe=s(fv);Yie=n(pwe,"STRONG",{});var Btt=s(Yie);rNo=r(Btt,"unispeech"),Btt.forEach(t),tNo=r(pwe," \u2014 "),kN=n(pwe,"A",{href:!0});var xtt=s(kN);aNo=r(xtt,"UniSpeechForSequenceClassification"),xtt.forEach(t),nNo=r(pwe," (UniSpeech model)"),pwe.forEach(t),sNo=i(qo),mv=n(qo,"LI",{});var _we=s(mv);Kie=n(_we,"STRONG",{});var ktt=s(Kie);lNo=r(ktt,"unispeech-sat"),ktt.forEach(t),iNo=r(_we," \u2014 "),RN=n(_we,"A",{href:!0});var Rtt=s(RN);dNo=r(Rtt,"UniSpeechSatForSequenceClassification"),Rtt.forEach(t),cNo=r(_we," (UniSpeechSat model)"),_we.forEach(t),fNo=i(qo),gv=n(qo,"LI",{});var uwe=s(gv);Zie=n(uwe,"STRONG",{});var Stt=s(Zie);mNo=r(Stt,"wav2vec2"),Stt.forEach(t),gNo=r(uwe," \u2014 "),SN=n(uwe,"A",{href:!0});var Ptt=s(SN);hNo=r(Ptt,"Wav2Vec2ForSequenceClassification"),Ptt.forEach(t),pNo=r(uwe," (Wav2Vec2 model)"),uwe.forEach(t),_No=i(qo),hv=n(qo,"LI",{});var bwe=s(hv);ede=n(bwe,"STRONG",{});var $tt=s(ede);uNo=r($tt,"wavlm"),$tt.forEach(t),bNo=r(bwe," \u2014 "),PN=n(bwe,"A",{href:!0});var Itt=s(PN);vNo=r(Itt,"WavLMForSequenceClassification"),Itt.forEach(t),TNo=r(bwe," (WavLM model)"),bwe.forEach(t),qo.forEach(t),FNo=i(Zt),pv=n(Zt,"P",{});var vwe=s(pv);CNo=r(vwe,"The model is set in evaluation mode by default using "),ode=n(vwe,"CODE",{});var jtt=s(ode);MNo=r(jtt,"model.eval()"),jtt.forEach(t),ENo=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(vwe,"CODE",{});var Dtt=s(rde);yNo=r(Dtt,"model.train()"),Dtt.forEach(t),vwe.forEach(t),wNo=i(Zt),tde=n(Zt,"P",{});var Ntt=s(tde);ANo=r(Ntt,"Examples:"),Ntt.forEach(t),LNo=i(Zt),m(T5.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),dke=i(c),Nd=n(c,"H2",{class:!0});var bSe=s(Nd);_v=n(bSe,"A",{id:!0,class:!0,href:!0});var qtt=s(_v);ade=n(qtt,"SPAN",{});var Ott=s(ade);m(F5.$$.fragment,Ott),Ott.forEach(t),qtt.forEach(t),BNo=i(bSe),nde=n(bSe,"SPAN",{});var Gtt=s(nde);xNo=r(Gtt,"AutoModelForAudioFrameClassification"),Gtt.forEach(t),bSe.forEach(t),cke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(C5.$$.fragment,Fl),kNo=i(Fl),qd=n(Fl,"P",{});var lW=s(qd);RNo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sde=n(lW,"CODE",{});var Xtt=s(sde);SNo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),PNo=r(lW,"class method or the "),lde=n(lW,"CODE",{});var Vtt=s(lde);$No=r(Vtt,"from_config()"),Vtt.forEach(t),INo=r(lW,`class
method.`),lW.forEach(t),jNo=i(Fl),M5=n(Fl,"P",{});var vSe=s(M5);DNo=r(vSe,"This class cannot be instantiated directly using "),ide=n(vSe,"CODE",{});var ztt=s(ide);NNo=r(ztt,"__init__()"),ztt.forEach(t),qNo=r(vSe," (throws an error)."),vSe.forEach(t),ONo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(E5.$$.fragment,Cl),GNo=i(Cl),dde=n(Cl,"P",{});var Wtt=s(dde);XNo=r(Wtt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wtt.forEach(t),VNo=i(Cl),Od=n(Cl,"P",{});var iW=s(Od);zNo=r(iW,`Note:
Loading a model from its configuration file does `),cde=n(iW,"STRONG",{});var Qtt=s(cde);WNo=r(Qtt,"not"),Qtt.forEach(t),QNo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=n(iW,"CODE",{});var Htt=s(fde);HNo=r(Htt,"from_pretrained()"),Htt.forEach(t),UNo=r(iW,"to load the model weights."),iW.forEach(t),JNo=i(Cl),mde=n(Cl,"P",{});var Utt=s(mde);YNo=r(Utt,"Examples:"),Utt.forEach(t),KNo=i(Cl),m(y5.$$.fragment,Cl),Cl.forEach(t),ZNo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(w5.$$.fragment,ea),eqo=i(ea),gde=n(ea,"P",{});var Jtt=s(gde);oqo=r(Jtt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jtt.forEach(t),rqo=i(ea),an=n(ea,"P",{});var p4=s(an);tqo=r(p4,"The model class to instantiate is selected based on the "),hde=n(p4,"CODE",{});var Ytt=s(hde);aqo=r(Ytt,"model_type"),Ytt.forEach(t),nqo=r(p4,` property of the config object (either
passed as an argument or loaded from `),pde=n(p4,"CODE",{});var Ktt=s(pde);sqo=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),lqo=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=n(p4,"CODE",{});var Ztt=s(_de);iqo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),dqo=r(p4,":"),p4.forEach(t),cqo=i(ea),nn=n(ea,"UL",{});var _4=s(nn);uv=n(_4,"LI",{});var Twe=s(uv);ude=n(Twe,"STRONG",{});var eat=s(ude);fqo=r(eat,"data2vec-audio"),eat.forEach(t),mqo=r(Twe," \u2014 "),$N=n(Twe,"A",{href:!0});var oat=s($N);gqo=r(oat,"Data2VecAudioForAudioFrameClassification"),oat.forEach(t),hqo=r(Twe," (Data2VecAudio model)"),Twe.forEach(t),pqo=i(_4),bv=n(_4,"LI",{});var Fwe=s(bv);bde=n(Fwe,"STRONG",{});var rat=s(bde);_qo=r(rat,"unispeech-sat"),rat.forEach(t),uqo=r(Fwe," \u2014 "),IN=n(Fwe,"A",{href:!0});var tat=s(IN);bqo=r(tat,"UniSpeechSatForAudioFrameClassification"),tat.forEach(t),vqo=r(Fwe," (UniSpeechSat model)"),Fwe.forEach(t),Tqo=i(_4),vv=n(_4,"LI",{});var Cwe=s(vv);vde=n(Cwe,"STRONG",{});var aat=s(vde);Fqo=r(aat,"wav2vec2"),aat.forEach(t),Cqo=r(Cwe," \u2014 "),jN=n(Cwe,"A",{href:!0});var nat=s(jN);Mqo=r(nat,"Wav2Vec2ForAudioFrameClassification"),nat.forEach(t),Eqo=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),yqo=i(_4),Tv=n(_4,"LI",{});var Mwe=s(Tv);Tde=n(Mwe,"STRONG",{});var sat=s(Tde);wqo=r(sat,"wavlm"),sat.forEach(t),Aqo=r(Mwe," \u2014 "),DN=n(Mwe,"A",{href:!0});var lat=s(DN);Lqo=r(lat,"WavLMForAudioFrameClassification"),lat.forEach(t),Bqo=r(Mwe," (WavLM model)"),Mwe.forEach(t),_4.forEach(t),xqo=i(ea),Fv=n(ea,"P",{});var Ewe=s(Fv);kqo=r(Ewe,"The model is set in evaluation mode by default using "),Fde=n(Ewe,"CODE",{});var iat=s(Fde);Rqo=r(iat,"model.eval()"),iat.forEach(t),Sqo=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(Ewe,"CODE",{});var dat=s(Cde);Pqo=r(dat,"model.train()"),dat.forEach(t),Ewe.forEach(t),$qo=i(ea),Mde=n(ea,"P",{});var cat=s(Mde);Iqo=r(cat,"Examples:"),cat.forEach(t),jqo=i(ea),m(A5.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),fke=i(c),Gd=n(c,"H2",{class:!0});var TSe=s(Gd);Cv=n(TSe,"A",{id:!0,class:!0,href:!0});var fat=s(Cv);Ede=n(fat,"SPAN",{});var mat=s(Ede);m(L5.$$.fragment,mat),mat.forEach(t),fat.forEach(t),Dqo=i(TSe),yde=n(TSe,"SPAN",{});var gat=s(yde);Nqo=r(gat,"AutoModelForCTC"),gat.forEach(t),TSe.forEach(t),mke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(B5.$$.fragment,Ml),qqo=i(Ml),Xd=n(Ml,"P",{});var dW=s(Xd);Oqo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wde=n(dW,"CODE",{});var hat=s(wde);Gqo=r(hat,"from_pretrained()"),hat.forEach(t),Xqo=r(dW,"class method or the "),Ade=n(dW,"CODE",{});var pat=s(Ade);Vqo=r(pat,"from_config()"),pat.forEach(t),zqo=r(dW,`class
method.`),dW.forEach(t),Wqo=i(Ml),x5=n(Ml,"P",{});var FSe=s(x5);Qqo=r(FSe,"This class cannot be instantiated directly using "),Lde=n(FSe,"CODE",{});var _at=s(Lde);Hqo=r(_at,"__init__()"),_at.forEach(t),Uqo=r(FSe," (throws an error)."),FSe.forEach(t),Jqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(k5.$$.fragment,El),Yqo=i(El),Bde=n(El,"P",{});var uat=s(Bde);Kqo=r(uat,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uat.forEach(t),Zqo=i(El),Vd=n(El,"P",{});var cW=s(Vd);eOo=r(cW,`Note:
Loading a model from its configuration file does `),xde=n(cW,"STRONG",{});var bat=s(xde);oOo=r(bat,"not"),bat.forEach(t),rOo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(cW,"CODE",{});var vat=s(kde);tOo=r(vat,"from_pretrained()"),vat.forEach(t),aOo=r(cW,"to load the model weights."),cW.forEach(t),nOo=i(El),Rde=n(El,"P",{});var Tat=s(Rde);sOo=r(Tat,"Examples:"),Tat.forEach(t),lOo=i(El),m(R5.$$.fragment,El),El.forEach(t),iOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(S5.$$.fragment,oa),dOo=i(oa),Sde=n(oa,"P",{});var Fat=s(Sde);cOo=r(Fat,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fat.forEach(t),fOo=i(oa),sn=n(oa,"P",{});var u4=s(sn);mOo=r(u4,"The model class to instantiate is selected based on the "),Pde=n(u4,"CODE",{});var Cat=s(Pde);gOo=r(Cat,"model_type"),Cat.forEach(t),hOo=r(u4,` property of the config object (either
passed as an argument or loaded from `),$de=n(u4,"CODE",{});var Mat=s($de);pOo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),_Oo=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(u4,"CODE",{});var Eat=s(Ide);uOo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),bOo=r(u4,":"),u4.forEach(t),vOo=i(oa),Re=n(oa,"UL",{});var Oo=s(Re);Mv=n(Oo,"LI",{});var ywe=s(Mv);jde=n(ywe,"STRONG",{});var yat=s(jde);TOo=r(yat,"data2vec-audio"),yat.forEach(t),FOo=r(ywe," \u2014 "),NN=n(ywe,"A",{href:!0});var wat=s(NN);COo=r(wat,"Data2VecAudioForCTC"),wat.forEach(t),MOo=r(ywe," (Data2VecAudio model)"),ywe.forEach(t),EOo=i(Oo),Ev=n(Oo,"LI",{});var wwe=s(Ev);Dde=n(wwe,"STRONG",{});var Aat=s(Dde);yOo=r(Aat,"hubert"),Aat.forEach(t),wOo=r(wwe," \u2014 "),qN=n(wwe,"A",{href:!0});var Lat=s(qN);AOo=r(Lat,"HubertForCTC"),Lat.forEach(t),LOo=r(wwe," (Hubert model)"),wwe.forEach(t),BOo=i(Oo),yv=n(Oo,"LI",{});var Awe=s(yv);Nde=n(Awe,"STRONG",{});var Bat=s(Nde);xOo=r(Bat,"sew"),Bat.forEach(t),kOo=r(Awe," \u2014 "),ON=n(Awe,"A",{href:!0});var xat=s(ON);ROo=r(xat,"SEWForCTC"),xat.forEach(t),SOo=r(Awe," (SEW model)"),Awe.forEach(t),POo=i(Oo),wv=n(Oo,"LI",{});var Lwe=s(wv);qde=n(Lwe,"STRONG",{});var kat=s(qde);$Oo=r(kat,"sew-d"),kat.forEach(t),IOo=r(Lwe," \u2014 "),GN=n(Lwe,"A",{href:!0});var Rat=s(GN);jOo=r(Rat,"SEWDForCTC"),Rat.forEach(t),DOo=r(Lwe," (SEW-D model)"),Lwe.forEach(t),NOo=i(Oo),Av=n(Oo,"LI",{});var Bwe=s(Av);Ode=n(Bwe,"STRONG",{});var Sat=s(Ode);qOo=r(Sat,"unispeech"),Sat.forEach(t),OOo=r(Bwe," \u2014 "),XN=n(Bwe,"A",{href:!0});var Pat=s(XN);GOo=r(Pat,"UniSpeechForCTC"),Pat.forEach(t),XOo=r(Bwe," (UniSpeech model)"),Bwe.forEach(t),VOo=i(Oo),Lv=n(Oo,"LI",{});var xwe=s(Lv);Gde=n(xwe,"STRONG",{});var $at=s(Gde);zOo=r($at,"unispeech-sat"),$at.forEach(t),WOo=r(xwe," \u2014 "),VN=n(xwe,"A",{href:!0});var Iat=s(VN);QOo=r(Iat,"UniSpeechSatForCTC"),Iat.forEach(t),HOo=r(xwe," (UniSpeechSat model)"),xwe.forEach(t),UOo=i(Oo),Bv=n(Oo,"LI",{});var kwe=s(Bv);Xde=n(kwe,"STRONG",{});var jat=s(Xde);JOo=r(jat,"wav2vec2"),jat.forEach(t),YOo=r(kwe," \u2014 "),zN=n(kwe,"A",{href:!0});var Dat=s(zN);KOo=r(Dat,"Wav2Vec2ForCTC"),Dat.forEach(t),ZOo=r(kwe," (Wav2Vec2 model)"),kwe.forEach(t),eGo=i(Oo),xv=n(Oo,"LI",{});var Rwe=s(xv);Vde=n(Rwe,"STRONG",{});var Nat=s(Vde);oGo=r(Nat,"wavlm"),Nat.forEach(t),rGo=r(Rwe," \u2014 "),WN=n(Rwe,"A",{href:!0});var qat=s(WN);tGo=r(qat,"WavLMForCTC"),qat.forEach(t),aGo=r(Rwe," (WavLM model)"),Rwe.forEach(t),Oo.forEach(t),nGo=i(oa),kv=n(oa,"P",{});var Swe=s(kv);sGo=r(Swe,"The model is set in evaluation mode by default using "),zde=n(Swe,"CODE",{});var Oat=s(zde);lGo=r(Oat,"model.eval()"),Oat.forEach(t),iGo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(Swe,"CODE",{});var Gat=s(Wde);dGo=r(Gat,"model.train()"),Gat.forEach(t),Swe.forEach(t),cGo=i(oa),Qde=n(oa,"P",{});var Xat=s(Qde);fGo=r(Xat,"Examples:"),Xat.forEach(t),mGo=i(oa),m(P5.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),gke=i(c),zd=n(c,"H2",{class:!0});var CSe=s(zd);Rv=n(CSe,"A",{id:!0,class:!0,href:!0});var Vat=s(Rv);Hde=n(Vat,"SPAN",{});var zat=s(Hde);m($5.$$.fragment,zat),zat.forEach(t),Vat.forEach(t),gGo=i(CSe),Ude=n(CSe,"SPAN",{});var Wat=s(Ude);hGo=r(Wat,"AutoModelForSpeechSeq2Seq"),Wat.forEach(t),CSe.forEach(t),hke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(I5.$$.fragment,yl),pGo=i(yl),Wd=n(yl,"P",{});var fW=s(Wd);_Go=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jde=n(fW,"CODE",{});var Qat=s(Jde);uGo=r(Qat,"from_pretrained()"),Qat.forEach(t),bGo=r(fW,"class method or the "),Yde=n(fW,"CODE",{});var Hat=s(Yde);vGo=r(Hat,"from_config()"),Hat.forEach(t),TGo=r(fW,`class
method.`),fW.forEach(t),FGo=i(yl),j5=n(yl,"P",{});var MSe=s(j5);CGo=r(MSe,"This class cannot be instantiated directly using "),Kde=n(MSe,"CODE",{});var Uat=s(Kde);MGo=r(Uat,"__init__()"),Uat.forEach(t),EGo=r(MSe," (throws an error)."),MSe.forEach(t),yGo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(D5.$$.fragment,wl),wGo=i(wl),Zde=n(wl,"P",{});var Jat=s(Zde);AGo=r(Jat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jat.forEach(t),LGo=i(wl),Qd=n(wl,"P",{});var mW=s(Qd);BGo=r(mW,`Note:
Loading a model from its configuration file does `),ece=n(mW,"STRONG",{});var Yat=s(ece);xGo=r(Yat,"not"),Yat.forEach(t),kGo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(mW,"CODE",{});var Kat=s(oce);RGo=r(Kat,"from_pretrained()"),Kat.forEach(t),SGo=r(mW,"to load the model weights."),mW.forEach(t),PGo=i(wl),rce=n(wl,"P",{});var Zat=s(rce);$Go=r(Zat,"Examples:"),Zat.forEach(t),IGo=i(wl),m(N5.$$.fragment,wl),wl.forEach(t),jGo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(q5.$$.fragment,ra),DGo=i(ra),tce=n(ra,"P",{});var ent=s(tce);NGo=r(ent,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ent.forEach(t),qGo=i(ra),ln=n(ra,"P",{});var b4=s(ln);OGo=r(b4,"The model class to instantiate is selected based on the "),ace=n(b4,"CODE",{});var ont=s(ace);GGo=r(ont,"model_type"),ont.forEach(t),XGo=r(b4,` property of the config object (either
passed as an argument or loaded from `),nce=n(b4,"CODE",{});var rnt=s(nce);VGo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),zGo=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(b4,"CODE",{});var tnt=s(sce);WGo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),QGo=r(b4,":"),b4.forEach(t),HGo=i(ra),O5=n(ra,"UL",{});var ESe=s(O5);Sv=n(ESe,"LI",{});var Pwe=s(Sv);lce=n(Pwe,"STRONG",{});var ant=s(lce);UGo=r(ant,"speech-encoder-decoder"),ant.forEach(t),JGo=r(Pwe," \u2014 "),QN=n(Pwe,"A",{href:!0});var nnt=s(QN);YGo=r(nnt,"SpeechEncoderDecoderModel"),nnt.forEach(t),KGo=r(Pwe," (Speech Encoder decoder model)"),Pwe.forEach(t),ZGo=i(ESe),Pv=n(ESe,"LI",{});var $we=s(Pv);ice=n($we,"STRONG",{});var snt=s(ice);eXo=r(snt,"speech_to_text"),snt.forEach(t),oXo=r($we," \u2014 "),HN=n($we,"A",{href:!0});var lnt=s(HN);rXo=r(lnt,"Speech2TextForConditionalGeneration"),lnt.forEach(t),tXo=r($we," (Speech2Text model)"),$we.forEach(t),ESe.forEach(t),aXo=i(ra),$v=n(ra,"P",{});var Iwe=s($v);nXo=r(Iwe,"The model is set in evaluation mode by default using "),dce=n(Iwe,"CODE",{});var int=s(dce);sXo=r(int,"model.eval()"),int.forEach(t),lXo=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=n(Iwe,"CODE",{});var dnt=s(cce);iXo=r(dnt,"model.train()"),dnt.forEach(t),Iwe.forEach(t),dXo=i(ra),fce=n(ra,"P",{});var cnt=s(fce);cXo=r(cnt,"Examples:"),cnt.forEach(t),fXo=i(ra),m(G5.$$.fragment,ra),ra.forEach(t),yl.forEach(t),pke=i(c),Hd=n(c,"H2",{class:!0});var ySe=s(Hd);Iv=n(ySe,"A",{id:!0,class:!0,href:!0});var fnt=s(Iv);mce=n(fnt,"SPAN",{});var mnt=s(mce);m(X5.$$.fragment,mnt),mnt.forEach(t),fnt.forEach(t),mXo=i(ySe),gce=n(ySe,"SPAN",{});var gnt=s(gce);gXo=r(gnt,"AutoModelForAudioXVector"),gnt.forEach(t),ySe.forEach(t),_ke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(V5.$$.fragment,Al),hXo=i(Al),Ud=n(Al,"P",{});var gW=s(Ud);pXo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hce=n(gW,"CODE",{});var hnt=s(hce);_Xo=r(hnt,"from_pretrained()"),hnt.forEach(t),uXo=r(gW,"class method or the "),pce=n(gW,"CODE",{});var pnt=s(pce);bXo=r(pnt,"from_config()"),pnt.forEach(t),vXo=r(gW,`class
method.`),gW.forEach(t),TXo=i(Al),z5=n(Al,"P",{});var wSe=s(z5);FXo=r(wSe,"This class cannot be instantiated directly using "),_ce=n(wSe,"CODE",{});var _nt=s(_ce);CXo=r(_nt,"__init__()"),_nt.forEach(t),MXo=r(wSe," (throws an error)."),wSe.forEach(t),EXo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(W5.$$.fragment,Ll),yXo=i(Ll),uce=n(Ll,"P",{});var unt=s(uce);wXo=r(unt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),unt.forEach(t),AXo=i(Ll),Jd=n(Ll,"P",{});var hW=s(Jd);LXo=r(hW,`Note:
Loading a model from its configuration file does `),bce=n(hW,"STRONG",{});var bnt=s(bce);BXo=r(bnt,"not"),bnt.forEach(t),xXo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=n(hW,"CODE",{});var vnt=s(vce);kXo=r(vnt,"from_pretrained()"),vnt.forEach(t),RXo=r(hW,"to load the model weights."),hW.forEach(t),SXo=i(Ll),Tce=n(Ll,"P",{});var Tnt=s(Tce);PXo=r(Tnt,"Examples:"),Tnt.forEach(t),$Xo=i(Ll),m(Q5.$$.fragment,Ll),Ll.forEach(t),IXo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(H5.$$.fragment,ta),jXo=i(ta),Fce=n(ta,"P",{});var Fnt=s(Fce);DXo=r(Fnt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Fnt.forEach(t),NXo=i(ta),dn=n(ta,"P",{});var v4=s(dn);qXo=r(v4,"The model class to instantiate is selected based on the "),Cce=n(v4,"CODE",{});var Cnt=s(Cce);OXo=r(Cnt,"model_type"),Cnt.forEach(t),GXo=r(v4,` property of the config object (either
passed as an argument or loaded from `),Mce=n(v4,"CODE",{});var Mnt=s(Mce);XXo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),VXo=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(v4,"CODE",{});var Ent=s(Ece);zXo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),WXo=r(v4,":"),v4.forEach(t),QXo=i(ta),cn=n(ta,"UL",{});var T4=s(cn);jv=n(T4,"LI",{});var jwe=s(jv);yce=n(jwe,"STRONG",{});var ynt=s(yce);HXo=r(ynt,"data2vec-audio"),ynt.forEach(t),UXo=r(jwe," \u2014 "),UN=n(jwe,"A",{href:!0});var wnt=s(UN);JXo=r(wnt,"Data2VecAudioForXVector"),wnt.forEach(t),YXo=r(jwe," (Data2VecAudio model)"),jwe.forEach(t),KXo=i(T4),Dv=n(T4,"LI",{});var Dwe=s(Dv);wce=n(Dwe,"STRONG",{});var Ant=s(wce);ZXo=r(Ant,"unispeech-sat"),Ant.forEach(t),eVo=r(Dwe," \u2014 "),JN=n(Dwe,"A",{href:!0});var Lnt=s(JN);oVo=r(Lnt,"UniSpeechSatForXVector"),Lnt.forEach(t),rVo=r(Dwe," (UniSpeechSat model)"),Dwe.forEach(t),tVo=i(T4),Nv=n(T4,"LI",{});var Nwe=s(Nv);Ace=n(Nwe,"STRONG",{});var Bnt=s(Ace);aVo=r(Bnt,"wav2vec2"),Bnt.forEach(t),nVo=r(Nwe," \u2014 "),YN=n(Nwe,"A",{href:!0});var xnt=s(YN);sVo=r(xnt,"Wav2Vec2ForXVector"),xnt.forEach(t),lVo=r(Nwe," (Wav2Vec2 model)"),Nwe.forEach(t),iVo=i(T4),qv=n(T4,"LI",{});var qwe=s(qv);Lce=n(qwe,"STRONG",{});var knt=s(Lce);dVo=r(knt,"wavlm"),knt.forEach(t),cVo=r(qwe," \u2014 "),KN=n(qwe,"A",{href:!0});var Rnt=s(KN);fVo=r(Rnt,"WavLMForXVector"),Rnt.forEach(t),mVo=r(qwe," (WavLM model)"),qwe.forEach(t),T4.forEach(t),gVo=i(ta),Ov=n(ta,"P",{});var Owe=s(Ov);hVo=r(Owe,"The model is set in evaluation mode by default using "),Bce=n(Owe,"CODE",{});var Snt=s(Bce);pVo=r(Snt,"model.eval()"),Snt.forEach(t),_Vo=r(Owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(Owe,"CODE",{});var Pnt=s(xce);uVo=r(Pnt,"model.train()"),Pnt.forEach(t),Owe.forEach(t),bVo=i(ta),kce=n(ta,"P",{});var $nt=s(kce);vVo=r($nt,"Examples:"),$nt.forEach(t),TVo=i(ta),m(U5.$$.fragment,ta),ta.forEach(t),Al.forEach(t),uke=i(c),Yd=n(c,"H2",{class:!0});var ASe=s(Yd);Gv=n(ASe,"A",{id:!0,class:!0,href:!0});var Int=s(Gv);Rce=n(Int,"SPAN",{});var jnt=s(Rce);m(J5.$$.fragment,jnt),jnt.forEach(t),Int.forEach(t),FVo=i(ASe),Sce=n(ASe,"SPAN",{});var Dnt=s(Sce);CVo=r(Dnt,"AutoModelForMaskedImageModeling"),Dnt.forEach(t),ASe.forEach(t),bke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Y5.$$.fragment,Bl),MVo=i(Bl),Kd=n(Bl,"P",{});var pW=s(Kd);EVo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pce=n(pW,"CODE",{});var Nnt=s(Pce);yVo=r(Nnt,"from_pretrained()"),Nnt.forEach(t),wVo=r(pW,"class method or the "),$ce=n(pW,"CODE",{});var qnt=s($ce);AVo=r(qnt,"from_config()"),qnt.forEach(t),LVo=r(pW,`class
method.`),pW.forEach(t),BVo=i(Bl),K5=n(Bl,"P",{});var LSe=s(K5);xVo=r(LSe,"This class cannot be instantiated directly using "),Ice=n(LSe,"CODE",{});var Ont=s(Ice);kVo=r(Ont,"__init__()"),Ont.forEach(t),RVo=r(LSe," (throws an error)."),LSe.forEach(t),SVo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(Z5.$$.fragment,xl),PVo=i(xl),jce=n(xl,"P",{});var Gnt=s(jce);$Vo=r(Gnt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Gnt.forEach(t),IVo=i(xl),Zd=n(xl,"P",{});var _W=s(Zd);jVo=r(_W,`Note:
Loading a model from its configuration file does `),Dce=n(_W,"STRONG",{});var Xnt=s(Dce);DVo=r(Xnt,"not"),Xnt.forEach(t),NVo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(_W,"CODE",{});var Vnt=s(Nce);qVo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),OVo=r(_W,"to load the model weights."),_W.forEach(t),GVo=i(xl),qce=n(xl,"P",{});var znt=s(qce);XVo=r(znt,"Examples:"),znt.forEach(t),VVo=i(xl),m(ey.$$.fragment,xl),xl.forEach(t),zVo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(oy.$$.fragment,aa),WVo=i(aa),Oce=n(aa,"P",{});var Wnt=s(Oce);QVo=r(Wnt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wnt.forEach(t),HVo=i(aa),fn=n(aa,"P",{});var F4=s(fn);UVo=r(F4,"The model class to instantiate is selected based on the "),Gce=n(F4,"CODE",{});var Qnt=s(Gce);JVo=r(Qnt,"model_type"),Qnt.forEach(t),YVo=r(F4,` property of the config object (either
passed as an argument or loaded from `),Xce=n(F4,"CODE",{});var Hnt=s(Xce);KVo=r(Hnt,"pretrained_model_name_or_path"),Hnt.forEach(t),ZVo=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(F4,"CODE",{});var Unt=s(Vce);ezo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),ozo=r(F4,":"),F4.forEach(t),rzo=i(aa),ec=n(aa,"UL",{});var uW=s(ec);Xv=n(uW,"LI",{});var Gwe=s(Xv);zce=n(Gwe,"STRONG",{});var Jnt=s(zce);tzo=r(Jnt,"deit"),Jnt.forEach(t),azo=r(Gwe," \u2014 "),ZN=n(Gwe,"A",{href:!0});var Ynt=s(ZN);nzo=r(Ynt,"DeiTForMaskedImageModeling"),Ynt.forEach(t),szo=r(Gwe," (DeiT model)"),Gwe.forEach(t),lzo=i(uW),Vv=n(uW,"LI",{});var Xwe=s(Vv);Wce=n(Xwe,"STRONG",{});var Knt=s(Wce);izo=r(Knt,"swin"),Knt.forEach(t),dzo=r(Xwe," \u2014 "),eq=n(Xwe,"A",{href:!0});var Znt=s(eq);czo=r(Znt,"SwinForMaskedImageModeling"),Znt.forEach(t),fzo=r(Xwe," (Swin model)"),Xwe.forEach(t),mzo=i(uW),zv=n(uW,"LI",{});var Vwe=s(zv);Qce=n(Vwe,"STRONG",{});var est=s(Qce);gzo=r(est,"vit"),est.forEach(t),hzo=r(Vwe," \u2014 "),oq=n(Vwe,"A",{href:!0});var ost=s(oq);pzo=r(ost,"ViTForMaskedImageModeling"),ost.forEach(t),_zo=r(Vwe," (ViT model)"),Vwe.forEach(t),uW.forEach(t),uzo=i(aa),Wv=n(aa,"P",{});var zwe=s(Wv);bzo=r(zwe,"The model is set in evaluation mode by default using "),Hce=n(zwe,"CODE",{});var rst=s(Hce);vzo=r(rst,"model.eval()"),rst.forEach(t),Tzo=r(zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(zwe,"CODE",{});var tst=s(Uce);Fzo=r(tst,"model.train()"),tst.forEach(t),zwe.forEach(t),Czo=i(aa),Jce=n(aa,"P",{});var ast=s(Jce);Mzo=r(ast,"Examples:"),ast.forEach(t),Ezo=i(aa),m(ry.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),vke=i(c),oc=n(c,"H2",{class:!0});var BSe=s(oc);Qv=n(BSe,"A",{id:!0,class:!0,href:!0});var nst=s(Qv);Yce=n(nst,"SPAN",{});var sst=s(Yce);m(ty.$$.fragment,sst),sst.forEach(t),nst.forEach(t),yzo=i(BSe),Kce=n(BSe,"SPAN",{});var lst=s(Kce);wzo=r(lst,"AutoModelForObjectDetection"),lst.forEach(t),BSe.forEach(t),Tke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(ay.$$.fragment,kl),Azo=i(kl),rc=n(kl,"P",{});var bW=s(rc);Lzo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zce=n(bW,"CODE",{});var ist=s(Zce);Bzo=r(ist,"from_pretrained()"),ist.forEach(t),xzo=r(bW,"class method or the "),efe=n(bW,"CODE",{});var dst=s(efe);kzo=r(dst,"from_config()"),dst.forEach(t),Rzo=r(bW,`class
method.`),bW.forEach(t),Szo=i(kl),ny=n(kl,"P",{});var xSe=s(ny);Pzo=r(xSe,"This class cannot be instantiated directly using "),ofe=n(xSe,"CODE",{});var cst=s(ofe);$zo=r(cst,"__init__()"),cst.forEach(t),Izo=r(xSe," (throws an error)."),xSe.forEach(t),jzo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(sy.$$.fragment,Rl),Dzo=i(Rl),rfe=n(Rl,"P",{});var fst=s(rfe);Nzo=r(fst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fst.forEach(t),qzo=i(Rl),tc=n(Rl,"P",{});var vW=s(tc);Ozo=r(vW,`Note:
Loading a model from its configuration file does `),tfe=n(vW,"STRONG",{});var mst=s(tfe);Gzo=r(mst,"not"),mst.forEach(t),Xzo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=n(vW,"CODE",{});var gst=s(afe);Vzo=r(gst,"from_pretrained()"),gst.forEach(t),zzo=r(vW,"to load the model weights."),vW.forEach(t),Wzo=i(Rl),nfe=n(Rl,"P",{});var hst=s(nfe);Qzo=r(hst,"Examples:"),hst.forEach(t),Hzo=i(Rl),m(ly.$$.fragment,Rl),Rl.forEach(t),Uzo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(iy.$$.fragment,na),Jzo=i(na),sfe=n(na,"P",{});var pst=s(sfe);Yzo=r(pst,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pst.forEach(t),Kzo=i(na),mn=n(na,"P",{});var C4=s(mn);Zzo=r(C4,"The model class to instantiate is selected based on the "),lfe=n(C4,"CODE",{});var _st=s(lfe);eWo=r(_st,"model_type"),_st.forEach(t),oWo=r(C4,` property of the config object (either
passed as an argument or loaded from `),ife=n(C4,"CODE",{});var ust=s(ife);rWo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),tWo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(C4,"CODE",{});var bst=s(dfe);aWo=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),nWo=r(C4,":"),C4.forEach(t),sWo=i(na),cfe=n(na,"UL",{});var vst=s(cfe);Hv=n(vst,"LI",{});var Wwe=s(Hv);ffe=n(Wwe,"STRONG",{});var Tst=s(ffe);lWo=r(Tst,"detr"),Tst.forEach(t),iWo=r(Wwe," \u2014 "),rq=n(Wwe,"A",{href:!0});var Fst=s(rq);dWo=r(Fst,"DetrForObjectDetection"),Fst.forEach(t),cWo=r(Wwe," (DETR model)"),Wwe.forEach(t),vst.forEach(t),fWo=i(na),Uv=n(na,"P",{});var Qwe=s(Uv);mWo=r(Qwe,"The model is set in evaluation mode by default using "),mfe=n(Qwe,"CODE",{});var Cst=s(mfe);gWo=r(Cst,"model.eval()"),Cst.forEach(t),hWo=r(Qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(Qwe,"CODE",{});var Mst=s(gfe);pWo=r(Mst,"model.train()"),Mst.forEach(t),Qwe.forEach(t),_Wo=i(na),hfe=n(na,"P",{});var Est=s(hfe);uWo=r(Est,"Examples:"),Est.forEach(t),bWo=i(na),m(dy.$$.fragment,na),na.forEach(t),kl.forEach(t),Fke=i(c),ac=n(c,"H2",{class:!0});var kSe=s(ac);Jv=n(kSe,"A",{id:!0,class:!0,href:!0});var yst=s(Jv);pfe=n(yst,"SPAN",{});var wst=s(pfe);m(cy.$$.fragment,wst),wst.forEach(t),yst.forEach(t),vWo=i(kSe),_fe=n(kSe,"SPAN",{});var Ast=s(_fe);TWo=r(Ast,"AutoModelForImageSegmentation"),Ast.forEach(t),kSe.forEach(t),Cke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(fy.$$.fragment,Sl),FWo=i(Sl),nc=n(Sl,"P",{});var TW=s(nc);CWo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ufe=n(TW,"CODE",{});var Lst=s(ufe);MWo=r(Lst,"from_pretrained()"),Lst.forEach(t),EWo=r(TW,"class method or the "),bfe=n(TW,"CODE",{});var Bst=s(bfe);yWo=r(Bst,"from_config()"),Bst.forEach(t),wWo=r(TW,`class
method.`),TW.forEach(t),AWo=i(Sl),my=n(Sl,"P",{});var RSe=s(my);LWo=r(RSe,"This class cannot be instantiated directly using "),vfe=n(RSe,"CODE",{});var xst=s(vfe);BWo=r(xst,"__init__()"),xst.forEach(t),xWo=r(RSe," (throws an error)."),RSe.forEach(t),kWo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(gy.$$.fragment,Pl),RWo=i(Pl),Tfe=n(Pl,"P",{});var kst=s(Tfe);SWo=r(kst,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kst.forEach(t),PWo=i(Pl),sc=n(Pl,"P",{});var FW=s(sc);$Wo=r(FW,`Note:
Loading a model from its configuration file does `),Ffe=n(FW,"STRONG",{});var Rst=s(Ffe);IWo=r(Rst,"not"),Rst.forEach(t),jWo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=n(FW,"CODE",{});var Sst=s(Cfe);DWo=r(Sst,"from_pretrained()"),Sst.forEach(t),NWo=r(FW,"to load the model weights."),FW.forEach(t),qWo=i(Pl),Mfe=n(Pl,"P",{});var Pst=s(Mfe);OWo=r(Pst,"Examples:"),Pst.forEach(t),GWo=i(Pl),m(hy.$$.fragment,Pl),Pl.forEach(t),XWo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(py.$$.fragment,sa),VWo=i(sa),Efe=n(sa,"P",{});var $st=s(Efe);zWo=r($st,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$st.forEach(t),WWo=i(sa),gn=n(sa,"P",{});var M4=s(gn);QWo=r(M4,"The model class to instantiate is selected based on the "),yfe=n(M4,"CODE",{});var Ist=s(yfe);HWo=r(Ist,"model_type"),Ist.forEach(t),UWo=r(M4,` property of the config object (either
passed as an argument or loaded from `),wfe=n(M4,"CODE",{});var jst=s(wfe);JWo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),YWo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(M4,"CODE",{});var Dst=s(Afe);KWo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),ZWo=r(M4,":"),M4.forEach(t),eQo=i(sa),Lfe=n(sa,"UL",{});var Nst=s(Lfe);Yv=n(Nst,"LI",{});var Hwe=s(Yv);Bfe=n(Hwe,"STRONG",{});var qst=s(Bfe);oQo=r(qst,"detr"),qst.forEach(t),rQo=r(Hwe," \u2014 "),tq=n(Hwe,"A",{href:!0});var Ost=s(tq);tQo=r(Ost,"DetrForSegmentation"),Ost.forEach(t),aQo=r(Hwe," (DETR model)"),Hwe.forEach(t),Nst.forEach(t),nQo=i(sa),Kv=n(sa,"P",{});var Uwe=s(Kv);sQo=r(Uwe,"The model is set in evaluation mode by default using "),xfe=n(Uwe,"CODE",{});var Gst=s(xfe);lQo=r(Gst,"model.eval()"),Gst.forEach(t),iQo=r(Uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(Uwe,"CODE",{});var Xst=s(kfe);dQo=r(Xst,"model.train()"),Xst.forEach(t),Uwe.forEach(t),cQo=i(sa),Rfe=n(sa,"P",{});var Vst=s(Rfe);fQo=r(Vst,"Examples:"),Vst.forEach(t),mQo=i(sa),m(_y.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Mke=i(c),lc=n(c,"H2",{class:!0});var SSe=s(lc);Zv=n(SSe,"A",{id:!0,class:!0,href:!0});var zst=s(Zv);Sfe=n(zst,"SPAN",{});var Wst=s(Sfe);m(uy.$$.fragment,Wst),Wst.forEach(t),zst.forEach(t),gQo=i(SSe),Pfe=n(SSe,"SPAN",{});var Qst=s(Pfe);hQo=r(Qst,"AutoModelForSemanticSegmentation"),Qst.forEach(t),SSe.forEach(t),Eke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(by.$$.fragment,$l),pQo=i($l),ic=n($l,"P",{});var CW=s(ic);_Qo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$fe=n(CW,"CODE",{});var Hst=s($fe);uQo=r(Hst,"from_pretrained()"),Hst.forEach(t),bQo=r(CW,"class method or the "),Ife=n(CW,"CODE",{});var Ust=s(Ife);vQo=r(Ust,"from_config()"),Ust.forEach(t),TQo=r(CW,`class
method.`),CW.forEach(t),FQo=i($l),vy=n($l,"P",{});var PSe=s(vy);CQo=r(PSe,"This class cannot be instantiated directly using "),jfe=n(PSe,"CODE",{});var Jst=s(jfe);MQo=r(Jst,"__init__()"),Jst.forEach(t),EQo=r(PSe," (throws an error)."),PSe.forEach(t),yQo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Ty.$$.fragment,Il),wQo=i(Il),Dfe=n(Il,"P",{});var Yst=s(Dfe);AQo=r(Yst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yst.forEach(t),LQo=i(Il),dc=n(Il,"P",{});var MW=s(dc);BQo=r(MW,`Note:
Loading a model from its configuration file does `),Nfe=n(MW,"STRONG",{});var Kst=s(Nfe);xQo=r(Kst,"not"),Kst.forEach(t),kQo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(MW,"CODE",{});var Zst=s(qfe);RQo=r(Zst,"from_pretrained()"),Zst.forEach(t),SQo=r(MW,"to load the model weights."),MW.forEach(t),PQo=i(Il),Ofe=n(Il,"P",{});var elt=s(Ofe);$Qo=r(elt,"Examples:"),elt.forEach(t),IQo=i(Il),m(Fy.$$.fragment,Il),Il.forEach(t),jQo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(Cy.$$.fragment,la),DQo=i(la),Gfe=n(la,"P",{});var olt=s(Gfe);NQo=r(olt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),olt.forEach(t),qQo=i(la),hn=n(la,"P",{});var E4=s(hn);OQo=r(E4,"The model class to instantiate is selected based on the "),Xfe=n(E4,"CODE",{});var rlt=s(Xfe);GQo=r(rlt,"model_type"),rlt.forEach(t),XQo=r(E4,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(E4,"CODE",{});var tlt=s(Vfe);VQo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),zQo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(E4,"CODE",{});var alt=s(zfe);WQo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),QQo=r(E4,":"),E4.forEach(t),HQo=i(la),My=n(la,"UL",{});var $Se=s(My);e6=n($Se,"LI",{});var Jwe=s(e6);Wfe=n(Jwe,"STRONG",{});var nlt=s(Wfe);UQo=r(nlt,"beit"),nlt.forEach(t),JQo=r(Jwe," \u2014 "),aq=n(Jwe,"A",{href:!0});var slt=s(aq);YQo=r(slt,"BeitForSemanticSegmentation"),slt.forEach(t),KQo=r(Jwe," (BEiT model)"),Jwe.forEach(t),ZQo=i($Se),o6=n($Se,"LI",{});var Ywe=s(o6);Qfe=n(Ywe,"STRONG",{});var llt=s(Qfe);eHo=r(llt,"segformer"),llt.forEach(t),oHo=r(Ywe," \u2014 "),nq=n(Ywe,"A",{href:!0});var ilt=s(nq);rHo=r(ilt,"SegformerForSemanticSegmentation"),ilt.forEach(t),tHo=r(Ywe," (SegFormer model)"),Ywe.forEach(t),$Se.forEach(t),aHo=i(la),r6=n(la,"P",{});var Kwe=s(r6);nHo=r(Kwe,"The model is set in evaluation mode by default using "),Hfe=n(Kwe,"CODE",{});var dlt=s(Hfe);sHo=r(dlt,"model.eval()"),dlt.forEach(t),lHo=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(Kwe,"CODE",{});var clt=s(Ufe);iHo=r(clt,"model.train()"),clt.forEach(t),Kwe.forEach(t),dHo=i(la),Jfe=n(la,"P",{});var flt=s(Jfe);cHo=r(flt,"Examples:"),flt.forEach(t),fHo=i(la),m(Ey.$$.fragment,la),la.forEach(t),$l.forEach(t),yke=i(c),cc=n(c,"H2",{class:!0});var ISe=s(cc);t6=n(ISe,"A",{id:!0,class:!0,href:!0});var mlt=s(t6);Yfe=n(mlt,"SPAN",{});var glt=s(Yfe);m(yy.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),mHo=i(ISe),Kfe=n(ISe,"SPAN",{});var hlt=s(Kfe);gHo=r(hlt,"AutoModelForInstanceSegmentation"),hlt.forEach(t),ISe.forEach(t),wke=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(wy.$$.fragment,jl),hHo=i(jl),fc=n(jl,"P",{});var EW=s(fc);pHo=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Zfe=n(EW,"CODE",{});var plt=s(Zfe);_Ho=r(plt,"from_pretrained()"),plt.forEach(t),uHo=r(EW,"class method or the "),eme=n(EW,"CODE",{});var _lt=s(eme);bHo=r(_lt,"from_config()"),_lt.forEach(t),vHo=r(EW,`class
method.`),EW.forEach(t),THo=i(jl),Ay=n(jl,"P",{});var jSe=s(Ay);FHo=r(jSe,"This class cannot be instantiated directly using "),ome=n(jSe,"CODE",{});var ult=s(ome);CHo=r(ult,"__init__()"),ult.forEach(t),MHo=r(jSe," (throws an error)."),jSe.forEach(t),EHo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(Ly.$$.fragment,Dl),yHo=i(Dl),rme=n(Dl,"P",{});var blt=s(rme);wHo=r(blt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),blt.forEach(t),AHo=i(Dl),mc=n(Dl,"P",{});var yW=s(mc);LHo=r(yW,`Note:
Loading a model from its configuration file does `),tme=n(yW,"STRONG",{});var vlt=s(tme);BHo=r(vlt,"not"),vlt.forEach(t),xHo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=n(yW,"CODE",{});var Tlt=s(ame);kHo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),RHo=r(yW,"to load the model weights."),yW.forEach(t),SHo=i(Dl),nme=n(Dl,"P",{});var Flt=s(nme);PHo=r(Flt,"Examples:"),Flt.forEach(t),$Ho=i(Dl),m(By.$$.fragment,Dl),Dl.forEach(t),IHo=i(jl),so=n(jl,"DIV",{class:!0});var ia=s(so);m(xy.$$.fragment,ia),jHo=i(ia),sme=n(ia,"P",{});var Clt=s(sme);DHo=r(Clt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Clt.forEach(t),NHo=i(ia),pn=n(ia,"P",{});var y4=s(pn);qHo=r(y4,"The model class to instantiate is selected based on the "),lme=n(y4,"CODE",{});var Mlt=s(lme);OHo=r(Mlt,"model_type"),Mlt.forEach(t),GHo=r(y4,` property of the config object (either
passed as an argument or loaded from `),ime=n(y4,"CODE",{});var Elt=s(ime);XHo=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),VHo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(y4,"CODE",{});var ylt=s(dme);zHo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),WHo=r(y4,":"),y4.forEach(t),QHo=i(ia),cme=n(ia,"UL",{});var wlt=s(cme);a6=n(wlt,"LI",{});var Zwe=s(a6);fme=n(Zwe,"STRONG",{});var Alt=s(fme);HHo=r(Alt,"maskformer"),Alt.forEach(t),UHo=r(Zwe," \u2014 "),sq=n(Zwe,"A",{href:!0});var Llt=s(sq);JHo=r(Llt,"MaskFormerForInstanceSegmentation"),Llt.forEach(t),YHo=r(Zwe," (MaskFormer model)"),Zwe.forEach(t),wlt.forEach(t),KHo=i(ia),n6=n(ia,"P",{});var eAe=s(n6);ZHo=r(eAe,"The model is set in evaluation mode by default using "),mme=n(eAe,"CODE",{});var Blt=s(mme);eUo=r(Blt,"model.eval()"),Blt.forEach(t),oUo=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(eAe,"CODE",{});var xlt=s(gme);rUo=r(xlt,"model.train()"),xlt.forEach(t),eAe.forEach(t),tUo=i(ia),hme=n(ia,"P",{});var klt=s(hme);aUo=r(klt,"Examples:"),klt.forEach(t),nUo=i(ia),m(ky.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Ake=i(c),gc=n(c,"H2",{class:!0});var DSe=s(gc);s6=n(DSe,"A",{id:!0,class:!0,href:!0});var Rlt=s(s6);pme=n(Rlt,"SPAN",{});var Slt=s(pme);m(Ry.$$.fragment,Slt),Slt.forEach(t),Rlt.forEach(t),sUo=i(DSe),_me=n(DSe,"SPAN",{});var Plt=s(_me);lUo=r(Plt,"TFAutoModel"),Plt.forEach(t),DSe.forEach(t),Lke=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(Sy.$$.fragment,Nl),iUo=i(Nl),hc=n(Nl,"P",{});var wW=s(hc);dUo=r(wW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ume=n(wW,"CODE",{});var $lt=s(ume);cUo=r($lt,"from_pretrained()"),$lt.forEach(t),fUo=r(wW,"class method or the "),bme=n(wW,"CODE",{});var Ilt=s(bme);mUo=r(Ilt,"from_config()"),Ilt.forEach(t),gUo=r(wW,`class
method.`),wW.forEach(t),hUo=i(Nl),Py=n(Nl,"P",{});var NSe=s(Py);pUo=r(NSe,"This class cannot be instantiated directly using "),vme=n(NSe,"CODE",{});var jlt=s(vme);_Uo=r(jlt,"__init__()"),jlt.forEach(t),uUo=r(NSe," (throws an error)."),NSe.forEach(t),bUo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m($y.$$.fragment,ql),vUo=i(ql),Tme=n(ql,"P",{});var Dlt=s(Tme);TUo=r(Dlt,"Instantiates one of the base model classes of the library from a configuration."),Dlt.forEach(t),FUo=i(ql),pc=n(ql,"P",{});var AW=s(pc);CUo=r(AW,`Note:
Loading a model from its configuration file does `),Fme=n(AW,"STRONG",{});var Nlt=s(Fme);MUo=r(Nlt,"not"),Nlt.forEach(t),EUo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(AW,"CODE",{});var qlt=s(Cme);yUo=r(qlt,"from_pretrained()"),qlt.forEach(t),wUo=r(AW,"to load the model weights."),AW.forEach(t),AUo=i(ql),Mme=n(ql,"P",{});var Olt=s(Mme);LUo=r(Olt,"Examples:"),Olt.forEach(t),BUo=i(ql),m(Iy.$$.fragment,ql),ql.forEach(t),xUo=i(Nl),ho=n(Nl,"DIV",{class:!0});var pa=s(ho);m(jy.$$.fragment,pa),kUo=i(pa),Eme=n(pa,"P",{});var Glt=s(Eme);RUo=r(Glt,"Instantiate one of the base model classes of the library from a pretrained model."),Glt.forEach(t),SUo=i(pa),_n=n(pa,"P",{});var w4=s(_n);PUo=r(w4,"The model class to instantiate is selected based on the "),yme=n(w4,"CODE",{});var Xlt=s(yme);$Uo=r(Xlt,"model_type"),Xlt.forEach(t),IUo=r(w4,` property of the config object (either
passed as an argument or loaded from `),wme=n(w4,"CODE",{});var Vlt=s(wme);jUo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),DUo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(w4,"CODE",{});var zlt=s(Ame);NUo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),qUo=r(w4,":"),w4.forEach(t),OUo=i(pa),B=n(pa,"UL",{});var x=s(B);l6=n(x,"LI",{});var oAe=s(l6);Lme=n(oAe,"STRONG",{});var Wlt=s(Lme);GUo=r(Wlt,"albert"),Wlt.forEach(t),XUo=r(oAe," \u2014 "),lq=n(oAe,"A",{href:!0});var Qlt=s(lq);VUo=r(Qlt,"TFAlbertModel"),Qlt.forEach(t),zUo=r(oAe," (ALBERT model)"),oAe.forEach(t),WUo=i(x),i6=n(x,"LI",{});var rAe=s(i6);Bme=n(rAe,"STRONG",{});var Hlt=s(Bme);QUo=r(Hlt,"bart"),Hlt.forEach(t),HUo=r(rAe," \u2014 "),iq=n(rAe,"A",{href:!0});var Ult=s(iq);UUo=r(Ult,"TFBartModel"),Ult.forEach(t),JUo=r(rAe," (BART model)"),rAe.forEach(t),YUo=i(x),d6=n(x,"LI",{});var tAe=s(d6);xme=n(tAe,"STRONG",{});var Jlt=s(xme);KUo=r(Jlt,"bert"),Jlt.forEach(t),ZUo=r(tAe," \u2014 "),dq=n(tAe,"A",{href:!0});var Ylt=s(dq);eJo=r(Ylt,"TFBertModel"),Ylt.forEach(t),oJo=r(tAe," (BERT model)"),tAe.forEach(t),rJo=i(x),c6=n(x,"LI",{});var aAe=s(c6);kme=n(aAe,"STRONG",{});var Klt=s(kme);tJo=r(Klt,"blenderbot"),Klt.forEach(t),aJo=r(aAe," \u2014 "),cq=n(aAe,"A",{href:!0});var Zlt=s(cq);nJo=r(Zlt,"TFBlenderbotModel"),Zlt.forEach(t),sJo=r(aAe," (Blenderbot model)"),aAe.forEach(t),lJo=i(x),f6=n(x,"LI",{});var nAe=s(f6);Rme=n(nAe,"STRONG",{});var eit=s(Rme);iJo=r(eit,"blenderbot-small"),eit.forEach(t),dJo=r(nAe," \u2014 "),fq=n(nAe,"A",{href:!0});var oit=s(fq);cJo=r(oit,"TFBlenderbotSmallModel"),oit.forEach(t),fJo=r(nAe," (BlenderbotSmall model)"),nAe.forEach(t),mJo=i(x),m6=n(x,"LI",{});var sAe=s(m6);Sme=n(sAe,"STRONG",{});var rit=s(Sme);gJo=r(rit,"camembert"),rit.forEach(t),hJo=r(sAe," \u2014 "),mq=n(sAe,"A",{href:!0});var tit=s(mq);pJo=r(tit,"TFCamembertModel"),tit.forEach(t),_Jo=r(sAe," (CamemBERT model)"),sAe.forEach(t),uJo=i(x),g6=n(x,"LI",{});var lAe=s(g6);Pme=n(lAe,"STRONG",{});var ait=s(Pme);bJo=r(ait,"clip"),ait.forEach(t),vJo=r(lAe," \u2014 "),gq=n(lAe,"A",{href:!0});var nit=s(gq);TJo=r(nit,"TFCLIPModel"),nit.forEach(t),FJo=r(lAe," (CLIP model)"),lAe.forEach(t),CJo=i(x),h6=n(x,"LI",{});var iAe=s(h6);$me=n(iAe,"STRONG",{});var sit=s($me);MJo=r(sit,"convbert"),sit.forEach(t),EJo=r(iAe," \u2014 "),hq=n(iAe,"A",{href:!0});var lit=s(hq);yJo=r(lit,"TFConvBertModel"),lit.forEach(t),wJo=r(iAe," (ConvBERT model)"),iAe.forEach(t),AJo=i(x),p6=n(x,"LI",{});var dAe=s(p6);Ime=n(dAe,"STRONG",{});var iit=s(Ime);LJo=r(iit,"convnext"),iit.forEach(t),BJo=r(dAe," \u2014 "),pq=n(dAe,"A",{href:!0});var dit=s(pq);xJo=r(dit,"TFConvNextModel"),dit.forEach(t),kJo=r(dAe," (ConvNext model)"),dAe.forEach(t),RJo=i(x),_6=n(x,"LI",{});var cAe=s(_6);jme=n(cAe,"STRONG",{});var cit=s(jme);SJo=r(cit,"ctrl"),cit.forEach(t),PJo=r(cAe," \u2014 "),_q=n(cAe,"A",{href:!0});var fit=s(_q);$Jo=r(fit,"TFCTRLModel"),fit.forEach(t),IJo=r(cAe," (CTRL model)"),cAe.forEach(t),jJo=i(x),u6=n(x,"LI",{});var fAe=s(u6);Dme=n(fAe,"STRONG",{});var mit=s(Dme);DJo=r(mit,"deberta"),mit.forEach(t),NJo=r(fAe," \u2014 "),uq=n(fAe,"A",{href:!0});var git=s(uq);qJo=r(git,"TFDebertaModel"),git.forEach(t),OJo=r(fAe," (DeBERTa model)"),fAe.forEach(t),GJo=i(x),b6=n(x,"LI",{});var mAe=s(b6);Nme=n(mAe,"STRONG",{});var hit=s(Nme);XJo=r(hit,"deberta-v2"),hit.forEach(t),VJo=r(mAe," \u2014 "),bq=n(mAe,"A",{href:!0});var pit=s(bq);zJo=r(pit,"TFDebertaV2Model"),pit.forEach(t),WJo=r(mAe," (DeBERTa-v2 model)"),mAe.forEach(t),QJo=i(x),v6=n(x,"LI",{});var gAe=s(v6);qme=n(gAe,"STRONG",{});var _it=s(qme);HJo=r(_it,"distilbert"),_it.forEach(t),UJo=r(gAe," \u2014 "),vq=n(gAe,"A",{href:!0});var uit=s(vq);JJo=r(uit,"TFDistilBertModel"),uit.forEach(t),YJo=r(gAe," (DistilBERT model)"),gAe.forEach(t),KJo=i(x),T6=n(x,"LI",{});var hAe=s(T6);Ome=n(hAe,"STRONG",{});var bit=s(Ome);ZJo=r(bit,"dpr"),bit.forEach(t),eYo=r(hAe," \u2014 "),Tq=n(hAe,"A",{href:!0});var vit=s(Tq);oYo=r(vit,"TFDPRQuestionEncoder"),vit.forEach(t),rYo=r(hAe," (DPR model)"),hAe.forEach(t),tYo=i(x),F6=n(x,"LI",{});var pAe=s(F6);Gme=n(pAe,"STRONG",{});var Tit=s(Gme);aYo=r(Tit,"electra"),Tit.forEach(t),nYo=r(pAe," \u2014 "),Fq=n(pAe,"A",{href:!0});var Fit=s(Fq);sYo=r(Fit,"TFElectraModel"),Fit.forEach(t),lYo=r(pAe," (ELECTRA model)"),pAe.forEach(t),iYo=i(x),C6=n(x,"LI",{});var _Ae=s(C6);Xme=n(_Ae,"STRONG",{});var Cit=s(Xme);dYo=r(Cit,"flaubert"),Cit.forEach(t),cYo=r(_Ae," \u2014 "),Cq=n(_Ae,"A",{href:!0});var Mit=s(Cq);fYo=r(Mit,"TFFlaubertModel"),Mit.forEach(t),mYo=r(_Ae," (FlauBERT model)"),_Ae.forEach(t),gYo=i(x),Os=n(x,"LI",{});var X8=s(Os);Vme=n(X8,"STRONG",{});var Eit=s(Vme);hYo=r(Eit,"funnel"),Eit.forEach(t),pYo=r(X8," \u2014 "),Mq=n(X8,"A",{href:!0});var yit=s(Mq);_Yo=r(yit,"TFFunnelModel"),yit.forEach(t),uYo=r(X8," or "),Eq=n(X8,"A",{href:!0});var wit=s(Eq);bYo=r(wit,"TFFunnelBaseModel"),wit.forEach(t),vYo=r(X8," (Funnel Transformer model)"),X8.forEach(t),TYo=i(x),M6=n(x,"LI",{});var uAe=s(M6);zme=n(uAe,"STRONG",{});var Ait=s(zme);FYo=r(Ait,"gpt2"),Ait.forEach(t),CYo=r(uAe," \u2014 "),yq=n(uAe,"A",{href:!0});var Lit=s(yq);MYo=r(Lit,"TFGPT2Model"),Lit.forEach(t),EYo=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),yYo=i(x),E6=n(x,"LI",{});var bAe=s(E6);Wme=n(bAe,"STRONG",{});var Bit=s(Wme);wYo=r(Bit,"hubert"),Bit.forEach(t),AYo=r(bAe," \u2014 "),wq=n(bAe,"A",{href:!0});var xit=s(wq);LYo=r(xit,"TFHubertModel"),xit.forEach(t),BYo=r(bAe," (Hubert model)"),bAe.forEach(t),xYo=i(x),y6=n(x,"LI",{});var vAe=s(y6);Qme=n(vAe,"STRONG",{});var kit=s(Qme);kYo=r(kit,"layoutlm"),kit.forEach(t),RYo=r(vAe," \u2014 "),Aq=n(vAe,"A",{href:!0});var Rit=s(Aq);SYo=r(Rit,"TFLayoutLMModel"),Rit.forEach(t),PYo=r(vAe," (LayoutLM model)"),vAe.forEach(t),$Yo=i(x),w6=n(x,"LI",{});var TAe=s(w6);Hme=n(TAe,"STRONG",{});var Sit=s(Hme);IYo=r(Sit,"led"),Sit.forEach(t),jYo=r(TAe," \u2014 "),Lq=n(TAe,"A",{href:!0});var Pit=s(Lq);DYo=r(Pit,"TFLEDModel"),Pit.forEach(t),NYo=r(TAe," (LED model)"),TAe.forEach(t),qYo=i(x),A6=n(x,"LI",{});var FAe=s(A6);Ume=n(FAe,"STRONG",{});var $it=s(Ume);OYo=r($it,"longformer"),$it.forEach(t),GYo=r(FAe," \u2014 "),Bq=n(FAe,"A",{href:!0});var Iit=s(Bq);XYo=r(Iit,"TFLongformerModel"),Iit.forEach(t),VYo=r(FAe," (Longformer model)"),FAe.forEach(t),zYo=i(x),L6=n(x,"LI",{});var CAe=s(L6);Jme=n(CAe,"STRONG",{});var jit=s(Jme);WYo=r(jit,"lxmert"),jit.forEach(t),QYo=r(CAe," \u2014 "),xq=n(CAe,"A",{href:!0});var Dit=s(xq);HYo=r(Dit,"TFLxmertModel"),Dit.forEach(t),UYo=r(CAe," (LXMERT model)"),CAe.forEach(t),JYo=i(x),B6=n(x,"LI",{});var MAe=s(B6);Yme=n(MAe,"STRONG",{});var Nit=s(Yme);YYo=r(Nit,"marian"),Nit.forEach(t),KYo=r(MAe," \u2014 "),kq=n(MAe,"A",{href:!0});var qit=s(kq);ZYo=r(qit,"TFMarianModel"),qit.forEach(t),eKo=r(MAe," (Marian model)"),MAe.forEach(t),oKo=i(x),x6=n(x,"LI",{});var EAe=s(x6);Kme=n(EAe,"STRONG",{});var Oit=s(Kme);rKo=r(Oit,"mbart"),Oit.forEach(t),tKo=r(EAe," \u2014 "),Rq=n(EAe,"A",{href:!0});var Git=s(Rq);aKo=r(Git,"TFMBartModel"),Git.forEach(t),nKo=r(EAe," (mBART model)"),EAe.forEach(t),sKo=i(x),k6=n(x,"LI",{});var yAe=s(k6);Zme=n(yAe,"STRONG",{});var Xit=s(Zme);lKo=r(Xit,"mobilebert"),Xit.forEach(t),iKo=r(yAe," \u2014 "),Sq=n(yAe,"A",{href:!0});var Vit=s(Sq);dKo=r(Vit,"TFMobileBertModel"),Vit.forEach(t),cKo=r(yAe," (MobileBERT model)"),yAe.forEach(t),fKo=i(x),R6=n(x,"LI",{});var wAe=s(R6);ege=n(wAe,"STRONG",{});var zit=s(ege);mKo=r(zit,"mpnet"),zit.forEach(t),gKo=r(wAe," \u2014 "),Pq=n(wAe,"A",{href:!0});var Wit=s(Pq);hKo=r(Wit,"TFMPNetModel"),Wit.forEach(t),pKo=r(wAe," (MPNet model)"),wAe.forEach(t),_Ko=i(x),S6=n(x,"LI",{});var AAe=s(S6);oge=n(AAe,"STRONG",{});var Qit=s(oge);uKo=r(Qit,"mt5"),Qit.forEach(t),bKo=r(AAe," \u2014 "),$q=n(AAe,"A",{href:!0});var Hit=s($q);vKo=r(Hit,"TFMT5Model"),Hit.forEach(t),TKo=r(AAe," (mT5 model)"),AAe.forEach(t),FKo=i(x),P6=n(x,"LI",{});var LAe=s(P6);rge=n(LAe,"STRONG",{});var Uit=s(rge);CKo=r(Uit,"openai-gpt"),Uit.forEach(t),MKo=r(LAe," \u2014 "),Iq=n(LAe,"A",{href:!0});var Jit=s(Iq);EKo=r(Jit,"TFOpenAIGPTModel"),Jit.forEach(t),yKo=r(LAe," (OpenAI GPT model)"),LAe.forEach(t),wKo=i(x),$6=n(x,"LI",{});var BAe=s($6);tge=n(BAe,"STRONG",{});var Yit=s(tge);AKo=r(Yit,"pegasus"),Yit.forEach(t),LKo=r(BAe," \u2014 "),jq=n(BAe,"A",{href:!0});var Kit=s(jq);BKo=r(Kit,"TFPegasusModel"),Kit.forEach(t),xKo=r(BAe," (Pegasus model)"),BAe.forEach(t),kKo=i(x),I6=n(x,"LI",{});var xAe=s(I6);age=n(xAe,"STRONG",{});var Zit=s(age);RKo=r(Zit,"rembert"),Zit.forEach(t),SKo=r(xAe," \u2014 "),Dq=n(xAe,"A",{href:!0});var edt=s(Dq);PKo=r(edt,"TFRemBertModel"),edt.forEach(t),$Ko=r(xAe," (RemBERT model)"),xAe.forEach(t),IKo=i(x),j6=n(x,"LI",{});var kAe=s(j6);nge=n(kAe,"STRONG",{});var odt=s(nge);jKo=r(odt,"roberta"),odt.forEach(t),DKo=r(kAe," \u2014 "),Nq=n(kAe,"A",{href:!0});var rdt=s(Nq);NKo=r(rdt,"TFRobertaModel"),rdt.forEach(t),qKo=r(kAe," (RoBERTa model)"),kAe.forEach(t),OKo=i(x),D6=n(x,"LI",{});var RAe=s(D6);sge=n(RAe,"STRONG",{});var tdt=s(sge);GKo=r(tdt,"roformer"),tdt.forEach(t),XKo=r(RAe," \u2014 "),qq=n(RAe,"A",{href:!0});var adt=s(qq);VKo=r(adt,"TFRoFormerModel"),adt.forEach(t),zKo=r(RAe," (RoFormer model)"),RAe.forEach(t),WKo=i(x),N6=n(x,"LI",{});var SAe=s(N6);lge=n(SAe,"STRONG",{});var ndt=s(lge);QKo=r(ndt,"speech_to_text"),ndt.forEach(t),HKo=r(SAe," \u2014 "),Oq=n(SAe,"A",{href:!0});var sdt=s(Oq);UKo=r(sdt,"TFSpeech2TextModel"),sdt.forEach(t),JKo=r(SAe," (Speech2Text model)"),SAe.forEach(t),YKo=i(x),q6=n(x,"LI",{});var PAe=s(q6);ige=n(PAe,"STRONG",{});var ldt=s(ige);KKo=r(ldt,"t5"),ldt.forEach(t),ZKo=r(PAe," \u2014 "),Gq=n(PAe,"A",{href:!0});var idt=s(Gq);eZo=r(idt,"TFT5Model"),idt.forEach(t),oZo=r(PAe," (T5 model)"),PAe.forEach(t),rZo=i(x),O6=n(x,"LI",{});var $Ae=s(O6);dge=n($Ae,"STRONG",{});var ddt=s(dge);tZo=r(ddt,"tapas"),ddt.forEach(t),aZo=r($Ae," \u2014 "),Xq=n($Ae,"A",{href:!0});var cdt=s(Xq);nZo=r(cdt,"TFTapasModel"),cdt.forEach(t),sZo=r($Ae," (TAPAS model)"),$Ae.forEach(t),lZo=i(x),G6=n(x,"LI",{});var IAe=s(G6);cge=n(IAe,"STRONG",{});var fdt=s(cge);iZo=r(fdt,"transfo-xl"),fdt.forEach(t),dZo=r(IAe," \u2014 "),Vq=n(IAe,"A",{href:!0});var mdt=s(Vq);cZo=r(mdt,"TFTransfoXLModel"),mdt.forEach(t),fZo=r(IAe," (Transformer-XL model)"),IAe.forEach(t),mZo=i(x),X6=n(x,"LI",{});var jAe=s(X6);fge=n(jAe,"STRONG",{});var gdt=s(fge);gZo=r(gdt,"vit"),gdt.forEach(t),hZo=r(jAe," \u2014 "),zq=n(jAe,"A",{href:!0});var hdt=s(zq);pZo=r(hdt,"TFViTModel"),hdt.forEach(t),_Zo=r(jAe," (ViT model)"),jAe.forEach(t),uZo=i(x),V6=n(x,"LI",{});var DAe=s(V6);mge=n(DAe,"STRONG",{});var pdt=s(mge);bZo=r(pdt,"wav2vec2"),pdt.forEach(t),vZo=r(DAe," \u2014 "),Wq=n(DAe,"A",{href:!0});var _dt=s(Wq);TZo=r(_dt,"TFWav2Vec2Model"),_dt.forEach(t),FZo=r(DAe," (Wav2Vec2 model)"),DAe.forEach(t),CZo=i(x),z6=n(x,"LI",{});var NAe=s(z6);gge=n(NAe,"STRONG",{});var udt=s(gge);MZo=r(udt,"xlm"),udt.forEach(t),EZo=r(NAe," \u2014 "),Qq=n(NAe,"A",{href:!0});var bdt=s(Qq);yZo=r(bdt,"TFXLMModel"),bdt.forEach(t),wZo=r(NAe," (XLM model)"),NAe.forEach(t),AZo=i(x),W6=n(x,"LI",{});var qAe=s(W6);hge=n(qAe,"STRONG",{});var vdt=s(hge);LZo=r(vdt,"xlm-roberta"),vdt.forEach(t),BZo=r(qAe," \u2014 "),Hq=n(qAe,"A",{href:!0});var Tdt=s(Hq);xZo=r(Tdt,"TFXLMRobertaModel"),Tdt.forEach(t),kZo=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),RZo=i(x),Q6=n(x,"LI",{});var OAe=s(Q6);pge=n(OAe,"STRONG",{});var Fdt=s(pge);SZo=r(Fdt,"xlnet"),Fdt.forEach(t),PZo=r(OAe," \u2014 "),Uq=n(OAe,"A",{href:!0});var Cdt=s(Uq);$Zo=r(Cdt,"TFXLNetModel"),Cdt.forEach(t),IZo=r(OAe," (XLNet model)"),OAe.forEach(t),x.forEach(t),jZo=i(pa),_ge=n(pa,"P",{});var Mdt=s(_ge);DZo=r(Mdt,"Examples:"),Mdt.forEach(t),NZo=i(pa),m(Dy.$$.fragment,pa),pa.forEach(t),Nl.forEach(t),Bke=i(c),_c=n(c,"H2",{class:!0});var qSe=s(_c);H6=n(qSe,"A",{id:!0,class:!0,href:!0});var Edt=s(H6);uge=n(Edt,"SPAN",{});var ydt=s(uge);m(Ny.$$.fragment,ydt),ydt.forEach(t),Edt.forEach(t),qZo=i(qSe),bge=n(qSe,"SPAN",{});var wdt=s(bge);OZo=r(wdt,"TFAutoModelForPreTraining"),wdt.forEach(t),qSe.forEach(t),xke=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m(qy.$$.fragment,Ol),GZo=i(Ol),uc=n(Ol,"P",{});var LW=s(uc);XZo=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vge=n(LW,"CODE",{});var Adt=s(vge);VZo=r(Adt,"from_pretrained()"),Adt.forEach(t),zZo=r(LW,"class method or the "),Tge=n(LW,"CODE",{});var Ldt=s(Tge);WZo=r(Ldt,"from_config()"),Ldt.forEach(t),QZo=r(LW,`class
method.`),LW.forEach(t),HZo=i(Ol),Oy=n(Ol,"P",{});var OSe=s(Oy);UZo=r(OSe,"This class cannot be instantiated directly using "),Fge=n(OSe,"CODE",{});var Bdt=s(Fge);JZo=r(Bdt,"__init__()"),Bdt.forEach(t),YZo=r(OSe," (throws an error)."),OSe.forEach(t),KZo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(Gy.$$.fragment,Gl),ZZo=i(Gl),Cge=n(Gl,"P",{});var xdt=s(Cge);eer=r(xdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xdt.forEach(t),oer=i(Gl),bc=n(Gl,"P",{});var BW=s(bc);rer=r(BW,`Note:
Loading a model from its configuration file does `),Mge=n(BW,"STRONG",{});var kdt=s(Mge);ter=r(kdt,"not"),kdt.forEach(t),aer=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ege=n(BW,"CODE",{});var Rdt=s(Ege);ner=r(Rdt,"from_pretrained()"),Rdt.forEach(t),ser=r(BW,"to load the model weights."),BW.forEach(t),ler=i(Gl),yge=n(Gl,"P",{});var Sdt=s(yge);ier=r(Sdt,"Examples:"),Sdt.forEach(t),der=i(Gl),m(Xy.$$.fragment,Gl),Gl.forEach(t),cer=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(Vy.$$.fragment,_a),fer=i(_a),wge=n(_a,"P",{});var Pdt=s(wge);mer=r(Pdt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pdt.forEach(t),ger=i(_a),un=n(_a,"P",{});var A4=s(un);her=r(A4,"The model class to instantiate is selected based on the "),Age=n(A4,"CODE",{});var $dt=s(Age);per=r($dt,"model_type"),$dt.forEach(t),_er=r(A4,` property of the config object (either
passed as an argument or loaded from `),Lge=n(A4,"CODE",{});var Idt=s(Lge);uer=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),ber=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(A4,"CODE",{});var jdt=s(Bge);ver=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Ter=r(A4,":"),A4.forEach(t),Fer=i(_a),H=n(_a,"UL",{});var U=s(H);U6=n(U,"LI",{});var GAe=s(U6);xge=n(GAe,"STRONG",{});var Ddt=s(xge);Cer=r(Ddt,"albert"),Ddt.forEach(t),Mer=r(GAe," \u2014 "),Jq=n(GAe,"A",{href:!0});var Ndt=s(Jq);Eer=r(Ndt,"TFAlbertForPreTraining"),Ndt.forEach(t),yer=r(GAe," (ALBERT model)"),GAe.forEach(t),wer=i(U),J6=n(U,"LI",{});var XAe=s(J6);kge=n(XAe,"STRONG",{});var qdt=s(kge);Aer=r(qdt,"bart"),qdt.forEach(t),Ler=r(XAe," \u2014 "),Yq=n(XAe,"A",{href:!0});var Odt=s(Yq);Ber=r(Odt,"TFBartForConditionalGeneration"),Odt.forEach(t),xer=r(XAe," (BART model)"),XAe.forEach(t),ker=i(U),Y6=n(U,"LI",{});var VAe=s(Y6);Rge=n(VAe,"STRONG",{});var Gdt=s(Rge);Rer=r(Gdt,"bert"),Gdt.forEach(t),Ser=r(VAe," \u2014 "),Kq=n(VAe,"A",{href:!0});var Xdt=s(Kq);Per=r(Xdt,"TFBertForPreTraining"),Xdt.forEach(t),$er=r(VAe," (BERT model)"),VAe.forEach(t),Ier=i(U),K6=n(U,"LI",{});var zAe=s(K6);Sge=n(zAe,"STRONG",{});var Vdt=s(Sge);jer=r(Vdt,"camembert"),Vdt.forEach(t),Der=r(zAe," \u2014 "),Zq=n(zAe,"A",{href:!0});var zdt=s(Zq);Ner=r(zdt,"TFCamembertForMaskedLM"),zdt.forEach(t),qer=r(zAe," (CamemBERT model)"),zAe.forEach(t),Oer=i(U),Z6=n(U,"LI",{});var WAe=s(Z6);Pge=n(WAe,"STRONG",{});var Wdt=s(Pge);Ger=r(Wdt,"ctrl"),Wdt.forEach(t),Xer=r(WAe," \u2014 "),eO=n(WAe,"A",{href:!0});var Qdt=s(eO);Ver=r(Qdt,"TFCTRLLMHeadModel"),Qdt.forEach(t),zer=r(WAe," (CTRL model)"),WAe.forEach(t),Wer=i(U),eT=n(U,"LI",{});var QAe=s(eT);$ge=n(QAe,"STRONG",{});var Hdt=s($ge);Qer=r(Hdt,"distilbert"),Hdt.forEach(t),Her=r(QAe," \u2014 "),oO=n(QAe,"A",{href:!0});var Udt=s(oO);Uer=r(Udt,"TFDistilBertForMaskedLM"),Udt.forEach(t),Jer=r(QAe," (DistilBERT model)"),QAe.forEach(t),Yer=i(U),oT=n(U,"LI",{});var HAe=s(oT);Ige=n(HAe,"STRONG",{});var Jdt=s(Ige);Ker=r(Jdt,"electra"),Jdt.forEach(t),Zer=r(HAe," \u2014 "),rO=n(HAe,"A",{href:!0});var Ydt=s(rO);eor=r(Ydt,"TFElectraForPreTraining"),Ydt.forEach(t),oor=r(HAe," (ELECTRA model)"),HAe.forEach(t),ror=i(U),rT=n(U,"LI",{});var UAe=s(rT);jge=n(UAe,"STRONG",{});var Kdt=s(jge);tor=r(Kdt,"flaubert"),Kdt.forEach(t),aor=r(UAe," \u2014 "),tO=n(UAe,"A",{href:!0});var Zdt=s(tO);nor=r(Zdt,"TFFlaubertWithLMHeadModel"),Zdt.forEach(t),sor=r(UAe," (FlauBERT model)"),UAe.forEach(t),lor=i(U),tT=n(U,"LI",{});var JAe=s(tT);Dge=n(JAe,"STRONG",{});var ect=s(Dge);ior=r(ect,"funnel"),ect.forEach(t),dor=r(JAe," \u2014 "),aO=n(JAe,"A",{href:!0});var oct=s(aO);cor=r(oct,"TFFunnelForPreTraining"),oct.forEach(t),mor=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),gor=i(U),aT=n(U,"LI",{});var YAe=s(aT);Nge=n(YAe,"STRONG",{});var rct=s(Nge);hor=r(rct,"gpt2"),rct.forEach(t),por=r(YAe," \u2014 "),nO=n(YAe,"A",{href:!0});var tct=s(nO);_or=r(tct,"TFGPT2LMHeadModel"),tct.forEach(t),uor=r(YAe," (OpenAI GPT-2 model)"),YAe.forEach(t),bor=i(U),nT=n(U,"LI",{});var KAe=s(nT);qge=n(KAe,"STRONG",{});var act=s(qge);vor=r(act,"layoutlm"),act.forEach(t),Tor=r(KAe," \u2014 "),sO=n(KAe,"A",{href:!0});var nct=s(sO);For=r(nct,"TFLayoutLMForMaskedLM"),nct.forEach(t),Cor=r(KAe," (LayoutLM model)"),KAe.forEach(t),Mor=i(U),sT=n(U,"LI",{});var ZAe=s(sT);Oge=n(ZAe,"STRONG",{});var sct=s(Oge);Eor=r(sct,"lxmert"),sct.forEach(t),yor=r(ZAe," \u2014 "),lO=n(ZAe,"A",{href:!0});var lct=s(lO);wor=r(lct,"TFLxmertForPreTraining"),lct.forEach(t),Aor=r(ZAe," (LXMERT model)"),ZAe.forEach(t),Lor=i(U),lT=n(U,"LI",{});var eLe=s(lT);Gge=n(eLe,"STRONG",{});var ict=s(Gge);Bor=r(ict,"mobilebert"),ict.forEach(t),xor=r(eLe," \u2014 "),iO=n(eLe,"A",{href:!0});var dct=s(iO);kor=r(dct,"TFMobileBertForPreTraining"),dct.forEach(t),Ror=r(eLe," (MobileBERT model)"),eLe.forEach(t),Sor=i(U),iT=n(U,"LI",{});var oLe=s(iT);Xge=n(oLe,"STRONG",{});var cct=s(Xge);Por=r(cct,"mpnet"),cct.forEach(t),$or=r(oLe," \u2014 "),dO=n(oLe,"A",{href:!0});var fct=s(dO);Ior=r(fct,"TFMPNetForMaskedLM"),fct.forEach(t),jor=r(oLe," (MPNet model)"),oLe.forEach(t),Dor=i(U),dT=n(U,"LI",{});var rLe=s(dT);Vge=n(rLe,"STRONG",{});var mct=s(Vge);Nor=r(mct,"openai-gpt"),mct.forEach(t),qor=r(rLe," \u2014 "),cO=n(rLe,"A",{href:!0});var gct=s(cO);Oor=r(gct,"TFOpenAIGPTLMHeadModel"),gct.forEach(t),Gor=r(rLe," (OpenAI GPT model)"),rLe.forEach(t),Xor=i(U),cT=n(U,"LI",{});var tLe=s(cT);zge=n(tLe,"STRONG",{});var hct=s(zge);Vor=r(hct,"roberta"),hct.forEach(t),zor=r(tLe," \u2014 "),fO=n(tLe,"A",{href:!0});var pct=s(fO);Wor=r(pct,"TFRobertaForMaskedLM"),pct.forEach(t),Qor=r(tLe," (RoBERTa model)"),tLe.forEach(t),Hor=i(U),fT=n(U,"LI",{});var aLe=s(fT);Wge=n(aLe,"STRONG",{});var _ct=s(Wge);Uor=r(_ct,"t5"),_ct.forEach(t),Jor=r(aLe," \u2014 "),mO=n(aLe,"A",{href:!0});var uct=s(mO);Yor=r(uct,"TFT5ForConditionalGeneration"),uct.forEach(t),Kor=r(aLe," (T5 model)"),aLe.forEach(t),Zor=i(U),mT=n(U,"LI",{});var nLe=s(mT);Qge=n(nLe,"STRONG",{});var bct=s(Qge);err=r(bct,"tapas"),bct.forEach(t),orr=r(nLe," \u2014 "),gO=n(nLe,"A",{href:!0});var vct=s(gO);rrr=r(vct,"TFTapasForMaskedLM"),vct.forEach(t),trr=r(nLe," (TAPAS model)"),nLe.forEach(t),arr=i(U),gT=n(U,"LI",{});var sLe=s(gT);Hge=n(sLe,"STRONG",{});var Tct=s(Hge);nrr=r(Tct,"transfo-xl"),Tct.forEach(t),srr=r(sLe," \u2014 "),hO=n(sLe,"A",{href:!0});var Fct=s(hO);lrr=r(Fct,"TFTransfoXLLMHeadModel"),Fct.forEach(t),irr=r(sLe," (Transformer-XL model)"),sLe.forEach(t),drr=i(U),hT=n(U,"LI",{});var lLe=s(hT);Uge=n(lLe,"STRONG",{});var Cct=s(Uge);crr=r(Cct,"xlm"),Cct.forEach(t),frr=r(lLe," \u2014 "),pO=n(lLe,"A",{href:!0});var Mct=s(pO);mrr=r(Mct,"TFXLMWithLMHeadModel"),Mct.forEach(t),grr=r(lLe," (XLM model)"),lLe.forEach(t),hrr=i(U),pT=n(U,"LI",{});var iLe=s(pT);Jge=n(iLe,"STRONG",{});var Ect=s(Jge);prr=r(Ect,"xlm-roberta"),Ect.forEach(t),_rr=r(iLe," \u2014 "),_O=n(iLe,"A",{href:!0});var yct=s(_O);urr=r(yct,"TFXLMRobertaForMaskedLM"),yct.forEach(t),brr=r(iLe," (XLM-RoBERTa model)"),iLe.forEach(t),vrr=i(U),_T=n(U,"LI",{});var dLe=s(_T);Yge=n(dLe,"STRONG",{});var wct=s(Yge);Trr=r(wct,"xlnet"),wct.forEach(t),Frr=r(dLe," \u2014 "),uO=n(dLe,"A",{href:!0});var Act=s(uO);Crr=r(Act,"TFXLNetLMHeadModel"),Act.forEach(t),Mrr=r(dLe," (XLNet model)"),dLe.forEach(t),U.forEach(t),Err=i(_a),Kge=n(_a,"P",{});var Lct=s(Kge);yrr=r(Lct,"Examples:"),Lct.forEach(t),wrr=i(_a),m(zy.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),kke=i(c),vc=n(c,"H2",{class:!0});var GSe=s(vc);uT=n(GSe,"A",{id:!0,class:!0,href:!0});var Bct=s(uT);Zge=n(Bct,"SPAN",{});var xct=s(Zge);m(Wy.$$.fragment,xct),xct.forEach(t),Bct.forEach(t),Arr=i(GSe),ehe=n(GSe,"SPAN",{});var kct=s(ehe);Lrr=r(kct,"TFAutoModelForCausalLM"),kct.forEach(t),GSe.forEach(t),Rke=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(Qy.$$.fragment,Xl),Brr=i(Xl),Tc=n(Xl,"P",{});var xW=s(Tc);xrr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ohe=n(xW,"CODE",{});var Rct=s(ohe);krr=r(Rct,"from_pretrained()"),Rct.forEach(t),Rrr=r(xW,"class method or the "),rhe=n(xW,"CODE",{});var Sct=s(rhe);Srr=r(Sct,"from_config()"),Sct.forEach(t),Prr=r(xW,`class
method.`),xW.forEach(t),$rr=i(Xl),Hy=n(Xl,"P",{});var XSe=s(Hy);Irr=r(XSe,"This class cannot be instantiated directly using "),the=n(XSe,"CODE",{});var Pct=s(the);jrr=r(Pct,"__init__()"),Pct.forEach(t),Drr=r(XSe," (throws an error)."),XSe.forEach(t),Nrr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(Uy.$$.fragment,Vl),qrr=i(Vl),ahe=n(Vl,"P",{});var $ct=s(ahe);Orr=r($ct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$ct.forEach(t),Grr=i(Vl),Fc=n(Vl,"P",{});var kW=s(Fc);Xrr=r(kW,`Note:
Loading a model from its configuration file does `),nhe=n(kW,"STRONG",{});var Ict=s(nhe);Vrr=r(Ict,"not"),Ict.forEach(t),zrr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),she=n(kW,"CODE",{});var jct=s(she);Wrr=r(jct,"from_pretrained()"),jct.forEach(t),Qrr=r(kW,"to load the model weights."),kW.forEach(t),Hrr=i(Vl),lhe=n(Vl,"P",{});var Dct=s(lhe);Urr=r(Dct,"Examples:"),Dct.forEach(t),Jrr=i(Vl),m(Jy.$$.fragment,Vl),Vl.forEach(t),Yrr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(Yy.$$.fragment,ua),Krr=i(ua),ihe=n(ua,"P",{});var Nct=s(ihe);Zrr=r(Nct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nct.forEach(t),etr=i(ua),bn=n(ua,"P",{});var L4=s(bn);otr=r(L4,"The model class to instantiate is selected based on the "),dhe=n(L4,"CODE",{});var qct=s(dhe);rtr=r(qct,"model_type"),qct.forEach(t),ttr=r(L4,` property of the config object (either
passed as an argument or loaded from `),che=n(L4,"CODE",{});var Oct=s(che);atr=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),ntr=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(L4,"CODE",{});var Gct=s(fhe);str=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),ltr=r(L4,":"),L4.forEach(t),itr=i(ua),me=n(ua,"UL",{});var Fe=s(me);bT=n(Fe,"LI",{});var cLe=s(bT);mhe=n(cLe,"STRONG",{});var Xct=s(mhe);dtr=r(Xct,"bert"),Xct.forEach(t),ctr=r(cLe," \u2014 "),bO=n(cLe,"A",{href:!0});var Vct=s(bO);ftr=r(Vct,"TFBertLMHeadModel"),Vct.forEach(t),mtr=r(cLe," (BERT model)"),cLe.forEach(t),gtr=i(Fe),vT=n(Fe,"LI",{});var fLe=s(vT);ghe=n(fLe,"STRONG",{});var zct=s(ghe);htr=r(zct,"camembert"),zct.forEach(t),ptr=r(fLe," \u2014 "),vO=n(fLe,"A",{href:!0});var Wct=s(vO);_tr=r(Wct,"TFCamembertForCausalLM"),Wct.forEach(t),utr=r(fLe," (CamemBERT model)"),fLe.forEach(t),btr=i(Fe),TT=n(Fe,"LI",{});var mLe=s(TT);hhe=n(mLe,"STRONG",{});var Qct=s(hhe);vtr=r(Qct,"ctrl"),Qct.forEach(t),Ttr=r(mLe," \u2014 "),TO=n(mLe,"A",{href:!0});var Hct=s(TO);Ftr=r(Hct,"TFCTRLLMHeadModel"),Hct.forEach(t),Ctr=r(mLe," (CTRL model)"),mLe.forEach(t),Mtr=i(Fe),FT=n(Fe,"LI",{});var gLe=s(FT);phe=n(gLe,"STRONG",{});var Uct=s(phe);Etr=r(Uct,"gpt2"),Uct.forEach(t),ytr=r(gLe," \u2014 "),FO=n(gLe,"A",{href:!0});var Jct=s(FO);wtr=r(Jct,"TFGPT2LMHeadModel"),Jct.forEach(t),Atr=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),Ltr=i(Fe),CT=n(Fe,"LI",{});var hLe=s(CT);_he=n(hLe,"STRONG",{});var Yct=s(_he);Btr=r(Yct,"openai-gpt"),Yct.forEach(t),xtr=r(hLe," \u2014 "),CO=n(hLe,"A",{href:!0});var Kct=s(CO);ktr=r(Kct,"TFOpenAIGPTLMHeadModel"),Kct.forEach(t),Rtr=r(hLe," (OpenAI GPT model)"),hLe.forEach(t),Str=i(Fe),MT=n(Fe,"LI",{});var pLe=s(MT);uhe=n(pLe,"STRONG",{});var Zct=s(uhe);Ptr=r(Zct,"rembert"),Zct.forEach(t),$tr=r(pLe," \u2014 "),MO=n(pLe,"A",{href:!0});var eft=s(MO);Itr=r(eft,"TFRemBertForCausalLM"),eft.forEach(t),jtr=r(pLe," (RemBERT model)"),pLe.forEach(t),Dtr=i(Fe),ET=n(Fe,"LI",{});var _Le=s(ET);bhe=n(_Le,"STRONG",{});var oft=s(bhe);Ntr=r(oft,"roberta"),oft.forEach(t),qtr=r(_Le," \u2014 "),EO=n(_Le,"A",{href:!0});var rft=s(EO);Otr=r(rft,"TFRobertaForCausalLM"),rft.forEach(t),Gtr=r(_Le," (RoBERTa model)"),_Le.forEach(t),Xtr=i(Fe),yT=n(Fe,"LI",{});var uLe=s(yT);vhe=n(uLe,"STRONG",{});var tft=s(vhe);Vtr=r(tft,"roformer"),tft.forEach(t),ztr=r(uLe," \u2014 "),yO=n(uLe,"A",{href:!0});var aft=s(yO);Wtr=r(aft,"TFRoFormerForCausalLM"),aft.forEach(t),Qtr=r(uLe," (RoFormer model)"),uLe.forEach(t),Htr=i(Fe),wT=n(Fe,"LI",{});var bLe=s(wT);The=n(bLe,"STRONG",{});var nft=s(The);Utr=r(nft,"transfo-xl"),nft.forEach(t),Jtr=r(bLe," \u2014 "),wO=n(bLe,"A",{href:!0});var sft=s(wO);Ytr=r(sft,"TFTransfoXLLMHeadModel"),sft.forEach(t),Ktr=r(bLe," (Transformer-XL model)"),bLe.forEach(t),Ztr=i(Fe),AT=n(Fe,"LI",{});var vLe=s(AT);Fhe=n(vLe,"STRONG",{});var lft=s(Fhe);ear=r(lft,"xlm"),lft.forEach(t),oar=r(vLe," \u2014 "),AO=n(vLe,"A",{href:!0});var ift=s(AO);rar=r(ift,"TFXLMWithLMHeadModel"),ift.forEach(t),tar=r(vLe," (XLM model)"),vLe.forEach(t),aar=i(Fe),LT=n(Fe,"LI",{});var TLe=s(LT);Che=n(TLe,"STRONG",{});var dft=s(Che);nar=r(dft,"xlnet"),dft.forEach(t),sar=r(TLe," \u2014 "),LO=n(TLe,"A",{href:!0});var cft=s(LO);lar=r(cft,"TFXLNetLMHeadModel"),cft.forEach(t),iar=r(TLe," (XLNet model)"),TLe.forEach(t),Fe.forEach(t),dar=i(ua),Mhe=n(ua,"P",{});var fft=s(Mhe);car=r(fft,"Examples:"),fft.forEach(t),far=i(ua),m(Ky.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),Ske=i(c),Cc=n(c,"H2",{class:!0});var VSe=s(Cc);BT=n(VSe,"A",{id:!0,class:!0,href:!0});var mft=s(BT);Ehe=n(mft,"SPAN",{});var gft=s(Ehe);m(Zy.$$.fragment,gft),gft.forEach(t),mft.forEach(t),mar=i(VSe),yhe=n(VSe,"SPAN",{});var hft=s(yhe);gar=r(hft,"TFAutoModelForImageClassification"),hft.forEach(t),VSe.forEach(t),Pke=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(ew.$$.fragment,zl),har=i(zl),Mc=n(zl,"P",{});var RW=s(Mc);par=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),whe=n(RW,"CODE",{});var pft=s(whe);_ar=r(pft,"from_pretrained()"),pft.forEach(t),uar=r(RW,"class method or the "),Ahe=n(RW,"CODE",{});var _ft=s(Ahe);bar=r(_ft,"from_config()"),_ft.forEach(t),Tar=r(RW,`class
method.`),RW.forEach(t),Far=i(zl),ow=n(zl,"P",{});var zSe=s(ow);Car=r(zSe,"This class cannot be instantiated directly using "),Lhe=n(zSe,"CODE",{});var uft=s(Lhe);Mar=r(uft,"__init__()"),uft.forEach(t),Ear=r(zSe," (throws an error)."),zSe.forEach(t),yar=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(rw.$$.fragment,Wl),war=i(Wl),Bhe=n(Wl,"P",{});var bft=s(Bhe);Aar=r(bft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bft.forEach(t),Lar=i(Wl),Ec=n(Wl,"P",{});var SW=s(Ec);Bar=r(SW,`Note:
Loading a model from its configuration file does `),xhe=n(SW,"STRONG",{});var vft=s(xhe);xar=r(vft,"not"),vft.forEach(t),kar=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),khe=n(SW,"CODE",{});var Tft=s(khe);Rar=r(Tft,"from_pretrained()"),Tft.forEach(t),Sar=r(SW,"to load the model weights."),SW.forEach(t),Par=i(Wl),Rhe=n(Wl,"P",{});var Fft=s(Rhe);$ar=r(Fft,"Examples:"),Fft.forEach(t),Iar=i(Wl),m(tw.$$.fragment,Wl),Wl.forEach(t),jar=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(aw.$$.fragment,ba),Dar=i(ba),She=n(ba,"P",{});var Cft=s(She);Nar=r(Cft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cft.forEach(t),qar=i(ba),vn=n(ba,"P",{});var B4=s(vn);Oar=r(B4,"The model class to instantiate is selected based on the "),Phe=n(B4,"CODE",{});var Mft=s(Phe);Gar=r(Mft,"model_type"),Mft.forEach(t),Xar=r(B4,` property of the config object (either
passed as an argument or loaded from `),$he=n(B4,"CODE",{});var Eft=s($he);Var=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),zar=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(B4,"CODE",{});var yft=s(Ihe);War=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),Qar=r(B4,":"),B4.forEach(t),Har=i(ba),nw=n(ba,"UL",{});var WSe=s(nw);xT=n(WSe,"LI",{});var FLe=s(xT);jhe=n(FLe,"STRONG",{});var wft=s(jhe);Uar=r(wft,"convnext"),wft.forEach(t),Jar=r(FLe," \u2014 "),BO=n(FLe,"A",{href:!0});var Aft=s(BO);Yar=r(Aft,"TFConvNextForImageClassification"),Aft.forEach(t),Kar=r(FLe," (ConvNext model)"),FLe.forEach(t),Zar=i(WSe),kT=n(WSe,"LI",{});var CLe=s(kT);Dhe=n(CLe,"STRONG",{});var Lft=s(Dhe);enr=r(Lft,"vit"),Lft.forEach(t),onr=r(CLe," \u2014 "),xO=n(CLe,"A",{href:!0});var Bft=s(xO);rnr=r(Bft,"TFViTForImageClassification"),Bft.forEach(t),tnr=r(CLe," (ViT model)"),CLe.forEach(t),WSe.forEach(t),anr=i(ba),Nhe=n(ba,"P",{});var xft=s(Nhe);nnr=r(xft,"Examples:"),xft.forEach(t),snr=i(ba),m(sw.$$.fragment,ba),ba.forEach(t),zl.forEach(t),$ke=i(c),yc=n(c,"H2",{class:!0});var QSe=s(yc);RT=n(QSe,"A",{id:!0,class:!0,href:!0});var kft=s(RT);qhe=n(kft,"SPAN",{});var Rft=s(qhe);m(lw.$$.fragment,Rft),Rft.forEach(t),kft.forEach(t),lnr=i(QSe),Ohe=n(QSe,"SPAN",{});var Sft=s(Ohe);inr=r(Sft,"TFAutoModelForMaskedLM"),Sft.forEach(t),QSe.forEach(t),Ike=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(iw.$$.fragment,Ql),dnr=i(Ql),wc=n(Ql,"P",{});var PW=s(wc);cnr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ghe=n(PW,"CODE",{});var Pft=s(Ghe);fnr=r(Pft,"from_pretrained()"),Pft.forEach(t),mnr=r(PW,"class method or the "),Xhe=n(PW,"CODE",{});var $ft=s(Xhe);gnr=r($ft,"from_config()"),$ft.forEach(t),hnr=r(PW,`class
method.`),PW.forEach(t),pnr=i(Ql),dw=n(Ql,"P",{});var HSe=s(dw);_nr=r(HSe,"This class cannot be instantiated directly using "),Vhe=n(HSe,"CODE",{});var Ift=s(Vhe);unr=r(Ift,"__init__()"),Ift.forEach(t),bnr=r(HSe," (throws an error)."),HSe.forEach(t),vnr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(cw.$$.fragment,Hl),Tnr=i(Hl),zhe=n(Hl,"P",{});var jft=s(zhe);Fnr=r(jft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jft.forEach(t),Cnr=i(Hl),Ac=n(Hl,"P",{});var $W=s(Ac);Mnr=r($W,`Note:
Loading a model from its configuration file does `),Whe=n($W,"STRONG",{});var Dft=s(Whe);Enr=r(Dft,"not"),Dft.forEach(t),ynr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=n($W,"CODE",{});var Nft=s(Qhe);wnr=r(Nft,"from_pretrained()"),Nft.forEach(t),Anr=r($W,"to load the model weights."),$W.forEach(t),Lnr=i(Hl),Hhe=n(Hl,"P",{});var qft=s(Hhe);Bnr=r(qft,"Examples:"),qft.forEach(t),xnr=i(Hl),m(fw.$$.fragment,Hl),Hl.forEach(t),knr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(mw.$$.fragment,va),Rnr=i(va),Uhe=n(va,"P",{});var Oft=s(Uhe);Snr=r(Oft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Oft.forEach(t),Pnr=i(va),Tn=n(va,"P",{});var x4=s(Tn);$nr=r(x4,"The model class to instantiate is selected based on the "),Jhe=n(x4,"CODE",{});var Gft=s(Jhe);Inr=r(Gft,"model_type"),Gft.forEach(t),jnr=r(x4,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(x4,"CODE",{});var Xft=s(Yhe);Dnr=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),Nnr=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(x4,"CODE",{});var Vft=s(Khe);qnr=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),Onr=r(x4,":"),x4.forEach(t),Gnr=i(va),Y=n(va,"UL",{});var ee=s(Y);ST=n(ee,"LI",{});var MLe=s(ST);Zhe=n(MLe,"STRONG",{});var zft=s(Zhe);Xnr=r(zft,"albert"),zft.forEach(t),Vnr=r(MLe," \u2014 "),kO=n(MLe,"A",{href:!0});var Wft=s(kO);znr=r(Wft,"TFAlbertForMaskedLM"),Wft.forEach(t),Wnr=r(MLe," (ALBERT model)"),MLe.forEach(t),Qnr=i(ee),PT=n(ee,"LI",{});var ELe=s(PT);epe=n(ELe,"STRONG",{});var Qft=s(epe);Hnr=r(Qft,"bert"),Qft.forEach(t),Unr=r(ELe," \u2014 "),RO=n(ELe,"A",{href:!0});var Hft=s(RO);Jnr=r(Hft,"TFBertForMaskedLM"),Hft.forEach(t),Ynr=r(ELe," (BERT model)"),ELe.forEach(t),Knr=i(ee),$T=n(ee,"LI",{});var yLe=s($T);ope=n(yLe,"STRONG",{});var Uft=s(ope);Znr=r(Uft,"camembert"),Uft.forEach(t),esr=r(yLe," \u2014 "),SO=n(yLe,"A",{href:!0});var Jft=s(SO);osr=r(Jft,"TFCamembertForMaskedLM"),Jft.forEach(t),rsr=r(yLe," (CamemBERT model)"),yLe.forEach(t),tsr=i(ee),IT=n(ee,"LI",{});var wLe=s(IT);rpe=n(wLe,"STRONG",{});var Yft=s(rpe);asr=r(Yft,"convbert"),Yft.forEach(t),nsr=r(wLe," \u2014 "),PO=n(wLe,"A",{href:!0});var Kft=s(PO);ssr=r(Kft,"TFConvBertForMaskedLM"),Kft.forEach(t),lsr=r(wLe," (ConvBERT model)"),wLe.forEach(t),isr=i(ee),jT=n(ee,"LI",{});var ALe=s(jT);tpe=n(ALe,"STRONG",{});var Zft=s(tpe);dsr=r(Zft,"deberta"),Zft.forEach(t),csr=r(ALe," \u2014 "),$O=n(ALe,"A",{href:!0});var emt=s($O);fsr=r(emt,"TFDebertaForMaskedLM"),emt.forEach(t),msr=r(ALe," (DeBERTa model)"),ALe.forEach(t),gsr=i(ee),DT=n(ee,"LI",{});var LLe=s(DT);ape=n(LLe,"STRONG",{});var omt=s(ape);hsr=r(omt,"deberta-v2"),omt.forEach(t),psr=r(LLe," \u2014 "),IO=n(LLe,"A",{href:!0});var rmt=s(IO);_sr=r(rmt,"TFDebertaV2ForMaskedLM"),rmt.forEach(t),usr=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),bsr=i(ee),NT=n(ee,"LI",{});var BLe=s(NT);npe=n(BLe,"STRONG",{});var tmt=s(npe);vsr=r(tmt,"distilbert"),tmt.forEach(t),Tsr=r(BLe," \u2014 "),jO=n(BLe,"A",{href:!0});var amt=s(jO);Fsr=r(amt,"TFDistilBertForMaskedLM"),amt.forEach(t),Csr=r(BLe," (DistilBERT model)"),BLe.forEach(t),Msr=i(ee),qT=n(ee,"LI",{});var xLe=s(qT);spe=n(xLe,"STRONG",{});var nmt=s(spe);Esr=r(nmt,"electra"),nmt.forEach(t),ysr=r(xLe," \u2014 "),DO=n(xLe,"A",{href:!0});var smt=s(DO);wsr=r(smt,"TFElectraForMaskedLM"),smt.forEach(t),Asr=r(xLe," (ELECTRA model)"),xLe.forEach(t),Lsr=i(ee),OT=n(ee,"LI",{});var kLe=s(OT);lpe=n(kLe,"STRONG",{});var lmt=s(lpe);Bsr=r(lmt,"flaubert"),lmt.forEach(t),xsr=r(kLe," \u2014 "),NO=n(kLe,"A",{href:!0});var imt=s(NO);ksr=r(imt,"TFFlaubertWithLMHeadModel"),imt.forEach(t),Rsr=r(kLe," (FlauBERT model)"),kLe.forEach(t),Ssr=i(ee),GT=n(ee,"LI",{});var RLe=s(GT);ipe=n(RLe,"STRONG",{});var dmt=s(ipe);Psr=r(dmt,"funnel"),dmt.forEach(t),$sr=r(RLe," \u2014 "),qO=n(RLe,"A",{href:!0});var cmt=s(qO);Isr=r(cmt,"TFFunnelForMaskedLM"),cmt.forEach(t),jsr=r(RLe," (Funnel Transformer model)"),RLe.forEach(t),Dsr=i(ee),XT=n(ee,"LI",{});var SLe=s(XT);dpe=n(SLe,"STRONG",{});var fmt=s(dpe);Nsr=r(fmt,"layoutlm"),fmt.forEach(t),qsr=r(SLe," \u2014 "),OO=n(SLe,"A",{href:!0});var mmt=s(OO);Osr=r(mmt,"TFLayoutLMForMaskedLM"),mmt.forEach(t),Gsr=r(SLe," (LayoutLM model)"),SLe.forEach(t),Xsr=i(ee),VT=n(ee,"LI",{});var PLe=s(VT);cpe=n(PLe,"STRONG",{});var gmt=s(cpe);Vsr=r(gmt,"longformer"),gmt.forEach(t),zsr=r(PLe," \u2014 "),GO=n(PLe,"A",{href:!0});var hmt=s(GO);Wsr=r(hmt,"TFLongformerForMaskedLM"),hmt.forEach(t),Qsr=r(PLe," (Longformer model)"),PLe.forEach(t),Hsr=i(ee),zT=n(ee,"LI",{});var $Le=s(zT);fpe=n($Le,"STRONG",{});var pmt=s(fpe);Usr=r(pmt,"mobilebert"),pmt.forEach(t),Jsr=r($Le," \u2014 "),XO=n($Le,"A",{href:!0});var _mt=s(XO);Ysr=r(_mt,"TFMobileBertForMaskedLM"),_mt.forEach(t),Ksr=r($Le," (MobileBERT model)"),$Le.forEach(t),Zsr=i(ee),WT=n(ee,"LI",{});var ILe=s(WT);mpe=n(ILe,"STRONG",{});var umt=s(mpe);elr=r(umt,"mpnet"),umt.forEach(t),olr=r(ILe," \u2014 "),VO=n(ILe,"A",{href:!0});var bmt=s(VO);rlr=r(bmt,"TFMPNetForMaskedLM"),bmt.forEach(t),tlr=r(ILe," (MPNet model)"),ILe.forEach(t),alr=i(ee),QT=n(ee,"LI",{});var jLe=s(QT);gpe=n(jLe,"STRONG",{});var vmt=s(gpe);nlr=r(vmt,"rembert"),vmt.forEach(t),slr=r(jLe," \u2014 "),zO=n(jLe,"A",{href:!0});var Tmt=s(zO);llr=r(Tmt,"TFRemBertForMaskedLM"),Tmt.forEach(t),ilr=r(jLe," (RemBERT model)"),jLe.forEach(t),dlr=i(ee),HT=n(ee,"LI",{});var DLe=s(HT);hpe=n(DLe,"STRONG",{});var Fmt=s(hpe);clr=r(Fmt,"roberta"),Fmt.forEach(t),flr=r(DLe," \u2014 "),WO=n(DLe,"A",{href:!0});var Cmt=s(WO);mlr=r(Cmt,"TFRobertaForMaskedLM"),Cmt.forEach(t),glr=r(DLe," (RoBERTa model)"),DLe.forEach(t),hlr=i(ee),UT=n(ee,"LI",{});var NLe=s(UT);ppe=n(NLe,"STRONG",{});var Mmt=s(ppe);plr=r(Mmt,"roformer"),Mmt.forEach(t),_lr=r(NLe," \u2014 "),QO=n(NLe,"A",{href:!0});var Emt=s(QO);ulr=r(Emt,"TFRoFormerForMaskedLM"),Emt.forEach(t),blr=r(NLe," (RoFormer model)"),NLe.forEach(t),vlr=i(ee),JT=n(ee,"LI",{});var qLe=s(JT);_pe=n(qLe,"STRONG",{});var ymt=s(_pe);Tlr=r(ymt,"tapas"),ymt.forEach(t),Flr=r(qLe," \u2014 "),HO=n(qLe,"A",{href:!0});var wmt=s(HO);Clr=r(wmt,"TFTapasForMaskedLM"),wmt.forEach(t),Mlr=r(qLe," (TAPAS model)"),qLe.forEach(t),Elr=i(ee),YT=n(ee,"LI",{});var OLe=s(YT);upe=n(OLe,"STRONG",{});var Amt=s(upe);ylr=r(Amt,"xlm"),Amt.forEach(t),wlr=r(OLe," \u2014 "),UO=n(OLe,"A",{href:!0});var Lmt=s(UO);Alr=r(Lmt,"TFXLMWithLMHeadModel"),Lmt.forEach(t),Llr=r(OLe," (XLM model)"),OLe.forEach(t),Blr=i(ee),KT=n(ee,"LI",{});var GLe=s(KT);bpe=n(GLe,"STRONG",{});var Bmt=s(bpe);xlr=r(Bmt,"xlm-roberta"),Bmt.forEach(t),klr=r(GLe," \u2014 "),JO=n(GLe,"A",{href:!0});var xmt=s(JO);Rlr=r(xmt,"TFXLMRobertaForMaskedLM"),xmt.forEach(t),Slr=r(GLe," (XLM-RoBERTa model)"),GLe.forEach(t),ee.forEach(t),Plr=i(va),vpe=n(va,"P",{});var kmt=s(vpe);$lr=r(kmt,"Examples:"),kmt.forEach(t),Ilr=i(va),m(gw.$$.fragment,va),va.forEach(t),Ql.forEach(t),jke=i(c),Lc=n(c,"H2",{class:!0});var USe=s(Lc);ZT=n(USe,"A",{id:!0,class:!0,href:!0});var Rmt=s(ZT);Tpe=n(Rmt,"SPAN",{});var Smt=s(Tpe);m(hw.$$.fragment,Smt),Smt.forEach(t),Rmt.forEach(t),jlr=i(USe),Fpe=n(USe,"SPAN",{});var Pmt=s(Fpe);Dlr=r(Pmt,"TFAutoModelForSeq2SeqLM"),Pmt.forEach(t),USe.forEach(t),Dke=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(pw.$$.fragment,Ul),Nlr=i(Ul),Bc=n(Ul,"P",{});var IW=s(Bc);qlr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cpe=n(IW,"CODE",{});var $mt=s(Cpe);Olr=r($mt,"from_pretrained()"),$mt.forEach(t),Glr=r(IW,"class method or the "),Mpe=n(IW,"CODE",{});var Imt=s(Mpe);Xlr=r(Imt,"from_config()"),Imt.forEach(t),Vlr=r(IW,`class
method.`),IW.forEach(t),zlr=i(Ul),_w=n(Ul,"P",{});var JSe=s(_w);Wlr=r(JSe,"This class cannot be instantiated directly using "),Epe=n(JSe,"CODE",{});var jmt=s(Epe);Qlr=r(jmt,"__init__()"),jmt.forEach(t),Hlr=r(JSe," (throws an error)."),JSe.forEach(t),Ulr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(uw.$$.fragment,Jl),Jlr=i(Jl),ype=n(Jl,"P",{});var Dmt=s(ype);Ylr=r(Dmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dmt.forEach(t),Klr=i(Jl),xc=n(Jl,"P",{});var jW=s(xc);Zlr=r(jW,`Note:
Loading a model from its configuration file does `),wpe=n(jW,"STRONG",{});var Nmt=s(wpe);eir=r(Nmt,"not"),Nmt.forEach(t),oir=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=n(jW,"CODE",{});var qmt=s(Ape);rir=r(qmt,"from_pretrained()"),qmt.forEach(t),tir=r(jW,"to load the model weights."),jW.forEach(t),air=i(Jl),Lpe=n(Jl,"P",{});var Omt=s(Lpe);nir=r(Omt,"Examples:"),Omt.forEach(t),sir=i(Jl),m(bw.$$.fragment,Jl),Jl.forEach(t),lir=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(vw.$$.fragment,Ta),iir=i(Ta),Bpe=n(Ta,"P",{});var Gmt=s(Bpe);dir=r(Gmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gmt.forEach(t),cir=i(Ta),Fn=n(Ta,"P",{});var k4=s(Fn);fir=r(k4,"The model class to instantiate is selected based on the "),xpe=n(k4,"CODE",{});var Xmt=s(xpe);mir=r(Xmt,"model_type"),Xmt.forEach(t),gir=r(k4,` property of the config object (either
passed as an argument or loaded from `),kpe=n(k4,"CODE",{});var Vmt=s(kpe);hir=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),pir=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(k4,"CODE",{});var zmt=s(Rpe);_ir=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),uir=r(k4,":"),k4.forEach(t),bir=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);e7=n(ye,"LI",{});var XLe=s(e7);Spe=n(XLe,"STRONG",{});var Wmt=s(Spe);vir=r(Wmt,"bart"),Wmt.forEach(t),Tir=r(XLe," \u2014 "),YO=n(XLe,"A",{href:!0});var Qmt=s(YO);Fir=r(Qmt,"TFBartForConditionalGeneration"),Qmt.forEach(t),Cir=r(XLe," (BART model)"),XLe.forEach(t),Mir=i(ye),o7=n(ye,"LI",{});var VLe=s(o7);Ppe=n(VLe,"STRONG",{});var Hmt=s(Ppe);Eir=r(Hmt,"blenderbot"),Hmt.forEach(t),yir=r(VLe," \u2014 "),KO=n(VLe,"A",{href:!0});var Umt=s(KO);wir=r(Umt,"TFBlenderbotForConditionalGeneration"),Umt.forEach(t),Air=r(VLe," (Blenderbot model)"),VLe.forEach(t),Lir=i(ye),r7=n(ye,"LI",{});var zLe=s(r7);$pe=n(zLe,"STRONG",{});var Jmt=s($pe);Bir=r(Jmt,"blenderbot-small"),Jmt.forEach(t),xir=r(zLe," \u2014 "),ZO=n(zLe,"A",{href:!0});var Ymt=s(ZO);kir=r(Ymt,"TFBlenderbotSmallForConditionalGeneration"),Ymt.forEach(t),Rir=r(zLe," (BlenderbotSmall model)"),zLe.forEach(t),Sir=i(ye),t7=n(ye,"LI",{});var WLe=s(t7);Ipe=n(WLe,"STRONG",{});var Kmt=s(Ipe);Pir=r(Kmt,"encoder-decoder"),Kmt.forEach(t),$ir=r(WLe," \u2014 "),eG=n(WLe,"A",{href:!0});var Zmt=s(eG);Iir=r(Zmt,"TFEncoderDecoderModel"),Zmt.forEach(t),jir=r(WLe," (Encoder decoder model)"),WLe.forEach(t),Dir=i(ye),a7=n(ye,"LI",{});var QLe=s(a7);jpe=n(QLe,"STRONG",{});var egt=s(jpe);Nir=r(egt,"led"),egt.forEach(t),qir=r(QLe," \u2014 "),oG=n(QLe,"A",{href:!0});var ogt=s(oG);Oir=r(ogt,"TFLEDForConditionalGeneration"),ogt.forEach(t),Gir=r(QLe," (LED model)"),QLe.forEach(t),Xir=i(ye),n7=n(ye,"LI",{});var HLe=s(n7);Dpe=n(HLe,"STRONG",{});var rgt=s(Dpe);Vir=r(rgt,"marian"),rgt.forEach(t),zir=r(HLe," \u2014 "),rG=n(HLe,"A",{href:!0});var tgt=s(rG);Wir=r(tgt,"TFMarianMTModel"),tgt.forEach(t),Qir=r(HLe," (Marian model)"),HLe.forEach(t),Hir=i(ye),s7=n(ye,"LI",{});var ULe=s(s7);Npe=n(ULe,"STRONG",{});var agt=s(Npe);Uir=r(agt,"mbart"),agt.forEach(t),Jir=r(ULe," \u2014 "),tG=n(ULe,"A",{href:!0});var ngt=s(tG);Yir=r(ngt,"TFMBartForConditionalGeneration"),ngt.forEach(t),Kir=r(ULe," (mBART model)"),ULe.forEach(t),Zir=i(ye),l7=n(ye,"LI",{});var JLe=s(l7);qpe=n(JLe,"STRONG",{});var sgt=s(qpe);edr=r(sgt,"mt5"),sgt.forEach(t),odr=r(JLe," \u2014 "),aG=n(JLe,"A",{href:!0});var lgt=s(aG);rdr=r(lgt,"TFMT5ForConditionalGeneration"),lgt.forEach(t),tdr=r(JLe," (mT5 model)"),JLe.forEach(t),adr=i(ye),i7=n(ye,"LI",{});var YLe=s(i7);Ope=n(YLe,"STRONG",{});var igt=s(Ope);ndr=r(igt,"pegasus"),igt.forEach(t),sdr=r(YLe," \u2014 "),nG=n(YLe,"A",{href:!0});var dgt=s(nG);ldr=r(dgt,"TFPegasusForConditionalGeneration"),dgt.forEach(t),idr=r(YLe," (Pegasus model)"),YLe.forEach(t),ddr=i(ye),d7=n(ye,"LI",{});var KLe=s(d7);Gpe=n(KLe,"STRONG",{});var cgt=s(Gpe);cdr=r(cgt,"t5"),cgt.forEach(t),fdr=r(KLe," \u2014 "),sG=n(KLe,"A",{href:!0});var fgt=s(sG);mdr=r(fgt,"TFT5ForConditionalGeneration"),fgt.forEach(t),gdr=r(KLe," (T5 model)"),KLe.forEach(t),ye.forEach(t),hdr=i(Ta),Xpe=n(Ta,"P",{});var mgt=s(Xpe);pdr=r(mgt,"Examples:"),mgt.forEach(t),_dr=i(Ta),m(Tw.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),Nke=i(c),kc=n(c,"H2",{class:!0});var YSe=s(kc);c7=n(YSe,"A",{id:!0,class:!0,href:!0});var ggt=s(c7);Vpe=n(ggt,"SPAN",{});var hgt=s(Vpe);m(Fw.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),udr=i(YSe),zpe=n(YSe,"SPAN",{});var pgt=s(zpe);bdr=r(pgt,"TFAutoModelForSequenceClassification"),pgt.forEach(t),YSe.forEach(t),qke=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(Cw.$$.fragment,Yl),vdr=i(Yl),Rc=n(Yl,"P",{});var DW=s(Rc);Tdr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wpe=n(DW,"CODE",{});var _gt=s(Wpe);Fdr=r(_gt,"from_pretrained()"),_gt.forEach(t),Cdr=r(DW,"class method or the "),Qpe=n(DW,"CODE",{});var ugt=s(Qpe);Mdr=r(ugt,"from_config()"),ugt.forEach(t),Edr=r(DW,`class
method.`),DW.forEach(t),ydr=i(Yl),Mw=n(Yl,"P",{});var KSe=s(Mw);wdr=r(KSe,"This class cannot be instantiated directly using "),Hpe=n(KSe,"CODE",{});var bgt=s(Hpe);Adr=r(bgt,"__init__()"),bgt.forEach(t),Ldr=r(KSe," (throws an error)."),KSe.forEach(t),Bdr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(Ew.$$.fragment,Kl),xdr=i(Kl),Upe=n(Kl,"P",{});var vgt=s(Upe);kdr=r(vgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vgt.forEach(t),Rdr=i(Kl),Sc=n(Kl,"P",{});var NW=s(Sc);Sdr=r(NW,`Note:
Loading a model from its configuration file does `),Jpe=n(NW,"STRONG",{});var Tgt=s(Jpe);Pdr=r(Tgt,"not"),Tgt.forEach(t),$dr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=n(NW,"CODE",{});var Fgt=s(Ype);Idr=r(Fgt,"from_pretrained()"),Fgt.forEach(t),jdr=r(NW,"to load the model weights."),NW.forEach(t),Ddr=i(Kl),Kpe=n(Kl,"P",{});var Cgt=s(Kpe);Ndr=r(Cgt,"Examples:"),Cgt.forEach(t),qdr=i(Kl),m(yw.$$.fragment,Kl),Kl.forEach(t),Odr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(ww.$$.fragment,Fa),Gdr=i(Fa),Zpe=n(Fa,"P",{});var Mgt=s(Zpe);Xdr=r(Mgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mgt.forEach(t),Vdr=i(Fa),Cn=n(Fa,"P",{});var R4=s(Cn);zdr=r(R4,"The model class to instantiate is selected based on the "),e_e=n(R4,"CODE",{});var Egt=s(e_e);Wdr=r(Egt,"model_type"),Egt.forEach(t),Qdr=r(R4,` property of the config object (either
passed as an argument or loaded from `),o_e=n(R4,"CODE",{});var ygt=s(o_e);Hdr=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),Udr=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(R4,"CODE",{});var wgt=s(r_e);Jdr=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),Ydr=r(R4,":"),R4.forEach(t),Kdr=i(Fa),V=n(Fa,"UL",{});var W=s(V);f7=n(W,"LI",{});var ZLe=s(f7);t_e=n(ZLe,"STRONG",{});var Agt=s(t_e);Zdr=r(Agt,"albert"),Agt.forEach(t),ecr=r(ZLe," \u2014 "),lG=n(ZLe,"A",{href:!0});var Lgt=s(lG);ocr=r(Lgt,"TFAlbertForSequenceClassification"),Lgt.forEach(t),rcr=r(ZLe," (ALBERT model)"),ZLe.forEach(t),tcr=i(W),m7=n(W,"LI",{});var e8e=s(m7);a_e=n(e8e,"STRONG",{});var Bgt=s(a_e);acr=r(Bgt,"bert"),Bgt.forEach(t),ncr=r(e8e," \u2014 "),iG=n(e8e,"A",{href:!0});var xgt=s(iG);scr=r(xgt,"TFBertForSequenceClassification"),xgt.forEach(t),lcr=r(e8e," (BERT model)"),e8e.forEach(t),icr=i(W),g7=n(W,"LI",{});var o8e=s(g7);n_e=n(o8e,"STRONG",{});var kgt=s(n_e);dcr=r(kgt,"camembert"),kgt.forEach(t),ccr=r(o8e," \u2014 "),dG=n(o8e,"A",{href:!0});var Rgt=s(dG);fcr=r(Rgt,"TFCamembertForSequenceClassification"),Rgt.forEach(t),mcr=r(o8e," (CamemBERT model)"),o8e.forEach(t),gcr=i(W),h7=n(W,"LI",{});var r8e=s(h7);s_e=n(r8e,"STRONG",{});var Sgt=s(s_e);hcr=r(Sgt,"convbert"),Sgt.forEach(t),pcr=r(r8e," \u2014 "),cG=n(r8e,"A",{href:!0});var Pgt=s(cG);_cr=r(Pgt,"TFConvBertForSequenceClassification"),Pgt.forEach(t),ucr=r(r8e," (ConvBERT model)"),r8e.forEach(t),bcr=i(W),p7=n(W,"LI",{});var t8e=s(p7);l_e=n(t8e,"STRONG",{});var $gt=s(l_e);vcr=r($gt,"ctrl"),$gt.forEach(t),Tcr=r(t8e," \u2014 "),fG=n(t8e,"A",{href:!0});var Igt=s(fG);Fcr=r(Igt,"TFCTRLForSequenceClassification"),Igt.forEach(t),Ccr=r(t8e," (CTRL model)"),t8e.forEach(t),Mcr=i(W),_7=n(W,"LI",{});var a8e=s(_7);i_e=n(a8e,"STRONG",{});var jgt=s(i_e);Ecr=r(jgt,"deberta"),jgt.forEach(t),ycr=r(a8e," \u2014 "),mG=n(a8e,"A",{href:!0});var Dgt=s(mG);wcr=r(Dgt,"TFDebertaForSequenceClassification"),Dgt.forEach(t),Acr=r(a8e," (DeBERTa model)"),a8e.forEach(t),Lcr=i(W),u7=n(W,"LI",{});var n8e=s(u7);d_e=n(n8e,"STRONG",{});var Ngt=s(d_e);Bcr=r(Ngt,"deberta-v2"),Ngt.forEach(t),xcr=r(n8e," \u2014 "),gG=n(n8e,"A",{href:!0});var qgt=s(gG);kcr=r(qgt,"TFDebertaV2ForSequenceClassification"),qgt.forEach(t),Rcr=r(n8e," (DeBERTa-v2 model)"),n8e.forEach(t),Scr=i(W),b7=n(W,"LI",{});var s8e=s(b7);c_e=n(s8e,"STRONG",{});var Ogt=s(c_e);Pcr=r(Ogt,"distilbert"),Ogt.forEach(t),$cr=r(s8e," \u2014 "),hG=n(s8e,"A",{href:!0});var Ggt=s(hG);Icr=r(Ggt,"TFDistilBertForSequenceClassification"),Ggt.forEach(t),jcr=r(s8e," (DistilBERT model)"),s8e.forEach(t),Dcr=i(W),v7=n(W,"LI",{});var l8e=s(v7);f_e=n(l8e,"STRONG",{});var Xgt=s(f_e);Ncr=r(Xgt,"electra"),Xgt.forEach(t),qcr=r(l8e," \u2014 "),pG=n(l8e,"A",{href:!0});var Vgt=s(pG);Ocr=r(Vgt,"TFElectraForSequenceClassification"),Vgt.forEach(t),Gcr=r(l8e," (ELECTRA model)"),l8e.forEach(t),Xcr=i(W),T7=n(W,"LI",{});var i8e=s(T7);m_e=n(i8e,"STRONG",{});var zgt=s(m_e);Vcr=r(zgt,"flaubert"),zgt.forEach(t),zcr=r(i8e," \u2014 "),_G=n(i8e,"A",{href:!0});var Wgt=s(_G);Wcr=r(Wgt,"TFFlaubertForSequenceClassification"),Wgt.forEach(t),Qcr=r(i8e," (FlauBERT model)"),i8e.forEach(t),Hcr=i(W),F7=n(W,"LI",{});var d8e=s(F7);g_e=n(d8e,"STRONG",{});var Qgt=s(g_e);Ucr=r(Qgt,"funnel"),Qgt.forEach(t),Jcr=r(d8e," \u2014 "),uG=n(d8e,"A",{href:!0});var Hgt=s(uG);Ycr=r(Hgt,"TFFunnelForSequenceClassification"),Hgt.forEach(t),Kcr=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),Zcr=i(W),C7=n(W,"LI",{});var c8e=s(C7);h_e=n(c8e,"STRONG",{});var Ugt=s(h_e);efr=r(Ugt,"gpt2"),Ugt.forEach(t),ofr=r(c8e," \u2014 "),bG=n(c8e,"A",{href:!0});var Jgt=s(bG);rfr=r(Jgt,"TFGPT2ForSequenceClassification"),Jgt.forEach(t),tfr=r(c8e," (OpenAI GPT-2 model)"),c8e.forEach(t),afr=i(W),M7=n(W,"LI",{});var f8e=s(M7);p_e=n(f8e,"STRONG",{});var Ygt=s(p_e);nfr=r(Ygt,"layoutlm"),Ygt.forEach(t),sfr=r(f8e," \u2014 "),vG=n(f8e,"A",{href:!0});var Kgt=s(vG);lfr=r(Kgt,"TFLayoutLMForSequenceClassification"),Kgt.forEach(t),ifr=r(f8e," (LayoutLM model)"),f8e.forEach(t),dfr=i(W),E7=n(W,"LI",{});var m8e=s(E7);__e=n(m8e,"STRONG",{});var Zgt=s(__e);cfr=r(Zgt,"longformer"),Zgt.forEach(t),ffr=r(m8e," \u2014 "),TG=n(m8e,"A",{href:!0});var eht=s(TG);mfr=r(eht,"TFLongformerForSequenceClassification"),eht.forEach(t),gfr=r(m8e," (Longformer model)"),m8e.forEach(t),hfr=i(W),y7=n(W,"LI",{});var g8e=s(y7);u_e=n(g8e,"STRONG",{});var oht=s(u_e);pfr=r(oht,"mobilebert"),oht.forEach(t),_fr=r(g8e," \u2014 "),FG=n(g8e,"A",{href:!0});var rht=s(FG);ufr=r(rht,"TFMobileBertForSequenceClassification"),rht.forEach(t),bfr=r(g8e," (MobileBERT model)"),g8e.forEach(t),vfr=i(W),w7=n(W,"LI",{});var h8e=s(w7);b_e=n(h8e,"STRONG",{});var tht=s(b_e);Tfr=r(tht,"mpnet"),tht.forEach(t),Ffr=r(h8e," \u2014 "),CG=n(h8e,"A",{href:!0});var aht=s(CG);Cfr=r(aht,"TFMPNetForSequenceClassification"),aht.forEach(t),Mfr=r(h8e," (MPNet model)"),h8e.forEach(t),Efr=i(W),A7=n(W,"LI",{});var p8e=s(A7);v_e=n(p8e,"STRONG",{});var nht=s(v_e);yfr=r(nht,"openai-gpt"),nht.forEach(t),wfr=r(p8e," \u2014 "),MG=n(p8e,"A",{href:!0});var sht=s(MG);Afr=r(sht,"TFOpenAIGPTForSequenceClassification"),sht.forEach(t),Lfr=r(p8e," (OpenAI GPT model)"),p8e.forEach(t),Bfr=i(W),L7=n(W,"LI",{});var _8e=s(L7);T_e=n(_8e,"STRONG",{});var lht=s(T_e);xfr=r(lht,"rembert"),lht.forEach(t),kfr=r(_8e," \u2014 "),EG=n(_8e,"A",{href:!0});var iht=s(EG);Rfr=r(iht,"TFRemBertForSequenceClassification"),iht.forEach(t),Sfr=r(_8e," (RemBERT model)"),_8e.forEach(t),Pfr=i(W),B7=n(W,"LI",{});var u8e=s(B7);F_e=n(u8e,"STRONG",{});var dht=s(F_e);$fr=r(dht,"roberta"),dht.forEach(t),Ifr=r(u8e," \u2014 "),yG=n(u8e,"A",{href:!0});var cht=s(yG);jfr=r(cht,"TFRobertaForSequenceClassification"),cht.forEach(t),Dfr=r(u8e," (RoBERTa model)"),u8e.forEach(t),Nfr=i(W),x7=n(W,"LI",{});var b8e=s(x7);C_e=n(b8e,"STRONG",{});var fht=s(C_e);qfr=r(fht,"roformer"),fht.forEach(t),Ofr=r(b8e," \u2014 "),wG=n(b8e,"A",{href:!0});var mht=s(wG);Gfr=r(mht,"TFRoFormerForSequenceClassification"),mht.forEach(t),Xfr=r(b8e," (RoFormer model)"),b8e.forEach(t),Vfr=i(W),k7=n(W,"LI",{});var v8e=s(k7);M_e=n(v8e,"STRONG",{});var ght=s(M_e);zfr=r(ght,"tapas"),ght.forEach(t),Wfr=r(v8e," \u2014 "),AG=n(v8e,"A",{href:!0});var hht=s(AG);Qfr=r(hht,"TFTapasForSequenceClassification"),hht.forEach(t),Hfr=r(v8e," (TAPAS model)"),v8e.forEach(t),Ufr=i(W),R7=n(W,"LI",{});var T8e=s(R7);E_e=n(T8e,"STRONG",{});var pht=s(E_e);Jfr=r(pht,"transfo-xl"),pht.forEach(t),Yfr=r(T8e," \u2014 "),LG=n(T8e,"A",{href:!0});var _ht=s(LG);Kfr=r(_ht,"TFTransfoXLForSequenceClassification"),_ht.forEach(t),Zfr=r(T8e," (Transformer-XL model)"),T8e.forEach(t),emr=i(W),S7=n(W,"LI",{});var F8e=s(S7);y_e=n(F8e,"STRONG",{});var uht=s(y_e);omr=r(uht,"xlm"),uht.forEach(t),rmr=r(F8e," \u2014 "),BG=n(F8e,"A",{href:!0});var bht=s(BG);tmr=r(bht,"TFXLMForSequenceClassification"),bht.forEach(t),amr=r(F8e," (XLM model)"),F8e.forEach(t),nmr=i(W),P7=n(W,"LI",{});var C8e=s(P7);w_e=n(C8e,"STRONG",{});var vht=s(w_e);smr=r(vht,"xlm-roberta"),vht.forEach(t),lmr=r(C8e," \u2014 "),xG=n(C8e,"A",{href:!0});var Tht=s(xG);imr=r(Tht,"TFXLMRobertaForSequenceClassification"),Tht.forEach(t),dmr=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),cmr=i(W),$7=n(W,"LI",{});var M8e=s($7);A_e=n(M8e,"STRONG",{});var Fht=s(A_e);fmr=r(Fht,"xlnet"),Fht.forEach(t),mmr=r(M8e," \u2014 "),kG=n(M8e,"A",{href:!0});var Cht=s(kG);gmr=r(Cht,"TFXLNetForSequenceClassification"),Cht.forEach(t),hmr=r(M8e," (XLNet model)"),M8e.forEach(t),W.forEach(t),pmr=i(Fa),L_e=n(Fa,"P",{});var Mht=s(L_e);_mr=r(Mht,"Examples:"),Mht.forEach(t),umr=i(Fa),m(Aw.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),Oke=i(c),Pc=n(c,"H2",{class:!0});var ZSe=s(Pc);I7=n(ZSe,"A",{id:!0,class:!0,href:!0});var Eht=s(I7);B_e=n(Eht,"SPAN",{});var yht=s(B_e);m(Lw.$$.fragment,yht),yht.forEach(t),Eht.forEach(t),bmr=i(ZSe),x_e=n(ZSe,"SPAN",{});var wht=s(x_e);vmr=r(wht,"TFAutoModelForMultipleChoice"),wht.forEach(t),ZSe.forEach(t),Gke=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(Bw.$$.fragment,Zl),Tmr=i(Zl),$c=n(Zl,"P",{});var qW=s($c);Fmr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),k_e=n(qW,"CODE",{});var Aht=s(k_e);Cmr=r(Aht,"from_pretrained()"),Aht.forEach(t),Mmr=r(qW,"class method or the "),R_e=n(qW,"CODE",{});var Lht=s(R_e);Emr=r(Lht,"from_config()"),Lht.forEach(t),ymr=r(qW,`class
method.`),qW.forEach(t),wmr=i(Zl),xw=n(Zl,"P",{});var ePe=s(xw);Amr=r(ePe,"This class cannot be instantiated directly using "),S_e=n(ePe,"CODE",{});var Bht=s(S_e);Lmr=r(Bht,"__init__()"),Bht.forEach(t),Bmr=r(ePe," (throws an error)."),ePe.forEach(t),xmr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(kw.$$.fragment,ei),kmr=i(ei),P_e=n(ei,"P",{});var xht=s(P_e);Rmr=r(xht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xht.forEach(t),Smr=i(ei),Ic=n(ei,"P",{});var OW=s(Ic);Pmr=r(OW,`Note:
Loading a model from its configuration file does `),$_e=n(OW,"STRONG",{});var kht=s($_e);$mr=r(kht,"not"),kht.forEach(t),Imr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=n(OW,"CODE",{});var Rht=s(I_e);jmr=r(Rht,"from_pretrained()"),Rht.forEach(t),Dmr=r(OW,"to load the model weights."),OW.forEach(t),Nmr=i(ei),j_e=n(ei,"P",{});var Sht=s(j_e);qmr=r(Sht,"Examples:"),Sht.forEach(t),Omr=i(ei),m(Rw.$$.fragment,ei),ei.forEach(t),Gmr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Sw.$$.fragment,Ca),Xmr=i(Ca),D_e=n(Ca,"P",{});var Pht=s(D_e);Vmr=r(Pht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pht.forEach(t),zmr=i(Ca),Mn=n(Ca,"P",{});var S4=s(Mn);Wmr=r(S4,"The model class to instantiate is selected based on the "),N_e=n(S4,"CODE",{});var $ht=s(N_e);Qmr=r($ht,"model_type"),$ht.forEach(t),Hmr=r(S4,` property of the config object (either
passed as an argument or loaded from `),q_e=n(S4,"CODE",{});var Iht=s(q_e);Umr=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),Jmr=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(S4,"CODE",{});var jht=s(O_e);Ymr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),Kmr=r(S4,":"),S4.forEach(t),Zmr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);j7=n(le,"LI",{});var E8e=s(j7);G_e=n(E8e,"STRONG",{});var Dht=s(G_e);egr=r(Dht,"albert"),Dht.forEach(t),ogr=r(E8e," \u2014 "),RG=n(E8e,"A",{href:!0});var Nht=s(RG);rgr=r(Nht,"TFAlbertForMultipleChoice"),Nht.forEach(t),tgr=r(E8e," (ALBERT model)"),E8e.forEach(t),agr=i(le),D7=n(le,"LI",{});var y8e=s(D7);X_e=n(y8e,"STRONG",{});var qht=s(X_e);ngr=r(qht,"bert"),qht.forEach(t),sgr=r(y8e," \u2014 "),SG=n(y8e,"A",{href:!0});var Oht=s(SG);lgr=r(Oht,"TFBertForMultipleChoice"),Oht.forEach(t),igr=r(y8e," (BERT model)"),y8e.forEach(t),dgr=i(le),N7=n(le,"LI",{});var w8e=s(N7);V_e=n(w8e,"STRONG",{});var Ght=s(V_e);cgr=r(Ght,"camembert"),Ght.forEach(t),fgr=r(w8e," \u2014 "),PG=n(w8e,"A",{href:!0});var Xht=s(PG);mgr=r(Xht,"TFCamembertForMultipleChoice"),Xht.forEach(t),ggr=r(w8e," (CamemBERT model)"),w8e.forEach(t),hgr=i(le),q7=n(le,"LI",{});var A8e=s(q7);z_e=n(A8e,"STRONG",{});var Vht=s(z_e);pgr=r(Vht,"convbert"),Vht.forEach(t),_gr=r(A8e," \u2014 "),$G=n(A8e,"A",{href:!0});var zht=s($G);ugr=r(zht,"TFConvBertForMultipleChoice"),zht.forEach(t),bgr=r(A8e," (ConvBERT model)"),A8e.forEach(t),vgr=i(le),O7=n(le,"LI",{});var L8e=s(O7);W_e=n(L8e,"STRONG",{});var Wht=s(W_e);Tgr=r(Wht,"distilbert"),Wht.forEach(t),Fgr=r(L8e," \u2014 "),IG=n(L8e,"A",{href:!0});var Qht=s(IG);Cgr=r(Qht,"TFDistilBertForMultipleChoice"),Qht.forEach(t),Mgr=r(L8e," (DistilBERT model)"),L8e.forEach(t),Egr=i(le),G7=n(le,"LI",{});var B8e=s(G7);Q_e=n(B8e,"STRONG",{});var Hht=s(Q_e);ygr=r(Hht,"electra"),Hht.forEach(t),wgr=r(B8e," \u2014 "),jG=n(B8e,"A",{href:!0});var Uht=s(jG);Agr=r(Uht,"TFElectraForMultipleChoice"),Uht.forEach(t),Lgr=r(B8e," (ELECTRA model)"),B8e.forEach(t),Bgr=i(le),X7=n(le,"LI",{});var x8e=s(X7);H_e=n(x8e,"STRONG",{});var Jht=s(H_e);xgr=r(Jht,"flaubert"),Jht.forEach(t),kgr=r(x8e," \u2014 "),DG=n(x8e,"A",{href:!0});var Yht=s(DG);Rgr=r(Yht,"TFFlaubertForMultipleChoice"),Yht.forEach(t),Sgr=r(x8e," (FlauBERT model)"),x8e.forEach(t),Pgr=i(le),V7=n(le,"LI",{});var k8e=s(V7);U_e=n(k8e,"STRONG",{});var Kht=s(U_e);$gr=r(Kht,"funnel"),Kht.forEach(t),Igr=r(k8e," \u2014 "),NG=n(k8e,"A",{href:!0});var Zht=s(NG);jgr=r(Zht,"TFFunnelForMultipleChoice"),Zht.forEach(t),Dgr=r(k8e," (Funnel Transformer model)"),k8e.forEach(t),Ngr=i(le),z7=n(le,"LI",{});var R8e=s(z7);J_e=n(R8e,"STRONG",{});var ept=s(J_e);qgr=r(ept,"longformer"),ept.forEach(t),Ogr=r(R8e," \u2014 "),qG=n(R8e,"A",{href:!0});var opt=s(qG);Ggr=r(opt,"TFLongformerForMultipleChoice"),opt.forEach(t),Xgr=r(R8e," (Longformer model)"),R8e.forEach(t),Vgr=i(le),W7=n(le,"LI",{});var S8e=s(W7);Y_e=n(S8e,"STRONG",{});var rpt=s(Y_e);zgr=r(rpt,"mobilebert"),rpt.forEach(t),Wgr=r(S8e," \u2014 "),OG=n(S8e,"A",{href:!0});var tpt=s(OG);Qgr=r(tpt,"TFMobileBertForMultipleChoice"),tpt.forEach(t),Hgr=r(S8e," (MobileBERT model)"),S8e.forEach(t),Ugr=i(le),Q7=n(le,"LI",{});var P8e=s(Q7);K_e=n(P8e,"STRONG",{});var apt=s(K_e);Jgr=r(apt,"mpnet"),apt.forEach(t),Ygr=r(P8e," \u2014 "),GG=n(P8e,"A",{href:!0});var npt=s(GG);Kgr=r(npt,"TFMPNetForMultipleChoice"),npt.forEach(t),Zgr=r(P8e," (MPNet model)"),P8e.forEach(t),ehr=i(le),H7=n(le,"LI",{});var $8e=s(H7);Z_e=n($8e,"STRONG",{});var spt=s(Z_e);ohr=r(spt,"rembert"),spt.forEach(t),rhr=r($8e," \u2014 "),XG=n($8e,"A",{href:!0});var lpt=s(XG);thr=r(lpt,"TFRemBertForMultipleChoice"),lpt.forEach(t),ahr=r($8e," (RemBERT model)"),$8e.forEach(t),nhr=i(le),U7=n(le,"LI",{});var I8e=s(U7);eue=n(I8e,"STRONG",{});var ipt=s(eue);shr=r(ipt,"roberta"),ipt.forEach(t),lhr=r(I8e," \u2014 "),VG=n(I8e,"A",{href:!0});var dpt=s(VG);ihr=r(dpt,"TFRobertaForMultipleChoice"),dpt.forEach(t),dhr=r(I8e," (RoBERTa model)"),I8e.forEach(t),chr=i(le),J7=n(le,"LI",{});var j8e=s(J7);oue=n(j8e,"STRONG",{});var cpt=s(oue);fhr=r(cpt,"roformer"),cpt.forEach(t),mhr=r(j8e," \u2014 "),zG=n(j8e,"A",{href:!0});var fpt=s(zG);ghr=r(fpt,"TFRoFormerForMultipleChoice"),fpt.forEach(t),hhr=r(j8e," (RoFormer model)"),j8e.forEach(t),phr=i(le),Y7=n(le,"LI",{});var D8e=s(Y7);rue=n(D8e,"STRONG",{});var mpt=s(rue);_hr=r(mpt,"xlm"),mpt.forEach(t),uhr=r(D8e," \u2014 "),WG=n(D8e,"A",{href:!0});var gpt=s(WG);bhr=r(gpt,"TFXLMForMultipleChoice"),gpt.forEach(t),vhr=r(D8e," (XLM model)"),D8e.forEach(t),Thr=i(le),K7=n(le,"LI",{});var N8e=s(K7);tue=n(N8e,"STRONG",{});var hpt=s(tue);Fhr=r(hpt,"xlm-roberta"),hpt.forEach(t),Chr=r(N8e," \u2014 "),QG=n(N8e,"A",{href:!0});var ppt=s(QG);Mhr=r(ppt,"TFXLMRobertaForMultipleChoice"),ppt.forEach(t),Ehr=r(N8e," (XLM-RoBERTa model)"),N8e.forEach(t),yhr=i(le),Z7=n(le,"LI",{});var q8e=s(Z7);aue=n(q8e,"STRONG",{});var _pt=s(aue);whr=r(_pt,"xlnet"),_pt.forEach(t),Ahr=r(q8e," \u2014 "),HG=n(q8e,"A",{href:!0});var upt=s(HG);Lhr=r(upt,"TFXLNetForMultipleChoice"),upt.forEach(t),Bhr=r(q8e," (XLNet model)"),q8e.forEach(t),le.forEach(t),xhr=i(Ca),nue=n(Ca,"P",{});var bpt=s(nue);khr=r(bpt,"Examples:"),bpt.forEach(t),Rhr=i(Ca),m(Pw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Xke=i(c),jc=n(c,"H2",{class:!0});var oPe=s(jc);eF=n(oPe,"A",{id:!0,class:!0,href:!0});var vpt=s(eF);sue=n(vpt,"SPAN",{});var Tpt=s(sue);m($w.$$.fragment,Tpt),Tpt.forEach(t),vpt.forEach(t),Shr=i(oPe),lue=n(oPe,"SPAN",{});var Fpt=s(lue);Phr=r(Fpt,"TFAutoModelForTableQuestionAnswering"),Fpt.forEach(t),oPe.forEach(t),Vke=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(Iw.$$.fragment,oi),$hr=i(oi),Dc=n(oi,"P",{});var GW=s(Dc);Ihr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iue=n(GW,"CODE",{});var Cpt=s(iue);jhr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),Dhr=r(GW,"class method or the "),due=n(GW,"CODE",{});var Mpt=s(due);Nhr=r(Mpt,"from_config()"),Mpt.forEach(t),qhr=r(GW,`class
method.`),GW.forEach(t),Ohr=i(oi),jw=n(oi,"P",{});var rPe=s(jw);Ghr=r(rPe,"This class cannot be instantiated directly using "),cue=n(rPe,"CODE",{});var Ept=s(cue);Xhr=r(Ept,"__init__()"),Ept.forEach(t),Vhr=r(rPe," (throws an error)."),rPe.forEach(t),zhr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(Dw.$$.fragment,ri),Whr=i(ri),fue=n(ri,"P",{});var ypt=s(fue);Qhr=r(ypt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ypt.forEach(t),Hhr=i(ri),Nc=n(ri,"P",{});var XW=s(Nc);Uhr=r(XW,`Note:
Loading a model from its configuration file does `),mue=n(XW,"STRONG",{});var wpt=s(mue);Jhr=r(wpt,"not"),wpt.forEach(t),Yhr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gue=n(XW,"CODE",{});var Apt=s(gue);Khr=r(Apt,"from_pretrained()"),Apt.forEach(t),Zhr=r(XW,"to load the model weights."),XW.forEach(t),epr=i(ri),hue=n(ri,"P",{});var Lpt=s(hue);opr=r(Lpt,"Examples:"),Lpt.forEach(t),rpr=i(ri),m(Nw.$$.fragment,ri),ri.forEach(t),tpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(qw.$$.fragment,Ma),apr=i(Ma),pue=n(Ma,"P",{});var Bpt=s(pue);npr=r(Bpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bpt.forEach(t),spr=i(Ma),En=n(Ma,"P",{});var P4=s(En);lpr=r(P4,"The model class to instantiate is selected based on the "),_ue=n(P4,"CODE",{});var xpt=s(_ue);ipr=r(xpt,"model_type"),xpt.forEach(t),dpr=r(P4,` property of the config object (either
passed as an argument or loaded from `),uue=n(P4,"CODE",{});var kpt=s(uue);cpr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),fpr=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(P4,"CODE",{});var Rpt=s(bue);mpr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),gpr=r(P4,":"),P4.forEach(t),hpr=i(Ma),vue=n(Ma,"UL",{});var Spt=s(vue);oF=n(Spt,"LI",{});var O8e=s(oF);Tue=n(O8e,"STRONG",{});var Ppt=s(Tue);ppr=r(Ppt,"tapas"),Ppt.forEach(t),_pr=r(O8e," \u2014 "),UG=n(O8e,"A",{href:!0});var $pt=s(UG);upr=r($pt,"TFTapasForQuestionAnswering"),$pt.forEach(t),bpr=r(O8e," (TAPAS model)"),O8e.forEach(t),Spt.forEach(t),vpr=i(Ma),Fue=n(Ma,"P",{});var Ipt=s(Fue);Tpr=r(Ipt,"Examples:"),Ipt.forEach(t),Fpr=i(Ma),m(Ow.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),zke=i(c),qc=n(c,"H2",{class:!0});var tPe=s(qc);rF=n(tPe,"A",{id:!0,class:!0,href:!0});var jpt=s(rF);Cue=n(jpt,"SPAN",{});var Dpt=s(Cue);m(Gw.$$.fragment,Dpt),Dpt.forEach(t),jpt.forEach(t),Cpr=i(tPe),Mue=n(tPe,"SPAN",{});var Npt=s(Mue);Mpr=r(Npt,"TFAutoModelForTokenClassification"),Npt.forEach(t),tPe.forEach(t),Wke=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(Xw.$$.fragment,ti),Epr=i(ti),Oc=n(ti,"P",{});var VW=s(Oc);ypr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eue=n(VW,"CODE",{});var qpt=s(Eue);wpr=r(qpt,"from_pretrained()"),qpt.forEach(t),Apr=r(VW,"class method or the "),yue=n(VW,"CODE",{});var Opt=s(yue);Lpr=r(Opt,"from_config()"),Opt.forEach(t),Bpr=r(VW,`class
method.`),VW.forEach(t),xpr=i(ti),Vw=n(ti,"P",{});var aPe=s(Vw);kpr=r(aPe,"This class cannot be instantiated directly using "),wue=n(aPe,"CODE",{});var Gpt=s(wue);Rpr=r(Gpt,"__init__()"),Gpt.forEach(t),Spr=r(aPe," (throws an error)."),aPe.forEach(t),Ppr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(zw.$$.fragment,ai),$pr=i(ai),Aue=n(ai,"P",{});var Xpt=s(Aue);Ipr=r(Xpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xpt.forEach(t),jpr=i(ai),Gc=n(ai,"P",{});var zW=s(Gc);Dpr=r(zW,`Note:
Loading a model from its configuration file does `),Lue=n(zW,"STRONG",{});var Vpt=s(Lue);Npr=r(Vpt,"not"),Vpt.forEach(t),qpr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bue=n(zW,"CODE",{});var zpt=s(Bue);Opr=r(zpt,"from_pretrained()"),zpt.forEach(t),Gpr=r(zW,"to load the model weights."),zW.forEach(t),Xpr=i(ai),xue=n(ai,"P",{});var Wpt=s(xue);Vpr=r(Wpt,"Examples:"),Wpt.forEach(t),zpr=i(ai),m(Ww.$$.fragment,ai),ai.forEach(t),Wpr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Qw.$$.fragment,Ea),Qpr=i(Ea),kue=n(Ea,"P",{});var Qpt=s(kue);Hpr=r(Qpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qpt.forEach(t),Upr=i(Ea),yn=n(Ea,"P",{});var $4=s(yn);Jpr=r($4,"The model class to instantiate is selected based on the "),Rue=n($4,"CODE",{});var Hpt=s(Rue);Ypr=r(Hpt,"model_type"),Hpt.forEach(t),Kpr=r($4,` property of the config object (either
passed as an argument or loaded from `),Sue=n($4,"CODE",{});var Upt=s(Sue);Zpr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),e_r=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n($4,"CODE",{});var Jpt=s(Pue);o_r=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),r_r=r($4,":"),$4.forEach(t),t_r=i(Ea),K=n(Ea,"UL",{});var oe=s(K);tF=n(oe,"LI",{});var G8e=s(tF);$ue=n(G8e,"STRONG",{});var Ypt=s($ue);a_r=r(Ypt,"albert"),Ypt.forEach(t),n_r=r(G8e," \u2014 "),JG=n(G8e,"A",{href:!0});var Kpt=s(JG);s_r=r(Kpt,"TFAlbertForTokenClassification"),Kpt.forEach(t),l_r=r(G8e," (ALBERT model)"),G8e.forEach(t),i_r=i(oe),aF=n(oe,"LI",{});var X8e=s(aF);Iue=n(X8e,"STRONG",{});var Zpt=s(Iue);d_r=r(Zpt,"bert"),Zpt.forEach(t),c_r=r(X8e," \u2014 "),YG=n(X8e,"A",{href:!0});var e_t=s(YG);f_r=r(e_t,"TFBertForTokenClassification"),e_t.forEach(t),m_r=r(X8e," (BERT model)"),X8e.forEach(t),g_r=i(oe),nF=n(oe,"LI",{});var V8e=s(nF);jue=n(V8e,"STRONG",{});var o_t=s(jue);h_r=r(o_t,"camembert"),o_t.forEach(t),p_r=r(V8e," \u2014 "),KG=n(V8e,"A",{href:!0});var r_t=s(KG);__r=r(r_t,"TFCamembertForTokenClassification"),r_t.forEach(t),u_r=r(V8e," (CamemBERT model)"),V8e.forEach(t),b_r=i(oe),sF=n(oe,"LI",{});var z8e=s(sF);Due=n(z8e,"STRONG",{});var t_t=s(Due);v_r=r(t_t,"convbert"),t_t.forEach(t),T_r=r(z8e," \u2014 "),ZG=n(z8e,"A",{href:!0});var a_t=s(ZG);F_r=r(a_t,"TFConvBertForTokenClassification"),a_t.forEach(t),C_r=r(z8e," (ConvBERT model)"),z8e.forEach(t),M_r=i(oe),lF=n(oe,"LI",{});var W8e=s(lF);Nue=n(W8e,"STRONG",{});var n_t=s(Nue);E_r=r(n_t,"deberta"),n_t.forEach(t),y_r=r(W8e," \u2014 "),eX=n(W8e,"A",{href:!0});var s_t=s(eX);w_r=r(s_t,"TFDebertaForTokenClassification"),s_t.forEach(t),A_r=r(W8e," (DeBERTa model)"),W8e.forEach(t),L_r=i(oe),iF=n(oe,"LI",{});var Q8e=s(iF);que=n(Q8e,"STRONG",{});var l_t=s(que);B_r=r(l_t,"deberta-v2"),l_t.forEach(t),x_r=r(Q8e," \u2014 "),oX=n(Q8e,"A",{href:!0});var i_t=s(oX);k_r=r(i_t,"TFDebertaV2ForTokenClassification"),i_t.forEach(t),R_r=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),S_r=i(oe),dF=n(oe,"LI",{});var H8e=s(dF);Oue=n(H8e,"STRONG",{});var d_t=s(Oue);P_r=r(d_t,"distilbert"),d_t.forEach(t),$_r=r(H8e," \u2014 "),rX=n(H8e,"A",{href:!0});var c_t=s(rX);I_r=r(c_t,"TFDistilBertForTokenClassification"),c_t.forEach(t),j_r=r(H8e," (DistilBERT model)"),H8e.forEach(t),D_r=i(oe),cF=n(oe,"LI",{});var U8e=s(cF);Gue=n(U8e,"STRONG",{});var f_t=s(Gue);N_r=r(f_t,"electra"),f_t.forEach(t),q_r=r(U8e," \u2014 "),tX=n(U8e,"A",{href:!0});var m_t=s(tX);O_r=r(m_t,"TFElectraForTokenClassification"),m_t.forEach(t),G_r=r(U8e," (ELECTRA model)"),U8e.forEach(t),X_r=i(oe),fF=n(oe,"LI",{});var J8e=s(fF);Xue=n(J8e,"STRONG",{});var g_t=s(Xue);V_r=r(g_t,"flaubert"),g_t.forEach(t),z_r=r(J8e," \u2014 "),aX=n(J8e,"A",{href:!0});var h_t=s(aX);W_r=r(h_t,"TFFlaubertForTokenClassification"),h_t.forEach(t),Q_r=r(J8e," (FlauBERT model)"),J8e.forEach(t),H_r=i(oe),mF=n(oe,"LI",{});var Y8e=s(mF);Vue=n(Y8e,"STRONG",{});var p_t=s(Vue);U_r=r(p_t,"funnel"),p_t.forEach(t),J_r=r(Y8e," \u2014 "),nX=n(Y8e,"A",{href:!0});var __t=s(nX);Y_r=r(__t,"TFFunnelForTokenClassification"),__t.forEach(t),K_r=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),Z_r=i(oe),gF=n(oe,"LI",{});var K8e=s(gF);zue=n(K8e,"STRONG",{});var u_t=s(zue);eur=r(u_t,"layoutlm"),u_t.forEach(t),our=r(K8e," \u2014 "),sX=n(K8e,"A",{href:!0});var b_t=s(sX);rur=r(b_t,"TFLayoutLMForTokenClassification"),b_t.forEach(t),tur=r(K8e," (LayoutLM model)"),K8e.forEach(t),aur=i(oe),hF=n(oe,"LI",{});var Z8e=s(hF);Wue=n(Z8e,"STRONG",{});var v_t=s(Wue);nur=r(v_t,"longformer"),v_t.forEach(t),sur=r(Z8e," \u2014 "),lX=n(Z8e,"A",{href:!0});var T_t=s(lX);lur=r(T_t,"TFLongformerForTokenClassification"),T_t.forEach(t),iur=r(Z8e," (Longformer model)"),Z8e.forEach(t),dur=i(oe),pF=n(oe,"LI",{});var e9e=s(pF);Que=n(e9e,"STRONG",{});var F_t=s(Que);cur=r(F_t,"mobilebert"),F_t.forEach(t),fur=r(e9e," \u2014 "),iX=n(e9e,"A",{href:!0});var C_t=s(iX);mur=r(C_t,"TFMobileBertForTokenClassification"),C_t.forEach(t),gur=r(e9e," (MobileBERT model)"),e9e.forEach(t),hur=i(oe),_F=n(oe,"LI",{});var o9e=s(_F);Hue=n(o9e,"STRONG",{});var M_t=s(Hue);pur=r(M_t,"mpnet"),M_t.forEach(t),_ur=r(o9e," \u2014 "),dX=n(o9e,"A",{href:!0});var E_t=s(dX);uur=r(E_t,"TFMPNetForTokenClassification"),E_t.forEach(t),bur=r(o9e," (MPNet model)"),o9e.forEach(t),vur=i(oe),uF=n(oe,"LI",{});var r9e=s(uF);Uue=n(r9e,"STRONG",{});var y_t=s(Uue);Tur=r(y_t,"rembert"),y_t.forEach(t),Fur=r(r9e," \u2014 "),cX=n(r9e,"A",{href:!0});var w_t=s(cX);Cur=r(w_t,"TFRemBertForTokenClassification"),w_t.forEach(t),Mur=r(r9e," (RemBERT model)"),r9e.forEach(t),Eur=i(oe),bF=n(oe,"LI",{});var t9e=s(bF);Jue=n(t9e,"STRONG",{});var A_t=s(Jue);yur=r(A_t,"roberta"),A_t.forEach(t),wur=r(t9e," \u2014 "),fX=n(t9e,"A",{href:!0});var L_t=s(fX);Aur=r(L_t,"TFRobertaForTokenClassification"),L_t.forEach(t),Lur=r(t9e," (RoBERTa model)"),t9e.forEach(t),Bur=i(oe),vF=n(oe,"LI",{});var a9e=s(vF);Yue=n(a9e,"STRONG",{});var B_t=s(Yue);xur=r(B_t,"roformer"),B_t.forEach(t),kur=r(a9e," \u2014 "),mX=n(a9e,"A",{href:!0});var x_t=s(mX);Rur=r(x_t,"TFRoFormerForTokenClassification"),x_t.forEach(t),Sur=r(a9e," (RoFormer model)"),a9e.forEach(t),Pur=i(oe),TF=n(oe,"LI",{});var n9e=s(TF);Kue=n(n9e,"STRONG",{});var k_t=s(Kue);$ur=r(k_t,"xlm"),k_t.forEach(t),Iur=r(n9e," \u2014 "),gX=n(n9e,"A",{href:!0});var R_t=s(gX);jur=r(R_t,"TFXLMForTokenClassification"),R_t.forEach(t),Dur=r(n9e," (XLM model)"),n9e.forEach(t),Nur=i(oe),FF=n(oe,"LI",{});var s9e=s(FF);Zue=n(s9e,"STRONG",{});var S_t=s(Zue);qur=r(S_t,"xlm-roberta"),S_t.forEach(t),Our=r(s9e," \u2014 "),hX=n(s9e,"A",{href:!0});var P_t=s(hX);Gur=r(P_t,"TFXLMRobertaForTokenClassification"),P_t.forEach(t),Xur=r(s9e," (XLM-RoBERTa model)"),s9e.forEach(t),Vur=i(oe),CF=n(oe,"LI",{});var l9e=s(CF);e0e=n(l9e,"STRONG",{});var $_t=s(e0e);zur=r($_t,"xlnet"),$_t.forEach(t),Wur=r(l9e," \u2014 "),pX=n(l9e,"A",{href:!0});var I_t=s(pX);Qur=r(I_t,"TFXLNetForTokenClassification"),I_t.forEach(t),Hur=r(l9e," (XLNet model)"),l9e.forEach(t),oe.forEach(t),Uur=i(Ea),o0e=n(Ea,"P",{});var j_t=s(o0e);Jur=r(j_t,"Examples:"),j_t.forEach(t),Yur=i(Ea),m(Hw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Qke=i(c),Xc=n(c,"H2",{class:!0});var nPe=s(Xc);MF=n(nPe,"A",{id:!0,class:!0,href:!0});var D_t=s(MF);r0e=n(D_t,"SPAN",{});var N_t=s(r0e);m(Uw.$$.fragment,N_t),N_t.forEach(t),D_t.forEach(t),Kur=i(nPe),t0e=n(nPe,"SPAN",{});var q_t=s(t0e);Zur=r(q_t,"TFAutoModelForQuestionAnswering"),q_t.forEach(t),nPe.forEach(t),Hke=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(Jw.$$.fragment,ni),e0r=i(ni),Vc=n(ni,"P",{});var WW=s(Vc);o0r=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),a0e=n(WW,"CODE",{});var O_t=s(a0e);r0r=r(O_t,"from_pretrained()"),O_t.forEach(t),t0r=r(WW,"class method or the "),n0e=n(WW,"CODE",{});var G_t=s(n0e);a0r=r(G_t,"from_config()"),G_t.forEach(t),n0r=r(WW,`class
method.`),WW.forEach(t),s0r=i(ni),Yw=n(ni,"P",{});var sPe=s(Yw);l0r=r(sPe,"This class cannot be instantiated directly using "),s0e=n(sPe,"CODE",{});var X_t=s(s0e);i0r=r(X_t,"__init__()"),X_t.forEach(t),d0r=r(sPe," (throws an error)."),sPe.forEach(t),c0r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(Kw.$$.fragment,si),f0r=i(si),l0e=n(si,"P",{});var V_t=s(l0e);m0r=r(V_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V_t.forEach(t),g0r=i(si),zc=n(si,"P",{});var QW=s(zc);h0r=r(QW,`Note:
Loading a model from its configuration file does `),i0e=n(QW,"STRONG",{});var z_t=s(i0e);p0r=r(z_t,"not"),z_t.forEach(t),_0r=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),d0e=n(QW,"CODE",{});var W_t=s(d0e);u0r=r(W_t,"from_pretrained()"),W_t.forEach(t),b0r=r(QW,"to load the model weights."),QW.forEach(t),v0r=i(si),c0e=n(si,"P",{});var Q_t=s(c0e);T0r=r(Q_t,"Examples:"),Q_t.forEach(t),F0r=i(si),m(Zw.$$.fragment,si),si.forEach(t),C0r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(eA.$$.fragment,ya),M0r=i(ya),f0e=n(ya,"P",{});var H_t=s(f0e);E0r=r(H_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H_t.forEach(t),y0r=i(ya),wn=n(ya,"P",{});var I4=s(wn);w0r=r(I4,"The model class to instantiate is selected based on the "),m0e=n(I4,"CODE",{});var U_t=s(m0e);A0r=r(U_t,"model_type"),U_t.forEach(t),L0r=r(I4,` property of the config object (either
passed as an argument or loaded from `),g0e=n(I4,"CODE",{});var J_t=s(g0e);B0r=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),x0r=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(I4,"CODE",{});var Y_t=s(h0e);k0r=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),R0r=r(I4,":"),I4.forEach(t),S0r=i(ya),Z=n(ya,"UL",{});var re=s(Z);EF=n(re,"LI",{});var i9e=s(EF);p0e=n(i9e,"STRONG",{});var K_t=s(p0e);P0r=r(K_t,"albert"),K_t.forEach(t),$0r=r(i9e," \u2014 "),_X=n(i9e,"A",{href:!0});var Z_t=s(_X);I0r=r(Z_t,"TFAlbertForQuestionAnswering"),Z_t.forEach(t),j0r=r(i9e," (ALBERT model)"),i9e.forEach(t),D0r=i(re),yF=n(re,"LI",{});var d9e=s(yF);_0e=n(d9e,"STRONG",{});var eut=s(_0e);N0r=r(eut,"bert"),eut.forEach(t),q0r=r(d9e," \u2014 "),uX=n(d9e,"A",{href:!0});var out=s(uX);O0r=r(out,"TFBertForQuestionAnswering"),out.forEach(t),G0r=r(d9e," (BERT model)"),d9e.forEach(t),X0r=i(re),wF=n(re,"LI",{});var c9e=s(wF);u0e=n(c9e,"STRONG",{});var rut=s(u0e);V0r=r(rut,"camembert"),rut.forEach(t),z0r=r(c9e," \u2014 "),bX=n(c9e,"A",{href:!0});var tut=s(bX);W0r=r(tut,"TFCamembertForQuestionAnswering"),tut.forEach(t),Q0r=r(c9e," (CamemBERT model)"),c9e.forEach(t),H0r=i(re),AF=n(re,"LI",{});var f9e=s(AF);b0e=n(f9e,"STRONG",{});var aut=s(b0e);U0r=r(aut,"convbert"),aut.forEach(t),J0r=r(f9e," \u2014 "),vX=n(f9e,"A",{href:!0});var nut=s(vX);Y0r=r(nut,"TFConvBertForQuestionAnswering"),nut.forEach(t),K0r=r(f9e," (ConvBERT model)"),f9e.forEach(t),Z0r=i(re),LF=n(re,"LI",{});var m9e=s(LF);v0e=n(m9e,"STRONG",{});var sut=s(v0e);e1r=r(sut,"deberta"),sut.forEach(t),o1r=r(m9e," \u2014 "),TX=n(m9e,"A",{href:!0});var lut=s(TX);r1r=r(lut,"TFDebertaForQuestionAnswering"),lut.forEach(t),t1r=r(m9e," (DeBERTa model)"),m9e.forEach(t),a1r=i(re),BF=n(re,"LI",{});var g9e=s(BF);T0e=n(g9e,"STRONG",{});var iut=s(T0e);n1r=r(iut,"deberta-v2"),iut.forEach(t),s1r=r(g9e," \u2014 "),FX=n(g9e,"A",{href:!0});var dut=s(FX);l1r=r(dut,"TFDebertaV2ForQuestionAnswering"),dut.forEach(t),i1r=r(g9e," (DeBERTa-v2 model)"),g9e.forEach(t),d1r=i(re),xF=n(re,"LI",{});var h9e=s(xF);F0e=n(h9e,"STRONG",{});var cut=s(F0e);c1r=r(cut,"distilbert"),cut.forEach(t),f1r=r(h9e," \u2014 "),CX=n(h9e,"A",{href:!0});var fut=s(CX);m1r=r(fut,"TFDistilBertForQuestionAnswering"),fut.forEach(t),g1r=r(h9e," (DistilBERT model)"),h9e.forEach(t),h1r=i(re),kF=n(re,"LI",{});var p9e=s(kF);C0e=n(p9e,"STRONG",{});var mut=s(C0e);p1r=r(mut,"electra"),mut.forEach(t),_1r=r(p9e," \u2014 "),MX=n(p9e,"A",{href:!0});var gut=s(MX);u1r=r(gut,"TFElectraForQuestionAnswering"),gut.forEach(t),b1r=r(p9e," (ELECTRA model)"),p9e.forEach(t),v1r=i(re),RF=n(re,"LI",{});var _9e=s(RF);M0e=n(_9e,"STRONG",{});var hut=s(M0e);T1r=r(hut,"flaubert"),hut.forEach(t),F1r=r(_9e," \u2014 "),EX=n(_9e,"A",{href:!0});var put=s(EX);C1r=r(put,"TFFlaubertForQuestionAnsweringSimple"),put.forEach(t),M1r=r(_9e," (FlauBERT model)"),_9e.forEach(t),E1r=i(re),SF=n(re,"LI",{});var u9e=s(SF);E0e=n(u9e,"STRONG",{});var _ut=s(E0e);y1r=r(_ut,"funnel"),_ut.forEach(t),w1r=r(u9e," \u2014 "),yX=n(u9e,"A",{href:!0});var uut=s(yX);A1r=r(uut,"TFFunnelForQuestionAnswering"),uut.forEach(t),L1r=r(u9e," (Funnel Transformer model)"),u9e.forEach(t),B1r=i(re),PF=n(re,"LI",{});var b9e=s(PF);y0e=n(b9e,"STRONG",{});var but=s(y0e);x1r=r(but,"longformer"),but.forEach(t),k1r=r(b9e," \u2014 "),wX=n(b9e,"A",{href:!0});var vut=s(wX);R1r=r(vut,"TFLongformerForQuestionAnswering"),vut.forEach(t),S1r=r(b9e," (Longformer model)"),b9e.forEach(t),P1r=i(re),$F=n(re,"LI",{});var v9e=s($F);w0e=n(v9e,"STRONG",{});var Tut=s(w0e);$1r=r(Tut,"mobilebert"),Tut.forEach(t),I1r=r(v9e," \u2014 "),AX=n(v9e,"A",{href:!0});var Fut=s(AX);j1r=r(Fut,"TFMobileBertForQuestionAnswering"),Fut.forEach(t),D1r=r(v9e," (MobileBERT model)"),v9e.forEach(t),N1r=i(re),IF=n(re,"LI",{});var T9e=s(IF);A0e=n(T9e,"STRONG",{});var Cut=s(A0e);q1r=r(Cut,"mpnet"),Cut.forEach(t),O1r=r(T9e," \u2014 "),LX=n(T9e,"A",{href:!0});var Mut=s(LX);G1r=r(Mut,"TFMPNetForQuestionAnswering"),Mut.forEach(t),X1r=r(T9e," (MPNet model)"),T9e.forEach(t),V1r=i(re),jF=n(re,"LI",{});var F9e=s(jF);L0e=n(F9e,"STRONG",{});var Eut=s(L0e);z1r=r(Eut,"rembert"),Eut.forEach(t),W1r=r(F9e," \u2014 "),BX=n(F9e,"A",{href:!0});var yut=s(BX);Q1r=r(yut,"TFRemBertForQuestionAnswering"),yut.forEach(t),H1r=r(F9e," (RemBERT model)"),F9e.forEach(t),U1r=i(re),DF=n(re,"LI",{});var C9e=s(DF);B0e=n(C9e,"STRONG",{});var wut=s(B0e);J1r=r(wut,"roberta"),wut.forEach(t),Y1r=r(C9e," \u2014 "),xX=n(C9e,"A",{href:!0});var Aut=s(xX);K1r=r(Aut,"TFRobertaForQuestionAnswering"),Aut.forEach(t),Z1r=r(C9e," (RoBERTa model)"),C9e.forEach(t),ebr=i(re),NF=n(re,"LI",{});var M9e=s(NF);x0e=n(M9e,"STRONG",{});var Lut=s(x0e);obr=r(Lut,"roformer"),Lut.forEach(t),rbr=r(M9e," \u2014 "),kX=n(M9e,"A",{href:!0});var But=s(kX);tbr=r(But,"TFRoFormerForQuestionAnswering"),But.forEach(t),abr=r(M9e," (RoFormer model)"),M9e.forEach(t),nbr=i(re),qF=n(re,"LI",{});var E9e=s(qF);k0e=n(E9e,"STRONG",{});var xut=s(k0e);sbr=r(xut,"xlm"),xut.forEach(t),lbr=r(E9e," \u2014 "),RX=n(E9e,"A",{href:!0});var kut=s(RX);ibr=r(kut,"TFXLMForQuestionAnsweringSimple"),kut.forEach(t),dbr=r(E9e," (XLM model)"),E9e.forEach(t),cbr=i(re),OF=n(re,"LI",{});var y9e=s(OF);R0e=n(y9e,"STRONG",{});var Rut=s(R0e);fbr=r(Rut,"xlm-roberta"),Rut.forEach(t),mbr=r(y9e," \u2014 "),SX=n(y9e,"A",{href:!0});var Sut=s(SX);gbr=r(Sut,"TFXLMRobertaForQuestionAnswering"),Sut.forEach(t),hbr=r(y9e," (XLM-RoBERTa model)"),y9e.forEach(t),pbr=i(re),GF=n(re,"LI",{});var w9e=s(GF);S0e=n(w9e,"STRONG",{});var Put=s(S0e);_br=r(Put,"xlnet"),Put.forEach(t),ubr=r(w9e," \u2014 "),PX=n(w9e,"A",{href:!0});var $ut=s(PX);bbr=r($ut,"TFXLNetForQuestionAnsweringSimple"),$ut.forEach(t),vbr=r(w9e," (XLNet model)"),w9e.forEach(t),re.forEach(t),Tbr=i(ya),P0e=n(ya,"P",{});var Iut=s(P0e);Fbr=r(Iut,"Examples:"),Iut.forEach(t),Cbr=i(ya),m(oA.$$.fragment,ya),ya.forEach(t),ni.forEach(t),Uke=i(c),Wc=n(c,"H2",{class:!0});var lPe=s(Wc);XF=n(lPe,"A",{id:!0,class:!0,href:!0});var jut=s(XF);$0e=n(jut,"SPAN",{});var Dut=s($0e);m(rA.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),Mbr=i(lPe),I0e=n(lPe,"SPAN",{});var Nut=s(I0e);Ebr=r(Nut,"TFAutoModelForVision2Seq"),Nut.forEach(t),lPe.forEach(t),Jke=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(tA.$$.fragment,li),ybr=i(li),Qc=n(li,"P",{});var HW=s(Qc);wbr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),j0e=n(HW,"CODE",{});var qut=s(j0e);Abr=r(qut,"from_pretrained()"),qut.forEach(t),Lbr=r(HW,"class method or the "),D0e=n(HW,"CODE",{});var Out=s(D0e);Bbr=r(Out,"from_config()"),Out.forEach(t),xbr=r(HW,`class
method.`),HW.forEach(t),kbr=i(li),aA=n(li,"P",{});var iPe=s(aA);Rbr=r(iPe,"This class cannot be instantiated directly using "),N0e=n(iPe,"CODE",{});var Gut=s(N0e);Sbr=r(Gut,"__init__()"),Gut.forEach(t),Pbr=r(iPe," (throws an error)."),iPe.forEach(t),$br=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(nA.$$.fragment,ii),Ibr=i(ii),q0e=n(ii,"P",{});var Xut=s(q0e);jbr=r(Xut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xut.forEach(t),Dbr=i(ii),Hc=n(ii,"P",{});var UW=s(Hc);Nbr=r(UW,`Note:
Loading a model from its configuration file does `),O0e=n(UW,"STRONG",{});var Vut=s(O0e);qbr=r(Vut,"not"),Vut.forEach(t),Obr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),G0e=n(UW,"CODE",{});var zut=s(G0e);Gbr=r(zut,"from_pretrained()"),zut.forEach(t),Xbr=r(UW,"to load the model weights."),UW.forEach(t),Vbr=i(ii),X0e=n(ii,"P",{});var Wut=s(X0e);zbr=r(Wut,"Examples:"),Wut.forEach(t),Wbr=i(ii),m(sA.$$.fragment,ii),ii.forEach(t),Qbr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(lA.$$.fragment,wa),Hbr=i(wa),V0e=n(wa,"P",{});var Qut=s(V0e);Ubr=r(Qut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qut.forEach(t),Jbr=i(wa),An=n(wa,"P",{});var j4=s(An);Ybr=r(j4,"The model class to instantiate is selected based on the "),z0e=n(j4,"CODE",{});var Hut=s(z0e);Kbr=r(Hut,"model_type"),Hut.forEach(t),Zbr=r(j4,` property of the config object (either
passed as an argument or loaded from `),W0e=n(j4,"CODE",{});var Uut=s(W0e);e2r=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),o2r=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(j4,"CODE",{});var Jut=s(Q0e);r2r=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),t2r=r(j4,":"),j4.forEach(t),a2r=i(wa),H0e=n(wa,"UL",{});var Yut=s(H0e);VF=n(Yut,"LI",{});var A9e=s(VF);U0e=n(A9e,"STRONG",{});var Kut=s(U0e);n2r=r(Kut,"vision-encoder-decoder"),Kut.forEach(t),s2r=r(A9e," \u2014 "),$X=n(A9e,"A",{href:!0});var Zut=s($X);l2r=r(Zut,"TFVisionEncoderDecoderModel"),Zut.forEach(t),i2r=r(A9e," (Vision Encoder decoder model)"),A9e.forEach(t),Yut.forEach(t),d2r=i(wa),J0e=n(wa,"P",{});var e0t=s(J0e);c2r=r(e0t,"Examples:"),e0t.forEach(t),f2r=i(wa),m(iA.$$.fragment,wa),wa.forEach(t),li.forEach(t),Yke=i(c),Uc=n(c,"H2",{class:!0});var dPe=s(Uc);zF=n(dPe,"A",{id:!0,class:!0,href:!0});var o0t=s(zF);Y0e=n(o0t,"SPAN",{});var r0t=s(Y0e);m(dA.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),m2r=i(dPe),K0e=n(dPe,"SPAN",{});var t0t=s(K0e);g2r=r(t0t,"TFAutoModelForSpeechSeq2Seq"),t0t.forEach(t),dPe.forEach(t),Kke=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(cA.$$.fragment,di),h2r=i(di),Jc=n(di,"P",{});var JW=s(Jc);p2r=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Z0e=n(JW,"CODE",{});var a0t=s(Z0e);_2r=r(a0t,"from_pretrained()"),a0t.forEach(t),u2r=r(JW,"class method or the "),e1e=n(JW,"CODE",{});var n0t=s(e1e);b2r=r(n0t,"from_config()"),n0t.forEach(t),v2r=r(JW,`class
method.`),JW.forEach(t),T2r=i(di),fA=n(di,"P",{});var cPe=s(fA);F2r=r(cPe,"This class cannot be instantiated directly using "),o1e=n(cPe,"CODE",{});var s0t=s(o1e);C2r=r(s0t,"__init__()"),s0t.forEach(t),M2r=r(cPe," (throws an error)."),cPe.forEach(t),E2r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(mA.$$.fragment,ci),y2r=i(ci),r1e=n(ci,"P",{});var l0t=s(r1e);w2r=r(l0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l0t.forEach(t),A2r=i(ci),Yc=n(ci,"P",{});var YW=s(Yc);L2r=r(YW,`Note:
Loading a model from its configuration file does `),t1e=n(YW,"STRONG",{});var i0t=s(t1e);B2r=r(i0t,"not"),i0t.forEach(t),x2r=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=n(YW,"CODE",{});var d0t=s(a1e);k2r=r(d0t,"from_pretrained()"),d0t.forEach(t),R2r=r(YW,"to load the model weights."),YW.forEach(t),S2r=i(ci),n1e=n(ci,"P",{});var c0t=s(n1e);P2r=r(c0t,"Examples:"),c0t.forEach(t),$2r=i(ci),m(gA.$$.fragment,ci),ci.forEach(t),I2r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(hA.$$.fragment,Aa),j2r=i(Aa),s1e=n(Aa,"P",{});var f0t=s(s1e);D2r=r(f0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),f0t.forEach(t),N2r=i(Aa),Ln=n(Aa,"P",{});var D4=s(Ln);q2r=r(D4,"The model class to instantiate is selected based on the "),l1e=n(D4,"CODE",{});var m0t=s(l1e);O2r=r(m0t,"model_type"),m0t.forEach(t),G2r=r(D4,` property of the config object (either
passed as an argument or loaded from `),i1e=n(D4,"CODE",{});var g0t=s(i1e);X2r=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),V2r=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(D4,"CODE",{});var h0t=s(d1e);z2r=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),W2r=r(D4,":"),D4.forEach(t),Q2r=i(Aa),c1e=n(Aa,"UL",{});var p0t=s(c1e);WF=n(p0t,"LI",{});var L9e=s(WF);f1e=n(L9e,"STRONG",{});var _0t=s(f1e);H2r=r(_0t,"speech_to_text"),_0t.forEach(t),U2r=r(L9e," \u2014 "),IX=n(L9e,"A",{href:!0});var u0t=s(IX);J2r=r(u0t,"TFSpeech2TextForConditionalGeneration"),u0t.forEach(t),Y2r=r(L9e," (Speech2Text model)"),L9e.forEach(t),p0t.forEach(t),K2r=i(Aa),m1e=n(Aa,"P",{});var b0t=s(m1e);Z2r=r(b0t,"Examples:"),b0t.forEach(t),evr=i(Aa),m(pA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Zke=i(c),Kc=n(c,"H2",{class:!0});var fPe=s(Kc);QF=n(fPe,"A",{id:!0,class:!0,href:!0});var v0t=s(QF);g1e=n(v0t,"SPAN",{});var T0t=s(g1e);m(_A.$$.fragment,T0t),T0t.forEach(t),v0t.forEach(t),ovr=i(fPe),h1e=n(fPe,"SPAN",{});var F0t=s(h1e);rvr=r(F0t,"FlaxAutoModel"),F0t.forEach(t),fPe.forEach(t),eRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(uA.$$.fragment,fi),tvr=i(fi),Zc=n(fi,"P",{});var KW=s(Zc);avr=r(KW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),p1e=n(KW,"CODE",{});var C0t=s(p1e);nvr=r(C0t,"from_pretrained()"),C0t.forEach(t),svr=r(KW,"class method or the "),_1e=n(KW,"CODE",{});var M0t=s(_1e);lvr=r(M0t,"from_config()"),M0t.forEach(t),ivr=r(KW,`class
method.`),KW.forEach(t),dvr=i(fi),bA=n(fi,"P",{});var mPe=s(bA);cvr=r(mPe,"This class cannot be instantiated directly using "),u1e=n(mPe,"CODE",{});var E0t=s(u1e);fvr=r(E0t,"__init__()"),E0t.forEach(t),mvr=r(mPe," (throws an error)."),mPe.forEach(t),gvr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(vA.$$.fragment,mi),hvr=i(mi),b1e=n(mi,"P",{});var y0t=s(b1e);pvr=r(y0t,"Instantiates one of the base model classes of the library from a configuration."),y0t.forEach(t),_vr=i(mi),ef=n(mi,"P",{});var ZW=s(ef);uvr=r(ZW,`Note:
Loading a model from its configuration file does `),v1e=n(ZW,"STRONG",{});var w0t=s(v1e);bvr=r(w0t,"not"),w0t.forEach(t),vvr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=n(ZW,"CODE",{});var A0t=s(T1e);Tvr=r(A0t,"from_pretrained()"),A0t.forEach(t),Fvr=r(ZW,"to load the model weights."),ZW.forEach(t),Cvr=i(mi),F1e=n(mi,"P",{});var L0t=s(F1e);Mvr=r(L0t,"Examples:"),L0t.forEach(t),Evr=i(mi),m(TA.$$.fragment,mi),mi.forEach(t),yvr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(FA.$$.fragment,La),wvr=i(La),C1e=n(La,"P",{});var B0t=s(C1e);Avr=r(B0t,"Instantiate one of the base model classes of the library from a pretrained model."),B0t.forEach(t),Lvr=i(La),Bn=n(La,"P",{});var N4=s(Bn);Bvr=r(N4,"The model class to instantiate is selected based on the "),M1e=n(N4,"CODE",{});var x0t=s(M1e);xvr=r(x0t,"model_type"),x0t.forEach(t),kvr=r(N4,` property of the config object (either
passed as an argument or loaded from `),E1e=n(N4,"CODE",{});var k0t=s(E1e);Rvr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),Svr=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(N4,"CODE",{});var R0t=s(y1e);Pvr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),$vr=r(N4,":"),N4.forEach(t),Ivr=i(La),z=n(La,"UL",{});var Q=s(z);HF=n(Q,"LI",{});var B9e=s(HF);w1e=n(B9e,"STRONG",{});var S0t=s(w1e);jvr=r(S0t,"albert"),S0t.forEach(t),Dvr=r(B9e," \u2014 "),jX=n(B9e,"A",{href:!0});var P0t=s(jX);Nvr=r(P0t,"FlaxAlbertModel"),P0t.forEach(t),qvr=r(B9e," (ALBERT model)"),B9e.forEach(t),Ovr=i(Q),UF=n(Q,"LI",{});var x9e=s(UF);A1e=n(x9e,"STRONG",{});var $0t=s(A1e);Gvr=r($0t,"bart"),$0t.forEach(t),Xvr=r(x9e," \u2014 "),DX=n(x9e,"A",{href:!0});var I0t=s(DX);Vvr=r(I0t,"FlaxBartModel"),I0t.forEach(t),zvr=r(x9e," (BART model)"),x9e.forEach(t),Wvr=i(Q),JF=n(Q,"LI",{});var k9e=s(JF);L1e=n(k9e,"STRONG",{});var j0t=s(L1e);Qvr=r(j0t,"beit"),j0t.forEach(t),Hvr=r(k9e," \u2014 "),NX=n(k9e,"A",{href:!0});var D0t=s(NX);Uvr=r(D0t,"FlaxBeitModel"),D0t.forEach(t),Jvr=r(k9e," (BEiT model)"),k9e.forEach(t),Yvr=i(Q),YF=n(Q,"LI",{});var R9e=s(YF);B1e=n(R9e,"STRONG",{});var N0t=s(B1e);Kvr=r(N0t,"bert"),N0t.forEach(t),Zvr=r(R9e," \u2014 "),qX=n(R9e,"A",{href:!0});var q0t=s(qX);e6r=r(q0t,"FlaxBertModel"),q0t.forEach(t),o6r=r(R9e," (BERT model)"),R9e.forEach(t),r6r=i(Q),KF=n(Q,"LI",{});var S9e=s(KF);x1e=n(S9e,"STRONG",{});var O0t=s(x1e);t6r=r(O0t,"big_bird"),O0t.forEach(t),a6r=r(S9e," \u2014 "),OX=n(S9e,"A",{href:!0});var G0t=s(OX);n6r=r(G0t,"FlaxBigBirdModel"),G0t.forEach(t),s6r=r(S9e," (BigBird model)"),S9e.forEach(t),l6r=i(Q),ZF=n(Q,"LI",{});var P9e=s(ZF);k1e=n(P9e,"STRONG",{});var X0t=s(k1e);i6r=r(X0t,"blenderbot"),X0t.forEach(t),d6r=r(P9e," \u2014 "),GX=n(P9e,"A",{href:!0});var V0t=s(GX);c6r=r(V0t,"FlaxBlenderbotModel"),V0t.forEach(t),f6r=r(P9e," (Blenderbot model)"),P9e.forEach(t),m6r=i(Q),eC=n(Q,"LI",{});var $9e=s(eC);R1e=n($9e,"STRONG",{});var z0t=s(R1e);g6r=r(z0t,"blenderbot-small"),z0t.forEach(t),h6r=r($9e," \u2014 "),XX=n($9e,"A",{href:!0});var W0t=s(XX);p6r=r(W0t,"FlaxBlenderbotSmallModel"),W0t.forEach(t),_6r=r($9e," (BlenderbotSmall model)"),$9e.forEach(t),u6r=i(Q),oC=n(Q,"LI",{});var I9e=s(oC);S1e=n(I9e,"STRONG",{});var Q0t=s(S1e);b6r=r(Q0t,"clip"),Q0t.forEach(t),v6r=r(I9e," \u2014 "),VX=n(I9e,"A",{href:!0});var H0t=s(VX);T6r=r(H0t,"FlaxCLIPModel"),H0t.forEach(t),F6r=r(I9e," (CLIP model)"),I9e.forEach(t),C6r=i(Q),rC=n(Q,"LI",{});var j9e=s(rC);P1e=n(j9e,"STRONG",{});var U0t=s(P1e);M6r=r(U0t,"distilbert"),U0t.forEach(t),E6r=r(j9e," \u2014 "),zX=n(j9e,"A",{href:!0});var J0t=s(zX);y6r=r(J0t,"FlaxDistilBertModel"),J0t.forEach(t),w6r=r(j9e," (DistilBERT model)"),j9e.forEach(t),A6r=i(Q),tC=n(Q,"LI",{});var D9e=s(tC);$1e=n(D9e,"STRONG",{});var Y0t=s($1e);L6r=r(Y0t,"electra"),Y0t.forEach(t),B6r=r(D9e," \u2014 "),WX=n(D9e,"A",{href:!0});var K0t=s(WX);x6r=r(K0t,"FlaxElectraModel"),K0t.forEach(t),k6r=r(D9e," (ELECTRA model)"),D9e.forEach(t),R6r=i(Q),aC=n(Q,"LI",{});var N9e=s(aC);I1e=n(N9e,"STRONG",{});var Z0t=s(I1e);S6r=r(Z0t,"gpt2"),Z0t.forEach(t),P6r=r(N9e," \u2014 "),QX=n(N9e,"A",{href:!0});var e1t=s(QX);$6r=r(e1t,"FlaxGPT2Model"),e1t.forEach(t),I6r=r(N9e," (OpenAI GPT-2 model)"),N9e.forEach(t),j6r=i(Q),nC=n(Q,"LI",{});var q9e=s(nC);j1e=n(q9e,"STRONG",{});var o1t=s(j1e);D6r=r(o1t,"gpt_neo"),o1t.forEach(t),N6r=r(q9e," \u2014 "),HX=n(q9e,"A",{href:!0});var r1t=s(HX);q6r=r(r1t,"FlaxGPTNeoModel"),r1t.forEach(t),O6r=r(q9e," (GPT Neo model)"),q9e.forEach(t),G6r=i(Q),sC=n(Q,"LI",{});var O9e=s(sC);D1e=n(O9e,"STRONG",{});var t1t=s(D1e);X6r=r(t1t,"gptj"),t1t.forEach(t),V6r=r(O9e," \u2014 "),UX=n(O9e,"A",{href:!0});var a1t=s(UX);z6r=r(a1t,"FlaxGPTJModel"),a1t.forEach(t),W6r=r(O9e," (GPT-J model)"),O9e.forEach(t),Q6r=i(Q),lC=n(Q,"LI",{});var G9e=s(lC);N1e=n(G9e,"STRONG",{});var n1t=s(N1e);H6r=r(n1t,"marian"),n1t.forEach(t),U6r=r(G9e," \u2014 "),JX=n(G9e,"A",{href:!0});var s1t=s(JX);J6r=r(s1t,"FlaxMarianModel"),s1t.forEach(t),Y6r=r(G9e," (Marian model)"),G9e.forEach(t),K6r=i(Q),iC=n(Q,"LI",{});var X9e=s(iC);q1e=n(X9e,"STRONG",{});var l1t=s(q1e);Z6r=r(l1t,"mbart"),l1t.forEach(t),eTr=r(X9e," \u2014 "),YX=n(X9e,"A",{href:!0});var i1t=s(YX);oTr=r(i1t,"FlaxMBartModel"),i1t.forEach(t),rTr=r(X9e," (mBART model)"),X9e.forEach(t),tTr=i(Q),dC=n(Q,"LI",{});var V9e=s(dC);O1e=n(V9e,"STRONG",{});var d1t=s(O1e);aTr=r(d1t,"mt5"),d1t.forEach(t),nTr=r(V9e," \u2014 "),KX=n(V9e,"A",{href:!0});var c1t=s(KX);sTr=r(c1t,"FlaxMT5Model"),c1t.forEach(t),lTr=r(V9e," (mT5 model)"),V9e.forEach(t),iTr=i(Q),cC=n(Q,"LI",{});var z9e=s(cC);G1e=n(z9e,"STRONG",{});var f1t=s(G1e);dTr=r(f1t,"pegasus"),f1t.forEach(t),cTr=r(z9e," \u2014 "),ZX=n(z9e,"A",{href:!0});var m1t=s(ZX);fTr=r(m1t,"FlaxPegasusModel"),m1t.forEach(t),mTr=r(z9e," (Pegasus model)"),z9e.forEach(t),gTr=i(Q),fC=n(Q,"LI",{});var W9e=s(fC);X1e=n(W9e,"STRONG",{});var g1t=s(X1e);hTr=r(g1t,"roberta"),g1t.forEach(t),pTr=r(W9e," \u2014 "),eV=n(W9e,"A",{href:!0});var h1t=s(eV);_Tr=r(h1t,"FlaxRobertaModel"),h1t.forEach(t),uTr=r(W9e," (RoBERTa model)"),W9e.forEach(t),bTr=i(Q),mC=n(Q,"LI",{});var Q9e=s(mC);V1e=n(Q9e,"STRONG",{});var p1t=s(V1e);vTr=r(p1t,"roformer"),p1t.forEach(t),TTr=r(Q9e," \u2014 "),oV=n(Q9e,"A",{href:!0});var _1t=s(oV);FTr=r(_1t,"FlaxRoFormerModel"),_1t.forEach(t),CTr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),MTr=i(Q),gC=n(Q,"LI",{});var H9e=s(gC);z1e=n(H9e,"STRONG",{});var u1t=s(z1e);ETr=r(u1t,"t5"),u1t.forEach(t),yTr=r(H9e," \u2014 "),rV=n(H9e,"A",{href:!0});var b1t=s(rV);wTr=r(b1t,"FlaxT5Model"),b1t.forEach(t),ATr=r(H9e," (T5 model)"),H9e.forEach(t),LTr=i(Q),hC=n(Q,"LI",{});var U9e=s(hC);W1e=n(U9e,"STRONG",{});var v1t=s(W1e);BTr=r(v1t,"vision-text-dual-encoder"),v1t.forEach(t),xTr=r(U9e," \u2014 "),tV=n(U9e,"A",{href:!0});var T1t=s(tV);kTr=r(T1t,"FlaxVisionTextDualEncoderModel"),T1t.forEach(t),RTr=r(U9e," (VisionTextDualEncoder model)"),U9e.forEach(t),STr=i(Q),pC=n(Q,"LI",{});var J9e=s(pC);Q1e=n(J9e,"STRONG",{});var F1t=s(Q1e);PTr=r(F1t,"vit"),F1t.forEach(t),$Tr=r(J9e," \u2014 "),aV=n(J9e,"A",{href:!0});var C1t=s(aV);ITr=r(C1t,"FlaxViTModel"),C1t.forEach(t),jTr=r(J9e," (ViT model)"),J9e.forEach(t),DTr=i(Q),_C=n(Q,"LI",{});var Y9e=s(_C);H1e=n(Y9e,"STRONG",{});var M1t=s(H1e);NTr=r(M1t,"wav2vec2"),M1t.forEach(t),qTr=r(Y9e," \u2014 "),nV=n(Y9e,"A",{href:!0});var E1t=s(nV);OTr=r(E1t,"FlaxWav2Vec2Model"),E1t.forEach(t),GTr=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),XTr=i(Q),uC=n(Q,"LI",{});var K9e=s(uC);U1e=n(K9e,"STRONG",{});var y1t=s(U1e);VTr=r(y1t,"xglm"),y1t.forEach(t),zTr=r(K9e," \u2014 "),sV=n(K9e,"A",{href:!0});var w1t=s(sV);WTr=r(w1t,"FlaxXGLMModel"),w1t.forEach(t),QTr=r(K9e," (XGLM model)"),K9e.forEach(t),HTr=i(Q),bC=n(Q,"LI",{});var Z9e=s(bC);J1e=n(Z9e,"STRONG",{});var A1t=s(J1e);UTr=r(A1t,"xlm-roberta"),A1t.forEach(t),JTr=r(Z9e," \u2014 "),lV=n(Z9e,"A",{href:!0});var L1t=s(lV);YTr=r(L1t,"FlaxXLMRobertaModel"),L1t.forEach(t),KTr=r(Z9e," (XLM-RoBERTa model)"),Z9e.forEach(t),Q.forEach(t),ZTr=i(La),Y1e=n(La,"P",{});var B1t=s(Y1e);e7r=r(B1t,"Examples:"),B1t.forEach(t),o7r=i(La),m(CA.$$.fragment,La),La.forEach(t),fi.forEach(t),oRe=i(c),of=n(c,"H2",{class:!0});var gPe=s(of);vC=n(gPe,"A",{id:!0,class:!0,href:!0});var x1t=s(vC);K1e=n(x1t,"SPAN",{});var k1t=s(K1e);m(MA.$$.fragment,k1t),k1t.forEach(t),x1t.forEach(t),r7r=i(gPe),Z1e=n(gPe,"SPAN",{});var R1t=s(Z1e);t7r=r(R1t,"FlaxAutoModelForCausalLM"),R1t.forEach(t),gPe.forEach(t),rRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(EA.$$.fragment,gi),a7r=i(gi),rf=n(gi,"P",{});var eQ=s(rf);n7r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ebe=n(eQ,"CODE",{});var S1t=s(ebe);s7r=r(S1t,"from_pretrained()"),S1t.forEach(t),l7r=r(eQ,"class method or the "),obe=n(eQ,"CODE",{});var P1t=s(obe);i7r=r(P1t,"from_config()"),P1t.forEach(t),d7r=r(eQ,`class
method.`),eQ.forEach(t),c7r=i(gi),yA=n(gi,"P",{});var hPe=s(yA);f7r=r(hPe,"This class cannot be instantiated directly using "),rbe=n(hPe,"CODE",{});var $1t=s(rbe);m7r=r($1t,"__init__()"),$1t.forEach(t),g7r=r(hPe," (throws an error)."),hPe.forEach(t),h7r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(wA.$$.fragment,hi),p7r=i(hi),tbe=n(hi,"P",{});var I1t=s(tbe);_7r=r(I1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I1t.forEach(t),u7r=i(hi),tf=n(hi,"P",{});var oQ=s(tf);b7r=r(oQ,`Note:
Loading a model from its configuration file does `),abe=n(oQ,"STRONG",{});var j1t=s(abe);v7r=r(j1t,"not"),j1t.forEach(t),T7r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nbe=n(oQ,"CODE",{});var D1t=s(nbe);F7r=r(D1t,"from_pretrained()"),D1t.forEach(t),C7r=r(oQ,"to load the model weights."),oQ.forEach(t),M7r=i(hi),sbe=n(hi,"P",{});var N1t=s(sbe);E7r=r(N1t,"Examples:"),N1t.forEach(t),y7r=i(hi),m(AA.$$.fragment,hi),hi.forEach(t),w7r=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(LA.$$.fragment,Ba),A7r=i(Ba),lbe=n(Ba,"P",{});var q1t=s(lbe);L7r=r(q1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q1t.forEach(t),B7r=i(Ba),xn=n(Ba,"P",{});var q4=s(xn);x7r=r(q4,"The model class to instantiate is selected based on the "),ibe=n(q4,"CODE",{});var O1t=s(ibe);k7r=r(O1t,"model_type"),O1t.forEach(t),R7r=r(q4,` property of the config object (either
passed as an argument or loaded from `),dbe=n(q4,"CODE",{});var G1t=s(dbe);S7r=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),P7r=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(q4,"CODE",{});var X1t=s(cbe);$7r=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),I7r=r(q4,":"),q4.forEach(t),j7r=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);TC=n(pi,"LI",{});var eBe=s(TC);fbe=n(eBe,"STRONG",{});var V1t=s(fbe);D7r=r(V1t,"bart"),V1t.forEach(t),N7r=r(eBe," \u2014 "),iV=n(eBe,"A",{href:!0});var z1t=s(iV);q7r=r(z1t,"FlaxBartForCausalLM"),z1t.forEach(t),O7r=r(eBe," (BART model)"),eBe.forEach(t),G7r=i(pi),FC=n(pi,"LI",{});var oBe=s(FC);mbe=n(oBe,"STRONG",{});var W1t=s(mbe);X7r=r(W1t,"gpt2"),W1t.forEach(t),V7r=r(oBe," \u2014 "),dV=n(oBe,"A",{href:!0});var Q1t=s(dV);z7r=r(Q1t,"FlaxGPT2LMHeadModel"),Q1t.forEach(t),W7r=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),Q7r=i(pi),CC=n(pi,"LI",{});var rBe=s(CC);gbe=n(rBe,"STRONG",{});var H1t=s(gbe);H7r=r(H1t,"gpt_neo"),H1t.forEach(t),U7r=r(rBe," \u2014 "),cV=n(rBe,"A",{href:!0});var U1t=s(cV);J7r=r(U1t,"FlaxGPTNeoForCausalLM"),U1t.forEach(t),Y7r=r(rBe," (GPT Neo model)"),rBe.forEach(t),K7r=i(pi),MC=n(pi,"LI",{});var tBe=s(MC);hbe=n(tBe,"STRONG",{});var J1t=s(hbe);Z7r=r(J1t,"gptj"),J1t.forEach(t),eFr=r(tBe," \u2014 "),fV=n(tBe,"A",{href:!0});var Y1t=s(fV);oFr=r(Y1t,"FlaxGPTJForCausalLM"),Y1t.forEach(t),rFr=r(tBe," (GPT-J model)"),tBe.forEach(t),tFr=i(pi),EC=n(pi,"LI",{});var aBe=s(EC);pbe=n(aBe,"STRONG",{});var K1t=s(pbe);aFr=r(K1t,"xglm"),K1t.forEach(t),nFr=r(aBe," \u2014 "),mV=n(aBe,"A",{href:!0});var Z1t=s(mV);sFr=r(Z1t,"FlaxXGLMForCausalLM"),Z1t.forEach(t),lFr=r(aBe," (XGLM model)"),aBe.forEach(t),pi.forEach(t),iFr=i(Ba),_be=n(Ba,"P",{});var ebt=s(_be);dFr=r(ebt,"Examples:"),ebt.forEach(t),cFr=i(Ba),m(BA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),tRe=i(c),af=n(c,"H2",{class:!0});var pPe=s(af);yC=n(pPe,"A",{id:!0,class:!0,href:!0});var obt=s(yC);ube=n(obt,"SPAN",{});var rbt=s(ube);m(xA.$$.fragment,rbt),rbt.forEach(t),obt.forEach(t),fFr=i(pPe),bbe=n(pPe,"SPAN",{});var tbt=s(bbe);mFr=r(tbt,"FlaxAutoModelForPreTraining"),tbt.forEach(t),pPe.forEach(t),aRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(kA.$$.fragment,_i),gFr=i(_i),nf=n(_i,"P",{});var rQ=s(nf);hFr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vbe=n(rQ,"CODE",{});var abt=s(vbe);pFr=r(abt,"from_pretrained()"),abt.forEach(t),_Fr=r(rQ,"class method or the "),Tbe=n(rQ,"CODE",{});var nbt=s(Tbe);uFr=r(nbt,"from_config()"),nbt.forEach(t),bFr=r(rQ,`class
method.`),rQ.forEach(t),vFr=i(_i),RA=n(_i,"P",{});var _Pe=s(RA);TFr=r(_Pe,"This class cannot be instantiated directly using "),Fbe=n(_Pe,"CODE",{});var sbt=s(Fbe);FFr=r(sbt,"__init__()"),sbt.forEach(t),CFr=r(_Pe," (throws an error)."),_Pe.forEach(t),MFr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(SA.$$.fragment,ui),EFr=i(ui),Cbe=n(ui,"P",{});var lbt=s(Cbe);yFr=r(lbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lbt.forEach(t),wFr=i(ui),sf=n(ui,"P",{});var tQ=s(sf);AFr=r(tQ,`Note:
Loading a model from its configuration file does `),Mbe=n(tQ,"STRONG",{});var ibt=s(Mbe);LFr=r(ibt,"not"),ibt.forEach(t),BFr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ebe=n(tQ,"CODE",{});var dbt=s(Ebe);xFr=r(dbt,"from_pretrained()"),dbt.forEach(t),kFr=r(tQ,"to load the model weights."),tQ.forEach(t),RFr=i(ui),ybe=n(ui,"P",{});var cbt=s(ybe);SFr=r(cbt,"Examples:"),cbt.forEach(t),PFr=i(ui),m(PA.$$.fragment,ui),ui.forEach(t),$Fr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m($A.$$.fragment,xa),IFr=i(xa),wbe=n(xa,"P",{});var fbt=s(wbe);jFr=r(fbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fbt.forEach(t),DFr=i(xa),kn=n(xa,"P",{});var O4=s(kn);NFr=r(O4,"The model class to instantiate is selected based on the "),Abe=n(O4,"CODE",{});var mbt=s(Abe);qFr=r(mbt,"model_type"),mbt.forEach(t),OFr=r(O4,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(O4,"CODE",{});var gbt=s(Lbe);GFr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),XFr=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(O4,"CODE",{});var hbt=s(Bbe);VFr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),zFr=r(O4,":"),O4.forEach(t),WFr=i(xa),ce=n(xa,"UL",{});var ge=s(ce);wC=n(ge,"LI",{});var nBe=s(wC);xbe=n(nBe,"STRONG",{});var pbt=s(xbe);QFr=r(pbt,"albert"),pbt.forEach(t),HFr=r(nBe," \u2014 "),gV=n(nBe,"A",{href:!0});var _bt=s(gV);UFr=r(_bt,"FlaxAlbertForPreTraining"),_bt.forEach(t),JFr=r(nBe," (ALBERT model)"),nBe.forEach(t),YFr=i(ge),AC=n(ge,"LI",{});var sBe=s(AC);kbe=n(sBe,"STRONG",{});var ubt=s(kbe);KFr=r(ubt,"bart"),ubt.forEach(t),ZFr=r(sBe," \u2014 "),hV=n(sBe,"A",{href:!0});var bbt=s(hV);eCr=r(bbt,"FlaxBartForConditionalGeneration"),bbt.forEach(t),oCr=r(sBe," (BART model)"),sBe.forEach(t),rCr=i(ge),LC=n(ge,"LI",{});var lBe=s(LC);Rbe=n(lBe,"STRONG",{});var vbt=s(Rbe);tCr=r(vbt,"bert"),vbt.forEach(t),aCr=r(lBe," \u2014 "),pV=n(lBe,"A",{href:!0});var Tbt=s(pV);nCr=r(Tbt,"FlaxBertForPreTraining"),Tbt.forEach(t),sCr=r(lBe," (BERT model)"),lBe.forEach(t),lCr=i(ge),BC=n(ge,"LI",{});var iBe=s(BC);Sbe=n(iBe,"STRONG",{});var Fbt=s(Sbe);iCr=r(Fbt,"big_bird"),Fbt.forEach(t),dCr=r(iBe," \u2014 "),_V=n(iBe,"A",{href:!0});var Cbt=s(_V);cCr=r(Cbt,"FlaxBigBirdForPreTraining"),Cbt.forEach(t),fCr=r(iBe," (BigBird model)"),iBe.forEach(t),mCr=i(ge),xC=n(ge,"LI",{});var dBe=s(xC);Pbe=n(dBe,"STRONG",{});var Mbt=s(Pbe);gCr=r(Mbt,"electra"),Mbt.forEach(t),hCr=r(dBe," \u2014 "),uV=n(dBe,"A",{href:!0});var Ebt=s(uV);pCr=r(Ebt,"FlaxElectraForPreTraining"),Ebt.forEach(t),_Cr=r(dBe," (ELECTRA model)"),dBe.forEach(t),uCr=i(ge),kC=n(ge,"LI",{});var cBe=s(kC);$be=n(cBe,"STRONG",{});var ybt=s($be);bCr=r(ybt,"mbart"),ybt.forEach(t),vCr=r(cBe," \u2014 "),bV=n(cBe,"A",{href:!0});var wbt=s(bV);TCr=r(wbt,"FlaxMBartForConditionalGeneration"),wbt.forEach(t),FCr=r(cBe," (mBART model)"),cBe.forEach(t),CCr=i(ge),RC=n(ge,"LI",{});var fBe=s(RC);Ibe=n(fBe,"STRONG",{});var Abt=s(Ibe);MCr=r(Abt,"mt5"),Abt.forEach(t),ECr=r(fBe," \u2014 "),vV=n(fBe,"A",{href:!0});var Lbt=s(vV);yCr=r(Lbt,"FlaxMT5ForConditionalGeneration"),Lbt.forEach(t),wCr=r(fBe," (mT5 model)"),fBe.forEach(t),ACr=i(ge),SC=n(ge,"LI",{});var mBe=s(SC);jbe=n(mBe,"STRONG",{});var Bbt=s(jbe);LCr=r(Bbt,"roberta"),Bbt.forEach(t),BCr=r(mBe," \u2014 "),TV=n(mBe,"A",{href:!0});var xbt=s(TV);xCr=r(xbt,"FlaxRobertaForMaskedLM"),xbt.forEach(t),kCr=r(mBe," (RoBERTa model)"),mBe.forEach(t),RCr=i(ge),PC=n(ge,"LI",{});var gBe=s(PC);Dbe=n(gBe,"STRONG",{});var kbt=s(Dbe);SCr=r(kbt,"roformer"),kbt.forEach(t),PCr=r(gBe," \u2014 "),FV=n(gBe,"A",{href:!0});var Rbt=s(FV);$Cr=r(Rbt,"FlaxRoFormerForMaskedLM"),Rbt.forEach(t),ICr=r(gBe," (RoFormer model)"),gBe.forEach(t),jCr=i(ge),$C=n(ge,"LI",{});var hBe=s($C);Nbe=n(hBe,"STRONG",{});var Sbt=s(Nbe);DCr=r(Sbt,"t5"),Sbt.forEach(t),NCr=r(hBe," \u2014 "),CV=n(hBe,"A",{href:!0});var Pbt=s(CV);qCr=r(Pbt,"FlaxT5ForConditionalGeneration"),Pbt.forEach(t),OCr=r(hBe," (T5 model)"),hBe.forEach(t),GCr=i(ge),IC=n(ge,"LI",{});var pBe=s(IC);qbe=n(pBe,"STRONG",{});var $bt=s(qbe);XCr=r($bt,"wav2vec2"),$bt.forEach(t),VCr=r(pBe," \u2014 "),MV=n(pBe,"A",{href:!0});var Ibt=s(MV);zCr=r(Ibt,"FlaxWav2Vec2ForPreTraining"),Ibt.forEach(t),WCr=r(pBe," (Wav2Vec2 model)"),pBe.forEach(t),QCr=i(ge),jC=n(ge,"LI",{});var _Be=s(jC);Obe=n(_Be,"STRONG",{});var jbt=s(Obe);HCr=r(jbt,"xlm-roberta"),jbt.forEach(t),UCr=r(_Be," \u2014 "),EV=n(_Be,"A",{href:!0});var Dbt=s(EV);JCr=r(Dbt,"FlaxXLMRobertaForMaskedLM"),Dbt.forEach(t),YCr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),ge.forEach(t),KCr=i(xa),Gbe=n(xa,"P",{});var Nbt=s(Gbe);ZCr=r(Nbt,"Examples:"),Nbt.forEach(t),eMr=i(xa),m(IA.$$.fragment,xa),xa.forEach(t),_i.forEach(t),nRe=i(c),lf=n(c,"H2",{class:!0});var uPe=s(lf);DC=n(uPe,"A",{id:!0,class:!0,href:!0});var qbt=s(DC);Xbe=n(qbt,"SPAN",{});var Obt=s(Xbe);m(jA.$$.fragment,Obt),Obt.forEach(t),qbt.forEach(t),oMr=i(uPe),Vbe=n(uPe,"SPAN",{});var Gbt=s(Vbe);rMr=r(Gbt,"FlaxAutoModelForMaskedLM"),Gbt.forEach(t),uPe.forEach(t),sRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(DA.$$.fragment,bi),tMr=i(bi),df=n(bi,"P",{});var aQ=s(df);aMr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zbe=n(aQ,"CODE",{});var Xbt=s(zbe);nMr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),sMr=r(aQ,"class method or the "),Wbe=n(aQ,"CODE",{});var Vbt=s(Wbe);lMr=r(Vbt,"from_config()"),Vbt.forEach(t),iMr=r(aQ,`class
method.`),aQ.forEach(t),dMr=i(bi),NA=n(bi,"P",{});var bPe=s(NA);cMr=r(bPe,"This class cannot be instantiated directly using "),Qbe=n(bPe,"CODE",{});var zbt=s(Qbe);fMr=r(zbt,"__init__()"),zbt.forEach(t),mMr=r(bPe," (throws an error)."),bPe.forEach(t),gMr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(qA.$$.fragment,vi),hMr=i(vi),Hbe=n(vi,"P",{});var Wbt=s(Hbe);pMr=r(Wbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wbt.forEach(t),_Mr=i(vi),cf=n(vi,"P",{});var nQ=s(cf);uMr=r(nQ,`Note:
Loading a model from its configuration file does `),Ube=n(nQ,"STRONG",{});var Qbt=s(Ube);bMr=r(Qbt,"not"),Qbt.forEach(t),vMr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jbe=n(nQ,"CODE",{});var Hbt=s(Jbe);TMr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),FMr=r(nQ,"to load the model weights."),nQ.forEach(t),CMr=i(vi),Ybe=n(vi,"P",{});var Ubt=s(Ybe);MMr=r(Ubt,"Examples:"),Ubt.forEach(t),EMr=i(vi),m(OA.$$.fragment,vi),vi.forEach(t),yMr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(GA.$$.fragment,ka),wMr=i(ka),Kbe=n(ka,"P",{});var Jbt=s(Kbe);AMr=r(Jbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jbt.forEach(t),LMr=i(ka),Rn=n(ka,"P",{});var G4=s(Rn);BMr=r(G4,"The model class to instantiate is selected based on the "),Zbe=n(G4,"CODE",{});var Ybt=s(Zbe);xMr=r(Ybt,"model_type"),Ybt.forEach(t),kMr=r(G4,` property of the config object (either
passed as an argument or loaded from `),e2e=n(G4,"CODE",{});var Kbt=s(e2e);RMr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),SMr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(G4,"CODE",{});var Zbt=s(o2e);PMr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),$Mr=r(G4,":"),G4.forEach(t),IMr=i(ka),be=n(ka,"UL",{});var we=s(be);NC=n(we,"LI",{});var uBe=s(NC);r2e=n(uBe,"STRONG",{});var e2t=s(r2e);jMr=r(e2t,"albert"),e2t.forEach(t),DMr=r(uBe," \u2014 "),yV=n(uBe,"A",{href:!0});var o2t=s(yV);NMr=r(o2t,"FlaxAlbertForMaskedLM"),o2t.forEach(t),qMr=r(uBe," (ALBERT model)"),uBe.forEach(t),OMr=i(we),qC=n(we,"LI",{});var bBe=s(qC);t2e=n(bBe,"STRONG",{});var r2t=s(t2e);GMr=r(r2t,"bart"),r2t.forEach(t),XMr=r(bBe," \u2014 "),wV=n(bBe,"A",{href:!0});var t2t=s(wV);VMr=r(t2t,"FlaxBartForConditionalGeneration"),t2t.forEach(t),zMr=r(bBe," (BART model)"),bBe.forEach(t),WMr=i(we),OC=n(we,"LI",{});var vBe=s(OC);a2e=n(vBe,"STRONG",{});var a2t=s(a2e);QMr=r(a2t,"bert"),a2t.forEach(t),HMr=r(vBe," \u2014 "),AV=n(vBe,"A",{href:!0});var n2t=s(AV);UMr=r(n2t,"FlaxBertForMaskedLM"),n2t.forEach(t),JMr=r(vBe," (BERT model)"),vBe.forEach(t),YMr=i(we),GC=n(we,"LI",{});var TBe=s(GC);n2e=n(TBe,"STRONG",{});var s2t=s(n2e);KMr=r(s2t,"big_bird"),s2t.forEach(t),ZMr=r(TBe," \u2014 "),LV=n(TBe,"A",{href:!0});var l2t=s(LV);e4r=r(l2t,"FlaxBigBirdForMaskedLM"),l2t.forEach(t),o4r=r(TBe," (BigBird model)"),TBe.forEach(t),r4r=i(we),XC=n(we,"LI",{});var FBe=s(XC);s2e=n(FBe,"STRONG",{});var i2t=s(s2e);t4r=r(i2t,"distilbert"),i2t.forEach(t),a4r=r(FBe," \u2014 "),BV=n(FBe,"A",{href:!0});var d2t=s(BV);n4r=r(d2t,"FlaxDistilBertForMaskedLM"),d2t.forEach(t),s4r=r(FBe," (DistilBERT model)"),FBe.forEach(t),l4r=i(we),VC=n(we,"LI",{});var CBe=s(VC);l2e=n(CBe,"STRONG",{});var c2t=s(l2e);i4r=r(c2t,"electra"),c2t.forEach(t),d4r=r(CBe," \u2014 "),xV=n(CBe,"A",{href:!0});var f2t=s(xV);c4r=r(f2t,"FlaxElectraForMaskedLM"),f2t.forEach(t),f4r=r(CBe," (ELECTRA model)"),CBe.forEach(t),m4r=i(we),zC=n(we,"LI",{});var MBe=s(zC);i2e=n(MBe,"STRONG",{});var m2t=s(i2e);g4r=r(m2t,"mbart"),m2t.forEach(t),h4r=r(MBe," \u2014 "),kV=n(MBe,"A",{href:!0});var g2t=s(kV);p4r=r(g2t,"FlaxMBartForConditionalGeneration"),g2t.forEach(t),_4r=r(MBe," (mBART model)"),MBe.forEach(t),u4r=i(we),WC=n(we,"LI",{});var EBe=s(WC);d2e=n(EBe,"STRONG",{});var h2t=s(d2e);b4r=r(h2t,"roberta"),h2t.forEach(t),v4r=r(EBe," \u2014 "),RV=n(EBe,"A",{href:!0});var p2t=s(RV);T4r=r(p2t,"FlaxRobertaForMaskedLM"),p2t.forEach(t),F4r=r(EBe," (RoBERTa model)"),EBe.forEach(t),C4r=i(we),QC=n(we,"LI",{});var yBe=s(QC);c2e=n(yBe,"STRONG",{});var _2t=s(c2e);M4r=r(_2t,"roformer"),_2t.forEach(t),E4r=r(yBe," \u2014 "),SV=n(yBe,"A",{href:!0});var u2t=s(SV);y4r=r(u2t,"FlaxRoFormerForMaskedLM"),u2t.forEach(t),w4r=r(yBe," (RoFormer model)"),yBe.forEach(t),A4r=i(we),HC=n(we,"LI",{});var wBe=s(HC);f2e=n(wBe,"STRONG",{});var b2t=s(f2e);L4r=r(b2t,"xlm-roberta"),b2t.forEach(t),B4r=r(wBe," \u2014 "),PV=n(wBe,"A",{href:!0});var v2t=s(PV);x4r=r(v2t,"FlaxXLMRobertaForMaskedLM"),v2t.forEach(t),k4r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),we.forEach(t),R4r=i(ka),m2e=n(ka,"P",{});var T2t=s(m2e);S4r=r(T2t,"Examples:"),T2t.forEach(t),P4r=i(ka),m(XA.$$.fragment,ka),ka.forEach(t),bi.forEach(t),lRe=i(c),ff=n(c,"H2",{class:!0});var vPe=s(ff);UC=n(vPe,"A",{id:!0,class:!0,href:!0});var F2t=s(UC);g2e=n(F2t,"SPAN",{});var C2t=s(g2e);m(VA.$$.fragment,C2t),C2t.forEach(t),F2t.forEach(t),$4r=i(vPe),h2e=n(vPe,"SPAN",{});var M2t=s(h2e);I4r=r(M2t,"FlaxAutoModelForSeq2SeqLM"),M2t.forEach(t),vPe.forEach(t),iRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(zA.$$.fragment,Ti),j4r=i(Ti),mf=n(Ti,"P",{});var sQ=s(mf);D4r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p2e=n(sQ,"CODE",{});var E2t=s(p2e);N4r=r(E2t,"from_pretrained()"),E2t.forEach(t),q4r=r(sQ,"class method or the "),_2e=n(sQ,"CODE",{});var y2t=s(_2e);O4r=r(y2t,"from_config()"),y2t.forEach(t),G4r=r(sQ,`class
method.`),sQ.forEach(t),X4r=i(Ti),WA=n(Ti,"P",{});var TPe=s(WA);V4r=r(TPe,"This class cannot be instantiated directly using "),u2e=n(TPe,"CODE",{});var w2t=s(u2e);z4r=r(w2t,"__init__()"),w2t.forEach(t),W4r=r(TPe," (throws an error)."),TPe.forEach(t),Q4r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(QA.$$.fragment,Fi),H4r=i(Fi),b2e=n(Fi,"P",{});var A2t=s(b2e);U4r=r(A2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A2t.forEach(t),J4r=i(Fi),gf=n(Fi,"P",{});var lQ=s(gf);Y4r=r(lQ,`Note:
Loading a model from its configuration file does `),v2e=n(lQ,"STRONG",{});var L2t=s(v2e);K4r=r(L2t,"not"),L2t.forEach(t),Z4r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=n(lQ,"CODE",{});var B2t=s(T2e);eEr=r(B2t,"from_pretrained()"),B2t.forEach(t),oEr=r(lQ,"to load the model weights."),lQ.forEach(t),rEr=i(Fi),F2e=n(Fi,"P",{});var x2t=s(F2e);tEr=r(x2t,"Examples:"),x2t.forEach(t),aEr=i(Fi),m(HA.$$.fragment,Fi),Fi.forEach(t),nEr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(UA.$$.fragment,Ra),sEr=i(Ra),C2e=n(Ra,"P",{});var k2t=s(C2e);lEr=r(k2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k2t.forEach(t),iEr=i(Ra),Sn=n(Ra,"P",{});var X4=s(Sn);dEr=r(X4,"The model class to instantiate is selected based on the "),M2e=n(X4,"CODE",{});var R2t=s(M2e);cEr=r(R2t,"model_type"),R2t.forEach(t),fEr=r(X4,` property of the config object (either
passed as an argument or loaded from `),E2e=n(X4,"CODE",{});var S2t=s(E2e);mEr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),gEr=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(X4,"CODE",{});var P2t=s(y2e);hEr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),pEr=r(X4,":"),X4.forEach(t),_Er=i(Ra),Me=n(Ra,"UL",{});var lo=s(Me);JC=n(lo,"LI",{});var ABe=s(JC);w2e=n(ABe,"STRONG",{});var $2t=s(w2e);uEr=r($2t,"bart"),$2t.forEach(t),bEr=r(ABe," \u2014 "),$V=n(ABe,"A",{href:!0});var I2t=s($V);vEr=r(I2t,"FlaxBartForConditionalGeneration"),I2t.forEach(t),TEr=r(ABe," (BART model)"),ABe.forEach(t),FEr=i(lo),YC=n(lo,"LI",{});var LBe=s(YC);A2e=n(LBe,"STRONG",{});var j2t=s(A2e);CEr=r(j2t,"blenderbot"),j2t.forEach(t),MEr=r(LBe," \u2014 "),IV=n(LBe,"A",{href:!0});var D2t=s(IV);EEr=r(D2t,"FlaxBlenderbotForConditionalGeneration"),D2t.forEach(t),yEr=r(LBe," (Blenderbot model)"),LBe.forEach(t),wEr=i(lo),KC=n(lo,"LI",{});var BBe=s(KC);L2e=n(BBe,"STRONG",{});var N2t=s(L2e);AEr=r(N2t,"blenderbot-small"),N2t.forEach(t),LEr=r(BBe," \u2014 "),jV=n(BBe,"A",{href:!0});var q2t=s(jV);BEr=r(q2t,"FlaxBlenderbotSmallForConditionalGeneration"),q2t.forEach(t),xEr=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),kEr=i(lo),ZC=n(lo,"LI",{});var xBe=s(ZC);B2e=n(xBe,"STRONG",{});var O2t=s(B2e);REr=r(O2t,"encoder-decoder"),O2t.forEach(t),SEr=r(xBe," \u2014 "),DV=n(xBe,"A",{href:!0});var G2t=s(DV);PEr=r(G2t,"FlaxEncoderDecoderModel"),G2t.forEach(t),$Er=r(xBe," (Encoder decoder model)"),xBe.forEach(t),IEr=i(lo),eM=n(lo,"LI",{});var kBe=s(eM);x2e=n(kBe,"STRONG",{});var X2t=s(x2e);jEr=r(X2t,"marian"),X2t.forEach(t),DEr=r(kBe," \u2014 "),NV=n(kBe,"A",{href:!0});var V2t=s(NV);NEr=r(V2t,"FlaxMarianMTModel"),V2t.forEach(t),qEr=r(kBe," (Marian model)"),kBe.forEach(t),OEr=i(lo),oM=n(lo,"LI",{});var RBe=s(oM);k2e=n(RBe,"STRONG",{});var z2t=s(k2e);GEr=r(z2t,"mbart"),z2t.forEach(t),XEr=r(RBe," \u2014 "),qV=n(RBe,"A",{href:!0});var W2t=s(qV);VEr=r(W2t,"FlaxMBartForConditionalGeneration"),W2t.forEach(t),zEr=r(RBe," (mBART model)"),RBe.forEach(t),WEr=i(lo),rM=n(lo,"LI",{});var SBe=s(rM);R2e=n(SBe,"STRONG",{});var Q2t=s(R2e);QEr=r(Q2t,"mt5"),Q2t.forEach(t),HEr=r(SBe," \u2014 "),OV=n(SBe,"A",{href:!0});var H2t=s(OV);UEr=r(H2t,"FlaxMT5ForConditionalGeneration"),H2t.forEach(t),JEr=r(SBe," (mT5 model)"),SBe.forEach(t),YEr=i(lo),tM=n(lo,"LI",{});var PBe=s(tM);S2e=n(PBe,"STRONG",{});var U2t=s(S2e);KEr=r(U2t,"pegasus"),U2t.forEach(t),ZEr=r(PBe," \u2014 "),GV=n(PBe,"A",{href:!0});var J2t=s(GV);e3r=r(J2t,"FlaxPegasusForConditionalGeneration"),J2t.forEach(t),o3r=r(PBe," (Pegasus model)"),PBe.forEach(t),r3r=i(lo),aM=n(lo,"LI",{});var $Be=s(aM);P2e=n($Be,"STRONG",{});var Y2t=s(P2e);t3r=r(Y2t,"t5"),Y2t.forEach(t),a3r=r($Be," \u2014 "),XV=n($Be,"A",{href:!0});var K2t=s(XV);n3r=r(K2t,"FlaxT5ForConditionalGeneration"),K2t.forEach(t),s3r=r($Be," (T5 model)"),$Be.forEach(t),lo.forEach(t),l3r=i(Ra),$2e=n(Ra,"P",{});var Z2t=s($2e);i3r=r(Z2t,"Examples:"),Z2t.forEach(t),d3r=i(Ra),m(JA.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),dRe=i(c),hf=n(c,"H2",{class:!0});var FPe=s(hf);nM=n(FPe,"A",{id:!0,class:!0,href:!0});var evt=s(nM);I2e=n(evt,"SPAN",{});var ovt=s(I2e);m(YA.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),c3r=i(FPe),j2e=n(FPe,"SPAN",{});var rvt=s(j2e);f3r=r(rvt,"FlaxAutoModelForSequenceClassification"),rvt.forEach(t),FPe.forEach(t),cRe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(KA.$$.fragment,Ci),m3r=i(Ci),pf=n(Ci,"P",{});var iQ=s(pf);g3r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),D2e=n(iQ,"CODE",{});var tvt=s(D2e);h3r=r(tvt,"from_pretrained()"),tvt.forEach(t),p3r=r(iQ,"class method or the "),N2e=n(iQ,"CODE",{});var avt=s(N2e);_3r=r(avt,"from_config()"),avt.forEach(t),u3r=r(iQ,`class
method.`),iQ.forEach(t),b3r=i(Ci),ZA=n(Ci,"P",{});var CPe=s(ZA);v3r=r(CPe,"This class cannot be instantiated directly using "),q2e=n(CPe,"CODE",{});var nvt=s(q2e);T3r=r(nvt,"__init__()"),nvt.forEach(t),F3r=r(CPe," (throws an error)."),CPe.forEach(t),C3r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(eL.$$.fragment,Mi),M3r=i(Mi),O2e=n(Mi,"P",{});var svt=s(O2e);E3r=r(svt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),svt.forEach(t),y3r=i(Mi),_f=n(Mi,"P",{});var dQ=s(_f);w3r=r(dQ,`Note:
Loading a model from its configuration file does `),G2e=n(dQ,"STRONG",{});var lvt=s(G2e);A3r=r(lvt,"not"),lvt.forEach(t),L3r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=n(dQ,"CODE",{});var ivt=s(X2e);B3r=r(ivt,"from_pretrained()"),ivt.forEach(t),x3r=r(dQ,"to load the model weights."),dQ.forEach(t),k3r=i(Mi),V2e=n(Mi,"P",{});var dvt=s(V2e);R3r=r(dvt,"Examples:"),dvt.forEach(t),S3r=i(Mi),m(oL.$$.fragment,Mi),Mi.forEach(t),P3r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(rL.$$.fragment,Sa),$3r=i(Sa),z2e=n(Sa,"P",{});var cvt=s(z2e);I3r=r(cvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cvt.forEach(t),j3r=i(Sa),Pn=n(Sa,"P",{});var V4=s(Pn);D3r=r(V4,"The model class to instantiate is selected based on the "),W2e=n(V4,"CODE",{});var fvt=s(W2e);N3r=r(fvt,"model_type"),fvt.forEach(t),q3r=r(V4,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(V4,"CODE",{});var mvt=s(Q2e);O3r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),G3r=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(V4,"CODE",{});var gvt=s(H2e);X3r=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),V3r=r(V4,":"),V4.forEach(t),z3r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);sM=n(Ae,"LI",{});var IBe=s(sM);U2e=n(IBe,"STRONG",{});var hvt=s(U2e);W3r=r(hvt,"albert"),hvt.forEach(t),Q3r=r(IBe," \u2014 "),VV=n(IBe,"A",{href:!0});var pvt=s(VV);H3r=r(pvt,"FlaxAlbertForSequenceClassification"),pvt.forEach(t),U3r=r(IBe," (ALBERT model)"),IBe.forEach(t),J3r=i(Ae),lM=n(Ae,"LI",{});var jBe=s(lM);J2e=n(jBe,"STRONG",{});var _vt=s(J2e);Y3r=r(_vt,"bart"),_vt.forEach(t),K3r=r(jBe," \u2014 "),zV=n(jBe,"A",{href:!0});var uvt=s(zV);Z3r=r(uvt,"FlaxBartForSequenceClassification"),uvt.forEach(t),e5r=r(jBe," (BART model)"),jBe.forEach(t),o5r=i(Ae),iM=n(Ae,"LI",{});var DBe=s(iM);Y2e=n(DBe,"STRONG",{});var bvt=s(Y2e);r5r=r(bvt,"bert"),bvt.forEach(t),t5r=r(DBe," \u2014 "),WV=n(DBe,"A",{href:!0});var vvt=s(WV);a5r=r(vvt,"FlaxBertForSequenceClassification"),vvt.forEach(t),n5r=r(DBe," (BERT model)"),DBe.forEach(t),s5r=i(Ae),dM=n(Ae,"LI",{});var NBe=s(dM);K2e=n(NBe,"STRONG",{});var Tvt=s(K2e);l5r=r(Tvt,"big_bird"),Tvt.forEach(t),i5r=r(NBe," \u2014 "),QV=n(NBe,"A",{href:!0});var Fvt=s(QV);d5r=r(Fvt,"FlaxBigBirdForSequenceClassification"),Fvt.forEach(t),c5r=r(NBe," (BigBird model)"),NBe.forEach(t),f5r=i(Ae),cM=n(Ae,"LI",{});var qBe=s(cM);Z2e=n(qBe,"STRONG",{});var Cvt=s(Z2e);m5r=r(Cvt,"distilbert"),Cvt.forEach(t),g5r=r(qBe," \u2014 "),HV=n(qBe,"A",{href:!0});var Mvt=s(HV);h5r=r(Mvt,"FlaxDistilBertForSequenceClassification"),Mvt.forEach(t),p5r=r(qBe," (DistilBERT model)"),qBe.forEach(t),_5r=i(Ae),fM=n(Ae,"LI",{});var OBe=s(fM);eve=n(OBe,"STRONG",{});var Evt=s(eve);u5r=r(Evt,"electra"),Evt.forEach(t),b5r=r(OBe," \u2014 "),UV=n(OBe,"A",{href:!0});var yvt=s(UV);v5r=r(yvt,"FlaxElectraForSequenceClassification"),yvt.forEach(t),T5r=r(OBe," (ELECTRA model)"),OBe.forEach(t),F5r=i(Ae),mM=n(Ae,"LI",{});var GBe=s(mM);ove=n(GBe,"STRONG",{});var wvt=s(ove);C5r=r(wvt,"mbart"),wvt.forEach(t),M5r=r(GBe," \u2014 "),JV=n(GBe,"A",{href:!0});var Avt=s(JV);E5r=r(Avt,"FlaxMBartForSequenceClassification"),Avt.forEach(t),y5r=r(GBe," (mBART model)"),GBe.forEach(t),w5r=i(Ae),gM=n(Ae,"LI",{});var XBe=s(gM);rve=n(XBe,"STRONG",{});var Lvt=s(rve);A5r=r(Lvt,"roberta"),Lvt.forEach(t),L5r=r(XBe," \u2014 "),YV=n(XBe,"A",{href:!0});var Bvt=s(YV);B5r=r(Bvt,"FlaxRobertaForSequenceClassification"),Bvt.forEach(t),x5r=r(XBe," (RoBERTa model)"),XBe.forEach(t),k5r=i(Ae),hM=n(Ae,"LI",{});var VBe=s(hM);tve=n(VBe,"STRONG",{});var xvt=s(tve);R5r=r(xvt,"roformer"),xvt.forEach(t),S5r=r(VBe," \u2014 "),KV=n(VBe,"A",{href:!0});var kvt=s(KV);P5r=r(kvt,"FlaxRoFormerForSequenceClassification"),kvt.forEach(t),$5r=r(VBe," (RoFormer model)"),VBe.forEach(t),I5r=i(Ae),pM=n(Ae,"LI",{});var zBe=s(pM);ave=n(zBe,"STRONG",{});var Rvt=s(ave);j5r=r(Rvt,"xlm-roberta"),Rvt.forEach(t),D5r=r(zBe," \u2014 "),ZV=n(zBe,"A",{href:!0});var Svt=s(ZV);N5r=r(Svt,"FlaxXLMRobertaForSequenceClassification"),Svt.forEach(t),q5r=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),Ae.forEach(t),O5r=i(Sa),nve=n(Sa,"P",{});var Pvt=s(nve);G5r=r(Pvt,"Examples:"),Pvt.forEach(t),X5r=i(Sa),m(tL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),fRe=i(c),uf=n(c,"H2",{class:!0});var MPe=s(uf);_M=n(MPe,"A",{id:!0,class:!0,href:!0});var $vt=s(_M);sve=n($vt,"SPAN",{});var Ivt=s(sve);m(aL.$$.fragment,Ivt),Ivt.forEach(t),$vt.forEach(t),V5r=i(MPe),lve=n(MPe,"SPAN",{});var jvt=s(lve);z5r=r(jvt,"FlaxAutoModelForQuestionAnswering"),jvt.forEach(t),MPe.forEach(t),mRe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(nL.$$.fragment,Ei),W5r=i(Ei),bf=n(Ei,"P",{});var cQ=s(bf);Q5r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ive=n(cQ,"CODE",{});var Dvt=s(ive);H5r=r(Dvt,"from_pretrained()"),Dvt.forEach(t),U5r=r(cQ,"class method or the "),dve=n(cQ,"CODE",{});var Nvt=s(dve);J5r=r(Nvt,"from_config()"),Nvt.forEach(t),Y5r=r(cQ,`class
method.`),cQ.forEach(t),K5r=i(Ei),sL=n(Ei,"P",{});var EPe=s(sL);Z5r=r(EPe,"This class cannot be instantiated directly using "),cve=n(EPe,"CODE",{});var qvt=s(cve);eyr=r(qvt,"__init__()"),qvt.forEach(t),oyr=r(EPe," (throws an error)."),EPe.forEach(t),ryr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(lL.$$.fragment,yi),tyr=i(yi),fve=n(yi,"P",{});var Ovt=s(fve);ayr=r(Ovt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ovt.forEach(t),nyr=i(yi),vf=n(yi,"P",{});var fQ=s(vf);syr=r(fQ,`Note:
Loading a model from its configuration file does `),mve=n(fQ,"STRONG",{});var Gvt=s(mve);lyr=r(Gvt,"not"),Gvt.forEach(t),iyr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=n(fQ,"CODE",{});var Xvt=s(gve);dyr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),cyr=r(fQ,"to load the model weights."),fQ.forEach(t),fyr=i(yi),hve=n(yi,"P",{});var Vvt=s(hve);myr=r(Vvt,"Examples:"),Vvt.forEach(t),gyr=i(yi),m(iL.$$.fragment,yi),yi.forEach(t),hyr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(dL.$$.fragment,Pa),pyr=i(Pa),pve=n(Pa,"P",{});var zvt=s(pve);_yr=r(zvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zvt.forEach(t),uyr=i(Pa),$n=n(Pa,"P",{});var z4=s($n);byr=r(z4,"The model class to instantiate is selected based on the "),_ve=n(z4,"CODE",{});var Wvt=s(_ve);vyr=r(Wvt,"model_type"),Wvt.forEach(t),Tyr=r(z4,` property of the config object (either
passed as an argument or loaded from `),uve=n(z4,"CODE",{});var Qvt=s(uve);Fyr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),Cyr=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(z4,"CODE",{});var Hvt=s(bve);Myr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Eyr=r(z4,":"),z4.forEach(t),yyr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);uM=n(Le,"LI",{});var WBe=s(uM);vve=n(WBe,"STRONG",{});var Uvt=s(vve);wyr=r(Uvt,"albert"),Uvt.forEach(t),Ayr=r(WBe," \u2014 "),ez=n(WBe,"A",{href:!0});var Jvt=s(ez);Lyr=r(Jvt,"FlaxAlbertForQuestionAnswering"),Jvt.forEach(t),Byr=r(WBe," (ALBERT model)"),WBe.forEach(t),xyr=i(Le),bM=n(Le,"LI",{});var QBe=s(bM);Tve=n(QBe,"STRONG",{});var Yvt=s(Tve);kyr=r(Yvt,"bart"),Yvt.forEach(t),Ryr=r(QBe," \u2014 "),oz=n(QBe,"A",{href:!0});var Kvt=s(oz);Syr=r(Kvt,"FlaxBartForQuestionAnswering"),Kvt.forEach(t),Pyr=r(QBe," (BART model)"),QBe.forEach(t),$yr=i(Le),vM=n(Le,"LI",{});var HBe=s(vM);Fve=n(HBe,"STRONG",{});var Zvt=s(Fve);Iyr=r(Zvt,"bert"),Zvt.forEach(t),jyr=r(HBe," \u2014 "),rz=n(HBe,"A",{href:!0});var e6t=s(rz);Dyr=r(e6t,"FlaxBertForQuestionAnswering"),e6t.forEach(t),Nyr=r(HBe," (BERT model)"),HBe.forEach(t),qyr=i(Le),TM=n(Le,"LI",{});var UBe=s(TM);Cve=n(UBe,"STRONG",{});var o6t=s(Cve);Oyr=r(o6t,"big_bird"),o6t.forEach(t),Gyr=r(UBe," \u2014 "),tz=n(UBe,"A",{href:!0});var r6t=s(tz);Xyr=r(r6t,"FlaxBigBirdForQuestionAnswering"),r6t.forEach(t),Vyr=r(UBe," (BigBird model)"),UBe.forEach(t),zyr=i(Le),FM=n(Le,"LI",{});var JBe=s(FM);Mve=n(JBe,"STRONG",{});var t6t=s(Mve);Wyr=r(t6t,"distilbert"),t6t.forEach(t),Qyr=r(JBe," \u2014 "),az=n(JBe,"A",{href:!0});var a6t=s(az);Hyr=r(a6t,"FlaxDistilBertForQuestionAnswering"),a6t.forEach(t),Uyr=r(JBe," (DistilBERT model)"),JBe.forEach(t),Jyr=i(Le),CM=n(Le,"LI",{});var YBe=s(CM);Eve=n(YBe,"STRONG",{});var n6t=s(Eve);Yyr=r(n6t,"electra"),n6t.forEach(t),Kyr=r(YBe," \u2014 "),nz=n(YBe,"A",{href:!0});var s6t=s(nz);Zyr=r(s6t,"FlaxElectraForQuestionAnswering"),s6t.forEach(t),ewr=r(YBe," (ELECTRA model)"),YBe.forEach(t),owr=i(Le),MM=n(Le,"LI",{});var KBe=s(MM);yve=n(KBe,"STRONG",{});var l6t=s(yve);rwr=r(l6t,"mbart"),l6t.forEach(t),twr=r(KBe," \u2014 "),sz=n(KBe,"A",{href:!0});var i6t=s(sz);awr=r(i6t,"FlaxMBartForQuestionAnswering"),i6t.forEach(t),nwr=r(KBe," (mBART model)"),KBe.forEach(t),swr=i(Le),EM=n(Le,"LI",{});var ZBe=s(EM);wve=n(ZBe,"STRONG",{});var d6t=s(wve);lwr=r(d6t,"roberta"),d6t.forEach(t),iwr=r(ZBe," \u2014 "),lz=n(ZBe,"A",{href:!0});var c6t=s(lz);dwr=r(c6t,"FlaxRobertaForQuestionAnswering"),c6t.forEach(t),cwr=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),fwr=i(Le),yM=n(Le,"LI",{});var exe=s(yM);Ave=n(exe,"STRONG",{});var f6t=s(Ave);mwr=r(f6t,"roformer"),f6t.forEach(t),gwr=r(exe," \u2014 "),iz=n(exe,"A",{href:!0});var m6t=s(iz);hwr=r(m6t,"FlaxRoFormerForQuestionAnswering"),m6t.forEach(t),pwr=r(exe," (RoFormer model)"),exe.forEach(t),_wr=i(Le),wM=n(Le,"LI",{});var oxe=s(wM);Lve=n(oxe,"STRONG",{});var g6t=s(Lve);uwr=r(g6t,"xlm-roberta"),g6t.forEach(t),bwr=r(oxe," \u2014 "),dz=n(oxe,"A",{href:!0});var h6t=s(dz);vwr=r(h6t,"FlaxXLMRobertaForQuestionAnswering"),h6t.forEach(t),Twr=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Le.forEach(t),Fwr=i(Pa),Bve=n(Pa,"P",{});var p6t=s(Bve);Cwr=r(p6t,"Examples:"),p6t.forEach(t),Mwr=i(Pa),m(cL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),gRe=i(c),Tf=n(c,"H2",{class:!0});var yPe=s(Tf);AM=n(yPe,"A",{id:!0,class:!0,href:!0});var _6t=s(AM);xve=n(_6t,"SPAN",{});var u6t=s(xve);m(fL.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),Ewr=i(yPe),kve=n(yPe,"SPAN",{});var b6t=s(kve);ywr=r(b6t,"FlaxAutoModelForTokenClassification"),b6t.forEach(t),yPe.forEach(t),hRe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(mL.$$.fragment,wi),wwr=i(wi),Ff=n(wi,"P",{});var mQ=s(Ff);Awr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rve=n(mQ,"CODE",{});var v6t=s(Rve);Lwr=r(v6t,"from_pretrained()"),v6t.forEach(t),Bwr=r(mQ,"class method or the "),Sve=n(mQ,"CODE",{});var T6t=s(Sve);xwr=r(T6t,"from_config()"),T6t.forEach(t),kwr=r(mQ,`class
method.`),mQ.forEach(t),Rwr=i(wi),gL=n(wi,"P",{});var wPe=s(gL);Swr=r(wPe,"This class cannot be instantiated directly using "),Pve=n(wPe,"CODE",{});var F6t=s(Pve);Pwr=r(F6t,"__init__()"),F6t.forEach(t),$wr=r(wPe," (throws an error)."),wPe.forEach(t),Iwr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(hL.$$.fragment,Ai),jwr=i(Ai),$ve=n(Ai,"P",{});var C6t=s($ve);Dwr=r(C6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),C6t.forEach(t),Nwr=i(Ai),Cf=n(Ai,"P",{});var gQ=s(Cf);qwr=r(gQ,`Note:
Loading a model from its configuration file does `),Ive=n(gQ,"STRONG",{});var M6t=s(Ive);Owr=r(M6t,"not"),M6t.forEach(t),Gwr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=n(gQ,"CODE",{});var E6t=s(jve);Xwr=r(E6t,"from_pretrained()"),E6t.forEach(t),Vwr=r(gQ,"to load the model weights."),gQ.forEach(t),zwr=i(Ai),Dve=n(Ai,"P",{});var y6t=s(Dve);Wwr=r(y6t,"Examples:"),y6t.forEach(t),Qwr=i(Ai),m(pL.$$.fragment,Ai),Ai.forEach(t),Hwr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(_L.$$.fragment,$a),Uwr=i($a),Nve=n($a,"P",{});var w6t=s(Nve);Jwr=r(w6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),w6t.forEach(t),Ywr=i($a),In=n($a,"P",{});var W4=s(In);Kwr=r(W4,"The model class to instantiate is selected based on the "),qve=n(W4,"CODE",{});var A6t=s(qve);Zwr=r(A6t,"model_type"),A6t.forEach(t),eAr=r(W4,` property of the config object (either
passed as an argument or loaded from `),Ove=n(W4,"CODE",{});var L6t=s(Ove);oAr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),rAr=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(W4,"CODE",{});var B6t=s(Gve);tAr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),aAr=r(W4,":"),W4.forEach(t),nAr=i($a),Se=n($a,"UL",{});var Go=s(Se);LM=n(Go,"LI",{});var rxe=s(LM);Xve=n(rxe,"STRONG",{});var x6t=s(Xve);sAr=r(x6t,"albert"),x6t.forEach(t),lAr=r(rxe," \u2014 "),cz=n(rxe,"A",{href:!0});var k6t=s(cz);iAr=r(k6t,"FlaxAlbertForTokenClassification"),k6t.forEach(t),dAr=r(rxe," (ALBERT model)"),rxe.forEach(t),cAr=i(Go),BM=n(Go,"LI",{});var txe=s(BM);Vve=n(txe,"STRONG",{});var R6t=s(Vve);fAr=r(R6t,"bert"),R6t.forEach(t),mAr=r(txe," \u2014 "),fz=n(txe,"A",{href:!0});var S6t=s(fz);gAr=r(S6t,"FlaxBertForTokenClassification"),S6t.forEach(t),hAr=r(txe," (BERT model)"),txe.forEach(t),pAr=i(Go),xM=n(Go,"LI",{});var axe=s(xM);zve=n(axe,"STRONG",{});var P6t=s(zve);_Ar=r(P6t,"big_bird"),P6t.forEach(t),uAr=r(axe," \u2014 "),mz=n(axe,"A",{href:!0});var $6t=s(mz);bAr=r($6t,"FlaxBigBirdForTokenClassification"),$6t.forEach(t),vAr=r(axe," (BigBird model)"),axe.forEach(t),TAr=i(Go),kM=n(Go,"LI",{});var nxe=s(kM);Wve=n(nxe,"STRONG",{});var I6t=s(Wve);FAr=r(I6t,"distilbert"),I6t.forEach(t),CAr=r(nxe," \u2014 "),gz=n(nxe,"A",{href:!0});var j6t=s(gz);MAr=r(j6t,"FlaxDistilBertForTokenClassification"),j6t.forEach(t),EAr=r(nxe," (DistilBERT model)"),nxe.forEach(t),yAr=i(Go),RM=n(Go,"LI",{});var sxe=s(RM);Qve=n(sxe,"STRONG",{});var D6t=s(Qve);wAr=r(D6t,"electra"),D6t.forEach(t),AAr=r(sxe," \u2014 "),hz=n(sxe,"A",{href:!0});var N6t=s(hz);LAr=r(N6t,"FlaxElectraForTokenClassification"),N6t.forEach(t),BAr=r(sxe," (ELECTRA model)"),sxe.forEach(t),xAr=i(Go),SM=n(Go,"LI",{});var lxe=s(SM);Hve=n(lxe,"STRONG",{});var q6t=s(Hve);kAr=r(q6t,"roberta"),q6t.forEach(t),RAr=r(lxe," \u2014 "),pz=n(lxe,"A",{href:!0});var O6t=s(pz);SAr=r(O6t,"FlaxRobertaForTokenClassification"),O6t.forEach(t),PAr=r(lxe," (RoBERTa model)"),lxe.forEach(t),$Ar=i(Go),PM=n(Go,"LI",{});var ixe=s(PM);Uve=n(ixe,"STRONG",{});var G6t=s(Uve);IAr=r(G6t,"roformer"),G6t.forEach(t),jAr=r(ixe," \u2014 "),_z=n(ixe,"A",{href:!0});var X6t=s(_z);DAr=r(X6t,"FlaxRoFormerForTokenClassification"),X6t.forEach(t),NAr=r(ixe," (RoFormer model)"),ixe.forEach(t),qAr=i(Go),$M=n(Go,"LI",{});var dxe=s($M);Jve=n(dxe,"STRONG",{});var V6t=s(Jve);OAr=r(V6t,"xlm-roberta"),V6t.forEach(t),GAr=r(dxe," \u2014 "),uz=n(dxe,"A",{href:!0});var z6t=s(uz);XAr=r(z6t,"FlaxXLMRobertaForTokenClassification"),z6t.forEach(t),VAr=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),Go.forEach(t),zAr=i($a),Yve=n($a,"P",{});var W6t=s(Yve);WAr=r(W6t,"Examples:"),W6t.forEach(t),QAr=i($a),m(uL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),pRe=i(c),Mf=n(c,"H2",{class:!0});var APe=s(Mf);IM=n(APe,"A",{id:!0,class:!0,href:!0});var Q6t=s(IM);Kve=n(Q6t,"SPAN",{});var H6t=s(Kve);m(bL.$$.fragment,H6t),H6t.forEach(t),Q6t.forEach(t),HAr=i(APe),Zve=n(APe,"SPAN",{});var U6t=s(Zve);UAr=r(U6t,"FlaxAutoModelForMultipleChoice"),U6t.forEach(t),APe.forEach(t),_Re=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(vL.$$.fragment,Li),JAr=i(Li),Ef=n(Li,"P",{});var hQ=s(Ef);YAr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),e6e=n(hQ,"CODE",{});var J6t=s(e6e);KAr=r(J6t,"from_pretrained()"),J6t.forEach(t),ZAr=r(hQ,"class method or the "),o6e=n(hQ,"CODE",{});var Y6t=s(o6e);eLr=r(Y6t,"from_config()"),Y6t.forEach(t),oLr=r(hQ,`class
method.`),hQ.forEach(t),rLr=i(Li),TL=n(Li,"P",{});var LPe=s(TL);tLr=r(LPe,"This class cannot be instantiated directly using "),r6e=n(LPe,"CODE",{});var K6t=s(r6e);aLr=r(K6t,"__init__()"),K6t.forEach(t),nLr=r(LPe," (throws an error)."),LPe.forEach(t),sLr=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(FL.$$.fragment,Bi),lLr=i(Bi),t6e=n(Bi,"P",{});var Z6t=s(t6e);iLr=r(Z6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z6t.forEach(t),dLr=i(Bi),yf=n(Bi,"P",{});var pQ=s(yf);cLr=r(pQ,`Note:
Loading a model from its configuration file does `),a6e=n(pQ,"STRONG",{});var eTt=s(a6e);fLr=r(eTt,"not"),eTt.forEach(t),mLr=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=n(pQ,"CODE",{});var oTt=s(n6e);gLr=r(oTt,"from_pretrained()"),oTt.forEach(t),hLr=r(pQ,"to load the model weights."),pQ.forEach(t),pLr=i(Bi),s6e=n(Bi,"P",{});var rTt=s(s6e);_Lr=r(rTt,"Examples:"),rTt.forEach(t),uLr=i(Bi),m(CL.$$.fragment,Bi),Bi.forEach(t),bLr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(ML.$$.fragment,Ia),vLr=i(Ia),l6e=n(Ia,"P",{});var tTt=s(l6e);TLr=r(tTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tTt.forEach(t),FLr=i(Ia),jn=n(Ia,"P",{});var Q4=s(jn);CLr=r(Q4,"The model class to instantiate is selected based on the "),i6e=n(Q4,"CODE",{});var aTt=s(i6e);MLr=r(aTt,"model_type"),aTt.forEach(t),ELr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),d6e=n(Q4,"CODE",{});var nTt=s(d6e);yLr=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),wLr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(Q4,"CODE",{});var sTt=s(c6e);ALr=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),LLr=r(Q4,":"),Q4.forEach(t),BLr=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);jM=n(Xo,"LI",{});var cxe=s(jM);f6e=n(cxe,"STRONG",{});var lTt=s(f6e);xLr=r(lTt,"albert"),lTt.forEach(t),kLr=r(cxe," \u2014 "),bz=n(cxe,"A",{href:!0});var iTt=s(bz);RLr=r(iTt,"FlaxAlbertForMultipleChoice"),iTt.forEach(t),SLr=r(cxe," (ALBERT model)"),cxe.forEach(t),PLr=i(Xo),DM=n(Xo,"LI",{});var fxe=s(DM);m6e=n(fxe,"STRONG",{});var dTt=s(m6e);$Lr=r(dTt,"bert"),dTt.forEach(t),ILr=r(fxe," \u2014 "),vz=n(fxe,"A",{href:!0});var cTt=s(vz);jLr=r(cTt,"FlaxBertForMultipleChoice"),cTt.forEach(t),DLr=r(fxe," (BERT model)"),fxe.forEach(t),NLr=i(Xo),NM=n(Xo,"LI",{});var mxe=s(NM);g6e=n(mxe,"STRONG",{});var fTt=s(g6e);qLr=r(fTt,"big_bird"),fTt.forEach(t),OLr=r(mxe," \u2014 "),Tz=n(mxe,"A",{href:!0});var mTt=s(Tz);GLr=r(mTt,"FlaxBigBirdForMultipleChoice"),mTt.forEach(t),XLr=r(mxe," (BigBird model)"),mxe.forEach(t),VLr=i(Xo),qM=n(Xo,"LI",{});var gxe=s(qM);h6e=n(gxe,"STRONG",{});var gTt=s(h6e);zLr=r(gTt,"distilbert"),gTt.forEach(t),WLr=r(gxe," \u2014 "),Fz=n(gxe,"A",{href:!0});var hTt=s(Fz);QLr=r(hTt,"FlaxDistilBertForMultipleChoice"),hTt.forEach(t),HLr=r(gxe," (DistilBERT model)"),gxe.forEach(t),ULr=i(Xo),OM=n(Xo,"LI",{});var hxe=s(OM);p6e=n(hxe,"STRONG",{});var pTt=s(p6e);JLr=r(pTt,"electra"),pTt.forEach(t),YLr=r(hxe," \u2014 "),Cz=n(hxe,"A",{href:!0});var _Tt=s(Cz);KLr=r(_Tt,"FlaxElectraForMultipleChoice"),_Tt.forEach(t),ZLr=r(hxe," (ELECTRA model)"),hxe.forEach(t),e8r=i(Xo),GM=n(Xo,"LI",{});var pxe=s(GM);_6e=n(pxe,"STRONG",{});var uTt=s(_6e);o8r=r(uTt,"roberta"),uTt.forEach(t),r8r=r(pxe," \u2014 "),Mz=n(pxe,"A",{href:!0});var bTt=s(Mz);t8r=r(bTt,"FlaxRobertaForMultipleChoice"),bTt.forEach(t),a8r=r(pxe," (RoBERTa model)"),pxe.forEach(t),n8r=i(Xo),XM=n(Xo,"LI",{});var _xe=s(XM);u6e=n(_xe,"STRONG",{});var vTt=s(u6e);s8r=r(vTt,"roformer"),vTt.forEach(t),l8r=r(_xe," \u2014 "),Ez=n(_xe,"A",{href:!0});var TTt=s(Ez);i8r=r(TTt,"FlaxRoFormerForMultipleChoice"),TTt.forEach(t),d8r=r(_xe," (RoFormer model)"),_xe.forEach(t),c8r=i(Xo),VM=n(Xo,"LI",{});var uxe=s(VM);b6e=n(uxe,"STRONG",{});var FTt=s(b6e);f8r=r(FTt,"xlm-roberta"),FTt.forEach(t),m8r=r(uxe," \u2014 "),yz=n(uxe,"A",{href:!0});var CTt=s(yz);g8r=r(CTt,"FlaxXLMRobertaForMultipleChoice"),CTt.forEach(t),h8r=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),Xo.forEach(t),p8r=i(Ia),v6e=n(Ia,"P",{});var MTt=s(v6e);_8r=r(MTt,"Examples:"),MTt.forEach(t),u8r=i(Ia),m(EL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),uRe=i(c),wf=n(c,"H2",{class:!0});var BPe=s(wf);zM=n(BPe,"A",{id:!0,class:!0,href:!0});var ETt=s(zM);T6e=n(ETt,"SPAN",{});var yTt=s(T6e);m(yL.$$.fragment,yTt),yTt.forEach(t),ETt.forEach(t),b8r=i(BPe),F6e=n(BPe,"SPAN",{});var wTt=s(F6e);v8r=r(wTt,"FlaxAutoModelForNextSentencePrediction"),wTt.forEach(t),BPe.forEach(t),bRe=i(c),Or=n(c,"DIV",{class:!0});var xi=s(Or);m(wL.$$.fragment,xi),T8r=i(xi),Af=n(xi,"P",{});var _Q=s(Af);F8r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),C6e=n(_Q,"CODE",{});var ATt=s(C6e);C8r=r(ATt,"from_pretrained()"),ATt.forEach(t),M8r=r(_Q,"class method or the "),M6e=n(_Q,"CODE",{});var LTt=s(M6e);E8r=r(LTt,"from_config()"),LTt.forEach(t),y8r=r(_Q,`class
method.`),_Q.forEach(t),w8r=i(xi),AL=n(xi,"P",{});var xPe=s(AL);A8r=r(xPe,"This class cannot be instantiated directly using "),E6e=n(xPe,"CODE",{});var BTt=s(E6e);L8r=r(BTt,"__init__()"),BTt.forEach(t),B8r=r(xPe," (throws an error)."),xPe.forEach(t),x8r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(LL.$$.fragment,ki),k8r=i(ki),y6e=n(ki,"P",{});var xTt=s(y6e);R8r=r(xTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xTt.forEach(t),S8r=i(ki),Lf=n(ki,"P",{});var uQ=s(Lf);P8r=r(uQ,`Note:
Loading a model from its configuration file does `),w6e=n(uQ,"STRONG",{});var kTt=s(w6e);$8r=r(kTt,"not"),kTt.forEach(t),I8r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),A6e=n(uQ,"CODE",{});var RTt=s(A6e);j8r=r(RTt,"from_pretrained()"),RTt.forEach(t),D8r=r(uQ,"to load the model weights."),uQ.forEach(t),N8r=i(ki),L6e=n(ki,"P",{});var STt=s(L6e);q8r=r(STt,"Examples:"),STt.forEach(t),O8r=i(ki),m(BL.$$.fragment,ki),ki.forEach(t),G8r=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(xL.$$.fragment,ja),X8r=i(ja),B6e=n(ja,"P",{});var PTt=s(B6e);V8r=r(PTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PTt.forEach(t),z8r=i(ja),Dn=n(ja,"P",{});var H4=s(Dn);W8r=r(H4,"The model class to instantiate is selected based on the "),x6e=n(H4,"CODE",{});var $Tt=s(x6e);Q8r=r($Tt,"model_type"),$Tt.forEach(t),H8r=r(H4,` property of the config object (either
passed as an argument or loaded from `),k6e=n(H4,"CODE",{});var ITt=s(k6e);U8r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),J8r=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(H4,"CODE",{});var jTt=s(R6e);Y8r=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),K8r=r(H4,":"),H4.forEach(t),Z8r=i(ja),S6e=n(ja,"UL",{});var DTt=s(S6e);WM=n(DTt,"LI",{});var bxe=s(WM);P6e=n(bxe,"STRONG",{});var NTt=s(P6e);e9r=r(NTt,"bert"),NTt.forEach(t),o9r=r(bxe," \u2014 "),wz=n(bxe,"A",{href:!0});var qTt=s(wz);r9r=r(qTt,"FlaxBertForNextSentencePrediction"),qTt.forEach(t),t9r=r(bxe," (BERT model)"),bxe.forEach(t),DTt.forEach(t),a9r=i(ja),$6e=n(ja,"P",{});var OTt=s($6e);n9r=r(OTt,"Examples:"),OTt.forEach(t),s9r=i(ja),m(kL.$$.fragment,ja),ja.forEach(t),xi.forEach(t),vRe=i(c),Bf=n(c,"H2",{class:!0});var kPe=s(Bf);QM=n(kPe,"A",{id:!0,class:!0,href:!0});var GTt=s(QM);I6e=n(GTt,"SPAN",{});var XTt=s(I6e);m(RL.$$.fragment,XTt),XTt.forEach(t),GTt.forEach(t),l9r=i(kPe),j6e=n(kPe,"SPAN",{});var VTt=s(j6e);i9r=r(VTt,"FlaxAutoModelForImageClassification"),VTt.forEach(t),kPe.forEach(t),TRe=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(SL.$$.fragment,Ri),d9r=i(Ri),xf=n(Ri,"P",{});var bQ=s(xf);c9r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),D6e=n(bQ,"CODE",{});var zTt=s(D6e);f9r=r(zTt,"from_pretrained()"),zTt.forEach(t),m9r=r(bQ,"class method or the "),N6e=n(bQ,"CODE",{});var WTt=s(N6e);g9r=r(WTt,"from_config()"),WTt.forEach(t),h9r=r(bQ,`class
method.`),bQ.forEach(t),p9r=i(Ri),PL=n(Ri,"P",{});var RPe=s(PL);_9r=r(RPe,"This class cannot be instantiated directly using "),q6e=n(RPe,"CODE",{});var QTt=s(q6e);u9r=r(QTt,"__init__()"),QTt.forEach(t),b9r=r(RPe," (throws an error)."),RPe.forEach(t),v9r=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m($L.$$.fragment,Si),T9r=i(Si),O6e=n(Si,"P",{});var HTt=s(O6e);F9r=r(HTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HTt.forEach(t),C9r=i(Si),kf=n(Si,"P",{});var vQ=s(kf);M9r=r(vQ,`Note:
Loading a model from its configuration file does `),G6e=n(vQ,"STRONG",{});var UTt=s(G6e);E9r=r(UTt,"not"),UTt.forEach(t),y9r=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),X6e=n(vQ,"CODE",{});var JTt=s(X6e);w9r=r(JTt,"from_pretrained()"),JTt.forEach(t),A9r=r(vQ,"to load the model weights."),vQ.forEach(t),L9r=i(Si),V6e=n(Si,"P",{});var YTt=s(V6e);B9r=r(YTt,"Examples:"),YTt.forEach(t),x9r=i(Si),m(IL.$$.fragment,Si),Si.forEach(t),k9r=i(Ri),jo=n(Ri,"DIV",{class:!0});var Da=s(jo);m(jL.$$.fragment,Da),R9r=i(Da),z6e=n(Da,"P",{});var KTt=s(z6e);S9r=r(KTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KTt.forEach(t),P9r=i(Da),Nn=n(Da,"P",{});var U4=s(Nn);$9r=r(U4,"The model class to instantiate is selected based on the "),W6e=n(U4,"CODE",{});var ZTt=s(W6e);I9r=r(ZTt,"model_type"),ZTt.forEach(t),j9r=r(U4,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(U4,"CODE",{});var e7t=s(Q6e);D9r=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),N9r=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(U4,"CODE",{});var o7t=s(H6e);q9r=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),O9r=r(U4,":"),U4.forEach(t),G9r=i(Da),DL=n(Da,"UL",{});var SPe=s(DL);HM=n(SPe,"LI",{});var vxe=s(HM);U6e=n(vxe,"STRONG",{});var r7t=s(U6e);X9r=r(r7t,"beit"),r7t.forEach(t),V9r=r(vxe," \u2014 "),Az=n(vxe,"A",{href:!0});var t7t=s(Az);z9r=r(t7t,"FlaxBeitForImageClassification"),t7t.forEach(t),W9r=r(vxe," (BEiT model)"),vxe.forEach(t),Q9r=i(SPe),UM=n(SPe,"LI",{});var Txe=s(UM);J6e=n(Txe,"STRONG",{});var a7t=s(J6e);H9r=r(a7t,"vit"),a7t.forEach(t),U9r=r(Txe," \u2014 "),Lz=n(Txe,"A",{href:!0});var n7t=s(Lz);J9r=r(n7t,"FlaxViTForImageClassification"),n7t.forEach(t),Y9r=r(Txe," (ViT model)"),Txe.forEach(t),SPe.forEach(t),K9r=i(Da),Y6e=n(Da,"P",{});var s7t=s(Y6e);Z9r=r(s7t,"Examples:"),s7t.forEach(t),eBr=i(Da),m(NL.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),FRe=i(c),Rf=n(c,"H2",{class:!0});var PPe=s(Rf);JM=n(PPe,"A",{id:!0,class:!0,href:!0});var l7t=s(JM);K6e=n(l7t,"SPAN",{});var i7t=s(K6e);m(qL.$$.fragment,i7t),i7t.forEach(t),l7t.forEach(t),oBr=i(PPe),Z6e=n(PPe,"SPAN",{});var d7t=s(Z6e);rBr=r(d7t,"FlaxAutoModelForVision2Seq"),d7t.forEach(t),PPe.forEach(t),CRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(OL.$$.fragment,Pi),tBr=i(Pi),Sf=n(Pi,"P",{});var TQ=s(Sf);aBr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eTe=n(TQ,"CODE",{});var c7t=s(eTe);nBr=r(c7t,"from_pretrained()"),c7t.forEach(t),sBr=r(TQ,"class method or the "),oTe=n(TQ,"CODE",{});var f7t=s(oTe);lBr=r(f7t,"from_config()"),f7t.forEach(t),iBr=r(TQ,`class
method.`),TQ.forEach(t),dBr=i(Pi),GL=n(Pi,"P",{});var $Pe=s(GL);cBr=r($Pe,"This class cannot be instantiated directly using "),rTe=n($Pe,"CODE",{});var m7t=s(rTe);fBr=r(m7t,"__init__()"),m7t.forEach(t),mBr=r($Pe," (throws an error)."),$Pe.forEach(t),gBr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(XL.$$.fragment,$i),hBr=i($i),tTe=n($i,"P",{});var g7t=s(tTe);pBr=r(g7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),g7t.forEach(t),_Br=i($i),Pf=n($i,"P",{});var FQ=s(Pf);uBr=r(FQ,`Note:
Loading a model from its configuration file does `),aTe=n(FQ,"STRONG",{});var h7t=s(aTe);bBr=r(h7t,"not"),h7t.forEach(t),vBr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nTe=n(FQ,"CODE",{});var p7t=s(nTe);TBr=r(p7t,"from_pretrained()"),p7t.forEach(t),FBr=r(FQ,"to load the model weights."),FQ.forEach(t),CBr=i($i),sTe=n($i,"P",{});var _7t=s(sTe);MBr=r(_7t,"Examples:"),_7t.forEach(t),EBr=i($i),m(VL.$$.fragment,$i),$i.forEach(t),yBr=i(Pi),Do=n(Pi,"DIV",{class:!0});var Na=s(Do);m(zL.$$.fragment,Na),wBr=i(Na),lTe=n(Na,"P",{});var u7t=s(lTe);ABr=r(u7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u7t.forEach(t),LBr=i(Na),qn=n(Na,"P",{});var J4=s(qn);BBr=r(J4,"The model class to instantiate is selected based on the "),iTe=n(J4,"CODE",{});var b7t=s(iTe);xBr=r(b7t,"model_type"),b7t.forEach(t),kBr=r(J4,` property of the config object (either
passed as an argument or loaded from `),dTe=n(J4,"CODE",{});var v7t=s(dTe);RBr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),SBr=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(J4,"CODE",{});var T7t=s(cTe);PBr=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),$Br=r(J4,":"),J4.forEach(t),IBr=i(Na),fTe=n(Na,"UL",{});var F7t=s(fTe);YM=n(F7t,"LI",{});var Fxe=s(YM);mTe=n(Fxe,"STRONG",{});var C7t=s(mTe);jBr=r(C7t,"vision-encoder-decoder"),C7t.forEach(t),DBr=r(Fxe," \u2014 "),Bz=n(Fxe,"A",{href:!0});var M7t=s(Bz);NBr=r(M7t,"FlaxVisionEncoderDecoderModel"),M7t.forEach(t),qBr=r(Fxe," (Vision Encoder decoder model)"),Fxe.forEach(t),F7t.forEach(t),OBr=i(Na),gTe=n(Na,"P",{});var E7t=s(gTe);GBr=r(E7t,"Examples:"),E7t.forEach(t),XBr=i(Na),m(WL.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(S7t)),d(he,"id","auto-classes"),d(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(he,"href","#auto-classes"),d(de,"class","relative group"),d(On,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Gf,"id","transformers.AutoConfig"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(J8,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(Y8,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertConfig"),d(K8,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartConfig"),d(Z8,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitConfig"),d(e9,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertConfig"),d(o9,"href","/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(r9,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdConfig"),d(t9,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(a9,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(n9,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(s9,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertConfig"),d(l9,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineConfig"),d(i9,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPConfig"),d(d9,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertConfig"),d(c9,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextConfig"),d(f9,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLConfig"),d(m9,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(g9,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(h9,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaConfig"),d(p9,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(_9,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTConfig"),d(u9,"href","/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrConfig"),d(b9,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertConfig"),d(v9,"href","/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRConfig"),d(T9,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraConfig"),d(F9,"href","/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(C9,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertConfig"),d(M9,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetConfig"),d(E9,"href","/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTConfig"),d(y9,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelConfig"),d(w9,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Config"),d(A9,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(L9,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJConfig"),d(B9,"href","/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertConfig"),d(x9,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertConfig"),d(k9,"href","/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(R9,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(S9,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(P9,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDConfig"),d($9,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerConfig"),d(I9,"href","/docs/transformers/pr_16070/en/model_doc/luke#transformers.LukeConfig"),d(j9,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertConfig"),d(D9,"href","/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Config"),d(N9,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianConfig"),d(q9,"href","/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(O9,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartConfig"),d(G9,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(X9,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(V9,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetConfig"),d(z9,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Config"),d(W9,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Q9,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(H9,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusConfig"),d(U9,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverConfig"),d(J9,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartConfig"),d(Y9,"href","/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(K9,"href","/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Z9,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(eB,"href","/docs/transformers/pr_16070/en/model_doc/rag#transformers.RagConfig"),d(oB,"href","/docs/transformers/pr_16070/en/model_doc/realm#transformers.RealmConfig"),d(rB,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerConfig"),d(tB,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertConfig"),d(aB,"href","/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetConfig"),d(nB,"href","/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertConfig"),d(sB,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaConfig"),d(lB,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerConfig"),d(iB,"href","/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerConfig"),d(dB,"href","/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWConfig"),d(cB,"href","/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDConfig"),d(fB,"href","/docs/transformers/pr_16070/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(mB,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(gB,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(hB,"href","/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterConfig"),d(pB,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(_B,"href","/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinConfig"),d(uB,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Config"),d(bB,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasConfig"),d(vB,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(TB,"href","/docs/transformers/pr_16070/en/model_doc/trocr#transformers.TrOCRConfig"),d(FB,"href","/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(CB,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(MB,"href","/docs/transformers/pr_16070/en/model_doc/vilt#transformers.ViltConfig"),d(EB,"href","/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(yB,"href","/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(wB,"href","/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(AB,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTConfig"),d(LB,"href","/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(BB,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(xB,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMConfig"),d(kB,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMConfig"),d(RB,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMConfig"),d(SB,"href","/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(PB,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d($B,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(IB,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetConfig"),d(jB,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(xg,"class","docstring"),d(Wo,"class","docstring"),d(kg,"id","transformers.AutoTokenizer"),d(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(DB,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(NB,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertTokenizer"),d(qB,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(OB,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartTokenizer"),d(GB,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartTokenizerFast"),d(XB,"href","/docs/transformers/pr_16070/en/model_doc/barthez#transformers.BarthezTokenizer"),d(VB,"href","/docs/transformers/pr_16070/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(zB,"href","/docs/transformers/pr_16070/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(WB,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertTokenizer"),d(QB,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertTokenizerFast"),d(HB,"href","/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(UB,"href","/docs/transformers/pr_16070/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(JB,"href","/docs/transformers/pr_16070/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(YB,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(KB,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(ZB,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ex,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ox,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(rx,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(tx,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(ax,"href","/docs/transformers/pr_16070/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(nx,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertTokenizer"),d(sx,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(lx,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineTokenizer"),d(ix,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPTokenizer"),d(dx,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(cx,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(fx,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(mx,"href","/docs/transformers/pr_16070/en/model_doc/cpm#transformers.CpmTokenizer"),d(gx,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(hx,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaTokenizer"),d(px,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(_x,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(ux,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(bx,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(vx,"href","/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Tx,"href","/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Fx,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraTokenizer"),d(Cx,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Mx,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Ex,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetTokenizer"),d(yx,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(wx,"href","/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Ax,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Lx,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Bx,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(xx,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(kx,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Rx,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Sx,"href","/docs/transformers/pr_16070/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Px,"href","/docs/transformers/pr_16070/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d($x,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Ix,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaTokenizer"),d(jx,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Dx,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Nx,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(qx,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Ox,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Gx,"href","/docs/transformers/pr_16070/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Xx,"href","/docs/transformers/pr_16070/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Vx,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDTokenizer"),d(zx,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDTokenizerFast"),d(Wx,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerTokenizer"),d(Qx,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Hx,"href","/docs/transformers/pr_16070/en/model_doc/luke#transformers.LukeTokenizer"),d(Ux,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(Jx,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(Yx,"href","/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(Kx,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianTokenizer"),d(Zx,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartTokenizer"),d(ek,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ok,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(rk,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(tk,"href","/docs/transformers/pr_16070/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ak,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(nk,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(sk,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(lk,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(ik,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.T5Tokenizer"),d(dk,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ck,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(fk,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(mk,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(gk,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(hk,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(pk,"href","/docs/transformers/pr_16070/en/model_doc/phobert#transformers.PhobertTokenizer"),d(_k,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartTokenizer"),d(uk,"href","/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(bk,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertTokenizer"),d(vk,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16070/en/model_doc/rag#transformers.RagTokenizer"),d(Fk,"href","/docs/transformers/pr_16070/en/model_doc/realm#transformers.RealmTokenizer"),d(Ck,"href","/docs/transformers/pr_16070/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ek,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(yk,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertTokenizer"),d(wk,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Lk,"href","/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaTokenizer"),d(xk,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(kk,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Rk,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Pk,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d($k,"href","/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Ik,"href","/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(jk,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Dk,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.T5Tokenizer"),d(qk,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Ok,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasTokenizer"),d(Gk,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Xk,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Vk,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(zk,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMTokenizer"),d(Wk,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMTokenizer"),d(Hk,"href","/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(Uk,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(Jk,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Kk,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(lh,"class","docstring"),d(Qo,"class","docstring"),d(ih,"id","transformers.AutoFeatureExtractor"),d(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ih,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(Zk,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(eR,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(oR,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(rR,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(tR,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(aR,"href","/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(nR,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(sR,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(lR,"href","/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(iR,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(dR,"href","/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(cR,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(fR,"href","/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(mR,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(hR,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(pR,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(_R,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Ah,"class","docstring"),d(Ho,"class","docstring"),d(Lh,"id","transformers.AutoProcessor"),d(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(uR,"href","/docs/transformers/pr_16070/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(bR,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPProcessor"),d(vR,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(TR,"href","/docs/transformers/pr_16070/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(FR,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(CR,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(MR,"href","/docs/transformers/pr_16070/en/model_doc/trocr#transformers.TrOCRProcessor"),d(ER,"href","/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(yR,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(je,"class","docstring"),d(Dh,"class","docstring"),d(Uo,"class","docstring"),d(Nh,"id","transformers.AutoModel"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(wR,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertModel"),d(AR,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartModel"),d(LR,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitModel"),d(BR,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertModel"),d(xR,"href","/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(kR,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdModel"),d(RR,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(SR,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(PR,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d($R,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertModel"),d(IR,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineModel"),d(jR,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.CLIPModel"),d(DR,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertModel"),d(NR,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextModel"),d(qR,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLModel"),d(OR,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(GR,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(XR,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaModel"),d(VR,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(zR,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTModel"),d(WR,"href","/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrModel"),d(QR,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertModel"),d(HR,"href","/docs/transformers/pr_16070/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(UR,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraModel"),d(JR,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertModel"),d(YR,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetModel"),d(KR,"href","/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTModel"),d(ZR,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelModel"),d(eS,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelBaseModel"),d(oS,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2Model"),d(rS,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(tS,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJModel"),d(aS,"href","/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertModel"),d(nS,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertModel"),d(sS,"href","/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(lS,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(iS,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(dS,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDModel"),d(cS,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerModel"),d(fS,"href","/docs/transformers/pr_16070/en/model_doc/luke#transformers.LukeModel"),d(mS,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertModel"),d(gS,"href","/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100Model"),d(hS,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianModel"),d(pS,"href","/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerModel"),d(_S,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartModel"),d(uS,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(bS,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertModel"),d(vS,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetModel"),d(TS,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5Model"),d(FS,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerModel"),d(CS,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MS,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusModel"),d(ES,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverModel"),d(yS,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartModel"),d(wS,"href","/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AS,"href","/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(LS,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertModel"),d(BS,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerModel"),d(xS,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertModel"),d(kS,"href","/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetModel"),d(RS,"href","/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertModel"),d(SS,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaModel"),d(PS,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerModel"),d($S,"href","/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerModel"),d(IS,"href","/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWModel"),d(jS,"href","/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDModel"),d(DS,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(NS,"href","/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterModel"),d(qS,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(OS,"href","/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinModel"),d(GS,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5Model"),d(XS,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasModel"),d(VS,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zS,"href","/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechModel"),d(WS,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(QS,"href","/docs/transformers/pr_16070/en/model_doc/vilt#transformers.ViltModel"),d(HS,"href","/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(US,"href","/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertModel"),d(JS,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTModel"),d(YS,"href","/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(KS,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(ZS,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMModel"),d(eP,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMModel"),d(oP,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMModel"),d(rP,"href","/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(tP,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(aP,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(nP,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetModel"),d(sP,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(T_,"id","transformers.AutoModelForPreTraining"),d(T_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(lP,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForPreTraining"),d(iP,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(dP,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForPreTraining"),d(cP,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(fP,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(mP,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(gP,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(hP,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(pP,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(_P,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(uP,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForPreTraining"),d(bP,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(vP,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForPreTraining"),d(TP,"href","/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(FP,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(CP,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(MP,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(EP,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(yP,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(wP,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(AP,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(LP,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(BP,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(xP,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(kP,"href","/docs/transformers/pr_16070/en/model_doc/retribert#transformers.RetriBertModel"),d(RP,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(SP,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(PP,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($P,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(IP,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(jP,"href","/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(DP,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(NP,"href","/docs/transformers/pr_16070/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(qP,"href","/docs/transformers/pr_16070/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(OP,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(GP,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(XP,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(VP,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(zP,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(lu,"id","transformers.AutoModelForCausalLM"),d(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(WP,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForCausalLM"),d(QP,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertLMHeadModel"),d(HP,"href","/docs/transformers/pr_16070/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(UP,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(JP,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(YP,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(KP,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(ZP,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(e$,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(o$,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(r$,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForCausalLM"),d(t$,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(a$,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(n$,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(s$,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianForCausalLM"),d(l$,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForCausalLM"),d(i$,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(d$,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(c$,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(f$,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(m$,"href","/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(g$,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(h$,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(p$,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(_$,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(u$,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(b$,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(v$,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(T$,"href","/docs/transformers/pr_16070/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(F$,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(C$,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(M$,"href","/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(E$,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(y$,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(w$,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Vu,"id","transformers.AutoModelForMaskedLM"),d(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(A$,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(L$,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForMaskedLM"),d(x$,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(k$,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(R$,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(S$,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(P$,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($$,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(I$,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(j$,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(D$,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(N$,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(q$,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(O$,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(G$,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(X$,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(V$,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(z$,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(W$,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(H$,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(U$,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(J$,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(K$,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eI,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oI,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rI,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tI,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aI,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nI,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sI,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Oe,"class","docstring"),d(Zo,"class","docstring"),d(A0,"id","transformers.AutoModelForSeq2SeqLM"),d(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A0,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(lI,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(iI,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(dI,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(cI,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(fI,"href","/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(mI,"href","/docs/transformers/pr_16070/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(hI,"href","/docs/transformers/pr_16070/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.MarianMTModel"),d(_I,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(vI,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_16070/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_16070/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(z0,"id","transformers.AutoModelForSequenceClassification"),d(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z0,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(MI,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(EI,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yI,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForSequenceClassification"),d(wI,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(AI,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(LI,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(BI,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(xI,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(kI,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(RI,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(SI,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(PI,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d($I,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(II,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16070/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(N1,"id","transformers.AutoModelForMultipleChoice"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(pj,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(_j,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForMultipleChoice"),d(uj,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(bj,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(vj,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Tj,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Fj,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Cj,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Mj,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Ej,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(yj,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(wj,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Aj,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d($j,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(pb,"id","transformers.AutoModelForNextSentencePrediction"),d(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Xj,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Vj,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(zj,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Wj,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Qj,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(Cb,"id","transformers.AutoModelForTokenClassification"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(Hj,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(eD,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(oD,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(rD,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(tD,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(aD,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(nD,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(sD,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(lD,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(iD,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(dD,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(cD,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(fD,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(mD,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(gD,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(hD,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(pD,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(_D,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(uD,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(bD,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(vD,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(TD,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(FD,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(CD,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(MD,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(ED,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(yD,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(wD,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(t2,"id","transformers.AutoModelForQuestionAnswering"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(AD,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16070/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16070/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(OD,"href","/docs/transformers/pr_16070/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16070/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16070/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16070/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16070/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(eN,"href","/docs/transformers/pr_16070/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(oN,"href","/docs/transformers/pr_16070/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(rN,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(tN,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(aN,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(nN,"href","/docs/transformers/pr_16070/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(sN,"href","/docs/transformers/pr_16070/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(lN,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(iN,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(dN,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(cN,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(fN,"href","/docs/transformers/pr_16070/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(V2,"id","transformers.AutoModelForTableQuestionAnswering"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(mN,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(Q2,"id","transformers.AutoModelForImageClassification"),d(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(gN,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitForImageClassification"),d(hN,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(pN,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForImageClassification"),d(_N,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(uN,"href","/docs/transformers/pr_16070/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(bN,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(vN,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(TN,"href","/docs/transformers/pr_16070/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(FN,"href","/docs/transformers/pr_16070/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(CN,"href","/docs/transformers/pr_16070/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(MN,"href","/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(EN,"href","/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinForImageClassification"),d(yN,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(tv,"id","transformers.AutoModelForVision2Seq"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(wN,"href","/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(sv,"id","transformers.AutoModelForAudioClassification"),d(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sv,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(AN,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(_v,"id","transformers.AutoModelForAudioFrameClassification"),d(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_v,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d($N,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(IN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(jN,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(DN,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(Cv,"id","transformers.AutoModelForCTC"),d(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(NN,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(qN,"href","/docs/transformers/pr_16070/en/model_doc/hubert#transformers.HubertForCTC"),d(ON,"href","/docs/transformers/pr_16070/en/model_doc/sew#transformers.SEWForCTC"),d(GN,"href","/docs/transformers/pr_16070/en/model_doc/sew-d#transformers.SEWDForCTC"),d(XN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(VN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(zN,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(WN,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(Rv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(QN,"href","/docs/transformers/pr_16070/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HN,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(Iv,"id","transformers.AutoModelForAudioXVector"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(UN,"href","/docs/transformers/pr_16070/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(JN,"href","/docs/transformers/pr_16070/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(YN,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(KN,"href","/docs/transformers/pr_16070/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(Gv,"id","transformers.AutoModelForMaskedImageModeling"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(ZN,"href","/docs/transformers/pr_16070/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(eq,"href","/docs/transformers/pr_16070/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(oq,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Qv,"id","transformers.AutoModelForObjectDetection"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(rq,"href","/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(Jv,"id","transformers.AutoModelForImageSegmentation"),d(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jv,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(tq,"href","/docs/transformers/pr_16070/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(Zv,"id","transformers.AutoModelForSemanticSegmentation"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(aq,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(nq,"href","/docs/transformers/pr_16070/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(t6,"id","transformers.AutoModelForInstanceSegmentation"),d(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t6,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(sq,"href","/docs/transformers/pr_16070/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(s6,"id","transformers.TFAutoModel"),d(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s6,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(lq,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertModel"),d(iq,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartModel"),d(dq,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertModel"),d(cq,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(fq,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(mq,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertModel"),d(gq,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.TFCLIPModel"),d(hq,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertModel"),d(pq,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.TFConvNextModel"),d(_q,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLModel"),d(uq,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaModel"),d(bq,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(vq,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Tq,"href","/docs/transformers/pr_16070/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Fq,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraModel"),d(Cq,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Mq,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelModel"),d(Eq,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(yq,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2Model"),d(wq,"href","/docs/transformers/pr_16070/en/model_doc/hubert#transformers.TFHubertModel"),d(Aq,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Lq,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.TFLEDModel"),d(Bq,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerModel"),d(xq,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.TFLxmertModel"),d(kq,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.TFMarianModel"),d(Rq,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.TFMBartModel"),d(Sq,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Pq,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetModel"),d($q,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.TFMT5Model"),d(Iq,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(jq,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Dq,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertModel"),d(Nq,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaModel"),d(qq,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Oq,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Gq,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5Model"),d(Xq,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasModel"),d(Vq,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(zq,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.TFViTModel"),d(Wq,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(Qq,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMModel"),d(Hq,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(Uq,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(H6,"id","transformers.TFAutoModelForPreTraining"),d(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H6,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(Jq,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Yq,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Kq,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Zq,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(eO,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(oO,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rO,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(tO,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aO,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(nO,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(sO,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(lO,"href","/docs/transformers/pr_16070/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(iO,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(dO,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(cO,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(fO,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(mO,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(gO,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(hO,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(pO,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(_O,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uO,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(uT,"id","transformers.TFAutoModelForCausalLM"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(bO,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(vO,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TO,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(FO,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CO,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(MO,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(EO,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yO,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(wO,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(AO,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LO,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(BT,"id","transformers.TFAutoModelForImageClassification"),d(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BT,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(BO,"href","/docs/transformers/pr_16070/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(xO,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(RT,"id","transformers.TFAutoModelForMaskedLM"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(kO,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(RO,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(SO,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(PO,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d($O,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(IO,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(jO,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(DO,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(NO,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(qO,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(OO,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(GO,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(XO,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(VO,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(zO,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(WO,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(QO,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(HO,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(UO,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JO,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(ZT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(YO,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(KO,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(ZO,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(eG,"href","/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(oG,"href","/docs/transformers/pr_16070/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(rG,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.TFMarianMTModel"),d(tG,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(aG,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(nG,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(sG,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(c7,"id","transformers.TFAutoModelForSequenceClassification"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(lG,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(iG,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16070/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(_G,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16070/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(LG,"href","/docs/transformers/pr_16070/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(xG,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(kG,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(I7,"id","transformers.TFAutoModelForMultipleChoice"),d(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(RG,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(SG,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(PG,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d($G,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(IG,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(jG,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(DG,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(NG,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(qG,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(OG,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(XG,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(VG,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(zG,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(WG,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(QG,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(HG,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(eF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(UG,"href","/docs/transformers/pr_16070/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(rF,"id","transformers.TFAutoModelForTokenClassification"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(JG,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(YG,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(KG,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(ZG,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(eX,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(oX,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(rX,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(tX,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(aX,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(nX,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(sX,"href","/docs/transformers/pr_16070/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(lX,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(iX,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(dX,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(cX,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(fX,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(mX,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(gX,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(hX,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(pX,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(MF,"id","transformers.TFAutoModelForQuestionAnswering"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(_X,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(uX,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(bX,"href","/docs/transformers/pr_16070/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(vX,"href","/docs/transformers/pr_16070/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(TX,"href","/docs/transformers/pr_16070/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(FX,"href","/docs/transformers/pr_16070/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(CX,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(MX,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(EX,"href","/docs/transformers/pr_16070/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(yX,"href","/docs/transformers/pr_16070/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(wX,"href","/docs/transformers/pr_16070/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(AX,"href","/docs/transformers/pr_16070/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(LX,"href","/docs/transformers/pr_16070/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_16070/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(kX,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_16070/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(SX,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_16070/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(XF,"id","transformers.TFAutoModelForVision2Seq"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d($X,"href","/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(zF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(IX,"href","/docs/transformers/pr_16070/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(QF,"id","transformers.FlaxAutoModel"),d(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(jX,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertModel"),d(DX,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartModel"),d(NX,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.FlaxBeitModel"),d(qX,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertModel"),d(OX,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(GX,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(XX,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(VX,"href","/docs/transformers/pr_16070/en/model_doc/clip#transformers.FlaxCLIPModel"),d(zX,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(WX,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraModel"),d(QX,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(HX,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(UX,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(JX,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.FlaxMarianModel"),d(YX,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartModel"),d(KX,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5Model"),d(ZX,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(eV,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(oV,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(rV,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5Model"),d(tV,"href","/docs/transformers/pr_16070/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(aV,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.FlaxViTModel"),d(nV,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(sV,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(lV,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(vC,"id","transformers.FlaxAutoModelForCausalLM"),d(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vC,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(iV,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(dV,"href","/docs/transformers/pr_16070/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(cV,"href","/docs/transformers/pr_16070/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(fV,"href","/docs/transformers/pr_16070/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(mV,"href","/docs/transformers/pr_16070/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(yC,"id","transformers.FlaxAutoModelForPreTraining"),d(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yC,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(gV,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(hV,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(pV,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(_V,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(uV,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(bV,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(vV,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(TV,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(FV,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(CV,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(MV,"href","/docs/transformers/pr_16070/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(EV,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(DC,"id","transformers.FlaxAutoModelForMaskedLM"),d(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(yV,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(wV,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(LV,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(BV,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(xV,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(kV,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RV,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PV,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(UC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d($V,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(jV,"href","/docs/transformers/pr_16070/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_16070/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(NV,"href","/docs/transformers/pr_16070/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(qV,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(OV,"href","/docs/transformers/pr_16070/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_16070/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16070/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(nM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(VV,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(zV,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(WV,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(QV,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(HV,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(UV,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(JV,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(YV,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(KV,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ZV,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(_M,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_M,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(ez,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(oz,"href","/docs/transformers/pr_16070/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(rz,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(tz,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(az,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(nz,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(sz,"href","/docs/transformers/pr_16070/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(lz,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(iz,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(dz,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(AM,"id","transformers.FlaxAutoModelForTokenClassification"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(cz,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(fz,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(mz,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(gz,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(hz,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(pz,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(_z,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(uz,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Nr,"class","docstring"),d(IM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(bz,"href","/docs/transformers/pr_16070/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16070/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16070/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16070/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16070/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16070/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16070/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(zM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(wz,"href","/docs/transformers/pr_16070/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Or,"class","docstring"),d(QM,"id","transformers.FlaxAutoModelForImageClassification"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(Az,"href","/docs/transformers/pr_16070/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Lz,"href","/docs/transformers/pr_16070/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Gr,"class","docstring"),d(JM,"id","transformers.FlaxAutoModelForVision2Seq"),d(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(jt,"class","docstring"),d(Bz,"href","/docs/transformers/pr_16070/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,he),e(he,io),g(fe,io,null),e(de,Ce),e(de,Vo),e(Vo,ji),b(c,If,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,Y4),e(fa,jf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,On),e(On,K4),e(co,Gn),e(co,Xn),e(Xn,Z4),e(co,Oi),e(co,Vn),e(Vn,eE),e(co,Gi),b(c,Df,u),g(qa,c,u),b(c,fo,u),b(c,pe,u),e(pe,V8),e(pe,Xi),e(Xi,z8),e(pe,W8),b(c,zo,u),b(c,Oa,u),e(Oa,Q8),e(Oa,Nf),e(Nf,H8),e(Oa,IPe),b(c,Cxe,u),b(c,Vi,u),e(Vi,qf),e(qf,CQ),g(oE,CQ,null),e(Vi,jPe),e(Vi,MQ),e(MQ,DPe),b(c,Mxe,u),b(c,zn,u),e(zn,NPe),e(zn,EQ),e(EQ,qPe),e(zn,OPe),e(zn,yQ),e(yQ,GPe),e(zn,XPe),b(c,Exe,u),g(rE,c,u),b(c,yxe,u),b(c,U8,u),e(U8,VPe),b(c,wxe,u),g(Of,c,u),b(c,Axe,u),b(c,zi,u),e(zi,Gf),e(Gf,wQ),g(tE,wQ,null),e(zi,zPe),e(zi,AQ),e(AQ,WPe),b(c,Lxe,u),b(c,Wo,u),g(aE,Wo,null),e(Wo,QPe),e(Wo,nE),e(nE,HPe),e(nE,J8),e(J8,UPe),e(nE,JPe),e(Wo,YPe),e(Wo,sE),e(sE,KPe),e(sE,LQ),e(LQ,ZPe),e(sE,e$e),e(Wo,o$e),e(Wo,mo),g(lE,mo,null),e(mo,r$e),e(mo,BQ),e(BQ,t$e),e(mo,a$e),e(mo,Wi),e(Wi,n$e),e(Wi,xQ),e(xQ,s$e),e(Wi,l$e),e(Wi,kQ),e(kQ,i$e),e(Wi,d$e),e(mo,c$e),e(mo,v),e(v,Xf),e(Xf,RQ),e(RQ,f$e),e(Xf,m$e),e(Xf,Y8),e(Y8,g$e),e(Xf,h$e),e(v,p$e),e(v,Vf),e(Vf,SQ),e(SQ,_$e),e(Vf,u$e),e(Vf,K8),e(K8,b$e),e(Vf,v$e),e(v,T$e),e(v,zf),e(zf,PQ),e(PQ,F$e),e(zf,C$e),e(zf,Z8),e(Z8,M$e),e(zf,E$e),e(v,y$e),e(v,Wf),e(Wf,$Q),e($Q,w$e),e(Wf,A$e),e(Wf,e9),e(e9,L$e),e(Wf,B$e),e(v,x$e),e(v,Qf),e(Qf,IQ),e(IQ,k$e),e(Qf,R$e),e(Qf,o9),e(o9,S$e),e(Qf,P$e),e(v,$$e),e(v,Hf),e(Hf,jQ),e(jQ,I$e),e(Hf,j$e),e(Hf,r9),e(r9,D$e),e(Hf,N$e),e(v,q$e),e(v,Uf),e(Uf,DQ),e(DQ,O$e),e(Uf,G$e),e(Uf,t9),e(t9,X$e),e(Uf,V$e),e(v,z$e),e(v,Jf),e(Jf,NQ),e(NQ,W$e),e(Jf,Q$e),e(Jf,a9),e(a9,H$e),e(Jf,U$e),e(v,J$e),e(v,Yf),e(Yf,qQ),e(qQ,Y$e),e(Yf,K$e),e(Yf,n9),e(n9,Z$e),e(Yf,eIe),e(v,oIe),e(v,Kf),e(Kf,OQ),e(OQ,rIe),e(Kf,tIe),e(Kf,s9),e(s9,aIe),e(Kf,nIe),e(v,sIe),e(v,Zf),e(Zf,GQ),e(GQ,lIe),e(Zf,iIe),e(Zf,l9),e(l9,dIe),e(Zf,cIe),e(v,fIe),e(v,em),e(em,XQ),e(XQ,mIe),e(em,gIe),e(em,i9),e(i9,hIe),e(em,pIe),e(v,_Ie),e(v,om),e(om,VQ),e(VQ,uIe),e(om,bIe),e(om,d9),e(d9,vIe),e(om,TIe),e(v,FIe),e(v,rm),e(rm,zQ),e(zQ,CIe),e(rm,MIe),e(rm,c9),e(c9,EIe),e(rm,yIe),e(v,wIe),e(v,tm),e(tm,WQ),e(WQ,AIe),e(tm,LIe),e(tm,f9),e(f9,BIe),e(tm,xIe),e(v,kIe),e(v,am),e(am,QQ),e(QQ,RIe),e(am,SIe),e(am,m9),e(m9,PIe),e(am,$Ie),e(v,IIe),e(v,nm),e(nm,HQ),e(HQ,jIe),e(nm,DIe),e(nm,g9),e(g9,NIe),e(nm,qIe),e(v,OIe),e(v,sm),e(sm,UQ),e(UQ,GIe),e(sm,XIe),e(sm,h9),e(h9,VIe),e(sm,zIe),e(v,WIe),e(v,lm),e(lm,JQ),e(JQ,QIe),e(lm,HIe),e(lm,p9),e(p9,UIe),e(lm,JIe),e(v,YIe),e(v,im),e(im,YQ),e(YQ,KIe),e(im,ZIe),e(im,_9),e(_9,eje),e(im,oje),e(v,rje),e(v,dm),e(dm,KQ),e(KQ,tje),e(dm,aje),e(dm,u9),e(u9,nje),e(dm,sje),e(v,lje),e(v,cm),e(cm,ZQ),e(ZQ,ije),e(cm,dje),e(cm,b9),e(b9,cje),e(cm,fje),e(v,mje),e(v,fm),e(fm,eH),e(eH,gje),e(fm,hje),e(fm,v9),e(v9,pje),e(fm,_je),e(v,uje),e(v,mm),e(mm,oH),e(oH,bje),e(mm,vje),e(mm,T9),e(T9,Tje),e(mm,Fje),e(v,Cje),e(v,gm),e(gm,rH),e(rH,Mje),e(gm,Eje),e(gm,F9),e(F9,yje),e(gm,wje),e(v,Aje),e(v,hm),e(hm,tH),e(tH,Lje),e(hm,Bje),e(hm,C9),e(C9,xje),e(hm,kje),e(v,Rje),e(v,pm),e(pm,aH),e(aH,Sje),e(pm,Pje),e(pm,M9),e(M9,$je),e(pm,Ije),e(v,jje),e(v,_m),e(_m,nH),e(nH,Dje),e(_m,Nje),e(_m,E9),e(E9,qje),e(_m,Oje),e(v,Gje),e(v,um),e(um,sH),e(sH,Xje),e(um,Vje),e(um,y9),e(y9,zje),e(um,Wje),e(v,Qje),e(v,bm),e(bm,lH),e(lH,Hje),e(bm,Uje),e(bm,w9),e(w9,Jje),e(bm,Yje),e(v,Kje),e(v,vm),e(vm,iH),e(iH,Zje),e(vm,eDe),e(vm,A9),e(A9,oDe),e(vm,rDe),e(v,tDe),e(v,Tm),e(Tm,dH),e(dH,aDe),e(Tm,nDe),e(Tm,L9),e(L9,sDe),e(Tm,lDe),e(v,iDe),e(v,Fm),e(Fm,cH),e(cH,dDe),e(Fm,cDe),e(Fm,B9),e(B9,fDe),e(Fm,mDe),e(v,gDe),e(v,Cm),e(Cm,fH),e(fH,hDe),e(Cm,pDe),e(Cm,x9),e(x9,_De),e(Cm,uDe),e(v,bDe),e(v,Mm),e(Mm,mH),e(mH,vDe),e(Mm,TDe),e(Mm,k9),e(k9,FDe),e(Mm,CDe),e(v,MDe),e(v,Em),e(Em,gH),e(gH,EDe),e(Em,yDe),e(Em,R9),e(R9,wDe),e(Em,ADe),e(v,LDe),e(v,ym),e(ym,hH),e(hH,BDe),e(ym,xDe),e(ym,S9),e(S9,kDe),e(ym,RDe),e(v,SDe),e(v,wm),e(wm,pH),e(pH,PDe),e(wm,$De),e(wm,P9),e(P9,IDe),e(wm,jDe),e(v,DDe),e(v,Am),e(Am,_H),e(_H,NDe),e(Am,qDe),e(Am,$9),e($9,ODe),e(Am,GDe),e(v,XDe),e(v,Lm),e(Lm,uH),e(uH,VDe),e(Lm,zDe),e(Lm,I9),e(I9,WDe),e(Lm,QDe),e(v,HDe),e(v,Bm),e(Bm,bH),e(bH,UDe),e(Bm,JDe),e(Bm,j9),e(j9,YDe),e(Bm,KDe),e(v,ZDe),e(v,xm),e(xm,vH),e(vH,eNe),e(xm,oNe),e(xm,D9),e(D9,rNe),e(xm,tNe),e(v,aNe),e(v,km),e(km,TH),e(TH,nNe),e(km,sNe),e(km,N9),e(N9,lNe),e(km,iNe),e(v,dNe),e(v,Rm),e(Rm,FH),e(FH,cNe),e(Rm,fNe),e(Rm,q9),e(q9,mNe),e(Rm,gNe),e(v,hNe),e(v,Sm),e(Sm,CH),e(CH,pNe),e(Sm,_Ne),e(Sm,O9),e(O9,uNe),e(Sm,bNe),e(v,vNe),e(v,Pm),e(Pm,MH),e(MH,TNe),e(Pm,FNe),e(Pm,G9),e(G9,CNe),e(Pm,MNe),e(v,ENe),e(v,$m),e($m,EH),e(EH,yNe),e($m,wNe),e($m,X9),e(X9,ANe),e($m,LNe),e(v,BNe),e(v,Im),e(Im,yH),e(yH,xNe),e(Im,kNe),e(Im,V9),e(V9,RNe),e(Im,SNe),e(v,PNe),e(v,jm),e(jm,wH),e(wH,$Ne),e(jm,INe),e(jm,z9),e(z9,jNe),e(jm,DNe),e(v,NNe),e(v,Dm),e(Dm,AH),e(AH,qNe),e(Dm,ONe),e(Dm,W9),e(W9,GNe),e(Dm,XNe),e(v,VNe),e(v,Nm),e(Nm,LH),e(LH,zNe),e(Nm,WNe),e(Nm,Q9),e(Q9,QNe),e(Nm,HNe),e(v,UNe),e(v,qm),e(qm,BH),e(BH,JNe),e(qm,YNe),e(qm,H9),e(H9,KNe),e(qm,ZNe),e(v,eqe),e(v,Om),e(Om,xH),e(xH,oqe),e(Om,rqe),e(Om,U9),e(U9,tqe),e(Om,aqe),e(v,nqe),e(v,Gm),e(Gm,kH),e(kH,sqe),e(Gm,lqe),e(Gm,J9),e(J9,iqe),e(Gm,dqe),e(v,cqe),e(v,Xm),e(Xm,RH),e(RH,fqe),e(Xm,mqe),e(Xm,Y9),e(Y9,gqe),e(Xm,hqe),e(v,pqe),e(v,Vm),e(Vm,SH),e(SH,_qe),e(Vm,uqe),e(Vm,K9),e(K9,bqe),e(Vm,vqe),e(v,Tqe),e(v,zm),e(zm,PH),e(PH,Fqe),e(zm,Cqe),e(zm,Z9),e(Z9,Mqe),e(zm,Eqe),e(v,yqe),e(v,Wm),e(Wm,$H),e($H,wqe),e(Wm,Aqe),e(Wm,eB),e(eB,Lqe),e(Wm,Bqe),e(v,xqe),e(v,Qm),e(Qm,IH),e(IH,kqe),e(Qm,Rqe),e(Qm,oB),e(oB,Sqe),e(Qm,Pqe),e(v,$qe),e(v,Hm),e(Hm,jH),e(jH,Iqe),e(Hm,jqe),e(Hm,rB),e(rB,Dqe),e(Hm,Nqe),e(v,qqe),e(v,Um),e(Um,DH),e(DH,Oqe),e(Um,Gqe),e(Um,tB),e(tB,Xqe),e(Um,Vqe),e(v,zqe),e(v,Jm),e(Jm,NH),e(NH,Wqe),e(Jm,Qqe),e(Jm,aB),e(aB,Hqe),e(Jm,Uqe),e(v,Jqe),e(v,Ym),e(Ym,qH),e(qH,Yqe),e(Ym,Kqe),e(Ym,nB),e(nB,Zqe),e(Ym,eOe),e(v,oOe),e(v,Km),e(Km,OH),e(OH,rOe),e(Km,tOe),e(Km,sB),e(sB,aOe),e(Km,nOe),e(v,sOe),e(v,Zm),e(Zm,GH),e(GH,lOe),e(Zm,iOe),e(Zm,lB),e(lB,dOe),e(Zm,cOe),e(v,fOe),e(v,eg),e(eg,XH),e(XH,mOe),e(eg,gOe),e(eg,iB),e(iB,hOe),e(eg,pOe),e(v,_Oe),e(v,og),e(og,VH),e(VH,uOe),e(og,bOe),e(og,dB),e(dB,vOe),e(og,TOe),e(v,FOe),e(v,rg),e(rg,zH),e(zH,COe),e(rg,MOe),e(rg,cB),e(cB,EOe),e(rg,yOe),e(v,wOe),e(v,tg),e(tg,WH),e(WH,AOe),e(tg,LOe),e(tg,fB),e(fB,BOe),e(tg,xOe),e(v,kOe),e(v,ag),e(ag,QH),e(QH,ROe),e(ag,SOe),e(ag,mB),e(mB,POe),e(ag,$Oe),e(v,IOe),e(v,ng),e(ng,HH),e(HH,jOe),e(ng,DOe),e(ng,gB),e(gB,NOe),e(ng,qOe),e(v,OOe),e(v,sg),e(sg,UH),e(UH,GOe),e(sg,XOe),e(sg,hB),e(hB,VOe),e(sg,zOe),e(v,WOe),e(v,lg),e(lg,JH),e(JH,QOe),e(lg,HOe),e(lg,pB),e(pB,UOe),e(lg,JOe),e(v,YOe),e(v,ig),e(ig,YH),e(YH,KOe),e(ig,ZOe),e(ig,_B),e(_B,eGe),e(ig,oGe),e(v,rGe),e(v,dg),e(dg,KH),e(KH,tGe),e(dg,aGe),e(dg,uB),e(uB,nGe),e(dg,sGe),e(v,lGe),e(v,cg),e(cg,ZH),e(ZH,iGe),e(cg,dGe),e(cg,bB),e(bB,cGe),e(cg,fGe),e(v,mGe),e(v,fg),e(fg,eU),e(eU,gGe),e(fg,hGe),e(fg,vB),e(vB,pGe),e(fg,_Ge),e(v,uGe),e(v,mg),e(mg,oU),e(oU,bGe),e(mg,vGe),e(mg,TB),e(TB,TGe),e(mg,FGe),e(v,CGe),e(v,gg),e(gg,rU),e(rU,MGe),e(gg,EGe),e(gg,FB),e(FB,yGe),e(gg,wGe),e(v,AGe),e(v,hg),e(hg,tU),e(tU,LGe),e(hg,BGe),e(hg,CB),e(CB,xGe),e(hg,kGe),e(v,RGe),e(v,pg),e(pg,aU),e(aU,SGe),e(pg,PGe),e(pg,MB),e(MB,$Ge),e(pg,IGe),e(v,jGe),e(v,_g),e(_g,nU),e(nU,DGe),e(_g,NGe),e(_g,EB),e(EB,qGe),e(_g,OGe),e(v,GGe),e(v,ug),e(ug,sU),e(sU,XGe),e(ug,VGe),e(ug,yB),e(yB,zGe),e(ug,WGe),e(v,QGe),e(v,bg),e(bg,lU),e(lU,HGe),e(bg,UGe),e(bg,wB),e(wB,JGe),e(bg,YGe),e(v,KGe),e(v,vg),e(vg,iU),e(iU,ZGe),e(vg,eXe),e(vg,AB),e(AB,oXe),e(vg,rXe),e(v,tXe),e(v,Tg),e(Tg,dU),e(dU,aXe),e(Tg,nXe),e(Tg,LB),e(LB,sXe),e(Tg,lXe),e(v,iXe),e(v,Fg),e(Fg,cU),e(cU,dXe),e(Fg,cXe),e(Fg,BB),e(BB,fXe),e(Fg,mXe),e(v,gXe),e(v,Cg),e(Cg,fU),e(fU,hXe),e(Cg,pXe),e(Cg,xB),e(xB,_Xe),e(Cg,uXe),e(v,bXe),e(v,Mg),e(Mg,mU),e(mU,vXe),e(Mg,TXe),e(Mg,kB),e(kB,FXe),e(Mg,CXe),e(v,MXe),e(v,Eg),e(Eg,gU),e(gU,EXe),e(Eg,yXe),e(Eg,RB),e(RB,wXe),e(Eg,AXe),e(v,LXe),e(v,yg),e(yg,hU),e(hU,BXe),e(yg,xXe),e(yg,SB),e(SB,kXe),e(yg,RXe),e(v,SXe),e(v,wg),e(wg,pU),e(pU,PXe),e(wg,$Xe),e(wg,PB),e(PB,IXe),e(wg,jXe),e(v,DXe),e(v,Ag),e(Ag,_U),e(_U,NXe),e(Ag,qXe),e(Ag,$B),e($B,OXe),e(Ag,GXe),e(v,XXe),e(v,Lg),e(Lg,uU),e(uU,VXe),e(Lg,zXe),e(Lg,IB),e(IB,WXe),e(Lg,QXe),e(v,HXe),e(v,Bg),e(Bg,bU),e(bU,UXe),e(Bg,JXe),e(Bg,jB),e(jB,YXe),e(Bg,KXe),e(mo,ZXe),e(mo,vU),e(vU,eVe),e(mo,oVe),g(iE,mo,null),e(Wo,rVe),e(Wo,xg),g(dE,xg,null),e(xg,tVe),e(xg,TU),e(TU,aVe),b(c,Bxe,u),b(c,Qi,u),e(Qi,kg),e(kg,FU),g(cE,FU,null),e(Qi,nVe),e(Qi,CU),e(CU,sVe),b(c,xxe,u),b(c,Qo,u),g(fE,Qo,null),e(Qo,lVe),e(Qo,mE),e(mE,iVe),e(mE,DB),e(DB,dVe),e(mE,cVe),e(Qo,fVe),e(Qo,gE),e(gE,mVe),e(gE,MU),e(MU,gVe),e(gE,hVe),e(Qo,pVe),e(Qo,go),g(hE,go,null),e(go,_Ve),e(go,EU),e(EU,uVe),e(go,bVe),e(go,Ga),e(Ga,vVe),e(Ga,yU),e(yU,TVe),e(Ga,FVe),e(Ga,wU),e(wU,CVe),e(Ga,MVe),e(Ga,AU),e(AU,EVe),e(Ga,yVe),e(go,wVe),e(go,E),e(E,Wn),e(Wn,LU),e(LU,AVe),e(Wn,LVe),e(Wn,NB),e(NB,BVe),e(Wn,xVe),e(Wn,qB),e(qB,kVe),e(Wn,RVe),e(E,SVe),e(E,Qn),e(Qn,BU),e(BU,PVe),e(Qn,$Ve),e(Qn,OB),e(OB,IVe),e(Qn,jVe),e(Qn,GB),e(GB,DVe),e(Qn,NVe),e(E,qVe),e(E,Hn),e(Hn,xU),e(xU,OVe),e(Hn,GVe),e(Hn,XB),e(XB,XVe),e(Hn,VVe),e(Hn,VB),e(VB,zVe),e(Hn,WVe),e(E,QVe),e(E,Rg),e(Rg,kU),e(kU,HVe),e(Rg,UVe),e(Rg,zB),e(zB,JVe),e(Rg,YVe),e(E,KVe),e(E,Un),e(Un,RU),e(RU,ZVe),e(Un,eze),e(Un,WB),e(WB,oze),e(Un,rze),e(Un,QB),e(QB,tze),e(Un,aze),e(E,nze),e(E,Sg),e(Sg,SU),e(SU,sze),e(Sg,lze),e(Sg,HB),e(HB,ize),e(Sg,dze),e(E,cze),e(E,Pg),e(Pg,PU),e(PU,fze),e(Pg,mze),e(Pg,UB),e(UB,gze),e(Pg,hze),e(E,pze),e(E,$g),e($g,$U),e($U,_ze),e($g,uze),e($g,JB),e(JB,bze),e($g,vze),e(E,Tze),e(E,Jn),e(Jn,IU),e(IU,Fze),e(Jn,Cze),e(Jn,YB),e(YB,Mze),e(Jn,Eze),e(Jn,KB),e(KB,yze),e(Jn,wze),e(E,Aze),e(E,Yn),e(Yn,jU),e(jU,Lze),e(Yn,Bze),e(Yn,ZB),e(ZB,xze),e(Yn,kze),e(Yn,ex),e(ex,Rze),e(Yn,Sze),e(E,Pze),e(E,Kn),e(Kn,DU),e(DU,$ze),e(Kn,Ize),e(Kn,ox),e(ox,jze),e(Kn,Dze),e(Kn,rx),e(rx,Nze),e(Kn,qze),e(E,Oze),e(E,Ig),e(Ig,NU),e(NU,Gze),e(Ig,Xze),e(Ig,tx),e(tx,Vze),e(Ig,zze),e(E,Wze),e(E,jg),e(jg,qU),e(qU,Qze),e(jg,Hze),e(jg,ax),e(ax,Uze),e(jg,Jze),e(E,Yze),e(E,Zn),e(Zn,OU),e(OU,Kze),e(Zn,Zze),e(Zn,nx),e(nx,eWe),e(Zn,oWe),e(Zn,sx),e(sx,rWe),e(Zn,tWe),e(E,aWe),e(E,Dg),e(Dg,GU),e(GU,nWe),e(Dg,sWe),e(Dg,lx),e(lx,lWe),e(Dg,iWe),e(E,dWe),e(E,es),e(es,XU),e(XU,cWe),e(es,fWe),e(es,ix),e(ix,mWe),e(es,gWe),e(es,dx),e(dx,hWe),e(es,pWe),e(E,_We),e(E,os),e(os,VU),e(VU,uWe),e(os,bWe),e(os,cx),e(cx,vWe),e(os,TWe),e(os,fx),e(fx,FWe),e(os,CWe),e(E,MWe),e(E,rs),e(rs,zU),e(zU,EWe),e(rs,yWe),e(rs,mx),e(mx,wWe),e(rs,AWe),e(rs,WU),e(WU,LWe),e(rs,BWe),e(E,xWe),e(E,Ng),e(Ng,QU),e(QU,kWe),e(Ng,RWe),e(Ng,gx),e(gx,SWe),e(Ng,PWe),e(E,$We),e(E,ts),e(ts,HU),e(HU,IWe),e(ts,jWe),e(ts,hx),e(hx,DWe),e(ts,NWe),e(ts,px),e(px,qWe),e(ts,OWe),e(E,GWe),e(E,qg),e(qg,UU),e(UU,XWe),e(qg,VWe),e(qg,_x),e(_x,zWe),e(qg,WWe),e(E,QWe),e(E,as),e(as,JU),e(JU,HWe),e(as,UWe),e(as,ux),e(ux,JWe),e(as,YWe),e(as,bx),e(bx,KWe),e(as,ZWe),e(E,eQe),e(E,ns),e(ns,YU),e(YU,oQe),e(ns,rQe),e(ns,vx),e(vx,tQe),e(ns,aQe),e(ns,Tx),e(Tx,nQe),e(ns,sQe),e(E,lQe),e(E,ss),e(ss,KU),e(KU,iQe),e(ss,dQe),e(ss,Fx),e(Fx,cQe),e(ss,fQe),e(ss,Cx),e(Cx,mQe),e(ss,gQe),e(E,hQe),e(E,Og),e(Og,ZU),e(ZU,pQe),e(Og,_Qe),e(Og,Mx),e(Mx,uQe),e(Og,bQe),e(E,vQe),e(E,ls),e(ls,eJ),e(eJ,TQe),e(ls,FQe),e(ls,Ex),e(Ex,CQe),e(ls,MQe),e(ls,yx),e(yx,EQe),e(ls,yQe),e(E,wQe),e(E,Gg),e(Gg,oJ),e(oJ,AQe),e(Gg,LQe),e(Gg,wx),e(wx,BQe),e(Gg,xQe),e(E,kQe),e(E,is),e(is,rJ),e(rJ,RQe),e(is,SQe),e(is,Ax),e(Ax,PQe),e(is,$Qe),e(is,Lx),e(Lx,IQe),e(is,jQe),e(E,DQe),e(E,ds),e(ds,tJ),e(tJ,NQe),e(ds,qQe),e(ds,Bx),e(Bx,OQe),e(ds,GQe),e(ds,xx),e(xx,XQe),e(ds,VQe),e(E,zQe),e(E,cs),e(cs,aJ),e(aJ,WQe),e(cs,QQe),e(cs,kx),e(kx,HQe),e(cs,UQe),e(cs,Rx),e(Rx,JQe),e(cs,YQe),e(E,KQe),e(E,fs),e(fs,nJ),e(nJ,ZQe),e(fs,eHe),e(fs,Sx),e(Sx,oHe),e(fs,rHe),e(fs,Px),e(Px,tHe),e(fs,aHe),e(E,nHe),e(E,Xg),e(Xg,sJ),e(sJ,sHe),e(Xg,lHe),e(Xg,$x),e($x,iHe),e(Xg,dHe),e(E,cHe),e(E,ms),e(ms,lJ),e(lJ,fHe),e(ms,mHe),e(ms,Ix),e(Ix,gHe),e(ms,hHe),e(ms,jx),e(jx,pHe),e(ms,_He),e(E,uHe),e(E,gs),e(gs,iJ),e(iJ,bHe),e(gs,vHe),e(gs,Dx),e(Dx,THe),e(gs,FHe),e(gs,Nx),e(Nx,CHe),e(gs,MHe),e(E,EHe),e(E,hs),e(hs,dJ),e(dJ,yHe),e(hs,wHe),e(hs,qx),e(qx,AHe),e(hs,LHe),e(hs,Ox),e(Ox,BHe),e(hs,xHe),e(E,kHe),e(E,ps),e(ps,cJ),e(cJ,RHe),e(ps,SHe),e(ps,Gx),e(Gx,PHe),e(ps,$He),e(ps,Xx),e(Xx,IHe),e(ps,jHe),e(E,DHe),e(E,_s),e(_s,fJ),e(fJ,NHe),e(_s,qHe),e(_s,Vx),e(Vx,OHe),e(_s,GHe),e(_s,zx),e(zx,XHe),e(_s,VHe),e(E,zHe),e(E,us),e(us,mJ),e(mJ,WHe),e(us,QHe),e(us,Wx),e(Wx,HHe),e(us,UHe),e(us,Qx),e(Qx,JHe),e(us,YHe),e(E,KHe),e(E,Vg),e(Vg,gJ),e(gJ,ZHe),e(Vg,eUe),e(Vg,Hx),e(Hx,oUe),e(Vg,rUe),e(E,tUe),e(E,bs),e(bs,hJ),e(hJ,aUe),e(bs,nUe),e(bs,Ux),e(Ux,sUe),e(bs,lUe),e(bs,Jx),e(Jx,iUe),e(bs,dUe),e(E,cUe),e(E,zg),e(zg,pJ),e(pJ,fUe),e(zg,mUe),e(zg,Yx),e(Yx,gUe),e(zg,hUe),e(E,pUe),e(E,Wg),e(Wg,_J),e(_J,_Ue),e(Wg,uUe),e(Wg,Kx),e(Kx,bUe),e(Wg,vUe),e(E,TUe),e(E,vs),e(vs,uJ),e(uJ,FUe),e(vs,CUe),e(vs,Zx),e(Zx,MUe),e(vs,EUe),e(vs,ek),e(ek,yUe),e(vs,wUe),e(E,AUe),e(E,Ts),e(Ts,bJ),e(bJ,LUe),e(Ts,BUe),e(Ts,ok),e(ok,xUe),e(Ts,kUe),e(Ts,rk),e(rk,RUe),e(Ts,SUe),e(E,PUe),e(E,Qg),e(Qg,vJ),e(vJ,$Ue),e(Qg,IUe),e(Qg,tk),e(tk,jUe),e(Qg,DUe),e(E,NUe),e(E,Fs),e(Fs,TJ),e(TJ,qUe),e(Fs,OUe),e(Fs,ak),e(ak,GUe),e(Fs,XUe),e(Fs,nk),e(nk,VUe),e(Fs,zUe),e(E,WUe),e(E,Cs),e(Cs,FJ),e(FJ,QUe),e(Cs,HUe),e(Cs,sk),e(sk,UUe),e(Cs,JUe),e(Cs,lk),e(lk,YUe),e(Cs,KUe),e(E,ZUe),e(E,Ms),e(Ms,CJ),e(CJ,eJe),e(Ms,oJe),e(Ms,ik),e(ik,rJe),e(Ms,tJe),e(Ms,dk),e(dk,aJe),e(Ms,nJe),e(E,sJe),e(E,Es),e(Es,MJ),e(MJ,lJe),e(Es,iJe),e(Es,ck),e(ck,dJe),e(Es,cJe),e(Es,fk),e(fk,fJe),e(Es,mJe),e(E,gJe),e(E,ys),e(ys,EJ),e(EJ,hJe),e(ys,pJe),e(ys,mk),e(mk,_Je),e(ys,uJe),e(ys,gk),e(gk,bJe),e(ys,vJe),e(E,TJe),e(E,Hg),e(Hg,yJ),e(yJ,FJe),e(Hg,CJe),e(Hg,hk),e(hk,MJe),e(Hg,EJe),e(E,yJe),e(E,Ug),e(Ug,wJ),e(wJ,wJe),e(Ug,AJe),e(Ug,pk),e(pk,LJe),e(Ug,BJe),e(E,xJe),e(E,Jg),e(Jg,AJ),e(AJ,kJe),e(Jg,RJe),e(Jg,_k),e(_k,SJe),e(Jg,PJe),e(E,$Je),e(E,Yg),e(Yg,LJ),e(LJ,IJe),e(Yg,jJe),e(Yg,uk),e(uk,DJe),e(Yg,NJe),e(E,qJe),e(E,ws),e(ws,BJ),e(BJ,OJe),e(ws,GJe),e(ws,bk),e(bk,XJe),e(ws,VJe),e(ws,vk),e(vk,zJe),e(ws,WJe),e(E,QJe),e(E,Kg),e(Kg,xJ),e(xJ,HJe),e(Kg,UJe),e(Kg,Tk),e(Tk,JJe),e(Kg,YJe),e(E,KJe),e(E,As),e(As,kJ),e(kJ,ZJe),e(As,eYe),e(As,Fk),e(Fk,oYe),e(As,rYe),e(As,Ck),e(Ck,tYe),e(As,aYe),e(E,nYe),e(E,Ls),e(Ls,RJ),e(RJ,sYe),e(Ls,lYe),e(Ls,Mk),e(Mk,iYe),e(Ls,dYe),e(Ls,Ek),e(Ek,cYe),e(Ls,fYe),e(E,mYe),e(E,Bs),e(Bs,SJ),e(SJ,gYe),e(Bs,hYe),e(Bs,yk),e(yk,pYe),e(Bs,_Ye),e(Bs,wk),e(wk,uYe),e(Bs,bYe),e(E,vYe),e(E,xs),e(xs,PJ),e(PJ,TYe),e(xs,FYe),e(xs,Ak),e(Ak,CYe),e(xs,MYe),e(xs,Lk),e(Lk,EYe),e(xs,yYe),e(E,wYe),e(E,ks),e(ks,$J),e($J,AYe),e(ks,LYe),e(ks,Bk),e(Bk,BYe),e(ks,xYe),e(ks,xk),e(xk,kYe),e(ks,RYe),e(E,SYe),e(E,Rs),e(Rs,IJ),e(IJ,PYe),e(Rs,$Ye),e(Rs,kk),e(kk,IYe),e(Rs,jYe),e(Rs,Rk),e(Rk,DYe),e(Rs,NYe),e(E,qYe),e(E,Zg),e(Zg,jJ),e(jJ,OYe),e(Zg,GYe),e(Zg,Sk),e(Sk,XYe),e(Zg,VYe),e(E,zYe),e(E,eh),e(eh,DJ),e(DJ,WYe),e(eh,QYe),e(eh,Pk),e(Pk,HYe),e(eh,UYe),e(E,JYe),e(E,Ss),e(Ss,NJ),e(NJ,YYe),e(Ss,KYe),e(Ss,$k),e($k,ZYe),e(Ss,eKe),e(Ss,Ik),e(Ik,oKe),e(Ss,rKe),e(E,tKe),e(E,Ps),e(Ps,qJ),e(qJ,aKe),e(Ps,nKe),e(Ps,jk),e(jk,sKe),e(Ps,lKe),e(Ps,Dk),e(Dk,iKe),e(Ps,dKe),e(E,cKe),e(E,$s),e($s,OJ),e(OJ,fKe),e($s,mKe),e($s,Nk),e(Nk,gKe),e($s,hKe),e($s,qk),e(qk,pKe),e($s,_Ke),e(E,uKe),e(E,oh),e(oh,GJ),e(GJ,bKe),e(oh,vKe),e(oh,Ok),e(Ok,TKe),e(oh,FKe),e(E,CKe),e(E,rh),e(rh,XJ),e(XJ,MKe),e(rh,EKe),e(rh,Gk),e(Gk,yKe),e(rh,wKe),e(E,AKe),e(E,th),e(th,VJ),e(VJ,LKe),e(th,BKe),e(th,Xk),e(Xk,xKe),e(th,kKe),e(E,RKe),e(E,ah),e(ah,zJ),e(zJ,SKe),e(ah,PKe),e(ah,Vk),e(Vk,$Ke),e(ah,IKe),e(E,jKe),e(E,Is),e(Is,WJ),e(WJ,DKe),e(Is,NKe),e(Is,zk),e(zk,qKe),e(Is,OKe),e(Is,Wk),e(Wk,GKe),e(Is,XKe),e(E,VKe),e(E,nh),e(nh,QJ),e(QJ,zKe),e(nh,WKe),e(nh,Qk),e(Qk,QKe),e(nh,HKe),e(E,UKe),e(E,sh),e(sh,HJ),e(HJ,JKe),e(sh,YKe),e(sh,Hk),e(Hk,KKe),e(sh,ZKe),e(E,eZe),e(E,js),e(js,UJ),e(UJ,oZe),e(js,rZe),e(js,Uk),e(Uk,tZe),e(js,aZe),e(js,Jk),e(Jk,nZe),e(js,sZe),e(E,lZe),e(E,Ds),e(Ds,JJ),e(JJ,iZe),e(Ds,dZe),e(Ds,Yk),e(Yk,cZe),e(Ds,fZe),e(Ds,Kk),e(Kk,mZe),e(Ds,gZe),e(go,hZe),e(go,YJ),e(YJ,pZe),e(go,_Ze),g(pE,go,null),e(Qo,uZe),e(Qo,lh),g(_E,lh,null),e(lh,bZe),e(lh,KJ),e(KJ,vZe),b(c,kxe,u),b(c,Hi,u),e(Hi,ih),e(ih,ZJ),g(uE,ZJ,null),e(Hi,TZe),e(Hi,eY),e(eY,FZe),b(c,Rxe,u),b(c,Ho,u),g(bE,Ho,null),e(Ho,CZe),e(Ho,vE),e(vE,MZe),e(vE,Zk),e(Zk,EZe),e(vE,yZe),e(Ho,wZe),e(Ho,TE),e(TE,AZe),e(TE,oY),e(oY,LZe),e(TE,BZe),e(Ho,xZe),e(Ho,Ie),g(FE,Ie,null),e(Ie,kZe),e(Ie,rY),e(rY,RZe),e(Ie,SZe),e(Ie,Xa),e(Xa,PZe),e(Xa,tY),e(tY,$Ze),e(Xa,IZe),e(Xa,aY),e(aY,jZe),e(Xa,DZe),e(Xa,nY),e(nY,NZe),e(Xa,qZe),e(Ie,OZe),e(Ie,te),e(te,dh),e(dh,sY),e(sY,GZe),e(dh,XZe),e(dh,eR),e(eR,VZe),e(dh,zZe),e(te,WZe),e(te,ch),e(ch,lY),e(lY,QZe),e(ch,HZe),e(ch,oR),e(oR,UZe),e(ch,JZe),e(te,YZe),e(te,fh),e(fh,iY),e(iY,KZe),e(fh,ZZe),e(fh,rR),e(rR,eeo),e(fh,oeo),e(te,reo),e(te,mh),e(mh,dY),e(dY,teo),e(mh,aeo),e(mh,tR),e(tR,neo),e(mh,seo),e(te,leo),e(te,gh),e(gh,cY),e(cY,ieo),e(gh,deo),e(gh,aR),e(aR,ceo),e(gh,feo),e(te,meo),e(te,hh),e(hh,fY),e(fY,geo),e(hh,heo),e(hh,nR),e(nR,peo),e(hh,_eo),e(te,ueo),e(te,ph),e(ph,mY),e(mY,beo),e(ph,veo),e(ph,sR),e(sR,Teo),e(ph,Feo),e(te,Ceo),e(te,_h),e(_h,gY),e(gY,Meo),e(_h,Eeo),e(_h,lR),e(lR,yeo),e(_h,weo),e(te,Aeo),e(te,uh),e(uh,hY),e(hY,Leo),e(uh,Beo),e(uh,iR),e(iR,xeo),e(uh,keo),e(te,Reo),e(te,bh),e(bh,pY),e(pY,Seo),e(bh,Peo),e(bh,dR),e(dR,$eo),e(bh,Ieo),e(te,jeo),e(te,vh),e(vh,_Y),e(_Y,Deo),e(vh,Neo),e(vh,cR),e(cR,qeo),e(vh,Oeo),e(te,Geo),e(te,Th),e(Th,uY),e(uY,Xeo),e(Th,Veo),e(Th,fR),e(fR,zeo),e(Th,Weo),e(te,Qeo),e(te,Fh),e(Fh,bY),e(bY,Heo),e(Fh,Ueo),e(Fh,mR),e(mR,Jeo),e(Fh,Yeo),e(te,Keo),e(te,Ch),e(Ch,vY),e(vY,Zeo),e(Ch,eoo),e(Ch,gR),e(gR,ooo),e(Ch,roo),e(te,too),e(te,Mh),e(Mh,TY),e(TY,aoo),e(Mh,noo),e(Mh,hR),e(hR,soo),e(Mh,loo),e(te,ioo),e(te,Eh),e(Eh,FY),e(FY,doo),e(Eh,coo),e(Eh,pR),e(pR,foo),e(Eh,moo),e(te,goo),e(te,yh),e(yh,CY),e(CY,hoo),e(yh,poo),e(yh,_R),e(_R,_oo),e(yh,uoo),e(Ie,boo),g(wh,Ie,null),e(Ie,voo),e(Ie,MY),e(MY,Too),e(Ie,Foo),g(CE,Ie,null),e(Ho,Coo),e(Ho,Ah),g(ME,Ah,null),e(Ah,Moo),e(Ah,EY),e(EY,Eoo),b(c,Sxe,u),b(c,Ui,u),e(Ui,Lh),e(Lh,yY),g(EE,yY,null),e(Ui,yoo),e(Ui,wY),e(wY,woo),b(c,Pxe,u),b(c,Uo,u),g(yE,Uo,null),e(Uo,Aoo),e(Uo,wE),e(wE,Loo),e(wE,uR),e(uR,Boo),e(wE,xoo),e(Uo,koo),e(Uo,AE),e(AE,Roo),e(AE,AY),e(AY,Soo),e(AE,Poo),e(Uo,$oo),e(Uo,je),g(LE,je,null),e(je,Ioo),e(je,LY),e(LY,joo),e(je,Doo),e(je,Ji),e(Ji,Noo),e(Ji,BY),e(BY,qoo),e(Ji,Ooo),e(Ji,xY),e(xY,Goo),e(Ji,Xoo),e(je,Voo),e(je,xe),e(xe,Bh),e(Bh,kY),e(kY,zoo),e(Bh,Woo),e(Bh,bR),e(bR,Qoo),e(Bh,Hoo),e(xe,Uoo),e(xe,xh),e(xh,RY),e(RY,Joo),e(xh,Yoo),e(xh,vR),e(vR,Koo),e(xh,Zoo),e(xe,ero),e(xe,kh),e(kh,SY),e(SY,oro),e(kh,rro),e(kh,TR),e(TR,tro),e(kh,aro),e(xe,nro),e(xe,Rh),e(Rh,PY),e(PY,sro),e(Rh,lro),e(Rh,FR),e(FR,iro),e(Rh,dro),e(xe,cro),e(xe,Sh),e(Sh,$Y),e($Y,fro),e(Sh,mro),e(Sh,CR),e(CR,gro),e(Sh,hro),e(xe,pro),e(xe,Ph),e(Ph,IY),e(IY,_ro),e(Ph,uro),e(Ph,MR),e(MR,bro),e(Ph,vro),e(xe,Tro),e(xe,$h),e($h,jY),e(jY,Fro),e($h,Cro),e($h,ER),e(ER,Mro),e($h,Ero),e(xe,yro),e(xe,Ih),e(Ih,DY),e(DY,wro),e(Ih,Aro),e(Ih,yR),e(yR,Lro),e(Ih,Bro),e(je,xro),g(jh,je,null),e(je,kro),e(je,NY),e(NY,Rro),e(je,Sro),g(BE,je,null),e(Uo,Pro),e(Uo,Dh),g(xE,Dh,null),e(Dh,$ro),e(Dh,qY),e(qY,Iro),b(c,$xe,u),b(c,Yi,u),e(Yi,Nh),e(Nh,OY),g(kE,OY,null),e(Yi,jro),e(Yi,GY),e(GY,Dro),b(c,Ixe,u),b(c,Jo,u),g(RE,Jo,null),e(Jo,Nro),e(Jo,Ki),e(Ki,qro),e(Ki,XY),e(XY,Oro),e(Ki,Gro),e(Ki,VY),e(VY,Xro),e(Ki,Vro),e(Jo,zro),e(Jo,SE),e(SE,Wro),e(SE,zY),e(zY,Qro),e(SE,Hro),e(Jo,Uro),e(Jo,Vr),g(PE,Vr,null),e(Vr,Jro),e(Vr,WY),e(WY,Yro),e(Vr,Kro),e(Vr,Zi),e(Zi,Zro),e(Zi,QY),e(QY,eto),e(Zi,oto),e(Zi,HY),e(HY,rto),e(Zi,tto),e(Vr,ato),e(Vr,UY),e(UY,nto),e(Vr,sto),g($E,Vr,null),e(Jo,lto),e(Jo,De),g(IE,De,null),e(De,ito),e(De,JY),e(JY,dto),e(De,cto),e(De,Va),e(Va,fto),e(Va,YY),e(YY,mto),e(Va,gto),e(Va,KY),e(KY,hto),e(Va,pto),e(Va,ZY),e(ZY,_to),e(Va,uto),e(De,bto),e(De,F),e(F,qh),e(qh,eK),e(eK,vto),e(qh,Tto),e(qh,wR),e(wR,Fto),e(qh,Cto),e(F,Mto),e(F,Oh),e(Oh,oK),e(oK,Eto),e(Oh,yto),e(Oh,AR),e(AR,wto),e(Oh,Ato),e(F,Lto),e(F,Gh),e(Gh,rK),e(rK,Bto),e(Gh,xto),e(Gh,LR),e(LR,kto),e(Gh,Rto),e(F,Sto),e(F,Xh),e(Xh,tK),e(tK,Pto),e(Xh,$to),e(Xh,BR),e(BR,Ito),e(Xh,jto),e(F,Dto),e(F,Vh),e(Vh,aK),e(aK,Nto),e(Vh,qto),e(Vh,xR),e(xR,Oto),e(Vh,Gto),e(F,Xto),e(F,zh),e(zh,nK),e(nK,Vto),e(zh,zto),e(zh,kR),e(kR,Wto),e(zh,Qto),e(F,Hto),e(F,Wh),e(Wh,sK),e(sK,Uto),e(Wh,Jto),e(Wh,RR),e(RR,Yto),e(Wh,Kto),e(F,Zto),e(F,Qh),e(Qh,lK),e(lK,eao),e(Qh,oao),e(Qh,SR),e(SR,rao),e(Qh,tao),e(F,aao),e(F,Hh),e(Hh,iK),e(iK,nao),e(Hh,sao),e(Hh,PR),e(PR,lao),e(Hh,iao),e(F,dao),e(F,Uh),e(Uh,dK),e(dK,cao),e(Uh,fao),e(Uh,$R),e($R,mao),e(Uh,gao),e(F,hao),e(F,Jh),e(Jh,cK),e(cK,pao),e(Jh,_ao),e(Jh,IR),e(IR,uao),e(Jh,bao),e(F,vao),e(F,Yh),e(Yh,fK),e(fK,Tao),e(Yh,Fao),e(Yh,jR),e(jR,Cao),e(Yh,Mao),e(F,Eao),e(F,Kh),e(Kh,mK),e(mK,yao),e(Kh,wao),e(Kh,DR),e(DR,Aao),e(Kh,Lao),e(F,Bao),e(F,Zh),e(Zh,gK),e(gK,xao),e(Zh,kao),e(Zh,NR),e(NR,Rao),e(Zh,Sao),e(F,Pao),e(F,ep),e(ep,hK),e(hK,$ao),e(ep,Iao),e(ep,qR),e(qR,jao),e(ep,Dao),e(F,Nao),e(F,op),e(op,pK),e(pK,qao),e(op,Oao),e(op,OR),e(OR,Gao),e(op,Xao),e(F,Vao),e(F,rp),e(rp,_K),e(_K,zao),e(rp,Wao),e(rp,GR),e(GR,Qao),e(rp,Hao),e(F,Uao),e(F,tp),e(tp,uK),e(uK,Jao),e(tp,Yao),e(tp,XR),e(XR,Kao),e(tp,Zao),e(F,eno),e(F,ap),e(ap,bK),e(bK,ono),e(ap,rno),e(ap,VR),e(VR,tno),e(ap,ano),e(F,nno),e(F,np),e(np,vK),e(vK,sno),e(np,lno),e(np,zR),e(zR,ino),e(np,dno),e(F,cno),e(F,sp),e(sp,TK),e(TK,fno),e(sp,mno),e(sp,WR),e(WR,gno),e(sp,hno),e(F,pno),e(F,lp),e(lp,FK),e(FK,_no),e(lp,uno),e(lp,QR),e(QR,bno),e(lp,vno),e(F,Tno),e(F,ip),e(ip,CK),e(CK,Fno),e(ip,Cno),e(ip,HR),e(HR,Mno),e(ip,Eno),e(F,yno),e(F,dp),e(dp,MK),e(MK,wno),e(dp,Ano),e(dp,UR),e(UR,Lno),e(dp,Bno),e(F,xno),e(F,cp),e(cp,EK),e(EK,kno),e(cp,Rno),e(cp,JR),e(JR,Sno),e(cp,Pno),e(F,$no),e(F,fp),e(fp,yK),e(yK,Ino),e(fp,jno),e(fp,YR),e(YR,Dno),e(fp,Nno),e(F,qno),e(F,mp),e(mp,wK),e(wK,Ono),e(mp,Gno),e(mp,KR),e(KR,Xno),e(mp,Vno),e(F,zno),e(F,Ns),e(Ns,AK),e(AK,Wno),e(Ns,Qno),e(Ns,ZR),e(ZR,Hno),e(Ns,Uno),e(Ns,eS),e(eS,Jno),e(Ns,Yno),e(F,Kno),e(F,gp),e(gp,LK),e(LK,Zno),e(gp,eso),e(gp,oS),e(oS,oso),e(gp,rso),e(F,tso),e(F,hp),e(hp,BK),e(BK,aso),e(hp,nso),e(hp,rS),e(rS,sso),e(hp,lso),e(F,iso),e(F,pp),e(pp,xK),e(xK,dso),e(pp,cso),e(pp,tS),e(tS,fso),e(pp,mso),e(F,gso),e(F,_p),e(_p,kK),e(kK,hso),e(_p,pso),e(_p,aS),e(aS,_so),e(_p,uso),e(F,bso),e(F,up),e(up,RK),e(RK,vso),e(up,Tso),e(up,nS),e(nS,Fso),e(up,Cso),e(F,Mso),e(F,bp),e(bp,SK),e(SK,Eso),e(bp,yso),e(bp,sS),e(sS,wso),e(bp,Aso),e(F,Lso),e(F,vp),e(vp,PK),e(PK,Bso),e(vp,xso),e(vp,lS),e(lS,kso),e(vp,Rso),e(F,Sso),e(F,Tp),e(Tp,$K),e($K,Pso),e(Tp,$so),e(Tp,iS),e(iS,Iso),e(Tp,jso),e(F,Dso),e(F,Fp),e(Fp,IK),e(IK,Nso),e(Fp,qso),e(Fp,dS),e(dS,Oso),e(Fp,Gso),e(F,Xso),e(F,Cp),e(Cp,jK),e(jK,Vso),e(Cp,zso),e(Cp,cS),e(cS,Wso),e(Cp,Qso),e(F,Hso),e(F,Mp),e(Mp,DK),e(DK,Uso),e(Mp,Jso),e(Mp,fS),e(fS,Yso),e(Mp,Kso),e(F,Zso),e(F,Ep),e(Ep,NK),e(NK,elo),e(Ep,olo),e(Ep,mS),e(mS,rlo),e(Ep,tlo),e(F,alo),e(F,yp),e(yp,qK),e(qK,nlo),e(yp,slo),e(yp,gS),e(gS,llo),e(yp,ilo),e(F,dlo),e(F,wp),e(wp,OK),e(OK,clo),e(wp,flo),e(wp,hS),e(hS,mlo),e(wp,glo),e(F,hlo),e(F,Ap),e(Ap,GK),e(GK,plo),e(Ap,_lo),e(Ap,pS),e(pS,ulo),e(Ap,blo),e(F,vlo),e(F,Lp),e(Lp,XK),e(XK,Tlo),e(Lp,Flo),e(Lp,_S),e(_S,Clo),e(Lp,Mlo),e(F,Elo),e(F,Bp),e(Bp,VK),e(VK,ylo),e(Bp,wlo),e(Bp,uS),e(uS,Alo),e(Bp,Llo),e(F,Blo),e(F,xp),e(xp,zK),e(zK,xlo),e(xp,klo),e(xp,bS),e(bS,Rlo),e(xp,Slo),e(F,Plo),e(F,kp),e(kp,WK),e(WK,$lo),e(kp,Ilo),e(kp,vS),e(vS,jlo),e(kp,Dlo),e(F,Nlo),e(F,Rp),e(Rp,QK),e(QK,qlo),e(Rp,Olo),e(Rp,TS),e(TS,Glo),e(Rp,Xlo),e(F,Vlo),e(F,Sp),e(Sp,HK),e(HK,zlo),e(Sp,Wlo),e(Sp,FS),e(FS,Qlo),e(Sp,Hlo),e(F,Ulo),e(F,Pp),e(Pp,UK),e(UK,Jlo),e(Pp,Ylo),e(Pp,CS),e(CS,Klo),e(Pp,Zlo),e(F,eio),e(F,$p),e($p,JK),e(JK,oio),e($p,rio),e($p,MS),e(MS,tio),e($p,aio),e(F,nio),e(F,Ip),e(Ip,YK),e(YK,sio),e(Ip,lio),e(Ip,ES),e(ES,iio),e(Ip,dio),e(F,cio),e(F,jp),e(jp,KK),e(KK,fio),e(jp,mio),e(jp,yS),e(yS,gio),e(jp,hio),e(F,pio),e(F,Dp),e(Dp,ZK),e(ZK,_io),e(Dp,uio),e(Dp,wS),e(wS,bio),e(Dp,vio),e(F,Tio),e(F,Np),e(Np,eZ),e(eZ,Fio),e(Np,Cio),e(Np,AS),e(AS,Mio),e(Np,Eio),e(F,yio),e(F,qp),e(qp,oZ),e(oZ,wio),e(qp,Aio),e(qp,LS),e(LS,Lio),e(qp,Bio),e(F,xio),e(F,Op),e(Op,rZ),e(rZ,kio),e(Op,Rio),e(Op,BS),e(BS,Sio),e(Op,Pio),e(F,$io),e(F,Gp),e(Gp,tZ),e(tZ,Iio),e(Gp,jio),e(Gp,xS),e(xS,Dio),e(Gp,Nio),e(F,qio),e(F,Xp),e(Xp,aZ),e(aZ,Oio),e(Xp,Gio),e(Xp,kS),e(kS,Xio),e(Xp,Vio),e(F,zio),e(F,Vp),e(Vp,nZ),e(nZ,Wio),e(Vp,Qio),e(Vp,RS),e(RS,Hio),e(Vp,Uio),e(F,Jio),e(F,zp),e(zp,sZ),e(sZ,Yio),e(zp,Kio),e(zp,SS),e(SS,Zio),e(zp,edo),e(F,odo),e(F,Wp),e(Wp,lZ),e(lZ,rdo),e(Wp,tdo),e(Wp,PS),e(PS,ado),e(Wp,ndo),e(F,sdo),e(F,Qp),e(Qp,iZ),e(iZ,ldo),e(Qp,ido),e(Qp,$S),e($S,ddo),e(Qp,cdo),e(F,fdo),e(F,Hp),e(Hp,dZ),e(dZ,mdo),e(Hp,gdo),e(Hp,IS),e(IS,hdo),e(Hp,pdo),e(F,_do),e(F,Up),e(Up,cZ),e(cZ,udo),e(Up,bdo),e(Up,jS),e(jS,vdo),e(Up,Tdo),e(F,Fdo),e(F,Jp),e(Jp,fZ),e(fZ,Cdo),e(Jp,Mdo),e(Jp,DS),e(DS,Edo),e(Jp,ydo),e(F,wdo),e(F,Yp),e(Yp,mZ),e(mZ,Ado),e(Yp,Ldo),e(Yp,NS),e(NS,Bdo),e(Yp,xdo),e(F,kdo),e(F,Kp),e(Kp,gZ),e(gZ,Rdo),e(Kp,Sdo),e(Kp,qS),e(qS,Pdo),e(Kp,$do),e(F,Ido),e(F,Zp),e(Zp,hZ),e(hZ,jdo),e(Zp,Ddo),e(Zp,OS),e(OS,Ndo),e(Zp,qdo),e(F,Odo),e(F,e_),e(e_,pZ),e(pZ,Gdo),e(e_,Xdo),e(e_,GS),e(GS,Vdo),e(e_,zdo),e(F,Wdo),e(F,o_),e(o_,_Z),e(_Z,Qdo),e(o_,Hdo),e(o_,XS),e(XS,Udo),e(o_,Jdo),e(F,Ydo),e(F,r_),e(r_,uZ),e(uZ,Kdo),e(r_,Zdo),e(r_,VS),e(VS,eco),e(r_,oco),e(F,rco),e(F,t_),e(t_,bZ),e(bZ,tco),e(t_,aco),e(t_,zS),e(zS,nco),e(t_,sco),e(F,lco),e(F,a_),e(a_,vZ),e(vZ,ico),e(a_,dco),e(a_,WS),e(WS,cco),e(a_,fco),e(F,mco),e(F,n_),e(n_,TZ),e(TZ,gco),e(n_,hco),e(n_,QS),e(QS,pco),e(n_,_co),e(F,uco),e(F,s_),e(s_,FZ),e(FZ,bco),e(s_,vco),e(s_,HS),e(HS,Tco),e(s_,Fco),e(F,Cco),e(F,l_),e(l_,CZ),e(CZ,Mco),e(l_,Eco),e(l_,US),e(US,yco),e(l_,wco),e(F,Aco),e(F,i_),e(i_,MZ),e(MZ,Lco),e(i_,Bco),e(i_,JS),e(JS,xco),e(i_,kco),e(F,Rco),e(F,d_),e(d_,EZ),e(EZ,Sco),e(d_,Pco),e(d_,YS),e(YS,$co),e(d_,Ico),e(F,jco),e(F,c_),e(c_,yZ),e(yZ,Dco),e(c_,Nco),e(c_,KS),e(KS,qco),e(c_,Oco),e(F,Gco),e(F,f_),e(f_,wZ),e(wZ,Xco),e(f_,Vco),e(f_,ZS),e(ZS,zco),e(f_,Wco),e(F,Qco),e(F,m_),e(m_,AZ),e(AZ,Hco),e(m_,Uco),e(m_,eP),e(eP,Jco),e(m_,Yco),e(F,Kco),e(F,g_),e(g_,LZ),e(LZ,Zco),e(g_,efo),e(g_,oP),e(oP,ofo),e(g_,rfo),e(F,tfo),e(F,h_),e(h_,BZ),e(BZ,afo),e(h_,nfo),e(h_,rP),e(rP,sfo),e(h_,lfo),e(F,ifo),e(F,p_),e(p_,xZ),e(xZ,dfo),e(p_,cfo),e(p_,tP),e(tP,ffo),e(p_,mfo),e(F,gfo),e(F,__),e(__,kZ),e(kZ,hfo),e(__,pfo),e(__,aP),e(aP,_fo),e(__,ufo),e(F,bfo),e(F,u_),e(u_,RZ),e(RZ,vfo),e(u_,Tfo),e(u_,nP),e(nP,Ffo),e(u_,Cfo),e(F,Mfo),e(F,b_),e(b_,SZ),e(SZ,Efo),e(b_,yfo),e(b_,sP),e(sP,wfo),e(b_,Afo),e(De,Lfo),e(De,v_),e(v_,Bfo),e(v_,PZ),e(PZ,xfo),e(v_,kfo),e(v_,$Z),e($Z,Rfo),e(De,Sfo),e(De,IZ),e(IZ,Pfo),e(De,$fo),g(jE,De,null),b(c,jxe,u),b(c,ed,u),e(ed,T_),e(T_,jZ),g(DE,jZ,null),e(ed,Ifo),e(ed,DZ),e(DZ,jfo),b(c,Dxe,u),b(c,Yo,u),g(NE,Yo,null),e(Yo,Dfo),e(Yo,od),e(od,Nfo),e(od,NZ),e(NZ,qfo),e(od,Ofo),e(od,qZ),e(qZ,Gfo),e(od,Xfo),e(Yo,Vfo),e(Yo,qE),e(qE,zfo),e(qE,OZ),e(OZ,Wfo),e(qE,Qfo),e(Yo,Hfo),e(Yo,zr),g(OE,zr,null),e(zr,Ufo),e(zr,GZ),e(GZ,Jfo),e(zr,Yfo),e(zr,rd),e(rd,Kfo),e(rd,XZ),e(XZ,Zfo),e(rd,emo),e(rd,VZ),e(VZ,omo),e(rd,rmo),e(zr,tmo),e(zr,zZ),e(zZ,amo),e(zr,nmo),g(GE,zr,null),e(Yo,smo),e(Yo,Ne),g(XE,Ne,null),e(Ne,lmo),e(Ne,WZ),e(WZ,imo),e(Ne,dmo),e(Ne,za),e(za,cmo),e(za,QZ),e(QZ,fmo),e(za,mmo),e(za,HZ),e(HZ,gmo),e(za,hmo),e(za,UZ),e(UZ,pmo),e(za,_mo),e(Ne,umo),e(Ne,k),e(k,F_),e(F_,JZ),e(JZ,bmo),e(F_,vmo),e(F_,lP),e(lP,Tmo),e(F_,Fmo),e(k,Cmo),e(k,C_),e(C_,YZ),e(YZ,Mmo),e(C_,Emo),e(C_,iP),e(iP,ymo),e(C_,wmo),e(k,Amo),e(k,M_),e(M_,KZ),e(KZ,Lmo),e(M_,Bmo),e(M_,dP),e(dP,xmo),e(M_,kmo),e(k,Rmo),e(k,E_),e(E_,ZZ),e(ZZ,Smo),e(E_,Pmo),e(E_,cP),e(cP,$mo),e(E_,Imo),e(k,jmo),e(k,y_),e(y_,eee),e(eee,Dmo),e(y_,Nmo),e(y_,fP),e(fP,qmo),e(y_,Omo),e(k,Gmo),e(k,w_),e(w_,oee),e(oee,Xmo),e(w_,Vmo),e(w_,mP),e(mP,zmo),e(w_,Wmo),e(k,Qmo),e(k,A_),e(A_,ree),e(ree,Hmo),e(A_,Umo),e(A_,gP),e(gP,Jmo),e(A_,Ymo),e(k,Kmo),e(k,L_),e(L_,tee),e(tee,Zmo),e(L_,ego),e(L_,hP),e(hP,ogo),e(L_,rgo),e(k,tgo),e(k,B_),e(B_,aee),e(aee,ago),e(B_,ngo),e(B_,pP),e(pP,sgo),e(B_,lgo),e(k,igo),e(k,x_),e(x_,nee),e(nee,dgo),e(x_,cgo),e(x_,_P),e(_P,fgo),e(x_,mgo),e(k,ggo),e(k,k_),e(k_,see),e(see,hgo),e(k_,pgo),e(k_,uP),e(uP,_go),e(k_,ugo),e(k,bgo),e(k,R_),e(R_,lee),e(lee,vgo),e(R_,Tgo),e(R_,bP),e(bP,Fgo),e(R_,Cgo),e(k,Mgo),e(k,S_),e(S_,iee),e(iee,Ego),e(S_,ygo),e(S_,vP),e(vP,wgo),e(S_,Ago),e(k,Lgo),e(k,P_),e(P_,dee),e(dee,Bgo),e(P_,xgo),e(P_,TP),e(TP,kgo),e(P_,Rgo),e(k,Sgo),e(k,$_),e($_,cee),e(cee,Pgo),e($_,$go),e($_,FP),e(FP,Igo),e($_,jgo),e(k,Dgo),e(k,I_),e(I_,fee),e(fee,Ngo),e(I_,qgo),e(I_,CP),e(CP,Ogo),e(I_,Ggo),e(k,Xgo),e(k,j_),e(j_,mee),e(mee,Vgo),e(j_,zgo),e(j_,MP),e(MP,Wgo),e(j_,Qgo),e(k,Hgo),e(k,D_),e(D_,gee),e(gee,Ugo),e(D_,Jgo),e(D_,EP),e(EP,Ygo),e(D_,Kgo),e(k,Zgo),e(k,N_),e(N_,hee),e(hee,eho),e(N_,oho),e(N_,yP),e(yP,rho),e(N_,tho),e(k,aho),e(k,q_),e(q_,pee),e(pee,nho),e(q_,sho),e(q_,wP),e(wP,lho),e(q_,iho),e(k,dho),e(k,O_),e(O_,_ee),e(_ee,cho),e(O_,fho),e(O_,AP),e(AP,mho),e(O_,gho),e(k,hho),e(k,G_),e(G_,uee),e(uee,pho),e(G_,_ho),e(G_,LP),e(LP,uho),e(G_,bho),e(k,vho),e(k,X_),e(X_,bee),e(bee,Tho),e(X_,Fho),e(X_,BP),e(BP,Cho),e(X_,Mho),e(k,Eho),e(k,V_),e(V_,vee),e(vee,yho),e(V_,who),e(V_,xP),e(xP,Aho),e(V_,Lho),e(k,Bho),e(k,z_),e(z_,Tee),e(Tee,xho),e(z_,kho),e(z_,kP),e(kP,Rho),e(z_,Sho),e(k,Pho),e(k,W_),e(W_,Fee),e(Fee,$ho),e(W_,Iho),e(W_,RP),e(RP,jho),e(W_,Dho),e(k,Nho),e(k,Q_),e(Q_,Cee),e(Cee,qho),e(Q_,Oho),e(Q_,SP),e(SP,Gho),e(Q_,Xho),e(k,Vho),e(k,H_),e(H_,Mee),e(Mee,zho),e(H_,Who),e(H_,PP),e(PP,Qho),e(H_,Hho),e(k,Uho),e(k,U_),e(U_,Eee),e(Eee,Jho),e(U_,Yho),e(U_,$P),e($P,Kho),e(U_,Zho),e(k,epo),e(k,J_),e(J_,yee),e(yee,opo),e(J_,rpo),e(J_,IP),e(IP,tpo),e(J_,apo),e(k,npo),e(k,Y_),e(Y_,wee),e(wee,spo),e(Y_,lpo),e(Y_,jP),e(jP,ipo),e(Y_,dpo),e(k,cpo),e(k,K_),e(K_,Aee),e(Aee,fpo),e(K_,mpo),e(K_,DP),e(DP,gpo),e(K_,hpo),e(k,ppo),e(k,Z_),e(Z_,Lee),e(Lee,_po),e(Z_,upo),e(Z_,NP),e(NP,bpo),e(Z_,vpo),e(k,Tpo),e(k,eu),e(eu,Bee),e(Bee,Fpo),e(eu,Cpo),e(eu,qP),e(qP,Mpo),e(eu,Epo),e(k,ypo),e(k,ou),e(ou,xee),e(xee,wpo),e(ou,Apo),e(ou,OP),e(OP,Lpo),e(ou,Bpo),e(k,xpo),e(k,ru),e(ru,kee),e(kee,kpo),e(ru,Rpo),e(ru,GP),e(GP,Spo),e(ru,Ppo),e(k,$po),e(k,tu),e(tu,Ree),e(Ree,Ipo),e(tu,jpo),e(tu,XP),e(XP,Dpo),e(tu,Npo),e(k,qpo),e(k,au),e(au,See),e(See,Opo),e(au,Gpo),e(au,VP),e(VP,Xpo),e(au,Vpo),e(k,zpo),e(k,nu),e(nu,Pee),e(Pee,Wpo),e(nu,Qpo),e(nu,zP),e(zP,Hpo),e(nu,Upo),e(Ne,Jpo),e(Ne,su),e(su,Ypo),e(su,$ee),e($ee,Kpo),e(su,Zpo),e(su,Iee),e(Iee,e_o),e(Ne,o_o),e(Ne,jee),e(jee,r_o),e(Ne,t_o),g(VE,Ne,null),b(c,Nxe,u),b(c,td,u),e(td,lu),e(lu,Dee),g(zE,Dee,null),e(td,a_o),e(td,Nee),e(Nee,n_o),b(c,qxe,u),b(c,Ko,u),g(WE,Ko,null),e(Ko,s_o),e(Ko,ad),e(ad,l_o),e(ad,qee),e(qee,i_o),e(ad,d_o),e(ad,Oee),e(Oee,c_o),e(ad,f_o),e(Ko,m_o),e(Ko,QE),e(QE,g_o),e(QE,Gee),e(Gee,h_o),e(QE,p_o),e(Ko,__o),e(Ko,Wr),g(HE,Wr,null),e(Wr,u_o),e(Wr,Xee),e(Xee,b_o),e(Wr,v_o),e(Wr,nd),e(nd,T_o),e(nd,Vee),e(Vee,F_o),e(nd,C_o),e(nd,zee),e(zee,M_o),e(nd,E_o),e(Wr,y_o),e(Wr,Wee),e(Wee,w_o),e(Wr,A_o),g(UE,Wr,null),e(Ko,L_o),e(Ko,qe),g(JE,qe,null),e(qe,B_o),e(qe,Qee),e(Qee,x_o),e(qe,k_o),e(qe,Wa),e(Wa,R_o),e(Wa,Hee),e(Hee,S_o),e(Wa,P_o),e(Wa,Uee),e(Uee,$_o),e(Wa,I_o),e(Wa,Jee),e(Jee,j_o),e(Wa,D_o),e(qe,N_o),e(qe,$),e($,iu),e(iu,Yee),e(Yee,q_o),e(iu,O_o),e(iu,WP),e(WP,G_o),e(iu,X_o),e($,V_o),e($,du),e(du,Kee),e(Kee,z_o),e(du,W_o),e(du,QP),e(QP,Q_o),e(du,H_o),e($,U_o),e($,cu),e(cu,Zee),e(Zee,J_o),e(cu,Y_o),e(cu,HP),e(HP,K_o),e(cu,Z_o),e($,euo),e($,fu),e(fu,eoe),e(eoe,ouo),e(fu,ruo),e(fu,UP),e(UP,tuo),e(fu,auo),e($,nuo),e($,mu),e(mu,ooe),e(ooe,suo),e(mu,luo),e(mu,JP),e(JP,iuo),e(mu,duo),e($,cuo),e($,gu),e(gu,roe),e(roe,fuo),e(gu,muo),e(gu,YP),e(YP,guo),e(gu,huo),e($,puo),e($,hu),e(hu,toe),e(toe,_uo),e(hu,uuo),e(hu,KP),e(KP,buo),e(hu,vuo),e($,Tuo),e($,pu),e(pu,aoe),e(aoe,Fuo),e(pu,Cuo),e(pu,ZP),e(ZP,Muo),e(pu,Euo),e($,yuo),e($,_u),e(_u,noe),e(noe,wuo),e(_u,Auo),e(_u,e$),e(e$,Luo),e(_u,Buo),e($,xuo),e($,uu),e(uu,soe),e(soe,kuo),e(uu,Ruo),e(uu,o$),e(o$,Suo),e(uu,Puo),e($,$uo),e($,bu),e(bu,loe),e(loe,Iuo),e(bu,juo),e(bu,r$),e(r$,Duo),e(bu,Nuo),e($,quo),e($,vu),e(vu,ioe),e(ioe,Ouo),e(vu,Guo),e(vu,t$),e(t$,Xuo),e(vu,Vuo),e($,zuo),e($,Tu),e(Tu,doe),e(doe,Wuo),e(Tu,Quo),e(Tu,a$),e(a$,Huo),e(Tu,Uuo),e($,Juo),e($,Fu),e(Fu,coe),e(coe,Yuo),e(Fu,Kuo),e(Fu,n$),e(n$,Zuo),e(Fu,e0o),e($,o0o),e($,Cu),e(Cu,foe),e(foe,r0o),e(Cu,t0o),e(Cu,s$),e(s$,a0o),e(Cu,n0o),e($,s0o),e($,Mu),e(Mu,moe),e(moe,l0o),e(Mu,i0o),e(Mu,l$),e(l$,d0o),e(Mu,c0o),e($,f0o),e($,Eu),e(Eu,goe),e(goe,m0o),e(Eu,g0o),e(Eu,i$),e(i$,h0o),e(Eu,p0o),e($,_0o),e($,yu),e(yu,hoe),e(hoe,u0o),e(yu,b0o),e(yu,d$),e(d$,v0o),e(yu,T0o),e($,F0o),e($,wu),e(wu,poe),e(poe,C0o),e(wu,M0o),e(wu,c$),e(c$,E0o),e(wu,y0o),e($,w0o),e($,Au),e(Au,_oe),e(_oe,A0o),e(Au,L0o),e(Au,f$),e(f$,B0o),e(Au,x0o),e($,k0o),e($,Lu),e(Lu,uoe),e(uoe,R0o),e(Lu,S0o),e(Lu,m$),e(m$,P0o),e(Lu,$0o),e($,I0o),e($,Bu),e(Bu,boe),e(boe,j0o),e(Bu,D0o),e(Bu,g$),e(g$,N0o),e(Bu,q0o),e($,O0o),e($,xu),e(xu,voe),e(voe,G0o),e(xu,X0o),e(xu,h$),e(h$,V0o),e(xu,z0o),e($,W0o),e($,ku),e(ku,Toe),e(Toe,Q0o),e(ku,H0o),e(ku,p$),e(p$,U0o),e(ku,J0o),e($,Y0o),e($,Ru),e(Ru,Foe),e(Foe,K0o),e(Ru,Z0o),e(Ru,_$),e(_$,e1o),e(Ru,o1o),e($,r1o),e($,Su),e(Su,Coe),e(Coe,t1o),e(Su,a1o),e(Su,u$),e(u$,n1o),e(Su,s1o),e($,l1o),e($,Pu),e(Pu,Moe),e(Moe,i1o),e(Pu,d1o),e(Pu,b$),e(b$,c1o),e(Pu,f1o),e($,m1o),e($,$u),e($u,Eoe),e(Eoe,g1o),e($u,h1o),e($u,v$),e(v$,p1o),e($u,_1o),e($,u1o),e($,Iu),e(Iu,yoe),e(yoe,b1o),e(Iu,v1o),e(Iu,T$),e(T$,T1o),e(Iu,F1o),e($,C1o),e($,ju),e(ju,woe),e(woe,M1o),e(ju,E1o),e(ju,F$),e(F$,y1o),e(ju,w1o),e($,A1o),e($,Du),e(Du,Aoe),e(Aoe,L1o),e(Du,B1o),e(Du,C$),e(C$,x1o),e(Du,k1o),e($,R1o),e($,Nu),e(Nu,Loe),e(Loe,S1o),e(Nu,P1o),e(Nu,M$),e(M$,$1o),e(Nu,I1o),e($,j1o),e($,qu),e(qu,Boe),e(Boe,D1o),e(qu,N1o),e(qu,E$),e(E$,q1o),e(qu,O1o),e($,G1o),e($,Ou),e(Ou,xoe),e(xoe,X1o),e(Ou,V1o),e(Ou,y$),e(y$,z1o),e(Ou,W1o),e($,Q1o),e($,Gu),e(Gu,koe),e(koe,H1o),e(Gu,U1o),e(Gu,w$),e(w$,J1o),e(Gu,Y1o),e(qe,K1o),e(qe,Xu),e(Xu,Z1o),e(Xu,Roe),e(Roe,ebo),e(Xu,obo),e(Xu,Soe),e(Soe,rbo),e(qe,tbo),e(qe,Poe),e(Poe,abo),e(qe,nbo),g(YE,qe,null),b(c,Oxe,u),b(c,sd,u),e(sd,Vu),e(Vu,$oe),g(KE,$oe,null),e(sd,sbo),e(sd,Ioe),e(Ioe,lbo),b(c,Gxe,u),b(c,Zo,u),g(ZE,Zo,null),e(Zo,ibo),e(Zo,ld),e(ld,dbo),e(ld,joe),e(joe,cbo),e(ld,fbo),e(ld,Doe),e(Doe,mbo),e(ld,gbo),e(Zo,hbo),e(Zo,e3),e(e3,pbo),e(e3,Noe),e(Noe,_bo),e(e3,ubo),e(Zo,bbo),e(Zo,Qr),g(o3,Qr,null),e(Qr,vbo),e(Qr,qoe),e(qoe,Tbo),e(Qr,Fbo),e(Qr,id),e(id,Cbo),e(id,Ooe),e(Ooe,Mbo),e(id,Ebo),e(id,Goe),e(Goe,ybo),e(id,wbo),e(Qr,Abo),e(Qr,Xoe),e(Xoe,Lbo),e(Qr,Bbo),g(r3,Qr,null),e(Zo,xbo),e(Zo,Oe),g(t3,Oe,null),e(Oe,kbo),e(Oe,Voe),e(Voe,Rbo),e(Oe,Sbo),e(Oe,Qa),e(Qa,Pbo),e(Qa,zoe),e(zoe,$bo),e(Qa,Ibo),e(Qa,Woe),e(Woe,jbo),e(Qa,Dbo),e(Qa,Qoe),e(Qoe,Nbo),e(Qa,qbo),e(Oe,Obo),e(Oe,I),e(I,zu),e(zu,Hoe),e(Hoe,Gbo),e(zu,Xbo),e(zu,A$),e(A$,Vbo),e(zu,zbo),e(I,Wbo),e(I,Wu),e(Wu,Uoe),e(Uoe,Qbo),e(Wu,Hbo),e(Wu,L$),e(L$,Ubo),e(Wu,Jbo),e(I,Ybo),e(I,Qu),e(Qu,Joe),e(Joe,Kbo),e(Qu,Zbo),e(Qu,B$),e(B$,e2o),e(Qu,o2o),e(I,r2o),e(I,Hu),e(Hu,Yoe),e(Yoe,t2o),e(Hu,a2o),e(Hu,x$),e(x$,n2o),e(Hu,s2o),e(I,l2o),e(I,Uu),e(Uu,Koe),e(Koe,i2o),e(Uu,d2o),e(Uu,k$),e(k$,c2o),e(Uu,f2o),e(I,m2o),e(I,Ju),e(Ju,Zoe),e(Zoe,g2o),e(Ju,h2o),e(Ju,R$),e(R$,p2o),e(Ju,_2o),e(I,u2o),e(I,Yu),e(Yu,ere),e(ere,b2o),e(Yu,v2o),e(Yu,S$),e(S$,T2o),e(Yu,F2o),e(I,C2o),e(I,Ku),e(Ku,ore),e(ore,M2o),e(Ku,E2o),e(Ku,P$),e(P$,y2o),e(Ku,w2o),e(I,A2o),e(I,Zu),e(Zu,rre),e(rre,L2o),e(Zu,B2o),e(Zu,$$),e($$,x2o),e(Zu,k2o),e(I,R2o),e(I,e0),e(e0,tre),e(tre,S2o),e(e0,P2o),e(e0,I$),e(I$,$2o),e(e0,I2o),e(I,j2o),e(I,o0),e(o0,are),e(are,D2o),e(o0,N2o),e(o0,j$),e(j$,q2o),e(o0,O2o),e(I,G2o),e(I,r0),e(r0,nre),e(nre,X2o),e(r0,V2o),e(r0,D$),e(D$,z2o),e(r0,W2o),e(I,Q2o),e(I,t0),e(t0,sre),e(sre,H2o),e(t0,U2o),e(t0,N$),e(N$,J2o),e(t0,Y2o),e(I,K2o),e(I,a0),e(a0,lre),e(lre,Z2o),e(a0,evo),e(a0,q$),e(q$,ovo),e(a0,rvo),e(I,tvo),e(I,n0),e(n0,ire),e(ire,avo),e(n0,nvo),e(n0,O$),e(O$,svo),e(n0,lvo),e(I,ivo),e(I,s0),e(s0,dre),e(dre,dvo),e(s0,cvo),e(s0,G$),e(G$,fvo),e(s0,mvo),e(I,gvo),e(I,l0),e(l0,cre),e(cre,hvo),e(l0,pvo),e(l0,X$),e(X$,_vo),e(l0,uvo),e(I,bvo),e(I,i0),e(i0,fre),e(fre,vvo),e(i0,Tvo),e(i0,V$),e(V$,Fvo),e(i0,Cvo),e(I,Mvo),e(I,d0),e(d0,mre),e(mre,Evo),e(d0,yvo),e(d0,z$),e(z$,wvo),e(d0,Avo),e(I,Lvo),e(I,c0),e(c0,gre),e(gre,Bvo),e(c0,xvo),e(c0,W$),e(W$,kvo),e(c0,Rvo),e(I,Svo),e(I,f0),e(f0,hre),e(hre,Pvo),e(f0,$vo),e(f0,Q$),e(Q$,Ivo),e(f0,jvo),e(I,Dvo),e(I,m0),e(m0,pre),e(pre,Nvo),e(m0,qvo),e(m0,H$),e(H$,Ovo),e(m0,Gvo),e(I,Xvo),e(I,g0),e(g0,_re),e(_re,Vvo),e(g0,zvo),e(g0,U$),e(U$,Wvo),e(g0,Qvo),e(I,Hvo),e(I,h0),e(h0,ure),e(ure,Uvo),e(h0,Jvo),e(h0,J$),e(J$,Yvo),e(h0,Kvo),e(I,Zvo),e(I,p0),e(p0,bre),e(bre,e6o),e(p0,o6o),e(p0,Y$),e(Y$,r6o),e(p0,t6o),e(I,a6o),e(I,_0),e(_0,vre),e(vre,n6o),e(_0,s6o),e(_0,K$),e(K$,l6o),e(_0,i6o),e(I,d6o),e(I,u0),e(u0,Tre),e(Tre,c6o),e(u0,f6o),e(u0,Z$),e(Z$,m6o),e(u0,g6o),e(I,h6o),e(I,b0),e(b0,Fre),e(Fre,p6o),e(b0,_6o),e(b0,eI),e(eI,u6o),e(b0,b6o),e(I,v6o),e(I,v0),e(v0,Cre),e(Cre,T6o),e(v0,F6o),e(v0,oI),e(oI,C6o),e(v0,M6o),e(I,E6o),e(I,T0),e(T0,Mre),e(Mre,y6o),e(T0,w6o),e(T0,rI),e(rI,A6o),e(T0,L6o),e(I,B6o),e(I,F0),e(F0,Ere),e(Ere,x6o),e(F0,k6o),e(F0,yre),e(yre,R6o),e(F0,S6o),e(I,P6o),e(I,C0),e(C0,wre),e(wre,$6o),e(C0,I6o),e(C0,tI),e(tI,j6o),e(C0,D6o),e(I,N6o),e(I,M0),e(M0,Are),e(Are,q6o),e(M0,O6o),e(M0,aI),e(aI,G6o),e(M0,X6o),e(I,V6o),e(I,E0),e(E0,Lre),e(Lre,z6o),e(E0,W6o),e(E0,nI),e(nI,Q6o),e(E0,H6o),e(I,U6o),e(I,y0),e(y0,Bre),e(Bre,J6o),e(y0,Y6o),e(y0,sI),e(sI,K6o),e(y0,Z6o),e(Oe,eTo),e(Oe,w0),e(w0,oTo),e(w0,xre),e(xre,rTo),e(w0,tTo),e(w0,kre),e(kre,aTo),e(Oe,nTo),e(Oe,Rre),e(Rre,sTo),e(Oe,lTo),g(a3,Oe,null),b(c,Xxe,u),b(c,dd,u),e(dd,A0),e(A0,Sre),g(n3,Sre,null),e(dd,iTo),e(dd,Pre),e(Pre,dTo),b(c,Vxe,u),b(c,er,u),g(s3,er,null),e(er,cTo),e(er,cd),e(cd,fTo),e(cd,$re),e($re,mTo),e(cd,gTo),e(cd,Ire),e(Ire,hTo),e(cd,pTo),e(er,_To),e(er,l3),e(l3,uTo),e(l3,jre),e(jre,bTo),e(l3,vTo),e(er,TTo),e(er,Hr),g(i3,Hr,null),e(Hr,FTo),e(Hr,Dre),e(Dre,CTo),e(Hr,MTo),e(Hr,fd),e(fd,ETo),e(fd,Nre),e(Nre,yTo),e(fd,wTo),e(fd,qre),e(qre,ATo),e(fd,LTo),e(Hr,BTo),e(Hr,Ore),e(Ore,xTo),e(Hr,kTo),g(d3,Hr,null),e(er,RTo),e(er,Ge),g(c3,Ge,null),e(Ge,STo),e(Ge,Gre),e(Gre,PTo),e(Ge,$To),e(Ge,Ha),e(Ha,ITo),e(Ha,Xre),e(Xre,jTo),e(Ha,DTo),e(Ha,Vre),e(Vre,NTo),e(Ha,qTo),e(Ha,zre),e(zre,OTo),e(Ha,GTo),e(Ge,XTo),e(Ge,ne),e(ne,L0),e(L0,Wre),e(Wre,VTo),e(L0,zTo),e(L0,lI),e(lI,WTo),e(L0,QTo),e(ne,HTo),e(ne,B0),e(B0,Qre),e(Qre,UTo),e(B0,JTo),e(B0,iI),e(iI,YTo),e(B0,KTo),e(ne,ZTo),e(ne,x0),e(x0,Hre),e(Hre,e7o),e(x0,o7o),e(x0,dI),e(dI,r7o),e(x0,t7o),e(ne,a7o),e(ne,k0),e(k0,Ure),e(Ure,n7o),e(k0,s7o),e(k0,cI),e(cI,l7o),e(k0,i7o),e(ne,d7o),e(ne,R0),e(R0,Jre),e(Jre,c7o),e(R0,f7o),e(R0,fI),e(fI,m7o),e(R0,g7o),e(ne,h7o),e(ne,S0),e(S0,Yre),e(Yre,p7o),e(S0,_7o),e(S0,mI),e(mI,u7o),e(S0,b7o),e(ne,v7o),e(ne,P0),e(P0,Kre),e(Kre,T7o),e(P0,F7o),e(P0,gI),e(gI,C7o),e(P0,M7o),e(ne,E7o),e(ne,$0),e($0,Zre),e(Zre,y7o),e($0,w7o),e($0,hI),e(hI,A7o),e($0,L7o),e(ne,B7o),e(ne,I0),e(I0,ete),e(ete,x7o),e(I0,k7o),e(I0,pI),e(pI,R7o),e(I0,S7o),e(ne,P7o),e(ne,j0),e(j0,ote),e(ote,$7o),e(j0,I7o),e(j0,_I),e(_I,j7o),e(j0,D7o),e(ne,N7o),e(ne,D0),e(D0,rte),e(rte,q7o),e(D0,O7o),e(D0,uI),e(uI,G7o),e(D0,X7o),e(ne,V7o),e(ne,N0),e(N0,tte),e(tte,z7o),e(N0,W7o),e(N0,bI),e(bI,Q7o),e(N0,H7o),e(ne,U7o),e(ne,q0),e(q0,ate),e(ate,J7o),e(q0,Y7o),e(q0,vI),e(vI,K7o),e(q0,Z7o),e(ne,eFo),e(ne,O0),e(O0,nte),e(nte,oFo),e(O0,rFo),e(O0,TI),e(TI,tFo),e(O0,aFo),e(ne,nFo),e(ne,G0),e(G0,ste),e(ste,sFo),e(G0,lFo),e(G0,FI),e(FI,iFo),e(G0,dFo),e(ne,cFo),e(ne,X0),e(X0,lte),e(lte,fFo),e(X0,mFo),e(X0,CI),e(CI,gFo),e(X0,hFo),e(Ge,pFo),e(Ge,V0),e(V0,_Fo),e(V0,ite),e(ite,uFo),e(V0,bFo),e(V0,dte),e(dte,vFo),e(Ge,TFo),e(Ge,cte),e(cte,FFo),e(Ge,CFo),g(f3,Ge,null),b(c,zxe,u),b(c,md,u),e(md,z0),e(z0,fte),g(m3,fte,null),e(md,MFo),e(md,mte),e(mte,EFo),b(c,Wxe,u),b(c,or,u),g(g3,or,null),e(or,yFo),e(or,gd),e(gd,wFo),e(gd,gte),e(gte,AFo),e(gd,LFo),e(gd,hte),e(hte,BFo),e(gd,xFo),e(or,kFo),e(or,h3),e(h3,RFo),e(h3,pte),e(pte,SFo),e(h3,PFo),e(or,$Fo),e(or,Ur),g(p3,Ur,null),e(Ur,IFo),e(Ur,_te),e(_te,jFo),e(Ur,DFo),e(Ur,hd),e(hd,NFo),e(hd,ute),e(ute,qFo),e(hd,OFo),e(hd,bte),e(bte,GFo),e(hd,XFo),e(Ur,VFo),e(Ur,vte),e(vte,zFo),e(Ur,WFo),g(_3,Ur,null),e(or,QFo),e(or,Xe),g(u3,Xe,null),e(Xe,HFo),e(Xe,Tte),e(Tte,UFo),e(Xe,JFo),e(Xe,Ua),e(Ua,YFo),e(Ua,Fte),e(Fte,KFo),e(Ua,ZFo),e(Ua,Cte),e(Cte,eCo),e(Ua,oCo),e(Ua,Mte),e(Mte,rCo),e(Ua,tCo),e(Xe,aCo),e(Xe,A),e(A,W0),e(W0,Ete),e(Ete,nCo),e(W0,sCo),e(W0,MI),e(MI,lCo),e(W0,iCo),e(A,dCo),e(A,Q0),e(Q0,yte),e(yte,cCo),e(Q0,fCo),e(Q0,EI),e(EI,mCo),e(Q0,gCo),e(A,hCo),e(A,H0),e(H0,wte),e(wte,pCo),e(H0,_Co),e(H0,yI),e(yI,uCo),e(H0,bCo),e(A,vCo),e(A,U0),e(U0,Ate),e(Ate,TCo),e(U0,FCo),e(U0,wI),e(wI,CCo),e(U0,MCo),e(A,ECo),e(A,J0),e(J0,Lte),e(Lte,yCo),e(J0,wCo),e(J0,AI),e(AI,ACo),e(J0,LCo),e(A,BCo),e(A,Y0),e(Y0,Bte),e(Bte,xCo),e(Y0,kCo),e(Y0,LI),e(LI,RCo),e(Y0,SCo),e(A,PCo),e(A,K0),e(K0,xte),e(xte,$Co),e(K0,ICo),e(K0,BI),e(BI,jCo),e(K0,DCo),e(A,NCo),e(A,Z0),e(Z0,kte),e(kte,qCo),e(Z0,OCo),e(Z0,xI),e(xI,GCo),e(Z0,XCo),e(A,VCo),e(A,e1),e(e1,Rte),e(Rte,zCo),e(e1,WCo),e(e1,kI),e(kI,QCo),e(e1,HCo),e(A,UCo),e(A,o1),e(o1,Ste),e(Ste,JCo),e(o1,YCo),e(o1,RI),e(RI,KCo),e(o1,ZCo),e(A,eMo),e(A,r1),e(r1,Pte),e(Pte,oMo),e(r1,rMo),e(r1,SI),e(SI,tMo),e(r1,aMo),e(A,nMo),e(A,t1),e(t1,$te),e($te,sMo),e(t1,lMo),e(t1,PI),e(PI,iMo),e(t1,dMo),e(A,cMo),e(A,a1),e(a1,Ite),e(Ite,fMo),e(a1,mMo),e(a1,$I),e($I,gMo),e(a1,hMo),e(A,pMo),e(A,n1),e(n1,jte),e(jte,_Mo),e(n1,uMo),e(n1,II),e(II,bMo),e(n1,vMo),e(A,TMo),e(A,s1),e(s1,Dte),e(Dte,FMo),e(s1,CMo),e(s1,jI),e(jI,MMo),e(s1,EMo),e(A,yMo),e(A,l1),e(l1,Nte),e(Nte,wMo),e(l1,AMo),e(l1,DI),e(DI,LMo),e(l1,BMo),e(A,xMo),e(A,i1),e(i1,qte),e(qte,kMo),e(i1,RMo),e(i1,NI),e(NI,SMo),e(i1,PMo),e(A,$Mo),e(A,d1),e(d1,Ote),e(Ote,IMo),e(d1,jMo),e(d1,qI),e(qI,DMo),e(d1,NMo),e(A,qMo),e(A,c1),e(c1,Gte),e(Gte,OMo),e(c1,GMo),e(c1,OI),e(OI,XMo),e(c1,VMo),e(A,zMo),e(A,f1),e(f1,Xte),e(Xte,WMo),e(f1,QMo),e(f1,GI),e(GI,HMo),e(f1,UMo),e(A,JMo),e(A,m1),e(m1,Vte),e(Vte,YMo),e(m1,KMo),e(m1,XI),e(XI,ZMo),e(m1,e4o),e(A,o4o),e(A,g1),e(g1,zte),e(zte,r4o),e(g1,t4o),e(g1,VI),e(VI,a4o),e(g1,n4o),e(A,s4o),e(A,h1),e(h1,Wte),e(Wte,l4o),e(h1,i4o),e(h1,zI),e(zI,d4o),e(h1,c4o),e(A,f4o),e(A,p1),e(p1,Qte),e(Qte,m4o),e(p1,g4o),e(p1,WI),e(WI,h4o),e(p1,p4o),e(A,_4o),e(A,_1),e(_1,Hte),e(Hte,u4o),e(_1,b4o),e(_1,QI),e(QI,v4o),e(_1,T4o),e(A,F4o),e(A,u1),e(u1,Ute),e(Ute,C4o),e(u1,M4o),e(u1,HI),e(HI,E4o),e(u1,y4o),e(A,w4o),e(A,b1),e(b1,Jte),e(Jte,A4o),e(b1,L4o),e(b1,UI),e(UI,B4o),e(b1,x4o),e(A,k4o),e(A,v1),e(v1,Yte),e(Yte,R4o),e(v1,S4o),e(v1,JI),e(JI,P4o),e(v1,$4o),e(A,I4o),e(A,T1),e(T1,Kte),e(Kte,j4o),e(T1,D4o),e(T1,YI),e(YI,N4o),e(T1,q4o),e(A,O4o),e(A,F1),e(F1,Zte),e(Zte,G4o),e(F1,X4o),e(F1,KI),e(KI,V4o),e(F1,z4o),e(A,W4o),e(A,C1),e(C1,eae),e(eae,Q4o),e(C1,H4o),e(C1,ZI),e(ZI,U4o),e(C1,J4o),e(A,Y4o),e(A,M1),e(M1,oae),e(oae,K4o),e(M1,Z4o),e(M1,ej),e(ej,eEo),e(M1,oEo),e(A,rEo),e(A,E1),e(E1,rae),e(rae,tEo),e(E1,aEo),e(E1,oj),e(oj,nEo),e(E1,sEo),e(A,lEo),e(A,y1),e(y1,tae),e(tae,iEo),e(y1,dEo),e(y1,rj),e(rj,cEo),e(y1,fEo),e(A,mEo),e(A,w1),e(w1,aae),e(aae,gEo),e(w1,hEo),e(w1,tj),e(tj,pEo),e(w1,_Eo),e(A,uEo),e(A,A1),e(A1,nae),e(nae,bEo),e(A1,vEo),e(A1,aj),e(aj,TEo),e(A1,FEo),e(A,CEo),e(A,L1),e(L1,sae),e(sae,MEo),e(L1,EEo),e(L1,nj),e(nj,yEo),e(L1,wEo),e(A,AEo),e(A,B1),e(B1,lae),e(lae,LEo),e(B1,BEo),e(B1,sj),e(sj,xEo),e(B1,kEo),e(A,REo),e(A,x1),e(x1,iae),e(iae,SEo),e(x1,PEo),e(x1,lj),e(lj,$Eo),e(x1,IEo),e(A,jEo),e(A,k1),e(k1,dae),e(dae,DEo),e(k1,NEo),e(k1,ij),e(ij,qEo),e(k1,OEo),e(A,GEo),e(A,R1),e(R1,cae),e(cae,XEo),e(R1,VEo),e(R1,dj),e(dj,zEo),e(R1,WEo),e(A,QEo),e(A,S1),e(S1,fae),e(fae,HEo),e(S1,UEo),e(S1,cj),e(cj,JEo),e(S1,YEo),e(A,KEo),e(A,P1),e(P1,mae),e(mae,ZEo),e(P1,e3o),e(P1,fj),e(fj,o3o),e(P1,r3o),e(A,t3o),e(A,$1),e($1,gae),e(gae,a3o),e($1,n3o),e($1,mj),e(mj,s3o),e($1,l3o),e(A,i3o),e(A,I1),e(I1,hae),e(hae,d3o),e(I1,c3o),e(I1,gj),e(gj,f3o),e(I1,m3o),e(A,g3o),e(A,j1),e(j1,pae),e(pae,h3o),e(j1,p3o),e(j1,hj),e(hj,_3o),e(j1,u3o),e(Xe,b3o),e(Xe,D1),e(D1,v3o),e(D1,_ae),e(_ae,T3o),e(D1,F3o),e(D1,uae),e(uae,C3o),e(Xe,M3o),e(Xe,bae),e(bae,E3o),e(Xe,y3o),g(b3,Xe,null),b(c,Qxe,u),b(c,pd,u),e(pd,N1),e(N1,vae),g(v3,vae,null),e(pd,w3o),e(pd,Tae),e(Tae,A3o),b(c,Hxe,u),b(c,rr,u),g(T3,rr,null),e(rr,L3o),e(rr,_d),e(_d,B3o),e(_d,Fae),e(Fae,x3o),e(_d,k3o),e(_d,Cae),e(Cae,R3o),e(_d,S3o),e(rr,P3o),e(rr,F3),e(F3,$3o),e(F3,Mae),e(Mae,I3o),e(F3,j3o),e(rr,D3o),e(rr,Jr),g(C3,Jr,null),e(Jr,N3o),e(Jr,Eae),e(Eae,q3o),e(Jr,O3o),e(Jr,ud),e(ud,G3o),e(ud,yae),e(yae,X3o),e(ud,V3o),e(ud,wae),e(wae,z3o),e(ud,W3o),e(Jr,Q3o),e(Jr,Aae),e(Aae,H3o),e(Jr,U3o),g(M3,Jr,null),e(rr,J3o),e(rr,Ve),g(E3,Ve,null),e(Ve,Y3o),e(Ve,Lae),e(Lae,K3o),e(Ve,Z3o),e(Ve,Ja),e(Ja,e5o),e(Ja,Bae),e(Bae,o5o),e(Ja,r5o),e(Ja,xae),e(xae,t5o),e(Ja,a5o),e(Ja,kae),e(kae,n5o),e(Ja,s5o),e(Ve,l5o),e(Ve,O),e(O,q1),e(q1,Rae),e(Rae,i5o),e(q1,d5o),e(q1,pj),e(pj,c5o),e(q1,f5o),e(O,m5o),e(O,O1),e(O1,Sae),e(Sae,g5o),e(O1,h5o),e(O1,_j),e(_j,p5o),e(O1,_5o),e(O,u5o),e(O,G1),e(G1,Pae),e(Pae,b5o),e(G1,v5o),e(G1,uj),e(uj,T5o),e(G1,F5o),e(O,C5o),e(O,X1),e(X1,$ae),e($ae,M5o),e(X1,E5o),e(X1,bj),e(bj,y5o),e(X1,w5o),e(O,A5o),e(O,V1),e(V1,Iae),e(Iae,L5o),e(V1,B5o),e(V1,vj),e(vj,x5o),e(V1,k5o),e(O,R5o),e(O,z1),e(z1,jae),e(jae,S5o),e(z1,P5o),e(z1,Tj),e(Tj,$5o),e(z1,I5o),e(O,j5o),e(O,W1),e(W1,Dae),e(Dae,D5o),e(W1,N5o),e(W1,Fj),e(Fj,q5o),e(W1,O5o),e(O,G5o),e(O,Q1),e(Q1,Nae),e(Nae,X5o),e(Q1,V5o),e(Q1,Cj),e(Cj,z5o),e(Q1,W5o),e(O,Q5o),e(O,H1),e(H1,qae),e(qae,H5o),e(H1,U5o),e(H1,Mj),e(Mj,J5o),e(H1,Y5o),e(O,K5o),e(O,U1),e(U1,Oae),e(Oae,Z5o),e(U1,eyo),e(U1,Ej),e(Ej,oyo),e(U1,ryo),e(O,tyo),e(O,J1),e(J1,Gae),e(Gae,ayo),e(J1,nyo),e(J1,yj),e(yj,syo),e(J1,lyo),e(O,iyo),e(O,Y1),e(Y1,Xae),e(Xae,dyo),e(Y1,cyo),e(Y1,wj),e(wj,fyo),e(Y1,myo),e(O,gyo),e(O,K1),e(K1,Vae),e(Vae,hyo),e(K1,pyo),e(K1,Aj),e(Aj,_yo),e(K1,uyo),e(O,byo),e(O,Z1),e(Z1,zae),e(zae,vyo),e(Z1,Tyo),e(Z1,Lj),e(Lj,Fyo),e(Z1,Cyo),e(O,Myo),e(O,eb),e(eb,Wae),e(Wae,Eyo),e(eb,yyo),e(eb,Bj),e(Bj,wyo),e(eb,Ayo),e(O,Lyo),e(O,ob),e(ob,Qae),e(Qae,Byo),e(ob,xyo),e(ob,xj),e(xj,kyo),e(ob,Ryo),e(O,Syo),e(O,rb),e(rb,Hae),e(Hae,Pyo),e(rb,$yo),e(rb,kj),e(kj,Iyo),e(rb,jyo),e(O,Dyo),e(O,tb),e(tb,Uae),e(Uae,Nyo),e(tb,qyo),e(tb,Rj),e(Rj,Oyo),e(tb,Gyo),e(O,Xyo),e(O,ab),e(ab,Jae),e(Jae,Vyo),e(ab,zyo),e(ab,Sj),e(Sj,Wyo),e(ab,Qyo),e(O,Hyo),e(O,nb),e(nb,Yae),e(Yae,Uyo),e(nb,Jyo),e(nb,Pj),e(Pj,Yyo),e(nb,Kyo),e(O,Zyo),e(O,sb),e(sb,Kae),e(Kae,ewo),e(sb,owo),e(sb,$j),e($j,rwo),e(sb,two),e(O,awo),e(O,lb),e(lb,Zae),e(Zae,nwo),e(lb,swo),e(lb,Ij),e(Ij,lwo),e(lb,iwo),e(O,dwo),e(O,ib),e(ib,ene),e(ene,cwo),e(ib,fwo),e(ib,jj),e(jj,mwo),e(ib,gwo),e(O,hwo),e(O,db),e(db,one),e(one,pwo),e(db,_wo),e(db,Dj),e(Dj,uwo),e(db,bwo),e(O,vwo),e(O,cb),e(cb,rne),e(rne,Two),e(cb,Fwo),e(cb,Nj),e(Nj,Cwo),e(cb,Mwo),e(O,Ewo),e(O,fb),e(fb,tne),e(tne,ywo),e(fb,wwo),e(fb,qj),e(qj,Awo),e(fb,Lwo),e(O,Bwo),e(O,mb),e(mb,ane),e(ane,xwo),e(mb,kwo),e(mb,Oj),e(Oj,Rwo),e(mb,Swo),e(O,Pwo),e(O,gb),e(gb,nne),e(nne,$wo),e(gb,Iwo),e(gb,Gj),e(Gj,jwo),e(gb,Dwo),e(Ve,Nwo),e(Ve,hb),e(hb,qwo),e(hb,sne),e(sne,Owo),e(hb,Gwo),e(hb,lne),e(lne,Xwo),e(Ve,Vwo),e(Ve,ine),e(ine,zwo),e(Ve,Wwo),g(y3,Ve,null),b(c,Uxe,u),b(c,bd,u),e(bd,pb),e(pb,dne),g(w3,dne,null),e(bd,Qwo),e(bd,cne),e(cne,Hwo),b(c,Jxe,u),b(c,tr,u),g(A3,tr,null),e(tr,Uwo),e(tr,vd),e(vd,Jwo),e(vd,fne),e(fne,Ywo),e(vd,Kwo),e(vd,mne),e(mne,Zwo),e(vd,eAo),e(tr,oAo),e(tr,L3),e(L3,rAo),e(L3,gne),e(gne,tAo),e(L3,aAo),e(tr,nAo),e(tr,Yr),g(B3,Yr,null),e(Yr,sAo),e(Yr,hne),e(hne,lAo),e(Yr,iAo),e(Yr,Td),e(Td,dAo),e(Td,pne),e(pne,cAo),e(Td,fAo),e(Td,_ne),e(_ne,mAo),e(Td,gAo),e(Yr,hAo),e(Yr,une),e(une,pAo),e(Yr,_Ao),g(x3,Yr,null),e(tr,uAo),e(tr,ze),g(k3,ze,null),e(ze,bAo),e(ze,bne),e(bne,vAo),e(ze,TAo),e(ze,Ya),e(Ya,FAo),e(Ya,vne),e(vne,CAo),e(Ya,MAo),e(Ya,Tne),e(Tne,EAo),e(Ya,yAo),e(Ya,Fne),e(Fne,wAo),e(Ya,AAo),e(ze,LAo),e(ze,da),e(da,_b),e(_b,Cne),e(Cne,BAo),e(_b,xAo),e(_b,Xj),e(Xj,kAo),e(_b,RAo),e(da,SAo),e(da,ub),e(ub,Mne),e(Mne,PAo),e(ub,$Ao),e(ub,Vj),e(Vj,IAo),e(ub,jAo),e(da,DAo),e(da,bb),e(bb,Ene),e(Ene,NAo),e(bb,qAo),e(bb,zj),e(zj,OAo),e(bb,GAo),e(da,XAo),e(da,vb),e(vb,yne),e(yne,VAo),e(vb,zAo),e(vb,Wj),e(Wj,WAo),e(vb,QAo),e(da,HAo),e(da,Tb),e(Tb,wne),e(wne,UAo),e(Tb,JAo),e(Tb,Qj),e(Qj,YAo),e(Tb,KAo),e(ze,ZAo),e(ze,Fb),e(Fb,eLo),e(Fb,Ane),e(Ane,oLo),e(Fb,rLo),e(Fb,Lne),e(Lne,tLo),e(ze,aLo),e(ze,Bne),e(Bne,nLo),e(ze,sLo),g(R3,ze,null),b(c,Yxe,u),b(c,Fd,u),e(Fd,Cb),e(Cb,xne),g(S3,xne,null),e(Fd,lLo),e(Fd,kne),e(kne,iLo),b(c,Kxe,u),b(c,ar,u),g(P3,ar,null),e(ar,dLo),e(ar,Cd),e(Cd,cLo),e(Cd,Rne),e(Rne,fLo),e(Cd,mLo),e(Cd,Sne),e(Sne,gLo),e(Cd,hLo),e(ar,pLo),e(ar,$3),e($3,_Lo),e($3,Pne),e(Pne,uLo),e($3,bLo),e(ar,vLo),e(ar,Kr),g(I3,Kr,null),e(Kr,TLo),e(Kr,$ne),e($ne,FLo),e(Kr,CLo),e(Kr,Md),e(Md,MLo),e(Md,Ine),e(Ine,ELo),e(Md,yLo),e(Md,jne),e(jne,wLo),e(Md,ALo),e(Kr,LLo),e(Kr,Dne),e(Dne,BLo),e(Kr,xLo),g(j3,Kr,null),e(ar,kLo),e(ar,We),g(D3,We,null),e(We,RLo),e(We,Nne),e(Nne,SLo),e(We,PLo),e(We,Ka),e(Ka,$Lo),e(Ka,qne),e(qne,ILo),e(Ka,jLo),e(Ka,One),e(One,DLo),e(Ka,NLo),e(Ka,Gne),e(Gne,qLo),e(Ka,OLo),e(We,GLo),e(We,N),e(N,Mb),e(Mb,Xne),e(Xne,XLo),e(Mb,VLo),e(Mb,Hj),e(Hj,zLo),e(Mb,WLo),e(N,QLo),e(N,Eb),e(Eb,Vne),e(Vne,HLo),e(Eb,ULo),e(Eb,Uj),e(Uj,JLo),e(Eb,YLo),e(N,KLo),e(N,yb),e(yb,zne),e(zne,ZLo),e(yb,e8o),e(yb,Jj),e(Jj,o8o),e(yb,r8o),e(N,t8o),e(N,wb),e(wb,Wne),e(Wne,a8o),e(wb,n8o),e(wb,Yj),e(Yj,s8o),e(wb,l8o),e(N,i8o),e(N,Ab),e(Ab,Qne),e(Qne,d8o),e(Ab,c8o),e(Ab,Kj),e(Kj,f8o),e(Ab,m8o),e(N,g8o),e(N,Lb),e(Lb,Hne),e(Hne,h8o),e(Lb,p8o),e(Lb,Zj),e(Zj,_8o),e(Lb,u8o),e(N,b8o),e(N,Bb),e(Bb,Une),e(Une,v8o),e(Bb,T8o),e(Bb,eD),e(eD,F8o),e(Bb,C8o),e(N,M8o),e(N,xb),e(xb,Jne),e(Jne,E8o),e(xb,y8o),e(xb,oD),e(oD,w8o),e(xb,A8o),e(N,L8o),e(N,kb),e(kb,Yne),e(Yne,B8o),e(kb,x8o),e(kb,rD),e(rD,k8o),e(kb,R8o),e(N,S8o),e(N,Rb),e(Rb,Kne),e(Kne,P8o),e(Rb,$8o),e(Rb,tD),e(tD,I8o),e(Rb,j8o),e(N,D8o),e(N,Sb),e(Sb,Zne),e(Zne,N8o),e(Sb,q8o),e(Sb,aD),e(aD,O8o),e(Sb,G8o),e(N,X8o),e(N,Pb),e(Pb,ese),e(ese,V8o),e(Pb,z8o),e(Pb,nD),e(nD,W8o),e(Pb,Q8o),e(N,H8o),e(N,$b),e($b,ose),e(ose,U8o),e($b,J8o),e($b,sD),e(sD,Y8o),e($b,K8o),e(N,Z8o),e(N,Ib),e(Ib,rse),e(rse,e9o),e(Ib,o9o),e(Ib,lD),e(lD,r9o),e(Ib,t9o),e(N,a9o),e(N,jb),e(jb,tse),e(tse,n9o),e(jb,s9o),e(jb,iD),e(iD,l9o),e(jb,i9o),e(N,d9o),e(N,Db),e(Db,ase),e(ase,c9o),e(Db,f9o),e(Db,dD),e(dD,m9o),e(Db,g9o),e(N,h9o),e(N,Nb),e(Nb,nse),e(nse,p9o),e(Nb,_9o),e(Nb,cD),e(cD,u9o),e(Nb,b9o),e(N,v9o),e(N,qb),e(qb,sse),e(sse,T9o),e(qb,F9o),e(qb,fD),e(fD,C9o),e(qb,M9o),e(N,E9o),e(N,Ob),e(Ob,lse),e(lse,y9o),e(Ob,w9o),e(Ob,mD),e(mD,A9o),e(Ob,L9o),e(N,B9o),e(N,Gb),e(Gb,ise),e(ise,x9o),e(Gb,k9o),e(Gb,gD),e(gD,R9o),e(Gb,S9o),e(N,P9o),e(N,Xb),e(Xb,dse),e(dse,$9o),e(Xb,I9o),e(Xb,hD),e(hD,j9o),e(Xb,D9o),e(N,N9o),e(N,Vb),e(Vb,cse),e(cse,q9o),e(Vb,O9o),e(Vb,pD),e(pD,G9o),e(Vb,X9o),e(N,V9o),e(N,zb),e(zb,fse),e(fse,z9o),e(zb,W9o),e(zb,_D),e(_D,Q9o),e(zb,H9o),e(N,U9o),e(N,Wb),e(Wb,mse),e(mse,J9o),e(Wb,Y9o),e(Wb,uD),e(uD,K9o),e(Wb,Z9o),e(N,eBo),e(N,Qb),e(Qb,gse),e(gse,oBo),e(Qb,rBo),e(Qb,bD),e(bD,tBo),e(Qb,aBo),e(N,nBo),e(N,Hb),e(Hb,hse),e(hse,sBo),e(Hb,lBo),e(Hb,vD),e(vD,iBo),e(Hb,dBo),e(N,cBo),e(N,Ub),e(Ub,pse),e(pse,fBo),e(Ub,mBo),e(Ub,TD),e(TD,gBo),e(Ub,hBo),e(N,pBo),e(N,Jb),e(Jb,_se),e(_se,_Bo),e(Jb,uBo),e(Jb,FD),e(FD,bBo),e(Jb,vBo),e(N,TBo),e(N,Yb),e(Yb,use),e(use,FBo),e(Yb,CBo),e(Yb,CD),e(CD,MBo),e(Yb,EBo),e(N,yBo),e(N,Kb),e(Kb,bse),e(bse,wBo),e(Kb,ABo),e(Kb,MD),e(MD,LBo),e(Kb,BBo),e(N,xBo),e(N,Zb),e(Zb,vse),e(vse,kBo),e(Zb,RBo),e(Zb,ED),e(ED,SBo),e(Zb,PBo),e(N,$Bo),e(N,e2),e(e2,Tse),e(Tse,IBo),e(e2,jBo),e(e2,yD),e(yD,DBo),e(e2,NBo),e(N,qBo),e(N,o2),e(o2,Fse),e(Fse,OBo),e(o2,GBo),e(o2,wD),e(wD,XBo),e(o2,VBo),e(We,zBo),e(We,r2),e(r2,WBo),e(r2,Cse),e(Cse,QBo),e(r2,HBo),e(r2,Mse),e(Mse,UBo),e(We,JBo),e(We,Ese),e(Ese,YBo),e(We,KBo),g(N3,We,null),b(c,Zxe,u),b(c,Ed,u),e(Ed,t2),e(t2,yse),g(q3,yse,null),e(Ed,ZBo),e(Ed,wse),e(wse,exo),b(c,eke,u),b(c,nr,u),g(O3,nr,null),e(nr,oxo),e(nr,yd),e(yd,rxo),e(yd,Ase),e(Ase,txo),e(yd,axo),e(yd,Lse),e(Lse,nxo),e(yd,sxo),e(nr,lxo),e(nr,G3),e(G3,ixo),e(G3,Bse),e(Bse,dxo),e(G3,cxo),e(nr,fxo),e(nr,Zr),g(X3,Zr,null),e(Zr,mxo),e(Zr,xse),e(xse,gxo),e(Zr,hxo),e(Zr,wd),e(wd,pxo),e(wd,kse),e(kse,_xo),e(wd,uxo),e(wd,Rse),e(Rse,bxo),e(wd,vxo),e(Zr,Txo),e(Zr,Sse),e(Sse,Fxo),e(Zr,Cxo),g(V3,Zr,null),e(nr,Mxo),e(nr,Qe),g(z3,Qe,null),e(Qe,Exo),e(Qe,Pse),e(Pse,yxo),e(Qe,wxo),e(Qe,Za),e(Za,Axo),e(Za,$se),e($se,Lxo),e(Za,Bxo),e(Za,Ise),e(Ise,xxo),e(Za,kxo),e(Za,jse),e(jse,Rxo),e(Za,Sxo),e(Qe,Pxo),e(Qe,R),e(R,a2),e(a2,Dse),e(Dse,$xo),e(a2,Ixo),e(a2,AD),e(AD,jxo),e(a2,Dxo),e(R,Nxo),e(R,n2),e(n2,Nse),e(Nse,qxo),e(n2,Oxo),e(n2,LD),e(LD,Gxo),e(n2,Xxo),e(R,Vxo),e(R,s2),e(s2,qse),e(qse,zxo),e(s2,Wxo),e(s2,BD),e(BD,Qxo),e(s2,Hxo),e(R,Uxo),e(R,l2),e(l2,Ose),e(Ose,Jxo),e(l2,Yxo),e(l2,xD),e(xD,Kxo),e(l2,Zxo),e(R,eko),e(R,i2),e(i2,Gse),e(Gse,oko),e(i2,rko),e(i2,kD),e(kD,tko),e(i2,ako),e(R,nko),e(R,d2),e(d2,Xse),e(Xse,sko),e(d2,lko),e(d2,RD),e(RD,iko),e(d2,dko),e(R,cko),e(R,c2),e(c2,Vse),e(Vse,fko),e(c2,mko),e(c2,SD),e(SD,gko),e(c2,hko),e(R,pko),e(R,f2),e(f2,zse),e(zse,_ko),e(f2,uko),e(f2,PD),e(PD,bko),e(f2,vko),e(R,Tko),e(R,m2),e(m2,Wse),e(Wse,Fko),e(m2,Cko),e(m2,$D),e($D,Mko),e(m2,Eko),e(R,yko),e(R,g2),e(g2,Qse),e(Qse,wko),e(g2,Ako),e(g2,ID),e(ID,Lko),e(g2,Bko),e(R,xko),e(R,h2),e(h2,Hse),e(Hse,kko),e(h2,Rko),e(h2,jD),e(jD,Sko),e(h2,Pko),e(R,$ko),e(R,p2),e(p2,Use),e(Use,Iko),e(p2,jko),e(p2,DD),e(DD,Dko),e(p2,Nko),e(R,qko),e(R,_2),e(_2,Jse),e(Jse,Oko),e(_2,Gko),e(_2,ND),e(ND,Xko),e(_2,Vko),e(R,zko),e(R,u2),e(u2,Yse),e(Yse,Wko),e(u2,Qko),e(u2,qD),e(qD,Hko),e(u2,Uko),e(R,Jko),e(R,b2),e(b2,Kse),e(Kse,Yko),e(b2,Kko),e(b2,OD),e(OD,Zko),e(b2,eRo),e(R,oRo),e(R,v2),e(v2,Zse),e(Zse,rRo),e(v2,tRo),e(v2,GD),e(GD,aRo),e(v2,nRo),e(R,sRo),e(R,T2),e(T2,ele),e(ele,lRo),e(T2,iRo),e(T2,XD),e(XD,dRo),e(T2,cRo),e(R,fRo),e(R,F2),e(F2,ole),e(ole,mRo),e(F2,gRo),e(F2,VD),e(VD,hRo),e(F2,pRo),e(R,_Ro),e(R,C2),e(C2,rle),e(rle,uRo),e(C2,bRo),e(C2,zD),e(zD,vRo),e(C2,TRo),e(R,FRo),e(R,M2),e(M2,tle),e(tle,CRo),e(M2,MRo),e(M2,WD),e(WD,ERo),e(M2,yRo),e(R,wRo),e(R,E2),e(E2,ale),e(ale,ARo),e(E2,LRo),e(E2,QD),e(QD,BRo),e(E2,xRo),e(R,kRo),e(R,y2),e(y2,nle),e(nle,RRo),e(y2,SRo),e(y2,HD),e(HD,PRo),e(y2,$Ro),e(R,IRo),e(R,w2),e(w2,sle),e(sle,jRo),e(w2,DRo),e(w2,UD),e(UD,NRo),e(w2,qRo),e(R,ORo),e(R,A2),e(A2,lle),e(lle,GRo),e(A2,XRo),e(A2,JD),e(JD,VRo),e(A2,zRo),e(R,WRo),e(R,L2),e(L2,ile),e(ile,QRo),e(L2,HRo),e(L2,YD),e(YD,URo),e(L2,JRo),e(R,YRo),e(R,B2),e(B2,dle),e(dle,KRo),e(B2,ZRo),e(B2,KD),e(KD,eSo),e(B2,oSo),e(R,rSo),e(R,x2),e(x2,cle),e(cle,tSo),e(x2,aSo),e(x2,ZD),e(ZD,nSo),e(x2,sSo),e(R,lSo),e(R,k2),e(k2,fle),e(fle,iSo),e(k2,dSo),e(k2,eN),e(eN,cSo),e(k2,fSo),e(R,mSo),e(R,R2),e(R2,mle),e(mle,gSo),e(R2,hSo),e(R2,oN),e(oN,pSo),e(R2,_So),e(R,uSo),e(R,S2),e(S2,gle),e(gle,bSo),e(S2,vSo),e(S2,rN),e(rN,TSo),e(S2,FSo),e(R,CSo),e(R,P2),e(P2,hle),e(hle,MSo),e(P2,ESo),e(P2,tN),e(tN,ySo),e(P2,wSo),e(R,ASo),e(R,$2),e($2,ple),e(ple,LSo),e($2,BSo),e($2,aN),e(aN,xSo),e($2,kSo),e(R,RSo),e(R,I2),e(I2,_le),e(_le,SSo),e(I2,PSo),e(I2,nN),e(nN,$So),e(I2,ISo),e(R,jSo),e(R,j2),e(j2,ule),e(ule,DSo),e(j2,NSo),e(j2,sN),e(sN,qSo),e(j2,OSo),e(R,GSo),e(R,D2),e(D2,ble),e(ble,XSo),e(D2,VSo),e(D2,lN),e(lN,zSo),e(D2,WSo),e(R,QSo),e(R,N2),e(N2,vle),e(vle,HSo),e(N2,USo),e(N2,iN),e(iN,JSo),e(N2,YSo),e(R,KSo),e(R,q2),e(q2,Tle),e(Tle,ZSo),e(q2,ePo),e(q2,dN),e(dN,oPo),e(q2,rPo),e(R,tPo),e(R,O2),e(O2,Fle),e(Fle,aPo),e(O2,nPo),e(O2,cN),e(cN,sPo),e(O2,lPo),e(R,iPo),e(R,G2),e(G2,Cle),e(Cle,dPo),e(G2,cPo),e(G2,fN),e(fN,fPo),e(G2,mPo),e(Qe,gPo),e(Qe,X2),e(X2,hPo),e(X2,Mle),e(Mle,pPo),e(X2,_Po),e(X2,Ele),e(Ele,uPo),e(Qe,bPo),e(Qe,yle),e(yle,vPo),e(Qe,TPo),g(W3,Qe,null),b(c,oke,u),b(c,Ad,u),e(Ad,V2),e(V2,wle),g(Q3,wle,null),e(Ad,FPo),e(Ad,Ale),e(Ale,CPo),b(c,rke,u),b(c,sr,u),g(H3,sr,null),e(sr,MPo),e(sr,Ld),e(Ld,EPo),e(Ld,Lle),e(Lle,yPo),e(Ld,wPo),e(Ld,Ble),e(Ble,APo),e(Ld,LPo),e(sr,BPo),e(sr,U3),e(U3,xPo),e(U3,xle),e(xle,kPo),e(U3,RPo),e(sr,SPo),e(sr,et),g(J3,et,null),e(et,PPo),e(et,kle),e(kle,$Po),e(et,IPo),e(et,Bd),e(Bd,jPo),e(Bd,Rle),e(Rle,DPo),e(Bd,NPo),e(Bd,Sle),e(Sle,qPo),e(Bd,OPo),e(et,GPo),e(et,Ple),e(Ple,XPo),e(et,VPo),g(Y3,et,null),e(sr,zPo),e(sr,He),g(K3,He,null),e(He,WPo),e(He,$le),e($le,QPo),e(He,HPo),e(He,en),e(en,UPo),e(en,Ile),e(Ile,JPo),e(en,YPo),e(en,jle),e(jle,KPo),e(en,ZPo),e(en,Dle),e(Dle,e$o),e(en,o$o),e(He,r$o),e(He,Nle),e(Nle,z2),e(z2,qle),e(qle,t$o),e(z2,a$o),e(z2,mN),e(mN,n$o),e(z2,s$o),e(He,l$o),e(He,W2),e(W2,i$o),e(W2,Ole),e(Ole,d$o),e(W2,c$o),e(W2,Gle),e(Gle,f$o),e(He,m$o),e(He,Xle),e(Xle,g$o),e(He,h$o),g(Z3,He,null),b(c,tke,u),b(c,xd,u),e(xd,Q2),e(Q2,Vle),g(e5,Vle,null),e(xd,p$o),e(xd,zle),e(zle,_$o),b(c,ake,u),b(c,lr,u),g(o5,lr,null),e(lr,u$o),e(lr,kd),e(kd,b$o),e(kd,Wle),e(Wle,v$o),e(kd,T$o),e(kd,Qle),e(Qle,F$o),e(kd,C$o),e(lr,M$o),e(lr,r5),e(r5,E$o),e(r5,Hle),e(Hle,y$o),e(r5,w$o),e(lr,A$o),e(lr,ot),g(t5,ot,null),e(ot,L$o),e(ot,Ule),e(Ule,B$o),e(ot,x$o),e(ot,Rd),e(Rd,k$o),e(Rd,Jle),e(Jle,R$o),e(Rd,S$o),e(Rd,Yle),e(Yle,P$o),e(Rd,$$o),e(ot,I$o),e(ot,Kle),e(Kle,j$o),e(ot,D$o),g(a5,ot,null),e(lr,N$o),e(lr,Ue),g(n5,Ue,null),e(Ue,q$o),e(Ue,Zle),e(Zle,O$o),e(Ue,G$o),e(Ue,on),e(on,X$o),e(on,eie),e(eie,V$o),e(on,z$o),e(on,oie),e(oie,W$o),e(on,Q$o),e(on,rie),e(rie,H$o),e(on,U$o),e(Ue,J$o),e(Ue,_e),e(_e,H2),e(H2,tie),e(tie,Y$o),e(H2,K$o),e(H2,gN),e(gN,Z$o),e(H2,eIo),e(_e,oIo),e(_e,U2),e(U2,aie),e(aie,rIo),e(U2,tIo),e(U2,hN),e(hN,aIo),e(U2,nIo),e(_e,sIo),e(_e,qs),e(qs,nie),e(nie,lIo),e(qs,iIo),e(qs,pN),e(pN,dIo),e(qs,cIo),e(qs,_N),e(_N,fIo),e(qs,mIo),e(_e,gIo),e(_e,J2),e(J2,sie),e(sie,hIo),e(J2,pIo),e(J2,uN),e(uN,_Io),e(J2,uIo),e(_e,bIo),e(_e,ma),e(ma,lie),e(lie,vIo),e(ma,TIo),e(ma,bN),e(bN,FIo),e(ma,CIo),e(ma,vN),e(vN,MIo),e(ma,EIo),e(ma,TN),e(TN,yIo),e(ma,wIo),e(_e,AIo),e(_e,Y2),e(Y2,iie),e(iie,LIo),e(Y2,BIo),e(Y2,FN),e(FN,xIo),e(Y2,kIo),e(_e,RIo),e(_e,K2),e(K2,die),e(die,SIo),e(K2,PIo),e(K2,CN),e(CN,$Io),e(K2,IIo),e(_e,jIo),e(_e,Z2),e(Z2,cie),e(cie,DIo),e(Z2,NIo),e(Z2,MN),e(MN,qIo),e(Z2,OIo),e(_e,GIo),e(_e,ev),e(ev,fie),e(fie,XIo),e(ev,VIo),e(ev,EN),e(EN,zIo),e(ev,WIo),e(_e,QIo),e(_e,ov),e(ov,mie),e(mie,HIo),e(ov,UIo),e(ov,yN),e(yN,JIo),e(ov,YIo),e(Ue,KIo),e(Ue,rv),e(rv,ZIo),e(rv,gie),e(gie,ejo),e(rv,ojo),e(rv,hie),e(hie,rjo),e(Ue,tjo),e(Ue,pie),e(pie,ajo),e(Ue,njo),g(s5,Ue,null),b(c,nke,u),b(c,Sd,u),e(Sd,tv),e(tv,_ie),g(l5,_ie,null),e(Sd,sjo),e(Sd,uie),e(uie,ljo),b(c,ske,u),b(c,ir,u),g(i5,ir,null),e(ir,ijo),e(ir,Pd),e(Pd,djo),e(Pd,bie),e(bie,cjo),e(Pd,fjo),e(Pd,vie),e(vie,mjo),e(Pd,gjo),e(ir,hjo),e(ir,d5),e(d5,pjo),e(d5,Tie),e(Tie,_jo),e(d5,ujo),e(ir,bjo),e(ir,rt),g(c5,rt,null),e(rt,vjo),e(rt,Fie),e(Fie,Tjo),e(rt,Fjo),e(rt,$d),e($d,Cjo),e($d,Cie),e(Cie,Mjo),e($d,Ejo),e($d,Mie),e(Mie,yjo),e($d,wjo),e(rt,Ajo),e(rt,Eie),e(Eie,Ljo),e(rt,Bjo),g(f5,rt,null),e(ir,xjo),e(ir,Je),g(m5,Je,null),e(Je,kjo),e(Je,yie),e(yie,Rjo),e(Je,Sjo),e(Je,rn),e(rn,Pjo),e(rn,wie),e(wie,$jo),e(rn,Ijo),e(rn,Aie),e(Aie,jjo),e(rn,Djo),e(rn,Lie),e(Lie,Njo),e(rn,qjo),e(Je,Ojo),e(Je,Bie),e(Bie,av),e(av,xie),e(xie,Gjo),e(av,Xjo),e(av,wN),e(wN,Vjo),e(av,zjo),e(Je,Wjo),e(Je,nv),e(nv,Qjo),e(nv,kie),e(kie,Hjo),e(nv,Ujo),e(nv,Rie),e(Rie,Jjo),e(Je,Yjo),e(Je,Sie),e(Sie,Kjo),e(Je,Zjo),g(g5,Je,null),b(c,lke,u),b(c,Id,u),e(Id,sv),e(sv,Pie),g(h5,Pie,null),e(Id,eDo),e(Id,$ie),e($ie,oDo),b(c,ike,u),b(c,dr,u),g(p5,dr,null),e(dr,rDo),e(dr,jd),e(jd,tDo),e(jd,Iie),e(Iie,aDo),e(jd,nDo),e(jd,jie),e(jie,sDo),e(jd,lDo),e(dr,iDo),e(dr,_5),e(_5,dDo),e(_5,Die),e(Die,cDo),e(_5,fDo),e(dr,mDo),e(dr,tt),g(u5,tt,null),e(tt,gDo),e(tt,Nie),e(Nie,hDo),e(tt,pDo),e(tt,Dd),e(Dd,_Do),e(Dd,qie),e(qie,uDo),e(Dd,bDo),e(Dd,Oie),e(Oie,vDo),e(Dd,TDo),e(tt,FDo),e(tt,Gie),e(Gie,CDo),e(tt,MDo),g(b5,tt,null),e(dr,EDo),e(dr,Ye),g(v5,Ye,null),e(Ye,yDo),e(Ye,Xie),e(Xie,wDo),e(Ye,ADo),e(Ye,tn),e(tn,LDo),e(tn,Vie),e(Vie,BDo),e(tn,xDo),e(tn,zie),e(zie,kDo),e(tn,RDo),e(tn,Wie),e(Wie,SDo),e(tn,PDo),e(Ye,$Do),e(Ye,ke),e(ke,lv),e(lv,Qie),e(Qie,IDo),e(lv,jDo),e(lv,AN),e(AN,DDo),e(lv,NDo),e(ke,qDo),e(ke,iv),e(iv,Hie),e(Hie,ODo),e(iv,GDo),e(iv,LN),e(LN,XDo),e(iv,VDo),e(ke,zDo),e(ke,dv),e(dv,Uie),e(Uie,WDo),e(dv,QDo),e(dv,BN),e(BN,HDo),e(dv,UDo),e(ke,JDo),e(ke,cv),e(cv,Jie),e(Jie,YDo),e(cv,KDo),e(cv,xN),e(xN,ZDo),e(cv,eNo),e(ke,oNo),e(ke,fv),e(fv,Yie),e(Yie,rNo),e(fv,tNo),e(fv,kN),e(kN,aNo),e(fv,nNo),e(ke,sNo),e(ke,mv),e(mv,Kie),e(Kie,lNo),e(mv,iNo),e(mv,RN),e(RN,dNo),e(mv,cNo),e(ke,fNo),e(ke,gv),e(gv,Zie),e(Zie,mNo),e(gv,gNo),e(gv,SN),e(SN,hNo),e(gv,pNo),e(ke,_No),e(ke,hv),e(hv,ede),e(ede,uNo),e(hv,bNo),e(hv,PN),e(PN,vNo),e(hv,TNo),e(Ye,FNo),e(Ye,pv),e(pv,CNo),e(pv,ode),e(ode,MNo),e(pv,ENo),e(pv,rde),e(rde,yNo),e(Ye,wNo),e(Ye,tde),e(tde,ANo),e(Ye,LNo),g(T5,Ye,null),b(c,dke,u),b(c,Nd,u),e(Nd,_v),e(_v,ade),g(F5,ade,null),e(Nd,BNo),e(Nd,nde),e(nde,xNo),b(c,cke,u),b(c,cr,u),g(C5,cr,null),e(cr,kNo),e(cr,qd),e(qd,RNo),e(qd,sde),e(sde,SNo),e(qd,PNo),e(qd,lde),e(lde,$No),e(qd,INo),e(cr,jNo),e(cr,M5),e(M5,DNo),e(M5,ide),e(ide,NNo),e(M5,qNo),e(cr,ONo),e(cr,at),g(E5,at,null),e(at,GNo),e(at,dde),e(dde,XNo),e(at,VNo),e(at,Od),e(Od,zNo),e(Od,cde),e(cde,WNo),e(Od,QNo),e(Od,fde),e(fde,HNo),e(Od,UNo),e(at,JNo),e(at,mde),e(mde,YNo),e(at,KNo),g(y5,at,null),e(cr,ZNo),e(cr,Ke),g(w5,Ke,null),e(Ke,eqo),e(Ke,gde),e(gde,oqo),e(Ke,rqo),e(Ke,an),e(an,tqo),e(an,hde),e(hde,aqo),e(an,nqo),e(an,pde),e(pde,sqo),e(an,lqo),e(an,_de),e(_de,iqo),e(an,dqo),e(Ke,cqo),e(Ke,nn),e(nn,uv),e(uv,ude),e(ude,fqo),e(uv,mqo),e(uv,$N),e($N,gqo),e(uv,hqo),e(nn,pqo),e(nn,bv),e(bv,bde),e(bde,_qo),e(bv,uqo),e(bv,IN),e(IN,bqo),e(bv,vqo),e(nn,Tqo),e(nn,vv),e(vv,vde),e(vde,Fqo),e(vv,Cqo),e(vv,jN),e(jN,Mqo),e(vv,Eqo),e(nn,yqo),e(nn,Tv),e(Tv,Tde),e(Tde,wqo),e(Tv,Aqo),e(Tv,DN),e(DN,Lqo),e(Tv,Bqo),e(Ke,xqo),e(Ke,Fv),e(Fv,kqo),e(Fv,Fde),e(Fde,Rqo),e(Fv,Sqo),e(Fv,Cde),e(Cde,Pqo),e(Ke,$qo),e(Ke,Mde),e(Mde,Iqo),e(Ke,jqo),g(A5,Ke,null),b(c,fke,u),b(c,Gd,u),e(Gd,Cv),e(Cv,Ede),g(L5,Ede,null),e(Gd,Dqo),e(Gd,yde),e(yde,Nqo),b(c,mke,u),b(c,fr,u),g(B5,fr,null),e(fr,qqo),e(fr,Xd),e(Xd,Oqo),e(Xd,wde),e(wde,Gqo),e(Xd,Xqo),e(Xd,Ade),e(Ade,Vqo),e(Xd,zqo),e(fr,Wqo),e(fr,x5),e(x5,Qqo),e(x5,Lde),e(Lde,Hqo),e(x5,Uqo),e(fr,Jqo),e(fr,nt),g(k5,nt,null),e(nt,Yqo),e(nt,Bde),e(Bde,Kqo),e(nt,Zqo),e(nt,Vd),e(Vd,eOo),e(Vd,xde),e(xde,oOo),e(Vd,rOo),e(Vd,kde),e(kde,tOo),e(Vd,aOo),e(nt,nOo),e(nt,Rde),e(Rde,sOo),e(nt,lOo),g(R5,nt,null),e(fr,iOo),e(fr,Ze),g(S5,Ze,null),e(Ze,dOo),e(Ze,Sde),e(Sde,cOo),e(Ze,fOo),e(Ze,sn),e(sn,mOo),e(sn,Pde),e(Pde,gOo),e(sn,hOo),e(sn,$de),e($de,pOo),e(sn,_Oo),e(sn,Ide),e(Ide,uOo),e(sn,bOo),e(Ze,vOo),e(Ze,Re),e(Re,Mv),e(Mv,jde),e(jde,TOo),e(Mv,FOo),e(Mv,NN),e(NN,COo),e(Mv,MOo),e(Re,EOo),e(Re,Ev),e(Ev,Dde),e(Dde,yOo),e(Ev,wOo),e(Ev,qN),e(qN,AOo),e(Ev,LOo),e(Re,BOo),e(Re,yv),e(yv,Nde),e(Nde,xOo),e(yv,kOo),e(yv,ON),e(ON,ROo),e(yv,SOo),e(Re,POo),e(Re,wv),e(wv,qde),e(qde,$Oo),e(wv,IOo),e(wv,GN),e(GN,jOo),e(wv,DOo),e(Re,NOo),e(Re,Av),e(Av,Ode),e(Ode,qOo),e(Av,OOo),e(Av,XN),e(XN,GOo),e(Av,XOo),e(Re,VOo),e(Re,Lv),e(Lv,Gde),e(Gde,zOo),e(Lv,WOo),e(Lv,VN),e(VN,QOo),e(Lv,HOo),e(Re,UOo),e(Re,Bv),e(Bv,Xde),e(Xde,JOo),e(Bv,YOo),e(Bv,zN),e(zN,KOo),e(Bv,ZOo),e(Re,eGo),e(Re,xv),e(xv,Vde),e(Vde,oGo),e(xv,rGo),e(xv,WN),e(WN,tGo),e(xv,aGo),e(Ze,nGo),e(Ze,kv),e(kv,sGo),e(kv,zde),e(zde,lGo),e(kv,iGo),e(kv,Wde),e(Wde,dGo),e(Ze,cGo),e(Ze,Qde),e(Qde,fGo),e(Ze,mGo),g(P5,Ze,null),b(c,gke,u),b(c,zd,u),e(zd,Rv),e(Rv,Hde),g($5,Hde,null),e(zd,gGo),e(zd,Ude),e(Ude,hGo),b(c,hke,u),b(c,mr,u),g(I5,mr,null),e(mr,pGo),e(mr,Wd),e(Wd,_Go),e(Wd,Jde),e(Jde,uGo),e(Wd,bGo),e(Wd,Yde),e(Yde,vGo),e(Wd,TGo),e(mr,FGo),e(mr,j5),e(j5,CGo),e(j5,Kde),e(Kde,MGo),e(j5,EGo),e(mr,yGo),e(mr,st),g(D5,st,null),e(st,wGo),e(st,Zde),e(Zde,AGo),e(st,LGo),e(st,Qd),e(Qd,BGo),e(Qd,ece),e(ece,xGo),e(Qd,kGo),e(Qd,oce),e(oce,RGo),e(Qd,SGo),e(st,PGo),e(st,rce),e(rce,$Go),e(st,IGo),g(N5,st,null),e(mr,jGo),e(mr,eo),g(q5,eo,null),e(eo,DGo),e(eo,tce),e(tce,NGo),e(eo,qGo),e(eo,ln),e(ln,OGo),e(ln,ace),e(ace,GGo),e(ln,XGo),e(ln,nce),e(nce,VGo),e(ln,zGo),e(ln,sce),e(sce,WGo),e(ln,QGo),e(eo,HGo),e(eo,O5),e(O5,Sv),e(Sv,lce),e(lce,UGo),e(Sv,JGo),e(Sv,QN),e(QN,YGo),e(Sv,KGo),e(O5,ZGo),e(O5,Pv),e(Pv,ice),e(ice,eXo),e(Pv,oXo),e(Pv,HN),e(HN,rXo),e(Pv,tXo),e(eo,aXo),e(eo,$v),e($v,nXo),e($v,dce),e(dce,sXo),e($v,lXo),e($v,cce),e(cce,iXo),e(eo,dXo),e(eo,fce),e(fce,cXo),e(eo,fXo),g(G5,eo,null),b(c,pke,u),b(c,Hd,u),e(Hd,Iv),e(Iv,mce),g(X5,mce,null),e(Hd,mXo),e(Hd,gce),e(gce,gXo),b(c,_ke,u),b(c,gr,u),g(V5,gr,null),e(gr,hXo),e(gr,Ud),e(Ud,pXo),e(Ud,hce),e(hce,_Xo),e(Ud,uXo),e(Ud,pce),e(pce,bXo),e(Ud,vXo),e(gr,TXo),e(gr,z5),e(z5,FXo),e(z5,_ce),e(_ce,CXo),e(z5,MXo),e(gr,EXo),e(gr,lt),g(W5,lt,null),e(lt,yXo),e(lt,uce),e(uce,wXo),e(lt,AXo),e(lt,Jd),e(Jd,LXo),e(Jd,bce),e(bce,BXo),e(Jd,xXo),e(Jd,vce),e(vce,kXo),e(Jd,RXo),e(lt,SXo),e(lt,Tce),e(Tce,PXo),e(lt,$Xo),g(Q5,lt,null),e(gr,IXo),e(gr,oo),g(H5,oo,null),e(oo,jXo),e(oo,Fce),e(Fce,DXo),e(oo,NXo),e(oo,dn),e(dn,qXo),e(dn,Cce),e(Cce,OXo),e(dn,GXo),e(dn,Mce),e(Mce,XXo),e(dn,VXo),e(dn,Ece),e(Ece,zXo),e(dn,WXo),e(oo,QXo),e(oo,cn),e(cn,jv),e(jv,yce),e(yce,HXo),e(jv,UXo),e(jv,UN),e(UN,JXo),e(jv,YXo),e(cn,KXo),e(cn,Dv),e(Dv,wce),e(wce,ZXo),e(Dv,eVo),e(Dv,JN),e(JN,oVo),e(Dv,rVo),e(cn,tVo),e(cn,Nv),e(Nv,Ace),e(Ace,aVo),e(Nv,nVo),e(Nv,YN),e(YN,sVo),e(Nv,lVo),e(cn,iVo),e(cn,qv),e(qv,Lce),e(Lce,dVo),e(qv,cVo),e(qv,KN),e(KN,fVo),e(qv,mVo),e(oo,gVo),e(oo,Ov),e(Ov,hVo),e(Ov,Bce),e(Bce,pVo),e(Ov,_Vo),e(Ov,xce),e(xce,uVo),e(oo,bVo),e(oo,kce),e(kce,vVo),e(oo,TVo),g(U5,oo,null),b(c,uke,u),b(c,Yd,u),e(Yd,Gv),e(Gv,Rce),g(J5,Rce,null),e(Yd,FVo),e(Yd,Sce),e(Sce,CVo),b(c,bke,u),b(c,hr,u),g(Y5,hr,null),e(hr,MVo),e(hr,Kd),e(Kd,EVo),e(Kd,Pce),e(Pce,yVo),e(Kd,wVo),e(Kd,$ce),e($ce,AVo),e(Kd,LVo),e(hr,BVo),e(hr,K5),e(K5,xVo),e(K5,Ice),e(Ice,kVo),e(K5,RVo),e(hr,SVo),e(hr,it),g(Z5,it,null),e(it,PVo),e(it,jce),e(jce,$Vo),e(it,IVo),e(it,Zd),e(Zd,jVo),e(Zd,Dce),e(Dce,DVo),e(Zd,NVo),e(Zd,Nce),e(Nce,qVo),e(Zd,OVo),e(it,GVo),e(it,qce),e(qce,XVo),e(it,VVo),g(ey,it,null),e(hr,zVo),e(hr,ro),g(oy,ro,null),e(ro,WVo),e(ro,Oce),e(Oce,QVo),e(ro,HVo),e(ro,fn),e(fn,UVo),e(fn,Gce),e(Gce,JVo),e(fn,YVo),e(fn,Xce),e(Xce,KVo),e(fn,ZVo),e(fn,Vce),e(Vce,ezo),e(fn,ozo),e(ro,rzo),e(ro,ec),e(ec,Xv),e(Xv,zce),e(zce,tzo),e(Xv,azo),e(Xv,ZN),e(ZN,nzo),e(Xv,szo),e(ec,lzo),e(ec,Vv),e(Vv,Wce),e(Wce,izo),e(Vv,dzo),e(Vv,eq),e(eq,czo),e(Vv,fzo),e(ec,mzo),e(ec,zv),e(zv,Qce),e(Qce,gzo),e(zv,hzo),e(zv,oq),e(oq,pzo),e(zv,_zo),e(ro,uzo),e(ro,Wv),e(Wv,bzo),e(Wv,Hce),e(Hce,vzo),e(Wv,Tzo),e(Wv,Uce),e(Uce,Fzo),e(ro,Czo),e(ro,Jce),e(Jce,Mzo),e(ro,Ezo),g(ry,ro,null),b(c,vke,u),b(c,oc,u),e(oc,Qv),e(Qv,Yce),g(ty,Yce,null),e(oc,yzo),e(oc,Kce),e(Kce,wzo),b(c,Tke,u),b(c,pr,u),g(ay,pr,null),e(pr,Azo),e(pr,rc),e(rc,Lzo),e(rc,Zce),e(Zce,Bzo),e(rc,xzo),e(rc,efe),e(efe,kzo),e(rc,Rzo),e(pr,Szo),e(pr,ny),e(ny,Pzo),e(ny,ofe),e(ofe,$zo),e(ny,Izo),e(pr,jzo),e(pr,dt),g(sy,dt,null),e(dt,Dzo),e(dt,rfe),e(rfe,Nzo),e(dt,qzo),e(dt,tc),e(tc,Ozo),e(tc,tfe),e(tfe,Gzo),e(tc,Xzo),e(tc,afe),e(afe,Vzo),e(tc,zzo),e(dt,Wzo),e(dt,nfe),e(nfe,Qzo),e(dt,Hzo),g(ly,dt,null),e(pr,Uzo),e(pr,to),g(iy,to,null),e(to,Jzo),e(to,sfe),e(sfe,Yzo),e(to,Kzo),e(to,mn),e(mn,Zzo),e(mn,lfe),e(lfe,eWo),e(mn,oWo),e(mn,ife),e(ife,rWo),e(mn,tWo),e(mn,dfe),e(dfe,aWo),e(mn,nWo),e(to,sWo),e(to,cfe),e(cfe,Hv),e(Hv,ffe),e(ffe,lWo),e(Hv,iWo),e(Hv,rq),e(rq,dWo),e(Hv,cWo),e(to,fWo),e(to,Uv),e(Uv,mWo),e(Uv,mfe),e(mfe,gWo),e(Uv,hWo),e(Uv,gfe),e(gfe,pWo),e(to,_Wo),e(to,hfe),e(hfe,uWo),e(to,bWo),g(dy,to,null),b(c,Fke,u),b(c,ac,u),e(ac,Jv),e(Jv,pfe),g(cy,pfe,null),e(ac,vWo),e(ac,_fe),e(_fe,TWo),b(c,Cke,u),b(c,_r,u),g(fy,_r,null),e(_r,FWo),e(_r,nc),e(nc,CWo),e(nc,ufe),e(ufe,MWo),e(nc,EWo),e(nc,bfe),e(bfe,yWo),e(nc,wWo),e(_r,AWo),e(_r,my),e(my,LWo),e(my,vfe),e(vfe,BWo),e(my,xWo),e(_r,kWo),e(_r,ct),g(gy,ct,null),e(ct,RWo),e(ct,Tfe),e(Tfe,SWo),e(ct,PWo),e(ct,sc),e(sc,$Wo),e(sc,Ffe),e(Ffe,IWo),e(sc,jWo),e(sc,Cfe),e(Cfe,DWo),e(sc,NWo),e(ct,qWo),e(ct,Mfe),e(Mfe,OWo),e(ct,GWo),g(hy,ct,null),e(_r,XWo),e(_r,ao),g(py,ao,null),e(ao,VWo),e(ao,Efe),e(Efe,zWo),e(ao,WWo),e(ao,gn),e(gn,QWo),e(gn,yfe),e(yfe,HWo),e(gn,UWo),e(gn,wfe),e(wfe,JWo),e(gn,YWo),e(gn,Afe),e(Afe,KWo),e(gn,ZWo),e(ao,eQo),e(ao,Lfe),e(Lfe,Yv),e(Yv,Bfe),e(Bfe,oQo),e(Yv,rQo),e(Yv,tq),e(tq,tQo),e(Yv,aQo),e(ao,nQo),e(ao,Kv),e(Kv,sQo),e(Kv,xfe),e(xfe,lQo),e(Kv,iQo),e(Kv,kfe),e(kfe,dQo),e(ao,cQo),e(ao,Rfe),e(Rfe,fQo),e(ao,mQo),g(_y,ao,null),b(c,Mke,u),b(c,lc,u),e(lc,Zv),e(Zv,Sfe),g(uy,Sfe,null),e(lc,gQo),e(lc,Pfe),e(Pfe,hQo),b(c,Eke,u),b(c,ur,u),g(by,ur,null),e(ur,pQo),e(ur,ic),e(ic,_Qo),e(ic,$fe),e($fe,uQo),e(ic,bQo),e(ic,Ife),e(Ife,vQo),e(ic,TQo),e(ur,FQo),e(ur,vy),e(vy,CQo),e(vy,jfe),e(jfe,MQo),e(vy,EQo),e(ur,yQo),e(ur,ft),g(Ty,ft,null),e(ft,wQo),e(ft,Dfe),e(Dfe,AQo),e(ft,LQo),e(ft,dc),e(dc,BQo),e(dc,Nfe),e(Nfe,xQo),e(dc,kQo),e(dc,qfe),e(qfe,RQo),e(dc,SQo),e(ft,PQo),e(ft,Ofe),e(Ofe,$Qo),e(ft,IQo),g(Fy,ft,null),e(ur,jQo),e(ur,no),g(Cy,no,null),e(no,DQo),e(no,Gfe),e(Gfe,NQo),e(no,qQo),e(no,hn),e(hn,OQo),e(hn,Xfe),e(Xfe,GQo),e(hn,XQo),e(hn,Vfe),e(Vfe,VQo),e(hn,zQo),e(hn,zfe),e(zfe,WQo),e(hn,QQo),e(no,HQo),e(no,My),e(My,e6),e(e6,Wfe),e(Wfe,UQo),e(e6,JQo),e(e6,aq),e(aq,YQo),e(e6,KQo),e(My,ZQo),e(My,o6),e(o6,Qfe),e(Qfe,eHo),e(o6,oHo),e(o6,nq),e(nq,rHo),e(o6,tHo),e(no,aHo),e(no,r6),e(r6,nHo),e(r6,Hfe),e(Hfe,sHo),e(r6,lHo),e(r6,Ufe),e(Ufe,iHo),e(no,dHo),e(no,Jfe),e(Jfe,cHo),e(no,fHo),g(Ey,no,null),b(c,yke,u),b(c,cc,u),e(cc,t6),e(t6,Yfe),g(yy,Yfe,null),e(cc,mHo),e(cc,Kfe),e(Kfe,gHo),b(c,wke,u),b(c,br,u),g(wy,br,null),e(br,hHo),e(br,fc),e(fc,pHo),e(fc,Zfe),e(Zfe,_Ho),e(fc,uHo),e(fc,eme),e(eme,bHo),e(fc,vHo),e(br,THo),e(br,Ay),e(Ay,FHo),e(Ay,ome),e(ome,CHo),e(Ay,MHo),e(br,EHo),e(br,mt),g(Ly,mt,null),e(mt,yHo),e(mt,rme),e(rme,wHo),e(mt,AHo),e(mt,mc),e(mc,LHo),e(mc,tme),e(tme,BHo),e(mc,xHo),e(mc,ame),e(ame,kHo),e(mc,RHo),e(mt,SHo),e(mt,nme),e(nme,PHo),e(mt,$Ho),g(By,mt,null),e(br,IHo),e(br,so),g(xy,so,null),e(so,jHo),e(so,sme),e(sme,DHo),e(so,NHo),e(so,pn),e(pn,qHo),e(pn,lme),e(lme,OHo),e(pn,GHo),e(pn,ime),e(ime,XHo),e(pn,VHo),e(pn,dme),e(dme,zHo),e(pn,WHo),e(so,QHo),e(so,cme),e(cme,a6),e(a6,fme),e(fme,HHo),e(a6,UHo),e(a6,sq),e(sq,JHo),e(a6,YHo),e(so,KHo),e(so,n6),e(n6,ZHo),e(n6,mme),e(mme,eUo),e(n6,oUo),e(n6,gme),e(gme,rUo),e(so,tUo),e(so,hme),e(hme,aUo),e(so,nUo),g(ky,so,null),b(c,Ake,u),b(c,gc,u),e(gc,s6),e(s6,pme),g(Ry,pme,null),e(gc,sUo),e(gc,_me),e(_me,lUo),b(c,Lke,u),b(c,vr,u),g(Sy,vr,null),e(vr,iUo),e(vr,hc),e(hc,dUo),e(hc,ume),e(ume,cUo),e(hc,fUo),e(hc,bme),e(bme,mUo),e(hc,gUo),e(vr,hUo),e(vr,Py),e(Py,pUo),e(Py,vme),e(vme,_Uo),e(Py,uUo),e(vr,bUo),e(vr,gt),g($y,gt,null),e(gt,vUo),e(gt,Tme),e(Tme,TUo),e(gt,FUo),e(gt,pc),e(pc,CUo),e(pc,Fme),e(Fme,MUo),e(pc,EUo),e(pc,Cme),e(Cme,yUo),e(pc,wUo),e(gt,AUo),e(gt,Mme),e(Mme,LUo),e(gt,BUo),g(Iy,gt,null),e(vr,xUo),e(vr,ho),g(jy,ho,null),e(ho,kUo),e(ho,Eme),e(Eme,RUo),e(ho,SUo),e(ho,_n),e(_n,PUo),e(_n,yme),e(yme,$Uo),e(_n,IUo),e(_n,wme),e(wme,jUo),e(_n,DUo),e(_n,Ame),e(Ame,NUo),e(_n,qUo),e(ho,OUo),e(ho,B),e(B,l6),e(l6,Lme),e(Lme,GUo),e(l6,XUo),e(l6,lq),e(lq,VUo),e(l6,zUo),e(B,WUo),e(B,i6),e(i6,Bme),e(Bme,QUo),e(i6,HUo),e(i6,iq),e(iq,UUo),e(i6,JUo),e(B,YUo),e(B,d6),e(d6,xme),e(xme,KUo),e(d6,ZUo),e(d6,dq),e(dq,eJo),e(d6,oJo),e(B,rJo),e(B,c6),e(c6,kme),e(kme,tJo),e(c6,aJo),e(c6,cq),e(cq,nJo),e(c6,sJo),e(B,lJo),e(B,f6),e(f6,Rme),e(Rme,iJo),e(f6,dJo),e(f6,fq),e(fq,cJo),e(f6,fJo),e(B,mJo),e(B,m6),e(m6,Sme),e(Sme,gJo),e(m6,hJo),e(m6,mq),e(mq,pJo),e(m6,_Jo),e(B,uJo),e(B,g6),e(g6,Pme),e(Pme,bJo),e(g6,vJo),e(g6,gq),e(gq,TJo),e(g6,FJo),e(B,CJo),e(B,h6),e(h6,$me),e($me,MJo),e(h6,EJo),e(h6,hq),e(hq,yJo),e(h6,wJo),e(B,AJo),e(B,p6),e(p6,Ime),e(Ime,LJo),e(p6,BJo),e(p6,pq),e(pq,xJo),e(p6,kJo),e(B,RJo),e(B,_6),e(_6,jme),e(jme,SJo),e(_6,PJo),e(_6,_q),e(_q,$Jo),e(_6,IJo),e(B,jJo),e(B,u6),e(u6,Dme),e(Dme,DJo),e(u6,NJo),e(u6,uq),e(uq,qJo),e(u6,OJo),e(B,GJo),e(B,b6),e(b6,Nme),e(Nme,XJo),e(b6,VJo),e(b6,bq),e(bq,zJo),e(b6,WJo),e(B,QJo),e(B,v6),e(v6,qme),e(qme,HJo),e(v6,UJo),e(v6,vq),e(vq,JJo),e(v6,YJo),e(B,KJo),e(B,T6),e(T6,Ome),e(Ome,ZJo),e(T6,eYo),e(T6,Tq),e(Tq,oYo),e(T6,rYo),e(B,tYo),e(B,F6),e(F6,Gme),e(Gme,aYo),e(F6,nYo),e(F6,Fq),e(Fq,sYo),e(F6,lYo),e(B,iYo),e(B,C6),e(C6,Xme),e(Xme,dYo),e(C6,cYo),e(C6,Cq),e(Cq,fYo),e(C6,mYo),e(B,gYo),e(B,Os),e(Os,Vme),e(Vme,hYo),e(Os,pYo),e(Os,Mq),e(Mq,_Yo),e(Os,uYo),e(Os,Eq),e(Eq,bYo),e(Os,vYo),e(B,TYo),e(B,M6),e(M6,zme),e(zme,FYo),e(M6,CYo),e(M6,yq),e(yq,MYo),e(M6,EYo),e(B,yYo),e(B,E6),e(E6,Wme),e(Wme,wYo),e(E6,AYo),e(E6,wq),e(wq,LYo),e(E6,BYo),e(B,xYo),e(B,y6),e(y6,Qme),e(Qme,kYo),e(y6,RYo),e(y6,Aq),e(Aq,SYo),e(y6,PYo),e(B,$Yo),e(B,w6),e(w6,Hme),e(Hme,IYo),e(w6,jYo),e(w6,Lq),e(Lq,DYo),e(w6,NYo),e(B,qYo),e(B,A6),e(A6,Ume),e(Ume,OYo),e(A6,GYo),e(A6,Bq),e(Bq,XYo),e(A6,VYo),e(B,zYo),e(B,L6),e(L6,Jme),e(Jme,WYo),e(L6,QYo),e(L6,xq),e(xq,HYo),e(L6,UYo),e(B,JYo),e(B,B6),e(B6,Yme),e(Yme,YYo),e(B6,KYo),e(B6,kq),e(kq,ZYo),e(B6,eKo),e(B,oKo),e(B,x6),e(x6,Kme),e(Kme,rKo),e(x6,tKo),e(x6,Rq),e(Rq,aKo),e(x6,nKo),e(B,sKo),e(B,k6),e(k6,Zme),e(Zme,lKo),e(k6,iKo),e(k6,Sq),e(Sq,dKo),e(k6,cKo),e(B,fKo),e(B,R6),e(R6,ege),e(ege,mKo),e(R6,gKo),e(R6,Pq),e(Pq,hKo),e(R6,pKo),e(B,_Ko),e(B,S6),e(S6,oge),e(oge,uKo),e(S6,bKo),e(S6,$q),e($q,vKo),e(S6,TKo),e(B,FKo),e(B,P6),e(P6,rge),e(rge,CKo),e(P6,MKo),e(P6,Iq),e(Iq,EKo),e(P6,yKo),e(B,wKo),e(B,$6),e($6,tge),e(tge,AKo),e($6,LKo),e($6,jq),e(jq,BKo),e($6,xKo),e(B,kKo),e(B,I6),e(I6,age),e(age,RKo),e(I6,SKo),e(I6,Dq),e(Dq,PKo),e(I6,$Ko),e(B,IKo),e(B,j6),e(j6,nge),e(nge,jKo),e(j6,DKo),e(j6,Nq),e(Nq,NKo),e(j6,qKo),e(B,OKo),e(B,D6),e(D6,sge),e(sge,GKo),e(D6,XKo),e(D6,qq),e(qq,VKo),e(D6,zKo),e(B,WKo),e(B,N6),e(N6,lge),e(lge,QKo),e(N6,HKo),e(N6,Oq),e(Oq,UKo),e(N6,JKo),e(B,YKo),e(B,q6),e(q6,ige),e(ige,KKo),e(q6,ZKo),e(q6,Gq),e(Gq,eZo),e(q6,oZo),e(B,rZo),e(B,O6),e(O6,dge),e(dge,tZo),e(O6,aZo),e(O6,Xq),e(Xq,nZo),e(O6,sZo),e(B,lZo),e(B,G6),e(G6,cge),e(cge,iZo),e(G6,dZo),e(G6,Vq),e(Vq,cZo),e(G6,fZo),e(B,mZo),e(B,X6),e(X6,fge),e(fge,gZo),e(X6,hZo),e(X6,zq),e(zq,pZo),e(X6,_Zo),e(B,uZo),e(B,V6),e(V6,mge),e(mge,bZo),e(V6,vZo),e(V6,Wq),e(Wq,TZo),e(V6,FZo),e(B,CZo),e(B,z6),e(z6,gge),e(gge,MZo),e(z6,EZo),e(z6,Qq),e(Qq,yZo),e(z6,wZo),e(B,AZo),e(B,W6),e(W6,hge),e(hge,LZo),e(W6,BZo),e(W6,Hq),e(Hq,xZo),e(W6,kZo),e(B,RZo),e(B,Q6),e(Q6,pge),e(pge,SZo),e(Q6,PZo),e(Q6,Uq),e(Uq,$Zo),e(Q6,IZo),e(ho,jZo),e(ho,_ge),e(_ge,DZo),e(ho,NZo),g(Dy,ho,null),b(c,Bke,u),b(c,_c,u),e(_c,H6),e(H6,uge),g(Ny,uge,null),e(_c,qZo),e(_c,bge),e(bge,OZo),b(c,xke,u),b(c,Tr,u),g(qy,Tr,null),e(Tr,GZo),e(Tr,uc),e(uc,XZo),e(uc,vge),e(vge,VZo),e(uc,zZo),e(uc,Tge),e(Tge,WZo),e(uc,QZo),e(Tr,HZo),e(Tr,Oy),e(Oy,UZo),e(Oy,Fge),e(Fge,JZo),e(Oy,YZo),e(Tr,KZo),e(Tr,ht),g(Gy,ht,null),e(ht,ZZo),e(ht,Cge),e(Cge,eer),e(ht,oer),e(ht,bc),e(bc,rer),e(bc,Mge),e(Mge,ter),e(bc,aer),e(bc,Ege),e(Ege,ner),e(bc,ser),e(ht,ler),e(ht,yge),e(yge,ier),e(ht,der),g(Xy,ht,null),e(Tr,cer),e(Tr,po),g(Vy,po,null),e(po,fer),e(po,wge),e(wge,mer),e(po,ger),e(po,un),e(un,her),e(un,Age),e(Age,per),e(un,_er),e(un,Lge),e(Lge,uer),e(un,ber),e(un,Bge),e(Bge,ver),e(un,Ter),e(po,Fer),e(po,H),e(H,U6),e(U6,xge),e(xge,Cer),e(U6,Mer),e(U6,Jq),e(Jq,Eer),e(U6,yer),e(H,wer),e(H,J6),e(J6,kge),e(kge,Aer),e(J6,Ler),e(J6,Yq),e(Yq,Ber),e(J6,xer),e(H,ker),e(H,Y6),e(Y6,Rge),e(Rge,Rer),e(Y6,Ser),e(Y6,Kq),e(Kq,Per),e(Y6,$er),e(H,Ier),e(H,K6),e(K6,Sge),e(Sge,jer),e(K6,Der),e(K6,Zq),e(Zq,Ner),e(K6,qer),e(H,Oer),e(H,Z6),e(Z6,Pge),e(Pge,Ger),e(Z6,Xer),e(Z6,eO),e(eO,Ver),e(Z6,zer),e(H,Wer),e(H,eT),e(eT,$ge),e($ge,Qer),e(eT,Her),e(eT,oO),e(oO,Uer),e(eT,Jer),e(H,Yer),e(H,oT),e(oT,Ige),e(Ige,Ker),e(oT,Zer),e(oT,rO),e(rO,eor),e(oT,oor),e(H,ror),e(H,rT),e(rT,jge),e(jge,tor),e(rT,aor),e(rT,tO),e(tO,nor),e(rT,sor),e(H,lor),e(H,tT),e(tT,Dge),e(Dge,ior),e(tT,dor),e(tT,aO),e(aO,cor),e(tT,mor),e(H,gor),e(H,aT),e(aT,Nge),e(Nge,hor),e(aT,por),e(aT,nO),e(nO,_or),e(aT,uor),e(H,bor),e(H,nT),e(nT,qge),e(qge,vor),e(nT,Tor),e(nT,sO),e(sO,For),e(nT,Cor),e(H,Mor),e(H,sT),e(sT,Oge),e(Oge,Eor),e(sT,yor),e(sT,lO),e(lO,wor),e(sT,Aor),e(H,Lor),e(H,lT),e(lT,Gge),e(Gge,Bor),e(lT,xor),e(lT,iO),e(iO,kor),e(lT,Ror),e(H,Sor),e(H,iT),e(iT,Xge),e(Xge,Por),e(iT,$or),e(iT,dO),e(dO,Ior),e(iT,jor),e(H,Dor),e(H,dT),e(dT,Vge),e(Vge,Nor),e(dT,qor),e(dT,cO),e(cO,Oor),e(dT,Gor),e(H,Xor),e(H,cT),e(cT,zge),e(zge,Vor),e(cT,zor),e(cT,fO),e(fO,Wor),e(cT,Qor),e(H,Hor),e(H,fT),e(fT,Wge),e(Wge,Uor),e(fT,Jor),e(fT,mO),e(mO,Yor),e(fT,Kor),e(H,Zor),e(H,mT),e(mT,Qge),e(Qge,err),e(mT,orr),e(mT,gO),e(gO,rrr),e(mT,trr),e(H,arr),e(H,gT),e(gT,Hge),e(Hge,nrr),e(gT,srr),e(gT,hO),e(hO,lrr),e(gT,irr),e(H,drr),e(H,hT),e(hT,Uge),e(Uge,crr),e(hT,frr),e(hT,pO),e(pO,mrr),e(hT,grr),e(H,hrr),e(H,pT),e(pT,Jge),e(Jge,prr),e(pT,_rr),e(pT,_O),e(_O,urr),e(pT,brr),e(H,vrr),e(H,_T),e(_T,Yge),e(Yge,Trr),e(_T,Frr),e(_T,uO),e(uO,Crr),e(_T,Mrr),e(po,Err),e(po,Kge),e(Kge,yrr),e(po,wrr),g(zy,po,null),b(c,kke,u),b(c,vc,u),e(vc,uT),e(uT,Zge),g(Wy,Zge,null),e(vc,Arr),e(vc,ehe),e(ehe,Lrr),b(c,Rke,u),b(c,Fr,u),g(Qy,Fr,null),e(Fr,Brr),e(Fr,Tc),e(Tc,xrr),e(Tc,ohe),e(ohe,krr),e(Tc,Rrr),e(Tc,rhe),e(rhe,Srr),e(Tc,Prr),e(Fr,$rr),e(Fr,Hy),e(Hy,Irr),e(Hy,the),e(the,jrr),e(Hy,Drr),e(Fr,Nrr),e(Fr,pt),g(Uy,pt,null),e(pt,qrr),e(pt,ahe),e(ahe,Orr),e(pt,Grr),e(pt,Fc),e(Fc,Xrr),e(Fc,nhe),e(nhe,Vrr),e(Fc,zrr),e(Fc,she),e(she,Wrr),e(Fc,Qrr),e(pt,Hrr),e(pt,lhe),e(lhe,Urr),e(pt,Jrr),g(Jy,pt,null),e(Fr,Yrr),e(Fr,_o),g(Yy,_o,null),e(_o,Krr),e(_o,ihe),e(ihe,Zrr),e(_o,etr),e(_o,bn),e(bn,otr),e(bn,dhe),e(dhe,rtr),e(bn,ttr),e(bn,che),e(che,atr),e(bn,ntr),e(bn,fhe),e(fhe,str),e(bn,ltr),e(_o,itr),e(_o,me),e(me,bT),e(bT,mhe),e(mhe,dtr),e(bT,ctr),e(bT,bO),e(bO,ftr),e(bT,mtr),e(me,gtr),e(me,vT),e(vT,ghe),e(ghe,htr),e(vT,ptr),e(vT,vO),e(vO,_tr),e(vT,utr),e(me,btr),e(me,TT),e(TT,hhe),e(hhe,vtr),e(TT,Ttr),e(TT,TO),e(TO,Ftr),e(TT,Ctr),e(me,Mtr),e(me,FT),e(FT,phe),e(phe,Etr),e(FT,ytr),e(FT,FO),e(FO,wtr),e(FT,Atr),e(me,Ltr),e(me,CT),e(CT,_he),e(_he,Btr),e(CT,xtr),e(CT,CO),e(CO,ktr),e(CT,Rtr),e(me,Str),e(me,MT),e(MT,uhe),e(uhe,Ptr),e(MT,$tr),e(MT,MO),e(MO,Itr),e(MT,jtr),e(me,Dtr),e(me,ET),e(ET,bhe),e(bhe,Ntr),e(ET,qtr),e(ET,EO),e(EO,Otr),e(ET,Gtr),e(me,Xtr),e(me,yT),e(yT,vhe),e(vhe,Vtr),e(yT,ztr),e(yT,yO),e(yO,Wtr),e(yT,Qtr),e(me,Htr),e(me,wT),e(wT,The),e(The,Utr),e(wT,Jtr),e(wT,wO),e(wO,Ytr),e(wT,Ktr),e(me,Ztr),e(me,AT),e(AT,Fhe),e(Fhe,ear),e(AT,oar),e(AT,AO),e(AO,rar),e(AT,tar),e(me,aar),e(me,LT),e(LT,Che),e(Che,nar),e(LT,sar),e(LT,LO),e(LO,lar),e(LT,iar),e(_o,dar),e(_o,Mhe),e(Mhe,car),e(_o,far),g(Ky,_o,null),b(c,Ske,u),b(c,Cc,u),e(Cc,BT),e(BT,Ehe),g(Zy,Ehe,null),e(Cc,mar),e(Cc,yhe),e(yhe,gar),b(c,Pke,u),b(c,Cr,u),g(ew,Cr,null),e(Cr,har),e(Cr,Mc),e(Mc,par),e(Mc,whe),e(whe,_ar),e(Mc,uar),e(Mc,Ahe),e(Ahe,bar),e(Mc,Tar),e(Cr,Far),e(Cr,ow),e(ow,Car),e(ow,Lhe),e(Lhe,Mar),e(ow,Ear),e(Cr,yar),e(Cr,_t),g(rw,_t,null),e(_t,war),e(_t,Bhe),e(Bhe,Aar),e(_t,Lar),e(_t,Ec),e(Ec,Bar),e(Ec,xhe),e(xhe,xar),e(Ec,kar),e(Ec,khe),e(khe,Rar),e(Ec,Sar),e(_t,Par),e(_t,Rhe),e(Rhe,$ar),e(_t,Iar),g(tw,_t,null),e(Cr,jar),e(Cr,uo),g(aw,uo,null),e(uo,Dar),e(uo,She),e(She,Nar),e(uo,qar),e(uo,vn),e(vn,Oar),e(vn,Phe),e(Phe,Gar),e(vn,Xar),e(vn,$he),e($he,Var),e(vn,zar),e(vn,Ihe),e(Ihe,War),e(vn,Qar),e(uo,Har),e(uo,nw),e(nw,xT),e(xT,jhe),e(jhe,Uar),e(xT,Jar),e(xT,BO),e(BO,Yar),e(xT,Kar),e(nw,Zar),e(nw,kT),e(kT,Dhe),e(Dhe,enr),e(kT,onr),e(kT,xO),e(xO,rnr),e(kT,tnr),e(uo,anr),e(uo,Nhe),e(Nhe,nnr),e(uo,snr),g(sw,uo,null),b(c,$ke,u),b(c,yc,u),e(yc,RT),e(RT,qhe),g(lw,qhe,null),e(yc,lnr),e(yc,Ohe),e(Ohe,inr),b(c,Ike,u),b(c,Mr,u),g(iw,Mr,null),e(Mr,dnr),e(Mr,wc),e(wc,cnr),e(wc,Ghe),e(Ghe,fnr),e(wc,mnr),e(wc,Xhe),e(Xhe,gnr),e(wc,hnr),e(Mr,pnr),e(Mr,dw),e(dw,_nr),e(dw,Vhe),e(Vhe,unr),e(dw,bnr),e(Mr,vnr),e(Mr,ut),g(cw,ut,null),e(ut,Tnr),e(ut,zhe),e(zhe,Fnr),e(ut,Cnr),e(ut,Ac),e(Ac,Mnr),e(Ac,Whe),e(Whe,Enr),e(Ac,ynr),e(Ac,Qhe),e(Qhe,wnr),e(Ac,Anr),e(ut,Lnr),e(ut,Hhe),e(Hhe,Bnr),e(ut,xnr),g(fw,ut,null),e(Mr,knr),e(Mr,bo),g(mw,bo,null),e(bo,Rnr),e(bo,Uhe),e(Uhe,Snr),e(bo,Pnr),e(bo,Tn),e(Tn,$nr),e(Tn,Jhe),e(Jhe,Inr),e(Tn,jnr),e(Tn,Yhe),e(Yhe,Dnr),e(Tn,Nnr),e(Tn,Khe),e(Khe,qnr),e(Tn,Onr),e(bo,Gnr),e(bo,Y),e(Y,ST),e(ST,Zhe),e(Zhe,Xnr),e(ST,Vnr),e(ST,kO),e(kO,znr),e(ST,Wnr),e(Y,Qnr),e(Y,PT),e(PT,epe),e(epe,Hnr),e(PT,Unr),e(PT,RO),e(RO,Jnr),e(PT,Ynr),e(Y,Knr),e(Y,$T),e($T,ope),e(ope,Znr),e($T,esr),e($T,SO),e(SO,osr),e($T,rsr),e(Y,tsr),e(Y,IT),e(IT,rpe),e(rpe,asr),e(IT,nsr),e(IT,PO),e(PO,ssr),e(IT,lsr),e(Y,isr),e(Y,jT),e(jT,tpe),e(tpe,dsr),e(jT,csr),e(jT,$O),e($O,fsr),e(jT,msr),e(Y,gsr),e(Y,DT),e(DT,ape),e(ape,hsr),e(DT,psr),e(DT,IO),e(IO,_sr),e(DT,usr),e(Y,bsr),e(Y,NT),e(NT,npe),e(npe,vsr),e(NT,Tsr),e(NT,jO),e(jO,Fsr),e(NT,Csr),e(Y,Msr),e(Y,qT),e(qT,spe),e(spe,Esr),e(qT,ysr),e(qT,DO),e(DO,wsr),e(qT,Asr),e(Y,Lsr),e(Y,OT),e(OT,lpe),e(lpe,Bsr),e(OT,xsr),e(OT,NO),e(NO,ksr),e(OT,Rsr),e(Y,Ssr),e(Y,GT),e(GT,ipe),e(ipe,Psr),e(GT,$sr),e(GT,qO),e(qO,Isr),e(GT,jsr),e(Y,Dsr),e(Y,XT),e(XT,dpe),e(dpe,Nsr),e(XT,qsr),e(XT,OO),e(OO,Osr),e(XT,Gsr),e(Y,Xsr),e(Y,VT),e(VT,cpe),e(cpe,Vsr),e(VT,zsr),e(VT,GO),e(GO,Wsr),e(VT,Qsr),e(Y,Hsr),e(Y,zT),e(zT,fpe),e(fpe,Usr),e(zT,Jsr),e(zT,XO),e(XO,Ysr),e(zT,Ksr),e(Y,Zsr),e(Y,WT),e(WT,mpe),e(mpe,elr),e(WT,olr),e(WT,VO),e(VO,rlr),e(WT,tlr),e(Y,alr),e(Y,QT),e(QT,gpe),e(gpe,nlr),e(QT,slr),e(QT,zO),e(zO,llr),e(QT,ilr),e(Y,dlr),e(Y,HT),e(HT,hpe),e(hpe,clr),e(HT,flr),e(HT,WO),e(WO,mlr),e(HT,glr),e(Y,hlr),e(Y,UT),e(UT,ppe),e(ppe,plr),e(UT,_lr),e(UT,QO),e(QO,ulr),e(UT,blr),e(Y,vlr),e(Y,JT),e(JT,_pe),e(_pe,Tlr),e(JT,Flr),e(JT,HO),e(HO,Clr),e(JT,Mlr),e(Y,Elr),e(Y,YT),e(YT,upe),e(upe,ylr),e(YT,wlr),e(YT,UO),e(UO,Alr),e(YT,Llr),e(Y,Blr),e(Y,KT),e(KT,bpe),e(bpe,xlr),e(KT,klr),e(KT,JO),e(JO,Rlr),e(KT,Slr),e(bo,Plr),e(bo,vpe),e(vpe,$lr),e(bo,Ilr),g(gw,bo,null),b(c,jke,u),b(c,Lc,u),e(Lc,ZT),e(ZT,Tpe),g(hw,Tpe,null),e(Lc,jlr),e(Lc,Fpe),e(Fpe,Dlr),b(c,Dke,u),b(c,Er,u),g(pw,Er,null),e(Er,Nlr),e(Er,Bc),e(Bc,qlr),e(Bc,Cpe),e(Cpe,Olr),e(Bc,Glr),e(Bc,Mpe),e(Mpe,Xlr),e(Bc,Vlr),e(Er,zlr),e(Er,_w),e(_w,Wlr),e(_w,Epe),e(Epe,Qlr),e(_w,Hlr),e(Er,Ulr),e(Er,bt),g(uw,bt,null),e(bt,Jlr),e(bt,ype),e(ype,Ylr),e(bt,Klr),e(bt,xc),e(xc,Zlr),e(xc,wpe),e(wpe,eir),e(xc,oir),e(xc,Ape),e(Ape,rir),e(xc,tir),e(bt,air),e(bt,Lpe),e(Lpe,nir),e(bt,sir),g(bw,bt,null),e(Er,lir),e(Er,vo),g(vw,vo,null),e(vo,iir),e(vo,Bpe),e(Bpe,dir),e(vo,cir),e(vo,Fn),e(Fn,fir),e(Fn,xpe),e(xpe,mir),e(Fn,gir),e(Fn,kpe),e(kpe,hir),e(Fn,pir),e(Fn,Rpe),e(Rpe,_ir),e(Fn,uir),e(vo,bir),e(vo,ue),e(ue,e7),e(e7,Spe),e(Spe,vir),e(e7,Tir),e(e7,YO),e(YO,Fir),e(e7,Cir),e(ue,Mir),e(ue,o7),e(o7,Ppe),e(Ppe,Eir),e(o7,yir),e(o7,KO),e(KO,wir),e(o7,Air),e(ue,Lir),e(ue,r7),e(r7,$pe),e($pe,Bir),e(r7,xir),e(r7,ZO),e(ZO,kir),e(r7,Rir),e(ue,Sir),e(ue,t7),e(t7,Ipe),e(Ipe,Pir),e(t7,$ir),e(t7,eG),e(eG,Iir),e(t7,jir),e(ue,Dir),e(ue,a7),e(a7,jpe),e(jpe,Nir),e(a7,qir),e(a7,oG),e(oG,Oir),e(a7,Gir),e(ue,Xir),e(ue,n7),e(n7,Dpe),e(Dpe,Vir),e(n7,zir),e(n7,rG),e(rG,Wir),e(n7,Qir),e(ue,Hir),e(ue,s7),e(s7,Npe),e(Npe,Uir),e(s7,Jir),e(s7,tG),e(tG,Yir),e(s7,Kir),e(ue,Zir),e(ue,l7),e(l7,qpe),e(qpe,edr),e(l7,odr),e(l7,aG),e(aG,rdr),e(l7,tdr),e(ue,adr),e(ue,i7),e(i7,Ope),e(Ope,ndr),e(i7,sdr),e(i7,nG),e(nG,ldr),e(i7,idr),e(ue,ddr),e(ue,d7),e(d7,Gpe),e(Gpe,cdr),e(d7,fdr),e(d7,sG),e(sG,mdr),e(d7,gdr),e(vo,hdr),e(vo,Xpe),e(Xpe,pdr),e(vo,_dr),g(Tw,vo,null),b(c,Nke,u),b(c,kc,u),e(kc,c7),e(c7,Vpe),g(Fw,Vpe,null),e(kc,udr),e(kc,zpe),e(zpe,bdr),b(c,qke,u),b(c,yr,u),g(Cw,yr,null),e(yr,vdr),e(yr,Rc),e(Rc,Tdr),e(Rc,Wpe),e(Wpe,Fdr),e(Rc,Cdr),e(Rc,Qpe),e(Qpe,Mdr),e(Rc,Edr),e(yr,ydr),e(yr,Mw),e(Mw,wdr),e(Mw,Hpe),e(Hpe,Adr),e(Mw,Ldr),e(yr,Bdr),e(yr,vt),g(Ew,vt,null),e(vt,xdr),e(vt,Upe),e(Upe,kdr),e(vt,Rdr),e(vt,Sc),e(Sc,Sdr),e(Sc,Jpe),e(Jpe,Pdr),e(Sc,$dr),e(Sc,Ype),e(Ype,Idr),e(Sc,jdr),e(vt,Ddr),e(vt,Kpe),e(Kpe,Ndr),e(vt,qdr),g(yw,vt,null),e(yr,Odr),e(yr,To),g(ww,To,null),e(To,Gdr),e(To,Zpe),e(Zpe,Xdr),e(To,Vdr),e(To,Cn),e(Cn,zdr),e(Cn,e_e),e(e_e,Wdr),e(Cn,Qdr),e(Cn,o_e),e(o_e,Hdr),e(Cn,Udr),e(Cn,r_e),e(r_e,Jdr),e(Cn,Ydr),e(To,Kdr),e(To,V),e(V,f7),e(f7,t_e),e(t_e,Zdr),e(f7,ecr),e(f7,lG),e(lG,ocr),e(f7,rcr),e(V,tcr),e(V,m7),e(m7,a_e),e(a_e,acr),e(m7,ncr),e(m7,iG),e(iG,scr),e(m7,lcr),e(V,icr),e(V,g7),e(g7,n_e),e(n_e,dcr),e(g7,ccr),e(g7,dG),e(dG,fcr),e(g7,mcr),e(V,gcr),e(V,h7),e(h7,s_e),e(s_e,hcr),e(h7,pcr),e(h7,cG),e(cG,_cr),e(h7,ucr),e(V,bcr),e(V,p7),e(p7,l_e),e(l_e,vcr),e(p7,Tcr),e(p7,fG),e(fG,Fcr),e(p7,Ccr),e(V,Mcr),e(V,_7),e(_7,i_e),e(i_e,Ecr),e(_7,ycr),e(_7,mG),e(mG,wcr),e(_7,Acr),e(V,Lcr),e(V,u7),e(u7,d_e),e(d_e,Bcr),e(u7,xcr),e(u7,gG),e(gG,kcr),e(u7,Rcr),e(V,Scr),e(V,b7),e(b7,c_e),e(c_e,Pcr),e(b7,$cr),e(b7,hG),e(hG,Icr),e(b7,jcr),e(V,Dcr),e(V,v7),e(v7,f_e),e(f_e,Ncr),e(v7,qcr),e(v7,pG),e(pG,Ocr),e(v7,Gcr),e(V,Xcr),e(V,T7),e(T7,m_e),e(m_e,Vcr),e(T7,zcr),e(T7,_G),e(_G,Wcr),e(T7,Qcr),e(V,Hcr),e(V,F7),e(F7,g_e),e(g_e,Ucr),e(F7,Jcr),e(F7,uG),e(uG,Ycr),e(F7,Kcr),e(V,Zcr),e(V,C7),e(C7,h_e),e(h_e,efr),e(C7,ofr),e(C7,bG),e(bG,rfr),e(C7,tfr),e(V,afr),e(V,M7),e(M7,p_e),e(p_e,nfr),e(M7,sfr),e(M7,vG),e(vG,lfr),e(M7,ifr),e(V,dfr),e(V,E7),e(E7,__e),e(__e,cfr),e(E7,ffr),e(E7,TG),e(TG,mfr),e(E7,gfr),e(V,hfr),e(V,y7),e(y7,u_e),e(u_e,pfr),e(y7,_fr),e(y7,FG),e(FG,ufr),e(y7,bfr),e(V,vfr),e(V,w7),e(w7,b_e),e(b_e,Tfr),e(w7,Ffr),e(w7,CG),e(CG,Cfr),e(w7,Mfr),e(V,Efr),e(V,A7),e(A7,v_e),e(v_e,yfr),e(A7,wfr),e(A7,MG),e(MG,Afr),e(A7,Lfr),e(V,Bfr),e(V,L7),e(L7,T_e),e(T_e,xfr),e(L7,kfr),e(L7,EG),e(EG,Rfr),e(L7,Sfr),e(V,Pfr),e(V,B7),e(B7,F_e),e(F_e,$fr),e(B7,Ifr),e(B7,yG),e(yG,jfr),e(B7,Dfr),e(V,Nfr),e(V,x7),e(x7,C_e),e(C_e,qfr),e(x7,Ofr),e(x7,wG),e(wG,Gfr),e(x7,Xfr),e(V,Vfr),e(V,k7),e(k7,M_e),e(M_e,zfr),e(k7,Wfr),e(k7,AG),e(AG,Qfr),e(k7,Hfr),e(V,Ufr),e(V,R7),e(R7,E_e),e(E_e,Jfr),e(R7,Yfr),e(R7,LG),e(LG,Kfr),e(R7,Zfr),e(V,emr),e(V,S7),e(S7,y_e),e(y_e,omr),e(S7,rmr),e(S7,BG),e(BG,tmr),e(S7,amr),e(V,nmr),e(V,P7),e(P7,w_e),e(w_e,smr),e(P7,lmr),e(P7,xG),e(xG,imr),e(P7,dmr),e(V,cmr),e(V,$7),e($7,A_e),e(A_e,fmr),e($7,mmr),e($7,kG),e(kG,gmr),e($7,hmr),e(To,pmr),e(To,L_e),e(L_e,_mr),e(To,umr),g(Aw,To,null),b(c,Oke,u),b(c,Pc,u),e(Pc,I7),e(I7,B_e),g(Lw,B_e,null),e(Pc,bmr),e(Pc,x_e),e(x_e,vmr),b(c,Gke,u),b(c,wr,u),g(Bw,wr,null),e(wr,Tmr),e(wr,$c),e($c,Fmr),e($c,k_e),e(k_e,Cmr),e($c,Mmr),e($c,R_e),e(R_e,Emr),e($c,ymr),e(wr,wmr),e(wr,xw),e(xw,Amr),e(xw,S_e),e(S_e,Lmr),e(xw,Bmr),e(wr,xmr),e(wr,Tt),g(kw,Tt,null),e(Tt,kmr),e(Tt,P_e),e(P_e,Rmr),e(Tt,Smr),e(Tt,Ic),e(Ic,Pmr),e(Ic,$_e),e($_e,$mr),e(Ic,Imr),e(Ic,I_e),e(I_e,jmr),e(Ic,Dmr),e(Tt,Nmr),e(Tt,j_e),e(j_e,qmr),e(Tt,Omr),g(Rw,Tt,null),e(wr,Gmr),e(wr,Fo),g(Sw,Fo,null),e(Fo,Xmr),e(Fo,D_e),e(D_e,Vmr),e(Fo,zmr),e(Fo,Mn),e(Mn,Wmr),e(Mn,N_e),e(N_e,Qmr),e(Mn,Hmr),e(Mn,q_e),e(q_e,Umr),e(Mn,Jmr),e(Mn,O_e),e(O_e,Ymr),e(Mn,Kmr),e(Fo,Zmr),e(Fo,ae),e(ae,j7),e(j7,G_e),e(G_e,egr),e(j7,ogr),e(j7,RG),e(RG,rgr),e(j7,tgr),e(ae,agr),e(ae,D7),e(D7,X_e),e(X_e,ngr),e(D7,sgr),e(D7,SG),e(SG,lgr),e(D7,igr),e(ae,dgr),e(ae,N7),e(N7,V_e),e(V_e,cgr),e(N7,fgr),e(N7,PG),e(PG,mgr),e(N7,ggr),e(ae,hgr),e(ae,q7),e(q7,z_e),e(z_e,pgr),e(q7,_gr),e(q7,$G),e($G,ugr),e(q7,bgr),e(ae,vgr),e(ae,O7),e(O7,W_e),e(W_e,Tgr),e(O7,Fgr),e(O7,IG),e(IG,Cgr),e(O7,Mgr),e(ae,Egr),e(ae,G7),e(G7,Q_e),e(Q_e,ygr),e(G7,wgr),e(G7,jG),e(jG,Agr),e(G7,Lgr),e(ae,Bgr),e(ae,X7),e(X7,H_e),e(H_e,xgr),e(X7,kgr),e(X7,DG),e(DG,Rgr),e(X7,Sgr),e(ae,Pgr),e(ae,V7),e(V7,U_e),e(U_e,$gr),e(V7,Igr),e(V7,NG),e(NG,jgr),e(V7,Dgr),e(ae,Ngr),e(ae,z7),e(z7,J_e),e(J_e,qgr),e(z7,Ogr),e(z7,qG),e(qG,Ggr),e(z7,Xgr),e(ae,Vgr),e(ae,W7),e(W7,Y_e),e(Y_e,zgr),e(W7,Wgr),e(W7,OG),e(OG,Qgr),e(W7,Hgr),e(ae,Ugr),e(ae,Q7),e(Q7,K_e),e(K_e,Jgr),e(Q7,Ygr),e(Q7,GG),e(GG,Kgr),e(Q7,Zgr),e(ae,ehr),e(ae,H7),e(H7,Z_e),e(Z_e,ohr),e(H7,rhr),e(H7,XG),e(XG,thr),e(H7,ahr),e(ae,nhr),e(ae,U7),e(U7,eue),e(eue,shr),e(U7,lhr),e(U7,VG),e(VG,ihr),e(U7,dhr),e(ae,chr),e(ae,J7),e(J7,oue),e(oue,fhr),e(J7,mhr),e(J7,zG),e(zG,ghr),e(J7,hhr),e(ae,phr),e(ae,Y7),e(Y7,rue),e(rue,_hr),e(Y7,uhr),e(Y7,WG),e(WG,bhr),e(Y7,vhr),e(ae,Thr),e(ae,K7),e(K7,tue),e(tue,Fhr),e(K7,Chr),e(K7,QG),e(QG,Mhr),e(K7,Ehr),e(ae,yhr),e(ae,Z7),e(Z7,aue),e(aue,whr),e(Z7,Ahr),e(Z7,HG),e(HG,Lhr),e(Z7,Bhr),e(Fo,xhr),e(Fo,nue),e(nue,khr),e(Fo,Rhr),g(Pw,Fo,null),b(c,Xke,u),b(c,jc,u),e(jc,eF),e(eF,sue),g($w,sue,null),e(jc,Shr),e(jc,lue),e(lue,Phr),b(c,Vke,u),b(c,Ar,u),g(Iw,Ar,null),e(Ar,$hr),e(Ar,Dc),e(Dc,Ihr),e(Dc,iue),e(iue,jhr),e(Dc,Dhr),e(Dc,due),e(due,Nhr),e(Dc,qhr),e(Ar,Ohr),e(Ar,jw),e(jw,Ghr),e(jw,cue),e(cue,Xhr),e(jw,Vhr),e(Ar,zhr),e(Ar,Ft),g(Dw,Ft,null),e(Ft,Whr),e(Ft,fue),e(fue,Qhr),e(Ft,Hhr),e(Ft,Nc),e(Nc,Uhr),e(Nc,mue),e(mue,Jhr),e(Nc,Yhr),e(Nc,gue),e(gue,Khr),e(Nc,Zhr),e(Ft,epr),e(Ft,hue),e(hue,opr),e(Ft,rpr),g(Nw,Ft,null),e(Ar,tpr),e(Ar,Co),g(qw,Co,null),e(Co,apr),e(Co,pue),e(pue,npr),e(Co,spr),e(Co,En),e(En,lpr),e(En,_ue),e(_ue,ipr),e(En,dpr),e(En,uue),e(uue,cpr),e(En,fpr),e(En,bue),e(bue,mpr),e(En,gpr),e(Co,hpr),e(Co,vue),e(vue,oF),e(oF,Tue),e(Tue,ppr),e(oF,_pr),e(oF,UG),e(UG,upr),e(oF,bpr),e(Co,vpr),e(Co,Fue),e(Fue,Tpr),e(Co,Fpr),g(Ow,Co,null),b(c,zke,u),b(c,qc,u),e(qc,rF),e(rF,Cue),g(Gw,Cue,null),e(qc,Cpr),e(qc,Mue),e(Mue,Mpr),b(c,Wke,u),b(c,Lr,u),g(Xw,Lr,null),e(Lr,Epr),e(Lr,Oc),e(Oc,ypr),e(Oc,Eue),e(Eue,wpr),e(Oc,Apr),e(Oc,yue),e(yue,Lpr),e(Oc,Bpr),e(Lr,xpr),e(Lr,Vw),e(Vw,kpr),e(Vw,wue),e(wue,Rpr),e(Vw,Spr),e(Lr,Ppr),e(Lr,Ct),g(zw,Ct,null),e(Ct,$pr),e(Ct,Aue),e(Aue,Ipr),e(Ct,jpr),e(Ct,Gc),e(Gc,Dpr),e(Gc,Lue),e(Lue,Npr),e(Gc,qpr),e(Gc,Bue),e(Bue,Opr),e(Gc,Gpr),e(Ct,Xpr),e(Ct,xue),e(xue,Vpr),e(Ct,zpr),g(Ww,Ct,null),e(Lr,Wpr),e(Lr,Mo),g(Qw,Mo,null),e(Mo,Qpr),e(Mo,kue),e(kue,Hpr),e(Mo,Upr),e(Mo,yn),e(yn,Jpr),e(yn,Rue),e(Rue,Ypr),e(yn,Kpr),e(yn,Sue),e(Sue,Zpr),e(yn,e_r),e(yn,Pue),e(Pue,o_r),e(yn,r_r),e(Mo,t_r),e(Mo,K),e(K,tF),e(tF,$ue),e($ue,a_r),e(tF,n_r),e(tF,JG),e(JG,s_r),e(tF,l_r),e(K,i_r),e(K,aF),e(aF,Iue),e(Iue,d_r),e(aF,c_r),e(aF,YG),e(YG,f_r),e(aF,m_r),e(K,g_r),e(K,nF),e(nF,jue),e(jue,h_r),e(nF,p_r),e(nF,KG),e(KG,__r),e(nF,u_r),e(K,b_r),e(K,sF),e(sF,Due),e(Due,v_r),e(sF,T_r),e(sF,ZG),e(ZG,F_r),e(sF,C_r),e(K,M_r),e(K,lF),e(lF,Nue),e(Nue,E_r),e(lF,y_r),e(lF,eX),e(eX,w_r),e(lF,A_r),e(K,L_r),e(K,iF),e(iF,que),e(que,B_r),e(iF,x_r),e(iF,oX),e(oX,k_r),e(iF,R_r),e(K,S_r),e(K,dF),e(dF,Oue),e(Oue,P_r),e(dF,$_r),e(dF,rX),e(rX,I_r),e(dF,j_r),e(K,D_r),e(K,cF),e(cF,Gue),e(Gue,N_r),e(cF,q_r),e(cF,tX),e(tX,O_r),e(cF,G_r),e(K,X_r),e(K,fF),e(fF,Xue),e(Xue,V_r),e(fF,z_r),e(fF,aX),e(aX,W_r),e(fF,Q_r),e(K,H_r),e(K,mF),e(mF,Vue),e(Vue,U_r),e(mF,J_r),e(mF,nX),e(nX,Y_r),e(mF,K_r),e(K,Z_r),e(K,gF),e(gF,zue),e(zue,eur),e(gF,our),e(gF,sX),e(sX,rur),e(gF,tur),e(K,aur),e(K,hF),e(hF,Wue),e(Wue,nur),e(hF,sur),e(hF,lX),e(lX,lur),e(hF,iur),e(K,dur),e(K,pF),e(pF,Que),e(Que,cur),e(pF,fur),e(pF,iX),e(iX,mur),e(pF,gur),e(K,hur),e(K,_F),e(_F,Hue),e(Hue,pur),e(_F,_ur),e(_F,dX),e(dX,uur),e(_F,bur),e(K,vur),e(K,uF),e(uF,Uue),e(Uue,Tur),e(uF,Fur),e(uF,cX),e(cX,Cur),e(uF,Mur),e(K,Eur),e(K,bF),e(bF,Jue),e(Jue,yur),e(bF,wur),e(bF,fX),e(fX,Aur),e(bF,Lur),e(K,Bur),e(K,vF),e(vF,Yue),e(Yue,xur),e(vF,kur),e(vF,mX),e(mX,Rur),e(vF,Sur),e(K,Pur),e(K,TF),e(TF,Kue),e(Kue,$ur),e(TF,Iur),e(TF,gX),e(gX,jur),e(TF,Dur),e(K,Nur),e(K,FF),e(FF,Zue),e(Zue,qur),e(FF,Our),e(FF,hX),e(hX,Gur),e(FF,Xur),e(K,Vur),e(K,CF),e(CF,e0e),e(e0e,zur),e(CF,Wur),e(CF,pX),e(pX,Qur),e(CF,Hur),e(Mo,Uur),e(Mo,o0e),e(o0e,Jur),e(Mo,Yur),g(Hw,Mo,null),b(c,Qke,u),b(c,Xc,u),e(Xc,MF),e(MF,r0e),g(Uw,r0e,null),e(Xc,Kur),e(Xc,t0e),e(t0e,Zur),b(c,Hke,u),b(c,Br,u),g(Jw,Br,null),e(Br,e0r),e(Br,Vc),e(Vc,o0r),e(Vc,a0e),e(a0e,r0r),e(Vc,t0r),e(Vc,n0e),e(n0e,a0r),e(Vc,n0r),e(Br,s0r),e(Br,Yw),e(Yw,l0r),e(Yw,s0e),e(s0e,i0r),e(Yw,d0r),e(Br,c0r),e(Br,Mt),g(Kw,Mt,null),e(Mt,f0r),e(Mt,l0e),e(l0e,m0r),e(Mt,g0r),e(Mt,zc),e(zc,h0r),e(zc,i0e),e(i0e,p0r),e(zc,_0r),e(zc,d0e),e(d0e,u0r),e(zc,b0r),e(Mt,v0r),e(Mt,c0e),e(c0e,T0r),e(Mt,F0r),g(Zw,Mt,null),e(Br,C0r),e(Br,Eo),g(eA,Eo,null),e(Eo,M0r),e(Eo,f0e),e(f0e,E0r),e(Eo,y0r),e(Eo,wn),e(wn,w0r),e(wn,m0e),e(m0e,A0r),e(wn,L0r),e(wn,g0e),e(g0e,B0r),e(wn,x0r),e(wn,h0e),e(h0e,k0r),e(wn,R0r),e(Eo,S0r),e(Eo,Z),e(Z,EF),e(EF,p0e),e(p0e,P0r),e(EF,$0r),e(EF,_X),e(_X,I0r),e(EF,j0r),e(Z,D0r),e(Z,yF),e(yF,_0e),e(_0e,N0r),e(yF,q0r),e(yF,uX),e(uX,O0r),e(yF,G0r),e(Z,X0r),e(Z,wF),e(wF,u0e),e(u0e,V0r),e(wF,z0r),e(wF,bX),e(bX,W0r),e(wF,Q0r),e(Z,H0r),e(Z,AF),e(AF,b0e),e(b0e,U0r),e(AF,J0r),e(AF,vX),e(vX,Y0r),e(AF,K0r),e(Z,Z0r),e(Z,LF),e(LF,v0e),e(v0e,e1r),e(LF,o1r),e(LF,TX),e(TX,r1r),e(LF,t1r),e(Z,a1r),e(Z,BF),e(BF,T0e),e(T0e,n1r),e(BF,s1r),e(BF,FX),e(FX,l1r),e(BF,i1r),e(Z,d1r),e(Z,xF),e(xF,F0e),e(F0e,c1r),e(xF,f1r),e(xF,CX),e(CX,m1r),e(xF,g1r),e(Z,h1r),e(Z,kF),e(kF,C0e),e(C0e,p1r),e(kF,_1r),e(kF,MX),e(MX,u1r),e(kF,b1r),e(Z,v1r),e(Z,RF),e(RF,M0e),e(M0e,T1r),e(RF,F1r),e(RF,EX),e(EX,C1r),e(RF,M1r),e(Z,E1r),e(Z,SF),e(SF,E0e),e(E0e,y1r),e(SF,w1r),e(SF,yX),e(yX,A1r),e(SF,L1r),e(Z,B1r),e(Z,PF),e(PF,y0e),e(y0e,x1r),e(PF,k1r),e(PF,wX),e(wX,R1r),e(PF,S1r),e(Z,P1r),e(Z,$F),e($F,w0e),e(w0e,$1r),e($F,I1r),e($F,AX),e(AX,j1r),e($F,D1r),e(Z,N1r),e(Z,IF),e(IF,A0e),e(A0e,q1r),e(IF,O1r),e(IF,LX),e(LX,G1r),e(IF,X1r),e(Z,V1r),e(Z,jF),e(jF,L0e),e(L0e,z1r),e(jF,W1r),e(jF,BX),e(BX,Q1r),e(jF,H1r),e(Z,U1r),e(Z,DF),e(DF,B0e),e(B0e,J1r),e(DF,Y1r),e(DF,xX),e(xX,K1r),e(DF,Z1r),e(Z,ebr),e(Z,NF),e(NF,x0e),e(x0e,obr),e(NF,rbr),e(NF,kX),e(kX,tbr),e(NF,abr),e(Z,nbr),e(Z,qF),e(qF,k0e),e(k0e,sbr),e(qF,lbr),e(qF,RX),e(RX,ibr),e(qF,dbr),e(Z,cbr),e(Z,OF),e(OF,R0e),e(R0e,fbr),e(OF,mbr),e(OF,SX),e(SX,gbr),e(OF,hbr),e(Z,pbr),e(Z,GF),e(GF,S0e),e(S0e,_br),e(GF,ubr),e(GF,PX),e(PX,bbr),e(GF,vbr),e(Eo,Tbr),e(Eo,P0e),e(P0e,Fbr),e(Eo,Cbr),g(oA,Eo,null),b(c,Uke,u),b(c,Wc,u),e(Wc,XF),e(XF,$0e),g(rA,$0e,null),e(Wc,Mbr),e(Wc,I0e),e(I0e,Ebr),b(c,Jke,u),b(c,xr,u),g(tA,xr,null),e(xr,ybr),e(xr,Qc),e(Qc,wbr),e(Qc,j0e),e(j0e,Abr),e(Qc,Lbr),e(Qc,D0e),e(D0e,Bbr),e(Qc,xbr),e(xr,kbr),e(xr,aA),e(aA,Rbr),e(aA,N0e),e(N0e,Sbr),e(aA,Pbr),e(xr,$br),e(xr,Et),g(nA,Et,null),e(Et,Ibr),e(Et,q0e),e(q0e,jbr),e(Et,Dbr),e(Et,Hc),e(Hc,Nbr),e(Hc,O0e),e(O0e,qbr),e(Hc,Obr),e(Hc,G0e),e(G0e,Gbr),e(Hc,Xbr),e(Et,Vbr),e(Et,X0e),e(X0e,zbr),e(Et,Wbr),g(sA,Et,null),e(xr,Qbr),e(xr,yo),g(lA,yo,null),e(yo,Hbr),e(yo,V0e),e(V0e,Ubr),e(yo,Jbr),e(yo,An),e(An,Ybr),e(An,z0e),e(z0e,Kbr),e(An,Zbr),e(An,W0e),e(W0e,e2r),e(An,o2r),e(An,Q0e),e(Q0e,r2r),e(An,t2r),e(yo,a2r),e(yo,H0e),e(H0e,VF),e(VF,U0e),e(U0e,n2r),e(VF,s2r),e(VF,$X),e($X,l2r),e(VF,i2r),e(yo,d2r),e(yo,J0e),e(J0e,c2r),e(yo,f2r),g(iA,yo,null),b(c,Yke,u),b(c,Uc,u),e(Uc,zF),e(zF,Y0e),g(dA,Y0e,null),e(Uc,m2r),e(Uc,K0e),e(K0e,g2r),b(c,Kke,u),b(c,kr,u),g(cA,kr,null),e(kr,h2r),e(kr,Jc),e(Jc,p2r),e(Jc,Z0e),e(Z0e,_2r),e(Jc,u2r),e(Jc,e1e),e(e1e,b2r),e(Jc,v2r),e(kr,T2r),e(kr,fA),e(fA,F2r),e(fA,o1e),e(o1e,C2r),e(fA,M2r),e(kr,E2r),e(kr,yt),g(mA,yt,null),e(yt,y2r),e(yt,r1e),e(r1e,w2r),e(yt,A2r),e(yt,Yc),e(Yc,L2r),e(Yc,t1e),e(t1e,B2r),e(Yc,x2r),e(Yc,a1e),e(a1e,k2r),e(Yc,R2r),e(yt,S2r),e(yt,n1e),e(n1e,P2r),e(yt,$2r),g(gA,yt,null),e(kr,I2r),e(kr,wo),g(hA,wo,null),e(wo,j2r),e(wo,s1e),e(s1e,D2r),e(wo,N2r),e(wo,Ln),e(Ln,q2r),e(Ln,l1e),e(l1e,O2r),e(Ln,G2r),e(Ln,i1e),e(i1e,X2r),e(Ln,V2r),e(Ln,d1e),e(d1e,z2r),e(Ln,W2r),e(wo,Q2r),e(wo,c1e),e(c1e,WF),e(WF,f1e),e(f1e,H2r),e(WF,U2r),e(WF,IX),e(IX,J2r),e(WF,Y2r),e(wo,K2r),e(wo,m1e),e(m1e,Z2r),e(wo,evr),g(pA,wo,null),b(c,Zke,u),b(c,Kc,u),e(Kc,QF),e(QF,g1e),g(_A,g1e,null),e(Kc,ovr),e(Kc,h1e),e(h1e,rvr),b(c,eRe,u),b(c,Rr,u),g(uA,Rr,null),e(Rr,tvr),e(Rr,Zc),e(Zc,avr),e(Zc,p1e),e(p1e,nvr),e(Zc,svr),e(Zc,_1e),e(_1e,lvr),e(Zc,ivr),e(Rr,dvr),e(Rr,bA),e(bA,cvr),e(bA,u1e),e(u1e,fvr),e(bA,mvr),e(Rr,gvr),e(Rr,wt),g(vA,wt,null),e(wt,hvr),e(wt,b1e),e(b1e,pvr),e(wt,_vr),e(wt,ef),e(ef,uvr),e(ef,v1e),e(v1e,bvr),e(ef,vvr),e(ef,T1e),e(T1e,Tvr),e(ef,Fvr),e(wt,Cvr),e(wt,F1e),e(F1e,Mvr),e(wt,Evr),g(TA,wt,null),e(Rr,yvr),e(Rr,Ao),g(FA,Ao,null),e(Ao,wvr),e(Ao,C1e),e(C1e,Avr),e(Ao,Lvr),e(Ao,Bn),e(Bn,Bvr),e(Bn,M1e),e(M1e,xvr),e(Bn,kvr),e(Bn,E1e),e(E1e,Rvr),e(Bn,Svr),e(Bn,y1e),e(y1e,Pvr),e(Bn,$vr),e(Ao,Ivr),e(Ao,z),e(z,HF),e(HF,w1e),e(w1e,jvr),e(HF,Dvr),e(HF,jX),e(jX,Nvr),e(HF,qvr),e(z,Ovr),e(z,UF),e(UF,A1e),e(A1e,Gvr),e(UF,Xvr),e(UF,DX),e(DX,Vvr),e(UF,zvr),e(z,Wvr),e(z,JF),e(JF,L1e),e(L1e,Qvr),e(JF,Hvr),e(JF,NX),e(NX,Uvr),e(JF,Jvr),e(z,Yvr),e(z,YF),e(YF,B1e),e(B1e,Kvr),e(YF,Zvr),e(YF,qX),e(qX,e6r),e(YF,o6r),e(z,r6r),e(z,KF),e(KF,x1e),e(x1e,t6r),e(KF,a6r),e(KF,OX),e(OX,n6r),e(KF,s6r),e(z,l6r),e(z,ZF),e(ZF,k1e),e(k1e,i6r),e(ZF,d6r),e(ZF,GX),e(GX,c6r),e(ZF,f6r),e(z,m6r),e(z,eC),e(eC,R1e),e(R1e,g6r),e(eC,h6r),e(eC,XX),e(XX,p6r),e(eC,_6r),e(z,u6r),e(z,oC),e(oC,S1e),e(S1e,b6r),e(oC,v6r),e(oC,VX),e(VX,T6r),e(oC,F6r),e(z,C6r),e(z,rC),e(rC,P1e),e(P1e,M6r),e(rC,E6r),e(rC,zX),e(zX,y6r),e(rC,w6r),e(z,A6r),e(z,tC),e(tC,$1e),e($1e,L6r),e(tC,B6r),e(tC,WX),e(WX,x6r),e(tC,k6r),e(z,R6r),e(z,aC),e(aC,I1e),e(I1e,S6r),e(aC,P6r),e(aC,QX),e(QX,$6r),e(aC,I6r),e(z,j6r),e(z,nC),e(nC,j1e),e(j1e,D6r),e(nC,N6r),e(nC,HX),e(HX,q6r),e(nC,O6r),e(z,G6r),e(z,sC),e(sC,D1e),e(D1e,X6r),e(sC,V6r),e(sC,UX),e(UX,z6r),e(sC,W6r),e(z,Q6r),e(z,lC),e(lC,N1e),e(N1e,H6r),e(lC,U6r),e(lC,JX),e(JX,J6r),e(lC,Y6r),e(z,K6r),e(z,iC),e(iC,q1e),e(q1e,Z6r),e(iC,eTr),e(iC,YX),e(YX,oTr),e(iC,rTr),e(z,tTr),e(z,dC),e(dC,O1e),e(O1e,aTr),e(dC,nTr),e(dC,KX),e(KX,sTr),e(dC,lTr),e(z,iTr),e(z,cC),e(cC,G1e),e(G1e,dTr),e(cC,cTr),e(cC,ZX),e(ZX,fTr),e(cC,mTr),e(z,gTr),e(z,fC),e(fC,X1e),e(X1e,hTr),e(fC,pTr),e(fC,eV),e(eV,_Tr),e(fC,uTr),e(z,bTr),e(z,mC),e(mC,V1e),e(V1e,vTr),e(mC,TTr),e(mC,oV),e(oV,FTr),e(mC,CTr),e(z,MTr),e(z,gC),e(gC,z1e),e(z1e,ETr),e(gC,yTr),e(gC,rV),e(rV,wTr),e(gC,ATr),e(z,LTr),e(z,hC),e(hC,W1e),e(W1e,BTr),e(hC,xTr),e(hC,tV),e(tV,kTr),e(hC,RTr),e(z,STr),e(z,pC),e(pC,Q1e),e(Q1e,PTr),e(pC,$Tr),e(pC,aV),e(aV,ITr),e(pC,jTr),e(z,DTr),e(z,_C),e(_C,H1e),e(H1e,NTr),e(_C,qTr),e(_C,nV),e(nV,OTr),e(_C,GTr),e(z,XTr),e(z,uC),e(uC,U1e),e(U1e,VTr),e(uC,zTr),e(uC,sV),e(sV,WTr),e(uC,QTr),e(z,HTr),e(z,bC),e(bC,J1e),e(J1e,UTr),e(bC,JTr),e(bC,lV),e(lV,YTr),e(bC,KTr),e(Ao,ZTr),e(Ao,Y1e),e(Y1e,e7r),e(Ao,o7r),g(CA,Ao,null),b(c,oRe,u),b(c,of,u),e(of,vC),e(vC,K1e),g(MA,K1e,null),e(of,r7r),e(of,Z1e),e(Z1e,t7r),b(c,rRe,u),b(c,Sr,u),g(EA,Sr,null),e(Sr,a7r),e(Sr,rf),e(rf,n7r),e(rf,ebe),e(ebe,s7r),e(rf,l7r),e(rf,obe),e(obe,i7r),e(rf,d7r),e(Sr,c7r),e(Sr,yA),e(yA,f7r),e(yA,rbe),e(rbe,m7r),e(yA,g7r),e(Sr,h7r),e(Sr,At),g(wA,At,null),e(At,p7r),e(At,tbe),e(tbe,_7r),e(At,u7r),e(At,tf),e(tf,b7r),e(tf,abe),e(abe,v7r),e(tf,T7r),e(tf,nbe),e(nbe,F7r),e(tf,C7r),e(At,M7r),e(At,sbe),e(sbe,E7r),e(At,y7r),g(AA,At,null),e(Sr,w7r),e(Sr,Lo),g(LA,Lo,null),e(Lo,A7r),e(Lo,lbe),e(lbe,L7r),e(Lo,B7r),e(Lo,xn),e(xn,x7r),e(xn,ibe),e(ibe,k7r),e(xn,R7r),e(xn,dbe),e(dbe,S7r),e(xn,P7r),e(xn,cbe),e(cbe,$7r),e(xn,I7r),e(Lo,j7r),e(Lo,ca),e(ca,TC),e(TC,fbe),e(fbe,D7r),e(TC,N7r),e(TC,iV),e(iV,q7r),e(TC,O7r),e(ca,G7r),e(ca,FC),e(FC,mbe),e(mbe,X7r),e(FC,V7r),e(FC,dV),e(dV,z7r),e(FC,W7r),e(ca,Q7r),e(ca,CC),e(CC,gbe),e(gbe,H7r),e(CC,U7r),e(CC,cV),e(cV,J7r),e(CC,Y7r),e(ca,K7r),e(ca,MC),e(MC,hbe),e(hbe,Z7r),e(MC,eFr),e(MC,fV),e(fV,oFr),e(MC,rFr),e(ca,tFr),e(ca,EC),e(EC,pbe),e(pbe,aFr),e(EC,nFr),e(EC,mV),e(mV,sFr),e(EC,lFr),e(Lo,iFr),e(Lo,_be),e(_be,dFr),e(Lo,cFr),g(BA,Lo,null),b(c,tRe,u),b(c,af,u),e(af,yC),e(yC,ube),g(xA,ube,null),e(af,fFr),e(af,bbe),e(bbe,mFr),b(c,aRe,u),b(c,Pr,u),g(kA,Pr,null),e(Pr,gFr),e(Pr,nf),e(nf,hFr),e(nf,vbe),e(vbe,pFr),e(nf,_Fr),e(nf,Tbe),e(Tbe,uFr),e(nf,bFr),e(Pr,vFr),e(Pr,RA),e(RA,TFr),e(RA,Fbe),e(Fbe,FFr),e(RA,CFr),e(Pr,MFr),e(Pr,Lt),g(SA,Lt,null),e(Lt,EFr),e(Lt,Cbe),e(Cbe,yFr),e(Lt,wFr),e(Lt,sf),e(sf,AFr),e(sf,Mbe),e(Mbe,LFr),e(sf,BFr),e(sf,Ebe),e(Ebe,xFr),e(sf,kFr),e(Lt,RFr),e(Lt,ybe),e(ybe,SFr),e(Lt,PFr),g(PA,Lt,null),e(Pr,$Fr),e(Pr,Bo),g($A,Bo,null),e(Bo,IFr),e(Bo,wbe),e(wbe,jFr),e(Bo,DFr),e(Bo,kn),e(kn,NFr),e(kn,Abe),e(Abe,qFr),e(kn,OFr),e(kn,Lbe),e(Lbe,GFr),e(kn,XFr),e(kn,Bbe),e(Bbe,VFr),e(kn,zFr),e(Bo,WFr),e(Bo,ce),e(ce,wC),e(wC,xbe),e(xbe,QFr),e(wC,HFr),e(wC,gV),e(gV,UFr),e(wC,JFr),e(ce,YFr),e(ce,AC),e(AC,kbe),e(kbe,KFr),e(AC,ZFr),e(AC,hV),e(hV,eCr),e(AC,oCr),e(ce,rCr),e(ce,LC),e(LC,Rbe),e(Rbe,tCr),e(LC,aCr),e(LC,pV),e(pV,nCr),e(LC,sCr),e(ce,lCr),e(ce,BC),e(BC,Sbe),e(Sbe,iCr),e(BC,dCr),e(BC,_V),e(_V,cCr),e(BC,fCr),e(ce,mCr),e(ce,xC),e(xC,Pbe),e(Pbe,gCr),e(xC,hCr),e(xC,uV),e(uV,pCr),e(xC,_Cr),e(ce,uCr),e(ce,kC),e(kC,$be),e($be,bCr),e(kC,vCr),e(kC,bV),e(bV,TCr),e(kC,FCr),e(ce,CCr),e(ce,RC),e(RC,Ibe),e(Ibe,MCr),e(RC,ECr),e(RC,vV),e(vV,yCr),e(RC,wCr),e(ce,ACr),e(ce,SC),e(SC,jbe),e(jbe,LCr),e(SC,BCr),e(SC,TV),e(TV,xCr),e(SC,kCr),e(ce,RCr),e(ce,PC),e(PC,Dbe),e(Dbe,SCr),e(PC,PCr),e(PC,FV),e(FV,$Cr),e(PC,ICr),e(ce,jCr),e(ce,$C),e($C,Nbe),e(Nbe,DCr),e($C,NCr),e($C,CV),e(CV,qCr),e($C,OCr),e(ce,GCr),e(ce,IC),e(IC,qbe),e(qbe,XCr),e(IC,VCr),e(IC,MV),e(MV,zCr),e(IC,WCr),e(ce,QCr),e(ce,jC),e(jC,Obe),e(Obe,HCr),e(jC,UCr),e(jC,EV),e(EV,JCr),e(jC,YCr),e(Bo,KCr),e(Bo,Gbe),e(Gbe,ZCr),e(Bo,eMr),g(IA,Bo,null),b(c,nRe,u),b(c,lf,u),e(lf,DC),e(DC,Xbe),g(jA,Xbe,null),e(lf,oMr),e(lf,Vbe),e(Vbe,rMr),b(c,sRe,u),b(c,$r,u),g(DA,$r,null),e($r,tMr),e($r,df),e(df,aMr),e(df,zbe),e(zbe,nMr),e(df,sMr),e(df,Wbe),e(Wbe,lMr),e(df,iMr),e($r,dMr),e($r,NA),e(NA,cMr),e(NA,Qbe),e(Qbe,fMr),e(NA,mMr),e($r,gMr),e($r,Bt),g(qA,Bt,null),e(Bt,hMr),e(Bt,Hbe),e(Hbe,pMr),e(Bt,_Mr),e(Bt,cf),e(cf,uMr),e(cf,Ube),e(Ube,bMr),e(cf,vMr),e(cf,Jbe),e(Jbe,TMr),e(cf,FMr),e(Bt,CMr),e(Bt,Ybe),e(Ybe,MMr),e(Bt,EMr),g(OA,Bt,null),e($r,yMr),e($r,xo),g(GA,xo,null),e(xo,wMr),e(xo,Kbe),e(Kbe,AMr),e(xo,LMr),e(xo,Rn),e(Rn,BMr),e(Rn,Zbe),e(Zbe,xMr),e(Rn,kMr),e(Rn,e2e),e(e2e,RMr),e(Rn,SMr),e(Rn,o2e),e(o2e,PMr),e(Rn,$Mr),e(xo,IMr),e(xo,be),e(be,NC),e(NC,r2e),e(r2e,jMr),e(NC,DMr),e(NC,yV),e(yV,NMr),e(NC,qMr),e(be,OMr),e(be,qC),e(qC,t2e),e(t2e,GMr),e(qC,XMr),e(qC,wV),e(wV,VMr),e(qC,zMr),e(be,WMr),e(be,OC),e(OC,a2e),e(a2e,QMr),e(OC,HMr),e(OC,AV),e(AV,UMr),e(OC,JMr),e(be,YMr),e(be,GC),e(GC,n2e),e(n2e,KMr),e(GC,ZMr),e(GC,LV),e(LV,e4r),e(GC,o4r),e(be,r4r),e(be,XC),e(XC,s2e),e(s2e,t4r),e(XC,a4r),e(XC,BV),e(BV,n4r),e(XC,s4r),e(be,l4r),e(be,VC),e(VC,l2e),e(l2e,i4r),e(VC,d4r),e(VC,xV),e(xV,c4r),e(VC,f4r),e(be,m4r),e(be,zC),e(zC,i2e),e(i2e,g4r),e(zC,h4r),e(zC,kV),e(kV,p4r),e(zC,_4r),e(be,u4r),e(be,WC),e(WC,d2e),e(d2e,b4r),e(WC,v4r),e(WC,RV),e(RV,T4r),e(WC,F4r),e(be,C4r),e(be,QC),e(QC,c2e),e(c2e,M4r),e(QC,E4r),e(QC,SV),e(SV,y4r),e(QC,w4r),e(be,A4r),e(be,HC),e(HC,f2e),e(f2e,L4r),e(HC,B4r),e(HC,PV),e(PV,x4r),e(HC,k4r),e(xo,R4r),e(xo,m2e),e(m2e,S4r),e(xo,P4r),g(XA,xo,null),b(c,lRe,u),b(c,ff,u),e(ff,UC),e(UC,g2e),g(VA,g2e,null),e(ff,$4r),e(ff,h2e),e(h2e,I4r),b(c,iRe,u),b(c,Ir,u),g(zA,Ir,null),e(Ir,j4r),e(Ir,mf),e(mf,D4r),e(mf,p2e),e(p2e,N4r),e(mf,q4r),e(mf,_2e),e(_2e,O4r),e(mf,G4r),e(Ir,X4r),e(Ir,WA),e(WA,V4r),e(WA,u2e),e(u2e,z4r),e(WA,W4r),e(Ir,Q4r),e(Ir,xt),g(QA,xt,null),e(xt,H4r),e(xt,b2e),e(b2e,U4r),e(xt,J4r),e(xt,gf),e(gf,Y4r),e(gf,v2e),e(v2e,K4r),e(gf,Z4r),e(gf,T2e),e(T2e,eEr),e(gf,oEr),e(xt,rEr),e(xt,F2e),e(F2e,tEr),e(xt,aEr),g(HA,xt,null),e(Ir,nEr),e(Ir,ko),g(UA,ko,null),e(ko,sEr),e(ko,C2e),e(C2e,lEr),e(ko,iEr),e(ko,Sn),e(Sn,dEr),e(Sn,M2e),e(M2e,cEr),e(Sn,fEr),e(Sn,E2e),e(E2e,mEr),e(Sn,gEr),e(Sn,y2e),e(y2e,hEr),e(Sn,pEr),e(ko,_Er),e(ko,Me),e(Me,JC),e(JC,w2e),e(w2e,uEr),e(JC,bEr),e(JC,$V),e($V,vEr),e(JC,TEr),e(Me,FEr),e(Me,YC),e(YC,A2e),e(A2e,CEr),e(YC,MEr),e(YC,IV),e(IV,EEr),e(YC,yEr),e(Me,wEr),e(Me,KC),e(KC,L2e),e(L2e,AEr),e(KC,LEr),e(KC,jV),e(jV,BEr),e(KC,xEr),e(Me,kEr),e(Me,ZC),e(ZC,B2e),e(B2e,REr),e(ZC,SEr),e(ZC,DV),e(DV,PEr),e(ZC,$Er),e(Me,IEr),e(Me,eM),e(eM,x2e),e(x2e,jEr),e(eM,DEr),e(eM,NV),e(NV,NEr),e(eM,qEr),e(Me,OEr),e(Me,oM),e(oM,k2e),e(k2e,GEr),e(oM,XEr),e(oM,qV),e(qV,VEr),e(oM,zEr),e(Me,WEr),e(Me,rM),e(rM,R2e),e(R2e,QEr),e(rM,HEr),e(rM,OV),e(OV,UEr),e(rM,JEr),e(Me,YEr),e(Me,tM),e(tM,S2e),e(S2e,KEr),e(tM,ZEr),e(tM,GV),e(GV,e3r),e(tM,o3r),e(Me,r3r),e(Me,aM),e(aM,P2e),e(P2e,t3r),e(aM,a3r),e(aM,XV),e(XV,n3r),e(aM,s3r),e(ko,l3r),e(ko,$2e),e($2e,i3r),e(ko,d3r),g(JA,ko,null),b(c,dRe,u),b(c,hf,u),e(hf,nM),e(nM,I2e),g(YA,I2e,null),e(hf,c3r),e(hf,j2e),e(j2e,f3r),b(c,cRe,u),b(c,jr,u),g(KA,jr,null),e(jr,m3r),e(jr,pf),e(pf,g3r),e(pf,D2e),e(D2e,h3r),e(pf,p3r),e(pf,N2e),e(N2e,_3r),e(pf,u3r),e(jr,b3r),e(jr,ZA),e(ZA,v3r),e(ZA,q2e),e(q2e,T3r),e(ZA,F3r),e(jr,C3r),e(jr,kt),g(eL,kt,null),e(kt,M3r),e(kt,O2e),e(O2e,E3r),e(kt,y3r),e(kt,_f),e(_f,w3r),e(_f,G2e),e(G2e,A3r),e(_f,L3r),e(_f,X2e),e(X2e,B3r),e(_f,x3r),e(kt,k3r),e(kt,V2e),e(V2e,R3r),e(kt,S3r),g(oL,kt,null),e(jr,P3r),e(jr,Ro),g(rL,Ro,null),e(Ro,$3r),e(Ro,z2e),e(z2e,I3r),e(Ro,j3r),e(Ro,Pn),e(Pn,D3r),e(Pn,W2e),e(W2e,N3r),e(Pn,q3r),e(Pn,Q2e),e(Q2e,O3r),e(Pn,G3r),e(Pn,H2e),e(H2e,X3r),e(Pn,V3r),e(Ro,z3r),e(Ro,ve),e(ve,sM),e(sM,U2e),e(U2e,W3r),e(sM,Q3r),e(sM,VV),e(VV,H3r),e(sM,U3r),e(ve,J3r),e(ve,lM),e(lM,J2e),e(J2e,Y3r),e(lM,K3r),e(lM,zV),e(zV,Z3r),e(lM,e5r),e(ve,o5r),e(ve,iM),e(iM,Y2e),e(Y2e,r5r),e(iM,t5r),e(iM,WV),e(WV,a5r),e(iM,n5r),e(ve,s5r),e(ve,dM),e(dM,K2e),e(K2e,l5r),e(dM,i5r),e(dM,QV),e(QV,d5r),e(dM,c5r),e(ve,f5r),e(ve,cM),e(cM,Z2e),e(Z2e,m5r),e(cM,g5r),e(cM,HV),e(HV,h5r),e(cM,p5r),e(ve,_5r),e(ve,fM),e(fM,eve),e(eve,u5r),e(fM,b5r),e(fM,UV),e(UV,v5r),e(fM,T5r),e(ve,F5r),e(ve,mM),e(mM,ove),e(ove,C5r),e(mM,M5r),e(mM,JV),e(JV,E5r),e(mM,y5r),e(ve,w5r),e(ve,gM),e(gM,rve),e(rve,A5r),e(gM,L5r),e(gM,YV),e(YV,B5r),e(gM,x5r),e(ve,k5r),e(ve,hM),e(hM,tve),e(tve,R5r),e(hM,S5r),e(hM,KV),e(KV,P5r),e(hM,$5r),e(ve,I5r),e(ve,pM),e(pM,ave),e(ave,j5r),e(pM,D5r),e(pM,ZV),e(ZV,N5r),e(pM,q5r),e(Ro,O5r),e(Ro,nve),e(nve,G5r),e(Ro,X5r),g(tL,Ro,null),b(c,fRe,u),b(c,uf,u),e(uf,_M),e(_M,sve),g(aL,sve,null),e(uf,V5r),e(uf,lve),e(lve,z5r),b(c,mRe,u),b(c,Dr,u),g(nL,Dr,null),e(Dr,W5r),e(Dr,bf),e(bf,Q5r),e(bf,ive),e(ive,H5r),e(bf,U5r),e(bf,dve),e(dve,J5r),e(bf,Y5r),e(Dr,K5r),e(Dr,sL),e(sL,Z5r),e(sL,cve),e(cve,eyr),e(sL,oyr),e(Dr,ryr),e(Dr,Rt),g(lL,Rt,null),e(Rt,tyr),e(Rt,fve),e(fve,ayr),e(Rt,nyr),e(Rt,vf),e(vf,syr),e(vf,mve),e(mve,lyr),e(vf,iyr),e(vf,gve),e(gve,dyr),e(vf,cyr),e(Rt,fyr),e(Rt,hve),e(hve,myr),e(Rt,gyr),g(iL,Rt,null),e(Dr,hyr),e(Dr,So),g(dL,So,null),e(So,pyr),e(So,pve),e(pve,_yr),e(So,uyr),e(So,$n),e($n,byr),e($n,_ve),e(_ve,vyr),e($n,Tyr),e($n,uve),e(uve,Fyr),e($n,Cyr),e($n,bve),e(bve,Myr),e($n,Eyr),e(So,yyr),e(So,Te),e(Te,uM),e(uM,vve),e(vve,wyr),e(uM,Ayr),e(uM,ez),e(ez,Lyr),e(uM,Byr),e(Te,xyr),e(Te,bM),e(bM,Tve),e(Tve,kyr),e(bM,Ryr),e(bM,oz),e(oz,Syr),e(bM,Pyr),e(Te,$yr),e(Te,vM),e(vM,Fve),e(Fve,Iyr),e(vM,jyr),e(vM,rz),e(rz,Dyr),e(vM,Nyr),e(Te,qyr),e(Te,TM),e(TM,Cve),e(Cve,Oyr),e(TM,Gyr),e(TM,tz),e(tz,Xyr),e(TM,Vyr),e(Te,zyr),e(Te,FM),e(FM,Mve),e(Mve,Wyr),e(FM,Qyr),e(FM,az),e(az,Hyr),e(FM,Uyr),e(Te,Jyr),e(Te,CM),e(CM,Eve),e(Eve,Yyr),e(CM,Kyr),e(CM,nz),e(nz,Zyr),e(CM,ewr),e(Te,owr),e(Te,MM),e(MM,yve),e(yve,rwr),e(MM,twr),e(MM,sz),e(sz,awr),e(MM,nwr),e(Te,swr),e(Te,EM),e(EM,wve),e(wve,lwr),e(EM,iwr),e(EM,lz),e(lz,dwr),e(EM,cwr),e(Te,fwr),e(Te,yM),e(yM,Ave),e(Ave,mwr),e(yM,gwr),e(yM,iz),e(iz,hwr),e(yM,pwr),e(Te,_wr),e(Te,wM),e(wM,Lve),e(Lve,uwr),e(wM,bwr),e(wM,dz),e(dz,vwr),e(wM,Twr),e(So,Fwr),e(So,Bve),e(Bve,Cwr),e(So,Mwr),g(cL,So,null),b(c,gRe,u),b(c,Tf,u),e(Tf,AM),e(AM,xve),g(fL,xve,null),e(Tf,Ewr),e(Tf,kve),e(kve,ywr),b(c,hRe,u),b(c,Nr,u),g(mL,Nr,null),e(Nr,wwr),e(Nr,Ff),e(Ff,Awr),e(Ff,Rve),e(Rve,Lwr),e(Ff,Bwr),e(Ff,Sve),e(Sve,xwr),e(Ff,kwr),e(Nr,Rwr),e(Nr,gL),e(gL,Swr),e(gL,Pve),e(Pve,Pwr),e(gL,$wr),e(Nr,Iwr),e(Nr,St),g(hL,St,null),e(St,jwr),e(St,$ve),e($ve,Dwr),e(St,Nwr),e(St,Cf),e(Cf,qwr),e(Cf,Ive),e(Ive,Owr),e(Cf,Gwr),e(Cf,jve),e(jve,Xwr),e(Cf,Vwr),e(St,zwr),e(St,Dve),e(Dve,Wwr),e(St,Qwr),g(pL,St,null),e(Nr,Hwr),e(Nr,Po),g(_L,Po,null),e(Po,Uwr),e(Po,Nve),e(Nve,Jwr),e(Po,Ywr),e(Po,In),e(In,Kwr),e(In,qve),e(qve,Zwr),e(In,eAr),e(In,Ove),e(Ove,oAr),e(In,rAr),e(In,Gve),e(Gve,tAr),e(In,aAr),e(Po,nAr),e(Po,Se),e(Se,LM),e(LM,Xve),e(Xve,sAr),e(LM,lAr),e(LM,cz),e(cz,iAr),e(LM,dAr),e(Se,cAr),e(Se,BM),e(BM,Vve),e(Vve,fAr),e(BM,mAr),e(BM,fz),e(fz,gAr),e(BM,hAr),e(Se,pAr),e(Se,xM),e(xM,zve),e(zve,_Ar),e(xM,uAr),e(xM,mz),e(mz,bAr),e(xM,vAr),e(Se,TAr),e(Se,kM),e(kM,Wve),e(Wve,FAr),e(kM,CAr),e(kM,gz),e(gz,MAr),e(kM,EAr),e(Se,yAr),e(Se,RM),e(RM,Qve),e(Qve,wAr),e(RM,AAr),e(RM,hz),e(hz,LAr),e(RM,BAr),e(Se,xAr),e(Se,SM),e(SM,Hve),e(Hve,kAr),e(SM,RAr),e(SM,pz),e(pz,SAr),e(SM,PAr),e(Se,$Ar),e(Se,PM),e(PM,Uve),e(Uve,IAr),e(PM,jAr),e(PM,_z),e(_z,DAr),e(PM,NAr),e(Se,qAr),e(Se,$M),e($M,Jve),e(Jve,OAr),e($M,GAr),e($M,uz),e(uz,XAr),e($M,VAr),e(Po,zAr),e(Po,Yve),e(Yve,WAr),e(Po,QAr),g(uL,Po,null),b(c,pRe,u),b(c,Mf,u),e(Mf,IM),e(IM,Kve),g(bL,Kve,null),e(Mf,HAr),e(Mf,Zve),e(Zve,UAr),b(c,_Re,u),b(c,qr,u),g(vL,qr,null),e(qr,JAr),e(qr,Ef),e(Ef,YAr),e(Ef,e6e),e(e6e,KAr),e(Ef,ZAr),e(Ef,o6e),e(o6e,eLr),e(Ef,oLr),e(qr,rLr),e(qr,TL),e(TL,tLr),e(TL,r6e),e(r6e,aLr),e(TL,nLr),e(qr,sLr),e(qr,Pt),g(FL,Pt,null),e(Pt,lLr),e(Pt,t6e),e(t6e,iLr),e(Pt,dLr),e(Pt,yf),e(yf,cLr),e(yf,a6e),e(a6e,fLr),e(yf,mLr),e(yf,n6e),e(n6e,gLr),e(yf,hLr),e(Pt,pLr),e(Pt,s6e),e(s6e,_Lr),e(Pt,uLr),g(CL,Pt,null),e(qr,bLr),e(qr,$o),g(ML,$o,null),e($o,vLr),e($o,l6e),e(l6e,TLr),e($o,FLr),e($o,jn),e(jn,CLr),e(jn,i6e),e(i6e,MLr),e(jn,ELr),e(jn,d6e),e(d6e,yLr),e(jn,wLr),e(jn,c6e),e(c6e,ALr),e(jn,LLr),e($o,BLr),e($o,Pe),e(Pe,jM),e(jM,f6e),e(f6e,xLr),e(jM,kLr),e(jM,bz),e(bz,RLr),e(jM,SLr),e(Pe,PLr),e(Pe,DM),e(DM,m6e),e(m6e,$Lr),e(DM,ILr),e(DM,vz),e(vz,jLr),e(DM,DLr),e(Pe,NLr),e(Pe,NM),e(NM,g6e),e(g6e,qLr),e(NM,OLr),e(NM,Tz),e(Tz,GLr),e(NM,XLr),e(Pe,VLr),e(Pe,qM),e(qM,h6e),e(h6e,zLr),e(qM,WLr),e(qM,Fz),e(Fz,QLr),e(qM,HLr),e(Pe,ULr),e(Pe,OM),e(OM,p6e),e(p6e,JLr),e(OM,YLr),e(OM,Cz),e(Cz,KLr),e(OM,ZLr),e(Pe,e8r),e(Pe,GM),e(GM,_6e),e(_6e,o8r),e(GM,r8r),e(GM,Mz),e(Mz,t8r),e(GM,a8r),e(Pe,n8r),e(Pe,XM),e(XM,u6e),e(u6e,s8r),e(XM,l8r),e(XM,Ez),e(Ez,i8r),e(XM,d8r),e(Pe,c8r),e(Pe,VM),e(VM,b6e),e(b6e,f8r),e(VM,m8r),e(VM,yz),e(yz,g8r),e(VM,h8r),e($o,p8r),e($o,v6e),e(v6e,_8r),e($o,u8r),g(EL,$o,null),b(c,uRe,u),b(c,wf,u),e(wf,zM),e(zM,T6e),g(yL,T6e,null),e(wf,b8r),e(wf,F6e),e(F6e,v8r),b(c,bRe,u),b(c,Or,u),g(wL,Or,null),e(Or,T8r),e(Or,Af),e(Af,F8r),e(Af,C6e),e(C6e,C8r),e(Af,M8r),e(Af,M6e),e(M6e,E8r),e(Af,y8r),e(Or,w8r),e(Or,AL),e(AL,A8r),e(AL,E6e),e(E6e,L8r),e(AL,B8r),e(Or,x8r),e(Or,$t),g(LL,$t,null),e($t,k8r),e($t,y6e),e(y6e,R8r),e($t,S8r),e($t,Lf),e(Lf,P8r),e(Lf,w6e),e(w6e,$8r),e(Lf,I8r),e(Lf,A6e),e(A6e,j8r),e(Lf,D8r),e($t,N8r),e($t,L6e),e(L6e,q8r),e($t,O8r),g(BL,$t,null),e(Or,G8r),e(Or,Io),g(xL,Io,null),e(Io,X8r),e(Io,B6e),e(B6e,V8r),e(Io,z8r),e(Io,Dn),e(Dn,W8r),e(Dn,x6e),e(x6e,Q8r),e(Dn,H8r),e(Dn,k6e),e(k6e,U8r),e(Dn,J8r),e(Dn,R6e),e(R6e,Y8r),e(Dn,K8r),e(Io,Z8r),e(Io,S6e),e(S6e,WM),e(WM,P6e),e(P6e,e9r),e(WM,o9r),e(WM,wz),e(wz,r9r),e(WM,t9r),e(Io,a9r),e(Io,$6e),e($6e,n9r),e(Io,s9r),g(kL,Io,null),b(c,vRe,u),b(c,Bf,u),e(Bf,QM),e(QM,I6e),g(RL,I6e,null),e(Bf,l9r),e(Bf,j6e),e(j6e,i9r),b(c,TRe,u),b(c,Gr,u),g(SL,Gr,null),e(Gr,d9r),e(Gr,xf),e(xf,c9r),e(xf,D6e),e(D6e,f9r),e(xf,m9r),e(xf,N6e),e(N6e,g9r),e(xf,h9r),e(Gr,p9r),e(Gr,PL),e(PL,_9r),e(PL,q6e),e(q6e,u9r),e(PL,b9r),e(Gr,v9r),e(Gr,It),g($L,It,null),e(It,T9r),e(It,O6e),e(O6e,F9r),e(It,C9r),e(It,kf),e(kf,M9r),e(kf,G6e),e(G6e,E9r),e(kf,y9r),e(kf,X6e),e(X6e,w9r),e(kf,A9r),e(It,L9r),e(It,V6e),e(V6e,B9r),e(It,x9r),g(IL,It,null),e(Gr,k9r),e(Gr,jo),g(jL,jo,null),e(jo,R9r),e(jo,z6e),e(z6e,S9r),e(jo,P9r),e(jo,Nn),e(Nn,$9r),e(Nn,W6e),e(W6e,I9r),e(Nn,j9r),e(Nn,Q6e),e(Q6e,D9r),e(Nn,N9r),e(Nn,H6e),e(H6e,q9r),e(Nn,O9r),e(jo,G9r),e(jo,DL),e(DL,HM),e(HM,U6e),e(U6e,X9r),e(HM,V9r),e(HM,Az),e(Az,z9r),e(HM,W9r),e(DL,Q9r),e(DL,UM),e(UM,J6e),e(J6e,H9r),e(UM,U9r),e(UM,Lz),e(Lz,J9r),e(UM,Y9r),e(jo,K9r),e(jo,Y6e),e(Y6e,Z9r),e(jo,eBr),g(NL,jo,null),b(c,FRe,u),b(c,Rf,u),e(Rf,JM),e(JM,K6e),g(qL,K6e,null),e(Rf,oBr),e(Rf,Z6e),e(Z6e,rBr),b(c,CRe,u),b(c,Xr,u),g(OL,Xr,null),e(Xr,tBr),e(Xr,Sf),e(Sf,aBr),e(Sf,eTe),e(eTe,nBr),e(Sf,sBr),e(Sf,oTe),e(oTe,lBr),e(Sf,iBr),e(Xr,dBr),e(Xr,GL),e(GL,cBr),e(GL,rTe),e(rTe,fBr),e(GL,mBr),e(Xr,gBr),e(Xr,jt),g(XL,jt,null),e(jt,hBr),e(jt,tTe),e(tTe,pBr),e(jt,_Br),e(jt,Pf),e(Pf,uBr),e(Pf,aTe),e(aTe,bBr),e(Pf,vBr),e(Pf,nTe),e(nTe,TBr),e(Pf,FBr),e(jt,CBr),e(jt,sTe),e(sTe,MBr),e(jt,EBr),g(VL,jt,null),e(Xr,yBr),e(Xr,Do),g(zL,Do,null),e(Do,wBr),e(Do,lTe),e(lTe,ABr),e(Do,LBr),e(Do,qn),e(qn,BBr),e(qn,iTe),e(iTe,xBr),e(qn,kBr),e(qn,dTe),e(dTe,RBr),e(qn,SBr),e(qn,cTe),e(cTe,PBr),e(qn,$Br),e(Do,IBr),e(Do,fTe),e(fTe,YM),e(YM,mTe),e(mTe,jBr),e(YM,DBr),e(YM,Bz),e(Bz,NBr),e(YM,qBr),e(Do,OBr),e(Do,gTe),e(gTe,GBr),e(Do,XBr),g(WL,Do,null),MRe=!0},p(c,[u]){const QL={};u&2&&(QL.$$scope={dirty:u,ctx:c}),Of.$set(QL);const hTe={};u&2&&(hTe.$$scope={dirty:u,ctx:c}),wh.$set(hTe);const pTe={};u&2&&(pTe.$$scope={dirty:u,ctx:c}),jh.$set(pTe)},i(c){MRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(oE.$$.fragment,c),h(rE.$$.fragment,c),h(Of.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(FE.$$.fragment,c),h(wh.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(LE.$$.fragment,c),h(jh.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(DE.$$.fragment,c),h(NE.$$.fragment,c),h(OE.$$.fragment,c),h(GE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(N3.$$.fragment,c),h(q3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(E5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(D5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(jL.$$.fragment,c),h(NL.$$.fragment,c),h(qL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),MRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(oE.$$.fragment,c),p(rE.$$.fragment,c),p(Of.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(FE.$$.fragment,c),p(wh.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(LE.$$.fragment,c),p(jh.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(DE.$$.fragment,c),p(NE.$$.fragment,c),p(OE.$$.fragment,c),p(GE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p(I3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(N3.$$.fragment,c),p(q3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(E5.$$.fragment,c),p(y5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(D5.$$.fragment,c),p(N5.$$.fragment,c),p(q5.$$.fragment,c),p(G5.$$.fragment,c),p(X5.$$.fragment,c),p(V5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Ow.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(jL.$$.fragment,c),p(NL.$$.fragment,c),p(qL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),MRe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Df),_(qa,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Oa),c&&t(Cxe),c&&t(Vi),_(oE),c&&t(Mxe),c&&t(zn),c&&t(Exe),_(rE,c),c&&t(yxe),c&&t(U8),c&&t(wxe),_(Of,c),c&&t(Axe),c&&t(zi),_(tE),c&&t(Lxe),c&&t(Wo),_(aE),_(lE),_(iE),_(dE),c&&t(Bxe),c&&t(Qi),_(cE),c&&t(xxe),c&&t(Qo),_(fE),_(hE),_(pE),_(_E),c&&t(kxe),c&&t(Hi),_(uE),c&&t(Rxe),c&&t(Ho),_(bE),_(FE),_(wh),_(CE),_(ME),c&&t(Sxe),c&&t(Ui),_(EE),c&&t(Pxe),c&&t(Uo),_(yE),_(LE),_(jh),_(BE),_(xE),c&&t($xe),c&&t(Yi),_(kE),c&&t(Ixe),c&&t(Jo),_(RE),_(PE),_($E),_(IE),_(jE),c&&t(jxe),c&&t(ed),_(DE),c&&t(Dxe),c&&t(Yo),_(NE),_(OE),_(GE),_(XE),_(VE),c&&t(Nxe),c&&t(td),_(zE),c&&t(qxe),c&&t(Ko),_(WE),_(HE),_(UE),_(JE),_(YE),c&&t(Oxe),c&&t(sd),_(KE),c&&t(Gxe),c&&t(Zo),_(ZE),_(o3),_(r3),_(t3),_(a3),c&&t(Xxe),c&&t(dd),_(n3),c&&t(Vxe),c&&t(er),_(s3),_(i3),_(d3),_(c3),_(f3),c&&t(zxe),c&&t(md),_(m3),c&&t(Wxe),c&&t(or),_(g3),_(p3),_(_3),_(u3),_(b3),c&&t(Qxe),c&&t(pd),_(v3),c&&t(Hxe),c&&t(rr),_(T3),_(C3),_(M3),_(E3),_(y3),c&&t(Uxe),c&&t(bd),_(w3),c&&t(Jxe),c&&t(tr),_(A3),_(B3),_(x3),_(k3),_(R3),c&&t(Yxe),c&&t(Fd),_(S3),c&&t(Kxe),c&&t(ar),_(P3),_(I3),_(j3),_(D3),_(N3),c&&t(Zxe),c&&t(Ed),_(q3),c&&t(eke),c&&t(nr),_(O3),_(X3),_(V3),_(z3),_(W3),c&&t(oke),c&&t(Ad),_(Q3),c&&t(rke),c&&t(sr),_(H3),_(J3),_(Y3),_(K3),_(Z3),c&&t(tke),c&&t(xd),_(e5),c&&t(ake),c&&t(lr),_(o5),_(t5),_(a5),_(n5),_(s5),c&&t(nke),c&&t(Sd),_(l5),c&&t(ske),c&&t(ir),_(i5),_(c5),_(f5),_(m5),_(g5),c&&t(lke),c&&t(Id),_(h5),c&&t(ike),c&&t(dr),_(p5),_(u5),_(b5),_(v5),_(T5),c&&t(dke),c&&t(Nd),_(F5),c&&t(cke),c&&t(cr),_(C5),_(E5),_(y5),_(w5),_(A5),c&&t(fke),c&&t(Gd),_(L5),c&&t(mke),c&&t(fr),_(B5),_(k5),_(R5),_(S5),_(P5),c&&t(gke),c&&t(zd),_($5),c&&t(hke),c&&t(mr),_(I5),_(D5),_(N5),_(q5),_(G5),c&&t(pke),c&&t(Hd),_(X5),c&&t(_ke),c&&t(gr),_(V5),_(W5),_(Q5),_(H5),_(U5),c&&t(uke),c&&t(Yd),_(J5),c&&t(bke),c&&t(hr),_(Y5),_(Z5),_(ey),_(oy),_(ry),c&&t(vke),c&&t(oc),_(ty),c&&t(Tke),c&&t(pr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(Fke),c&&t(ac),_(cy),c&&t(Cke),c&&t(_r),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(Mke),c&&t(lc),_(uy),c&&t(Eke),c&&t(ur),_(by),_(Ty),_(Fy),_(Cy),_(Ey),c&&t(yke),c&&t(cc),_(yy),c&&t(wke),c&&t(br),_(wy),_(Ly),_(By),_(xy),_(ky),c&&t(Ake),c&&t(gc),_(Ry),c&&t(Lke),c&&t(vr),_(Sy),_($y),_(Iy),_(jy),_(Dy),c&&t(Bke),c&&t(_c),_(Ny),c&&t(xke),c&&t(Tr),_(qy),_(Gy),_(Xy),_(Vy),_(zy),c&&t(kke),c&&t(vc),_(Wy),c&&t(Rke),c&&t(Fr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(Ske),c&&t(Cc),_(Zy),c&&t(Pke),c&&t(Cr),_(ew),_(rw),_(tw),_(aw),_(sw),c&&t($ke),c&&t(yc),_(lw),c&&t(Ike),c&&t(Mr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(jke),c&&t(Lc),_(hw),c&&t(Dke),c&&t(Er),_(pw),_(uw),_(bw),_(vw),_(Tw),c&&t(Nke),c&&t(kc),_(Fw),c&&t(qke),c&&t(yr),_(Cw),_(Ew),_(yw),_(ww),_(Aw),c&&t(Oke),c&&t(Pc),_(Lw),c&&t(Gke),c&&t(wr),_(Bw),_(kw),_(Rw),_(Sw),_(Pw),c&&t(Xke),c&&t(jc),_($w),c&&t(Vke),c&&t(Ar),_(Iw),_(Dw),_(Nw),_(qw),_(Ow),c&&t(zke),c&&t(qc),_(Gw),c&&t(Wke),c&&t(Lr),_(Xw),_(zw),_(Ww),_(Qw),_(Hw),c&&t(Qke),c&&t(Xc),_(Uw),c&&t(Hke),c&&t(Br),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(Uke),c&&t(Wc),_(rA),c&&t(Jke),c&&t(xr),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(Yke),c&&t(Uc),_(dA),c&&t(Kke),c&&t(kr),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(Zke),c&&t(Kc),_(_A),c&&t(eRe),c&&t(Rr),_(uA),_(vA),_(TA),_(FA),_(CA),c&&t(oRe),c&&t(of),_(MA),c&&t(rRe),c&&t(Sr),_(EA),_(wA),_(AA),_(LA),_(BA),c&&t(tRe),c&&t(af),_(xA),c&&t(aRe),c&&t(Pr),_(kA),_(SA),_(PA),_($A),_(IA),c&&t(nRe),c&&t(lf),_(jA),c&&t(sRe),c&&t($r),_(DA),_(qA),_(OA),_(GA),_(XA),c&&t(lRe),c&&t(ff),_(VA),c&&t(iRe),c&&t(Ir),_(zA),_(QA),_(HA),_(UA),_(JA),c&&t(dRe),c&&t(hf),_(YA),c&&t(cRe),c&&t(jr),_(KA),_(eL),_(oL),_(rL),_(tL),c&&t(fRe),c&&t(uf),_(aL),c&&t(mRe),c&&t(Dr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(gRe),c&&t(Tf),_(fL),c&&t(hRe),c&&t(Nr),_(mL),_(hL),_(pL),_(_L),_(uL),c&&t(pRe),c&&t(Mf),_(bL),c&&t(_Re),c&&t(qr),_(vL),_(FL),_(CL),_(ML),_(EL),c&&t(uRe),c&&t(wf),_(yL),c&&t(bRe),c&&t(Or),_(wL),_(LL),_(BL),_(xL),_(kL),c&&t(vRe),c&&t(Bf),_(RL),c&&t(TRe),c&&t(Gr),_(SL),_($L),_(IL),_(jL),_(NL),c&&t(FRe),c&&t(Rf),_(qL),c&&t(CRe),c&&t(Xr),_(OL),_(XL),_(VL),_(zL),_(WL)}}}const S7t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function P7t(Ii,J,$e){let{fw:de}=J;return Ii.$$set=he=>{"fw"in he&&$e(0,de=he.fw)},[de]}class O7t extends y7t{constructor(J){super();w7t(this,J,P7t,R7t,A7t,{fw:0})}}export{O7t as default,S7t as metadata};
