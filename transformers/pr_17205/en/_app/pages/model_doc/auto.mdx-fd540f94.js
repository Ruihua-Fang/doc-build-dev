import{S as Y6t,i as K6t,s as Z6t,e as a,k as l,w as F,t as o,M as eyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as oyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bjr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function ryt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,YA,gf,qe,Xe,ci,An,KA,yn,Ln,ZA,fi,xn,e6,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),YA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),KA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),ZA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),e6=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var b$=s(p);m=r(b$,"NewModelConfig"),b$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var v$=s(li);mf=r(v$,"model_type"),v$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var F$=s(ii);di=r(F$,'"new-model"'),F$.forEach(t),YA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),KA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var T$=s(yn);Ln=r(T$,"PreTrainedModel"),T$.forEach(t),ZA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),e6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var M$=s(mi);hf=r(M$,"NewModelConfig"),M$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,YA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,KA),e(qe,yn),e(yn,Ln),e(qe,ZA),e(qe,fi),e(fi,xn),e(qe,e6),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,YA,gf,qe,Xe,ci,An,KA,yn,Ln,ZA,fi,xn,e6,mi,hf,Ma,ze,Ae,b$,gi,v$,F$,Eo,Ea,T$,pf,M$,uDe,nIe,hi,uf,iee,o6,_De,dee,bDe,sIe,$n,vDe,cee,FDe,TDe,fee,MDe,EDe,lIe,r6,iIe,E$,CDe,dIe,_f,cIe,pi,bf,mee,t6,wDe,gee,ADe,fIe,Co,a6,yDe,n6,LDe,C$,xDe,$De,kDe,s6,SDe,hee,RDe,BDe,PDe,Er,l6,IDe,pee,qDe,NDe,ui,jDe,uee,DDe,GDe,_ee,ODe,VDe,XDe,A,vf,bee,zDe,QDe,w$,WDe,HDe,UDe,Ff,vee,JDe,YDe,A$,KDe,ZDe,eGe,Tf,Fee,oGe,rGe,y$,tGe,aGe,nGe,Mf,Tee,sGe,lGe,L$,iGe,dGe,cGe,Ef,Mee,fGe,mGe,x$,gGe,hGe,pGe,Cf,Eee,uGe,_Ge,$$,bGe,vGe,FGe,wf,Cee,TGe,MGe,k$,EGe,CGe,wGe,Af,wee,AGe,yGe,S$,LGe,xGe,$Ge,yf,Aee,kGe,SGe,R$,RGe,BGe,PGe,Lf,yee,IGe,qGe,B$,NGe,jGe,DGe,xf,Lee,GGe,OGe,P$,VGe,XGe,zGe,$f,xee,QGe,WGe,I$,HGe,UGe,JGe,kf,$ee,YGe,KGe,q$,ZGe,eOe,oOe,Sf,kee,rOe,tOe,N$,aOe,nOe,sOe,Rf,See,lOe,iOe,j$,dOe,cOe,fOe,Bf,Ree,mOe,gOe,D$,hOe,pOe,uOe,Pf,Bee,_Oe,bOe,G$,vOe,FOe,TOe,If,Pee,MOe,EOe,O$,COe,wOe,AOe,qf,Iee,yOe,LOe,V$,xOe,$Oe,kOe,Nf,qee,SOe,ROe,X$,BOe,POe,IOe,jf,Nee,qOe,NOe,z$,jOe,DOe,GOe,Df,jee,OOe,VOe,Q$,XOe,zOe,QOe,Gf,Dee,WOe,HOe,W$,UOe,JOe,YOe,Of,Gee,KOe,ZOe,H$,eVe,oVe,rVe,Vf,Oee,tVe,aVe,U$,nVe,sVe,lVe,Xf,Vee,iVe,dVe,J$,cVe,fVe,mVe,zf,Xee,gVe,hVe,Y$,pVe,uVe,_Ve,Qf,zee,bVe,vVe,K$,FVe,TVe,MVe,Wf,Qee,EVe,CVe,Z$,wVe,AVe,yVe,Hf,Wee,LVe,xVe,ek,$Ve,kVe,SVe,Uf,Hee,RVe,BVe,ok,PVe,IVe,qVe,Jf,Uee,NVe,jVe,rk,DVe,GVe,OVe,Yf,Jee,VVe,XVe,tk,zVe,QVe,WVe,Kf,Yee,HVe,UVe,ak,JVe,YVe,KVe,Zf,Kee,ZVe,eXe,nk,oXe,rXe,tXe,em,Zee,aXe,nXe,sk,sXe,lXe,iXe,om,eoe,dXe,cXe,lk,fXe,mXe,gXe,rm,ooe,hXe,pXe,ik,uXe,_Xe,bXe,tm,roe,vXe,FXe,dk,TXe,MXe,EXe,am,toe,CXe,wXe,ck,AXe,yXe,LXe,nm,aoe,xXe,$Xe,fk,kXe,SXe,RXe,sm,noe,BXe,PXe,mk,IXe,qXe,NXe,lm,soe,jXe,DXe,gk,GXe,OXe,VXe,im,loe,XXe,zXe,hk,QXe,WXe,HXe,dm,ioe,UXe,JXe,pk,YXe,KXe,ZXe,cm,doe,eze,oze,uk,rze,tze,aze,fm,coe,nze,sze,_k,lze,ize,dze,mm,foe,cze,fze,bk,mze,gze,hze,gm,moe,pze,uze,vk,_ze,bze,vze,hm,goe,Fze,Tze,Fk,Mze,Eze,Cze,pm,hoe,wze,Aze,Tk,yze,Lze,xze,um,poe,$ze,kze,Mk,Sze,Rze,Bze,_m,uoe,Pze,Ize,Ek,qze,Nze,jze,bm,_oe,Dze,Gze,Ck,Oze,Vze,Xze,vm,boe,zze,Qze,wk,Wze,Hze,Uze,Fm,voe,Jze,Yze,Ak,Kze,Zze,eQe,Tm,Foe,oQe,rQe,yk,tQe,aQe,nQe,Mm,Toe,sQe,lQe,Lk,iQe,dQe,cQe,Em,Moe,fQe,mQe,xk,gQe,hQe,pQe,Cm,Eoe,uQe,_Qe,$k,bQe,vQe,FQe,wm,Coe,TQe,MQe,kk,EQe,CQe,wQe,Am,woe,AQe,yQe,Sk,LQe,xQe,$Qe,ym,Aoe,kQe,SQe,Rk,RQe,BQe,PQe,Lm,yoe,IQe,qQe,Bk,NQe,jQe,DQe,xm,Loe,GQe,OQe,Pk,VQe,XQe,zQe,$m,xoe,QQe,WQe,Ik,HQe,UQe,JQe,km,$oe,YQe,KQe,qk,ZQe,eWe,oWe,Sm,koe,rWe,tWe,Nk,aWe,nWe,sWe,Rm,Soe,lWe,iWe,jk,dWe,cWe,fWe,Bm,Roe,mWe,gWe,Dk,hWe,pWe,uWe,Pm,Boe,_We,bWe,Gk,vWe,FWe,TWe,Im,Poe,MWe,EWe,Ok,CWe,wWe,AWe,qm,Ioe,yWe,LWe,Vk,xWe,$We,kWe,Nm,qoe,SWe,RWe,Xk,BWe,PWe,IWe,jm,Noe,qWe,NWe,zk,jWe,DWe,GWe,Dm,joe,OWe,VWe,Qk,XWe,zWe,QWe,Gm,Doe,WWe,HWe,Wk,UWe,JWe,YWe,Om,Goe,KWe,ZWe,Hk,eHe,oHe,rHe,Vm,Ooe,tHe,aHe,Uk,nHe,sHe,lHe,Xm,Voe,iHe,dHe,Jk,cHe,fHe,mHe,zm,Xoe,gHe,hHe,Yk,pHe,uHe,_He,Qm,zoe,bHe,vHe,Kk,FHe,THe,MHe,Wm,Qoe,EHe,CHe,Zk,wHe,AHe,yHe,Hm,Woe,LHe,xHe,eS,$He,kHe,SHe,Um,Hoe,RHe,BHe,oS,PHe,IHe,qHe,Jm,Uoe,NHe,jHe,rS,DHe,GHe,OHe,Ym,Joe,VHe,XHe,tS,zHe,QHe,WHe,Km,Yoe,HHe,UHe,aS,JHe,YHe,KHe,Zm,Koe,ZHe,eUe,nS,oUe,rUe,tUe,eg,Zoe,aUe,nUe,sS,sUe,lUe,iUe,og,ere,dUe,cUe,lS,fUe,mUe,gUe,rg,ore,hUe,pUe,iS,uUe,_Ue,bUe,tg,rre,vUe,FUe,dS,TUe,MUe,EUe,ag,tre,CUe,wUe,cS,AUe,yUe,LUe,ng,are,xUe,$Ue,fS,kUe,SUe,RUe,sg,nre,BUe,PUe,mS,IUe,qUe,NUe,lg,sre,jUe,DUe,gS,GUe,OUe,VUe,ig,lre,XUe,zUe,hS,QUe,WUe,HUe,dg,ire,UUe,JUe,pS,YUe,KUe,ZUe,cg,dre,eJe,oJe,uS,rJe,tJe,aJe,fg,cre,nJe,sJe,_S,lJe,iJe,dJe,mg,fre,cJe,fJe,bS,mJe,gJe,hJe,gg,mre,pJe,uJe,vS,_Je,bJe,vJe,hg,gre,FJe,TJe,FS,MJe,EJe,CJe,pg,hre,wJe,AJe,TS,yJe,LJe,xJe,ug,pre,$Je,kJe,MS,SJe,RJe,BJe,_g,PJe,bg,i6,IJe,ure,qJe,mIe,_i,vg,_re,d6,NJe,bre,jJe,gIe,wo,c6,DJe,f6,GJe,ES,OJe,VJe,XJe,m6,zJe,vre,QJe,WJe,HJe,Cr,g6,UJe,Fre,JJe,YJe,Ca,KJe,Tre,ZJe,eYe,Mre,oYe,rYe,Ere,tYe,aYe,nYe,k,kn,Cre,sYe,lYe,CS,iYe,dYe,wS,cYe,fYe,mYe,Sn,wre,gYe,hYe,AS,pYe,uYe,yS,_Ye,bYe,vYe,Rn,Are,FYe,TYe,LS,MYe,EYe,xS,CYe,wYe,AYe,Fg,yre,yYe,LYe,$S,xYe,$Ye,kYe,Bn,Lre,SYe,RYe,kS,BYe,PYe,SS,IYe,qYe,NYe,Tg,xre,jYe,DYe,RS,GYe,OYe,VYe,Mg,$re,XYe,zYe,BS,QYe,WYe,HYe,Eg,kre,UYe,JYe,PS,YYe,KYe,ZYe,Pn,Sre,eKe,oKe,IS,rKe,tKe,qS,aKe,nKe,sKe,In,Rre,lKe,iKe,NS,dKe,cKe,jS,fKe,mKe,gKe,qn,Bre,hKe,pKe,DS,uKe,_Ke,GS,bKe,vKe,FKe,Cg,Pre,TKe,MKe,OS,EKe,CKe,wKe,wg,Ire,AKe,yKe,VS,LKe,xKe,$Ke,Nn,qre,kKe,SKe,XS,RKe,BKe,zS,PKe,IKe,qKe,Ag,Nre,NKe,jKe,QS,DKe,GKe,OKe,jn,jre,VKe,XKe,WS,zKe,QKe,HS,WKe,HKe,UKe,Dn,Dre,JKe,YKe,US,KKe,ZKe,JS,eZe,oZe,rZe,Gn,Gre,tZe,aZe,YS,nZe,sZe,KS,lZe,iZe,dZe,yg,Ore,cZe,fZe,ZS,mZe,gZe,hZe,On,Vre,pZe,uZe,eR,_Ze,bZe,oR,vZe,FZe,TZe,Vn,Xre,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Xn,zre,xZe,$Ze,aR,kZe,SZe,nR,RZe,BZe,PZe,zn,Qre,IZe,qZe,sR,NZe,jZe,lR,DZe,GZe,OZe,Qn,Wre,VZe,XZe,iR,zZe,QZe,dR,WZe,HZe,UZe,Wn,Hre,JZe,YZe,cR,KZe,ZZe,fR,eeo,oeo,reo,Lg,Ure,teo,aeo,mR,neo,seo,leo,Hn,Jre,ieo,deo,gR,ceo,feo,hR,meo,geo,heo,xg,Yre,peo,ueo,pR,_eo,beo,veo,Un,Kre,Feo,Teo,uR,Meo,Eeo,_R,Ceo,weo,Aeo,Jn,Zre,yeo,Leo,bR,xeo,$eo,vR,keo,Seo,Reo,Yn,ete,Beo,Peo,FR,Ieo,qeo,TR,Neo,jeo,Deo,Kn,ote,Geo,Oeo,MR,Veo,Xeo,ER,zeo,Qeo,Weo,Zn,rte,Heo,Ueo,CR,Jeo,Yeo,wR,Keo,Zeo,eoo,$g,tte,ooo,roo,AR,too,aoo,noo,es,ate,soo,loo,yR,ioo,doo,LR,coo,foo,moo,os,nte,goo,hoo,xR,poo,uoo,$R,_oo,boo,voo,rs,ste,Foo,Too,kR,Moo,Eoo,SR,Coo,woo,Aoo,ts,lte,yoo,Loo,RR,xoo,$oo,BR,koo,Soo,Roo,as,ite,Boo,Poo,PR,Ioo,qoo,IR,Noo,joo,Doo,ns,dte,Goo,Ooo,qR,Voo,Xoo,NR,zoo,Qoo,Woo,kg,cte,Hoo,Uoo,jR,Joo,Yoo,Koo,ss,fte,Zoo,ero,DR,oro,rro,GR,tro,aro,nro,Sg,mte,sro,lro,OR,iro,dro,cro,Rg,gte,fro,mro,VR,gro,hro,pro,ls,hte,uro,_ro,XR,bro,vro,zR,Fro,Tro,Mro,is,pte,Ero,Cro,QR,wro,Aro,WR,yro,Lro,xro,ds,ute,$ro,kro,HR,Sro,Rro,UR,Bro,Pro,Iro,Bg,_te,qro,Nro,JR,jro,Dro,Gro,cs,bte,Oro,Vro,YR,Xro,zro,KR,Qro,Wro,Hro,fs,vte,Uro,Jro,ZR,Yro,Kro,eB,Zro,eto,oto,ms,Fte,rto,tto,oB,ato,nto,rB,sto,lto,ito,gs,Tte,dto,cto,tB,fto,mto,aB,gto,hto,pto,hs,Mte,uto,_to,nB,bto,vto,sB,Fto,Tto,Mto,Pg,Ete,Eto,Cto,lB,wto,Ato,yto,ps,Cte,Lto,xto,iB,$to,kto,dB,Sto,Rto,Bto,Ig,wte,Pto,Ito,cB,qto,Nto,jto,qg,Ate,Dto,Gto,fB,Oto,Vto,Xto,Ng,yte,zto,Qto,mB,Wto,Hto,Uto,jg,Lte,Jto,Yto,gB,Kto,Zto,eao,us,xte,oao,rao,hB,tao,aao,pB,nao,sao,lao,Dg,$te,iao,dao,uB,cao,fao,mao,_s,kte,gao,hao,_B,pao,uao,bB,_ao,bao,vao,bs,Ste,Fao,Tao,vB,Mao,Eao,FB,Cao,wao,Aao,vs,Rte,yao,Lao,TB,xao,$ao,MB,kao,Sao,Rao,Fs,Bte,Bao,Pao,EB,Iao,qao,CB,Nao,jao,Dao,Ts,Pte,Gao,Oao,wB,Vao,Xao,AB,zao,Qao,Wao,Ms,Ite,Hao,Uao,yB,Jao,Yao,LB,Kao,Zao,eno,Gg,qte,ono,rno,xB,tno,ano,nno,Og,Nte,sno,lno,$B,ino,dno,cno,Es,jte,fno,mno,kB,gno,hno,SB,pno,uno,_no,Cs,Dte,bno,vno,RB,Fno,Tno,BB,Mno,Eno,Cno,ws,Gte,wno,Ano,PB,yno,Lno,IB,xno,$no,kno,Vg,Ote,Sno,Rno,qB,Bno,Pno,Ino,Xg,Vte,qno,Nno,NB,jno,Dno,Gno,zg,Xte,Ono,Vno,jB,Xno,zno,Qno,As,zte,Wno,Hno,DB,Uno,Jno,GB,Yno,Kno,Zno,Qg,Qte,eso,oso,OB,rso,tso,aso,Wg,Wte,nso,sso,VB,lso,iso,dso,ys,Hte,cso,fso,XB,mso,gso,zB,hso,pso,uso,Hg,Ute,_so,bso,QB,vso,Fso,Tso,Ug,Jte,Mso,Eso,WB,Cso,wso,Aso,Ls,Yte,yso,Lso,HB,xso,$so,UB,kso,Sso,Rso,xs,Kte,Bso,Pso,JB,Iso,qso,YB,Nso,jso,Dso,$s,Zte,Gso,Oso,KB,Vso,Xso,ZB,zso,Qso,Wso,ks,eae,Hso,Uso,eP,Jso,Yso,oP,Kso,Zso,elo,Jg,olo,Yg,h6,rlo,oae,tlo,hIe,bi,Kg,rae,p6,alo,tae,nlo,pIe,Ao,u6,slo,_6,llo,rP,ilo,dlo,clo,b6,flo,aae,mlo,glo,hlo,Qe,v6,plo,nae,ulo,_lo,wa,blo,sae,vlo,Flo,lae,Tlo,Mlo,iae,Elo,Clo,wlo,Z,Zg,dae,Alo,ylo,tP,Llo,xlo,$lo,eh,cae,klo,Slo,aP,Rlo,Blo,Plo,oh,fae,Ilo,qlo,nP,Nlo,jlo,Dlo,rh,mae,Glo,Olo,sP,Vlo,Xlo,zlo,th,gae,Qlo,Wlo,lP,Hlo,Ulo,Jlo,ah,hae,Ylo,Klo,iP,Zlo,eio,oio,nh,pae,rio,tio,dP,aio,nio,sio,sh,uae,lio,iio,cP,dio,cio,fio,lh,_ae,mio,gio,fP,hio,pio,uio,ih,bae,_io,bio,mP,vio,Fio,Tio,dh,vae,Mio,Eio,gP,Cio,wio,Aio,ch,Fae,yio,Lio,hP,xio,$io,kio,fh,Tae,Sio,Rio,pP,Bio,Pio,Iio,mh,Mae,qio,Nio,uP,jio,Dio,Gio,gh,Eae,Oio,Vio,_P,Xio,zio,Qio,hh,Cae,Wio,Hio,bP,Uio,Jio,Yio,ph,wae,Kio,Zio,vP,edo,odo,rdo,uh,Aae,tdo,ado,FP,ndo,sdo,ldo,_h,yae,ido,ddo,TP,cdo,fdo,mdo,bh,Lae,gdo,hdo,MP,pdo,udo,_do,vh,xae,bdo,vdo,EP,Fdo,Tdo,Mdo,Fh,$ae,Edo,Cdo,CP,wdo,Ado,ydo,Th,kae,Ldo,xdo,wP,$do,kdo,Sdo,Mh,Sae,Rdo,Bdo,AP,Pdo,Ido,qdo,Eh,Rae,Ndo,jdo,yP,Ddo,Gdo,Odo,Ch,Bae,Vdo,Xdo,LP,zdo,Qdo,Wdo,wh,Hdo,Ah,Udo,yh,F6,Jdo,Pae,Ydo,uIe,vi,Lh,Iae,T6,Kdo,qae,Zdo,_Ie,yo,M6,eco,E6,oco,xP,rco,tco,aco,C6,nco,Nae,sco,lco,ico,We,w6,dco,jae,cco,fco,Fi,mco,Dae,gco,hco,Gae,pco,uco,_co,be,xh,Oae,bco,vco,$P,Fco,Tco,Mco,$h,Vae,Eco,Cco,Xae,wco,Aco,yco,kh,zae,Lco,xco,kP,$co,kco,Sco,Sh,Qae,Rco,Bco,SP,Pco,Ico,qco,Rh,Wae,Nco,jco,RP,Dco,Gco,Oco,Bh,Hae,Vco,Xco,BP,zco,Qco,Wco,Ph,Uae,Hco,Uco,PP,Jco,Yco,Kco,Ih,Jae,Zco,efo,IP,ofo,rfo,tfo,qh,Yae,afo,nfo,qP,sfo,lfo,ifo,Nh,Kae,dfo,cfo,NP,ffo,mfo,gfo,jh,Zae,hfo,pfo,jP,ufo,_fo,bfo,Dh,ene,vfo,Ffo,DP,Tfo,Mfo,Efo,Gh,one,Cfo,wfo,GP,Afo,yfo,Lfo,Oh,rne,xfo,$fo,OP,kfo,Sfo,Rfo,Vh,tne,Bfo,Pfo,VP,Ifo,qfo,Nfo,Xh,jfo,zh,Dfo,Qh,A6,Gfo,ane,Ofo,bIe,Ti,Wh,nne,y6,Vfo,sne,Xfo,vIe,Lo,L6,zfo,Mi,Qfo,XP,Wfo,Hfo,zP,Ufo,Jfo,Yfo,x6,Kfo,lne,Zfo,emo,omo,ot,$6,rmo,ine,tmo,amo,Ei,nmo,dne,smo,lmo,QP,imo,dmo,cmo,Hh,fmo,He,k6,mmo,cne,gmo,hmo,Aa,pmo,fne,umo,_mo,mne,bmo,vmo,gne,Fmo,Tmo,Mmo,x,Uh,hne,Emo,Cmo,WP,wmo,Amo,ymo,Jh,pne,Lmo,xmo,HP,$mo,kmo,Smo,Yh,une,Rmo,Bmo,UP,Pmo,Imo,qmo,Kh,_ne,Nmo,jmo,JP,Dmo,Gmo,Omo,Zh,bne,Vmo,Xmo,YP,zmo,Qmo,Wmo,ep,vne,Hmo,Umo,KP,Jmo,Ymo,Kmo,op,Fne,Zmo,ego,ZP,ogo,rgo,tgo,rp,Tne,ago,ngo,eI,sgo,lgo,igo,tp,Mne,dgo,cgo,oI,fgo,mgo,ggo,ap,Ene,hgo,pgo,rI,ugo,_go,bgo,np,Cne,vgo,Fgo,tI,Tgo,Mgo,Ego,sp,wne,Cgo,wgo,aI,Ago,ygo,Lgo,lp,Ane,xgo,$go,nI,kgo,Sgo,Rgo,ip,yne,Bgo,Pgo,sI,Igo,qgo,Ngo,dp,Lne,jgo,Dgo,lI,Ggo,Ogo,Vgo,cp,xne,Xgo,zgo,iI,Qgo,Wgo,Hgo,fp,$ne,Ugo,Jgo,dI,Ygo,Kgo,Zgo,mp,kne,eho,oho,cI,rho,tho,aho,gp,Sne,nho,sho,fI,lho,iho,dho,hp,Rne,cho,fho,mI,mho,gho,hho,pp,Bne,pho,uho,gI,_ho,bho,vho,up,Pne,Fho,Tho,hI,Mho,Eho,Cho,_p,Ine,who,Aho,pI,yho,Lho,xho,bp,qne,$ho,kho,uI,Sho,Rho,Bho,vp,Nne,Pho,Iho,_I,qho,Nho,jho,Fp,jne,Dho,Gho,bI,Oho,Vho,Xho,Tp,Dne,zho,Qho,vI,Who,Hho,Uho,Mp,Gne,Jho,Yho,FI,Kho,Zho,epo,Ep,One,opo,rpo,TI,tpo,apo,npo,Cp,Vne,spo,lpo,MI,ipo,dpo,cpo,wp,Xne,fpo,mpo,EI,gpo,hpo,ppo,Ss,zne,upo,_po,CI,bpo,vpo,wI,Fpo,Tpo,Mpo,Ap,Qne,Epo,Cpo,AI,wpo,Apo,ypo,yp,Wne,Lpo,xpo,yI,$po,kpo,Spo,Lp,Hne,Rpo,Bpo,LI,Ppo,Ipo,qpo,xp,Une,Npo,jpo,xI,Dpo,Gpo,Opo,$p,Jne,Vpo,Xpo,$I,zpo,Qpo,Wpo,kp,Yne,Hpo,Upo,kI,Jpo,Ypo,Kpo,Sp,Kne,Zpo,euo,SI,ouo,ruo,tuo,Rp,Zne,auo,nuo,RI,suo,luo,iuo,Bp,ese,duo,cuo,BI,fuo,muo,guo,Pp,ose,huo,puo,PI,uuo,_uo,buo,Ip,rse,vuo,Fuo,II,Tuo,Muo,Euo,qp,tse,Cuo,wuo,qI,Auo,yuo,Luo,Np,ase,xuo,$uo,NI,kuo,Suo,Ruo,jp,nse,Buo,Puo,jI,Iuo,quo,Nuo,Dp,sse,juo,Duo,DI,Guo,Ouo,Vuo,Gp,lse,Xuo,zuo,GI,Quo,Wuo,Huo,Op,ise,Uuo,Juo,OI,Yuo,Kuo,Zuo,Vp,dse,e_o,o_o,VI,r_o,t_o,a_o,Xp,cse,n_o,s_o,XI,l_o,i_o,d_o,zp,fse,c_o,f_o,zI,m_o,g_o,h_o,Qp,mse,p_o,u_o,QI,__o,b_o,v_o,Wp,gse,F_o,T_o,WI,M_o,E_o,C_o,Hp,hse,w_o,A_o,HI,y_o,L_o,x_o,Up,pse,$_o,k_o,UI,S_o,R_o,B_o,Jp,use,P_o,I_o,JI,q_o,N_o,j_o,Yp,_se,D_o,G_o,YI,O_o,V_o,X_o,Kp,bse,z_o,Q_o,KI,W_o,H_o,U_o,Zp,vse,J_o,Y_o,ZI,K_o,Z_o,e2o,eu,Fse,o2o,r2o,eq,t2o,a2o,n2o,ou,Tse,s2o,l2o,oq,i2o,d2o,c2o,ru,Mse,f2o,m2o,rq,g2o,h2o,p2o,tu,Ese,u2o,_2o,tq,b2o,v2o,F2o,au,Cse,T2o,M2o,aq,E2o,C2o,w2o,nu,wse,A2o,y2o,nq,L2o,x2o,$2o,su,Ase,k2o,S2o,sq,R2o,B2o,P2o,lu,yse,I2o,q2o,lq,N2o,j2o,D2o,iu,Lse,G2o,O2o,iq,V2o,X2o,z2o,du,xse,Q2o,W2o,dq,H2o,U2o,J2o,cu,$se,Y2o,K2o,cq,Z2o,e1o,o1o,fu,kse,r1o,t1o,fq,a1o,n1o,s1o,mu,Sse,l1o,i1o,mq,d1o,c1o,f1o,gu,Rse,m1o,g1o,gq,h1o,p1o,u1o,hu,Bse,_1o,b1o,hq,v1o,F1o,T1o,pu,Pse,M1o,E1o,pq,C1o,w1o,A1o,uu,Ise,y1o,L1o,uq,x1o,$1o,k1o,_u,qse,S1o,R1o,_q,B1o,P1o,I1o,bu,Nse,q1o,N1o,bq,j1o,D1o,G1o,vu,jse,O1o,V1o,vq,X1o,z1o,Q1o,Fu,Dse,W1o,H1o,Fq,U1o,J1o,Y1o,Tu,Gse,K1o,Z1o,Tq,ebo,obo,rbo,Mu,Ose,tbo,abo,Mq,nbo,sbo,lbo,Eu,Vse,ibo,dbo,Eq,cbo,fbo,mbo,Cu,Xse,gbo,hbo,Cq,pbo,ubo,_bo,wu,zse,bbo,vbo,wq,Fbo,Tbo,Mbo,Au,Qse,Ebo,Cbo,Aq,wbo,Abo,ybo,yu,Wse,Lbo,xbo,yq,$bo,kbo,Sbo,Lu,Hse,Rbo,Bbo,Lq,Pbo,Ibo,qbo,xu,Use,Nbo,jbo,xq,Dbo,Gbo,Obo,$u,Jse,Vbo,Xbo,$q,zbo,Qbo,Wbo,ku,Yse,Hbo,Ubo,kq,Jbo,Ybo,Kbo,Su,Kse,Zbo,e5o,Sq,o5o,r5o,t5o,Ru,Zse,a5o,n5o,Rq,s5o,l5o,i5o,Bu,ele,d5o,c5o,Bq,f5o,m5o,g5o,Pu,ole,h5o,p5o,Pq,u5o,_5o,b5o,Iu,rle,v5o,F5o,Iq,T5o,M5o,E5o,qu,tle,C5o,w5o,qq,A5o,y5o,L5o,Nu,x5o,ale,$5o,k5o,nle,S5o,R5o,ju,FIe,Ci,Du,sle,S6,B5o,lle,P5o,TIe,xo,R6,I5o,wi,q5o,Nq,N5o,j5o,jq,D5o,G5o,O5o,B6,V5o,ile,X5o,z5o,Q5o,rt,P6,W5o,dle,H5o,U5o,Ai,J5o,cle,Y5o,K5o,Dq,Z5o,evo,ovo,Gu,rvo,Ue,I6,tvo,fle,avo,nvo,ya,svo,mle,lvo,ivo,gle,dvo,cvo,hle,fvo,mvo,gvo,G,Ou,ple,hvo,pvo,Gq,uvo,_vo,bvo,Vu,ule,vvo,Fvo,Oq,Tvo,Mvo,Evo,Xu,_le,Cvo,wvo,Vq,Avo,yvo,Lvo,zu,ble,xvo,$vo,Xq,kvo,Svo,Rvo,Qu,vle,Bvo,Pvo,zq,Ivo,qvo,Nvo,Wu,Fle,jvo,Dvo,Qq,Gvo,Ovo,Vvo,Hu,Tle,Xvo,zvo,Wq,Qvo,Wvo,Hvo,Uu,Mle,Uvo,Jvo,Hq,Yvo,Kvo,Zvo,Ju,Ele,eFo,oFo,Uq,rFo,tFo,aFo,Yu,Cle,nFo,sFo,Jq,lFo,iFo,dFo,Ku,wle,cFo,fFo,Yq,mFo,gFo,hFo,Zu,Ale,pFo,uFo,Kq,_Fo,bFo,vFo,e_,yle,FFo,TFo,Zq,MFo,EFo,CFo,o_,Lle,wFo,AFo,eN,yFo,LFo,xFo,r_,xle,$Fo,kFo,oN,SFo,RFo,BFo,t_,$le,PFo,IFo,rN,qFo,NFo,jFo,a_,kle,DFo,GFo,tN,OFo,VFo,XFo,n_,Sle,zFo,QFo,aN,WFo,HFo,UFo,s_,Rle,JFo,YFo,nN,KFo,ZFo,e0o,l_,Ble,o0o,r0o,sN,t0o,a0o,n0o,i_,Ple,s0o,l0o,lN,i0o,d0o,c0o,d_,Ile,f0o,m0o,iN,g0o,h0o,p0o,c_,qle,u0o,_0o,dN,b0o,v0o,F0o,f_,Nle,T0o,M0o,cN,E0o,C0o,w0o,m_,jle,A0o,y0o,fN,L0o,x0o,$0o,g_,Dle,k0o,S0o,mN,R0o,B0o,P0o,h_,Gle,I0o,q0o,gN,N0o,j0o,D0o,p_,Ole,G0o,O0o,hN,V0o,X0o,z0o,u_,Vle,Q0o,W0o,pN,H0o,U0o,J0o,__,Xle,Y0o,K0o,uN,Z0o,eTo,oTo,b_,zle,rTo,tTo,_N,aTo,nTo,sTo,v_,Qle,lTo,iTo,bN,dTo,cTo,fTo,F_,Wle,mTo,gTo,vN,hTo,pTo,uTo,T_,Hle,_To,bTo,FN,vTo,FTo,TTo,M_,Ule,MTo,ETo,TN,CTo,wTo,ATo,E_,Jle,yTo,LTo,MN,xTo,$To,kTo,C_,Yle,STo,RTo,EN,BTo,PTo,ITo,w_,Kle,qTo,NTo,CN,jTo,DTo,GTo,A_,Zle,OTo,VTo,wN,XTo,zTo,QTo,y_,eie,WTo,HTo,AN,UTo,JTo,YTo,L_,KTo,oie,ZTo,e7o,rie,o7o,r7o,x_,MIe,yi,$_,tie,q6,t7o,aie,a7o,EIe,$o,N6,n7o,Li,s7o,yN,l7o,i7o,LN,d7o,c7o,f7o,j6,m7o,nie,g7o,h7o,p7o,tt,D6,u7o,sie,_7o,b7o,xi,v7o,lie,F7o,T7o,xN,M7o,E7o,C7o,k_,w7o,Je,G6,A7o,iie,y7o,L7o,La,x7o,die,$7o,k7o,cie,S7o,R7o,fie,B7o,P7o,I7o,z,S_,mie,q7o,N7o,$N,j7o,D7o,G7o,R_,gie,O7o,V7o,kN,X7o,z7o,Q7o,B_,hie,W7o,H7o,SN,U7o,J7o,Y7o,P_,pie,K7o,Z7o,RN,eMo,oMo,rMo,I_,uie,tMo,aMo,BN,nMo,sMo,lMo,q_,_ie,iMo,dMo,PN,cMo,fMo,mMo,N_,bie,gMo,hMo,IN,pMo,uMo,_Mo,j_,vie,bMo,vMo,qN,FMo,TMo,MMo,D_,Fie,EMo,CMo,NN,wMo,AMo,yMo,G_,Tie,LMo,xMo,jN,$Mo,kMo,SMo,O_,Mie,RMo,BMo,DN,PMo,IMo,qMo,V_,Eie,NMo,jMo,GN,DMo,GMo,OMo,X_,Cie,VMo,XMo,ON,zMo,QMo,WMo,z_,wie,HMo,UMo,VN,JMo,YMo,KMo,Q_,Aie,ZMo,e4o,XN,o4o,r4o,t4o,W_,yie,a4o,n4o,zN,s4o,l4o,i4o,H_,Lie,d4o,c4o,QN,f4o,m4o,g4o,U_,xie,h4o,p4o,WN,u4o,_4o,b4o,J_,$ie,v4o,F4o,HN,T4o,M4o,E4o,Y_,kie,C4o,w4o,UN,A4o,y4o,L4o,K_,Sie,x4o,$4o,JN,k4o,S4o,R4o,Z_,Rie,B4o,P4o,YN,I4o,q4o,N4o,e2,Bie,j4o,D4o,KN,G4o,O4o,V4o,o2,Pie,X4o,z4o,ZN,Q4o,W4o,H4o,r2,Iie,U4o,J4o,ej,Y4o,K4o,Z4o,t2,qie,eEo,oEo,oj,rEo,tEo,aEo,a2,Nie,nEo,sEo,rj,lEo,iEo,dEo,n2,jie,cEo,fEo,tj,mEo,gEo,hEo,s2,Die,pEo,uEo,aj,_Eo,bEo,vEo,l2,Gie,FEo,TEo,nj,MEo,EEo,CEo,i2,Oie,wEo,AEo,sj,yEo,LEo,xEo,d2,Vie,$Eo,kEo,lj,SEo,REo,BEo,c2,Xie,PEo,IEo,ij,qEo,NEo,jEo,f2,zie,DEo,GEo,dj,OEo,VEo,XEo,m2,Qie,zEo,QEo,cj,WEo,HEo,UEo,g2,Wie,JEo,YEo,fj,KEo,ZEo,eCo,h2,oCo,Hie,rCo,tCo,Uie,aCo,nCo,p2,CIe,$i,u2,Jie,O6,sCo,Yie,lCo,wIe,ko,V6,iCo,ki,dCo,mj,cCo,fCo,gj,mCo,gCo,hCo,X6,pCo,Kie,uCo,_Co,bCo,at,z6,vCo,Zie,FCo,TCo,Si,MCo,ede,ECo,CCo,hj,wCo,ACo,yCo,_2,LCo,Ye,Q6,xCo,ode,$Co,kCo,xa,SCo,rde,RCo,BCo,tde,PCo,ICo,ade,qCo,NCo,jCo,Q,b2,nde,DCo,GCo,pj,OCo,VCo,XCo,v2,sde,zCo,QCo,uj,WCo,HCo,UCo,F2,lde,JCo,YCo,_j,KCo,ZCo,e3o,T2,ide,o3o,r3o,bj,t3o,a3o,n3o,M2,dde,s3o,l3o,vj,i3o,d3o,c3o,E2,cde,f3o,m3o,Fj,g3o,h3o,p3o,C2,fde,u3o,_3o,Tj,b3o,v3o,F3o,w2,mde,T3o,M3o,Mj,E3o,C3o,w3o,A2,gde,A3o,y3o,Ej,L3o,x3o,$3o,y2,hde,k3o,S3o,Cj,R3o,B3o,P3o,L2,pde,I3o,q3o,wj,N3o,j3o,D3o,x2,ude,G3o,O3o,Aj,V3o,X3o,z3o,$2,_de,Q3o,W3o,yj,H3o,U3o,J3o,k2,bde,Y3o,K3o,Lj,Z3o,ewo,owo,S2,vde,rwo,two,xj,awo,nwo,swo,R2,Fde,lwo,iwo,$j,dwo,cwo,fwo,B2,Tde,mwo,gwo,kj,hwo,pwo,uwo,P2,Mde,_wo,bwo,Sj,vwo,Fwo,Two,I2,Ede,Mwo,Ewo,Rj,Cwo,wwo,Awo,q2,Cde,ywo,Lwo,Bj,xwo,$wo,kwo,N2,wde,Swo,Rwo,Pj,Bwo,Pwo,Iwo,j2,Ade,qwo,Nwo,Ij,jwo,Dwo,Gwo,D2,yde,Owo,Vwo,qj,Xwo,zwo,Qwo,G2,Lde,Wwo,Hwo,Nj,Uwo,Jwo,Ywo,O2,xde,Kwo,Zwo,jj,eAo,oAo,rAo,V2,$de,tAo,aAo,Dj,nAo,sAo,lAo,X2,kde,iAo,dAo,Gj,cAo,fAo,mAo,z2,Sde,gAo,hAo,Oj,pAo,uAo,_Ao,Q2,Rde,bAo,vAo,Vj,FAo,TAo,MAo,W2,Bde,EAo,CAo,Xj,wAo,AAo,yAo,H2,Pde,LAo,xAo,Ide,$Ao,kAo,SAo,U2,qde,RAo,BAo,zj,PAo,IAo,qAo,J2,Nde,NAo,jAo,Qj,DAo,GAo,OAo,Y2,jde,VAo,XAo,Wj,zAo,QAo,WAo,K2,Dde,HAo,UAo,Hj,JAo,YAo,KAo,Z2,ZAo,Gde,e6o,o6o,Ode,r6o,t6o,e1,AIe,Ri,o1,Vde,W6,a6o,Xde,n6o,yIe,So,H6,s6o,Bi,l6o,Uj,i6o,d6o,Jj,c6o,f6o,m6o,U6,g6o,zde,h6o,p6o,u6o,nt,J6,_6o,Qde,b6o,v6o,Pi,F6o,Wde,T6o,M6o,Yj,E6o,C6o,w6o,r1,A6o,Ke,Y6,y6o,Hde,L6o,x6o,$a,$6o,Ude,k6o,S6o,Jde,R6o,B6o,Yde,P6o,I6o,q6o,he,t1,Kde,N6o,j6o,Kj,D6o,G6o,O6o,a1,Zde,V6o,X6o,Zj,z6o,Q6o,W6o,n1,ece,H6o,U6o,eD,J6o,Y6o,K6o,s1,oce,Z6o,eyo,oD,oyo,ryo,tyo,l1,rce,ayo,nyo,rD,syo,lyo,iyo,i1,tce,dyo,cyo,tD,fyo,myo,gyo,d1,ace,hyo,pyo,aD,uyo,_yo,byo,c1,nce,vyo,Fyo,nD,Tyo,Myo,Eyo,f1,sce,Cyo,wyo,sD,Ayo,yyo,Lyo,m1,lce,xyo,$yo,lD,kyo,Syo,Ryo,g1,ice,Byo,Pyo,iD,Iyo,qyo,Nyo,h1,dce,jyo,Dyo,dD,Gyo,Oyo,Vyo,p1,cce,Xyo,zyo,cD,Qyo,Wyo,Hyo,u1,fce,Uyo,Jyo,fD,Yyo,Kyo,Zyo,_1,mce,eLo,oLo,mD,rLo,tLo,aLo,b1,gce,nLo,sLo,gD,lLo,iLo,dLo,v1,hce,cLo,fLo,hD,mLo,gLo,hLo,F1,pLo,pce,uLo,_Lo,uce,bLo,vLo,T1,LIe,Ii,M1,_ce,K6,FLo,bce,TLo,xIe,Ro,Z6,MLo,qi,ELo,pD,CLo,wLo,uD,ALo,yLo,LLo,ey,xLo,vce,$Lo,kLo,SLo,st,oy,RLo,Fce,BLo,PLo,Ni,ILo,Tce,qLo,NLo,_D,jLo,DLo,GLo,E1,OLo,Ze,ry,VLo,Mce,XLo,zLo,ka,QLo,Ece,WLo,HLo,Cce,ULo,JLo,wce,YLo,KLo,ZLo,q,C1,Ace,e8o,o8o,bD,r8o,t8o,a8o,w1,yce,n8o,s8o,vD,l8o,i8o,d8o,A1,Lce,c8o,f8o,FD,m8o,g8o,h8o,y1,xce,p8o,u8o,TD,_8o,b8o,v8o,L1,$ce,F8o,T8o,MD,M8o,E8o,C8o,x1,kce,w8o,A8o,ED,y8o,L8o,x8o,$1,Sce,$8o,k8o,CD,S8o,R8o,B8o,k1,Rce,P8o,I8o,wD,q8o,N8o,j8o,S1,Bce,D8o,G8o,AD,O8o,V8o,X8o,R1,Pce,z8o,Q8o,yD,W8o,H8o,U8o,B1,Ice,J8o,Y8o,LD,K8o,Z8o,exo,P1,qce,oxo,rxo,xD,txo,axo,nxo,I1,Nce,sxo,lxo,$D,ixo,dxo,cxo,q1,jce,fxo,mxo,kD,gxo,hxo,pxo,N1,Dce,uxo,_xo,SD,bxo,vxo,Fxo,j1,Gce,Txo,Mxo,RD,Exo,Cxo,wxo,D1,Oce,Axo,yxo,BD,Lxo,xxo,$xo,G1,Vce,kxo,Sxo,PD,Rxo,Bxo,Pxo,O1,Xce,Ixo,qxo,ID,Nxo,jxo,Dxo,V1,zce,Gxo,Oxo,qD,Vxo,Xxo,zxo,X1,Qce,Qxo,Wxo,ND,Hxo,Uxo,Jxo,z1,Wce,Yxo,Kxo,jD,Zxo,e9o,o9o,Q1,Hce,r9o,t9o,DD,a9o,n9o,s9o,W1,Uce,l9o,i9o,GD,d9o,c9o,f9o,H1,Jce,m9o,g9o,OD,h9o,p9o,u9o,U1,Yce,_9o,b9o,VD,v9o,F9o,T9o,J1,Kce,M9o,E9o,XD,C9o,w9o,A9o,Y1,Zce,y9o,L9o,zD,x9o,$9o,k9o,K1,efe,S9o,R9o,QD,B9o,P9o,I9o,Z1,ofe,q9o,N9o,WD,j9o,D9o,G9o,eb,rfe,O9o,V9o,HD,X9o,z9o,Q9o,ob,tfe,W9o,H9o,UD,U9o,J9o,Y9o,rb,afe,K9o,Z9o,JD,e$o,o$o,r$o,tb,nfe,t$o,a$o,YD,n$o,s$o,l$o,ab,sfe,i$o,d$o,KD,c$o,f$o,m$o,nb,lfe,g$o,h$o,ZD,p$o,u$o,_$o,sb,ife,b$o,v$o,eG,F$o,T$o,M$o,lb,dfe,E$o,C$o,oG,w$o,A$o,y$o,ib,cfe,L$o,x$o,rG,$$o,k$o,S$o,db,ffe,R$o,B$o,tG,P$o,I$o,q$o,cb,mfe,N$o,j$o,aG,D$o,G$o,O$o,fb,gfe,V$o,X$o,nG,z$o,Q$o,W$o,mb,hfe,H$o,U$o,sG,J$o,Y$o,K$o,gb,pfe,Z$o,eko,lG,oko,rko,tko,hb,ufe,ako,nko,iG,sko,lko,iko,pb,_fe,dko,cko,dG,fko,mko,gko,ub,bfe,hko,pko,cG,uko,_ko,bko,_b,vko,vfe,Fko,Tko,Ffe,Mko,Eko,bb,$Ie,ji,vb,Tfe,ty,Cko,Mfe,wko,kIe,Bo,ay,Ako,Di,yko,fG,Lko,xko,mG,$ko,kko,Sko,ny,Rko,Efe,Bko,Pko,Iko,lt,sy,qko,Cfe,Nko,jko,Gi,Dko,wfe,Gko,Oko,gG,Vko,Xko,zko,Fb,Qko,eo,ly,Wko,Afe,Hko,Uko,Sa,Jko,yfe,Yko,Kko,Lfe,Zko,eSo,xfe,oSo,rSo,tSo,Y,Tb,$fe,aSo,nSo,hG,sSo,lSo,iSo,Mb,kfe,dSo,cSo,pG,fSo,mSo,gSo,Eb,Sfe,hSo,pSo,uG,uSo,_So,bSo,Cb,Rfe,vSo,FSo,_G,TSo,MSo,ESo,wb,Bfe,CSo,wSo,bG,ASo,ySo,LSo,Ab,Pfe,xSo,$So,vG,kSo,SSo,RSo,yb,Ife,BSo,PSo,FG,ISo,qSo,NSo,Lb,qfe,jSo,DSo,TG,GSo,OSo,VSo,xb,Nfe,XSo,zSo,MG,QSo,WSo,HSo,$b,jfe,USo,JSo,EG,YSo,KSo,ZSo,kb,Dfe,eRo,oRo,CG,rRo,tRo,aRo,Sb,Gfe,nRo,sRo,wG,lRo,iRo,dRo,Rb,Ofe,cRo,fRo,AG,mRo,gRo,hRo,Bb,Vfe,pRo,uRo,yG,_Ro,bRo,vRo,Pb,Xfe,FRo,TRo,LG,MRo,ERo,CRo,Ib,zfe,wRo,ARo,xG,yRo,LRo,xRo,qb,Qfe,$Ro,kRo,$G,SRo,RRo,BRo,Nb,Wfe,PRo,IRo,kG,qRo,NRo,jRo,jb,Hfe,DRo,GRo,SG,ORo,VRo,XRo,Db,Ufe,zRo,QRo,RG,WRo,HRo,URo,Gb,Jfe,JRo,YRo,BG,KRo,ZRo,eBo,Ob,Yfe,oBo,rBo,PG,tBo,aBo,nBo,Vb,Kfe,sBo,lBo,IG,iBo,dBo,cBo,Xb,Zfe,fBo,mBo,qG,gBo,hBo,pBo,zb,eme,uBo,_Bo,NG,bBo,vBo,FBo,Qb,ome,TBo,MBo,jG,EBo,CBo,wBo,Wb,rme,ABo,yBo,DG,LBo,xBo,$Bo,Hb,tme,kBo,SBo,GG,RBo,BBo,PBo,Ub,ame,IBo,qBo,OG,NBo,jBo,DBo,Jb,GBo,nme,OBo,VBo,sme,XBo,zBo,Yb,SIe,Oi,Kb,lme,iy,QBo,ime,WBo,RIe,Po,dy,HBo,Vi,UBo,VG,JBo,YBo,XG,KBo,ZBo,ePo,cy,oPo,dme,rPo,tPo,aPo,it,fy,nPo,cme,sPo,lPo,Xi,iPo,fme,dPo,cPo,zG,fPo,mPo,gPo,Zb,hPo,oo,my,pPo,mme,uPo,_Po,Ra,bPo,gme,vPo,FPo,hme,TPo,MPo,pme,EPo,CPo,wPo,Yr,e5,ume,APo,yPo,QG,LPo,xPo,$Po,o5,_me,kPo,SPo,WG,RPo,BPo,PPo,r5,bme,IPo,qPo,HG,NPo,jPo,DPo,t5,vme,GPo,OPo,UG,VPo,XPo,zPo,a5,Fme,QPo,WPo,JG,HPo,UPo,JPo,n5,YPo,Tme,KPo,ZPo,Mme,eIo,oIo,s5,BIe,zi,l5,Eme,gy,rIo,Cme,tIo,PIe,Io,hy,aIo,Qi,nIo,YG,sIo,lIo,KG,iIo,dIo,cIo,py,fIo,wme,mIo,gIo,hIo,dt,uy,pIo,Ame,uIo,_Io,Wi,bIo,yme,vIo,FIo,ZG,TIo,MIo,EIo,i5,CIo,ro,_y,wIo,Lme,AIo,yIo,Ba,LIo,xme,xIo,$Io,$me,kIo,SIo,kme,RIo,BIo,PIo,U,d5,Sme,IIo,qIo,eO,NIo,jIo,DIo,c5,Rme,GIo,OIo,oO,VIo,XIo,zIo,f5,Bme,QIo,WIo,rO,HIo,UIo,JIo,m5,Pme,YIo,KIo,tO,ZIo,eqo,oqo,g5,Ime,rqo,tqo,aO,aqo,nqo,sqo,h5,qme,lqo,iqo,nO,dqo,cqo,fqo,p5,Nme,mqo,gqo,sO,hqo,pqo,uqo,u5,jme,_qo,bqo,lO,vqo,Fqo,Tqo,_5,Dme,Mqo,Eqo,iO,Cqo,wqo,Aqo,b5,Gme,yqo,Lqo,dO,xqo,$qo,kqo,v5,Ome,Sqo,Rqo,cO,Bqo,Pqo,Iqo,F5,Vme,qqo,Nqo,fO,jqo,Dqo,Gqo,T5,Xme,Oqo,Vqo,mO,Xqo,zqo,Qqo,M5,zme,Wqo,Hqo,gO,Uqo,Jqo,Yqo,E5,Qme,Kqo,Zqo,hO,eNo,oNo,rNo,C5,Wme,tNo,aNo,pO,nNo,sNo,lNo,w5,Hme,iNo,dNo,uO,cNo,fNo,mNo,A5,Ume,gNo,hNo,_O,pNo,uNo,_No,y5,Jme,bNo,vNo,bO,FNo,TNo,MNo,L5,Yme,ENo,CNo,vO,wNo,ANo,yNo,x5,Kme,LNo,xNo,FO,$No,kNo,SNo,$5,Zme,RNo,BNo,TO,PNo,INo,qNo,k5,ege,NNo,jNo,MO,DNo,GNo,ONo,S5,oge,VNo,XNo,EO,zNo,QNo,WNo,R5,rge,HNo,UNo,CO,JNo,YNo,KNo,B5,tge,ZNo,ejo,wO,ojo,rjo,tjo,P5,age,ajo,njo,AO,sjo,ljo,ijo,I5,nge,djo,cjo,yO,fjo,mjo,gjo,q5,sge,hjo,pjo,LO,ujo,_jo,bjo,N5,lge,vjo,Fjo,xO,Tjo,Mjo,Ejo,j5,ige,Cjo,wjo,$O,Ajo,yjo,Ljo,D5,dge,xjo,$jo,kO,kjo,Sjo,Rjo,G5,cge,Bjo,Pjo,SO,Ijo,qjo,Njo,O5,jjo,fge,Djo,Gjo,mge,Ojo,Vjo,V5,IIe,Hi,X5,gge,by,Xjo,hge,zjo,qIe,qo,vy,Qjo,Ui,Wjo,RO,Hjo,Ujo,BO,Jjo,Yjo,Kjo,Fy,Zjo,pge,eDo,oDo,rDo,ct,Ty,tDo,uge,aDo,nDo,Ji,sDo,_ge,lDo,iDo,PO,dDo,cDo,fDo,z5,mDo,to,My,gDo,bge,hDo,pDo,Pa,uDo,vge,_Do,bDo,Fge,vDo,FDo,Tge,TDo,MDo,EDo,O,Q5,Mge,CDo,wDo,IO,ADo,yDo,LDo,W5,Ege,xDo,$Do,qO,kDo,SDo,RDo,H5,Cge,BDo,PDo,NO,IDo,qDo,NDo,U5,wge,jDo,DDo,jO,GDo,ODo,VDo,J5,Age,XDo,zDo,DO,QDo,WDo,HDo,Y5,yge,UDo,JDo,GO,YDo,KDo,ZDo,K5,Lge,eGo,oGo,OO,rGo,tGo,aGo,Z5,xge,nGo,sGo,VO,lGo,iGo,dGo,ev,$ge,cGo,fGo,XO,mGo,gGo,hGo,ov,kge,pGo,uGo,zO,_Go,bGo,vGo,rv,Sge,FGo,TGo,QO,MGo,EGo,CGo,tv,Rge,wGo,AGo,WO,yGo,LGo,xGo,av,Bge,$Go,kGo,HO,SGo,RGo,BGo,nv,Pge,PGo,IGo,UO,qGo,NGo,jGo,sv,Ige,DGo,GGo,JO,OGo,VGo,XGo,lv,qge,zGo,QGo,YO,WGo,HGo,UGo,iv,Nge,JGo,YGo,KO,KGo,ZGo,eOo,dv,jge,oOo,rOo,ZO,tOo,aOo,nOo,cv,Dge,sOo,lOo,eV,iOo,dOo,cOo,fv,Gge,fOo,mOo,oV,gOo,hOo,pOo,mv,Oge,uOo,_Oo,rV,bOo,vOo,FOo,gv,Vge,TOo,MOo,tV,EOo,COo,wOo,hv,Xge,AOo,yOo,aV,LOo,xOo,$Oo,pv,zge,kOo,SOo,nV,ROo,BOo,POo,uv,Qge,IOo,qOo,sV,NOo,jOo,DOo,_v,Wge,GOo,OOo,lV,VOo,XOo,zOo,bv,Hge,QOo,WOo,iV,HOo,UOo,JOo,vv,Uge,YOo,KOo,dV,ZOo,eVo,oVo,Fv,Jge,rVo,tVo,cV,aVo,nVo,sVo,Tv,Yge,lVo,iVo,fV,dVo,cVo,fVo,Mv,Kge,mVo,gVo,mV,hVo,pVo,uVo,Ev,Zge,_Vo,bVo,gV,vVo,FVo,TVo,Cv,ehe,MVo,EVo,hV,CVo,wVo,AVo,wv,ohe,yVo,LVo,pV,xVo,$Vo,kVo,Av,rhe,SVo,RVo,uV,BVo,PVo,IVo,yv,the,qVo,NVo,_V,jVo,DVo,GVo,Lv,ahe,OVo,VVo,bV,XVo,zVo,QVo,xv,nhe,WVo,HVo,vV,UVo,JVo,YVo,$v,she,KVo,ZVo,FV,eXo,oXo,rXo,kv,tXo,lhe,aXo,nXo,ihe,sXo,lXo,Sv,NIe,Yi,Rv,dhe,Ey,iXo,che,dXo,jIe,No,Cy,cXo,Ki,fXo,TV,mXo,gXo,MV,hXo,pXo,uXo,wy,_Xo,fhe,bXo,vXo,FXo,ft,Ay,TXo,mhe,MXo,EXo,Zi,CXo,ghe,wXo,AXo,EV,yXo,LXo,xXo,Bv,$Xo,ao,yy,kXo,hhe,SXo,RXo,Ia,BXo,phe,PXo,IXo,uhe,qXo,NXo,_he,jXo,DXo,GXo,bhe,Pv,vhe,OXo,VXo,CV,XXo,zXo,QXo,Iv,WXo,Fhe,HXo,UXo,The,JXo,YXo,qv,DIe,ed,Nv,Mhe,Ly,KXo,Ehe,ZXo,GIe,jo,xy,ezo,od,ozo,wV,rzo,tzo,AV,azo,nzo,szo,$y,lzo,Che,izo,dzo,czo,mt,ky,fzo,whe,mzo,gzo,rd,hzo,Ahe,pzo,uzo,yV,_zo,bzo,vzo,jv,Fzo,no,Sy,Tzo,yhe,Mzo,Ezo,qa,Czo,Lhe,wzo,Azo,xhe,yzo,Lzo,$he,xzo,$zo,kzo,ve,Dv,khe,Szo,Rzo,LV,Bzo,Pzo,Izo,Gv,She,qzo,Nzo,xV,jzo,Dzo,Gzo,Ov,Rhe,Ozo,Vzo,$V,Xzo,zzo,Qzo,Rs,Bhe,Wzo,Hzo,kV,Uzo,Jzo,SV,Yzo,Kzo,Zzo,Vv,Phe,eQo,oQo,RV,rQo,tQo,aQo,Xv,Ihe,nQo,sQo,BV,lQo,iQo,dQo,gt,qhe,cQo,fQo,PV,mQo,gQo,IV,hQo,pQo,qV,uQo,_Qo,bQo,zv,Nhe,vQo,FQo,NV,TQo,MQo,EQo,Qv,jhe,CQo,wQo,jV,AQo,yQo,LQo,Wv,Dhe,xQo,$Qo,DV,kQo,SQo,RQo,Hv,Ghe,BQo,PQo,GV,IQo,qQo,NQo,Uv,Ohe,jQo,DQo,OV,GQo,OQo,VQo,Jv,Vhe,XQo,zQo,VV,QQo,WQo,HQo,Yv,Xhe,UQo,JQo,XV,YQo,KQo,ZQo,Kv,eWo,zhe,oWo,rWo,Qhe,tWo,aWo,Zv,OIe,td,eF,Whe,Ry,nWo,Hhe,sWo,VIe,Do,By,lWo,ad,iWo,zV,dWo,cWo,QV,fWo,mWo,gWo,Py,hWo,Uhe,pWo,uWo,_Wo,ht,Iy,bWo,Jhe,vWo,FWo,nd,TWo,Yhe,MWo,EWo,WV,CWo,wWo,AWo,oF,yWo,so,qy,LWo,Khe,xWo,$Wo,Na,kWo,Zhe,SWo,RWo,epe,BWo,PWo,ope,IWo,qWo,NWo,rpe,rF,tpe,jWo,DWo,HV,GWo,OWo,VWo,tF,XWo,ape,zWo,QWo,npe,WWo,HWo,aF,XIe,sd,nF,spe,Ny,UWo,lpe,JWo,zIe,Go,jy,YWo,ld,KWo,UV,ZWo,eHo,JV,oHo,rHo,tHo,Dy,aHo,ipe,nHo,sHo,lHo,pt,Gy,iHo,dpe,dHo,cHo,id,fHo,cpe,mHo,gHo,YV,hHo,pHo,uHo,sF,_Ho,lo,Oy,bHo,fpe,vHo,FHo,ja,THo,mpe,MHo,EHo,gpe,CHo,wHo,hpe,AHo,yHo,LHo,Ne,lF,ppe,xHo,$Ho,KV,kHo,SHo,RHo,iF,upe,BHo,PHo,ZV,IHo,qHo,NHo,dF,_pe,jHo,DHo,eX,GHo,OHo,VHo,cF,bpe,XHo,zHo,oX,QHo,WHo,HHo,fF,vpe,UHo,JHo,rX,YHo,KHo,ZHo,mF,Fpe,eUo,oUo,tX,rUo,tUo,aUo,gF,Tpe,nUo,sUo,aX,lUo,iUo,dUo,hF,Mpe,cUo,fUo,nX,mUo,gUo,hUo,pF,pUo,Epe,uUo,_Uo,Cpe,bUo,vUo,uF,QIe,dd,_F,wpe,Vy,FUo,Ape,TUo,WIe,Oo,Xy,MUo,cd,EUo,sX,CUo,wUo,lX,AUo,yUo,LUo,zy,xUo,ype,$Uo,kUo,SUo,ut,Qy,RUo,Lpe,BUo,PUo,fd,IUo,xpe,qUo,NUo,iX,jUo,DUo,GUo,bF,OUo,io,Wy,VUo,$pe,XUo,zUo,Da,QUo,kpe,WUo,HUo,Spe,UUo,JUo,Rpe,YUo,KUo,ZUo,Ga,vF,Bpe,eJo,oJo,dX,rJo,tJo,aJo,FF,Ppe,nJo,sJo,cX,lJo,iJo,dJo,TF,Ipe,cJo,fJo,fX,mJo,gJo,hJo,MF,qpe,pJo,uJo,mX,_Jo,bJo,vJo,EF,FJo,Npe,TJo,MJo,jpe,EJo,CJo,CF,HIe,md,wF,Dpe,Hy,wJo,Gpe,AJo,UIe,Vo,Uy,yJo,gd,LJo,gX,xJo,$Jo,hX,kJo,SJo,RJo,Jy,BJo,Ope,PJo,IJo,qJo,_t,Yy,NJo,Vpe,jJo,DJo,hd,GJo,Xpe,OJo,VJo,pX,XJo,zJo,QJo,AF,WJo,co,Ky,HJo,zpe,UJo,JJo,Oa,YJo,Qpe,KJo,ZJo,Wpe,eYo,oYo,Hpe,rYo,tYo,aYo,je,yF,Upe,nYo,sYo,uX,lYo,iYo,dYo,LF,Jpe,cYo,fYo,_X,mYo,gYo,hYo,xF,Ype,pYo,uYo,bX,_Yo,bYo,vYo,$F,Kpe,FYo,TYo,vX,MYo,EYo,CYo,kF,Zpe,wYo,AYo,FX,yYo,LYo,xYo,SF,eue,$Yo,kYo,TX,SYo,RYo,BYo,RF,oue,PYo,IYo,MX,qYo,NYo,jYo,BF,rue,DYo,GYo,EX,OYo,VYo,XYo,PF,zYo,tue,QYo,WYo,aue,HYo,UYo,IF,JIe,pd,qF,nue,Zy,JYo,sue,YYo,YIe,Xo,eL,KYo,ud,ZYo,CX,eKo,oKo,wX,rKo,tKo,aKo,oL,nKo,lue,sKo,lKo,iKo,bt,rL,dKo,iue,cKo,fKo,_d,mKo,due,gKo,hKo,AX,pKo,uKo,_Ko,NF,bKo,fo,tL,vKo,cue,FKo,TKo,Va,MKo,fue,EKo,CKo,mue,wKo,AKo,gue,yKo,LKo,xKo,aL,jF,hue,$Ko,kKo,yX,SKo,RKo,BKo,DF,pue,PKo,IKo,LX,qKo,NKo,jKo,GF,DKo,uue,GKo,OKo,_ue,VKo,XKo,OF,KIe,bd,VF,bue,nL,zKo,vue,QKo,ZIe,zo,sL,WKo,vd,HKo,xX,UKo,JKo,$X,YKo,KKo,ZKo,lL,eZo,Fue,oZo,rZo,tZo,vt,iL,aZo,Tue,nZo,sZo,Fd,lZo,Mue,iZo,dZo,kX,cZo,fZo,mZo,XF,gZo,mo,dL,hZo,Eue,pZo,uZo,Xa,_Zo,Cue,bZo,vZo,wue,FZo,TZo,Aue,MZo,EZo,CZo,za,zF,yue,wZo,AZo,SX,yZo,LZo,xZo,QF,Lue,$Zo,kZo,RX,SZo,RZo,BZo,WF,xue,PZo,IZo,BX,qZo,NZo,jZo,HF,$ue,DZo,GZo,PX,OZo,VZo,XZo,UF,zZo,kue,QZo,WZo,Sue,HZo,UZo,JF,eqe,Td,YF,Rue,cL,JZo,Bue,YZo,oqe,Qo,fL,KZo,Md,ZZo,IX,eer,oer,qX,rer,ter,aer,mL,ner,Pue,ser,ler,ier,Ft,gL,der,Iue,cer,fer,Ed,mer,que,ger,her,NX,per,uer,_er,KF,ber,go,hL,ver,Nue,Fer,Ter,Qa,Mer,jue,Eer,Cer,Due,wer,Aer,Gue,yer,Ler,xer,Cd,ZF,Oue,$er,ker,jX,Ser,Rer,Ber,e0,Vue,Per,Ier,DX,qer,Ner,jer,o0,Xue,Der,Ger,GX,Oer,Ver,Xer,r0,zer,zue,Qer,Wer,Que,Her,Uer,t0,rqe,wd,a0,Wue,pL,Jer,Hue,Yer,tqe,Wo,uL,Ker,Ad,Zer,OX,eor,oor,VX,ror,tor,aor,_L,nor,Uue,sor,lor,ior,Tt,bL,dor,Jue,cor,mor,yd,gor,Yue,hor,por,XX,uor,_or,bor,n0,vor,ho,vL,For,Kue,Tor,Mor,Wa,Eor,Zue,Cor,wor,e_e,Aor,yor,o_e,Lor,xor,$or,FL,s0,r_e,kor,Sor,zX,Ror,Bor,Por,l0,t_e,Ior,qor,QX,Nor,jor,Dor,i0,Gor,a_e,Oor,Vor,n_e,Xor,zor,d0,aqe,Ld,c0,s_e,TL,Qor,l_e,Wor,nqe,Ho,ML,Hor,xd,Uor,WX,Jor,Yor,HX,Kor,Zor,err,EL,orr,i_e,rrr,trr,arr,Mt,CL,nrr,d_e,srr,lrr,$d,irr,c_e,drr,crr,UX,frr,mrr,grr,f0,hrr,po,wL,prr,f_e,urr,_rr,Ha,brr,m_e,vrr,Frr,g_e,Trr,Mrr,h_e,Err,Crr,wrr,p_e,m0,u_e,Arr,yrr,JX,Lrr,xrr,$rr,g0,krr,__e,Srr,Rrr,b_e,Brr,Prr,h0,sqe,kd,p0,v_e,AL,Irr,F_e,qrr,lqe,Uo,yL,Nrr,Sd,jrr,YX,Drr,Grr,KX,Orr,Vrr,Xrr,LL,zrr,T_e,Qrr,Wrr,Hrr,Et,xL,Urr,M_e,Jrr,Yrr,Rd,Krr,E_e,Zrr,etr,ZX,otr,rtr,ttr,u0,atr,uo,$L,ntr,C_e,str,ltr,Ua,itr,w_e,dtr,ctr,A_e,ftr,mtr,y_e,gtr,htr,ptr,Ja,_0,L_e,utr,_tr,ez,btr,vtr,Ftr,b0,x_e,Ttr,Mtr,oz,Etr,Ctr,wtr,v0,$_e,Atr,ytr,rz,Ltr,xtr,$tr,F0,k_e,ktr,Str,tz,Rtr,Btr,Ptr,T0,Itr,S_e,qtr,Ntr,R_e,jtr,Dtr,M0,iqe,Bd,E0,B_e,kL,Gtr,P_e,Otr,dqe,Jo,SL,Vtr,Pd,Xtr,az,ztr,Qtr,nz,Wtr,Htr,Utr,RL,Jtr,I_e,Ytr,Ktr,Ztr,Ct,BL,ear,q_e,oar,rar,Id,tar,N_e,aar,nar,sz,sar,lar,iar,C0,dar,_o,PL,car,j_e,far,mar,Ya,gar,D_e,har,par,G_e,uar,_ar,O_e,bar,Far,Tar,V_e,w0,X_e,Mar,Ear,lz,Car,war,Aar,A0,yar,z_e,Lar,xar,Q_e,$ar,kar,y0,cqe,qd,L0,W_e,IL,Sar,H_e,Rar,fqe,Yo,qL,Bar,Nd,Par,iz,Iar,qar,dz,Nar,jar,Dar,NL,Gar,U_e,Oar,Var,Xar,wt,jL,zar,J_e,Qar,War,jd,Har,Y_e,Uar,Jar,cz,Yar,Kar,Zar,x0,enr,wr,DL,onr,K_e,rnr,tnr,Ka,anr,Z_e,nnr,snr,e2e,lnr,inr,o2e,dnr,cnr,fnr,j,$0,r2e,mnr,gnr,fz,hnr,pnr,unr,k0,t2e,_nr,bnr,mz,vnr,Fnr,Tnr,S0,a2e,Mnr,Enr,gz,Cnr,wnr,Anr,R0,n2e,ynr,Lnr,hz,xnr,$nr,knr,B0,s2e,Snr,Rnr,pz,Bnr,Pnr,Inr,P0,l2e,qnr,Nnr,uz,jnr,Dnr,Gnr,I0,i2e,Onr,Vnr,_z,Xnr,znr,Qnr,q0,d2e,Wnr,Hnr,bz,Unr,Jnr,Ynr,N0,c2e,Knr,Znr,vz,esr,osr,rsr,j0,f2e,tsr,asr,Fz,nsr,ssr,lsr,D0,m2e,isr,dsr,Tz,csr,fsr,msr,G0,g2e,gsr,hsr,Mz,psr,usr,_sr,O0,h2e,bsr,vsr,Ez,Fsr,Tsr,Msr,V0,p2e,Esr,Csr,Cz,wsr,Asr,ysr,X0,u2e,Lsr,xsr,wz,$sr,ksr,Ssr,z0,_2e,Rsr,Bsr,Az,Psr,Isr,qsr,Q0,b2e,Nsr,jsr,yz,Dsr,Gsr,Osr,Bs,v2e,Vsr,Xsr,Lz,zsr,Qsr,xz,Wsr,Hsr,Usr,W0,F2e,Jsr,Ysr,$z,Ksr,Zsr,elr,H0,T2e,olr,rlr,kz,tlr,alr,nlr,U0,M2e,slr,llr,Sz,ilr,dlr,clr,J0,E2e,flr,mlr,Rz,glr,hlr,plr,Y0,C2e,ulr,_lr,Bz,blr,vlr,Flr,K0,w2e,Tlr,Mlr,Pz,Elr,Clr,wlr,Z0,A2e,Alr,ylr,Iz,Llr,xlr,$lr,eT,y2e,klr,Slr,qz,Rlr,Blr,Plr,oT,L2e,Ilr,qlr,Nz,Nlr,jlr,Dlr,rT,x2e,Glr,Olr,jz,Vlr,Xlr,zlr,tT,$2e,Qlr,Wlr,Dz,Hlr,Ulr,Jlr,aT,k2e,Ylr,Klr,Gz,Zlr,eir,oir,nT,S2e,rir,tir,Oz,air,nir,sir,sT,R2e,lir,iir,Vz,dir,cir,fir,lT,B2e,mir,gir,Xz,hir,pir,uir,iT,P2e,_ir,bir,zz,vir,Fir,Tir,dT,I2e,Mir,Eir,Qz,Cir,wir,Air,cT,q2e,yir,Lir,Wz,xir,$ir,kir,fT,N2e,Sir,Rir,Hz,Bir,Pir,Iir,mT,j2e,qir,Nir,Uz,jir,Dir,Gir,gT,D2e,Oir,Vir,Jz,Xir,zir,Qir,hT,G2e,Wir,Hir,Yz,Uir,Jir,Yir,pT,O2e,Kir,Zir,Kz,edr,odr,rdr,uT,V2e,tdr,adr,Zz,ndr,sdr,ldr,_T,X2e,idr,ddr,eQ,cdr,fdr,mdr,bT,z2e,gdr,hdr,oQ,pdr,udr,_dr,vT,Q2e,bdr,vdr,rQ,Fdr,Tdr,Mdr,FT,mqe,Dd,TT,W2e,GL,Edr,H2e,Cdr,gqe,Ko,OL,wdr,Gd,Adr,tQ,ydr,Ldr,aQ,xdr,$dr,kdr,VL,Sdr,U2e,Rdr,Bdr,Pdr,At,XL,Idr,J2e,qdr,Ndr,Od,jdr,Y2e,Ddr,Gdr,nQ,Odr,Vdr,Xdr,MT,zdr,Ar,zL,Qdr,K2e,Wdr,Hdr,Za,Udr,Z2e,Jdr,Ydr,e1e,Kdr,Zdr,o1e,ecr,ocr,rcr,se,ET,r1e,tcr,acr,sQ,ncr,scr,lcr,CT,t1e,icr,dcr,lQ,ccr,fcr,mcr,wT,a1e,gcr,hcr,iQ,pcr,ucr,_cr,AT,n1e,bcr,vcr,dQ,Fcr,Tcr,Mcr,yT,s1e,Ecr,Ccr,cQ,wcr,Acr,ycr,LT,l1e,Lcr,xcr,fQ,$cr,kcr,Scr,xT,i1e,Rcr,Bcr,mQ,Pcr,Icr,qcr,$T,d1e,Ncr,jcr,gQ,Dcr,Gcr,Ocr,kT,c1e,Vcr,Xcr,hQ,zcr,Qcr,Wcr,ST,f1e,Hcr,Ucr,pQ,Jcr,Ycr,Kcr,RT,m1e,Zcr,efr,uQ,ofr,rfr,tfr,BT,g1e,afr,nfr,_Q,sfr,lfr,ifr,PT,h1e,dfr,cfr,bQ,ffr,mfr,gfr,IT,p1e,hfr,pfr,vQ,ufr,_fr,bfr,qT,u1e,vfr,Ffr,FQ,Tfr,Mfr,Efr,NT,_1e,Cfr,wfr,TQ,Afr,yfr,Lfr,jT,b1e,xfr,$fr,MQ,kfr,Sfr,Rfr,DT,v1e,Bfr,Pfr,EQ,Ifr,qfr,Nfr,GT,F1e,jfr,Dfr,CQ,Gfr,Ofr,Vfr,OT,T1e,Xfr,zfr,wQ,Qfr,Wfr,Hfr,VT,M1e,Ufr,Jfr,AQ,Yfr,Kfr,Zfr,XT,E1e,emr,omr,yQ,rmr,tmr,amr,zT,C1e,nmr,smr,LQ,lmr,imr,dmr,QT,hqe,Vd,WT,w1e,QL,cmr,A1e,fmr,pqe,Zo,WL,mmr,Xd,gmr,xQ,hmr,pmr,$Q,umr,_mr,bmr,HL,vmr,y1e,Fmr,Tmr,Mmr,yt,UL,Emr,L1e,Cmr,wmr,zd,Amr,x1e,ymr,Lmr,kQ,xmr,$mr,kmr,HT,Smr,yr,JL,Rmr,$1e,Bmr,Pmr,en,Imr,k1e,qmr,Nmr,S1e,jmr,Dmr,R1e,Gmr,Omr,Vmr,Me,UT,B1e,Xmr,zmr,SQ,Qmr,Wmr,Hmr,JT,P1e,Umr,Jmr,RQ,Ymr,Kmr,Zmr,YT,I1e,egr,ogr,BQ,rgr,tgr,agr,KT,q1e,ngr,sgr,PQ,lgr,igr,dgr,ZT,N1e,cgr,fgr,IQ,mgr,ggr,hgr,e7,j1e,pgr,ugr,qQ,_gr,bgr,vgr,o7,D1e,Fgr,Tgr,NQ,Mgr,Egr,Cgr,r7,G1e,wgr,Agr,jQ,ygr,Lgr,xgr,t7,O1e,$gr,kgr,DQ,Sgr,Rgr,Bgr,a7,V1e,Pgr,Igr,GQ,qgr,Ngr,jgr,n7,X1e,Dgr,Ggr,OQ,Ogr,Vgr,Xgr,s7,z1e,zgr,Qgr,VQ,Wgr,Hgr,Ugr,l7,uqe,Qd,i7,Q1e,YL,Jgr,W1e,Ygr,_qe,er,KL,Kgr,Wd,Zgr,XQ,ehr,ohr,zQ,rhr,thr,ahr,ZL,nhr,H1e,shr,lhr,ihr,Lt,e8,dhr,U1e,chr,fhr,Hd,mhr,J1e,ghr,hhr,QQ,phr,uhr,_hr,d7,bhr,Lr,o8,vhr,Y1e,Fhr,Thr,on,Mhr,K1e,Ehr,Chr,Z1e,whr,Ahr,ebe,yhr,Lhr,xhr,Ud,c7,obe,$hr,khr,WQ,Shr,Rhr,Bhr,f7,rbe,Phr,Ihr,HQ,qhr,Nhr,jhr,m7,tbe,Dhr,Ghr,UQ,Ohr,Vhr,Xhr,g7,bqe,Jd,h7,abe,r8,zhr,nbe,Qhr,vqe,or,t8,Whr,Yd,Hhr,JQ,Uhr,Jhr,YQ,Yhr,Khr,Zhr,a8,epr,sbe,opr,rpr,tpr,xt,n8,apr,lbe,npr,spr,Kd,lpr,ibe,ipr,dpr,KQ,cpr,fpr,mpr,p7,gpr,xr,s8,hpr,dbe,ppr,upr,rn,_pr,cbe,bpr,vpr,fbe,Fpr,Tpr,mbe,Mpr,Epr,Cpr,ie,u7,gbe,wpr,Apr,ZQ,ypr,Lpr,xpr,_7,hbe,$pr,kpr,eW,Spr,Rpr,Bpr,b7,pbe,Ppr,Ipr,oW,qpr,Npr,jpr,v7,ube,Dpr,Gpr,rW,Opr,Vpr,Xpr,F7,_be,zpr,Qpr,tW,Wpr,Hpr,Upr,T7,bbe,Jpr,Ypr,aW,Kpr,Zpr,eur,M7,vbe,our,rur,nW,tur,aur,nur,E7,Fbe,sur,lur,sW,iur,dur,cur,C7,Tbe,fur,mur,lW,gur,hur,pur,w7,Mbe,uur,_ur,iW,bur,vur,Fur,A7,Ebe,Tur,Mur,dW,Eur,Cur,wur,y7,Cbe,Aur,yur,cW,Lur,xur,$ur,L7,wbe,kur,Sur,fW,Rur,Bur,Pur,x7,Abe,Iur,qur,mW,Nur,jur,Dur,$7,ybe,Gur,Our,gW,Vur,Xur,zur,k7,Lbe,Qur,Wur,hW,Hur,Uur,Jur,S7,xbe,Yur,Kur,pW,Zur,e_r,o_r,R7,$be,r_r,t_r,uW,a_r,n_r,s_r,B7,kbe,l_r,i_r,_W,d_r,c_r,f_r,P7,Sbe,m_r,g_r,bW,h_r,p_r,u_r,I7,Fqe,Zd,q7,Rbe,l8,__r,Bbe,b_r,Tqe,rr,i8,v_r,ec,F_r,vW,T_r,M_r,FW,E_r,C_r,w_r,d8,A_r,Pbe,y_r,L_r,x_r,$t,c8,$_r,Ibe,k_r,S_r,oc,R_r,qbe,B_r,P_r,TW,I_r,q_r,N_r,N7,j_r,$r,f8,D_r,Nbe,G_r,O_r,tn,V_r,jbe,X_r,z_r,Dbe,Q_r,W_r,Gbe,H_r,U_r,J_r,ye,j7,Obe,Y_r,K_r,MW,Z_r,e2r,o2r,D7,Vbe,r2r,t2r,EW,a2r,n2r,s2r,G7,Xbe,l2r,i2r,CW,d2r,c2r,f2r,O7,zbe,m2r,g2r,wW,h2r,p2r,u2r,V7,Qbe,_2r,b2r,AW,v2r,F2r,T2r,X7,Wbe,M2r,E2r,yW,C2r,w2r,A2r,z7,Hbe,y2r,L2r,LW,x2r,$2r,k2r,Q7,Ube,S2r,R2r,xW,B2r,P2r,I2r,W7,Jbe,q2r,N2r,$W,j2r,D2r,G2r,H7,Ybe,O2r,V2r,kW,X2r,z2r,Q2r,U7,Mqe,rc,J7,Kbe,m8,W2r,Zbe,H2r,Eqe,tr,g8,U2r,tc,J2r,SW,Y2r,K2r,RW,Z2r,e1r,o1r,h8,r1r,e5e,t1r,a1r,n1r,kt,p8,s1r,o5e,l1r,i1r,ac,d1r,r5e,c1r,f1r,BW,m1r,g1r,h1r,Y7,p1r,kr,u8,u1r,t5e,_1r,b1r,an,v1r,a5e,F1r,T1r,n5e,M1r,E1r,s5e,C1r,w1r,A1r,ee,K7,l5e,y1r,L1r,PW,x1r,$1r,k1r,Z7,i5e,S1r,R1r,IW,B1r,P1r,I1r,eM,d5e,q1r,N1r,qW,j1r,D1r,G1r,oM,c5e,O1r,V1r,NW,X1r,z1r,Q1r,rM,f5e,W1r,H1r,jW,U1r,J1r,Y1r,tM,m5e,K1r,Z1r,DW,ebr,obr,rbr,aM,g5e,tbr,abr,GW,nbr,sbr,lbr,nM,h5e,ibr,dbr,OW,cbr,fbr,mbr,sM,p5e,gbr,hbr,VW,pbr,ubr,_br,lM,u5e,bbr,vbr,XW,Fbr,Tbr,Mbr,iM,_5e,Ebr,Cbr,zW,wbr,Abr,ybr,dM,b5e,Lbr,xbr,QW,$br,kbr,Sbr,cM,v5e,Rbr,Bbr,WW,Pbr,Ibr,qbr,fM,F5e,Nbr,jbr,HW,Dbr,Gbr,Obr,mM,T5e,Vbr,Xbr,UW,zbr,Qbr,Wbr,gM,M5e,Hbr,Ubr,JW,Jbr,Ybr,Kbr,hM,E5e,Zbr,e5r,YW,o5r,r5r,t5r,pM,C5e,a5r,n5r,KW,s5r,l5r,i5r,uM,w5e,d5r,c5r,ZW,f5r,m5r,g5r,_M,A5e,h5r,p5r,eH,u5r,_5r,b5r,bM,y5e,v5r,F5r,oH,T5r,M5r,E5r,vM,L5e,C5r,w5r,rH,A5r,y5r,L5r,FM,x5e,x5r,$5r,tH,k5r,S5r,R5r,TM,$5e,B5r,P5r,aH,I5r,q5r,N5r,MM,k5e,j5r,D5r,nH,G5r,O5r,V5r,EM,S5e,X5r,z5r,sH,Q5r,W5r,H5r,CM,Cqe,nc,wM,R5e,_8,U5r,B5e,J5r,wqe,ar,b8,Y5r,sc,K5r,lH,Z5r,evr,iH,ovr,rvr,tvr,v8,avr,P5e,nvr,svr,lvr,St,F8,ivr,I5e,dvr,cvr,lc,fvr,q5e,mvr,gvr,dH,hvr,pvr,uvr,AM,_vr,Sr,T8,bvr,N5e,vvr,Fvr,nn,Tvr,j5e,Mvr,Evr,D5e,Cvr,wvr,G5e,Avr,yvr,Lvr,pe,yM,O5e,xvr,$vr,cH,kvr,Svr,Rvr,LM,V5e,Bvr,Pvr,fH,Ivr,qvr,Nvr,xM,X5e,jvr,Dvr,mH,Gvr,Ovr,Vvr,$M,z5e,Xvr,zvr,gH,Qvr,Wvr,Hvr,kM,Q5e,Uvr,Jvr,hH,Yvr,Kvr,Zvr,SM,W5e,eFr,oFr,pH,rFr,tFr,aFr,RM,H5e,nFr,sFr,uH,lFr,iFr,dFr,BM,U5e,cFr,fFr,_H,mFr,gFr,hFr,PM,J5e,pFr,uFr,bH,_Fr,bFr,vFr,IM,Y5e,FFr,TFr,vH,MFr,EFr,CFr,qM,K5e,wFr,AFr,FH,yFr,LFr,xFr,NM,Z5e,$Fr,kFr,TH,SFr,RFr,BFr,jM,eve,PFr,IFr,MH,qFr,NFr,jFr,DM,ove,DFr,GFr,EH,OFr,VFr,XFr,GM,rve,zFr,QFr,CH,WFr,HFr,UFr,OM,tve,JFr,YFr,wH,KFr,ZFr,e0r,VM,ave,o0r,r0r,AH,t0r,a0r,n0r,XM,Aqe,ic,zM,nve,M8,s0r,sve,l0r,yqe,nr,E8,i0r,dc,d0r,yH,c0r,f0r,LH,m0r,g0r,h0r,C8,p0r,lve,u0r,_0r,b0r,Rt,w8,v0r,ive,F0r,T0r,cc,M0r,dve,E0r,C0r,xH,w0r,A0r,y0r,QM,L0r,Rr,A8,x0r,cve,$0r,k0r,sn,S0r,fve,R0r,B0r,mve,P0r,I0r,gve,q0r,N0r,j0r,y8,WM,hve,D0r,G0r,$H,O0r,V0r,X0r,HM,pve,z0r,Q0r,kH,W0r,H0r,U0r,UM,Lqe,fc,JM,uve,L8,J0r,_ve,Y0r,xqe,sr,x8,K0r,mc,Z0r,SH,eTr,oTr,RH,rTr,tTr,aTr,$8,nTr,bve,sTr,lTr,iTr,Bt,k8,dTr,vve,cTr,fTr,gc,mTr,Fve,gTr,hTr,BH,pTr,uTr,_Tr,YM,bTr,Br,S8,vTr,Tve,FTr,TTr,ln,MTr,Mve,ETr,CTr,Eve,wTr,ATr,Cve,yTr,LTr,xTr,wve,KM,Ave,$Tr,kTr,PH,STr,RTr,BTr,ZM,$qe,hc,e4,yve,R8,PTr,Lve,ITr,kqe,lr,B8,qTr,pc,NTr,IH,jTr,DTr,qH,GTr,OTr,VTr,P8,XTr,xve,zTr,QTr,WTr,Pt,I8,HTr,$ve,UTr,JTr,uc,YTr,kve,KTr,ZTr,NH,e7r,o7r,r7r,o4,t7r,Pr,q8,a7r,Sve,n7r,s7r,dn,l7r,Rve,i7r,d7r,Bve,c7r,f7r,Pve,m7r,g7r,h7r,de,r4,Ive,p7r,u7r,jH,_7r,b7r,v7r,t4,qve,F7r,T7r,DH,M7r,E7r,C7r,a4,Nve,w7r,A7r,GH,y7r,L7r,x7r,n4,jve,$7r,k7r,OH,S7r,R7r,B7r,s4,Dve,P7r,I7r,VH,q7r,N7r,j7r,l4,Gve,D7r,G7r,XH,O7r,V7r,X7r,i4,Ove,z7r,Q7r,zH,W7r,H7r,U7r,d4,Vve,J7r,Y7r,QH,K7r,Z7r,eMr,c4,Xve,oMr,rMr,WH,tMr,aMr,nMr,f4,zve,sMr,lMr,HH,iMr,dMr,cMr,m4,Qve,fMr,mMr,UH,gMr,hMr,pMr,g4,Wve,uMr,_Mr,JH,bMr,vMr,FMr,h4,Hve,TMr,MMr,YH,EMr,CMr,wMr,p4,Uve,AMr,yMr,KH,LMr,xMr,$Mr,u4,Jve,kMr,SMr,ZH,RMr,BMr,PMr,_4,Yve,IMr,qMr,eU,NMr,jMr,DMr,b4,Kve,GMr,OMr,oU,VMr,XMr,zMr,v4,Zve,QMr,WMr,rU,HMr,UMr,JMr,F4,eFe,YMr,KMr,tU,ZMr,e4r,o4r,T4,oFe,r4r,t4r,aU,a4r,n4r,s4r,M4,Sqe,_c,E4,rFe,N8,l4r,tFe,i4r,Rqe,ir,j8,d4r,bc,c4r,nU,f4r,m4r,sU,g4r,h4r,p4r,D8,u4r,aFe,_4r,b4r,v4r,It,G8,F4r,nFe,T4r,M4r,vc,E4r,sFe,C4r,w4r,lU,A4r,y4r,L4r,C4,x4r,Ir,O8,$4r,lFe,k4r,S4r,cn,R4r,iFe,B4r,P4r,dFe,I4r,q4r,cFe,N4r,j4r,D4r,ce,w4,fFe,G4r,O4r,iU,V4r,X4r,z4r,A4,mFe,Q4r,W4r,dU,H4r,U4r,J4r,y4,gFe,Y4r,K4r,cU,Z4r,eEr,oEr,L4,hFe,rEr,tEr,fU,aEr,nEr,sEr,x4,pFe,lEr,iEr,mU,dEr,cEr,fEr,$4,uFe,mEr,gEr,gU,hEr,pEr,uEr,k4,_Fe,_Er,bEr,hU,vEr,FEr,TEr,S4,bFe,MEr,EEr,pU,CEr,wEr,AEr,R4,vFe,yEr,LEr,uU,xEr,$Er,kEr,B4,FFe,SEr,REr,_U,BEr,PEr,IEr,P4,TFe,qEr,NEr,bU,jEr,DEr,GEr,I4,MFe,OEr,VEr,vU,XEr,zEr,QEr,q4,EFe,WEr,HEr,FU,UEr,JEr,YEr,N4,CFe,KEr,ZEr,TU,eCr,oCr,rCr,j4,wFe,tCr,aCr,MU,nCr,sCr,lCr,D4,AFe,iCr,dCr,EU,cCr,fCr,mCr,G4,yFe,gCr,hCr,CU,pCr,uCr,_Cr,O4,LFe,bCr,vCr,wU,FCr,TCr,MCr,V4,xFe,ECr,CCr,AU,wCr,ACr,yCr,X4,$Fe,LCr,xCr,yU,$Cr,kCr,SCr,z4,Bqe,Fc,Q4,kFe,V8,RCr,SFe,BCr,Pqe,dr,X8,PCr,Tc,ICr,LU,qCr,NCr,xU,jCr,DCr,GCr,z8,OCr,RFe,VCr,XCr,zCr,qt,Q8,QCr,BFe,WCr,HCr,Mc,UCr,PFe,JCr,YCr,$U,KCr,ZCr,e3r,W4,o3r,qr,W8,r3r,IFe,t3r,a3r,fn,n3r,qFe,s3r,l3r,NFe,i3r,d3r,jFe,c3r,f3r,m3r,DFe,H4,GFe,g3r,h3r,kU,p3r,u3r,_3r,U4,Iqe,Ec,J4,OFe,H8,b3r,VFe,v3r,qqe,cr,U8,F3r,Cc,T3r,SU,M3r,E3r,RU,C3r,w3r,A3r,J8,y3r,XFe,L3r,x3r,$3r,Nt,Y8,k3r,zFe,S3r,R3r,wc,B3r,QFe,P3r,I3r,BU,q3r,N3r,j3r,Y4,D3r,Nr,K8,G3r,WFe,O3r,V3r,mn,X3r,HFe,z3r,Q3r,UFe,W3r,H3r,JFe,U3r,J3r,Y3r,YFe,K4,KFe,K3r,Z3r,PU,ewr,owr,rwr,Z4,Nqe,Ac,eE,ZFe,Z8,twr,e0e,awr,jqe,fr,ex,nwr,yc,swr,IU,lwr,iwr,qU,dwr,cwr,fwr,ox,mwr,o0e,gwr,hwr,pwr,jt,rx,uwr,r0e,_wr,bwr,Lc,vwr,t0e,Fwr,Twr,NU,Mwr,Ewr,Cwr,oE,wwr,jr,tx,Awr,a0e,ywr,Lwr,gn,xwr,n0e,$wr,kwr,s0e,Swr,Rwr,l0e,Bwr,Pwr,Iwr,re,rE,i0e,qwr,Nwr,jU,jwr,Dwr,Gwr,tE,d0e,Owr,Vwr,DU,Xwr,zwr,Qwr,aE,c0e,Wwr,Hwr,GU,Uwr,Jwr,Ywr,nE,f0e,Kwr,Zwr,OU,eAr,oAr,rAr,sE,m0e,tAr,aAr,VU,nAr,sAr,lAr,lE,g0e,iAr,dAr,XU,cAr,fAr,mAr,iE,h0e,gAr,hAr,zU,pAr,uAr,_Ar,dE,p0e,bAr,vAr,QU,FAr,TAr,MAr,cE,u0e,EAr,CAr,WU,wAr,AAr,yAr,fE,_0e,LAr,xAr,HU,$Ar,kAr,SAr,mE,b0e,RAr,BAr,UU,PAr,IAr,qAr,gE,v0e,NAr,jAr,JU,DAr,GAr,OAr,hE,F0e,VAr,XAr,YU,zAr,QAr,WAr,pE,T0e,HAr,UAr,KU,JAr,YAr,KAr,uE,M0e,ZAr,e6r,ZU,o6r,r6r,t6r,_E,E0e,a6r,n6r,eJ,s6r,l6r,i6r,bE,C0e,d6r,c6r,oJ,f6r,m6r,g6r,vE,w0e,h6r,p6r,rJ,u6r,_6r,b6r,FE,A0e,v6r,F6r,tJ,T6r,M6r,E6r,TE,y0e,C6r,w6r,aJ,A6r,y6r,L6r,ME,L0e,x6r,$6r,nJ,k6r,S6r,R6r,EE,x0e,B6r,P6r,sJ,I6r,q6r,N6r,CE,$0e,j6r,D6r,lJ,G6r,O6r,V6r,wE,k0e,X6r,z6r,iJ,Q6r,W6r,H6r,AE,S0e,U6r,J6r,dJ,Y6r,K6r,Z6r,yE,Dqe,xc,LE,R0e,ax,eyr,B0e,oyr,Gqe,mr,nx,ryr,$c,tyr,cJ,ayr,nyr,fJ,syr,lyr,iyr,sx,dyr,P0e,cyr,fyr,myr,Dt,lx,gyr,I0e,hyr,pyr,kc,uyr,q0e,_yr,byr,mJ,vyr,Fyr,Tyr,xE,Myr,Dr,ix,Eyr,N0e,Cyr,wyr,hn,Ayr,j0e,yyr,Lyr,D0e,xyr,$yr,G0e,kyr,Syr,Ryr,ke,$E,O0e,Byr,Pyr,gJ,Iyr,qyr,Nyr,kE,V0e,jyr,Dyr,hJ,Gyr,Oyr,Vyr,SE,X0e,Xyr,zyr,pJ,Qyr,Wyr,Hyr,RE,z0e,Uyr,Jyr,uJ,Yyr,Kyr,Zyr,BE,Q0e,eLr,oLr,_J,rLr,tLr,aLr,PE,W0e,nLr,sLr,bJ,lLr,iLr,dLr,IE,H0e,cLr,fLr,vJ,mLr,gLr,hLr,qE,U0e,pLr,uLr,FJ,_Lr,bLr,vLr,NE,J0e,FLr,TLr,TJ,MLr,ELr,CLr,jE,Oqe,Sc,DE,Y0e,dx,wLr,K0e,ALr,Vqe,gr,cx,yLr,Rc,LLr,MJ,xLr,$Lr,EJ,kLr,SLr,RLr,fx,BLr,Z0e,PLr,ILr,qLr,Gt,mx,NLr,eTe,jLr,DLr,Bc,GLr,oTe,OLr,VLr,CJ,XLr,zLr,QLr,GE,WLr,Gr,gx,HLr,rTe,ULr,JLr,pn,YLr,tTe,KLr,ZLr,aTe,e8r,o8r,nTe,r8r,t8r,a8r,Ee,OE,sTe,n8r,s8r,wJ,l8r,i8r,d8r,VE,lTe,c8r,f8r,AJ,m8r,g8r,h8r,XE,iTe,p8r,u8r,yJ,_8r,b8r,v8r,zE,dTe,F8r,T8r,LJ,M8r,E8r,C8r,QE,cTe,w8r,A8r,xJ,y8r,L8r,x8r,WE,fTe,$8r,k8r,$J,S8r,R8r,B8r,HE,mTe,P8r,I8r,kJ,q8r,N8r,j8r,UE,gTe,D8r,G8r,SJ,O8r,V8r,X8r,JE,hTe,z8r,Q8r,RJ,W8r,H8r,U8r,YE,pTe,J8r,Y8r,BJ,K8r,Z8r,exr,KE,uTe,oxr,rxr,PJ,txr,axr,nxr,ZE,_Te,sxr,lxr,IJ,ixr,dxr,cxr,eC,Xqe,Pc,oC,bTe,hx,fxr,vTe,mxr,zqe,hr,px,gxr,Ic,hxr,qJ,pxr,uxr,NJ,_xr,bxr,vxr,ux,Fxr,FTe,Txr,Mxr,Exr,Ot,_x,Cxr,TTe,wxr,Axr,qc,yxr,MTe,Lxr,xxr,jJ,$xr,kxr,Sxr,rC,Rxr,Or,bx,Bxr,ETe,Pxr,Ixr,un,qxr,CTe,Nxr,jxr,wTe,Dxr,Gxr,ATe,Oxr,Vxr,Xxr,Le,tC,yTe,zxr,Qxr,DJ,Wxr,Hxr,Uxr,aC,LTe,Jxr,Yxr,GJ,Kxr,Zxr,e9r,nC,xTe,o9r,r9r,OJ,t9r,a9r,n9r,sC,$Te,s9r,l9r,VJ,i9r,d9r,c9r,lC,kTe,f9r,m9r,XJ,g9r,h9r,p9r,iC,STe,u9r,_9r,zJ,b9r,v9r,F9r,dC,RTe,T9r,M9r,QJ,E9r,C9r,w9r,cC,BTe,A9r,y9r,WJ,L9r,x9r,$9r,fC,PTe,k9r,S9r,HJ,R9r,B9r,P9r,mC,ITe,I9r,q9r,UJ,N9r,j9r,D9r,gC,Qqe,Nc,hC,qTe,vx,G9r,NTe,O9r,Wqe,pr,Fx,V9r,jc,X9r,JJ,z9r,Q9r,YJ,W9r,H9r,U9r,Tx,J9r,jTe,Y9r,K9r,Z9r,Vt,Mx,e$r,DTe,o$r,r$r,Dc,t$r,GTe,a$r,n$r,KJ,s$r,l$r,i$r,pC,d$r,Vr,Ex,c$r,OTe,f$r,m$r,_n,g$r,VTe,h$r,p$r,XTe,u$r,_$r,zTe,b$r,v$r,F$r,Se,uC,QTe,T$r,M$r,ZJ,E$r,C$r,w$r,_C,WTe,A$r,y$r,eY,L$r,x$r,$$r,bC,HTe,k$r,S$r,oY,R$r,B$r,P$r,vC,UTe,I$r,q$r,rY,N$r,j$r,D$r,FC,JTe,G$r,O$r,tY,V$r,X$r,z$r,TC,YTe,Q$r,W$r,aY,H$r,U$r,J$r,MC,KTe,Y$r,K$r,nY,Z$r,ekr,okr,EC,ZTe,rkr,tkr,sY,akr,nkr,skr,CC,e7e,lkr,ikr,lY,dkr,ckr,fkr,wC,Hqe,Gc,AC,o7e,Cx,mkr,r7e,gkr,Uqe,ur,wx,hkr,Oc,pkr,iY,ukr,_kr,dY,bkr,vkr,Fkr,Ax,Tkr,t7e,Mkr,Ekr,Ckr,Xt,yx,wkr,a7e,Akr,ykr,Vc,Lkr,n7e,xkr,$kr,cY,kkr,Skr,Rkr,yC,Bkr,Xr,Lx,Pkr,s7e,Ikr,qkr,bn,Nkr,l7e,jkr,Dkr,i7e,Gkr,Okr,d7e,Vkr,Xkr,zkr,xe,LC,c7e,Qkr,Wkr,fY,Hkr,Ukr,Jkr,xC,f7e,Ykr,Kkr,mY,Zkr,eSr,oSr,$C,m7e,rSr,tSr,gY,aSr,nSr,sSr,kC,g7e,lSr,iSr,hY,dSr,cSr,fSr,SC,h7e,mSr,gSr,pY,hSr,pSr,uSr,RC,p7e,_Sr,bSr,uY,vSr,FSr,TSr,BC,u7e,MSr,ESr,_Y,CSr,wSr,ASr,PC,_7e,ySr,LSr,bY,xSr,$Sr,kSr,IC,b7e,SSr,RSr,vY,BSr,PSr,ISr,qC,v7e,qSr,NSr,FY,jSr,DSr,GSr,NC,Jqe,Xc,jC,F7e,xx,OSr,T7e,VSr,Yqe,_r,$x,XSr,zc,zSr,TY,QSr,WSr,MY,HSr,USr,JSr,kx,YSr,M7e,KSr,ZSr,eRr,zt,Sx,oRr,E7e,rRr,tRr,Qc,aRr,C7e,nRr,sRr,EY,lRr,iRr,dRr,DC,cRr,zr,Rx,fRr,w7e,mRr,gRr,vn,hRr,A7e,pRr,uRr,y7e,_Rr,bRr,L7e,vRr,FRr,TRr,$e,GC,x7e,MRr,ERr,CY,CRr,wRr,ARr,OC,$7e,yRr,LRr,wY,xRr,$Rr,kRr,VC,k7e,SRr,RRr,AY,BRr,PRr,IRr,XC,S7e,qRr,NRr,yY,jRr,DRr,GRr,zC,R7e,ORr,VRr,LY,XRr,zRr,QRr,QC,B7e,WRr,HRr,xY,URr,JRr,YRr,WC,P7e,KRr,ZRr,$Y,eBr,oBr,rBr,HC,I7e,tBr,aBr,kY,nBr,sBr,lBr,UC,q7e,iBr,dBr,SY,cBr,fBr,mBr,JC,N7e,gBr,hBr,RY,pBr,uBr,_Br,YC,Kqe,Wc,KC,j7e,Bx,bBr,D7e,vBr,Zqe,br,Px,FBr,Hc,TBr,BY,MBr,EBr,PY,CBr,wBr,ABr,Ix,yBr,G7e,LBr,xBr,$Br,Qt,qx,kBr,O7e,SBr,RBr,Uc,BBr,V7e,PBr,IBr,IY,qBr,NBr,jBr,ZC,DBr,Qr,Nx,GBr,X7e,OBr,VBr,Fn,XBr,z7e,zBr,QBr,Q7e,WBr,HBr,W7e,UBr,JBr,YBr,De,e3,H7e,KBr,ZBr,qY,ePr,oPr,rPr,o3,U7e,tPr,aPr,NY,nPr,sPr,lPr,r3,J7e,iPr,dPr,jY,cPr,fPr,mPr,t3,Y7e,gPr,hPr,DY,pPr,uPr,_Pr,a3,K7e,bPr,vPr,GY,FPr,TPr,MPr,n3,Z7e,EPr,CPr,OY,wPr,APr,yPr,s3,eMe,LPr,xPr,VY,$Pr,kPr,SPr,l3,oMe,RPr,BPr,XY,PPr,IPr,qPr,i3,eNe,Jc,d3,rMe,jx,NPr,tMe,jPr,oNe,vr,Dx,DPr,Yc,GPr,zY,OPr,VPr,QY,XPr,zPr,QPr,Gx,WPr,aMe,HPr,UPr,JPr,Wt,Ox,YPr,nMe,KPr,ZPr,Kc,eIr,sMe,oIr,rIr,WY,tIr,aIr,nIr,c3,sIr,Wr,Vx,lIr,lMe,iIr,dIr,Tn,cIr,iMe,fIr,mIr,dMe,gIr,hIr,cMe,pIr,uIr,_Ir,Ge,f3,fMe,bIr,vIr,HY,FIr,TIr,MIr,m3,mMe,EIr,CIr,UY,wIr,AIr,yIr,g3,gMe,LIr,xIr,JY,$Ir,kIr,SIr,h3,hMe,RIr,BIr,YY,PIr,IIr,qIr,p3,pMe,NIr,jIr,KY,DIr,GIr,OIr,u3,uMe,VIr,XIr,ZY,zIr,QIr,WIr,_3,_Me,HIr,UIr,eK,JIr,YIr,KIr,b3,bMe,ZIr,eqr,oK,oqr,rqr,tqr,v3,rNe,Zc,F3,vMe,Xx,aqr,FMe,nqr,tNe,Fr,zx,sqr,ef,lqr,rK,iqr,dqr,tK,cqr,fqr,mqr,Qx,gqr,TMe,hqr,pqr,uqr,Ht,Wx,_qr,MMe,bqr,vqr,of,Fqr,EMe,Tqr,Mqr,aK,Eqr,Cqr,wqr,T3,Aqr,Hr,Hx,yqr,CMe,Lqr,xqr,Mn,$qr,wMe,kqr,Sqr,AMe,Rqr,Bqr,yMe,Pqr,Iqr,qqr,LMe,M3,xMe,Nqr,jqr,nK,Dqr,Gqr,Oqr,E3,aNe,rf,C3,$Me,Ux,Vqr,kMe,Xqr,nNe,Tr,Jx,zqr,tf,Qqr,sK,Wqr,Hqr,lK,Uqr,Jqr,Yqr,Yx,Kqr,SMe,Zqr,eNr,oNr,Ut,Kx,rNr,RMe,tNr,aNr,af,nNr,BMe,sNr,lNr,iK,iNr,dNr,cNr,w3,fNr,Ur,Zx,mNr,PMe,gNr,hNr,En,pNr,IMe,uNr,_Nr,qMe,bNr,vNr,NMe,FNr,TNr,MNr,e9,A3,jMe,ENr,CNr,dK,wNr,ANr,yNr,y3,DMe,LNr,xNr,cK,$Nr,kNr,SNr,L3,sNe,nf,x3,GMe,o9,RNr,OMe,BNr,lNe,Mr,r9,PNr,sf,INr,fK,qNr,NNr,mK,jNr,DNr,GNr,t9,ONr,VMe,VNr,XNr,zNr,Jt,a9,QNr,XMe,WNr,HNr,lf,UNr,zMe,JNr,YNr,gK,KNr,ZNr,ejr,$3,ojr,Jr,n9,rjr,QMe,tjr,ajr,Cn,njr,WMe,sjr,ljr,HMe,ijr,djr,UMe,cjr,fjr,mjr,JMe,k3,YMe,gjr,hjr,hK,pjr,ujr,_jr,S3,iNe;return d=new oe({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),o6=new oe({}),r6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new bjr({props:{warning:!0,$$slots:{default:[ryt]},$$scope:{ctx:L}}}),t6=new oe({}),a6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L572"}}),l6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L595"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),i6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L717"}}),d6=new oe({}),c6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L378"}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17205/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L392"}}),Jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),h6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L588"}}),p6=new oe({}),u6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L179"}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17205/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),wh=new bjr({props:{$$slots:{default:[nyt]},$$scope:{ctx:L}}}),Ah=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),F6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L320"}}),T6=new oe({}),M6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L77"}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L91"}}),Xh=new bjr({props:{$$slots:{default:[lyt]},$$scope:{ctx:L}}}),zh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),A6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L244"}}),y6=new oe({}),L6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L723"}}),$6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Hh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),S6=new oe({}),R6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L730"}}),P6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),q6=new oe({}),N6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L745"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),O6=new oe({}),V6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L752"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),e1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),W6=new oe({}),H6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L759"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),r1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),K6=new oe({}),Z6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L768"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L802"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L809"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),gy=new oe({}),hy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L795"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L777"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L784"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L818"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),Ry=new oe({}),By=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L857"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L864"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L887"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L871"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L878"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L896"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),cL=new oe({}),fL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L903"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),pL=new oe({}),uL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L850"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L825"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L832"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L841"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),QL=new oe({}),WL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),r8=new oe({}),t8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),l8=new oe({}),i8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),m8=new oe({}),g8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),_8=new oe({}),b8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),M8=new oe({}),E8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),R8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),Z8=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Bx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),Ux=new oe({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),YA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),KA=o("AutoConfig"),yn=o(", "),Ln=a("a"),ZA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),e6=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),b$=o("will create a model that is an instance of "),gi=a("a"),v$=o("BertModel"),F$=o("."),Eo=l(),Ea=a("p"),T$=o("There is one class of "),pf=a("code"),M$=o("AutoModel"),uDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nIe=l(),hi=a("h2"),uf=a("a"),iee=a("span"),F(o6.$$.fragment),_De=l(),dee=a("span"),bDe=o("Extending the Auto Classes"),sIe=l(),$n=a("p"),vDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),cee=a("code"),FDe=o("NewModel"),TDe=o(", make sure you have a "),fee=a("code"),MDe=o("NewModelConfig"),EDe=o(` then you can add those to the auto
classes like this:`),lIe=l(),F(r6.$$.fragment),iIe=l(),E$=a("p"),CDe=o("You will then be able to use the auto classes like you would usually do!"),dIe=l(),F(_f.$$.fragment),cIe=l(),pi=a("h2"),bf=a("a"),mee=a("span"),F(t6.$$.fragment),wDe=l(),gee=a("span"),ADe=o("AutoConfig"),fIe=l(),Co=a("div"),F(a6.$$.fragment),yDe=l(),n6=a("p"),LDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C$=a("a"),xDe=o("from_pretrained()"),$De=o(" class method."),kDe=l(),s6=a("p"),SDe=o("This class cannot be instantiated directly using "),hee=a("code"),RDe=o("__init__()"),BDe=o(" (throws an error)."),PDe=l(),Er=a("div"),F(l6.$$.fragment),IDe=l(),pee=a("p"),qDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),NDe=l(),ui=a("p"),jDe=o("The configuration class to instantiate is selected based on the "),uee=a("code"),DDe=o("model_type"),GDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_ee=a("code"),ODe=o("pretrained_model_name_or_path"),VDe=o(":"),XDe=l(),A=a("ul"),vf=a("li"),bee=a("strong"),zDe=o("albert"),QDe=o(" \u2014 "),w$=a("a"),WDe=o("AlbertConfig"),HDe=o(" (ALBERT model)"),UDe=l(),Ff=a("li"),vee=a("strong"),JDe=o("bart"),YDe=o(" \u2014 "),A$=a("a"),KDe=o("BartConfig"),ZDe=o(" (BART model)"),eGe=l(),Tf=a("li"),Fee=a("strong"),oGe=o("beit"),rGe=o(" \u2014 "),y$=a("a"),tGe=o("BeitConfig"),aGe=o(" (BEiT model)"),nGe=l(),Mf=a("li"),Tee=a("strong"),sGe=o("bert"),lGe=o(" \u2014 "),L$=a("a"),iGe=o("BertConfig"),dGe=o(" (BERT model)"),cGe=l(),Ef=a("li"),Mee=a("strong"),fGe=o("bert-generation"),mGe=o(" \u2014 "),x$=a("a"),gGe=o("BertGenerationConfig"),hGe=o(" (Bert Generation model)"),pGe=l(),Cf=a("li"),Eee=a("strong"),uGe=o("big_bird"),_Ge=o(" \u2014 "),$$=a("a"),bGe=o("BigBirdConfig"),vGe=o(" (BigBird model)"),FGe=l(),wf=a("li"),Cee=a("strong"),TGe=o("bigbird_pegasus"),MGe=o(" \u2014 "),k$=a("a"),EGe=o("BigBirdPegasusConfig"),CGe=o(" (BigBirdPegasus model)"),wGe=l(),Af=a("li"),wee=a("strong"),AGe=o("blenderbot"),yGe=o(" \u2014 "),S$=a("a"),LGe=o("BlenderbotConfig"),xGe=o(" (Blenderbot model)"),$Ge=l(),yf=a("li"),Aee=a("strong"),kGe=o("blenderbot-small"),SGe=o(" \u2014 "),R$=a("a"),RGe=o("BlenderbotSmallConfig"),BGe=o(" (BlenderbotSmall model)"),PGe=l(),Lf=a("li"),yee=a("strong"),IGe=o("camembert"),qGe=o(" \u2014 "),B$=a("a"),NGe=o("CamembertConfig"),jGe=o(" (CamemBERT model)"),DGe=l(),xf=a("li"),Lee=a("strong"),GGe=o("canine"),OGe=o(" \u2014 "),P$=a("a"),VGe=o("CanineConfig"),XGe=o(" (Canine model)"),zGe=l(),$f=a("li"),xee=a("strong"),QGe=o("clip"),WGe=o(" \u2014 "),I$=a("a"),HGe=o("CLIPConfig"),UGe=o(" (CLIP model)"),JGe=l(),kf=a("li"),$ee=a("strong"),YGe=o("convbert"),KGe=o(" \u2014 "),q$=a("a"),ZGe=o("ConvBertConfig"),eOe=o(" (ConvBERT model)"),oOe=l(),Sf=a("li"),kee=a("strong"),rOe=o("convnext"),tOe=o(" \u2014 "),N$=a("a"),aOe=o("ConvNextConfig"),nOe=o(" (ConvNext model)"),sOe=l(),Rf=a("li"),See=a("strong"),lOe=o("ctrl"),iOe=o(" \u2014 "),j$=a("a"),dOe=o("CTRLConfig"),cOe=o(" (CTRL model)"),fOe=l(),Bf=a("li"),Ree=a("strong"),mOe=o("data2vec-audio"),gOe=o(" \u2014 "),D$=a("a"),hOe=o("Data2VecAudioConfig"),pOe=o(" (Data2VecAudio model)"),uOe=l(),Pf=a("li"),Bee=a("strong"),_Oe=o("data2vec-text"),bOe=o(" \u2014 "),G$=a("a"),vOe=o("Data2VecTextConfig"),FOe=o(" (Data2VecText model)"),TOe=l(),If=a("li"),Pee=a("strong"),MOe=o("data2vec-vision"),EOe=o(" \u2014 "),O$=a("a"),COe=o("Data2VecVisionConfig"),wOe=o(" (Data2VecVision model)"),AOe=l(),qf=a("li"),Iee=a("strong"),yOe=o("deberta"),LOe=o(" \u2014 "),V$=a("a"),xOe=o("DebertaConfig"),$Oe=o(" (DeBERTa model)"),kOe=l(),Nf=a("li"),qee=a("strong"),SOe=o("deberta-v2"),ROe=o(" \u2014 "),X$=a("a"),BOe=o("DebertaV2Config"),POe=o(" (DeBERTa-v2 model)"),IOe=l(),jf=a("li"),Nee=a("strong"),qOe=o("decision_transformer"),NOe=o(" \u2014 "),z$=a("a"),jOe=o("DecisionTransformerConfig"),DOe=o(" (Decision Transformer model)"),GOe=l(),Df=a("li"),jee=a("strong"),OOe=o("deit"),VOe=o(" \u2014 "),Q$=a("a"),XOe=o("DeiTConfig"),zOe=o(" (DeiT model)"),QOe=l(),Gf=a("li"),Dee=a("strong"),WOe=o("detr"),HOe=o(" \u2014 "),W$=a("a"),UOe=o("DetrConfig"),JOe=o(" (DETR model)"),YOe=l(),Of=a("li"),Gee=a("strong"),KOe=o("distilbert"),ZOe=o(" \u2014 "),H$=a("a"),eVe=o("DistilBertConfig"),oVe=o(" (DistilBERT model)"),rVe=l(),Vf=a("li"),Oee=a("strong"),tVe=o("dpr"),aVe=o(" \u2014 "),U$=a("a"),nVe=o("DPRConfig"),sVe=o(" (DPR model)"),lVe=l(),Xf=a("li"),Vee=a("strong"),iVe=o("dpt"),dVe=o(" \u2014 "),J$=a("a"),cVe=o("DPTConfig"),fVe=o(" (DPT model)"),mVe=l(),zf=a("li"),Xee=a("strong"),gVe=o("electra"),hVe=o(" \u2014 "),Y$=a("a"),pVe=o("ElectraConfig"),uVe=o(" (ELECTRA model)"),_Ve=l(),Qf=a("li"),zee=a("strong"),bVe=o("encoder-decoder"),vVe=o(" \u2014 "),K$=a("a"),FVe=o("EncoderDecoderConfig"),TVe=o(" (Encoder decoder model)"),MVe=l(),Wf=a("li"),Qee=a("strong"),EVe=o("flaubert"),CVe=o(" \u2014 "),Z$=a("a"),wVe=o("FlaubertConfig"),AVe=o(" (FlauBERT model)"),yVe=l(),Hf=a("li"),Wee=a("strong"),LVe=o("flava"),xVe=o(" \u2014 "),ek=a("a"),$Ve=o("FlavaConfig"),kVe=o(" (Flava model)"),SVe=l(),Uf=a("li"),Hee=a("strong"),RVe=o("fnet"),BVe=o(" \u2014 "),ok=a("a"),PVe=o("FNetConfig"),IVe=o(" (FNet model)"),qVe=l(),Jf=a("li"),Uee=a("strong"),NVe=o("fsmt"),jVe=o(" \u2014 "),rk=a("a"),DVe=o("FSMTConfig"),GVe=o(" (FairSeq Machine-Translation model)"),OVe=l(),Yf=a("li"),Jee=a("strong"),VVe=o("funnel"),XVe=o(" \u2014 "),tk=a("a"),zVe=o("FunnelConfig"),QVe=o(" (Funnel Transformer model)"),WVe=l(),Kf=a("li"),Yee=a("strong"),HVe=o("glpn"),UVe=o(" \u2014 "),ak=a("a"),JVe=o("GLPNConfig"),YVe=o(" (GLPN model)"),KVe=l(),Zf=a("li"),Kee=a("strong"),ZVe=o("gpt2"),eXe=o(" \u2014 "),nk=a("a"),oXe=o("GPT2Config"),rXe=o(" (OpenAI GPT-2 model)"),tXe=l(),em=a("li"),Zee=a("strong"),aXe=o("gpt_neo"),nXe=o(" \u2014 "),sk=a("a"),sXe=o("GPTNeoConfig"),lXe=o(" (GPT Neo model)"),iXe=l(),om=a("li"),eoe=a("strong"),dXe=o("gptj"),cXe=o(" \u2014 "),lk=a("a"),fXe=o("GPTJConfig"),mXe=o(" (GPT-J model)"),gXe=l(),rm=a("li"),ooe=a("strong"),hXe=o("hubert"),pXe=o(" \u2014 "),ik=a("a"),uXe=o("HubertConfig"),_Xe=o(" (Hubert model)"),bXe=l(),tm=a("li"),roe=a("strong"),vXe=o("ibert"),FXe=o(" \u2014 "),dk=a("a"),TXe=o("IBertConfig"),MXe=o(" (I-BERT model)"),EXe=l(),am=a("li"),toe=a("strong"),CXe=o("imagegpt"),wXe=o(" \u2014 "),ck=a("a"),AXe=o("ImageGPTConfig"),yXe=o(" (ImageGPT model)"),LXe=l(),nm=a("li"),aoe=a("strong"),xXe=o("layoutlm"),$Xe=o(" \u2014 "),fk=a("a"),kXe=o("LayoutLMConfig"),SXe=o(" (LayoutLM model)"),RXe=l(),sm=a("li"),noe=a("strong"),BXe=o("layoutlmv2"),PXe=o(" \u2014 "),mk=a("a"),IXe=o("LayoutLMv2Config"),qXe=o(" (LayoutLMv2 model)"),NXe=l(),lm=a("li"),soe=a("strong"),jXe=o("led"),DXe=o(" \u2014 "),gk=a("a"),GXe=o("LEDConfig"),OXe=o(" (LED model)"),VXe=l(),im=a("li"),loe=a("strong"),XXe=o("longformer"),zXe=o(" \u2014 "),hk=a("a"),QXe=o("LongformerConfig"),WXe=o(" (Longformer model)"),HXe=l(),dm=a("li"),ioe=a("strong"),UXe=o("luke"),JXe=o(" \u2014 "),pk=a("a"),YXe=o("LukeConfig"),KXe=o(" (LUKE model)"),ZXe=l(),cm=a("li"),doe=a("strong"),eze=o("lxmert"),oze=o(" \u2014 "),uk=a("a"),rze=o("LxmertConfig"),tze=o(" (LXMERT model)"),aze=l(),fm=a("li"),coe=a("strong"),nze=o("m2m_100"),sze=o(" \u2014 "),_k=a("a"),lze=o("M2M100Config"),ize=o(" (M2M100 model)"),dze=l(),mm=a("li"),foe=a("strong"),cze=o("marian"),fze=o(" \u2014 "),bk=a("a"),mze=o("MarianConfig"),gze=o(" (Marian model)"),hze=l(),gm=a("li"),moe=a("strong"),pze=o("maskformer"),uze=o(" \u2014 "),vk=a("a"),_ze=o("MaskFormerConfig"),bze=o(" (MaskFormer model)"),vze=l(),hm=a("li"),goe=a("strong"),Fze=o("mbart"),Tze=o(" \u2014 "),Fk=a("a"),Mze=o("MBartConfig"),Eze=o(" (mBART model)"),Cze=l(),pm=a("li"),hoe=a("strong"),wze=o("megatron-bert"),Aze=o(" \u2014 "),Tk=a("a"),yze=o("MegatronBertConfig"),Lze=o(" (MegatronBert model)"),xze=l(),um=a("li"),poe=a("strong"),$ze=o("mobilebert"),kze=o(" \u2014 "),Mk=a("a"),Sze=o("MobileBertConfig"),Rze=o(" (MobileBERT model)"),Bze=l(),_m=a("li"),uoe=a("strong"),Pze=o("mobilevit"),Ize=o(" \u2014 "),Ek=a("a"),qze=o("MobileViTConfig"),Nze=o(" (MobileViT model)"),jze=l(),bm=a("li"),_oe=a("strong"),Dze=o("mpnet"),Gze=o(" \u2014 "),Ck=a("a"),Oze=o("MPNetConfig"),Vze=o(" (MPNet model)"),Xze=l(),vm=a("li"),boe=a("strong"),zze=o("mt5"),Qze=o(" \u2014 "),wk=a("a"),Wze=o("MT5Config"),Hze=o(" (mT5 model)"),Uze=l(),Fm=a("li"),voe=a("strong"),Jze=o("nystromformer"),Yze=o(" \u2014 "),Ak=a("a"),Kze=o("NystromformerConfig"),Zze=o(" (Nystromformer model)"),eQe=l(),Tm=a("li"),Foe=a("strong"),oQe=o("openai-gpt"),rQe=o(" \u2014 "),yk=a("a"),tQe=o("OpenAIGPTConfig"),aQe=o(" (OpenAI GPT model)"),nQe=l(),Mm=a("li"),Toe=a("strong"),sQe=o("opt"),lQe=o(" \u2014 "),Lk=a("a"),iQe=o("OPTConfig"),dQe=o(" (OPT model)"),cQe=l(),Em=a("li"),Moe=a("strong"),fQe=o("pegasus"),mQe=o(" \u2014 "),xk=a("a"),gQe=o("PegasusConfig"),hQe=o(" (Pegasus model)"),pQe=l(),Cm=a("li"),Eoe=a("strong"),uQe=o("perceiver"),_Qe=o(" \u2014 "),$k=a("a"),bQe=o("PerceiverConfig"),vQe=o(" (Perceiver model)"),FQe=l(),wm=a("li"),Coe=a("strong"),TQe=o("plbart"),MQe=o(" \u2014 "),kk=a("a"),EQe=o("PLBartConfig"),CQe=o(" (PLBart model)"),wQe=l(),Am=a("li"),woe=a("strong"),AQe=o("poolformer"),yQe=o(" \u2014 "),Sk=a("a"),LQe=o("PoolFormerConfig"),xQe=o(" (PoolFormer model)"),$Qe=l(),ym=a("li"),Aoe=a("strong"),kQe=o("prophetnet"),SQe=o(" \u2014 "),Rk=a("a"),RQe=o("ProphetNetConfig"),BQe=o(" (ProphetNet model)"),PQe=l(),Lm=a("li"),yoe=a("strong"),IQe=o("qdqbert"),qQe=o(" \u2014 "),Bk=a("a"),NQe=o("QDQBertConfig"),jQe=o(" (QDQBert model)"),DQe=l(),xm=a("li"),Loe=a("strong"),GQe=o("rag"),OQe=o(" \u2014 "),Pk=a("a"),VQe=o("RagConfig"),XQe=o(" (RAG model)"),zQe=l(),$m=a("li"),xoe=a("strong"),QQe=o("realm"),WQe=o(" \u2014 "),Ik=a("a"),HQe=o("RealmConfig"),UQe=o(" (Realm model)"),JQe=l(),km=a("li"),$oe=a("strong"),YQe=o("reformer"),KQe=o(" \u2014 "),qk=a("a"),ZQe=o("ReformerConfig"),eWe=o(" (Reformer model)"),oWe=l(),Sm=a("li"),koe=a("strong"),rWe=o("regnet"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("RegNetConfig"),nWe=o(" (RegNet model)"),sWe=l(),Rm=a("li"),Soe=a("strong"),lWe=o("rembert"),iWe=o(" \u2014 "),jk=a("a"),dWe=o("RemBertConfig"),cWe=o(" (RemBERT model)"),fWe=l(),Bm=a("li"),Roe=a("strong"),mWe=o("resnet"),gWe=o(" \u2014 "),Dk=a("a"),hWe=o("ResNetConfig"),pWe=o(" (ResNet model)"),uWe=l(),Pm=a("li"),Boe=a("strong"),_We=o("retribert"),bWe=o(" \u2014 "),Gk=a("a"),vWe=o("RetriBertConfig"),FWe=o(" (RetriBERT model)"),TWe=l(),Im=a("li"),Poe=a("strong"),MWe=o("roberta"),EWe=o(" \u2014 "),Ok=a("a"),CWe=o("RobertaConfig"),wWe=o(" (RoBERTa model)"),AWe=l(),qm=a("li"),Ioe=a("strong"),yWe=o("roformer"),LWe=o(" \u2014 "),Vk=a("a"),xWe=o("RoFormerConfig"),$We=o(" (RoFormer model)"),kWe=l(),Nm=a("li"),qoe=a("strong"),SWe=o("segformer"),RWe=o(" \u2014 "),Xk=a("a"),BWe=o("SegformerConfig"),PWe=o(" (SegFormer model)"),IWe=l(),jm=a("li"),Noe=a("strong"),qWe=o("sew"),NWe=o(" \u2014 "),zk=a("a"),jWe=o("SEWConfig"),DWe=o(" (SEW model)"),GWe=l(),Dm=a("li"),joe=a("strong"),OWe=o("sew-d"),VWe=o(" \u2014 "),Qk=a("a"),XWe=o("SEWDConfig"),zWe=o(" (SEW-D model)"),QWe=l(),Gm=a("li"),Doe=a("strong"),WWe=o("speech-encoder-decoder"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("SpeechEncoderDecoderConfig"),JWe=o(" (Speech Encoder decoder model)"),YWe=l(),Om=a("li"),Goe=a("strong"),KWe=o("speech_to_text"),ZWe=o(" \u2014 "),Hk=a("a"),eHe=o("Speech2TextConfig"),oHe=o(" (Speech2Text model)"),rHe=l(),Vm=a("li"),Ooe=a("strong"),tHe=o("speech_to_text_2"),aHe=o(" \u2014 "),Uk=a("a"),nHe=o("Speech2Text2Config"),sHe=o(" (Speech2Text2 model)"),lHe=l(),Xm=a("li"),Voe=a("strong"),iHe=o("splinter"),dHe=o(" \u2014 "),Jk=a("a"),cHe=o("SplinterConfig"),fHe=o(" (Splinter model)"),mHe=l(),zm=a("li"),Xoe=a("strong"),gHe=o("squeezebert"),hHe=o(" \u2014 "),Yk=a("a"),pHe=o("SqueezeBertConfig"),uHe=o(" (SqueezeBERT model)"),_He=l(),Qm=a("li"),zoe=a("strong"),bHe=o("swin"),vHe=o(" \u2014 "),Kk=a("a"),FHe=o("SwinConfig"),THe=o(" (Swin model)"),MHe=l(),Wm=a("li"),Qoe=a("strong"),EHe=o("t5"),CHe=o(" \u2014 "),Zk=a("a"),wHe=o("T5Config"),AHe=o(" (T5 model)"),yHe=l(),Hm=a("li"),Woe=a("strong"),LHe=o("tapas"),xHe=o(" \u2014 "),eS=a("a"),$He=o("TapasConfig"),kHe=o(" (TAPAS model)"),SHe=l(),Um=a("li"),Hoe=a("strong"),RHe=o("tapex"),BHe=o(" \u2014 "),oS=a("a"),PHe=o("BartConfig"),IHe=o(" (TAPEX model)"),qHe=l(),Jm=a("li"),Uoe=a("strong"),NHe=o("transfo-xl"),jHe=o(" \u2014 "),rS=a("a"),DHe=o("TransfoXLConfig"),GHe=o(" (Transformer-XL model)"),OHe=l(),Ym=a("li"),Joe=a("strong"),VHe=o("trocr"),XHe=o(" \u2014 "),tS=a("a"),zHe=o("TrOCRConfig"),QHe=o(" (TrOCR model)"),WHe=l(),Km=a("li"),Yoe=a("strong"),HHe=o("unispeech"),UHe=o(" \u2014 "),aS=a("a"),JHe=o("UniSpeechConfig"),YHe=o(" (UniSpeech model)"),KHe=l(),Zm=a("li"),Koe=a("strong"),ZHe=o("unispeech-sat"),eUe=o(" \u2014 "),nS=a("a"),oUe=o("UniSpeechSatConfig"),rUe=o(" (UniSpeechSat model)"),tUe=l(),eg=a("li"),Zoe=a("strong"),aUe=o("van"),nUe=o(" \u2014 "),sS=a("a"),sUe=o("VanConfig"),lUe=o(" (VAN model)"),iUe=l(),og=a("li"),ere=a("strong"),dUe=o("vilt"),cUe=o(" \u2014 "),lS=a("a"),fUe=o("ViltConfig"),mUe=o(" (ViLT model)"),gUe=l(),rg=a("li"),ore=a("strong"),hUe=o("vision-encoder-decoder"),pUe=o(" \u2014 "),iS=a("a"),uUe=o("VisionEncoderDecoderConfig"),_Ue=o(" (Vision Encoder decoder model)"),bUe=l(),tg=a("li"),rre=a("strong"),vUe=o("vision-text-dual-encoder"),FUe=o(" \u2014 "),dS=a("a"),TUe=o("VisionTextDualEncoderConfig"),MUe=o(" (VisionTextDualEncoder model)"),EUe=l(),ag=a("li"),tre=a("strong"),CUe=o("visual_bert"),wUe=o(" \u2014 "),cS=a("a"),AUe=o("VisualBertConfig"),yUe=o(" (VisualBert model)"),LUe=l(),ng=a("li"),are=a("strong"),xUe=o("vit"),$Ue=o(" \u2014 "),fS=a("a"),kUe=o("ViTConfig"),SUe=o(" (ViT model)"),RUe=l(),sg=a("li"),nre=a("strong"),BUe=o("vit_mae"),PUe=o(" \u2014 "),mS=a("a"),IUe=o("ViTMAEConfig"),qUe=o(" (ViTMAE model)"),NUe=l(),lg=a("li"),sre=a("strong"),jUe=o("wav2vec2"),DUe=o(" \u2014 "),gS=a("a"),GUe=o("Wav2Vec2Config"),OUe=o(" (Wav2Vec2 model)"),VUe=l(),ig=a("li"),lre=a("strong"),XUe=o("wavlm"),zUe=o(" \u2014 "),hS=a("a"),QUe=o("WavLMConfig"),WUe=o(" (WavLM model)"),HUe=l(),dg=a("li"),ire=a("strong"),UUe=o("xglm"),JUe=o(" \u2014 "),pS=a("a"),YUe=o("XGLMConfig"),KUe=o(" (XGLM model)"),ZUe=l(),cg=a("li"),dre=a("strong"),eJe=o("xlm"),oJe=o(" \u2014 "),uS=a("a"),rJe=o("XLMConfig"),tJe=o(" (XLM model)"),aJe=l(),fg=a("li"),cre=a("strong"),nJe=o("xlm-prophetnet"),sJe=o(" \u2014 "),_S=a("a"),lJe=o("XLMProphetNetConfig"),iJe=o(" (XLMProphetNet model)"),dJe=l(),mg=a("li"),fre=a("strong"),cJe=o("xlm-roberta"),fJe=o(" \u2014 "),bS=a("a"),mJe=o("XLMRobertaConfig"),gJe=o(" (XLM-RoBERTa model)"),hJe=l(),gg=a("li"),mre=a("strong"),pJe=o("xlm-roberta-xl"),uJe=o(" \u2014 "),vS=a("a"),_Je=o("XLMRobertaXLConfig"),bJe=o(" (XLM-RoBERTa-XL model)"),vJe=l(),hg=a("li"),gre=a("strong"),FJe=o("xlnet"),TJe=o(" \u2014 "),FS=a("a"),MJe=o("XLNetConfig"),EJe=o(" (XLNet model)"),CJe=l(),pg=a("li"),hre=a("strong"),wJe=o("yolos"),AJe=o(" \u2014 "),TS=a("a"),yJe=o("YolosConfig"),LJe=o(" (YOLOS model)"),xJe=l(),ug=a("li"),pre=a("strong"),$Je=o("yoso"),kJe=o(" \u2014 "),MS=a("a"),SJe=o("YosoConfig"),RJe=o(" (YOSO model)"),BJe=l(),F(_g.$$.fragment),PJe=l(),bg=a("div"),F(i6.$$.fragment),IJe=l(),ure=a("p"),qJe=o("Register a new configuration for this class."),mIe=l(),_i=a("h2"),vg=a("a"),_re=a("span"),F(d6.$$.fragment),NJe=l(),bre=a("span"),jJe=o("AutoTokenizer"),gIe=l(),wo=a("div"),F(c6.$$.fragment),DJe=l(),f6=a("p"),GJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ES=a("a"),OJe=o("AutoTokenizer.from_pretrained()"),VJe=o(" class method."),XJe=l(),m6=a("p"),zJe=o("This class cannot be instantiated directly using "),vre=a("code"),QJe=o("__init__()"),WJe=o(" (throws an error)."),HJe=l(),Cr=a("div"),F(g6.$$.fragment),UJe=l(),Fre=a("p"),JJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YJe=l(),Ca=a("p"),KJe=o("The tokenizer class to instantiate is selected based on the "),Tre=a("code"),ZJe=o("model_type"),eYe=o(` property of the config object (either
passed as an argument or loaded from `),Mre=a("code"),oYe=o("pretrained_model_name_or_path"),rYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=a("code"),tYe=o("pretrained_model_name_or_path"),aYe=o(":"),nYe=l(),k=a("ul"),kn=a("li"),Cre=a("strong"),sYe=o("albert"),lYe=o(" \u2014 "),CS=a("a"),iYe=o("AlbertTokenizer"),dYe=o(" or "),wS=a("a"),cYe=o("AlbertTokenizerFast"),fYe=o(" (ALBERT model)"),mYe=l(),Sn=a("li"),wre=a("strong"),gYe=o("bart"),hYe=o(" \u2014 "),AS=a("a"),pYe=o("BartTokenizer"),uYe=o(" or "),yS=a("a"),_Ye=o("BartTokenizerFast"),bYe=o(" (BART model)"),vYe=l(),Rn=a("li"),Are=a("strong"),FYe=o("barthez"),TYe=o(" \u2014 "),LS=a("a"),MYe=o("BarthezTokenizer"),EYe=o(" or "),xS=a("a"),CYe=o("BarthezTokenizerFast"),wYe=o(" (BARThez model)"),AYe=l(),Fg=a("li"),yre=a("strong"),yYe=o("bartpho"),LYe=o(" \u2014 "),$S=a("a"),xYe=o("BartphoTokenizer"),$Ye=o(" (BARTpho model)"),kYe=l(),Bn=a("li"),Lre=a("strong"),SYe=o("bert"),RYe=o(" \u2014 "),kS=a("a"),BYe=o("BertTokenizer"),PYe=o(" or "),SS=a("a"),IYe=o("BertTokenizerFast"),qYe=o(" (BERT model)"),NYe=l(),Tg=a("li"),xre=a("strong"),jYe=o("bert-generation"),DYe=o(" \u2014 "),RS=a("a"),GYe=o("BertGenerationTokenizer"),OYe=o(" (Bert Generation model)"),VYe=l(),Mg=a("li"),$re=a("strong"),XYe=o("bert-japanese"),zYe=o(" \u2014 "),BS=a("a"),QYe=o("BertJapaneseTokenizer"),WYe=o(" (BertJapanese model)"),HYe=l(),Eg=a("li"),kre=a("strong"),UYe=o("bertweet"),JYe=o(" \u2014 "),PS=a("a"),YYe=o("BertweetTokenizer"),KYe=o(" (Bertweet model)"),ZYe=l(),Pn=a("li"),Sre=a("strong"),eKe=o("big_bird"),oKe=o(" \u2014 "),IS=a("a"),rKe=o("BigBirdTokenizer"),tKe=o(" or "),qS=a("a"),aKe=o("BigBirdTokenizerFast"),nKe=o(" (BigBird model)"),sKe=l(),In=a("li"),Rre=a("strong"),lKe=o("bigbird_pegasus"),iKe=o(" \u2014 "),NS=a("a"),dKe=o("PegasusTokenizer"),cKe=o(" or "),jS=a("a"),fKe=o("PegasusTokenizerFast"),mKe=o(" (BigBirdPegasus model)"),gKe=l(),qn=a("li"),Bre=a("strong"),hKe=o("blenderbot"),pKe=o(" \u2014 "),DS=a("a"),uKe=o("BlenderbotTokenizer"),_Ke=o(" or "),GS=a("a"),bKe=o("BlenderbotTokenizerFast"),vKe=o(" (Blenderbot model)"),FKe=l(),Cg=a("li"),Pre=a("strong"),TKe=o("blenderbot-small"),MKe=o(" \u2014 "),OS=a("a"),EKe=o("BlenderbotSmallTokenizer"),CKe=o(" (BlenderbotSmall model)"),wKe=l(),wg=a("li"),Ire=a("strong"),AKe=o("byt5"),yKe=o(" \u2014 "),VS=a("a"),LKe=o("ByT5Tokenizer"),xKe=o(" (ByT5 model)"),$Ke=l(),Nn=a("li"),qre=a("strong"),kKe=o("camembert"),SKe=o(" \u2014 "),XS=a("a"),RKe=o("CamembertTokenizer"),BKe=o(" or "),zS=a("a"),PKe=o("CamembertTokenizerFast"),IKe=o(" (CamemBERT model)"),qKe=l(),Ag=a("li"),Nre=a("strong"),NKe=o("canine"),jKe=o(" \u2014 "),QS=a("a"),DKe=o("CanineTokenizer"),GKe=o(" (Canine model)"),OKe=l(),jn=a("li"),jre=a("strong"),VKe=o("clip"),XKe=o(" \u2014 "),WS=a("a"),zKe=o("CLIPTokenizer"),QKe=o(" or "),HS=a("a"),WKe=o("CLIPTokenizerFast"),HKe=o(" (CLIP model)"),UKe=l(),Dn=a("li"),Dre=a("strong"),JKe=o("convbert"),YKe=o(" \u2014 "),US=a("a"),KKe=o("ConvBertTokenizer"),ZKe=o(" or "),JS=a("a"),eZe=o("ConvBertTokenizerFast"),oZe=o(" (ConvBERT model)"),rZe=l(),Gn=a("li"),Gre=a("strong"),tZe=o("cpm"),aZe=o(" \u2014 "),YS=a("a"),nZe=o("CpmTokenizer"),sZe=o(" or "),KS=a("a"),lZe=o("CpmTokenizerFast"),iZe=o(" (CPM model)"),dZe=l(),yg=a("li"),Ore=a("strong"),cZe=o("ctrl"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("CTRLTokenizer"),gZe=o(" (CTRL model)"),hZe=l(),On=a("li"),Vre=a("strong"),pZe=o("data2vec-text"),uZe=o(" \u2014 "),eR=a("a"),_Ze=o("RobertaTokenizer"),bZe=o(" or "),oR=a("a"),vZe=o("RobertaTokenizerFast"),FZe=o(" (Data2VecText model)"),TZe=l(),Vn=a("li"),Xre=a("strong"),MZe=o("deberta"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("DebertaTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("DebertaTokenizerFast"),yZe=o(" (DeBERTa model)"),LZe=l(),Xn=a("li"),zre=a("strong"),xZe=o("deberta-v2"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("DebertaV2Tokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("DebertaV2TokenizerFast"),BZe=o(" (DeBERTa-v2 model)"),PZe=l(),zn=a("li"),Qre=a("strong"),IZe=o("distilbert"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("DistilBertTokenizer"),jZe=o(" or "),lR=a("a"),DZe=o("DistilBertTokenizerFast"),GZe=o(" (DistilBERT model)"),OZe=l(),Qn=a("li"),Wre=a("strong"),VZe=o("dpr"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("DPRQuestionEncoderTokenizer"),QZe=o(" or "),dR=a("a"),WZe=o("DPRQuestionEncoderTokenizerFast"),HZe=o(" (DPR model)"),UZe=l(),Wn=a("li"),Hre=a("strong"),JZe=o("electra"),YZe=o(" \u2014 "),cR=a("a"),KZe=o("ElectraTokenizer"),ZZe=o(" or "),fR=a("a"),eeo=o("ElectraTokenizerFast"),oeo=o(" (ELECTRA model)"),reo=l(),Lg=a("li"),Ure=a("strong"),teo=o("flaubert"),aeo=o(" \u2014 "),mR=a("a"),neo=o("FlaubertTokenizer"),seo=o(" (FlauBERT model)"),leo=l(),Hn=a("li"),Jre=a("strong"),ieo=o("fnet"),deo=o(" \u2014 "),gR=a("a"),ceo=o("FNetTokenizer"),feo=o(" or "),hR=a("a"),meo=o("FNetTokenizerFast"),geo=o(" (FNet model)"),heo=l(),xg=a("li"),Yre=a("strong"),peo=o("fsmt"),ueo=o(" \u2014 "),pR=a("a"),_eo=o("FSMTTokenizer"),beo=o(" (FairSeq Machine-Translation model)"),veo=l(),Un=a("li"),Kre=a("strong"),Feo=o("funnel"),Teo=o(" \u2014 "),uR=a("a"),Meo=o("FunnelTokenizer"),Eeo=o(" or "),_R=a("a"),Ceo=o("FunnelTokenizerFast"),weo=o(" (Funnel Transformer model)"),Aeo=l(),Jn=a("li"),Zre=a("strong"),yeo=o("gpt2"),Leo=o(" \u2014 "),bR=a("a"),xeo=o("GPT2Tokenizer"),$eo=o(" or "),vR=a("a"),keo=o("GPT2TokenizerFast"),Seo=o(" (OpenAI GPT-2 model)"),Reo=l(),Yn=a("li"),ete=a("strong"),Beo=o("gpt_neo"),Peo=o(" \u2014 "),FR=a("a"),Ieo=o("GPT2Tokenizer"),qeo=o(" or "),TR=a("a"),Neo=o("GPT2TokenizerFast"),jeo=o(" (GPT Neo model)"),Deo=l(),Kn=a("li"),ote=a("strong"),Geo=o("gptj"),Oeo=o(" \u2014 "),MR=a("a"),Veo=o("GPT2Tokenizer"),Xeo=o(" or "),ER=a("a"),zeo=o("GPT2TokenizerFast"),Qeo=o(" (GPT-J model)"),Weo=l(),Zn=a("li"),rte=a("strong"),Heo=o("herbert"),Ueo=o(" \u2014 "),CR=a("a"),Jeo=o("HerbertTokenizer"),Yeo=o(" or "),wR=a("a"),Keo=o("HerbertTokenizerFast"),Zeo=o(" (HerBERT model)"),eoo=l(),$g=a("li"),tte=a("strong"),ooo=o("hubert"),roo=o(" \u2014 "),AR=a("a"),too=o("Wav2Vec2CTCTokenizer"),aoo=o(" (Hubert model)"),noo=l(),es=a("li"),ate=a("strong"),soo=o("ibert"),loo=o(" \u2014 "),yR=a("a"),ioo=o("RobertaTokenizer"),doo=o(" or "),LR=a("a"),coo=o("RobertaTokenizerFast"),foo=o(" (I-BERT model)"),moo=l(),os=a("li"),nte=a("strong"),goo=o("layoutlm"),hoo=o(" \u2014 "),xR=a("a"),poo=o("LayoutLMTokenizer"),uoo=o(" or "),$R=a("a"),_oo=o("LayoutLMTokenizerFast"),boo=o(" (LayoutLM model)"),voo=l(),rs=a("li"),ste=a("strong"),Foo=o("layoutlmv2"),Too=o(" \u2014 "),kR=a("a"),Moo=o("LayoutLMv2Tokenizer"),Eoo=o(" or "),SR=a("a"),Coo=o("LayoutLMv2TokenizerFast"),woo=o(" (LayoutLMv2 model)"),Aoo=l(),ts=a("li"),lte=a("strong"),yoo=o("layoutxlm"),Loo=o(" \u2014 "),RR=a("a"),xoo=o("LayoutXLMTokenizer"),$oo=o(" or "),BR=a("a"),koo=o("LayoutXLMTokenizerFast"),Soo=o(" (LayoutXLM model)"),Roo=l(),as=a("li"),ite=a("strong"),Boo=o("led"),Poo=o(" \u2014 "),PR=a("a"),Ioo=o("LEDTokenizer"),qoo=o(" or "),IR=a("a"),Noo=o("LEDTokenizerFast"),joo=o(" (LED model)"),Doo=l(),ns=a("li"),dte=a("strong"),Goo=o("longformer"),Ooo=o(" \u2014 "),qR=a("a"),Voo=o("LongformerTokenizer"),Xoo=o(" or "),NR=a("a"),zoo=o("LongformerTokenizerFast"),Qoo=o(" (Longformer model)"),Woo=l(),kg=a("li"),cte=a("strong"),Hoo=o("luke"),Uoo=o(" \u2014 "),jR=a("a"),Joo=o("LukeTokenizer"),Yoo=o(" (LUKE model)"),Koo=l(),ss=a("li"),fte=a("strong"),Zoo=o("lxmert"),ero=o(" \u2014 "),DR=a("a"),oro=o("LxmertTokenizer"),rro=o(" or "),GR=a("a"),tro=o("LxmertTokenizerFast"),aro=o(" (LXMERT model)"),nro=l(),Sg=a("li"),mte=a("strong"),sro=o("m2m_100"),lro=o(" \u2014 "),OR=a("a"),iro=o("M2M100Tokenizer"),dro=o(" (M2M100 model)"),cro=l(),Rg=a("li"),gte=a("strong"),fro=o("marian"),mro=o(" \u2014 "),VR=a("a"),gro=o("MarianTokenizer"),hro=o(" (Marian model)"),pro=l(),ls=a("li"),hte=a("strong"),uro=o("mbart"),_ro=o(" \u2014 "),XR=a("a"),bro=o("MBartTokenizer"),vro=o(" or "),zR=a("a"),Fro=o("MBartTokenizerFast"),Tro=o(" (mBART model)"),Mro=l(),is=a("li"),pte=a("strong"),Ero=o("mbart50"),Cro=o(" \u2014 "),QR=a("a"),wro=o("MBart50Tokenizer"),Aro=o(" or "),WR=a("a"),yro=o("MBart50TokenizerFast"),Lro=o(" (mBART-50 model)"),xro=l(),ds=a("li"),ute=a("strong"),$ro=o("megatron-bert"),kro=o(" \u2014 "),HR=a("a"),Sro=o("BertTokenizer"),Rro=o(" or "),UR=a("a"),Bro=o("BertTokenizerFast"),Pro=o(" (MegatronBert model)"),Iro=l(),Bg=a("li"),_te=a("strong"),qro=o("mluke"),Nro=o(" \u2014 "),JR=a("a"),jro=o("MLukeTokenizer"),Dro=o(" (mLUKE model)"),Gro=l(),cs=a("li"),bte=a("strong"),Oro=o("mobilebert"),Vro=o(" \u2014 "),YR=a("a"),Xro=o("MobileBertTokenizer"),zro=o(" or "),KR=a("a"),Qro=o("MobileBertTokenizerFast"),Wro=o(" (MobileBERT model)"),Hro=l(),fs=a("li"),vte=a("strong"),Uro=o("mpnet"),Jro=o(" \u2014 "),ZR=a("a"),Yro=o("MPNetTokenizer"),Kro=o(" or "),eB=a("a"),Zro=o("MPNetTokenizerFast"),eto=o(" (MPNet model)"),oto=l(),ms=a("li"),Fte=a("strong"),rto=o("mt5"),tto=o(" \u2014 "),oB=a("a"),ato=o("MT5Tokenizer"),nto=o(" or "),rB=a("a"),sto=o("MT5TokenizerFast"),lto=o(" (mT5 model)"),ito=l(),gs=a("li"),Tte=a("strong"),dto=o("nystromformer"),cto=o(" \u2014 "),tB=a("a"),fto=o("AlbertTokenizer"),mto=o(" or "),aB=a("a"),gto=o("AlbertTokenizerFast"),hto=o(" (Nystromformer model)"),pto=l(),hs=a("li"),Mte=a("strong"),uto=o("openai-gpt"),_to=o(" \u2014 "),nB=a("a"),bto=o("OpenAIGPTTokenizer"),vto=o(" or "),sB=a("a"),Fto=o("OpenAIGPTTokenizerFast"),Tto=o(" (OpenAI GPT model)"),Mto=l(),Pg=a("li"),Ete=a("strong"),Eto=o("opt"),Cto=o(" \u2014 "),lB=a("a"),wto=o("GPT2Tokenizer"),Ato=o(" (OPT model)"),yto=l(),ps=a("li"),Cte=a("strong"),Lto=o("pegasus"),xto=o(" \u2014 "),iB=a("a"),$to=o("PegasusTokenizer"),kto=o(" or "),dB=a("a"),Sto=o("PegasusTokenizerFast"),Rto=o(" (Pegasus model)"),Bto=l(),Ig=a("li"),wte=a("strong"),Pto=o("perceiver"),Ito=o(" \u2014 "),cB=a("a"),qto=o("PerceiverTokenizer"),Nto=o(" (Perceiver model)"),jto=l(),qg=a("li"),Ate=a("strong"),Dto=o("phobert"),Gto=o(" \u2014 "),fB=a("a"),Oto=o("PhobertTokenizer"),Vto=o(" (PhoBERT model)"),Xto=l(),Ng=a("li"),yte=a("strong"),zto=o("plbart"),Qto=o(" \u2014 "),mB=a("a"),Wto=o("PLBartTokenizer"),Hto=o(" (PLBart model)"),Uto=l(),jg=a("li"),Lte=a("strong"),Jto=o("prophetnet"),Yto=o(" \u2014 "),gB=a("a"),Kto=o("ProphetNetTokenizer"),Zto=o(" (ProphetNet model)"),eao=l(),us=a("li"),xte=a("strong"),oao=o("qdqbert"),rao=o(" \u2014 "),hB=a("a"),tao=o("BertTokenizer"),aao=o(" or "),pB=a("a"),nao=o("BertTokenizerFast"),sao=o(" (QDQBert model)"),lao=l(),Dg=a("li"),$te=a("strong"),iao=o("rag"),dao=o(" \u2014 "),uB=a("a"),cao=o("RagTokenizer"),fao=o(" (RAG model)"),mao=l(),_s=a("li"),kte=a("strong"),gao=o("realm"),hao=o(" \u2014 "),_B=a("a"),pao=o("RealmTokenizer"),uao=o(" or "),bB=a("a"),_ao=o("RealmTokenizerFast"),bao=o(" (Realm model)"),vao=l(),bs=a("li"),Ste=a("strong"),Fao=o("reformer"),Tao=o(" \u2014 "),vB=a("a"),Mao=o("ReformerTokenizer"),Eao=o(" or "),FB=a("a"),Cao=o("ReformerTokenizerFast"),wao=o(" (Reformer model)"),Aao=l(),vs=a("li"),Rte=a("strong"),yao=o("rembert"),Lao=o(" \u2014 "),TB=a("a"),xao=o("RemBertTokenizer"),$ao=o(" or "),MB=a("a"),kao=o("RemBertTokenizerFast"),Sao=o(" (RemBERT model)"),Rao=l(),Fs=a("li"),Bte=a("strong"),Bao=o("retribert"),Pao=o(" \u2014 "),EB=a("a"),Iao=o("RetriBertTokenizer"),qao=o(" or "),CB=a("a"),Nao=o("RetriBertTokenizerFast"),jao=o(" (RetriBERT model)"),Dao=l(),Ts=a("li"),Pte=a("strong"),Gao=o("roberta"),Oao=o(" \u2014 "),wB=a("a"),Vao=o("RobertaTokenizer"),Xao=o(" or "),AB=a("a"),zao=o("RobertaTokenizerFast"),Qao=o(" (RoBERTa model)"),Wao=l(),Ms=a("li"),Ite=a("strong"),Hao=o("roformer"),Uao=o(" \u2014 "),yB=a("a"),Jao=o("RoFormerTokenizer"),Yao=o(" or "),LB=a("a"),Kao=o("RoFormerTokenizerFast"),Zao=o(" (RoFormer model)"),eno=l(),Gg=a("li"),qte=a("strong"),ono=o("speech_to_text"),rno=o(" \u2014 "),xB=a("a"),tno=o("Speech2TextTokenizer"),ano=o(" (Speech2Text model)"),nno=l(),Og=a("li"),Nte=a("strong"),sno=o("speech_to_text_2"),lno=o(" \u2014 "),$B=a("a"),ino=o("Speech2Text2Tokenizer"),dno=o(" (Speech2Text2 model)"),cno=l(),Es=a("li"),jte=a("strong"),fno=o("splinter"),mno=o(" \u2014 "),kB=a("a"),gno=o("SplinterTokenizer"),hno=o(" or "),SB=a("a"),pno=o("SplinterTokenizerFast"),uno=o(" (Splinter model)"),_no=l(),Cs=a("li"),Dte=a("strong"),bno=o("squeezebert"),vno=o(" \u2014 "),RB=a("a"),Fno=o("SqueezeBertTokenizer"),Tno=o(" or "),BB=a("a"),Mno=o("SqueezeBertTokenizerFast"),Eno=o(" (SqueezeBERT model)"),Cno=l(),ws=a("li"),Gte=a("strong"),wno=o("t5"),Ano=o(" \u2014 "),PB=a("a"),yno=o("T5Tokenizer"),Lno=o(" or "),IB=a("a"),xno=o("T5TokenizerFast"),$no=o(" (T5 model)"),kno=l(),Vg=a("li"),Ote=a("strong"),Sno=o("tapas"),Rno=o(" \u2014 "),qB=a("a"),Bno=o("TapasTokenizer"),Pno=o(" (TAPAS model)"),Ino=l(),Xg=a("li"),Vte=a("strong"),qno=o("tapex"),Nno=o(" \u2014 "),NB=a("a"),jno=o("TapexTokenizer"),Dno=o(" (TAPEX model)"),Gno=l(),zg=a("li"),Xte=a("strong"),Ono=o("transfo-xl"),Vno=o(" \u2014 "),jB=a("a"),Xno=o("TransfoXLTokenizer"),zno=o(" (Transformer-XL model)"),Qno=l(),As=a("li"),zte=a("strong"),Wno=o("visual_bert"),Hno=o(" \u2014 "),DB=a("a"),Uno=o("BertTokenizer"),Jno=o(" or "),GB=a("a"),Yno=o("BertTokenizerFast"),Kno=o(" (VisualBert model)"),Zno=l(),Qg=a("li"),Qte=a("strong"),eso=o("wav2vec2"),oso=o(" \u2014 "),OB=a("a"),rso=o("Wav2Vec2CTCTokenizer"),tso=o(" (Wav2Vec2 model)"),aso=l(),Wg=a("li"),Wte=a("strong"),nso=o("wav2vec2_phoneme"),sso=o(" \u2014 "),VB=a("a"),lso=o("Wav2Vec2PhonemeCTCTokenizer"),iso=o(" (Wav2Vec2Phoneme model)"),dso=l(),ys=a("li"),Hte=a("strong"),cso=o("xglm"),fso=o(" \u2014 "),XB=a("a"),mso=o("XGLMTokenizer"),gso=o(" or "),zB=a("a"),hso=o("XGLMTokenizerFast"),pso=o(" (XGLM model)"),uso=l(),Hg=a("li"),Ute=a("strong"),_so=o("xlm"),bso=o(" \u2014 "),QB=a("a"),vso=o("XLMTokenizer"),Fso=o(" (XLM model)"),Tso=l(),Ug=a("li"),Jte=a("strong"),Mso=o("xlm-prophetnet"),Eso=o(" \u2014 "),WB=a("a"),Cso=o("XLMProphetNetTokenizer"),wso=o(" (XLMProphetNet model)"),Aso=l(),Ls=a("li"),Yte=a("strong"),yso=o("xlm-roberta"),Lso=o(" \u2014 "),HB=a("a"),xso=o("XLMRobertaTokenizer"),$so=o(" or "),UB=a("a"),kso=o("XLMRobertaTokenizerFast"),Sso=o(" (XLM-RoBERTa model)"),Rso=l(),xs=a("li"),Kte=a("strong"),Bso=o("xlm-roberta-xl"),Pso=o(" \u2014 "),JB=a("a"),Iso=o("RobertaTokenizer"),qso=o(" or "),YB=a("a"),Nso=o("RobertaTokenizerFast"),jso=o(" (XLM-RoBERTa-XL model)"),Dso=l(),$s=a("li"),Zte=a("strong"),Gso=o("xlnet"),Oso=o(" \u2014 "),KB=a("a"),Vso=o("XLNetTokenizer"),Xso=o(" or "),ZB=a("a"),zso=o("XLNetTokenizerFast"),Qso=o(" (XLNet model)"),Wso=l(),ks=a("li"),eae=a("strong"),Hso=o("yoso"),Uso=o(" \u2014 "),eP=a("a"),Jso=o("AlbertTokenizer"),Yso=o(" or "),oP=a("a"),Kso=o("AlbertTokenizerFast"),Zso=o(" (YOSO model)"),elo=l(),F(Jg.$$.fragment),olo=l(),Yg=a("div"),F(h6.$$.fragment),rlo=l(),oae=a("p"),tlo=o("Register a new tokenizer in this mapping."),hIe=l(),bi=a("h2"),Kg=a("a"),rae=a("span"),F(p6.$$.fragment),alo=l(),tae=a("span"),nlo=o("AutoFeatureExtractor"),pIe=l(),Ao=a("div"),F(u6.$$.fragment),slo=l(),_6=a("p"),llo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rP=a("a"),ilo=o("AutoFeatureExtractor.from_pretrained()"),dlo=o(" class method."),clo=l(),b6=a("p"),flo=o("This class cannot be instantiated directly using "),aae=a("code"),mlo=o("__init__()"),glo=o(" (throws an error)."),hlo=l(),Qe=a("div"),F(v6.$$.fragment),plo=l(),nae=a("p"),ulo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_lo=l(),wa=a("p"),blo=o("The feature extractor class to instantiate is selected based on the "),sae=a("code"),vlo=o("model_type"),Flo=o(` property of the config object
(either passed as an argument or loaded from `),lae=a("code"),Tlo=o("pretrained_model_name_or_path"),Mlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),iae=a("code"),Elo=o("pretrained_model_name_or_path"),Clo=o(":"),wlo=l(),Z=a("ul"),Zg=a("li"),dae=a("strong"),Alo=o("beit"),ylo=o(" \u2014 "),tP=a("a"),Llo=o("BeitFeatureExtractor"),xlo=o(" (BEiT model)"),$lo=l(),eh=a("li"),cae=a("strong"),klo=o("clip"),Slo=o(" \u2014 "),aP=a("a"),Rlo=o("CLIPFeatureExtractor"),Blo=o(" (CLIP model)"),Plo=l(),oh=a("li"),fae=a("strong"),Ilo=o("convnext"),qlo=o(" \u2014 "),nP=a("a"),Nlo=o("ConvNextFeatureExtractor"),jlo=o(" (ConvNext model)"),Dlo=l(),rh=a("li"),mae=a("strong"),Glo=o("data2vec-audio"),Olo=o(" \u2014 "),sP=a("a"),Vlo=o("Wav2Vec2FeatureExtractor"),Xlo=o(" (Data2VecAudio model)"),zlo=l(),th=a("li"),gae=a("strong"),Qlo=o("data2vec-vision"),Wlo=o(" \u2014 "),lP=a("a"),Hlo=o("BeitFeatureExtractor"),Ulo=o(" (Data2VecVision model)"),Jlo=l(),ah=a("li"),hae=a("strong"),Ylo=o("deit"),Klo=o(" \u2014 "),iP=a("a"),Zlo=o("DeiTFeatureExtractor"),eio=o(" (DeiT model)"),oio=l(),nh=a("li"),pae=a("strong"),rio=o("detr"),tio=o(" \u2014 "),dP=a("a"),aio=o("DetrFeatureExtractor"),nio=o(" (DETR model)"),sio=l(),sh=a("li"),uae=a("strong"),lio=o("dpt"),iio=o(" \u2014 "),cP=a("a"),dio=o("DPTFeatureExtractor"),cio=o(" (DPT model)"),fio=l(),lh=a("li"),_ae=a("strong"),mio=o("flava"),gio=o(" \u2014 "),fP=a("a"),hio=o("FlavaFeatureExtractor"),pio=o(" (Flava model)"),uio=l(),ih=a("li"),bae=a("strong"),_io=o("glpn"),bio=o(" \u2014 "),mP=a("a"),vio=o("GLPNFeatureExtractor"),Fio=o(" (GLPN model)"),Tio=l(),dh=a("li"),vae=a("strong"),Mio=o("hubert"),Eio=o(" \u2014 "),gP=a("a"),Cio=o("Wav2Vec2FeatureExtractor"),wio=o(" (Hubert model)"),Aio=l(),ch=a("li"),Fae=a("strong"),yio=o("layoutlmv2"),Lio=o(" \u2014 "),hP=a("a"),xio=o("LayoutLMv2FeatureExtractor"),$io=o(" (LayoutLMv2 model)"),kio=l(),fh=a("li"),Tae=a("strong"),Sio=o("maskformer"),Rio=o(" \u2014 "),pP=a("a"),Bio=o("MaskFormerFeatureExtractor"),Pio=o(" (MaskFormer model)"),Iio=l(),mh=a("li"),Mae=a("strong"),qio=o("mobilevit"),Nio=o(" \u2014 "),uP=a("a"),jio=o("MobileViTFeatureExtractor"),Dio=o(" (MobileViT model)"),Gio=l(),gh=a("li"),Eae=a("strong"),Oio=o("perceiver"),Vio=o(" \u2014 "),_P=a("a"),Xio=o("PerceiverFeatureExtractor"),zio=o(" (Perceiver model)"),Qio=l(),hh=a("li"),Cae=a("strong"),Wio=o("poolformer"),Hio=o(" \u2014 "),bP=a("a"),Uio=o("PoolFormerFeatureExtractor"),Jio=o(" (PoolFormer model)"),Yio=l(),ph=a("li"),wae=a("strong"),Kio=o("regnet"),Zio=o(" \u2014 "),vP=a("a"),edo=o("ConvNextFeatureExtractor"),odo=o(" (RegNet model)"),rdo=l(),uh=a("li"),Aae=a("strong"),tdo=o("resnet"),ado=o(" \u2014 "),FP=a("a"),ndo=o("ConvNextFeatureExtractor"),sdo=o(" (ResNet model)"),ldo=l(),_h=a("li"),yae=a("strong"),ido=o("segformer"),ddo=o(" \u2014 "),TP=a("a"),cdo=o("SegformerFeatureExtractor"),fdo=o(" (SegFormer model)"),mdo=l(),bh=a("li"),Lae=a("strong"),gdo=o("speech_to_text"),hdo=o(" \u2014 "),MP=a("a"),pdo=o("Speech2TextFeatureExtractor"),udo=o(" (Speech2Text model)"),_do=l(),vh=a("li"),xae=a("strong"),bdo=o("swin"),vdo=o(" \u2014 "),EP=a("a"),Fdo=o("ViTFeatureExtractor"),Tdo=o(" (Swin model)"),Mdo=l(),Fh=a("li"),$ae=a("strong"),Edo=o("van"),Cdo=o(" \u2014 "),CP=a("a"),wdo=o("ConvNextFeatureExtractor"),Ado=o(" (VAN model)"),ydo=l(),Th=a("li"),kae=a("strong"),Ldo=o("vit"),xdo=o(" \u2014 "),wP=a("a"),$do=o("ViTFeatureExtractor"),kdo=o(" (ViT model)"),Sdo=l(),Mh=a("li"),Sae=a("strong"),Rdo=o("vit_mae"),Bdo=o(" \u2014 "),AP=a("a"),Pdo=o("ViTFeatureExtractor"),Ido=o(" (ViTMAE model)"),qdo=l(),Eh=a("li"),Rae=a("strong"),Ndo=o("wav2vec2"),jdo=o(" \u2014 "),yP=a("a"),Ddo=o("Wav2Vec2FeatureExtractor"),Gdo=o(" (Wav2Vec2 model)"),Odo=l(),Ch=a("li"),Bae=a("strong"),Vdo=o("yolos"),Xdo=o(" \u2014 "),LP=a("a"),zdo=o("YolosFeatureExtractor"),Qdo=o(" (YOLOS model)"),Wdo=l(),F(wh.$$.fragment),Hdo=l(),F(Ah.$$.fragment),Udo=l(),yh=a("div"),F(F6.$$.fragment),Jdo=l(),Pae=a("p"),Ydo=o("Register a new feature extractor for this class."),uIe=l(),vi=a("h2"),Lh=a("a"),Iae=a("span"),F(T6.$$.fragment),Kdo=l(),qae=a("span"),Zdo=o("AutoProcessor"),_Ie=l(),yo=a("div"),F(M6.$$.fragment),eco=l(),E6=a("p"),oco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xP=a("a"),rco=o("AutoProcessor.from_pretrained()"),tco=o(" class method."),aco=l(),C6=a("p"),nco=o("This class cannot be instantiated directly using "),Nae=a("code"),sco=o("__init__()"),lco=o(" (throws an error)."),ico=l(),We=a("div"),F(w6.$$.fragment),dco=l(),jae=a("p"),cco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),fco=l(),Fi=a("p"),mco=o("The processor class to instantiate is selected based on the "),Dae=a("code"),gco=o("model_type"),hco=o(` property of the config object (either
passed as an argument or loaded from `),Gae=a("code"),pco=o("pretrained_model_name_or_path"),uco=o(" if possible):"),_co=l(),be=a("ul"),xh=a("li"),Oae=a("strong"),bco=o("clip"),vco=o(" \u2014 "),$P=a("a"),Fco=o("CLIPProcessor"),Tco=o(" (CLIP model)"),Mco=l(),$h=a("li"),Vae=a("strong"),Eco=o("flava"),Cco=o(" \u2014 "),Xae=a("code"),wco=o("FLAVAProcessor"),Aco=o(" (Flava model)"),yco=l(),kh=a("li"),zae=a("strong"),Lco=o("layoutlmv2"),xco=o(" \u2014 "),kP=a("a"),$co=o("LayoutLMv2Processor"),kco=o(" (LayoutLMv2 model)"),Sco=l(),Sh=a("li"),Qae=a("strong"),Rco=o("layoutxlm"),Bco=o(" \u2014 "),SP=a("a"),Pco=o("LayoutXLMProcessor"),Ico=o(" (LayoutXLM model)"),qco=l(),Rh=a("li"),Wae=a("strong"),Nco=o("sew"),jco=o(" \u2014 "),RP=a("a"),Dco=o("Wav2Vec2Processor"),Gco=o(" (SEW model)"),Oco=l(),Bh=a("li"),Hae=a("strong"),Vco=o("sew-d"),Xco=o(" \u2014 "),BP=a("a"),zco=o("Wav2Vec2Processor"),Qco=o(" (SEW-D model)"),Wco=l(),Ph=a("li"),Uae=a("strong"),Hco=o("speech_to_text"),Uco=o(" \u2014 "),PP=a("a"),Jco=o("Speech2TextProcessor"),Yco=o(" (Speech2Text model)"),Kco=l(),Ih=a("li"),Jae=a("strong"),Zco=o("speech_to_text_2"),efo=o(" \u2014 "),IP=a("a"),ofo=o("Speech2Text2Processor"),rfo=o(" (Speech2Text2 model)"),tfo=l(),qh=a("li"),Yae=a("strong"),afo=o("trocr"),nfo=o(" \u2014 "),qP=a("a"),sfo=o("TrOCRProcessor"),lfo=o(" (TrOCR model)"),ifo=l(),Nh=a("li"),Kae=a("strong"),dfo=o("unispeech"),cfo=o(" \u2014 "),NP=a("a"),ffo=o("Wav2Vec2Processor"),mfo=o(" (UniSpeech model)"),gfo=l(),jh=a("li"),Zae=a("strong"),hfo=o("unispeech-sat"),pfo=o(" \u2014 "),jP=a("a"),ufo=o("Wav2Vec2Processor"),_fo=o(" (UniSpeechSat model)"),bfo=l(),Dh=a("li"),ene=a("strong"),vfo=o("vilt"),Ffo=o(" \u2014 "),DP=a("a"),Tfo=o("ViltProcessor"),Mfo=o(" (ViLT model)"),Efo=l(),Gh=a("li"),one=a("strong"),Cfo=o("vision-text-dual-encoder"),wfo=o(" \u2014 "),GP=a("a"),Afo=o("VisionTextDualEncoderProcessor"),yfo=o(" (VisionTextDualEncoder model)"),Lfo=l(),Oh=a("li"),rne=a("strong"),xfo=o("wav2vec2"),$fo=o(" \u2014 "),OP=a("a"),kfo=o("Wav2Vec2Processor"),Sfo=o(" (Wav2Vec2 model)"),Rfo=l(),Vh=a("li"),tne=a("strong"),Bfo=o("wavlm"),Pfo=o(" \u2014 "),VP=a("a"),Ifo=o("Wav2Vec2Processor"),qfo=o(" (WavLM model)"),Nfo=l(),F(Xh.$$.fragment),jfo=l(),F(zh.$$.fragment),Dfo=l(),Qh=a("div"),F(A6.$$.fragment),Gfo=l(),ane=a("p"),Ofo=o("Register a new processor for this class."),bIe=l(),Ti=a("h2"),Wh=a("a"),nne=a("span"),F(y6.$$.fragment),Vfo=l(),sne=a("span"),Xfo=o("AutoModel"),vIe=l(),Lo=a("div"),F(L6.$$.fragment),zfo=l(),Mi=a("p"),Qfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XP=a("a"),Wfo=o("from_pretrained()"),Hfo=o(" class method or the "),zP=a("a"),Ufo=o("from_config()"),Jfo=o(` class
method.`),Yfo=l(),x6=a("p"),Kfo=o("This class cannot be instantiated directly using "),lne=a("code"),Zfo=o("__init__()"),emo=o(" (throws an error)."),omo=l(),ot=a("div"),F($6.$$.fragment),rmo=l(),ine=a("p"),tmo=o("Instantiates one of the base model classes of the library from a configuration."),amo=l(),Ei=a("p"),nmo=o(`Note:
Loading a model from its configuration file does `),dne=a("strong"),smo=o("not"),lmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QP=a("a"),imo=o("from_pretrained()"),dmo=o(" to load the model weights."),cmo=l(),F(Hh.$$.fragment),fmo=l(),He=a("div"),F(k6.$$.fragment),mmo=l(),cne=a("p"),gmo=o("Instantiate one of the base model classes of the library from a pretrained model."),hmo=l(),Aa=a("p"),pmo=o("The model class to instantiate is selected based on the "),fne=a("code"),umo=o("model_type"),_mo=o(` property of the config object (either
passed as an argument or loaded from `),mne=a("code"),bmo=o("pretrained_model_name_or_path"),vmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=a("code"),Fmo=o("pretrained_model_name_or_path"),Tmo=o(":"),Mmo=l(),x=a("ul"),Uh=a("li"),hne=a("strong"),Emo=o("albert"),Cmo=o(" \u2014 "),WP=a("a"),wmo=o("AlbertModel"),Amo=o(" (ALBERT model)"),ymo=l(),Jh=a("li"),pne=a("strong"),Lmo=o("bart"),xmo=o(" \u2014 "),HP=a("a"),$mo=o("BartModel"),kmo=o(" (BART model)"),Smo=l(),Yh=a("li"),une=a("strong"),Rmo=o("beit"),Bmo=o(" \u2014 "),UP=a("a"),Pmo=o("BeitModel"),Imo=o(" (BEiT model)"),qmo=l(),Kh=a("li"),_ne=a("strong"),Nmo=o("bert"),jmo=o(" \u2014 "),JP=a("a"),Dmo=o("BertModel"),Gmo=o(" (BERT model)"),Omo=l(),Zh=a("li"),bne=a("strong"),Vmo=o("bert-generation"),Xmo=o(" \u2014 "),YP=a("a"),zmo=o("BertGenerationEncoder"),Qmo=o(" (Bert Generation model)"),Wmo=l(),ep=a("li"),vne=a("strong"),Hmo=o("big_bird"),Umo=o(" \u2014 "),KP=a("a"),Jmo=o("BigBirdModel"),Ymo=o(" (BigBird model)"),Kmo=l(),op=a("li"),Fne=a("strong"),Zmo=o("bigbird_pegasus"),ego=o(" \u2014 "),ZP=a("a"),ogo=o("BigBirdPegasusModel"),rgo=o(" (BigBirdPegasus model)"),tgo=l(),rp=a("li"),Tne=a("strong"),ago=o("blenderbot"),ngo=o(" \u2014 "),eI=a("a"),sgo=o("BlenderbotModel"),lgo=o(" (Blenderbot model)"),igo=l(),tp=a("li"),Mne=a("strong"),dgo=o("blenderbot-small"),cgo=o(" \u2014 "),oI=a("a"),fgo=o("BlenderbotSmallModel"),mgo=o(" (BlenderbotSmall model)"),ggo=l(),ap=a("li"),Ene=a("strong"),hgo=o("camembert"),pgo=o(" \u2014 "),rI=a("a"),ugo=o("CamembertModel"),_go=o(" (CamemBERT model)"),bgo=l(),np=a("li"),Cne=a("strong"),vgo=o("canine"),Fgo=o(" \u2014 "),tI=a("a"),Tgo=o("CanineModel"),Mgo=o(" (Canine model)"),Ego=l(),sp=a("li"),wne=a("strong"),Cgo=o("clip"),wgo=o(" \u2014 "),aI=a("a"),Ago=o("CLIPModel"),ygo=o(" (CLIP model)"),Lgo=l(),lp=a("li"),Ane=a("strong"),xgo=o("convbert"),$go=o(" \u2014 "),nI=a("a"),kgo=o("ConvBertModel"),Sgo=o(" (ConvBERT model)"),Rgo=l(),ip=a("li"),yne=a("strong"),Bgo=o("convnext"),Pgo=o(" \u2014 "),sI=a("a"),Igo=o("ConvNextModel"),qgo=o(" (ConvNext model)"),Ngo=l(),dp=a("li"),Lne=a("strong"),jgo=o("ctrl"),Dgo=o(" \u2014 "),lI=a("a"),Ggo=o("CTRLModel"),Ogo=o(" (CTRL model)"),Vgo=l(),cp=a("li"),xne=a("strong"),Xgo=o("data2vec-audio"),zgo=o(" \u2014 "),iI=a("a"),Qgo=o("Data2VecAudioModel"),Wgo=o(" (Data2VecAudio model)"),Hgo=l(),fp=a("li"),$ne=a("strong"),Ugo=o("data2vec-text"),Jgo=o(" \u2014 "),dI=a("a"),Ygo=o("Data2VecTextModel"),Kgo=o(" (Data2VecText model)"),Zgo=l(),mp=a("li"),kne=a("strong"),eho=o("data2vec-vision"),oho=o(" \u2014 "),cI=a("a"),rho=o("Data2VecVisionModel"),tho=o(" (Data2VecVision model)"),aho=l(),gp=a("li"),Sne=a("strong"),nho=o("deberta"),sho=o(" \u2014 "),fI=a("a"),lho=o("DebertaModel"),iho=o(" (DeBERTa model)"),dho=l(),hp=a("li"),Rne=a("strong"),cho=o("deberta-v2"),fho=o(" \u2014 "),mI=a("a"),mho=o("DebertaV2Model"),gho=o(" (DeBERTa-v2 model)"),hho=l(),pp=a("li"),Bne=a("strong"),pho=o("decision_transformer"),uho=o(" \u2014 "),gI=a("a"),_ho=o("DecisionTransformerModel"),bho=o(" (Decision Transformer model)"),vho=l(),up=a("li"),Pne=a("strong"),Fho=o("deit"),Tho=o(" \u2014 "),hI=a("a"),Mho=o("DeiTModel"),Eho=o(" (DeiT model)"),Cho=l(),_p=a("li"),Ine=a("strong"),who=o("detr"),Aho=o(" \u2014 "),pI=a("a"),yho=o("DetrModel"),Lho=o(" (DETR model)"),xho=l(),bp=a("li"),qne=a("strong"),$ho=o("distilbert"),kho=o(" \u2014 "),uI=a("a"),Sho=o("DistilBertModel"),Rho=o(" (DistilBERT model)"),Bho=l(),vp=a("li"),Nne=a("strong"),Pho=o("dpr"),Iho=o(" \u2014 "),_I=a("a"),qho=o("DPRQuestionEncoder"),Nho=o(" (DPR model)"),jho=l(),Fp=a("li"),jne=a("strong"),Dho=o("dpt"),Gho=o(" \u2014 "),bI=a("a"),Oho=o("DPTModel"),Vho=o(" (DPT model)"),Xho=l(),Tp=a("li"),Dne=a("strong"),zho=o("electra"),Qho=o(" \u2014 "),vI=a("a"),Who=o("ElectraModel"),Hho=o(" (ELECTRA model)"),Uho=l(),Mp=a("li"),Gne=a("strong"),Jho=o("flaubert"),Yho=o(" \u2014 "),FI=a("a"),Kho=o("FlaubertModel"),Zho=o(" (FlauBERT model)"),epo=l(),Ep=a("li"),One=a("strong"),opo=o("flava"),rpo=o(" \u2014 "),TI=a("a"),tpo=o("FlavaModel"),apo=o(" (Flava model)"),npo=l(),Cp=a("li"),Vne=a("strong"),spo=o("fnet"),lpo=o(" \u2014 "),MI=a("a"),ipo=o("FNetModel"),dpo=o(" (FNet model)"),cpo=l(),wp=a("li"),Xne=a("strong"),fpo=o("fsmt"),mpo=o(" \u2014 "),EI=a("a"),gpo=o("FSMTModel"),hpo=o(" (FairSeq Machine-Translation model)"),ppo=l(),Ss=a("li"),zne=a("strong"),upo=o("funnel"),_po=o(" \u2014 "),CI=a("a"),bpo=o("FunnelModel"),vpo=o(" or "),wI=a("a"),Fpo=o("FunnelBaseModel"),Tpo=o(" (Funnel Transformer model)"),Mpo=l(),Ap=a("li"),Qne=a("strong"),Epo=o("glpn"),Cpo=o(" \u2014 "),AI=a("a"),wpo=o("GLPNModel"),Apo=o(" (GLPN model)"),ypo=l(),yp=a("li"),Wne=a("strong"),Lpo=o("gpt2"),xpo=o(" \u2014 "),yI=a("a"),$po=o("GPT2Model"),kpo=o(" (OpenAI GPT-2 model)"),Spo=l(),Lp=a("li"),Hne=a("strong"),Rpo=o("gpt_neo"),Bpo=o(" \u2014 "),LI=a("a"),Ppo=o("GPTNeoModel"),Ipo=o(" (GPT Neo model)"),qpo=l(),xp=a("li"),Une=a("strong"),Npo=o("gptj"),jpo=o(" \u2014 "),xI=a("a"),Dpo=o("GPTJModel"),Gpo=o(" (GPT-J model)"),Opo=l(),$p=a("li"),Jne=a("strong"),Vpo=o("hubert"),Xpo=o(" \u2014 "),$I=a("a"),zpo=o("HubertModel"),Qpo=o(" (Hubert model)"),Wpo=l(),kp=a("li"),Yne=a("strong"),Hpo=o("ibert"),Upo=o(" \u2014 "),kI=a("a"),Jpo=o("IBertModel"),Ypo=o(" (I-BERT model)"),Kpo=l(),Sp=a("li"),Kne=a("strong"),Zpo=o("imagegpt"),euo=o(" \u2014 "),SI=a("a"),ouo=o("ImageGPTModel"),ruo=o(" (ImageGPT model)"),tuo=l(),Rp=a("li"),Zne=a("strong"),auo=o("layoutlm"),nuo=o(" \u2014 "),RI=a("a"),suo=o("LayoutLMModel"),luo=o(" (LayoutLM model)"),iuo=l(),Bp=a("li"),ese=a("strong"),duo=o("layoutlmv2"),cuo=o(" \u2014 "),BI=a("a"),fuo=o("LayoutLMv2Model"),muo=o(" (LayoutLMv2 model)"),guo=l(),Pp=a("li"),ose=a("strong"),huo=o("led"),puo=o(" \u2014 "),PI=a("a"),uuo=o("LEDModel"),_uo=o(" (LED model)"),buo=l(),Ip=a("li"),rse=a("strong"),vuo=o("longformer"),Fuo=o(" \u2014 "),II=a("a"),Tuo=o("LongformerModel"),Muo=o(" (Longformer model)"),Euo=l(),qp=a("li"),tse=a("strong"),Cuo=o("luke"),wuo=o(" \u2014 "),qI=a("a"),Auo=o("LukeModel"),yuo=o(" (LUKE model)"),Luo=l(),Np=a("li"),ase=a("strong"),xuo=o("lxmert"),$uo=o(" \u2014 "),NI=a("a"),kuo=o("LxmertModel"),Suo=o(" (LXMERT model)"),Ruo=l(),jp=a("li"),nse=a("strong"),Buo=o("m2m_100"),Puo=o(" \u2014 "),jI=a("a"),Iuo=o("M2M100Model"),quo=o(" (M2M100 model)"),Nuo=l(),Dp=a("li"),sse=a("strong"),juo=o("marian"),Duo=o(" \u2014 "),DI=a("a"),Guo=o("MarianModel"),Ouo=o(" (Marian model)"),Vuo=l(),Gp=a("li"),lse=a("strong"),Xuo=o("maskformer"),zuo=o(" \u2014 "),GI=a("a"),Quo=o("MaskFormerModel"),Wuo=o(" (MaskFormer model)"),Huo=l(),Op=a("li"),ise=a("strong"),Uuo=o("mbart"),Juo=o(" \u2014 "),OI=a("a"),Yuo=o("MBartModel"),Kuo=o(" (mBART model)"),Zuo=l(),Vp=a("li"),dse=a("strong"),e_o=o("megatron-bert"),o_o=o(" \u2014 "),VI=a("a"),r_o=o("MegatronBertModel"),t_o=o(" (MegatronBert model)"),a_o=l(),Xp=a("li"),cse=a("strong"),n_o=o("mobilebert"),s_o=o(" \u2014 "),XI=a("a"),l_o=o("MobileBertModel"),i_o=o(" (MobileBERT model)"),d_o=l(),zp=a("li"),fse=a("strong"),c_o=o("mobilevit"),f_o=o(" \u2014 "),zI=a("a"),m_o=o("MobileViTModel"),g_o=o(" (MobileViT model)"),h_o=l(),Qp=a("li"),mse=a("strong"),p_o=o("mpnet"),u_o=o(" \u2014 "),QI=a("a"),__o=o("MPNetModel"),b_o=o(" (MPNet model)"),v_o=l(),Wp=a("li"),gse=a("strong"),F_o=o("mt5"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("MT5Model"),E_o=o(" (mT5 model)"),C_o=l(),Hp=a("li"),hse=a("strong"),w_o=o("nystromformer"),A_o=o(" \u2014 "),HI=a("a"),y_o=o("NystromformerModel"),L_o=o(" (Nystromformer model)"),x_o=l(),Up=a("li"),pse=a("strong"),$_o=o("openai-gpt"),k_o=o(" \u2014 "),UI=a("a"),S_o=o("OpenAIGPTModel"),R_o=o(" (OpenAI GPT model)"),B_o=l(),Jp=a("li"),use=a("strong"),P_o=o("opt"),I_o=o(" \u2014 "),JI=a("a"),q_o=o("OPTModel"),N_o=o(" (OPT model)"),j_o=l(),Yp=a("li"),_se=a("strong"),D_o=o("pegasus"),G_o=o(" \u2014 "),YI=a("a"),O_o=o("PegasusModel"),V_o=o(" (Pegasus model)"),X_o=l(),Kp=a("li"),bse=a("strong"),z_o=o("perceiver"),Q_o=o(" \u2014 "),KI=a("a"),W_o=o("PerceiverModel"),H_o=o(" (Perceiver model)"),U_o=l(),Zp=a("li"),vse=a("strong"),J_o=o("plbart"),Y_o=o(" \u2014 "),ZI=a("a"),K_o=o("PLBartModel"),Z_o=o(" (PLBart model)"),e2o=l(),eu=a("li"),Fse=a("strong"),o2o=o("poolformer"),r2o=o(" \u2014 "),eq=a("a"),t2o=o("PoolFormerModel"),a2o=o(" (PoolFormer model)"),n2o=l(),ou=a("li"),Tse=a("strong"),s2o=o("prophetnet"),l2o=o(" \u2014 "),oq=a("a"),i2o=o("ProphetNetModel"),d2o=o(" (ProphetNet model)"),c2o=l(),ru=a("li"),Mse=a("strong"),f2o=o("qdqbert"),m2o=o(" \u2014 "),rq=a("a"),g2o=o("QDQBertModel"),h2o=o(" (QDQBert model)"),p2o=l(),tu=a("li"),Ese=a("strong"),u2o=o("reformer"),_2o=o(" \u2014 "),tq=a("a"),b2o=o("ReformerModel"),v2o=o(" (Reformer model)"),F2o=l(),au=a("li"),Cse=a("strong"),T2o=o("regnet"),M2o=o(" \u2014 "),aq=a("a"),E2o=o("RegNetModel"),C2o=o(" (RegNet model)"),w2o=l(),nu=a("li"),wse=a("strong"),A2o=o("rembert"),y2o=o(" \u2014 "),nq=a("a"),L2o=o("RemBertModel"),x2o=o(" (RemBERT model)"),$2o=l(),su=a("li"),Ase=a("strong"),k2o=o("resnet"),S2o=o(" \u2014 "),sq=a("a"),R2o=o("ResNetModel"),B2o=o(" (ResNet model)"),P2o=l(),lu=a("li"),yse=a("strong"),I2o=o("retribert"),q2o=o(" \u2014 "),lq=a("a"),N2o=o("RetriBertModel"),j2o=o(" (RetriBERT model)"),D2o=l(),iu=a("li"),Lse=a("strong"),G2o=o("roberta"),O2o=o(" \u2014 "),iq=a("a"),V2o=o("RobertaModel"),X2o=o(" (RoBERTa model)"),z2o=l(),du=a("li"),xse=a("strong"),Q2o=o("roformer"),W2o=o(" \u2014 "),dq=a("a"),H2o=o("RoFormerModel"),U2o=o(" (RoFormer model)"),J2o=l(),cu=a("li"),$se=a("strong"),Y2o=o("segformer"),K2o=o(" \u2014 "),cq=a("a"),Z2o=o("SegformerModel"),e1o=o(" (SegFormer model)"),o1o=l(),fu=a("li"),kse=a("strong"),r1o=o("sew"),t1o=o(" \u2014 "),fq=a("a"),a1o=o("SEWModel"),n1o=o(" (SEW model)"),s1o=l(),mu=a("li"),Sse=a("strong"),l1o=o("sew-d"),i1o=o(" \u2014 "),mq=a("a"),d1o=o("SEWDModel"),c1o=o(" (SEW-D model)"),f1o=l(),gu=a("li"),Rse=a("strong"),m1o=o("speech_to_text"),g1o=o(" \u2014 "),gq=a("a"),h1o=o("Speech2TextModel"),p1o=o(" (Speech2Text model)"),u1o=l(),hu=a("li"),Bse=a("strong"),_1o=o("splinter"),b1o=o(" \u2014 "),hq=a("a"),v1o=o("SplinterModel"),F1o=o(" (Splinter model)"),T1o=l(),pu=a("li"),Pse=a("strong"),M1o=o("squeezebert"),E1o=o(" \u2014 "),pq=a("a"),C1o=o("SqueezeBertModel"),w1o=o(" (SqueezeBERT model)"),A1o=l(),uu=a("li"),Ise=a("strong"),y1o=o("swin"),L1o=o(" \u2014 "),uq=a("a"),x1o=o("SwinModel"),$1o=o(" (Swin model)"),k1o=l(),_u=a("li"),qse=a("strong"),S1o=o("t5"),R1o=o(" \u2014 "),_q=a("a"),B1o=o("T5Model"),P1o=o(" (T5 model)"),I1o=l(),bu=a("li"),Nse=a("strong"),q1o=o("tapas"),N1o=o(" \u2014 "),bq=a("a"),j1o=o("TapasModel"),D1o=o(" (TAPAS model)"),G1o=l(),vu=a("li"),jse=a("strong"),O1o=o("transfo-xl"),V1o=o(" \u2014 "),vq=a("a"),X1o=o("TransfoXLModel"),z1o=o(" (Transformer-XL model)"),Q1o=l(),Fu=a("li"),Dse=a("strong"),W1o=o("unispeech"),H1o=o(" \u2014 "),Fq=a("a"),U1o=o("UniSpeechModel"),J1o=o(" (UniSpeech model)"),Y1o=l(),Tu=a("li"),Gse=a("strong"),K1o=o("unispeech-sat"),Z1o=o(" \u2014 "),Tq=a("a"),ebo=o("UniSpeechSatModel"),obo=o(" (UniSpeechSat model)"),rbo=l(),Mu=a("li"),Ose=a("strong"),tbo=o("van"),abo=o(" \u2014 "),Mq=a("a"),nbo=o("VanModel"),sbo=o(" (VAN model)"),lbo=l(),Eu=a("li"),Vse=a("strong"),ibo=o("vilt"),dbo=o(" \u2014 "),Eq=a("a"),cbo=o("ViltModel"),fbo=o(" (ViLT model)"),mbo=l(),Cu=a("li"),Xse=a("strong"),gbo=o("vision-text-dual-encoder"),hbo=o(" \u2014 "),Cq=a("a"),pbo=o("VisionTextDualEncoderModel"),ubo=o(" (VisionTextDualEncoder model)"),_bo=l(),wu=a("li"),zse=a("strong"),bbo=o("visual_bert"),vbo=o(" \u2014 "),wq=a("a"),Fbo=o("VisualBertModel"),Tbo=o(" (VisualBert model)"),Mbo=l(),Au=a("li"),Qse=a("strong"),Ebo=o("vit"),Cbo=o(" \u2014 "),Aq=a("a"),wbo=o("ViTModel"),Abo=o(" (ViT model)"),ybo=l(),yu=a("li"),Wse=a("strong"),Lbo=o("vit_mae"),xbo=o(" \u2014 "),yq=a("a"),$bo=o("ViTMAEModel"),kbo=o(" (ViTMAE model)"),Sbo=l(),Lu=a("li"),Hse=a("strong"),Rbo=o("wav2vec2"),Bbo=o(" \u2014 "),Lq=a("a"),Pbo=o("Wav2Vec2Model"),Ibo=o(" (Wav2Vec2 model)"),qbo=l(),xu=a("li"),Use=a("strong"),Nbo=o("wavlm"),jbo=o(" \u2014 "),xq=a("a"),Dbo=o("WavLMModel"),Gbo=o(" (WavLM model)"),Obo=l(),$u=a("li"),Jse=a("strong"),Vbo=o("xglm"),Xbo=o(" \u2014 "),$q=a("a"),zbo=o("XGLMModel"),Qbo=o(" (XGLM model)"),Wbo=l(),ku=a("li"),Yse=a("strong"),Hbo=o("xlm"),Ubo=o(" \u2014 "),kq=a("a"),Jbo=o("XLMModel"),Ybo=o(" (XLM model)"),Kbo=l(),Su=a("li"),Kse=a("strong"),Zbo=o("xlm-prophetnet"),e5o=o(" \u2014 "),Sq=a("a"),o5o=o("XLMProphetNetModel"),r5o=o(" (XLMProphetNet model)"),t5o=l(),Ru=a("li"),Zse=a("strong"),a5o=o("xlm-roberta"),n5o=o(" \u2014 "),Rq=a("a"),s5o=o("XLMRobertaModel"),l5o=o(" (XLM-RoBERTa model)"),i5o=l(),Bu=a("li"),ele=a("strong"),d5o=o("xlm-roberta-xl"),c5o=o(" \u2014 "),Bq=a("a"),f5o=o("XLMRobertaXLModel"),m5o=o(" (XLM-RoBERTa-XL model)"),g5o=l(),Pu=a("li"),ole=a("strong"),h5o=o("xlnet"),p5o=o(" \u2014 "),Pq=a("a"),u5o=o("XLNetModel"),_5o=o(" (XLNet model)"),b5o=l(),Iu=a("li"),rle=a("strong"),v5o=o("yolos"),F5o=o(" \u2014 "),Iq=a("a"),T5o=o("YolosModel"),M5o=o(" (YOLOS model)"),E5o=l(),qu=a("li"),tle=a("strong"),C5o=o("yoso"),w5o=o(" \u2014 "),qq=a("a"),A5o=o("YosoModel"),y5o=o(" (YOSO model)"),L5o=l(),Nu=a("p"),x5o=o("The model is set in evaluation mode by default using "),ale=a("code"),$5o=o("model.eval()"),k5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=a("code"),S5o=o("model.train()"),R5o=l(),F(ju.$$.fragment),FIe=l(),Ci=a("h2"),Du=a("a"),sle=a("span"),F(S6.$$.fragment),B5o=l(),lle=a("span"),P5o=o("AutoModelForPreTraining"),TIe=l(),xo=a("div"),F(R6.$$.fragment),I5o=l(),wi=a("p"),q5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nq=a("a"),N5o=o("from_pretrained()"),j5o=o(" class method or the "),jq=a("a"),D5o=o("from_config()"),G5o=o(` class
method.`),O5o=l(),B6=a("p"),V5o=o("This class cannot be instantiated directly using "),ile=a("code"),X5o=o("__init__()"),z5o=o(" (throws an error)."),Q5o=l(),rt=a("div"),F(P6.$$.fragment),W5o=l(),dle=a("p"),H5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U5o=l(),Ai=a("p"),J5o=o(`Note:
Loading a model from its configuration file does `),cle=a("strong"),Y5o=o("not"),K5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dq=a("a"),Z5o=o("from_pretrained()"),evo=o(" to load the model weights."),ovo=l(),F(Gu.$$.fragment),rvo=l(),Ue=a("div"),F(I6.$$.fragment),tvo=l(),fle=a("p"),avo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nvo=l(),ya=a("p"),svo=o("The model class to instantiate is selected based on the "),mle=a("code"),lvo=o("model_type"),ivo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),dvo=o("pretrained_model_name_or_path"),cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),fvo=o("pretrained_model_name_or_path"),mvo=o(":"),gvo=l(),G=a("ul"),Ou=a("li"),ple=a("strong"),hvo=o("albert"),pvo=o(" \u2014 "),Gq=a("a"),uvo=o("AlbertForPreTraining"),_vo=o(" (ALBERT model)"),bvo=l(),Vu=a("li"),ule=a("strong"),vvo=o("bart"),Fvo=o(" \u2014 "),Oq=a("a"),Tvo=o("BartForConditionalGeneration"),Mvo=o(" (BART model)"),Evo=l(),Xu=a("li"),_le=a("strong"),Cvo=o("bert"),wvo=o(" \u2014 "),Vq=a("a"),Avo=o("BertForPreTraining"),yvo=o(" (BERT model)"),Lvo=l(),zu=a("li"),ble=a("strong"),xvo=o("big_bird"),$vo=o(" \u2014 "),Xq=a("a"),kvo=o("BigBirdForPreTraining"),Svo=o(" (BigBird model)"),Rvo=l(),Qu=a("li"),vle=a("strong"),Bvo=o("camembert"),Pvo=o(" \u2014 "),zq=a("a"),Ivo=o("CamembertForMaskedLM"),qvo=o(" (CamemBERT model)"),Nvo=l(),Wu=a("li"),Fle=a("strong"),jvo=o("ctrl"),Dvo=o(" \u2014 "),Qq=a("a"),Gvo=o("CTRLLMHeadModel"),Ovo=o(" (CTRL model)"),Vvo=l(),Hu=a("li"),Tle=a("strong"),Xvo=o("data2vec-text"),zvo=o(" \u2014 "),Wq=a("a"),Qvo=o("Data2VecTextForMaskedLM"),Wvo=o(" (Data2VecText model)"),Hvo=l(),Uu=a("li"),Mle=a("strong"),Uvo=o("deberta"),Jvo=o(" \u2014 "),Hq=a("a"),Yvo=o("DebertaForMaskedLM"),Kvo=o(" (DeBERTa model)"),Zvo=l(),Ju=a("li"),Ele=a("strong"),eFo=o("deberta-v2"),oFo=o(" \u2014 "),Uq=a("a"),rFo=o("DebertaV2ForMaskedLM"),tFo=o(" (DeBERTa-v2 model)"),aFo=l(),Yu=a("li"),Cle=a("strong"),nFo=o("distilbert"),sFo=o(" \u2014 "),Jq=a("a"),lFo=o("DistilBertForMaskedLM"),iFo=o(" (DistilBERT model)"),dFo=l(),Ku=a("li"),wle=a("strong"),cFo=o("electra"),fFo=o(" \u2014 "),Yq=a("a"),mFo=o("ElectraForPreTraining"),gFo=o(" (ELECTRA model)"),hFo=l(),Zu=a("li"),Ale=a("strong"),pFo=o("flaubert"),uFo=o(" \u2014 "),Kq=a("a"),_Fo=o("FlaubertWithLMHeadModel"),bFo=o(" (FlauBERT model)"),vFo=l(),e_=a("li"),yle=a("strong"),FFo=o("flava"),TFo=o(" \u2014 "),Zq=a("a"),MFo=o("FlavaForPreTraining"),EFo=o(" (Flava model)"),CFo=l(),o_=a("li"),Lle=a("strong"),wFo=o("fnet"),AFo=o(" \u2014 "),eN=a("a"),yFo=o("FNetForPreTraining"),LFo=o(" (FNet model)"),xFo=l(),r_=a("li"),xle=a("strong"),$Fo=o("fsmt"),kFo=o(" \u2014 "),oN=a("a"),SFo=o("FSMTForConditionalGeneration"),RFo=o(" (FairSeq Machine-Translation model)"),BFo=l(),t_=a("li"),$le=a("strong"),PFo=o("funnel"),IFo=o(" \u2014 "),rN=a("a"),qFo=o("FunnelForPreTraining"),NFo=o(" (Funnel Transformer model)"),jFo=l(),a_=a("li"),kle=a("strong"),DFo=o("gpt2"),GFo=o(" \u2014 "),tN=a("a"),OFo=o("GPT2LMHeadModel"),VFo=o(" (OpenAI GPT-2 model)"),XFo=l(),n_=a("li"),Sle=a("strong"),zFo=o("ibert"),QFo=o(" \u2014 "),aN=a("a"),WFo=o("IBertForMaskedLM"),HFo=o(" (I-BERT model)"),UFo=l(),s_=a("li"),Rle=a("strong"),JFo=o("layoutlm"),YFo=o(" \u2014 "),nN=a("a"),KFo=o("LayoutLMForMaskedLM"),ZFo=o(" (LayoutLM model)"),e0o=l(),l_=a("li"),Ble=a("strong"),o0o=o("longformer"),r0o=o(" \u2014 "),sN=a("a"),t0o=o("LongformerForMaskedLM"),a0o=o(" (Longformer model)"),n0o=l(),i_=a("li"),Ple=a("strong"),s0o=o("lxmert"),l0o=o(" \u2014 "),lN=a("a"),i0o=o("LxmertForPreTraining"),d0o=o(" (LXMERT model)"),c0o=l(),d_=a("li"),Ile=a("strong"),f0o=o("megatron-bert"),m0o=o(" \u2014 "),iN=a("a"),g0o=o("MegatronBertForPreTraining"),h0o=o(" (MegatronBert model)"),p0o=l(),c_=a("li"),qle=a("strong"),u0o=o("mobilebert"),_0o=o(" \u2014 "),dN=a("a"),b0o=o("MobileBertForPreTraining"),v0o=o(" (MobileBERT model)"),F0o=l(),f_=a("li"),Nle=a("strong"),T0o=o("mpnet"),M0o=o(" \u2014 "),cN=a("a"),E0o=o("MPNetForMaskedLM"),C0o=o(" (MPNet model)"),w0o=l(),m_=a("li"),jle=a("strong"),A0o=o("openai-gpt"),y0o=o(" \u2014 "),fN=a("a"),L0o=o("OpenAIGPTLMHeadModel"),x0o=o(" (OpenAI GPT model)"),$0o=l(),g_=a("li"),Dle=a("strong"),k0o=o("retribert"),S0o=o(" \u2014 "),mN=a("a"),R0o=o("RetriBertModel"),B0o=o(" (RetriBERT model)"),P0o=l(),h_=a("li"),Gle=a("strong"),I0o=o("roberta"),q0o=o(" \u2014 "),gN=a("a"),N0o=o("RobertaForMaskedLM"),j0o=o(" (RoBERTa model)"),D0o=l(),p_=a("li"),Ole=a("strong"),G0o=o("squeezebert"),O0o=o(" \u2014 "),hN=a("a"),V0o=o("SqueezeBertForMaskedLM"),X0o=o(" (SqueezeBERT model)"),z0o=l(),u_=a("li"),Vle=a("strong"),Q0o=o("t5"),W0o=o(" \u2014 "),pN=a("a"),H0o=o("T5ForConditionalGeneration"),U0o=o(" (T5 model)"),J0o=l(),__=a("li"),Xle=a("strong"),Y0o=o("tapas"),K0o=o(" \u2014 "),uN=a("a"),Z0o=o("TapasForMaskedLM"),eTo=o(" (TAPAS model)"),oTo=l(),b_=a("li"),zle=a("strong"),rTo=o("transfo-xl"),tTo=o(" \u2014 "),_N=a("a"),aTo=o("TransfoXLLMHeadModel"),nTo=o(" (Transformer-XL model)"),sTo=l(),v_=a("li"),Qle=a("strong"),lTo=o("unispeech"),iTo=o(" \u2014 "),bN=a("a"),dTo=o("UniSpeechForPreTraining"),cTo=o(" (UniSpeech model)"),fTo=l(),F_=a("li"),Wle=a("strong"),mTo=o("unispeech-sat"),gTo=o(" \u2014 "),vN=a("a"),hTo=o("UniSpeechSatForPreTraining"),pTo=o(" (UniSpeechSat model)"),uTo=l(),T_=a("li"),Hle=a("strong"),_To=o("visual_bert"),bTo=o(" \u2014 "),FN=a("a"),vTo=o("VisualBertForPreTraining"),FTo=o(" (VisualBert model)"),TTo=l(),M_=a("li"),Ule=a("strong"),MTo=o("vit_mae"),ETo=o(" \u2014 "),TN=a("a"),CTo=o("ViTMAEForPreTraining"),wTo=o(" (ViTMAE model)"),ATo=l(),E_=a("li"),Jle=a("strong"),yTo=o("wav2vec2"),LTo=o(" \u2014 "),MN=a("a"),xTo=o("Wav2Vec2ForPreTraining"),$To=o(" (Wav2Vec2 model)"),kTo=l(),C_=a("li"),Yle=a("strong"),STo=o("xlm"),RTo=o(" \u2014 "),EN=a("a"),BTo=o("XLMWithLMHeadModel"),PTo=o(" (XLM model)"),ITo=l(),w_=a("li"),Kle=a("strong"),qTo=o("xlm-roberta"),NTo=o(" \u2014 "),CN=a("a"),jTo=o("XLMRobertaForMaskedLM"),DTo=o(" (XLM-RoBERTa model)"),GTo=l(),A_=a("li"),Zle=a("strong"),OTo=o("xlm-roberta-xl"),VTo=o(" \u2014 "),wN=a("a"),XTo=o("XLMRobertaXLForMaskedLM"),zTo=o(" (XLM-RoBERTa-XL model)"),QTo=l(),y_=a("li"),eie=a("strong"),WTo=o("xlnet"),HTo=o(" \u2014 "),AN=a("a"),UTo=o("XLNetLMHeadModel"),JTo=o(" (XLNet model)"),YTo=l(),L_=a("p"),KTo=o("The model is set in evaluation mode by default using "),oie=a("code"),ZTo=o("model.eval()"),e7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),o7o=o("model.train()"),r7o=l(),F(x_.$$.fragment),MIe=l(),yi=a("h2"),$_=a("a"),tie=a("span"),F(q6.$$.fragment),t7o=l(),aie=a("span"),a7o=o("AutoModelForCausalLM"),EIe=l(),$o=a("div"),F(N6.$$.fragment),n7o=l(),Li=a("p"),s7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yN=a("a"),l7o=o("from_pretrained()"),i7o=o(" class method or the "),LN=a("a"),d7o=o("from_config()"),c7o=o(` class
method.`),f7o=l(),j6=a("p"),m7o=o("This class cannot be instantiated directly using "),nie=a("code"),g7o=o("__init__()"),h7o=o(" (throws an error)."),p7o=l(),tt=a("div"),F(D6.$$.fragment),u7o=l(),sie=a("p"),_7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b7o=l(),xi=a("p"),v7o=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),F7o=o("not"),T7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),M7o=o("from_pretrained()"),E7o=o(" to load the model weights."),C7o=l(),F(k_.$$.fragment),w7o=l(),Je=a("div"),F(G6.$$.fragment),A7o=l(),iie=a("p"),y7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L7o=l(),La=a("p"),x7o=o("The model class to instantiate is selected based on the "),die=a("code"),$7o=o("model_type"),k7o=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),S7o=o("pretrained_model_name_or_path"),R7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),B7o=o("pretrained_model_name_or_path"),P7o=o(":"),I7o=l(),z=a("ul"),S_=a("li"),mie=a("strong"),q7o=o("bart"),N7o=o(" \u2014 "),$N=a("a"),j7o=o("BartForCausalLM"),D7o=o(" (BART model)"),G7o=l(),R_=a("li"),gie=a("strong"),O7o=o("bert"),V7o=o(" \u2014 "),kN=a("a"),X7o=o("BertLMHeadModel"),z7o=o(" (BERT model)"),Q7o=l(),B_=a("li"),hie=a("strong"),W7o=o("bert-generation"),H7o=o(" \u2014 "),SN=a("a"),U7o=o("BertGenerationDecoder"),J7o=o(" (Bert Generation model)"),Y7o=l(),P_=a("li"),pie=a("strong"),K7o=o("big_bird"),Z7o=o(" \u2014 "),RN=a("a"),eMo=o("BigBirdForCausalLM"),oMo=o(" (BigBird model)"),rMo=l(),I_=a("li"),uie=a("strong"),tMo=o("bigbird_pegasus"),aMo=o(" \u2014 "),BN=a("a"),nMo=o("BigBirdPegasusForCausalLM"),sMo=o(" (BigBirdPegasus model)"),lMo=l(),q_=a("li"),_ie=a("strong"),iMo=o("blenderbot"),dMo=o(" \u2014 "),PN=a("a"),cMo=o("BlenderbotForCausalLM"),fMo=o(" (Blenderbot model)"),mMo=l(),N_=a("li"),bie=a("strong"),gMo=o("blenderbot-small"),hMo=o(" \u2014 "),IN=a("a"),pMo=o("BlenderbotSmallForCausalLM"),uMo=o(" (BlenderbotSmall model)"),_Mo=l(),j_=a("li"),vie=a("strong"),bMo=o("camembert"),vMo=o(" \u2014 "),qN=a("a"),FMo=o("CamembertForCausalLM"),TMo=o(" (CamemBERT model)"),MMo=l(),D_=a("li"),Fie=a("strong"),EMo=o("ctrl"),CMo=o(" \u2014 "),NN=a("a"),wMo=o("CTRLLMHeadModel"),AMo=o(" (CTRL model)"),yMo=l(),G_=a("li"),Tie=a("strong"),LMo=o("data2vec-text"),xMo=o(" \u2014 "),jN=a("a"),$Mo=o("Data2VecTextForCausalLM"),kMo=o(" (Data2VecText model)"),SMo=l(),O_=a("li"),Mie=a("strong"),RMo=o("electra"),BMo=o(" \u2014 "),DN=a("a"),PMo=o("ElectraForCausalLM"),IMo=o(" (ELECTRA model)"),qMo=l(),V_=a("li"),Eie=a("strong"),NMo=o("gpt2"),jMo=o(" \u2014 "),GN=a("a"),DMo=o("GPT2LMHeadModel"),GMo=o(" (OpenAI GPT-2 model)"),OMo=l(),X_=a("li"),Cie=a("strong"),VMo=o("gpt_neo"),XMo=o(" \u2014 "),ON=a("a"),zMo=o("GPTNeoForCausalLM"),QMo=o(" (GPT Neo model)"),WMo=l(),z_=a("li"),wie=a("strong"),HMo=o("gptj"),UMo=o(" \u2014 "),VN=a("a"),JMo=o("GPTJForCausalLM"),YMo=o(" (GPT-J model)"),KMo=l(),Q_=a("li"),Aie=a("strong"),ZMo=o("marian"),e4o=o(" \u2014 "),XN=a("a"),o4o=o("MarianForCausalLM"),r4o=o(" (Marian model)"),t4o=l(),W_=a("li"),yie=a("strong"),a4o=o("mbart"),n4o=o(" \u2014 "),zN=a("a"),s4o=o("MBartForCausalLM"),l4o=o(" (mBART model)"),i4o=l(),H_=a("li"),Lie=a("strong"),d4o=o("megatron-bert"),c4o=o(" \u2014 "),QN=a("a"),f4o=o("MegatronBertForCausalLM"),m4o=o(" (MegatronBert model)"),g4o=l(),U_=a("li"),xie=a("strong"),h4o=o("openai-gpt"),p4o=o(" \u2014 "),WN=a("a"),u4o=o("OpenAIGPTLMHeadModel"),_4o=o(" (OpenAI GPT model)"),b4o=l(),J_=a("li"),$ie=a("strong"),v4o=o("opt"),F4o=o(" \u2014 "),HN=a("a"),T4o=o("OPTForCausalLM"),M4o=o(" (OPT model)"),E4o=l(),Y_=a("li"),kie=a("strong"),C4o=o("pegasus"),w4o=o(" \u2014 "),UN=a("a"),A4o=o("PegasusForCausalLM"),y4o=o(" (Pegasus model)"),L4o=l(),K_=a("li"),Sie=a("strong"),x4o=o("plbart"),$4o=o(" \u2014 "),JN=a("a"),k4o=o("PLBartForCausalLM"),S4o=o(" (PLBart model)"),R4o=l(),Z_=a("li"),Rie=a("strong"),B4o=o("prophetnet"),P4o=o(" \u2014 "),YN=a("a"),I4o=o("ProphetNetForCausalLM"),q4o=o(" (ProphetNet model)"),N4o=l(),e2=a("li"),Bie=a("strong"),j4o=o("qdqbert"),D4o=o(" \u2014 "),KN=a("a"),G4o=o("QDQBertLMHeadModel"),O4o=o(" (QDQBert model)"),V4o=l(),o2=a("li"),Pie=a("strong"),X4o=o("reformer"),z4o=o(" \u2014 "),ZN=a("a"),Q4o=o("ReformerModelWithLMHead"),W4o=o(" (Reformer model)"),H4o=l(),r2=a("li"),Iie=a("strong"),U4o=o("rembert"),J4o=o(" \u2014 "),ej=a("a"),Y4o=o("RemBertForCausalLM"),K4o=o(" (RemBERT model)"),Z4o=l(),t2=a("li"),qie=a("strong"),eEo=o("roberta"),oEo=o(" \u2014 "),oj=a("a"),rEo=o("RobertaForCausalLM"),tEo=o(" (RoBERTa model)"),aEo=l(),a2=a("li"),Nie=a("strong"),nEo=o("roformer"),sEo=o(" \u2014 "),rj=a("a"),lEo=o("RoFormerForCausalLM"),iEo=o(" (RoFormer model)"),dEo=l(),n2=a("li"),jie=a("strong"),cEo=o("speech_to_text_2"),fEo=o(" \u2014 "),tj=a("a"),mEo=o("Speech2Text2ForCausalLM"),gEo=o(" (Speech2Text2 model)"),hEo=l(),s2=a("li"),Die=a("strong"),pEo=o("transfo-xl"),uEo=o(" \u2014 "),aj=a("a"),_Eo=o("TransfoXLLMHeadModel"),bEo=o(" (Transformer-XL model)"),vEo=l(),l2=a("li"),Gie=a("strong"),FEo=o("trocr"),TEo=o(" \u2014 "),nj=a("a"),MEo=o("TrOCRForCausalLM"),EEo=o(" (TrOCR model)"),CEo=l(),i2=a("li"),Oie=a("strong"),wEo=o("xglm"),AEo=o(" \u2014 "),sj=a("a"),yEo=o("XGLMForCausalLM"),LEo=o(" (XGLM model)"),xEo=l(),d2=a("li"),Vie=a("strong"),$Eo=o("xlm"),kEo=o(" \u2014 "),lj=a("a"),SEo=o("XLMWithLMHeadModel"),REo=o(" (XLM model)"),BEo=l(),c2=a("li"),Xie=a("strong"),PEo=o("xlm-prophetnet"),IEo=o(" \u2014 "),ij=a("a"),qEo=o("XLMProphetNetForCausalLM"),NEo=o(" (XLMProphetNet model)"),jEo=l(),f2=a("li"),zie=a("strong"),DEo=o("xlm-roberta"),GEo=o(" \u2014 "),dj=a("a"),OEo=o("XLMRobertaForCausalLM"),VEo=o(" (XLM-RoBERTa model)"),XEo=l(),m2=a("li"),Qie=a("strong"),zEo=o("xlm-roberta-xl"),QEo=o(" \u2014 "),cj=a("a"),WEo=o("XLMRobertaXLForCausalLM"),HEo=o(" (XLM-RoBERTa-XL model)"),UEo=l(),g2=a("li"),Wie=a("strong"),JEo=o("xlnet"),YEo=o(" \u2014 "),fj=a("a"),KEo=o("XLNetLMHeadModel"),ZEo=o(" (XLNet model)"),eCo=l(),h2=a("p"),oCo=o("The model is set in evaluation mode by default using "),Hie=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),aCo=o("model.train()"),nCo=l(),F(p2.$$.fragment),CIe=l(),$i=a("h2"),u2=a("a"),Jie=a("span"),F(O6.$$.fragment),sCo=l(),Yie=a("span"),lCo=o("AutoModelForMaskedLM"),wIe=l(),ko=a("div"),F(V6.$$.fragment),iCo=l(),ki=a("p"),dCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mj=a("a"),cCo=o("from_pretrained()"),fCo=o(" class method or the "),gj=a("a"),mCo=o("from_config()"),gCo=o(` class
method.`),hCo=l(),X6=a("p"),pCo=o("This class cannot be instantiated directly using "),Kie=a("code"),uCo=o("__init__()"),_Co=o(" (throws an error)."),bCo=l(),at=a("div"),F(z6.$$.fragment),vCo=l(),Zie=a("p"),FCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TCo=l(),Si=a("p"),MCo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),ECo=o("not"),CCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),wCo=o("from_pretrained()"),ACo=o(" to load the model weights."),yCo=l(),F(_2.$$.fragment),LCo=l(),Ye=a("div"),F(Q6.$$.fragment),xCo=l(),ode=a("p"),$Co=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kCo=l(),xa=a("p"),SCo=o("The model class to instantiate is selected based on the "),rde=a("code"),RCo=o("model_type"),BCo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),PCo=o("pretrained_model_name_or_path"),ICo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),qCo=o("pretrained_model_name_or_path"),NCo=o(":"),jCo=l(),Q=a("ul"),b2=a("li"),nde=a("strong"),DCo=o("albert"),GCo=o(" \u2014 "),pj=a("a"),OCo=o("AlbertForMaskedLM"),VCo=o(" (ALBERT model)"),XCo=l(),v2=a("li"),sde=a("strong"),zCo=o("bart"),QCo=o(" \u2014 "),uj=a("a"),WCo=o("BartForConditionalGeneration"),HCo=o(" (BART model)"),UCo=l(),F2=a("li"),lde=a("strong"),JCo=o("bert"),YCo=o(" \u2014 "),_j=a("a"),KCo=o("BertForMaskedLM"),ZCo=o(" (BERT model)"),e3o=l(),T2=a("li"),ide=a("strong"),o3o=o("big_bird"),r3o=o(" \u2014 "),bj=a("a"),t3o=o("BigBirdForMaskedLM"),a3o=o(" (BigBird model)"),n3o=l(),M2=a("li"),dde=a("strong"),s3o=o("camembert"),l3o=o(" \u2014 "),vj=a("a"),i3o=o("CamembertForMaskedLM"),d3o=o(" (CamemBERT model)"),c3o=l(),E2=a("li"),cde=a("strong"),f3o=o("convbert"),m3o=o(" \u2014 "),Fj=a("a"),g3o=o("ConvBertForMaskedLM"),h3o=o(" (ConvBERT model)"),p3o=l(),C2=a("li"),fde=a("strong"),u3o=o("data2vec-text"),_3o=o(" \u2014 "),Tj=a("a"),b3o=o("Data2VecTextForMaskedLM"),v3o=o(" (Data2VecText model)"),F3o=l(),w2=a("li"),mde=a("strong"),T3o=o("deberta"),M3o=o(" \u2014 "),Mj=a("a"),E3o=o("DebertaForMaskedLM"),C3o=o(" (DeBERTa model)"),w3o=l(),A2=a("li"),gde=a("strong"),A3o=o("deberta-v2"),y3o=o(" \u2014 "),Ej=a("a"),L3o=o("DebertaV2ForMaskedLM"),x3o=o(" (DeBERTa-v2 model)"),$3o=l(),y2=a("li"),hde=a("strong"),k3o=o("distilbert"),S3o=o(" \u2014 "),Cj=a("a"),R3o=o("DistilBertForMaskedLM"),B3o=o(" (DistilBERT model)"),P3o=l(),L2=a("li"),pde=a("strong"),I3o=o("electra"),q3o=o(" \u2014 "),wj=a("a"),N3o=o("ElectraForMaskedLM"),j3o=o(" (ELECTRA model)"),D3o=l(),x2=a("li"),ude=a("strong"),G3o=o("flaubert"),O3o=o(" \u2014 "),Aj=a("a"),V3o=o("FlaubertWithLMHeadModel"),X3o=o(" (FlauBERT model)"),z3o=l(),$2=a("li"),_de=a("strong"),Q3o=o("fnet"),W3o=o(" \u2014 "),yj=a("a"),H3o=o("FNetForMaskedLM"),U3o=o(" (FNet model)"),J3o=l(),k2=a("li"),bde=a("strong"),Y3o=o("funnel"),K3o=o(" \u2014 "),Lj=a("a"),Z3o=o("FunnelForMaskedLM"),ewo=o(" (Funnel Transformer model)"),owo=l(),S2=a("li"),vde=a("strong"),rwo=o("ibert"),two=o(" \u2014 "),xj=a("a"),awo=o("IBertForMaskedLM"),nwo=o(" (I-BERT model)"),swo=l(),R2=a("li"),Fde=a("strong"),lwo=o("layoutlm"),iwo=o(" \u2014 "),$j=a("a"),dwo=o("LayoutLMForMaskedLM"),cwo=o(" (LayoutLM model)"),fwo=l(),B2=a("li"),Tde=a("strong"),mwo=o("longformer"),gwo=o(" \u2014 "),kj=a("a"),hwo=o("LongformerForMaskedLM"),pwo=o(" (Longformer model)"),uwo=l(),P2=a("li"),Mde=a("strong"),_wo=o("mbart"),bwo=o(" \u2014 "),Sj=a("a"),vwo=o("MBartForConditionalGeneration"),Fwo=o(" (mBART model)"),Two=l(),I2=a("li"),Ede=a("strong"),Mwo=o("megatron-bert"),Ewo=o(" \u2014 "),Rj=a("a"),Cwo=o("MegatronBertForMaskedLM"),wwo=o(" (MegatronBert model)"),Awo=l(),q2=a("li"),Cde=a("strong"),ywo=o("mobilebert"),Lwo=o(" \u2014 "),Bj=a("a"),xwo=o("MobileBertForMaskedLM"),$wo=o(" (MobileBERT model)"),kwo=l(),N2=a("li"),wde=a("strong"),Swo=o("mpnet"),Rwo=o(" \u2014 "),Pj=a("a"),Bwo=o("MPNetForMaskedLM"),Pwo=o(" (MPNet model)"),Iwo=l(),j2=a("li"),Ade=a("strong"),qwo=o("nystromformer"),Nwo=o(" \u2014 "),Ij=a("a"),jwo=o("NystromformerForMaskedLM"),Dwo=o(" (Nystromformer model)"),Gwo=l(),D2=a("li"),yde=a("strong"),Owo=o("perceiver"),Vwo=o(" \u2014 "),qj=a("a"),Xwo=o("PerceiverForMaskedLM"),zwo=o(" (Perceiver model)"),Qwo=l(),G2=a("li"),Lde=a("strong"),Wwo=o("qdqbert"),Hwo=o(" \u2014 "),Nj=a("a"),Uwo=o("QDQBertForMaskedLM"),Jwo=o(" (QDQBert model)"),Ywo=l(),O2=a("li"),xde=a("strong"),Kwo=o("reformer"),Zwo=o(" \u2014 "),jj=a("a"),eAo=o("ReformerForMaskedLM"),oAo=o(" (Reformer model)"),rAo=l(),V2=a("li"),$de=a("strong"),tAo=o("rembert"),aAo=o(" \u2014 "),Dj=a("a"),nAo=o("RemBertForMaskedLM"),sAo=o(" (RemBERT model)"),lAo=l(),X2=a("li"),kde=a("strong"),iAo=o("roberta"),dAo=o(" \u2014 "),Gj=a("a"),cAo=o("RobertaForMaskedLM"),fAo=o(" (RoBERTa model)"),mAo=l(),z2=a("li"),Sde=a("strong"),gAo=o("roformer"),hAo=o(" \u2014 "),Oj=a("a"),pAo=o("RoFormerForMaskedLM"),uAo=o(" (RoFormer model)"),_Ao=l(),Q2=a("li"),Rde=a("strong"),bAo=o("squeezebert"),vAo=o(" \u2014 "),Vj=a("a"),FAo=o("SqueezeBertForMaskedLM"),TAo=o(" (SqueezeBERT model)"),MAo=l(),W2=a("li"),Bde=a("strong"),EAo=o("tapas"),CAo=o(" \u2014 "),Xj=a("a"),wAo=o("TapasForMaskedLM"),AAo=o(" (TAPAS model)"),yAo=l(),H2=a("li"),Pde=a("strong"),LAo=o("wav2vec2"),xAo=o(" \u2014 "),Ide=a("code"),$Ao=o("Wav2Vec2ForMaskedLM"),kAo=o(" (Wav2Vec2 model)"),SAo=l(),U2=a("li"),qde=a("strong"),RAo=o("xlm"),BAo=o(" \u2014 "),zj=a("a"),PAo=o("XLMWithLMHeadModel"),IAo=o(" (XLM model)"),qAo=l(),J2=a("li"),Nde=a("strong"),NAo=o("xlm-roberta"),jAo=o(" \u2014 "),Qj=a("a"),DAo=o("XLMRobertaForMaskedLM"),GAo=o(" (XLM-RoBERTa model)"),OAo=l(),Y2=a("li"),jde=a("strong"),VAo=o("xlm-roberta-xl"),XAo=o(" \u2014 "),Wj=a("a"),zAo=o("XLMRobertaXLForMaskedLM"),QAo=o(" (XLM-RoBERTa-XL model)"),WAo=l(),K2=a("li"),Dde=a("strong"),HAo=o("yoso"),UAo=o(" \u2014 "),Hj=a("a"),JAo=o("YosoForMaskedLM"),YAo=o(" (YOSO model)"),KAo=l(),Z2=a("p"),ZAo=o("The model is set in evaluation mode by default using "),Gde=a("code"),e6o=o("model.eval()"),o6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=a("code"),r6o=o("model.train()"),t6o=l(),F(e1.$$.fragment),AIe=l(),Ri=a("h2"),o1=a("a"),Vde=a("span"),F(W6.$$.fragment),a6o=l(),Xde=a("span"),n6o=o("AutoModelForSeq2SeqLM"),yIe=l(),So=a("div"),F(H6.$$.fragment),s6o=l(),Bi=a("p"),l6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uj=a("a"),i6o=o("from_pretrained()"),d6o=o(" class method or the "),Jj=a("a"),c6o=o("from_config()"),f6o=o(` class
method.`),m6o=l(),U6=a("p"),g6o=o("This class cannot be instantiated directly using "),zde=a("code"),h6o=o("__init__()"),p6o=o(" (throws an error)."),u6o=l(),nt=a("div"),F(J6.$$.fragment),_6o=l(),Qde=a("p"),b6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v6o=l(),Pi=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),Wde=a("strong"),T6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),E6o=o("from_pretrained()"),C6o=o(" to load the model weights."),w6o=l(),F(r1.$$.fragment),A6o=l(),Ke=a("div"),F(Y6.$$.fragment),y6o=l(),Hde=a("p"),L6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x6o=l(),$a=a("p"),$6o=o("The model class to instantiate is selected based on the "),Ude=a("code"),k6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),Jde=a("code"),R6o=o("pretrained_model_name_or_path"),B6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=a("code"),P6o=o("pretrained_model_name_or_path"),I6o=o(":"),q6o=l(),he=a("ul"),t1=a("li"),Kde=a("strong"),N6o=o("bart"),j6o=o(" \u2014 "),Kj=a("a"),D6o=o("BartForConditionalGeneration"),G6o=o(" (BART model)"),O6o=l(),a1=a("li"),Zde=a("strong"),V6o=o("bigbird_pegasus"),X6o=o(" \u2014 "),Zj=a("a"),z6o=o("BigBirdPegasusForConditionalGeneration"),Q6o=o(" (BigBirdPegasus model)"),W6o=l(),n1=a("li"),ece=a("strong"),H6o=o("blenderbot"),U6o=o(" \u2014 "),eD=a("a"),J6o=o("BlenderbotForConditionalGeneration"),Y6o=o(" (Blenderbot model)"),K6o=l(),s1=a("li"),oce=a("strong"),Z6o=o("blenderbot-small"),eyo=o(" \u2014 "),oD=a("a"),oyo=o("BlenderbotSmallForConditionalGeneration"),ryo=o(" (BlenderbotSmall model)"),tyo=l(),l1=a("li"),rce=a("strong"),ayo=o("encoder-decoder"),nyo=o(" \u2014 "),rD=a("a"),syo=o("EncoderDecoderModel"),lyo=o(" (Encoder decoder model)"),iyo=l(),i1=a("li"),tce=a("strong"),dyo=o("fsmt"),cyo=o(" \u2014 "),tD=a("a"),fyo=o("FSMTForConditionalGeneration"),myo=o(" (FairSeq Machine-Translation model)"),gyo=l(),d1=a("li"),ace=a("strong"),hyo=o("led"),pyo=o(" \u2014 "),aD=a("a"),uyo=o("LEDForConditionalGeneration"),_yo=o(" (LED model)"),byo=l(),c1=a("li"),nce=a("strong"),vyo=o("m2m_100"),Fyo=o(" \u2014 "),nD=a("a"),Tyo=o("M2M100ForConditionalGeneration"),Myo=o(" (M2M100 model)"),Eyo=l(),f1=a("li"),sce=a("strong"),Cyo=o("marian"),wyo=o(" \u2014 "),sD=a("a"),Ayo=o("MarianMTModel"),yyo=o(" (Marian model)"),Lyo=l(),m1=a("li"),lce=a("strong"),xyo=o("mbart"),$yo=o(" \u2014 "),lD=a("a"),kyo=o("MBartForConditionalGeneration"),Syo=o(" (mBART model)"),Ryo=l(),g1=a("li"),ice=a("strong"),Byo=o("mt5"),Pyo=o(" \u2014 "),iD=a("a"),Iyo=o("MT5ForConditionalGeneration"),qyo=o(" (mT5 model)"),Nyo=l(),h1=a("li"),dce=a("strong"),jyo=o("pegasus"),Dyo=o(" \u2014 "),dD=a("a"),Gyo=o("PegasusForConditionalGeneration"),Oyo=o(" (Pegasus model)"),Vyo=l(),p1=a("li"),cce=a("strong"),Xyo=o("plbart"),zyo=o(" \u2014 "),cD=a("a"),Qyo=o("PLBartForConditionalGeneration"),Wyo=o(" (PLBart model)"),Hyo=l(),u1=a("li"),fce=a("strong"),Uyo=o("prophetnet"),Jyo=o(" \u2014 "),fD=a("a"),Yyo=o("ProphetNetForConditionalGeneration"),Kyo=o(" (ProphetNet model)"),Zyo=l(),_1=a("li"),mce=a("strong"),eLo=o("t5"),oLo=o(" \u2014 "),mD=a("a"),rLo=o("T5ForConditionalGeneration"),tLo=o(" (T5 model)"),aLo=l(),b1=a("li"),gce=a("strong"),nLo=o("tapex"),sLo=o(" \u2014 "),gD=a("a"),lLo=o("BartForConditionalGeneration"),iLo=o(" (TAPEX model)"),dLo=l(),v1=a("li"),hce=a("strong"),cLo=o("xlm-prophetnet"),fLo=o(" \u2014 "),hD=a("a"),mLo=o("XLMProphetNetForConditionalGeneration"),gLo=o(" (XLMProphetNet model)"),hLo=l(),F1=a("p"),pLo=o("The model is set in evaluation mode by default using "),pce=a("code"),uLo=o("model.eval()"),_Lo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),bLo=o("model.train()"),vLo=l(),F(T1.$$.fragment),LIe=l(),Ii=a("h2"),M1=a("a"),_ce=a("span"),F(K6.$$.fragment),FLo=l(),bce=a("span"),TLo=o("AutoModelForSequenceClassification"),xIe=l(),Ro=a("div"),F(Z6.$$.fragment),MLo=l(),qi=a("p"),ELo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pD=a("a"),CLo=o("from_pretrained()"),wLo=o(" class method or the "),uD=a("a"),ALo=o("from_config()"),yLo=o(` class
method.`),LLo=l(),ey=a("p"),xLo=o("This class cannot be instantiated directly using "),vce=a("code"),$Lo=o("__init__()"),kLo=o(" (throws an error)."),SLo=l(),st=a("div"),F(oy.$$.fragment),RLo=l(),Fce=a("p"),BLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PLo=l(),Ni=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),qLo=o("not"),NLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),jLo=o("from_pretrained()"),DLo=o(" to load the model weights."),GLo=l(),F(E1.$$.fragment),OLo=l(),Ze=a("div"),F(ry.$$.fragment),VLo=l(),Mce=a("p"),XLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zLo=l(),ka=a("p"),QLo=o("The model class to instantiate is selected based on the "),Ece=a("code"),WLo=o("model_type"),HLo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(":"),ZLo=l(),q=a("ul"),C1=a("li"),Ace=a("strong"),e8o=o("albert"),o8o=o(" \u2014 "),bD=a("a"),r8o=o("AlbertForSequenceClassification"),t8o=o(" (ALBERT model)"),a8o=l(),w1=a("li"),yce=a("strong"),n8o=o("bart"),s8o=o(" \u2014 "),vD=a("a"),l8o=o("BartForSequenceClassification"),i8o=o(" (BART model)"),d8o=l(),A1=a("li"),Lce=a("strong"),c8o=o("bert"),f8o=o(" \u2014 "),FD=a("a"),m8o=o("BertForSequenceClassification"),g8o=o(" (BERT model)"),h8o=l(),y1=a("li"),xce=a("strong"),p8o=o("big_bird"),u8o=o(" \u2014 "),TD=a("a"),_8o=o("BigBirdForSequenceClassification"),b8o=o(" (BigBird model)"),v8o=l(),L1=a("li"),$ce=a("strong"),F8o=o("bigbird_pegasus"),T8o=o(" \u2014 "),MD=a("a"),M8o=o("BigBirdPegasusForSequenceClassification"),E8o=o(" (BigBirdPegasus model)"),C8o=l(),x1=a("li"),kce=a("strong"),w8o=o("camembert"),A8o=o(" \u2014 "),ED=a("a"),y8o=o("CamembertForSequenceClassification"),L8o=o(" (CamemBERT model)"),x8o=l(),$1=a("li"),Sce=a("strong"),$8o=o("canine"),k8o=o(" \u2014 "),CD=a("a"),S8o=o("CanineForSequenceClassification"),R8o=o(" (Canine model)"),B8o=l(),k1=a("li"),Rce=a("strong"),P8o=o("convbert"),I8o=o(" \u2014 "),wD=a("a"),q8o=o("ConvBertForSequenceClassification"),N8o=o(" (ConvBERT model)"),j8o=l(),S1=a("li"),Bce=a("strong"),D8o=o("ctrl"),G8o=o(" \u2014 "),AD=a("a"),O8o=o("CTRLForSequenceClassification"),V8o=o(" (CTRL model)"),X8o=l(),R1=a("li"),Pce=a("strong"),z8o=o("data2vec-text"),Q8o=o(" \u2014 "),yD=a("a"),W8o=o("Data2VecTextForSequenceClassification"),H8o=o(" (Data2VecText model)"),U8o=l(),B1=a("li"),Ice=a("strong"),J8o=o("deberta"),Y8o=o(" \u2014 "),LD=a("a"),K8o=o("DebertaForSequenceClassification"),Z8o=o(" (DeBERTa model)"),exo=l(),P1=a("li"),qce=a("strong"),oxo=o("deberta-v2"),rxo=o(" \u2014 "),xD=a("a"),txo=o("DebertaV2ForSequenceClassification"),axo=o(" (DeBERTa-v2 model)"),nxo=l(),I1=a("li"),Nce=a("strong"),sxo=o("distilbert"),lxo=o(" \u2014 "),$D=a("a"),ixo=o("DistilBertForSequenceClassification"),dxo=o(" (DistilBERT model)"),cxo=l(),q1=a("li"),jce=a("strong"),fxo=o("electra"),mxo=o(" \u2014 "),kD=a("a"),gxo=o("ElectraForSequenceClassification"),hxo=o(" (ELECTRA model)"),pxo=l(),N1=a("li"),Dce=a("strong"),uxo=o("flaubert"),_xo=o(" \u2014 "),SD=a("a"),bxo=o("FlaubertForSequenceClassification"),vxo=o(" (FlauBERT model)"),Fxo=l(),j1=a("li"),Gce=a("strong"),Txo=o("fnet"),Mxo=o(" \u2014 "),RD=a("a"),Exo=o("FNetForSequenceClassification"),Cxo=o(" (FNet model)"),wxo=l(),D1=a("li"),Oce=a("strong"),Axo=o("funnel"),yxo=o(" \u2014 "),BD=a("a"),Lxo=o("FunnelForSequenceClassification"),xxo=o(" (Funnel Transformer model)"),$xo=l(),G1=a("li"),Vce=a("strong"),kxo=o("gpt2"),Sxo=o(" \u2014 "),PD=a("a"),Rxo=o("GPT2ForSequenceClassification"),Bxo=o(" (OpenAI GPT-2 model)"),Pxo=l(),O1=a("li"),Xce=a("strong"),Ixo=o("gpt_neo"),qxo=o(" \u2014 "),ID=a("a"),Nxo=o("GPTNeoForSequenceClassification"),jxo=o(" (GPT Neo model)"),Dxo=l(),V1=a("li"),zce=a("strong"),Gxo=o("gptj"),Oxo=o(" \u2014 "),qD=a("a"),Vxo=o("GPTJForSequenceClassification"),Xxo=o(" (GPT-J model)"),zxo=l(),X1=a("li"),Qce=a("strong"),Qxo=o("ibert"),Wxo=o(" \u2014 "),ND=a("a"),Hxo=o("IBertForSequenceClassification"),Uxo=o(" (I-BERT model)"),Jxo=l(),z1=a("li"),Wce=a("strong"),Yxo=o("layoutlm"),Kxo=o(" \u2014 "),jD=a("a"),Zxo=o("LayoutLMForSequenceClassification"),e9o=o(" (LayoutLM model)"),o9o=l(),Q1=a("li"),Hce=a("strong"),r9o=o("layoutlmv2"),t9o=o(" \u2014 "),DD=a("a"),a9o=o("LayoutLMv2ForSequenceClassification"),n9o=o(" (LayoutLMv2 model)"),s9o=l(),W1=a("li"),Uce=a("strong"),l9o=o("led"),i9o=o(" \u2014 "),GD=a("a"),d9o=o("LEDForSequenceClassification"),c9o=o(" (LED model)"),f9o=l(),H1=a("li"),Jce=a("strong"),m9o=o("longformer"),g9o=o(" \u2014 "),OD=a("a"),h9o=o("LongformerForSequenceClassification"),p9o=o(" (Longformer model)"),u9o=l(),U1=a("li"),Yce=a("strong"),_9o=o("mbart"),b9o=o(" \u2014 "),VD=a("a"),v9o=o("MBartForSequenceClassification"),F9o=o(" (mBART model)"),T9o=l(),J1=a("li"),Kce=a("strong"),M9o=o("megatron-bert"),E9o=o(" \u2014 "),XD=a("a"),C9o=o("MegatronBertForSequenceClassification"),w9o=o(" (MegatronBert model)"),A9o=l(),Y1=a("li"),Zce=a("strong"),y9o=o("mobilebert"),L9o=o(" \u2014 "),zD=a("a"),x9o=o("MobileBertForSequenceClassification"),$9o=o(" (MobileBERT model)"),k9o=l(),K1=a("li"),efe=a("strong"),S9o=o("mpnet"),R9o=o(" \u2014 "),QD=a("a"),B9o=o("MPNetForSequenceClassification"),P9o=o(" (MPNet model)"),I9o=l(),Z1=a("li"),ofe=a("strong"),q9o=o("nystromformer"),N9o=o(" \u2014 "),WD=a("a"),j9o=o("NystromformerForSequenceClassification"),D9o=o(" (Nystromformer model)"),G9o=l(),eb=a("li"),rfe=a("strong"),O9o=o("openai-gpt"),V9o=o(" \u2014 "),HD=a("a"),X9o=o("OpenAIGPTForSequenceClassification"),z9o=o(" (OpenAI GPT model)"),Q9o=l(),ob=a("li"),tfe=a("strong"),W9o=o("perceiver"),H9o=o(" \u2014 "),UD=a("a"),U9o=o("PerceiverForSequenceClassification"),J9o=o(" (Perceiver model)"),Y9o=l(),rb=a("li"),afe=a("strong"),K9o=o("plbart"),Z9o=o(" \u2014 "),JD=a("a"),e$o=o("PLBartForSequenceClassification"),o$o=o(" (PLBart model)"),r$o=l(),tb=a("li"),nfe=a("strong"),t$o=o("qdqbert"),a$o=o(" \u2014 "),YD=a("a"),n$o=o("QDQBertForSequenceClassification"),s$o=o(" (QDQBert model)"),l$o=l(),ab=a("li"),sfe=a("strong"),i$o=o("reformer"),d$o=o(" \u2014 "),KD=a("a"),c$o=o("ReformerForSequenceClassification"),f$o=o(" (Reformer model)"),m$o=l(),nb=a("li"),lfe=a("strong"),g$o=o("rembert"),h$o=o(" \u2014 "),ZD=a("a"),p$o=o("RemBertForSequenceClassification"),u$o=o(" (RemBERT model)"),_$o=l(),sb=a("li"),ife=a("strong"),b$o=o("roberta"),v$o=o(" \u2014 "),eG=a("a"),F$o=o("RobertaForSequenceClassification"),T$o=o(" (RoBERTa model)"),M$o=l(),lb=a("li"),dfe=a("strong"),E$o=o("roformer"),C$o=o(" \u2014 "),oG=a("a"),w$o=o("RoFormerForSequenceClassification"),A$o=o(" (RoFormer model)"),y$o=l(),ib=a("li"),cfe=a("strong"),L$o=o("squeezebert"),x$o=o(" \u2014 "),rG=a("a"),$$o=o("SqueezeBertForSequenceClassification"),k$o=o(" (SqueezeBERT model)"),S$o=l(),db=a("li"),ffe=a("strong"),R$o=o("tapas"),B$o=o(" \u2014 "),tG=a("a"),P$o=o("TapasForSequenceClassification"),I$o=o(" (TAPAS model)"),q$o=l(),cb=a("li"),mfe=a("strong"),N$o=o("tapex"),j$o=o(" \u2014 "),aG=a("a"),D$o=o("BartForSequenceClassification"),G$o=o(" (TAPEX model)"),O$o=l(),fb=a("li"),gfe=a("strong"),V$o=o("transfo-xl"),X$o=o(" \u2014 "),nG=a("a"),z$o=o("TransfoXLForSequenceClassification"),Q$o=o(" (Transformer-XL model)"),W$o=l(),mb=a("li"),hfe=a("strong"),H$o=o("xlm"),U$o=o(" \u2014 "),sG=a("a"),J$o=o("XLMForSequenceClassification"),Y$o=o(" (XLM model)"),K$o=l(),gb=a("li"),pfe=a("strong"),Z$o=o("xlm-roberta"),eko=o(" \u2014 "),lG=a("a"),oko=o("XLMRobertaForSequenceClassification"),rko=o(" (XLM-RoBERTa model)"),tko=l(),hb=a("li"),ufe=a("strong"),ako=o("xlm-roberta-xl"),nko=o(" \u2014 "),iG=a("a"),sko=o("XLMRobertaXLForSequenceClassification"),lko=o(" (XLM-RoBERTa-XL model)"),iko=l(),pb=a("li"),_fe=a("strong"),dko=o("xlnet"),cko=o(" \u2014 "),dG=a("a"),fko=o("XLNetForSequenceClassification"),mko=o(" (XLNet model)"),gko=l(),ub=a("li"),bfe=a("strong"),hko=o("yoso"),pko=o(" \u2014 "),cG=a("a"),uko=o("YosoForSequenceClassification"),_ko=o(" (YOSO model)"),bko=l(),_b=a("p"),vko=o("The model is set in evaluation mode by default using "),vfe=a("code"),Fko=o("model.eval()"),Tko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),Mko=o("model.train()"),Eko=l(),F(bb.$$.fragment),$Ie=l(),ji=a("h2"),vb=a("a"),Tfe=a("span"),F(ty.$$.fragment),Cko=l(),Mfe=a("span"),wko=o("AutoModelForMultipleChoice"),kIe=l(),Bo=a("div"),F(ay.$$.fragment),Ako=l(),Di=a("p"),yko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fG=a("a"),Lko=o("from_pretrained()"),xko=o(" class method or the "),mG=a("a"),$ko=o("from_config()"),kko=o(` class
method.`),Sko=l(),ny=a("p"),Rko=o("This class cannot be instantiated directly using "),Efe=a("code"),Bko=o("__init__()"),Pko=o(" (throws an error)."),Iko=l(),lt=a("div"),F(sy.$$.fragment),qko=l(),Cfe=a("p"),Nko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jko=l(),Gi=a("p"),Dko=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),Gko=o("not"),Oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),Vko=o("from_pretrained()"),Xko=o(" to load the model weights."),zko=l(),F(Fb.$$.fragment),Qko=l(),eo=a("div"),F(ly.$$.fragment),Wko=l(),Afe=a("p"),Hko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uko=l(),Sa=a("p"),Jko=o("The model class to instantiate is selected based on the "),yfe=a("code"),Yko=o("model_type"),Kko=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),Zko=o("pretrained_model_name_or_path"),eSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),oSo=o("pretrained_model_name_or_path"),rSo=o(":"),tSo=l(),Y=a("ul"),Tb=a("li"),$fe=a("strong"),aSo=o("albert"),nSo=o(" \u2014 "),hG=a("a"),sSo=o("AlbertForMultipleChoice"),lSo=o(" (ALBERT model)"),iSo=l(),Mb=a("li"),kfe=a("strong"),dSo=o("bert"),cSo=o(" \u2014 "),pG=a("a"),fSo=o("BertForMultipleChoice"),mSo=o(" (BERT model)"),gSo=l(),Eb=a("li"),Sfe=a("strong"),hSo=o("big_bird"),pSo=o(" \u2014 "),uG=a("a"),uSo=o("BigBirdForMultipleChoice"),_So=o(" (BigBird model)"),bSo=l(),Cb=a("li"),Rfe=a("strong"),vSo=o("camembert"),FSo=o(" \u2014 "),_G=a("a"),TSo=o("CamembertForMultipleChoice"),MSo=o(" (CamemBERT model)"),ESo=l(),wb=a("li"),Bfe=a("strong"),CSo=o("canine"),wSo=o(" \u2014 "),bG=a("a"),ASo=o("CanineForMultipleChoice"),ySo=o(" (Canine model)"),LSo=l(),Ab=a("li"),Pfe=a("strong"),xSo=o("convbert"),$So=o(" \u2014 "),vG=a("a"),kSo=o("ConvBertForMultipleChoice"),SSo=o(" (ConvBERT model)"),RSo=l(),yb=a("li"),Ife=a("strong"),BSo=o("data2vec-text"),PSo=o(" \u2014 "),FG=a("a"),ISo=o("Data2VecTextForMultipleChoice"),qSo=o(" (Data2VecText model)"),NSo=l(),Lb=a("li"),qfe=a("strong"),jSo=o("deberta-v2"),DSo=o(" \u2014 "),TG=a("a"),GSo=o("DebertaV2ForMultipleChoice"),OSo=o(" (DeBERTa-v2 model)"),VSo=l(),xb=a("li"),Nfe=a("strong"),XSo=o("distilbert"),zSo=o(" \u2014 "),MG=a("a"),QSo=o("DistilBertForMultipleChoice"),WSo=o(" (DistilBERT model)"),HSo=l(),$b=a("li"),jfe=a("strong"),USo=o("electra"),JSo=o(" \u2014 "),EG=a("a"),YSo=o("ElectraForMultipleChoice"),KSo=o(" (ELECTRA model)"),ZSo=l(),kb=a("li"),Dfe=a("strong"),eRo=o("flaubert"),oRo=o(" \u2014 "),CG=a("a"),rRo=o("FlaubertForMultipleChoice"),tRo=o(" (FlauBERT model)"),aRo=l(),Sb=a("li"),Gfe=a("strong"),nRo=o("fnet"),sRo=o(" \u2014 "),wG=a("a"),lRo=o("FNetForMultipleChoice"),iRo=o(" (FNet model)"),dRo=l(),Rb=a("li"),Ofe=a("strong"),cRo=o("funnel"),fRo=o(" \u2014 "),AG=a("a"),mRo=o("FunnelForMultipleChoice"),gRo=o(" (Funnel Transformer model)"),hRo=l(),Bb=a("li"),Vfe=a("strong"),pRo=o("ibert"),uRo=o(" \u2014 "),yG=a("a"),_Ro=o("IBertForMultipleChoice"),bRo=o(" (I-BERT model)"),vRo=l(),Pb=a("li"),Xfe=a("strong"),FRo=o("longformer"),TRo=o(" \u2014 "),LG=a("a"),MRo=o("LongformerForMultipleChoice"),ERo=o(" (Longformer model)"),CRo=l(),Ib=a("li"),zfe=a("strong"),wRo=o("megatron-bert"),ARo=o(" \u2014 "),xG=a("a"),yRo=o("MegatronBertForMultipleChoice"),LRo=o(" (MegatronBert model)"),xRo=l(),qb=a("li"),Qfe=a("strong"),$Ro=o("mobilebert"),kRo=o(" \u2014 "),$G=a("a"),SRo=o("MobileBertForMultipleChoice"),RRo=o(" (MobileBERT model)"),BRo=l(),Nb=a("li"),Wfe=a("strong"),PRo=o("mpnet"),IRo=o(" \u2014 "),kG=a("a"),qRo=o("MPNetForMultipleChoice"),NRo=o(" (MPNet model)"),jRo=l(),jb=a("li"),Hfe=a("strong"),DRo=o("nystromformer"),GRo=o(" \u2014 "),SG=a("a"),ORo=o("NystromformerForMultipleChoice"),VRo=o(" (Nystromformer model)"),XRo=l(),Db=a("li"),Ufe=a("strong"),zRo=o("qdqbert"),QRo=o(" \u2014 "),RG=a("a"),WRo=o("QDQBertForMultipleChoice"),HRo=o(" (QDQBert model)"),URo=l(),Gb=a("li"),Jfe=a("strong"),JRo=o("rembert"),YRo=o(" \u2014 "),BG=a("a"),KRo=o("RemBertForMultipleChoice"),ZRo=o(" (RemBERT model)"),eBo=l(),Ob=a("li"),Yfe=a("strong"),oBo=o("roberta"),rBo=o(" \u2014 "),PG=a("a"),tBo=o("RobertaForMultipleChoice"),aBo=o(" (RoBERTa model)"),nBo=l(),Vb=a("li"),Kfe=a("strong"),sBo=o("roformer"),lBo=o(" \u2014 "),IG=a("a"),iBo=o("RoFormerForMultipleChoice"),dBo=o(" (RoFormer model)"),cBo=l(),Xb=a("li"),Zfe=a("strong"),fBo=o("squeezebert"),mBo=o(" \u2014 "),qG=a("a"),gBo=o("SqueezeBertForMultipleChoice"),hBo=o(" (SqueezeBERT model)"),pBo=l(),zb=a("li"),eme=a("strong"),uBo=o("xlm"),_Bo=o(" \u2014 "),NG=a("a"),bBo=o("XLMForMultipleChoice"),vBo=o(" (XLM model)"),FBo=l(),Qb=a("li"),ome=a("strong"),TBo=o("xlm-roberta"),MBo=o(" \u2014 "),jG=a("a"),EBo=o("XLMRobertaForMultipleChoice"),CBo=o(" (XLM-RoBERTa model)"),wBo=l(),Wb=a("li"),rme=a("strong"),ABo=o("xlm-roberta-xl"),yBo=o(" \u2014 "),DG=a("a"),LBo=o("XLMRobertaXLForMultipleChoice"),xBo=o(" (XLM-RoBERTa-XL model)"),$Bo=l(),Hb=a("li"),tme=a("strong"),kBo=o("xlnet"),SBo=o(" \u2014 "),GG=a("a"),RBo=o("XLNetForMultipleChoice"),BBo=o(" (XLNet model)"),PBo=l(),Ub=a("li"),ame=a("strong"),IBo=o("yoso"),qBo=o(" \u2014 "),OG=a("a"),NBo=o("YosoForMultipleChoice"),jBo=o(" (YOSO model)"),DBo=l(),Jb=a("p"),GBo=o("The model is set in evaluation mode by default using "),nme=a("code"),OBo=o("model.eval()"),VBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),XBo=o("model.train()"),zBo=l(),F(Yb.$$.fragment),SIe=l(),Oi=a("h2"),Kb=a("a"),lme=a("span"),F(iy.$$.fragment),QBo=l(),ime=a("span"),WBo=o("AutoModelForNextSentencePrediction"),RIe=l(),Po=a("div"),F(dy.$$.fragment),HBo=l(),Vi=a("p"),UBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VG=a("a"),JBo=o("from_pretrained()"),YBo=o(" class method or the "),XG=a("a"),KBo=o("from_config()"),ZBo=o(` class
method.`),ePo=l(),cy=a("p"),oPo=o("This class cannot be instantiated directly using "),dme=a("code"),rPo=o("__init__()"),tPo=o(" (throws an error)."),aPo=l(),it=a("div"),F(fy.$$.fragment),nPo=l(),cme=a("p"),sPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lPo=l(),Xi=a("p"),iPo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),dPo=o("not"),cPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),fPo=o("from_pretrained()"),mPo=o(" to load the model weights."),gPo=l(),F(Zb.$$.fragment),hPo=l(),oo=a("div"),F(my.$$.fragment),pPo=l(),mme=a("p"),uPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Po=l(),Ra=a("p"),bPo=o("The model class to instantiate is selected based on the "),gme=a("code"),vPo=o("model_type"),FPo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),TPo=o("pretrained_model_name_or_path"),MPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),EPo=o("pretrained_model_name_or_path"),CPo=o(":"),wPo=l(),Yr=a("ul"),e5=a("li"),ume=a("strong"),APo=o("bert"),yPo=o(" \u2014 "),QG=a("a"),LPo=o("BertForNextSentencePrediction"),xPo=o(" (BERT model)"),$Po=l(),o5=a("li"),_me=a("strong"),kPo=o("fnet"),SPo=o(" \u2014 "),WG=a("a"),RPo=o("FNetForNextSentencePrediction"),BPo=o(" (FNet model)"),PPo=l(),r5=a("li"),bme=a("strong"),IPo=o("megatron-bert"),qPo=o(" \u2014 "),HG=a("a"),NPo=o("MegatronBertForNextSentencePrediction"),jPo=o(" (MegatronBert model)"),DPo=l(),t5=a("li"),vme=a("strong"),GPo=o("mobilebert"),OPo=o(" \u2014 "),UG=a("a"),VPo=o("MobileBertForNextSentencePrediction"),XPo=o(" (MobileBERT model)"),zPo=l(),a5=a("li"),Fme=a("strong"),QPo=o("qdqbert"),WPo=o(" \u2014 "),JG=a("a"),HPo=o("QDQBertForNextSentencePrediction"),UPo=o(" (QDQBert model)"),JPo=l(),n5=a("p"),YPo=o("The model is set in evaluation mode by default using "),Tme=a("code"),KPo=o("model.eval()"),ZPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),eIo=o("model.train()"),oIo=l(),F(s5.$$.fragment),BIe=l(),zi=a("h2"),l5=a("a"),Eme=a("span"),F(gy.$$.fragment),rIo=l(),Cme=a("span"),tIo=o("AutoModelForTokenClassification"),PIe=l(),Io=a("div"),F(hy.$$.fragment),aIo=l(),Qi=a("p"),nIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YG=a("a"),sIo=o("from_pretrained()"),lIo=o(" class method or the "),KG=a("a"),iIo=o("from_config()"),dIo=o(` class
method.`),cIo=l(),py=a("p"),fIo=o("This class cannot be instantiated directly using "),wme=a("code"),mIo=o("__init__()"),gIo=o(" (throws an error)."),hIo=l(),dt=a("div"),F(uy.$$.fragment),pIo=l(),Ame=a("p"),uIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Io=l(),Wi=a("p"),bIo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),vIo=o("not"),FIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),TIo=o("from_pretrained()"),MIo=o(" to load the model weights."),EIo=l(),F(i5.$$.fragment),CIo=l(),ro=a("div"),F(_y.$$.fragment),wIo=l(),Lme=a("p"),AIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yIo=l(),Ba=a("p"),LIo=o("The model class to instantiate is selected based on the "),xme=a("code"),xIo=o("model_type"),$Io=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),kIo=o("pretrained_model_name_or_path"),SIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),RIo=o("pretrained_model_name_or_path"),BIo=o(":"),PIo=l(),U=a("ul"),d5=a("li"),Sme=a("strong"),IIo=o("albert"),qIo=o(" \u2014 "),eO=a("a"),NIo=o("AlbertForTokenClassification"),jIo=o(" (ALBERT model)"),DIo=l(),c5=a("li"),Rme=a("strong"),GIo=o("bert"),OIo=o(" \u2014 "),oO=a("a"),VIo=o("BertForTokenClassification"),XIo=o(" (BERT model)"),zIo=l(),f5=a("li"),Bme=a("strong"),QIo=o("big_bird"),WIo=o(" \u2014 "),rO=a("a"),HIo=o("BigBirdForTokenClassification"),UIo=o(" (BigBird model)"),JIo=l(),m5=a("li"),Pme=a("strong"),YIo=o("camembert"),KIo=o(" \u2014 "),tO=a("a"),ZIo=o("CamembertForTokenClassification"),eqo=o(" (CamemBERT model)"),oqo=l(),g5=a("li"),Ime=a("strong"),rqo=o("canine"),tqo=o(" \u2014 "),aO=a("a"),aqo=o("CanineForTokenClassification"),nqo=o(" (Canine model)"),sqo=l(),h5=a("li"),qme=a("strong"),lqo=o("convbert"),iqo=o(" \u2014 "),nO=a("a"),dqo=o("ConvBertForTokenClassification"),cqo=o(" (ConvBERT model)"),fqo=l(),p5=a("li"),Nme=a("strong"),mqo=o("data2vec-text"),gqo=o(" \u2014 "),sO=a("a"),hqo=o("Data2VecTextForTokenClassification"),pqo=o(" (Data2VecText model)"),uqo=l(),u5=a("li"),jme=a("strong"),_qo=o("deberta"),bqo=o(" \u2014 "),lO=a("a"),vqo=o("DebertaForTokenClassification"),Fqo=o(" (DeBERTa model)"),Tqo=l(),_5=a("li"),Dme=a("strong"),Mqo=o("deberta-v2"),Eqo=o(" \u2014 "),iO=a("a"),Cqo=o("DebertaV2ForTokenClassification"),wqo=o(" (DeBERTa-v2 model)"),Aqo=l(),b5=a("li"),Gme=a("strong"),yqo=o("distilbert"),Lqo=o(" \u2014 "),dO=a("a"),xqo=o("DistilBertForTokenClassification"),$qo=o(" (DistilBERT model)"),kqo=l(),v5=a("li"),Ome=a("strong"),Sqo=o("electra"),Rqo=o(" \u2014 "),cO=a("a"),Bqo=o("ElectraForTokenClassification"),Pqo=o(" (ELECTRA model)"),Iqo=l(),F5=a("li"),Vme=a("strong"),qqo=o("flaubert"),Nqo=o(" \u2014 "),fO=a("a"),jqo=o("FlaubertForTokenClassification"),Dqo=o(" (FlauBERT model)"),Gqo=l(),T5=a("li"),Xme=a("strong"),Oqo=o("fnet"),Vqo=o(" \u2014 "),mO=a("a"),Xqo=o("FNetForTokenClassification"),zqo=o(" (FNet model)"),Qqo=l(),M5=a("li"),zme=a("strong"),Wqo=o("funnel"),Hqo=o(" \u2014 "),gO=a("a"),Uqo=o("FunnelForTokenClassification"),Jqo=o(" (Funnel Transformer model)"),Yqo=l(),E5=a("li"),Qme=a("strong"),Kqo=o("gpt2"),Zqo=o(" \u2014 "),hO=a("a"),eNo=o("GPT2ForTokenClassification"),oNo=o(" (OpenAI GPT-2 model)"),rNo=l(),C5=a("li"),Wme=a("strong"),tNo=o("ibert"),aNo=o(" \u2014 "),pO=a("a"),nNo=o("IBertForTokenClassification"),sNo=o(" (I-BERT model)"),lNo=l(),w5=a("li"),Hme=a("strong"),iNo=o("layoutlm"),dNo=o(" \u2014 "),uO=a("a"),cNo=o("LayoutLMForTokenClassification"),fNo=o(" (LayoutLM model)"),mNo=l(),A5=a("li"),Ume=a("strong"),gNo=o("layoutlmv2"),hNo=o(" \u2014 "),_O=a("a"),pNo=o("LayoutLMv2ForTokenClassification"),uNo=o(" (LayoutLMv2 model)"),_No=l(),y5=a("li"),Jme=a("strong"),bNo=o("longformer"),vNo=o(" \u2014 "),bO=a("a"),FNo=o("LongformerForTokenClassification"),TNo=o(" (Longformer model)"),MNo=l(),L5=a("li"),Yme=a("strong"),ENo=o("megatron-bert"),CNo=o(" \u2014 "),vO=a("a"),wNo=o("MegatronBertForTokenClassification"),ANo=o(" (MegatronBert model)"),yNo=l(),x5=a("li"),Kme=a("strong"),LNo=o("mobilebert"),xNo=o(" \u2014 "),FO=a("a"),$No=o("MobileBertForTokenClassification"),kNo=o(" (MobileBERT model)"),SNo=l(),$5=a("li"),Zme=a("strong"),RNo=o("mpnet"),BNo=o(" \u2014 "),TO=a("a"),PNo=o("MPNetForTokenClassification"),INo=o(" (MPNet model)"),qNo=l(),k5=a("li"),ege=a("strong"),NNo=o("nystromformer"),jNo=o(" \u2014 "),MO=a("a"),DNo=o("NystromformerForTokenClassification"),GNo=o(" (Nystromformer model)"),ONo=l(),S5=a("li"),oge=a("strong"),VNo=o("qdqbert"),XNo=o(" \u2014 "),EO=a("a"),zNo=o("QDQBertForTokenClassification"),QNo=o(" (QDQBert model)"),WNo=l(),R5=a("li"),rge=a("strong"),HNo=o("rembert"),UNo=o(" \u2014 "),CO=a("a"),JNo=o("RemBertForTokenClassification"),YNo=o(" (RemBERT model)"),KNo=l(),B5=a("li"),tge=a("strong"),ZNo=o("roberta"),ejo=o(" \u2014 "),wO=a("a"),ojo=o("RobertaForTokenClassification"),rjo=o(" (RoBERTa model)"),tjo=l(),P5=a("li"),age=a("strong"),ajo=o("roformer"),njo=o(" \u2014 "),AO=a("a"),sjo=o("RoFormerForTokenClassification"),ljo=o(" (RoFormer model)"),ijo=l(),I5=a("li"),nge=a("strong"),djo=o("squeezebert"),cjo=o(" \u2014 "),yO=a("a"),fjo=o("SqueezeBertForTokenClassification"),mjo=o(" (SqueezeBERT model)"),gjo=l(),q5=a("li"),sge=a("strong"),hjo=o("xlm"),pjo=o(" \u2014 "),LO=a("a"),ujo=o("XLMForTokenClassification"),_jo=o(" (XLM model)"),bjo=l(),N5=a("li"),lge=a("strong"),vjo=o("xlm-roberta"),Fjo=o(" \u2014 "),xO=a("a"),Tjo=o("XLMRobertaForTokenClassification"),Mjo=o(" (XLM-RoBERTa model)"),Ejo=l(),j5=a("li"),ige=a("strong"),Cjo=o("xlm-roberta-xl"),wjo=o(" \u2014 "),$O=a("a"),Ajo=o("XLMRobertaXLForTokenClassification"),yjo=o(" (XLM-RoBERTa-XL model)"),Ljo=l(),D5=a("li"),dge=a("strong"),xjo=o("xlnet"),$jo=o(" \u2014 "),kO=a("a"),kjo=o("XLNetForTokenClassification"),Sjo=o(" (XLNet model)"),Rjo=l(),G5=a("li"),cge=a("strong"),Bjo=o("yoso"),Pjo=o(" \u2014 "),SO=a("a"),Ijo=o("YosoForTokenClassification"),qjo=o(" (YOSO model)"),Njo=l(),O5=a("p"),jjo=o("The model is set in evaluation mode by default using "),fge=a("code"),Djo=o("model.eval()"),Gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),Ojo=o("model.train()"),Vjo=l(),F(V5.$$.fragment),IIe=l(),Hi=a("h2"),X5=a("a"),gge=a("span"),F(by.$$.fragment),Xjo=l(),hge=a("span"),zjo=o("AutoModelForQuestionAnswering"),qIe=l(),qo=a("div"),F(vy.$$.fragment),Qjo=l(),Ui=a("p"),Wjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RO=a("a"),Hjo=o("from_pretrained()"),Ujo=o(" class method or the "),BO=a("a"),Jjo=o("from_config()"),Yjo=o(` class
method.`),Kjo=l(),Fy=a("p"),Zjo=o("This class cannot be instantiated directly using "),pge=a("code"),eDo=o("__init__()"),oDo=o(" (throws an error)."),rDo=l(),ct=a("div"),F(Ty.$$.fragment),tDo=l(),uge=a("p"),aDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nDo=l(),Ji=a("p"),sDo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),lDo=o("not"),iDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),dDo=o("from_pretrained()"),cDo=o(" to load the model weights."),fDo=l(),F(z5.$$.fragment),mDo=l(),to=a("div"),F(My.$$.fragment),gDo=l(),bge=a("p"),hDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pDo=l(),Pa=a("p"),uDo=o("The model class to instantiate is selected based on the "),vge=a("code"),_Do=o("model_type"),bDo=o(` property of the config object (either
passed as an argument or loaded from `),Fge=a("code"),vDo=o("pretrained_model_name_or_path"),FDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(":"),EDo=l(),O=a("ul"),Q5=a("li"),Mge=a("strong"),CDo=o("albert"),wDo=o(" \u2014 "),IO=a("a"),ADo=o("AlbertForQuestionAnswering"),yDo=o(" (ALBERT model)"),LDo=l(),W5=a("li"),Ege=a("strong"),xDo=o("bart"),$Do=o(" \u2014 "),qO=a("a"),kDo=o("BartForQuestionAnswering"),SDo=o(" (BART model)"),RDo=l(),H5=a("li"),Cge=a("strong"),BDo=o("bert"),PDo=o(" \u2014 "),NO=a("a"),IDo=o("BertForQuestionAnswering"),qDo=o(" (BERT model)"),NDo=l(),U5=a("li"),wge=a("strong"),jDo=o("big_bird"),DDo=o(" \u2014 "),jO=a("a"),GDo=o("BigBirdForQuestionAnswering"),ODo=o(" (BigBird model)"),VDo=l(),J5=a("li"),Age=a("strong"),XDo=o("bigbird_pegasus"),zDo=o(" \u2014 "),DO=a("a"),QDo=o("BigBirdPegasusForQuestionAnswering"),WDo=o(" (BigBirdPegasus model)"),HDo=l(),Y5=a("li"),yge=a("strong"),UDo=o("camembert"),JDo=o(" \u2014 "),GO=a("a"),YDo=o("CamembertForQuestionAnswering"),KDo=o(" (CamemBERT model)"),ZDo=l(),K5=a("li"),Lge=a("strong"),eGo=o("canine"),oGo=o(" \u2014 "),OO=a("a"),rGo=o("CanineForQuestionAnswering"),tGo=o(" (Canine model)"),aGo=l(),Z5=a("li"),xge=a("strong"),nGo=o("convbert"),sGo=o(" \u2014 "),VO=a("a"),lGo=o("ConvBertForQuestionAnswering"),iGo=o(" (ConvBERT model)"),dGo=l(),ev=a("li"),$ge=a("strong"),cGo=o("data2vec-text"),fGo=o(" \u2014 "),XO=a("a"),mGo=o("Data2VecTextForQuestionAnswering"),gGo=o(" (Data2VecText model)"),hGo=l(),ov=a("li"),kge=a("strong"),pGo=o("deberta"),uGo=o(" \u2014 "),zO=a("a"),_Go=o("DebertaForQuestionAnswering"),bGo=o(" (DeBERTa model)"),vGo=l(),rv=a("li"),Sge=a("strong"),FGo=o("deberta-v2"),TGo=o(" \u2014 "),QO=a("a"),MGo=o("DebertaV2ForQuestionAnswering"),EGo=o(" (DeBERTa-v2 model)"),CGo=l(),tv=a("li"),Rge=a("strong"),wGo=o("distilbert"),AGo=o(" \u2014 "),WO=a("a"),yGo=o("DistilBertForQuestionAnswering"),LGo=o(" (DistilBERT model)"),xGo=l(),av=a("li"),Bge=a("strong"),$Go=o("electra"),kGo=o(" \u2014 "),HO=a("a"),SGo=o("ElectraForQuestionAnswering"),RGo=o(" (ELECTRA model)"),BGo=l(),nv=a("li"),Pge=a("strong"),PGo=o("flaubert"),IGo=o(" \u2014 "),UO=a("a"),qGo=o("FlaubertForQuestionAnsweringSimple"),NGo=o(" (FlauBERT model)"),jGo=l(),sv=a("li"),Ige=a("strong"),DGo=o("fnet"),GGo=o(" \u2014 "),JO=a("a"),OGo=o("FNetForQuestionAnswering"),VGo=o(" (FNet model)"),XGo=l(),lv=a("li"),qge=a("strong"),zGo=o("funnel"),QGo=o(" \u2014 "),YO=a("a"),WGo=o("FunnelForQuestionAnswering"),HGo=o(" (Funnel Transformer model)"),UGo=l(),iv=a("li"),Nge=a("strong"),JGo=o("gptj"),YGo=o(" \u2014 "),KO=a("a"),KGo=o("GPTJForQuestionAnswering"),ZGo=o(" (GPT-J model)"),eOo=l(),dv=a("li"),jge=a("strong"),oOo=o("ibert"),rOo=o(" \u2014 "),ZO=a("a"),tOo=o("IBertForQuestionAnswering"),aOo=o(" (I-BERT model)"),nOo=l(),cv=a("li"),Dge=a("strong"),sOo=o("layoutlmv2"),lOo=o(" \u2014 "),eV=a("a"),iOo=o("LayoutLMv2ForQuestionAnswering"),dOo=o(" (LayoutLMv2 model)"),cOo=l(),fv=a("li"),Gge=a("strong"),fOo=o("led"),mOo=o(" \u2014 "),oV=a("a"),gOo=o("LEDForQuestionAnswering"),hOo=o(" (LED model)"),pOo=l(),mv=a("li"),Oge=a("strong"),uOo=o("longformer"),_Oo=o(" \u2014 "),rV=a("a"),bOo=o("LongformerForQuestionAnswering"),vOo=o(" (Longformer model)"),FOo=l(),gv=a("li"),Vge=a("strong"),TOo=o("lxmert"),MOo=o(" \u2014 "),tV=a("a"),EOo=o("LxmertForQuestionAnswering"),COo=o(" (LXMERT model)"),wOo=l(),hv=a("li"),Xge=a("strong"),AOo=o("mbart"),yOo=o(" \u2014 "),aV=a("a"),LOo=o("MBartForQuestionAnswering"),xOo=o(" (mBART model)"),$Oo=l(),pv=a("li"),zge=a("strong"),kOo=o("megatron-bert"),SOo=o(" \u2014 "),nV=a("a"),ROo=o("MegatronBertForQuestionAnswering"),BOo=o(" (MegatronBert model)"),POo=l(),uv=a("li"),Qge=a("strong"),IOo=o("mobilebert"),qOo=o(" \u2014 "),sV=a("a"),NOo=o("MobileBertForQuestionAnswering"),jOo=o(" (MobileBERT model)"),DOo=l(),_v=a("li"),Wge=a("strong"),GOo=o("mpnet"),OOo=o(" \u2014 "),lV=a("a"),VOo=o("MPNetForQuestionAnswering"),XOo=o(" (MPNet model)"),zOo=l(),bv=a("li"),Hge=a("strong"),QOo=o("nystromformer"),WOo=o(" \u2014 "),iV=a("a"),HOo=o("NystromformerForQuestionAnswering"),UOo=o(" (Nystromformer model)"),JOo=l(),vv=a("li"),Uge=a("strong"),YOo=o("qdqbert"),KOo=o(" \u2014 "),dV=a("a"),ZOo=o("QDQBertForQuestionAnswering"),eVo=o(" (QDQBert model)"),oVo=l(),Fv=a("li"),Jge=a("strong"),rVo=o("reformer"),tVo=o(" \u2014 "),cV=a("a"),aVo=o("ReformerForQuestionAnswering"),nVo=o(" (Reformer model)"),sVo=l(),Tv=a("li"),Yge=a("strong"),lVo=o("rembert"),iVo=o(" \u2014 "),fV=a("a"),dVo=o("RemBertForQuestionAnswering"),cVo=o(" (RemBERT model)"),fVo=l(),Mv=a("li"),Kge=a("strong"),mVo=o("roberta"),gVo=o(" \u2014 "),mV=a("a"),hVo=o("RobertaForQuestionAnswering"),pVo=o(" (RoBERTa model)"),uVo=l(),Ev=a("li"),Zge=a("strong"),_Vo=o("roformer"),bVo=o(" \u2014 "),gV=a("a"),vVo=o("RoFormerForQuestionAnswering"),FVo=o(" (RoFormer model)"),TVo=l(),Cv=a("li"),ehe=a("strong"),MVo=o("splinter"),EVo=o(" \u2014 "),hV=a("a"),CVo=o("SplinterForQuestionAnswering"),wVo=o(" (Splinter model)"),AVo=l(),wv=a("li"),ohe=a("strong"),yVo=o("squeezebert"),LVo=o(" \u2014 "),pV=a("a"),xVo=o("SqueezeBertForQuestionAnswering"),$Vo=o(" (SqueezeBERT model)"),kVo=l(),Av=a("li"),rhe=a("strong"),SVo=o("xlm"),RVo=o(" \u2014 "),uV=a("a"),BVo=o("XLMForQuestionAnsweringSimple"),PVo=o(" (XLM model)"),IVo=l(),yv=a("li"),the=a("strong"),qVo=o("xlm-roberta"),NVo=o(" \u2014 "),_V=a("a"),jVo=o("XLMRobertaForQuestionAnswering"),DVo=o(" (XLM-RoBERTa model)"),GVo=l(),Lv=a("li"),ahe=a("strong"),OVo=o("xlm-roberta-xl"),VVo=o(" \u2014 "),bV=a("a"),XVo=o("XLMRobertaXLForQuestionAnswering"),zVo=o(" (XLM-RoBERTa-XL model)"),QVo=l(),xv=a("li"),nhe=a("strong"),WVo=o("xlnet"),HVo=o(" \u2014 "),vV=a("a"),UVo=o("XLNetForQuestionAnsweringSimple"),JVo=o(" (XLNet model)"),YVo=l(),$v=a("li"),she=a("strong"),KVo=o("yoso"),ZVo=o(" \u2014 "),FV=a("a"),eXo=o("YosoForQuestionAnswering"),oXo=o(" (YOSO model)"),rXo=l(),kv=a("p"),tXo=o("The model is set in evaluation mode by default using "),lhe=a("code"),aXo=o("model.eval()"),nXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),sXo=o("model.train()"),lXo=l(),F(Sv.$$.fragment),NIe=l(),Yi=a("h2"),Rv=a("a"),dhe=a("span"),F(Ey.$$.fragment),iXo=l(),che=a("span"),dXo=o("AutoModelForTableQuestionAnswering"),jIe=l(),No=a("div"),F(Cy.$$.fragment),cXo=l(),Ki=a("p"),fXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TV=a("a"),mXo=o("from_pretrained()"),gXo=o(" class method or the "),MV=a("a"),hXo=o("from_config()"),pXo=o(` class
method.`),uXo=l(),wy=a("p"),_Xo=o("This class cannot be instantiated directly using "),fhe=a("code"),bXo=o("__init__()"),vXo=o(" (throws an error)."),FXo=l(),ft=a("div"),F(Ay.$$.fragment),TXo=l(),mhe=a("p"),MXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EXo=l(),Zi=a("p"),CXo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),wXo=o("not"),AXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),yXo=o("from_pretrained()"),LXo=o(" to load the model weights."),xXo=l(),F(Bv.$$.fragment),$Xo=l(),ao=a("div"),F(yy.$$.fragment),kXo=l(),hhe=a("p"),SXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RXo=l(),Ia=a("p"),BXo=o("The model class to instantiate is selected based on the "),phe=a("code"),PXo=o("model_type"),IXo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),qXo=o("pretrained_model_name_or_path"),NXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),jXo=o("pretrained_model_name_or_path"),DXo=o(":"),GXo=l(),bhe=a("ul"),Pv=a("li"),vhe=a("strong"),OXo=o("tapas"),VXo=o(" \u2014 "),CV=a("a"),XXo=o("TapasForQuestionAnswering"),zXo=o(" (TAPAS model)"),QXo=l(),Iv=a("p"),WXo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),HXo=o("model.eval()"),UXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),JXo=o("model.train()"),YXo=l(),F(qv.$$.fragment),DIe=l(),ed=a("h2"),Nv=a("a"),Mhe=a("span"),F(Ly.$$.fragment),KXo=l(),Ehe=a("span"),ZXo=o("AutoModelForImageClassification"),GIe=l(),jo=a("div"),F(xy.$$.fragment),ezo=l(),od=a("p"),ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wV=a("a"),rzo=o("from_pretrained()"),tzo=o(" class method or the "),AV=a("a"),azo=o("from_config()"),nzo=o(` class
method.`),szo=l(),$y=a("p"),lzo=o("This class cannot be instantiated directly using "),Che=a("code"),izo=o("__init__()"),dzo=o(" (throws an error)."),czo=l(),mt=a("div"),F(ky.$$.fragment),fzo=l(),whe=a("p"),mzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gzo=l(),rd=a("p"),hzo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),pzo=o("not"),uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),_zo=o("from_pretrained()"),bzo=o(" to load the model weights."),vzo=l(),F(jv.$$.fragment),Fzo=l(),no=a("div"),F(Sy.$$.fragment),Tzo=l(),yhe=a("p"),Mzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ezo=l(),qa=a("p"),Czo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),wzo=o("model_type"),Azo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),xzo=o("pretrained_model_name_or_path"),$zo=o(":"),kzo=l(),ve=a("ul"),Dv=a("li"),khe=a("strong"),Szo=o("beit"),Rzo=o(" \u2014 "),LV=a("a"),Bzo=o("BeitForImageClassification"),Pzo=o(" (BEiT model)"),Izo=l(),Gv=a("li"),She=a("strong"),qzo=o("convnext"),Nzo=o(" \u2014 "),xV=a("a"),jzo=o("ConvNextForImageClassification"),Dzo=o(" (ConvNext model)"),Gzo=l(),Ov=a("li"),Rhe=a("strong"),Ozo=o("data2vec-vision"),Vzo=o(" \u2014 "),$V=a("a"),Xzo=o("Data2VecVisionForImageClassification"),zzo=o(" (Data2VecVision model)"),Qzo=l(),Rs=a("li"),Bhe=a("strong"),Wzo=o("deit"),Hzo=o(" \u2014 "),kV=a("a"),Uzo=o("DeiTForImageClassification"),Jzo=o(" or "),SV=a("a"),Yzo=o("DeiTForImageClassificationWithTeacher"),Kzo=o(" (DeiT model)"),Zzo=l(),Vv=a("li"),Phe=a("strong"),eQo=o("imagegpt"),oQo=o(" \u2014 "),RV=a("a"),rQo=o("ImageGPTForImageClassification"),tQo=o(" (ImageGPT model)"),aQo=l(),Xv=a("li"),Ihe=a("strong"),nQo=o("mobilevit"),sQo=o(" \u2014 "),BV=a("a"),lQo=o("MobileViTForImageClassification"),iQo=o(" (MobileViT model)"),dQo=l(),gt=a("li"),qhe=a("strong"),cQo=o("perceiver"),fQo=o(" \u2014 "),PV=a("a"),mQo=o("PerceiverForImageClassificationLearned"),gQo=o(" or "),IV=a("a"),hQo=o("PerceiverForImageClassificationFourier"),pQo=o(" or "),qV=a("a"),uQo=o("PerceiverForImageClassificationConvProcessing"),_Qo=o(" (Perceiver model)"),bQo=l(),zv=a("li"),Nhe=a("strong"),vQo=o("poolformer"),FQo=o(" \u2014 "),NV=a("a"),TQo=o("PoolFormerForImageClassification"),MQo=o(" (PoolFormer model)"),EQo=l(),Qv=a("li"),jhe=a("strong"),CQo=o("regnet"),wQo=o(" \u2014 "),jV=a("a"),AQo=o("RegNetForImageClassification"),yQo=o(" (RegNet model)"),LQo=l(),Wv=a("li"),Dhe=a("strong"),xQo=o("resnet"),$Qo=o(" \u2014 "),DV=a("a"),kQo=o("ResNetForImageClassification"),SQo=o(" (ResNet model)"),RQo=l(),Hv=a("li"),Ghe=a("strong"),BQo=o("segformer"),PQo=o(" \u2014 "),GV=a("a"),IQo=o("SegformerForImageClassification"),qQo=o(" (SegFormer model)"),NQo=l(),Uv=a("li"),Ohe=a("strong"),jQo=o("swin"),DQo=o(" \u2014 "),OV=a("a"),GQo=o("SwinForImageClassification"),OQo=o(" (Swin model)"),VQo=l(),Jv=a("li"),Vhe=a("strong"),XQo=o("van"),zQo=o(" \u2014 "),VV=a("a"),QQo=o("VanForImageClassification"),WQo=o(" (VAN model)"),HQo=l(),Yv=a("li"),Xhe=a("strong"),UQo=o("vit"),JQo=o(" \u2014 "),XV=a("a"),YQo=o("ViTForImageClassification"),KQo=o(" (ViT model)"),ZQo=l(),Kv=a("p"),eWo=o("The model is set in evaluation mode by default using "),zhe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),tWo=o("model.train()"),aWo=l(),F(Zv.$$.fragment),OIe=l(),td=a("h2"),eF=a("a"),Whe=a("span"),F(Ry.$$.fragment),nWo=l(),Hhe=a("span"),sWo=o("AutoModelForVision2Seq"),VIe=l(),Do=a("div"),F(By.$$.fragment),lWo=l(),ad=a("p"),iWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zV=a("a"),dWo=o("from_pretrained()"),cWo=o(" class method or the "),QV=a("a"),fWo=o("from_config()"),mWo=o(` class
method.`),gWo=l(),Py=a("p"),hWo=o("This class cannot be instantiated directly using "),Uhe=a("code"),pWo=o("__init__()"),uWo=o(" (throws an error)."),_Wo=l(),ht=a("div"),F(Iy.$$.fragment),bWo=l(),Jhe=a("p"),vWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FWo=l(),nd=a("p"),TWo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),MWo=o("not"),EWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),CWo=o("from_pretrained()"),wWo=o(" to load the model weights."),AWo=l(),F(oF.$$.fragment),yWo=l(),so=a("div"),F(qy.$$.fragment),LWo=l(),Khe=a("p"),xWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Wo=l(),Na=a("p"),kWo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),SWo=o("model_type"),RWo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),BWo=o("pretrained_model_name_or_path"),PWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(":"),NWo=l(),rpe=a("ul"),rF=a("li"),tpe=a("strong"),jWo=o("vision-encoder-decoder"),DWo=o(" \u2014 "),HV=a("a"),GWo=o("VisionEncoderDecoderModel"),OWo=o(" (Vision Encoder decoder model)"),VWo=l(),tF=a("p"),XWo=o("The model is set in evaluation mode by default using "),ape=a("code"),zWo=o("model.eval()"),QWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),WWo=o("model.train()"),HWo=l(),F(aF.$$.fragment),XIe=l(),sd=a("h2"),nF=a("a"),spe=a("span"),F(Ny.$$.fragment),UWo=l(),lpe=a("span"),JWo=o("AutoModelForAudioClassification"),zIe=l(),Go=a("div"),F(jy.$$.fragment),YWo=l(),ld=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UV=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),JV=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),Dy=a("p"),aHo=o("This class cannot be instantiated directly using "),ipe=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),pt=a("div"),F(Gy.$$.fragment),iHo=l(),dpe=a("p"),dHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cHo=l(),id=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),uHo=l(),F(sF.$$.fragment),_Ho=l(),lo=a("div"),F(Oy.$$.fragment),bHo=l(),fpe=a("p"),vHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FHo=l(),ja=a("p"),THo=o("The model class to instantiate is selected based on the "),mpe=a("code"),MHo=o("model_type"),EHo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),AHo=o("pretrained_model_name_or_path"),yHo=o(":"),LHo=l(),Ne=a("ul"),lF=a("li"),ppe=a("strong"),xHo=o("data2vec-audio"),$Ho=o(" \u2014 "),KV=a("a"),kHo=o("Data2VecAudioForSequenceClassification"),SHo=o(" (Data2VecAudio model)"),RHo=l(),iF=a("li"),upe=a("strong"),BHo=o("hubert"),PHo=o(" \u2014 "),ZV=a("a"),IHo=o("HubertForSequenceClassification"),qHo=o(" (Hubert model)"),NHo=l(),dF=a("li"),_pe=a("strong"),jHo=o("sew"),DHo=o(" \u2014 "),eX=a("a"),GHo=o("SEWForSequenceClassification"),OHo=o(" (SEW model)"),VHo=l(),cF=a("li"),bpe=a("strong"),XHo=o("sew-d"),zHo=o(" \u2014 "),oX=a("a"),QHo=o("SEWDForSequenceClassification"),WHo=o(" (SEW-D model)"),HHo=l(),fF=a("li"),vpe=a("strong"),UHo=o("unispeech"),JHo=o(" \u2014 "),rX=a("a"),YHo=o("UniSpeechForSequenceClassification"),KHo=o(" (UniSpeech model)"),ZHo=l(),mF=a("li"),Fpe=a("strong"),eUo=o("unispeech-sat"),oUo=o(" \u2014 "),tX=a("a"),rUo=o("UniSpeechSatForSequenceClassification"),tUo=o(" (UniSpeechSat model)"),aUo=l(),gF=a("li"),Tpe=a("strong"),nUo=o("wav2vec2"),sUo=o(" \u2014 "),aX=a("a"),lUo=o("Wav2Vec2ForSequenceClassification"),iUo=o(" (Wav2Vec2 model)"),dUo=l(),hF=a("li"),Mpe=a("strong"),cUo=o("wavlm"),fUo=o(" \u2014 "),nX=a("a"),mUo=o("WavLMForSequenceClassification"),gUo=o(" (WavLM model)"),hUo=l(),pF=a("p"),pUo=o("The model is set in evaluation mode by default using "),Epe=a("code"),uUo=o("model.eval()"),_Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),bUo=o("model.train()"),vUo=l(),F(uF.$$.fragment),QIe=l(),dd=a("h2"),_F=a("a"),wpe=a("span"),F(Vy.$$.fragment),FUo=l(),Ape=a("span"),TUo=o("AutoModelForAudioFrameClassification"),WIe=l(),Oo=a("div"),F(Xy.$$.fragment),MUo=l(),cd=a("p"),EUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sX=a("a"),CUo=o("from_pretrained()"),wUo=o(" class method or the "),lX=a("a"),AUo=o("from_config()"),yUo=o(` class
method.`),LUo=l(),zy=a("p"),xUo=o("This class cannot be instantiated directly using "),ype=a("code"),$Uo=o("__init__()"),kUo=o(" (throws an error)."),SUo=l(),ut=a("div"),F(Qy.$$.fragment),RUo=l(),Lpe=a("p"),BUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),PUo=l(),fd=a("p"),IUo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),qUo=o("not"),NUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),jUo=o("from_pretrained()"),DUo=o(" to load the model weights."),GUo=l(),F(bF.$$.fragment),OUo=l(),io=a("div"),F(Wy.$$.fragment),VUo=l(),$pe=a("p"),XUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zUo=l(),Da=a("p"),QUo=o("The model class to instantiate is selected based on the "),kpe=a("code"),WUo=o("model_type"),HUo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),UUo=o("pretrained_model_name_or_path"),JUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(":"),ZUo=l(),Ga=a("ul"),vF=a("li"),Bpe=a("strong"),eJo=o("data2vec-audio"),oJo=o(" \u2014 "),dX=a("a"),rJo=o("Data2VecAudioForAudioFrameClassification"),tJo=o(" (Data2VecAudio model)"),aJo=l(),FF=a("li"),Ppe=a("strong"),nJo=o("unispeech-sat"),sJo=o(" \u2014 "),cX=a("a"),lJo=o("UniSpeechSatForAudioFrameClassification"),iJo=o(" (UniSpeechSat model)"),dJo=l(),TF=a("li"),Ipe=a("strong"),cJo=o("wav2vec2"),fJo=o(" \u2014 "),fX=a("a"),mJo=o("Wav2Vec2ForAudioFrameClassification"),gJo=o(" (Wav2Vec2 model)"),hJo=l(),MF=a("li"),qpe=a("strong"),pJo=o("wavlm"),uJo=o(" \u2014 "),mX=a("a"),_Jo=o("WavLMForAudioFrameClassification"),bJo=o(" (WavLM model)"),vJo=l(),EF=a("p"),FJo=o("The model is set in evaluation mode by default using "),Npe=a("code"),TJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),EJo=o("model.train()"),CJo=l(),F(CF.$$.fragment),HIe=l(),md=a("h2"),wF=a("a"),Dpe=a("span"),F(Hy.$$.fragment),wJo=l(),Gpe=a("span"),AJo=o("AutoModelForCTC"),UIe=l(),Vo=a("div"),F(Uy.$$.fragment),yJo=l(),gd=a("p"),LJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gX=a("a"),xJo=o("from_pretrained()"),$Jo=o(" class method or the "),hX=a("a"),kJo=o("from_config()"),SJo=o(` class
method.`),RJo=l(),Jy=a("p"),BJo=o("This class cannot be instantiated directly using "),Ope=a("code"),PJo=o("__init__()"),IJo=o(" (throws an error)."),qJo=l(),_t=a("div"),F(Yy.$$.fragment),NJo=l(),Vpe=a("p"),jJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),DJo=l(),hd=a("p"),GJo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),OJo=o("not"),VJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),XJo=o("from_pretrained()"),zJo=o(" to load the model weights."),QJo=l(),F(AF.$$.fragment),WJo=l(),co=a("div"),F(Ky.$$.fragment),HJo=l(),zpe=a("p"),UJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JJo=l(),Oa=a("p"),YJo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),KJo=o("model_type"),ZJo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),rYo=o("pretrained_model_name_or_path"),tYo=o(":"),aYo=l(),je=a("ul"),yF=a("li"),Upe=a("strong"),nYo=o("data2vec-audio"),sYo=o(" \u2014 "),uX=a("a"),lYo=o("Data2VecAudioForCTC"),iYo=o(" (Data2VecAudio model)"),dYo=l(),LF=a("li"),Jpe=a("strong"),cYo=o("hubert"),fYo=o(" \u2014 "),_X=a("a"),mYo=o("HubertForCTC"),gYo=o(" (Hubert model)"),hYo=l(),xF=a("li"),Ype=a("strong"),pYo=o("sew"),uYo=o(" \u2014 "),bX=a("a"),_Yo=o("SEWForCTC"),bYo=o(" (SEW model)"),vYo=l(),$F=a("li"),Kpe=a("strong"),FYo=o("sew-d"),TYo=o(" \u2014 "),vX=a("a"),MYo=o("SEWDForCTC"),EYo=o(" (SEW-D model)"),CYo=l(),kF=a("li"),Zpe=a("strong"),wYo=o("unispeech"),AYo=o(" \u2014 "),FX=a("a"),yYo=o("UniSpeechForCTC"),LYo=o(" (UniSpeech model)"),xYo=l(),SF=a("li"),eue=a("strong"),$Yo=o("unispeech-sat"),kYo=o(" \u2014 "),TX=a("a"),SYo=o("UniSpeechSatForCTC"),RYo=o(" (UniSpeechSat model)"),BYo=l(),RF=a("li"),oue=a("strong"),PYo=o("wav2vec2"),IYo=o(" \u2014 "),MX=a("a"),qYo=o("Wav2Vec2ForCTC"),NYo=o(" (Wav2Vec2 model)"),jYo=l(),BF=a("li"),rue=a("strong"),DYo=o("wavlm"),GYo=o(" \u2014 "),EX=a("a"),OYo=o("WavLMForCTC"),VYo=o(" (WavLM model)"),XYo=l(),PF=a("p"),zYo=o("The model is set in evaluation mode by default using "),tue=a("code"),QYo=o("model.eval()"),WYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),HYo=o("model.train()"),UYo=l(),F(IF.$$.fragment),JIe=l(),pd=a("h2"),qF=a("a"),nue=a("span"),F(Zy.$$.fragment),JYo=l(),sue=a("span"),YYo=o("AutoModelForSpeechSeq2Seq"),YIe=l(),Xo=a("div"),F(eL.$$.fragment),KYo=l(),ud=a("p"),ZYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CX=a("a"),eKo=o("from_pretrained()"),oKo=o(" class method or the "),wX=a("a"),rKo=o("from_config()"),tKo=o(` class
method.`),aKo=l(),oL=a("p"),nKo=o("This class cannot be instantiated directly using "),lue=a("code"),sKo=o("__init__()"),lKo=o(" (throws an error)."),iKo=l(),bt=a("div"),F(rL.$$.fragment),dKo=l(),iue=a("p"),cKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fKo=l(),_d=a("p"),mKo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),gKo=o("not"),hKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),pKo=o("from_pretrained()"),uKo=o(" to load the model weights."),_Ko=l(),F(NF.$$.fragment),bKo=l(),fo=a("div"),F(tL.$$.fragment),vKo=l(),cue=a("p"),FKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TKo=l(),Va=a("p"),MKo=o("The model class to instantiate is selected based on the "),fue=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(":"),xKo=l(),aL=a("ul"),jF=a("li"),hue=a("strong"),$Ko=o("speech-encoder-decoder"),kKo=o(" \u2014 "),yX=a("a"),SKo=o("SpeechEncoderDecoderModel"),RKo=o(" (Speech Encoder decoder model)"),BKo=l(),DF=a("li"),pue=a("strong"),PKo=o("speech_to_text"),IKo=o(" \u2014 "),LX=a("a"),qKo=o("Speech2TextForConditionalGeneration"),NKo=o(" (Speech2Text model)"),jKo=l(),GF=a("p"),DKo=o("The model is set in evaluation mode by default using "),uue=a("code"),GKo=o("model.eval()"),OKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=a("code"),VKo=o("model.train()"),XKo=l(),F(OF.$$.fragment),KIe=l(),bd=a("h2"),VF=a("a"),bue=a("span"),F(nL.$$.fragment),zKo=l(),vue=a("span"),QKo=o("AutoModelForAudioXVector"),ZIe=l(),zo=a("div"),F(sL.$$.fragment),WKo=l(),vd=a("p"),HKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xX=a("a"),UKo=o("from_pretrained()"),JKo=o(" class method or the "),$X=a("a"),YKo=o("from_config()"),KKo=o(` class
method.`),ZKo=l(),lL=a("p"),eZo=o("This class cannot be instantiated directly using "),Fue=a("code"),oZo=o("__init__()"),rZo=o(" (throws an error)."),tZo=l(),vt=a("div"),F(iL.$$.fragment),aZo=l(),Tue=a("p"),nZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sZo=l(),Fd=a("p"),lZo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),iZo=o("not"),dZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),cZo=o("from_pretrained()"),fZo=o(" to load the model weights."),mZo=l(),F(XF.$$.fragment),gZo=l(),mo=a("div"),F(dL.$$.fragment),hZo=l(),Eue=a("p"),pZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uZo=l(),Xa=a("p"),_Zo=o("The model class to instantiate is selected based on the "),Cue=a("code"),bZo=o("model_type"),vZo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),FZo=o("pretrained_model_name_or_path"),TZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),MZo=o("pretrained_model_name_or_path"),EZo=o(":"),CZo=l(),za=a("ul"),zF=a("li"),yue=a("strong"),wZo=o("data2vec-audio"),AZo=o(" \u2014 "),SX=a("a"),yZo=o("Data2VecAudioForXVector"),LZo=o(" (Data2VecAudio model)"),xZo=l(),QF=a("li"),Lue=a("strong"),$Zo=o("unispeech-sat"),kZo=o(" \u2014 "),RX=a("a"),SZo=o("UniSpeechSatForXVector"),RZo=o(" (UniSpeechSat model)"),BZo=l(),WF=a("li"),xue=a("strong"),PZo=o("wav2vec2"),IZo=o(" \u2014 "),BX=a("a"),qZo=o("Wav2Vec2ForXVector"),NZo=o(" (Wav2Vec2 model)"),jZo=l(),HF=a("li"),$ue=a("strong"),DZo=o("wavlm"),GZo=o(" \u2014 "),PX=a("a"),OZo=o("WavLMForXVector"),VZo=o(" (WavLM model)"),XZo=l(),UF=a("p"),zZo=o("The model is set in evaluation mode by default using "),kue=a("code"),QZo=o("model.eval()"),WZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),HZo=o("model.train()"),UZo=l(),F(JF.$$.fragment),eqe=l(),Td=a("h2"),YF=a("a"),Rue=a("span"),F(cL.$$.fragment),JZo=l(),Bue=a("span"),YZo=o("AutoModelForMaskedImageModeling"),oqe=l(),Qo=a("div"),F(fL.$$.fragment),KZo=l(),Md=a("p"),ZZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IX=a("a"),eer=o("from_pretrained()"),oer=o(" class method or the "),qX=a("a"),rer=o("from_config()"),ter=o(` class
method.`),aer=l(),mL=a("p"),ner=o("This class cannot be instantiated directly using "),Pue=a("code"),ser=o("__init__()"),ler=o(" (throws an error)."),ier=l(),Ft=a("div"),F(gL.$$.fragment),der=l(),Iue=a("p"),cer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fer=l(),Ed=a("p"),mer=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),ger=o("not"),her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),per=o("from_pretrained()"),uer=o(" to load the model weights."),_er=l(),F(KF.$$.fragment),ber=l(),go=a("div"),F(hL.$$.fragment),ver=l(),Nue=a("p"),Fer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ter=l(),Qa=a("p"),Mer=o("The model class to instantiate is selected based on the "),jue=a("code"),Eer=o("model_type"),Cer=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(":"),xer=l(),Cd=a("ul"),ZF=a("li"),Oue=a("strong"),$er=o("deit"),ker=o(" \u2014 "),jX=a("a"),Ser=o("DeiTForMaskedImageModeling"),Rer=o(" (DeiT model)"),Ber=l(),e0=a("li"),Vue=a("strong"),Per=o("swin"),Ier=o(" \u2014 "),DX=a("a"),qer=o("SwinForMaskedImageModeling"),Ner=o(" (Swin model)"),jer=l(),o0=a("li"),Xue=a("strong"),Der=o("vit"),Ger=o(" \u2014 "),GX=a("a"),Oer=o("ViTForMaskedImageModeling"),Ver=o(" (ViT model)"),Xer=l(),r0=a("p"),zer=o("The model is set in evaluation mode by default using "),zue=a("code"),Qer=o("model.eval()"),Wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Her=o("model.train()"),Uer=l(),F(t0.$$.fragment),rqe=l(),wd=a("h2"),a0=a("a"),Wue=a("span"),F(pL.$$.fragment),Jer=l(),Hue=a("span"),Yer=o("AutoModelForObjectDetection"),tqe=l(),Wo=a("div"),F(uL.$$.fragment),Ker=l(),Ad=a("p"),Zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OX=a("a"),eor=o("from_pretrained()"),oor=o(" class method or the "),VX=a("a"),ror=o("from_config()"),tor=o(` class
method.`),aor=l(),_L=a("p"),nor=o("This class cannot be instantiated directly using "),Uue=a("code"),sor=o("__init__()"),lor=o(" (throws an error)."),ior=l(),Tt=a("div"),F(bL.$$.fragment),dor=l(),Jue=a("p"),cor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mor=l(),yd=a("p"),gor=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),hor=o("not"),por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),uor=o("from_pretrained()"),_or=o(" to load the model weights."),bor=l(),F(n0.$$.fragment),vor=l(),ho=a("div"),F(vL.$$.fragment),For=l(),Kue=a("p"),Tor=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Mor=l(),Wa=a("p"),Eor=o("The model class to instantiate is selected based on the "),Zue=a("code"),Cor=o("model_type"),wor=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),Aor=o("pretrained_model_name_or_path"),yor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),Lor=o("pretrained_model_name_or_path"),xor=o(":"),$or=l(),FL=a("ul"),s0=a("li"),r_e=a("strong"),kor=o("detr"),Sor=o(" \u2014 "),zX=a("a"),Ror=o("DetrForObjectDetection"),Bor=o(" (DETR model)"),Por=l(),l0=a("li"),t_e=a("strong"),Ior=o("yolos"),qor=o(" \u2014 "),QX=a("a"),Nor=o("YolosForObjectDetection"),jor=o(" (YOLOS model)"),Dor=l(),i0=a("p"),Gor=o("The model is set in evaluation mode by default using "),a_e=a("code"),Oor=o("model.eval()"),Vor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),Xor=o("model.train()"),zor=l(),F(d0.$$.fragment),aqe=l(),Ld=a("h2"),c0=a("a"),s_e=a("span"),F(TL.$$.fragment),Qor=l(),l_e=a("span"),Wor=o("AutoModelForImageSegmentation"),nqe=l(),Ho=a("div"),F(ML.$$.fragment),Hor=l(),xd=a("p"),Uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WX=a("a"),Jor=o("from_pretrained()"),Yor=o(" class method or the "),HX=a("a"),Kor=o("from_config()"),Zor=o(` class
method.`),err=l(),EL=a("p"),orr=o("This class cannot be instantiated directly using "),i_e=a("code"),rrr=o("__init__()"),trr=o(" (throws an error)."),arr=l(),Mt=a("div"),F(CL.$$.fragment),nrr=l(),d_e=a("p"),srr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),lrr=l(),$d=a("p"),irr=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),drr=o("not"),crr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),frr=o("from_pretrained()"),mrr=o(" to load the model weights."),grr=l(),F(f0.$$.fragment),hrr=l(),po=a("div"),F(wL.$$.fragment),prr=l(),f_e=a("p"),urr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_rr=l(),Ha=a("p"),brr=o("The model class to instantiate is selected based on the "),m_e=a("code"),vrr=o("model_type"),Frr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),Trr=o("pretrained_model_name_or_path"),Mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(":"),wrr=l(),p_e=a("ul"),m0=a("li"),u_e=a("strong"),Arr=o("detr"),yrr=o(" \u2014 "),JX=a("a"),Lrr=o("DetrForSegmentation"),xrr=o(" (DETR model)"),$rr=l(),g0=a("p"),krr=o("The model is set in evaluation mode by default using "),__e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),Brr=o("model.train()"),Prr=l(),F(h0.$$.fragment),sqe=l(),kd=a("h2"),p0=a("a"),v_e=a("span"),F(AL.$$.fragment),Irr=l(),F_e=a("span"),qrr=o("AutoModelForSemanticSegmentation"),lqe=l(),Uo=a("div"),F(yL.$$.fragment),Nrr=l(),Sd=a("p"),jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YX=a("a"),Drr=o("from_pretrained()"),Grr=o(" class method or the "),KX=a("a"),Orr=o("from_config()"),Vrr=o(` class
method.`),Xrr=l(),LL=a("p"),zrr=o("This class cannot be instantiated directly using "),T_e=a("code"),Qrr=o("__init__()"),Wrr=o(" (throws an error)."),Hrr=l(),Et=a("div"),F(xL.$$.fragment),Urr=l(),M_e=a("p"),Jrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yrr=l(),Rd=a("p"),Krr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),Zrr=o("not"),etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),otr=o("from_pretrained()"),rtr=o(" to load the model weights."),ttr=l(),F(u0.$$.fragment),atr=l(),uo=a("div"),F($L.$$.fragment),ntr=l(),C_e=a("p"),str=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ltr=l(),Ua=a("p"),itr=o("The model class to instantiate is selected based on the "),w_e=a("code"),dtr=o("model_type"),ctr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(":"),ptr=l(),Ja=a("ul"),_0=a("li"),L_e=a("strong"),utr=o("beit"),_tr=o(" \u2014 "),ez=a("a"),btr=o("BeitForSemanticSegmentation"),vtr=o(" (BEiT model)"),Ftr=l(),b0=a("li"),x_e=a("strong"),Ttr=o("data2vec-vision"),Mtr=o(" \u2014 "),oz=a("a"),Etr=o("Data2VecVisionForSemanticSegmentation"),Ctr=o(" (Data2VecVision model)"),wtr=l(),v0=a("li"),$_e=a("strong"),Atr=o("dpt"),ytr=o(" \u2014 "),rz=a("a"),Ltr=o("DPTForSemanticSegmentation"),xtr=o(" (DPT model)"),$tr=l(),F0=a("li"),k_e=a("strong"),ktr=o("segformer"),Str=o(" \u2014 "),tz=a("a"),Rtr=o("SegformerForSemanticSegmentation"),Btr=o(" (SegFormer model)"),Ptr=l(),T0=a("p"),Itr=o("The model is set in evaluation mode by default using "),S_e=a("code"),qtr=o("model.eval()"),Ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),jtr=o("model.train()"),Dtr=l(),F(M0.$$.fragment),iqe=l(),Bd=a("h2"),E0=a("a"),B_e=a("span"),F(kL.$$.fragment),Gtr=l(),P_e=a("span"),Otr=o("AutoModelForInstanceSegmentation"),dqe=l(),Jo=a("div"),F(SL.$$.fragment),Vtr=l(),Pd=a("p"),Xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),az=a("a"),ztr=o("from_pretrained()"),Qtr=o(" class method or the "),nz=a("a"),Wtr=o("from_config()"),Htr=o(` class
method.`),Utr=l(),RL=a("p"),Jtr=o("This class cannot be instantiated directly using "),I_e=a("code"),Ytr=o("__init__()"),Ktr=o(" (throws an error)."),Ztr=l(),Ct=a("div"),F(BL.$$.fragment),ear=l(),q_e=a("p"),oar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rar=l(),Id=a("p"),tar=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),aar=o("not"),nar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),sar=o("from_pretrained()"),lar=o(" to load the model weights."),iar=l(),F(C0.$$.fragment),dar=l(),_o=a("div"),F(PL.$$.fragment),car=l(),j_e=a("p"),far=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mar=l(),Ya=a("p"),gar=o("The model class to instantiate is selected based on the "),D_e=a("code"),har=o("model_type"),par=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),uar=o("pretrained_model_name_or_path"),_ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),bar=o("pretrained_model_name_or_path"),Far=o(":"),Tar=l(),V_e=a("ul"),w0=a("li"),X_e=a("strong"),Mar=o("maskformer"),Ear=o(" \u2014 "),lz=a("a"),Car=o("MaskFormerForInstanceSegmentation"),war=o(" (MaskFormer model)"),Aar=l(),A0=a("p"),yar=o("The model is set in evaluation mode by default using "),z_e=a("code"),Lar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),$ar=o("model.train()"),kar=l(),F(y0.$$.fragment),cqe=l(),qd=a("h2"),L0=a("a"),W_e=a("span"),F(IL.$$.fragment),Sar=l(),H_e=a("span"),Rar=o("TFAutoModel"),fqe=l(),Yo=a("div"),F(qL.$$.fragment),Bar=l(),Nd=a("p"),Par=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iz=a("a"),Iar=o("from_pretrained()"),qar=o(" class method or the "),dz=a("a"),Nar=o("from_config()"),jar=o(` class
method.`),Dar=l(),NL=a("p"),Gar=o("This class cannot be instantiated directly using "),U_e=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),wt=a("div"),F(jL.$$.fragment),zar=l(),J_e=a("p"),Qar=o("Instantiates one of the base model classes of the library from a configuration."),War=l(),jd=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F(x0.$$.fragment),enr=l(),wr=a("div"),F(DL.$$.fragment),onr=l(),K_e=a("p"),rnr=o("Instantiate one of the base model classes of the library from a pretrained model."),tnr=l(),Ka=a("p"),anr=o("The model class to instantiate is selected based on the "),Z_e=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),fnr=l(),j=a("ul"),$0=a("li"),r2e=a("strong"),mnr=o("albert"),gnr=o(" \u2014 "),fz=a("a"),hnr=o("TFAlbertModel"),pnr=o(" (ALBERT model)"),unr=l(),k0=a("li"),t2e=a("strong"),_nr=o("bart"),bnr=o(" \u2014 "),mz=a("a"),vnr=o("TFBartModel"),Fnr=o(" (BART model)"),Tnr=l(),S0=a("li"),a2e=a("strong"),Mnr=o("bert"),Enr=o(" \u2014 "),gz=a("a"),Cnr=o("TFBertModel"),wnr=o(" (BERT model)"),Anr=l(),R0=a("li"),n2e=a("strong"),ynr=o("blenderbot"),Lnr=o(" \u2014 "),hz=a("a"),xnr=o("TFBlenderbotModel"),$nr=o(" (Blenderbot model)"),knr=l(),B0=a("li"),s2e=a("strong"),Snr=o("blenderbot-small"),Rnr=o(" \u2014 "),pz=a("a"),Bnr=o("TFBlenderbotSmallModel"),Pnr=o(" (BlenderbotSmall model)"),Inr=l(),P0=a("li"),l2e=a("strong"),qnr=o("camembert"),Nnr=o(" \u2014 "),uz=a("a"),jnr=o("TFCamembertModel"),Dnr=o(" (CamemBERT model)"),Gnr=l(),I0=a("li"),i2e=a("strong"),Onr=o("clip"),Vnr=o(" \u2014 "),_z=a("a"),Xnr=o("TFCLIPModel"),znr=o(" (CLIP model)"),Qnr=l(),q0=a("li"),d2e=a("strong"),Wnr=o("convbert"),Hnr=o(" \u2014 "),bz=a("a"),Unr=o("TFConvBertModel"),Jnr=o(" (ConvBERT model)"),Ynr=l(),N0=a("li"),c2e=a("strong"),Knr=o("convnext"),Znr=o(" \u2014 "),vz=a("a"),esr=o("TFConvNextModel"),osr=o(" (ConvNext model)"),rsr=l(),j0=a("li"),f2e=a("strong"),tsr=o("ctrl"),asr=o(" \u2014 "),Fz=a("a"),nsr=o("TFCTRLModel"),ssr=o(" (CTRL model)"),lsr=l(),D0=a("li"),m2e=a("strong"),isr=o("data2vec-vision"),dsr=o(" \u2014 "),Tz=a("a"),csr=o("TFData2VecVisionModel"),fsr=o(" (Data2VecVision model)"),msr=l(),G0=a("li"),g2e=a("strong"),gsr=o("deberta"),hsr=o(" \u2014 "),Mz=a("a"),psr=o("TFDebertaModel"),usr=o(" (DeBERTa model)"),_sr=l(),O0=a("li"),h2e=a("strong"),bsr=o("deberta-v2"),vsr=o(" \u2014 "),Ez=a("a"),Fsr=o("TFDebertaV2Model"),Tsr=o(" (DeBERTa-v2 model)"),Msr=l(),V0=a("li"),p2e=a("strong"),Esr=o("distilbert"),Csr=o(" \u2014 "),Cz=a("a"),wsr=o("TFDistilBertModel"),Asr=o(" (DistilBERT model)"),ysr=l(),X0=a("li"),u2e=a("strong"),Lsr=o("dpr"),xsr=o(" \u2014 "),wz=a("a"),$sr=o("TFDPRQuestionEncoder"),ksr=o(" (DPR model)"),Ssr=l(),z0=a("li"),_2e=a("strong"),Rsr=o("electra"),Bsr=o(" \u2014 "),Az=a("a"),Psr=o("TFElectraModel"),Isr=o(" (ELECTRA model)"),qsr=l(),Q0=a("li"),b2e=a("strong"),Nsr=o("flaubert"),jsr=o(" \u2014 "),yz=a("a"),Dsr=o("TFFlaubertModel"),Gsr=o(" (FlauBERT model)"),Osr=l(),Bs=a("li"),v2e=a("strong"),Vsr=o("funnel"),Xsr=o(" \u2014 "),Lz=a("a"),zsr=o("TFFunnelModel"),Qsr=o(" or "),xz=a("a"),Wsr=o("TFFunnelBaseModel"),Hsr=o(" (Funnel Transformer model)"),Usr=l(),W0=a("li"),F2e=a("strong"),Jsr=o("gpt2"),Ysr=o(" \u2014 "),$z=a("a"),Ksr=o("TFGPT2Model"),Zsr=o(" (OpenAI GPT-2 model)"),elr=l(),H0=a("li"),T2e=a("strong"),olr=o("gptj"),rlr=o(" \u2014 "),kz=a("a"),tlr=o("TFGPTJModel"),alr=o(" (GPT-J model)"),nlr=l(),U0=a("li"),M2e=a("strong"),slr=o("hubert"),llr=o(" \u2014 "),Sz=a("a"),ilr=o("TFHubertModel"),dlr=o(" (Hubert model)"),clr=l(),J0=a("li"),E2e=a("strong"),flr=o("layoutlm"),mlr=o(" \u2014 "),Rz=a("a"),glr=o("TFLayoutLMModel"),hlr=o(" (LayoutLM model)"),plr=l(),Y0=a("li"),C2e=a("strong"),ulr=o("led"),_lr=o(" \u2014 "),Bz=a("a"),blr=o("TFLEDModel"),vlr=o(" (LED model)"),Flr=l(),K0=a("li"),w2e=a("strong"),Tlr=o("longformer"),Mlr=o(" \u2014 "),Pz=a("a"),Elr=o("TFLongformerModel"),Clr=o(" (Longformer model)"),wlr=l(),Z0=a("li"),A2e=a("strong"),Alr=o("lxmert"),ylr=o(" \u2014 "),Iz=a("a"),Llr=o("TFLxmertModel"),xlr=o(" (LXMERT model)"),$lr=l(),eT=a("li"),y2e=a("strong"),klr=o("marian"),Slr=o(" \u2014 "),qz=a("a"),Rlr=o("TFMarianModel"),Blr=o(" (Marian model)"),Plr=l(),oT=a("li"),L2e=a("strong"),Ilr=o("mbart"),qlr=o(" \u2014 "),Nz=a("a"),Nlr=o("TFMBartModel"),jlr=o(" (mBART model)"),Dlr=l(),rT=a("li"),x2e=a("strong"),Glr=o("mobilebert"),Olr=o(" \u2014 "),jz=a("a"),Vlr=o("TFMobileBertModel"),Xlr=o(" (MobileBERT model)"),zlr=l(),tT=a("li"),$2e=a("strong"),Qlr=o("mpnet"),Wlr=o(" \u2014 "),Dz=a("a"),Hlr=o("TFMPNetModel"),Ulr=o(" (MPNet model)"),Jlr=l(),aT=a("li"),k2e=a("strong"),Ylr=o("mt5"),Klr=o(" \u2014 "),Gz=a("a"),Zlr=o("TFMT5Model"),eir=o(" (mT5 model)"),oir=l(),nT=a("li"),S2e=a("strong"),rir=o("openai-gpt"),tir=o(" \u2014 "),Oz=a("a"),air=o("TFOpenAIGPTModel"),nir=o(" (OpenAI GPT model)"),sir=l(),sT=a("li"),R2e=a("strong"),lir=o("pegasus"),iir=o(" \u2014 "),Vz=a("a"),dir=o("TFPegasusModel"),cir=o(" (Pegasus model)"),fir=l(),lT=a("li"),B2e=a("strong"),mir=o("rembert"),gir=o(" \u2014 "),Xz=a("a"),hir=o("TFRemBertModel"),pir=o(" (RemBERT model)"),uir=l(),iT=a("li"),P2e=a("strong"),_ir=o("roberta"),bir=o(" \u2014 "),zz=a("a"),vir=o("TFRobertaModel"),Fir=o(" (RoBERTa model)"),Tir=l(),dT=a("li"),I2e=a("strong"),Mir=o("roformer"),Eir=o(" \u2014 "),Qz=a("a"),Cir=o("TFRoFormerModel"),wir=o(" (RoFormer model)"),Air=l(),cT=a("li"),q2e=a("strong"),yir=o("speech_to_text"),Lir=o(" \u2014 "),Wz=a("a"),xir=o("TFSpeech2TextModel"),$ir=o(" (Speech2Text model)"),kir=l(),fT=a("li"),N2e=a("strong"),Sir=o("t5"),Rir=o(" \u2014 "),Hz=a("a"),Bir=o("TFT5Model"),Pir=o(" (T5 model)"),Iir=l(),mT=a("li"),j2e=a("strong"),qir=o("tapas"),Nir=o(" \u2014 "),Uz=a("a"),jir=o("TFTapasModel"),Dir=o(" (TAPAS model)"),Gir=l(),gT=a("li"),D2e=a("strong"),Oir=o("transfo-xl"),Vir=o(" \u2014 "),Jz=a("a"),Xir=o("TFTransfoXLModel"),zir=o(" (Transformer-XL model)"),Qir=l(),hT=a("li"),G2e=a("strong"),Wir=o("vit"),Hir=o(" \u2014 "),Yz=a("a"),Uir=o("TFViTModel"),Jir=o(" (ViT model)"),Yir=l(),pT=a("li"),O2e=a("strong"),Kir=o("vit_mae"),Zir=o(" \u2014 "),Kz=a("a"),edr=o("TFViTMAEModel"),odr=o(" (ViTMAE model)"),rdr=l(),uT=a("li"),V2e=a("strong"),tdr=o("wav2vec2"),adr=o(" \u2014 "),Zz=a("a"),ndr=o("TFWav2Vec2Model"),sdr=o(" (Wav2Vec2 model)"),ldr=l(),_T=a("li"),X2e=a("strong"),idr=o("xlm"),ddr=o(" \u2014 "),eQ=a("a"),cdr=o("TFXLMModel"),fdr=o(" (XLM model)"),mdr=l(),bT=a("li"),z2e=a("strong"),gdr=o("xlm-roberta"),hdr=o(" \u2014 "),oQ=a("a"),pdr=o("TFXLMRobertaModel"),udr=o(" (XLM-RoBERTa model)"),_dr=l(),vT=a("li"),Q2e=a("strong"),bdr=o("xlnet"),vdr=o(" \u2014 "),rQ=a("a"),Fdr=o("TFXLNetModel"),Tdr=o(" (XLNet model)"),Mdr=l(),F(FT.$$.fragment),mqe=l(),Dd=a("h2"),TT=a("a"),W2e=a("span"),F(GL.$$.fragment),Edr=l(),H2e=a("span"),Cdr=o("TFAutoModelForPreTraining"),gqe=l(),Ko=a("div"),F(OL.$$.fragment),wdr=l(),Gd=a("p"),Adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=a("a"),ydr=o("from_pretrained()"),Ldr=o(" class method or the "),aQ=a("a"),xdr=o("from_config()"),$dr=o(` class
method.`),kdr=l(),VL=a("p"),Sdr=o("This class cannot be instantiated directly using "),U2e=a("code"),Rdr=o("__init__()"),Bdr=o(" (throws an error)."),Pdr=l(),At=a("div"),F(XL.$$.fragment),Idr=l(),J2e=a("p"),qdr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ndr=l(),Od=a("p"),jdr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),Ddr=o("not"),Gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Odr=o("from_pretrained()"),Vdr=o(" to load the model weights."),Xdr=l(),F(MT.$$.fragment),zdr=l(),Ar=a("div"),F(zL.$$.fragment),Qdr=l(),K2e=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hdr=l(),Za=a("p"),Udr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),Jdr=o("model_type"),Ydr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Kdr=o("pretrained_model_name_or_path"),Zdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(":"),rcr=l(),se=a("ul"),ET=a("li"),r1e=a("strong"),tcr=o("albert"),acr=o(" \u2014 "),sQ=a("a"),ncr=o("TFAlbertForPreTraining"),scr=o(" (ALBERT model)"),lcr=l(),CT=a("li"),t1e=a("strong"),icr=o("bart"),dcr=o(" \u2014 "),lQ=a("a"),ccr=o("TFBartForConditionalGeneration"),fcr=o(" (BART model)"),mcr=l(),wT=a("li"),a1e=a("strong"),gcr=o("bert"),hcr=o(" \u2014 "),iQ=a("a"),pcr=o("TFBertForPreTraining"),ucr=o(" (BERT model)"),_cr=l(),AT=a("li"),n1e=a("strong"),bcr=o("camembert"),vcr=o(" \u2014 "),dQ=a("a"),Fcr=o("TFCamembertForMaskedLM"),Tcr=o(" (CamemBERT model)"),Mcr=l(),yT=a("li"),s1e=a("strong"),Ecr=o("ctrl"),Ccr=o(" \u2014 "),cQ=a("a"),wcr=o("TFCTRLLMHeadModel"),Acr=o(" (CTRL model)"),ycr=l(),LT=a("li"),l1e=a("strong"),Lcr=o("distilbert"),xcr=o(" \u2014 "),fQ=a("a"),$cr=o("TFDistilBertForMaskedLM"),kcr=o(" (DistilBERT model)"),Scr=l(),xT=a("li"),i1e=a("strong"),Rcr=o("electra"),Bcr=o(" \u2014 "),mQ=a("a"),Pcr=o("TFElectraForPreTraining"),Icr=o(" (ELECTRA model)"),qcr=l(),$T=a("li"),d1e=a("strong"),Ncr=o("flaubert"),jcr=o(" \u2014 "),gQ=a("a"),Dcr=o("TFFlaubertWithLMHeadModel"),Gcr=o(" (FlauBERT model)"),Ocr=l(),kT=a("li"),c1e=a("strong"),Vcr=o("funnel"),Xcr=o(" \u2014 "),hQ=a("a"),zcr=o("TFFunnelForPreTraining"),Qcr=o(" (Funnel Transformer model)"),Wcr=l(),ST=a("li"),f1e=a("strong"),Hcr=o("gpt2"),Ucr=o(" \u2014 "),pQ=a("a"),Jcr=o("TFGPT2LMHeadModel"),Ycr=o(" (OpenAI GPT-2 model)"),Kcr=l(),RT=a("li"),m1e=a("strong"),Zcr=o("layoutlm"),efr=o(" \u2014 "),uQ=a("a"),ofr=o("TFLayoutLMForMaskedLM"),rfr=o(" (LayoutLM model)"),tfr=l(),BT=a("li"),g1e=a("strong"),afr=o("lxmert"),nfr=o(" \u2014 "),_Q=a("a"),sfr=o("TFLxmertForPreTraining"),lfr=o(" (LXMERT model)"),ifr=l(),PT=a("li"),h1e=a("strong"),dfr=o("mobilebert"),cfr=o(" \u2014 "),bQ=a("a"),ffr=o("TFMobileBertForPreTraining"),mfr=o(" (MobileBERT model)"),gfr=l(),IT=a("li"),p1e=a("strong"),hfr=o("mpnet"),pfr=o(" \u2014 "),vQ=a("a"),ufr=o("TFMPNetForMaskedLM"),_fr=o(" (MPNet model)"),bfr=l(),qT=a("li"),u1e=a("strong"),vfr=o("openai-gpt"),Ffr=o(" \u2014 "),FQ=a("a"),Tfr=o("TFOpenAIGPTLMHeadModel"),Mfr=o(" (OpenAI GPT model)"),Efr=l(),NT=a("li"),_1e=a("strong"),Cfr=o("roberta"),wfr=o(" \u2014 "),TQ=a("a"),Afr=o("TFRobertaForMaskedLM"),yfr=o(" (RoBERTa model)"),Lfr=l(),jT=a("li"),b1e=a("strong"),xfr=o("t5"),$fr=o(" \u2014 "),MQ=a("a"),kfr=o("TFT5ForConditionalGeneration"),Sfr=o(" (T5 model)"),Rfr=l(),DT=a("li"),v1e=a("strong"),Bfr=o("tapas"),Pfr=o(" \u2014 "),EQ=a("a"),Ifr=o("TFTapasForMaskedLM"),qfr=o(" (TAPAS model)"),Nfr=l(),GT=a("li"),F1e=a("strong"),jfr=o("transfo-xl"),Dfr=o(" \u2014 "),CQ=a("a"),Gfr=o("TFTransfoXLLMHeadModel"),Ofr=o(" (Transformer-XL model)"),Vfr=l(),OT=a("li"),T1e=a("strong"),Xfr=o("vit_mae"),zfr=o(" \u2014 "),wQ=a("a"),Qfr=o("TFViTMAEForPreTraining"),Wfr=o(" (ViTMAE model)"),Hfr=l(),VT=a("li"),M1e=a("strong"),Ufr=o("xlm"),Jfr=o(" \u2014 "),AQ=a("a"),Yfr=o("TFXLMWithLMHeadModel"),Kfr=o(" (XLM model)"),Zfr=l(),XT=a("li"),E1e=a("strong"),emr=o("xlm-roberta"),omr=o(" \u2014 "),yQ=a("a"),rmr=o("TFXLMRobertaForMaskedLM"),tmr=o(" (XLM-RoBERTa model)"),amr=l(),zT=a("li"),C1e=a("strong"),nmr=o("xlnet"),smr=o(" \u2014 "),LQ=a("a"),lmr=o("TFXLNetLMHeadModel"),imr=o(" (XLNet model)"),dmr=l(),F(QT.$$.fragment),hqe=l(),Vd=a("h2"),WT=a("a"),w1e=a("span"),F(QL.$$.fragment),cmr=l(),A1e=a("span"),fmr=o("TFAutoModelForCausalLM"),pqe=l(),Zo=a("div"),F(WL.$$.fragment),mmr=l(),Xd=a("p"),gmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=a("a"),hmr=o("from_pretrained()"),pmr=o(" class method or the "),$Q=a("a"),umr=o("from_config()"),_mr=o(` class
method.`),bmr=l(),HL=a("p"),vmr=o("This class cannot be instantiated directly using "),y1e=a("code"),Fmr=o("__init__()"),Tmr=o(" (throws an error)."),Mmr=l(),yt=a("div"),F(UL.$$.fragment),Emr=l(),L1e=a("p"),Cmr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wmr=l(),zd=a("p"),Amr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),ymr=o("not"),Lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),xmr=o("from_pretrained()"),$mr=o(" to load the model weights."),kmr=l(),F(HT.$$.fragment),Smr=l(),yr=a("div"),F(JL.$$.fragment),Rmr=l(),$1e=a("p"),Bmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pmr=l(),en=a("p"),Imr=o("The model class to instantiate is selected based on the "),k1e=a("code"),qmr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(":"),Vmr=l(),Me=a("ul"),UT=a("li"),B1e=a("strong"),Xmr=o("bert"),zmr=o(" \u2014 "),SQ=a("a"),Qmr=o("TFBertLMHeadModel"),Wmr=o(" (BERT model)"),Hmr=l(),JT=a("li"),P1e=a("strong"),Umr=o("camembert"),Jmr=o(" \u2014 "),RQ=a("a"),Ymr=o("TFCamembertForCausalLM"),Kmr=o(" (CamemBERT model)"),Zmr=l(),YT=a("li"),I1e=a("strong"),egr=o("ctrl"),ogr=o(" \u2014 "),BQ=a("a"),rgr=o("TFCTRLLMHeadModel"),tgr=o(" (CTRL model)"),agr=l(),KT=a("li"),q1e=a("strong"),ngr=o("gpt2"),sgr=o(" \u2014 "),PQ=a("a"),lgr=o("TFGPT2LMHeadModel"),igr=o(" (OpenAI GPT-2 model)"),dgr=l(),ZT=a("li"),N1e=a("strong"),cgr=o("gptj"),fgr=o(" \u2014 "),IQ=a("a"),mgr=o("TFGPTJForCausalLM"),ggr=o(" (GPT-J model)"),hgr=l(),e7=a("li"),j1e=a("strong"),pgr=o("openai-gpt"),ugr=o(" \u2014 "),qQ=a("a"),_gr=o("TFOpenAIGPTLMHeadModel"),bgr=o(" (OpenAI GPT model)"),vgr=l(),o7=a("li"),D1e=a("strong"),Fgr=o("rembert"),Tgr=o(" \u2014 "),NQ=a("a"),Mgr=o("TFRemBertForCausalLM"),Egr=o(" (RemBERT model)"),Cgr=l(),r7=a("li"),G1e=a("strong"),wgr=o("roberta"),Agr=o(" \u2014 "),jQ=a("a"),ygr=o("TFRobertaForCausalLM"),Lgr=o(" (RoBERTa model)"),xgr=l(),t7=a("li"),O1e=a("strong"),$gr=o("roformer"),kgr=o(" \u2014 "),DQ=a("a"),Sgr=o("TFRoFormerForCausalLM"),Rgr=o(" (RoFormer model)"),Bgr=l(),a7=a("li"),V1e=a("strong"),Pgr=o("transfo-xl"),Igr=o(" \u2014 "),GQ=a("a"),qgr=o("TFTransfoXLLMHeadModel"),Ngr=o(" (Transformer-XL model)"),jgr=l(),n7=a("li"),X1e=a("strong"),Dgr=o("xlm"),Ggr=o(" \u2014 "),OQ=a("a"),Ogr=o("TFXLMWithLMHeadModel"),Vgr=o(" (XLM model)"),Xgr=l(),s7=a("li"),z1e=a("strong"),zgr=o("xlnet"),Qgr=o(" \u2014 "),VQ=a("a"),Wgr=o("TFXLNetLMHeadModel"),Hgr=o(" (XLNet model)"),Ugr=l(),F(l7.$$.fragment),uqe=l(),Qd=a("h2"),i7=a("a"),Q1e=a("span"),F(YL.$$.fragment),Jgr=l(),W1e=a("span"),Ygr=o("TFAutoModelForImageClassification"),_qe=l(),er=a("div"),F(KL.$$.fragment),Kgr=l(),Wd=a("p"),Zgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=a("a"),ehr=o("from_pretrained()"),ohr=o(" class method or the "),zQ=a("a"),rhr=o("from_config()"),thr=o(` class
method.`),ahr=l(),ZL=a("p"),nhr=o("This class cannot be instantiated directly using "),H1e=a("code"),shr=o("__init__()"),lhr=o(" (throws an error)."),ihr=l(),Lt=a("div"),F(e8.$$.fragment),dhr=l(),U1e=a("p"),chr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fhr=l(),Hd=a("p"),mhr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),ghr=o("not"),hhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),phr=o("from_pretrained()"),uhr=o(" to load the model weights."),_hr=l(),F(d7.$$.fragment),bhr=l(),Lr=a("div"),F(o8.$$.fragment),vhr=l(),Y1e=a("p"),Fhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Thr=l(),on=a("p"),Mhr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Ehr=o("model_type"),Chr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),yhr=o("pretrained_model_name_or_path"),Lhr=o(":"),xhr=l(),Ud=a("ul"),c7=a("li"),obe=a("strong"),$hr=o("convnext"),khr=o(" \u2014 "),WQ=a("a"),Shr=o("TFConvNextForImageClassification"),Rhr=o(" (ConvNext model)"),Bhr=l(),f7=a("li"),rbe=a("strong"),Phr=o("data2vec-vision"),Ihr=o(" \u2014 "),HQ=a("a"),qhr=o("TFData2VecVisionForImageClassification"),Nhr=o(" (Data2VecVision model)"),jhr=l(),m7=a("li"),tbe=a("strong"),Dhr=o("vit"),Ghr=o(" \u2014 "),UQ=a("a"),Ohr=o("TFViTForImageClassification"),Vhr=o(" (ViT model)"),Xhr=l(),F(g7.$$.fragment),bqe=l(),Jd=a("h2"),h7=a("a"),abe=a("span"),F(r8.$$.fragment),zhr=l(),nbe=a("span"),Qhr=o("TFAutoModelForMaskedLM"),vqe=l(),or=a("div"),F(t8.$$.fragment),Whr=l(),Yd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),YQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),a8=a("p"),epr=o("This class cannot be instantiated directly using "),sbe=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),xt=a("div"),F(n8.$$.fragment),apr=l(),lbe=a("p"),npr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),spr=l(),Kd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(p7.$$.fragment),gpr=l(),xr=a("div"),F(s8.$$.fragment),hpr=l(),dbe=a("p"),ppr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),upr=l(),rn=a("p"),_pr=o("The model class to instantiate is selected based on the "),cbe=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),ie=a("ul"),u7=a("li"),gbe=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),ZQ=a("a"),ypr=o("TFAlbertForMaskedLM"),Lpr=o(" (ALBERT model)"),xpr=l(),_7=a("li"),hbe=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),eW=a("a"),Spr=o("TFBertForMaskedLM"),Rpr=o(" (BERT model)"),Bpr=l(),b7=a("li"),pbe=a("strong"),Ppr=o("camembert"),Ipr=o(" \u2014 "),oW=a("a"),qpr=o("TFCamembertForMaskedLM"),Npr=o(" (CamemBERT model)"),jpr=l(),v7=a("li"),ube=a("strong"),Dpr=o("convbert"),Gpr=o(" \u2014 "),rW=a("a"),Opr=o("TFConvBertForMaskedLM"),Vpr=o(" (ConvBERT model)"),Xpr=l(),F7=a("li"),_be=a("strong"),zpr=o("deberta"),Qpr=o(" \u2014 "),tW=a("a"),Wpr=o("TFDebertaForMaskedLM"),Hpr=o(" (DeBERTa model)"),Upr=l(),T7=a("li"),bbe=a("strong"),Jpr=o("deberta-v2"),Ypr=o(" \u2014 "),aW=a("a"),Kpr=o("TFDebertaV2ForMaskedLM"),Zpr=o(" (DeBERTa-v2 model)"),eur=l(),M7=a("li"),vbe=a("strong"),our=o("distilbert"),rur=o(" \u2014 "),nW=a("a"),tur=o("TFDistilBertForMaskedLM"),aur=o(" (DistilBERT model)"),nur=l(),E7=a("li"),Fbe=a("strong"),sur=o("electra"),lur=o(" \u2014 "),sW=a("a"),iur=o("TFElectraForMaskedLM"),dur=o(" (ELECTRA model)"),cur=l(),C7=a("li"),Tbe=a("strong"),fur=o("flaubert"),mur=o(" \u2014 "),lW=a("a"),gur=o("TFFlaubertWithLMHeadModel"),hur=o(" (FlauBERT model)"),pur=l(),w7=a("li"),Mbe=a("strong"),uur=o("funnel"),_ur=o(" \u2014 "),iW=a("a"),bur=o("TFFunnelForMaskedLM"),vur=o(" (Funnel Transformer model)"),Fur=l(),A7=a("li"),Ebe=a("strong"),Tur=o("layoutlm"),Mur=o(" \u2014 "),dW=a("a"),Eur=o("TFLayoutLMForMaskedLM"),Cur=o(" (LayoutLM model)"),wur=l(),y7=a("li"),Cbe=a("strong"),Aur=o("longformer"),yur=o(" \u2014 "),cW=a("a"),Lur=o("TFLongformerForMaskedLM"),xur=o(" (Longformer model)"),$ur=l(),L7=a("li"),wbe=a("strong"),kur=o("mobilebert"),Sur=o(" \u2014 "),fW=a("a"),Rur=o("TFMobileBertForMaskedLM"),Bur=o(" (MobileBERT model)"),Pur=l(),x7=a("li"),Abe=a("strong"),Iur=o("mpnet"),qur=o(" \u2014 "),mW=a("a"),Nur=o("TFMPNetForMaskedLM"),jur=o(" (MPNet model)"),Dur=l(),$7=a("li"),ybe=a("strong"),Gur=o("rembert"),Our=o(" \u2014 "),gW=a("a"),Vur=o("TFRemBertForMaskedLM"),Xur=o(" (RemBERT model)"),zur=l(),k7=a("li"),Lbe=a("strong"),Qur=o("roberta"),Wur=o(" \u2014 "),hW=a("a"),Hur=o("TFRobertaForMaskedLM"),Uur=o(" (RoBERTa model)"),Jur=l(),S7=a("li"),xbe=a("strong"),Yur=o("roformer"),Kur=o(" \u2014 "),pW=a("a"),Zur=o("TFRoFormerForMaskedLM"),e_r=o(" (RoFormer model)"),o_r=l(),R7=a("li"),$be=a("strong"),r_r=o("tapas"),t_r=o(" \u2014 "),uW=a("a"),a_r=o("TFTapasForMaskedLM"),n_r=o(" (TAPAS model)"),s_r=l(),B7=a("li"),kbe=a("strong"),l_r=o("xlm"),i_r=o(" \u2014 "),_W=a("a"),d_r=o("TFXLMWithLMHeadModel"),c_r=o(" (XLM model)"),f_r=l(),P7=a("li"),Sbe=a("strong"),m_r=o("xlm-roberta"),g_r=o(" \u2014 "),bW=a("a"),h_r=o("TFXLMRobertaForMaskedLM"),p_r=o(" (XLM-RoBERTa model)"),u_r=l(),F(I7.$$.fragment),Fqe=l(),Zd=a("h2"),q7=a("a"),Rbe=a("span"),F(l8.$$.fragment),__r=l(),Bbe=a("span"),b_r=o("TFAutoModelForSeq2SeqLM"),Tqe=l(),rr=a("div"),F(i8.$$.fragment),v_r=l(),ec=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vW=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),FW=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),d8=a("p"),A_r=o("This class cannot be instantiated directly using "),Pbe=a("code"),y_r=o("__init__()"),L_r=o(" (throws an error)."),x_r=l(),$t=a("div"),F(c8.$$.fragment),$_r=l(),Ibe=a("p"),k_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S_r=l(),oc=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),B_r=o("not"),P_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),I_r=o("from_pretrained()"),q_r=o(" to load the model weights."),N_r=l(),F(N7.$$.fragment),j_r=l(),$r=a("div"),F(f8.$$.fragment),D_r=l(),Nbe=a("p"),G_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O_r=l(),tn=a("p"),V_r=o("The model class to instantiate is selected based on the "),jbe=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),H_r=o("pretrained_model_name_or_path"),U_r=o(":"),J_r=l(),ye=a("ul"),j7=a("li"),Obe=a("strong"),Y_r=o("bart"),K_r=o(" \u2014 "),MW=a("a"),Z_r=o("TFBartForConditionalGeneration"),e2r=o(" (BART model)"),o2r=l(),D7=a("li"),Vbe=a("strong"),r2r=o("blenderbot"),t2r=o(" \u2014 "),EW=a("a"),a2r=o("TFBlenderbotForConditionalGeneration"),n2r=o(" (Blenderbot model)"),s2r=l(),G7=a("li"),Xbe=a("strong"),l2r=o("blenderbot-small"),i2r=o(" \u2014 "),CW=a("a"),d2r=o("TFBlenderbotSmallForConditionalGeneration"),c2r=o(" (BlenderbotSmall model)"),f2r=l(),O7=a("li"),zbe=a("strong"),m2r=o("encoder-decoder"),g2r=o(" \u2014 "),wW=a("a"),h2r=o("TFEncoderDecoderModel"),p2r=o(" (Encoder decoder model)"),u2r=l(),V7=a("li"),Qbe=a("strong"),_2r=o("led"),b2r=o(" \u2014 "),AW=a("a"),v2r=o("TFLEDForConditionalGeneration"),F2r=o(" (LED model)"),T2r=l(),X7=a("li"),Wbe=a("strong"),M2r=o("marian"),E2r=o(" \u2014 "),yW=a("a"),C2r=o("TFMarianMTModel"),w2r=o(" (Marian model)"),A2r=l(),z7=a("li"),Hbe=a("strong"),y2r=o("mbart"),L2r=o(" \u2014 "),LW=a("a"),x2r=o("TFMBartForConditionalGeneration"),$2r=o(" (mBART model)"),k2r=l(),Q7=a("li"),Ube=a("strong"),S2r=o("mt5"),R2r=o(" \u2014 "),xW=a("a"),B2r=o("TFMT5ForConditionalGeneration"),P2r=o(" (mT5 model)"),I2r=l(),W7=a("li"),Jbe=a("strong"),q2r=o("pegasus"),N2r=o(" \u2014 "),$W=a("a"),j2r=o("TFPegasusForConditionalGeneration"),D2r=o(" (Pegasus model)"),G2r=l(),H7=a("li"),Ybe=a("strong"),O2r=o("t5"),V2r=o(" \u2014 "),kW=a("a"),X2r=o("TFT5ForConditionalGeneration"),z2r=o(" (T5 model)"),Q2r=l(),F(U7.$$.fragment),Mqe=l(),rc=a("h2"),J7=a("a"),Kbe=a("span"),F(m8.$$.fragment),W2r=l(),Zbe=a("span"),H2r=o("TFAutoModelForSequenceClassification"),Eqe=l(),tr=a("div"),F(g8.$$.fragment),U2r=l(),tc=a("p"),J2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SW=a("a"),Y2r=o("from_pretrained()"),K2r=o(" class method or the "),RW=a("a"),Z2r=o("from_config()"),e1r=o(` class
method.`),o1r=l(),h8=a("p"),r1r=o("This class cannot be instantiated directly using "),e5e=a("code"),t1r=o("__init__()"),a1r=o(" (throws an error)."),n1r=l(),kt=a("div"),F(p8.$$.fragment),s1r=l(),o5e=a("p"),l1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i1r=l(),ac=a("p"),d1r=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),c1r=o("not"),f1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),m1r=o("from_pretrained()"),g1r=o(" to load the model weights."),h1r=l(),F(Y7.$$.fragment),p1r=l(),kr=a("div"),F(u8.$$.fragment),u1r=l(),t5e=a("p"),_1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b1r=l(),an=a("p"),v1r=o("The model class to instantiate is selected based on the "),a5e=a("code"),F1r=o("model_type"),T1r=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(":"),A1r=l(),ee=a("ul"),K7=a("li"),l5e=a("strong"),y1r=o("albert"),L1r=o(" \u2014 "),PW=a("a"),x1r=o("TFAlbertForSequenceClassification"),$1r=o(" (ALBERT model)"),k1r=l(),Z7=a("li"),i5e=a("strong"),S1r=o("bert"),R1r=o(" \u2014 "),IW=a("a"),B1r=o("TFBertForSequenceClassification"),P1r=o(" (BERT model)"),I1r=l(),eM=a("li"),d5e=a("strong"),q1r=o("camembert"),N1r=o(" \u2014 "),qW=a("a"),j1r=o("TFCamembertForSequenceClassification"),D1r=o(" (CamemBERT model)"),G1r=l(),oM=a("li"),c5e=a("strong"),O1r=o("convbert"),V1r=o(" \u2014 "),NW=a("a"),X1r=o("TFConvBertForSequenceClassification"),z1r=o(" (ConvBERT model)"),Q1r=l(),rM=a("li"),f5e=a("strong"),W1r=o("ctrl"),H1r=o(" \u2014 "),jW=a("a"),U1r=o("TFCTRLForSequenceClassification"),J1r=o(" (CTRL model)"),Y1r=l(),tM=a("li"),m5e=a("strong"),K1r=o("deberta"),Z1r=o(" \u2014 "),DW=a("a"),ebr=o("TFDebertaForSequenceClassification"),obr=o(" (DeBERTa model)"),rbr=l(),aM=a("li"),g5e=a("strong"),tbr=o("deberta-v2"),abr=o(" \u2014 "),GW=a("a"),nbr=o("TFDebertaV2ForSequenceClassification"),sbr=o(" (DeBERTa-v2 model)"),lbr=l(),nM=a("li"),h5e=a("strong"),ibr=o("distilbert"),dbr=o(" \u2014 "),OW=a("a"),cbr=o("TFDistilBertForSequenceClassification"),fbr=o(" (DistilBERT model)"),mbr=l(),sM=a("li"),p5e=a("strong"),gbr=o("electra"),hbr=o(" \u2014 "),VW=a("a"),pbr=o("TFElectraForSequenceClassification"),ubr=o(" (ELECTRA model)"),_br=l(),lM=a("li"),u5e=a("strong"),bbr=o("flaubert"),vbr=o(" \u2014 "),XW=a("a"),Fbr=o("TFFlaubertForSequenceClassification"),Tbr=o(" (FlauBERT model)"),Mbr=l(),iM=a("li"),_5e=a("strong"),Ebr=o("funnel"),Cbr=o(" \u2014 "),zW=a("a"),wbr=o("TFFunnelForSequenceClassification"),Abr=o(" (Funnel Transformer model)"),ybr=l(),dM=a("li"),b5e=a("strong"),Lbr=o("gpt2"),xbr=o(" \u2014 "),QW=a("a"),$br=o("TFGPT2ForSequenceClassification"),kbr=o(" (OpenAI GPT-2 model)"),Sbr=l(),cM=a("li"),v5e=a("strong"),Rbr=o("gptj"),Bbr=o(" \u2014 "),WW=a("a"),Pbr=o("TFGPTJForSequenceClassification"),Ibr=o(" (GPT-J model)"),qbr=l(),fM=a("li"),F5e=a("strong"),Nbr=o("layoutlm"),jbr=o(" \u2014 "),HW=a("a"),Dbr=o("TFLayoutLMForSequenceClassification"),Gbr=o(" (LayoutLM model)"),Obr=l(),mM=a("li"),T5e=a("strong"),Vbr=o("longformer"),Xbr=o(" \u2014 "),UW=a("a"),zbr=o("TFLongformerForSequenceClassification"),Qbr=o(" (Longformer model)"),Wbr=l(),gM=a("li"),M5e=a("strong"),Hbr=o("mobilebert"),Ubr=o(" \u2014 "),JW=a("a"),Jbr=o("TFMobileBertForSequenceClassification"),Ybr=o(" (MobileBERT model)"),Kbr=l(),hM=a("li"),E5e=a("strong"),Zbr=o("mpnet"),e5r=o(" \u2014 "),YW=a("a"),o5r=o("TFMPNetForSequenceClassification"),r5r=o(" (MPNet model)"),t5r=l(),pM=a("li"),C5e=a("strong"),a5r=o("openai-gpt"),n5r=o(" \u2014 "),KW=a("a"),s5r=o("TFOpenAIGPTForSequenceClassification"),l5r=o(" (OpenAI GPT model)"),i5r=l(),uM=a("li"),w5e=a("strong"),d5r=o("rembert"),c5r=o(" \u2014 "),ZW=a("a"),f5r=o("TFRemBertForSequenceClassification"),m5r=o(" (RemBERT model)"),g5r=l(),_M=a("li"),A5e=a("strong"),h5r=o("roberta"),p5r=o(" \u2014 "),eH=a("a"),u5r=o("TFRobertaForSequenceClassification"),_5r=o(" (RoBERTa model)"),b5r=l(),bM=a("li"),y5e=a("strong"),v5r=o("roformer"),F5r=o(" \u2014 "),oH=a("a"),T5r=o("TFRoFormerForSequenceClassification"),M5r=o(" (RoFormer model)"),E5r=l(),vM=a("li"),L5e=a("strong"),C5r=o("tapas"),w5r=o(" \u2014 "),rH=a("a"),A5r=o("TFTapasForSequenceClassification"),y5r=o(" (TAPAS model)"),L5r=l(),FM=a("li"),x5e=a("strong"),x5r=o("transfo-xl"),$5r=o(" \u2014 "),tH=a("a"),k5r=o("TFTransfoXLForSequenceClassification"),S5r=o(" (Transformer-XL model)"),R5r=l(),TM=a("li"),$5e=a("strong"),B5r=o("xlm"),P5r=o(" \u2014 "),aH=a("a"),I5r=o("TFXLMForSequenceClassification"),q5r=o(" (XLM model)"),N5r=l(),MM=a("li"),k5e=a("strong"),j5r=o("xlm-roberta"),D5r=o(" \u2014 "),nH=a("a"),G5r=o("TFXLMRobertaForSequenceClassification"),O5r=o(" (XLM-RoBERTa model)"),V5r=l(),EM=a("li"),S5e=a("strong"),X5r=o("xlnet"),z5r=o(" \u2014 "),sH=a("a"),Q5r=o("TFXLNetForSequenceClassification"),W5r=o(" (XLNet model)"),H5r=l(),F(CM.$$.fragment),Cqe=l(),nc=a("h2"),wM=a("a"),R5e=a("span"),F(_8.$$.fragment),U5r=l(),B5e=a("span"),J5r=o("TFAutoModelForMultipleChoice"),wqe=l(),ar=a("div"),F(b8.$$.fragment),Y5r=l(),sc=a("p"),K5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lH=a("a"),Z5r=o("from_pretrained()"),evr=o(" class method or the "),iH=a("a"),ovr=o("from_config()"),rvr=o(` class
method.`),tvr=l(),v8=a("p"),avr=o("This class cannot be instantiated directly using "),P5e=a("code"),nvr=o("__init__()"),svr=o(" (throws an error)."),lvr=l(),St=a("div"),F(F8.$$.fragment),ivr=l(),I5e=a("p"),dvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cvr=l(),lc=a("p"),fvr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),mvr=o("not"),gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),hvr=o("from_pretrained()"),pvr=o(" to load the model weights."),uvr=l(),F(AM.$$.fragment),_vr=l(),Sr=a("div"),F(T8.$$.fragment),bvr=l(),N5e=a("p"),vvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fvr=l(),nn=a("p"),Tvr=o("The model class to instantiate is selected based on the "),j5e=a("code"),Mvr=o("model_type"),Evr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),Cvr=o("pretrained_model_name_or_path"),wvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),Avr=o("pretrained_model_name_or_path"),yvr=o(":"),Lvr=l(),pe=a("ul"),yM=a("li"),O5e=a("strong"),xvr=o("albert"),$vr=o(" \u2014 "),cH=a("a"),kvr=o("TFAlbertForMultipleChoice"),Svr=o(" (ALBERT model)"),Rvr=l(),LM=a("li"),V5e=a("strong"),Bvr=o("bert"),Pvr=o(" \u2014 "),fH=a("a"),Ivr=o("TFBertForMultipleChoice"),qvr=o(" (BERT model)"),Nvr=l(),xM=a("li"),X5e=a("strong"),jvr=o("camembert"),Dvr=o(" \u2014 "),mH=a("a"),Gvr=o("TFCamembertForMultipleChoice"),Ovr=o(" (CamemBERT model)"),Vvr=l(),$M=a("li"),z5e=a("strong"),Xvr=o("convbert"),zvr=o(" \u2014 "),gH=a("a"),Qvr=o("TFConvBertForMultipleChoice"),Wvr=o(" (ConvBERT model)"),Hvr=l(),kM=a("li"),Q5e=a("strong"),Uvr=o("distilbert"),Jvr=o(" \u2014 "),hH=a("a"),Yvr=o("TFDistilBertForMultipleChoice"),Kvr=o(" (DistilBERT model)"),Zvr=l(),SM=a("li"),W5e=a("strong"),eFr=o("electra"),oFr=o(" \u2014 "),pH=a("a"),rFr=o("TFElectraForMultipleChoice"),tFr=o(" (ELECTRA model)"),aFr=l(),RM=a("li"),H5e=a("strong"),nFr=o("flaubert"),sFr=o(" \u2014 "),uH=a("a"),lFr=o("TFFlaubertForMultipleChoice"),iFr=o(" (FlauBERT model)"),dFr=l(),BM=a("li"),U5e=a("strong"),cFr=o("funnel"),fFr=o(" \u2014 "),_H=a("a"),mFr=o("TFFunnelForMultipleChoice"),gFr=o(" (Funnel Transformer model)"),hFr=l(),PM=a("li"),J5e=a("strong"),pFr=o("longformer"),uFr=o(" \u2014 "),bH=a("a"),_Fr=o("TFLongformerForMultipleChoice"),bFr=o(" (Longformer model)"),vFr=l(),IM=a("li"),Y5e=a("strong"),FFr=o("mobilebert"),TFr=o(" \u2014 "),vH=a("a"),MFr=o("TFMobileBertForMultipleChoice"),EFr=o(" (MobileBERT model)"),CFr=l(),qM=a("li"),K5e=a("strong"),wFr=o("mpnet"),AFr=o(" \u2014 "),FH=a("a"),yFr=o("TFMPNetForMultipleChoice"),LFr=o(" (MPNet model)"),xFr=l(),NM=a("li"),Z5e=a("strong"),$Fr=o("rembert"),kFr=o(" \u2014 "),TH=a("a"),SFr=o("TFRemBertForMultipleChoice"),RFr=o(" (RemBERT model)"),BFr=l(),jM=a("li"),eve=a("strong"),PFr=o("roberta"),IFr=o(" \u2014 "),MH=a("a"),qFr=o("TFRobertaForMultipleChoice"),NFr=o(" (RoBERTa model)"),jFr=l(),DM=a("li"),ove=a("strong"),DFr=o("roformer"),GFr=o(" \u2014 "),EH=a("a"),OFr=o("TFRoFormerForMultipleChoice"),VFr=o(" (RoFormer model)"),XFr=l(),GM=a("li"),rve=a("strong"),zFr=o("xlm"),QFr=o(" \u2014 "),CH=a("a"),WFr=o("TFXLMForMultipleChoice"),HFr=o(" (XLM model)"),UFr=l(),OM=a("li"),tve=a("strong"),JFr=o("xlm-roberta"),YFr=o(" \u2014 "),wH=a("a"),KFr=o("TFXLMRobertaForMultipleChoice"),ZFr=o(" (XLM-RoBERTa model)"),e0r=l(),VM=a("li"),ave=a("strong"),o0r=o("xlnet"),r0r=o(" \u2014 "),AH=a("a"),t0r=o("TFXLNetForMultipleChoice"),a0r=o(" (XLNet model)"),n0r=l(),F(XM.$$.fragment),Aqe=l(),ic=a("h2"),zM=a("a"),nve=a("span"),F(M8.$$.fragment),s0r=l(),sve=a("span"),l0r=o("TFAutoModelForNextSentencePrediction"),yqe=l(),nr=a("div"),F(E8.$$.fragment),i0r=l(),dc=a("p"),d0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yH=a("a"),c0r=o("from_pretrained()"),f0r=o(" class method or the "),LH=a("a"),m0r=o("from_config()"),g0r=o(` class
method.`),h0r=l(),C8=a("p"),p0r=o("This class cannot be instantiated directly using "),lve=a("code"),u0r=o("__init__()"),_0r=o(" (throws an error)."),b0r=l(),Rt=a("div"),F(w8.$$.fragment),v0r=l(),ive=a("p"),F0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T0r=l(),cc=a("p"),M0r=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),E0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),w0r=o("from_pretrained()"),A0r=o(" to load the model weights."),y0r=l(),F(QM.$$.fragment),L0r=l(),Rr=a("div"),F(A8.$$.fragment),x0r=l(),cve=a("p"),$0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k0r=l(),sn=a("p"),S0r=o("The model class to instantiate is selected based on the "),fve=a("code"),R0r=o("model_type"),B0r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),P0r=o("pretrained_model_name_or_path"),I0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),q0r=o("pretrained_model_name_or_path"),N0r=o(":"),j0r=l(),y8=a("ul"),WM=a("li"),hve=a("strong"),D0r=o("bert"),G0r=o(" \u2014 "),$H=a("a"),O0r=o("TFBertForNextSentencePrediction"),V0r=o(" (BERT model)"),X0r=l(),HM=a("li"),pve=a("strong"),z0r=o("mobilebert"),Q0r=o(" \u2014 "),kH=a("a"),W0r=o("TFMobileBertForNextSentencePrediction"),H0r=o(" (MobileBERT model)"),U0r=l(),F(UM.$$.fragment),Lqe=l(),fc=a("h2"),JM=a("a"),uve=a("span"),F(L8.$$.fragment),J0r=l(),_ve=a("span"),Y0r=o("TFAutoModelForTableQuestionAnswering"),xqe=l(),sr=a("div"),F(x8.$$.fragment),K0r=l(),mc=a("p"),Z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SH=a("a"),eTr=o("from_pretrained()"),oTr=o(" class method or the "),RH=a("a"),rTr=o("from_config()"),tTr=o(` class
method.`),aTr=l(),$8=a("p"),nTr=o("This class cannot be instantiated directly using "),bve=a("code"),sTr=o("__init__()"),lTr=o(" (throws an error)."),iTr=l(),Bt=a("div"),F(k8.$$.fragment),dTr=l(),vve=a("p"),cTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fTr=l(),gc=a("p"),mTr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),gTr=o("not"),hTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),pTr=o("from_pretrained()"),uTr=o(" to load the model weights."),_Tr=l(),F(YM.$$.fragment),bTr=l(),Br=a("div"),F(S8.$$.fragment),vTr=l(),Tve=a("p"),FTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TTr=l(),ln=a("p"),MTr=o("The model class to instantiate is selected based on the "),Mve=a("code"),ETr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(":"),xTr=l(),wve=a("ul"),KM=a("li"),Ave=a("strong"),$Tr=o("tapas"),kTr=o(" \u2014 "),PH=a("a"),STr=o("TFTapasForQuestionAnswering"),RTr=o(" (TAPAS model)"),BTr=l(),F(ZM.$$.fragment),$qe=l(),hc=a("h2"),e4=a("a"),yve=a("span"),F(R8.$$.fragment),PTr=l(),Lve=a("span"),ITr=o("TFAutoModelForTokenClassification"),kqe=l(),lr=a("div"),F(B8.$$.fragment),qTr=l(),pc=a("p"),NTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),qH=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),P8=a("p"),XTr=o("This class cannot be instantiated directly using "),xve=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Pt=a("div"),F(I8.$$.fragment),HTr=l(),$ve=a("p"),UTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JTr=l(),uc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),e7r=o("from_pretrained()"),o7r=o(" to load the model weights."),r7r=l(),F(o4.$$.fragment),t7r=l(),Pr=a("div"),F(q8.$$.fragment),a7r=l(),Sve=a("p"),n7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s7r=l(),dn=a("p"),l7r=o("The model class to instantiate is selected based on the "),Rve=a("code"),i7r=o("model_type"),d7r=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(":"),h7r=l(),de=a("ul"),r4=a("li"),Ive=a("strong"),p7r=o("albert"),u7r=o(" \u2014 "),jH=a("a"),_7r=o("TFAlbertForTokenClassification"),b7r=o(" (ALBERT model)"),v7r=l(),t4=a("li"),qve=a("strong"),F7r=o("bert"),T7r=o(" \u2014 "),DH=a("a"),M7r=o("TFBertForTokenClassification"),E7r=o(" (BERT model)"),C7r=l(),a4=a("li"),Nve=a("strong"),w7r=o("camembert"),A7r=o(" \u2014 "),GH=a("a"),y7r=o("TFCamembertForTokenClassification"),L7r=o(" (CamemBERT model)"),x7r=l(),n4=a("li"),jve=a("strong"),$7r=o("convbert"),k7r=o(" \u2014 "),OH=a("a"),S7r=o("TFConvBertForTokenClassification"),R7r=o(" (ConvBERT model)"),B7r=l(),s4=a("li"),Dve=a("strong"),P7r=o("deberta"),I7r=o(" \u2014 "),VH=a("a"),q7r=o("TFDebertaForTokenClassification"),N7r=o(" (DeBERTa model)"),j7r=l(),l4=a("li"),Gve=a("strong"),D7r=o("deberta-v2"),G7r=o(" \u2014 "),XH=a("a"),O7r=o("TFDebertaV2ForTokenClassification"),V7r=o(" (DeBERTa-v2 model)"),X7r=l(),i4=a("li"),Ove=a("strong"),z7r=o("distilbert"),Q7r=o(" \u2014 "),zH=a("a"),W7r=o("TFDistilBertForTokenClassification"),H7r=o(" (DistilBERT model)"),U7r=l(),d4=a("li"),Vve=a("strong"),J7r=o("electra"),Y7r=o(" \u2014 "),QH=a("a"),K7r=o("TFElectraForTokenClassification"),Z7r=o(" (ELECTRA model)"),eMr=l(),c4=a("li"),Xve=a("strong"),oMr=o("flaubert"),rMr=o(" \u2014 "),WH=a("a"),tMr=o("TFFlaubertForTokenClassification"),aMr=o(" (FlauBERT model)"),nMr=l(),f4=a("li"),zve=a("strong"),sMr=o("funnel"),lMr=o(" \u2014 "),HH=a("a"),iMr=o("TFFunnelForTokenClassification"),dMr=o(" (Funnel Transformer model)"),cMr=l(),m4=a("li"),Qve=a("strong"),fMr=o("layoutlm"),mMr=o(" \u2014 "),UH=a("a"),gMr=o("TFLayoutLMForTokenClassification"),hMr=o(" (LayoutLM model)"),pMr=l(),g4=a("li"),Wve=a("strong"),uMr=o("longformer"),_Mr=o(" \u2014 "),JH=a("a"),bMr=o("TFLongformerForTokenClassification"),vMr=o(" (Longformer model)"),FMr=l(),h4=a("li"),Hve=a("strong"),TMr=o("mobilebert"),MMr=o(" \u2014 "),YH=a("a"),EMr=o("TFMobileBertForTokenClassification"),CMr=o(" (MobileBERT model)"),wMr=l(),p4=a("li"),Uve=a("strong"),AMr=o("mpnet"),yMr=o(" \u2014 "),KH=a("a"),LMr=o("TFMPNetForTokenClassification"),xMr=o(" (MPNet model)"),$Mr=l(),u4=a("li"),Jve=a("strong"),kMr=o("rembert"),SMr=o(" \u2014 "),ZH=a("a"),RMr=o("TFRemBertForTokenClassification"),BMr=o(" (RemBERT model)"),PMr=l(),_4=a("li"),Yve=a("strong"),IMr=o("roberta"),qMr=o(" \u2014 "),eU=a("a"),NMr=o("TFRobertaForTokenClassification"),jMr=o(" (RoBERTa model)"),DMr=l(),b4=a("li"),Kve=a("strong"),GMr=o("roformer"),OMr=o(" \u2014 "),oU=a("a"),VMr=o("TFRoFormerForTokenClassification"),XMr=o(" (RoFormer model)"),zMr=l(),v4=a("li"),Zve=a("strong"),QMr=o("xlm"),WMr=o(" \u2014 "),rU=a("a"),HMr=o("TFXLMForTokenClassification"),UMr=o(" (XLM model)"),JMr=l(),F4=a("li"),eFe=a("strong"),YMr=o("xlm-roberta"),KMr=o(" \u2014 "),tU=a("a"),ZMr=o("TFXLMRobertaForTokenClassification"),e4r=o(" (XLM-RoBERTa model)"),o4r=l(),T4=a("li"),oFe=a("strong"),r4r=o("xlnet"),t4r=o(" \u2014 "),aU=a("a"),a4r=o("TFXLNetForTokenClassification"),n4r=o(" (XLNet model)"),s4r=l(),F(M4.$$.fragment),Sqe=l(),_c=a("h2"),E4=a("a"),rFe=a("span"),F(N8.$$.fragment),l4r=l(),tFe=a("span"),i4r=o("TFAutoModelForQuestionAnswering"),Rqe=l(),ir=a("div"),F(j8.$$.fragment),d4r=l(),bc=a("p"),c4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nU=a("a"),f4r=o("from_pretrained()"),m4r=o(" class method or the "),sU=a("a"),g4r=o("from_config()"),h4r=o(` class
method.`),p4r=l(),D8=a("p"),u4r=o("This class cannot be instantiated directly using "),aFe=a("code"),_4r=o("__init__()"),b4r=o(" (throws an error)."),v4r=l(),It=a("div"),F(G8.$$.fragment),F4r=l(),nFe=a("p"),T4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M4r=l(),vc=a("p"),E4r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),C4r=o("not"),w4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),A4r=o("from_pretrained()"),y4r=o(" to load the model weights."),L4r=l(),F(C4.$$.fragment),x4r=l(),Ir=a("div"),F(O8.$$.fragment),$4r=l(),lFe=a("p"),k4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S4r=l(),cn=a("p"),R4r=o("The model class to instantiate is selected based on the "),iFe=a("code"),B4r=o("model_type"),P4r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),I4r=o("pretrained_model_name_or_path"),q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),N4r=o("pretrained_model_name_or_path"),j4r=o(":"),D4r=l(),ce=a("ul"),w4=a("li"),fFe=a("strong"),G4r=o("albert"),O4r=o(" \u2014 "),iU=a("a"),V4r=o("TFAlbertForQuestionAnswering"),X4r=o(" (ALBERT model)"),z4r=l(),A4=a("li"),mFe=a("strong"),Q4r=o("bert"),W4r=o(" \u2014 "),dU=a("a"),H4r=o("TFBertForQuestionAnswering"),U4r=o(" (BERT model)"),J4r=l(),y4=a("li"),gFe=a("strong"),Y4r=o("camembert"),K4r=o(" \u2014 "),cU=a("a"),Z4r=o("TFCamembertForQuestionAnswering"),eEr=o(" (CamemBERT model)"),oEr=l(),L4=a("li"),hFe=a("strong"),rEr=o("convbert"),tEr=o(" \u2014 "),fU=a("a"),aEr=o("TFConvBertForQuestionAnswering"),nEr=o(" (ConvBERT model)"),sEr=l(),x4=a("li"),pFe=a("strong"),lEr=o("deberta"),iEr=o(" \u2014 "),mU=a("a"),dEr=o("TFDebertaForQuestionAnswering"),cEr=o(" (DeBERTa model)"),fEr=l(),$4=a("li"),uFe=a("strong"),mEr=o("deberta-v2"),gEr=o(" \u2014 "),gU=a("a"),hEr=o("TFDebertaV2ForQuestionAnswering"),pEr=o(" (DeBERTa-v2 model)"),uEr=l(),k4=a("li"),_Fe=a("strong"),_Er=o("distilbert"),bEr=o(" \u2014 "),hU=a("a"),vEr=o("TFDistilBertForQuestionAnswering"),FEr=o(" (DistilBERT model)"),TEr=l(),S4=a("li"),bFe=a("strong"),MEr=o("electra"),EEr=o(" \u2014 "),pU=a("a"),CEr=o("TFElectraForQuestionAnswering"),wEr=o(" (ELECTRA model)"),AEr=l(),R4=a("li"),vFe=a("strong"),yEr=o("flaubert"),LEr=o(" \u2014 "),uU=a("a"),xEr=o("TFFlaubertForQuestionAnsweringSimple"),$Er=o(" (FlauBERT model)"),kEr=l(),B4=a("li"),FFe=a("strong"),SEr=o("funnel"),REr=o(" \u2014 "),_U=a("a"),BEr=o("TFFunnelForQuestionAnswering"),PEr=o(" (Funnel Transformer model)"),IEr=l(),P4=a("li"),TFe=a("strong"),qEr=o("gptj"),NEr=o(" \u2014 "),bU=a("a"),jEr=o("TFGPTJForQuestionAnswering"),DEr=o(" (GPT-J model)"),GEr=l(),I4=a("li"),MFe=a("strong"),OEr=o("longformer"),VEr=o(" \u2014 "),vU=a("a"),XEr=o("TFLongformerForQuestionAnswering"),zEr=o(" (Longformer model)"),QEr=l(),q4=a("li"),EFe=a("strong"),WEr=o("mobilebert"),HEr=o(" \u2014 "),FU=a("a"),UEr=o("TFMobileBertForQuestionAnswering"),JEr=o(" (MobileBERT model)"),YEr=l(),N4=a("li"),CFe=a("strong"),KEr=o("mpnet"),ZEr=o(" \u2014 "),TU=a("a"),eCr=o("TFMPNetForQuestionAnswering"),oCr=o(" (MPNet model)"),rCr=l(),j4=a("li"),wFe=a("strong"),tCr=o("rembert"),aCr=o(" \u2014 "),MU=a("a"),nCr=o("TFRemBertForQuestionAnswering"),sCr=o(" (RemBERT model)"),lCr=l(),D4=a("li"),AFe=a("strong"),iCr=o("roberta"),dCr=o(" \u2014 "),EU=a("a"),cCr=o("TFRobertaForQuestionAnswering"),fCr=o(" (RoBERTa model)"),mCr=l(),G4=a("li"),yFe=a("strong"),gCr=o("roformer"),hCr=o(" \u2014 "),CU=a("a"),pCr=o("TFRoFormerForQuestionAnswering"),uCr=o(" (RoFormer model)"),_Cr=l(),O4=a("li"),LFe=a("strong"),bCr=o("xlm"),vCr=o(" \u2014 "),wU=a("a"),FCr=o("TFXLMForQuestionAnsweringSimple"),TCr=o(" (XLM model)"),MCr=l(),V4=a("li"),xFe=a("strong"),ECr=o("xlm-roberta"),CCr=o(" \u2014 "),AU=a("a"),wCr=o("TFXLMRobertaForQuestionAnswering"),ACr=o(" (XLM-RoBERTa model)"),yCr=l(),X4=a("li"),$Fe=a("strong"),LCr=o("xlnet"),xCr=o(" \u2014 "),yU=a("a"),$Cr=o("TFXLNetForQuestionAnsweringSimple"),kCr=o(" (XLNet model)"),SCr=l(),F(z4.$$.fragment),Bqe=l(),Fc=a("h2"),Q4=a("a"),kFe=a("span"),F(V8.$$.fragment),RCr=l(),SFe=a("span"),BCr=o("TFAutoModelForVision2Seq"),Pqe=l(),dr=a("div"),F(X8.$$.fragment),PCr=l(),Tc=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LU=a("a"),qCr=o("from_pretrained()"),NCr=o(" class method or the "),xU=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),z8=a("p"),OCr=o("This class cannot be instantiated directly using "),RFe=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),qt=a("div"),F(Q8.$$.fragment),QCr=l(),BFe=a("p"),WCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HCr=l(),Mc=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e3r=l(),F(W4.$$.fragment),o3r=l(),qr=a("div"),F(W8.$$.fragment),r3r=l(),IFe=a("p"),t3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a3r=l(),fn=a("p"),n3r=o("The model class to instantiate is selected based on the "),qFe=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(":"),m3r=l(),DFe=a("ul"),H4=a("li"),GFe=a("strong"),g3r=o("vision-encoder-decoder"),h3r=o(" \u2014 "),kU=a("a"),p3r=o("TFVisionEncoderDecoderModel"),u3r=o(" (Vision Encoder decoder model)"),_3r=l(),F(U4.$$.fragment),Iqe=l(),Ec=a("h2"),J4=a("a"),OFe=a("span"),F(H8.$$.fragment),b3r=l(),VFe=a("span"),v3r=o("TFAutoModelForSpeechSeq2Seq"),qqe=l(),cr=a("div"),F(U8.$$.fragment),F3r=l(),Cc=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SU=a("a"),M3r=o("from_pretrained()"),E3r=o(" class method or the "),RU=a("a"),C3r=o("from_config()"),w3r=o(` class
method.`),A3r=l(),J8=a("p"),y3r=o("This class cannot be instantiated directly using "),XFe=a("code"),L3r=o("__init__()"),x3r=o(" (throws an error)."),$3r=l(),Nt=a("div"),F(Y8.$$.fragment),k3r=l(),zFe=a("p"),S3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R3r=l(),wc=a("p"),B3r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),P3r=o("not"),I3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),q3r=o("from_pretrained()"),N3r=o(" to load the model weights."),j3r=l(),F(Y4.$$.fragment),D3r=l(),Nr=a("div"),F(K8.$$.fragment),G3r=l(),WFe=a("p"),O3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V3r=l(),mn=a("p"),X3r=o("The model class to instantiate is selected based on the "),HFe=a("code"),z3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),YFe=a("ul"),K4=a("li"),KFe=a("strong"),K3r=o("speech_to_text"),Z3r=o(" \u2014 "),PU=a("a"),ewr=o("TFSpeech2TextForConditionalGeneration"),owr=o(" (Speech2Text model)"),rwr=l(),F(Z4.$$.fragment),Nqe=l(),Ac=a("h2"),eE=a("a"),ZFe=a("span"),F(Z8.$$.fragment),twr=l(),e0e=a("span"),awr=o("FlaxAutoModel"),jqe=l(),fr=a("div"),F(ex.$$.fragment),nwr=l(),yc=a("p"),swr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=a("a"),lwr=o("from_pretrained()"),iwr=o(" class method or the "),qU=a("a"),dwr=o("from_config()"),cwr=o(` class
method.`),fwr=l(),ox=a("p"),mwr=o("This class cannot be instantiated directly using "),o0e=a("code"),gwr=o("__init__()"),hwr=o(" (throws an error)."),pwr=l(),jt=a("div"),F(rx.$$.fragment),uwr=l(),r0e=a("p"),_wr=o("Instantiates one of the base model classes of the library from a configuration."),bwr=l(),Lc=a("p"),vwr=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),Fwr=o("not"),Twr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),Mwr=o("from_pretrained()"),Ewr=o(" to load the model weights."),Cwr=l(),F(oE.$$.fragment),wwr=l(),jr=a("div"),F(tx.$$.fragment),Awr=l(),a0e=a("p"),ywr=o("Instantiate one of the base model classes of the library from a pretrained model."),Lwr=l(),gn=a("p"),xwr=o("The model class to instantiate is selected based on the "),n0e=a("code"),$wr=o("model_type"),kwr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),Swr=o("pretrained_model_name_or_path"),Rwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),Bwr=o("pretrained_model_name_or_path"),Pwr=o(":"),Iwr=l(),re=a("ul"),rE=a("li"),i0e=a("strong"),qwr=o("albert"),Nwr=o(" \u2014 "),jU=a("a"),jwr=o("FlaxAlbertModel"),Dwr=o(" (ALBERT model)"),Gwr=l(),tE=a("li"),d0e=a("strong"),Owr=o("bart"),Vwr=o(" \u2014 "),DU=a("a"),Xwr=o("FlaxBartModel"),zwr=o(" (BART model)"),Qwr=l(),aE=a("li"),c0e=a("strong"),Wwr=o("beit"),Hwr=o(" \u2014 "),GU=a("a"),Uwr=o("FlaxBeitModel"),Jwr=o(" (BEiT model)"),Ywr=l(),nE=a("li"),f0e=a("strong"),Kwr=o("bert"),Zwr=o(" \u2014 "),OU=a("a"),eAr=o("FlaxBertModel"),oAr=o(" (BERT model)"),rAr=l(),sE=a("li"),m0e=a("strong"),tAr=o("big_bird"),aAr=o(" \u2014 "),VU=a("a"),nAr=o("FlaxBigBirdModel"),sAr=o(" (BigBird model)"),lAr=l(),lE=a("li"),g0e=a("strong"),iAr=o("blenderbot"),dAr=o(" \u2014 "),XU=a("a"),cAr=o("FlaxBlenderbotModel"),fAr=o(" (Blenderbot model)"),mAr=l(),iE=a("li"),h0e=a("strong"),gAr=o("blenderbot-small"),hAr=o(" \u2014 "),zU=a("a"),pAr=o("FlaxBlenderbotSmallModel"),uAr=o(" (BlenderbotSmall model)"),_Ar=l(),dE=a("li"),p0e=a("strong"),bAr=o("clip"),vAr=o(" \u2014 "),QU=a("a"),FAr=o("FlaxCLIPModel"),TAr=o(" (CLIP model)"),MAr=l(),cE=a("li"),u0e=a("strong"),EAr=o("distilbert"),CAr=o(" \u2014 "),WU=a("a"),wAr=o("FlaxDistilBertModel"),AAr=o(" (DistilBERT model)"),yAr=l(),fE=a("li"),_0e=a("strong"),LAr=o("electra"),xAr=o(" \u2014 "),HU=a("a"),$Ar=o("FlaxElectraModel"),kAr=o(" (ELECTRA model)"),SAr=l(),mE=a("li"),b0e=a("strong"),RAr=o("gpt2"),BAr=o(" \u2014 "),UU=a("a"),PAr=o("FlaxGPT2Model"),IAr=o(" (OpenAI GPT-2 model)"),qAr=l(),gE=a("li"),v0e=a("strong"),NAr=o("gpt_neo"),jAr=o(" \u2014 "),JU=a("a"),DAr=o("FlaxGPTNeoModel"),GAr=o(" (GPT Neo model)"),OAr=l(),hE=a("li"),F0e=a("strong"),VAr=o("gptj"),XAr=o(" \u2014 "),YU=a("a"),zAr=o("FlaxGPTJModel"),QAr=o(" (GPT-J model)"),WAr=l(),pE=a("li"),T0e=a("strong"),HAr=o("marian"),UAr=o(" \u2014 "),KU=a("a"),JAr=o("FlaxMarianModel"),YAr=o(" (Marian model)"),KAr=l(),uE=a("li"),M0e=a("strong"),ZAr=o("mbart"),e6r=o(" \u2014 "),ZU=a("a"),o6r=o("FlaxMBartModel"),r6r=o(" (mBART model)"),t6r=l(),_E=a("li"),E0e=a("strong"),a6r=o("mt5"),n6r=o(" \u2014 "),eJ=a("a"),s6r=o("FlaxMT5Model"),l6r=o(" (mT5 model)"),i6r=l(),bE=a("li"),C0e=a("strong"),d6r=o("pegasus"),c6r=o(" \u2014 "),oJ=a("a"),f6r=o("FlaxPegasusModel"),m6r=o(" (Pegasus model)"),g6r=l(),vE=a("li"),w0e=a("strong"),h6r=o("roberta"),p6r=o(" \u2014 "),rJ=a("a"),u6r=o("FlaxRobertaModel"),_6r=o(" (RoBERTa model)"),b6r=l(),FE=a("li"),A0e=a("strong"),v6r=o("roformer"),F6r=o(" \u2014 "),tJ=a("a"),T6r=o("FlaxRoFormerModel"),M6r=o(" (RoFormer model)"),E6r=l(),TE=a("li"),y0e=a("strong"),C6r=o("t5"),w6r=o(" \u2014 "),aJ=a("a"),A6r=o("FlaxT5Model"),y6r=o(" (T5 model)"),L6r=l(),ME=a("li"),L0e=a("strong"),x6r=o("vision-text-dual-encoder"),$6r=o(" \u2014 "),nJ=a("a"),k6r=o("FlaxVisionTextDualEncoderModel"),S6r=o(" (VisionTextDualEncoder model)"),R6r=l(),EE=a("li"),x0e=a("strong"),B6r=o("vit"),P6r=o(" \u2014 "),sJ=a("a"),I6r=o("FlaxViTModel"),q6r=o(" (ViT model)"),N6r=l(),CE=a("li"),$0e=a("strong"),j6r=o("wav2vec2"),D6r=o(" \u2014 "),lJ=a("a"),G6r=o("FlaxWav2Vec2Model"),O6r=o(" (Wav2Vec2 model)"),V6r=l(),wE=a("li"),k0e=a("strong"),X6r=o("xglm"),z6r=o(" \u2014 "),iJ=a("a"),Q6r=o("FlaxXGLMModel"),W6r=o(" (XGLM model)"),H6r=l(),AE=a("li"),S0e=a("strong"),U6r=o("xlm-roberta"),J6r=o(" \u2014 "),dJ=a("a"),Y6r=o("FlaxXLMRobertaModel"),K6r=o(" (XLM-RoBERTa model)"),Z6r=l(),F(yE.$$.fragment),Dqe=l(),xc=a("h2"),LE=a("a"),R0e=a("span"),F(ax.$$.fragment),eyr=l(),B0e=a("span"),oyr=o("FlaxAutoModelForCausalLM"),Gqe=l(),mr=a("div"),F(nx.$$.fragment),ryr=l(),$c=a("p"),tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cJ=a("a"),ayr=o("from_pretrained()"),nyr=o(" class method or the "),fJ=a("a"),syr=o("from_config()"),lyr=o(` class
method.`),iyr=l(),sx=a("p"),dyr=o("This class cannot be instantiated directly using "),P0e=a("code"),cyr=o("__init__()"),fyr=o(" (throws an error)."),myr=l(),Dt=a("div"),F(lx.$$.fragment),gyr=l(),I0e=a("p"),hyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pyr=l(),kc=a("p"),uyr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),_yr=o("not"),byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),vyr=o("from_pretrained()"),Fyr=o(" to load the model weights."),Tyr=l(),F(xE.$$.fragment),Myr=l(),Dr=a("div"),F(ix.$$.fragment),Eyr=l(),N0e=a("p"),Cyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wyr=l(),hn=a("p"),Ayr=o("The model class to instantiate is selected based on the "),j0e=a("code"),yyr=o("model_type"),Lyr=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),xyr=o("pretrained_model_name_or_path"),$yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(":"),Ryr=l(),ke=a("ul"),$E=a("li"),O0e=a("strong"),Byr=o("bart"),Pyr=o(" \u2014 "),gJ=a("a"),Iyr=o("FlaxBartForCausalLM"),qyr=o(" (BART model)"),Nyr=l(),kE=a("li"),V0e=a("strong"),jyr=o("bert"),Dyr=o(" \u2014 "),hJ=a("a"),Gyr=o("FlaxBertForCausalLM"),Oyr=o(" (BERT model)"),Vyr=l(),SE=a("li"),X0e=a("strong"),Xyr=o("big_bird"),zyr=o(" \u2014 "),pJ=a("a"),Qyr=o("FlaxBigBirdForCausalLM"),Wyr=o(" (BigBird model)"),Hyr=l(),RE=a("li"),z0e=a("strong"),Uyr=o("electra"),Jyr=o(" \u2014 "),uJ=a("a"),Yyr=o("FlaxElectraForCausalLM"),Kyr=o(" (ELECTRA model)"),Zyr=l(),BE=a("li"),Q0e=a("strong"),eLr=o("gpt2"),oLr=o(" \u2014 "),_J=a("a"),rLr=o("FlaxGPT2LMHeadModel"),tLr=o(" (OpenAI GPT-2 model)"),aLr=l(),PE=a("li"),W0e=a("strong"),nLr=o("gpt_neo"),sLr=o(" \u2014 "),bJ=a("a"),lLr=o("FlaxGPTNeoForCausalLM"),iLr=o(" (GPT Neo model)"),dLr=l(),IE=a("li"),H0e=a("strong"),cLr=o("gptj"),fLr=o(" \u2014 "),vJ=a("a"),mLr=o("FlaxGPTJForCausalLM"),gLr=o(" (GPT-J model)"),hLr=l(),qE=a("li"),U0e=a("strong"),pLr=o("roberta"),uLr=o(" \u2014 "),FJ=a("a"),_Lr=o("FlaxRobertaForCausalLM"),bLr=o(" (RoBERTa model)"),vLr=l(),NE=a("li"),J0e=a("strong"),FLr=o("xglm"),TLr=o(" \u2014 "),TJ=a("a"),MLr=o("FlaxXGLMForCausalLM"),ELr=o(" (XGLM model)"),CLr=l(),F(jE.$$.fragment),Oqe=l(),Sc=a("h2"),DE=a("a"),Y0e=a("span"),F(dx.$$.fragment),wLr=l(),K0e=a("span"),ALr=o("FlaxAutoModelForPreTraining"),Vqe=l(),gr=a("div"),F(cx.$$.fragment),yLr=l(),Rc=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MJ=a("a"),xLr=o("from_pretrained()"),$Lr=o(" class method or the "),EJ=a("a"),kLr=o("from_config()"),SLr=o(` class
method.`),RLr=l(),fx=a("p"),BLr=o("This class cannot be instantiated directly using "),Z0e=a("code"),PLr=o("__init__()"),ILr=o(" (throws an error)."),qLr=l(),Gt=a("div"),F(mx.$$.fragment),NLr=l(),eTe=a("p"),jLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DLr=l(),Bc=a("p"),GLr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),OLr=o("not"),VLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),XLr=o("from_pretrained()"),zLr=o(" to load the model weights."),QLr=l(),F(GE.$$.fragment),WLr=l(),Gr=a("div"),F(gx.$$.fragment),HLr=l(),rTe=a("p"),ULr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JLr=l(),pn=a("p"),YLr=o("The model class to instantiate is selected based on the "),tTe=a("code"),KLr=o("model_type"),ZLr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),r8r=o("pretrained_model_name_or_path"),t8r=o(":"),a8r=l(),Ee=a("ul"),OE=a("li"),sTe=a("strong"),n8r=o("albert"),s8r=o(" \u2014 "),wJ=a("a"),l8r=o("FlaxAlbertForPreTraining"),i8r=o(" (ALBERT model)"),d8r=l(),VE=a("li"),lTe=a("strong"),c8r=o("bart"),f8r=o(" \u2014 "),AJ=a("a"),m8r=o("FlaxBartForConditionalGeneration"),g8r=o(" (BART model)"),h8r=l(),XE=a("li"),iTe=a("strong"),p8r=o("bert"),u8r=o(" \u2014 "),yJ=a("a"),_8r=o("FlaxBertForPreTraining"),b8r=o(" (BERT model)"),v8r=l(),zE=a("li"),dTe=a("strong"),F8r=o("big_bird"),T8r=o(" \u2014 "),LJ=a("a"),M8r=o("FlaxBigBirdForPreTraining"),E8r=o(" (BigBird model)"),C8r=l(),QE=a("li"),cTe=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),xJ=a("a"),y8r=o("FlaxElectraForPreTraining"),L8r=o(" (ELECTRA model)"),x8r=l(),WE=a("li"),fTe=a("strong"),$8r=o("mbart"),k8r=o(" \u2014 "),$J=a("a"),S8r=o("FlaxMBartForConditionalGeneration"),R8r=o(" (mBART model)"),B8r=l(),HE=a("li"),mTe=a("strong"),P8r=o("mt5"),I8r=o(" \u2014 "),kJ=a("a"),q8r=o("FlaxMT5ForConditionalGeneration"),N8r=o(" (mT5 model)"),j8r=l(),UE=a("li"),gTe=a("strong"),D8r=o("roberta"),G8r=o(" \u2014 "),SJ=a("a"),O8r=o("FlaxRobertaForMaskedLM"),V8r=o(" (RoBERTa model)"),X8r=l(),JE=a("li"),hTe=a("strong"),z8r=o("roformer"),Q8r=o(" \u2014 "),RJ=a("a"),W8r=o("FlaxRoFormerForMaskedLM"),H8r=o(" (RoFormer model)"),U8r=l(),YE=a("li"),pTe=a("strong"),J8r=o("t5"),Y8r=o(" \u2014 "),BJ=a("a"),K8r=o("FlaxT5ForConditionalGeneration"),Z8r=o(" (T5 model)"),exr=l(),KE=a("li"),uTe=a("strong"),oxr=o("wav2vec2"),rxr=o(" \u2014 "),PJ=a("a"),txr=o("FlaxWav2Vec2ForPreTraining"),axr=o(" (Wav2Vec2 model)"),nxr=l(),ZE=a("li"),_Te=a("strong"),sxr=o("xlm-roberta"),lxr=o(" \u2014 "),IJ=a("a"),ixr=o("FlaxXLMRobertaForMaskedLM"),dxr=o(" (XLM-RoBERTa model)"),cxr=l(),F(eC.$$.fragment),Xqe=l(),Pc=a("h2"),oC=a("a"),bTe=a("span"),F(hx.$$.fragment),fxr=l(),vTe=a("span"),mxr=o("FlaxAutoModelForMaskedLM"),zqe=l(),hr=a("div"),F(px.$$.fragment),gxr=l(),Ic=a("p"),hxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qJ=a("a"),pxr=o("from_pretrained()"),uxr=o(" class method or the "),NJ=a("a"),_xr=o("from_config()"),bxr=o(` class
method.`),vxr=l(),ux=a("p"),Fxr=o("This class cannot be instantiated directly using "),FTe=a("code"),Txr=o("__init__()"),Mxr=o(" (throws an error)."),Exr=l(),Ot=a("div"),F(_x.$$.fragment),Cxr=l(),TTe=a("p"),wxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Axr=l(),qc=a("p"),yxr=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),Lxr=o("not"),xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),$xr=o("from_pretrained()"),kxr=o(" to load the model weights."),Sxr=l(),F(rC.$$.fragment),Rxr=l(),Or=a("div"),F(bx.$$.fragment),Bxr=l(),ETe=a("p"),Pxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ixr=l(),un=a("p"),qxr=o("The model class to instantiate is selected based on the "),CTe=a("code"),Nxr=o("model_type"),jxr=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),Dxr=o("pretrained_model_name_or_path"),Gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(":"),Xxr=l(),Le=a("ul"),tC=a("li"),yTe=a("strong"),zxr=o("albert"),Qxr=o(" \u2014 "),DJ=a("a"),Wxr=o("FlaxAlbertForMaskedLM"),Hxr=o(" (ALBERT model)"),Uxr=l(),aC=a("li"),LTe=a("strong"),Jxr=o("bart"),Yxr=o(" \u2014 "),GJ=a("a"),Kxr=o("FlaxBartForConditionalGeneration"),Zxr=o(" (BART model)"),e9r=l(),nC=a("li"),xTe=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),OJ=a("a"),t9r=o("FlaxBertForMaskedLM"),a9r=o(" (BERT model)"),n9r=l(),sC=a("li"),$Te=a("strong"),s9r=o("big_bird"),l9r=o(" \u2014 "),VJ=a("a"),i9r=o("FlaxBigBirdForMaskedLM"),d9r=o(" (BigBird model)"),c9r=l(),lC=a("li"),kTe=a("strong"),f9r=o("distilbert"),m9r=o(" \u2014 "),XJ=a("a"),g9r=o("FlaxDistilBertForMaskedLM"),h9r=o(" (DistilBERT model)"),p9r=l(),iC=a("li"),STe=a("strong"),u9r=o("electra"),_9r=o(" \u2014 "),zJ=a("a"),b9r=o("FlaxElectraForMaskedLM"),v9r=o(" (ELECTRA model)"),F9r=l(),dC=a("li"),RTe=a("strong"),T9r=o("mbart"),M9r=o(" \u2014 "),QJ=a("a"),E9r=o("FlaxMBartForConditionalGeneration"),C9r=o(" (mBART model)"),w9r=l(),cC=a("li"),BTe=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),WJ=a("a"),L9r=o("FlaxRobertaForMaskedLM"),x9r=o(" (RoBERTa model)"),$9r=l(),fC=a("li"),PTe=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),HJ=a("a"),R9r=o("FlaxRoFormerForMaskedLM"),B9r=o(" (RoFormer model)"),P9r=l(),mC=a("li"),ITe=a("strong"),I9r=o("xlm-roberta"),q9r=o(" \u2014 "),UJ=a("a"),N9r=o("FlaxXLMRobertaForMaskedLM"),j9r=o(" (XLM-RoBERTa model)"),D9r=l(),F(gC.$$.fragment),Qqe=l(),Nc=a("h2"),hC=a("a"),qTe=a("span"),F(vx.$$.fragment),G9r=l(),NTe=a("span"),O9r=o("FlaxAutoModelForSeq2SeqLM"),Wqe=l(),pr=a("div"),F(Fx.$$.fragment),V9r=l(),jc=a("p"),X9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JJ=a("a"),z9r=o("from_pretrained()"),Q9r=o(" class method or the "),YJ=a("a"),W9r=o("from_config()"),H9r=o(` class
method.`),U9r=l(),Tx=a("p"),J9r=o("This class cannot be instantiated directly using "),jTe=a("code"),Y9r=o("__init__()"),K9r=o(" (throws an error)."),Z9r=l(),Vt=a("div"),F(Mx.$$.fragment),e$r=l(),DTe=a("p"),o$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r$r=l(),Dc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(pC.$$.fragment),d$r=l(),Vr=a("div"),F(Ex.$$.fragment),c$r=l(),OTe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m$r=l(),_n=a("p"),g$r=o("The model class to instantiate is selected based on the "),VTe=a("code"),h$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),u$r=o("pretrained_model_name_or_path"),_$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),Se=a("ul"),uC=a("li"),QTe=a("strong"),T$r=o("bart"),M$r=o(" \u2014 "),ZJ=a("a"),E$r=o("FlaxBartForConditionalGeneration"),C$r=o(" (BART model)"),w$r=l(),_C=a("li"),WTe=a("strong"),A$r=o("blenderbot"),y$r=o(" \u2014 "),eY=a("a"),L$r=o("FlaxBlenderbotForConditionalGeneration"),x$r=o(" (Blenderbot model)"),$$r=l(),bC=a("li"),HTe=a("strong"),k$r=o("blenderbot-small"),S$r=o(" \u2014 "),oY=a("a"),R$r=o("FlaxBlenderbotSmallForConditionalGeneration"),B$r=o(" (BlenderbotSmall model)"),P$r=l(),vC=a("li"),UTe=a("strong"),I$r=o("encoder-decoder"),q$r=o(" \u2014 "),rY=a("a"),N$r=o("FlaxEncoderDecoderModel"),j$r=o(" (Encoder decoder model)"),D$r=l(),FC=a("li"),JTe=a("strong"),G$r=o("marian"),O$r=o(" \u2014 "),tY=a("a"),V$r=o("FlaxMarianMTModel"),X$r=o(" (Marian model)"),z$r=l(),TC=a("li"),YTe=a("strong"),Q$r=o("mbart"),W$r=o(" \u2014 "),aY=a("a"),H$r=o("FlaxMBartForConditionalGeneration"),U$r=o(" (mBART model)"),J$r=l(),MC=a("li"),KTe=a("strong"),Y$r=o("mt5"),K$r=o(" \u2014 "),nY=a("a"),Z$r=o("FlaxMT5ForConditionalGeneration"),ekr=o(" (mT5 model)"),okr=l(),EC=a("li"),ZTe=a("strong"),rkr=o("pegasus"),tkr=o(" \u2014 "),sY=a("a"),akr=o("FlaxPegasusForConditionalGeneration"),nkr=o(" (Pegasus model)"),skr=l(),CC=a("li"),e7e=a("strong"),lkr=o("t5"),ikr=o(" \u2014 "),lY=a("a"),dkr=o("FlaxT5ForConditionalGeneration"),ckr=o(" (T5 model)"),fkr=l(),F(wC.$$.fragment),Hqe=l(),Gc=a("h2"),AC=a("a"),o7e=a("span"),F(Cx.$$.fragment),mkr=l(),r7e=a("span"),gkr=o("FlaxAutoModelForSequenceClassification"),Uqe=l(),ur=a("div"),F(wx.$$.fragment),hkr=l(),Oc=a("p"),pkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iY=a("a"),ukr=o("from_pretrained()"),_kr=o(" class method or the "),dY=a("a"),bkr=o("from_config()"),vkr=o(` class
method.`),Fkr=l(),Ax=a("p"),Tkr=o("This class cannot be instantiated directly using "),t7e=a("code"),Mkr=o("__init__()"),Ekr=o(" (throws an error)."),Ckr=l(),Xt=a("div"),F(yx.$$.fragment),wkr=l(),a7e=a("p"),Akr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ykr=l(),Vc=a("p"),Lkr=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),xkr=o("not"),$kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),kkr=o("from_pretrained()"),Skr=o(" to load the model weights."),Rkr=l(),F(yC.$$.fragment),Bkr=l(),Xr=a("div"),F(Lx.$$.fragment),Pkr=l(),s7e=a("p"),Ikr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qkr=l(),bn=a("p"),Nkr=o("The model class to instantiate is selected based on the "),l7e=a("code"),jkr=o("model_type"),Dkr=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),Gkr=o("pretrained_model_name_or_path"),Okr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(":"),zkr=l(),xe=a("ul"),LC=a("li"),c7e=a("strong"),Qkr=o("albert"),Wkr=o(" \u2014 "),fY=a("a"),Hkr=o("FlaxAlbertForSequenceClassification"),Ukr=o(" (ALBERT model)"),Jkr=l(),xC=a("li"),f7e=a("strong"),Ykr=o("bart"),Kkr=o(" \u2014 "),mY=a("a"),Zkr=o("FlaxBartForSequenceClassification"),eSr=o(" (BART model)"),oSr=l(),$C=a("li"),m7e=a("strong"),rSr=o("bert"),tSr=o(" \u2014 "),gY=a("a"),aSr=o("FlaxBertForSequenceClassification"),nSr=o(" (BERT model)"),sSr=l(),kC=a("li"),g7e=a("strong"),lSr=o("big_bird"),iSr=o(" \u2014 "),hY=a("a"),dSr=o("FlaxBigBirdForSequenceClassification"),cSr=o(" (BigBird model)"),fSr=l(),SC=a("li"),h7e=a("strong"),mSr=o("distilbert"),gSr=o(" \u2014 "),pY=a("a"),hSr=o("FlaxDistilBertForSequenceClassification"),pSr=o(" (DistilBERT model)"),uSr=l(),RC=a("li"),p7e=a("strong"),_Sr=o("electra"),bSr=o(" \u2014 "),uY=a("a"),vSr=o("FlaxElectraForSequenceClassification"),FSr=o(" (ELECTRA model)"),TSr=l(),BC=a("li"),u7e=a("strong"),MSr=o("mbart"),ESr=o(" \u2014 "),_Y=a("a"),CSr=o("FlaxMBartForSequenceClassification"),wSr=o(" (mBART model)"),ASr=l(),PC=a("li"),_7e=a("strong"),ySr=o("roberta"),LSr=o(" \u2014 "),bY=a("a"),xSr=o("FlaxRobertaForSequenceClassification"),$Sr=o(" (RoBERTa model)"),kSr=l(),IC=a("li"),b7e=a("strong"),SSr=o("roformer"),RSr=o(" \u2014 "),vY=a("a"),BSr=o("FlaxRoFormerForSequenceClassification"),PSr=o(" (RoFormer model)"),ISr=l(),qC=a("li"),v7e=a("strong"),qSr=o("xlm-roberta"),NSr=o(" \u2014 "),FY=a("a"),jSr=o("FlaxXLMRobertaForSequenceClassification"),DSr=o(" (XLM-RoBERTa model)"),GSr=l(),F(NC.$$.fragment),Jqe=l(),Xc=a("h2"),jC=a("a"),F7e=a("span"),F(xx.$$.fragment),OSr=l(),T7e=a("span"),VSr=o("FlaxAutoModelForQuestionAnswering"),Yqe=l(),_r=a("div"),F($x.$$.fragment),XSr=l(),zc=a("p"),zSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TY=a("a"),QSr=o("from_pretrained()"),WSr=o(" class method or the "),MY=a("a"),HSr=o("from_config()"),USr=o(` class
method.`),JSr=l(),kx=a("p"),YSr=o("This class cannot be instantiated directly using "),M7e=a("code"),KSr=o("__init__()"),ZSr=o(" (throws an error)."),eRr=l(),zt=a("div"),F(Sx.$$.fragment),oRr=l(),E7e=a("p"),rRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tRr=l(),Qc=a("p"),aRr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),nRr=o("not"),sRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),lRr=o("from_pretrained()"),iRr=o(" to load the model weights."),dRr=l(),F(DC.$$.fragment),cRr=l(),zr=a("div"),F(Rx.$$.fragment),fRr=l(),w7e=a("p"),mRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gRr=l(),vn=a("p"),hRr=o("The model class to instantiate is selected based on the "),A7e=a("code"),pRr=o("model_type"),uRr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),_Rr=o("pretrained_model_name_or_path"),bRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),vRr=o("pretrained_model_name_or_path"),FRr=o(":"),TRr=l(),$e=a("ul"),GC=a("li"),x7e=a("strong"),MRr=o("albert"),ERr=o(" \u2014 "),CY=a("a"),CRr=o("FlaxAlbertForQuestionAnswering"),wRr=o(" (ALBERT model)"),ARr=l(),OC=a("li"),$7e=a("strong"),yRr=o("bart"),LRr=o(" \u2014 "),wY=a("a"),xRr=o("FlaxBartForQuestionAnswering"),$Rr=o(" (BART model)"),kRr=l(),VC=a("li"),k7e=a("strong"),SRr=o("bert"),RRr=o(" \u2014 "),AY=a("a"),BRr=o("FlaxBertForQuestionAnswering"),PRr=o(" (BERT model)"),IRr=l(),XC=a("li"),S7e=a("strong"),qRr=o("big_bird"),NRr=o(" \u2014 "),yY=a("a"),jRr=o("FlaxBigBirdForQuestionAnswering"),DRr=o(" (BigBird model)"),GRr=l(),zC=a("li"),R7e=a("strong"),ORr=o("distilbert"),VRr=o(" \u2014 "),LY=a("a"),XRr=o("FlaxDistilBertForQuestionAnswering"),zRr=o(" (DistilBERT model)"),QRr=l(),QC=a("li"),B7e=a("strong"),WRr=o("electra"),HRr=o(" \u2014 "),xY=a("a"),URr=o("FlaxElectraForQuestionAnswering"),JRr=o(" (ELECTRA model)"),YRr=l(),WC=a("li"),P7e=a("strong"),KRr=o("mbart"),ZRr=o(" \u2014 "),$Y=a("a"),eBr=o("FlaxMBartForQuestionAnswering"),oBr=o(" (mBART model)"),rBr=l(),HC=a("li"),I7e=a("strong"),tBr=o("roberta"),aBr=o(" \u2014 "),kY=a("a"),nBr=o("FlaxRobertaForQuestionAnswering"),sBr=o(" (RoBERTa model)"),lBr=l(),UC=a("li"),q7e=a("strong"),iBr=o("roformer"),dBr=o(" \u2014 "),SY=a("a"),cBr=o("FlaxRoFormerForQuestionAnswering"),fBr=o(" (RoFormer model)"),mBr=l(),JC=a("li"),N7e=a("strong"),gBr=o("xlm-roberta"),hBr=o(" \u2014 "),RY=a("a"),pBr=o("FlaxXLMRobertaForQuestionAnswering"),uBr=o(" (XLM-RoBERTa model)"),_Br=l(),F(YC.$$.fragment),Kqe=l(),Wc=a("h2"),KC=a("a"),j7e=a("span"),F(Bx.$$.fragment),bBr=l(),D7e=a("span"),vBr=o("FlaxAutoModelForTokenClassification"),Zqe=l(),br=a("div"),F(Px.$$.fragment),FBr=l(),Hc=a("p"),TBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BY=a("a"),MBr=o("from_pretrained()"),EBr=o(" class method or the "),PY=a("a"),CBr=o("from_config()"),wBr=o(` class
method.`),ABr=l(),Ix=a("p"),yBr=o("This class cannot be instantiated directly using "),G7e=a("code"),LBr=o("__init__()"),xBr=o(" (throws an error)."),$Br=l(),Qt=a("div"),F(qx.$$.fragment),kBr=l(),O7e=a("p"),SBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RBr=l(),Uc=a("p"),BBr=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),PBr=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),qBr=o("from_pretrained()"),NBr=o(" to load the model weights."),jBr=l(),F(ZC.$$.fragment),DBr=l(),Qr=a("div"),F(Nx.$$.fragment),GBr=l(),X7e=a("p"),OBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VBr=l(),Fn=a("p"),XBr=o("The model class to instantiate is selected based on the "),z7e=a("code"),zBr=o("model_type"),QBr=o(` property of the config object (either
passed as an argument or loaded from `),Q7e=a("code"),WBr=o("pretrained_model_name_or_path"),HBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(":"),YBr=l(),De=a("ul"),e3=a("li"),H7e=a("strong"),KBr=o("albert"),ZBr=o(" \u2014 "),qY=a("a"),ePr=o("FlaxAlbertForTokenClassification"),oPr=o(" (ALBERT model)"),rPr=l(),o3=a("li"),U7e=a("strong"),tPr=o("bert"),aPr=o(" \u2014 "),NY=a("a"),nPr=o("FlaxBertForTokenClassification"),sPr=o(" (BERT model)"),lPr=l(),r3=a("li"),J7e=a("strong"),iPr=o("big_bird"),dPr=o(" \u2014 "),jY=a("a"),cPr=o("FlaxBigBirdForTokenClassification"),fPr=o(" (BigBird model)"),mPr=l(),t3=a("li"),Y7e=a("strong"),gPr=o("distilbert"),hPr=o(" \u2014 "),DY=a("a"),pPr=o("FlaxDistilBertForTokenClassification"),uPr=o(" (DistilBERT model)"),_Pr=l(),a3=a("li"),K7e=a("strong"),bPr=o("electra"),vPr=o(" \u2014 "),GY=a("a"),FPr=o("FlaxElectraForTokenClassification"),TPr=o(" (ELECTRA model)"),MPr=l(),n3=a("li"),Z7e=a("strong"),EPr=o("roberta"),CPr=o(" \u2014 "),OY=a("a"),wPr=o("FlaxRobertaForTokenClassification"),APr=o(" (RoBERTa model)"),yPr=l(),s3=a("li"),eMe=a("strong"),LPr=o("roformer"),xPr=o(" \u2014 "),VY=a("a"),$Pr=o("FlaxRoFormerForTokenClassification"),kPr=o(" (RoFormer model)"),SPr=l(),l3=a("li"),oMe=a("strong"),RPr=o("xlm-roberta"),BPr=o(" \u2014 "),XY=a("a"),PPr=o("FlaxXLMRobertaForTokenClassification"),IPr=o(" (XLM-RoBERTa model)"),qPr=l(),F(i3.$$.fragment),eNe=l(),Jc=a("h2"),d3=a("a"),rMe=a("span"),F(jx.$$.fragment),NPr=l(),tMe=a("span"),jPr=o("FlaxAutoModelForMultipleChoice"),oNe=l(),vr=a("div"),F(Dx.$$.fragment),DPr=l(),Yc=a("p"),GPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zY=a("a"),OPr=o("from_pretrained()"),VPr=o(" class method or the "),QY=a("a"),XPr=o("from_config()"),zPr=o(` class
method.`),QPr=l(),Gx=a("p"),WPr=o("This class cannot be instantiated directly using "),aMe=a("code"),HPr=o("__init__()"),UPr=o(" (throws an error)."),JPr=l(),Wt=a("div"),F(Ox.$$.fragment),YPr=l(),nMe=a("p"),KPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZPr=l(),Kc=a("p"),eIr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),oIr=o("not"),rIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),tIr=o("from_pretrained()"),aIr=o(" to load the model weights."),nIr=l(),F(c3.$$.fragment),sIr=l(),Wr=a("div"),F(Vx.$$.fragment),lIr=l(),lMe=a("p"),iIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dIr=l(),Tn=a("p"),cIr=o("The model class to instantiate is selected based on the "),iMe=a("code"),fIr=o("model_type"),mIr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),pIr=o("pretrained_model_name_or_path"),uIr=o(":"),_Ir=l(),Ge=a("ul"),f3=a("li"),fMe=a("strong"),bIr=o("albert"),vIr=o(" \u2014 "),HY=a("a"),FIr=o("FlaxAlbertForMultipleChoice"),TIr=o(" (ALBERT model)"),MIr=l(),m3=a("li"),mMe=a("strong"),EIr=o("bert"),CIr=o(" \u2014 "),UY=a("a"),wIr=o("FlaxBertForMultipleChoice"),AIr=o(" (BERT model)"),yIr=l(),g3=a("li"),gMe=a("strong"),LIr=o("big_bird"),xIr=o(" \u2014 "),JY=a("a"),$Ir=o("FlaxBigBirdForMultipleChoice"),kIr=o(" (BigBird model)"),SIr=l(),h3=a("li"),hMe=a("strong"),RIr=o("distilbert"),BIr=o(" \u2014 "),YY=a("a"),PIr=o("FlaxDistilBertForMultipleChoice"),IIr=o(" (DistilBERT model)"),qIr=l(),p3=a("li"),pMe=a("strong"),NIr=o("electra"),jIr=o(" \u2014 "),KY=a("a"),DIr=o("FlaxElectraForMultipleChoice"),GIr=o(" (ELECTRA model)"),OIr=l(),u3=a("li"),uMe=a("strong"),VIr=o("roberta"),XIr=o(" \u2014 "),ZY=a("a"),zIr=o("FlaxRobertaForMultipleChoice"),QIr=o(" (RoBERTa model)"),WIr=l(),_3=a("li"),_Me=a("strong"),HIr=o("roformer"),UIr=o(" \u2014 "),eK=a("a"),JIr=o("FlaxRoFormerForMultipleChoice"),YIr=o(" (RoFormer model)"),KIr=l(),b3=a("li"),bMe=a("strong"),ZIr=o("xlm-roberta"),eqr=o(" \u2014 "),oK=a("a"),oqr=o("FlaxXLMRobertaForMultipleChoice"),rqr=o(" (XLM-RoBERTa model)"),tqr=l(),F(v3.$$.fragment),rNe=l(),Zc=a("h2"),F3=a("a"),vMe=a("span"),F(Xx.$$.fragment),aqr=l(),FMe=a("span"),nqr=o("FlaxAutoModelForNextSentencePrediction"),tNe=l(),Fr=a("div"),F(zx.$$.fragment),sqr=l(),ef=a("p"),lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rK=a("a"),iqr=o("from_pretrained()"),dqr=o(" class method or the "),tK=a("a"),cqr=o("from_config()"),fqr=o(` class
method.`),mqr=l(),Qx=a("p"),gqr=o("This class cannot be instantiated directly using "),TMe=a("code"),hqr=o("__init__()"),pqr=o(" (throws an error)."),uqr=l(),Ht=a("div"),F(Wx.$$.fragment),_qr=l(),MMe=a("p"),bqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vqr=l(),of=a("p"),Fqr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),Tqr=o("not"),Mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" to load the model weights."),wqr=l(),F(T3.$$.fragment),Aqr=l(),Hr=a("div"),F(Hx.$$.fragment),yqr=l(),CMe=a("p"),Lqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xqr=l(),Mn=a("p"),$qr=o("The model class to instantiate is selected based on the "),wMe=a("code"),kqr=o("model_type"),Sqr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),Rqr=o("pretrained_model_name_or_path"),Bqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),Pqr=o("pretrained_model_name_or_path"),Iqr=o(":"),qqr=l(),LMe=a("ul"),M3=a("li"),xMe=a("strong"),Nqr=o("bert"),jqr=o(" \u2014 "),nK=a("a"),Dqr=o("FlaxBertForNextSentencePrediction"),Gqr=o(" (BERT model)"),Oqr=l(),F(E3.$$.fragment),aNe=l(),rf=a("h2"),C3=a("a"),$Me=a("span"),F(Ux.$$.fragment),Vqr=l(),kMe=a("span"),Xqr=o("FlaxAutoModelForImageClassification"),nNe=l(),Tr=a("div"),F(Jx.$$.fragment),zqr=l(),tf=a("p"),Qqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sK=a("a"),Wqr=o("from_pretrained()"),Hqr=o(" class method or the "),lK=a("a"),Uqr=o("from_config()"),Jqr=o(` class
method.`),Yqr=l(),Yx=a("p"),Kqr=o("This class cannot be instantiated directly using "),SMe=a("code"),Zqr=o("__init__()"),eNr=o(" (throws an error)."),oNr=l(),Ut=a("div"),F(Kx.$$.fragment),rNr=l(),RMe=a("p"),tNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aNr=l(),af=a("p"),nNr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),sNr=o("not"),lNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),iNr=o("from_pretrained()"),dNr=o(" to load the model weights."),cNr=l(),F(w3.$$.fragment),fNr=l(),Ur=a("div"),F(Zx.$$.fragment),mNr=l(),PMe=a("p"),gNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hNr=l(),En=a("p"),pNr=o("The model class to instantiate is selected based on the "),IMe=a("code"),uNr=o("model_type"),_Nr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),bNr=o("pretrained_model_name_or_path"),vNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(":"),MNr=l(),e9=a("ul"),A3=a("li"),jMe=a("strong"),ENr=o("beit"),CNr=o(" \u2014 "),dK=a("a"),wNr=o("FlaxBeitForImageClassification"),ANr=o(" (BEiT model)"),yNr=l(),y3=a("li"),DMe=a("strong"),LNr=o("vit"),xNr=o(" \u2014 "),cK=a("a"),$Nr=o("FlaxViTForImageClassification"),kNr=o(" (ViT model)"),SNr=l(),F(L3.$$.fragment),sNe=l(),nf=a("h2"),x3=a("a"),GMe=a("span"),F(o9.$$.fragment),RNr=l(),OMe=a("span"),BNr=o("FlaxAutoModelForVision2Seq"),lNe=l(),Mr=a("div"),F(r9.$$.fragment),PNr=l(),sf=a("p"),INr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fK=a("a"),qNr=o("from_pretrained()"),NNr=o(" class method or the "),mK=a("a"),jNr=o("from_config()"),DNr=o(` class
method.`),GNr=l(),t9=a("p"),ONr=o("This class cannot be instantiated directly using "),VMe=a("code"),VNr=o("__init__()"),XNr=o(" (throws an error)."),zNr=l(),Jt=a("div"),F(a9.$$.fragment),QNr=l(),XMe=a("p"),WNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HNr=l(),lf=a("p"),UNr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),JNr=o("not"),YNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),KNr=o("from_pretrained()"),ZNr=o(" to load the model weights."),ejr=l(),F($3.$$.fragment),ojr=l(),Jr=a("div"),F(n9.$$.fragment),rjr=l(),QMe=a("p"),tjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ajr=l(),Cn=a("p"),njr=o("The model class to instantiate is selected based on the "),WMe=a("code"),sjr=o("model_type"),ljr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),cjr=o("pretrained_model_name_or_path"),fjr=o(":"),mjr=l(),JMe=a("ul"),k3=a("li"),YMe=a("strong"),gjr=o("vision-encoder-decoder"),hjr=o(" \u2014 "),hK=a("a"),pjr=o("FlaxVisionEncoderDecoderModel"),ujr=o(" (Vision Encoder decoder model)"),_jr=l(),F(S3.$$.fragment),this.h()},l(f){const _=eyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var s9=s(p);m=n(s9,"A",{id:!0,class:!0,href:!0});var KMe=s(m);u=n(KMe,"SPAN",{});var ZMe=s(u);T(d.$$.fragment,ZMe),ZMe.forEach(t),KMe.forEach(t),h=i(s9),Mo=n(s9,"SPAN",{});var e4e=s(Mo);li=r(e4e,"Auto Classes"),e4e.forEach(t),s9.forEach(t),mf=i(f),et=n(f,"P",{});var l9=s(et);ii=r(l9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(l9,"CODE",{});var o4e=s(di);YA=r(o4e,"from_pretrained()"),o4e.forEach(t),gf=r(l9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),l9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var r4e=s(An);KA=r(r4e,"AutoConfig"),r4e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var t4e=s(Ln);ZA=r(t4e,"AutoModel"),t4e.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var a4e=s(xn);e6=r(a4e,"AutoTokenizer"),a4e.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var i9=s(Ae);b$=r(i9,"will create a model that is an instance of "),gi=n(i9,"A",{href:!0});var n4e=s(gi);v$=r(n4e,"BertModel"),n4e.forEach(t),F$=r(i9,"."),i9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var d9=s(Ea);T$=r(d9,"There is one class of "),pf=n(d9,"CODE",{});var s4e=s(pf);M$=r(s4e,"AutoModel"),s4e.forEach(t),uDe=r(d9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),d9.forEach(t),nIe=i(f),hi=n(f,"H2",{class:!0});var c9=s(hi);uf=n(c9,"A",{id:!0,class:!0,href:!0});var l4e=s(uf);iee=n(l4e,"SPAN",{});var i4e=s(iee);T(o6.$$.fragment,i4e),i4e.forEach(t),l4e.forEach(t),_De=i(c9),dee=n(c9,"SPAN",{});var d4e=s(dee);bDe=r(d4e,"Extending the Auto Classes"),d4e.forEach(t),c9.forEach(t),sIe=i(f),$n=n(f,"P",{});var df=s($n);vDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),cee=n(df,"CODE",{});var c4e=s(cee);FDe=r(c4e,"NewModel"),c4e.forEach(t),TDe=r(df,", make sure you have a "),fee=n(df,"CODE",{});var f4e=s(fee);MDe=r(f4e,"NewModelConfig"),f4e.forEach(t),EDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),lIe=i(f),T(r6.$$.fragment,f),iIe=i(f),E$=n(f,"P",{});var m4e=s(E$);CDe=r(m4e,"You will then be able to use the auto classes like you would usually do!"),m4e.forEach(t),dIe=i(f),T(_f.$$.fragment,f),cIe=i(f),pi=n(f,"H2",{class:!0});var f9=s(pi);bf=n(f9,"A",{id:!0,class:!0,href:!0});var g4e=s(bf);mee=n(g4e,"SPAN",{});var h4e=s(mee);T(t6.$$.fragment,h4e),h4e.forEach(t),g4e.forEach(t),wDe=i(f9),gee=n(f9,"SPAN",{});var p4e=s(gee);ADe=r(p4e,"AutoConfig"),p4e.forEach(t),f9.forEach(t),fIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(a6.$$.fragment,Kr),yDe=i(Kr),n6=n(Kr,"P",{});var m9=s(n6);LDe=r(m9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C$=n(m9,"A",{href:!0});var u4e=s(C$);xDe=r(u4e,"from_pretrained()"),u4e.forEach(t),$De=r(m9," class method."),m9.forEach(t),kDe=i(Kr),s6=n(Kr,"P",{});var g9=s(s6);SDe=r(g9,"This class cannot be instantiated directly using "),hee=n(g9,"CODE",{});var _4e=s(hee);RDe=r(_4e,"__init__()"),_4e.forEach(t),BDe=r(g9," (throws an error)."),g9.forEach(t),PDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(l6.$$.fragment,Zr),IDe=i(Zr),pee=n(Zr,"P",{});var b4e=s(pee);qDe=r(b4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),b4e.forEach(t),NDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);jDe=r(cf,"The configuration class to instantiate is selected based on the "),uee=n(cf,"CODE",{});var v4e=s(uee);DDe=r(v4e,"model_type"),v4e.forEach(t),GDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_ee=n(cf,"CODE",{});var F4e=s(_ee);ODe=r(F4e,"pretrained_model_name_or_path"),F4e.forEach(t),VDe=r(cf,":"),cf.forEach(t),XDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var R3=s(vf);bee=n(R3,"STRONG",{});var T4e=s(bee);zDe=r(T4e,"albert"),T4e.forEach(t),QDe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var M4e=s(w$);WDe=r(M4e,"AlbertConfig"),M4e.forEach(t),HDe=r(R3," (ALBERT model)"),R3.forEach(t),UDe=i(y),Ff=n(y,"LI",{});var B3=s(Ff);vee=n(B3,"STRONG",{});var E4e=s(vee);JDe=r(E4e,"bart"),E4e.forEach(t),YDe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var C4e=s(A$);KDe=r(C4e,"BartConfig"),C4e.forEach(t),ZDe=r(B3," (BART model)"),B3.forEach(t),eGe=i(y),Tf=n(y,"LI",{});var P3=s(Tf);Fee=n(P3,"STRONG",{});var w4e=s(Fee);oGe=r(w4e,"beit"),w4e.forEach(t),rGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var A4e=s(y$);tGe=r(A4e,"BeitConfig"),A4e.forEach(t),aGe=r(P3," (BEiT model)"),P3.forEach(t),nGe=i(y),Mf=n(y,"LI",{});var I3=s(Mf);Tee=n(I3,"STRONG",{});var y4e=s(Tee);sGe=r(y4e,"bert"),y4e.forEach(t),lGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var L4e=s(L$);iGe=r(L4e,"BertConfig"),L4e.forEach(t),dGe=r(I3," (BERT model)"),I3.forEach(t),cGe=i(y),Ef=n(y,"LI",{});var q3=s(Ef);Mee=n(q3,"STRONG",{});var x4e=s(Mee);fGe=r(x4e,"bert-generation"),x4e.forEach(t),mGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var $4e=s(x$);gGe=r($4e,"BertGenerationConfig"),$4e.forEach(t),hGe=r(q3," (Bert Generation model)"),q3.forEach(t),pGe=i(y),Cf=n(y,"LI",{});var N3=s(Cf);Eee=n(N3,"STRONG",{});var k4e=s(Eee);uGe=r(k4e,"big_bird"),k4e.forEach(t),_Ge=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var S4e=s($$);bGe=r(S4e,"BigBirdConfig"),S4e.forEach(t),vGe=r(N3," (BigBird model)"),N3.forEach(t),FGe=i(y),wf=n(y,"LI",{});var j3=s(wf);Cee=n(j3,"STRONG",{});var R4e=s(Cee);TGe=r(R4e,"bigbird_pegasus"),R4e.forEach(t),MGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var B4e=s(k$);EGe=r(B4e,"BigBirdPegasusConfig"),B4e.forEach(t),CGe=r(j3," (BigBirdPegasus model)"),j3.forEach(t),wGe=i(y),Af=n(y,"LI",{});var D3=s(Af);wee=n(D3,"STRONG",{});var P4e=s(wee);AGe=r(P4e,"blenderbot"),P4e.forEach(t),yGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var I4e=s(S$);LGe=r(I4e,"BlenderbotConfig"),I4e.forEach(t),xGe=r(D3," (Blenderbot model)"),D3.forEach(t),$Ge=i(y),yf=n(y,"LI",{});var G3=s(yf);Aee=n(G3,"STRONG",{});var q4e=s(Aee);kGe=r(q4e,"blenderbot-small"),q4e.forEach(t),SGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var N4e=s(R$);RGe=r(N4e,"BlenderbotSmallConfig"),N4e.forEach(t),BGe=r(G3," (BlenderbotSmall model)"),G3.forEach(t),PGe=i(y),Lf=n(y,"LI",{});var O3=s(Lf);yee=n(O3,"STRONG",{});var j4e=s(yee);IGe=r(j4e,"camembert"),j4e.forEach(t),qGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var D4e=s(B$);NGe=r(D4e,"CamembertConfig"),D4e.forEach(t),jGe=r(O3," (CamemBERT model)"),O3.forEach(t),DGe=i(y),xf=n(y,"LI",{});var V3=s(xf);Lee=n(V3,"STRONG",{});var G4e=s(Lee);GGe=r(G4e,"canine"),G4e.forEach(t),OGe=r(V3," \u2014 "),P$=n(V3,"A",{href:!0});var O4e=s(P$);VGe=r(O4e,"CanineConfig"),O4e.forEach(t),XGe=r(V3," (Canine model)"),V3.forEach(t),zGe=i(y),$f=n(y,"LI",{});var X3=s($f);xee=n(X3,"STRONG",{});var V4e=s(xee);QGe=r(V4e,"clip"),V4e.forEach(t),WGe=r(X3," \u2014 "),I$=n(X3,"A",{href:!0});var X4e=s(I$);HGe=r(X4e,"CLIPConfig"),X4e.forEach(t),UGe=r(X3," (CLIP model)"),X3.forEach(t),JGe=i(y),kf=n(y,"LI",{});var z3=s(kf);$ee=n(z3,"STRONG",{});var z4e=s($ee);YGe=r(z4e,"convbert"),z4e.forEach(t),KGe=r(z3," \u2014 "),q$=n(z3,"A",{href:!0});var Q4e=s(q$);ZGe=r(Q4e,"ConvBertConfig"),Q4e.forEach(t),eOe=r(z3," (ConvBERT model)"),z3.forEach(t),oOe=i(y),Sf=n(y,"LI",{});var Q3=s(Sf);kee=n(Q3,"STRONG",{});var W4e=s(kee);rOe=r(W4e,"convnext"),W4e.forEach(t),tOe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var H4e=s(N$);aOe=r(H4e,"ConvNextConfig"),H4e.forEach(t),nOe=r(Q3," (ConvNext model)"),Q3.forEach(t),sOe=i(y),Rf=n(y,"LI",{});var W3=s(Rf);See=n(W3,"STRONG",{});var U4e=s(See);lOe=r(U4e,"ctrl"),U4e.forEach(t),iOe=r(W3," \u2014 "),j$=n(W3,"A",{href:!0});var J4e=s(j$);dOe=r(J4e,"CTRLConfig"),J4e.forEach(t),cOe=r(W3," (CTRL model)"),W3.forEach(t),fOe=i(y),Bf=n(y,"LI",{});var H3=s(Bf);Ree=n(H3,"STRONG",{});var Y4e=s(Ree);mOe=r(Y4e,"data2vec-audio"),Y4e.forEach(t),gOe=r(H3," \u2014 "),D$=n(H3,"A",{href:!0});var K4e=s(D$);hOe=r(K4e,"Data2VecAudioConfig"),K4e.forEach(t),pOe=r(H3," (Data2VecAudio model)"),H3.forEach(t),uOe=i(y),Pf=n(y,"LI",{});var U3=s(Pf);Bee=n(U3,"STRONG",{});var Z4e=s(Bee);_Oe=r(Z4e,"data2vec-text"),Z4e.forEach(t),bOe=r(U3," \u2014 "),G$=n(U3,"A",{href:!0});var eEe=s(G$);vOe=r(eEe,"Data2VecTextConfig"),eEe.forEach(t),FOe=r(U3," (Data2VecText model)"),U3.forEach(t),TOe=i(y),If=n(y,"LI",{});var J3=s(If);Pee=n(J3,"STRONG",{});var oEe=s(Pee);MOe=r(oEe,"data2vec-vision"),oEe.forEach(t),EOe=r(J3," \u2014 "),O$=n(J3,"A",{href:!0});var rEe=s(O$);COe=r(rEe,"Data2VecVisionConfig"),rEe.forEach(t),wOe=r(J3," (Data2VecVision model)"),J3.forEach(t),AOe=i(y),qf=n(y,"LI",{});var Y3=s(qf);Iee=n(Y3,"STRONG",{});var tEe=s(Iee);yOe=r(tEe,"deberta"),tEe.forEach(t),LOe=r(Y3," \u2014 "),V$=n(Y3,"A",{href:!0});var aEe=s(V$);xOe=r(aEe,"DebertaConfig"),aEe.forEach(t),$Oe=r(Y3," (DeBERTa model)"),Y3.forEach(t),kOe=i(y),Nf=n(y,"LI",{});var K3=s(Nf);qee=n(K3,"STRONG",{});var nEe=s(qee);SOe=r(nEe,"deberta-v2"),nEe.forEach(t),ROe=r(K3," \u2014 "),X$=n(K3,"A",{href:!0});var sEe=s(X$);BOe=r(sEe,"DebertaV2Config"),sEe.forEach(t),POe=r(K3," (DeBERTa-v2 model)"),K3.forEach(t),IOe=i(y),jf=n(y,"LI",{});var Z3=s(jf);Nee=n(Z3,"STRONG",{});var lEe=s(Nee);qOe=r(lEe,"decision_transformer"),lEe.forEach(t),NOe=r(Z3," \u2014 "),z$=n(Z3,"A",{href:!0});var iEe=s(z$);jOe=r(iEe,"DecisionTransformerConfig"),iEe.forEach(t),DOe=r(Z3," (Decision Transformer model)"),Z3.forEach(t),GOe=i(y),Df=n(y,"LI",{});var ew=s(Df);jee=n(ew,"STRONG",{});var dEe=s(jee);OOe=r(dEe,"deit"),dEe.forEach(t),VOe=r(ew," \u2014 "),Q$=n(ew,"A",{href:!0});var cEe=s(Q$);XOe=r(cEe,"DeiTConfig"),cEe.forEach(t),zOe=r(ew," (DeiT model)"),ew.forEach(t),QOe=i(y),Gf=n(y,"LI",{});var ow=s(Gf);Dee=n(ow,"STRONG",{});var fEe=s(Dee);WOe=r(fEe,"detr"),fEe.forEach(t),HOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var vjr=s(W$);UOe=r(vjr,"DetrConfig"),vjr.forEach(t),JOe=r(ow," (DETR model)"),ow.forEach(t),YOe=i(y),Of=n(y,"LI",{});var mEe=s(Of);Gee=n(mEe,"STRONG",{});var Fjr=s(Gee);KOe=r(Fjr,"distilbert"),Fjr.forEach(t),ZOe=r(mEe," \u2014 "),H$=n(mEe,"A",{href:!0});var Tjr=s(H$);eVe=r(Tjr,"DistilBertConfig"),Tjr.forEach(t),oVe=r(mEe," (DistilBERT model)"),mEe.forEach(t),rVe=i(y),Vf=n(y,"LI",{});var gEe=s(Vf);Oee=n(gEe,"STRONG",{});var Mjr=s(Oee);tVe=r(Mjr,"dpr"),Mjr.forEach(t),aVe=r(gEe," \u2014 "),U$=n(gEe,"A",{href:!0});var Ejr=s(U$);nVe=r(Ejr,"DPRConfig"),Ejr.forEach(t),sVe=r(gEe," (DPR model)"),gEe.forEach(t),lVe=i(y),Xf=n(y,"LI",{});var hEe=s(Xf);Vee=n(hEe,"STRONG",{});var Cjr=s(Vee);iVe=r(Cjr,"dpt"),Cjr.forEach(t),dVe=r(hEe," \u2014 "),J$=n(hEe,"A",{href:!0});var wjr=s(J$);cVe=r(wjr,"DPTConfig"),wjr.forEach(t),fVe=r(hEe," (DPT model)"),hEe.forEach(t),mVe=i(y),zf=n(y,"LI",{});var pEe=s(zf);Xee=n(pEe,"STRONG",{});var Ajr=s(Xee);gVe=r(Ajr,"electra"),Ajr.forEach(t),hVe=r(pEe," \u2014 "),Y$=n(pEe,"A",{href:!0});var yjr=s(Y$);pVe=r(yjr,"ElectraConfig"),yjr.forEach(t),uVe=r(pEe," (ELECTRA model)"),pEe.forEach(t),_Ve=i(y),Qf=n(y,"LI",{});var uEe=s(Qf);zee=n(uEe,"STRONG",{});var Ljr=s(zee);bVe=r(Ljr,"encoder-decoder"),Ljr.forEach(t),vVe=r(uEe," \u2014 "),K$=n(uEe,"A",{href:!0});var xjr=s(K$);FVe=r(xjr,"EncoderDecoderConfig"),xjr.forEach(t),TVe=r(uEe," (Encoder decoder model)"),uEe.forEach(t),MVe=i(y),Wf=n(y,"LI",{});var _Ee=s(Wf);Qee=n(_Ee,"STRONG",{});var $jr=s(Qee);EVe=r($jr,"flaubert"),$jr.forEach(t),CVe=r(_Ee," \u2014 "),Z$=n(_Ee,"A",{href:!0});var kjr=s(Z$);wVe=r(kjr,"FlaubertConfig"),kjr.forEach(t),AVe=r(_Ee," (FlauBERT model)"),_Ee.forEach(t),yVe=i(y),Hf=n(y,"LI",{});var bEe=s(Hf);Wee=n(bEe,"STRONG",{});var Sjr=s(Wee);LVe=r(Sjr,"flava"),Sjr.forEach(t),xVe=r(bEe," \u2014 "),ek=n(bEe,"A",{href:!0});var Rjr=s(ek);$Ve=r(Rjr,"FlavaConfig"),Rjr.forEach(t),kVe=r(bEe," (Flava model)"),bEe.forEach(t),SVe=i(y),Uf=n(y,"LI",{});var vEe=s(Uf);Hee=n(vEe,"STRONG",{});var Bjr=s(Hee);RVe=r(Bjr,"fnet"),Bjr.forEach(t),BVe=r(vEe," \u2014 "),ok=n(vEe,"A",{href:!0});var Pjr=s(ok);PVe=r(Pjr,"FNetConfig"),Pjr.forEach(t),IVe=r(vEe," (FNet model)"),vEe.forEach(t),qVe=i(y),Jf=n(y,"LI",{});var FEe=s(Jf);Uee=n(FEe,"STRONG",{});var Ijr=s(Uee);NVe=r(Ijr,"fsmt"),Ijr.forEach(t),jVe=r(FEe," \u2014 "),rk=n(FEe,"A",{href:!0});var qjr=s(rk);DVe=r(qjr,"FSMTConfig"),qjr.forEach(t),GVe=r(FEe," (FairSeq Machine-Translation model)"),FEe.forEach(t),OVe=i(y),Yf=n(y,"LI",{});var TEe=s(Yf);Jee=n(TEe,"STRONG",{});var Njr=s(Jee);VVe=r(Njr,"funnel"),Njr.forEach(t),XVe=r(TEe," \u2014 "),tk=n(TEe,"A",{href:!0});var jjr=s(tk);zVe=r(jjr,"FunnelConfig"),jjr.forEach(t),QVe=r(TEe," (Funnel Transformer model)"),TEe.forEach(t),WVe=i(y),Kf=n(y,"LI",{});var MEe=s(Kf);Yee=n(MEe,"STRONG",{});var Djr=s(Yee);HVe=r(Djr,"glpn"),Djr.forEach(t),UVe=r(MEe," \u2014 "),ak=n(MEe,"A",{href:!0});var Gjr=s(ak);JVe=r(Gjr,"GLPNConfig"),Gjr.forEach(t),YVe=r(MEe," (GLPN model)"),MEe.forEach(t),KVe=i(y),Zf=n(y,"LI",{});var EEe=s(Zf);Kee=n(EEe,"STRONG",{});var Ojr=s(Kee);ZVe=r(Ojr,"gpt2"),Ojr.forEach(t),eXe=r(EEe," \u2014 "),nk=n(EEe,"A",{href:!0});var Vjr=s(nk);oXe=r(Vjr,"GPT2Config"),Vjr.forEach(t),rXe=r(EEe," (OpenAI GPT-2 model)"),EEe.forEach(t),tXe=i(y),em=n(y,"LI",{});var CEe=s(em);Zee=n(CEe,"STRONG",{});var Xjr=s(Zee);aXe=r(Xjr,"gpt_neo"),Xjr.forEach(t),nXe=r(CEe," \u2014 "),sk=n(CEe,"A",{href:!0});var zjr=s(sk);sXe=r(zjr,"GPTNeoConfig"),zjr.forEach(t),lXe=r(CEe," (GPT Neo model)"),CEe.forEach(t),iXe=i(y),om=n(y,"LI",{});var wEe=s(om);eoe=n(wEe,"STRONG",{});var Qjr=s(eoe);dXe=r(Qjr,"gptj"),Qjr.forEach(t),cXe=r(wEe," \u2014 "),lk=n(wEe,"A",{href:!0});var Wjr=s(lk);fXe=r(Wjr,"GPTJConfig"),Wjr.forEach(t),mXe=r(wEe," (GPT-J model)"),wEe.forEach(t),gXe=i(y),rm=n(y,"LI",{});var AEe=s(rm);ooe=n(AEe,"STRONG",{});var Hjr=s(ooe);hXe=r(Hjr,"hubert"),Hjr.forEach(t),pXe=r(AEe," \u2014 "),ik=n(AEe,"A",{href:!0});var Ujr=s(ik);uXe=r(Ujr,"HubertConfig"),Ujr.forEach(t),_Xe=r(AEe," (Hubert model)"),AEe.forEach(t),bXe=i(y),tm=n(y,"LI",{});var yEe=s(tm);roe=n(yEe,"STRONG",{});var Jjr=s(roe);vXe=r(Jjr,"ibert"),Jjr.forEach(t),FXe=r(yEe," \u2014 "),dk=n(yEe,"A",{href:!0});var Yjr=s(dk);TXe=r(Yjr,"IBertConfig"),Yjr.forEach(t),MXe=r(yEe," (I-BERT model)"),yEe.forEach(t),EXe=i(y),am=n(y,"LI",{});var LEe=s(am);toe=n(LEe,"STRONG",{});var Kjr=s(toe);CXe=r(Kjr,"imagegpt"),Kjr.forEach(t),wXe=r(LEe," \u2014 "),ck=n(LEe,"A",{href:!0});var Zjr=s(ck);AXe=r(Zjr,"ImageGPTConfig"),Zjr.forEach(t),yXe=r(LEe," (ImageGPT model)"),LEe.forEach(t),LXe=i(y),nm=n(y,"LI",{});var xEe=s(nm);aoe=n(xEe,"STRONG",{});var eDr=s(aoe);xXe=r(eDr,"layoutlm"),eDr.forEach(t),$Xe=r(xEe," \u2014 "),fk=n(xEe,"A",{href:!0});var oDr=s(fk);kXe=r(oDr,"LayoutLMConfig"),oDr.forEach(t),SXe=r(xEe," (LayoutLM model)"),xEe.forEach(t),RXe=i(y),sm=n(y,"LI",{});var $Ee=s(sm);noe=n($Ee,"STRONG",{});var rDr=s(noe);BXe=r(rDr,"layoutlmv2"),rDr.forEach(t),PXe=r($Ee," \u2014 "),mk=n($Ee,"A",{href:!0});var tDr=s(mk);IXe=r(tDr,"LayoutLMv2Config"),tDr.forEach(t),qXe=r($Ee," (LayoutLMv2 model)"),$Ee.forEach(t),NXe=i(y),lm=n(y,"LI",{});var kEe=s(lm);soe=n(kEe,"STRONG",{});var aDr=s(soe);jXe=r(aDr,"led"),aDr.forEach(t),DXe=r(kEe," \u2014 "),gk=n(kEe,"A",{href:!0});var nDr=s(gk);GXe=r(nDr,"LEDConfig"),nDr.forEach(t),OXe=r(kEe," (LED model)"),kEe.forEach(t),VXe=i(y),im=n(y,"LI",{});var SEe=s(im);loe=n(SEe,"STRONG",{});var sDr=s(loe);XXe=r(sDr,"longformer"),sDr.forEach(t),zXe=r(SEe," \u2014 "),hk=n(SEe,"A",{href:!0});var lDr=s(hk);QXe=r(lDr,"LongformerConfig"),lDr.forEach(t),WXe=r(SEe," (Longformer model)"),SEe.forEach(t),HXe=i(y),dm=n(y,"LI",{});var REe=s(dm);ioe=n(REe,"STRONG",{});var iDr=s(ioe);UXe=r(iDr,"luke"),iDr.forEach(t),JXe=r(REe," \u2014 "),pk=n(REe,"A",{href:!0});var dDr=s(pk);YXe=r(dDr,"LukeConfig"),dDr.forEach(t),KXe=r(REe," (LUKE model)"),REe.forEach(t),ZXe=i(y),cm=n(y,"LI",{});var BEe=s(cm);doe=n(BEe,"STRONG",{});var cDr=s(doe);eze=r(cDr,"lxmert"),cDr.forEach(t),oze=r(BEe," \u2014 "),uk=n(BEe,"A",{href:!0});var fDr=s(uk);rze=r(fDr,"LxmertConfig"),fDr.forEach(t),tze=r(BEe," (LXMERT model)"),BEe.forEach(t),aze=i(y),fm=n(y,"LI",{});var PEe=s(fm);coe=n(PEe,"STRONG",{});var mDr=s(coe);nze=r(mDr,"m2m_100"),mDr.forEach(t),sze=r(PEe," \u2014 "),_k=n(PEe,"A",{href:!0});var gDr=s(_k);lze=r(gDr,"M2M100Config"),gDr.forEach(t),ize=r(PEe," (M2M100 model)"),PEe.forEach(t),dze=i(y),mm=n(y,"LI",{});var IEe=s(mm);foe=n(IEe,"STRONG",{});var hDr=s(foe);cze=r(hDr,"marian"),hDr.forEach(t),fze=r(IEe," \u2014 "),bk=n(IEe,"A",{href:!0});var pDr=s(bk);mze=r(pDr,"MarianConfig"),pDr.forEach(t),gze=r(IEe," (Marian model)"),IEe.forEach(t),hze=i(y),gm=n(y,"LI",{});var qEe=s(gm);moe=n(qEe,"STRONG",{});var uDr=s(moe);pze=r(uDr,"maskformer"),uDr.forEach(t),uze=r(qEe," \u2014 "),vk=n(qEe,"A",{href:!0});var _Dr=s(vk);_ze=r(_Dr,"MaskFormerConfig"),_Dr.forEach(t),bze=r(qEe," (MaskFormer model)"),qEe.forEach(t),vze=i(y),hm=n(y,"LI",{});var NEe=s(hm);goe=n(NEe,"STRONG",{});var bDr=s(goe);Fze=r(bDr,"mbart"),bDr.forEach(t),Tze=r(NEe," \u2014 "),Fk=n(NEe,"A",{href:!0});var vDr=s(Fk);Mze=r(vDr,"MBartConfig"),vDr.forEach(t),Eze=r(NEe," (mBART model)"),NEe.forEach(t),Cze=i(y),pm=n(y,"LI",{});var jEe=s(pm);hoe=n(jEe,"STRONG",{});var FDr=s(hoe);wze=r(FDr,"megatron-bert"),FDr.forEach(t),Aze=r(jEe," \u2014 "),Tk=n(jEe,"A",{href:!0});var TDr=s(Tk);yze=r(TDr,"MegatronBertConfig"),TDr.forEach(t),Lze=r(jEe," (MegatronBert model)"),jEe.forEach(t),xze=i(y),um=n(y,"LI",{});var DEe=s(um);poe=n(DEe,"STRONG",{});var MDr=s(poe);$ze=r(MDr,"mobilebert"),MDr.forEach(t),kze=r(DEe," \u2014 "),Mk=n(DEe,"A",{href:!0});var EDr=s(Mk);Sze=r(EDr,"MobileBertConfig"),EDr.forEach(t),Rze=r(DEe," (MobileBERT model)"),DEe.forEach(t),Bze=i(y),_m=n(y,"LI",{});var GEe=s(_m);uoe=n(GEe,"STRONG",{});var CDr=s(uoe);Pze=r(CDr,"mobilevit"),CDr.forEach(t),Ize=r(GEe," \u2014 "),Ek=n(GEe,"A",{href:!0});var wDr=s(Ek);qze=r(wDr,"MobileViTConfig"),wDr.forEach(t),Nze=r(GEe," (MobileViT model)"),GEe.forEach(t),jze=i(y),bm=n(y,"LI",{});var OEe=s(bm);_oe=n(OEe,"STRONG",{});var ADr=s(_oe);Dze=r(ADr,"mpnet"),ADr.forEach(t),Gze=r(OEe," \u2014 "),Ck=n(OEe,"A",{href:!0});var yDr=s(Ck);Oze=r(yDr,"MPNetConfig"),yDr.forEach(t),Vze=r(OEe," (MPNet model)"),OEe.forEach(t),Xze=i(y),vm=n(y,"LI",{});var VEe=s(vm);boe=n(VEe,"STRONG",{});var LDr=s(boe);zze=r(LDr,"mt5"),LDr.forEach(t),Qze=r(VEe," \u2014 "),wk=n(VEe,"A",{href:!0});var xDr=s(wk);Wze=r(xDr,"MT5Config"),xDr.forEach(t),Hze=r(VEe," (mT5 model)"),VEe.forEach(t),Uze=i(y),Fm=n(y,"LI",{});var XEe=s(Fm);voe=n(XEe,"STRONG",{});var $Dr=s(voe);Jze=r($Dr,"nystromformer"),$Dr.forEach(t),Yze=r(XEe," \u2014 "),Ak=n(XEe,"A",{href:!0});var kDr=s(Ak);Kze=r(kDr,"NystromformerConfig"),kDr.forEach(t),Zze=r(XEe," (Nystromformer model)"),XEe.forEach(t),eQe=i(y),Tm=n(y,"LI",{});var zEe=s(Tm);Foe=n(zEe,"STRONG",{});var SDr=s(Foe);oQe=r(SDr,"openai-gpt"),SDr.forEach(t),rQe=r(zEe," \u2014 "),yk=n(zEe,"A",{href:!0});var RDr=s(yk);tQe=r(RDr,"OpenAIGPTConfig"),RDr.forEach(t),aQe=r(zEe," (OpenAI GPT model)"),zEe.forEach(t),nQe=i(y),Mm=n(y,"LI",{});var QEe=s(Mm);Toe=n(QEe,"STRONG",{});var BDr=s(Toe);sQe=r(BDr,"opt"),BDr.forEach(t),lQe=r(QEe," \u2014 "),Lk=n(QEe,"A",{href:!0});var PDr=s(Lk);iQe=r(PDr,"OPTConfig"),PDr.forEach(t),dQe=r(QEe," (OPT model)"),QEe.forEach(t),cQe=i(y),Em=n(y,"LI",{});var WEe=s(Em);Moe=n(WEe,"STRONG",{});var IDr=s(Moe);fQe=r(IDr,"pegasus"),IDr.forEach(t),mQe=r(WEe," \u2014 "),xk=n(WEe,"A",{href:!0});var qDr=s(xk);gQe=r(qDr,"PegasusConfig"),qDr.forEach(t),hQe=r(WEe," (Pegasus model)"),WEe.forEach(t),pQe=i(y),Cm=n(y,"LI",{});var HEe=s(Cm);Eoe=n(HEe,"STRONG",{});var NDr=s(Eoe);uQe=r(NDr,"perceiver"),NDr.forEach(t),_Qe=r(HEe," \u2014 "),$k=n(HEe,"A",{href:!0});var jDr=s($k);bQe=r(jDr,"PerceiverConfig"),jDr.forEach(t),vQe=r(HEe," (Perceiver model)"),HEe.forEach(t),FQe=i(y),wm=n(y,"LI",{});var UEe=s(wm);Coe=n(UEe,"STRONG",{});var DDr=s(Coe);TQe=r(DDr,"plbart"),DDr.forEach(t),MQe=r(UEe," \u2014 "),kk=n(UEe,"A",{href:!0});var GDr=s(kk);EQe=r(GDr,"PLBartConfig"),GDr.forEach(t),CQe=r(UEe," (PLBart model)"),UEe.forEach(t),wQe=i(y),Am=n(y,"LI",{});var JEe=s(Am);woe=n(JEe,"STRONG",{});var ODr=s(woe);AQe=r(ODr,"poolformer"),ODr.forEach(t),yQe=r(JEe," \u2014 "),Sk=n(JEe,"A",{href:!0});var VDr=s(Sk);LQe=r(VDr,"PoolFormerConfig"),VDr.forEach(t),xQe=r(JEe," (PoolFormer model)"),JEe.forEach(t),$Qe=i(y),ym=n(y,"LI",{});var YEe=s(ym);Aoe=n(YEe,"STRONG",{});var XDr=s(Aoe);kQe=r(XDr,"prophetnet"),XDr.forEach(t),SQe=r(YEe," \u2014 "),Rk=n(YEe,"A",{href:!0});var zDr=s(Rk);RQe=r(zDr,"ProphetNetConfig"),zDr.forEach(t),BQe=r(YEe," (ProphetNet model)"),YEe.forEach(t),PQe=i(y),Lm=n(y,"LI",{});var KEe=s(Lm);yoe=n(KEe,"STRONG",{});var QDr=s(yoe);IQe=r(QDr,"qdqbert"),QDr.forEach(t),qQe=r(KEe," \u2014 "),Bk=n(KEe,"A",{href:!0});var WDr=s(Bk);NQe=r(WDr,"QDQBertConfig"),WDr.forEach(t),jQe=r(KEe," (QDQBert model)"),KEe.forEach(t),DQe=i(y),xm=n(y,"LI",{});var ZEe=s(xm);Loe=n(ZEe,"STRONG",{});var HDr=s(Loe);GQe=r(HDr,"rag"),HDr.forEach(t),OQe=r(ZEe," \u2014 "),Pk=n(ZEe,"A",{href:!0});var UDr=s(Pk);VQe=r(UDr,"RagConfig"),UDr.forEach(t),XQe=r(ZEe," (RAG model)"),ZEe.forEach(t),zQe=i(y),$m=n(y,"LI",{});var eCe=s($m);xoe=n(eCe,"STRONG",{});var JDr=s(xoe);QQe=r(JDr,"realm"),JDr.forEach(t),WQe=r(eCe," \u2014 "),Ik=n(eCe,"A",{href:!0});var YDr=s(Ik);HQe=r(YDr,"RealmConfig"),YDr.forEach(t),UQe=r(eCe," (Realm model)"),eCe.forEach(t),JQe=i(y),km=n(y,"LI",{});var oCe=s(km);$oe=n(oCe,"STRONG",{});var KDr=s($oe);YQe=r(KDr,"reformer"),KDr.forEach(t),KQe=r(oCe," \u2014 "),qk=n(oCe,"A",{href:!0});var ZDr=s(qk);ZQe=r(ZDr,"ReformerConfig"),ZDr.forEach(t),eWe=r(oCe," (Reformer model)"),oCe.forEach(t),oWe=i(y),Sm=n(y,"LI",{});var rCe=s(Sm);koe=n(rCe,"STRONG",{});var eGr=s(koe);rWe=r(eGr,"regnet"),eGr.forEach(t),tWe=r(rCe," \u2014 "),Nk=n(rCe,"A",{href:!0});var oGr=s(Nk);aWe=r(oGr,"RegNetConfig"),oGr.forEach(t),nWe=r(rCe," (RegNet model)"),rCe.forEach(t),sWe=i(y),Rm=n(y,"LI",{});var tCe=s(Rm);Soe=n(tCe,"STRONG",{});var rGr=s(Soe);lWe=r(rGr,"rembert"),rGr.forEach(t),iWe=r(tCe," \u2014 "),jk=n(tCe,"A",{href:!0});var tGr=s(jk);dWe=r(tGr,"RemBertConfig"),tGr.forEach(t),cWe=r(tCe," (RemBERT model)"),tCe.forEach(t),fWe=i(y),Bm=n(y,"LI",{});var aCe=s(Bm);Roe=n(aCe,"STRONG",{});var aGr=s(Roe);mWe=r(aGr,"resnet"),aGr.forEach(t),gWe=r(aCe," \u2014 "),Dk=n(aCe,"A",{href:!0});var nGr=s(Dk);hWe=r(nGr,"ResNetConfig"),nGr.forEach(t),pWe=r(aCe," (ResNet model)"),aCe.forEach(t),uWe=i(y),Pm=n(y,"LI",{});var nCe=s(Pm);Boe=n(nCe,"STRONG",{});var sGr=s(Boe);_We=r(sGr,"retribert"),sGr.forEach(t),bWe=r(nCe," \u2014 "),Gk=n(nCe,"A",{href:!0});var lGr=s(Gk);vWe=r(lGr,"RetriBertConfig"),lGr.forEach(t),FWe=r(nCe," (RetriBERT model)"),nCe.forEach(t),TWe=i(y),Im=n(y,"LI",{});var sCe=s(Im);Poe=n(sCe,"STRONG",{});var iGr=s(Poe);MWe=r(iGr,"roberta"),iGr.forEach(t),EWe=r(sCe," \u2014 "),Ok=n(sCe,"A",{href:!0});var dGr=s(Ok);CWe=r(dGr,"RobertaConfig"),dGr.forEach(t),wWe=r(sCe," (RoBERTa model)"),sCe.forEach(t),AWe=i(y),qm=n(y,"LI",{});var lCe=s(qm);Ioe=n(lCe,"STRONG",{});var cGr=s(Ioe);yWe=r(cGr,"roformer"),cGr.forEach(t),LWe=r(lCe," \u2014 "),Vk=n(lCe,"A",{href:!0});var fGr=s(Vk);xWe=r(fGr,"RoFormerConfig"),fGr.forEach(t),$We=r(lCe," (RoFormer model)"),lCe.forEach(t),kWe=i(y),Nm=n(y,"LI",{});var iCe=s(Nm);qoe=n(iCe,"STRONG",{});var mGr=s(qoe);SWe=r(mGr,"segformer"),mGr.forEach(t),RWe=r(iCe," \u2014 "),Xk=n(iCe,"A",{href:!0});var gGr=s(Xk);BWe=r(gGr,"SegformerConfig"),gGr.forEach(t),PWe=r(iCe," (SegFormer model)"),iCe.forEach(t),IWe=i(y),jm=n(y,"LI",{});var dCe=s(jm);Noe=n(dCe,"STRONG",{});var hGr=s(Noe);qWe=r(hGr,"sew"),hGr.forEach(t),NWe=r(dCe," \u2014 "),zk=n(dCe,"A",{href:!0});var pGr=s(zk);jWe=r(pGr,"SEWConfig"),pGr.forEach(t),DWe=r(dCe," (SEW model)"),dCe.forEach(t),GWe=i(y),Dm=n(y,"LI",{});var cCe=s(Dm);joe=n(cCe,"STRONG",{});var uGr=s(joe);OWe=r(uGr,"sew-d"),uGr.forEach(t),VWe=r(cCe," \u2014 "),Qk=n(cCe,"A",{href:!0});var _Gr=s(Qk);XWe=r(_Gr,"SEWDConfig"),_Gr.forEach(t),zWe=r(cCe," (SEW-D model)"),cCe.forEach(t),QWe=i(y),Gm=n(y,"LI",{});var fCe=s(Gm);Doe=n(fCe,"STRONG",{});var bGr=s(Doe);WWe=r(bGr,"speech-encoder-decoder"),bGr.forEach(t),HWe=r(fCe," \u2014 "),Wk=n(fCe,"A",{href:!0});var vGr=s(Wk);UWe=r(vGr,"SpeechEncoderDecoderConfig"),vGr.forEach(t),JWe=r(fCe," (Speech Encoder decoder model)"),fCe.forEach(t),YWe=i(y),Om=n(y,"LI",{});var mCe=s(Om);Goe=n(mCe,"STRONG",{});var FGr=s(Goe);KWe=r(FGr,"speech_to_text"),FGr.forEach(t),ZWe=r(mCe," \u2014 "),Hk=n(mCe,"A",{href:!0});var TGr=s(Hk);eHe=r(TGr,"Speech2TextConfig"),TGr.forEach(t),oHe=r(mCe," (Speech2Text model)"),mCe.forEach(t),rHe=i(y),Vm=n(y,"LI",{});var gCe=s(Vm);Ooe=n(gCe,"STRONG",{});var MGr=s(Ooe);tHe=r(MGr,"speech_to_text_2"),MGr.forEach(t),aHe=r(gCe," \u2014 "),Uk=n(gCe,"A",{href:!0});var EGr=s(Uk);nHe=r(EGr,"Speech2Text2Config"),EGr.forEach(t),sHe=r(gCe," (Speech2Text2 model)"),gCe.forEach(t),lHe=i(y),Xm=n(y,"LI",{});var hCe=s(Xm);Voe=n(hCe,"STRONG",{});var CGr=s(Voe);iHe=r(CGr,"splinter"),CGr.forEach(t),dHe=r(hCe," \u2014 "),Jk=n(hCe,"A",{href:!0});var wGr=s(Jk);cHe=r(wGr,"SplinterConfig"),wGr.forEach(t),fHe=r(hCe," (Splinter model)"),hCe.forEach(t),mHe=i(y),zm=n(y,"LI",{});var pCe=s(zm);Xoe=n(pCe,"STRONG",{});var AGr=s(Xoe);gHe=r(AGr,"squeezebert"),AGr.forEach(t),hHe=r(pCe," \u2014 "),Yk=n(pCe,"A",{href:!0});var yGr=s(Yk);pHe=r(yGr,"SqueezeBertConfig"),yGr.forEach(t),uHe=r(pCe," (SqueezeBERT model)"),pCe.forEach(t),_He=i(y),Qm=n(y,"LI",{});var uCe=s(Qm);zoe=n(uCe,"STRONG",{});var LGr=s(zoe);bHe=r(LGr,"swin"),LGr.forEach(t),vHe=r(uCe," \u2014 "),Kk=n(uCe,"A",{href:!0});var xGr=s(Kk);FHe=r(xGr,"SwinConfig"),xGr.forEach(t),THe=r(uCe," (Swin model)"),uCe.forEach(t),MHe=i(y),Wm=n(y,"LI",{});var _Ce=s(Wm);Qoe=n(_Ce,"STRONG",{});var $Gr=s(Qoe);EHe=r($Gr,"t5"),$Gr.forEach(t),CHe=r(_Ce," \u2014 "),Zk=n(_Ce,"A",{href:!0});var kGr=s(Zk);wHe=r(kGr,"T5Config"),kGr.forEach(t),AHe=r(_Ce," (T5 model)"),_Ce.forEach(t),yHe=i(y),Hm=n(y,"LI",{});var bCe=s(Hm);Woe=n(bCe,"STRONG",{});var SGr=s(Woe);LHe=r(SGr,"tapas"),SGr.forEach(t),xHe=r(bCe," \u2014 "),eS=n(bCe,"A",{href:!0});var RGr=s(eS);$He=r(RGr,"TapasConfig"),RGr.forEach(t),kHe=r(bCe," (TAPAS model)"),bCe.forEach(t),SHe=i(y),Um=n(y,"LI",{});var vCe=s(Um);Hoe=n(vCe,"STRONG",{});var BGr=s(Hoe);RHe=r(BGr,"tapex"),BGr.forEach(t),BHe=r(vCe," \u2014 "),oS=n(vCe,"A",{href:!0});var PGr=s(oS);PHe=r(PGr,"BartConfig"),PGr.forEach(t),IHe=r(vCe," (TAPEX model)"),vCe.forEach(t),qHe=i(y),Jm=n(y,"LI",{});var FCe=s(Jm);Uoe=n(FCe,"STRONG",{});var IGr=s(Uoe);NHe=r(IGr,"transfo-xl"),IGr.forEach(t),jHe=r(FCe," \u2014 "),rS=n(FCe,"A",{href:!0});var qGr=s(rS);DHe=r(qGr,"TransfoXLConfig"),qGr.forEach(t),GHe=r(FCe," (Transformer-XL model)"),FCe.forEach(t),OHe=i(y),Ym=n(y,"LI",{});var TCe=s(Ym);Joe=n(TCe,"STRONG",{});var NGr=s(Joe);VHe=r(NGr,"trocr"),NGr.forEach(t),XHe=r(TCe," \u2014 "),tS=n(TCe,"A",{href:!0});var jGr=s(tS);zHe=r(jGr,"TrOCRConfig"),jGr.forEach(t),QHe=r(TCe," (TrOCR model)"),TCe.forEach(t),WHe=i(y),Km=n(y,"LI",{});var MCe=s(Km);Yoe=n(MCe,"STRONG",{});var DGr=s(Yoe);HHe=r(DGr,"unispeech"),DGr.forEach(t),UHe=r(MCe," \u2014 "),aS=n(MCe,"A",{href:!0});var GGr=s(aS);JHe=r(GGr,"UniSpeechConfig"),GGr.forEach(t),YHe=r(MCe," (UniSpeech model)"),MCe.forEach(t),KHe=i(y),Zm=n(y,"LI",{});var ECe=s(Zm);Koe=n(ECe,"STRONG",{});var OGr=s(Koe);ZHe=r(OGr,"unispeech-sat"),OGr.forEach(t),eUe=r(ECe," \u2014 "),nS=n(ECe,"A",{href:!0});var VGr=s(nS);oUe=r(VGr,"UniSpeechSatConfig"),VGr.forEach(t),rUe=r(ECe," (UniSpeechSat model)"),ECe.forEach(t),tUe=i(y),eg=n(y,"LI",{});var CCe=s(eg);Zoe=n(CCe,"STRONG",{});var XGr=s(Zoe);aUe=r(XGr,"van"),XGr.forEach(t),nUe=r(CCe," \u2014 "),sS=n(CCe,"A",{href:!0});var zGr=s(sS);sUe=r(zGr,"VanConfig"),zGr.forEach(t),lUe=r(CCe," (VAN model)"),CCe.forEach(t),iUe=i(y),og=n(y,"LI",{});var wCe=s(og);ere=n(wCe,"STRONG",{});var QGr=s(ere);dUe=r(QGr,"vilt"),QGr.forEach(t),cUe=r(wCe," \u2014 "),lS=n(wCe,"A",{href:!0});var WGr=s(lS);fUe=r(WGr,"ViltConfig"),WGr.forEach(t),mUe=r(wCe," (ViLT model)"),wCe.forEach(t),gUe=i(y),rg=n(y,"LI",{});var ACe=s(rg);ore=n(ACe,"STRONG",{});var HGr=s(ore);hUe=r(HGr,"vision-encoder-decoder"),HGr.forEach(t),pUe=r(ACe," \u2014 "),iS=n(ACe,"A",{href:!0});var UGr=s(iS);uUe=r(UGr,"VisionEncoderDecoderConfig"),UGr.forEach(t),_Ue=r(ACe," (Vision Encoder decoder model)"),ACe.forEach(t),bUe=i(y),tg=n(y,"LI",{});var yCe=s(tg);rre=n(yCe,"STRONG",{});var JGr=s(rre);vUe=r(JGr,"vision-text-dual-encoder"),JGr.forEach(t),FUe=r(yCe," \u2014 "),dS=n(yCe,"A",{href:!0});var YGr=s(dS);TUe=r(YGr,"VisionTextDualEncoderConfig"),YGr.forEach(t),MUe=r(yCe," (VisionTextDualEncoder model)"),yCe.forEach(t),EUe=i(y),ag=n(y,"LI",{});var LCe=s(ag);tre=n(LCe,"STRONG",{});var KGr=s(tre);CUe=r(KGr,"visual_bert"),KGr.forEach(t),wUe=r(LCe," \u2014 "),cS=n(LCe,"A",{href:!0});var ZGr=s(cS);AUe=r(ZGr,"VisualBertConfig"),ZGr.forEach(t),yUe=r(LCe," (VisualBert model)"),LCe.forEach(t),LUe=i(y),ng=n(y,"LI",{});var xCe=s(ng);are=n(xCe,"STRONG",{});var eOr=s(are);xUe=r(eOr,"vit"),eOr.forEach(t),$Ue=r(xCe," \u2014 "),fS=n(xCe,"A",{href:!0});var oOr=s(fS);kUe=r(oOr,"ViTConfig"),oOr.forEach(t),SUe=r(xCe," (ViT model)"),xCe.forEach(t),RUe=i(y),sg=n(y,"LI",{});var $Ce=s(sg);nre=n($Ce,"STRONG",{});var rOr=s(nre);BUe=r(rOr,"vit_mae"),rOr.forEach(t),PUe=r($Ce," \u2014 "),mS=n($Ce,"A",{href:!0});var tOr=s(mS);IUe=r(tOr,"ViTMAEConfig"),tOr.forEach(t),qUe=r($Ce," (ViTMAE model)"),$Ce.forEach(t),NUe=i(y),lg=n(y,"LI",{});var kCe=s(lg);sre=n(kCe,"STRONG",{});var aOr=s(sre);jUe=r(aOr,"wav2vec2"),aOr.forEach(t),DUe=r(kCe," \u2014 "),gS=n(kCe,"A",{href:!0});var nOr=s(gS);GUe=r(nOr,"Wav2Vec2Config"),nOr.forEach(t),OUe=r(kCe," (Wav2Vec2 model)"),kCe.forEach(t),VUe=i(y),ig=n(y,"LI",{});var SCe=s(ig);lre=n(SCe,"STRONG",{});var sOr=s(lre);XUe=r(sOr,"wavlm"),sOr.forEach(t),zUe=r(SCe," \u2014 "),hS=n(SCe,"A",{href:!0});var lOr=s(hS);QUe=r(lOr,"WavLMConfig"),lOr.forEach(t),WUe=r(SCe," (WavLM model)"),SCe.forEach(t),HUe=i(y),dg=n(y,"LI",{});var RCe=s(dg);ire=n(RCe,"STRONG",{});var iOr=s(ire);UUe=r(iOr,"xglm"),iOr.forEach(t),JUe=r(RCe," \u2014 "),pS=n(RCe,"A",{href:!0});var dOr=s(pS);YUe=r(dOr,"XGLMConfig"),dOr.forEach(t),KUe=r(RCe," (XGLM model)"),RCe.forEach(t),ZUe=i(y),cg=n(y,"LI",{});var BCe=s(cg);dre=n(BCe,"STRONG",{});var cOr=s(dre);eJe=r(cOr,"xlm"),cOr.forEach(t),oJe=r(BCe," \u2014 "),uS=n(BCe,"A",{href:!0});var fOr=s(uS);rJe=r(fOr,"XLMConfig"),fOr.forEach(t),tJe=r(BCe," (XLM model)"),BCe.forEach(t),aJe=i(y),fg=n(y,"LI",{});var PCe=s(fg);cre=n(PCe,"STRONG",{});var mOr=s(cre);nJe=r(mOr,"xlm-prophetnet"),mOr.forEach(t),sJe=r(PCe," \u2014 "),_S=n(PCe,"A",{href:!0});var gOr=s(_S);lJe=r(gOr,"XLMProphetNetConfig"),gOr.forEach(t),iJe=r(PCe," (XLMProphetNet model)"),PCe.forEach(t),dJe=i(y),mg=n(y,"LI",{});var ICe=s(mg);fre=n(ICe,"STRONG",{});var hOr=s(fre);cJe=r(hOr,"xlm-roberta"),hOr.forEach(t),fJe=r(ICe," \u2014 "),bS=n(ICe,"A",{href:!0});var pOr=s(bS);mJe=r(pOr,"XLMRobertaConfig"),pOr.forEach(t),gJe=r(ICe," (XLM-RoBERTa model)"),ICe.forEach(t),hJe=i(y),gg=n(y,"LI",{});var qCe=s(gg);mre=n(qCe,"STRONG",{});var uOr=s(mre);pJe=r(uOr,"xlm-roberta-xl"),uOr.forEach(t),uJe=r(qCe," \u2014 "),vS=n(qCe,"A",{href:!0});var _Or=s(vS);_Je=r(_Or,"XLMRobertaXLConfig"),_Or.forEach(t),bJe=r(qCe," (XLM-RoBERTa-XL model)"),qCe.forEach(t),vJe=i(y),hg=n(y,"LI",{});var NCe=s(hg);gre=n(NCe,"STRONG",{});var bOr=s(gre);FJe=r(bOr,"xlnet"),bOr.forEach(t),TJe=r(NCe," \u2014 "),FS=n(NCe,"A",{href:!0});var vOr=s(FS);MJe=r(vOr,"XLNetConfig"),vOr.forEach(t),EJe=r(NCe," (XLNet model)"),NCe.forEach(t),CJe=i(y),pg=n(y,"LI",{});var jCe=s(pg);hre=n(jCe,"STRONG",{});var FOr=s(hre);wJe=r(FOr,"yolos"),FOr.forEach(t),AJe=r(jCe," \u2014 "),TS=n(jCe,"A",{href:!0});var TOr=s(TS);yJe=r(TOr,"YolosConfig"),TOr.forEach(t),LJe=r(jCe," (YOLOS model)"),jCe.forEach(t),xJe=i(y),ug=n(y,"LI",{});var DCe=s(ug);pre=n(DCe,"STRONG",{});var MOr=s(pre);$Je=r(MOr,"yoso"),MOr.forEach(t),kJe=r(DCe," \u2014 "),MS=n(DCe,"A",{href:!0});var EOr=s(MS);SJe=r(EOr,"YosoConfig"),EOr.forEach(t),RJe=r(DCe," (YOSO model)"),DCe.forEach(t),y.forEach(t),BJe=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),PJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var dNe=s(bg);T(i6.$$.fragment,dNe),IJe=i(dNe),ure=n(dNe,"P",{});var COr=s(ure);qJe=r(COr,"Register a new configuration for this class."),COr.forEach(t),dNe.forEach(t),Kr.forEach(t),mIe=i(f),_i=n(f,"H2",{class:!0});var cNe=s(_i);vg=n(cNe,"A",{id:!0,class:!0,href:!0});var wOr=s(vg);_re=n(wOr,"SPAN",{});var AOr=s(_re);T(d6.$$.fragment,AOr),AOr.forEach(t),wOr.forEach(t),NJe=i(cNe),bre=n(cNe,"SPAN",{});var yOr=s(bre);jJe=r(yOr,"AutoTokenizer"),yOr.forEach(t),cNe.forEach(t),gIe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(c6.$$.fragment,Ps),DJe=i(Ps),f6=n(Ps,"P",{});var fNe=s(f6);GJe=r(fNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ES=n(fNe,"A",{href:!0});var LOr=s(ES);OJe=r(LOr,"AutoTokenizer.from_pretrained()"),LOr.forEach(t),VJe=r(fNe," class method."),fNe.forEach(t),XJe=i(Ps),m6=n(Ps,"P",{});var mNe=s(m6);zJe=r(mNe,"This class cannot be instantiated directly using "),vre=n(mNe,"CODE",{});var xOr=s(vre);QJe=r(xOr,"__init__()"),xOr.forEach(t),WJe=r(mNe," (throws an error)."),mNe.forEach(t),HJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(g6.$$.fragment,Is),UJe=i(Is),Fre=n(Is,"P",{});var $Or=s(Fre);JJe=r($Or,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Or.forEach(t),YJe=i(Is),Ca=n(Is,"P",{});var rw=s(Ca);KJe=r(rw,"The tokenizer class to instantiate is selected based on the "),Tre=n(rw,"CODE",{});var kOr=s(Tre);ZJe=r(kOr,"model_type"),kOr.forEach(t),eYe=r(rw,` property of the config object (either
passed as an argument or loaded from `),Mre=n(rw,"CODE",{});var SOr=s(Mre);oYe=r(SOr,"pretrained_model_name_or_path"),SOr.forEach(t),rYe=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=n(rw,"CODE",{});var ROr=s(Ere);tYe=r(ROr,"pretrained_model_name_or_path"),ROr.forEach(t),aYe=r(rw,":"),rw.forEach(t),nYe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var h9=s(kn);Cre=n(h9,"STRONG",{});var BOr=s(Cre);sYe=r(BOr,"albert"),BOr.forEach(t),lYe=r(h9," \u2014 "),CS=n(h9,"A",{href:!0});var POr=s(CS);iYe=r(POr,"AlbertTokenizer"),POr.forEach(t),dYe=r(h9," or "),wS=n(h9,"A",{href:!0});var IOr=s(wS);cYe=r(IOr,"AlbertTokenizerFast"),IOr.forEach(t),fYe=r(h9," (ALBERT model)"),h9.forEach(t),mYe=i(S),Sn=n(S,"LI",{});var p9=s(Sn);wre=n(p9,"STRONG",{});var qOr=s(wre);gYe=r(qOr,"bart"),qOr.forEach(t),hYe=r(p9," \u2014 "),AS=n(p9,"A",{href:!0});var NOr=s(AS);pYe=r(NOr,"BartTokenizer"),NOr.forEach(t),uYe=r(p9," or "),yS=n(p9,"A",{href:!0});var jOr=s(yS);_Ye=r(jOr,"BartTokenizerFast"),jOr.forEach(t),bYe=r(p9," (BART model)"),p9.forEach(t),vYe=i(S),Rn=n(S,"LI",{});var u9=s(Rn);Are=n(u9,"STRONG",{});var DOr=s(Are);FYe=r(DOr,"barthez"),DOr.forEach(t),TYe=r(u9," \u2014 "),LS=n(u9,"A",{href:!0});var GOr=s(LS);MYe=r(GOr,"BarthezTokenizer"),GOr.forEach(t),EYe=r(u9," or "),xS=n(u9,"A",{href:!0});var OOr=s(xS);CYe=r(OOr,"BarthezTokenizerFast"),OOr.forEach(t),wYe=r(u9," (BARThez model)"),u9.forEach(t),AYe=i(S),Fg=n(S,"LI",{});var GCe=s(Fg);yre=n(GCe,"STRONG",{});var VOr=s(yre);yYe=r(VOr,"bartpho"),VOr.forEach(t),LYe=r(GCe," \u2014 "),$S=n(GCe,"A",{href:!0});var XOr=s($S);xYe=r(XOr,"BartphoTokenizer"),XOr.forEach(t),$Ye=r(GCe," (BARTpho model)"),GCe.forEach(t),kYe=i(S),Bn=n(S,"LI",{});var _9=s(Bn);Lre=n(_9,"STRONG",{});var zOr=s(Lre);SYe=r(zOr,"bert"),zOr.forEach(t),RYe=r(_9," \u2014 "),kS=n(_9,"A",{href:!0});var QOr=s(kS);BYe=r(QOr,"BertTokenizer"),QOr.forEach(t),PYe=r(_9," or "),SS=n(_9,"A",{href:!0});var WOr=s(SS);IYe=r(WOr,"BertTokenizerFast"),WOr.forEach(t),qYe=r(_9," (BERT model)"),_9.forEach(t),NYe=i(S),Tg=n(S,"LI",{});var OCe=s(Tg);xre=n(OCe,"STRONG",{});var HOr=s(xre);jYe=r(HOr,"bert-generation"),HOr.forEach(t),DYe=r(OCe," \u2014 "),RS=n(OCe,"A",{href:!0});var UOr=s(RS);GYe=r(UOr,"BertGenerationTokenizer"),UOr.forEach(t),OYe=r(OCe," (Bert Generation model)"),OCe.forEach(t),VYe=i(S),Mg=n(S,"LI",{});var VCe=s(Mg);$re=n(VCe,"STRONG",{});var JOr=s($re);XYe=r(JOr,"bert-japanese"),JOr.forEach(t),zYe=r(VCe," \u2014 "),BS=n(VCe,"A",{href:!0});var YOr=s(BS);QYe=r(YOr,"BertJapaneseTokenizer"),YOr.forEach(t),WYe=r(VCe," (BertJapanese model)"),VCe.forEach(t),HYe=i(S),Eg=n(S,"LI",{});var XCe=s(Eg);kre=n(XCe,"STRONG",{});var KOr=s(kre);UYe=r(KOr,"bertweet"),KOr.forEach(t),JYe=r(XCe," \u2014 "),PS=n(XCe,"A",{href:!0});var ZOr=s(PS);YYe=r(ZOr,"BertweetTokenizer"),ZOr.forEach(t),KYe=r(XCe," (Bertweet model)"),XCe.forEach(t),ZYe=i(S),Pn=n(S,"LI",{});var b9=s(Pn);Sre=n(b9,"STRONG",{});var eVr=s(Sre);eKe=r(eVr,"big_bird"),eVr.forEach(t),oKe=r(b9," \u2014 "),IS=n(b9,"A",{href:!0});var oVr=s(IS);rKe=r(oVr,"BigBirdTokenizer"),oVr.forEach(t),tKe=r(b9," or "),qS=n(b9,"A",{href:!0});var rVr=s(qS);aKe=r(rVr,"BigBirdTokenizerFast"),rVr.forEach(t),nKe=r(b9," (BigBird model)"),b9.forEach(t),sKe=i(S),In=n(S,"LI",{});var v9=s(In);Rre=n(v9,"STRONG",{});var tVr=s(Rre);lKe=r(tVr,"bigbird_pegasus"),tVr.forEach(t),iKe=r(v9," \u2014 "),NS=n(v9,"A",{href:!0});var aVr=s(NS);dKe=r(aVr,"PegasusTokenizer"),aVr.forEach(t),cKe=r(v9," or "),jS=n(v9,"A",{href:!0});var nVr=s(jS);fKe=r(nVr,"PegasusTokenizerFast"),nVr.forEach(t),mKe=r(v9," (BigBirdPegasus model)"),v9.forEach(t),gKe=i(S),qn=n(S,"LI",{});var F9=s(qn);Bre=n(F9,"STRONG",{});var sVr=s(Bre);hKe=r(sVr,"blenderbot"),sVr.forEach(t),pKe=r(F9," \u2014 "),DS=n(F9,"A",{href:!0});var lVr=s(DS);uKe=r(lVr,"BlenderbotTokenizer"),lVr.forEach(t),_Ke=r(F9," or "),GS=n(F9,"A",{href:!0});var iVr=s(GS);bKe=r(iVr,"BlenderbotTokenizerFast"),iVr.forEach(t),vKe=r(F9," (Blenderbot model)"),F9.forEach(t),FKe=i(S),Cg=n(S,"LI",{});var zCe=s(Cg);Pre=n(zCe,"STRONG",{});var dVr=s(Pre);TKe=r(dVr,"blenderbot-small"),dVr.forEach(t),MKe=r(zCe," \u2014 "),OS=n(zCe,"A",{href:!0});var cVr=s(OS);EKe=r(cVr,"BlenderbotSmallTokenizer"),cVr.forEach(t),CKe=r(zCe," (BlenderbotSmall model)"),zCe.forEach(t),wKe=i(S),wg=n(S,"LI",{});var QCe=s(wg);Ire=n(QCe,"STRONG",{});var fVr=s(Ire);AKe=r(fVr,"byt5"),fVr.forEach(t),yKe=r(QCe," \u2014 "),VS=n(QCe,"A",{href:!0});var mVr=s(VS);LKe=r(mVr,"ByT5Tokenizer"),mVr.forEach(t),xKe=r(QCe," (ByT5 model)"),QCe.forEach(t),$Ke=i(S),Nn=n(S,"LI",{});var T9=s(Nn);qre=n(T9,"STRONG",{});var gVr=s(qre);kKe=r(gVr,"camembert"),gVr.forEach(t),SKe=r(T9," \u2014 "),XS=n(T9,"A",{href:!0});var hVr=s(XS);RKe=r(hVr,"CamembertTokenizer"),hVr.forEach(t),BKe=r(T9," or "),zS=n(T9,"A",{href:!0});var pVr=s(zS);PKe=r(pVr,"CamembertTokenizerFast"),pVr.forEach(t),IKe=r(T9," (CamemBERT model)"),T9.forEach(t),qKe=i(S),Ag=n(S,"LI",{});var WCe=s(Ag);Nre=n(WCe,"STRONG",{});var uVr=s(Nre);NKe=r(uVr,"canine"),uVr.forEach(t),jKe=r(WCe," \u2014 "),QS=n(WCe,"A",{href:!0});var _Vr=s(QS);DKe=r(_Vr,"CanineTokenizer"),_Vr.forEach(t),GKe=r(WCe," (Canine model)"),WCe.forEach(t),OKe=i(S),jn=n(S,"LI",{});var M9=s(jn);jre=n(M9,"STRONG",{});var bVr=s(jre);VKe=r(bVr,"clip"),bVr.forEach(t),XKe=r(M9," \u2014 "),WS=n(M9,"A",{href:!0});var vVr=s(WS);zKe=r(vVr,"CLIPTokenizer"),vVr.forEach(t),QKe=r(M9," or "),HS=n(M9,"A",{href:!0});var FVr=s(HS);WKe=r(FVr,"CLIPTokenizerFast"),FVr.forEach(t),HKe=r(M9," (CLIP model)"),M9.forEach(t),UKe=i(S),Dn=n(S,"LI",{});var E9=s(Dn);Dre=n(E9,"STRONG",{});var TVr=s(Dre);JKe=r(TVr,"convbert"),TVr.forEach(t),YKe=r(E9," \u2014 "),US=n(E9,"A",{href:!0});var MVr=s(US);KKe=r(MVr,"ConvBertTokenizer"),MVr.forEach(t),ZKe=r(E9," or "),JS=n(E9,"A",{href:!0});var EVr=s(JS);eZe=r(EVr,"ConvBertTokenizerFast"),EVr.forEach(t),oZe=r(E9," (ConvBERT model)"),E9.forEach(t),rZe=i(S),Gn=n(S,"LI",{});var C9=s(Gn);Gre=n(C9,"STRONG",{});var CVr=s(Gre);tZe=r(CVr,"cpm"),CVr.forEach(t),aZe=r(C9," \u2014 "),YS=n(C9,"A",{href:!0});var wVr=s(YS);nZe=r(wVr,"CpmTokenizer"),wVr.forEach(t),sZe=r(C9," or "),KS=n(C9,"A",{href:!0});var AVr=s(KS);lZe=r(AVr,"CpmTokenizerFast"),AVr.forEach(t),iZe=r(C9," (CPM model)"),C9.forEach(t),dZe=i(S),yg=n(S,"LI",{});var HCe=s(yg);Ore=n(HCe,"STRONG",{});var yVr=s(Ore);cZe=r(yVr,"ctrl"),yVr.forEach(t),fZe=r(HCe," \u2014 "),ZS=n(HCe,"A",{href:!0});var LVr=s(ZS);mZe=r(LVr,"CTRLTokenizer"),LVr.forEach(t),gZe=r(HCe," (CTRL model)"),HCe.forEach(t),hZe=i(S),On=n(S,"LI",{});var w9=s(On);Vre=n(w9,"STRONG",{});var xVr=s(Vre);pZe=r(xVr,"data2vec-text"),xVr.forEach(t),uZe=r(w9," \u2014 "),eR=n(w9,"A",{href:!0});var $Vr=s(eR);_Ze=r($Vr,"RobertaTokenizer"),$Vr.forEach(t),bZe=r(w9," or "),oR=n(w9,"A",{href:!0});var kVr=s(oR);vZe=r(kVr,"RobertaTokenizerFast"),kVr.forEach(t),FZe=r(w9," (Data2VecText model)"),w9.forEach(t),TZe=i(S),Vn=n(S,"LI",{});var A9=s(Vn);Xre=n(A9,"STRONG",{});var SVr=s(Xre);MZe=r(SVr,"deberta"),SVr.forEach(t),EZe=r(A9," \u2014 "),rR=n(A9,"A",{href:!0});var RVr=s(rR);CZe=r(RVr,"DebertaTokenizer"),RVr.forEach(t),wZe=r(A9," or "),tR=n(A9,"A",{href:!0});var BVr=s(tR);AZe=r(BVr,"DebertaTokenizerFast"),BVr.forEach(t),yZe=r(A9," (DeBERTa model)"),A9.forEach(t),LZe=i(S),Xn=n(S,"LI",{});var y9=s(Xn);zre=n(y9,"STRONG",{});var PVr=s(zre);xZe=r(PVr,"deberta-v2"),PVr.forEach(t),$Ze=r(y9," \u2014 "),aR=n(y9,"A",{href:!0});var IVr=s(aR);kZe=r(IVr,"DebertaV2Tokenizer"),IVr.forEach(t),SZe=r(y9," or "),nR=n(y9,"A",{href:!0});var qVr=s(nR);RZe=r(qVr,"DebertaV2TokenizerFast"),qVr.forEach(t),BZe=r(y9," (DeBERTa-v2 model)"),y9.forEach(t),PZe=i(S),zn=n(S,"LI",{});var L9=s(zn);Qre=n(L9,"STRONG",{});var NVr=s(Qre);IZe=r(NVr,"distilbert"),NVr.forEach(t),qZe=r(L9," \u2014 "),sR=n(L9,"A",{href:!0});var jVr=s(sR);NZe=r(jVr,"DistilBertTokenizer"),jVr.forEach(t),jZe=r(L9," or "),lR=n(L9,"A",{href:!0});var DVr=s(lR);DZe=r(DVr,"DistilBertTokenizerFast"),DVr.forEach(t),GZe=r(L9," (DistilBERT model)"),L9.forEach(t),OZe=i(S),Qn=n(S,"LI",{});var x9=s(Qn);Wre=n(x9,"STRONG",{});var GVr=s(Wre);VZe=r(GVr,"dpr"),GVr.forEach(t),XZe=r(x9," \u2014 "),iR=n(x9,"A",{href:!0});var OVr=s(iR);zZe=r(OVr,"DPRQuestionEncoderTokenizer"),OVr.forEach(t),QZe=r(x9," or "),dR=n(x9,"A",{href:!0});var VVr=s(dR);WZe=r(VVr,"DPRQuestionEncoderTokenizerFast"),VVr.forEach(t),HZe=r(x9," (DPR model)"),x9.forEach(t),UZe=i(S),Wn=n(S,"LI",{});var $9=s(Wn);Hre=n($9,"STRONG",{});var XVr=s(Hre);JZe=r(XVr,"electra"),XVr.forEach(t),YZe=r($9," \u2014 "),cR=n($9,"A",{href:!0});var zVr=s(cR);KZe=r(zVr,"ElectraTokenizer"),zVr.forEach(t),ZZe=r($9," or "),fR=n($9,"A",{href:!0});var QVr=s(fR);eeo=r(QVr,"ElectraTokenizerFast"),QVr.forEach(t),oeo=r($9," (ELECTRA model)"),$9.forEach(t),reo=i(S),Lg=n(S,"LI",{});var UCe=s(Lg);Ure=n(UCe,"STRONG",{});var WVr=s(Ure);teo=r(WVr,"flaubert"),WVr.forEach(t),aeo=r(UCe," \u2014 "),mR=n(UCe,"A",{href:!0});var HVr=s(mR);neo=r(HVr,"FlaubertTokenizer"),HVr.forEach(t),seo=r(UCe," (FlauBERT model)"),UCe.forEach(t),leo=i(S),Hn=n(S,"LI",{});var k9=s(Hn);Jre=n(k9,"STRONG",{});var UVr=s(Jre);ieo=r(UVr,"fnet"),UVr.forEach(t),deo=r(k9," \u2014 "),gR=n(k9,"A",{href:!0});var JVr=s(gR);ceo=r(JVr,"FNetTokenizer"),JVr.forEach(t),feo=r(k9," or "),hR=n(k9,"A",{href:!0});var YVr=s(hR);meo=r(YVr,"FNetTokenizerFast"),YVr.forEach(t),geo=r(k9," (FNet model)"),k9.forEach(t),heo=i(S),xg=n(S,"LI",{});var JCe=s(xg);Yre=n(JCe,"STRONG",{});var KVr=s(Yre);peo=r(KVr,"fsmt"),KVr.forEach(t),ueo=r(JCe," \u2014 "),pR=n(JCe,"A",{href:!0});var ZVr=s(pR);_eo=r(ZVr,"FSMTTokenizer"),ZVr.forEach(t),beo=r(JCe," (FairSeq Machine-Translation model)"),JCe.forEach(t),veo=i(S),Un=n(S,"LI",{});var S9=s(Un);Kre=n(S9,"STRONG",{});var eXr=s(Kre);Feo=r(eXr,"funnel"),eXr.forEach(t),Teo=r(S9," \u2014 "),uR=n(S9,"A",{href:!0});var oXr=s(uR);Meo=r(oXr,"FunnelTokenizer"),oXr.forEach(t),Eeo=r(S9," or "),_R=n(S9,"A",{href:!0});var rXr=s(_R);Ceo=r(rXr,"FunnelTokenizerFast"),rXr.forEach(t),weo=r(S9," (Funnel Transformer model)"),S9.forEach(t),Aeo=i(S),Jn=n(S,"LI",{});var R9=s(Jn);Zre=n(R9,"STRONG",{});var tXr=s(Zre);yeo=r(tXr,"gpt2"),tXr.forEach(t),Leo=r(R9," \u2014 "),bR=n(R9,"A",{href:!0});var aXr=s(bR);xeo=r(aXr,"GPT2Tokenizer"),aXr.forEach(t),$eo=r(R9," or "),vR=n(R9,"A",{href:!0});var nXr=s(vR);keo=r(nXr,"GPT2TokenizerFast"),nXr.forEach(t),Seo=r(R9," (OpenAI GPT-2 model)"),R9.forEach(t),Reo=i(S),Yn=n(S,"LI",{});var B9=s(Yn);ete=n(B9,"STRONG",{});var sXr=s(ete);Beo=r(sXr,"gpt_neo"),sXr.forEach(t),Peo=r(B9," \u2014 "),FR=n(B9,"A",{href:!0});var lXr=s(FR);Ieo=r(lXr,"GPT2Tokenizer"),lXr.forEach(t),qeo=r(B9," or "),TR=n(B9,"A",{href:!0});var iXr=s(TR);Neo=r(iXr,"GPT2TokenizerFast"),iXr.forEach(t),jeo=r(B9," (GPT Neo model)"),B9.forEach(t),Deo=i(S),Kn=n(S,"LI",{});var P9=s(Kn);ote=n(P9,"STRONG",{});var dXr=s(ote);Geo=r(dXr,"gptj"),dXr.forEach(t),Oeo=r(P9," \u2014 "),MR=n(P9,"A",{href:!0});var cXr=s(MR);Veo=r(cXr,"GPT2Tokenizer"),cXr.forEach(t),Xeo=r(P9," or "),ER=n(P9,"A",{href:!0});var fXr=s(ER);zeo=r(fXr,"GPT2TokenizerFast"),fXr.forEach(t),Qeo=r(P9," (GPT-J model)"),P9.forEach(t),Weo=i(S),Zn=n(S,"LI",{});var I9=s(Zn);rte=n(I9,"STRONG",{});var mXr=s(rte);Heo=r(mXr,"herbert"),mXr.forEach(t),Ueo=r(I9," \u2014 "),CR=n(I9,"A",{href:!0});var gXr=s(CR);Jeo=r(gXr,"HerbertTokenizer"),gXr.forEach(t),Yeo=r(I9," or "),wR=n(I9,"A",{href:!0});var hXr=s(wR);Keo=r(hXr,"HerbertTokenizerFast"),hXr.forEach(t),Zeo=r(I9," (HerBERT model)"),I9.forEach(t),eoo=i(S),$g=n(S,"LI",{});var YCe=s($g);tte=n(YCe,"STRONG",{});var pXr=s(tte);ooo=r(pXr,"hubert"),pXr.forEach(t),roo=r(YCe," \u2014 "),AR=n(YCe,"A",{href:!0});var uXr=s(AR);too=r(uXr,"Wav2Vec2CTCTokenizer"),uXr.forEach(t),aoo=r(YCe," (Hubert model)"),YCe.forEach(t),noo=i(S),es=n(S,"LI",{});var q9=s(es);ate=n(q9,"STRONG",{});var _Xr=s(ate);soo=r(_Xr,"ibert"),_Xr.forEach(t),loo=r(q9," \u2014 "),yR=n(q9,"A",{href:!0});var bXr=s(yR);ioo=r(bXr,"RobertaTokenizer"),bXr.forEach(t),doo=r(q9," or "),LR=n(q9,"A",{href:!0});var vXr=s(LR);coo=r(vXr,"RobertaTokenizerFast"),vXr.forEach(t),foo=r(q9," (I-BERT model)"),q9.forEach(t),moo=i(S),os=n(S,"LI",{});var N9=s(os);nte=n(N9,"STRONG",{});var FXr=s(nte);goo=r(FXr,"layoutlm"),FXr.forEach(t),hoo=r(N9," \u2014 "),xR=n(N9,"A",{href:!0});var TXr=s(xR);poo=r(TXr,"LayoutLMTokenizer"),TXr.forEach(t),uoo=r(N9," or "),$R=n(N9,"A",{href:!0});var MXr=s($R);_oo=r(MXr,"LayoutLMTokenizerFast"),MXr.forEach(t),boo=r(N9," (LayoutLM model)"),N9.forEach(t),voo=i(S),rs=n(S,"LI",{});var j9=s(rs);ste=n(j9,"STRONG",{});var EXr=s(ste);Foo=r(EXr,"layoutlmv2"),EXr.forEach(t),Too=r(j9," \u2014 "),kR=n(j9,"A",{href:!0});var CXr=s(kR);Moo=r(CXr,"LayoutLMv2Tokenizer"),CXr.forEach(t),Eoo=r(j9," or "),SR=n(j9,"A",{href:!0});var wXr=s(SR);Coo=r(wXr,"LayoutLMv2TokenizerFast"),wXr.forEach(t),woo=r(j9," (LayoutLMv2 model)"),j9.forEach(t),Aoo=i(S),ts=n(S,"LI",{});var D9=s(ts);lte=n(D9,"STRONG",{});var AXr=s(lte);yoo=r(AXr,"layoutxlm"),AXr.forEach(t),Loo=r(D9," \u2014 "),RR=n(D9,"A",{href:!0});var yXr=s(RR);xoo=r(yXr,"LayoutXLMTokenizer"),yXr.forEach(t),$oo=r(D9," or "),BR=n(D9,"A",{href:!0});var LXr=s(BR);koo=r(LXr,"LayoutXLMTokenizerFast"),LXr.forEach(t),Soo=r(D9," (LayoutXLM model)"),D9.forEach(t),Roo=i(S),as=n(S,"LI",{});var G9=s(as);ite=n(G9,"STRONG",{});var xXr=s(ite);Boo=r(xXr,"led"),xXr.forEach(t),Poo=r(G9," \u2014 "),PR=n(G9,"A",{href:!0});var $Xr=s(PR);Ioo=r($Xr,"LEDTokenizer"),$Xr.forEach(t),qoo=r(G9," or "),IR=n(G9,"A",{href:!0});var kXr=s(IR);Noo=r(kXr,"LEDTokenizerFast"),kXr.forEach(t),joo=r(G9," (LED model)"),G9.forEach(t),Doo=i(S),ns=n(S,"LI",{});var O9=s(ns);dte=n(O9,"STRONG",{});var SXr=s(dte);Goo=r(SXr,"longformer"),SXr.forEach(t),Ooo=r(O9," \u2014 "),qR=n(O9,"A",{href:!0});var RXr=s(qR);Voo=r(RXr,"LongformerTokenizer"),RXr.forEach(t),Xoo=r(O9," or "),NR=n(O9,"A",{href:!0});var BXr=s(NR);zoo=r(BXr,"LongformerTokenizerFast"),BXr.forEach(t),Qoo=r(O9," (Longformer model)"),O9.forEach(t),Woo=i(S),kg=n(S,"LI",{});var KCe=s(kg);cte=n(KCe,"STRONG",{});var PXr=s(cte);Hoo=r(PXr,"luke"),PXr.forEach(t),Uoo=r(KCe," \u2014 "),jR=n(KCe,"A",{href:!0});var IXr=s(jR);Joo=r(IXr,"LukeTokenizer"),IXr.forEach(t),Yoo=r(KCe," (LUKE model)"),KCe.forEach(t),Koo=i(S),ss=n(S,"LI",{});var V9=s(ss);fte=n(V9,"STRONG",{});var qXr=s(fte);Zoo=r(qXr,"lxmert"),qXr.forEach(t),ero=r(V9," \u2014 "),DR=n(V9,"A",{href:!0});var NXr=s(DR);oro=r(NXr,"LxmertTokenizer"),NXr.forEach(t),rro=r(V9," or "),GR=n(V9,"A",{href:!0});var jXr=s(GR);tro=r(jXr,"LxmertTokenizerFast"),jXr.forEach(t),aro=r(V9," (LXMERT model)"),V9.forEach(t),nro=i(S),Sg=n(S,"LI",{});var ZCe=s(Sg);mte=n(ZCe,"STRONG",{});var DXr=s(mte);sro=r(DXr,"m2m_100"),DXr.forEach(t),lro=r(ZCe," \u2014 "),OR=n(ZCe,"A",{href:!0});var GXr=s(OR);iro=r(GXr,"M2M100Tokenizer"),GXr.forEach(t),dro=r(ZCe," (M2M100 model)"),ZCe.forEach(t),cro=i(S),Rg=n(S,"LI",{});var e3e=s(Rg);gte=n(e3e,"STRONG",{});var OXr=s(gte);fro=r(OXr,"marian"),OXr.forEach(t),mro=r(e3e," \u2014 "),VR=n(e3e,"A",{href:!0});var VXr=s(VR);gro=r(VXr,"MarianTokenizer"),VXr.forEach(t),hro=r(e3e," (Marian model)"),e3e.forEach(t),pro=i(S),ls=n(S,"LI",{});var X9=s(ls);hte=n(X9,"STRONG",{});var XXr=s(hte);uro=r(XXr,"mbart"),XXr.forEach(t),_ro=r(X9," \u2014 "),XR=n(X9,"A",{href:!0});var zXr=s(XR);bro=r(zXr,"MBartTokenizer"),zXr.forEach(t),vro=r(X9," or "),zR=n(X9,"A",{href:!0});var QXr=s(zR);Fro=r(QXr,"MBartTokenizerFast"),QXr.forEach(t),Tro=r(X9," (mBART model)"),X9.forEach(t),Mro=i(S),is=n(S,"LI",{});var z9=s(is);pte=n(z9,"STRONG",{});var WXr=s(pte);Ero=r(WXr,"mbart50"),WXr.forEach(t),Cro=r(z9," \u2014 "),QR=n(z9,"A",{href:!0});var HXr=s(QR);wro=r(HXr,"MBart50Tokenizer"),HXr.forEach(t),Aro=r(z9," or "),WR=n(z9,"A",{href:!0});var UXr=s(WR);yro=r(UXr,"MBart50TokenizerFast"),UXr.forEach(t),Lro=r(z9," (mBART-50 model)"),z9.forEach(t),xro=i(S),ds=n(S,"LI",{});var Q9=s(ds);ute=n(Q9,"STRONG",{});var JXr=s(ute);$ro=r(JXr,"megatron-bert"),JXr.forEach(t),kro=r(Q9," \u2014 "),HR=n(Q9,"A",{href:!0});var YXr=s(HR);Sro=r(YXr,"BertTokenizer"),YXr.forEach(t),Rro=r(Q9," or "),UR=n(Q9,"A",{href:!0});var KXr=s(UR);Bro=r(KXr,"BertTokenizerFast"),KXr.forEach(t),Pro=r(Q9," (MegatronBert model)"),Q9.forEach(t),Iro=i(S),Bg=n(S,"LI",{});var o3e=s(Bg);_te=n(o3e,"STRONG",{});var ZXr=s(_te);qro=r(ZXr,"mluke"),ZXr.forEach(t),Nro=r(o3e," \u2014 "),JR=n(o3e,"A",{href:!0});var ezr=s(JR);jro=r(ezr,"MLukeTokenizer"),ezr.forEach(t),Dro=r(o3e," (mLUKE model)"),o3e.forEach(t),Gro=i(S),cs=n(S,"LI",{});var W9=s(cs);bte=n(W9,"STRONG",{});var ozr=s(bte);Oro=r(ozr,"mobilebert"),ozr.forEach(t),Vro=r(W9," \u2014 "),YR=n(W9,"A",{href:!0});var rzr=s(YR);Xro=r(rzr,"MobileBertTokenizer"),rzr.forEach(t),zro=r(W9," or "),KR=n(W9,"A",{href:!0});var tzr=s(KR);Qro=r(tzr,"MobileBertTokenizerFast"),tzr.forEach(t),Wro=r(W9," (MobileBERT model)"),W9.forEach(t),Hro=i(S),fs=n(S,"LI",{});var H9=s(fs);vte=n(H9,"STRONG",{});var azr=s(vte);Uro=r(azr,"mpnet"),azr.forEach(t),Jro=r(H9," \u2014 "),ZR=n(H9,"A",{href:!0});var nzr=s(ZR);Yro=r(nzr,"MPNetTokenizer"),nzr.forEach(t),Kro=r(H9," or "),eB=n(H9,"A",{href:!0});var szr=s(eB);Zro=r(szr,"MPNetTokenizerFast"),szr.forEach(t),eto=r(H9," (MPNet model)"),H9.forEach(t),oto=i(S),ms=n(S,"LI",{});var U9=s(ms);Fte=n(U9,"STRONG",{});var lzr=s(Fte);rto=r(lzr,"mt5"),lzr.forEach(t),tto=r(U9," \u2014 "),oB=n(U9,"A",{href:!0});var izr=s(oB);ato=r(izr,"MT5Tokenizer"),izr.forEach(t),nto=r(U9," or "),rB=n(U9,"A",{href:!0});var dzr=s(rB);sto=r(dzr,"MT5TokenizerFast"),dzr.forEach(t),lto=r(U9," (mT5 model)"),U9.forEach(t),ito=i(S),gs=n(S,"LI",{});var J9=s(gs);Tte=n(J9,"STRONG",{});var czr=s(Tte);dto=r(czr,"nystromformer"),czr.forEach(t),cto=r(J9," \u2014 "),tB=n(J9,"A",{href:!0});var fzr=s(tB);fto=r(fzr,"AlbertTokenizer"),fzr.forEach(t),mto=r(J9," or "),aB=n(J9,"A",{href:!0});var mzr=s(aB);gto=r(mzr,"AlbertTokenizerFast"),mzr.forEach(t),hto=r(J9," (Nystromformer model)"),J9.forEach(t),pto=i(S),hs=n(S,"LI",{});var Y9=s(hs);Mte=n(Y9,"STRONG",{});var gzr=s(Mte);uto=r(gzr,"openai-gpt"),gzr.forEach(t),_to=r(Y9," \u2014 "),nB=n(Y9,"A",{href:!0});var hzr=s(nB);bto=r(hzr,"OpenAIGPTTokenizer"),hzr.forEach(t),vto=r(Y9," or "),sB=n(Y9,"A",{href:!0});var pzr=s(sB);Fto=r(pzr,"OpenAIGPTTokenizerFast"),pzr.forEach(t),Tto=r(Y9," (OpenAI GPT model)"),Y9.forEach(t),Mto=i(S),Pg=n(S,"LI",{});var r3e=s(Pg);Ete=n(r3e,"STRONG",{});var uzr=s(Ete);Eto=r(uzr,"opt"),uzr.forEach(t),Cto=r(r3e," \u2014 "),lB=n(r3e,"A",{href:!0});var _zr=s(lB);wto=r(_zr,"GPT2Tokenizer"),_zr.forEach(t),Ato=r(r3e," (OPT model)"),r3e.forEach(t),yto=i(S),ps=n(S,"LI",{});var K9=s(ps);Cte=n(K9,"STRONG",{});var bzr=s(Cte);Lto=r(bzr,"pegasus"),bzr.forEach(t),xto=r(K9," \u2014 "),iB=n(K9,"A",{href:!0});var vzr=s(iB);$to=r(vzr,"PegasusTokenizer"),vzr.forEach(t),kto=r(K9," or "),dB=n(K9,"A",{href:!0});var Fzr=s(dB);Sto=r(Fzr,"PegasusTokenizerFast"),Fzr.forEach(t),Rto=r(K9," (Pegasus model)"),K9.forEach(t),Bto=i(S),Ig=n(S,"LI",{});var t3e=s(Ig);wte=n(t3e,"STRONG",{});var Tzr=s(wte);Pto=r(Tzr,"perceiver"),Tzr.forEach(t),Ito=r(t3e," \u2014 "),cB=n(t3e,"A",{href:!0});var Mzr=s(cB);qto=r(Mzr,"PerceiverTokenizer"),Mzr.forEach(t),Nto=r(t3e," (Perceiver model)"),t3e.forEach(t),jto=i(S),qg=n(S,"LI",{});var a3e=s(qg);Ate=n(a3e,"STRONG",{});var Ezr=s(Ate);Dto=r(Ezr,"phobert"),Ezr.forEach(t),Gto=r(a3e," \u2014 "),fB=n(a3e,"A",{href:!0});var Czr=s(fB);Oto=r(Czr,"PhobertTokenizer"),Czr.forEach(t),Vto=r(a3e," (PhoBERT model)"),a3e.forEach(t),Xto=i(S),Ng=n(S,"LI",{});var n3e=s(Ng);yte=n(n3e,"STRONG",{});var wzr=s(yte);zto=r(wzr,"plbart"),wzr.forEach(t),Qto=r(n3e," \u2014 "),mB=n(n3e,"A",{href:!0});var Azr=s(mB);Wto=r(Azr,"PLBartTokenizer"),Azr.forEach(t),Hto=r(n3e," (PLBart model)"),n3e.forEach(t),Uto=i(S),jg=n(S,"LI",{});var s3e=s(jg);Lte=n(s3e,"STRONG",{});var yzr=s(Lte);Jto=r(yzr,"prophetnet"),yzr.forEach(t),Yto=r(s3e," \u2014 "),gB=n(s3e,"A",{href:!0});var Lzr=s(gB);Kto=r(Lzr,"ProphetNetTokenizer"),Lzr.forEach(t),Zto=r(s3e," (ProphetNet model)"),s3e.forEach(t),eao=i(S),us=n(S,"LI",{});var Z9=s(us);xte=n(Z9,"STRONG",{});var xzr=s(xte);oao=r(xzr,"qdqbert"),xzr.forEach(t),rao=r(Z9," \u2014 "),hB=n(Z9,"A",{href:!0});var $zr=s(hB);tao=r($zr,"BertTokenizer"),$zr.forEach(t),aao=r(Z9," or "),pB=n(Z9,"A",{href:!0});var kzr=s(pB);nao=r(kzr,"BertTokenizerFast"),kzr.forEach(t),sao=r(Z9," (QDQBert model)"),Z9.forEach(t),lao=i(S),Dg=n(S,"LI",{});var l3e=s(Dg);$te=n(l3e,"STRONG",{});var Szr=s($te);iao=r(Szr,"rag"),Szr.forEach(t),dao=r(l3e," \u2014 "),uB=n(l3e,"A",{href:!0});var Rzr=s(uB);cao=r(Rzr,"RagTokenizer"),Rzr.forEach(t),fao=r(l3e," (RAG model)"),l3e.forEach(t),mao=i(S),_s=n(S,"LI",{});var e$=s(_s);kte=n(e$,"STRONG",{});var Bzr=s(kte);gao=r(Bzr,"realm"),Bzr.forEach(t),hao=r(e$," \u2014 "),_B=n(e$,"A",{href:!0});var Pzr=s(_B);pao=r(Pzr,"RealmTokenizer"),Pzr.forEach(t),uao=r(e$," or "),bB=n(e$,"A",{href:!0});var Izr=s(bB);_ao=r(Izr,"RealmTokenizerFast"),Izr.forEach(t),bao=r(e$," (Realm model)"),e$.forEach(t),vao=i(S),bs=n(S,"LI",{});var o$=s(bs);Ste=n(o$,"STRONG",{});var qzr=s(Ste);Fao=r(qzr,"reformer"),qzr.forEach(t),Tao=r(o$," \u2014 "),vB=n(o$,"A",{href:!0});var Nzr=s(vB);Mao=r(Nzr,"ReformerTokenizer"),Nzr.forEach(t),Eao=r(o$," or "),FB=n(o$,"A",{href:!0});var jzr=s(FB);Cao=r(jzr,"ReformerTokenizerFast"),jzr.forEach(t),wao=r(o$," (Reformer model)"),o$.forEach(t),Aao=i(S),vs=n(S,"LI",{});var r$=s(vs);Rte=n(r$,"STRONG",{});var Dzr=s(Rte);yao=r(Dzr,"rembert"),Dzr.forEach(t),Lao=r(r$," \u2014 "),TB=n(r$,"A",{href:!0});var Gzr=s(TB);xao=r(Gzr,"RemBertTokenizer"),Gzr.forEach(t),$ao=r(r$," or "),MB=n(r$,"A",{href:!0});var Ozr=s(MB);kao=r(Ozr,"RemBertTokenizerFast"),Ozr.forEach(t),Sao=r(r$," (RemBERT model)"),r$.forEach(t),Rao=i(S),Fs=n(S,"LI",{});var t$=s(Fs);Bte=n(t$,"STRONG",{});var Vzr=s(Bte);Bao=r(Vzr,"retribert"),Vzr.forEach(t),Pao=r(t$," \u2014 "),EB=n(t$,"A",{href:!0});var Xzr=s(EB);Iao=r(Xzr,"RetriBertTokenizer"),Xzr.forEach(t),qao=r(t$," or "),CB=n(t$,"A",{href:!0});var zzr=s(CB);Nao=r(zzr,"RetriBertTokenizerFast"),zzr.forEach(t),jao=r(t$," (RetriBERT model)"),t$.forEach(t),Dao=i(S),Ts=n(S,"LI",{});var a$=s(Ts);Pte=n(a$,"STRONG",{});var Qzr=s(Pte);Gao=r(Qzr,"roberta"),Qzr.forEach(t),Oao=r(a$," \u2014 "),wB=n(a$,"A",{href:!0});var Wzr=s(wB);Vao=r(Wzr,"RobertaTokenizer"),Wzr.forEach(t),Xao=r(a$," or "),AB=n(a$,"A",{href:!0});var Hzr=s(AB);zao=r(Hzr,"RobertaTokenizerFast"),Hzr.forEach(t),Qao=r(a$," (RoBERTa model)"),a$.forEach(t),Wao=i(S),Ms=n(S,"LI",{});var n$=s(Ms);Ite=n(n$,"STRONG",{});var Uzr=s(Ite);Hao=r(Uzr,"roformer"),Uzr.forEach(t),Uao=r(n$," \u2014 "),yB=n(n$,"A",{href:!0});var Jzr=s(yB);Jao=r(Jzr,"RoFormerTokenizer"),Jzr.forEach(t),Yao=r(n$," or "),LB=n(n$,"A",{href:!0});var Yzr=s(LB);Kao=r(Yzr,"RoFormerTokenizerFast"),Yzr.forEach(t),Zao=r(n$," (RoFormer model)"),n$.forEach(t),eno=i(S),Gg=n(S,"LI",{});var i3e=s(Gg);qte=n(i3e,"STRONG",{});var Kzr=s(qte);ono=r(Kzr,"speech_to_text"),Kzr.forEach(t),rno=r(i3e," \u2014 "),xB=n(i3e,"A",{href:!0});var Zzr=s(xB);tno=r(Zzr,"Speech2TextTokenizer"),Zzr.forEach(t),ano=r(i3e," (Speech2Text model)"),i3e.forEach(t),nno=i(S),Og=n(S,"LI",{});var d3e=s(Og);Nte=n(d3e,"STRONG",{});var eQr=s(Nte);sno=r(eQr,"speech_to_text_2"),eQr.forEach(t),lno=r(d3e," \u2014 "),$B=n(d3e,"A",{href:!0});var oQr=s($B);ino=r(oQr,"Speech2Text2Tokenizer"),oQr.forEach(t),dno=r(d3e," (Speech2Text2 model)"),d3e.forEach(t),cno=i(S),Es=n(S,"LI",{});var s$=s(Es);jte=n(s$,"STRONG",{});var rQr=s(jte);fno=r(rQr,"splinter"),rQr.forEach(t),mno=r(s$," \u2014 "),kB=n(s$,"A",{href:!0});var tQr=s(kB);gno=r(tQr,"SplinterTokenizer"),tQr.forEach(t),hno=r(s$," or "),SB=n(s$,"A",{href:!0});var aQr=s(SB);pno=r(aQr,"SplinterTokenizerFast"),aQr.forEach(t),uno=r(s$," (Splinter model)"),s$.forEach(t),_no=i(S),Cs=n(S,"LI",{});var l$=s(Cs);Dte=n(l$,"STRONG",{});var nQr=s(Dte);bno=r(nQr,"squeezebert"),nQr.forEach(t),vno=r(l$," \u2014 "),RB=n(l$,"A",{href:!0});var sQr=s(RB);Fno=r(sQr,"SqueezeBertTokenizer"),sQr.forEach(t),Tno=r(l$," or "),BB=n(l$,"A",{href:!0});var lQr=s(BB);Mno=r(lQr,"SqueezeBertTokenizerFast"),lQr.forEach(t),Eno=r(l$," (SqueezeBERT model)"),l$.forEach(t),Cno=i(S),ws=n(S,"LI",{});var i$=s(ws);Gte=n(i$,"STRONG",{});var iQr=s(Gte);wno=r(iQr,"t5"),iQr.forEach(t),Ano=r(i$," \u2014 "),PB=n(i$,"A",{href:!0});var dQr=s(PB);yno=r(dQr,"T5Tokenizer"),dQr.forEach(t),Lno=r(i$," or "),IB=n(i$,"A",{href:!0});var cQr=s(IB);xno=r(cQr,"T5TokenizerFast"),cQr.forEach(t),$no=r(i$," (T5 model)"),i$.forEach(t),kno=i(S),Vg=n(S,"LI",{});var c3e=s(Vg);Ote=n(c3e,"STRONG",{});var fQr=s(Ote);Sno=r(fQr,"tapas"),fQr.forEach(t),Rno=r(c3e," \u2014 "),qB=n(c3e,"A",{href:!0});var mQr=s(qB);Bno=r(mQr,"TapasTokenizer"),mQr.forEach(t),Pno=r(c3e," (TAPAS model)"),c3e.forEach(t),Ino=i(S),Xg=n(S,"LI",{});var f3e=s(Xg);Vte=n(f3e,"STRONG",{});var gQr=s(Vte);qno=r(gQr,"tapex"),gQr.forEach(t),Nno=r(f3e," \u2014 "),NB=n(f3e,"A",{href:!0});var hQr=s(NB);jno=r(hQr,"TapexTokenizer"),hQr.forEach(t),Dno=r(f3e," (TAPEX model)"),f3e.forEach(t),Gno=i(S),zg=n(S,"LI",{});var m3e=s(zg);Xte=n(m3e,"STRONG",{});var pQr=s(Xte);Ono=r(pQr,"transfo-xl"),pQr.forEach(t),Vno=r(m3e," \u2014 "),jB=n(m3e,"A",{href:!0});var uQr=s(jB);Xno=r(uQr,"TransfoXLTokenizer"),uQr.forEach(t),zno=r(m3e," (Transformer-XL model)"),m3e.forEach(t),Qno=i(S),As=n(S,"LI",{});var d$=s(As);zte=n(d$,"STRONG",{});var _Qr=s(zte);Wno=r(_Qr,"visual_bert"),_Qr.forEach(t),Hno=r(d$," \u2014 "),DB=n(d$,"A",{href:!0});var bQr=s(DB);Uno=r(bQr,"BertTokenizer"),bQr.forEach(t),Jno=r(d$," or "),GB=n(d$,"A",{href:!0});var vQr=s(GB);Yno=r(vQr,"BertTokenizerFast"),vQr.forEach(t),Kno=r(d$," (VisualBert model)"),d$.forEach(t),Zno=i(S),Qg=n(S,"LI",{});var g3e=s(Qg);Qte=n(g3e,"STRONG",{});var FQr=s(Qte);eso=r(FQr,"wav2vec2"),FQr.forEach(t),oso=r(g3e," \u2014 "),OB=n(g3e,"A",{href:!0});var TQr=s(OB);rso=r(TQr,"Wav2Vec2CTCTokenizer"),TQr.forEach(t),tso=r(g3e," (Wav2Vec2 model)"),g3e.forEach(t),aso=i(S),Wg=n(S,"LI",{});var h3e=s(Wg);Wte=n(h3e,"STRONG",{});var MQr=s(Wte);nso=r(MQr,"wav2vec2_phoneme"),MQr.forEach(t),sso=r(h3e," \u2014 "),VB=n(h3e,"A",{href:!0});var EQr=s(VB);lso=r(EQr,"Wav2Vec2PhonemeCTCTokenizer"),EQr.forEach(t),iso=r(h3e," (Wav2Vec2Phoneme model)"),h3e.forEach(t),dso=i(S),ys=n(S,"LI",{});var c$=s(ys);Hte=n(c$,"STRONG",{});var CQr=s(Hte);cso=r(CQr,"xglm"),CQr.forEach(t),fso=r(c$," \u2014 "),XB=n(c$,"A",{href:!0});var wQr=s(XB);mso=r(wQr,"XGLMTokenizer"),wQr.forEach(t),gso=r(c$," or "),zB=n(c$,"A",{href:!0});var AQr=s(zB);hso=r(AQr,"XGLMTokenizerFast"),AQr.forEach(t),pso=r(c$," (XGLM model)"),c$.forEach(t),uso=i(S),Hg=n(S,"LI",{});var p3e=s(Hg);Ute=n(p3e,"STRONG",{});var yQr=s(Ute);_so=r(yQr,"xlm"),yQr.forEach(t),bso=r(p3e," \u2014 "),QB=n(p3e,"A",{href:!0});var LQr=s(QB);vso=r(LQr,"XLMTokenizer"),LQr.forEach(t),Fso=r(p3e," (XLM model)"),p3e.forEach(t),Tso=i(S),Ug=n(S,"LI",{});var u3e=s(Ug);Jte=n(u3e,"STRONG",{});var xQr=s(Jte);Mso=r(xQr,"xlm-prophetnet"),xQr.forEach(t),Eso=r(u3e," \u2014 "),WB=n(u3e,"A",{href:!0});var $Qr=s(WB);Cso=r($Qr,"XLMProphetNetTokenizer"),$Qr.forEach(t),wso=r(u3e," (XLMProphetNet model)"),u3e.forEach(t),Aso=i(S),Ls=n(S,"LI",{});var f$=s(Ls);Yte=n(f$,"STRONG",{});var kQr=s(Yte);yso=r(kQr,"xlm-roberta"),kQr.forEach(t),Lso=r(f$," \u2014 "),HB=n(f$,"A",{href:!0});var SQr=s(HB);xso=r(SQr,"XLMRobertaTokenizer"),SQr.forEach(t),$so=r(f$," or "),UB=n(f$,"A",{href:!0});var RQr=s(UB);kso=r(RQr,"XLMRobertaTokenizerFast"),RQr.forEach(t),Sso=r(f$," (XLM-RoBERTa model)"),f$.forEach(t),Rso=i(S),xs=n(S,"LI",{});var m$=s(xs);Kte=n(m$,"STRONG",{});var BQr=s(Kte);Bso=r(BQr,"xlm-roberta-xl"),BQr.forEach(t),Pso=r(m$," \u2014 "),JB=n(m$,"A",{href:!0});var PQr=s(JB);Iso=r(PQr,"RobertaTokenizer"),PQr.forEach(t),qso=r(m$," or "),YB=n(m$,"A",{href:!0});var IQr=s(YB);Nso=r(IQr,"RobertaTokenizerFast"),IQr.forEach(t),jso=r(m$," (XLM-RoBERTa-XL model)"),m$.forEach(t),Dso=i(S),$s=n(S,"LI",{});var g$=s($s);Zte=n(g$,"STRONG",{});var qQr=s(Zte);Gso=r(qQr,"xlnet"),qQr.forEach(t),Oso=r(g$," \u2014 "),KB=n(g$,"A",{href:!0});var NQr=s(KB);Vso=r(NQr,"XLNetTokenizer"),NQr.forEach(t),Xso=r(g$," or "),ZB=n(g$,"A",{href:!0});var jQr=s(ZB);zso=r(jQr,"XLNetTokenizerFast"),jQr.forEach(t),Qso=r(g$," (XLNet model)"),g$.forEach(t),Wso=i(S),ks=n(S,"LI",{});var h$=s(ks);eae=n(h$,"STRONG",{});var DQr=s(eae);Hso=r(DQr,"yoso"),DQr.forEach(t),Uso=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var GQr=s(eP);Jso=r(GQr,"AlbertTokenizer"),GQr.forEach(t),Yso=r(h$," or "),oP=n(h$,"A",{href:!0});var OQr=s(oP);Kso=r(OQr,"AlbertTokenizerFast"),OQr.forEach(t),Zso=r(h$," (YOSO model)"),h$.forEach(t),S.forEach(t),elo=i(Is),T(Jg.$$.fragment,Is),Is.forEach(t),olo=i(Ps),Yg=n(Ps,"DIV",{class:!0});var gNe=s(Yg);T(h6.$$.fragment,gNe),rlo=i(gNe),oae=n(gNe,"P",{});var VQr=s(oae);tlo=r(VQr,"Register a new tokenizer in this mapping."),VQr.forEach(t),gNe.forEach(t),Ps.forEach(t),hIe=i(f),bi=n(f,"H2",{class:!0});var hNe=s(bi);Kg=n(hNe,"A",{id:!0,class:!0,href:!0});var XQr=s(Kg);rae=n(XQr,"SPAN",{});var zQr=s(rae);T(p6.$$.fragment,zQr),zQr.forEach(t),XQr.forEach(t),alo=i(hNe),tae=n(hNe,"SPAN",{});var QQr=s(tae);nlo=r(QQr,"AutoFeatureExtractor"),QQr.forEach(t),hNe.forEach(t),pIe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(u6.$$.fragment,qs),slo=i(qs),_6=n(qs,"P",{});var pNe=s(_6);llo=r(pNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rP=n(pNe,"A",{href:!0});var WQr=s(rP);ilo=r(WQr,"AutoFeatureExtractor.from_pretrained()"),WQr.forEach(t),dlo=r(pNe," class method."),pNe.forEach(t),clo=i(qs),b6=n(qs,"P",{});var uNe=s(b6);flo=r(uNe,"This class cannot be instantiated directly using "),aae=n(uNe,"CODE",{});var HQr=s(aae);mlo=r(HQr,"__init__()"),HQr.forEach(t),glo=r(uNe," (throws an error)."),uNe.forEach(t),hlo=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(v6.$$.fragment,Yt),plo=i(Yt),nae=n(Yt,"P",{});var UQr=s(nae);ulo=r(UQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UQr.forEach(t),_lo=i(Yt),wa=n(Yt,"P",{});var tw=s(wa);blo=r(tw,"The feature extractor class to instantiate is selected based on the "),sae=n(tw,"CODE",{});var JQr=s(sae);vlo=r(JQr,"model_type"),JQr.forEach(t),Flo=r(tw,` property of the config object
(either passed as an argument or loaded from `),lae=n(tw,"CODE",{});var YQr=s(lae);Tlo=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),Mlo=r(tw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),iae=n(tw,"CODE",{});var KQr=s(iae);Elo=r(KQr,"pretrained_model_name_or_path"),KQr.forEach(t),Clo=r(tw,":"),tw.forEach(t),wlo=i(Yt),Z=n(Yt,"UL",{});var te=s(Z);Zg=n(te,"LI",{});var _3e=s(Zg);dae=n(_3e,"STRONG",{});var ZQr=s(dae);Alo=r(ZQr,"beit"),ZQr.forEach(t),ylo=r(_3e," \u2014 "),tP=n(_3e,"A",{href:!0});var eWr=s(tP);Llo=r(eWr,"BeitFeatureExtractor"),eWr.forEach(t),xlo=r(_3e," (BEiT model)"),_3e.forEach(t),$lo=i(te),eh=n(te,"LI",{});var b3e=s(eh);cae=n(b3e,"STRONG",{});var oWr=s(cae);klo=r(oWr,"clip"),oWr.forEach(t),Slo=r(b3e," \u2014 "),aP=n(b3e,"A",{href:!0});var rWr=s(aP);Rlo=r(rWr,"CLIPFeatureExtractor"),rWr.forEach(t),Blo=r(b3e," (CLIP model)"),b3e.forEach(t),Plo=i(te),oh=n(te,"LI",{});var v3e=s(oh);fae=n(v3e,"STRONG",{});var tWr=s(fae);Ilo=r(tWr,"convnext"),tWr.forEach(t),qlo=r(v3e," \u2014 "),nP=n(v3e,"A",{href:!0});var aWr=s(nP);Nlo=r(aWr,"ConvNextFeatureExtractor"),aWr.forEach(t),jlo=r(v3e," (ConvNext model)"),v3e.forEach(t),Dlo=i(te),rh=n(te,"LI",{});var F3e=s(rh);mae=n(F3e,"STRONG",{});var nWr=s(mae);Glo=r(nWr,"data2vec-audio"),nWr.forEach(t),Olo=r(F3e," \u2014 "),sP=n(F3e,"A",{href:!0});var sWr=s(sP);Vlo=r(sWr,"Wav2Vec2FeatureExtractor"),sWr.forEach(t),Xlo=r(F3e," (Data2VecAudio model)"),F3e.forEach(t),zlo=i(te),th=n(te,"LI",{});var T3e=s(th);gae=n(T3e,"STRONG",{});var lWr=s(gae);Qlo=r(lWr,"data2vec-vision"),lWr.forEach(t),Wlo=r(T3e," \u2014 "),lP=n(T3e,"A",{href:!0});var iWr=s(lP);Hlo=r(iWr,"BeitFeatureExtractor"),iWr.forEach(t),Ulo=r(T3e," (Data2VecVision model)"),T3e.forEach(t),Jlo=i(te),ah=n(te,"LI",{});var M3e=s(ah);hae=n(M3e,"STRONG",{});var dWr=s(hae);Ylo=r(dWr,"deit"),dWr.forEach(t),Klo=r(M3e," \u2014 "),iP=n(M3e,"A",{href:!0});var cWr=s(iP);Zlo=r(cWr,"DeiTFeatureExtractor"),cWr.forEach(t),eio=r(M3e," (DeiT model)"),M3e.forEach(t),oio=i(te),nh=n(te,"LI",{});var E3e=s(nh);pae=n(E3e,"STRONG",{});var fWr=s(pae);rio=r(fWr,"detr"),fWr.forEach(t),tio=r(E3e," \u2014 "),dP=n(E3e,"A",{href:!0});var mWr=s(dP);aio=r(mWr,"DetrFeatureExtractor"),mWr.forEach(t),nio=r(E3e," (DETR model)"),E3e.forEach(t),sio=i(te),sh=n(te,"LI",{});var C3e=s(sh);uae=n(C3e,"STRONG",{});var gWr=s(uae);lio=r(gWr,"dpt"),gWr.forEach(t),iio=r(C3e," \u2014 "),cP=n(C3e,"A",{href:!0});var hWr=s(cP);dio=r(hWr,"DPTFeatureExtractor"),hWr.forEach(t),cio=r(C3e," (DPT model)"),C3e.forEach(t),fio=i(te),lh=n(te,"LI",{});var w3e=s(lh);_ae=n(w3e,"STRONG",{});var pWr=s(_ae);mio=r(pWr,"flava"),pWr.forEach(t),gio=r(w3e," \u2014 "),fP=n(w3e,"A",{href:!0});var uWr=s(fP);hio=r(uWr,"FlavaFeatureExtractor"),uWr.forEach(t),pio=r(w3e," (Flava model)"),w3e.forEach(t),uio=i(te),ih=n(te,"LI",{});var A3e=s(ih);bae=n(A3e,"STRONG",{});var _Wr=s(bae);_io=r(_Wr,"glpn"),_Wr.forEach(t),bio=r(A3e," \u2014 "),mP=n(A3e,"A",{href:!0});var bWr=s(mP);vio=r(bWr,"GLPNFeatureExtractor"),bWr.forEach(t),Fio=r(A3e," (GLPN model)"),A3e.forEach(t),Tio=i(te),dh=n(te,"LI",{});var y3e=s(dh);vae=n(y3e,"STRONG",{});var vWr=s(vae);Mio=r(vWr,"hubert"),vWr.forEach(t),Eio=r(y3e," \u2014 "),gP=n(y3e,"A",{href:!0});var FWr=s(gP);Cio=r(FWr,"Wav2Vec2FeatureExtractor"),FWr.forEach(t),wio=r(y3e," (Hubert model)"),y3e.forEach(t),Aio=i(te),ch=n(te,"LI",{});var L3e=s(ch);Fae=n(L3e,"STRONG",{});var TWr=s(Fae);yio=r(TWr,"layoutlmv2"),TWr.forEach(t),Lio=r(L3e," \u2014 "),hP=n(L3e,"A",{href:!0});var MWr=s(hP);xio=r(MWr,"LayoutLMv2FeatureExtractor"),MWr.forEach(t),$io=r(L3e," (LayoutLMv2 model)"),L3e.forEach(t),kio=i(te),fh=n(te,"LI",{});var x3e=s(fh);Tae=n(x3e,"STRONG",{});var EWr=s(Tae);Sio=r(EWr,"maskformer"),EWr.forEach(t),Rio=r(x3e," \u2014 "),pP=n(x3e,"A",{href:!0});var CWr=s(pP);Bio=r(CWr,"MaskFormerFeatureExtractor"),CWr.forEach(t),Pio=r(x3e," (MaskFormer model)"),x3e.forEach(t),Iio=i(te),mh=n(te,"LI",{});var $3e=s(mh);Mae=n($3e,"STRONG",{});var wWr=s(Mae);qio=r(wWr,"mobilevit"),wWr.forEach(t),Nio=r($3e," \u2014 "),uP=n($3e,"A",{href:!0});var AWr=s(uP);jio=r(AWr,"MobileViTFeatureExtractor"),AWr.forEach(t),Dio=r($3e," (MobileViT model)"),$3e.forEach(t),Gio=i(te),gh=n(te,"LI",{});var k3e=s(gh);Eae=n(k3e,"STRONG",{});var yWr=s(Eae);Oio=r(yWr,"perceiver"),yWr.forEach(t),Vio=r(k3e," \u2014 "),_P=n(k3e,"A",{href:!0});var LWr=s(_P);Xio=r(LWr,"PerceiverFeatureExtractor"),LWr.forEach(t),zio=r(k3e," (Perceiver model)"),k3e.forEach(t),Qio=i(te),hh=n(te,"LI",{});var S3e=s(hh);Cae=n(S3e,"STRONG",{});var xWr=s(Cae);Wio=r(xWr,"poolformer"),xWr.forEach(t),Hio=r(S3e," \u2014 "),bP=n(S3e,"A",{href:!0});var $Wr=s(bP);Uio=r($Wr,"PoolFormerFeatureExtractor"),$Wr.forEach(t),Jio=r(S3e," (PoolFormer model)"),S3e.forEach(t),Yio=i(te),ph=n(te,"LI",{});var R3e=s(ph);wae=n(R3e,"STRONG",{});var kWr=s(wae);Kio=r(kWr,"regnet"),kWr.forEach(t),Zio=r(R3e," \u2014 "),vP=n(R3e,"A",{href:!0});var SWr=s(vP);edo=r(SWr,"ConvNextFeatureExtractor"),SWr.forEach(t),odo=r(R3e," (RegNet model)"),R3e.forEach(t),rdo=i(te),uh=n(te,"LI",{});var B3e=s(uh);Aae=n(B3e,"STRONG",{});var RWr=s(Aae);tdo=r(RWr,"resnet"),RWr.forEach(t),ado=r(B3e," \u2014 "),FP=n(B3e,"A",{href:!0});var BWr=s(FP);ndo=r(BWr,"ConvNextFeatureExtractor"),BWr.forEach(t),sdo=r(B3e," (ResNet model)"),B3e.forEach(t),ldo=i(te),_h=n(te,"LI",{});var P3e=s(_h);yae=n(P3e,"STRONG",{});var PWr=s(yae);ido=r(PWr,"segformer"),PWr.forEach(t),ddo=r(P3e," \u2014 "),TP=n(P3e,"A",{href:!0});var IWr=s(TP);cdo=r(IWr,"SegformerFeatureExtractor"),IWr.forEach(t),fdo=r(P3e," (SegFormer model)"),P3e.forEach(t),mdo=i(te),bh=n(te,"LI",{});var I3e=s(bh);Lae=n(I3e,"STRONG",{});var qWr=s(Lae);gdo=r(qWr,"speech_to_text"),qWr.forEach(t),hdo=r(I3e," \u2014 "),MP=n(I3e,"A",{href:!0});var NWr=s(MP);pdo=r(NWr,"Speech2TextFeatureExtractor"),NWr.forEach(t),udo=r(I3e," (Speech2Text model)"),I3e.forEach(t),_do=i(te),vh=n(te,"LI",{});var q3e=s(vh);xae=n(q3e,"STRONG",{});var jWr=s(xae);bdo=r(jWr,"swin"),jWr.forEach(t),vdo=r(q3e," \u2014 "),EP=n(q3e,"A",{href:!0});var DWr=s(EP);Fdo=r(DWr,"ViTFeatureExtractor"),DWr.forEach(t),Tdo=r(q3e," (Swin model)"),q3e.forEach(t),Mdo=i(te),Fh=n(te,"LI",{});var N3e=s(Fh);$ae=n(N3e,"STRONG",{});var GWr=s($ae);Edo=r(GWr,"van"),GWr.forEach(t),Cdo=r(N3e," \u2014 "),CP=n(N3e,"A",{href:!0});var OWr=s(CP);wdo=r(OWr,"ConvNextFeatureExtractor"),OWr.forEach(t),Ado=r(N3e," (VAN model)"),N3e.forEach(t),ydo=i(te),Th=n(te,"LI",{});var j3e=s(Th);kae=n(j3e,"STRONG",{});var VWr=s(kae);Ldo=r(VWr,"vit"),VWr.forEach(t),xdo=r(j3e," \u2014 "),wP=n(j3e,"A",{href:!0});var XWr=s(wP);$do=r(XWr,"ViTFeatureExtractor"),XWr.forEach(t),kdo=r(j3e," (ViT model)"),j3e.forEach(t),Sdo=i(te),Mh=n(te,"LI",{});var D3e=s(Mh);Sae=n(D3e,"STRONG",{});var zWr=s(Sae);Rdo=r(zWr,"vit_mae"),zWr.forEach(t),Bdo=r(D3e," \u2014 "),AP=n(D3e,"A",{href:!0});var QWr=s(AP);Pdo=r(QWr,"ViTFeatureExtractor"),QWr.forEach(t),Ido=r(D3e," (ViTMAE model)"),D3e.forEach(t),qdo=i(te),Eh=n(te,"LI",{});var G3e=s(Eh);Rae=n(G3e,"STRONG",{});var WWr=s(Rae);Ndo=r(WWr,"wav2vec2"),WWr.forEach(t),jdo=r(G3e," \u2014 "),yP=n(G3e,"A",{href:!0});var HWr=s(yP);Ddo=r(HWr,"Wav2Vec2FeatureExtractor"),HWr.forEach(t),Gdo=r(G3e," (Wav2Vec2 model)"),G3e.forEach(t),Odo=i(te),Ch=n(te,"LI",{});var O3e=s(Ch);Bae=n(O3e,"STRONG",{});var UWr=s(Bae);Vdo=r(UWr,"yolos"),UWr.forEach(t),Xdo=r(O3e," \u2014 "),LP=n(O3e,"A",{href:!0});var JWr=s(LP);zdo=r(JWr,"YolosFeatureExtractor"),JWr.forEach(t),Qdo=r(O3e," (YOLOS model)"),O3e.forEach(t),te.forEach(t),Wdo=i(Yt),T(wh.$$.fragment,Yt),Hdo=i(Yt),T(Ah.$$.fragment,Yt),Yt.forEach(t),Udo=i(qs),yh=n(qs,"DIV",{class:!0});var _Ne=s(yh);T(F6.$$.fragment,_Ne),Jdo=i(_Ne),Pae=n(_Ne,"P",{});var YWr=s(Pae);Ydo=r(YWr,"Register a new feature extractor for this class."),YWr.forEach(t),_Ne.forEach(t),qs.forEach(t),uIe=i(f),vi=n(f,"H2",{class:!0});var bNe=s(vi);Lh=n(bNe,"A",{id:!0,class:!0,href:!0});var KWr=s(Lh);Iae=n(KWr,"SPAN",{});var ZWr=s(Iae);T(T6.$$.fragment,ZWr),ZWr.forEach(t),KWr.forEach(t),Kdo=i(bNe),qae=n(bNe,"SPAN",{});var eHr=s(qae);Zdo=r(eHr,"AutoProcessor"),eHr.forEach(t),bNe.forEach(t),_Ie=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(M6.$$.fragment,Ns),eco=i(Ns),E6=n(Ns,"P",{});var vNe=s(E6);oco=r(vNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xP=n(vNe,"A",{href:!0});var oHr=s(xP);rco=r(oHr,"AutoProcessor.from_pretrained()"),oHr.forEach(t),tco=r(vNe," class method."),vNe.forEach(t),aco=i(Ns),C6=n(Ns,"P",{});var FNe=s(C6);nco=r(FNe,"This class cannot be instantiated directly using "),Nae=n(FNe,"CODE",{});var rHr=s(Nae);sco=r(rHr,"__init__()"),rHr.forEach(t),lco=r(FNe," (throws an error)."),FNe.forEach(t),ico=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(w6.$$.fragment,Kt),dco=i(Kt),jae=n(Kt,"P",{});var tHr=s(jae);cco=r(tHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tHr.forEach(t),fco=i(Kt),Fi=n(Kt,"P",{});var pK=s(Fi);mco=r(pK,"The processor class to instantiate is selected based on the "),Dae=n(pK,"CODE",{});var aHr=s(Dae);gco=r(aHr,"model_type"),aHr.forEach(t),hco=r(pK,` property of the config object (either
passed as an argument or loaded from `),Gae=n(pK,"CODE",{});var nHr=s(Gae);pco=r(nHr,"pretrained_model_name_or_path"),nHr.forEach(t),uco=r(pK," if possible):"),pK.forEach(t),_co=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);xh=n(Fe,"LI",{});var V3e=s(xh);Oae=n(V3e,"STRONG",{});var sHr=s(Oae);bco=r(sHr,"clip"),sHr.forEach(t),vco=r(V3e," \u2014 "),$P=n(V3e,"A",{href:!0});var lHr=s($P);Fco=r(lHr,"CLIPProcessor"),lHr.forEach(t),Tco=r(V3e," (CLIP model)"),V3e.forEach(t),Mco=i(Fe),$h=n(Fe,"LI",{});var X3e=s($h);Vae=n(X3e,"STRONG",{});var iHr=s(Vae);Eco=r(iHr,"flava"),iHr.forEach(t),Cco=r(X3e," \u2014 "),Xae=n(X3e,"CODE",{});var dHr=s(Xae);wco=r(dHr,"FLAVAProcessor"),dHr.forEach(t),Aco=r(X3e," (Flava model)"),X3e.forEach(t),yco=i(Fe),kh=n(Fe,"LI",{});var z3e=s(kh);zae=n(z3e,"STRONG",{});var cHr=s(zae);Lco=r(cHr,"layoutlmv2"),cHr.forEach(t),xco=r(z3e," \u2014 "),kP=n(z3e,"A",{href:!0});var fHr=s(kP);$co=r(fHr,"LayoutLMv2Processor"),fHr.forEach(t),kco=r(z3e," (LayoutLMv2 model)"),z3e.forEach(t),Sco=i(Fe),Sh=n(Fe,"LI",{});var Q3e=s(Sh);Qae=n(Q3e,"STRONG",{});var mHr=s(Qae);Rco=r(mHr,"layoutxlm"),mHr.forEach(t),Bco=r(Q3e," \u2014 "),SP=n(Q3e,"A",{href:!0});var gHr=s(SP);Pco=r(gHr,"LayoutXLMProcessor"),gHr.forEach(t),Ico=r(Q3e," (LayoutXLM model)"),Q3e.forEach(t),qco=i(Fe),Rh=n(Fe,"LI",{});var W3e=s(Rh);Wae=n(W3e,"STRONG",{});var hHr=s(Wae);Nco=r(hHr,"sew"),hHr.forEach(t),jco=r(W3e," \u2014 "),RP=n(W3e,"A",{href:!0});var pHr=s(RP);Dco=r(pHr,"Wav2Vec2Processor"),pHr.forEach(t),Gco=r(W3e," (SEW model)"),W3e.forEach(t),Oco=i(Fe),Bh=n(Fe,"LI",{});var H3e=s(Bh);Hae=n(H3e,"STRONG",{});var uHr=s(Hae);Vco=r(uHr,"sew-d"),uHr.forEach(t),Xco=r(H3e," \u2014 "),BP=n(H3e,"A",{href:!0});var _Hr=s(BP);zco=r(_Hr,"Wav2Vec2Processor"),_Hr.forEach(t),Qco=r(H3e," (SEW-D model)"),H3e.forEach(t),Wco=i(Fe),Ph=n(Fe,"LI",{});var U3e=s(Ph);Uae=n(U3e,"STRONG",{});var bHr=s(Uae);Hco=r(bHr,"speech_to_text"),bHr.forEach(t),Uco=r(U3e," \u2014 "),PP=n(U3e,"A",{href:!0});var vHr=s(PP);Jco=r(vHr,"Speech2TextProcessor"),vHr.forEach(t),Yco=r(U3e," (Speech2Text model)"),U3e.forEach(t),Kco=i(Fe),Ih=n(Fe,"LI",{});var J3e=s(Ih);Jae=n(J3e,"STRONG",{});var FHr=s(Jae);Zco=r(FHr,"speech_to_text_2"),FHr.forEach(t),efo=r(J3e," \u2014 "),IP=n(J3e,"A",{href:!0});var THr=s(IP);ofo=r(THr,"Speech2Text2Processor"),THr.forEach(t),rfo=r(J3e," (Speech2Text2 model)"),J3e.forEach(t),tfo=i(Fe),qh=n(Fe,"LI",{});var Y3e=s(qh);Yae=n(Y3e,"STRONG",{});var MHr=s(Yae);afo=r(MHr,"trocr"),MHr.forEach(t),nfo=r(Y3e," \u2014 "),qP=n(Y3e,"A",{href:!0});var EHr=s(qP);sfo=r(EHr,"TrOCRProcessor"),EHr.forEach(t),lfo=r(Y3e," (TrOCR model)"),Y3e.forEach(t),ifo=i(Fe),Nh=n(Fe,"LI",{});var K3e=s(Nh);Kae=n(K3e,"STRONG",{});var CHr=s(Kae);dfo=r(CHr,"unispeech"),CHr.forEach(t),cfo=r(K3e," \u2014 "),NP=n(K3e,"A",{href:!0});var wHr=s(NP);ffo=r(wHr,"Wav2Vec2Processor"),wHr.forEach(t),mfo=r(K3e," (UniSpeech model)"),K3e.forEach(t),gfo=i(Fe),jh=n(Fe,"LI",{});var Z3e=s(jh);Zae=n(Z3e,"STRONG",{});var AHr=s(Zae);hfo=r(AHr,"unispeech-sat"),AHr.forEach(t),pfo=r(Z3e," \u2014 "),jP=n(Z3e,"A",{href:!0});var yHr=s(jP);ufo=r(yHr,"Wav2Vec2Processor"),yHr.forEach(t),_fo=r(Z3e," (UniSpeechSat model)"),Z3e.forEach(t),bfo=i(Fe),Dh=n(Fe,"LI",{});var ewe=s(Dh);ene=n(ewe,"STRONG",{});var LHr=s(ene);vfo=r(LHr,"vilt"),LHr.forEach(t),Ffo=r(ewe," \u2014 "),DP=n(ewe,"A",{href:!0});var xHr=s(DP);Tfo=r(xHr,"ViltProcessor"),xHr.forEach(t),Mfo=r(ewe," (ViLT model)"),ewe.forEach(t),Efo=i(Fe),Gh=n(Fe,"LI",{});var owe=s(Gh);one=n(owe,"STRONG",{});var $Hr=s(one);Cfo=r($Hr,"vision-text-dual-encoder"),$Hr.forEach(t),wfo=r(owe," \u2014 "),GP=n(owe,"A",{href:!0});var kHr=s(GP);Afo=r(kHr,"VisionTextDualEncoderProcessor"),kHr.forEach(t),yfo=r(owe," (VisionTextDualEncoder model)"),owe.forEach(t),Lfo=i(Fe),Oh=n(Fe,"LI",{});var rwe=s(Oh);rne=n(rwe,"STRONG",{});var SHr=s(rne);xfo=r(SHr,"wav2vec2"),SHr.forEach(t),$fo=r(rwe," \u2014 "),OP=n(rwe,"A",{href:!0});var RHr=s(OP);kfo=r(RHr,"Wav2Vec2Processor"),RHr.forEach(t),Sfo=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),Rfo=i(Fe),Vh=n(Fe,"LI",{});var twe=s(Vh);tne=n(twe,"STRONG",{});var BHr=s(tne);Bfo=r(BHr,"wavlm"),BHr.forEach(t),Pfo=r(twe," \u2014 "),VP=n(twe,"A",{href:!0});var PHr=s(VP);Ifo=r(PHr,"Wav2Vec2Processor"),PHr.forEach(t),qfo=r(twe," (WavLM model)"),twe.forEach(t),Fe.forEach(t),Nfo=i(Kt),T(Xh.$$.fragment,Kt),jfo=i(Kt),T(zh.$$.fragment,Kt),Kt.forEach(t),Dfo=i(Ns),Qh=n(Ns,"DIV",{class:!0});var TNe=s(Qh);T(A6.$$.fragment,TNe),Gfo=i(TNe),ane=n(TNe,"P",{});var IHr=s(ane);Ofo=r(IHr,"Register a new processor for this class."),IHr.forEach(t),TNe.forEach(t),Ns.forEach(t),bIe=i(f),Ti=n(f,"H2",{class:!0});var MNe=s(Ti);Wh=n(MNe,"A",{id:!0,class:!0,href:!0});var qHr=s(Wh);nne=n(qHr,"SPAN",{});var NHr=s(nne);T(y6.$$.fragment,NHr),NHr.forEach(t),qHr.forEach(t),Vfo=i(MNe),sne=n(MNe,"SPAN",{});var jHr=s(sne);Xfo=r(jHr,"AutoModel"),jHr.forEach(t),MNe.forEach(t),vIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(L6.$$.fragment,js),zfo=i(js),Mi=n(js,"P",{});var uK=s(Mi);Qfo=r(uK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XP=n(uK,"A",{href:!0});var DHr=s(XP);Wfo=r(DHr,"from_pretrained()"),DHr.forEach(t),Hfo=r(uK," class method or the "),zP=n(uK,"A",{href:!0});var GHr=s(zP);Ufo=r(GHr,"from_config()"),GHr.forEach(t),Jfo=r(uK,` class
method.`),uK.forEach(t),Yfo=i(js),x6=n(js,"P",{});var ENe=s(x6);Kfo=r(ENe,"This class cannot be instantiated directly using "),lne=n(ENe,"CODE",{});var OHr=s(lne);Zfo=r(OHr,"__init__()"),OHr.forEach(t),emo=r(ENe," (throws an error)."),ENe.forEach(t),omo=i(js),ot=n(js,"DIV",{class:!0});var aw=s(ot);T($6.$$.fragment,aw),rmo=i(aw),ine=n(aw,"P",{});var VHr=s(ine);tmo=r(VHr,"Instantiates one of the base model classes of the library from a configuration."),VHr.forEach(t),amo=i(aw),Ei=n(aw,"P",{});var _K=s(Ei);nmo=r(_K,`Note:
Loading a model from its configuration file does `),dne=n(_K,"STRONG",{});var XHr=s(dne);smo=r(XHr,"not"),XHr.forEach(t),lmo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),QP=n(_K,"A",{href:!0});var zHr=s(QP);imo=r(zHr,"from_pretrained()"),zHr.forEach(t),dmo=r(_K," to load the model weights."),_K.forEach(t),cmo=i(aw),T(Hh.$$.fragment,aw),aw.forEach(t),fmo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(k6.$$.fragment,Zt),mmo=i(Zt),cne=n(Zt,"P",{});var QHr=s(cne);gmo=r(QHr,"Instantiate one of the base model classes of the library from a pretrained model."),QHr.forEach(t),hmo=i(Zt),Aa=n(Zt,"P",{});var nw=s(Aa);pmo=r(nw,"The model class to instantiate is selected based on the "),fne=n(nw,"CODE",{});var WHr=s(fne);umo=r(WHr,"model_type"),WHr.forEach(t),_mo=r(nw,` property of the config object (either
passed as an argument or loaded from `),mne=n(nw,"CODE",{});var HHr=s(mne);bmo=r(HHr,"pretrained_model_name_or_path"),HHr.forEach(t),vmo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=n(nw,"CODE",{});var UHr=s(gne);Fmo=r(UHr,"pretrained_model_name_or_path"),UHr.forEach(t),Tmo=r(nw,":"),nw.forEach(t),Mmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Uh=n($,"LI",{});var awe=s(Uh);hne=n(awe,"STRONG",{});var JHr=s(hne);Emo=r(JHr,"albert"),JHr.forEach(t),Cmo=r(awe," \u2014 "),WP=n(awe,"A",{href:!0});var YHr=s(WP);wmo=r(YHr,"AlbertModel"),YHr.forEach(t),Amo=r(awe," (ALBERT model)"),awe.forEach(t),ymo=i($),Jh=n($,"LI",{});var nwe=s(Jh);pne=n(nwe,"STRONG",{});var KHr=s(pne);Lmo=r(KHr,"bart"),KHr.forEach(t),xmo=r(nwe," \u2014 "),HP=n(nwe,"A",{href:!0});var ZHr=s(HP);$mo=r(ZHr,"BartModel"),ZHr.forEach(t),kmo=r(nwe," (BART model)"),nwe.forEach(t),Smo=i($),Yh=n($,"LI",{});var swe=s(Yh);une=n(swe,"STRONG",{});var eUr=s(une);Rmo=r(eUr,"beit"),eUr.forEach(t),Bmo=r(swe," \u2014 "),UP=n(swe,"A",{href:!0});var oUr=s(UP);Pmo=r(oUr,"BeitModel"),oUr.forEach(t),Imo=r(swe," (BEiT model)"),swe.forEach(t),qmo=i($),Kh=n($,"LI",{});var lwe=s(Kh);_ne=n(lwe,"STRONG",{});var rUr=s(_ne);Nmo=r(rUr,"bert"),rUr.forEach(t),jmo=r(lwe," \u2014 "),JP=n(lwe,"A",{href:!0});var tUr=s(JP);Dmo=r(tUr,"BertModel"),tUr.forEach(t),Gmo=r(lwe," (BERT model)"),lwe.forEach(t),Omo=i($),Zh=n($,"LI",{});var iwe=s(Zh);bne=n(iwe,"STRONG",{});var aUr=s(bne);Vmo=r(aUr,"bert-generation"),aUr.forEach(t),Xmo=r(iwe," \u2014 "),YP=n(iwe,"A",{href:!0});var nUr=s(YP);zmo=r(nUr,"BertGenerationEncoder"),nUr.forEach(t),Qmo=r(iwe," (Bert Generation model)"),iwe.forEach(t),Wmo=i($),ep=n($,"LI",{});var dwe=s(ep);vne=n(dwe,"STRONG",{});var sUr=s(vne);Hmo=r(sUr,"big_bird"),sUr.forEach(t),Umo=r(dwe," \u2014 "),KP=n(dwe,"A",{href:!0});var lUr=s(KP);Jmo=r(lUr,"BigBirdModel"),lUr.forEach(t),Ymo=r(dwe," (BigBird model)"),dwe.forEach(t),Kmo=i($),op=n($,"LI",{});var cwe=s(op);Fne=n(cwe,"STRONG",{});var iUr=s(Fne);Zmo=r(iUr,"bigbird_pegasus"),iUr.forEach(t),ego=r(cwe," \u2014 "),ZP=n(cwe,"A",{href:!0});var dUr=s(ZP);ogo=r(dUr,"BigBirdPegasusModel"),dUr.forEach(t),rgo=r(cwe," (BigBirdPegasus model)"),cwe.forEach(t),tgo=i($),rp=n($,"LI",{});var fwe=s(rp);Tne=n(fwe,"STRONG",{});var cUr=s(Tne);ago=r(cUr,"blenderbot"),cUr.forEach(t),ngo=r(fwe," \u2014 "),eI=n(fwe,"A",{href:!0});var fUr=s(eI);sgo=r(fUr,"BlenderbotModel"),fUr.forEach(t),lgo=r(fwe," (Blenderbot model)"),fwe.forEach(t),igo=i($),tp=n($,"LI",{});var mwe=s(tp);Mne=n(mwe,"STRONG",{});var mUr=s(Mne);dgo=r(mUr,"blenderbot-small"),mUr.forEach(t),cgo=r(mwe," \u2014 "),oI=n(mwe,"A",{href:!0});var gUr=s(oI);fgo=r(gUr,"BlenderbotSmallModel"),gUr.forEach(t),mgo=r(mwe," (BlenderbotSmall model)"),mwe.forEach(t),ggo=i($),ap=n($,"LI",{});var gwe=s(ap);Ene=n(gwe,"STRONG",{});var hUr=s(Ene);hgo=r(hUr,"camembert"),hUr.forEach(t),pgo=r(gwe," \u2014 "),rI=n(gwe,"A",{href:!0});var pUr=s(rI);ugo=r(pUr,"CamembertModel"),pUr.forEach(t),_go=r(gwe," (CamemBERT model)"),gwe.forEach(t),bgo=i($),np=n($,"LI",{});var hwe=s(np);Cne=n(hwe,"STRONG",{});var uUr=s(Cne);vgo=r(uUr,"canine"),uUr.forEach(t),Fgo=r(hwe," \u2014 "),tI=n(hwe,"A",{href:!0});var _Ur=s(tI);Tgo=r(_Ur,"CanineModel"),_Ur.forEach(t),Mgo=r(hwe," (Canine model)"),hwe.forEach(t),Ego=i($),sp=n($,"LI",{});var pwe=s(sp);wne=n(pwe,"STRONG",{});var bUr=s(wne);Cgo=r(bUr,"clip"),bUr.forEach(t),wgo=r(pwe," \u2014 "),aI=n(pwe,"A",{href:!0});var vUr=s(aI);Ago=r(vUr,"CLIPModel"),vUr.forEach(t),ygo=r(pwe," (CLIP model)"),pwe.forEach(t),Lgo=i($),lp=n($,"LI",{});var uwe=s(lp);Ane=n(uwe,"STRONG",{});var FUr=s(Ane);xgo=r(FUr,"convbert"),FUr.forEach(t),$go=r(uwe," \u2014 "),nI=n(uwe,"A",{href:!0});var TUr=s(nI);kgo=r(TUr,"ConvBertModel"),TUr.forEach(t),Sgo=r(uwe," (ConvBERT model)"),uwe.forEach(t),Rgo=i($),ip=n($,"LI",{});var _we=s(ip);yne=n(_we,"STRONG",{});var MUr=s(yne);Bgo=r(MUr,"convnext"),MUr.forEach(t),Pgo=r(_we," \u2014 "),sI=n(_we,"A",{href:!0});var EUr=s(sI);Igo=r(EUr,"ConvNextModel"),EUr.forEach(t),qgo=r(_we," (ConvNext model)"),_we.forEach(t),Ngo=i($),dp=n($,"LI",{});var bwe=s(dp);Lne=n(bwe,"STRONG",{});var CUr=s(Lne);jgo=r(CUr,"ctrl"),CUr.forEach(t),Dgo=r(bwe," \u2014 "),lI=n(bwe,"A",{href:!0});var wUr=s(lI);Ggo=r(wUr,"CTRLModel"),wUr.forEach(t),Ogo=r(bwe," (CTRL model)"),bwe.forEach(t),Vgo=i($),cp=n($,"LI",{});var vwe=s(cp);xne=n(vwe,"STRONG",{});var AUr=s(xne);Xgo=r(AUr,"data2vec-audio"),AUr.forEach(t),zgo=r(vwe," \u2014 "),iI=n(vwe,"A",{href:!0});var yUr=s(iI);Qgo=r(yUr,"Data2VecAudioModel"),yUr.forEach(t),Wgo=r(vwe," (Data2VecAudio model)"),vwe.forEach(t),Hgo=i($),fp=n($,"LI",{});var Fwe=s(fp);$ne=n(Fwe,"STRONG",{});var LUr=s($ne);Ugo=r(LUr,"data2vec-text"),LUr.forEach(t),Jgo=r(Fwe," \u2014 "),dI=n(Fwe,"A",{href:!0});var xUr=s(dI);Ygo=r(xUr,"Data2VecTextModel"),xUr.forEach(t),Kgo=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),Zgo=i($),mp=n($,"LI",{});var Twe=s(mp);kne=n(Twe,"STRONG",{});var $Ur=s(kne);eho=r($Ur,"data2vec-vision"),$Ur.forEach(t),oho=r(Twe," \u2014 "),cI=n(Twe,"A",{href:!0});var kUr=s(cI);rho=r(kUr,"Data2VecVisionModel"),kUr.forEach(t),tho=r(Twe," (Data2VecVision model)"),Twe.forEach(t),aho=i($),gp=n($,"LI",{});var Mwe=s(gp);Sne=n(Mwe,"STRONG",{});var SUr=s(Sne);nho=r(SUr,"deberta"),SUr.forEach(t),sho=r(Mwe," \u2014 "),fI=n(Mwe,"A",{href:!0});var RUr=s(fI);lho=r(RUr,"DebertaModel"),RUr.forEach(t),iho=r(Mwe," (DeBERTa model)"),Mwe.forEach(t),dho=i($),hp=n($,"LI",{});var Ewe=s(hp);Rne=n(Ewe,"STRONG",{});var BUr=s(Rne);cho=r(BUr,"deberta-v2"),BUr.forEach(t),fho=r(Ewe," \u2014 "),mI=n(Ewe,"A",{href:!0});var PUr=s(mI);mho=r(PUr,"DebertaV2Model"),PUr.forEach(t),gho=r(Ewe," (DeBERTa-v2 model)"),Ewe.forEach(t),hho=i($),pp=n($,"LI",{});var Cwe=s(pp);Bne=n(Cwe,"STRONG",{});var IUr=s(Bne);pho=r(IUr,"decision_transformer"),IUr.forEach(t),uho=r(Cwe," \u2014 "),gI=n(Cwe,"A",{href:!0});var qUr=s(gI);_ho=r(qUr,"DecisionTransformerModel"),qUr.forEach(t),bho=r(Cwe," (Decision Transformer model)"),Cwe.forEach(t),vho=i($),up=n($,"LI",{});var wwe=s(up);Pne=n(wwe,"STRONG",{});var NUr=s(Pne);Fho=r(NUr,"deit"),NUr.forEach(t),Tho=r(wwe," \u2014 "),hI=n(wwe,"A",{href:!0});var jUr=s(hI);Mho=r(jUr,"DeiTModel"),jUr.forEach(t),Eho=r(wwe," (DeiT model)"),wwe.forEach(t),Cho=i($),_p=n($,"LI",{});var Awe=s(_p);Ine=n(Awe,"STRONG",{});var DUr=s(Ine);who=r(DUr,"detr"),DUr.forEach(t),Aho=r(Awe," \u2014 "),pI=n(Awe,"A",{href:!0});var GUr=s(pI);yho=r(GUr,"DetrModel"),GUr.forEach(t),Lho=r(Awe," (DETR model)"),Awe.forEach(t),xho=i($),bp=n($,"LI",{});var ywe=s(bp);qne=n(ywe,"STRONG",{});var OUr=s(qne);$ho=r(OUr,"distilbert"),OUr.forEach(t),kho=r(ywe," \u2014 "),uI=n(ywe,"A",{href:!0});var VUr=s(uI);Sho=r(VUr,"DistilBertModel"),VUr.forEach(t),Rho=r(ywe," (DistilBERT model)"),ywe.forEach(t),Bho=i($),vp=n($,"LI",{});var Lwe=s(vp);Nne=n(Lwe,"STRONG",{});var XUr=s(Nne);Pho=r(XUr,"dpr"),XUr.forEach(t),Iho=r(Lwe," \u2014 "),_I=n(Lwe,"A",{href:!0});var zUr=s(_I);qho=r(zUr,"DPRQuestionEncoder"),zUr.forEach(t),Nho=r(Lwe," (DPR model)"),Lwe.forEach(t),jho=i($),Fp=n($,"LI",{});var xwe=s(Fp);jne=n(xwe,"STRONG",{});var QUr=s(jne);Dho=r(QUr,"dpt"),QUr.forEach(t),Gho=r(xwe," \u2014 "),bI=n(xwe,"A",{href:!0});var WUr=s(bI);Oho=r(WUr,"DPTModel"),WUr.forEach(t),Vho=r(xwe," (DPT model)"),xwe.forEach(t),Xho=i($),Tp=n($,"LI",{});var $we=s(Tp);Dne=n($we,"STRONG",{});var HUr=s(Dne);zho=r(HUr,"electra"),HUr.forEach(t),Qho=r($we," \u2014 "),vI=n($we,"A",{href:!0});var UUr=s(vI);Who=r(UUr,"ElectraModel"),UUr.forEach(t),Hho=r($we," (ELECTRA model)"),$we.forEach(t),Uho=i($),Mp=n($,"LI",{});var kwe=s(Mp);Gne=n(kwe,"STRONG",{});var JUr=s(Gne);Jho=r(JUr,"flaubert"),JUr.forEach(t),Yho=r(kwe," \u2014 "),FI=n(kwe,"A",{href:!0});var YUr=s(FI);Kho=r(YUr,"FlaubertModel"),YUr.forEach(t),Zho=r(kwe," (FlauBERT model)"),kwe.forEach(t),epo=i($),Ep=n($,"LI",{});var Swe=s(Ep);One=n(Swe,"STRONG",{});var KUr=s(One);opo=r(KUr,"flava"),KUr.forEach(t),rpo=r(Swe," \u2014 "),TI=n(Swe,"A",{href:!0});var ZUr=s(TI);tpo=r(ZUr,"FlavaModel"),ZUr.forEach(t),apo=r(Swe," (Flava model)"),Swe.forEach(t),npo=i($),Cp=n($,"LI",{});var Rwe=s(Cp);Vne=n(Rwe,"STRONG",{});var eJr=s(Vne);spo=r(eJr,"fnet"),eJr.forEach(t),lpo=r(Rwe," \u2014 "),MI=n(Rwe,"A",{href:!0});var oJr=s(MI);ipo=r(oJr,"FNetModel"),oJr.forEach(t),dpo=r(Rwe," (FNet model)"),Rwe.forEach(t),cpo=i($),wp=n($,"LI",{});var Bwe=s(wp);Xne=n(Bwe,"STRONG",{});var rJr=s(Xne);fpo=r(rJr,"fsmt"),rJr.forEach(t),mpo=r(Bwe," \u2014 "),EI=n(Bwe,"A",{href:!0});var tJr=s(EI);gpo=r(tJr,"FSMTModel"),tJr.forEach(t),hpo=r(Bwe," (FairSeq Machine-Translation model)"),Bwe.forEach(t),ppo=i($),Ss=n($,"LI",{});var p$=s(Ss);zne=n(p$,"STRONG",{});var aJr=s(zne);upo=r(aJr,"funnel"),aJr.forEach(t),_po=r(p$," \u2014 "),CI=n(p$,"A",{href:!0});var nJr=s(CI);bpo=r(nJr,"FunnelModel"),nJr.forEach(t),vpo=r(p$," or "),wI=n(p$,"A",{href:!0});var sJr=s(wI);Fpo=r(sJr,"FunnelBaseModel"),sJr.forEach(t),Tpo=r(p$," (Funnel Transformer model)"),p$.forEach(t),Mpo=i($),Ap=n($,"LI",{});var Pwe=s(Ap);Qne=n(Pwe,"STRONG",{});var lJr=s(Qne);Epo=r(lJr,"glpn"),lJr.forEach(t),Cpo=r(Pwe," \u2014 "),AI=n(Pwe,"A",{href:!0});var iJr=s(AI);wpo=r(iJr,"GLPNModel"),iJr.forEach(t),Apo=r(Pwe," (GLPN model)"),Pwe.forEach(t),ypo=i($),yp=n($,"LI",{});var Iwe=s(yp);Wne=n(Iwe,"STRONG",{});var dJr=s(Wne);Lpo=r(dJr,"gpt2"),dJr.forEach(t),xpo=r(Iwe," \u2014 "),yI=n(Iwe,"A",{href:!0});var cJr=s(yI);$po=r(cJr,"GPT2Model"),cJr.forEach(t),kpo=r(Iwe," (OpenAI GPT-2 model)"),Iwe.forEach(t),Spo=i($),Lp=n($,"LI",{});var qwe=s(Lp);Hne=n(qwe,"STRONG",{});var fJr=s(Hne);Rpo=r(fJr,"gpt_neo"),fJr.forEach(t),Bpo=r(qwe," \u2014 "),LI=n(qwe,"A",{href:!0});var mJr=s(LI);Ppo=r(mJr,"GPTNeoModel"),mJr.forEach(t),Ipo=r(qwe," (GPT Neo model)"),qwe.forEach(t),qpo=i($),xp=n($,"LI",{});var Nwe=s(xp);Une=n(Nwe,"STRONG",{});var gJr=s(Une);Npo=r(gJr,"gptj"),gJr.forEach(t),jpo=r(Nwe," \u2014 "),xI=n(Nwe,"A",{href:!0});var hJr=s(xI);Dpo=r(hJr,"GPTJModel"),hJr.forEach(t),Gpo=r(Nwe," (GPT-J model)"),Nwe.forEach(t),Opo=i($),$p=n($,"LI",{});var jwe=s($p);Jne=n(jwe,"STRONG",{});var pJr=s(Jne);Vpo=r(pJr,"hubert"),pJr.forEach(t),Xpo=r(jwe," \u2014 "),$I=n(jwe,"A",{href:!0});var uJr=s($I);zpo=r(uJr,"HubertModel"),uJr.forEach(t),Qpo=r(jwe," (Hubert model)"),jwe.forEach(t),Wpo=i($),kp=n($,"LI",{});var Dwe=s(kp);Yne=n(Dwe,"STRONG",{});var _Jr=s(Yne);Hpo=r(_Jr,"ibert"),_Jr.forEach(t),Upo=r(Dwe," \u2014 "),kI=n(Dwe,"A",{href:!0});var bJr=s(kI);Jpo=r(bJr,"IBertModel"),bJr.forEach(t),Ypo=r(Dwe," (I-BERT model)"),Dwe.forEach(t),Kpo=i($),Sp=n($,"LI",{});var Gwe=s(Sp);Kne=n(Gwe,"STRONG",{});var vJr=s(Kne);Zpo=r(vJr,"imagegpt"),vJr.forEach(t),euo=r(Gwe," \u2014 "),SI=n(Gwe,"A",{href:!0});var FJr=s(SI);ouo=r(FJr,"ImageGPTModel"),FJr.forEach(t),ruo=r(Gwe," (ImageGPT model)"),Gwe.forEach(t),tuo=i($),Rp=n($,"LI",{});var Owe=s(Rp);Zne=n(Owe,"STRONG",{});var TJr=s(Zne);auo=r(TJr,"layoutlm"),TJr.forEach(t),nuo=r(Owe," \u2014 "),RI=n(Owe,"A",{href:!0});var MJr=s(RI);suo=r(MJr,"LayoutLMModel"),MJr.forEach(t),luo=r(Owe," (LayoutLM model)"),Owe.forEach(t),iuo=i($),Bp=n($,"LI",{});var Vwe=s(Bp);ese=n(Vwe,"STRONG",{});var EJr=s(ese);duo=r(EJr,"layoutlmv2"),EJr.forEach(t),cuo=r(Vwe," \u2014 "),BI=n(Vwe,"A",{href:!0});var CJr=s(BI);fuo=r(CJr,"LayoutLMv2Model"),CJr.forEach(t),muo=r(Vwe," (LayoutLMv2 model)"),Vwe.forEach(t),guo=i($),Pp=n($,"LI",{});var Xwe=s(Pp);ose=n(Xwe,"STRONG",{});var wJr=s(ose);huo=r(wJr,"led"),wJr.forEach(t),puo=r(Xwe," \u2014 "),PI=n(Xwe,"A",{href:!0});var AJr=s(PI);uuo=r(AJr,"LEDModel"),AJr.forEach(t),_uo=r(Xwe," (LED model)"),Xwe.forEach(t),buo=i($),Ip=n($,"LI",{});var zwe=s(Ip);rse=n(zwe,"STRONG",{});var yJr=s(rse);vuo=r(yJr,"longformer"),yJr.forEach(t),Fuo=r(zwe," \u2014 "),II=n(zwe,"A",{href:!0});var LJr=s(II);Tuo=r(LJr,"LongformerModel"),LJr.forEach(t),Muo=r(zwe," (Longformer model)"),zwe.forEach(t),Euo=i($),qp=n($,"LI",{});var Qwe=s(qp);tse=n(Qwe,"STRONG",{});var xJr=s(tse);Cuo=r(xJr,"luke"),xJr.forEach(t),wuo=r(Qwe," \u2014 "),qI=n(Qwe,"A",{href:!0});var $Jr=s(qI);Auo=r($Jr,"LukeModel"),$Jr.forEach(t),yuo=r(Qwe," (LUKE model)"),Qwe.forEach(t),Luo=i($),Np=n($,"LI",{});var Wwe=s(Np);ase=n(Wwe,"STRONG",{});var kJr=s(ase);xuo=r(kJr,"lxmert"),kJr.forEach(t),$uo=r(Wwe," \u2014 "),NI=n(Wwe,"A",{href:!0});var SJr=s(NI);kuo=r(SJr,"LxmertModel"),SJr.forEach(t),Suo=r(Wwe," (LXMERT model)"),Wwe.forEach(t),Ruo=i($),jp=n($,"LI",{});var Hwe=s(jp);nse=n(Hwe,"STRONG",{});var RJr=s(nse);Buo=r(RJr,"m2m_100"),RJr.forEach(t),Puo=r(Hwe," \u2014 "),jI=n(Hwe,"A",{href:!0});var BJr=s(jI);Iuo=r(BJr,"M2M100Model"),BJr.forEach(t),quo=r(Hwe," (M2M100 model)"),Hwe.forEach(t),Nuo=i($),Dp=n($,"LI",{});var Uwe=s(Dp);sse=n(Uwe,"STRONG",{});var PJr=s(sse);juo=r(PJr,"marian"),PJr.forEach(t),Duo=r(Uwe," \u2014 "),DI=n(Uwe,"A",{href:!0});var IJr=s(DI);Guo=r(IJr,"MarianModel"),IJr.forEach(t),Ouo=r(Uwe," (Marian model)"),Uwe.forEach(t),Vuo=i($),Gp=n($,"LI",{});var Jwe=s(Gp);lse=n(Jwe,"STRONG",{});var qJr=s(lse);Xuo=r(qJr,"maskformer"),qJr.forEach(t),zuo=r(Jwe," \u2014 "),GI=n(Jwe,"A",{href:!0});var NJr=s(GI);Quo=r(NJr,"MaskFormerModel"),NJr.forEach(t),Wuo=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),Huo=i($),Op=n($,"LI",{});var Ywe=s(Op);ise=n(Ywe,"STRONG",{});var jJr=s(ise);Uuo=r(jJr,"mbart"),jJr.forEach(t),Juo=r(Ywe," \u2014 "),OI=n(Ywe,"A",{href:!0});var DJr=s(OI);Yuo=r(DJr,"MBartModel"),DJr.forEach(t),Kuo=r(Ywe," (mBART model)"),Ywe.forEach(t),Zuo=i($),Vp=n($,"LI",{});var Kwe=s(Vp);dse=n(Kwe,"STRONG",{});var GJr=s(dse);e_o=r(GJr,"megatron-bert"),GJr.forEach(t),o_o=r(Kwe," \u2014 "),VI=n(Kwe,"A",{href:!0});var OJr=s(VI);r_o=r(OJr,"MegatronBertModel"),OJr.forEach(t),t_o=r(Kwe," (MegatronBert model)"),Kwe.forEach(t),a_o=i($),Xp=n($,"LI",{});var Zwe=s(Xp);cse=n(Zwe,"STRONG",{});var VJr=s(cse);n_o=r(VJr,"mobilebert"),VJr.forEach(t),s_o=r(Zwe," \u2014 "),XI=n(Zwe,"A",{href:!0});var XJr=s(XI);l_o=r(XJr,"MobileBertModel"),XJr.forEach(t),i_o=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),d_o=i($),zp=n($,"LI",{});var eAe=s(zp);fse=n(eAe,"STRONG",{});var zJr=s(fse);c_o=r(zJr,"mobilevit"),zJr.forEach(t),f_o=r(eAe," \u2014 "),zI=n(eAe,"A",{href:!0});var QJr=s(zI);m_o=r(QJr,"MobileViTModel"),QJr.forEach(t),g_o=r(eAe," (MobileViT model)"),eAe.forEach(t),h_o=i($),Qp=n($,"LI",{});var oAe=s(Qp);mse=n(oAe,"STRONG",{});var WJr=s(mse);p_o=r(WJr,"mpnet"),WJr.forEach(t),u_o=r(oAe," \u2014 "),QI=n(oAe,"A",{href:!0});var HJr=s(QI);__o=r(HJr,"MPNetModel"),HJr.forEach(t),b_o=r(oAe," (MPNet model)"),oAe.forEach(t),v_o=i($),Wp=n($,"LI",{});var rAe=s(Wp);gse=n(rAe,"STRONG",{});var UJr=s(gse);F_o=r(UJr,"mt5"),UJr.forEach(t),T_o=r(rAe," \u2014 "),WI=n(rAe,"A",{href:!0});var JJr=s(WI);M_o=r(JJr,"MT5Model"),JJr.forEach(t),E_o=r(rAe," (mT5 model)"),rAe.forEach(t),C_o=i($),Hp=n($,"LI",{});var tAe=s(Hp);hse=n(tAe,"STRONG",{});var YJr=s(hse);w_o=r(YJr,"nystromformer"),YJr.forEach(t),A_o=r(tAe," \u2014 "),HI=n(tAe,"A",{href:!0});var KJr=s(HI);y_o=r(KJr,"NystromformerModel"),KJr.forEach(t),L_o=r(tAe," (Nystromformer model)"),tAe.forEach(t),x_o=i($),Up=n($,"LI",{});var aAe=s(Up);pse=n(aAe,"STRONG",{});var ZJr=s(pse);$_o=r(ZJr,"openai-gpt"),ZJr.forEach(t),k_o=r(aAe," \u2014 "),UI=n(aAe,"A",{href:!0});var eYr=s(UI);S_o=r(eYr,"OpenAIGPTModel"),eYr.forEach(t),R_o=r(aAe," (OpenAI GPT model)"),aAe.forEach(t),B_o=i($),Jp=n($,"LI",{});var nAe=s(Jp);use=n(nAe,"STRONG",{});var oYr=s(use);P_o=r(oYr,"opt"),oYr.forEach(t),I_o=r(nAe," \u2014 "),JI=n(nAe,"A",{href:!0});var rYr=s(JI);q_o=r(rYr,"OPTModel"),rYr.forEach(t),N_o=r(nAe," (OPT model)"),nAe.forEach(t),j_o=i($),Yp=n($,"LI",{});var sAe=s(Yp);_se=n(sAe,"STRONG",{});var tYr=s(_se);D_o=r(tYr,"pegasus"),tYr.forEach(t),G_o=r(sAe," \u2014 "),YI=n(sAe,"A",{href:!0});var aYr=s(YI);O_o=r(aYr,"PegasusModel"),aYr.forEach(t),V_o=r(sAe," (Pegasus model)"),sAe.forEach(t),X_o=i($),Kp=n($,"LI",{});var lAe=s(Kp);bse=n(lAe,"STRONG",{});var nYr=s(bse);z_o=r(nYr,"perceiver"),nYr.forEach(t),Q_o=r(lAe," \u2014 "),KI=n(lAe,"A",{href:!0});var sYr=s(KI);W_o=r(sYr,"PerceiverModel"),sYr.forEach(t),H_o=r(lAe," (Perceiver model)"),lAe.forEach(t),U_o=i($),Zp=n($,"LI",{});var iAe=s(Zp);vse=n(iAe,"STRONG",{});var lYr=s(vse);J_o=r(lYr,"plbart"),lYr.forEach(t),Y_o=r(iAe," \u2014 "),ZI=n(iAe,"A",{href:!0});var iYr=s(ZI);K_o=r(iYr,"PLBartModel"),iYr.forEach(t),Z_o=r(iAe," (PLBart model)"),iAe.forEach(t),e2o=i($),eu=n($,"LI",{});var dAe=s(eu);Fse=n(dAe,"STRONG",{});var dYr=s(Fse);o2o=r(dYr,"poolformer"),dYr.forEach(t),r2o=r(dAe," \u2014 "),eq=n(dAe,"A",{href:!0});var cYr=s(eq);t2o=r(cYr,"PoolFormerModel"),cYr.forEach(t),a2o=r(dAe," (PoolFormer model)"),dAe.forEach(t),n2o=i($),ou=n($,"LI",{});var cAe=s(ou);Tse=n(cAe,"STRONG",{});var fYr=s(Tse);s2o=r(fYr,"prophetnet"),fYr.forEach(t),l2o=r(cAe," \u2014 "),oq=n(cAe,"A",{href:!0});var mYr=s(oq);i2o=r(mYr,"ProphetNetModel"),mYr.forEach(t),d2o=r(cAe," (ProphetNet model)"),cAe.forEach(t),c2o=i($),ru=n($,"LI",{});var fAe=s(ru);Mse=n(fAe,"STRONG",{});var gYr=s(Mse);f2o=r(gYr,"qdqbert"),gYr.forEach(t),m2o=r(fAe," \u2014 "),rq=n(fAe,"A",{href:!0});var hYr=s(rq);g2o=r(hYr,"QDQBertModel"),hYr.forEach(t),h2o=r(fAe," (QDQBert model)"),fAe.forEach(t),p2o=i($),tu=n($,"LI",{});var mAe=s(tu);Ese=n(mAe,"STRONG",{});var pYr=s(Ese);u2o=r(pYr,"reformer"),pYr.forEach(t),_2o=r(mAe," \u2014 "),tq=n(mAe,"A",{href:!0});var uYr=s(tq);b2o=r(uYr,"ReformerModel"),uYr.forEach(t),v2o=r(mAe," (Reformer model)"),mAe.forEach(t),F2o=i($),au=n($,"LI",{});var gAe=s(au);Cse=n(gAe,"STRONG",{});var _Yr=s(Cse);T2o=r(_Yr,"regnet"),_Yr.forEach(t),M2o=r(gAe," \u2014 "),aq=n(gAe,"A",{href:!0});var bYr=s(aq);E2o=r(bYr,"RegNetModel"),bYr.forEach(t),C2o=r(gAe," (RegNet model)"),gAe.forEach(t),w2o=i($),nu=n($,"LI",{});var hAe=s(nu);wse=n(hAe,"STRONG",{});var vYr=s(wse);A2o=r(vYr,"rembert"),vYr.forEach(t),y2o=r(hAe," \u2014 "),nq=n(hAe,"A",{href:!0});var FYr=s(nq);L2o=r(FYr,"RemBertModel"),FYr.forEach(t),x2o=r(hAe," (RemBERT model)"),hAe.forEach(t),$2o=i($),su=n($,"LI",{});var pAe=s(su);Ase=n(pAe,"STRONG",{});var TYr=s(Ase);k2o=r(TYr,"resnet"),TYr.forEach(t),S2o=r(pAe," \u2014 "),sq=n(pAe,"A",{href:!0});var MYr=s(sq);R2o=r(MYr,"ResNetModel"),MYr.forEach(t),B2o=r(pAe," (ResNet model)"),pAe.forEach(t),P2o=i($),lu=n($,"LI",{});var uAe=s(lu);yse=n(uAe,"STRONG",{});var EYr=s(yse);I2o=r(EYr,"retribert"),EYr.forEach(t),q2o=r(uAe," \u2014 "),lq=n(uAe,"A",{href:!0});var CYr=s(lq);N2o=r(CYr,"RetriBertModel"),CYr.forEach(t),j2o=r(uAe," (RetriBERT model)"),uAe.forEach(t),D2o=i($),iu=n($,"LI",{});var _Ae=s(iu);Lse=n(_Ae,"STRONG",{});var wYr=s(Lse);G2o=r(wYr,"roberta"),wYr.forEach(t),O2o=r(_Ae," \u2014 "),iq=n(_Ae,"A",{href:!0});var AYr=s(iq);V2o=r(AYr,"RobertaModel"),AYr.forEach(t),X2o=r(_Ae," (RoBERTa model)"),_Ae.forEach(t),z2o=i($),du=n($,"LI",{});var bAe=s(du);xse=n(bAe,"STRONG",{});var yYr=s(xse);Q2o=r(yYr,"roformer"),yYr.forEach(t),W2o=r(bAe," \u2014 "),dq=n(bAe,"A",{href:!0});var LYr=s(dq);H2o=r(LYr,"RoFormerModel"),LYr.forEach(t),U2o=r(bAe," (RoFormer model)"),bAe.forEach(t),J2o=i($),cu=n($,"LI",{});var vAe=s(cu);$se=n(vAe,"STRONG",{});var xYr=s($se);Y2o=r(xYr,"segformer"),xYr.forEach(t),K2o=r(vAe," \u2014 "),cq=n(vAe,"A",{href:!0});var $Yr=s(cq);Z2o=r($Yr,"SegformerModel"),$Yr.forEach(t),e1o=r(vAe," (SegFormer model)"),vAe.forEach(t),o1o=i($),fu=n($,"LI",{});var FAe=s(fu);kse=n(FAe,"STRONG",{});var kYr=s(kse);r1o=r(kYr,"sew"),kYr.forEach(t),t1o=r(FAe," \u2014 "),fq=n(FAe,"A",{href:!0});var SYr=s(fq);a1o=r(SYr,"SEWModel"),SYr.forEach(t),n1o=r(FAe," (SEW model)"),FAe.forEach(t),s1o=i($),mu=n($,"LI",{});var TAe=s(mu);Sse=n(TAe,"STRONG",{});var RYr=s(Sse);l1o=r(RYr,"sew-d"),RYr.forEach(t),i1o=r(TAe," \u2014 "),mq=n(TAe,"A",{href:!0});var BYr=s(mq);d1o=r(BYr,"SEWDModel"),BYr.forEach(t),c1o=r(TAe," (SEW-D model)"),TAe.forEach(t),f1o=i($),gu=n($,"LI",{});var MAe=s(gu);Rse=n(MAe,"STRONG",{});var PYr=s(Rse);m1o=r(PYr,"speech_to_text"),PYr.forEach(t),g1o=r(MAe," \u2014 "),gq=n(MAe,"A",{href:!0});var IYr=s(gq);h1o=r(IYr,"Speech2TextModel"),IYr.forEach(t),p1o=r(MAe," (Speech2Text model)"),MAe.forEach(t),u1o=i($),hu=n($,"LI",{});var EAe=s(hu);Bse=n(EAe,"STRONG",{});var qYr=s(Bse);_1o=r(qYr,"splinter"),qYr.forEach(t),b1o=r(EAe," \u2014 "),hq=n(EAe,"A",{href:!0});var NYr=s(hq);v1o=r(NYr,"SplinterModel"),NYr.forEach(t),F1o=r(EAe," (Splinter model)"),EAe.forEach(t),T1o=i($),pu=n($,"LI",{});var CAe=s(pu);Pse=n(CAe,"STRONG",{});var jYr=s(Pse);M1o=r(jYr,"squeezebert"),jYr.forEach(t),E1o=r(CAe," \u2014 "),pq=n(CAe,"A",{href:!0});var DYr=s(pq);C1o=r(DYr,"SqueezeBertModel"),DYr.forEach(t),w1o=r(CAe," (SqueezeBERT model)"),CAe.forEach(t),A1o=i($),uu=n($,"LI",{});var wAe=s(uu);Ise=n(wAe,"STRONG",{});var GYr=s(Ise);y1o=r(GYr,"swin"),GYr.forEach(t),L1o=r(wAe," \u2014 "),uq=n(wAe,"A",{href:!0});var OYr=s(uq);x1o=r(OYr,"SwinModel"),OYr.forEach(t),$1o=r(wAe," (Swin model)"),wAe.forEach(t),k1o=i($),_u=n($,"LI",{});var AAe=s(_u);qse=n(AAe,"STRONG",{});var VYr=s(qse);S1o=r(VYr,"t5"),VYr.forEach(t),R1o=r(AAe," \u2014 "),_q=n(AAe,"A",{href:!0});var XYr=s(_q);B1o=r(XYr,"T5Model"),XYr.forEach(t),P1o=r(AAe," (T5 model)"),AAe.forEach(t),I1o=i($),bu=n($,"LI",{});var yAe=s(bu);Nse=n(yAe,"STRONG",{});var zYr=s(Nse);q1o=r(zYr,"tapas"),zYr.forEach(t),N1o=r(yAe," \u2014 "),bq=n(yAe,"A",{href:!0});var QYr=s(bq);j1o=r(QYr,"TapasModel"),QYr.forEach(t),D1o=r(yAe," (TAPAS model)"),yAe.forEach(t),G1o=i($),vu=n($,"LI",{});var LAe=s(vu);jse=n(LAe,"STRONG",{});var WYr=s(jse);O1o=r(WYr,"transfo-xl"),WYr.forEach(t),V1o=r(LAe," \u2014 "),vq=n(LAe,"A",{href:!0});var HYr=s(vq);X1o=r(HYr,"TransfoXLModel"),HYr.forEach(t),z1o=r(LAe," (Transformer-XL model)"),LAe.forEach(t),Q1o=i($),Fu=n($,"LI",{});var xAe=s(Fu);Dse=n(xAe,"STRONG",{});var UYr=s(Dse);W1o=r(UYr,"unispeech"),UYr.forEach(t),H1o=r(xAe," \u2014 "),Fq=n(xAe,"A",{href:!0});var JYr=s(Fq);U1o=r(JYr,"UniSpeechModel"),JYr.forEach(t),J1o=r(xAe," (UniSpeech model)"),xAe.forEach(t),Y1o=i($),Tu=n($,"LI",{});var $Ae=s(Tu);Gse=n($Ae,"STRONG",{});var YYr=s(Gse);K1o=r(YYr,"unispeech-sat"),YYr.forEach(t),Z1o=r($Ae," \u2014 "),Tq=n($Ae,"A",{href:!0});var KYr=s(Tq);ebo=r(KYr,"UniSpeechSatModel"),KYr.forEach(t),obo=r($Ae," (UniSpeechSat model)"),$Ae.forEach(t),rbo=i($),Mu=n($,"LI",{});var kAe=s(Mu);Ose=n(kAe,"STRONG",{});var ZYr=s(Ose);tbo=r(ZYr,"van"),ZYr.forEach(t),abo=r(kAe," \u2014 "),Mq=n(kAe,"A",{href:!0});var eKr=s(Mq);nbo=r(eKr,"VanModel"),eKr.forEach(t),sbo=r(kAe," (VAN model)"),kAe.forEach(t),lbo=i($),Eu=n($,"LI",{});var SAe=s(Eu);Vse=n(SAe,"STRONG",{});var oKr=s(Vse);ibo=r(oKr,"vilt"),oKr.forEach(t),dbo=r(SAe," \u2014 "),Eq=n(SAe,"A",{href:!0});var rKr=s(Eq);cbo=r(rKr,"ViltModel"),rKr.forEach(t),fbo=r(SAe," (ViLT model)"),SAe.forEach(t),mbo=i($),Cu=n($,"LI",{});var RAe=s(Cu);Xse=n(RAe,"STRONG",{});var tKr=s(Xse);gbo=r(tKr,"vision-text-dual-encoder"),tKr.forEach(t),hbo=r(RAe," \u2014 "),Cq=n(RAe,"A",{href:!0});var aKr=s(Cq);pbo=r(aKr,"VisionTextDualEncoderModel"),aKr.forEach(t),ubo=r(RAe," (VisionTextDualEncoder model)"),RAe.forEach(t),_bo=i($),wu=n($,"LI",{});var BAe=s(wu);zse=n(BAe,"STRONG",{});var nKr=s(zse);bbo=r(nKr,"visual_bert"),nKr.forEach(t),vbo=r(BAe," \u2014 "),wq=n(BAe,"A",{href:!0});var sKr=s(wq);Fbo=r(sKr,"VisualBertModel"),sKr.forEach(t),Tbo=r(BAe," (VisualBert model)"),BAe.forEach(t),Mbo=i($),Au=n($,"LI",{});var PAe=s(Au);Qse=n(PAe,"STRONG",{});var lKr=s(Qse);Ebo=r(lKr,"vit"),lKr.forEach(t),Cbo=r(PAe," \u2014 "),Aq=n(PAe,"A",{href:!0});var iKr=s(Aq);wbo=r(iKr,"ViTModel"),iKr.forEach(t),Abo=r(PAe," (ViT model)"),PAe.forEach(t),ybo=i($),yu=n($,"LI",{});var IAe=s(yu);Wse=n(IAe,"STRONG",{});var dKr=s(Wse);Lbo=r(dKr,"vit_mae"),dKr.forEach(t),xbo=r(IAe," \u2014 "),yq=n(IAe,"A",{href:!0});var cKr=s(yq);$bo=r(cKr,"ViTMAEModel"),cKr.forEach(t),kbo=r(IAe," (ViTMAE model)"),IAe.forEach(t),Sbo=i($),Lu=n($,"LI",{});var qAe=s(Lu);Hse=n(qAe,"STRONG",{});var fKr=s(Hse);Rbo=r(fKr,"wav2vec2"),fKr.forEach(t),Bbo=r(qAe," \u2014 "),Lq=n(qAe,"A",{href:!0});var mKr=s(Lq);Pbo=r(mKr,"Wav2Vec2Model"),mKr.forEach(t),Ibo=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),qbo=i($),xu=n($,"LI",{});var NAe=s(xu);Use=n(NAe,"STRONG",{});var gKr=s(Use);Nbo=r(gKr,"wavlm"),gKr.forEach(t),jbo=r(NAe," \u2014 "),xq=n(NAe,"A",{href:!0});var hKr=s(xq);Dbo=r(hKr,"WavLMModel"),hKr.forEach(t),Gbo=r(NAe," (WavLM model)"),NAe.forEach(t),Obo=i($),$u=n($,"LI",{});var jAe=s($u);Jse=n(jAe,"STRONG",{});var pKr=s(Jse);Vbo=r(pKr,"xglm"),pKr.forEach(t),Xbo=r(jAe," \u2014 "),$q=n(jAe,"A",{href:!0});var uKr=s($q);zbo=r(uKr,"XGLMModel"),uKr.forEach(t),Qbo=r(jAe," (XGLM model)"),jAe.forEach(t),Wbo=i($),ku=n($,"LI",{});var DAe=s(ku);Yse=n(DAe,"STRONG",{});var _Kr=s(Yse);Hbo=r(_Kr,"xlm"),_Kr.forEach(t),Ubo=r(DAe," \u2014 "),kq=n(DAe,"A",{href:!0});var bKr=s(kq);Jbo=r(bKr,"XLMModel"),bKr.forEach(t),Ybo=r(DAe," (XLM model)"),DAe.forEach(t),Kbo=i($),Su=n($,"LI",{});var GAe=s(Su);Kse=n(GAe,"STRONG",{});var vKr=s(Kse);Zbo=r(vKr,"xlm-prophetnet"),vKr.forEach(t),e5o=r(GAe," \u2014 "),Sq=n(GAe,"A",{href:!0});var FKr=s(Sq);o5o=r(FKr,"XLMProphetNetModel"),FKr.forEach(t),r5o=r(GAe," (XLMProphetNet model)"),GAe.forEach(t),t5o=i($),Ru=n($,"LI",{});var OAe=s(Ru);Zse=n(OAe,"STRONG",{});var TKr=s(Zse);a5o=r(TKr,"xlm-roberta"),TKr.forEach(t),n5o=r(OAe," \u2014 "),Rq=n(OAe,"A",{href:!0});var MKr=s(Rq);s5o=r(MKr,"XLMRobertaModel"),MKr.forEach(t),l5o=r(OAe," (XLM-RoBERTa model)"),OAe.forEach(t),i5o=i($),Bu=n($,"LI",{});var VAe=s(Bu);ele=n(VAe,"STRONG",{});var EKr=s(ele);d5o=r(EKr,"xlm-roberta-xl"),EKr.forEach(t),c5o=r(VAe," \u2014 "),Bq=n(VAe,"A",{href:!0});var CKr=s(Bq);f5o=r(CKr,"XLMRobertaXLModel"),CKr.forEach(t),m5o=r(VAe," (XLM-RoBERTa-XL model)"),VAe.forEach(t),g5o=i($),Pu=n($,"LI",{});var XAe=s(Pu);ole=n(XAe,"STRONG",{});var wKr=s(ole);h5o=r(wKr,"xlnet"),wKr.forEach(t),p5o=r(XAe," \u2014 "),Pq=n(XAe,"A",{href:!0});var AKr=s(Pq);u5o=r(AKr,"XLNetModel"),AKr.forEach(t),_5o=r(XAe," (XLNet model)"),XAe.forEach(t),b5o=i($),Iu=n($,"LI",{});var zAe=s(Iu);rle=n(zAe,"STRONG",{});var yKr=s(rle);v5o=r(yKr,"yolos"),yKr.forEach(t),F5o=r(zAe," \u2014 "),Iq=n(zAe,"A",{href:!0});var LKr=s(Iq);T5o=r(LKr,"YolosModel"),LKr.forEach(t),M5o=r(zAe," (YOLOS model)"),zAe.forEach(t),E5o=i($),qu=n($,"LI",{});var QAe=s(qu);tle=n(QAe,"STRONG",{});var xKr=s(tle);C5o=r(xKr,"yoso"),xKr.forEach(t),w5o=r(QAe," \u2014 "),qq=n(QAe,"A",{href:!0});var $Kr=s(qq);A5o=r($Kr,"YosoModel"),$Kr.forEach(t),y5o=r(QAe," (YOSO model)"),QAe.forEach(t),$.forEach(t),L5o=i(Zt),Nu=n(Zt,"P",{});var WAe=s(Nu);x5o=r(WAe,"The model is set in evaluation mode by default using "),ale=n(WAe,"CODE",{});var kKr=s(ale);$5o=r(kKr,"model.eval()"),kKr.forEach(t),k5o=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=n(WAe,"CODE",{});var SKr=s(nle);S5o=r(SKr,"model.train()"),SKr.forEach(t),WAe.forEach(t),R5o=i(Zt),T(ju.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),FIe=i(f),Ci=n(f,"H2",{class:!0});var CNe=s(Ci);Du=n(CNe,"A",{id:!0,class:!0,href:!0});var RKr=s(Du);sle=n(RKr,"SPAN",{});var BKr=s(sle);T(S6.$$.fragment,BKr),BKr.forEach(t),RKr.forEach(t),B5o=i(CNe),lle=n(CNe,"SPAN",{});var PKr=s(lle);P5o=r(PKr,"AutoModelForPreTraining"),PKr.forEach(t),CNe.forEach(t),TIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(R6.$$.fragment,Ds),I5o=i(Ds),wi=n(Ds,"P",{});var bK=s(wi);q5o=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nq=n(bK,"A",{href:!0});var IKr=s(Nq);N5o=r(IKr,"from_pretrained()"),IKr.forEach(t),j5o=r(bK," class method or the "),jq=n(bK,"A",{href:!0});var qKr=s(jq);D5o=r(qKr,"from_config()"),qKr.forEach(t),G5o=r(bK,` class
method.`),bK.forEach(t),O5o=i(Ds),B6=n(Ds,"P",{});var wNe=s(B6);V5o=r(wNe,"This class cannot be instantiated directly using "),ile=n(wNe,"CODE",{});var NKr=s(ile);X5o=r(NKr,"__init__()"),NKr.forEach(t),z5o=r(wNe," (throws an error)."),wNe.forEach(t),Q5o=i(Ds),rt=n(Ds,"DIV",{class:!0});var sw=s(rt);T(P6.$$.fragment,sw),W5o=i(sw),dle=n(sw,"P",{});var jKr=s(dle);H5o=r(jKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jKr.forEach(t),U5o=i(sw),Ai=n(sw,"P",{});var vK=s(Ai);J5o=r(vK,`Note:
Loading a model from its configuration file does `),cle=n(vK,"STRONG",{});var DKr=s(cle);Y5o=r(DKr,"not"),DKr.forEach(t),K5o=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dq=n(vK,"A",{href:!0});var GKr=s(Dq);Z5o=r(GKr,"from_pretrained()"),GKr.forEach(t),evo=r(vK," to load the model weights."),vK.forEach(t),ovo=i(sw),T(Gu.$$.fragment,sw),sw.forEach(t),rvo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(I6.$$.fragment,ea),tvo=i(ea),fle=n(ea,"P",{});var OKr=s(fle);avo=r(OKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OKr.forEach(t),nvo=i(ea),ya=n(ea,"P",{});var lw=s(ya);svo=r(lw,"The model class to instantiate is selected based on the "),mle=n(lw,"CODE",{});var VKr=s(mle);lvo=r(VKr,"model_type"),VKr.forEach(t),ivo=r(lw,` property of the config object (either
passed as an argument or loaded from `),gle=n(lw,"CODE",{});var XKr=s(gle);dvo=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),cvo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(lw,"CODE",{});var zKr=s(hle);fvo=r(zKr,"pretrained_model_name_or_path"),zKr.forEach(t),mvo=r(lw,":"),lw.forEach(t),gvo=i(ea),G=n(ea,"UL",{});var V=s(G);Ou=n(V,"LI",{});var HAe=s(Ou);ple=n(HAe,"STRONG",{});var QKr=s(ple);hvo=r(QKr,"albert"),QKr.forEach(t),pvo=r(HAe," \u2014 "),Gq=n(HAe,"A",{href:!0});var WKr=s(Gq);uvo=r(WKr,"AlbertForPreTraining"),WKr.forEach(t),_vo=r(HAe," (ALBERT model)"),HAe.forEach(t),bvo=i(V),Vu=n(V,"LI",{});var UAe=s(Vu);ule=n(UAe,"STRONG",{});var HKr=s(ule);vvo=r(HKr,"bart"),HKr.forEach(t),Fvo=r(UAe," \u2014 "),Oq=n(UAe,"A",{href:!0});var UKr=s(Oq);Tvo=r(UKr,"BartForConditionalGeneration"),UKr.forEach(t),Mvo=r(UAe," (BART model)"),UAe.forEach(t),Evo=i(V),Xu=n(V,"LI",{});var JAe=s(Xu);_le=n(JAe,"STRONG",{});var JKr=s(_le);Cvo=r(JKr,"bert"),JKr.forEach(t),wvo=r(JAe," \u2014 "),Vq=n(JAe,"A",{href:!0});var YKr=s(Vq);Avo=r(YKr,"BertForPreTraining"),YKr.forEach(t),yvo=r(JAe," (BERT model)"),JAe.forEach(t),Lvo=i(V),zu=n(V,"LI",{});var YAe=s(zu);ble=n(YAe,"STRONG",{});var KKr=s(ble);xvo=r(KKr,"big_bird"),KKr.forEach(t),$vo=r(YAe," \u2014 "),Xq=n(YAe,"A",{href:!0});var ZKr=s(Xq);kvo=r(ZKr,"BigBirdForPreTraining"),ZKr.forEach(t),Svo=r(YAe," (BigBird model)"),YAe.forEach(t),Rvo=i(V),Qu=n(V,"LI",{});var KAe=s(Qu);vle=n(KAe,"STRONG",{});var eZr=s(vle);Bvo=r(eZr,"camembert"),eZr.forEach(t),Pvo=r(KAe," \u2014 "),zq=n(KAe,"A",{href:!0});var oZr=s(zq);Ivo=r(oZr,"CamembertForMaskedLM"),oZr.forEach(t),qvo=r(KAe," (CamemBERT model)"),KAe.forEach(t),Nvo=i(V),Wu=n(V,"LI",{});var ZAe=s(Wu);Fle=n(ZAe,"STRONG",{});var rZr=s(Fle);jvo=r(rZr,"ctrl"),rZr.forEach(t),Dvo=r(ZAe," \u2014 "),Qq=n(ZAe,"A",{href:!0});var tZr=s(Qq);Gvo=r(tZr,"CTRLLMHeadModel"),tZr.forEach(t),Ovo=r(ZAe," (CTRL model)"),ZAe.forEach(t),Vvo=i(V),Hu=n(V,"LI",{});var e6e=s(Hu);Tle=n(e6e,"STRONG",{});var aZr=s(Tle);Xvo=r(aZr,"data2vec-text"),aZr.forEach(t),zvo=r(e6e," \u2014 "),Wq=n(e6e,"A",{href:!0});var nZr=s(Wq);Qvo=r(nZr,"Data2VecTextForMaskedLM"),nZr.forEach(t),Wvo=r(e6e," (Data2VecText model)"),e6e.forEach(t),Hvo=i(V),Uu=n(V,"LI",{});var o6e=s(Uu);Mle=n(o6e,"STRONG",{});var sZr=s(Mle);Uvo=r(sZr,"deberta"),sZr.forEach(t),Jvo=r(o6e," \u2014 "),Hq=n(o6e,"A",{href:!0});var lZr=s(Hq);Yvo=r(lZr,"DebertaForMaskedLM"),lZr.forEach(t),Kvo=r(o6e," (DeBERTa model)"),o6e.forEach(t),Zvo=i(V),Ju=n(V,"LI",{});var r6e=s(Ju);Ele=n(r6e,"STRONG",{});var iZr=s(Ele);eFo=r(iZr,"deberta-v2"),iZr.forEach(t),oFo=r(r6e," \u2014 "),Uq=n(r6e,"A",{href:!0});var dZr=s(Uq);rFo=r(dZr,"DebertaV2ForMaskedLM"),dZr.forEach(t),tFo=r(r6e," (DeBERTa-v2 model)"),r6e.forEach(t),aFo=i(V),Yu=n(V,"LI",{});var t6e=s(Yu);Cle=n(t6e,"STRONG",{});var cZr=s(Cle);nFo=r(cZr,"distilbert"),cZr.forEach(t),sFo=r(t6e," \u2014 "),Jq=n(t6e,"A",{href:!0});var fZr=s(Jq);lFo=r(fZr,"DistilBertForMaskedLM"),fZr.forEach(t),iFo=r(t6e," (DistilBERT model)"),t6e.forEach(t),dFo=i(V),Ku=n(V,"LI",{});var a6e=s(Ku);wle=n(a6e,"STRONG",{});var mZr=s(wle);cFo=r(mZr,"electra"),mZr.forEach(t),fFo=r(a6e," \u2014 "),Yq=n(a6e,"A",{href:!0});var gZr=s(Yq);mFo=r(gZr,"ElectraForPreTraining"),gZr.forEach(t),gFo=r(a6e," (ELECTRA model)"),a6e.forEach(t),hFo=i(V),Zu=n(V,"LI",{});var n6e=s(Zu);Ale=n(n6e,"STRONG",{});var hZr=s(Ale);pFo=r(hZr,"flaubert"),hZr.forEach(t),uFo=r(n6e," \u2014 "),Kq=n(n6e,"A",{href:!0});var pZr=s(Kq);_Fo=r(pZr,"FlaubertWithLMHeadModel"),pZr.forEach(t),bFo=r(n6e," (FlauBERT model)"),n6e.forEach(t),vFo=i(V),e_=n(V,"LI",{});var s6e=s(e_);yle=n(s6e,"STRONG",{});var uZr=s(yle);FFo=r(uZr,"flava"),uZr.forEach(t),TFo=r(s6e," \u2014 "),Zq=n(s6e,"A",{href:!0});var _Zr=s(Zq);MFo=r(_Zr,"FlavaForPreTraining"),_Zr.forEach(t),EFo=r(s6e," (Flava model)"),s6e.forEach(t),CFo=i(V),o_=n(V,"LI",{});var l6e=s(o_);Lle=n(l6e,"STRONG",{});var bZr=s(Lle);wFo=r(bZr,"fnet"),bZr.forEach(t),AFo=r(l6e," \u2014 "),eN=n(l6e,"A",{href:!0});var vZr=s(eN);yFo=r(vZr,"FNetForPreTraining"),vZr.forEach(t),LFo=r(l6e," (FNet model)"),l6e.forEach(t),xFo=i(V),r_=n(V,"LI",{});var i6e=s(r_);xle=n(i6e,"STRONG",{});var FZr=s(xle);$Fo=r(FZr,"fsmt"),FZr.forEach(t),kFo=r(i6e," \u2014 "),oN=n(i6e,"A",{href:!0});var TZr=s(oN);SFo=r(TZr,"FSMTForConditionalGeneration"),TZr.forEach(t),RFo=r(i6e," (FairSeq Machine-Translation model)"),i6e.forEach(t),BFo=i(V),t_=n(V,"LI",{});var d6e=s(t_);$le=n(d6e,"STRONG",{});var MZr=s($le);PFo=r(MZr,"funnel"),MZr.forEach(t),IFo=r(d6e," \u2014 "),rN=n(d6e,"A",{href:!0});var EZr=s(rN);qFo=r(EZr,"FunnelForPreTraining"),EZr.forEach(t),NFo=r(d6e," (Funnel Transformer model)"),d6e.forEach(t),jFo=i(V),a_=n(V,"LI",{});var c6e=s(a_);kle=n(c6e,"STRONG",{});var CZr=s(kle);DFo=r(CZr,"gpt2"),CZr.forEach(t),GFo=r(c6e," \u2014 "),tN=n(c6e,"A",{href:!0});var wZr=s(tN);OFo=r(wZr,"GPT2LMHeadModel"),wZr.forEach(t),VFo=r(c6e," (OpenAI GPT-2 model)"),c6e.forEach(t),XFo=i(V),n_=n(V,"LI",{});var f6e=s(n_);Sle=n(f6e,"STRONG",{});var AZr=s(Sle);zFo=r(AZr,"ibert"),AZr.forEach(t),QFo=r(f6e," \u2014 "),aN=n(f6e,"A",{href:!0});var yZr=s(aN);WFo=r(yZr,"IBertForMaskedLM"),yZr.forEach(t),HFo=r(f6e," (I-BERT model)"),f6e.forEach(t),UFo=i(V),s_=n(V,"LI",{});var m6e=s(s_);Rle=n(m6e,"STRONG",{});var LZr=s(Rle);JFo=r(LZr,"layoutlm"),LZr.forEach(t),YFo=r(m6e," \u2014 "),nN=n(m6e,"A",{href:!0});var xZr=s(nN);KFo=r(xZr,"LayoutLMForMaskedLM"),xZr.forEach(t),ZFo=r(m6e," (LayoutLM model)"),m6e.forEach(t),e0o=i(V),l_=n(V,"LI",{});var g6e=s(l_);Ble=n(g6e,"STRONG",{});var $Zr=s(Ble);o0o=r($Zr,"longformer"),$Zr.forEach(t),r0o=r(g6e," \u2014 "),sN=n(g6e,"A",{href:!0});var kZr=s(sN);t0o=r(kZr,"LongformerForMaskedLM"),kZr.forEach(t),a0o=r(g6e," (Longformer model)"),g6e.forEach(t),n0o=i(V),i_=n(V,"LI",{});var h6e=s(i_);Ple=n(h6e,"STRONG",{});var SZr=s(Ple);s0o=r(SZr,"lxmert"),SZr.forEach(t),l0o=r(h6e," \u2014 "),lN=n(h6e,"A",{href:!0});var RZr=s(lN);i0o=r(RZr,"LxmertForPreTraining"),RZr.forEach(t),d0o=r(h6e," (LXMERT model)"),h6e.forEach(t),c0o=i(V),d_=n(V,"LI",{});var p6e=s(d_);Ile=n(p6e,"STRONG",{});var BZr=s(Ile);f0o=r(BZr,"megatron-bert"),BZr.forEach(t),m0o=r(p6e," \u2014 "),iN=n(p6e,"A",{href:!0});var PZr=s(iN);g0o=r(PZr,"MegatronBertForPreTraining"),PZr.forEach(t),h0o=r(p6e," (MegatronBert model)"),p6e.forEach(t),p0o=i(V),c_=n(V,"LI",{});var u6e=s(c_);qle=n(u6e,"STRONG",{});var IZr=s(qle);u0o=r(IZr,"mobilebert"),IZr.forEach(t),_0o=r(u6e," \u2014 "),dN=n(u6e,"A",{href:!0});var qZr=s(dN);b0o=r(qZr,"MobileBertForPreTraining"),qZr.forEach(t),v0o=r(u6e," (MobileBERT model)"),u6e.forEach(t),F0o=i(V),f_=n(V,"LI",{});var _6e=s(f_);Nle=n(_6e,"STRONG",{});var NZr=s(Nle);T0o=r(NZr,"mpnet"),NZr.forEach(t),M0o=r(_6e," \u2014 "),cN=n(_6e,"A",{href:!0});var jZr=s(cN);E0o=r(jZr,"MPNetForMaskedLM"),jZr.forEach(t),C0o=r(_6e," (MPNet model)"),_6e.forEach(t),w0o=i(V),m_=n(V,"LI",{});var b6e=s(m_);jle=n(b6e,"STRONG",{});var DZr=s(jle);A0o=r(DZr,"openai-gpt"),DZr.forEach(t),y0o=r(b6e," \u2014 "),fN=n(b6e,"A",{href:!0});var GZr=s(fN);L0o=r(GZr,"OpenAIGPTLMHeadModel"),GZr.forEach(t),x0o=r(b6e," (OpenAI GPT model)"),b6e.forEach(t),$0o=i(V),g_=n(V,"LI",{});var v6e=s(g_);Dle=n(v6e,"STRONG",{});var OZr=s(Dle);k0o=r(OZr,"retribert"),OZr.forEach(t),S0o=r(v6e," \u2014 "),mN=n(v6e,"A",{href:!0});var VZr=s(mN);R0o=r(VZr,"RetriBertModel"),VZr.forEach(t),B0o=r(v6e," (RetriBERT model)"),v6e.forEach(t),P0o=i(V),h_=n(V,"LI",{});var F6e=s(h_);Gle=n(F6e,"STRONG",{});var XZr=s(Gle);I0o=r(XZr,"roberta"),XZr.forEach(t),q0o=r(F6e," \u2014 "),gN=n(F6e,"A",{href:!0});var zZr=s(gN);N0o=r(zZr,"RobertaForMaskedLM"),zZr.forEach(t),j0o=r(F6e," (RoBERTa model)"),F6e.forEach(t),D0o=i(V),p_=n(V,"LI",{});var T6e=s(p_);Ole=n(T6e,"STRONG",{});var QZr=s(Ole);G0o=r(QZr,"squeezebert"),QZr.forEach(t),O0o=r(T6e," \u2014 "),hN=n(T6e,"A",{href:!0});var WZr=s(hN);V0o=r(WZr,"SqueezeBertForMaskedLM"),WZr.forEach(t),X0o=r(T6e," (SqueezeBERT model)"),T6e.forEach(t),z0o=i(V),u_=n(V,"LI",{});var M6e=s(u_);Vle=n(M6e,"STRONG",{});var HZr=s(Vle);Q0o=r(HZr,"t5"),HZr.forEach(t),W0o=r(M6e," \u2014 "),pN=n(M6e,"A",{href:!0});var UZr=s(pN);H0o=r(UZr,"T5ForConditionalGeneration"),UZr.forEach(t),U0o=r(M6e," (T5 model)"),M6e.forEach(t),J0o=i(V),__=n(V,"LI",{});var E6e=s(__);Xle=n(E6e,"STRONG",{});var JZr=s(Xle);Y0o=r(JZr,"tapas"),JZr.forEach(t),K0o=r(E6e," \u2014 "),uN=n(E6e,"A",{href:!0});var YZr=s(uN);Z0o=r(YZr,"TapasForMaskedLM"),YZr.forEach(t),eTo=r(E6e," (TAPAS model)"),E6e.forEach(t),oTo=i(V),b_=n(V,"LI",{});var C6e=s(b_);zle=n(C6e,"STRONG",{});var KZr=s(zle);rTo=r(KZr,"transfo-xl"),KZr.forEach(t),tTo=r(C6e," \u2014 "),_N=n(C6e,"A",{href:!0});var ZZr=s(_N);aTo=r(ZZr,"TransfoXLLMHeadModel"),ZZr.forEach(t),nTo=r(C6e," (Transformer-XL model)"),C6e.forEach(t),sTo=i(V),v_=n(V,"LI",{});var w6e=s(v_);Qle=n(w6e,"STRONG",{});var eet=s(Qle);lTo=r(eet,"unispeech"),eet.forEach(t),iTo=r(w6e," \u2014 "),bN=n(w6e,"A",{href:!0});var oet=s(bN);dTo=r(oet,"UniSpeechForPreTraining"),oet.forEach(t),cTo=r(w6e," (UniSpeech model)"),w6e.forEach(t),fTo=i(V),F_=n(V,"LI",{});var A6e=s(F_);Wle=n(A6e,"STRONG",{});var ret=s(Wle);mTo=r(ret,"unispeech-sat"),ret.forEach(t),gTo=r(A6e," \u2014 "),vN=n(A6e,"A",{href:!0});var tet=s(vN);hTo=r(tet,"UniSpeechSatForPreTraining"),tet.forEach(t),pTo=r(A6e," (UniSpeechSat model)"),A6e.forEach(t),uTo=i(V),T_=n(V,"LI",{});var y6e=s(T_);Hle=n(y6e,"STRONG",{});var aet=s(Hle);_To=r(aet,"visual_bert"),aet.forEach(t),bTo=r(y6e," \u2014 "),FN=n(y6e,"A",{href:!0});var net=s(FN);vTo=r(net,"VisualBertForPreTraining"),net.forEach(t),FTo=r(y6e," (VisualBert model)"),y6e.forEach(t),TTo=i(V),M_=n(V,"LI",{});var L6e=s(M_);Ule=n(L6e,"STRONG",{});var set=s(Ule);MTo=r(set,"vit_mae"),set.forEach(t),ETo=r(L6e," \u2014 "),TN=n(L6e,"A",{href:!0});var iet=s(TN);CTo=r(iet,"ViTMAEForPreTraining"),iet.forEach(t),wTo=r(L6e," (ViTMAE model)"),L6e.forEach(t),ATo=i(V),E_=n(V,"LI",{});var x6e=s(E_);Jle=n(x6e,"STRONG",{});var det=s(Jle);yTo=r(det,"wav2vec2"),det.forEach(t),LTo=r(x6e," \u2014 "),MN=n(x6e,"A",{href:!0});var cet=s(MN);xTo=r(cet,"Wav2Vec2ForPreTraining"),cet.forEach(t),$To=r(x6e," (Wav2Vec2 model)"),x6e.forEach(t),kTo=i(V),C_=n(V,"LI",{});var $6e=s(C_);Yle=n($6e,"STRONG",{});var fet=s(Yle);STo=r(fet,"xlm"),fet.forEach(t),RTo=r($6e," \u2014 "),EN=n($6e,"A",{href:!0});var met=s(EN);BTo=r(met,"XLMWithLMHeadModel"),met.forEach(t),PTo=r($6e," (XLM model)"),$6e.forEach(t),ITo=i(V),w_=n(V,"LI",{});var k6e=s(w_);Kle=n(k6e,"STRONG",{});var get=s(Kle);qTo=r(get,"xlm-roberta"),get.forEach(t),NTo=r(k6e," \u2014 "),CN=n(k6e,"A",{href:!0});var het=s(CN);jTo=r(het,"XLMRobertaForMaskedLM"),het.forEach(t),DTo=r(k6e," (XLM-RoBERTa model)"),k6e.forEach(t),GTo=i(V),A_=n(V,"LI",{});var S6e=s(A_);Zle=n(S6e,"STRONG",{});var pet=s(Zle);OTo=r(pet,"xlm-roberta-xl"),pet.forEach(t),VTo=r(S6e," \u2014 "),wN=n(S6e,"A",{href:!0});var uet=s(wN);XTo=r(uet,"XLMRobertaXLForMaskedLM"),uet.forEach(t),zTo=r(S6e," (XLM-RoBERTa-XL model)"),S6e.forEach(t),QTo=i(V),y_=n(V,"LI",{});var R6e=s(y_);eie=n(R6e,"STRONG",{});var _et=s(eie);WTo=r(_et,"xlnet"),_et.forEach(t),HTo=r(R6e," \u2014 "),AN=n(R6e,"A",{href:!0});var bet=s(AN);UTo=r(bet,"XLNetLMHeadModel"),bet.forEach(t),JTo=r(R6e," (XLNet model)"),R6e.forEach(t),V.forEach(t),YTo=i(ea),L_=n(ea,"P",{});var B6e=s(L_);KTo=r(B6e,"The model is set in evaluation mode by default using "),oie=n(B6e,"CODE",{});var vet=s(oie);ZTo=r(vet,"model.eval()"),vet.forEach(t),e7o=r(B6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(B6e,"CODE",{});var Fet=s(rie);o7o=r(Fet,"model.train()"),Fet.forEach(t),B6e.forEach(t),r7o=i(ea),T(x_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),MIe=i(f),yi=n(f,"H2",{class:!0});var ANe=s(yi);$_=n(ANe,"A",{id:!0,class:!0,href:!0});var Tet=s($_);tie=n(Tet,"SPAN",{});var Met=s(tie);T(q6.$$.fragment,Met),Met.forEach(t),Tet.forEach(t),t7o=i(ANe),aie=n(ANe,"SPAN",{});var Eet=s(aie);a7o=r(Eet,"AutoModelForCausalLM"),Eet.forEach(t),ANe.forEach(t),EIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(N6.$$.fragment,Gs),n7o=i(Gs),Li=n(Gs,"P",{});var FK=s(Li);s7o=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yN=n(FK,"A",{href:!0});var Cet=s(yN);l7o=r(Cet,"from_pretrained()"),Cet.forEach(t),i7o=r(FK," class method or the "),LN=n(FK,"A",{href:!0});var wet=s(LN);d7o=r(wet,"from_config()"),wet.forEach(t),c7o=r(FK,` class
method.`),FK.forEach(t),f7o=i(Gs),j6=n(Gs,"P",{});var yNe=s(j6);m7o=r(yNe,"This class cannot be instantiated directly using "),nie=n(yNe,"CODE",{});var Aet=s(nie);g7o=r(Aet,"__init__()"),Aet.forEach(t),h7o=r(yNe," (throws an error)."),yNe.forEach(t),p7o=i(Gs),tt=n(Gs,"DIV",{class:!0});var iw=s(tt);T(D6.$$.fragment,iw),u7o=i(iw),sie=n(iw,"P",{});var yet=s(sie);_7o=r(yet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yet.forEach(t),b7o=i(iw),xi=n(iw,"P",{});var TK=s(xi);v7o=r(TK,`Note:
Loading a model from its configuration file does `),lie=n(TK,"STRONG",{});var Let=s(lie);F7o=r(Let,"not"),Let.forEach(t),T7o=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(TK,"A",{href:!0});var xet=s(xN);M7o=r(xet,"from_pretrained()"),xet.forEach(t),E7o=r(TK," to load the model weights."),TK.forEach(t),C7o=i(iw),T(k_.$$.fragment,iw),iw.forEach(t),w7o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(G6.$$.fragment,oa),A7o=i(oa),iie=n(oa,"P",{});var $et=s(iie);y7o=r($et,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$et.forEach(t),L7o=i(oa),La=n(oa,"P",{});var dw=s(La);x7o=r(dw,"The model class to instantiate is selected based on the "),die=n(dw,"CODE",{});var ket=s(die);$7o=r(ket,"model_type"),ket.forEach(t),k7o=r(dw,` property of the config object (either
passed as an argument or loaded from `),cie=n(dw,"CODE",{});var Set=s(cie);S7o=r(Set,"pretrained_model_name_or_path"),Set.forEach(t),R7o=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(dw,"CODE",{});var Ret=s(fie);B7o=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),P7o=r(dw,":"),dw.forEach(t),I7o=i(oa),z=n(oa,"UL",{});var W=s(z);S_=n(W,"LI",{});var P6e=s(S_);mie=n(P6e,"STRONG",{});var Bet=s(mie);q7o=r(Bet,"bart"),Bet.forEach(t),N7o=r(P6e," \u2014 "),$N=n(P6e,"A",{href:!0});var Pet=s($N);j7o=r(Pet,"BartForCausalLM"),Pet.forEach(t),D7o=r(P6e," (BART model)"),P6e.forEach(t),G7o=i(W),R_=n(W,"LI",{});var I6e=s(R_);gie=n(I6e,"STRONG",{});var Iet=s(gie);O7o=r(Iet,"bert"),Iet.forEach(t),V7o=r(I6e," \u2014 "),kN=n(I6e,"A",{href:!0});var qet=s(kN);X7o=r(qet,"BertLMHeadModel"),qet.forEach(t),z7o=r(I6e," (BERT model)"),I6e.forEach(t),Q7o=i(W),B_=n(W,"LI",{});var q6e=s(B_);hie=n(q6e,"STRONG",{});var Net=s(hie);W7o=r(Net,"bert-generation"),Net.forEach(t),H7o=r(q6e," \u2014 "),SN=n(q6e,"A",{href:!0});var jet=s(SN);U7o=r(jet,"BertGenerationDecoder"),jet.forEach(t),J7o=r(q6e," (Bert Generation model)"),q6e.forEach(t),Y7o=i(W),P_=n(W,"LI",{});var N6e=s(P_);pie=n(N6e,"STRONG",{});var Det=s(pie);K7o=r(Det,"big_bird"),Det.forEach(t),Z7o=r(N6e," \u2014 "),RN=n(N6e,"A",{href:!0});var Get=s(RN);eMo=r(Get,"BigBirdForCausalLM"),Get.forEach(t),oMo=r(N6e," (BigBird model)"),N6e.forEach(t),rMo=i(W),I_=n(W,"LI",{});var j6e=s(I_);uie=n(j6e,"STRONG",{});var Oet=s(uie);tMo=r(Oet,"bigbird_pegasus"),Oet.forEach(t),aMo=r(j6e," \u2014 "),BN=n(j6e,"A",{href:!0});var Vet=s(BN);nMo=r(Vet,"BigBirdPegasusForCausalLM"),Vet.forEach(t),sMo=r(j6e," (BigBirdPegasus model)"),j6e.forEach(t),lMo=i(W),q_=n(W,"LI",{});var D6e=s(q_);_ie=n(D6e,"STRONG",{});var Xet=s(_ie);iMo=r(Xet,"blenderbot"),Xet.forEach(t),dMo=r(D6e," \u2014 "),PN=n(D6e,"A",{href:!0});var zet=s(PN);cMo=r(zet,"BlenderbotForCausalLM"),zet.forEach(t),fMo=r(D6e," (Blenderbot model)"),D6e.forEach(t),mMo=i(W),N_=n(W,"LI",{});var G6e=s(N_);bie=n(G6e,"STRONG",{});var Qet=s(bie);gMo=r(Qet,"blenderbot-small"),Qet.forEach(t),hMo=r(G6e," \u2014 "),IN=n(G6e,"A",{href:!0});var Wet=s(IN);pMo=r(Wet,"BlenderbotSmallForCausalLM"),Wet.forEach(t),uMo=r(G6e," (BlenderbotSmall model)"),G6e.forEach(t),_Mo=i(W),j_=n(W,"LI",{});var O6e=s(j_);vie=n(O6e,"STRONG",{});var Het=s(vie);bMo=r(Het,"camembert"),Het.forEach(t),vMo=r(O6e," \u2014 "),qN=n(O6e,"A",{href:!0});var Uet=s(qN);FMo=r(Uet,"CamembertForCausalLM"),Uet.forEach(t),TMo=r(O6e," (CamemBERT model)"),O6e.forEach(t),MMo=i(W),D_=n(W,"LI",{});var V6e=s(D_);Fie=n(V6e,"STRONG",{});var Jet=s(Fie);EMo=r(Jet,"ctrl"),Jet.forEach(t),CMo=r(V6e," \u2014 "),NN=n(V6e,"A",{href:!0});var Yet=s(NN);wMo=r(Yet,"CTRLLMHeadModel"),Yet.forEach(t),AMo=r(V6e," (CTRL model)"),V6e.forEach(t),yMo=i(W),G_=n(W,"LI",{});var X6e=s(G_);Tie=n(X6e,"STRONG",{});var Ket=s(Tie);LMo=r(Ket,"data2vec-text"),Ket.forEach(t),xMo=r(X6e," \u2014 "),jN=n(X6e,"A",{href:!0});var Zet=s(jN);$Mo=r(Zet,"Data2VecTextForCausalLM"),Zet.forEach(t),kMo=r(X6e," (Data2VecText model)"),X6e.forEach(t),SMo=i(W),O_=n(W,"LI",{});var z6e=s(O_);Mie=n(z6e,"STRONG",{});var eot=s(Mie);RMo=r(eot,"electra"),eot.forEach(t),BMo=r(z6e," \u2014 "),DN=n(z6e,"A",{href:!0});var oot=s(DN);PMo=r(oot,"ElectraForCausalLM"),oot.forEach(t),IMo=r(z6e," (ELECTRA model)"),z6e.forEach(t),qMo=i(W),V_=n(W,"LI",{});var Q6e=s(V_);Eie=n(Q6e,"STRONG",{});var rot=s(Eie);NMo=r(rot,"gpt2"),rot.forEach(t),jMo=r(Q6e," \u2014 "),GN=n(Q6e,"A",{href:!0});var tot=s(GN);DMo=r(tot,"GPT2LMHeadModel"),tot.forEach(t),GMo=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),OMo=i(W),X_=n(W,"LI",{});var W6e=s(X_);Cie=n(W6e,"STRONG",{});var aot=s(Cie);VMo=r(aot,"gpt_neo"),aot.forEach(t),XMo=r(W6e," \u2014 "),ON=n(W6e,"A",{href:!0});var not=s(ON);zMo=r(not,"GPTNeoForCausalLM"),not.forEach(t),QMo=r(W6e," (GPT Neo model)"),W6e.forEach(t),WMo=i(W),z_=n(W,"LI",{});var H6e=s(z_);wie=n(H6e,"STRONG",{});var sot=s(wie);HMo=r(sot,"gptj"),sot.forEach(t),UMo=r(H6e," \u2014 "),VN=n(H6e,"A",{href:!0});var lot=s(VN);JMo=r(lot,"GPTJForCausalLM"),lot.forEach(t),YMo=r(H6e," (GPT-J model)"),H6e.forEach(t),KMo=i(W),Q_=n(W,"LI",{});var U6e=s(Q_);Aie=n(U6e,"STRONG",{});var iot=s(Aie);ZMo=r(iot,"marian"),iot.forEach(t),e4o=r(U6e," \u2014 "),XN=n(U6e,"A",{href:!0});var dot=s(XN);o4o=r(dot,"MarianForCausalLM"),dot.forEach(t),r4o=r(U6e," (Marian model)"),U6e.forEach(t),t4o=i(W),W_=n(W,"LI",{});var J6e=s(W_);yie=n(J6e,"STRONG",{});var cot=s(yie);a4o=r(cot,"mbart"),cot.forEach(t),n4o=r(J6e," \u2014 "),zN=n(J6e,"A",{href:!0});var fot=s(zN);s4o=r(fot,"MBartForCausalLM"),fot.forEach(t),l4o=r(J6e," (mBART model)"),J6e.forEach(t),i4o=i(W),H_=n(W,"LI",{});var Y6e=s(H_);Lie=n(Y6e,"STRONG",{});var mot=s(Lie);d4o=r(mot,"megatron-bert"),mot.forEach(t),c4o=r(Y6e," \u2014 "),QN=n(Y6e,"A",{href:!0});var got=s(QN);f4o=r(got,"MegatronBertForCausalLM"),got.forEach(t),m4o=r(Y6e," (MegatronBert model)"),Y6e.forEach(t),g4o=i(W),U_=n(W,"LI",{});var K6e=s(U_);xie=n(K6e,"STRONG",{});var hot=s(xie);h4o=r(hot,"openai-gpt"),hot.forEach(t),p4o=r(K6e," \u2014 "),WN=n(K6e,"A",{href:!0});var pot=s(WN);u4o=r(pot,"OpenAIGPTLMHeadModel"),pot.forEach(t),_4o=r(K6e," (OpenAI GPT model)"),K6e.forEach(t),b4o=i(W),J_=n(W,"LI",{});var Z6e=s(J_);$ie=n(Z6e,"STRONG",{});var uot=s($ie);v4o=r(uot,"opt"),uot.forEach(t),F4o=r(Z6e," \u2014 "),HN=n(Z6e,"A",{href:!0});var _ot=s(HN);T4o=r(_ot,"OPTForCausalLM"),_ot.forEach(t),M4o=r(Z6e," (OPT model)"),Z6e.forEach(t),E4o=i(W),Y_=n(W,"LI",{});var eye=s(Y_);kie=n(eye,"STRONG",{});var bot=s(kie);C4o=r(bot,"pegasus"),bot.forEach(t),w4o=r(eye," \u2014 "),UN=n(eye,"A",{href:!0});var vot=s(UN);A4o=r(vot,"PegasusForCausalLM"),vot.forEach(t),y4o=r(eye," (Pegasus model)"),eye.forEach(t),L4o=i(W),K_=n(W,"LI",{});var oye=s(K_);Sie=n(oye,"STRONG",{});var Fot=s(Sie);x4o=r(Fot,"plbart"),Fot.forEach(t),$4o=r(oye," \u2014 "),JN=n(oye,"A",{href:!0});var Tot=s(JN);k4o=r(Tot,"PLBartForCausalLM"),Tot.forEach(t),S4o=r(oye," (PLBart model)"),oye.forEach(t),R4o=i(W),Z_=n(W,"LI",{});var rye=s(Z_);Rie=n(rye,"STRONG",{});var Mot=s(Rie);B4o=r(Mot,"prophetnet"),Mot.forEach(t),P4o=r(rye," \u2014 "),YN=n(rye,"A",{href:!0});var Eot=s(YN);I4o=r(Eot,"ProphetNetForCausalLM"),Eot.forEach(t),q4o=r(rye," (ProphetNet model)"),rye.forEach(t),N4o=i(W),e2=n(W,"LI",{});var tye=s(e2);Bie=n(tye,"STRONG",{});var Cot=s(Bie);j4o=r(Cot,"qdqbert"),Cot.forEach(t),D4o=r(tye," \u2014 "),KN=n(tye,"A",{href:!0});var wot=s(KN);G4o=r(wot,"QDQBertLMHeadModel"),wot.forEach(t),O4o=r(tye," (QDQBert model)"),tye.forEach(t),V4o=i(W),o2=n(W,"LI",{});var aye=s(o2);Pie=n(aye,"STRONG",{});var Aot=s(Pie);X4o=r(Aot,"reformer"),Aot.forEach(t),z4o=r(aye," \u2014 "),ZN=n(aye,"A",{href:!0});var yot=s(ZN);Q4o=r(yot,"ReformerModelWithLMHead"),yot.forEach(t),W4o=r(aye," (Reformer model)"),aye.forEach(t),H4o=i(W),r2=n(W,"LI",{});var nye=s(r2);Iie=n(nye,"STRONG",{});var Lot=s(Iie);U4o=r(Lot,"rembert"),Lot.forEach(t),J4o=r(nye," \u2014 "),ej=n(nye,"A",{href:!0});var xot=s(ej);Y4o=r(xot,"RemBertForCausalLM"),xot.forEach(t),K4o=r(nye," (RemBERT model)"),nye.forEach(t),Z4o=i(W),t2=n(W,"LI",{});var sye=s(t2);qie=n(sye,"STRONG",{});var $ot=s(qie);eEo=r($ot,"roberta"),$ot.forEach(t),oEo=r(sye," \u2014 "),oj=n(sye,"A",{href:!0});var kot=s(oj);rEo=r(kot,"RobertaForCausalLM"),kot.forEach(t),tEo=r(sye," (RoBERTa model)"),sye.forEach(t),aEo=i(W),a2=n(W,"LI",{});var lye=s(a2);Nie=n(lye,"STRONG",{});var Sot=s(Nie);nEo=r(Sot,"roformer"),Sot.forEach(t),sEo=r(lye," \u2014 "),rj=n(lye,"A",{href:!0});var Rot=s(rj);lEo=r(Rot,"RoFormerForCausalLM"),Rot.forEach(t),iEo=r(lye," (RoFormer model)"),lye.forEach(t),dEo=i(W),n2=n(W,"LI",{});var iye=s(n2);jie=n(iye,"STRONG",{});var Bot=s(jie);cEo=r(Bot,"speech_to_text_2"),Bot.forEach(t),fEo=r(iye," \u2014 "),tj=n(iye,"A",{href:!0});var Pot=s(tj);mEo=r(Pot,"Speech2Text2ForCausalLM"),Pot.forEach(t),gEo=r(iye," (Speech2Text2 model)"),iye.forEach(t),hEo=i(W),s2=n(W,"LI",{});var dye=s(s2);Die=n(dye,"STRONG",{});var Iot=s(Die);pEo=r(Iot,"transfo-xl"),Iot.forEach(t),uEo=r(dye," \u2014 "),aj=n(dye,"A",{href:!0});var qot=s(aj);_Eo=r(qot,"TransfoXLLMHeadModel"),qot.forEach(t),bEo=r(dye," (Transformer-XL model)"),dye.forEach(t),vEo=i(W),l2=n(W,"LI",{});var cye=s(l2);Gie=n(cye,"STRONG",{});var Not=s(Gie);FEo=r(Not,"trocr"),Not.forEach(t),TEo=r(cye," \u2014 "),nj=n(cye,"A",{href:!0});var jot=s(nj);MEo=r(jot,"TrOCRForCausalLM"),jot.forEach(t),EEo=r(cye," (TrOCR model)"),cye.forEach(t),CEo=i(W),i2=n(W,"LI",{});var fye=s(i2);Oie=n(fye,"STRONG",{});var Dot=s(Oie);wEo=r(Dot,"xglm"),Dot.forEach(t),AEo=r(fye," \u2014 "),sj=n(fye,"A",{href:!0});var Got=s(sj);yEo=r(Got,"XGLMForCausalLM"),Got.forEach(t),LEo=r(fye," (XGLM model)"),fye.forEach(t),xEo=i(W),d2=n(W,"LI",{});var mye=s(d2);Vie=n(mye,"STRONG",{});var Oot=s(Vie);$Eo=r(Oot,"xlm"),Oot.forEach(t),kEo=r(mye," \u2014 "),lj=n(mye,"A",{href:!0});var Vot=s(lj);SEo=r(Vot,"XLMWithLMHeadModel"),Vot.forEach(t),REo=r(mye," (XLM model)"),mye.forEach(t),BEo=i(W),c2=n(W,"LI",{});var gye=s(c2);Xie=n(gye,"STRONG",{});var Xot=s(Xie);PEo=r(Xot,"xlm-prophetnet"),Xot.forEach(t),IEo=r(gye," \u2014 "),ij=n(gye,"A",{href:!0});var zot=s(ij);qEo=r(zot,"XLMProphetNetForCausalLM"),zot.forEach(t),NEo=r(gye," (XLMProphetNet model)"),gye.forEach(t),jEo=i(W),f2=n(W,"LI",{});var hye=s(f2);zie=n(hye,"STRONG",{});var Qot=s(zie);DEo=r(Qot,"xlm-roberta"),Qot.forEach(t),GEo=r(hye," \u2014 "),dj=n(hye,"A",{href:!0});var Wot=s(dj);OEo=r(Wot,"XLMRobertaForCausalLM"),Wot.forEach(t),VEo=r(hye," (XLM-RoBERTa model)"),hye.forEach(t),XEo=i(W),m2=n(W,"LI",{});var pye=s(m2);Qie=n(pye,"STRONG",{});var Hot=s(Qie);zEo=r(Hot,"xlm-roberta-xl"),Hot.forEach(t),QEo=r(pye," \u2014 "),cj=n(pye,"A",{href:!0});var Uot=s(cj);WEo=r(Uot,"XLMRobertaXLForCausalLM"),Uot.forEach(t),HEo=r(pye," (XLM-RoBERTa-XL model)"),pye.forEach(t),UEo=i(W),g2=n(W,"LI",{});var uye=s(g2);Wie=n(uye,"STRONG",{});var Jot=s(Wie);JEo=r(Jot,"xlnet"),Jot.forEach(t),YEo=r(uye," \u2014 "),fj=n(uye,"A",{href:!0});var Yot=s(fj);KEo=r(Yot,"XLNetLMHeadModel"),Yot.forEach(t),ZEo=r(uye," (XLNet model)"),uye.forEach(t),W.forEach(t),eCo=i(oa),h2=n(oa,"P",{});var _ye=s(h2);oCo=r(_ye,"The model is set in evaluation mode by default using "),Hie=n(_ye,"CODE",{});var Kot=s(Hie);rCo=r(Kot,"model.eval()"),Kot.forEach(t),tCo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(_ye,"CODE",{});var Zot=s(Uie);aCo=r(Zot,"model.train()"),Zot.forEach(t),_ye.forEach(t),nCo=i(oa),T(p2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),CIe=i(f),$i=n(f,"H2",{class:!0});var LNe=s($i);u2=n(LNe,"A",{id:!0,class:!0,href:!0});var ert=s(u2);Jie=n(ert,"SPAN",{});var ort=s(Jie);T(O6.$$.fragment,ort),ort.forEach(t),ert.forEach(t),sCo=i(LNe),Yie=n(LNe,"SPAN",{});var rrt=s(Yie);lCo=r(rrt,"AutoModelForMaskedLM"),rrt.forEach(t),LNe.forEach(t),wIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(V6.$$.fragment,Os),iCo=i(Os),ki=n(Os,"P",{});var MK=s(ki);dCo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mj=n(MK,"A",{href:!0});var trt=s(mj);cCo=r(trt,"from_pretrained()"),trt.forEach(t),fCo=r(MK," class method or the "),gj=n(MK,"A",{href:!0});var art=s(gj);mCo=r(art,"from_config()"),art.forEach(t),gCo=r(MK,` class
method.`),MK.forEach(t),hCo=i(Os),X6=n(Os,"P",{});var xNe=s(X6);pCo=r(xNe,"This class cannot be instantiated directly using "),Kie=n(xNe,"CODE",{});var nrt=s(Kie);uCo=r(nrt,"__init__()"),nrt.forEach(t),_Co=r(xNe," (throws an error)."),xNe.forEach(t),bCo=i(Os),at=n(Os,"DIV",{class:!0});var cw=s(at);T(z6.$$.fragment,cw),vCo=i(cw),Zie=n(cw,"P",{});var srt=s(Zie);FCo=r(srt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),srt.forEach(t),TCo=i(cw),Si=n(cw,"P",{});var EK=s(Si);MCo=r(EK,`Note:
Loading a model from its configuration file does `),ede=n(EK,"STRONG",{});var lrt=s(ede);ECo=r(lrt,"not"),lrt.forEach(t),CCo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(EK,"A",{href:!0});var irt=s(hj);wCo=r(irt,"from_pretrained()"),irt.forEach(t),ACo=r(EK," to load the model weights."),EK.forEach(t),yCo=i(cw),T(_2.$$.fragment,cw),cw.forEach(t),LCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(Q6.$$.fragment,ra),xCo=i(ra),ode=n(ra,"P",{});var drt=s(ode);$Co=r(drt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),drt.forEach(t),kCo=i(ra),xa=n(ra,"P",{});var fw=s(xa);SCo=r(fw,"The model class to instantiate is selected based on the "),rde=n(fw,"CODE",{});var crt=s(rde);RCo=r(crt,"model_type"),crt.forEach(t),BCo=r(fw,` property of the config object (either
passed as an argument or loaded from `),tde=n(fw,"CODE",{});var frt=s(tde);PCo=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),ICo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(fw,"CODE",{});var mrt=s(ade);qCo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),NCo=r(fw,":"),fw.forEach(t),jCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);b2=n(H,"LI",{});var bye=s(b2);nde=n(bye,"STRONG",{});var grt=s(nde);DCo=r(grt,"albert"),grt.forEach(t),GCo=r(bye," \u2014 "),pj=n(bye,"A",{href:!0});var hrt=s(pj);OCo=r(hrt,"AlbertForMaskedLM"),hrt.forEach(t),VCo=r(bye," (ALBERT model)"),bye.forEach(t),XCo=i(H),v2=n(H,"LI",{});var vye=s(v2);sde=n(vye,"STRONG",{});var prt=s(sde);zCo=r(prt,"bart"),prt.forEach(t),QCo=r(vye," \u2014 "),uj=n(vye,"A",{href:!0});var urt=s(uj);WCo=r(urt,"BartForConditionalGeneration"),urt.forEach(t),HCo=r(vye," (BART model)"),vye.forEach(t),UCo=i(H),F2=n(H,"LI",{});var Fye=s(F2);lde=n(Fye,"STRONG",{});var _rt=s(lde);JCo=r(_rt,"bert"),_rt.forEach(t),YCo=r(Fye," \u2014 "),_j=n(Fye,"A",{href:!0});var brt=s(_j);KCo=r(brt,"BertForMaskedLM"),brt.forEach(t),ZCo=r(Fye," (BERT model)"),Fye.forEach(t),e3o=i(H),T2=n(H,"LI",{});var Tye=s(T2);ide=n(Tye,"STRONG",{});var vrt=s(ide);o3o=r(vrt,"big_bird"),vrt.forEach(t),r3o=r(Tye," \u2014 "),bj=n(Tye,"A",{href:!0});var Frt=s(bj);t3o=r(Frt,"BigBirdForMaskedLM"),Frt.forEach(t),a3o=r(Tye," (BigBird model)"),Tye.forEach(t),n3o=i(H),M2=n(H,"LI",{});var Mye=s(M2);dde=n(Mye,"STRONG",{});var Trt=s(dde);s3o=r(Trt,"camembert"),Trt.forEach(t),l3o=r(Mye," \u2014 "),vj=n(Mye,"A",{href:!0});var Mrt=s(vj);i3o=r(Mrt,"CamembertForMaskedLM"),Mrt.forEach(t),d3o=r(Mye," (CamemBERT model)"),Mye.forEach(t),c3o=i(H),E2=n(H,"LI",{});var Eye=s(E2);cde=n(Eye,"STRONG",{});var Ert=s(cde);f3o=r(Ert,"convbert"),Ert.forEach(t),m3o=r(Eye," \u2014 "),Fj=n(Eye,"A",{href:!0});var Crt=s(Fj);g3o=r(Crt,"ConvBertForMaskedLM"),Crt.forEach(t),h3o=r(Eye," (ConvBERT model)"),Eye.forEach(t),p3o=i(H),C2=n(H,"LI",{});var Cye=s(C2);fde=n(Cye,"STRONG",{});var wrt=s(fde);u3o=r(wrt,"data2vec-text"),wrt.forEach(t),_3o=r(Cye," \u2014 "),Tj=n(Cye,"A",{href:!0});var Art=s(Tj);b3o=r(Art,"Data2VecTextForMaskedLM"),Art.forEach(t),v3o=r(Cye," (Data2VecText model)"),Cye.forEach(t),F3o=i(H),w2=n(H,"LI",{});var wye=s(w2);mde=n(wye,"STRONG",{});var yrt=s(mde);T3o=r(yrt,"deberta"),yrt.forEach(t),M3o=r(wye," \u2014 "),Mj=n(wye,"A",{href:!0});var Lrt=s(Mj);E3o=r(Lrt,"DebertaForMaskedLM"),Lrt.forEach(t),C3o=r(wye," (DeBERTa model)"),wye.forEach(t),w3o=i(H),A2=n(H,"LI",{});var Aye=s(A2);gde=n(Aye,"STRONG",{});var xrt=s(gde);A3o=r(xrt,"deberta-v2"),xrt.forEach(t),y3o=r(Aye," \u2014 "),Ej=n(Aye,"A",{href:!0});var $rt=s(Ej);L3o=r($rt,"DebertaV2ForMaskedLM"),$rt.forEach(t),x3o=r(Aye," (DeBERTa-v2 model)"),Aye.forEach(t),$3o=i(H),y2=n(H,"LI",{});var yye=s(y2);hde=n(yye,"STRONG",{});var krt=s(hde);k3o=r(krt,"distilbert"),krt.forEach(t),S3o=r(yye," \u2014 "),Cj=n(yye,"A",{href:!0});var Srt=s(Cj);R3o=r(Srt,"DistilBertForMaskedLM"),Srt.forEach(t),B3o=r(yye," (DistilBERT model)"),yye.forEach(t),P3o=i(H),L2=n(H,"LI",{});var Lye=s(L2);pde=n(Lye,"STRONG",{});var Rrt=s(pde);I3o=r(Rrt,"electra"),Rrt.forEach(t),q3o=r(Lye," \u2014 "),wj=n(Lye,"A",{href:!0});var Brt=s(wj);N3o=r(Brt,"ElectraForMaskedLM"),Brt.forEach(t),j3o=r(Lye," (ELECTRA model)"),Lye.forEach(t),D3o=i(H),x2=n(H,"LI",{});var xye=s(x2);ude=n(xye,"STRONG",{});var Prt=s(ude);G3o=r(Prt,"flaubert"),Prt.forEach(t),O3o=r(xye," \u2014 "),Aj=n(xye,"A",{href:!0});var Irt=s(Aj);V3o=r(Irt,"FlaubertWithLMHeadModel"),Irt.forEach(t),X3o=r(xye," (FlauBERT model)"),xye.forEach(t),z3o=i(H),$2=n(H,"LI",{});var $ye=s($2);_de=n($ye,"STRONG",{});var qrt=s(_de);Q3o=r(qrt,"fnet"),qrt.forEach(t),W3o=r($ye," \u2014 "),yj=n($ye,"A",{href:!0});var Nrt=s(yj);H3o=r(Nrt,"FNetForMaskedLM"),Nrt.forEach(t),U3o=r($ye," (FNet model)"),$ye.forEach(t),J3o=i(H),k2=n(H,"LI",{});var kye=s(k2);bde=n(kye,"STRONG",{});var jrt=s(bde);Y3o=r(jrt,"funnel"),jrt.forEach(t),K3o=r(kye," \u2014 "),Lj=n(kye,"A",{href:!0});var Drt=s(Lj);Z3o=r(Drt,"FunnelForMaskedLM"),Drt.forEach(t),ewo=r(kye," (Funnel Transformer model)"),kye.forEach(t),owo=i(H),S2=n(H,"LI",{});var Sye=s(S2);vde=n(Sye,"STRONG",{});var Grt=s(vde);rwo=r(Grt,"ibert"),Grt.forEach(t),two=r(Sye," \u2014 "),xj=n(Sye,"A",{href:!0});var Ort=s(xj);awo=r(Ort,"IBertForMaskedLM"),Ort.forEach(t),nwo=r(Sye," (I-BERT model)"),Sye.forEach(t),swo=i(H),R2=n(H,"LI",{});var Rye=s(R2);Fde=n(Rye,"STRONG",{});var Vrt=s(Fde);lwo=r(Vrt,"layoutlm"),Vrt.forEach(t),iwo=r(Rye," \u2014 "),$j=n(Rye,"A",{href:!0});var Xrt=s($j);dwo=r(Xrt,"LayoutLMForMaskedLM"),Xrt.forEach(t),cwo=r(Rye," (LayoutLM model)"),Rye.forEach(t),fwo=i(H),B2=n(H,"LI",{});var Bye=s(B2);Tde=n(Bye,"STRONG",{});var zrt=s(Tde);mwo=r(zrt,"longformer"),zrt.forEach(t),gwo=r(Bye," \u2014 "),kj=n(Bye,"A",{href:!0});var Qrt=s(kj);hwo=r(Qrt,"LongformerForMaskedLM"),Qrt.forEach(t),pwo=r(Bye," (Longformer model)"),Bye.forEach(t),uwo=i(H),P2=n(H,"LI",{});var Pye=s(P2);Mde=n(Pye,"STRONG",{});var Wrt=s(Mde);_wo=r(Wrt,"mbart"),Wrt.forEach(t),bwo=r(Pye," \u2014 "),Sj=n(Pye,"A",{href:!0});var Hrt=s(Sj);vwo=r(Hrt,"MBartForConditionalGeneration"),Hrt.forEach(t),Fwo=r(Pye," (mBART model)"),Pye.forEach(t),Two=i(H),I2=n(H,"LI",{});var Iye=s(I2);Ede=n(Iye,"STRONG",{});var Urt=s(Ede);Mwo=r(Urt,"megatron-bert"),Urt.forEach(t),Ewo=r(Iye," \u2014 "),Rj=n(Iye,"A",{href:!0});var Jrt=s(Rj);Cwo=r(Jrt,"MegatronBertForMaskedLM"),Jrt.forEach(t),wwo=r(Iye," (MegatronBert model)"),Iye.forEach(t),Awo=i(H),q2=n(H,"LI",{});var qye=s(q2);Cde=n(qye,"STRONG",{});var Yrt=s(Cde);ywo=r(Yrt,"mobilebert"),Yrt.forEach(t),Lwo=r(qye," \u2014 "),Bj=n(qye,"A",{href:!0});var Krt=s(Bj);xwo=r(Krt,"MobileBertForMaskedLM"),Krt.forEach(t),$wo=r(qye," (MobileBERT model)"),qye.forEach(t),kwo=i(H),N2=n(H,"LI",{});var Nye=s(N2);wde=n(Nye,"STRONG",{});var Zrt=s(wde);Swo=r(Zrt,"mpnet"),Zrt.forEach(t),Rwo=r(Nye," \u2014 "),Pj=n(Nye,"A",{href:!0});var ett=s(Pj);Bwo=r(ett,"MPNetForMaskedLM"),ett.forEach(t),Pwo=r(Nye," (MPNet model)"),Nye.forEach(t),Iwo=i(H),j2=n(H,"LI",{});var jye=s(j2);Ade=n(jye,"STRONG",{});var ott=s(Ade);qwo=r(ott,"nystromformer"),ott.forEach(t),Nwo=r(jye," \u2014 "),Ij=n(jye,"A",{href:!0});var rtt=s(Ij);jwo=r(rtt,"NystromformerForMaskedLM"),rtt.forEach(t),Dwo=r(jye," (Nystromformer model)"),jye.forEach(t),Gwo=i(H),D2=n(H,"LI",{});var Dye=s(D2);yde=n(Dye,"STRONG",{});var ttt=s(yde);Owo=r(ttt,"perceiver"),ttt.forEach(t),Vwo=r(Dye," \u2014 "),qj=n(Dye,"A",{href:!0});var att=s(qj);Xwo=r(att,"PerceiverForMaskedLM"),att.forEach(t),zwo=r(Dye," (Perceiver model)"),Dye.forEach(t),Qwo=i(H),G2=n(H,"LI",{});var Gye=s(G2);Lde=n(Gye,"STRONG",{});var ntt=s(Lde);Wwo=r(ntt,"qdqbert"),ntt.forEach(t),Hwo=r(Gye," \u2014 "),Nj=n(Gye,"A",{href:!0});var stt=s(Nj);Uwo=r(stt,"QDQBertForMaskedLM"),stt.forEach(t),Jwo=r(Gye," (QDQBert model)"),Gye.forEach(t),Ywo=i(H),O2=n(H,"LI",{});var Oye=s(O2);xde=n(Oye,"STRONG",{});var ltt=s(xde);Kwo=r(ltt,"reformer"),ltt.forEach(t),Zwo=r(Oye," \u2014 "),jj=n(Oye,"A",{href:!0});var itt=s(jj);eAo=r(itt,"ReformerForMaskedLM"),itt.forEach(t),oAo=r(Oye," (Reformer model)"),Oye.forEach(t),rAo=i(H),V2=n(H,"LI",{});var Vye=s(V2);$de=n(Vye,"STRONG",{});var dtt=s($de);tAo=r(dtt,"rembert"),dtt.forEach(t),aAo=r(Vye," \u2014 "),Dj=n(Vye,"A",{href:!0});var ctt=s(Dj);nAo=r(ctt,"RemBertForMaskedLM"),ctt.forEach(t),sAo=r(Vye," (RemBERT model)"),Vye.forEach(t),lAo=i(H),X2=n(H,"LI",{});var Xye=s(X2);kde=n(Xye,"STRONG",{});var ftt=s(kde);iAo=r(ftt,"roberta"),ftt.forEach(t),dAo=r(Xye," \u2014 "),Gj=n(Xye,"A",{href:!0});var mtt=s(Gj);cAo=r(mtt,"RobertaForMaskedLM"),mtt.forEach(t),fAo=r(Xye," (RoBERTa model)"),Xye.forEach(t),mAo=i(H),z2=n(H,"LI",{});var zye=s(z2);Sde=n(zye,"STRONG",{});var gtt=s(Sde);gAo=r(gtt,"roformer"),gtt.forEach(t),hAo=r(zye," \u2014 "),Oj=n(zye,"A",{href:!0});var htt=s(Oj);pAo=r(htt,"RoFormerForMaskedLM"),htt.forEach(t),uAo=r(zye," (RoFormer model)"),zye.forEach(t),_Ao=i(H),Q2=n(H,"LI",{});var Qye=s(Q2);Rde=n(Qye,"STRONG",{});var ptt=s(Rde);bAo=r(ptt,"squeezebert"),ptt.forEach(t),vAo=r(Qye," \u2014 "),Vj=n(Qye,"A",{href:!0});var utt=s(Vj);FAo=r(utt,"SqueezeBertForMaskedLM"),utt.forEach(t),TAo=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),MAo=i(H),W2=n(H,"LI",{});var Wye=s(W2);Bde=n(Wye,"STRONG",{});var _tt=s(Bde);EAo=r(_tt,"tapas"),_tt.forEach(t),CAo=r(Wye," \u2014 "),Xj=n(Wye,"A",{href:!0});var btt=s(Xj);wAo=r(btt,"TapasForMaskedLM"),btt.forEach(t),AAo=r(Wye," (TAPAS model)"),Wye.forEach(t),yAo=i(H),H2=n(H,"LI",{});var Hye=s(H2);Pde=n(Hye,"STRONG",{});var vtt=s(Pde);LAo=r(vtt,"wav2vec2"),vtt.forEach(t),xAo=r(Hye," \u2014 "),Ide=n(Hye,"CODE",{});var Ftt=s(Ide);$Ao=r(Ftt,"Wav2Vec2ForMaskedLM"),Ftt.forEach(t),kAo=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),SAo=i(H),U2=n(H,"LI",{});var Uye=s(U2);qde=n(Uye,"STRONG",{});var Ttt=s(qde);RAo=r(Ttt,"xlm"),Ttt.forEach(t),BAo=r(Uye," \u2014 "),zj=n(Uye,"A",{href:!0});var Mtt=s(zj);PAo=r(Mtt,"XLMWithLMHeadModel"),Mtt.forEach(t),IAo=r(Uye," (XLM model)"),Uye.forEach(t),qAo=i(H),J2=n(H,"LI",{});var Jye=s(J2);Nde=n(Jye,"STRONG",{});var Ett=s(Nde);NAo=r(Ett,"xlm-roberta"),Ett.forEach(t),jAo=r(Jye," \u2014 "),Qj=n(Jye,"A",{href:!0});var Ctt=s(Qj);DAo=r(Ctt,"XLMRobertaForMaskedLM"),Ctt.forEach(t),GAo=r(Jye," (XLM-RoBERTa model)"),Jye.forEach(t),OAo=i(H),Y2=n(H,"LI",{});var Yye=s(Y2);jde=n(Yye,"STRONG",{});var wtt=s(jde);VAo=r(wtt,"xlm-roberta-xl"),wtt.forEach(t),XAo=r(Yye," \u2014 "),Wj=n(Yye,"A",{href:!0});var Att=s(Wj);zAo=r(Att,"XLMRobertaXLForMaskedLM"),Att.forEach(t),QAo=r(Yye," (XLM-RoBERTa-XL model)"),Yye.forEach(t),WAo=i(H),K2=n(H,"LI",{});var Kye=s(K2);Dde=n(Kye,"STRONG",{});var ytt=s(Dde);HAo=r(ytt,"yoso"),ytt.forEach(t),UAo=r(Kye," \u2014 "),Hj=n(Kye,"A",{href:!0});var Ltt=s(Hj);JAo=r(Ltt,"YosoForMaskedLM"),Ltt.forEach(t),YAo=r(Kye," (YOSO model)"),Kye.forEach(t),H.forEach(t),KAo=i(ra),Z2=n(ra,"P",{});var Zye=s(Z2);ZAo=r(Zye,"The model is set in evaluation mode by default using "),Gde=n(Zye,"CODE",{});var xtt=s(Gde);e6o=r(xtt,"model.eval()"),xtt.forEach(t),o6o=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=n(Zye,"CODE",{});var $tt=s(Ode);r6o=r($tt,"model.train()"),$tt.forEach(t),Zye.forEach(t),t6o=i(ra),T(e1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),AIe=i(f),Ri=n(f,"H2",{class:!0});var $Ne=s(Ri);o1=n($Ne,"A",{id:!0,class:!0,href:!0});var ktt=s(o1);Vde=n(ktt,"SPAN",{});var Stt=s(Vde);T(W6.$$.fragment,Stt),Stt.forEach(t),ktt.forEach(t),a6o=i($Ne),Xde=n($Ne,"SPAN",{});var Rtt=s(Xde);n6o=r(Rtt,"AutoModelForSeq2SeqLM"),Rtt.forEach(t),$Ne.forEach(t),yIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(H6.$$.fragment,Vs),s6o=i(Vs),Bi=n(Vs,"P",{});var CK=s(Bi);l6o=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uj=n(CK,"A",{href:!0});var Btt=s(Uj);i6o=r(Btt,"from_pretrained()"),Btt.forEach(t),d6o=r(CK," class method or the "),Jj=n(CK,"A",{href:!0});var Ptt=s(Jj);c6o=r(Ptt,"from_config()"),Ptt.forEach(t),f6o=r(CK,` class
method.`),CK.forEach(t),m6o=i(Vs),U6=n(Vs,"P",{});var kNe=s(U6);g6o=r(kNe,"This class cannot be instantiated directly using "),zde=n(kNe,"CODE",{});var Itt=s(zde);h6o=r(Itt,"__init__()"),Itt.forEach(t),p6o=r(kNe," (throws an error)."),kNe.forEach(t),u6o=i(Vs),nt=n(Vs,"DIV",{class:!0});var mw=s(nt);T(J6.$$.fragment,mw),_6o=i(mw),Qde=n(mw,"P",{});var qtt=s(Qde);b6o=r(qtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qtt.forEach(t),v6o=i(mw),Pi=n(mw,"P",{});var wK=s(Pi);F6o=r(wK,`Note:
Loading a model from its configuration file does `),Wde=n(wK,"STRONG",{});var Ntt=s(Wde);T6o=r(Ntt,"not"),Ntt.forEach(t),M6o=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(wK,"A",{href:!0});var jtt=s(Yj);E6o=r(jtt,"from_pretrained()"),jtt.forEach(t),C6o=r(wK," to load the model weights."),wK.forEach(t),w6o=i(mw),T(r1.$$.fragment,mw),mw.forEach(t),A6o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Y6.$$.fragment,ta),y6o=i(ta),Hde=n(ta,"P",{});var Dtt=s(Hde);L6o=r(Dtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dtt.forEach(t),x6o=i(ta),$a=n(ta,"P",{});var gw=s($a);$6o=r(gw,"The model class to instantiate is selected based on the "),Ude=n(gw,"CODE",{});var Gtt=s(Ude);k6o=r(Gtt,"model_type"),Gtt.forEach(t),S6o=r(gw,` property of the config object (either
passed as an argument or loaded from `),Jde=n(gw,"CODE",{});var Ott=s(Jde);R6o=r(Ott,"pretrained_model_name_or_path"),Ott.forEach(t),B6o=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=n(gw,"CODE",{});var Vtt=s(Yde);P6o=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),I6o=r(gw,":"),gw.forEach(t),q6o=i(ta),he=n(ta,"UL",{});var ue=s(he);t1=n(ue,"LI",{});var eLe=s(t1);Kde=n(eLe,"STRONG",{});var Xtt=s(Kde);N6o=r(Xtt,"bart"),Xtt.forEach(t),j6o=r(eLe," \u2014 "),Kj=n(eLe,"A",{href:!0});var ztt=s(Kj);D6o=r(ztt,"BartForConditionalGeneration"),ztt.forEach(t),G6o=r(eLe," (BART model)"),eLe.forEach(t),O6o=i(ue),a1=n(ue,"LI",{});var oLe=s(a1);Zde=n(oLe,"STRONG",{});var Qtt=s(Zde);V6o=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),X6o=r(oLe," \u2014 "),Zj=n(oLe,"A",{href:!0});var Wtt=s(Zj);z6o=r(Wtt,"BigBirdPegasusForConditionalGeneration"),Wtt.forEach(t),Q6o=r(oLe," (BigBirdPegasus model)"),oLe.forEach(t),W6o=i(ue),n1=n(ue,"LI",{});var rLe=s(n1);ece=n(rLe,"STRONG",{});var Htt=s(ece);H6o=r(Htt,"blenderbot"),Htt.forEach(t),U6o=r(rLe," \u2014 "),eD=n(rLe,"A",{href:!0});var Utt=s(eD);J6o=r(Utt,"BlenderbotForConditionalGeneration"),Utt.forEach(t),Y6o=r(rLe," (Blenderbot model)"),rLe.forEach(t),K6o=i(ue),s1=n(ue,"LI",{});var tLe=s(s1);oce=n(tLe,"STRONG",{});var Jtt=s(oce);Z6o=r(Jtt,"blenderbot-small"),Jtt.forEach(t),eyo=r(tLe," \u2014 "),oD=n(tLe,"A",{href:!0});var Ytt=s(oD);oyo=r(Ytt,"BlenderbotSmallForConditionalGeneration"),Ytt.forEach(t),ryo=r(tLe," (BlenderbotSmall model)"),tLe.forEach(t),tyo=i(ue),l1=n(ue,"LI",{});var aLe=s(l1);rce=n(aLe,"STRONG",{});var Ktt=s(rce);ayo=r(Ktt,"encoder-decoder"),Ktt.forEach(t),nyo=r(aLe," \u2014 "),rD=n(aLe,"A",{href:!0});var Ztt=s(rD);syo=r(Ztt,"EncoderDecoderModel"),Ztt.forEach(t),lyo=r(aLe," (Encoder decoder model)"),aLe.forEach(t),iyo=i(ue),i1=n(ue,"LI",{});var nLe=s(i1);tce=n(nLe,"STRONG",{});var eat=s(tce);dyo=r(eat,"fsmt"),eat.forEach(t),cyo=r(nLe," \u2014 "),tD=n(nLe,"A",{href:!0});var oat=s(tD);fyo=r(oat,"FSMTForConditionalGeneration"),oat.forEach(t),myo=r(nLe," (FairSeq Machine-Translation model)"),nLe.forEach(t),gyo=i(ue),d1=n(ue,"LI",{});var sLe=s(d1);ace=n(sLe,"STRONG",{});var rat=s(ace);hyo=r(rat,"led"),rat.forEach(t),pyo=r(sLe," \u2014 "),aD=n(sLe,"A",{href:!0});var tat=s(aD);uyo=r(tat,"LEDForConditionalGeneration"),tat.forEach(t),_yo=r(sLe," (LED model)"),sLe.forEach(t),byo=i(ue),c1=n(ue,"LI",{});var lLe=s(c1);nce=n(lLe,"STRONG",{});var aat=s(nce);vyo=r(aat,"m2m_100"),aat.forEach(t),Fyo=r(lLe," \u2014 "),nD=n(lLe,"A",{href:!0});var nat=s(nD);Tyo=r(nat,"M2M100ForConditionalGeneration"),nat.forEach(t),Myo=r(lLe," (M2M100 model)"),lLe.forEach(t),Eyo=i(ue),f1=n(ue,"LI",{});var iLe=s(f1);sce=n(iLe,"STRONG",{});var sat=s(sce);Cyo=r(sat,"marian"),sat.forEach(t),wyo=r(iLe," \u2014 "),sD=n(iLe,"A",{href:!0});var lat=s(sD);Ayo=r(lat,"MarianMTModel"),lat.forEach(t),yyo=r(iLe," (Marian model)"),iLe.forEach(t),Lyo=i(ue),m1=n(ue,"LI",{});var dLe=s(m1);lce=n(dLe,"STRONG",{});var iat=s(lce);xyo=r(iat,"mbart"),iat.forEach(t),$yo=r(dLe," \u2014 "),lD=n(dLe,"A",{href:!0});var dat=s(lD);kyo=r(dat,"MBartForConditionalGeneration"),dat.forEach(t),Syo=r(dLe," (mBART model)"),dLe.forEach(t),Ryo=i(ue),g1=n(ue,"LI",{});var cLe=s(g1);ice=n(cLe,"STRONG",{});var cat=s(ice);Byo=r(cat,"mt5"),cat.forEach(t),Pyo=r(cLe," \u2014 "),iD=n(cLe,"A",{href:!0});var fat=s(iD);Iyo=r(fat,"MT5ForConditionalGeneration"),fat.forEach(t),qyo=r(cLe," (mT5 model)"),cLe.forEach(t),Nyo=i(ue),h1=n(ue,"LI",{});var fLe=s(h1);dce=n(fLe,"STRONG",{});var mat=s(dce);jyo=r(mat,"pegasus"),mat.forEach(t),Dyo=r(fLe," \u2014 "),dD=n(fLe,"A",{href:!0});var gat=s(dD);Gyo=r(gat,"PegasusForConditionalGeneration"),gat.forEach(t),Oyo=r(fLe," (Pegasus model)"),fLe.forEach(t),Vyo=i(ue),p1=n(ue,"LI",{});var mLe=s(p1);cce=n(mLe,"STRONG",{});var hat=s(cce);Xyo=r(hat,"plbart"),hat.forEach(t),zyo=r(mLe," \u2014 "),cD=n(mLe,"A",{href:!0});var pat=s(cD);Qyo=r(pat,"PLBartForConditionalGeneration"),pat.forEach(t),Wyo=r(mLe," (PLBart model)"),mLe.forEach(t),Hyo=i(ue),u1=n(ue,"LI",{});var gLe=s(u1);fce=n(gLe,"STRONG",{});var uat=s(fce);Uyo=r(uat,"prophetnet"),uat.forEach(t),Jyo=r(gLe," \u2014 "),fD=n(gLe,"A",{href:!0});var _at=s(fD);Yyo=r(_at,"ProphetNetForConditionalGeneration"),_at.forEach(t),Kyo=r(gLe," (ProphetNet model)"),gLe.forEach(t),Zyo=i(ue),_1=n(ue,"LI",{});var hLe=s(_1);mce=n(hLe,"STRONG",{});var bat=s(mce);eLo=r(bat,"t5"),bat.forEach(t),oLo=r(hLe," \u2014 "),mD=n(hLe,"A",{href:!0});var vat=s(mD);rLo=r(vat,"T5ForConditionalGeneration"),vat.forEach(t),tLo=r(hLe," (T5 model)"),hLe.forEach(t),aLo=i(ue),b1=n(ue,"LI",{});var pLe=s(b1);gce=n(pLe,"STRONG",{});var Fat=s(gce);nLo=r(Fat,"tapex"),Fat.forEach(t),sLo=r(pLe," \u2014 "),gD=n(pLe,"A",{href:!0});var Tat=s(gD);lLo=r(Tat,"BartForConditionalGeneration"),Tat.forEach(t),iLo=r(pLe," (TAPEX model)"),pLe.forEach(t),dLo=i(ue),v1=n(ue,"LI",{});var uLe=s(v1);hce=n(uLe,"STRONG",{});var Mat=s(hce);cLo=r(Mat,"xlm-prophetnet"),Mat.forEach(t),fLo=r(uLe," \u2014 "),hD=n(uLe,"A",{href:!0});var Eat=s(hD);mLo=r(Eat,"XLMProphetNetForConditionalGeneration"),Eat.forEach(t),gLo=r(uLe," (XLMProphetNet model)"),uLe.forEach(t),ue.forEach(t),hLo=i(ta),F1=n(ta,"P",{});var _Le=s(F1);pLo=r(_Le,"The model is set in evaluation mode by default using "),pce=n(_Le,"CODE",{});var Cat=s(pce);uLo=r(Cat,"model.eval()"),Cat.forEach(t),_Lo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(_Le,"CODE",{});var wat=s(uce);bLo=r(wat,"model.train()"),wat.forEach(t),_Le.forEach(t),vLo=i(ta),T(T1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),LIe=i(f),Ii=n(f,"H2",{class:!0});var SNe=s(Ii);M1=n(SNe,"A",{id:!0,class:!0,href:!0});var Aat=s(M1);_ce=n(Aat,"SPAN",{});var yat=s(_ce);T(K6.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),FLo=i(SNe),bce=n(SNe,"SPAN",{});var Lat=s(bce);TLo=r(Lat,"AutoModelForSequenceClassification"),Lat.forEach(t),SNe.forEach(t),xIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Z6.$$.fragment,Xs),MLo=i(Xs),qi=n(Xs,"P",{});var AK=s(qi);ELo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pD=n(AK,"A",{href:!0});var xat=s(pD);CLo=r(xat,"from_pretrained()"),xat.forEach(t),wLo=r(AK," class method or the "),uD=n(AK,"A",{href:!0});var $at=s(uD);ALo=r($at,"from_config()"),$at.forEach(t),yLo=r(AK,` class
method.`),AK.forEach(t),LLo=i(Xs),ey=n(Xs,"P",{});var RNe=s(ey);xLo=r(RNe,"This class cannot be instantiated directly using "),vce=n(RNe,"CODE",{});var kat=s(vce);$Lo=r(kat,"__init__()"),kat.forEach(t),kLo=r(RNe," (throws an error)."),RNe.forEach(t),SLo=i(Xs),st=n(Xs,"DIV",{class:!0});var hw=s(st);T(oy.$$.fragment,hw),RLo=i(hw),Fce=n(hw,"P",{});var Sat=s(Fce);BLo=r(Sat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sat.forEach(t),PLo=i(hw),Ni=n(hw,"P",{});var yK=s(Ni);ILo=r(yK,`Note:
Loading a model from its configuration file does `),Tce=n(yK,"STRONG",{});var Rat=s(Tce);qLo=r(Rat,"not"),Rat.forEach(t),NLo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(yK,"A",{href:!0});var Bat=s(_D);jLo=r(Bat,"from_pretrained()"),Bat.forEach(t),DLo=r(yK," to load the model weights."),yK.forEach(t),GLo=i(hw),T(E1.$$.fragment,hw),hw.forEach(t),OLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ry.$$.fragment,aa),VLo=i(aa),Mce=n(aa,"P",{});var Pat=s(Mce);XLo=r(Pat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pat.forEach(t),zLo=i(aa),ka=n(aa,"P",{});var pw=s(ka);QLo=r(pw,"The model class to instantiate is selected based on the "),Ece=n(pw,"CODE",{});var Iat=s(Ece);WLo=r(Iat,"model_type"),Iat.forEach(t),HLo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Cce=n(pw,"CODE",{});var qat=s(Cce);ULo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),JLo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(pw,"CODE",{});var Nat=s(wce);YLo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),KLo=r(pw,":"),pw.forEach(t),ZLo=i(aa),q=n(aa,"UL",{});var N=s(q);C1=n(N,"LI",{});var bLe=s(C1);Ace=n(bLe,"STRONG",{});var jat=s(Ace);e8o=r(jat,"albert"),jat.forEach(t),o8o=r(bLe," \u2014 "),bD=n(bLe,"A",{href:!0});var Dat=s(bD);r8o=r(Dat,"AlbertForSequenceClassification"),Dat.forEach(t),t8o=r(bLe," (ALBERT model)"),bLe.forEach(t),a8o=i(N),w1=n(N,"LI",{});var vLe=s(w1);yce=n(vLe,"STRONG",{});var Gat=s(yce);n8o=r(Gat,"bart"),Gat.forEach(t),s8o=r(vLe," \u2014 "),vD=n(vLe,"A",{href:!0});var Oat=s(vD);l8o=r(Oat,"BartForSequenceClassification"),Oat.forEach(t),i8o=r(vLe," (BART model)"),vLe.forEach(t),d8o=i(N),A1=n(N,"LI",{});var FLe=s(A1);Lce=n(FLe,"STRONG",{});var Vat=s(Lce);c8o=r(Vat,"bert"),Vat.forEach(t),f8o=r(FLe," \u2014 "),FD=n(FLe,"A",{href:!0});var Xat=s(FD);m8o=r(Xat,"BertForSequenceClassification"),Xat.forEach(t),g8o=r(FLe," (BERT model)"),FLe.forEach(t),h8o=i(N),y1=n(N,"LI",{});var TLe=s(y1);xce=n(TLe,"STRONG",{});var zat=s(xce);p8o=r(zat,"big_bird"),zat.forEach(t),u8o=r(TLe," \u2014 "),TD=n(TLe,"A",{href:!0});var Qat=s(TD);_8o=r(Qat,"BigBirdForSequenceClassification"),Qat.forEach(t),b8o=r(TLe," (BigBird model)"),TLe.forEach(t),v8o=i(N),L1=n(N,"LI",{});var MLe=s(L1);$ce=n(MLe,"STRONG",{});var Wat=s($ce);F8o=r(Wat,"bigbird_pegasus"),Wat.forEach(t),T8o=r(MLe," \u2014 "),MD=n(MLe,"A",{href:!0});var Hat=s(MD);M8o=r(Hat,"BigBirdPegasusForSequenceClassification"),Hat.forEach(t),E8o=r(MLe," (BigBirdPegasus model)"),MLe.forEach(t),C8o=i(N),x1=n(N,"LI",{});var ELe=s(x1);kce=n(ELe,"STRONG",{});var Uat=s(kce);w8o=r(Uat,"camembert"),Uat.forEach(t),A8o=r(ELe," \u2014 "),ED=n(ELe,"A",{href:!0});var Jat=s(ED);y8o=r(Jat,"CamembertForSequenceClassification"),Jat.forEach(t),L8o=r(ELe," (CamemBERT model)"),ELe.forEach(t),x8o=i(N),$1=n(N,"LI",{});var CLe=s($1);Sce=n(CLe,"STRONG",{});var Yat=s(Sce);$8o=r(Yat,"canine"),Yat.forEach(t),k8o=r(CLe," \u2014 "),CD=n(CLe,"A",{href:!0});var Kat=s(CD);S8o=r(Kat,"CanineForSequenceClassification"),Kat.forEach(t),R8o=r(CLe," (Canine model)"),CLe.forEach(t),B8o=i(N),k1=n(N,"LI",{});var wLe=s(k1);Rce=n(wLe,"STRONG",{});var Zat=s(Rce);P8o=r(Zat,"convbert"),Zat.forEach(t),I8o=r(wLe," \u2014 "),wD=n(wLe,"A",{href:!0});var ent=s(wD);q8o=r(ent,"ConvBertForSequenceClassification"),ent.forEach(t),N8o=r(wLe," (ConvBERT model)"),wLe.forEach(t),j8o=i(N),S1=n(N,"LI",{});var ALe=s(S1);Bce=n(ALe,"STRONG",{});var ont=s(Bce);D8o=r(ont,"ctrl"),ont.forEach(t),G8o=r(ALe," \u2014 "),AD=n(ALe,"A",{href:!0});var rnt=s(AD);O8o=r(rnt,"CTRLForSequenceClassification"),rnt.forEach(t),V8o=r(ALe," (CTRL model)"),ALe.forEach(t),X8o=i(N),R1=n(N,"LI",{});var yLe=s(R1);Pce=n(yLe,"STRONG",{});var tnt=s(Pce);z8o=r(tnt,"data2vec-text"),tnt.forEach(t),Q8o=r(yLe," \u2014 "),yD=n(yLe,"A",{href:!0});var ant=s(yD);W8o=r(ant,"Data2VecTextForSequenceClassification"),ant.forEach(t),H8o=r(yLe," (Data2VecText model)"),yLe.forEach(t),U8o=i(N),B1=n(N,"LI",{});var LLe=s(B1);Ice=n(LLe,"STRONG",{});var nnt=s(Ice);J8o=r(nnt,"deberta"),nnt.forEach(t),Y8o=r(LLe," \u2014 "),LD=n(LLe,"A",{href:!0});var snt=s(LD);K8o=r(snt,"DebertaForSequenceClassification"),snt.forEach(t),Z8o=r(LLe," (DeBERTa model)"),LLe.forEach(t),exo=i(N),P1=n(N,"LI",{});var xLe=s(P1);qce=n(xLe,"STRONG",{});var lnt=s(qce);oxo=r(lnt,"deberta-v2"),lnt.forEach(t),rxo=r(xLe," \u2014 "),xD=n(xLe,"A",{href:!0});var int=s(xD);txo=r(int,"DebertaV2ForSequenceClassification"),int.forEach(t),axo=r(xLe," (DeBERTa-v2 model)"),xLe.forEach(t),nxo=i(N),I1=n(N,"LI",{});var $Le=s(I1);Nce=n($Le,"STRONG",{});var dnt=s(Nce);sxo=r(dnt,"distilbert"),dnt.forEach(t),lxo=r($Le," \u2014 "),$D=n($Le,"A",{href:!0});var cnt=s($D);ixo=r(cnt,"DistilBertForSequenceClassification"),cnt.forEach(t),dxo=r($Le," (DistilBERT model)"),$Le.forEach(t),cxo=i(N),q1=n(N,"LI",{});var kLe=s(q1);jce=n(kLe,"STRONG",{});var fnt=s(jce);fxo=r(fnt,"electra"),fnt.forEach(t),mxo=r(kLe," \u2014 "),kD=n(kLe,"A",{href:!0});var mnt=s(kD);gxo=r(mnt,"ElectraForSequenceClassification"),mnt.forEach(t),hxo=r(kLe," (ELECTRA model)"),kLe.forEach(t),pxo=i(N),N1=n(N,"LI",{});var SLe=s(N1);Dce=n(SLe,"STRONG",{});var gnt=s(Dce);uxo=r(gnt,"flaubert"),gnt.forEach(t),_xo=r(SLe," \u2014 "),SD=n(SLe,"A",{href:!0});var hnt=s(SD);bxo=r(hnt,"FlaubertForSequenceClassification"),hnt.forEach(t),vxo=r(SLe," (FlauBERT model)"),SLe.forEach(t),Fxo=i(N),j1=n(N,"LI",{});var RLe=s(j1);Gce=n(RLe,"STRONG",{});var pnt=s(Gce);Txo=r(pnt,"fnet"),pnt.forEach(t),Mxo=r(RLe," \u2014 "),RD=n(RLe,"A",{href:!0});var unt=s(RD);Exo=r(unt,"FNetForSequenceClassification"),unt.forEach(t),Cxo=r(RLe," (FNet model)"),RLe.forEach(t),wxo=i(N),D1=n(N,"LI",{});var BLe=s(D1);Oce=n(BLe,"STRONG",{});var _nt=s(Oce);Axo=r(_nt,"funnel"),_nt.forEach(t),yxo=r(BLe," \u2014 "),BD=n(BLe,"A",{href:!0});var bnt=s(BD);Lxo=r(bnt,"FunnelForSequenceClassification"),bnt.forEach(t),xxo=r(BLe," (Funnel Transformer model)"),BLe.forEach(t),$xo=i(N),G1=n(N,"LI",{});var PLe=s(G1);Vce=n(PLe,"STRONG",{});var vnt=s(Vce);kxo=r(vnt,"gpt2"),vnt.forEach(t),Sxo=r(PLe," \u2014 "),PD=n(PLe,"A",{href:!0});var Fnt=s(PD);Rxo=r(Fnt,"GPT2ForSequenceClassification"),Fnt.forEach(t),Bxo=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),Pxo=i(N),O1=n(N,"LI",{});var ILe=s(O1);Xce=n(ILe,"STRONG",{});var Tnt=s(Xce);Ixo=r(Tnt,"gpt_neo"),Tnt.forEach(t),qxo=r(ILe," \u2014 "),ID=n(ILe,"A",{href:!0});var Mnt=s(ID);Nxo=r(Mnt,"GPTNeoForSequenceClassification"),Mnt.forEach(t),jxo=r(ILe," (GPT Neo model)"),ILe.forEach(t),Dxo=i(N),V1=n(N,"LI",{});var qLe=s(V1);zce=n(qLe,"STRONG",{});var Ent=s(zce);Gxo=r(Ent,"gptj"),Ent.forEach(t),Oxo=r(qLe," \u2014 "),qD=n(qLe,"A",{href:!0});var Cnt=s(qD);Vxo=r(Cnt,"GPTJForSequenceClassification"),Cnt.forEach(t),Xxo=r(qLe," (GPT-J model)"),qLe.forEach(t),zxo=i(N),X1=n(N,"LI",{});var NLe=s(X1);Qce=n(NLe,"STRONG",{});var wnt=s(Qce);Qxo=r(wnt,"ibert"),wnt.forEach(t),Wxo=r(NLe," \u2014 "),ND=n(NLe,"A",{href:!0});var Ant=s(ND);Hxo=r(Ant,"IBertForSequenceClassification"),Ant.forEach(t),Uxo=r(NLe," (I-BERT model)"),NLe.forEach(t),Jxo=i(N),z1=n(N,"LI",{});var jLe=s(z1);Wce=n(jLe,"STRONG",{});var ynt=s(Wce);Yxo=r(ynt,"layoutlm"),ynt.forEach(t),Kxo=r(jLe," \u2014 "),jD=n(jLe,"A",{href:!0});var Lnt=s(jD);Zxo=r(Lnt,"LayoutLMForSequenceClassification"),Lnt.forEach(t),e9o=r(jLe," (LayoutLM model)"),jLe.forEach(t),o9o=i(N),Q1=n(N,"LI",{});var DLe=s(Q1);Hce=n(DLe,"STRONG",{});var xnt=s(Hce);r9o=r(xnt,"layoutlmv2"),xnt.forEach(t),t9o=r(DLe," \u2014 "),DD=n(DLe,"A",{href:!0});var $nt=s(DD);a9o=r($nt,"LayoutLMv2ForSequenceClassification"),$nt.forEach(t),n9o=r(DLe," (LayoutLMv2 model)"),DLe.forEach(t),s9o=i(N),W1=n(N,"LI",{});var GLe=s(W1);Uce=n(GLe,"STRONG",{});var knt=s(Uce);l9o=r(knt,"led"),knt.forEach(t),i9o=r(GLe," \u2014 "),GD=n(GLe,"A",{href:!0});var Snt=s(GD);d9o=r(Snt,"LEDForSequenceClassification"),Snt.forEach(t),c9o=r(GLe," (LED model)"),GLe.forEach(t),f9o=i(N),H1=n(N,"LI",{});var OLe=s(H1);Jce=n(OLe,"STRONG",{});var Rnt=s(Jce);m9o=r(Rnt,"longformer"),Rnt.forEach(t),g9o=r(OLe," \u2014 "),OD=n(OLe,"A",{href:!0});var Bnt=s(OD);h9o=r(Bnt,"LongformerForSequenceClassification"),Bnt.forEach(t),p9o=r(OLe," (Longformer model)"),OLe.forEach(t),u9o=i(N),U1=n(N,"LI",{});var VLe=s(U1);Yce=n(VLe,"STRONG",{});var Pnt=s(Yce);_9o=r(Pnt,"mbart"),Pnt.forEach(t),b9o=r(VLe," \u2014 "),VD=n(VLe,"A",{href:!0});var Int=s(VD);v9o=r(Int,"MBartForSequenceClassification"),Int.forEach(t),F9o=r(VLe," (mBART model)"),VLe.forEach(t),T9o=i(N),J1=n(N,"LI",{});var XLe=s(J1);Kce=n(XLe,"STRONG",{});var qnt=s(Kce);M9o=r(qnt,"megatron-bert"),qnt.forEach(t),E9o=r(XLe," \u2014 "),XD=n(XLe,"A",{href:!0});var Nnt=s(XD);C9o=r(Nnt,"MegatronBertForSequenceClassification"),Nnt.forEach(t),w9o=r(XLe," (MegatronBert model)"),XLe.forEach(t),A9o=i(N),Y1=n(N,"LI",{});var zLe=s(Y1);Zce=n(zLe,"STRONG",{});var jnt=s(Zce);y9o=r(jnt,"mobilebert"),jnt.forEach(t),L9o=r(zLe," \u2014 "),zD=n(zLe,"A",{href:!0});var Dnt=s(zD);x9o=r(Dnt,"MobileBertForSequenceClassification"),Dnt.forEach(t),$9o=r(zLe," (MobileBERT model)"),zLe.forEach(t),k9o=i(N),K1=n(N,"LI",{});var QLe=s(K1);efe=n(QLe,"STRONG",{});var Gnt=s(efe);S9o=r(Gnt,"mpnet"),Gnt.forEach(t),R9o=r(QLe," \u2014 "),QD=n(QLe,"A",{href:!0});var Ont=s(QD);B9o=r(Ont,"MPNetForSequenceClassification"),Ont.forEach(t),P9o=r(QLe," (MPNet model)"),QLe.forEach(t),I9o=i(N),Z1=n(N,"LI",{});var WLe=s(Z1);ofe=n(WLe,"STRONG",{});var Vnt=s(ofe);q9o=r(Vnt,"nystromformer"),Vnt.forEach(t),N9o=r(WLe," \u2014 "),WD=n(WLe,"A",{href:!0});var Xnt=s(WD);j9o=r(Xnt,"NystromformerForSequenceClassification"),Xnt.forEach(t),D9o=r(WLe," (Nystromformer model)"),WLe.forEach(t),G9o=i(N),eb=n(N,"LI",{});var HLe=s(eb);rfe=n(HLe,"STRONG",{});var znt=s(rfe);O9o=r(znt,"openai-gpt"),znt.forEach(t),V9o=r(HLe," \u2014 "),HD=n(HLe,"A",{href:!0});var Qnt=s(HD);X9o=r(Qnt,"OpenAIGPTForSequenceClassification"),Qnt.forEach(t),z9o=r(HLe," (OpenAI GPT model)"),HLe.forEach(t),Q9o=i(N),ob=n(N,"LI",{});var ULe=s(ob);tfe=n(ULe,"STRONG",{});var Wnt=s(tfe);W9o=r(Wnt,"perceiver"),Wnt.forEach(t),H9o=r(ULe," \u2014 "),UD=n(ULe,"A",{href:!0});var Hnt=s(UD);U9o=r(Hnt,"PerceiverForSequenceClassification"),Hnt.forEach(t),J9o=r(ULe," (Perceiver model)"),ULe.forEach(t),Y9o=i(N),rb=n(N,"LI",{});var JLe=s(rb);afe=n(JLe,"STRONG",{});var Unt=s(afe);K9o=r(Unt,"plbart"),Unt.forEach(t),Z9o=r(JLe," \u2014 "),JD=n(JLe,"A",{href:!0});var Jnt=s(JD);e$o=r(Jnt,"PLBartForSequenceClassification"),Jnt.forEach(t),o$o=r(JLe," (PLBart model)"),JLe.forEach(t),r$o=i(N),tb=n(N,"LI",{});var YLe=s(tb);nfe=n(YLe,"STRONG",{});var Ynt=s(nfe);t$o=r(Ynt,"qdqbert"),Ynt.forEach(t),a$o=r(YLe," \u2014 "),YD=n(YLe,"A",{href:!0});var Knt=s(YD);n$o=r(Knt,"QDQBertForSequenceClassification"),Knt.forEach(t),s$o=r(YLe," (QDQBert model)"),YLe.forEach(t),l$o=i(N),ab=n(N,"LI",{});var KLe=s(ab);sfe=n(KLe,"STRONG",{});var Znt=s(sfe);i$o=r(Znt,"reformer"),Znt.forEach(t),d$o=r(KLe," \u2014 "),KD=n(KLe,"A",{href:!0});var est=s(KD);c$o=r(est,"ReformerForSequenceClassification"),est.forEach(t),f$o=r(KLe," (Reformer model)"),KLe.forEach(t),m$o=i(N),nb=n(N,"LI",{});var ZLe=s(nb);lfe=n(ZLe,"STRONG",{});var ost=s(lfe);g$o=r(ost,"rembert"),ost.forEach(t),h$o=r(ZLe," \u2014 "),ZD=n(ZLe,"A",{href:!0});var rst=s(ZD);p$o=r(rst,"RemBertForSequenceClassification"),rst.forEach(t),u$o=r(ZLe," (RemBERT model)"),ZLe.forEach(t),_$o=i(N),sb=n(N,"LI",{});var e8e=s(sb);ife=n(e8e,"STRONG",{});var tst=s(ife);b$o=r(tst,"roberta"),tst.forEach(t),v$o=r(e8e," \u2014 "),eG=n(e8e,"A",{href:!0});var ast=s(eG);F$o=r(ast,"RobertaForSequenceClassification"),ast.forEach(t),T$o=r(e8e," (RoBERTa model)"),e8e.forEach(t),M$o=i(N),lb=n(N,"LI",{});var o8e=s(lb);dfe=n(o8e,"STRONG",{});var nst=s(dfe);E$o=r(nst,"roformer"),nst.forEach(t),C$o=r(o8e," \u2014 "),oG=n(o8e,"A",{href:!0});var sst=s(oG);w$o=r(sst,"RoFormerForSequenceClassification"),sst.forEach(t),A$o=r(o8e," (RoFormer model)"),o8e.forEach(t),y$o=i(N),ib=n(N,"LI",{});var r8e=s(ib);cfe=n(r8e,"STRONG",{});var lst=s(cfe);L$o=r(lst,"squeezebert"),lst.forEach(t),x$o=r(r8e," \u2014 "),rG=n(r8e,"A",{href:!0});var ist=s(rG);$$o=r(ist,"SqueezeBertForSequenceClassification"),ist.forEach(t),k$o=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),S$o=i(N),db=n(N,"LI",{});var t8e=s(db);ffe=n(t8e,"STRONG",{});var dst=s(ffe);R$o=r(dst,"tapas"),dst.forEach(t),B$o=r(t8e," \u2014 "),tG=n(t8e,"A",{href:!0});var cst=s(tG);P$o=r(cst,"TapasForSequenceClassification"),cst.forEach(t),I$o=r(t8e," (TAPAS model)"),t8e.forEach(t),q$o=i(N),cb=n(N,"LI",{});var a8e=s(cb);mfe=n(a8e,"STRONG",{});var fst=s(mfe);N$o=r(fst,"tapex"),fst.forEach(t),j$o=r(a8e," \u2014 "),aG=n(a8e,"A",{href:!0});var mst=s(aG);D$o=r(mst,"BartForSequenceClassification"),mst.forEach(t),G$o=r(a8e," (TAPEX model)"),a8e.forEach(t),O$o=i(N),fb=n(N,"LI",{});var n8e=s(fb);gfe=n(n8e,"STRONG",{});var gst=s(gfe);V$o=r(gst,"transfo-xl"),gst.forEach(t),X$o=r(n8e," \u2014 "),nG=n(n8e,"A",{href:!0});var hst=s(nG);z$o=r(hst,"TransfoXLForSequenceClassification"),hst.forEach(t),Q$o=r(n8e," (Transformer-XL model)"),n8e.forEach(t),W$o=i(N),mb=n(N,"LI",{});var s8e=s(mb);hfe=n(s8e,"STRONG",{});var pst=s(hfe);H$o=r(pst,"xlm"),pst.forEach(t),U$o=r(s8e," \u2014 "),sG=n(s8e,"A",{href:!0});var ust=s(sG);J$o=r(ust,"XLMForSequenceClassification"),ust.forEach(t),Y$o=r(s8e," (XLM model)"),s8e.forEach(t),K$o=i(N),gb=n(N,"LI",{});var l8e=s(gb);pfe=n(l8e,"STRONG",{});var _st=s(pfe);Z$o=r(_st,"xlm-roberta"),_st.forEach(t),eko=r(l8e," \u2014 "),lG=n(l8e,"A",{href:!0});var bst=s(lG);oko=r(bst,"XLMRobertaForSequenceClassification"),bst.forEach(t),rko=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),tko=i(N),hb=n(N,"LI",{});var i8e=s(hb);ufe=n(i8e,"STRONG",{});var vst=s(ufe);ako=r(vst,"xlm-roberta-xl"),vst.forEach(t),nko=r(i8e," \u2014 "),iG=n(i8e,"A",{href:!0});var Fst=s(iG);sko=r(Fst,"XLMRobertaXLForSequenceClassification"),Fst.forEach(t),lko=r(i8e," (XLM-RoBERTa-XL model)"),i8e.forEach(t),iko=i(N),pb=n(N,"LI",{});var d8e=s(pb);_fe=n(d8e,"STRONG",{});var Tst=s(_fe);dko=r(Tst,"xlnet"),Tst.forEach(t),cko=r(d8e," \u2014 "),dG=n(d8e,"A",{href:!0});var Mst=s(dG);fko=r(Mst,"XLNetForSequenceClassification"),Mst.forEach(t),mko=r(d8e," (XLNet model)"),d8e.forEach(t),gko=i(N),ub=n(N,"LI",{});var c8e=s(ub);bfe=n(c8e,"STRONG",{});var Est=s(bfe);hko=r(Est,"yoso"),Est.forEach(t),pko=r(c8e," \u2014 "),cG=n(c8e,"A",{href:!0});var Cst=s(cG);uko=r(Cst,"YosoForSequenceClassification"),Cst.forEach(t),_ko=r(c8e," (YOSO model)"),c8e.forEach(t),N.forEach(t),bko=i(aa),_b=n(aa,"P",{});var f8e=s(_b);vko=r(f8e,"The model is set in evaluation mode by default using "),vfe=n(f8e,"CODE",{});var wst=s(vfe);Fko=r(wst,"model.eval()"),wst.forEach(t),Tko=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(f8e,"CODE",{});var Ast=s(Ffe);Mko=r(Ast,"model.train()"),Ast.forEach(t),f8e.forEach(t),Eko=i(aa),T(bb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),$Ie=i(f),ji=n(f,"H2",{class:!0});var BNe=s(ji);vb=n(BNe,"A",{id:!0,class:!0,href:!0});var yst=s(vb);Tfe=n(yst,"SPAN",{});var Lst=s(Tfe);T(ty.$$.fragment,Lst),Lst.forEach(t),yst.forEach(t),Cko=i(BNe),Mfe=n(BNe,"SPAN",{});var xst=s(Mfe);wko=r(xst,"AutoModelForMultipleChoice"),xst.forEach(t),BNe.forEach(t),kIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(ay.$$.fragment,zs),Ako=i(zs),Di=n(zs,"P",{});var LK=s(Di);yko=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fG=n(LK,"A",{href:!0});var $st=s(fG);Lko=r($st,"from_pretrained()"),$st.forEach(t),xko=r(LK," class method or the "),mG=n(LK,"A",{href:!0});var kst=s(mG);$ko=r(kst,"from_config()"),kst.forEach(t),kko=r(LK,` class
method.`),LK.forEach(t),Sko=i(zs),ny=n(zs,"P",{});var PNe=s(ny);Rko=r(PNe,"This class cannot be instantiated directly using "),Efe=n(PNe,"CODE",{});var Sst=s(Efe);Bko=r(Sst,"__init__()"),Sst.forEach(t),Pko=r(PNe," (throws an error)."),PNe.forEach(t),Iko=i(zs),lt=n(zs,"DIV",{class:!0});var uw=s(lt);T(sy.$$.fragment,uw),qko=i(uw),Cfe=n(uw,"P",{});var Rst=s(Cfe);Nko=r(Rst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rst.forEach(t),jko=i(uw),Gi=n(uw,"P",{});var xK=s(Gi);Dko=r(xK,`Note:
Loading a model from its configuration file does `),wfe=n(xK,"STRONG",{});var Bst=s(wfe);Gko=r(Bst,"not"),Bst.forEach(t),Oko=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(xK,"A",{href:!0});var Pst=s(gG);Vko=r(Pst,"from_pretrained()"),Pst.forEach(t),Xko=r(xK," to load the model weights."),xK.forEach(t),zko=i(uw),T(Fb.$$.fragment,uw),uw.forEach(t),Qko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ly.$$.fragment,na),Wko=i(na),Afe=n(na,"P",{});var Ist=s(Afe);Hko=r(Ist,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ist.forEach(t),Uko=i(na),Sa=n(na,"P",{});var _w=s(Sa);Jko=r(_w,"The model class to instantiate is selected based on the "),yfe=n(_w,"CODE",{});var qst=s(yfe);Yko=r(qst,"model_type"),qst.forEach(t),Kko=r(_w,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(_w,"CODE",{});var Nst=s(Lfe);Zko=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),eSo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(_w,"CODE",{});var jst=s(xfe);oSo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),rSo=r(_w,":"),_w.forEach(t),tSo=i(na),Y=n(na,"UL",{});var K=s(Y);Tb=n(K,"LI",{});var m8e=s(Tb);$fe=n(m8e,"STRONG",{});var Dst=s($fe);aSo=r(Dst,"albert"),Dst.forEach(t),nSo=r(m8e," \u2014 "),hG=n(m8e,"A",{href:!0});var Gst=s(hG);sSo=r(Gst,"AlbertForMultipleChoice"),Gst.forEach(t),lSo=r(m8e," (ALBERT model)"),m8e.forEach(t),iSo=i(K),Mb=n(K,"LI",{});var g8e=s(Mb);kfe=n(g8e,"STRONG",{});var Ost=s(kfe);dSo=r(Ost,"bert"),Ost.forEach(t),cSo=r(g8e," \u2014 "),pG=n(g8e,"A",{href:!0});var Vst=s(pG);fSo=r(Vst,"BertForMultipleChoice"),Vst.forEach(t),mSo=r(g8e," (BERT model)"),g8e.forEach(t),gSo=i(K),Eb=n(K,"LI",{});var h8e=s(Eb);Sfe=n(h8e,"STRONG",{});var Xst=s(Sfe);hSo=r(Xst,"big_bird"),Xst.forEach(t),pSo=r(h8e," \u2014 "),uG=n(h8e,"A",{href:!0});var zst=s(uG);uSo=r(zst,"BigBirdForMultipleChoice"),zst.forEach(t),_So=r(h8e," (BigBird model)"),h8e.forEach(t),bSo=i(K),Cb=n(K,"LI",{});var p8e=s(Cb);Rfe=n(p8e,"STRONG",{});var Qst=s(Rfe);vSo=r(Qst,"camembert"),Qst.forEach(t),FSo=r(p8e," \u2014 "),_G=n(p8e,"A",{href:!0});var Wst=s(_G);TSo=r(Wst,"CamembertForMultipleChoice"),Wst.forEach(t),MSo=r(p8e," (CamemBERT model)"),p8e.forEach(t),ESo=i(K),wb=n(K,"LI",{});var u8e=s(wb);Bfe=n(u8e,"STRONG",{});var Hst=s(Bfe);CSo=r(Hst,"canine"),Hst.forEach(t),wSo=r(u8e," \u2014 "),bG=n(u8e,"A",{href:!0});var Ust=s(bG);ASo=r(Ust,"CanineForMultipleChoice"),Ust.forEach(t),ySo=r(u8e," (Canine model)"),u8e.forEach(t),LSo=i(K),Ab=n(K,"LI",{});var _8e=s(Ab);Pfe=n(_8e,"STRONG",{});var Jst=s(Pfe);xSo=r(Jst,"convbert"),Jst.forEach(t),$So=r(_8e," \u2014 "),vG=n(_8e,"A",{href:!0});var Yst=s(vG);kSo=r(Yst,"ConvBertForMultipleChoice"),Yst.forEach(t),SSo=r(_8e," (ConvBERT model)"),_8e.forEach(t),RSo=i(K),yb=n(K,"LI",{});var b8e=s(yb);Ife=n(b8e,"STRONG",{});var Kst=s(Ife);BSo=r(Kst,"data2vec-text"),Kst.forEach(t),PSo=r(b8e," \u2014 "),FG=n(b8e,"A",{href:!0});var Zst=s(FG);ISo=r(Zst,"Data2VecTextForMultipleChoice"),Zst.forEach(t),qSo=r(b8e," (Data2VecText model)"),b8e.forEach(t),NSo=i(K),Lb=n(K,"LI",{});var v8e=s(Lb);qfe=n(v8e,"STRONG",{});var elt=s(qfe);jSo=r(elt,"deberta-v2"),elt.forEach(t),DSo=r(v8e," \u2014 "),TG=n(v8e,"A",{href:!0});var olt=s(TG);GSo=r(olt,"DebertaV2ForMultipleChoice"),olt.forEach(t),OSo=r(v8e," (DeBERTa-v2 model)"),v8e.forEach(t),VSo=i(K),xb=n(K,"LI",{});var F8e=s(xb);Nfe=n(F8e,"STRONG",{});var rlt=s(Nfe);XSo=r(rlt,"distilbert"),rlt.forEach(t),zSo=r(F8e," \u2014 "),MG=n(F8e,"A",{href:!0});var tlt=s(MG);QSo=r(tlt,"DistilBertForMultipleChoice"),tlt.forEach(t),WSo=r(F8e," (DistilBERT model)"),F8e.forEach(t),HSo=i(K),$b=n(K,"LI",{});var T8e=s($b);jfe=n(T8e,"STRONG",{});var alt=s(jfe);USo=r(alt,"electra"),alt.forEach(t),JSo=r(T8e," \u2014 "),EG=n(T8e,"A",{href:!0});var nlt=s(EG);YSo=r(nlt,"ElectraForMultipleChoice"),nlt.forEach(t),KSo=r(T8e," (ELECTRA model)"),T8e.forEach(t),ZSo=i(K),kb=n(K,"LI",{});var M8e=s(kb);Dfe=n(M8e,"STRONG",{});var slt=s(Dfe);eRo=r(slt,"flaubert"),slt.forEach(t),oRo=r(M8e," \u2014 "),CG=n(M8e,"A",{href:!0});var llt=s(CG);rRo=r(llt,"FlaubertForMultipleChoice"),llt.forEach(t),tRo=r(M8e," (FlauBERT model)"),M8e.forEach(t),aRo=i(K),Sb=n(K,"LI",{});var E8e=s(Sb);Gfe=n(E8e,"STRONG",{});var ilt=s(Gfe);nRo=r(ilt,"fnet"),ilt.forEach(t),sRo=r(E8e," \u2014 "),wG=n(E8e,"A",{href:!0});var dlt=s(wG);lRo=r(dlt,"FNetForMultipleChoice"),dlt.forEach(t),iRo=r(E8e," (FNet model)"),E8e.forEach(t),dRo=i(K),Rb=n(K,"LI",{});var C8e=s(Rb);Ofe=n(C8e,"STRONG",{});var clt=s(Ofe);cRo=r(clt,"funnel"),clt.forEach(t),fRo=r(C8e," \u2014 "),AG=n(C8e,"A",{href:!0});var flt=s(AG);mRo=r(flt,"FunnelForMultipleChoice"),flt.forEach(t),gRo=r(C8e," (Funnel Transformer model)"),C8e.forEach(t),hRo=i(K),Bb=n(K,"LI",{});var w8e=s(Bb);Vfe=n(w8e,"STRONG",{});var mlt=s(Vfe);pRo=r(mlt,"ibert"),mlt.forEach(t),uRo=r(w8e," \u2014 "),yG=n(w8e,"A",{href:!0});var glt=s(yG);_Ro=r(glt,"IBertForMultipleChoice"),glt.forEach(t),bRo=r(w8e," (I-BERT model)"),w8e.forEach(t),vRo=i(K),Pb=n(K,"LI",{});var A8e=s(Pb);Xfe=n(A8e,"STRONG",{});var hlt=s(Xfe);FRo=r(hlt,"longformer"),hlt.forEach(t),TRo=r(A8e," \u2014 "),LG=n(A8e,"A",{href:!0});var plt=s(LG);MRo=r(plt,"LongformerForMultipleChoice"),plt.forEach(t),ERo=r(A8e," (Longformer model)"),A8e.forEach(t),CRo=i(K),Ib=n(K,"LI",{});var y8e=s(Ib);zfe=n(y8e,"STRONG",{});var ult=s(zfe);wRo=r(ult,"megatron-bert"),ult.forEach(t),ARo=r(y8e," \u2014 "),xG=n(y8e,"A",{href:!0});var _lt=s(xG);yRo=r(_lt,"MegatronBertForMultipleChoice"),_lt.forEach(t),LRo=r(y8e," (MegatronBert model)"),y8e.forEach(t),xRo=i(K),qb=n(K,"LI",{});var L8e=s(qb);Qfe=n(L8e,"STRONG",{});var blt=s(Qfe);$Ro=r(blt,"mobilebert"),blt.forEach(t),kRo=r(L8e," \u2014 "),$G=n(L8e,"A",{href:!0});var vlt=s($G);SRo=r(vlt,"MobileBertForMultipleChoice"),vlt.forEach(t),RRo=r(L8e," (MobileBERT model)"),L8e.forEach(t),BRo=i(K),Nb=n(K,"LI",{});var x8e=s(Nb);Wfe=n(x8e,"STRONG",{});var Flt=s(Wfe);PRo=r(Flt,"mpnet"),Flt.forEach(t),IRo=r(x8e," \u2014 "),kG=n(x8e,"A",{href:!0});var Tlt=s(kG);qRo=r(Tlt,"MPNetForMultipleChoice"),Tlt.forEach(t),NRo=r(x8e," (MPNet model)"),x8e.forEach(t),jRo=i(K),jb=n(K,"LI",{});var $8e=s(jb);Hfe=n($8e,"STRONG",{});var Mlt=s(Hfe);DRo=r(Mlt,"nystromformer"),Mlt.forEach(t),GRo=r($8e," \u2014 "),SG=n($8e,"A",{href:!0});var Elt=s(SG);ORo=r(Elt,"NystromformerForMultipleChoice"),Elt.forEach(t),VRo=r($8e," (Nystromformer model)"),$8e.forEach(t),XRo=i(K),Db=n(K,"LI",{});var k8e=s(Db);Ufe=n(k8e,"STRONG",{});var Clt=s(Ufe);zRo=r(Clt,"qdqbert"),Clt.forEach(t),QRo=r(k8e," \u2014 "),RG=n(k8e,"A",{href:!0});var wlt=s(RG);WRo=r(wlt,"QDQBertForMultipleChoice"),wlt.forEach(t),HRo=r(k8e," (QDQBert model)"),k8e.forEach(t),URo=i(K),Gb=n(K,"LI",{});var S8e=s(Gb);Jfe=n(S8e,"STRONG",{});var Alt=s(Jfe);JRo=r(Alt,"rembert"),Alt.forEach(t),YRo=r(S8e," \u2014 "),BG=n(S8e,"A",{href:!0});var ylt=s(BG);KRo=r(ylt,"RemBertForMultipleChoice"),ylt.forEach(t),ZRo=r(S8e," (RemBERT model)"),S8e.forEach(t),eBo=i(K),Ob=n(K,"LI",{});var R8e=s(Ob);Yfe=n(R8e,"STRONG",{});var Llt=s(Yfe);oBo=r(Llt,"roberta"),Llt.forEach(t),rBo=r(R8e," \u2014 "),PG=n(R8e,"A",{href:!0});var xlt=s(PG);tBo=r(xlt,"RobertaForMultipleChoice"),xlt.forEach(t),aBo=r(R8e," (RoBERTa model)"),R8e.forEach(t),nBo=i(K),Vb=n(K,"LI",{});var B8e=s(Vb);Kfe=n(B8e,"STRONG",{});var $lt=s(Kfe);sBo=r($lt,"roformer"),$lt.forEach(t),lBo=r(B8e," \u2014 "),IG=n(B8e,"A",{href:!0});var klt=s(IG);iBo=r(klt,"RoFormerForMultipleChoice"),klt.forEach(t),dBo=r(B8e," (RoFormer model)"),B8e.forEach(t),cBo=i(K),Xb=n(K,"LI",{});var P8e=s(Xb);Zfe=n(P8e,"STRONG",{});var Slt=s(Zfe);fBo=r(Slt,"squeezebert"),Slt.forEach(t),mBo=r(P8e," \u2014 "),qG=n(P8e,"A",{href:!0});var Rlt=s(qG);gBo=r(Rlt,"SqueezeBertForMultipleChoice"),Rlt.forEach(t),hBo=r(P8e," (SqueezeBERT model)"),P8e.forEach(t),pBo=i(K),zb=n(K,"LI",{});var I8e=s(zb);eme=n(I8e,"STRONG",{});var Blt=s(eme);uBo=r(Blt,"xlm"),Blt.forEach(t),_Bo=r(I8e," \u2014 "),NG=n(I8e,"A",{href:!0});var Plt=s(NG);bBo=r(Plt,"XLMForMultipleChoice"),Plt.forEach(t),vBo=r(I8e," (XLM model)"),I8e.forEach(t),FBo=i(K),Qb=n(K,"LI",{});var q8e=s(Qb);ome=n(q8e,"STRONG",{});var Ilt=s(ome);TBo=r(Ilt,"xlm-roberta"),Ilt.forEach(t),MBo=r(q8e," \u2014 "),jG=n(q8e,"A",{href:!0});var qlt=s(jG);EBo=r(qlt,"XLMRobertaForMultipleChoice"),qlt.forEach(t),CBo=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),wBo=i(K),Wb=n(K,"LI",{});var N8e=s(Wb);rme=n(N8e,"STRONG",{});var Nlt=s(rme);ABo=r(Nlt,"xlm-roberta-xl"),Nlt.forEach(t),yBo=r(N8e," \u2014 "),DG=n(N8e,"A",{href:!0});var jlt=s(DG);LBo=r(jlt,"XLMRobertaXLForMultipleChoice"),jlt.forEach(t),xBo=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),$Bo=i(K),Hb=n(K,"LI",{});var j8e=s(Hb);tme=n(j8e,"STRONG",{});var Dlt=s(tme);kBo=r(Dlt,"xlnet"),Dlt.forEach(t),SBo=r(j8e," \u2014 "),GG=n(j8e,"A",{href:!0});var Glt=s(GG);RBo=r(Glt,"XLNetForMultipleChoice"),Glt.forEach(t),BBo=r(j8e," (XLNet model)"),j8e.forEach(t),PBo=i(K),Ub=n(K,"LI",{});var D8e=s(Ub);ame=n(D8e,"STRONG",{});var Olt=s(ame);IBo=r(Olt,"yoso"),Olt.forEach(t),qBo=r(D8e," \u2014 "),OG=n(D8e,"A",{href:!0});var Vlt=s(OG);NBo=r(Vlt,"YosoForMultipleChoice"),Vlt.forEach(t),jBo=r(D8e," (YOSO model)"),D8e.forEach(t),K.forEach(t),DBo=i(na),Jb=n(na,"P",{});var G8e=s(Jb);GBo=r(G8e,"The model is set in evaluation mode by default using "),nme=n(G8e,"CODE",{});var Xlt=s(nme);OBo=r(Xlt,"model.eval()"),Xlt.forEach(t),VBo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(G8e,"CODE",{});var zlt=s(sme);XBo=r(zlt,"model.train()"),zlt.forEach(t),G8e.forEach(t),zBo=i(na),T(Yb.$$.fragment,na),na.forEach(t),zs.forEach(t),SIe=i(f),Oi=n(f,"H2",{class:!0});var INe=s(Oi);Kb=n(INe,"A",{id:!0,class:!0,href:!0});var Qlt=s(Kb);lme=n(Qlt,"SPAN",{});var Wlt=s(lme);T(iy.$$.fragment,Wlt),Wlt.forEach(t),Qlt.forEach(t),QBo=i(INe),ime=n(INe,"SPAN",{});var Hlt=s(ime);WBo=r(Hlt,"AutoModelForNextSentencePrediction"),Hlt.forEach(t),INe.forEach(t),RIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(dy.$$.fragment,Qs),HBo=i(Qs),Vi=n(Qs,"P",{});var $K=s(Vi);UBo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VG=n($K,"A",{href:!0});var Ult=s(VG);JBo=r(Ult,"from_pretrained()"),Ult.forEach(t),YBo=r($K," class method or the "),XG=n($K,"A",{href:!0});var Jlt=s(XG);KBo=r(Jlt,"from_config()"),Jlt.forEach(t),ZBo=r($K,` class
method.`),$K.forEach(t),ePo=i(Qs),cy=n(Qs,"P",{});var qNe=s(cy);oPo=r(qNe,"This class cannot be instantiated directly using "),dme=n(qNe,"CODE",{});var Ylt=s(dme);rPo=r(Ylt,"__init__()"),Ylt.forEach(t),tPo=r(qNe," (throws an error)."),qNe.forEach(t),aPo=i(Qs),it=n(Qs,"DIV",{class:!0});var bw=s(it);T(fy.$$.fragment,bw),nPo=i(bw),cme=n(bw,"P",{});var Klt=s(cme);sPo=r(Klt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Klt.forEach(t),lPo=i(bw),Xi=n(bw,"P",{});var kK=s(Xi);iPo=r(kK,`Note:
Loading a model from its configuration file does `),fme=n(kK,"STRONG",{});var Zlt=s(fme);dPo=r(Zlt,"not"),Zlt.forEach(t),cPo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(kK,"A",{href:!0});var eit=s(zG);fPo=r(eit,"from_pretrained()"),eit.forEach(t),mPo=r(kK," to load the model weights."),kK.forEach(t),gPo=i(bw),T(Zb.$$.fragment,bw),bw.forEach(t),hPo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(my.$$.fragment,sa),pPo=i(sa),mme=n(sa,"P",{});var oit=s(mme);uPo=r(oit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oit.forEach(t),_Po=i(sa),Ra=n(sa,"P",{});var vw=s(Ra);bPo=r(vw,"The model class to instantiate is selected based on the "),gme=n(vw,"CODE",{});var rit=s(gme);vPo=r(rit,"model_type"),rit.forEach(t),FPo=r(vw,` property of the config object (either
passed as an argument or loaded from `),hme=n(vw,"CODE",{});var tit=s(hme);TPo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),MPo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(vw,"CODE",{});var ait=s(pme);EPo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),CPo=r(vw,":"),vw.forEach(t),wPo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);e5=n(Ws,"LI",{});var O8e=s(e5);ume=n(O8e,"STRONG",{});var nit=s(ume);APo=r(nit,"bert"),nit.forEach(t),yPo=r(O8e," \u2014 "),QG=n(O8e,"A",{href:!0});var sit=s(QG);LPo=r(sit,"BertForNextSentencePrediction"),sit.forEach(t),xPo=r(O8e," (BERT model)"),O8e.forEach(t),$Po=i(Ws),o5=n(Ws,"LI",{});var V8e=s(o5);_me=n(V8e,"STRONG",{});var lit=s(_me);kPo=r(lit,"fnet"),lit.forEach(t),SPo=r(V8e," \u2014 "),WG=n(V8e,"A",{href:!0});var iit=s(WG);RPo=r(iit,"FNetForNextSentencePrediction"),iit.forEach(t),BPo=r(V8e," (FNet model)"),V8e.forEach(t),PPo=i(Ws),r5=n(Ws,"LI",{});var X8e=s(r5);bme=n(X8e,"STRONG",{});var dit=s(bme);IPo=r(dit,"megatron-bert"),dit.forEach(t),qPo=r(X8e," \u2014 "),HG=n(X8e,"A",{href:!0});var cit=s(HG);NPo=r(cit,"MegatronBertForNextSentencePrediction"),cit.forEach(t),jPo=r(X8e," (MegatronBert model)"),X8e.forEach(t),DPo=i(Ws),t5=n(Ws,"LI",{});var z8e=s(t5);vme=n(z8e,"STRONG",{});var fit=s(vme);GPo=r(fit,"mobilebert"),fit.forEach(t),OPo=r(z8e," \u2014 "),UG=n(z8e,"A",{href:!0});var mit=s(UG);VPo=r(mit,"MobileBertForNextSentencePrediction"),mit.forEach(t),XPo=r(z8e," (MobileBERT model)"),z8e.forEach(t),zPo=i(Ws),a5=n(Ws,"LI",{});var Q8e=s(a5);Fme=n(Q8e,"STRONG",{});var git=s(Fme);QPo=r(git,"qdqbert"),git.forEach(t),WPo=r(Q8e," \u2014 "),JG=n(Q8e,"A",{href:!0});var hit=s(JG);HPo=r(hit,"QDQBertForNextSentencePrediction"),hit.forEach(t),UPo=r(Q8e," (QDQBert model)"),Q8e.forEach(t),Ws.forEach(t),JPo=i(sa),n5=n(sa,"P",{});var W8e=s(n5);YPo=r(W8e,"The model is set in evaluation mode by default using "),Tme=n(W8e,"CODE",{});var pit=s(Tme);KPo=r(pit,"model.eval()"),pit.forEach(t),ZPo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(W8e,"CODE",{});var uit=s(Mme);eIo=r(uit,"model.train()"),uit.forEach(t),W8e.forEach(t),oIo=i(sa),T(s5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),BIe=i(f),zi=n(f,"H2",{class:!0});var NNe=s(zi);l5=n(NNe,"A",{id:!0,class:!0,href:!0});var _it=s(l5);Eme=n(_it,"SPAN",{});var bit=s(Eme);T(gy.$$.fragment,bit),bit.forEach(t),_it.forEach(t),rIo=i(NNe),Cme=n(NNe,"SPAN",{});var vit=s(Cme);tIo=r(vit,"AutoModelForTokenClassification"),vit.forEach(t),NNe.forEach(t),PIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(hy.$$.fragment,Hs),aIo=i(Hs),Qi=n(Hs,"P",{});var SK=s(Qi);nIo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YG=n(SK,"A",{href:!0});var Fit=s(YG);sIo=r(Fit,"from_pretrained()"),Fit.forEach(t),lIo=r(SK," class method or the "),KG=n(SK,"A",{href:!0});var Tit=s(KG);iIo=r(Tit,"from_config()"),Tit.forEach(t),dIo=r(SK,` class
method.`),SK.forEach(t),cIo=i(Hs),py=n(Hs,"P",{});var jNe=s(py);fIo=r(jNe,"This class cannot be instantiated directly using "),wme=n(jNe,"CODE",{});var Mit=s(wme);mIo=r(Mit,"__init__()"),Mit.forEach(t),gIo=r(jNe," (throws an error)."),jNe.forEach(t),hIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Fw=s(dt);T(uy.$$.fragment,Fw),pIo=i(Fw),Ame=n(Fw,"P",{});var Eit=s(Ame);uIo=r(Eit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Eit.forEach(t),_Io=i(Fw),Wi=n(Fw,"P",{});var RK=s(Wi);bIo=r(RK,`Note:
Loading a model from its configuration file does `),yme=n(RK,"STRONG",{});var Cit=s(yme);vIo=r(Cit,"not"),Cit.forEach(t),FIo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(RK,"A",{href:!0});var wit=s(ZG);TIo=r(wit,"from_pretrained()"),wit.forEach(t),MIo=r(RK," to load the model weights."),RK.forEach(t),EIo=i(Fw),T(i5.$$.fragment,Fw),Fw.forEach(t),CIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(_y.$$.fragment,la),wIo=i(la),Lme=n(la,"P",{});var Ait=s(Lme);AIo=r(Ait,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ait.forEach(t),yIo=i(la),Ba=n(la,"P",{});var Tw=s(Ba);LIo=r(Tw,"The model class to instantiate is selected based on the "),xme=n(Tw,"CODE",{});var yit=s(xme);xIo=r(yit,"model_type"),yit.forEach(t),$Io=r(Tw,` property of the config object (either
passed as an argument or loaded from `),$me=n(Tw,"CODE",{});var Lit=s($me);kIo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),SIo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(Tw,"CODE",{});var xit=s(kme);RIo=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),BIo=r(Tw,":"),Tw.forEach(t),PIo=i(la),U=n(la,"UL",{});var J=s(U);d5=n(J,"LI",{});var H8e=s(d5);Sme=n(H8e,"STRONG",{});var $it=s(Sme);IIo=r($it,"albert"),$it.forEach(t),qIo=r(H8e," \u2014 "),eO=n(H8e,"A",{href:!0});var kit=s(eO);NIo=r(kit,"AlbertForTokenClassification"),kit.forEach(t),jIo=r(H8e," (ALBERT model)"),H8e.forEach(t),DIo=i(J),c5=n(J,"LI",{});var U8e=s(c5);Rme=n(U8e,"STRONG",{});var Sit=s(Rme);GIo=r(Sit,"bert"),Sit.forEach(t),OIo=r(U8e," \u2014 "),oO=n(U8e,"A",{href:!0});var Rit=s(oO);VIo=r(Rit,"BertForTokenClassification"),Rit.forEach(t),XIo=r(U8e," (BERT model)"),U8e.forEach(t),zIo=i(J),f5=n(J,"LI",{});var J8e=s(f5);Bme=n(J8e,"STRONG",{});var Bit=s(Bme);QIo=r(Bit,"big_bird"),Bit.forEach(t),WIo=r(J8e," \u2014 "),rO=n(J8e,"A",{href:!0});var Pit=s(rO);HIo=r(Pit,"BigBirdForTokenClassification"),Pit.forEach(t),UIo=r(J8e," (BigBird model)"),J8e.forEach(t),JIo=i(J),m5=n(J,"LI",{});var Y8e=s(m5);Pme=n(Y8e,"STRONG",{});var Iit=s(Pme);YIo=r(Iit,"camembert"),Iit.forEach(t),KIo=r(Y8e," \u2014 "),tO=n(Y8e,"A",{href:!0});var qit=s(tO);ZIo=r(qit,"CamembertForTokenClassification"),qit.forEach(t),eqo=r(Y8e," (CamemBERT model)"),Y8e.forEach(t),oqo=i(J),g5=n(J,"LI",{});var K8e=s(g5);Ime=n(K8e,"STRONG",{});var Nit=s(Ime);rqo=r(Nit,"canine"),Nit.forEach(t),tqo=r(K8e," \u2014 "),aO=n(K8e,"A",{href:!0});var jit=s(aO);aqo=r(jit,"CanineForTokenClassification"),jit.forEach(t),nqo=r(K8e," (Canine model)"),K8e.forEach(t),sqo=i(J),h5=n(J,"LI",{});var Z8e=s(h5);qme=n(Z8e,"STRONG",{});var Dit=s(qme);lqo=r(Dit,"convbert"),Dit.forEach(t),iqo=r(Z8e," \u2014 "),nO=n(Z8e,"A",{href:!0});var Git=s(nO);dqo=r(Git,"ConvBertForTokenClassification"),Git.forEach(t),cqo=r(Z8e," (ConvBERT model)"),Z8e.forEach(t),fqo=i(J),p5=n(J,"LI",{});var exe=s(p5);Nme=n(exe,"STRONG",{});var Oit=s(Nme);mqo=r(Oit,"data2vec-text"),Oit.forEach(t),gqo=r(exe," \u2014 "),sO=n(exe,"A",{href:!0});var Vit=s(sO);hqo=r(Vit,"Data2VecTextForTokenClassification"),Vit.forEach(t),pqo=r(exe," (Data2VecText model)"),exe.forEach(t),uqo=i(J),u5=n(J,"LI",{});var oxe=s(u5);jme=n(oxe,"STRONG",{});var Xit=s(jme);_qo=r(Xit,"deberta"),Xit.forEach(t),bqo=r(oxe," \u2014 "),lO=n(oxe,"A",{href:!0});var zit=s(lO);vqo=r(zit,"DebertaForTokenClassification"),zit.forEach(t),Fqo=r(oxe," (DeBERTa model)"),oxe.forEach(t),Tqo=i(J),_5=n(J,"LI",{});var rxe=s(_5);Dme=n(rxe,"STRONG",{});var Qit=s(Dme);Mqo=r(Qit,"deberta-v2"),Qit.forEach(t),Eqo=r(rxe," \u2014 "),iO=n(rxe,"A",{href:!0});var Wit=s(iO);Cqo=r(Wit,"DebertaV2ForTokenClassification"),Wit.forEach(t),wqo=r(rxe," (DeBERTa-v2 model)"),rxe.forEach(t),Aqo=i(J),b5=n(J,"LI",{});var txe=s(b5);Gme=n(txe,"STRONG",{});var Hit=s(Gme);yqo=r(Hit,"distilbert"),Hit.forEach(t),Lqo=r(txe," \u2014 "),dO=n(txe,"A",{href:!0});var Uit=s(dO);xqo=r(Uit,"DistilBertForTokenClassification"),Uit.forEach(t),$qo=r(txe," (DistilBERT model)"),txe.forEach(t),kqo=i(J),v5=n(J,"LI",{});var axe=s(v5);Ome=n(axe,"STRONG",{});var Jit=s(Ome);Sqo=r(Jit,"electra"),Jit.forEach(t),Rqo=r(axe," \u2014 "),cO=n(axe,"A",{href:!0});var Yit=s(cO);Bqo=r(Yit,"ElectraForTokenClassification"),Yit.forEach(t),Pqo=r(axe," (ELECTRA model)"),axe.forEach(t),Iqo=i(J),F5=n(J,"LI",{});var nxe=s(F5);Vme=n(nxe,"STRONG",{});var Kit=s(Vme);qqo=r(Kit,"flaubert"),Kit.forEach(t),Nqo=r(nxe," \u2014 "),fO=n(nxe,"A",{href:!0});var Zit=s(fO);jqo=r(Zit,"FlaubertForTokenClassification"),Zit.forEach(t),Dqo=r(nxe," (FlauBERT model)"),nxe.forEach(t),Gqo=i(J),T5=n(J,"LI",{});var sxe=s(T5);Xme=n(sxe,"STRONG",{});var edt=s(Xme);Oqo=r(edt,"fnet"),edt.forEach(t),Vqo=r(sxe," \u2014 "),mO=n(sxe,"A",{href:!0});var odt=s(mO);Xqo=r(odt,"FNetForTokenClassification"),odt.forEach(t),zqo=r(sxe," (FNet model)"),sxe.forEach(t),Qqo=i(J),M5=n(J,"LI",{});var lxe=s(M5);zme=n(lxe,"STRONG",{});var rdt=s(zme);Wqo=r(rdt,"funnel"),rdt.forEach(t),Hqo=r(lxe," \u2014 "),gO=n(lxe,"A",{href:!0});var tdt=s(gO);Uqo=r(tdt,"FunnelForTokenClassification"),tdt.forEach(t),Jqo=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),Yqo=i(J),E5=n(J,"LI",{});var ixe=s(E5);Qme=n(ixe,"STRONG",{});var adt=s(Qme);Kqo=r(adt,"gpt2"),adt.forEach(t),Zqo=r(ixe," \u2014 "),hO=n(ixe,"A",{href:!0});var ndt=s(hO);eNo=r(ndt,"GPT2ForTokenClassification"),ndt.forEach(t),oNo=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),rNo=i(J),C5=n(J,"LI",{});var dxe=s(C5);Wme=n(dxe,"STRONG",{});var sdt=s(Wme);tNo=r(sdt,"ibert"),sdt.forEach(t),aNo=r(dxe," \u2014 "),pO=n(dxe,"A",{href:!0});var ldt=s(pO);nNo=r(ldt,"IBertForTokenClassification"),ldt.forEach(t),sNo=r(dxe," (I-BERT model)"),dxe.forEach(t),lNo=i(J),w5=n(J,"LI",{});var cxe=s(w5);Hme=n(cxe,"STRONG",{});var idt=s(Hme);iNo=r(idt,"layoutlm"),idt.forEach(t),dNo=r(cxe," \u2014 "),uO=n(cxe,"A",{href:!0});var ddt=s(uO);cNo=r(ddt,"LayoutLMForTokenClassification"),ddt.forEach(t),fNo=r(cxe," (LayoutLM model)"),cxe.forEach(t),mNo=i(J),A5=n(J,"LI",{});var fxe=s(A5);Ume=n(fxe,"STRONG",{});var cdt=s(Ume);gNo=r(cdt,"layoutlmv2"),cdt.forEach(t),hNo=r(fxe," \u2014 "),_O=n(fxe,"A",{href:!0});var fdt=s(_O);pNo=r(fdt,"LayoutLMv2ForTokenClassification"),fdt.forEach(t),uNo=r(fxe," (LayoutLMv2 model)"),fxe.forEach(t),_No=i(J),y5=n(J,"LI",{});var mxe=s(y5);Jme=n(mxe,"STRONG",{});var mdt=s(Jme);bNo=r(mdt,"longformer"),mdt.forEach(t),vNo=r(mxe," \u2014 "),bO=n(mxe,"A",{href:!0});var gdt=s(bO);FNo=r(gdt,"LongformerForTokenClassification"),gdt.forEach(t),TNo=r(mxe," (Longformer model)"),mxe.forEach(t),MNo=i(J),L5=n(J,"LI",{});var gxe=s(L5);Yme=n(gxe,"STRONG",{});var hdt=s(Yme);ENo=r(hdt,"megatron-bert"),hdt.forEach(t),CNo=r(gxe," \u2014 "),vO=n(gxe,"A",{href:!0});var pdt=s(vO);wNo=r(pdt,"MegatronBertForTokenClassification"),pdt.forEach(t),ANo=r(gxe," (MegatronBert model)"),gxe.forEach(t),yNo=i(J),x5=n(J,"LI",{});var hxe=s(x5);Kme=n(hxe,"STRONG",{});var udt=s(Kme);LNo=r(udt,"mobilebert"),udt.forEach(t),xNo=r(hxe," \u2014 "),FO=n(hxe,"A",{href:!0});var _dt=s(FO);$No=r(_dt,"MobileBertForTokenClassification"),_dt.forEach(t),kNo=r(hxe," (MobileBERT model)"),hxe.forEach(t),SNo=i(J),$5=n(J,"LI",{});var pxe=s($5);Zme=n(pxe,"STRONG",{});var bdt=s(Zme);RNo=r(bdt,"mpnet"),bdt.forEach(t),BNo=r(pxe," \u2014 "),TO=n(pxe,"A",{href:!0});var vdt=s(TO);PNo=r(vdt,"MPNetForTokenClassification"),vdt.forEach(t),INo=r(pxe," (MPNet model)"),pxe.forEach(t),qNo=i(J),k5=n(J,"LI",{});var uxe=s(k5);ege=n(uxe,"STRONG",{});var Fdt=s(ege);NNo=r(Fdt,"nystromformer"),Fdt.forEach(t),jNo=r(uxe," \u2014 "),MO=n(uxe,"A",{href:!0});var Tdt=s(MO);DNo=r(Tdt,"NystromformerForTokenClassification"),Tdt.forEach(t),GNo=r(uxe," (Nystromformer model)"),uxe.forEach(t),ONo=i(J),S5=n(J,"LI",{});var _xe=s(S5);oge=n(_xe,"STRONG",{});var Mdt=s(oge);VNo=r(Mdt,"qdqbert"),Mdt.forEach(t),XNo=r(_xe," \u2014 "),EO=n(_xe,"A",{href:!0});var Edt=s(EO);zNo=r(Edt,"QDQBertForTokenClassification"),Edt.forEach(t),QNo=r(_xe," (QDQBert model)"),_xe.forEach(t),WNo=i(J),R5=n(J,"LI",{});var bxe=s(R5);rge=n(bxe,"STRONG",{});var Cdt=s(rge);HNo=r(Cdt,"rembert"),Cdt.forEach(t),UNo=r(bxe," \u2014 "),CO=n(bxe,"A",{href:!0});var wdt=s(CO);JNo=r(wdt,"RemBertForTokenClassification"),wdt.forEach(t),YNo=r(bxe," (RemBERT model)"),bxe.forEach(t),KNo=i(J),B5=n(J,"LI",{});var vxe=s(B5);tge=n(vxe,"STRONG",{});var Adt=s(tge);ZNo=r(Adt,"roberta"),Adt.forEach(t),ejo=r(vxe," \u2014 "),wO=n(vxe,"A",{href:!0});var ydt=s(wO);ojo=r(ydt,"RobertaForTokenClassification"),ydt.forEach(t),rjo=r(vxe," (RoBERTa model)"),vxe.forEach(t),tjo=i(J),P5=n(J,"LI",{});var Fxe=s(P5);age=n(Fxe,"STRONG",{});var Ldt=s(age);ajo=r(Ldt,"roformer"),Ldt.forEach(t),njo=r(Fxe," \u2014 "),AO=n(Fxe,"A",{href:!0});var xdt=s(AO);sjo=r(xdt,"RoFormerForTokenClassification"),xdt.forEach(t),ljo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),ijo=i(J),I5=n(J,"LI",{});var Txe=s(I5);nge=n(Txe,"STRONG",{});var $dt=s(nge);djo=r($dt,"squeezebert"),$dt.forEach(t),cjo=r(Txe," \u2014 "),yO=n(Txe,"A",{href:!0});var kdt=s(yO);fjo=r(kdt,"SqueezeBertForTokenClassification"),kdt.forEach(t),mjo=r(Txe," (SqueezeBERT model)"),Txe.forEach(t),gjo=i(J),q5=n(J,"LI",{});var Mxe=s(q5);sge=n(Mxe,"STRONG",{});var Sdt=s(sge);hjo=r(Sdt,"xlm"),Sdt.forEach(t),pjo=r(Mxe," \u2014 "),LO=n(Mxe,"A",{href:!0});var Rdt=s(LO);ujo=r(Rdt,"XLMForTokenClassification"),Rdt.forEach(t),_jo=r(Mxe," (XLM model)"),Mxe.forEach(t),bjo=i(J),N5=n(J,"LI",{});var Exe=s(N5);lge=n(Exe,"STRONG",{});var Bdt=s(lge);vjo=r(Bdt,"xlm-roberta"),Bdt.forEach(t),Fjo=r(Exe," \u2014 "),xO=n(Exe,"A",{href:!0});var Pdt=s(xO);Tjo=r(Pdt,"XLMRobertaForTokenClassification"),Pdt.forEach(t),Mjo=r(Exe," (XLM-RoBERTa model)"),Exe.forEach(t),Ejo=i(J),j5=n(J,"LI",{});var Cxe=s(j5);ige=n(Cxe,"STRONG",{});var Idt=s(ige);Cjo=r(Idt,"xlm-roberta-xl"),Idt.forEach(t),wjo=r(Cxe," \u2014 "),$O=n(Cxe,"A",{href:!0});var qdt=s($O);Ajo=r(qdt,"XLMRobertaXLForTokenClassification"),qdt.forEach(t),yjo=r(Cxe," (XLM-RoBERTa-XL model)"),Cxe.forEach(t),Ljo=i(J),D5=n(J,"LI",{});var wxe=s(D5);dge=n(wxe,"STRONG",{});var Ndt=s(dge);xjo=r(Ndt,"xlnet"),Ndt.forEach(t),$jo=r(wxe," \u2014 "),kO=n(wxe,"A",{href:!0});var jdt=s(kO);kjo=r(jdt,"XLNetForTokenClassification"),jdt.forEach(t),Sjo=r(wxe," (XLNet model)"),wxe.forEach(t),Rjo=i(J),G5=n(J,"LI",{});var Axe=s(G5);cge=n(Axe,"STRONG",{});var Ddt=s(cge);Bjo=r(Ddt,"yoso"),Ddt.forEach(t),Pjo=r(Axe," \u2014 "),SO=n(Axe,"A",{href:!0});var Gdt=s(SO);Ijo=r(Gdt,"YosoForTokenClassification"),Gdt.forEach(t),qjo=r(Axe," (YOSO model)"),Axe.forEach(t),J.forEach(t),Njo=i(la),O5=n(la,"P",{});var yxe=s(O5);jjo=r(yxe,"The model is set in evaluation mode by default using "),fge=n(yxe,"CODE",{});var Odt=s(fge);Djo=r(Odt,"model.eval()"),Odt.forEach(t),Gjo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(yxe,"CODE",{});var Vdt=s(mge);Ojo=r(Vdt,"model.train()"),Vdt.forEach(t),yxe.forEach(t),Vjo=i(la),T(V5.$$.fragment,la),la.forEach(t),Hs.forEach(t),IIe=i(f),Hi=n(f,"H2",{class:!0});var DNe=s(Hi);X5=n(DNe,"A",{id:!0,class:!0,href:!0});var Xdt=s(X5);gge=n(Xdt,"SPAN",{});var zdt=s(gge);T(by.$$.fragment,zdt),zdt.forEach(t),Xdt.forEach(t),Xjo=i(DNe),hge=n(DNe,"SPAN",{});var Qdt=s(hge);zjo=r(Qdt,"AutoModelForQuestionAnswering"),Qdt.forEach(t),DNe.forEach(t),qIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(vy.$$.fragment,Us),Qjo=i(Us),Ui=n(Us,"P",{});var BK=s(Ui);Wjo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RO=n(BK,"A",{href:!0});var Wdt=s(RO);Hjo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),Ujo=r(BK," class method or the "),BO=n(BK,"A",{href:!0});var Hdt=s(BO);Jjo=r(Hdt,"from_config()"),Hdt.forEach(t),Yjo=r(BK,` class
method.`),BK.forEach(t),Kjo=i(Us),Fy=n(Us,"P",{});var GNe=s(Fy);Zjo=r(GNe,"This class cannot be instantiated directly using "),pge=n(GNe,"CODE",{});var Udt=s(pge);eDo=r(Udt,"__init__()"),Udt.forEach(t),oDo=r(GNe," (throws an error)."),GNe.forEach(t),rDo=i(Us),ct=n(Us,"DIV",{class:!0});var Mw=s(ct);T(Ty.$$.fragment,Mw),tDo=i(Mw),uge=n(Mw,"P",{});var Jdt=s(uge);aDo=r(Jdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jdt.forEach(t),nDo=i(Mw),Ji=n(Mw,"P",{});var PK=s(Ji);sDo=r(PK,`Note:
Loading a model from its configuration file does `),_ge=n(PK,"STRONG",{});var Ydt=s(_ge);lDo=r(Ydt,"not"),Ydt.forEach(t),iDo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(PK,"A",{href:!0});var Kdt=s(PO);dDo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),cDo=r(PK," to load the model weights."),PK.forEach(t),fDo=i(Mw),T(z5.$$.fragment,Mw),Mw.forEach(t),mDo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(My.$$.fragment,ia),gDo=i(ia),bge=n(ia,"P",{});var Zdt=s(bge);hDo=r(Zdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zdt.forEach(t),pDo=i(ia),Pa=n(ia,"P",{});var Ew=s(Pa);uDo=r(Ew,"The model class to instantiate is selected based on the "),vge=n(Ew,"CODE",{});var ect=s(vge);_Do=r(ect,"model_type"),ect.forEach(t),bDo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Fge=n(Ew,"CODE",{});var oct=s(Fge);vDo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),FDo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(Ew,"CODE",{});var rct=s(Tge);TDo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),MDo=r(Ew,":"),Ew.forEach(t),EDo=i(ia),O=n(ia,"UL",{});var X=s(O);Q5=n(X,"LI",{});var Lxe=s(Q5);Mge=n(Lxe,"STRONG",{});var tct=s(Mge);CDo=r(tct,"albert"),tct.forEach(t),wDo=r(Lxe," \u2014 "),IO=n(Lxe,"A",{href:!0});var act=s(IO);ADo=r(act,"AlbertForQuestionAnswering"),act.forEach(t),yDo=r(Lxe," (ALBERT model)"),Lxe.forEach(t),LDo=i(X),W5=n(X,"LI",{});var xxe=s(W5);Ege=n(xxe,"STRONG",{});var nct=s(Ege);xDo=r(nct,"bart"),nct.forEach(t),$Do=r(xxe," \u2014 "),qO=n(xxe,"A",{href:!0});var sct=s(qO);kDo=r(sct,"BartForQuestionAnswering"),sct.forEach(t),SDo=r(xxe," (BART model)"),xxe.forEach(t),RDo=i(X),H5=n(X,"LI",{});var $xe=s(H5);Cge=n($xe,"STRONG",{});var lct=s(Cge);BDo=r(lct,"bert"),lct.forEach(t),PDo=r($xe," \u2014 "),NO=n($xe,"A",{href:!0});var ict=s(NO);IDo=r(ict,"BertForQuestionAnswering"),ict.forEach(t),qDo=r($xe," (BERT model)"),$xe.forEach(t),NDo=i(X),U5=n(X,"LI",{});var kxe=s(U5);wge=n(kxe,"STRONG",{});var dct=s(wge);jDo=r(dct,"big_bird"),dct.forEach(t),DDo=r(kxe," \u2014 "),jO=n(kxe,"A",{href:!0});var cct=s(jO);GDo=r(cct,"BigBirdForQuestionAnswering"),cct.forEach(t),ODo=r(kxe," (BigBird model)"),kxe.forEach(t),VDo=i(X),J5=n(X,"LI",{});var Sxe=s(J5);Age=n(Sxe,"STRONG",{});var fct=s(Age);XDo=r(fct,"bigbird_pegasus"),fct.forEach(t),zDo=r(Sxe," \u2014 "),DO=n(Sxe,"A",{href:!0});var mct=s(DO);QDo=r(mct,"BigBirdPegasusForQuestionAnswering"),mct.forEach(t),WDo=r(Sxe," (BigBirdPegasus model)"),Sxe.forEach(t),HDo=i(X),Y5=n(X,"LI",{});var Rxe=s(Y5);yge=n(Rxe,"STRONG",{});var gct=s(yge);UDo=r(gct,"camembert"),gct.forEach(t),JDo=r(Rxe," \u2014 "),GO=n(Rxe,"A",{href:!0});var hct=s(GO);YDo=r(hct,"CamembertForQuestionAnswering"),hct.forEach(t),KDo=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),ZDo=i(X),K5=n(X,"LI",{});var Bxe=s(K5);Lge=n(Bxe,"STRONG",{});var pct=s(Lge);eGo=r(pct,"canine"),pct.forEach(t),oGo=r(Bxe," \u2014 "),OO=n(Bxe,"A",{href:!0});var uct=s(OO);rGo=r(uct,"CanineForQuestionAnswering"),uct.forEach(t),tGo=r(Bxe," (Canine model)"),Bxe.forEach(t),aGo=i(X),Z5=n(X,"LI",{});var Pxe=s(Z5);xge=n(Pxe,"STRONG",{});var _ct=s(xge);nGo=r(_ct,"convbert"),_ct.forEach(t),sGo=r(Pxe," \u2014 "),VO=n(Pxe,"A",{href:!0});var bct=s(VO);lGo=r(bct,"ConvBertForQuestionAnswering"),bct.forEach(t),iGo=r(Pxe," (ConvBERT model)"),Pxe.forEach(t),dGo=i(X),ev=n(X,"LI",{});var Ixe=s(ev);$ge=n(Ixe,"STRONG",{});var vct=s($ge);cGo=r(vct,"data2vec-text"),vct.forEach(t),fGo=r(Ixe," \u2014 "),XO=n(Ixe,"A",{href:!0});var Fct=s(XO);mGo=r(Fct,"Data2VecTextForQuestionAnswering"),Fct.forEach(t),gGo=r(Ixe," (Data2VecText model)"),Ixe.forEach(t),hGo=i(X),ov=n(X,"LI",{});var qxe=s(ov);kge=n(qxe,"STRONG",{});var Tct=s(kge);pGo=r(Tct,"deberta"),Tct.forEach(t),uGo=r(qxe," \u2014 "),zO=n(qxe,"A",{href:!0});var Mct=s(zO);_Go=r(Mct,"DebertaForQuestionAnswering"),Mct.forEach(t),bGo=r(qxe," (DeBERTa model)"),qxe.forEach(t),vGo=i(X),rv=n(X,"LI",{});var Nxe=s(rv);Sge=n(Nxe,"STRONG",{});var Ect=s(Sge);FGo=r(Ect,"deberta-v2"),Ect.forEach(t),TGo=r(Nxe," \u2014 "),QO=n(Nxe,"A",{href:!0});var Cct=s(QO);MGo=r(Cct,"DebertaV2ForQuestionAnswering"),Cct.forEach(t),EGo=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),CGo=i(X),tv=n(X,"LI",{});var jxe=s(tv);Rge=n(jxe,"STRONG",{});var wct=s(Rge);wGo=r(wct,"distilbert"),wct.forEach(t),AGo=r(jxe," \u2014 "),WO=n(jxe,"A",{href:!0});var Act=s(WO);yGo=r(Act,"DistilBertForQuestionAnswering"),Act.forEach(t),LGo=r(jxe," (DistilBERT model)"),jxe.forEach(t),xGo=i(X),av=n(X,"LI",{});var Dxe=s(av);Bge=n(Dxe,"STRONG",{});var yct=s(Bge);$Go=r(yct,"electra"),yct.forEach(t),kGo=r(Dxe," \u2014 "),HO=n(Dxe,"A",{href:!0});var Lct=s(HO);SGo=r(Lct,"ElectraForQuestionAnswering"),Lct.forEach(t),RGo=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),BGo=i(X),nv=n(X,"LI",{});var Gxe=s(nv);Pge=n(Gxe,"STRONG",{});var xct=s(Pge);PGo=r(xct,"flaubert"),xct.forEach(t),IGo=r(Gxe," \u2014 "),UO=n(Gxe,"A",{href:!0});var $ct=s(UO);qGo=r($ct,"FlaubertForQuestionAnsweringSimple"),$ct.forEach(t),NGo=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),jGo=i(X),sv=n(X,"LI",{});var Oxe=s(sv);Ige=n(Oxe,"STRONG",{});var kct=s(Ige);DGo=r(kct,"fnet"),kct.forEach(t),GGo=r(Oxe," \u2014 "),JO=n(Oxe,"A",{href:!0});var Sct=s(JO);OGo=r(Sct,"FNetForQuestionAnswering"),Sct.forEach(t),VGo=r(Oxe," (FNet model)"),Oxe.forEach(t),XGo=i(X),lv=n(X,"LI",{});var Vxe=s(lv);qge=n(Vxe,"STRONG",{});var Rct=s(qge);zGo=r(Rct,"funnel"),Rct.forEach(t),QGo=r(Vxe," \u2014 "),YO=n(Vxe,"A",{href:!0});var Bct=s(YO);WGo=r(Bct,"FunnelForQuestionAnswering"),Bct.forEach(t),HGo=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),UGo=i(X),iv=n(X,"LI",{});var Xxe=s(iv);Nge=n(Xxe,"STRONG",{});var Pct=s(Nge);JGo=r(Pct,"gptj"),Pct.forEach(t),YGo=r(Xxe," \u2014 "),KO=n(Xxe,"A",{href:!0});var Ict=s(KO);KGo=r(Ict,"GPTJForQuestionAnswering"),Ict.forEach(t),ZGo=r(Xxe," (GPT-J model)"),Xxe.forEach(t),eOo=i(X),dv=n(X,"LI",{});var zxe=s(dv);jge=n(zxe,"STRONG",{});var qct=s(jge);oOo=r(qct,"ibert"),qct.forEach(t),rOo=r(zxe," \u2014 "),ZO=n(zxe,"A",{href:!0});var Nct=s(ZO);tOo=r(Nct,"IBertForQuestionAnswering"),Nct.forEach(t),aOo=r(zxe," (I-BERT model)"),zxe.forEach(t),nOo=i(X),cv=n(X,"LI",{});var Qxe=s(cv);Dge=n(Qxe,"STRONG",{});var jct=s(Dge);sOo=r(jct,"layoutlmv2"),jct.forEach(t),lOo=r(Qxe," \u2014 "),eV=n(Qxe,"A",{href:!0});var Dct=s(eV);iOo=r(Dct,"LayoutLMv2ForQuestionAnswering"),Dct.forEach(t),dOo=r(Qxe," (LayoutLMv2 model)"),Qxe.forEach(t),cOo=i(X),fv=n(X,"LI",{});var Wxe=s(fv);Gge=n(Wxe,"STRONG",{});var Gct=s(Gge);fOo=r(Gct,"led"),Gct.forEach(t),mOo=r(Wxe," \u2014 "),oV=n(Wxe,"A",{href:!0});var Oct=s(oV);gOo=r(Oct,"LEDForQuestionAnswering"),Oct.forEach(t),hOo=r(Wxe," (LED model)"),Wxe.forEach(t),pOo=i(X),mv=n(X,"LI",{});var Hxe=s(mv);Oge=n(Hxe,"STRONG",{});var Vct=s(Oge);uOo=r(Vct,"longformer"),Vct.forEach(t),_Oo=r(Hxe," \u2014 "),rV=n(Hxe,"A",{href:!0});var Xct=s(rV);bOo=r(Xct,"LongformerForQuestionAnswering"),Xct.forEach(t),vOo=r(Hxe," (Longformer model)"),Hxe.forEach(t),FOo=i(X),gv=n(X,"LI",{});var Uxe=s(gv);Vge=n(Uxe,"STRONG",{});var zct=s(Vge);TOo=r(zct,"lxmert"),zct.forEach(t),MOo=r(Uxe," \u2014 "),tV=n(Uxe,"A",{href:!0});var Qct=s(tV);EOo=r(Qct,"LxmertForQuestionAnswering"),Qct.forEach(t),COo=r(Uxe," (LXMERT model)"),Uxe.forEach(t),wOo=i(X),hv=n(X,"LI",{});var Jxe=s(hv);Xge=n(Jxe,"STRONG",{});var Wct=s(Xge);AOo=r(Wct,"mbart"),Wct.forEach(t),yOo=r(Jxe," \u2014 "),aV=n(Jxe,"A",{href:!0});var Hct=s(aV);LOo=r(Hct,"MBartForQuestionAnswering"),Hct.forEach(t),xOo=r(Jxe," (mBART model)"),Jxe.forEach(t),$Oo=i(X),pv=n(X,"LI",{});var Yxe=s(pv);zge=n(Yxe,"STRONG",{});var Uct=s(zge);kOo=r(Uct,"megatron-bert"),Uct.forEach(t),SOo=r(Yxe," \u2014 "),nV=n(Yxe,"A",{href:!0});var Jct=s(nV);ROo=r(Jct,"MegatronBertForQuestionAnswering"),Jct.forEach(t),BOo=r(Yxe," (MegatronBert model)"),Yxe.forEach(t),POo=i(X),uv=n(X,"LI",{});var Kxe=s(uv);Qge=n(Kxe,"STRONG",{});var Yct=s(Qge);IOo=r(Yct,"mobilebert"),Yct.forEach(t),qOo=r(Kxe," \u2014 "),sV=n(Kxe,"A",{href:!0});var Kct=s(sV);NOo=r(Kct,"MobileBertForQuestionAnswering"),Kct.forEach(t),jOo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),DOo=i(X),_v=n(X,"LI",{});var Zxe=s(_v);Wge=n(Zxe,"STRONG",{});var Zct=s(Wge);GOo=r(Zct,"mpnet"),Zct.forEach(t),OOo=r(Zxe," \u2014 "),lV=n(Zxe,"A",{href:!0});var eft=s(lV);VOo=r(eft,"MPNetForQuestionAnswering"),eft.forEach(t),XOo=r(Zxe," (MPNet model)"),Zxe.forEach(t),zOo=i(X),bv=n(X,"LI",{});var e9e=s(bv);Hge=n(e9e,"STRONG",{});var oft=s(Hge);QOo=r(oft,"nystromformer"),oft.forEach(t),WOo=r(e9e," \u2014 "),iV=n(e9e,"A",{href:!0});var rft=s(iV);HOo=r(rft,"NystromformerForQuestionAnswering"),rft.forEach(t),UOo=r(e9e," (Nystromformer model)"),e9e.forEach(t),JOo=i(X),vv=n(X,"LI",{});var o9e=s(vv);Uge=n(o9e,"STRONG",{});var tft=s(Uge);YOo=r(tft,"qdqbert"),tft.forEach(t),KOo=r(o9e," \u2014 "),dV=n(o9e,"A",{href:!0});var aft=s(dV);ZOo=r(aft,"QDQBertForQuestionAnswering"),aft.forEach(t),eVo=r(o9e," (QDQBert model)"),o9e.forEach(t),oVo=i(X),Fv=n(X,"LI",{});var r9e=s(Fv);Jge=n(r9e,"STRONG",{});var nft=s(Jge);rVo=r(nft,"reformer"),nft.forEach(t),tVo=r(r9e," \u2014 "),cV=n(r9e,"A",{href:!0});var sft=s(cV);aVo=r(sft,"ReformerForQuestionAnswering"),sft.forEach(t),nVo=r(r9e," (Reformer model)"),r9e.forEach(t),sVo=i(X),Tv=n(X,"LI",{});var t9e=s(Tv);Yge=n(t9e,"STRONG",{});var lft=s(Yge);lVo=r(lft,"rembert"),lft.forEach(t),iVo=r(t9e," \u2014 "),fV=n(t9e,"A",{href:!0});var ift=s(fV);dVo=r(ift,"RemBertForQuestionAnswering"),ift.forEach(t),cVo=r(t9e," (RemBERT model)"),t9e.forEach(t),fVo=i(X),Mv=n(X,"LI",{});var a9e=s(Mv);Kge=n(a9e,"STRONG",{});var dft=s(Kge);mVo=r(dft,"roberta"),dft.forEach(t),gVo=r(a9e," \u2014 "),mV=n(a9e,"A",{href:!0});var cft=s(mV);hVo=r(cft,"RobertaForQuestionAnswering"),cft.forEach(t),pVo=r(a9e," (RoBERTa model)"),a9e.forEach(t),uVo=i(X),Ev=n(X,"LI",{});var n9e=s(Ev);Zge=n(n9e,"STRONG",{});var fft=s(Zge);_Vo=r(fft,"roformer"),fft.forEach(t),bVo=r(n9e," \u2014 "),gV=n(n9e,"A",{href:!0});var mft=s(gV);vVo=r(mft,"RoFormerForQuestionAnswering"),mft.forEach(t),FVo=r(n9e," (RoFormer model)"),n9e.forEach(t),TVo=i(X),Cv=n(X,"LI",{});var s9e=s(Cv);ehe=n(s9e,"STRONG",{});var gft=s(ehe);MVo=r(gft,"splinter"),gft.forEach(t),EVo=r(s9e," \u2014 "),hV=n(s9e,"A",{href:!0});var hft=s(hV);CVo=r(hft,"SplinterForQuestionAnswering"),hft.forEach(t),wVo=r(s9e," (Splinter model)"),s9e.forEach(t),AVo=i(X),wv=n(X,"LI",{});var l9e=s(wv);ohe=n(l9e,"STRONG",{});var pft=s(ohe);yVo=r(pft,"squeezebert"),pft.forEach(t),LVo=r(l9e," \u2014 "),pV=n(l9e,"A",{href:!0});var uft=s(pV);xVo=r(uft,"SqueezeBertForQuestionAnswering"),uft.forEach(t),$Vo=r(l9e," (SqueezeBERT model)"),l9e.forEach(t),kVo=i(X),Av=n(X,"LI",{});var i9e=s(Av);rhe=n(i9e,"STRONG",{});var _ft=s(rhe);SVo=r(_ft,"xlm"),_ft.forEach(t),RVo=r(i9e," \u2014 "),uV=n(i9e,"A",{href:!0});var bft=s(uV);BVo=r(bft,"XLMForQuestionAnsweringSimple"),bft.forEach(t),PVo=r(i9e," (XLM model)"),i9e.forEach(t),IVo=i(X),yv=n(X,"LI",{});var d9e=s(yv);the=n(d9e,"STRONG",{});var vft=s(the);qVo=r(vft,"xlm-roberta"),vft.forEach(t),NVo=r(d9e," \u2014 "),_V=n(d9e,"A",{href:!0});var Fft=s(_V);jVo=r(Fft,"XLMRobertaForQuestionAnswering"),Fft.forEach(t),DVo=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),GVo=i(X),Lv=n(X,"LI",{});var c9e=s(Lv);ahe=n(c9e,"STRONG",{});var Tft=s(ahe);OVo=r(Tft,"xlm-roberta-xl"),Tft.forEach(t),VVo=r(c9e," \u2014 "),bV=n(c9e,"A",{href:!0});var Mft=s(bV);XVo=r(Mft,"XLMRobertaXLForQuestionAnswering"),Mft.forEach(t),zVo=r(c9e," (XLM-RoBERTa-XL model)"),c9e.forEach(t),QVo=i(X),xv=n(X,"LI",{});var f9e=s(xv);nhe=n(f9e,"STRONG",{});var Eft=s(nhe);WVo=r(Eft,"xlnet"),Eft.forEach(t),HVo=r(f9e," \u2014 "),vV=n(f9e,"A",{href:!0});var Cft=s(vV);UVo=r(Cft,"XLNetForQuestionAnsweringSimple"),Cft.forEach(t),JVo=r(f9e," (XLNet model)"),f9e.forEach(t),YVo=i(X),$v=n(X,"LI",{});var m9e=s($v);she=n(m9e,"STRONG",{});var wft=s(she);KVo=r(wft,"yoso"),wft.forEach(t),ZVo=r(m9e," \u2014 "),FV=n(m9e,"A",{href:!0});var Aft=s(FV);eXo=r(Aft,"YosoForQuestionAnswering"),Aft.forEach(t),oXo=r(m9e," (YOSO model)"),m9e.forEach(t),X.forEach(t),rXo=i(ia),kv=n(ia,"P",{});var g9e=s(kv);tXo=r(g9e,"The model is set in evaluation mode by default using "),lhe=n(g9e,"CODE",{});var yft=s(lhe);aXo=r(yft,"model.eval()"),yft.forEach(t),nXo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(g9e,"CODE",{});var Lft=s(ihe);sXo=r(Lft,"model.train()"),Lft.forEach(t),g9e.forEach(t),lXo=i(ia),T(Sv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),NIe=i(f),Yi=n(f,"H2",{class:!0});var ONe=s(Yi);Rv=n(ONe,"A",{id:!0,class:!0,href:!0});var xft=s(Rv);dhe=n(xft,"SPAN",{});var $ft=s(dhe);T(Ey.$$.fragment,$ft),$ft.forEach(t),xft.forEach(t),iXo=i(ONe),che=n(ONe,"SPAN",{});var kft=s(che);dXo=r(kft,"AutoModelForTableQuestionAnswering"),kft.forEach(t),ONe.forEach(t),jIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(Cy.$$.fragment,Js),cXo=i(Js),Ki=n(Js,"P",{});var IK=s(Ki);fXo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TV=n(IK,"A",{href:!0});var Sft=s(TV);mXo=r(Sft,"from_pretrained()"),Sft.forEach(t),gXo=r(IK," class method or the "),MV=n(IK,"A",{href:!0});var Rft=s(MV);hXo=r(Rft,"from_config()"),Rft.forEach(t),pXo=r(IK,` class
method.`),IK.forEach(t),uXo=i(Js),wy=n(Js,"P",{});var VNe=s(wy);_Xo=r(VNe,"This class cannot be instantiated directly using "),fhe=n(VNe,"CODE",{});var Bft=s(fhe);bXo=r(Bft,"__init__()"),Bft.forEach(t),vXo=r(VNe," (throws an error)."),VNe.forEach(t),FXo=i(Js),ft=n(Js,"DIV",{class:!0});var Cw=s(ft);T(Ay.$$.fragment,Cw),TXo=i(Cw),mhe=n(Cw,"P",{});var Pft=s(mhe);MXo=r(Pft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pft.forEach(t),EXo=i(Cw),Zi=n(Cw,"P",{});var qK=s(Zi);CXo=r(qK,`Note:
Loading a model from its configuration file does `),ghe=n(qK,"STRONG",{});var Ift=s(ghe);wXo=r(Ift,"not"),Ift.forEach(t),AXo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(qK,"A",{href:!0});var qft=s(EV);yXo=r(qft,"from_pretrained()"),qft.forEach(t),LXo=r(qK," to load the model weights."),qK.forEach(t),xXo=i(Cw),T(Bv.$$.fragment,Cw),Cw.forEach(t),$Xo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(yy.$$.fragment,da),kXo=i(da),hhe=n(da,"P",{});var Nft=s(hhe);SXo=r(Nft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nft.forEach(t),RXo=i(da),Ia=n(da,"P",{});var ww=s(Ia);BXo=r(ww,"The model class to instantiate is selected based on the "),phe=n(ww,"CODE",{});var jft=s(phe);PXo=r(jft,"model_type"),jft.forEach(t),IXo=r(ww,` property of the config object (either
passed as an argument or loaded from `),uhe=n(ww,"CODE",{});var Dft=s(uhe);qXo=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),NXo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(ww,"CODE",{});var Gft=s(_he);jXo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),DXo=r(ww,":"),ww.forEach(t),GXo=i(da),bhe=n(da,"UL",{});var Oft=s(bhe);Pv=n(Oft,"LI",{});var h9e=s(Pv);vhe=n(h9e,"STRONG",{});var Vft=s(vhe);OXo=r(Vft,"tapas"),Vft.forEach(t),VXo=r(h9e," \u2014 "),CV=n(h9e,"A",{href:!0});var Xft=s(CV);XXo=r(Xft,"TapasForQuestionAnswering"),Xft.forEach(t),zXo=r(h9e," (TAPAS model)"),h9e.forEach(t),Oft.forEach(t),QXo=i(da),Iv=n(da,"P",{});var p9e=s(Iv);WXo=r(p9e,"The model is set in evaluation mode by default using "),Fhe=n(p9e,"CODE",{});var zft=s(Fhe);HXo=r(zft,"model.eval()"),zft.forEach(t),UXo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(p9e,"CODE",{});var Qft=s(The);JXo=r(Qft,"model.train()"),Qft.forEach(t),p9e.forEach(t),YXo=i(da),T(qv.$$.fragment,da),da.forEach(t),Js.forEach(t),DIe=i(f),ed=n(f,"H2",{class:!0});var XNe=s(ed);Nv=n(XNe,"A",{id:!0,class:!0,href:!0});var Wft=s(Nv);Mhe=n(Wft,"SPAN",{});var Hft=s(Mhe);T(Ly.$$.fragment,Hft),Hft.forEach(t),Wft.forEach(t),KXo=i(XNe),Ehe=n(XNe,"SPAN",{});var Uft=s(Ehe);ZXo=r(Uft,"AutoModelForImageClassification"),Uft.forEach(t),XNe.forEach(t),GIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(xy.$$.fragment,Ys),ezo=i(Ys),od=n(Ys,"P",{});var NK=s(od);ozo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wV=n(NK,"A",{href:!0});var Jft=s(wV);rzo=r(Jft,"from_pretrained()"),Jft.forEach(t),tzo=r(NK," class method or the "),AV=n(NK,"A",{href:!0});var Yft=s(AV);azo=r(Yft,"from_config()"),Yft.forEach(t),nzo=r(NK,` class
method.`),NK.forEach(t),szo=i(Ys),$y=n(Ys,"P",{});var zNe=s($y);lzo=r(zNe,"This class cannot be instantiated directly using "),Che=n(zNe,"CODE",{});var Kft=s(Che);izo=r(Kft,"__init__()"),Kft.forEach(t),dzo=r(zNe," (throws an error)."),zNe.forEach(t),czo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Aw=s(mt);T(ky.$$.fragment,Aw),fzo=i(Aw),whe=n(Aw,"P",{});var Zft=s(whe);mzo=r(Zft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zft.forEach(t),gzo=i(Aw),rd=n(Aw,"P",{});var jK=s(rd);hzo=r(jK,`Note:
Loading a model from its configuration file does `),Ahe=n(jK,"STRONG",{});var emt=s(Ahe);pzo=r(emt,"not"),emt.forEach(t),uzo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(jK,"A",{href:!0});var omt=s(yV);_zo=r(omt,"from_pretrained()"),omt.forEach(t),bzo=r(jK," to load the model weights."),jK.forEach(t),vzo=i(Aw),T(jv.$$.fragment,Aw),Aw.forEach(t),Fzo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Sy.$$.fragment,ca),Tzo=i(ca),yhe=n(ca,"P",{});var rmt=s(yhe);Mzo=r(rmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rmt.forEach(t),Ezo=i(ca),qa=n(ca,"P",{});var yw=s(qa);Czo=r(yw,"The model class to instantiate is selected based on the "),Lhe=n(yw,"CODE",{});var tmt=s(Lhe);wzo=r(tmt,"model_type"),tmt.forEach(t),Azo=r(yw,` property of the config object (either
passed as an argument or loaded from `),xhe=n(yw,"CODE",{});var amt=s(xhe);yzo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),Lzo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(yw,"CODE",{});var nmt=s($he);xzo=r(nmt,"pretrained_model_name_or_path"),nmt.forEach(t),$zo=r(yw,":"),yw.forEach(t),kzo=i(ca),ve=n(ca,"UL",{});var Te=s(ve);Dv=n(Te,"LI",{});var u9e=s(Dv);khe=n(u9e,"STRONG",{});var smt=s(khe);Szo=r(smt,"beit"),smt.forEach(t),Rzo=r(u9e," \u2014 "),LV=n(u9e,"A",{href:!0});var lmt=s(LV);Bzo=r(lmt,"BeitForImageClassification"),lmt.forEach(t),Pzo=r(u9e," (BEiT model)"),u9e.forEach(t),Izo=i(Te),Gv=n(Te,"LI",{});var _9e=s(Gv);She=n(_9e,"STRONG",{});var imt=s(She);qzo=r(imt,"convnext"),imt.forEach(t),Nzo=r(_9e," \u2014 "),xV=n(_9e,"A",{href:!0});var dmt=s(xV);jzo=r(dmt,"ConvNextForImageClassification"),dmt.forEach(t),Dzo=r(_9e," (ConvNext model)"),_9e.forEach(t),Gzo=i(Te),Ov=n(Te,"LI",{});var b9e=s(Ov);Rhe=n(b9e,"STRONG",{});var cmt=s(Rhe);Ozo=r(cmt,"data2vec-vision"),cmt.forEach(t),Vzo=r(b9e," \u2014 "),$V=n(b9e,"A",{href:!0});var fmt=s($V);Xzo=r(fmt,"Data2VecVisionForImageClassification"),fmt.forEach(t),zzo=r(b9e," (Data2VecVision model)"),b9e.forEach(t),Qzo=i(Te),Rs=n(Te,"LI",{});var u$=s(Rs);Bhe=n(u$,"STRONG",{});var mmt=s(Bhe);Wzo=r(mmt,"deit"),mmt.forEach(t),Hzo=r(u$," \u2014 "),kV=n(u$,"A",{href:!0});var gmt=s(kV);Uzo=r(gmt,"DeiTForImageClassification"),gmt.forEach(t),Jzo=r(u$," or "),SV=n(u$,"A",{href:!0});var hmt=s(SV);Yzo=r(hmt,"DeiTForImageClassificationWithTeacher"),hmt.forEach(t),Kzo=r(u$," (DeiT model)"),u$.forEach(t),Zzo=i(Te),Vv=n(Te,"LI",{});var v9e=s(Vv);Phe=n(v9e,"STRONG",{});var pmt=s(Phe);eQo=r(pmt,"imagegpt"),pmt.forEach(t),oQo=r(v9e," \u2014 "),RV=n(v9e,"A",{href:!0});var umt=s(RV);rQo=r(umt,"ImageGPTForImageClassification"),umt.forEach(t),tQo=r(v9e," (ImageGPT model)"),v9e.forEach(t),aQo=i(Te),Xv=n(Te,"LI",{});var F9e=s(Xv);Ihe=n(F9e,"STRONG",{});var _mt=s(Ihe);nQo=r(_mt,"mobilevit"),_mt.forEach(t),sQo=r(F9e," \u2014 "),BV=n(F9e,"A",{href:!0});var bmt=s(BV);lQo=r(bmt,"MobileViTForImageClassification"),bmt.forEach(t),iQo=r(F9e," (MobileViT model)"),F9e.forEach(t),dQo=i(Te),gt=n(Te,"LI",{});var ff=s(gt);qhe=n(ff,"STRONG",{});var vmt=s(qhe);cQo=r(vmt,"perceiver"),vmt.forEach(t),fQo=r(ff," \u2014 "),PV=n(ff,"A",{href:!0});var Fmt=s(PV);mQo=r(Fmt,"PerceiverForImageClassificationLearned"),Fmt.forEach(t),gQo=r(ff," or "),IV=n(ff,"A",{href:!0});var Tmt=s(IV);hQo=r(Tmt,"PerceiverForImageClassificationFourier"),Tmt.forEach(t),pQo=r(ff," or "),qV=n(ff,"A",{href:!0});var Mmt=s(qV);uQo=r(Mmt,"PerceiverForImageClassificationConvProcessing"),Mmt.forEach(t),_Qo=r(ff," (Perceiver model)"),ff.forEach(t),bQo=i(Te),zv=n(Te,"LI",{});var T9e=s(zv);Nhe=n(T9e,"STRONG",{});var Emt=s(Nhe);vQo=r(Emt,"poolformer"),Emt.forEach(t),FQo=r(T9e," \u2014 "),NV=n(T9e,"A",{href:!0});var Cmt=s(NV);TQo=r(Cmt,"PoolFormerForImageClassification"),Cmt.forEach(t),MQo=r(T9e," (PoolFormer model)"),T9e.forEach(t),EQo=i(Te),Qv=n(Te,"LI",{});var M9e=s(Qv);jhe=n(M9e,"STRONG",{});var wmt=s(jhe);CQo=r(wmt,"regnet"),wmt.forEach(t),wQo=r(M9e," \u2014 "),jV=n(M9e,"A",{href:!0});var Amt=s(jV);AQo=r(Amt,"RegNetForImageClassification"),Amt.forEach(t),yQo=r(M9e," (RegNet model)"),M9e.forEach(t),LQo=i(Te),Wv=n(Te,"LI",{});var E9e=s(Wv);Dhe=n(E9e,"STRONG",{});var ymt=s(Dhe);xQo=r(ymt,"resnet"),ymt.forEach(t),$Qo=r(E9e," \u2014 "),DV=n(E9e,"A",{href:!0});var Lmt=s(DV);kQo=r(Lmt,"ResNetForImageClassification"),Lmt.forEach(t),SQo=r(E9e," (ResNet model)"),E9e.forEach(t),RQo=i(Te),Hv=n(Te,"LI",{});var C9e=s(Hv);Ghe=n(C9e,"STRONG",{});var xmt=s(Ghe);BQo=r(xmt,"segformer"),xmt.forEach(t),PQo=r(C9e," \u2014 "),GV=n(C9e,"A",{href:!0});var $mt=s(GV);IQo=r($mt,"SegformerForImageClassification"),$mt.forEach(t),qQo=r(C9e," (SegFormer model)"),C9e.forEach(t),NQo=i(Te),Uv=n(Te,"LI",{});var w9e=s(Uv);Ohe=n(w9e,"STRONG",{});var kmt=s(Ohe);jQo=r(kmt,"swin"),kmt.forEach(t),DQo=r(w9e," \u2014 "),OV=n(w9e,"A",{href:!0});var Smt=s(OV);GQo=r(Smt,"SwinForImageClassification"),Smt.forEach(t),OQo=r(w9e," (Swin model)"),w9e.forEach(t),VQo=i(Te),Jv=n(Te,"LI",{});var A9e=s(Jv);Vhe=n(A9e,"STRONG",{});var Rmt=s(Vhe);XQo=r(Rmt,"van"),Rmt.forEach(t),zQo=r(A9e," \u2014 "),VV=n(A9e,"A",{href:!0});var Bmt=s(VV);QQo=r(Bmt,"VanForImageClassification"),Bmt.forEach(t),WQo=r(A9e," (VAN model)"),A9e.forEach(t),HQo=i(Te),Yv=n(Te,"LI",{});var y9e=s(Yv);Xhe=n(y9e,"STRONG",{});var Pmt=s(Xhe);UQo=r(Pmt,"vit"),Pmt.forEach(t),JQo=r(y9e," \u2014 "),XV=n(y9e,"A",{href:!0});var Imt=s(XV);YQo=r(Imt,"ViTForImageClassification"),Imt.forEach(t),KQo=r(y9e," (ViT model)"),y9e.forEach(t),Te.forEach(t),ZQo=i(ca),Kv=n(ca,"P",{});var L9e=s(Kv);eWo=r(L9e,"The model is set in evaluation mode by default using "),zhe=n(L9e,"CODE",{});var qmt=s(zhe);oWo=r(qmt,"model.eval()"),qmt.forEach(t),rWo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(L9e,"CODE",{});var Nmt=s(Qhe);tWo=r(Nmt,"model.train()"),Nmt.forEach(t),L9e.forEach(t),aWo=i(ca),T(Zv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),OIe=i(f),td=n(f,"H2",{class:!0});var QNe=s(td);eF=n(QNe,"A",{id:!0,class:!0,href:!0});var jmt=s(eF);Whe=n(jmt,"SPAN",{});var Dmt=s(Whe);T(Ry.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),nWo=i(QNe),Hhe=n(QNe,"SPAN",{});var Gmt=s(Hhe);sWo=r(Gmt,"AutoModelForVision2Seq"),Gmt.forEach(t),QNe.forEach(t),VIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(By.$$.fragment,Ks),lWo=i(Ks),ad=n(Ks,"P",{});var DK=s(ad);iWo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zV=n(DK,"A",{href:!0});var Omt=s(zV);dWo=r(Omt,"from_pretrained()"),Omt.forEach(t),cWo=r(DK," class method or the "),QV=n(DK,"A",{href:!0});var Vmt=s(QV);fWo=r(Vmt,"from_config()"),Vmt.forEach(t),mWo=r(DK,` class
method.`),DK.forEach(t),gWo=i(Ks),Py=n(Ks,"P",{});var WNe=s(Py);hWo=r(WNe,"This class cannot be instantiated directly using "),Uhe=n(WNe,"CODE",{});var Xmt=s(Uhe);pWo=r(Xmt,"__init__()"),Xmt.forEach(t),uWo=r(WNe," (throws an error)."),WNe.forEach(t),_Wo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Lw=s(ht);T(Iy.$$.fragment,Lw),bWo=i(Lw),Jhe=n(Lw,"P",{});var zmt=s(Jhe);vWo=r(zmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zmt.forEach(t),FWo=i(Lw),nd=n(Lw,"P",{});var GK=s(nd);TWo=r(GK,`Note:
Loading a model from its configuration file does `),Yhe=n(GK,"STRONG",{});var Qmt=s(Yhe);MWo=r(Qmt,"not"),Qmt.forEach(t),EWo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(GK,"A",{href:!0});var Wmt=s(WV);CWo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),wWo=r(GK," to load the model weights."),GK.forEach(t),AWo=i(Lw),T(oF.$$.fragment,Lw),Lw.forEach(t),yWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(qy.$$.fragment,fa),LWo=i(fa),Khe=n(fa,"P",{});var Hmt=s(Khe);xWo=r(Hmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hmt.forEach(t),$Wo=i(fa),Na=n(fa,"P",{});var xw=s(Na);kWo=r(xw,"The model class to instantiate is selected based on the "),Zhe=n(xw,"CODE",{});var Umt=s(Zhe);SWo=r(Umt,"model_type"),Umt.forEach(t),RWo=r(xw,` property of the config object (either
passed as an argument or loaded from `),epe=n(xw,"CODE",{});var Jmt=s(epe);BWo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),PWo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(xw,"CODE",{});var Ymt=s(ope);IWo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),qWo=r(xw,":"),xw.forEach(t),NWo=i(fa),rpe=n(fa,"UL",{});var Kmt=s(rpe);rF=n(Kmt,"LI",{});var x9e=s(rF);tpe=n(x9e,"STRONG",{});var Zmt=s(tpe);jWo=r(Zmt,"vision-encoder-decoder"),Zmt.forEach(t),DWo=r(x9e," \u2014 "),HV=n(x9e,"A",{href:!0});var egt=s(HV);GWo=r(egt,"VisionEncoderDecoderModel"),egt.forEach(t),OWo=r(x9e," (Vision Encoder decoder model)"),x9e.forEach(t),Kmt.forEach(t),VWo=i(fa),tF=n(fa,"P",{});var $9e=s(tF);XWo=r($9e,"The model is set in evaluation mode by default using "),ape=n($9e,"CODE",{});var ogt=s(ape);zWo=r(ogt,"model.eval()"),ogt.forEach(t),QWo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n($9e,"CODE",{});var rgt=s(npe);WWo=r(rgt,"model.train()"),rgt.forEach(t),$9e.forEach(t),HWo=i(fa),T(aF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),XIe=i(f),sd=n(f,"H2",{class:!0});var HNe=s(sd);nF=n(HNe,"A",{id:!0,class:!0,href:!0});var tgt=s(nF);spe=n(tgt,"SPAN",{});var agt=s(spe);T(Ny.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),UWo=i(HNe),lpe=n(HNe,"SPAN",{});var ngt=s(lpe);JWo=r(ngt,"AutoModelForAudioClassification"),ngt.forEach(t),HNe.forEach(t),zIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(jy.$$.fragment,Zs),YWo=i(Zs),ld=n(Zs,"P",{});var OK=s(ld);KWo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UV=n(OK,"A",{href:!0});var sgt=s(UV);ZWo=r(sgt,"from_pretrained()"),sgt.forEach(t),eHo=r(OK," class method or the "),JV=n(OK,"A",{href:!0});var lgt=s(JV);oHo=r(lgt,"from_config()"),lgt.forEach(t),rHo=r(OK,` class
method.`),OK.forEach(t),tHo=i(Zs),Dy=n(Zs,"P",{});var UNe=s(Dy);aHo=r(UNe,"This class cannot be instantiated directly using "),ipe=n(UNe,"CODE",{});var igt=s(ipe);nHo=r(igt,"__init__()"),igt.forEach(t),sHo=r(UNe," (throws an error)."),UNe.forEach(t),lHo=i(Zs),pt=n(Zs,"DIV",{class:!0});var $w=s(pt);T(Gy.$$.fragment,$w),iHo=i($w),dpe=n($w,"P",{});var dgt=s(dpe);dHo=r(dgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dgt.forEach(t),cHo=i($w),id=n($w,"P",{});var VK=s(id);fHo=r(VK,`Note:
Loading a model from its configuration file does `),cpe=n(VK,"STRONG",{});var cgt=s(cpe);mHo=r(cgt,"not"),cgt.forEach(t),gHo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(VK,"A",{href:!0});var fgt=s(YV);hHo=r(fgt,"from_pretrained()"),fgt.forEach(t),pHo=r(VK," to load the model weights."),VK.forEach(t),uHo=i($w),T(sF.$$.fragment,$w),$w.forEach(t),_Ho=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Oy.$$.fragment,ma),bHo=i(ma),fpe=n(ma,"P",{});var mgt=s(fpe);vHo=r(mgt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mgt.forEach(t),FHo=i(ma),ja=n(ma,"P",{});var kw=s(ja);THo=r(kw,"The model class to instantiate is selected based on the "),mpe=n(kw,"CODE",{});var ggt=s(mpe);MHo=r(ggt,"model_type"),ggt.forEach(t),EHo=r(kw,` property of the config object (either
passed as an argument or loaded from `),gpe=n(kw,"CODE",{});var hgt=s(gpe);CHo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),wHo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(kw,"CODE",{});var pgt=s(hpe);AHo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),yHo=r(kw,":"),kw.forEach(t),LHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);lF=n(bo,"LI",{});var k9e=s(lF);ppe=n(k9e,"STRONG",{});var ugt=s(ppe);xHo=r(ugt,"data2vec-audio"),ugt.forEach(t),$Ho=r(k9e," \u2014 "),KV=n(k9e,"A",{href:!0});var _gt=s(KV);kHo=r(_gt,"Data2VecAudioForSequenceClassification"),_gt.forEach(t),SHo=r(k9e," (Data2VecAudio model)"),k9e.forEach(t),RHo=i(bo),iF=n(bo,"LI",{});var S9e=s(iF);upe=n(S9e,"STRONG",{});var bgt=s(upe);BHo=r(bgt,"hubert"),bgt.forEach(t),PHo=r(S9e," \u2014 "),ZV=n(S9e,"A",{href:!0});var vgt=s(ZV);IHo=r(vgt,"HubertForSequenceClassification"),vgt.forEach(t),qHo=r(S9e," (Hubert model)"),S9e.forEach(t),NHo=i(bo),dF=n(bo,"LI",{});var R9e=s(dF);_pe=n(R9e,"STRONG",{});var Fgt=s(_pe);jHo=r(Fgt,"sew"),Fgt.forEach(t),DHo=r(R9e," \u2014 "),eX=n(R9e,"A",{href:!0});var Tgt=s(eX);GHo=r(Tgt,"SEWForSequenceClassification"),Tgt.forEach(t),OHo=r(R9e," (SEW model)"),R9e.forEach(t),VHo=i(bo),cF=n(bo,"LI",{});var B9e=s(cF);bpe=n(B9e,"STRONG",{});var Mgt=s(bpe);XHo=r(Mgt,"sew-d"),Mgt.forEach(t),zHo=r(B9e," \u2014 "),oX=n(B9e,"A",{href:!0});var Egt=s(oX);QHo=r(Egt,"SEWDForSequenceClassification"),Egt.forEach(t),WHo=r(B9e," (SEW-D model)"),B9e.forEach(t),HHo=i(bo),fF=n(bo,"LI",{});var P9e=s(fF);vpe=n(P9e,"STRONG",{});var Cgt=s(vpe);UHo=r(Cgt,"unispeech"),Cgt.forEach(t),JHo=r(P9e," \u2014 "),rX=n(P9e,"A",{href:!0});var wgt=s(rX);YHo=r(wgt,"UniSpeechForSequenceClassification"),wgt.forEach(t),KHo=r(P9e," (UniSpeech model)"),P9e.forEach(t),ZHo=i(bo),mF=n(bo,"LI",{});var I9e=s(mF);Fpe=n(I9e,"STRONG",{});var Agt=s(Fpe);eUo=r(Agt,"unispeech-sat"),Agt.forEach(t),oUo=r(I9e," \u2014 "),tX=n(I9e,"A",{href:!0});var ygt=s(tX);rUo=r(ygt,"UniSpeechSatForSequenceClassification"),ygt.forEach(t),tUo=r(I9e," (UniSpeechSat model)"),I9e.forEach(t),aUo=i(bo),gF=n(bo,"LI",{});var q9e=s(gF);Tpe=n(q9e,"STRONG",{});var Lgt=s(Tpe);nUo=r(Lgt,"wav2vec2"),Lgt.forEach(t),sUo=r(q9e," \u2014 "),aX=n(q9e,"A",{href:!0});var xgt=s(aX);lUo=r(xgt,"Wav2Vec2ForSequenceClassification"),xgt.forEach(t),iUo=r(q9e," (Wav2Vec2 model)"),q9e.forEach(t),dUo=i(bo),hF=n(bo,"LI",{});var N9e=s(hF);Mpe=n(N9e,"STRONG",{});var $gt=s(Mpe);cUo=r($gt,"wavlm"),$gt.forEach(t),fUo=r(N9e," \u2014 "),nX=n(N9e,"A",{href:!0});var kgt=s(nX);mUo=r(kgt,"WavLMForSequenceClassification"),kgt.forEach(t),gUo=r(N9e," (WavLM model)"),N9e.forEach(t),bo.forEach(t),hUo=i(ma),pF=n(ma,"P",{});var j9e=s(pF);pUo=r(j9e,"The model is set in evaluation mode by default using "),Epe=n(j9e,"CODE",{});var Sgt=s(Epe);uUo=r(Sgt,"model.eval()"),Sgt.forEach(t),_Uo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(j9e,"CODE",{});var Rgt=s(Cpe);bUo=r(Rgt,"model.train()"),Rgt.forEach(t),j9e.forEach(t),vUo=i(ma),T(uF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),QIe=i(f),dd=n(f,"H2",{class:!0});var JNe=s(dd);_F=n(JNe,"A",{id:!0,class:!0,href:!0});var Bgt=s(_F);wpe=n(Bgt,"SPAN",{});var Pgt=s(wpe);T(Vy.$$.fragment,Pgt),Pgt.forEach(t),Bgt.forEach(t),FUo=i(JNe),Ape=n(JNe,"SPAN",{});var Igt=s(Ape);TUo=r(Igt,"AutoModelForAudioFrameClassification"),Igt.forEach(t),JNe.forEach(t),WIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Xy.$$.fragment,el),MUo=i(el),cd=n(el,"P",{});var XK=s(cd);EUo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sX=n(XK,"A",{href:!0});var qgt=s(sX);CUo=r(qgt,"from_pretrained()"),qgt.forEach(t),wUo=r(XK," class method or the "),lX=n(XK,"A",{href:!0});var Ngt=s(lX);AUo=r(Ngt,"from_config()"),Ngt.forEach(t),yUo=r(XK,` class
method.`),XK.forEach(t),LUo=i(el),zy=n(el,"P",{});var YNe=s(zy);xUo=r(YNe,"This class cannot be instantiated directly using "),ype=n(YNe,"CODE",{});var jgt=s(ype);$Uo=r(jgt,"__init__()"),jgt.forEach(t),kUo=r(YNe," (throws an error)."),YNe.forEach(t),SUo=i(el),ut=n(el,"DIV",{class:!0});var Sw=s(ut);T(Qy.$$.fragment,Sw),RUo=i(Sw),Lpe=n(Sw,"P",{});var Dgt=s(Lpe);BUo=r(Dgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Dgt.forEach(t),PUo=i(Sw),fd=n(Sw,"P",{});var zK=s(fd);IUo=r(zK,`Note:
Loading a model from its configuration file does `),xpe=n(zK,"STRONG",{});var Ggt=s(xpe);qUo=r(Ggt,"not"),Ggt.forEach(t),NUo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(zK,"A",{href:!0});var Ogt=s(iX);jUo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),DUo=r(zK," to load the model weights."),zK.forEach(t),GUo=i(Sw),T(bF.$$.fragment,Sw),Sw.forEach(t),OUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Wy.$$.fragment,ga),VUo=i(ga),$pe=n(ga,"P",{});var Vgt=s($pe);XUo=r(Vgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vgt.forEach(t),zUo=i(ga),Da=n(ga,"P",{});var Rw=s(Da);QUo=r(Rw,"The model class to instantiate is selected based on the "),kpe=n(Rw,"CODE",{});var Xgt=s(kpe);WUo=r(Xgt,"model_type"),Xgt.forEach(t),HUo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Spe=n(Rw,"CODE",{});var zgt=s(Spe);UUo=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),JUo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(Rw,"CODE",{});var Qgt=s(Rpe);YUo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),KUo=r(Rw,":"),Rw.forEach(t),ZUo=i(ga),Ga=n(ga,"UL",{});var Bw=s(Ga);vF=n(Bw,"LI",{});var D9e=s(vF);Bpe=n(D9e,"STRONG",{});var Wgt=s(Bpe);eJo=r(Wgt,"data2vec-audio"),Wgt.forEach(t),oJo=r(D9e," \u2014 "),dX=n(D9e,"A",{href:!0});var Hgt=s(dX);rJo=r(Hgt,"Data2VecAudioForAudioFrameClassification"),Hgt.forEach(t),tJo=r(D9e," (Data2VecAudio model)"),D9e.forEach(t),aJo=i(Bw),FF=n(Bw,"LI",{});var G9e=s(FF);Ppe=n(G9e,"STRONG",{});var Ugt=s(Ppe);nJo=r(Ugt,"unispeech-sat"),Ugt.forEach(t),sJo=r(G9e," \u2014 "),cX=n(G9e,"A",{href:!0});var Jgt=s(cX);lJo=r(Jgt,"UniSpeechSatForAudioFrameClassification"),Jgt.forEach(t),iJo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),dJo=i(Bw),TF=n(Bw,"LI",{});var O9e=s(TF);Ipe=n(O9e,"STRONG",{});var Ygt=s(Ipe);cJo=r(Ygt,"wav2vec2"),Ygt.forEach(t),fJo=r(O9e," \u2014 "),fX=n(O9e,"A",{href:!0});var Kgt=s(fX);mJo=r(Kgt,"Wav2Vec2ForAudioFrameClassification"),Kgt.forEach(t),gJo=r(O9e," (Wav2Vec2 model)"),O9e.forEach(t),hJo=i(Bw),MF=n(Bw,"LI",{});var V9e=s(MF);qpe=n(V9e,"STRONG",{});var Zgt=s(qpe);pJo=r(Zgt,"wavlm"),Zgt.forEach(t),uJo=r(V9e," \u2014 "),mX=n(V9e,"A",{href:!0});var eht=s(mX);_Jo=r(eht,"WavLMForAudioFrameClassification"),eht.forEach(t),bJo=r(V9e," (WavLM model)"),V9e.forEach(t),Bw.forEach(t),vJo=i(ga),EF=n(ga,"P",{});var X9e=s(EF);FJo=r(X9e,"The model is set in evaluation mode by default using "),Npe=n(X9e,"CODE",{});var oht=s(Npe);TJo=r(oht,"model.eval()"),oht.forEach(t),MJo=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(X9e,"CODE",{});var rht=s(jpe);EJo=r(rht,"model.train()"),rht.forEach(t),X9e.forEach(t),CJo=i(ga),T(CF.$$.fragment,ga),ga.forEach(t),el.forEach(t),HIe=i(f),md=n(f,"H2",{class:!0});var KNe=s(md);wF=n(KNe,"A",{id:!0,class:!0,href:!0});var tht=s(wF);Dpe=n(tht,"SPAN",{});var aht=s(Dpe);T(Hy.$$.fragment,aht),aht.forEach(t),tht.forEach(t),wJo=i(KNe),Gpe=n(KNe,"SPAN",{});var nht=s(Gpe);AJo=r(nht,"AutoModelForCTC"),nht.forEach(t),KNe.forEach(t),UIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Uy.$$.fragment,ol),yJo=i(ol),gd=n(ol,"P",{});var QK=s(gd);LJo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gX=n(QK,"A",{href:!0});var sht=s(gX);xJo=r(sht,"from_pretrained()"),sht.forEach(t),$Jo=r(QK," class method or the "),hX=n(QK,"A",{href:!0});var lht=s(hX);kJo=r(lht,"from_config()"),lht.forEach(t),SJo=r(QK,` class
method.`),QK.forEach(t),RJo=i(ol),Jy=n(ol,"P",{});var ZNe=s(Jy);BJo=r(ZNe,"This class cannot be instantiated directly using "),Ope=n(ZNe,"CODE",{});var iht=s(Ope);PJo=r(iht,"__init__()"),iht.forEach(t),IJo=r(ZNe," (throws an error)."),ZNe.forEach(t),qJo=i(ol),_t=n(ol,"DIV",{class:!0});var Pw=s(_t);T(Yy.$$.fragment,Pw),NJo=i(Pw),Vpe=n(Pw,"P",{});var dht=s(Vpe);jJo=r(dht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dht.forEach(t),DJo=i(Pw),hd=n(Pw,"P",{});var WK=s(hd);GJo=r(WK,`Note:
Loading a model from its configuration file does `),Xpe=n(WK,"STRONG",{});var cht=s(Xpe);OJo=r(cht,"not"),cht.forEach(t),VJo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(WK,"A",{href:!0});var fht=s(pX);XJo=r(fht,"from_pretrained()"),fht.forEach(t),zJo=r(WK," to load the model weights."),WK.forEach(t),QJo=i(Pw),T(AF.$$.fragment,Pw),Pw.forEach(t),WJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Ky.$$.fragment,ha),HJo=i(ha),zpe=n(ha,"P",{});var mht=s(zpe);UJo=r(mht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mht.forEach(t),JJo=i(ha),Oa=n(ha,"P",{});var Iw=s(Oa);YJo=r(Iw,"The model class to instantiate is selected based on the "),Qpe=n(Iw,"CODE",{});var ght=s(Qpe);KJo=r(ght,"model_type"),ght.forEach(t),ZJo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(Iw,"CODE",{});var hht=s(Wpe);eYo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),oYo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(Iw,"CODE",{});var pht=s(Hpe);rYo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),tYo=r(Iw,":"),Iw.forEach(t),aYo=i(ha),je=n(ha,"UL",{});var vo=s(je);yF=n(vo,"LI",{});var z9e=s(yF);Upe=n(z9e,"STRONG",{});var uht=s(Upe);nYo=r(uht,"data2vec-audio"),uht.forEach(t),sYo=r(z9e," \u2014 "),uX=n(z9e,"A",{href:!0});var _ht=s(uX);lYo=r(_ht,"Data2VecAudioForCTC"),_ht.forEach(t),iYo=r(z9e," (Data2VecAudio model)"),z9e.forEach(t),dYo=i(vo),LF=n(vo,"LI",{});var Q9e=s(LF);Jpe=n(Q9e,"STRONG",{});var bht=s(Jpe);cYo=r(bht,"hubert"),bht.forEach(t),fYo=r(Q9e," \u2014 "),_X=n(Q9e,"A",{href:!0});var vht=s(_X);mYo=r(vht,"HubertForCTC"),vht.forEach(t),gYo=r(Q9e," (Hubert model)"),Q9e.forEach(t),hYo=i(vo),xF=n(vo,"LI",{});var W9e=s(xF);Ype=n(W9e,"STRONG",{});var Fht=s(Ype);pYo=r(Fht,"sew"),Fht.forEach(t),uYo=r(W9e," \u2014 "),bX=n(W9e,"A",{href:!0});var Tht=s(bX);_Yo=r(Tht,"SEWForCTC"),Tht.forEach(t),bYo=r(W9e," (SEW model)"),W9e.forEach(t),vYo=i(vo),$F=n(vo,"LI",{});var H9e=s($F);Kpe=n(H9e,"STRONG",{});var Mht=s(Kpe);FYo=r(Mht,"sew-d"),Mht.forEach(t),TYo=r(H9e," \u2014 "),vX=n(H9e,"A",{href:!0});var Eht=s(vX);MYo=r(Eht,"SEWDForCTC"),Eht.forEach(t),EYo=r(H9e," (SEW-D model)"),H9e.forEach(t),CYo=i(vo),kF=n(vo,"LI",{});var U9e=s(kF);Zpe=n(U9e,"STRONG",{});var Cht=s(Zpe);wYo=r(Cht,"unispeech"),Cht.forEach(t),AYo=r(U9e," \u2014 "),FX=n(U9e,"A",{href:!0});var wht=s(FX);yYo=r(wht,"UniSpeechForCTC"),wht.forEach(t),LYo=r(U9e," (UniSpeech model)"),U9e.forEach(t),xYo=i(vo),SF=n(vo,"LI",{});var J9e=s(SF);eue=n(J9e,"STRONG",{});var Aht=s(eue);$Yo=r(Aht,"unispeech-sat"),Aht.forEach(t),kYo=r(J9e," \u2014 "),TX=n(J9e,"A",{href:!0});var yht=s(TX);SYo=r(yht,"UniSpeechSatForCTC"),yht.forEach(t),RYo=r(J9e," (UniSpeechSat model)"),J9e.forEach(t),BYo=i(vo),RF=n(vo,"LI",{});var Y9e=s(RF);oue=n(Y9e,"STRONG",{});var Lht=s(oue);PYo=r(Lht,"wav2vec2"),Lht.forEach(t),IYo=r(Y9e," \u2014 "),MX=n(Y9e,"A",{href:!0});var xht=s(MX);qYo=r(xht,"Wav2Vec2ForCTC"),xht.forEach(t),NYo=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),jYo=i(vo),BF=n(vo,"LI",{});var K9e=s(BF);rue=n(K9e,"STRONG",{});var $ht=s(rue);DYo=r($ht,"wavlm"),$ht.forEach(t),GYo=r(K9e," \u2014 "),EX=n(K9e,"A",{href:!0});var kht=s(EX);OYo=r(kht,"WavLMForCTC"),kht.forEach(t),VYo=r(K9e," (WavLM model)"),K9e.forEach(t),vo.forEach(t),XYo=i(ha),PF=n(ha,"P",{});var Z9e=s(PF);zYo=r(Z9e,"The model is set in evaluation mode by default using "),tue=n(Z9e,"CODE",{});var Sht=s(tue);QYo=r(Sht,"model.eval()"),Sht.forEach(t),WYo=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(Z9e,"CODE",{});var Rht=s(aue);HYo=r(Rht,"model.train()"),Rht.forEach(t),Z9e.forEach(t),UYo=i(ha),T(IF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),JIe=i(f),pd=n(f,"H2",{class:!0});var eje=s(pd);qF=n(eje,"A",{id:!0,class:!0,href:!0});var Bht=s(qF);nue=n(Bht,"SPAN",{});var Pht=s(nue);T(Zy.$$.fragment,Pht),Pht.forEach(t),Bht.forEach(t),JYo=i(eje),sue=n(eje,"SPAN",{});var Iht=s(sue);YYo=r(Iht,"AutoModelForSpeechSeq2Seq"),Iht.forEach(t),eje.forEach(t),YIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(eL.$$.fragment,rl),KYo=i(rl),ud=n(rl,"P",{});var HK=s(ud);ZYo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CX=n(HK,"A",{href:!0});var qht=s(CX);eKo=r(qht,"from_pretrained()"),qht.forEach(t),oKo=r(HK," class method or the "),wX=n(HK,"A",{href:!0});var Nht=s(wX);rKo=r(Nht,"from_config()"),Nht.forEach(t),tKo=r(HK,` class
method.`),HK.forEach(t),aKo=i(rl),oL=n(rl,"P",{});var oje=s(oL);nKo=r(oje,"This class cannot be instantiated directly using "),lue=n(oje,"CODE",{});var jht=s(lue);sKo=r(jht,"__init__()"),jht.forEach(t),lKo=r(oje," (throws an error)."),oje.forEach(t),iKo=i(rl),bt=n(rl,"DIV",{class:!0});var qw=s(bt);T(rL.$$.fragment,qw),dKo=i(qw),iue=n(qw,"P",{});var Dht=s(iue);cKo=r(Dht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dht.forEach(t),fKo=i(qw),_d=n(qw,"P",{});var UK=s(_d);mKo=r(UK,`Note:
Loading a model from its configuration file does `),due=n(UK,"STRONG",{});var Ght=s(due);gKo=r(Ght,"not"),Ght.forEach(t),hKo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(UK,"A",{href:!0});var Oht=s(AX);pKo=r(Oht,"from_pretrained()"),Oht.forEach(t),uKo=r(UK," to load the model weights."),UK.forEach(t),_Ko=i(qw),T(NF.$$.fragment,qw),qw.forEach(t),bKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(tL.$$.fragment,pa),vKo=i(pa),cue=n(pa,"P",{});var Vht=s(cue);FKo=r(Vht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vht.forEach(t),TKo=i(pa),Va=n(pa,"P",{});var Nw=s(Va);MKo=r(Nw,"The model class to instantiate is selected based on the "),fue=n(Nw,"CODE",{});var Xht=s(fue);EKo=r(Xht,"model_type"),Xht.forEach(t),CKo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),mue=n(Nw,"CODE",{});var zht=s(mue);wKo=r(zht,"pretrained_model_name_or_path"),zht.forEach(t),AKo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(Nw,"CODE",{});var Qht=s(gue);yKo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),LKo=r(Nw,":"),Nw.forEach(t),xKo=i(pa),aL=n(pa,"UL",{});var rje=s(aL);jF=n(rje,"LI",{});var e$e=s(jF);hue=n(e$e,"STRONG",{});var Wht=s(hue);$Ko=r(Wht,"speech-encoder-decoder"),Wht.forEach(t),kKo=r(e$e," \u2014 "),yX=n(e$e,"A",{href:!0});var Hht=s(yX);SKo=r(Hht,"SpeechEncoderDecoderModel"),Hht.forEach(t),RKo=r(e$e," (Speech Encoder decoder model)"),e$e.forEach(t),BKo=i(rje),DF=n(rje,"LI",{});var o$e=s(DF);pue=n(o$e,"STRONG",{});var Uht=s(pue);PKo=r(Uht,"speech_to_text"),Uht.forEach(t),IKo=r(o$e," \u2014 "),LX=n(o$e,"A",{href:!0});var Jht=s(LX);qKo=r(Jht,"Speech2TextForConditionalGeneration"),Jht.forEach(t),NKo=r(o$e," (Speech2Text model)"),o$e.forEach(t),rje.forEach(t),jKo=i(pa),GF=n(pa,"P",{});var r$e=s(GF);DKo=r(r$e,"The model is set in evaluation mode by default using "),uue=n(r$e,"CODE",{});var Yht=s(uue);GKo=r(Yht,"model.eval()"),Yht.forEach(t),OKo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=n(r$e,"CODE",{});var Kht=s(_ue);VKo=r(Kht,"model.train()"),Kht.forEach(t),r$e.forEach(t),XKo=i(pa),T(OF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),KIe=i(f),bd=n(f,"H2",{class:!0});var tje=s(bd);VF=n(tje,"A",{id:!0,class:!0,href:!0});var Zht=s(VF);bue=n(Zht,"SPAN",{});var ept=s(bue);T(nL.$$.fragment,ept),ept.forEach(t),Zht.forEach(t),zKo=i(tje),vue=n(tje,"SPAN",{});var opt=s(vue);QKo=r(opt,"AutoModelForAudioXVector"),opt.forEach(t),tje.forEach(t),ZIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(sL.$$.fragment,tl),WKo=i(tl),vd=n(tl,"P",{});var JK=s(vd);HKo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xX=n(JK,"A",{href:!0});var rpt=s(xX);UKo=r(rpt,"from_pretrained()"),rpt.forEach(t),JKo=r(JK," class method or the "),$X=n(JK,"A",{href:!0});var tpt=s($X);YKo=r(tpt,"from_config()"),tpt.forEach(t),KKo=r(JK,` class
method.`),JK.forEach(t),ZKo=i(tl),lL=n(tl,"P",{});var aje=s(lL);eZo=r(aje,"This class cannot be instantiated directly using "),Fue=n(aje,"CODE",{});var apt=s(Fue);oZo=r(apt,"__init__()"),apt.forEach(t),rZo=r(aje," (throws an error)."),aje.forEach(t),tZo=i(tl),vt=n(tl,"DIV",{class:!0});var jw=s(vt);T(iL.$$.fragment,jw),aZo=i(jw),Tue=n(jw,"P",{});var npt=s(Tue);nZo=r(npt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),npt.forEach(t),sZo=i(jw),Fd=n(jw,"P",{});var YK=s(Fd);lZo=r(YK,`Note:
Loading a model from its configuration file does `),Mue=n(YK,"STRONG",{});var spt=s(Mue);iZo=r(spt,"not"),spt.forEach(t),dZo=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(YK,"A",{href:!0});var lpt=s(kX);cZo=r(lpt,"from_pretrained()"),lpt.forEach(t),fZo=r(YK," to load the model weights."),YK.forEach(t),mZo=i(jw),T(XF.$$.fragment,jw),jw.forEach(t),gZo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(dL.$$.fragment,ua),hZo=i(ua),Eue=n(ua,"P",{});var ipt=s(Eue);pZo=r(ipt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ipt.forEach(t),uZo=i(ua),Xa=n(ua,"P",{});var Dw=s(Xa);_Zo=r(Dw,"The model class to instantiate is selected based on the "),Cue=n(Dw,"CODE",{});var dpt=s(Cue);bZo=r(dpt,"model_type"),dpt.forEach(t),vZo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),wue=n(Dw,"CODE",{});var cpt=s(wue);FZo=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),TZo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(Dw,"CODE",{});var fpt=s(Aue);MZo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),EZo=r(Dw,":"),Dw.forEach(t),CZo=i(ua),za=n(ua,"UL",{});var Gw=s(za);zF=n(Gw,"LI",{});var t$e=s(zF);yue=n(t$e,"STRONG",{});var mpt=s(yue);wZo=r(mpt,"data2vec-audio"),mpt.forEach(t),AZo=r(t$e," \u2014 "),SX=n(t$e,"A",{href:!0});var gpt=s(SX);yZo=r(gpt,"Data2VecAudioForXVector"),gpt.forEach(t),LZo=r(t$e," (Data2VecAudio model)"),t$e.forEach(t),xZo=i(Gw),QF=n(Gw,"LI",{});var a$e=s(QF);Lue=n(a$e,"STRONG",{});var hpt=s(Lue);$Zo=r(hpt,"unispeech-sat"),hpt.forEach(t),kZo=r(a$e," \u2014 "),RX=n(a$e,"A",{href:!0});var ppt=s(RX);SZo=r(ppt,"UniSpeechSatForXVector"),ppt.forEach(t),RZo=r(a$e," (UniSpeechSat model)"),a$e.forEach(t),BZo=i(Gw),WF=n(Gw,"LI",{});var n$e=s(WF);xue=n(n$e,"STRONG",{});var upt=s(xue);PZo=r(upt,"wav2vec2"),upt.forEach(t),IZo=r(n$e," \u2014 "),BX=n(n$e,"A",{href:!0});var _pt=s(BX);qZo=r(_pt,"Wav2Vec2ForXVector"),_pt.forEach(t),NZo=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),jZo=i(Gw),HF=n(Gw,"LI",{});var s$e=s(HF);$ue=n(s$e,"STRONG",{});var bpt=s($ue);DZo=r(bpt,"wavlm"),bpt.forEach(t),GZo=r(s$e," \u2014 "),PX=n(s$e,"A",{href:!0});var vpt=s(PX);OZo=r(vpt,"WavLMForXVector"),vpt.forEach(t),VZo=r(s$e," (WavLM model)"),s$e.forEach(t),Gw.forEach(t),XZo=i(ua),UF=n(ua,"P",{});var l$e=s(UF);zZo=r(l$e,"The model is set in evaluation mode by default using "),kue=n(l$e,"CODE",{});var Fpt=s(kue);QZo=r(Fpt,"model.eval()"),Fpt.forEach(t),WZo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(l$e,"CODE",{});var Tpt=s(Sue);HZo=r(Tpt,"model.train()"),Tpt.forEach(t),l$e.forEach(t),UZo=i(ua),T(JF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),eqe=i(f),Td=n(f,"H2",{class:!0});var nje=s(Td);YF=n(nje,"A",{id:!0,class:!0,href:!0});var Mpt=s(YF);Rue=n(Mpt,"SPAN",{});var Ept=s(Rue);T(cL.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),JZo=i(nje),Bue=n(nje,"SPAN",{});var Cpt=s(Bue);YZo=r(Cpt,"AutoModelForMaskedImageModeling"),Cpt.forEach(t),nje.forEach(t),oqe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(fL.$$.fragment,al),KZo=i(al),Md=n(al,"P",{});var KK=s(Md);ZZo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IX=n(KK,"A",{href:!0});var wpt=s(IX);eer=r(wpt,"from_pretrained()"),wpt.forEach(t),oer=r(KK," class method or the "),qX=n(KK,"A",{href:!0});var Apt=s(qX);rer=r(Apt,"from_config()"),Apt.forEach(t),ter=r(KK,` class
method.`),KK.forEach(t),aer=i(al),mL=n(al,"P",{});var sje=s(mL);ner=r(sje,"This class cannot be instantiated directly using "),Pue=n(sje,"CODE",{});var ypt=s(Pue);ser=r(ypt,"__init__()"),ypt.forEach(t),ler=r(sje," (throws an error)."),sje.forEach(t),ier=i(al),Ft=n(al,"DIV",{class:!0});var Ow=s(Ft);T(gL.$$.fragment,Ow),der=i(Ow),Iue=n(Ow,"P",{});var Lpt=s(Iue);cer=r(Lpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Lpt.forEach(t),fer=i(Ow),Ed=n(Ow,"P",{});var ZK=s(Ed);mer=r(ZK,`Note:
Loading a model from its configuration file does `),que=n(ZK,"STRONG",{});var xpt=s(que);ger=r(xpt,"not"),xpt.forEach(t),her=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(ZK,"A",{href:!0});var $pt=s(NX);per=r($pt,"from_pretrained()"),$pt.forEach(t),uer=r(ZK," to load the model weights."),ZK.forEach(t),_er=i(Ow),T(KF.$$.fragment,Ow),Ow.forEach(t),ber=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(hL.$$.fragment,_a),ver=i(_a),Nue=n(_a,"P",{});var kpt=s(Nue);Fer=r(kpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kpt.forEach(t),Ter=i(_a),Qa=n(_a,"P",{});var Vw=s(Qa);Mer=r(Vw,"The model class to instantiate is selected based on the "),jue=n(Vw,"CODE",{});var Spt=s(jue);Eer=r(Spt,"model_type"),Spt.forEach(t),Cer=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Due=n(Vw,"CODE",{});var Rpt=s(Due);wer=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Aer=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(Vw,"CODE",{});var Bpt=s(Gue);yer=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Ler=r(Vw,":"),Vw.forEach(t),xer=i(_a),Cd=n(_a,"UL",{});var eZ=s(Cd);ZF=n(eZ,"LI",{});var i$e=s(ZF);Oue=n(i$e,"STRONG",{});var Ppt=s(Oue);$er=r(Ppt,"deit"),Ppt.forEach(t),ker=r(i$e," \u2014 "),jX=n(i$e,"A",{href:!0});var Ipt=s(jX);Ser=r(Ipt,"DeiTForMaskedImageModeling"),Ipt.forEach(t),Rer=r(i$e," (DeiT model)"),i$e.forEach(t),Ber=i(eZ),e0=n(eZ,"LI",{});var d$e=s(e0);Vue=n(d$e,"STRONG",{});var qpt=s(Vue);Per=r(qpt,"swin"),qpt.forEach(t),Ier=r(d$e," \u2014 "),DX=n(d$e,"A",{href:!0});var Npt=s(DX);qer=r(Npt,"SwinForMaskedImageModeling"),Npt.forEach(t),Ner=r(d$e," (Swin model)"),d$e.forEach(t),jer=i(eZ),o0=n(eZ,"LI",{});var c$e=s(o0);Xue=n(c$e,"STRONG",{});var jpt=s(Xue);Der=r(jpt,"vit"),jpt.forEach(t),Ger=r(c$e," \u2014 "),GX=n(c$e,"A",{href:!0});var Dpt=s(GX);Oer=r(Dpt,"ViTForMaskedImageModeling"),Dpt.forEach(t),Ver=r(c$e," (ViT model)"),c$e.forEach(t),eZ.forEach(t),Xer=i(_a),r0=n(_a,"P",{});var f$e=s(r0);zer=r(f$e,"The model is set in evaluation mode by default using "),zue=n(f$e,"CODE",{});var Gpt=s(zue);Qer=r(Gpt,"model.eval()"),Gpt.forEach(t),Wer=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(f$e,"CODE",{});var Opt=s(Que);Her=r(Opt,"model.train()"),Opt.forEach(t),f$e.forEach(t),Uer=i(_a),T(t0.$$.fragment,_a),_a.forEach(t),al.forEach(t),rqe=i(f),wd=n(f,"H2",{class:!0});var lje=s(wd);a0=n(lje,"A",{id:!0,class:!0,href:!0});var Vpt=s(a0);Wue=n(Vpt,"SPAN",{});var Xpt=s(Wue);T(pL.$$.fragment,Xpt),Xpt.forEach(t),Vpt.forEach(t),Jer=i(lje),Hue=n(lje,"SPAN",{});var zpt=s(Hue);Yer=r(zpt,"AutoModelForObjectDetection"),zpt.forEach(t),lje.forEach(t),tqe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(uL.$$.fragment,nl),Ker=i(nl),Ad=n(nl,"P",{});var oZ=s(Ad);Zer=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OX=n(oZ,"A",{href:!0});var Qpt=s(OX);eor=r(Qpt,"from_pretrained()"),Qpt.forEach(t),oor=r(oZ," class method or the "),VX=n(oZ,"A",{href:!0});var Wpt=s(VX);ror=r(Wpt,"from_config()"),Wpt.forEach(t),tor=r(oZ,` class
method.`),oZ.forEach(t),aor=i(nl),_L=n(nl,"P",{});var ije=s(_L);nor=r(ije,"This class cannot be instantiated directly using "),Uue=n(ije,"CODE",{});var Hpt=s(Uue);sor=r(Hpt,"__init__()"),Hpt.forEach(t),lor=r(ije," (throws an error)."),ije.forEach(t),ior=i(nl),Tt=n(nl,"DIV",{class:!0});var Xw=s(Tt);T(bL.$$.fragment,Xw),dor=i(Xw),Jue=n(Xw,"P",{});var Upt=s(Jue);cor=r(Upt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Upt.forEach(t),mor=i(Xw),yd=n(Xw,"P",{});var rZ=s(yd);gor=r(rZ,`Note:
Loading a model from its configuration file does `),Yue=n(rZ,"STRONG",{});var Jpt=s(Yue);hor=r(Jpt,"not"),Jpt.forEach(t),por=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(rZ,"A",{href:!0});var Ypt=s(XX);uor=r(Ypt,"from_pretrained()"),Ypt.forEach(t),_or=r(rZ," to load the model weights."),rZ.forEach(t),bor=i(Xw),T(n0.$$.fragment,Xw),Xw.forEach(t),vor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(vL.$$.fragment,ba),For=i(ba),Kue=n(ba,"P",{});var Kpt=s(Kue);Tor=r(Kpt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kpt.forEach(t),Mor=i(ba),Wa=n(ba,"P",{});var zw=s(Wa);Eor=r(zw,"The model class to instantiate is selected based on the "),Zue=n(zw,"CODE",{});var Zpt=s(Zue);Cor=r(Zpt,"model_type"),Zpt.forEach(t),wor=r(zw,` property of the config object (either
passed as an argument or loaded from `),e_e=n(zw,"CODE",{});var eut=s(e_e);Aor=r(eut,"pretrained_model_name_or_path"),eut.forEach(t),yor=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(zw,"CODE",{});var out=s(o_e);Lor=r(out,"pretrained_model_name_or_path"),out.forEach(t),xor=r(zw,":"),zw.forEach(t),$or=i(ba),FL=n(ba,"UL",{});var dje=s(FL);s0=n(dje,"LI",{});var m$e=s(s0);r_e=n(m$e,"STRONG",{});var rut=s(r_e);kor=r(rut,"detr"),rut.forEach(t),Sor=r(m$e," \u2014 "),zX=n(m$e,"A",{href:!0});var tut=s(zX);Ror=r(tut,"DetrForObjectDetection"),tut.forEach(t),Bor=r(m$e," (DETR model)"),m$e.forEach(t),Por=i(dje),l0=n(dje,"LI",{});var g$e=s(l0);t_e=n(g$e,"STRONG",{});var aut=s(t_e);Ior=r(aut,"yolos"),aut.forEach(t),qor=r(g$e," \u2014 "),QX=n(g$e,"A",{href:!0});var nut=s(QX);Nor=r(nut,"YolosForObjectDetection"),nut.forEach(t),jor=r(g$e," (YOLOS model)"),g$e.forEach(t),dje.forEach(t),Dor=i(ba),i0=n(ba,"P",{});var h$e=s(i0);Gor=r(h$e,"The model is set in evaluation mode by default using "),a_e=n(h$e,"CODE",{});var sut=s(a_e);Oor=r(sut,"model.eval()"),sut.forEach(t),Vor=r(h$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(h$e,"CODE",{});var lut=s(n_e);Xor=r(lut,"model.train()"),lut.forEach(t),h$e.forEach(t),zor=i(ba),T(d0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),aqe=i(f),Ld=n(f,"H2",{class:!0});var cje=s(Ld);c0=n(cje,"A",{id:!0,class:!0,href:!0});var iut=s(c0);s_e=n(iut,"SPAN",{});var dut=s(s_e);T(TL.$$.fragment,dut),dut.forEach(t),iut.forEach(t),Qor=i(cje),l_e=n(cje,"SPAN",{});var cut=s(l_e);Wor=r(cut,"AutoModelForImageSegmentation"),cut.forEach(t),cje.forEach(t),nqe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(ML.$$.fragment,sl),Hor=i(sl),xd=n(sl,"P",{});var tZ=s(xd);Uor=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WX=n(tZ,"A",{href:!0});var fut=s(WX);Jor=r(fut,"from_pretrained()"),fut.forEach(t),Yor=r(tZ," class method or the "),HX=n(tZ,"A",{href:!0});var mut=s(HX);Kor=r(mut,"from_config()"),mut.forEach(t),Zor=r(tZ,` class
method.`),tZ.forEach(t),err=i(sl),EL=n(sl,"P",{});var fje=s(EL);orr=r(fje,"This class cannot be instantiated directly using "),i_e=n(fje,"CODE",{});var gut=s(i_e);rrr=r(gut,"__init__()"),gut.forEach(t),trr=r(fje," (throws an error)."),fje.forEach(t),arr=i(sl),Mt=n(sl,"DIV",{class:!0});var Qw=s(Mt);T(CL.$$.fragment,Qw),nrr=i(Qw),d_e=n(Qw,"P",{});var hut=s(d_e);srr=r(hut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hut.forEach(t),lrr=i(Qw),$d=n(Qw,"P",{});var aZ=s($d);irr=r(aZ,`Note:
Loading a model from its configuration file does `),c_e=n(aZ,"STRONG",{});var put=s(c_e);drr=r(put,"not"),put.forEach(t),crr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(aZ,"A",{href:!0});var uut=s(UX);frr=r(uut,"from_pretrained()"),uut.forEach(t),mrr=r(aZ," to load the model weights."),aZ.forEach(t),grr=i(Qw),T(f0.$$.fragment,Qw),Qw.forEach(t),hrr=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(wL.$$.fragment,va),prr=i(va),f_e=n(va,"P",{});var _ut=s(f_e);urr=r(_ut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_ut.forEach(t),_rr=i(va),Ha=n(va,"P",{});var Ww=s(Ha);brr=r(Ww,"The model class to instantiate is selected based on the "),m_e=n(Ww,"CODE",{});var but=s(m_e);vrr=r(but,"model_type"),but.forEach(t),Frr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),g_e=n(Ww,"CODE",{});var vut=s(g_e);Trr=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),Mrr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(Ww,"CODE",{});var Fut=s(h_e);Err=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Crr=r(Ww,":"),Ww.forEach(t),wrr=i(va),p_e=n(va,"UL",{});var Tut=s(p_e);m0=n(Tut,"LI",{});var p$e=s(m0);u_e=n(p$e,"STRONG",{});var Mut=s(u_e);Arr=r(Mut,"detr"),Mut.forEach(t),yrr=r(p$e," \u2014 "),JX=n(p$e,"A",{href:!0});var Eut=s(JX);Lrr=r(Eut,"DetrForSegmentation"),Eut.forEach(t),xrr=r(p$e," (DETR model)"),p$e.forEach(t),Tut.forEach(t),$rr=i(va),g0=n(va,"P",{});var u$e=s(g0);krr=r(u$e,"The model is set in evaluation mode by default using "),__e=n(u$e,"CODE",{});var Cut=s(__e);Srr=r(Cut,"model.eval()"),Cut.forEach(t),Rrr=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(u$e,"CODE",{});var wut=s(b_e);Brr=r(wut,"model.train()"),wut.forEach(t),u$e.forEach(t),Prr=i(va),T(h0.$$.fragment,va),va.forEach(t),sl.forEach(t),sqe=i(f),kd=n(f,"H2",{class:!0});var mje=s(kd);p0=n(mje,"A",{id:!0,class:!0,href:!0});var Aut=s(p0);v_e=n(Aut,"SPAN",{});var yut=s(v_e);T(AL.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),Irr=i(mje),F_e=n(mje,"SPAN",{});var Lut=s(F_e);qrr=r(Lut,"AutoModelForSemanticSegmentation"),Lut.forEach(t),mje.forEach(t),lqe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(yL.$$.fragment,ll),Nrr=i(ll),Sd=n(ll,"P",{});var nZ=s(Sd);jrr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YX=n(nZ,"A",{href:!0});var xut=s(YX);Drr=r(xut,"from_pretrained()"),xut.forEach(t),Grr=r(nZ," class method or the "),KX=n(nZ,"A",{href:!0});var $ut=s(KX);Orr=r($ut,"from_config()"),$ut.forEach(t),Vrr=r(nZ,` class
method.`),nZ.forEach(t),Xrr=i(ll),LL=n(ll,"P",{});var gje=s(LL);zrr=r(gje,"This class cannot be instantiated directly using "),T_e=n(gje,"CODE",{});var kut=s(T_e);Qrr=r(kut,"__init__()"),kut.forEach(t),Wrr=r(gje," (throws an error)."),gje.forEach(t),Hrr=i(ll),Et=n(ll,"DIV",{class:!0});var Hw=s(Et);T(xL.$$.fragment,Hw),Urr=i(Hw),M_e=n(Hw,"P",{});var Sut=s(M_e);Jrr=r(Sut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Sut.forEach(t),Yrr=i(Hw),Rd=n(Hw,"P",{});var sZ=s(Rd);Krr=r(sZ,`Note:
Loading a model from its configuration file does `),E_e=n(sZ,"STRONG",{});var Rut=s(E_e);Zrr=r(Rut,"not"),Rut.forEach(t),etr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(sZ,"A",{href:!0});var But=s(ZX);otr=r(But,"from_pretrained()"),But.forEach(t),rtr=r(sZ," to load the model weights."),sZ.forEach(t),ttr=i(Hw),T(u0.$$.fragment,Hw),Hw.forEach(t),atr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T($L.$$.fragment,Fa),ntr=i(Fa),C_e=n(Fa,"P",{});var Put=s(C_e);str=r(Put,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Put.forEach(t),ltr=i(Fa),Ua=n(Fa,"P",{});var Uw=s(Ua);itr=r(Uw,"The model class to instantiate is selected based on the "),w_e=n(Uw,"CODE",{});var Iut=s(w_e);dtr=r(Iut,"model_type"),Iut.forEach(t),ctr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),A_e=n(Uw,"CODE",{});var qut=s(A_e);ftr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),mtr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(Uw,"CODE",{});var Nut=s(y_e);gtr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),htr=r(Uw,":"),Uw.forEach(t),ptr=i(Fa),Ja=n(Fa,"UL",{});var Jw=s(Ja);_0=n(Jw,"LI",{});var _$e=s(_0);L_e=n(_$e,"STRONG",{});var jut=s(L_e);utr=r(jut,"beit"),jut.forEach(t),_tr=r(_$e," \u2014 "),ez=n(_$e,"A",{href:!0});var Dut=s(ez);btr=r(Dut,"BeitForSemanticSegmentation"),Dut.forEach(t),vtr=r(_$e," (BEiT model)"),_$e.forEach(t),Ftr=i(Jw),b0=n(Jw,"LI",{});var b$e=s(b0);x_e=n(b$e,"STRONG",{});var Gut=s(x_e);Ttr=r(Gut,"data2vec-vision"),Gut.forEach(t),Mtr=r(b$e," \u2014 "),oz=n(b$e,"A",{href:!0});var Out=s(oz);Etr=r(Out,"Data2VecVisionForSemanticSegmentation"),Out.forEach(t),Ctr=r(b$e," (Data2VecVision model)"),b$e.forEach(t),wtr=i(Jw),v0=n(Jw,"LI",{});var v$e=s(v0);$_e=n(v$e,"STRONG",{});var Vut=s($_e);Atr=r(Vut,"dpt"),Vut.forEach(t),ytr=r(v$e," \u2014 "),rz=n(v$e,"A",{href:!0});var Xut=s(rz);Ltr=r(Xut,"DPTForSemanticSegmentation"),Xut.forEach(t),xtr=r(v$e," (DPT model)"),v$e.forEach(t),$tr=i(Jw),F0=n(Jw,"LI",{});var F$e=s(F0);k_e=n(F$e,"STRONG",{});var zut=s(k_e);ktr=r(zut,"segformer"),zut.forEach(t),Str=r(F$e," \u2014 "),tz=n(F$e,"A",{href:!0});var Qut=s(tz);Rtr=r(Qut,"SegformerForSemanticSegmentation"),Qut.forEach(t),Btr=r(F$e," (SegFormer model)"),F$e.forEach(t),Jw.forEach(t),Ptr=i(Fa),T0=n(Fa,"P",{});var T$e=s(T0);Itr=r(T$e,"The model is set in evaluation mode by default using "),S_e=n(T$e,"CODE",{});var Wut=s(S_e);qtr=r(Wut,"model.eval()"),Wut.forEach(t),Ntr=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(T$e,"CODE",{});var Hut=s(R_e);jtr=r(Hut,"model.train()"),Hut.forEach(t),T$e.forEach(t),Dtr=i(Fa),T(M0.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),iqe=i(f),Bd=n(f,"H2",{class:!0});var hje=s(Bd);E0=n(hje,"A",{id:!0,class:!0,href:!0});var Uut=s(E0);B_e=n(Uut,"SPAN",{});var Jut=s(B_e);T(kL.$$.fragment,Jut),Jut.forEach(t),Uut.forEach(t),Gtr=i(hje),P_e=n(hje,"SPAN",{});var Yut=s(P_e);Otr=r(Yut,"AutoModelForInstanceSegmentation"),Yut.forEach(t),hje.forEach(t),dqe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(SL.$$.fragment,il),Vtr=i(il),Pd=n(il,"P",{});var lZ=s(Pd);Xtr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),az=n(lZ,"A",{href:!0});var Kut=s(az);ztr=r(Kut,"from_pretrained()"),Kut.forEach(t),Qtr=r(lZ," class method or the "),nz=n(lZ,"A",{href:!0});var Zut=s(nz);Wtr=r(Zut,"from_config()"),Zut.forEach(t),Htr=r(lZ,` class
method.`),lZ.forEach(t),Utr=i(il),RL=n(il,"P",{});var pje=s(RL);Jtr=r(pje,"This class cannot be instantiated directly using "),I_e=n(pje,"CODE",{});var e_t=s(I_e);Ytr=r(e_t,"__init__()"),e_t.forEach(t),Ktr=r(pje," (throws an error)."),pje.forEach(t),Ztr=i(il),Ct=n(il,"DIV",{class:!0});var Yw=s(Ct);T(BL.$$.fragment,Yw),ear=i(Yw),q_e=n(Yw,"P",{});var o_t=s(q_e);oar=r(o_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),o_t.forEach(t),rar=i(Yw),Id=n(Yw,"P",{});var iZ=s(Id);tar=r(iZ,`Note:
Loading a model from its configuration file does `),N_e=n(iZ,"STRONG",{});var r_t=s(N_e);aar=r(r_t,"not"),r_t.forEach(t),nar=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(iZ,"A",{href:!0});var t_t=s(sz);sar=r(t_t,"from_pretrained()"),t_t.forEach(t),lar=r(iZ," to load the model weights."),iZ.forEach(t),iar=i(Yw),T(C0.$$.fragment,Yw),Yw.forEach(t),dar=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(PL.$$.fragment,Ta),car=i(Ta),j_e=n(Ta,"P",{});var a_t=s(j_e);far=r(a_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),a_t.forEach(t),mar=i(Ta),Ya=n(Ta,"P",{});var Kw=s(Ya);gar=r(Kw,"The model class to instantiate is selected based on the "),D_e=n(Kw,"CODE",{});var n_t=s(D_e);har=r(n_t,"model_type"),n_t.forEach(t),par=r(Kw,` property of the config object (either
passed as an argument or loaded from `),G_e=n(Kw,"CODE",{});var s_t=s(G_e);uar=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),_ar=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(Kw,"CODE",{});var l_t=s(O_e);bar=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),Far=r(Kw,":"),Kw.forEach(t),Tar=i(Ta),V_e=n(Ta,"UL",{});var i_t=s(V_e);w0=n(i_t,"LI",{});var M$e=s(w0);X_e=n(M$e,"STRONG",{});var d_t=s(X_e);Mar=r(d_t,"maskformer"),d_t.forEach(t),Ear=r(M$e," \u2014 "),lz=n(M$e,"A",{href:!0});var c_t=s(lz);Car=r(c_t,"MaskFormerForInstanceSegmentation"),c_t.forEach(t),war=r(M$e," (MaskFormer model)"),M$e.forEach(t),i_t.forEach(t),Aar=i(Ta),A0=n(Ta,"P",{});var E$e=s(A0);yar=r(E$e,"The model is set in evaluation mode by default using "),z_e=n(E$e,"CODE",{});var f_t=s(z_e);Lar=r(f_t,"model.eval()"),f_t.forEach(t),xar=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(E$e,"CODE",{});var m_t=s(Q_e);$ar=r(m_t,"model.train()"),m_t.forEach(t),E$e.forEach(t),kar=i(Ta),T(y0.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),cqe=i(f),qd=n(f,"H2",{class:!0});var uje=s(qd);L0=n(uje,"A",{id:!0,class:!0,href:!0});var g_t=s(L0);W_e=n(g_t,"SPAN",{});var h_t=s(W_e);T(IL.$$.fragment,h_t),h_t.forEach(t),g_t.forEach(t),Sar=i(uje),H_e=n(uje,"SPAN",{});var p_t=s(H_e);Rar=r(p_t,"TFAutoModel"),p_t.forEach(t),uje.forEach(t),fqe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(qL.$$.fragment,dl),Bar=i(dl),Nd=n(dl,"P",{});var dZ=s(Nd);Par=r(dZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iz=n(dZ,"A",{href:!0});var u_t=s(iz);Iar=r(u_t,"from_pretrained()"),u_t.forEach(t),qar=r(dZ," class method or the "),dz=n(dZ,"A",{href:!0});var __t=s(dz);Nar=r(__t,"from_config()"),__t.forEach(t),jar=r(dZ,` class
method.`),dZ.forEach(t),Dar=i(dl),NL=n(dl,"P",{});var _je=s(NL);Gar=r(_je,"This class cannot be instantiated directly using "),U_e=n(_je,"CODE",{});var b_t=s(U_e);Oar=r(b_t,"__init__()"),b_t.forEach(t),Var=r(_je," (throws an error)."),_je.forEach(t),Xar=i(dl),wt=n(dl,"DIV",{class:!0});var Zw=s(wt);T(jL.$$.fragment,Zw),zar=i(Zw),J_e=n(Zw,"P",{});var v_t=s(J_e);Qar=r(v_t,"Instantiates one of the base model classes of the library from a configuration."),v_t.forEach(t),War=i(Zw),jd=n(Zw,"P",{});var cZ=s(jd);Har=r(cZ,`Note:
Loading a model from its configuration file does `),Y_e=n(cZ,"STRONG",{});var F_t=s(Y_e);Uar=r(F_t,"not"),F_t.forEach(t),Jar=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(cZ,"A",{href:!0});var T_t=s(cz);Yar=r(T_t,"from_pretrained()"),T_t.forEach(t),Kar=r(cZ," to load the model weights."),cZ.forEach(t),Zar=i(Zw),T(x0.$$.fragment,Zw),Zw.forEach(t),enr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(DL.$$.fragment,cl),onr=i(cl),K_e=n(cl,"P",{});var M_t=s(K_e);rnr=r(M_t,"Instantiate one of the base model classes of the library from a pretrained model."),M_t.forEach(t),tnr=i(cl),Ka=n(cl,"P",{});var eA=s(Ka);anr=r(eA,"The model class to instantiate is selected based on the "),Z_e=n(eA,"CODE",{});var E_t=s(Z_e);nnr=r(E_t,"model_type"),E_t.forEach(t),snr=r(eA,` property of the config object (either
passed as an argument or loaded from `),e2e=n(eA,"CODE",{});var C_t=s(e2e);lnr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),inr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(eA,"CODE",{});var w_t=s(o2e);dnr=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),cnr=r(eA,":"),eA.forEach(t),fnr=i(cl),j=n(cl,"UL",{});var D=s(j);$0=n(D,"LI",{});var C$e=s($0);r2e=n(C$e,"STRONG",{});var A_t=s(r2e);mnr=r(A_t,"albert"),A_t.forEach(t),gnr=r(C$e," \u2014 "),fz=n(C$e,"A",{href:!0});var y_t=s(fz);hnr=r(y_t,"TFAlbertModel"),y_t.forEach(t),pnr=r(C$e," (ALBERT model)"),C$e.forEach(t),unr=i(D),k0=n(D,"LI",{});var w$e=s(k0);t2e=n(w$e,"STRONG",{});var L_t=s(t2e);_nr=r(L_t,"bart"),L_t.forEach(t),bnr=r(w$e," \u2014 "),mz=n(w$e,"A",{href:!0});var x_t=s(mz);vnr=r(x_t,"TFBartModel"),x_t.forEach(t),Fnr=r(w$e," (BART model)"),w$e.forEach(t),Tnr=i(D),S0=n(D,"LI",{});var A$e=s(S0);a2e=n(A$e,"STRONG",{});var $_t=s(a2e);Mnr=r($_t,"bert"),$_t.forEach(t),Enr=r(A$e," \u2014 "),gz=n(A$e,"A",{href:!0});var k_t=s(gz);Cnr=r(k_t,"TFBertModel"),k_t.forEach(t),wnr=r(A$e," (BERT model)"),A$e.forEach(t),Anr=i(D),R0=n(D,"LI",{});var y$e=s(R0);n2e=n(y$e,"STRONG",{});var S_t=s(n2e);ynr=r(S_t,"blenderbot"),S_t.forEach(t),Lnr=r(y$e," \u2014 "),hz=n(y$e,"A",{href:!0});var R_t=s(hz);xnr=r(R_t,"TFBlenderbotModel"),R_t.forEach(t),$nr=r(y$e," (Blenderbot model)"),y$e.forEach(t),knr=i(D),B0=n(D,"LI",{});var L$e=s(B0);s2e=n(L$e,"STRONG",{});var B_t=s(s2e);Snr=r(B_t,"blenderbot-small"),B_t.forEach(t),Rnr=r(L$e," \u2014 "),pz=n(L$e,"A",{href:!0});var P_t=s(pz);Bnr=r(P_t,"TFBlenderbotSmallModel"),P_t.forEach(t),Pnr=r(L$e," (BlenderbotSmall model)"),L$e.forEach(t),Inr=i(D),P0=n(D,"LI",{});var x$e=s(P0);l2e=n(x$e,"STRONG",{});var I_t=s(l2e);qnr=r(I_t,"camembert"),I_t.forEach(t),Nnr=r(x$e," \u2014 "),uz=n(x$e,"A",{href:!0});var q_t=s(uz);jnr=r(q_t,"TFCamembertModel"),q_t.forEach(t),Dnr=r(x$e," (CamemBERT model)"),x$e.forEach(t),Gnr=i(D),I0=n(D,"LI",{});var $$e=s(I0);i2e=n($$e,"STRONG",{});var N_t=s(i2e);Onr=r(N_t,"clip"),N_t.forEach(t),Vnr=r($$e," \u2014 "),_z=n($$e,"A",{href:!0});var j_t=s(_z);Xnr=r(j_t,"TFCLIPModel"),j_t.forEach(t),znr=r($$e," (CLIP model)"),$$e.forEach(t),Qnr=i(D),q0=n(D,"LI",{});var k$e=s(q0);d2e=n(k$e,"STRONG",{});var D_t=s(d2e);Wnr=r(D_t,"convbert"),D_t.forEach(t),Hnr=r(k$e," \u2014 "),bz=n(k$e,"A",{href:!0});var G_t=s(bz);Unr=r(G_t,"TFConvBertModel"),G_t.forEach(t),Jnr=r(k$e," (ConvBERT model)"),k$e.forEach(t),Ynr=i(D),N0=n(D,"LI",{});var S$e=s(N0);c2e=n(S$e,"STRONG",{});var O_t=s(c2e);Knr=r(O_t,"convnext"),O_t.forEach(t),Znr=r(S$e," \u2014 "),vz=n(S$e,"A",{href:!0});var V_t=s(vz);esr=r(V_t,"TFConvNextModel"),V_t.forEach(t),osr=r(S$e," (ConvNext model)"),S$e.forEach(t),rsr=i(D),j0=n(D,"LI",{});var R$e=s(j0);f2e=n(R$e,"STRONG",{});var X_t=s(f2e);tsr=r(X_t,"ctrl"),X_t.forEach(t),asr=r(R$e," \u2014 "),Fz=n(R$e,"A",{href:!0});var z_t=s(Fz);nsr=r(z_t,"TFCTRLModel"),z_t.forEach(t),ssr=r(R$e," (CTRL model)"),R$e.forEach(t),lsr=i(D),D0=n(D,"LI",{});var B$e=s(D0);m2e=n(B$e,"STRONG",{});var Q_t=s(m2e);isr=r(Q_t,"data2vec-vision"),Q_t.forEach(t),dsr=r(B$e," \u2014 "),Tz=n(B$e,"A",{href:!0});var W_t=s(Tz);csr=r(W_t,"TFData2VecVisionModel"),W_t.forEach(t),fsr=r(B$e," (Data2VecVision model)"),B$e.forEach(t),msr=i(D),G0=n(D,"LI",{});var P$e=s(G0);g2e=n(P$e,"STRONG",{});var H_t=s(g2e);gsr=r(H_t,"deberta"),H_t.forEach(t),hsr=r(P$e," \u2014 "),Mz=n(P$e,"A",{href:!0});var U_t=s(Mz);psr=r(U_t,"TFDebertaModel"),U_t.forEach(t),usr=r(P$e," (DeBERTa model)"),P$e.forEach(t),_sr=i(D),O0=n(D,"LI",{});var I$e=s(O0);h2e=n(I$e,"STRONG",{});var J_t=s(h2e);bsr=r(J_t,"deberta-v2"),J_t.forEach(t),vsr=r(I$e," \u2014 "),Ez=n(I$e,"A",{href:!0});var Y_t=s(Ez);Fsr=r(Y_t,"TFDebertaV2Model"),Y_t.forEach(t),Tsr=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),Msr=i(D),V0=n(D,"LI",{});var q$e=s(V0);p2e=n(q$e,"STRONG",{});var K_t=s(p2e);Esr=r(K_t,"distilbert"),K_t.forEach(t),Csr=r(q$e," \u2014 "),Cz=n(q$e,"A",{href:!0});var Z_t=s(Cz);wsr=r(Z_t,"TFDistilBertModel"),Z_t.forEach(t),Asr=r(q$e," (DistilBERT model)"),q$e.forEach(t),ysr=i(D),X0=n(D,"LI",{});var N$e=s(X0);u2e=n(N$e,"STRONG",{});var e2t=s(u2e);Lsr=r(e2t,"dpr"),e2t.forEach(t),xsr=r(N$e," \u2014 "),wz=n(N$e,"A",{href:!0});var o2t=s(wz);$sr=r(o2t,"TFDPRQuestionEncoder"),o2t.forEach(t),ksr=r(N$e," (DPR model)"),N$e.forEach(t),Ssr=i(D),z0=n(D,"LI",{});var j$e=s(z0);_2e=n(j$e,"STRONG",{});var r2t=s(_2e);Rsr=r(r2t,"electra"),r2t.forEach(t),Bsr=r(j$e," \u2014 "),Az=n(j$e,"A",{href:!0});var t2t=s(Az);Psr=r(t2t,"TFElectraModel"),t2t.forEach(t),Isr=r(j$e," (ELECTRA model)"),j$e.forEach(t),qsr=i(D),Q0=n(D,"LI",{});var D$e=s(Q0);b2e=n(D$e,"STRONG",{});var a2t=s(b2e);Nsr=r(a2t,"flaubert"),a2t.forEach(t),jsr=r(D$e," \u2014 "),yz=n(D$e,"A",{href:!0});var n2t=s(yz);Dsr=r(n2t,"TFFlaubertModel"),n2t.forEach(t),Gsr=r(D$e," (FlauBERT model)"),D$e.forEach(t),Osr=i(D),Bs=n(D,"LI",{});var _$=s(Bs);v2e=n(_$,"STRONG",{});var s2t=s(v2e);Vsr=r(s2t,"funnel"),s2t.forEach(t),Xsr=r(_$," \u2014 "),Lz=n(_$,"A",{href:!0});var l2t=s(Lz);zsr=r(l2t,"TFFunnelModel"),l2t.forEach(t),Qsr=r(_$," or "),xz=n(_$,"A",{href:!0});var i2t=s(xz);Wsr=r(i2t,"TFFunnelBaseModel"),i2t.forEach(t),Hsr=r(_$," (Funnel Transformer model)"),_$.forEach(t),Usr=i(D),W0=n(D,"LI",{});var G$e=s(W0);F2e=n(G$e,"STRONG",{});var d2t=s(F2e);Jsr=r(d2t,"gpt2"),d2t.forEach(t),Ysr=r(G$e," \u2014 "),$z=n(G$e,"A",{href:!0});var c2t=s($z);Ksr=r(c2t,"TFGPT2Model"),c2t.forEach(t),Zsr=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),elr=i(D),H0=n(D,"LI",{});var O$e=s(H0);T2e=n(O$e,"STRONG",{});var f2t=s(T2e);olr=r(f2t,"gptj"),f2t.forEach(t),rlr=r(O$e," \u2014 "),kz=n(O$e,"A",{href:!0});var m2t=s(kz);tlr=r(m2t,"TFGPTJModel"),m2t.forEach(t),alr=r(O$e," (GPT-J model)"),O$e.forEach(t),nlr=i(D),U0=n(D,"LI",{});var V$e=s(U0);M2e=n(V$e,"STRONG",{});var g2t=s(M2e);slr=r(g2t,"hubert"),g2t.forEach(t),llr=r(V$e," \u2014 "),Sz=n(V$e,"A",{href:!0});var h2t=s(Sz);ilr=r(h2t,"TFHubertModel"),h2t.forEach(t),dlr=r(V$e," (Hubert model)"),V$e.forEach(t),clr=i(D),J0=n(D,"LI",{});var X$e=s(J0);E2e=n(X$e,"STRONG",{});var p2t=s(E2e);flr=r(p2t,"layoutlm"),p2t.forEach(t),mlr=r(X$e," \u2014 "),Rz=n(X$e,"A",{href:!0});var u2t=s(Rz);glr=r(u2t,"TFLayoutLMModel"),u2t.forEach(t),hlr=r(X$e," (LayoutLM model)"),X$e.forEach(t),plr=i(D),Y0=n(D,"LI",{});var z$e=s(Y0);C2e=n(z$e,"STRONG",{});var _2t=s(C2e);ulr=r(_2t,"led"),_2t.forEach(t),_lr=r(z$e," \u2014 "),Bz=n(z$e,"A",{href:!0});var b2t=s(Bz);blr=r(b2t,"TFLEDModel"),b2t.forEach(t),vlr=r(z$e," (LED model)"),z$e.forEach(t),Flr=i(D),K0=n(D,"LI",{});var Q$e=s(K0);w2e=n(Q$e,"STRONG",{});var v2t=s(w2e);Tlr=r(v2t,"longformer"),v2t.forEach(t),Mlr=r(Q$e," \u2014 "),Pz=n(Q$e,"A",{href:!0});var F2t=s(Pz);Elr=r(F2t,"TFLongformerModel"),F2t.forEach(t),Clr=r(Q$e," (Longformer model)"),Q$e.forEach(t),wlr=i(D),Z0=n(D,"LI",{});var W$e=s(Z0);A2e=n(W$e,"STRONG",{});var T2t=s(A2e);Alr=r(T2t,"lxmert"),T2t.forEach(t),ylr=r(W$e," \u2014 "),Iz=n(W$e,"A",{href:!0});var M2t=s(Iz);Llr=r(M2t,"TFLxmertModel"),M2t.forEach(t),xlr=r(W$e," (LXMERT model)"),W$e.forEach(t),$lr=i(D),eT=n(D,"LI",{});var H$e=s(eT);y2e=n(H$e,"STRONG",{});var E2t=s(y2e);klr=r(E2t,"marian"),E2t.forEach(t),Slr=r(H$e," \u2014 "),qz=n(H$e,"A",{href:!0});var C2t=s(qz);Rlr=r(C2t,"TFMarianModel"),C2t.forEach(t),Blr=r(H$e," (Marian model)"),H$e.forEach(t),Plr=i(D),oT=n(D,"LI",{});var U$e=s(oT);L2e=n(U$e,"STRONG",{});var w2t=s(L2e);Ilr=r(w2t,"mbart"),w2t.forEach(t),qlr=r(U$e," \u2014 "),Nz=n(U$e,"A",{href:!0});var A2t=s(Nz);Nlr=r(A2t,"TFMBartModel"),A2t.forEach(t),jlr=r(U$e," (mBART model)"),U$e.forEach(t),Dlr=i(D),rT=n(D,"LI",{});var J$e=s(rT);x2e=n(J$e,"STRONG",{});var y2t=s(x2e);Glr=r(y2t,"mobilebert"),y2t.forEach(t),Olr=r(J$e," \u2014 "),jz=n(J$e,"A",{href:!0});var L2t=s(jz);Vlr=r(L2t,"TFMobileBertModel"),L2t.forEach(t),Xlr=r(J$e," (MobileBERT model)"),J$e.forEach(t),zlr=i(D),tT=n(D,"LI",{});var Y$e=s(tT);$2e=n(Y$e,"STRONG",{});var x2t=s($2e);Qlr=r(x2t,"mpnet"),x2t.forEach(t),Wlr=r(Y$e," \u2014 "),Dz=n(Y$e,"A",{href:!0});var $2t=s(Dz);Hlr=r($2t,"TFMPNetModel"),$2t.forEach(t),Ulr=r(Y$e," (MPNet model)"),Y$e.forEach(t),Jlr=i(D),aT=n(D,"LI",{});var K$e=s(aT);k2e=n(K$e,"STRONG",{});var k2t=s(k2e);Ylr=r(k2t,"mt5"),k2t.forEach(t),Klr=r(K$e," \u2014 "),Gz=n(K$e,"A",{href:!0});var S2t=s(Gz);Zlr=r(S2t,"TFMT5Model"),S2t.forEach(t),eir=r(K$e," (mT5 model)"),K$e.forEach(t),oir=i(D),nT=n(D,"LI",{});var Z$e=s(nT);S2e=n(Z$e,"STRONG",{});var R2t=s(S2e);rir=r(R2t,"openai-gpt"),R2t.forEach(t),tir=r(Z$e," \u2014 "),Oz=n(Z$e,"A",{href:!0});var B2t=s(Oz);air=r(B2t,"TFOpenAIGPTModel"),B2t.forEach(t),nir=r(Z$e," (OpenAI GPT model)"),Z$e.forEach(t),sir=i(D),sT=n(D,"LI",{});var eke=s(sT);R2e=n(eke,"STRONG",{});var P2t=s(R2e);lir=r(P2t,"pegasus"),P2t.forEach(t),iir=r(eke," \u2014 "),Vz=n(eke,"A",{href:!0});var I2t=s(Vz);dir=r(I2t,"TFPegasusModel"),I2t.forEach(t),cir=r(eke," (Pegasus model)"),eke.forEach(t),fir=i(D),lT=n(D,"LI",{});var oke=s(lT);B2e=n(oke,"STRONG",{});var q2t=s(B2e);mir=r(q2t,"rembert"),q2t.forEach(t),gir=r(oke," \u2014 "),Xz=n(oke,"A",{href:!0});var N2t=s(Xz);hir=r(N2t,"TFRemBertModel"),N2t.forEach(t),pir=r(oke," (RemBERT model)"),oke.forEach(t),uir=i(D),iT=n(D,"LI",{});var rke=s(iT);P2e=n(rke,"STRONG",{});var j2t=s(P2e);_ir=r(j2t,"roberta"),j2t.forEach(t),bir=r(rke," \u2014 "),zz=n(rke,"A",{href:!0});var D2t=s(zz);vir=r(D2t,"TFRobertaModel"),D2t.forEach(t),Fir=r(rke," (RoBERTa model)"),rke.forEach(t),Tir=i(D),dT=n(D,"LI",{});var tke=s(dT);I2e=n(tke,"STRONG",{});var G2t=s(I2e);Mir=r(G2t,"roformer"),G2t.forEach(t),Eir=r(tke," \u2014 "),Qz=n(tke,"A",{href:!0});var O2t=s(Qz);Cir=r(O2t,"TFRoFormerModel"),O2t.forEach(t),wir=r(tke," (RoFormer model)"),tke.forEach(t),Air=i(D),cT=n(D,"LI",{});var ake=s(cT);q2e=n(ake,"STRONG",{});var V2t=s(q2e);yir=r(V2t,"speech_to_text"),V2t.forEach(t),Lir=r(ake," \u2014 "),Wz=n(ake,"A",{href:!0});var X2t=s(Wz);xir=r(X2t,"TFSpeech2TextModel"),X2t.forEach(t),$ir=r(ake," (Speech2Text model)"),ake.forEach(t),kir=i(D),fT=n(D,"LI",{});var nke=s(fT);N2e=n(nke,"STRONG",{});var z2t=s(N2e);Sir=r(z2t,"t5"),z2t.forEach(t),Rir=r(nke," \u2014 "),Hz=n(nke,"A",{href:!0});var Q2t=s(Hz);Bir=r(Q2t,"TFT5Model"),Q2t.forEach(t),Pir=r(nke," (T5 model)"),nke.forEach(t),Iir=i(D),mT=n(D,"LI",{});var ske=s(mT);j2e=n(ske,"STRONG",{});var W2t=s(j2e);qir=r(W2t,"tapas"),W2t.forEach(t),Nir=r(ske," \u2014 "),Uz=n(ske,"A",{href:!0});var H2t=s(Uz);jir=r(H2t,"TFTapasModel"),H2t.forEach(t),Dir=r(ske," (TAPAS model)"),ske.forEach(t),Gir=i(D),gT=n(D,"LI",{});var lke=s(gT);D2e=n(lke,"STRONG",{});var U2t=s(D2e);Oir=r(U2t,"transfo-xl"),U2t.forEach(t),Vir=r(lke," \u2014 "),Jz=n(lke,"A",{href:!0});var J2t=s(Jz);Xir=r(J2t,"TFTransfoXLModel"),J2t.forEach(t),zir=r(lke," (Transformer-XL model)"),lke.forEach(t),Qir=i(D),hT=n(D,"LI",{});var ike=s(hT);G2e=n(ike,"STRONG",{});var Y2t=s(G2e);Wir=r(Y2t,"vit"),Y2t.forEach(t),Hir=r(ike," \u2014 "),Yz=n(ike,"A",{href:!0});var K2t=s(Yz);Uir=r(K2t,"TFViTModel"),K2t.forEach(t),Jir=r(ike," (ViT model)"),ike.forEach(t),Yir=i(D),pT=n(D,"LI",{});var dke=s(pT);O2e=n(dke,"STRONG",{});var Z2t=s(O2e);Kir=r(Z2t,"vit_mae"),Z2t.forEach(t),Zir=r(dke," \u2014 "),Kz=n(dke,"A",{href:!0});var e1t=s(Kz);edr=r(e1t,"TFViTMAEModel"),e1t.forEach(t),odr=r(dke," (ViTMAE model)"),dke.forEach(t),rdr=i(D),uT=n(D,"LI",{});var cke=s(uT);V2e=n(cke,"STRONG",{});var o1t=s(V2e);tdr=r(o1t,"wav2vec2"),o1t.forEach(t),adr=r(cke," \u2014 "),Zz=n(cke,"A",{href:!0});var r1t=s(Zz);ndr=r(r1t,"TFWav2Vec2Model"),r1t.forEach(t),sdr=r(cke," (Wav2Vec2 model)"),cke.forEach(t),ldr=i(D),_T=n(D,"LI",{});var fke=s(_T);X2e=n(fke,"STRONG",{});var t1t=s(X2e);idr=r(t1t,"xlm"),t1t.forEach(t),ddr=r(fke," \u2014 "),eQ=n(fke,"A",{href:!0});var a1t=s(eQ);cdr=r(a1t,"TFXLMModel"),a1t.forEach(t),fdr=r(fke," (XLM model)"),fke.forEach(t),mdr=i(D),bT=n(D,"LI",{});var mke=s(bT);z2e=n(mke,"STRONG",{});var n1t=s(z2e);gdr=r(n1t,"xlm-roberta"),n1t.forEach(t),hdr=r(mke," \u2014 "),oQ=n(mke,"A",{href:!0});var s1t=s(oQ);pdr=r(s1t,"TFXLMRobertaModel"),s1t.forEach(t),udr=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),_dr=i(D),vT=n(D,"LI",{});var gke=s(vT);Q2e=n(gke,"STRONG",{});var l1t=s(Q2e);bdr=r(l1t,"xlnet"),l1t.forEach(t),vdr=r(gke," \u2014 "),rQ=n(gke,"A",{href:!0});var i1t=s(rQ);Fdr=r(i1t,"TFXLNetModel"),i1t.forEach(t),Tdr=r(gke," (XLNet model)"),gke.forEach(t),D.forEach(t),Mdr=i(cl),T(FT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),mqe=i(f),Dd=n(f,"H2",{class:!0});var bje=s(Dd);TT=n(bje,"A",{id:!0,class:!0,href:!0});var d1t=s(TT);W2e=n(d1t,"SPAN",{});var c1t=s(W2e);T(GL.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),Edr=i(bje),H2e=n(bje,"SPAN",{});var f1t=s(H2e);Cdr=r(f1t,"TFAutoModelForPreTraining"),f1t.forEach(t),bje.forEach(t),gqe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(OL.$$.fragment,fl),wdr=i(fl),Gd=n(fl,"P",{});var fZ=s(Gd);Adr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=n(fZ,"A",{href:!0});var m1t=s(tQ);ydr=r(m1t,"from_pretrained()"),m1t.forEach(t),Ldr=r(fZ," class method or the "),aQ=n(fZ,"A",{href:!0});var g1t=s(aQ);xdr=r(g1t,"from_config()"),g1t.forEach(t),$dr=r(fZ,` class
method.`),fZ.forEach(t),kdr=i(fl),VL=n(fl,"P",{});var vje=s(VL);Sdr=r(vje,"This class cannot be instantiated directly using "),U2e=n(vje,"CODE",{});var h1t=s(U2e);Rdr=r(h1t,"__init__()"),h1t.forEach(t),Bdr=r(vje," (throws an error)."),vje.forEach(t),Pdr=i(fl),At=n(fl,"DIV",{class:!0});var oA=s(At);T(XL.$$.fragment,oA),Idr=i(oA),J2e=n(oA,"P",{});var p1t=s(J2e);qdr=r(p1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),p1t.forEach(t),Ndr=i(oA),Od=n(oA,"P",{});var mZ=s(Od);jdr=r(mZ,`Note:
Loading a model from its configuration file does `),Y2e=n(mZ,"STRONG",{});var u1t=s(Y2e);Ddr=r(u1t,"not"),u1t.forEach(t),Gdr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(mZ,"A",{href:!0});var _1t=s(nQ);Odr=r(_1t,"from_pretrained()"),_1t.forEach(t),Vdr=r(mZ," to load the model weights."),mZ.forEach(t),Xdr=i(oA),T(MT.$$.fragment,oA),oA.forEach(t),zdr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(zL.$$.fragment,ml),Qdr=i(ml),K2e=n(ml,"P",{});var b1t=s(K2e);Wdr=r(b1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b1t.forEach(t),Hdr=i(ml),Za=n(ml,"P",{});var rA=s(Za);Udr=r(rA,"The model class to instantiate is selected based on the "),Z2e=n(rA,"CODE",{});var v1t=s(Z2e);Jdr=r(v1t,"model_type"),v1t.forEach(t),Ydr=r(rA,` property of the config object (either
passed as an argument or loaded from `),e1e=n(rA,"CODE",{});var F1t=s(e1e);Kdr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),Zdr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(rA,"CODE",{});var T1t=s(o1e);ecr=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),ocr=r(rA,":"),rA.forEach(t),rcr=i(ml),se=n(ml,"UL",{});var le=s(se);ET=n(le,"LI",{});var hke=s(ET);r1e=n(hke,"STRONG",{});var M1t=s(r1e);tcr=r(M1t,"albert"),M1t.forEach(t),acr=r(hke," \u2014 "),sQ=n(hke,"A",{href:!0});var E1t=s(sQ);ncr=r(E1t,"TFAlbertForPreTraining"),E1t.forEach(t),scr=r(hke," (ALBERT model)"),hke.forEach(t),lcr=i(le),CT=n(le,"LI",{});var pke=s(CT);t1e=n(pke,"STRONG",{});var C1t=s(t1e);icr=r(C1t,"bart"),C1t.forEach(t),dcr=r(pke," \u2014 "),lQ=n(pke,"A",{href:!0});var w1t=s(lQ);ccr=r(w1t,"TFBartForConditionalGeneration"),w1t.forEach(t),fcr=r(pke," (BART model)"),pke.forEach(t),mcr=i(le),wT=n(le,"LI",{});var uke=s(wT);a1e=n(uke,"STRONG",{});var A1t=s(a1e);gcr=r(A1t,"bert"),A1t.forEach(t),hcr=r(uke," \u2014 "),iQ=n(uke,"A",{href:!0});var y1t=s(iQ);pcr=r(y1t,"TFBertForPreTraining"),y1t.forEach(t),ucr=r(uke," (BERT model)"),uke.forEach(t),_cr=i(le),AT=n(le,"LI",{});var _ke=s(AT);n1e=n(_ke,"STRONG",{});var L1t=s(n1e);bcr=r(L1t,"camembert"),L1t.forEach(t),vcr=r(_ke," \u2014 "),dQ=n(_ke,"A",{href:!0});var x1t=s(dQ);Fcr=r(x1t,"TFCamembertForMaskedLM"),x1t.forEach(t),Tcr=r(_ke," (CamemBERT model)"),_ke.forEach(t),Mcr=i(le),yT=n(le,"LI",{});var bke=s(yT);s1e=n(bke,"STRONG",{});var $1t=s(s1e);Ecr=r($1t,"ctrl"),$1t.forEach(t),Ccr=r(bke," \u2014 "),cQ=n(bke,"A",{href:!0});var k1t=s(cQ);wcr=r(k1t,"TFCTRLLMHeadModel"),k1t.forEach(t),Acr=r(bke," (CTRL model)"),bke.forEach(t),ycr=i(le),LT=n(le,"LI",{});var vke=s(LT);l1e=n(vke,"STRONG",{});var S1t=s(l1e);Lcr=r(S1t,"distilbert"),S1t.forEach(t),xcr=r(vke," \u2014 "),fQ=n(vke,"A",{href:!0});var R1t=s(fQ);$cr=r(R1t,"TFDistilBertForMaskedLM"),R1t.forEach(t),kcr=r(vke," (DistilBERT model)"),vke.forEach(t),Scr=i(le),xT=n(le,"LI",{});var Fke=s(xT);i1e=n(Fke,"STRONG",{});var B1t=s(i1e);Rcr=r(B1t,"electra"),B1t.forEach(t),Bcr=r(Fke," \u2014 "),mQ=n(Fke,"A",{href:!0});var P1t=s(mQ);Pcr=r(P1t,"TFElectraForPreTraining"),P1t.forEach(t),Icr=r(Fke," (ELECTRA model)"),Fke.forEach(t),qcr=i(le),$T=n(le,"LI",{});var Tke=s($T);d1e=n(Tke,"STRONG",{});var I1t=s(d1e);Ncr=r(I1t,"flaubert"),I1t.forEach(t),jcr=r(Tke," \u2014 "),gQ=n(Tke,"A",{href:!0});var q1t=s(gQ);Dcr=r(q1t,"TFFlaubertWithLMHeadModel"),q1t.forEach(t),Gcr=r(Tke," (FlauBERT model)"),Tke.forEach(t),Ocr=i(le),kT=n(le,"LI",{});var Mke=s(kT);c1e=n(Mke,"STRONG",{});var N1t=s(c1e);Vcr=r(N1t,"funnel"),N1t.forEach(t),Xcr=r(Mke," \u2014 "),hQ=n(Mke,"A",{href:!0});var j1t=s(hQ);zcr=r(j1t,"TFFunnelForPreTraining"),j1t.forEach(t),Qcr=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),Wcr=i(le),ST=n(le,"LI",{});var Eke=s(ST);f1e=n(Eke,"STRONG",{});var D1t=s(f1e);Hcr=r(D1t,"gpt2"),D1t.forEach(t),Ucr=r(Eke," \u2014 "),pQ=n(Eke,"A",{href:!0});var G1t=s(pQ);Jcr=r(G1t,"TFGPT2LMHeadModel"),G1t.forEach(t),Ycr=r(Eke," (OpenAI GPT-2 model)"),Eke.forEach(t),Kcr=i(le),RT=n(le,"LI",{});var Cke=s(RT);m1e=n(Cke,"STRONG",{});var O1t=s(m1e);Zcr=r(O1t,"layoutlm"),O1t.forEach(t),efr=r(Cke," \u2014 "),uQ=n(Cke,"A",{href:!0});var V1t=s(uQ);ofr=r(V1t,"TFLayoutLMForMaskedLM"),V1t.forEach(t),rfr=r(Cke," (LayoutLM model)"),Cke.forEach(t),tfr=i(le),BT=n(le,"LI",{});var wke=s(BT);g1e=n(wke,"STRONG",{});var X1t=s(g1e);afr=r(X1t,"lxmert"),X1t.forEach(t),nfr=r(wke," \u2014 "),_Q=n(wke,"A",{href:!0});var z1t=s(_Q);sfr=r(z1t,"TFLxmertForPreTraining"),z1t.forEach(t),lfr=r(wke," (LXMERT model)"),wke.forEach(t),ifr=i(le),PT=n(le,"LI",{});var Ake=s(PT);h1e=n(Ake,"STRONG",{});var Q1t=s(h1e);dfr=r(Q1t,"mobilebert"),Q1t.forEach(t),cfr=r(Ake," \u2014 "),bQ=n(Ake,"A",{href:!0});var W1t=s(bQ);ffr=r(W1t,"TFMobileBertForPreTraining"),W1t.forEach(t),mfr=r(Ake," (MobileBERT model)"),Ake.forEach(t),gfr=i(le),IT=n(le,"LI",{});var yke=s(IT);p1e=n(yke,"STRONG",{});var H1t=s(p1e);hfr=r(H1t,"mpnet"),H1t.forEach(t),pfr=r(yke," \u2014 "),vQ=n(yke,"A",{href:!0});var U1t=s(vQ);ufr=r(U1t,"TFMPNetForMaskedLM"),U1t.forEach(t),_fr=r(yke," (MPNet model)"),yke.forEach(t),bfr=i(le),qT=n(le,"LI",{});var Lke=s(qT);u1e=n(Lke,"STRONG",{});var J1t=s(u1e);vfr=r(J1t,"openai-gpt"),J1t.forEach(t),Ffr=r(Lke," \u2014 "),FQ=n(Lke,"A",{href:!0});var Y1t=s(FQ);Tfr=r(Y1t,"TFOpenAIGPTLMHeadModel"),Y1t.forEach(t),Mfr=r(Lke," (OpenAI GPT model)"),Lke.forEach(t),Efr=i(le),NT=n(le,"LI",{});var xke=s(NT);_1e=n(xke,"STRONG",{});var K1t=s(_1e);Cfr=r(K1t,"roberta"),K1t.forEach(t),wfr=r(xke," \u2014 "),TQ=n(xke,"A",{href:!0});var Z1t=s(TQ);Afr=r(Z1t,"TFRobertaForMaskedLM"),Z1t.forEach(t),yfr=r(xke," (RoBERTa model)"),xke.forEach(t),Lfr=i(le),jT=n(le,"LI",{});var $ke=s(jT);b1e=n($ke,"STRONG",{});var ebt=s(b1e);xfr=r(ebt,"t5"),ebt.forEach(t),$fr=r($ke," \u2014 "),MQ=n($ke,"A",{href:!0});var obt=s(MQ);kfr=r(obt,"TFT5ForConditionalGeneration"),obt.forEach(t),Sfr=r($ke," (T5 model)"),$ke.forEach(t),Rfr=i(le),DT=n(le,"LI",{});var kke=s(DT);v1e=n(kke,"STRONG",{});var rbt=s(v1e);Bfr=r(rbt,"tapas"),rbt.forEach(t),Pfr=r(kke," \u2014 "),EQ=n(kke,"A",{href:!0});var tbt=s(EQ);Ifr=r(tbt,"TFTapasForMaskedLM"),tbt.forEach(t),qfr=r(kke," (TAPAS model)"),kke.forEach(t),Nfr=i(le),GT=n(le,"LI",{});var Ske=s(GT);F1e=n(Ske,"STRONG",{});var abt=s(F1e);jfr=r(abt,"transfo-xl"),abt.forEach(t),Dfr=r(Ske," \u2014 "),CQ=n(Ske,"A",{href:!0});var nbt=s(CQ);Gfr=r(nbt,"TFTransfoXLLMHeadModel"),nbt.forEach(t),Ofr=r(Ske," (Transformer-XL model)"),Ske.forEach(t),Vfr=i(le),OT=n(le,"LI",{});var Rke=s(OT);T1e=n(Rke,"STRONG",{});var sbt=s(T1e);Xfr=r(sbt,"vit_mae"),sbt.forEach(t),zfr=r(Rke," \u2014 "),wQ=n(Rke,"A",{href:!0});var lbt=s(wQ);Qfr=r(lbt,"TFViTMAEForPreTraining"),lbt.forEach(t),Wfr=r(Rke," (ViTMAE model)"),Rke.forEach(t),Hfr=i(le),VT=n(le,"LI",{});var Bke=s(VT);M1e=n(Bke,"STRONG",{});var ibt=s(M1e);Ufr=r(ibt,"xlm"),ibt.forEach(t),Jfr=r(Bke," \u2014 "),AQ=n(Bke,"A",{href:!0});var dbt=s(AQ);Yfr=r(dbt,"TFXLMWithLMHeadModel"),dbt.forEach(t),Kfr=r(Bke," (XLM model)"),Bke.forEach(t),Zfr=i(le),XT=n(le,"LI",{});var Pke=s(XT);E1e=n(Pke,"STRONG",{});var cbt=s(E1e);emr=r(cbt,"xlm-roberta"),cbt.forEach(t),omr=r(Pke," \u2014 "),yQ=n(Pke,"A",{href:!0});var fbt=s(yQ);rmr=r(fbt,"TFXLMRobertaForMaskedLM"),fbt.forEach(t),tmr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),amr=i(le),zT=n(le,"LI",{});var Ike=s(zT);C1e=n(Ike,"STRONG",{});var mbt=s(C1e);nmr=r(mbt,"xlnet"),mbt.forEach(t),smr=r(Ike," \u2014 "),LQ=n(Ike,"A",{href:!0});var gbt=s(LQ);lmr=r(gbt,"TFXLNetLMHeadModel"),gbt.forEach(t),imr=r(Ike," (XLNet model)"),Ike.forEach(t),le.forEach(t),dmr=i(ml),T(QT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),hqe=i(f),Vd=n(f,"H2",{class:!0});var Fje=s(Vd);WT=n(Fje,"A",{id:!0,class:!0,href:!0});var hbt=s(WT);w1e=n(hbt,"SPAN",{});var pbt=s(w1e);T(QL.$$.fragment,pbt),pbt.forEach(t),hbt.forEach(t),cmr=i(Fje),A1e=n(Fje,"SPAN",{});var ubt=s(A1e);fmr=r(ubt,"TFAutoModelForCausalLM"),ubt.forEach(t),Fje.forEach(t),pqe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(WL.$$.fragment,gl),mmr=i(gl),Xd=n(gl,"P",{});var gZ=s(Xd);gmr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=n(gZ,"A",{href:!0});var _bt=s(xQ);hmr=r(_bt,"from_pretrained()"),_bt.forEach(t),pmr=r(gZ," class method or the "),$Q=n(gZ,"A",{href:!0});var bbt=s($Q);umr=r(bbt,"from_config()"),bbt.forEach(t),_mr=r(gZ,` class
method.`),gZ.forEach(t),bmr=i(gl),HL=n(gl,"P",{});var Tje=s(HL);vmr=r(Tje,"This class cannot be instantiated directly using "),y1e=n(Tje,"CODE",{});var vbt=s(y1e);Fmr=r(vbt,"__init__()"),vbt.forEach(t),Tmr=r(Tje," (throws an error)."),Tje.forEach(t),Mmr=i(gl),yt=n(gl,"DIV",{class:!0});var tA=s(yt);T(UL.$$.fragment,tA),Emr=i(tA),L1e=n(tA,"P",{});var Fbt=s(L1e);Cmr=r(Fbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fbt.forEach(t),wmr=i(tA),zd=n(tA,"P",{});var hZ=s(zd);Amr=r(hZ,`Note:
Loading a model from its configuration file does `),x1e=n(hZ,"STRONG",{});var Tbt=s(x1e);ymr=r(Tbt,"not"),Tbt.forEach(t),Lmr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(hZ,"A",{href:!0});var Mbt=s(kQ);xmr=r(Mbt,"from_pretrained()"),Mbt.forEach(t),$mr=r(hZ," to load the model weights."),hZ.forEach(t),kmr=i(tA),T(HT.$$.fragment,tA),tA.forEach(t),Smr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(JL.$$.fragment,hl),Rmr=i(hl),$1e=n(hl,"P",{});var Ebt=s($1e);Bmr=r(Ebt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ebt.forEach(t),Pmr=i(hl),en=n(hl,"P",{});var aA=s(en);Imr=r(aA,"The model class to instantiate is selected based on the "),k1e=n(aA,"CODE",{});var Cbt=s(k1e);qmr=r(Cbt,"model_type"),Cbt.forEach(t),Nmr=r(aA,` property of the config object (either
passed as an argument or loaded from `),S1e=n(aA,"CODE",{});var wbt=s(S1e);jmr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Dmr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(aA,"CODE",{});var Abt=s(R1e);Gmr=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),Omr=r(aA,":"),aA.forEach(t),Vmr=i(hl),Me=n(hl,"UL",{});var Ce=s(Me);UT=n(Ce,"LI",{});var qke=s(UT);B1e=n(qke,"STRONG",{});var ybt=s(B1e);Xmr=r(ybt,"bert"),ybt.forEach(t),zmr=r(qke," \u2014 "),SQ=n(qke,"A",{href:!0});var Lbt=s(SQ);Qmr=r(Lbt,"TFBertLMHeadModel"),Lbt.forEach(t),Wmr=r(qke," (BERT model)"),qke.forEach(t),Hmr=i(Ce),JT=n(Ce,"LI",{});var Nke=s(JT);P1e=n(Nke,"STRONG",{});var xbt=s(P1e);Umr=r(xbt,"camembert"),xbt.forEach(t),Jmr=r(Nke," \u2014 "),RQ=n(Nke,"A",{href:!0});var $bt=s(RQ);Ymr=r($bt,"TFCamembertForCausalLM"),$bt.forEach(t),Kmr=r(Nke," (CamemBERT model)"),Nke.forEach(t),Zmr=i(Ce),YT=n(Ce,"LI",{});var jke=s(YT);I1e=n(jke,"STRONG",{});var kbt=s(I1e);egr=r(kbt,"ctrl"),kbt.forEach(t),ogr=r(jke," \u2014 "),BQ=n(jke,"A",{href:!0});var Sbt=s(BQ);rgr=r(Sbt,"TFCTRLLMHeadModel"),Sbt.forEach(t),tgr=r(jke," (CTRL model)"),jke.forEach(t),agr=i(Ce),KT=n(Ce,"LI",{});var Dke=s(KT);q1e=n(Dke,"STRONG",{});var Rbt=s(q1e);ngr=r(Rbt,"gpt2"),Rbt.forEach(t),sgr=r(Dke," \u2014 "),PQ=n(Dke,"A",{href:!0});var Bbt=s(PQ);lgr=r(Bbt,"TFGPT2LMHeadModel"),Bbt.forEach(t),igr=r(Dke," (OpenAI GPT-2 model)"),Dke.forEach(t),dgr=i(Ce),ZT=n(Ce,"LI",{});var Gke=s(ZT);N1e=n(Gke,"STRONG",{});var Pbt=s(N1e);cgr=r(Pbt,"gptj"),Pbt.forEach(t),fgr=r(Gke," \u2014 "),IQ=n(Gke,"A",{href:!0});var Ibt=s(IQ);mgr=r(Ibt,"TFGPTJForCausalLM"),Ibt.forEach(t),ggr=r(Gke," (GPT-J model)"),Gke.forEach(t),hgr=i(Ce),e7=n(Ce,"LI",{});var Oke=s(e7);j1e=n(Oke,"STRONG",{});var qbt=s(j1e);pgr=r(qbt,"openai-gpt"),qbt.forEach(t),ugr=r(Oke," \u2014 "),qQ=n(Oke,"A",{href:!0});var Nbt=s(qQ);_gr=r(Nbt,"TFOpenAIGPTLMHeadModel"),Nbt.forEach(t),bgr=r(Oke," (OpenAI GPT model)"),Oke.forEach(t),vgr=i(Ce),o7=n(Ce,"LI",{});var Vke=s(o7);D1e=n(Vke,"STRONG",{});var jbt=s(D1e);Fgr=r(jbt,"rembert"),jbt.forEach(t),Tgr=r(Vke," \u2014 "),NQ=n(Vke,"A",{href:!0});var Dbt=s(NQ);Mgr=r(Dbt,"TFRemBertForCausalLM"),Dbt.forEach(t),Egr=r(Vke," (RemBERT model)"),Vke.forEach(t),Cgr=i(Ce),r7=n(Ce,"LI",{});var Xke=s(r7);G1e=n(Xke,"STRONG",{});var Gbt=s(G1e);wgr=r(Gbt,"roberta"),Gbt.forEach(t),Agr=r(Xke," \u2014 "),jQ=n(Xke,"A",{href:!0});var Obt=s(jQ);ygr=r(Obt,"TFRobertaForCausalLM"),Obt.forEach(t),Lgr=r(Xke," (RoBERTa model)"),Xke.forEach(t),xgr=i(Ce),t7=n(Ce,"LI",{});var zke=s(t7);O1e=n(zke,"STRONG",{});var Vbt=s(O1e);$gr=r(Vbt,"roformer"),Vbt.forEach(t),kgr=r(zke," \u2014 "),DQ=n(zke,"A",{href:!0});var Xbt=s(DQ);Sgr=r(Xbt,"TFRoFormerForCausalLM"),Xbt.forEach(t),Rgr=r(zke," (RoFormer model)"),zke.forEach(t),Bgr=i(Ce),a7=n(Ce,"LI",{});var Qke=s(a7);V1e=n(Qke,"STRONG",{});var zbt=s(V1e);Pgr=r(zbt,"transfo-xl"),zbt.forEach(t),Igr=r(Qke," \u2014 "),GQ=n(Qke,"A",{href:!0});var Qbt=s(GQ);qgr=r(Qbt,"TFTransfoXLLMHeadModel"),Qbt.forEach(t),Ngr=r(Qke," (Transformer-XL model)"),Qke.forEach(t),jgr=i(Ce),n7=n(Ce,"LI",{});var Wke=s(n7);X1e=n(Wke,"STRONG",{});var Wbt=s(X1e);Dgr=r(Wbt,"xlm"),Wbt.forEach(t),Ggr=r(Wke," \u2014 "),OQ=n(Wke,"A",{href:!0});var Hbt=s(OQ);Ogr=r(Hbt,"TFXLMWithLMHeadModel"),Hbt.forEach(t),Vgr=r(Wke," (XLM model)"),Wke.forEach(t),Xgr=i(Ce),s7=n(Ce,"LI",{});var Hke=s(s7);z1e=n(Hke,"STRONG",{});var Ubt=s(z1e);zgr=r(Ubt,"xlnet"),Ubt.forEach(t),Qgr=r(Hke," \u2014 "),VQ=n(Hke,"A",{href:!0});var Jbt=s(VQ);Wgr=r(Jbt,"TFXLNetLMHeadModel"),Jbt.forEach(t),Hgr=r(Hke," (XLNet model)"),Hke.forEach(t),Ce.forEach(t),Ugr=i(hl),T(l7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),uqe=i(f),Qd=n(f,"H2",{class:!0});var Mje=s(Qd);i7=n(Mje,"A",{id:!0,class:!0,href:!0});var Ybt=s(i7);Q1e=n(Ybt,"SPAN",{});var Kbt=s(Q1e);T(YL.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),Jgr=i(Mje),W1e=n(Mje,"SPAN",{});var Zbt=s(W1e);Ygr=r(Zbt,"TFAutoModelForImageClassification"),Zbt.forEach(t),Mje.forEach(t),_qe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(KL.$$.fragment,pl),Kgr=i(pl),Wd=n(pl,"P",{});var pZ=s(Wd);Zgr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=n(pZ,"A",{href:!0});var e5t=s(XQ);ehr=r(e5t,"from_pretrained()"),e5t.forEach(t),ohr=r(pZ," class method or the "),zQ=n(pZ,"A",{href:!0});var o5t=s(zQ);rhr=r(o5t,"from_config()"),o5t.forEach(t),thr=r(pZ,` class
method.`),pZ.forEach(t),ahr=i(pl),ZL=n(pl,"P",{});var Eje=s(ZL);nhr=r(Eje,"This class cannot be instantiated directly using "),H1e=n(Eje,"CODE",{});var r5t=s(H1e);shr=r(r5t,"__init__()"),r5t.forEach(t),lhr=r(Eje," (throws an error)."),Eje.forEach(t),ihr=i(pl),Lt=n(pl,"DIV",{class:!0});var nA=s(Lt);T(e8.$$.fragment,nA),dhr=i(nA),U1e=n(nA,"P",{});var t5t=s(U1e);chr=r(t5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t5t.forEach(t),fhr=i(nA),Hd=n(nA,"P",{});var uZ=s(Hd);mhr=r(uZ,`Note:
Loading a model from its configuration file does `),J1e=n(uZ,"STRONG",{});var a5t=s(J1e);ghr=r(a5t,"not"),a5t.forEach(t),hhr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(uZ,"A",{href:!0});var n5t=s(QQ);phr=r(n5t,"from_pretrained()"),n5t.forEach(t),uhr=r(uZ," to load the model weights."),uZ.forEach(t),_hr=i(nA),T(d7.$$.fragment,nA),nA.forEach(t),bhr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(o8.$$.fragment,ul),vhr=i(ul),Y1e=n(ul,"P",{});var s5t=s(Y1e);Fhr=r(s5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s5t.forEach(t),Thr=i(ul),on=n(ul,"P",{});var sA=s(on);Mhr=r(sA,"The model class to instantiate is selected based on the "),K1e=n(sA,"CODE",{});var l5t=s(K1e);Ehr=r(l5t,"model_type"),l5t.forEach(t),Chr=r(sA,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(sA,"CODE",{});var i5t=s(Z1e);whr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Ahr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(sA,"CODE",{});var d5t=s(ebe);yhr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),Lhr=r(sA,":"),sA.forEach(t),xhr=i(ul),Ud=n(ul,"UL",{});var _Z=s(Ud);c7=n(_Z,"LI",{});var Uke=s(c7);obe=n(Uke,"STRONG",{});var c5t=s(obe);$hr=r(c5t,"convnext"),c5t.forEach(t),khr=r(Uke," \u2014 "),WQ=n(Uke,"A",{href:!0});var f5t=s(WQ);Shr=r(f5t,"TFConvNextForImageClassification"),f5t.forEach(t),Rhr=r(Uke," (ConvNext model)"),Uke.forEach(t),Bhr=i(_Z),f7=n(_Z,"LI",{});var Jke=s(f7);rbe=n(Jke,"STRONG",{});var m5t=s(rbe);Phr=r(m5t,"data2vec-vision"),m5t.forEach(t),Ihr=r(Jke," \u2014 "),HQ=n(Jke,"A",{href:!0});var g5t=s(HQ);qhr=r(g5t,"TFData2VecVisionForImageClassification"),g5t.forEach(t),Nhr=r(Jke," (Data2VecVision model)"),Jke.forEach(t),jhr=i(_Z),m7=n(_Z,"LI",{});var Yke=s(m7);tbe=n(Yke,"STRONG",{});var h5t=s(tbe);Dhr=r(h5t,"vit"),h5t.forEach(t),Ghr=r(Yke," \u2014 "),UQ=n(Yke,"A",{href:!0});var p5t=s(UQ);Ohr=r(p5t,"TFViTForImageClassification"),p5t.forEach(t),Vhr=r(Yke," (ViT model)"),Yke.forEach(t),_Z.forEach(t),Xhr=i(ul),T(g7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),bqe=i(f),Jd=n(f,"H2",{class:!0});var Cje=s(Jd);h7=n(Cje,"A",{id:!0,class:!0,href:!0});var u5t=s(h7);abe=n(u5t,"SPAN",{});var _5t=s(abe);T(r8.$$.fragment,_5t),_5t.forEach(t),u5t.forEach(t),zhr=i(Cje),nbe=n(Cje,"SPAN",{});var b5t=s(nbe);Qhr=r(b5t,"TFAutoModelForMaskedLM"),b5t.forEach(t),Cje.forEach(t),vqe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(t8.$$.fragment,_l),Whr=i(_l),Yd=n(_l,"P",{});var bZ=s(Yd);Hhr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JQ=n(bZ,"A",{href:!0});var v5t=s(JQ);Uhr=r(v5t,"from_pretrained()"),v5t.forEach(t),Jhr=r(bZ," class method or the "),YQ=n(bZ,"A",{href:!0});var F5t=s(YQ);Yhr=r(F5t,"from_config()"),F5t.forEach(t),Khr=r(bZ,` class
method.`),bZ.forEach(t),Zhr=i(_l),a8=n(_l,"P",{});var wje=s(a8);epr=r(wje,"This class cannot be instantiated directly using "),sbe=n(wje,"CODE",{});var T5t=s(sbe);opr=r(T5t,"__init__()"),T5t.forEach(t),rpr=r(wje," (throws an error)."),wje.forEach(t),tpr=i(_l),xt=n(_l,"DIV",{class:!0});var lA=s(xt);T(n8.$$.fragment,lA),apr=i(lA),lbe=n(lA,"P",{});var M5t=s(lbe);npr=r(M5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),M5t.forEach(t),spr=i(lA),Kd=n(lA,"P",{});var vZ=s(Kd);lpr=r(vZ,`Note:
Loading a model from its configuration file does `),ibe=n(vZ,"STRONG",{});var E5t=s(ibe);ipr=r(E5t,"not"),E5t.forEach(t),dpr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(vZ,"A",{href:!0});var C5t=s(KQ);cpr=r(C5t,"from_pretrained()"),C5t.forEach(t),fpr=r(vZ," to load the model weights."),vZ.forEach(t),mpr=i(lA),T(p7.$$.fragment,lA),lA.forEach(t),gpr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(s8.$$.fragment,bl),hpr=i(bl),dbe=n(bl,"P",{});var w5t=s(dbe);ppr=r(w5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w5t.forEach(t),upr=i(bl),rn=n(bl,"P",{});var iA=s(rn);_pr=r(iA,"The model class to instantiate is selected based on the "),cbe=n(iA,"CODE",{});var A5t=s(cbe);bpr=r(A5t,"model_type"),A5t.forEach(t),vpr=r(iA,` property of the config object (either
passed as an argument or loaded from `),fbe=n(iA,"CODE",{});var y5t=s(fbe);Fpr=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),Tpr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(iA,"CODE",{});var L5t=s(mbe);Mpr=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),Epr=r(iA,":"),iA.forEach(t),Cpr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);u7=n(fe,"LI",{});var Kke=s(u7);gbe=n(Kke,"STRONG",{});var x5t=s(gbe);wpr=r(x5t,"albert"),x5t.forEach(t),Apr=r(Kke," \u2014 "),ZQ=n(Kke,"A",{href:!0});var $5t=s(ZQ);ypr=r($5t,"TFAlbertForMaskedLM"),$5t.forEach(t),Lpr=r(Kke," (ALBERT model)"),Kke.forEach(t),xpr=i(fe),_7=n(fe,"LI",{});var Zke=s(_7);hbe=n(Zke,"STRONG",{});var k5t=s(hbe);$pr=r(k5t,"bert"),k5t.forEach(t),kpr=r(Zke," \u2014 "),eW=n(Zke,"A",{href:!0});var S5t=s(eW);Spr=r(S5t,"TFBertForMaskedLM"),S5t.forEach(t),Rpr=r(Zke," (BERT model)"),Zke.forEach(t),Bpr=i(fe),b7=n(fe,"LI",{});var eSe=s(b7);pbe=n(eSe,"STRONG",{});var R5t=s(pbe);Ppr=r(R5t,"camembert"),R5t.forEach(t),Ipr=r(eSe," \u2014 "),oW=n(eSe,"A",{href:!0});var B5t=s(oW);qpr=r(B5t,"TFCamembertForMaskedLM"),B5t.forEach(t),Npr=r(eSe," (CamemBERT model)"),eSe.forEach(t),jpr=i(fe),v7=n(fe,"LI",{});var oSe=s(v7);ube=n(oSe,"STRONG",{});var P5t=s(ube);Dpr=r(P5t,"convbert"),P5t.forEach(t),Gpr=r(oSe," \u2014 "),rW=n(oSe,"A",{href:!0});var I5t=s(rW);Opr=r(I5t,"TFConvBertForMaskedLM"),I5t.forEach(t),Vpr=r(oSe," (ConvBERT model)"),oSe.forEach(t),Xpr=i(fe),F7=n(fe,"LI",{});var rSe=s(F7);_be=n(rSe,"STRONG",{});var q5t=s(_be);zpr=r(q5t,"deberta"),q5t.forEach(t),Qpr=r(rSe," \u2014 "),tW=n(rSe,"A",{href:!0});var N5t=s(tW);Wpr=r(N5t,"TFDebertaForMaskedLM"),N5t.forEach(t),Hpr=r(rSe," (DeBERTa model)"),rSe.forEach(t),Upr=i(fe),T7=n(fe,"LI",{});var tSe=s(T7);bbe=n(tSe,"STRONG",{});var j5t=s(bbe);Jpr=r(j5t,"deberta-v2"),j5t.forEach(t),Ypr=r(tSe," \u2014 "),aW=n(tSe,"A",{href:!0});var D5t=s(aW);Kpr=r(D5t,"TFDebertaV2ForMaskedLM"),D5t.forEach(t),Zpr=r(tSe," (DeBERTa-v2 model)"),tSe.forEach(t),eur=i(fe),M7=n(fe,"LI",{});var aSe=s(M7);vbe=n(aSe,"STRONG",{});var G5t=s(vbe);our=r(G5t,"distilbert"),G5t.forEach(t),rur=r(aSe," \u2014 "),nW=n(aSe,"A",{href:!0});var O5t=s(nW);tur=r(O5t,"TFDistilBertForMaskedLM"),O5t.forEach(t),aur=r(aSe," (DistilBERT model)"),aSe.forEach(t),nur=i(fe),E7=n(fe,"LI",{});var nSe=s(E7);Fbe=n(nSe,"STRONG",{});var V5t=s(Fbe);sur=r(V5t,"electra"),V5t.forEach(t),lur=r(nSe," \u2014 "),sW=n(nSe,"A",{href:!0});var X5t=s(sW);iur=r(X5t,"TFElectraForMaskedLM"),X5t.forEach(t),dur=r(nSe," (ELECTRA model)"),nSe.forEach(t),cur=i(fe),C7=n(fe,"LI",{});var sSe=s(C7);Tbe=n(sSe,"STRONG",{});var z5t=s(Tbe);fur=r(z5t,"flaubert"),z5t.forEach(t),mur=r(sSe," \u2014 "),lW=n(sSe,"A",{href:!0});var Q5t=s(lW);gur=r(Q5t,"TFFlaubertWithLMHeadModel"),Q5t.forEach(t),hur=r(sSe," (FlauBERT model)"),sSe.forEach(t),pur=i(fe),w7=n(fe,"LI",{});var lSe=s(w7);Mbe=n(lSe,"STRONG",{});var W5t=s(Mbe);uur=r(W5t,"funnel"),W5t.forEach(t),_ur=r(lSe," \u2014 "),iW=n(lSe,"A",{href:!0});var H5t=s(iW);bur=r(H5t,"TFFunnelForMaskedLM"),H5t.forEach(t),vur=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Fur=i(fe),A7=n(fe,"LI",{});var iSe=s(A7);Ebe=n(iSe,"STRONG",{});var U5t=s(Ebe);Tur=r(U5t,"layoutlm"),U5t.forEach(t),Mur=r(iSe," \u2014 "),dW=n(iSe,"A",{href:!0});var J5t=s(dW);Eur=r(J5t,"TFLayoutLMForMaskedLM"),J5t.forEach(t),Cur=r(iSe," (LayoutLM model)"),iSe.forEach(t),wur=i(fe),y7=n(fe,"LI",{});var dSe=s(y7);Cbe=n(dSe,"STRONG",{});var Y5t=s(Cbe);Aur=r(Y5t,"longformer"),Y5t.forEach(t),yur=r(dSe," \u2014 "),cW=n(dSe,"A",{href:!0});var K5t=s(cW);Lur=r(K5t,"TFLongformerForMaskedLM"),K5t.forEach(t),xur=r(dSe," (Longformer model)"),dSe.forEach(t),$ur=i(fe),L7=n(fe,"LI",{});var cSe=s(L7);wbe=n(cSe,"STRONG",{});var Z5t=s(wbe);kur=r(Z5t,"mobilebert"),Z5t.forEach(t),Sur=r(cSe," \u2014 "),fW=n(cSe,"A",{href:!0});var evt=s(fW);Rur=r(evt,"TFMobileBertForMaskedLM"),evt.forEach(t),Bur=r(cSe," (MobileBERT model)"),cSe.forEach(t),Pur=i(fe),x7=n(fe,"LI",{});var fSe=s(x7);Abe=n(fSe,"STRONG",{});var ovt=s(Abe);Iur=r(ovt,"mpnet"),ovt.forEach(t),qur=r(fSe," \u2014 "),mW=n(fSe,"A",{href:!0});var rvt=s(mW);Nur=r(rvt,"TFMPNetForMaskedLM"),rvt.forEach(t),jur=r(fSe," (MPNet model)"),fSe.forEach(t),Dur=i(fe),$7=n(fe,"LI",{});var mSe=s($7);ybe=n(mSe,"STRONG",{});var tvt=s(ybe);Gur=r(tvt,"rembert"),tvt.forEach(t),Our=r(mSe," \u2014 "),gW=n(mSe,"A",{href:!0});var avt=s(gW);Vur=r(avt,"TFRemBertForMaskedLM"),avt.forEach(t),Xur=r(mSe," (RemBERT model)"),mSe.forEach(t),zur=i(fe),k7=n(fe,"LI",{});var gSe=s(k7);Lbe=n(gSe,"STRONG",{});var nvt=s(Lbe);Qur=r(nvt,"roberta"),nvt.forEach(t),Wur=r(gSe," \u2014 "),hW=n(gSe,"A",{href:!0});var svt=s(hW);Hur=r(svt,"TFRobertaForMaskedLM"),svt.forEach(t),Uur=r(gSe," (RoBERTa model)"),gSe.forEach(t),Jur=i(fe),S7=n(fe,"LI",{});var hSe=s(S7);xbe=n(hSe,"STRONG",{});var lvt=s(xbe);Yur=r(lvt,"roformer"),lvt.forEach(t),Kur=r(hSe," \u2014 "),pW=n(hSe,"A",{href:!0});var ivt=s(pW);Zur=r(ivt,"TFRoFormerForMaskedLM"),ivt.forEach(t),e_r=r(hSe," (RoFormer model)"),hSe.forEach(t),o_r=i(fe),R7=n(fe,"LI",{});var pSe=s(R7);$be=n(pSe,"STRONG",{});var dvt=s($be);r_r=r(dvt,"tapas"),dvt.forEach(t),t_r=r(pSe," \u2014 "),uW=n(pSe,"A",{href:!0});var cvt=s(uW);a_r=r(cvt,"TFTapasForMaskedLM"),cvt.forEach(t),n_r=r(pSe," (TAPAS model)"),pSe.forEach(t),s_r=i(fe),B7=n(fe,"LI",{});var uSe=s(B7);kbe=n(uSe,"STRONG",{});var fvt=s(kbe);l_r=r(fvt,"xlm"),fvt.forEach(t),i_r=r(uSe," \u2014 "),_W=n(uSe,"A",{href:!0});var mvt=s(_W);d_r=r(mvt,"TFXLMWithLMHeadModel"),mvt.forEach(t),c_r=r(uSe," (XLM model)"),uSe.forEach(t),f_r=i(fe),P7=n(fe,"LI",{});var _Se=s(P7);Sbe=n(_Se,"STRONG",{});var gvt=s(Sbe);m_r=r(gvt,"xlm-roberta"),gvt.forEach(t),g_r=r(_Se," \u2014 "),bW=n(_Se,"A",{href:!0});var hvt=s(bW);h_r=r(hvt,"TFXLMRobertaForMaskedLM"),hvt.forEach(t),p_r=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),fe.forEach(t),u_r=i(bl),T(I7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),Fqe=i(f),Zd=n(f,"H2",{class:!0});var Aje=s(Zd);q7=n(Aje,"A",{id:!0,class:!0,href:!0});var pvt=s(q7);Rbe=n(pvt,"SPAN",{});var uvt=s(Rbe);T(l8.$$.fragment,uvt),uvt.forEach(t),pvt.forEach(t),__r=i(Aje),Bbe=n(Aje,"SPAN",{});var _vt=s(Bbe);b_r=r(_vt,"TFAutoModelForSeq2SeqLM"),_vt.forEach(t),Aje.forEach(t),Tqe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(i8.$$.fragment,vl),v_r=i(vl),ec=n(vl,"P",{});var FZ=s(ec);F_r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vW=n(FZ,"A",{href:!0});var bvt=s(vW);T_r=r(bvt,"from_pretrained()"),bvt.forEach(t),M_r=r(FZ," class method or the "),FW=n(FZ,"A",{href:!0});var vvt=s(FW);E_r=r(vvt,"from_config()"),vvt.forEach(t),C_r=r(FZ,` class
method.`),FZ.forEach(t),w_r=i(vl),d8=n(vl,"P",{});var yje=s(d8);A_r=r(yje,"This class cannot be instantiated directly using "),Pbe=n(yje,"CODE",{});var Fvt=s(Pbe);y_r=r(Fvt,"__init__()"),Fvt.forEach(t),L_r=r(yje," (throws an error)."),yje.forEach(t),x_r=i(vl),$t=n(vl,"DIV",{class:!0});var dA=s($t);T(c8.$$.fragment,dA),$_r=i(dA),Ibe=n(dA,"P",{});var Tvt=s(Ibe);k_r=r(Tvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tvt.forEach(t),S_r=i(dA),oc=n(dA,"P",{});var TZ=s(oc);R_r=r(TZ,`Note:
Loading a model from its configuration file does `),qbe=n(TZ,"STRONG",{});var Mvt=s(qbe);B_r=r(Mvt,"not"),Mvt.forEach(t),P_r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(TZ,"A",{href:!0});var Evt=s(TW);I_r=r(Evt,"from_pretrained()"),Evt.forEach(t),q_r=r(TZ," to load the model weights."),TZ.forEach(t),N_r=i(dA),T(N7.$$.fragment,dA),dA.forEach(t),j_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(f8.$$.fragment,Fl),D_r=i(Fl),Nbe=n(Fl,"P",{});var Cvt=s(Nbe);G_r=r(Cvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cvt.forEach(t),O_r=i(Fl),tn=n(Fl,"P",{});var cA=s(tn);V_r=r(cA,"The model class to instantiate is selected based on the "),jbe=n(cA,"CODE",{});var wvt=s(jbe);X_r=r(wvt,"model_type"),wvt.forEach(t),z_r=r(cA,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(cA,"CODE",{});var Avt=s(Dbe);Q_r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),W_r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(cA,"CODE",{});var yvt=s(Gbe);H_r=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),U_r=r(cA,":"),cA.forEach(t),J_r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);j7=n(Re,"LI",{});var bSe=s(j7);Obe=n(bSe,"STRONG",{});var Lvt=s(Obe);Y_r=r(Lvt,"bart"),Lvt.forEach(t),K_r=r(bSe," \u2014 "),MW=n(bSe,"A",{href:!0});var xvt=s(MW);Z_r=r(xvt,"TFBartForConditionalGeneration"),xvt.forEach(t),e2r=r(bSe," (BART model)"),bSe.forEach(t),o2r=i(Re),D7=n(Re,"LI",{});var vSe=s(D7);Vbe=n(vSe,"STRONG",{});var $vt=s(Vbe);r2r=r($vt,"blenderbot"),$vt.forEach(t),t2r=r(vSe," \u2014 "),EW=n(vSe,"A",{href:!0});var kvt=s(EW);a2r=r(kvt,"TFBlenderbotForConditionalGeneration"),kvt.forEach(t),n2r=r(vSe," (Blenderbot model)"),vSe.forEach(t),s2r=i(Re),G7=n(Re,"LI",{});var FSe=s(G7);Xbe=n(FSe,"STRONG",{});var Svt=s(Xbe);l2r=r(Svt,"blenderbot-small"),Svt.forEach(t),i2r=r(FSe," \u2014 "),CW=n(FSe,"A",{href:!0});var Rvt=s(CW);d2r=r(Rvt,"TFBlenderbotSmallForConditionalGeneration"),Rvt.forEach(t),c2r=r(FSe," (BlenderbotSmall model)"),FSe.forEach(t),f2r=i(Re),O7=n(Re,"LI",{});var TSe=s(O7);zbe=n(TSe,"STRONG",{});var Bvt=s(zbe);m2r=r(Bvt,"encoder-decoder"),Bvt.forEach(t),g2r=r(TSe," \u2014 "),wW=n(TSe,"A",{href:!0});var Pvt=s(wW);h2r=r(Pvt,"TFEncoderDecoderModel"),Pvt.forEach(t),p2r=r(TSe," (Encoder decoder model)"),TSe.forEach(t),u2r=i(Re),V7=n(Re,"LI",{});var MSe=s(V7);Qbe=n(MSe,"STRONG",{});var Ivt=s(Qbe);_2r=r(Ivt,"led"),Ivt.forEach(t),b2r=r(MSe," \u2014 "),AW=n(MSe,"A",{href:!0});var qvt=s(AW);v2r=r(qvt,"TFLEDForConditionalGeneration"),qvt.forEach(t),F2r=r(MSe," (LED model)"),MSe.forEach(t),T2r=i(Re),X7=n(Re,"LI",{});var ESe=s(X7);Wbe=n(ESe,"STRONG",{});var Nvt=s(Wbe);M2r=r(Nvt,"marian"),Nvt.forEach(t),E2r=r(ESe," \u2014 "),yW=n(ESe,"A",{href:!0});var jvt=s(yW);C2r=r(jvt,"TFMarianMTModel"),jvt.forEach(t),w2r=r(ESe," (Marian model)"),ESe.forEach(t),A2r=i(Re),z7=n(Re,"LI",{});var CSe=s(z7);Hbe=n(CSe,"STRONG",{});var Dvt=s(Hbe);y2r=r(Dvt,"mbart"),Dvt.forEach(t),L2r=r(CSe," \u2014 "),LW=n(CSe,"A",{href:!0});var Gvt=s(LW);x2r=r(Gvt,"TFMBartForConditionalGeneration"),Gvt.forEach(t),$2r=r(CSe," (mBART model)"),CSe.forEach(t),k2r=i(Re),Q7=n(Re,"LI",{});var wSe=s(Q7);Ube=n(wSe,"STRONG",{});var Ovt=s(Ube);S2r=r(Ovt,"mt5"),Ovt.forEach(t),R2r=r(wSe," \u2014 "),xW=n(wSe,"A",{href:!0});var Vvt=s(xW);B2r=r(Vvt,"TFMT5ForConditionalGeneration"),Vvt.forEach(t),P2r=r(wSe," (mT5 model)"),wSe.forEach(t),I2r=i(Re),W7=n(Re,"LI",{});var ASe=s(W7);Jbe=n(ASe,"STRONG",{});var Xvt=s(Jbe);q2r=r(Xvt,"pegasus"),Xvt.forEach(t),N2r=r(ASe," \u2014 "),$W=n(ASe,"A",{href:!0});var zvt=s($W);j2r=r(zvt,"TFPegasusForConditionalGeneration"),zvt.forEach(t),D2r=r(ASe," (Pegasus model)"),ASe.forEach(t),G2r=i(Re),H7=n(Re,"LI",{});var ySe=s(H7);Ybe=n(ySe,"STRONG",{});var Qvt=s(Ybe);O2r=r(Qvt,"t5"),Qvt.forEach(t),V2r=r(ySe," \u2014 "),kW=n(ySe,"A",{href:!0});var Wvt=s(kW);X2r=r(Wvt,"TFT5ForConditionalGeneration"),Wvt.forEach(t),z2r=r(ySe," (T5 model)"),ySe.forEach(t),Re.forEach(t),Q2r=i(Fl),T(U7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),Mqe=i(f),rc=n(f,"H2",{class:!0});var Lje=s(rc);J7=n(Lje,"A",{id:!0,class:!0,href:!0});var Hvt=s(J7);Kbe=n(Hvt,"SPAN",{});var Uvt=s(Kbe);T(m8.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),W2r=i(Lje),Zbe=n(Lje,"SPAN",{});var Jvt=s(Zbe);H2r=r(Jvt,"TFAutoModelForSequenceClassification"),Jvt.forEach(t),Lje.forEach(t),Eqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(g8.$$.fragment,Tl),U2r=i(Tl),tc=n(Tl,"P",{});var MZ=s(tc);J2r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SW=n(MZ,"A",{href:!0});var Yvt=s(SW);Y2r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),K2r=r(MZ," class method or the "),RW=n(MZ,"A",{href:!0});var Kvt=s(RW);Z2r=r(Kvt,"from_config()"),Kvt.forEach(t),e1r=r(MZ,` class
method.`),MZ.forEach(t),o1r=i(Tl),h8=n(Tl,"P",{});var xje=s(h8);r1r=r(xje,"This class cannot be instantiated directly using "),e5e=n(xje,"CODE",{});var Zvt=s(e5e);t1r=r(Zvt,"__init__()"),Zvt.forEach(t),a1r=r(xje," (throws an error)."),xje.forEach(t),n1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var fA=s(kt);T(p8.$$.fragment,fA),s1r=i(fA),o5e=n(fA,"P",{});var eFt=s(o5e);l1r=r(eFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eFt.forEach(t),i1r=i(fA),ac=n(fA,"P",{});var EZ=s(ac);d1r=r(EZ,`Note:
Loading a model from its configuration file does `),r5e=n(EZ,"STRONG",{});var oFt=s(r5e);c1r=r(oFt,"not"),oFt.forEach(t),f1r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(EZ,"A",{href:!0});var rFt=s(BW);m1r=r(rFt,"from_pretrained()"),rFt.forEach(t),g1r=r(EZ," to load the model weights."),EZ.forEach(t),h1r=i(fA),T(Y7.$$.fragment,fA),fA.forEach(t),p1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(u8.$$.fragment,Ml),u1r=i(Ml),t5e=n(Ml,"P",{});var tFt=s(t5e);_1r=r(tFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tFt.forEach(t),b1r=i(Ml),an=n(Ml,"P",{});var mA=s(an);v1r=r(mA,"The model class to instantiate is selected based on the "),a5e=n(mA,"CODE",{});var aFt=s(a5e);F1r=r(aFt,"model_type"),aFt.forEach(t),T1r=r(mA,` property of the config object (either
passed as an argument or loaded from `),n5e=n(mA,"CODE",{});var nFt=s(n5e);M1r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),E1r=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(mA,"CODE",{});var sFt=s(s5e);C1r=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),w1r=r(mA,":"),mA.forEach(t),A1r=i(Ml),ee=n(Ml,"UL",{});var ae=s(ee);K7=n(ae,"LI",{});var LSe=s(K7);l5e=n(LSe,"STRONG",{});var lFt=s(l5e);y1r=r(lFt,"albert"),lFt.forEach(t),L1r=r(LSe," \u2014 "),PW=n(LSe,"A",{href:!0});var iFt=s(PW);x1r=r(iFt,"TFAlbertForSequenceClassification"),iFt.forEach(t),$1r=r(LSe," (ALBERT model)"),LSe.forEach(t),k1r=i(ae),Z7=n(ae,"LI",{});var xSe=s(Z7);i5e=n(xSe,"STRONG",{});var dFt=s(i5e);S1r=r(dFt,"bert"),dFt.forEach(t),R1r=r(xSe," \u2014 "),IW=n(xSe,"A",{href:!0});var cFt=s(IW);B1r=r(cFt,"TFBertForSequenceClassification"),cFt.forEach(t),P1r=r(xSe," (BERT model)"),xSe.forEach(t),I1r=i(ae),eM=n(ae,"LI",{});var $Se=s(eM);d5e=n($Se,"STRONG",{});var fFt=s(d5e);q1r=r(fFt,"camembert"),fFt.forEach(t),N1r=r($Se," \u2014 "),qW=n($Se,"A",{href:!0});var mFt=s(qW);j1r=r(mFt,"TFCamembertForSequenceClassification"),mFt.forEach(t),D1r=r($Se," (CamemBERT model)"),$Se.forEach(t),G1r=i(ae),oM=n(ae,"LI",{});var kSe=s(oM);c5e=n(kSe,"STRONG",{});var gFt=s(c5e);O1r=r(gFt,"convbert"),gFt.forEach(t),V1r=r(kSe," \u2014 "),NW=n(kSe,"A",{href:!0});var hFt=s(NW);X1r=r(hFt,"TFConvBertForSequenceClassification"),hFt.forEach(t),z1r=r(kSe," (ConvBERT model)"),kSe.forEach(t),Q1r=i(ae),rM=n(ae,"LI",{});var SSe=s(rM);f5e=n(SSe,"STRONG",{});var pFt=s(f5e);W1r=r(pFt,"ctrl"),pFt.forEach(t),H1r=r(SSe," \u2014 "),jW=n(SSe,"A",{href:!0});var uFt=s(jW);U1r=r(uFt,"TFCTRLForSequenceClassification"),uFt.forEach(t),J1r=r(SSe," (CTRL model)"),SSe.forEach(t),Y1r=i(ae),tM=n(ae,"LI",{});var RSe=s(tM);m5e=n(RSe,"STRONG",{});var _Ft=s(m5e);K1r=r(_Ft,"deberta"),_Ft.forEach(t),Z1r=r(RSe," \u2014 "),DW=n(RSe,"A",{href:!0});var bFt=s(DW);ebr=r(bFt,"TFDebertaForSequenceClassification"),bFt.forEach(t),obr=r(RSe," (DeBERTa model)"),RSe.forEach(t),rbr=i(ae),aM=n(ae,"LI",{});var BSe=s(aM);g5e=n(BSe,"STRONG",{});var vFt=s(g5e);tbr=r(vFt,"deberta-v2"),vFt.forEach(t),abr=r(BSe," \u2014 "),GW=n(BSe,"A",{href:!0});var FFt=s(GW);nbr=r(FFt,"TFDebertaV2ForSequenceClassification"),FFt.forEach(t),sbr=r(BSe," (DeBERTa-v2 model)"),BSe.forEach(t),lbr=i(ae),nM=n(ae,"LI",{});var PSe=s(nM);h5e=n(PSe,"STRONG",{});var TFt=s(h5e);ibr=r(TFt,"distilbert"),TFt.forEach(t),dbr=r(PSe," \u2014 "),OW=n(PSe,"A",{href:!0});var MFt=s(OW);cbr=r(MFt,"TFDistilBertForSequenceClassification"),MFt.forEach(t),fbr=r(PSe," (DistilBERT model)"),PSe.forEach(t),mbr=i(ae),sM=n(ae,"LI",{});var ISe=s(sM);p5e=n(ISe,"STRONG",{});var EFt=s(p5e);gbr=r(EFt,"electra"),EFt.forEach(t),hbr=r(ISe," \u2014 "),VW=n(ISe,"A",{href:!0});var CFt=s(VW);pbr=r(CFt,"TFElectraForSequenceClassification"),CFt.forEach(t),ubr=r(ISe," (ELECTRA model)"),ISe.forEach(t),_br=i(ae),lM=n(ae,"LI",{});var qSe=s(lM);u5e=n(qSe,"STRONG",{});var wFt=s(u5e);bbr=r(wFt,"flaubert"),wFt.forEach(t),vbr=r(qSe," \u2014 "),XW=n(qSe,"A",{href:!0});var AFt=s(XW);Fbr=r(AFt,"TFFlaubertForSequenceClassification"),AFt.forEach(t),Tbr=r(qSe," (FlauBERT model)"),qSe.forEach(t),Mbr=i(ae),iM=n(ae,"LI",{});var NSe=s(iM);_5e=n(NSe,"STRONG",{});var yFt=s(_5e);Ebr=r(yFt,"funnel"),yFt.forEach(t),Cbr=r(NSe," \u2014 "),zW=n(NSe,"A",{href:!0});var LFt=s(zW);wbr=r(LFt,"TFFunnelForSequenceClassification"),LFt.forEach(t),Abr=r(NSe," (Funnel Transformer model)"),NSe.forEach(t),ybr=i(ae),dM=n(ae,"LI",{});var jSe=s(dM);b5e=n(jSe,"STRONG",{});var xFt=s(b5e);Lbr=r(xFt,"gpt2"),xFt.forEach(t),xbr=r(jSe," \u2014 "),QW=n(jSe,"A",{href:!0});var $Ft=s(QW);$br=r($Ft,"TFGPT2ForSequenceClassification"),$Ft.forEach(t),kbr=r(jSe," (OpenAI GPT-2 model)"),jSe.forEach(t),Sbr=i(ae),cM=n(ae,"LI",{});var DSe=s(cM);v5e=n(DSe,"STRONG",{});var kFt=s(v5e);Rbr=r(kFt,"gptj"),kFt.forEach(t),Bbr=r(DSe," \u2014 "),WW=n(DSe,"A",{href:!0});var SFt=s(WW);Pbr=r(SFt,"TFGPTJForSequenceClassification"),SFt.forEach(t),Ibr=r(DSe," (GPT-J model)"),DSe.forEach(t),qbr=i(ae),fM=n(ae,"LI",{});var GSe=s(fM);F5e=n(GSe,"STRONG",{});var RFt=s(F5e);Nbr=r(RFt,"layoutlm"),RFt.forEach(t),jbr=r(GSe," \u2014 "),HW=n(GSe,"A",{href:!0});var BFt=s(HW);Dbr=r(BFt,"TFLayoutLMForSequenceClassification"),BFt.forEach(t),Gbr=r(GSe," (LayoutLM model)"),GSe.forEach(t),Obr=i(ae),mM=n(ae,"LI",{});var OSe=s(mM);T5e=n(OSe,"STRONG",{});var PFt=s(T5e);Vbr=r(PFt,"longformer"),PFt.forEach(t),Xbr=r(OSe," \u2014 "),UW=n(OSe,"A",{href:!0});var IFt=s(UW);zbr=r(IFt,"TFLongformerForSequenceClassification"),IFt.forEach(t),Qbr=r(OSe," (Longformer model)"),OSe.forEach(t),Wbr=i(ae),gM=n(ae,"LI",{});var VSe=s(gM);M5e=n(VSe,"STRONG",{});var qFt=s(M5e);Hbr=r(qFt,"mobilebert"),qFt.forEach(t),Ubr=r(VSe," \u2014 "),JW=n(VSe,"A",{href:!0});var NFt=s(JW);Jbr=r(NFt,"TFMobileBertForSequenceClassification"),NFt.forEach(t),Ybr=r(VSe," (MobileBERT model)"),VSe.forEach(t),Kbr=i(ae),hM=n(ae,"LI",{});var XSe=s(hM);E5e=n(XSe,"STRONG",{});var jFt=s(E5e);Zbr=r(jFt,"mpnet"),jFt.forEach(t),e5r=r(XSe," \u2014 "),YW=n(XSe,"A",{href:!0});var DFt=s(YW);o5r=r(DFt,"TFMPNetForSequenceClassification"),DFt.forEach(t),r5r=r(XSe," (MPNet model)"),XSe.forEach(t),t5r=i(ae),pM=n(ae,"LI",{});var zSe=s(pM);C5e=n(zSe,"STRONG",{});var GFt=s(C5e);a5r=r(GFt,"openai-gpt"),GFt.forEach(t),n5r=r(zSe," \u2014 "),KW=n(zSe,"A",{href:!0});var OFt=s(KW);s5r=r(OFt,"TFOpenAIGPTForSequenceClassification"),OFt.forEach(t),l5r=r(zSe," (OpenAI GPT model)"),zSe.forEach(t),i5r=i(ae),uM=n(ae,"LI",{});var QSe=s(uM);w5e=n(QSe,"STRONG",{});var VFt=s(w5e);d5r=r(VFt,"rembert"),VFt.forEach(t),c5r=r(QSe," \u2014 "),ZW=n(QSe,"A",{href:!0});var XFt=s(ZW);f5r=r(XFt,"TFRemBertForSequenceClassification"),XFt.forEach(t),m5r=r(QSe," (RemBERT model)"),QSe.forEach(t),g5r=i(ae),_M=n(ae,"LI",{});var WSe=s(_M);A5e=n(WSe,"STRONG",{});var zFt=s(A5e);h5r=r(zFt,"roberta"),zFt.forEach(t),p5r=r(WSe," \u2014 "),eH=n(WSe,"A",{href:!0});var QFt=s(eH);u5r=r(QFt,"TFRobertaForSequenceClassification"),QFt.forEach(t),_5r=r(WSe," (RoBERTa model)"),WSe.forEach(t),b5r=i(ae),bM=n(ae,"LI",{});var HSe=s(bM);y5e=n(HSe,"STRONG",{});var WFt=s(y5e);v5r=r(WFt,"roformer"),WFt.forEach(t),F5r=r(HSe," \u2014 "),oH=n(HSe,"A",{href:!0});var HFt=s(oH);T5r=r(HFt,"TFRoFormerForSequenceClassification"),HFt.forEach(t),M5r=r(HSe," (RoFormer model)"),HSe.forEach(t),E5r=i(ae),vM=n(ae,"LI",{});var USe=s(vM);L5e=n(USe,"STRONG",{});var UFt=s(L5e);C5r=r(UFt,"tapas"),UFt.forEach(t),w5r=r(USe," \u2014 "),rH=n(USe,"A",{href:!0});var JFt=s(rH);A5r=r(JFt,"TFTapasForSequenceClassification"),JFt.forEach(t),y5r=r(USe," (TAPAS model)"),USe.forEach(t),L5r=i(ae),FM=n(ae,"LI",{});var JSe=s(FM);x5e=n(JSe,"STRONG",{});var YFt=s(x5e);x5r=r(YFt,"transfo-xl"),YFt.forEach(t),$5r=r(JSe," \u2014 "),tH=n(JSe,"A",{href:!0});var KFt=s(tH);k5r=r(KFt,"TFTransfoXLForSequenceClassification"),KFt.forEach(t),S5r=r(JSe," (Transformer-XL model)"),JSe.forEach(t),R5r=i(ae),TM=n(ae,"LI",{});var YSe=s(TM);$5e=n(YSe,"STRONG",{});var ZFt=s($5e);B5r=r(ZFt,"xlm"),ZFt.forEach(t),P5r=r(YSe," \u2014 "),aH=n(YSe,"A",{href:!0});var e0t=s(aH);I5r=r(e0t,"TFXLMForSequenceClassification"),e0t.forEach(t),q5r=r(YSe," (XLM model)"),YSe.forEach(t),N5r=i(ae),MM=n(ae,"LI",{});var KSe=s(MM);k5e=n(KSe,"STRONG",{});var o0t=s(k5e);j5r=r(o0t,"xlm-roberta"),o0t.forEach(t),D5r=r(KSe," \u2014 "),nH=n(KSe,"A",{href:!0});var r0t=s(nH);G5r=r(r0t,"TFXLMRobertaForSequenceClassification"),r0t.forEach(t),O5r=r(KSe," (XLM-RoBERTa model)"),KSe.forEach(t),V5r=i(ae),EM=n(ae,"LI",{});var ZSe=s(EM);S5e=n(ZSe,"STRONG",{});var t0t=s(S5e);X5r=r(t0t,"xlnet"),t0t.forEach(t),z5r=r(ZSe," \u2014 "),sH=n(ZSe,"A",{href:!0});var a0t=s(sH);Q5r=r(a0t,"TFXLNetForSequenceClassification"),a0t.forEach(t),W5r=r(ZSe," (XLNet model)"),ZSe.forEach(t),ae.forEach(t),H5r=i(Ml),T(CM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Cqe=i(f),nc=n(f,"H2",{class:!0});var $je=s(nc);wM=n($je,"A",{id:!0,class:!0,href:!0});var n0t=s(wM);R5e=n(n0t,"SPAN",{});var s0t=s(R5e);T(_8.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),U5r=i($je),B5e=n($je,"SPAN",{});var l0t=s(B5e);J5r=r(l0t,"TFAutoModelForMultipleChoice"),l0t.forEach(t),$je.forEach(t),wqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(b8.$$.fragment,El),Y5r=i(El),sc=n(El,"P",{});var CZ=s(sc);K5r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lH=n(CZ,"A",{href:!0});var i0t=s(lH);Z5r=r(i0t,"from_pretrained()"),i0t.forEach(t),evr=r(CZ," class method or the "),iH=n(CZ,"A",{href:!0});var d0t=s(iH);ovr=r(d0t,"from_config()"),d0t.forEach(t),rvr=r(CZ,` class
method.`),CZ.forEach(t),tvr=i(El),v8=n(El,"P",{});var kje=s(v8);avr=r(kje,"This class cannot be instantiated directly using "),P5e=n(kje,"CODE",{});var c0t=s(P5e);nvr=r(c0t,"__init__()"),c0t.forEach(t),svr=r(kje," (throws an error)."),kje.forEach(t),lvr=i(El),St=n(El,"DIV",{class:!0});var gA=s(St);T(F8.$$.fragment,gA),ivr=i(gA),I5e=n(gA,"P",{});var f0t=s(I5e);dvr=r(f0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f0t.forEach(t),cvr=i(gA),lc=n(gA,"P",{});var wZ=s(lc);fvr=r(wZ,`Note:
Loading a model from its configuration file does `),q5e=n(wZ,"STRONG",{});var m0t=s(q5e);mvr=r(m0t,"not"),m0t.forEach(t),gvr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(wZ,"A",{href:!0});var g0t=s(dH);hvr=r(g0t,"from_pretrained()"),g0t.forEach(t),pvr=r(wZ," to load the model weights."),wZ.forEach(t),uvr=i(gA),T(AM.$$.fragment,gA),gA.forEach(t),_vr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(T8.$$.fragment,Cl),bvr=i(Cl),N5e=n(Cl,"P",{});var h0t=s(N5e);vvr=r(h0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h0t.forEach(t),Fvr=i(Cl),nn=n(Cl,"P",{});var hA=s(nn);Tvr=r(hA,"The model class to instantiate is selected based on the "),j5e=n(hA,"CODE",{});var p0t=s(j5e);Mvr=r(p0t,"model_type"),p0t.forEach(t),Evr=r(hA,` property of the config object (either
passed as an argument or loaded from `),D5e=n(hA,"CODE",{});var u0t=s(D5e);Cvr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),wvr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(hA,"CODE",{});var _0t=s(G5e);Avr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),yvr=r(hA,":"),hA.forEach(t),Lvr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);yM=n(_e,"LI",{});var eRe=s(yM);O5e=n(eRe,"STRONG",{});var b0t=s(O5e);xvr=r(b0t,"albert"),b0t.forEach(t),$vr=r(eRe," \u2014 "),cH=n(eRe,"A",{href:!0});var v0t=s(cH);kvr=r(v0t,"TFAlbertForMultipleChoice"),v0t.forEach(t),Svr=r(eRe," (ALBERT model)"),eRe.forEach(t),Rvr=i(_e),LM=n(_e,"LI",{});var oRe=s(LM);V5e=n(oRe,"STRONG",{});var F0t=s(V5e);Bvr=r(F0t,"bert"),F0t.forEach(t),Pvr=r(oRe," \u2014 "),fH=n(oRe,"A",{href:!0});var T0t=s(fH);Ivr=r(T0t,"TFBertForMultipleChoice"),T0t.forEach(t),qvr=r(oRe," (BERT model)"),oRe.forEach(t),Nvr=i(_e),xM=n(_e,"LI",{});var rRe=s(xM);X5e=n(rRe,"STRONG",{});var M0t=s(X5e);jvr=r(M0t,"camembert"),M0t.forEach(t),Dvr=r(rRe," \u2014 "),mH=n(rRe,"A",{href:!0});var E0t=s(mH);Gvr=r(E0t,"TFCamembertForMultipleChoice"),E0t.forEach(t),Ovr=r(rRe," (CamemBERT model)"),rRe.forEach(t),Vvr=i(_e),$M=n(_e,"LI",{});var tRe=s($M);z5e=n(tRe,"STRONG",{});var C0t=s(z5e);Xvr=r(C0t,"convbert"),C0t.forEach(t),zvr=r(tRe," \u2014 "),gH=n(tRe,"A",{href:!0});var w0t=s(gH);Qvr=r(w0t,"TFConvBertForMultipleChoice"),w0t.forEach(t),Wvr=r(tRe," (ConvBERT model)"),tRe.forEach(t),Hvr=i(_e),kM=n(_e,"LI",{});var aRe=s(kM);Q5e=n(aRe,"STRONG",{});var A0t=s(Q5e);Uvr=r(A0t,"distilbert"),A0t.forEach(t),Jvr=r(aRe," \u2014 "),hH=n(aRe,"A",{href:!0});var y0t=s(hH);Yvr=r(y0t,"TFDistilBertForMultipleChoice"),y0t.forEach(t),Kvr=r(aRe," (DistilBERT model)"),aRe.forEach(t),Zvr=i(_e),SM=n(_e,"LI",{});var nRe=s(SM);W5e=n(nRe,"STRONG",{});var L0t=s(W5e);eFr=r(L0t,"electra"),L0t.forEach(t),oFr=r(nRe," \u2014 "),pH=n(nRe,"A",{href:!0});var x0t=s(pH);rFr=r(x0t,"TFElectraForMultipleChoice"),x0t.forEach(t),tFr=r(nRe," (ELECTRA model)"),nRe.forEach(t),aFr=i(_e),RM=n(_e,"LI",{});var sRe=s(RM);H5e=n(sRe,"STRONG",{});var $0t=s(H5e);nFr=r($0t,"flaubert"),$0t.forEach(t),sFr=r(sRe," \u2014 "),uH=n(sRe,"A",{href:!0});var k0t=s(uH);lFr=r(k0t,"TFFlaubertForMultipleChoice"),k0t.forEach(t),iFr=r(sRe," (FlauBERT model)"),sRe.forEach(t),dFr=i(_e),BM=n(_e,"LI",{});var lRe=s(BM);U5e=n(lRe,"STRONG",{});var S0t=s(U5e);cFr=r(S0t,"funnel"),S0t.forEach(t),fFr=r(lRe," \u2014 "),_H=n(lRe,"A",{href:!0});var R0t=s(_H);mFr=r(R0t,"TFFunnelForMultipleChoice"),R0t.forEach(t),gFr=r(lRe," (Funnel Transformer model)"),lRe.forEach(t),hFr=i(_e),PM=n(_e,"LI",{});var iRe=s(PM);J5e=n(iRe,"STRONG",{});var B0t=s(J5e);pFr=r(B0t,"longformer"),B0t.forEach(t),uFr=r(iRe," \u2014 "),bH=n(iRe,"A",{href:!0});var P0t=s(bH);_Fr=r(P0t,"TFLongformerForMultipleChoice"),P0t.forEach(t),bFr=r(iRe," (Longformer model)"),iRe.forEach(t),vFr=i(_e),IM=n(_e,"LI",{});var dRe=s(IM);Y5e=n(dRe,"STRONG",{});var I0t=s(Y5e);FFr=r(I0t,"mobilebert"),I0t.forEach(t),TFr=r(dRe," \u2014 "),vH=n(dRe,"A",{href:!0});var q0t=s(vH);MFr=r(q0t,"TFMobileBertForMultipleChoice"),q0t.forEach(t),EFr=r(dRe," (MobileBERT model)"),dRe.forEach(t),CFr=i(_e),qM=n(_e,"LI",{});var cRe=s(qM);K5e=n(cRe,"STRONG",{});var N0t=s(K5e);wFr=r(N0t,"mpnet"),N0t.forEach(t),AFr=r(cRe," \u2014 "),FH=n(cRe,"A",{href:!0});var j0t=s(FH);yFr=r(j0t,"TFMPNetForMultipleChoice"),j0t.forEach(t),LFr=r(cRe," (MPNet model)"),cRe.forEach(t),xFr=i(_e),NM=n(_e,"LI",{});var fRe=s(NM);Z5e=n(fRe,"STRONG",{});var D0t=s(Z5e);$Fr=r(D0t,"rembert"),D0t.forEach(t),kFr=r(fRe," \u2014 "),TH=n(fRe,"A",{href:!0});var G0t=s(TH);SFr=r(G0t,"TFRemBertForMultipleChoice"),G0t.forEach(t),RFr=r(fRe," (RemBERT model)"),fRe.forEach(t),BFr=i(_e),jM=n(_e,"LI",{});var mRe=s(jM);eve=n(mRe,"STRONG",{});var O0t=s(eve);PFr=r(O0t,"roberta"),O0t.forEach(t),IFr=r(mRe," \u2014 "),MH=n(mRe,"A",{href:!0});var V0t=s(MH);qFr=r(V0t,"TFRobertaForMultipleChoice"),V0t.forEach(t),NFr=r(mRe," (RoBERTa model)"),mRe.forEach(t),jFr=i(_e),DM=n(_e,"LI",{});var gRe=s(DM);ove=n(gRe,"STRONG",{});var X0t=s(ove);DFr=r(X0t,"roformer"),X0t.forEach(t),GFr=r(gRe," \u2014 "),EH=n(gRe,"A",{href:!0});var z0t=s(EH);OFr=r(z0t,"TFRoFormerForMultipleChoice"),z0t.forEach(t),VFr=r(gRe," (RoFormer model)"),gRe.forEach(t),XFr=i(_e),GM=n(_e,"LI",{});var hRe=s(GM);rve=n(hRe,"STRONG",{});var Q0t=s(rve);zFr=r(Q0t,"xlm"),Q0t.forEach(t),QFr=r(hRe," \u2014 "),CH=n(hRe,"A",{href:!0});var W0t=s(CH);WFr=r(W0t,"TFXLMForMultipleChoice"),W0t.forEach(t),HFr=r(hRe," (XLM model)"),hRe.forEach(t),UFr=i(_e),OM=n(_e,"LI",{});var pRe=s(OM);tve=n(pRe,"STRONG",{});var H0t=s(tve);JFr=r(H0t,"xlm-roberta"),H0t.forEach(t),YFr=r(pRe," \u2014 "),wH=n(pRe,"A",{href:!0});var U0t=s(wH);KFr=r(U0t,"TFXLMRobertaForMultipleChoice"),U0t.forEach(t),ZFr=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),e0r=i(_e),VM=n(_e,"LI",{});var uRe=s(VM);ave=n(uRe,"STRONG",{});var J0t=s(ave);o0r=r(J0t,"xlnet"),J0t.forEach(t),r0r=r(uRe," \u2014 "),AH=n(uRe,"A",{href:!0});var Y0t=s(AH);t0r=r(Y0t,"TFXLNetForMultipleChoice"),Y0t.forEach(t),a0r=r(uRe," (XLNet model)"),uRe.forEach(t),_e.forEach(t),n0r=i(Cl),T(XM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Aqe=i(f),ic=n(f,"H2",{class:!0});var Sje=s(ic);zM=n(Sje,"A",{id:!0,class:!0,href:!0});var K0t=s(zM);nve=n(K0t,"SPAN",{});var Z0t=s(nve);T(M8.$$.fragment,Z0t),Z0t.forEach(t),K0t.forEach(t),s0r=i(Sje),sve=n(Sje,"SPAN",{});var eTt=s(sve);l0r=r(eTt,"TFAutoModelForNextSentencePrediction"),eTt.forEach(t),Sje.forEach(t),yqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(E8.$$.fragment,wl),i0r=i(wl),dc=n(wl,"P",{});var AZ=s(dc);d0r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yH=n(AZ,"A",{href:!0});var oTt=s(yH);c0r=r(oTt,"from_pretrained()"),oTt.forEach(t),f0r=r(AZ," class method or the "),LH=n(AZ,"A",{href:!0});var rTt=s(LH);m0r=r(rTt,"from_config()"),rTt.forEach(t),g0r=r(AZ,` class
method.`),AZ.forEach(t),h0r=i(wl),C8=n(wl,"P",{});var Rje=s(C8);p0r=r(Rje,"This class cannot be instantiated directly using "),lve=n(Rje,"CODE",{});var tTt=s(lve);u0r=r(tTt,"__init__()"),tTt.forEach(t),_0r=r(Rje," (throws an error)."),Rje.forEach(t),b0r=i(wl),Rt=n(wl,"DIV",{class:!0});var pA=s(Rt);T(w8.$$.fragment,pA),v0r=i(pA),ive=n(pA,"P",{});var aTt=s(ive);F0r=r(aTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aTt.forEach(t),T0r=i(pA),cc=n(pA,"P",{});var yZ=s(cc);M0r=r(yZ,`Note:
Loading a model from its configuration file does `),dve=n(yZ,"STRONG",{});var nTt=s(dve);E0r=r(nTt,"not"),nTt.forEach(t),C0r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(yZ,"A",{href:!0});var sTt=s(xH);w0r=r(sTt,"from_pretrained()"),sTt.forEach(t),A0r=r(yZ," to load the model weights."),yZ.forEach(t),y0r=i(pA),T(QM.$$.fragment,pA),pA.forEach(t),L0r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(A8.$$.fragment,Al),x0r=i(Al),cve=n(Al,"P",{});var lTt=s(cve);$0r=r(lTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lTt.forEach(t),k0r=i(Al),sn=n(Al,"P",{});var uA=s(sn);S0r=r(uA,"The model class to instantiate is selected based on the "),fve=n(uA,"CODE",{});var iTt=s(fve);R0r=r(iTt,"model_type"),iTt.forEach(t),B0r=r(uA,` property of the config object (either
passed as an argument or loaded from `),mve=n(uA,"CODE",{});var dTt=s(mve);P0r=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),I0r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(uA,"CODE",{});var cTt=s(gve);q0r=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),N0r=r(uA,":"),uA.forEach(t),j0r=i(Al),y8=n(Al,"UL",{});var Bje=s(y8);WM=n(Bje,"LI",{});var _Re=s(WM);hve=n(_Re,"STRONG",{});var fTt=s(hve);D0r=r(fTt,"bert"),fTt.forEach(t),G0r=r(_Re," \u2014 "),$H=n(_Re,"A",{href:!0});var mTt=s($H);O0r=r(mTt,"TFBertForNextSentencePrediction"),mTt.forEach(t),V0r=r(_Re," (BERT model)"),_Re.forEach(t),X0r=i(Bje),HM=n(Bje,"LI",{});var bRe=s(HM);pve=n(bRe,"STRONG",{});var gTt=s(pve);z0r=r(gTt,"mobilebert"),gTt.forEach(t),Q0r=r(bRe," \u2014 "),kH=n(bRe,"A",{href:!0});var hTt=s(kH);W0r=r(hTt,"TFMobileBertForNextSentencePrediction"),hTt.forEach(t),H0r=r(bRe," (MobileBERT model)"),bRe.forEach(t),Bje.forEach(t),U0r=i(Al),T(UM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Lqe=i(f),fc=n(f,"H2",{class:!0});var Pje=s(fc);JM=n(Pje,"A",{id:!0,class:!0,href:!0});var pTt=s(JM);uve=n(pTt,"SPAN",{});var uTt=s(uve);T(L8.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),J0r=i(Pje),_ve=n(Pje,"SPAN",{});var _Tt=s(_ve);Y0r=r(_Tt,"TFAutoModelForTableQuestionAnswering"),_Tt.forEach(t),Pje.forEach(t),xqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(x8.$$.fragment,yl),K0r=i(yl),mc=n(yl,"P",{});var LZ=s(mc);Z0r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SH=n(LZ,"A",{href:!0});var bTt=s(SH);eTr=r(bTt,"from_pretrained()"),bTt.forEach(t),oTr=r(LZ," class method or the "),RH=n(LZ,"A",{href:!0});var vTt=s(RH);rTr=r(vTt,"from_config()"),vTt.forEach(t),tTr=r(LZ,` class
method.`),LZ.forEach(t),aTr=i(yl),$8=n(yl,"P",{});var Ije=s($8);nTr=r(Ije,"This class cannot be instantiated directly using "),bve=n(Ije,"CODE",{});var FTt=s(bve);sTr=r(FTt,"__init__()"),FTt.forEach(t),lTr=r(Ije," (throws an error)."),Ije.forEach(t),iTr=i(yl),Bt=n(yl,"DIV",{class:!0});var _A=s(Bt);T(k8.$$.fragment,_A),dTr=i(_A),vve=n(_A,"P",{});var TTt=s(vve);cTr=r(TTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),TTt.forEach(t),fTr=i(_A),gc=n(_A,"P",{});var xZ=s(gc);mTr=r(xZ,`Note:
Loading a model from its configuration file does `),Fve=n(xZ,"STRONG",{});var MTt=s(Fve);gTr=r(MTt,"not"),MTt.forEach(t),hTr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(xZ,"A",{href:!0});var ETt=s(BH);pTr=r(ETt,"from_pretrained()"),ETt.forEach(t),uTr=r(xZ," to load the model weights."),xZ.forEach(t),_Tr=i(_A),T(YM.$$.fragment,_A),_A.forEach(t),bTr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(S8.$$.fragment,Ll),vTr=i(Ll),Tve=n(Ll,"P",{});var CTt=s(Tve);FTr=r(CTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CTt.forEach(t),TTr=i(Ll),ln=n(Ll,"P",{});var bA=s(ln);MTr=r(bA,"The model class to instantiate is selected based on the "),Mve=n(bA,"CODE",{});var wTt=s(Mve);ETr=r(wTt,"model_type"),wTt.forEach(t),CTr=r(bA,` property of the config object (either
passed as an argument or loaded from `),Eve=n(bA,"CODE",{});var ATt=s(Eve);wTr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),ATr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(bA,"CODE",{});var yTt=s(Cve);yTr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),LTr=r(bA,":"),bA.forEach(t),xTr=i(Ll),wve=n(Ll,"UL",{});var LTt=s(wve);KM=n(LTt,"LI",{});var vRe=s(KM);Ave=n(vRe,"STRONG",{});var xTt=s(Ave);$Tr=r(xTt,"tapas"),xTt.forEach(t),kTr=r(vRe," \u2014 "),PH=n(vRe,"A",{href:!0});var $Tt=s(PH);STr=r($Tt,"TFTapasForQuestionAnswering"),$Tt.forEach(t),RTr=r(vRe," (TAPAS model)"),vRe.forEach(t),LTt.forEach(t),BTr=i(Ll),T(ZM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),$qe=i(f),hc=n(f,"H2",{class:!0});var qje=s(hc);e4=n(qje,"A",{id:!0,class:!0,href:!0});var kTt=s(e4);yve=n(kTt,"SPAN",{});var STt=s(yve);T(R8.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),PTr=i(qje),Lve=n(qje,"SPAN",{});var RTt=s(Lve);ITr=r(RTt,"TFAutoModelForTokenClassification"),RTt.forEach(t),qje.forEach(t),kqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(B8.$$.fragment,xl),qTr=i(xl),pc=n(xl,"P",{});var $Z=s(pc);NTr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=n($Z,"A",{href:!0});var BTt=s(IH);jTr=r(BTt,"from_pretrained()"),BTt.forEach(t),DTr=r($Z," class method or the "),qH=n($Z,"A",{href:!0});var PTt=s(qH);GTr=r(PTt,"from_config()"),PTt.forEach(t),OTr=r($Z,` class
method.`),$Z.forEach(t),VTr=i(xl),P8=n(xl,"P",{});var Nje=s(P8);XTr=r(Nje,"This class cannot be instantiated directly using "),xve=n(Nje,"CODE",{});var ITt=s(xve);zTr=r(ITt,"__init__()"),ITt.forEach(t),QTr=r(Nje," (throws an error)."),Nje.forEach(t),WTr=i(xl),Pt=n(xl,"DIV",{class:!0});var vA=s(Pt);T(I8.$$.fragment,vA),HTr=i(vA),$ve=n(vA,"P",{});var qTt=s($ve);UTr=r(qTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qTt.forEach(t),JTr=i(vA),uc=n(vA,"P",{});var kZ=s(uc);YTr=r(kZ,`Note:
Loading a model from its configuration file does `),kve=n(kZ,"STRONG",{});var NTt=s(kve);KTr=r(NTt,"not"),NTt.forEach(t),ZTr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(kZ,"A",{href:!0});var jTt=s(NH);e7r=r(jTt,"from_pretrained()"),jTt.forEach(t),o7r=r(kZ," to load the model weights."),kZ.forEach(t),r7r=i(vA),T(o4.$$.fragment,vA),vA.forEach(t),t7r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(q8.$$.fragment,$l),a7r=i($l),Sve=n($l,"P",{});var DTt=s(Sve);n7r=r(DTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DTt.forEach(t),s7r=i($l),dn=n($l,"P",{});var FA=s(dn);l7r=r(FA,"The model class to instantiate is selected based on the "),Rve=n(FA,"CODE",{});var GTt=s(Rve);i7r=r(GTt,"model_type"),GTt.forEach(t),d7r=r(FA,` property of the config object (either
passed as an argument or loaded from `),Bve=n(FA,"CODE",{});var OTt=s(Bve);c7r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),f7r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(FA,"CODE",{});var VTt=s(Pve);m7r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),g7r=r(FA,":"),FA.forEach(t),h7r=i($l),de=n($l,"UL",{});var me=s(de);r4=n(me,"LI",{});var FRe=s(r4);Ive=n(FRe,"STRONG",{});var XTt=s(Ive);p7r=r(XTt,"albert"),XTt.forEach(t),u7r=r(FRe," \u2014 "),jH=n(FRe,"A",{href:!0});var zTt=s(jH);_7r=r(zTt,"TFAlbertForTokenClassification"),zTt.forEach(t),b7r=r(FRe," (ALBERT model)"),FRe.forEach(t),v7r=i(me),t4=n(me,"LI",{});var TRe=s(t4);qve=n(TRe,"STRONG",{});var QTt=s(qve);F7r=r(QTt,"bert"),QTt.forEach(t),T7r=r(TRe," \u2014 "),DH=n(TRe,"A",{href:!0});var WTt=s(DH);M7r=r(WTt,"TFBertForTokenClassification"),WTt.forEach(t),E7r=r(TRe," (BERT model)"),TRe.forEach(t),C7r=i(me),a4=n(me,"LI",{});var MRe=s(a4);Nve=n(MRe,"STRONG",{});var HTt=s(Nve);w7r=r(HTt,"camembert"),HTt.forEach(t),A7r=r(MRe," \u2014 "),GH=n(MRe,"A",{href:!0});var UTt=s(GH);y7r=r(UTt,"TFCamembertForTokenClassification"),UTt.forEach(t),L7r=r(MRe," (CamemBERT model)"),MRe.forEach(t),x7r=i(me),n4=n(me,"LI",{});var ERe=s(n4);jve=n(ERe,"STRONG",{});var JTt=s(jve);$7r=r(JTt,"convbert"),JTt.forEach(t),k7r=r(ERe," \u2014 "),OH=n(ERe,"A",{href:!0});var YTt=s(OH);S7r=r(YTt,"TFConvBertForTokenClassification"),YTt.forEach(t),R7r=r(ERe," (ConvBERT model)"),ERe.forEach(t),B7r=i(me),s4=n(me,"LI",{});var CRe=s(s4);Dve=n(CRe,"STRONG",{});var KTt=s(Dve);P7r=r(KTt,"deberta"),KTt.forEach(t),I7r=r(CRe," \u2014 "),VH=n(CRe,"A",{href:!0});var ZTt=s(VH);q7r=r(ZTt,"TFDebertaForTokenClassification"),ZTt.forEach(t),N7r=r(CRe," (DeBERTa model)"),CRe.forEach(t),j7r=i(me),l4=n(me,"LI",{});var wRe=s(l4);Gve=n(wRe,"STRONG",{});var e7t=s(Gve);D7r=r(e7t,"deberta-v2"),e7t.forEach(t),G7r=r(wRe," \u2014 "),XH=n(wRe,"A",{href:!0});var o7t=s(XH);O7r=r(o7t,"TFDebertaV2ForTokenClassification"),o7t.forEach(t),V7r=r(wRe," (DeBERTa-v2 model)"),wRe.forEach(t),X7r=i(me),i4=n(me,"LI",{});var ARe=s(i4);Ove=n(ARe,"STRONG",{});var r7t=s(Ove);z7r=r(r7t,"distilbert"),r7t.forEach(t),Q7r=r(ARe," \u2014 "),zH=n(ARe,"A",{href:!0});var t7t=s(zH);W7r=r(t7t,"TFDistilBertForTokenClassification"),t7t.forEach(t),H7r=r(ARe," (DistilBERT model)"),ARe.forEach(t),U7r=i(me),d4=n(me,"LI",{});var yRe=s(d4);Vve=n(yRe,"STRONG",{});var a7t=s(Vve);J7r=r(a7t,"electra"),a7t.forEach(t),Y7r=r(yRe," \u2014 "),QH=n(yRe,"A",{href:!0});var n7t=s(QH);K7r=r(n7t,"TFElectraForTokenClassification"),n7t.forEach(t),Z7r=r(yRe," (ELECTRA model)"),yRe.forEach(t),eMr=i(me),c4=n(me,"LI",{});var LRe=s(c4);Xve=n(LRe,"STRONG",{});var s7t=s(Xve);oMr=r(s7t,"flaubert"),s7t.forEach(t),rMr=r(LRe," \u2014 "),WH=n(LRe,"A",{href:!0});var l7t=s(WH);tMr=r(l7t,"TFFlaubertForTokenClassification"),l7t.forEach(t),aMr=r(LRe," (FlauBERT model)"),LRe.forEach(t),nMr=i(me),f4=n(me,"LI",{});var xRe=s(f4);zve=n(xRe,"STRONG",{});var i7t=s(zve);sMr=r(i7t,"funnel"),i7t.forEach(t),lMr=r(xRe," \u2014 "),HH=n(xRe,"A",{href:!0});var d7t=s(HH);iMr=r(d7t,"TFFunnelForTokenClassification"),d7t.forEach(t),dMr=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),cMr=i(me),m4=n(me,"LI",{});var $Re=s(m4);Qve=n($Re,"STRONG",{});var c7t=s(Qve);fMr=r(c7t,"layoutlm"),c7t.forEach(t),mMr=r($Re," \u2014 "),UH=n($Re,"A",{href:!0});var f7t=s(UH);gMr=r(f7t,"TFLayoutLMForTokenClassification"),f7t.forEach(t),hMr=r($Re," (LayoutLM model)"),$Re.forEach(t),pMr=i(me),g4=n(me,"LI",{});var kRe=s(g4);Wve=n(kRe,"STRONG",{});var m7t=s(Wve);uMr=r(m7t,"longformer"),m7t.forEach(t),_Mr=r(kRe," \u2014 "),JH=n(kRe,"A",{href:!0});var g7t=s(JH);bMr=r(g7t,"TFLongformerForTokenClassification"),g7t.forEach(t),vMr=r(kRe," (Longformer model)"),kRe.forEach(t),FMr=i(me),h4=n(me,"LI",{});var SRe=s(h4);Hve=n(SRe,"STRONG",{});var h7t=s(Hve);TMr=r(h7t,"mobilebert"),h7t.forEach(t),MMr=r(SRe," \u2014 "),YH=n(SRe,"A",{href:!0});var p7t=s(YH);EMr=r(p7t,"TFMobileBertForTokenClassification"),p7t.forEach(t),CMr=r(SRe," (MobileBERT model)"),SRe.forEach(t),wMr=i(me),p4=n(me,"LI",{});var RRe=s(p4);Uve=n(RRe,"STRONG",{});var u7t=s(Uve);AMr=r(u7t,"mpnet"),u7t.forEach(t),yMr=r(RRe," \u2014 "),KH=n(RRe,"A",{href:!0});var _7t=s(KH);LMr=r(_7t,"TFMPNetForTokenClassification"),_7t.forEach(t),xMr=r(RRe," (MPNet model)"),RRe.forEach(t),$Mr=i(me),u4=n(me,"LI",{});var BRe=s(u4);Jve=n(BRe,"STRONG",{});var b7t=s(Jve);kMr=r(b7t,"rembert"),b7t.forEach(t),SMr=r(BRe," \u2014 "),ZH=n(BRe,"A",{href:!0});var v7t=s(ZH);RMr=r(v7t,"TFRemBertForTokenClassification"),v7t.forEach(t),BMr=r(BRe," (RemBERT model)"),BRe.forEach(t),PMr=i(me),_4=n(me,"LI",{});var PRe=s(_4);Yve=n(PRe,"STRONG",{});var F7t=s(Yve);IMr=r(F7t,"roberta"),F7t.forEach(t),qMr=r(PRe," \u2014 "),eU=n(PRe,"A",{href:!0});var T7t=s(eU);NMr=r(T7t,"TFRobertaForTokenClassification"),T7t.forEach(t),jMr=r(PRe," (RoBERTa model)"),PRe.forEach(t),DMr=i(me),b4=n(me,"LI",{});var IRe=s(b4);Kve=n(IRe,"STRONG",{});var M7t=s(Kve);GMr=r(M7t,"roformer"),M7t.forEach(t),OMr=r(IRe," \u2014 "),oU=n(IRe,"A",{href:!0});var E7t=s(oU);VMr=r(E7t,"TFRoFormerForTokenClassification"),E7t.forEach(t),XMr=r(IRe," (RoFormer model)"),IRe.forEach(t),zMr=i(me),v4=n(me,"LI",{});var qRe=s(v4);Zve=n(qRe,"STRONG",{});var C7t=s(Zve);QMr=r(C7t,"xlm"),C7t.forEach(t),WMr=r(qRe," \u2014 "),rU=n(qRe,"A",{href:!0});var w7t=s(rU);HMr=r(w7t,"TFXLMForTokenClassification"),w7t.forEach(t),UMr=r(qRe," (XLM model)"),qRe.forEach(t),JMr=i(me),F4=n(me,"LI",{});var NRe=s(F4);eFe=n(NRe,"STRONG",{});var A7t=s(eFe);YMr=r(A7t,"xlm-roberta"),A7t.forEach(t),KMr=r(NRe," \u2014 "),tU=n(NRe,"A",{href:!0});var y7t=s(tU);ZMr=r(y7t,"TFXLMRobertaForTokenClassification"),y7t.forEach(t),e4r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),o4r=i(me),T4=n(me,"LI",{});var jRe=s(T4);oFe=n(jRe,"STRONG",{});var L7t=s(oFe);r4r=r(L7t,"xlnet"),L7t.forEach(t),t4r=r(jRe," \u2014 "),aU=n(jRe,"A",{href:!0});var x7t=s(aU);a4r=r(x7t,"TFXLNetForTokenClassification"),x7t.forEach(t),n4r=r(jRe," (XLNet model)"),jRe.forEach(t),me.forEach(t),s4r=i($l),T(M4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Sqe=i(f),_c=n(f,"H2",{class:!0});var jje=s(_c);E4=n(jje,"A",{id:!0,class:!0,href:!0});var $7t=s(E4);rFe=n($7t,"SPAN",{});var k7t=s(rFe);T(N8.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),l4r=i(jje),tFe=n(jje,"SPAN",{});var S7t=s(tFe);i4r=r(S7t,"TFAutoModelForQuestionAnswering"),S7t.forEach(t),jje.forEach(t),Rqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(j8.$$.fragment,kl),d4r=i(kl),bc=n(kl,"P",{});var SZ=s(bc);c4r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nU=n(SZ,"A",{href:!0});var R7t=s(nU);f4r=r(R7t,"from_pretrained()"),R7t.forEach(t),m4r=r(SZ," class method or the "),sU=n(SZ,"A",{href:!0});var B7t=s(sU);g4r=r(B7t,"from_config()"),B7t.forEach(t),h4r=r(SZ,` class
method.`),SZ.forEach(t),p4r=i(kl),D8=n(kl,"P",{});var Dje=s(D8);u4r=r(Dje,"This class cannot be instantiated directly using "),aFe=n(Dje,"CODE",{});var P7t=s(aFe);_4r=r(P7t,"__init__()"),P7t.forEach(t),b4r=r(Dje," (throws an error)."),Dje.forEach(t),v4r=i(kl),It=n(kl,"DIV",{class:!0});var TA=s(It);T(G8.$$.fragment,TA),F4r=i(TA),nFe=n(TA,"P",{});var I7t=s(nFe);T4r=r(I7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I7t.forEach(t),M4r=i(TA),vc=n(TA,"P",{});var RZ=s(vc);E4r=r(RZ,`Note:
Loading a model from its configuration file does `),sFe=n(RZ,"STRONG",{});var q7t=s(sFe);C4r=r(q7t,"not"),q7t.forEach(t),w4r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(RZ,"A",{href:!0});var N7t=s(lU);A4r=r(N7t,"from_pretrained()"),N7t.forEach(t),y4r=r(RZ," to load the model weights."),RZ.forEach(t),L4r=i(TA),T(C4.$$.fragment,TA),TA.forEach(t),x4r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(O8.$$.fragment,Sl),$4r=i(Sl),lFe=n(Sl,"P",{});var j7t=s(lFe);k4r=r(j7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j7t.forEach(t),S4r=i(Sl),cn=n(Sl,"P",{});var MA=s(cn);R4r=r(MA,"The model class to instantiate is selected based on the "),iFe=n(MA,"CODE",{});var D7t=s(iFe);B4r=r(D7t,"model_type"),D7t.forEach(t),P4r=r(MA,` property of the config object (either
passed as an argument or loaded from `),dFe=n(MA,"CODE",{});var G7t=s(dFe);I4r=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),q4r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(MA,"CODE",{});var O7t=s(cFe);N4r=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),j4r=r(MA,":"),MA.forEach(t),D4r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);w4=n(ge,"LI",{});var DRe=s(w4);fFe=n(DRe,"STRONG",{});var V7t=s(fFe);G4r=r(V7t,"albert"),V7t.forEach(t),O4r=r(DRe," \u2014 "),iU=n(DRe,"A",{href:!0});var X7t=s(iU);V4r=r(X7t,"TFAlbertForQuestionAnswering"),X7t.forEach(t),X4r=r(DRe," (ALBERT model)"),DRe.forEach(t),z4r=i(ge),A4=n(ge,"LI",{});var GRe=s(A4);mFe=n(GRe,"STRONG",{});var z7t=s(mFe);Q4r=r(z7t,"bert"),z7t.forEach(t),W4r=r(GRe," \u2014 "),dU=n(GRe,"A",{href:!0});var Q7t=s(dU);H4r=r(Q7t,"TFBertForQuestionAnswering"),Q7t.forEach(t),U4r=r(GRe," (BERT model)"),GRe.forEach(t),J4r=i(ge),y4=n(ge,"LI",{});var ORe=s(y4);gFe=n(ORe,"STRONG",{});var W7t=s(gFe);Y4r=r(W7t,"camembert"),W7t.forEach(t),K4r=r(ORe," \u2014 "),cU=n(ORe,"A",{href:!0});var H7t=s(cU);Z4r=r(H7t,"TFCamembertForQuestionAnswering"),H7t.forEach(t),eEr=r(ORe," (CamemBERT model)"),ORe.forEach(t),oEr=i(ge),L4=n(ge,"LI",{});var VRe=s(L4);hFe=n(VRe,"STRONG",{});var U7t=s(hFe);rEr=r(U7t,"convbert"),U7t.forEach(t),tEr=r(VRe," \u2014 "),fU=n(VRe,"A",{href:!0});var J7t=s(fU);aEr=r(J7t,"TFConvBertForQuestionAnswering"),J7t.forEach(t),nEr=r(VRe," (ConvBERT model)"),VRe.forEach(t),sEr=i(ge),x4=n(ge,"LI",{});var XRe=s(x4);pFe=n(XRe,"STRONG",{});var Y7t=s(pFe);lEr=r(Y7t,"deberta"),Y7t.forEach(t),iEr=r(XRe," \u2014 "),mU=n(XRe,"A",{href:!0});var K7t=s(mU);dEr=r(K7t,"TFDebertaForQuestionAnswering"),K7t.forEach(t),cEr=r(XRe," (DeBERTa model)"),XRe.forEach(t),fEr=i(ge),$4=n(ge,"LI",{});var zRe=s($4);uFe=n(zRe,"STRONG",{});var Z7t=s(uFe);mEr=r(Z7t,"deberta-v2"),Z7t.forEach(t),gEr=r(zRe," \u2014 "),gU=n(zRe,"A",{href:!0});var eMt=s(gU);hEr=r(eMt,"TFDebertaV2ForQuestionAnswering"),eMt.forEach(t),pEr=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),uEr=i(ge),k4=n(ge,"LI",{});var QRe=s(k4);_Fe=n(QRe,"STRONG",{});var oMt=s(_Fe);_Er=r(oMt,"distilbert"),oMt.forEach(t),bEr=r(QRe," \u2014 "),hU=n(QRe,"A",{href:!0});var rMt=s(hU);vEr=r(rMt,"TFDistilBertForQuestionAnswering"),rMt.forEach(t),FEr=r(QRe," (DistilBERT model)"),QRe.forEach(t),TEr=i(ge),S4=n(ge,"LI",{});var WRe=s(S4);bFe=n(WRe,"STRONG",{});var tMt=s(bFe);MEr=r(tMt,"electra"),tMt.forEach(t),EEr=r(WRe," \u2014 "),pU=n(WRe,"A",{href:!0});var aMt=s(pU);CEr=r(aMt,"TFElectraForQuestionAnswering"),aMt.forEach(t),wEr=r(WRe," (ELECTRA model)"),WRe.forEach(t),AEr=i(ge),R4=n(ge,"LI",{});var HRe=s(R4);vFe=n(HRe,"STRONG",{});var nMt=s(vFe);yEr=r(nMt,"flaubert"),nMt.forEach(t),LEr=r(HRe," \u2014 "),uU=n(HRe,"A",{href:!0});var sMt=s(uU);xEr=r(sMt,"TFFlaubertForQuestionAnsweringSimple"),sMt.forEach(t),$Er=r(HRe," (FlauBERT model)"),HRe.forEach(t),kEr=i(ge),B4=n(ge,"LI",{});var URe=s(B4);FFe=n(URe,"STRONG",{});var lMt=s(FFe);SEr=r(lMt,"funnel"),lMt.forEach(t),REr=r(URe," \u2014 "),_U=n(URe,"A",{href:!0});var iMt=s(_U);BEr=r(iMt,"TFFunnelForQuestionAnswering"),iMt.forEach(t),PEr=r(URe," (Funnel Transformer model)"),URe.forEach(t),IEr=i(ge),P4=n(ge,"LI",{});var JRe=s(P4);TFe=n(JRe,"STRONG",{});var dMt=s(TFe);qEr=r(dMt,"gptj"),dMt.forEach(t),NEr=r(JRe," \u2014 "),bU=n(JRe,"A",{href:!0});var cMt=s(bU);jEr=r(cMt,"TFGPTJForQuestionAnswering"),cMt.forEach(t),DEr=r(JRe," (GPT-J model)"),JRe.forEach(t),GEr=i(ge),I4=n(ge,"LI",{});var YRe=s(I4);MFe=n(YRe,"STRONG",{});var fMt=s(MFe);OEr=r(fMt,"longformer"),fMt.forEach(t),VEr=r(YRe," \u2014 "),vU=n(YRe,"A",{href:!0});var mMt=s(vU);XEr=r(mMt,"TFLongformerForQuestionAnswering"),mMt.forEach(t),zEr=r(YRe," (Longformer model)"),YRe.forEach(t),QEr=i(ge),q4=n(ge,"LI",{});var KRe=s(q4);EFe=n(KRe,"STRONG",{});var gMt=s(EFe);WEr=r(gMt,"mobilebert"),gMt.forEach(t),HEr=r(KRe," \u2014 "),FU=n(KRe,"A",{href:!0});var hMt=s(FU);UEr=r(hMt,"TFMobileBertForQuestionAnswering"),hMt.forEach(t),JEr=r(KRe," (MobileBERT model)"),KRe.forEach(t),YEr=i(ge),N4=n(ge,"LI",{});var ZRe=s(N4);CFe=n(ZRe,"STRONG",{});var pMt=s(CFe);KEr=r(pMt,"mpnet"),pMt.forEach(t),ZEr=r(ZRe," \u2014 "),TU=n(ZRe,"A",{href:!0});var uMt=s(TU);eCr=r(uMt,"TFMPNetForQuestionAnswering"),uMt.forEach(t),oCr=r(ZRe," (MPNet model)"),ZRe.forEach(t),rCr=i(ge),j4=n(ge,"LI",{});var eBe=s(j4);wFe=n(eBe,"STRONG",{});var _Mt=s(wFe);tCr=r(_Mt,"rembert"),_Mt.forEach(t),aCr=r(eBe," \u2014 "),MU=n(eBe,"A",{href:!0});var bMt=s(MU);nCr=r(bMt,"TFRemBertForQuestionAnswering"),bMt.forEach(t),sCr=r(eBe," (RemBERT model)"),eBe.forEach(t),lCr=i(ge),D4=n(ge,"LI",{});var oBe=s(D4);AFe=n(oBe,"STRONG",{});var vMt=s(AFe);iCr=r(vMt,"roberta"),vMt.forEach(t),dCr=r(oBe," \u2014 "),EU=n(oBe,"A",{href:!0});var FMt=s(EU);cCr=r(FMt,"TFRobertaForQuestionAnswering"),FMt.forEach(t),fCr=r(oBe," (RoBERTa model)"),oBe.forEach(t),mCr=i(ge),G4=n(ge,"LI",{});var rBe=s(G4);yFe=n(rBe,"STRONG",{});var TMt=s(yFe);gCr=r(TMt,"roformer"),TMt.forEach(t),hCr=r(rBe," \u2014 "),CU=n(rBe,"A",{href:!0});var MMt=s(CU);pCr=r(MMt,"TFRoFormerForQuestionAnswering"),MMt.forEach(t),uCr=r(rBe," (RoFormer model)"),rBe.forEach(t),_Cr=i(ge),O4=n(ge,"LI",{});var tBe=s(O4);LFe=n(tBe,"STRONG",{});var EMt=s(LFe);bCr=r(EMt,"xlm"),EMt.forEach(t),vCr=r(tBe," \u2014 "),wU=n(tBe,"A",{href:!0});var CMt=s(wU);FCr=r(CMt,"TFXLMForQuestionAnsweringSimple"),CMt.forEach(t),TCr=r(tBe," (XLM model)"),tBe.forEach(t),MCr=i(ge),V4=n(ge,"LI",{});var aBe=s(V4);xFe=n(aBe,"STRONG",{});var wMt=s(xFe);ECr=r(wMt,"xlm-roberta"),wMt.forEach(t),CCr=r(aBe," \u2014 "),AU=n(aBe,"A",{href:!0});var AMt=s(AU);wCr=r(AMt,"TFXLMRobertaForQuestionAnswering"),AMt.forEach(t),ACr=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),yCr=i(ge),X4=n(ge,"LI",{});var nBe=s(X4);$Fe=n(nBe,"STRONG",{});var yMt=s($Fe);LCr=r(yMt,"xlnet"),yMt.forEach(t),xCr=r(nBe," \u2014 "),yU=n(nBe,"A",{href:!0});var LMt=s(yU);$Cr=r(LMt,"TFXLNetForQuestionAnsweringSimple"),LMt.forEach(t),kCr=r(nBe," (XLNet model)"),nBe.forEach(t),ge.forEach(t),SCr=i(Sl),T(z4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Bqe=i(f),Fc=n(f,"H2",{class:!0});var Gje=s(Fc);Q4=n(Gje,"A",{id:!0,class:!0,href:!0});var xMt=s(Q4);kFe=n(xMt,"SPAN",{});var $Mt=s(kFe);T(V8.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),RCr=i(Gje),SFe=n(Gje,"SPAN",{});var kMt=s(SFe);BCr=r(kMt,"TFAutoModelForVision2Seq"),kMt.forEach(t),Gje.forEach(t),Pqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(X8.$$.fragment,Rl),PCr=i(Rl),Tc=n(Rl,"P",{});var BZ=s(Tc);ICr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LU=n(BZ,"A",{href:!0});var SMt=s(LU);qCr=r(SMt,"from_pretrained()"),SMt.forEach(t),NCr=r(BZ," class method or the "),xU=n(BZ,"A",{href:!0});var RMt=s(xU);jCr=r(RMt,"from_config()"),RMt.forEach(t),DCr=r(BZ,` class
method.`),BZ.forEach(t),GCr=i(Rl),z8=n(Rl,"P",{});var Oje=s(z8);OCr=r(Oje,"This class cannot be instantiated directly using "),RFe=n(Oje,"CODE",{});var BMt=s(RFe);VCr=r(BMt,"__init__()"),BMt.forEach(t),XCr=r(Oje," (throws an error)."),Oje.forEach(t),zCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var EA=s(qt);T(Q8.$$.fragment,EA),QCr=i(EA),BFe=n(EA,"P",{});var PMt=s(BFe);WCr=r(PMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PMt.forEach(t),HCr=i(EA),Mc=n(EA,"P",{});var PZ=s(Mc);UCr=r(PZ,`Note:
Loading a model from its configuration file does `),PFe=n(PZ,"STRONG",{});var IMt=s(PFe);JCr=r(IMt,"not"),IMt.forEach(t),YCr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(PZ,"A",{href:!0});var qMt=s($U);KCr=r(qMt,"from_pretrained()"),qMt.forEach(t),ZCr=r(PZ," to load the model weights."),PZ.forEach(t),e3r=i(EA),T(W4.$$.fragment,EA),EA.forEach(t),o3r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(W8.$$.fragment,Bl),r3r=i(Bl),IFe=n(Bl,"P",{});var NMt=s(IFe);t3r=r(NMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NMt.forEach(t),a3r=i(Bl),fn=n(Bl,"P",{});var CA=s(fn);n3r=r(CA,"The model class to instantiate is selected based on the "),qFe=n(CA,"CODE",{});var jMt=s(qFe);s3r=r(jMt,"model_type"),jMt.forEach(t),l3r=r(CA,` property of the config object (either
passed as an argument or loaded from `),NFe=n(CA,"CODE",{});var DMt=s(NFe);i3r=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),d3r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(CA,"CODE",{});var GMt=s(jFe);c3r=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),f3r=r(CA,":"),CA.forEach(t),m3r=i(Bl),DFe=n(Bl,"UL",{});var OMt=s(DFe);H4=n(OMt,"LI",{});var sBe=s(H4);GFe=n(sBe,"STRONG",{});var VMt=s(GFe);g3r=r(VMt,"vision-encoder-decoder"),VMt.forEach(t),h3r=r(sBe," \u2014 "),kU=n(sBe,"A",{href:!0});var XMt=s(kU);p3r=r(XMt,"TFVisionEncoderDecoderModel"),XMt.forEach(t),u3r=r(sBe," (Vision Encoder decoder model)"),sBe.forEach(t),OMt.forEach(t),_3r=i(Bl),T(U4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Iqe=i(f),Ec=n(f,"H2",{class:!0});var Vje=s(Ec);J4=n(Vje,"A",{id:!0,class:!0,href:!0});var zMt=s(J4);OFe=n(zMt,"SPAN",{});var QMt=s(OFe);T(H8.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),b3r=i(Vje),VFe=n(Vje,"SPAN",{});var WMt=s(VFe);v3r=r(WMt,"TFAutoModelForSpeechSeq2Seq"),WMt.forEach(t),Vje.forEach(t),qqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(U8.$$.fragment,Pl),F3r=i(Pl),Cc=n(Pl,"P",{});var IZ=s(Cc);T3r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SU=n(IZ,"A",{href:!0});var HMt=s(SU);M3r=r(HMt,"from_pretrained()"),HMt.forEach(t),E3r=r(IZ," class method or the "),RU=n(IZ,"A",{href:!0});var UMt=s(RU);C3r=r(UMt,"from_config()"),UMt.forEach(t),w3r=r(IZ,` class
method.`),IZ.forEach(t),A3r=i(Pl),J8=n(Pl,"P",{});var Xje=s(J8);y3r=r(Xje,"This class cannot be instantiated directly using "),XFe=n(Xje,"CODE",{});var JMt=s(XFe);L3r=r(JMt,"__init__()"),JMt.forEach(t),x3r=r(Xje," (throws an error)."),Xje.forEach(t),$3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var wA=s(Nt);T(Y8.$$.fragment,wA),k3r=i(wA),zFe=n(wA,"P",{});var YMt=s(zFe);S3r=r(YMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YMt.forEach(t),R3r=i(wA),wc=n(wA,"P",{});var qZ=s(wc);B3r=r(qZ,`Note:
Loading a model from its configuration file does `),QFe=n(qZ,"STRONG",{});var KMt=s(QFe);P3r=r(KMt,"not"),KMt.forEach(t),I3r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(qZ,"A",{href:!0});var ZMt=s(BU);q3r=r(ZMt,"from_pretrained()"),ZMt.forEach(t),N3r=r(qZ," to load the model weights."),qZ.forEach(t),j3r=i(wA),T(Y4.$$.fragment,wA),wA.forEach(t),D3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(K8.$$.fragment,Il),G3r=i(Il),WFe=n(Il,"P",{});var e4t=s(WFe);O3r=r(e4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e4t.forEach(t),V3r=i(Il),mn=n(Il,"P",{});var AA=s(mn);X3r=r(AA,"The model class to instantiate is selected based on the "),HFe=n(AA,"CODE",{});var o4t=s(HFe);z3r=r(o4t,"model_type"),o4t.forEach(t),Q3r=r(AA,` property of the config object (either
passed as an argument or loaded from `),UFe=n(AA,"CODE",{});var r4t=s(UFe);W3r=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),H3r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(AA,"CODE",{});var t4t=s(JFe);U3r=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),J3r=r(AA,":"),AA.forEach(t),Y3r=i(Il),YFe=n(Il,"UL",{});var a4t=s(YFe);K4=n(a4t,"LI",{});var lBe=s(K4);KFe=n(lBe,"STRONG",{});var n4t=s(KFe);K3r=r(n4t,"speech_to_text"),n4t.forEach(t),Z3r=r(lBe," \u2014 "),PU=n(lBe,"A",{href:!0});var s4t=s(PU);ewr=r(s4t,"TFSpeech2TextForConditionalGeneration"),s4t.forEach(t),owr=r(lBe," (Speech2Text model)"),lBe.forEach(t),a4t.forEach(t),rwr=i(Il),T(Z4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Nqe=i(f),Ac=n(f,"H2",{class:!0});var zje=s(Ac);eE=n(zje,"A",{id:!0,class:!0,href:!0});var l4t=s(eE);ZFe=n(l4t,"SPAN",{});var i4t=s(ZFe);T(Z8.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),twr=i(zje),e0e=n(zje,"SPAN",{});var d4t=s(e0e);awr=r(d4t,"FlaxAutoModel"),d4t.forEach(t),zje.forEach(t),jqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(ex.$$.fragment,ql),nwr=i(ql),yc=n(ql,"P",{});var NZ=s(yc);swr=r(NZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=n(NZ,"A",{href:!0});var c4t=s(IU);lwr=r(c4t,"from_pretrained()"),c4t.forEach(t),iwr=r(NZ," class method or the "),qU=n(NZ,"A",{href:!0});var f4t=s(qU);dwr=r(f4t,"from_config()"),f4t.forEach(t),cwr=r(NZ,` class
method.`),NZ.forEach(t),fwr=i(ql),ox=n(ql,"P",{});var Qje=s(ox);mwr=r(Qje,"This class cannot be instantiated directly using "),o0e=n(Qje,"CODE",{});var m4t=s(o0e);gwr=r(m4t,"__init__()"),m4t.forEach(t),hwr=r(Qje," (throws an error)."),Qje.forEach(t),pwr=i(ql),jt=n(ql,"DIV",{class:!0});var yA=s(jt);T(rx.$$.fragment,yA),uwr=i(yA),r0e=n(yA,"P",{});var g4t=s(r0e);_wr=r(g4t,"Instantiates one of the base model classes of the library from a configuration."),g4t.forEach(t),bwr=i(yA),Lc=n(yA,"P",{});var jZ=s(Lc);vwr=r(jZ,`Note:
Loading a model from its configuration file does `),t0e=n(jZ,"STRONG",{});var h4t=s(t0e);Fwr=r(h4t,"not"),h4t.forEach(t),Twr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(jZ,"A",{href:!0});var p4t=s(NU);Mwr=r(p4t,"from_pretrained()"),p4t.forEach(t),Ewr=r(jZ," to load the model weights."),jZ.forEach(t),Cwr=i(yA),T(oE.$$.fragment,yA),yA.forEach(t),wwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(tx.$$.fragment,Nl),Awr=i(Nl),a0e=n(Nl,"P",{});var u4t=s(a0e);ywr=r(u4t,"Instantiate one of the base model classes of the library from a pretrained model."),u4t.forEach(t),Lwr=i(Nl),gn=n(Nl,"P",{});var LA=s(gn);xwr=r(LA,"The model class to instantiate is selected based on the "),n0e=n(LA,"CODE",{});var _4t=s(n0e);$wr=r(_4t,"model_type"),_4t.forEach(t),kwr=r(LA,` property of the config object (either
passed as an argument or loaded from `),s0e=n(LA,"CODE",{});var b4t=s(s0e);Swr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),Rwr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(LA,"CODE",{});var v4t=s(l0e);Bwr=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),Pwr=r(LA,":"),LA.forEach(t),Iwr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);rE=n(ne,"LI",{});var iBe=s(rE);i0e=n(iBe,"STRONG",{});var F4t=s(i0e);qwr=r(F4t,"albert"),F4t.forEach(t),Nwr=r(iBe," \u2014 "),jU=n(iBe,"A",{href:!0});var T4t=s(jU);jwr=r(T4t,"FlaxAlbertModel"),T4t.forEach(t),Dwr=r(iBe," (ALBERT model)"),iBe.forEach(t),Gwr=i(ne),tE=n(ne,"LI",{});var dBe=s(tE);d0e=n(dBe,"STRONG",{});var M4t=s(d0e);Owr=r(M4t,"bart"),M4t.forEach(t),Vwr=r(dBe," \u2014 "),DU=n(dBe,"A",{href:!0});var E4t=s(DU);Xwr=r(E4t,"FlaxBartModel"),E4t.forEach(t),zwr=r(dBe," (BART model)"),dBe.forEach(t),Qwr=i(ne),aE=n(ne,"LI",{});var cBe=s(aE);c0e=n(cBe,"STRONG",{});var C4t=s(c0e);Wwr=r(C4t,"beit"),C4t.forEach(t),Hwr=r(cBe," \u2014 "),GU=n(cBe,"A",{href:!0});var w4t=s(GU);Uwr=r(w4t,"FlaxBeitModel"),w4t.forEach(t),Jwr=r(cBe," (BEiT model)"),cBe.forEach(t),Ywr=i(ne),nE=n(ne,"LI",{});var fBe=s(nE);f0e=n(fBe,"STRONG",{});var A4t=s(f0e);Kwr=r(A4t,"bert"),A4t.forEach(t),Zwr=r(fBe," \u2014 "),OU=n(fBe,"A",{href:!0});var y4t=s(OU);eAr=r(y4t,"FlaxBertModel"),y4t.forEach(t),oAr=r(fBe," (BERT model)"),fBe.forEach(t),rAr=i(ne),sE=n(ne,"LI",{});var mBe=s(sE);m0e=n(mBe,"STRONG",{});var L4t=s(m0e);tAr=r(L4t,"big_bird"),L4t.forEach(t),aAr=r(mBe," \u2014 "),VU=n(mBe,"A",{href:!0});var x4t=s(VU);nAr=r(x4t,"FlaxBigBirdModel"),x4t.forEach(t),sAr=r(mBe," (BigBird model)"),mBe.forEach(t),lAr=i(ne),lE=n(ne,"LI",{});var gBe=s(lE);g0e=n(gBe,"STRONG",{});var $4t=s(g0e);iAr=r($4t,"blenderbot"),$4t.forEach(t),dAr=r(gBe," \u2014 "),XU=n(gBe,"A",{href:!0});var k4t=s(XU);cAr=r(k4t,"FlaxBlenderbotModel"),k4t.forEach(t),fAr=r(gBe," (Blenderbot model)"),gBe.forEach(t),mAr=i(ne),iE=n(ne,"LI",{});var hBe=s(iE);h0e=n(hBe,"STRONG",{});var S4t=s(h0e);gAr=r(S4t,"blenderbot-small"),S4t.forEach(t),hAr=r(hBe," \u2014 "),zU=n(hBe,"A",{href:!0});var R4t=s(zU);pAr=r(R4t,"FlaxBlenderbotSmallModel"),R4t.forEach(t),uAr=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),_Ar=i(ne),dE=n(ne,"LI",{});var pBe=s(dE);p0e=n(pBe,"STRONG",{});var B4t=s(p0e);bAr=r(B4t,"clip"),B4t.forEach(t),vAr=r(pBe," \u2014 "),QU=n(pBe,"A",{href:!0});var P4t=s(QU);FAr=r(P4t,"FlaxCLIPModel"),P4t.forEach(t),TAr=r(pBe," (CLIP model)"),pBe.forEach(t),MAr=i(ne),cE=n(ne,"LI",{});var uBe=s(cE);u0e=n(uBe,"STRONG",{});var I4t=s(u0e);EAr=r(I4t,"distilbert"),I4t.forEach(t),CAr=r(uBe," \u2014 "),WU=n(uBe,"A",{href:!0});var q4t=s(WU);wAr=r(q4t,"FlaxDistilBertModel"),q4t.forEach(t),AAr=r(uBe," (DistilBERT model)"),uBe.forEach(t),yAr=i(ne),fE=n(ne,"LI",{});var _Be=s(fE);_0e=n(_Be,"STRONG",{});var N4t=s(_0e);LAr=r(N4t,"electra"),N4t.forEach(t),xAr=r(_Be," \u2014 "),HU=n(_Be,"A",{href:!0});var j4t=s(HU);$Ar=r(j4t,"FlaxElectraModel"),j4t.forEach(t),kAr=r(_Be," (ELECTRA model)"),_Be.forEach(t),SAr=i(ne),mE=n(ne,"LI",{});var bBe=s(mE);b0e=n(bBe,"STRONG",{});var D4t=s(b0e);RAr=r(D4t,"gpt2"),D4t.forEach(t),BAr=r(bBe," \u2014 "),UU=n(bBe,"A",{href:!0});var G4t=s(UU);PAr=r(G4t,"FlaxGPT2Model"),G4t.forEach(t),IAr=r(bBe," (OpenAI GPT-2 model)"),bBe.forEach(t),qAr=i(ne),gE=n(ne,"LI",{});var vBe=s(gE);v0e=n(vBe,"STRONG",{});var O4t=s(v0e);NAr=r(O4t,"gpt_neo"),O4t.forEach(t),jAr=r(vBe," \u2014 "),JU=n(vBe,"A",{href:!0});var V4t=s(JU);DAr=r(V4t,"FlaxGPTNeoModel"),V4t.forEach(t),GAr=r(vBe," (GPT Neo model)"),vBe.forEach(t),OAr=i(ne),hE=n(ne,"LI",{});var FBe=s(hE);F0e=n(FBe,"STRONG",{});var X4t=s(F0e);VAr=r(X4t,"gptj"),X4t.forEach(t),XAr=r(FBe," \u2014 "),YU=n(FBe,"A",{href:!0});var z4t=s(YU);zAr=r(z4t,"FlaxGPTJModel"),z4t.forEach(t),QAr=r(FBe," (GPT-J model)"),FBe.forEach(t),WAr=i(ne),pE=n(ne,"LI",{});var TBe=s(pE);T0e=n(TBe,"STRONG",{});var Q4t=s(T0e);HAr=r(Q4t,"marian"),Q4t.forEach(t),UAr=r(TBe," \u2014 "),KU=n(TBe,"A",{href:!0});var W4t=s(KU);JAr=r(W4t,"FlaxMarianModel"),W4t.forEach(t),YAr=r(TBe," (Marian model)"),TBe.forEach(t),KAr=i(ne),uE=n(ne,"LI",{});var MBe=s(uE);M0e=n(MBe,"STRONG",{});var H4t=s(M0e);ZAr=r(H4t,"mbart"),H4t.forEach(t),e6r=r(MBe," \u2014 "),ZU=n(MBe,"A",{href:!0});var U4t=s(ZU);o6r=r(U4t,"FlaxMBartModel"),U4t.forEach(t),r6r=r(MBe," (mBART model)"),MBe.forEach(t),t6r=i(ne),_E=n(ne,"LI",{});var EBe=s(_E);E0e=n(EBe,"STRONG",{});var J4t=s(E0e);a6r=r(J4t,"mt5"),J4t.forEach(t),n6r=r(EBe," \u2014 "),eJ=n(EBe,"A",{href:!0});var Y4t=s(eJ);s6r=r(Y4t,"FlaxMT5Model"),Y4t.forEach(t),l6r=r(EBe," (mT5 model)"),EBe.forEach(t),i6r=i(ne),bE=n(ne,"LI",{});var CBe=s(bE);C0e=n(CBe,"STRONG",{});var K4t=s(C0e);d6r=r(K4t,"pegasus"),K4t.forEach(t),c6r=r(CBe," \u2014 "),oJ=n(CBe,"A",{href:!0});var Z4t=s(oJ);f6r=r(Z4t,"FlaxPegasusModel"),Z4t.forEach(t),m6r=r(CBe," (Pegasus model)"),CBe.forEach(t),g6r=i(ne),vE=n(ne,"LI",{});var wBe=s(vE);w0e=n(wBe,"STRONG",{});var eEt=s(w0e);h6r=r(eEt,"roberta"),eEt.forEach(t),p6r=r(wBe," \u2014 "),rJ=n(wBe,"A",{href:!0});var oEt=s(rJ);u6r=r(oEt,"FlaxRobertaModel"),oEt.forEach(t),_6r=r(wBe," (RoBERTa model)"),wBe.forEach(t),b6r=i(ne),FE=n(ne,"LI",{});var ABe=s(FE);A0e=n(ABe,"STRONG",{});var rEt=s(A0e);v6r=r(rEt,"roformer"),rEt.forEach(t),F6r=r(ABe," \u2014 "),tJ=n(ABe,"A",{href:!0});var tEt=s(tJ);T6r=r(tEt,"FlaxRoFormerModel"),tEt.forEach(t),M6r=r(ABe," (RoFormer model)"),ABe.forEach(t),E6r=i(ne),TE=n(ne,"LI",{});var yBe=s(TE);y0e=n(yBe,"STRONG",{});var aEt=s(y0e);C6r=r(aEt,"t5"),aEt.forEach(t),w6r=r(yBe," \u2014 "),aJ=n(yBe,"A",{href:!0});var nEt=s(aJ);A6r=r(nEt,"FlaxT5Model"),nEt.forEach(t),y6r=r(yBe," (T5 model)"),yBe.forEach(t),L6r=i(ne),ME=n(ne,"LI",{});var LBe=s(ME);L0e=n(LBe,"STRONG",{});var sEt=s(L0e);x6r=r(sEt,"vision-text-dual-encoder"),sEt.forEach(t),$6r=r(LBe," \u2014 "),nJ=n(LBe,"A",{href:!0});var lEt=s(nJ);k6r=r(lEt,"FlaxVisionTextDualEncoderModel"),lEt.forEach(t),S6r=r(LBe," (VisionTextDualEncoder model)"),LBe.forEach(t),R6r=i(ne),EE=n(ne,"LI",{});var xBe=s(EE);x0e=n(xBe,"STRONG",{});var iEt=s(x0e);B6r=r(iEt,"vit"),iEt.forEach(t),P6r=r(xBe," \u2014 "),sJ=n(xBe,"A",{href:!0});var dEt=s(sJ);I6r=r(dEt,"FlaxViTModel"),dEt.forEach(t),q6r=r(xBe," (ViT model)"),xBe.forEach(t),N6r=i(ne),CE=n(ne,"LI",{});var $Be=s(CE);$0e=n($Be,"STRONG",{});var cEt=s($0e);j6r=r(cEt,"wav2vec2"),cEt.forEach(t),D6r=r($Be," \u2014 "),lJ=n($Be,"A",{href:!0});var fEt=s(lJ);G6r=r(fEt,"FlaxWav2Vec2Model"),fEt.forEach(t),O6r=r($Be," (Wav2Vec2 model)"),$Be.forEach(t),V6r=i(ne),wE=n(ne,"LI",{});var kBe=s(wE);k0e=n(kBe,"STRONG",{});var mEt=s(k0e);X6r=r(mEt,"xglm"),mEt.forEach(t),z6r=r(kBe," \u2014 "),iJ=n(kBe,"A",{href:!0});var gEt=s(iJ);Q6r=r(gEt,"FlaxXGLMModel"),gEt.forEach(t),W6r=r(kBe," (XGLM model)"),kBe.forEach(t),H6r=i(ne),AE=n(ne,"LI",{});var SBe=s(AE);S0e=n(SBe,"STRONG",{});var hEt=s(S0e);U6r=r(hEt,"xlm-roberta"),hEt.forEach(t),J6r=r(SBe," \u2014 "),dJ=n(SBe,"A",{href:!0});var pEt=s(dJ);Y6r=r(pEt,"FlaxXLMRobertaModel"),pEt.forEach(t),K6r=r(SBe," (XLM-RoBERTa model)"),SBe.forEach(t),ne.forEach(t),Z6r=i(Nl),T(yE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Dqe=i(f),xc=n(f,"H2",{class:!0});var Wje=s(xc);LE=n(Wje,"A",{id:!0,class:!0,href:!0});var uEt=s(LE);R0e=n(uEt,"SPAN",{});var _Et=s(R0e);T(ax.$$.fragment,_Et),_Et.forEach(t),uEt.forEach(t),eyr=i(Wje),B0e=n(Wje,"SPAN",{});var bEt=s(B0e);oyr=r(bEt,"FlaxAutoModelForCausalLM"),bEt.forEach(t),Wje.forEach(t),Gqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(nx.$$.fragment,jl),ryr=i(jl),$c=n(jl,"P",{});var DZ=s($c);tyr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cJ=n(DZ,"A",{href:!0});var vEt=s(cJ);ayr=r(vEt,"from_pretrained()"),vEt.forEach(t),nyr=r(DZ," class method or the "),fJ=n(DZ,"A",{href:!0});var FEt=s(fJ);syr=r(FEt,"from_config()"),FEt.forEach(t),lyr=r(DZ,` class
method.`),DZ.forEach(t),iyr=i(jl),sx=n(jl,"P",{});var Hje=s(sx);dyr=r(Hje,"This class cannot be instantiated directly using "),P0e=n(Hje,"CODE",{});var TEt=s(P0e);cyr=r(TEt,"__init__()"),TEt.forEach(t),fyr=r(Hje," (throws an error)."),Hje.forEach(t),myr=i(jl),Dt=n(jl,"DIV",{class:!0});var xA=s(Dt);T(lx.$$.fragment,xA),gyr=i(xA),I0e=n(xA,"P",{});var MEt=s(I0e);hyr=r(MEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MEt.forEach(t),pyr=i(xA),kc=n(xA,"P",{});var GZ=s(kc);uyr=r(GZ,`Note:
Loading a model from its configuration file does `),q0e=n(GZ,"STRONG",{});var EEt=s(q0e);_yr=r(EEt,"not"),EEt.forEach(t),byr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(GZ,"A",{href:!0});var CEt=s(mJ);vyr=r(CEt,"from_pretrained()"),CEt.forEach(t),Fyr=r(GZ," to load the model weights."),GZ.forEach(t),Tyr=i(xA),T(xE.$$.fragment,xA),xA.forEach(t),Myr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(ix.$$.fragment,Dl),Eyr=i(Dl),N0e=n(Dl,"P",{});var wEt=s(N0e);Cyr=r(wEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wEt.forEach(t),wyr=i(Dl),hn=n(Dl,"P",{});var $A=s(hn);Ayr=r($A,"The model class to instantiate is selected based on the "),j0e=n($A,"CODE",{});var AEt=s(j0e);yyr=r(AEt,"model_type"),AEt.forEach(t),Lyr=r($A,` property of the config object (either
passed as an argument or loaded from `),D0e=n($A,"CODE",{});var yEt=s(D0e);xyr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),$yr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n($A,"CODE",{});var LEt=s(G0e);kyr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),Syr=r($A,":"),$A.forEach(t),Ryr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);$E=n(Oe,"LI",{});var RBe=s($E);O0e=n(RBe,"STRONG",{});var xEt=s(O0e);Byr=r(xEt,"bart"),xEt.forEach(t),Pyr=r(RBe," \u2014 "),gJ=n(RBe,"A",{href:!0});var $Et=s(gJ);Iyr=r($Et,"FlaxBartForCausalLM"),$Et.forEach(t),qyr=r(RBe," (BART model)"),RBe.forEach(t),Nyr=i(Oe),kE=n(Oe,"LI",{});var BBe=s(kE);V0e=n(BBe,"STRONG",{});var kEt=s(V0e);jyr=r(kEt,"bert"),kEt.forEach(t),Dyr=r(BBe," \u2014 "),hJ=n(BBe,"A",{href:!0});var SEt=s(hJ);Gyr=r(SEt,"FlaxBertForCausalLM"),SEt.forEach(t),Oyr=r(BBe," (BERT model)"),BBe.forEach(t),Vyr=i(Oe),SE=n(Oe,"LI",{});var PBe=s(SE);X0e=n(PBe,"STRONG",{});var REt=s(X0e);Xyr=r(REt,"big_bird"),REt.forEach(t),zyr=r(PBe," \u2014 "),pJ=n(PBe,"A",{href:!0});var BEt=s(pJ);Qyr=r(BEt,"FlaxBigBirdForCausalLM"),BEt.forEach(t),Wyr=r(PBe," (BigBird model)"),PBe.forEach(t),Hyr=i(Oe),RE=n(Oe,"LI",{});var IBe=s(RE);z0e=n(IBe,"STRONG",{});var PEt=s(z0e);Uyr=r(PEt,"electra"),PEt.forEach(t),Jyr=r(IBe," \u2014 "),uJ=n(IBe,"A",{href:!0});var IEt=s(uJ);Yyr=r(IEt,"FlaxElectraForCausalLM"),IEt.forEach(t),Kyr=r(IBe," (ELECTRA model)"),IBe.forEach(t),Zyr=i(Oe),BE=n(Oe,"LI",{});var qBe=s(BE);Q0e=n(qBe,"STRONG",{});var qEt=s(Q0e);eLr=r(qEt,"gpt2"),qEt.forEach(t),oLr=r(qBe," \u2014 "),_J=n(qBe,"A",{href:!0});var NEt=s(_J);rLr=r(NEt,"FlaxGPT2LMHeadModel"),NEt.forEach(t),tLr=r(qBe," (OpenAI GPT-2 model)"),qBe.forEach(t),aLr=i(Oe),PE=n(Oe,"LI",{});var NBe=s(PE);W0e=n(NBe,"STRONG",{});var jEt=s(W0e);nLr=r(jEt,"gpt_neo"),jEt.forEach(t),sLr=r(NBe," \u2014 "),bJ=n(NBe,"A",{href:!0});var DEt=s(bJ);lLr=r(DEt,"FlaxGPTNeoForCausalLM"),DEt.forEach(t),iLr=r(NBe," (GPT Neo model)"),NBe.forEach(t),dLr=i(Oe),IE=n(Oe,"LI",{});var jBe=s(IE);H0e=n(jBe,"STRONG",{});var GEt=s(H0e);cLr=r(GEt,"gptj"),GEt.forEach(t),fLr=r(jBe," \u2014 "),vJ=n(jBe,"A",{href:!0});var OEt=s(vJ);mLr=r(OEt,"FlaxGPTJForCausalLM"),OEt.forEach(t),gLr=r(jBe," (GPT-J model)"),jBe.forEach(t),hLr=i(Oe),qE=n(Oe,"LI",{});var DBe=s(qE);U0e=n(DBe,"STRONG",{});var VEt=s(U0e);pLr=r(VEt,"roberta"),VEt.forEach(t),uLr=r(DBe," \u2014 "),FJ=n(DBe,"A",{href:!0});var XEt=s(FJ);_Lr=r(XEt,"FlaxRobertaForCausalLM"),XEt.forEach(t),bLr=r(DBe," (RoBERTa model)"),DBe.forEach(t),vLr=i(Oe),NE=n(Oe,"LI",{});var GBe=s(NE);J0e=n(GBe,"STRONG",{});var zEt=s(J0e);FLr=r(zEt,"xglm"),zEt.forEach(t),TLr=r(GBe," \u2014 "),TJ=n(GBe,"A",{href:!0});var QEt=s(TJ);MLr=r(QEt,"FlaxXGLMForCausalLM"),QEt.forEach(t),ELr=r(GBe," (XGLM model)"),GBe.forEach(t),Oe.forEach(t),CLr=i(Dl),T(jE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Oqe=i(f),Sc=n(f,"H2",{class:!0});var Uje=s(Sc);DE=n(Uje,"A",{id:!0,class:!0,href:!0});var WEt=s(DE);Y0e=n(WEt,"SPAN",{});var HEt=s(Y0e);T(dx.$$.fragment,HEt),HEt.forEach(t),WEt.forEach(t),wLr=i(Uje),K0e=n(Uje,"SPAN",{});var UEt=s(K0e);ALr=r(UEt,"FlaxAutoModelForPreTraining"),UEt.forEach(t),Uje.forEach(t),Vqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(cx.$$.fragment,Gl),yLr=i(Gl),Rc=n(Gl,"P",{});var OZ=s(Rc);LLr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MJ=n(OZ,"A",{href:!0});var JEt=s(MJ);xLr=r(JEt,"from_pretrained()"),JEt.forEach(t),$Lr=r(OZ," class method or the "),EJ=n(OZ,"A",{href:!0});var YEt=s(EJ);kLr=r(YEt,"from_config()"),YEt.forEach(t),SLr=r(OZ,` class
method.`),OZ.forEach(t),RLr=i(Gl),fx=n(Gl,"P",{});var Jje=s(fx);BLr=r(Jje,"This class cannot be instantiated directly using "),Z0e=n(Jje,"CODE",{});var KEt=s(Z0e);PLr=r(KEt,"__init__()"),KEt.forEach(t),ILr=r(Jje," (throws an error)."),Jje.forEach(t),qLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var kA=s(Gt);T(mx.$$.fragment,kA),NLr=i(kA),eTe=n(kA,"P",{});var ZEt=s(eTe);jLr=r(ZEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZEt.forEach(t),DLr=i(kA),Bc=n(kA,"P",{});var VZ=s(Bc);GLr=r(VZ,`Note:
Loading a model from its configuration file does `),oTe=n(VZ,"STRONG",{});var eCt=s(oTe);OLr=r(eCt,"not"),eCt.forEach(t),VLr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(VZ,"A",{href:!0});var oCt=s(CJ);XLr=r(oCt,"from_pretrained()"),oCt.forEach(t),zLr=r(VZ," to load the model weights."),VZ.forEach(t),QLr=i(kA),T(GE.$$.fragment,kA),kA.forEach(t),WLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(gx.$$.fragment,Ol),HLr=i(Ol),rTe=n(Ol,"P",{});var rCt=s(rTe);ULr=r(rCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rCt.forEach(t),JLr=i(Ol),pn=n(Ol,"P",{});var SA=s(pn);YLr=r(SA,"The model class to instantiate is selected based on the "),tTe=n(SA,"CODE",{});var tCt=s(tTe);KLr=r(tCt,"model_type"),tCt.forEach(t),ZLr=r(SA,` property of the config object (either
passed as an argument or loaded from `),aTe=n(SA,"CODE",{});var aCt=s(aTe);e8r=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),o8r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(SA,"CODE",{});var nCt=s(nTe);r8r=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),t8r=r(SA,":"),SA.forEach(t),a8r=i(Ol),Ee=n(Ol,"UL",{});var we=s(Ee);OE=n(we,"LI",{});var OBe=s(OE);sTe=n(OBe,"STRONG",{});var sCt=s(sTe);n8r=r(sCt,"albert"),sCt.forEach(t),s8r=r(OBe," \u2014 "),wJ=n(OBe,"A",{href:!0});var lCt=s(wJ);l8r=r(lCt,"FlaxAlbertForPreTraining"),lCt.forEach(t),i8r=r(OBe," (ALBERT model)"),OBe.forEach(t),d8r=i(we),VE=n(we,"LI",{});var VBe=s(VE);lTe=n(VBe,"STRONG",{});var iCt=s(lTe);c8r=r(iCt,"bart"),iCt.forEach(t),f8r=r(VBe," \u2014 "),AJ=n(VBe,"A",{href:!0});var dCt=s(AJ);m8r=r(dCt,"FlaxBartForConditionalGeneration"),dCt.forEach(t),g8r=r(VBe," (BART model)"),VBe.forEach(t),h8r=i(we),XE=n(we,"LI",{});var XBe=s(XE);iTe=n(XBe,"STRONG",{});var cCt=s(iTe);p8r=r(cCt,"bert"),cCt.forEach(t),u8r=r(XBe," \u2014 "),yJ=n(XBe,"A",{href:!0});var fCt=s(yJ);_8r=r(fCt,"FlaxBertForPreTraining"),fCt.forEach(t),b8r=r(XBe," (BERT model)"),XBe.forEach(t),v8r=i(we),zE=n(we,"LI",{});var zBe=s(zE);dTe=n(zBe,"STRONG",{});var mCt=s(dTe);F8r=r(mCt,"big_bird"),mCt.forEach(t),T8r=r(zBe," \u2014 "),LJ=n(zBe,"A",{href:!0});var gCt=s(LJ);M8r=r(gCt,"FlaxBigBirdForPreTraining"),gCt.forEach(t),E8r=r(zBe," (BigBird model)"),zBe.forEach(t),C8r=i(we),QE=n(we,"LI",{});var QBe=s(QE);cTe=n(QBe,"STRONG",{});var hCt=s(cTe);w8r=r(hCt,"electra"),hCt.forEach(t),A8r=r(QBe," \u2014 "),xJ=n(QBe,"A",{href:!0});var pCt=s(xJ);y8r=r(pCt,"FlaxElectraForPreTraining"),pCt.forEach(t),L8r=r(QBe," (ELECTRA model)"),QBe.forEach(t),x8r=i(we),WE=n(we,"LI",{});var WBe=s(WE);fTe=n(WBe,"STRONG",{});var uCt=s(fTe);$8r=r(uCt,"mbart"),uCt.forEach(t),k8r=r(WBe," \u2014 "),$J=n(WBe,"A",{href:!0});var _Ct=s($J);S8r=r(_Ct,"FlaxMBartForConditionalGeneration"),_Ct.forEach(t),R8r=r(WBe," (mBART model)"),WBe.forEach(t),B8r=i(we),HE=n(we,"LI",{});var HBe=s(HE);mTe=n(HBe,"STRONG",{});var bCt=s(mTe);P8r=r(bCt,"mt5"),bCt.forEach(t),I8r=r(HBe," \u2014 "),kJ=n(HBe,"A",{href:!0});var vCt=s(kJ);q8r=r(vCt,"FlaxMT5ForConditionalGeneration"),vCt.forEach(t),N8r=r(HBe," (mT5 model)"),HBe.forEach(t),j8r=i(we),UE=n(we,"LI",{});var UBe=s(UE);gTe=n(UBe,"STRONG",{});var FCt=s(gTe);D8r=r(FCt,"roberta"),FCt.forEach(t),G8r=r(UBe," \u2014 "),SJ=n(UBe,"A",{href:!0});var TCt=s(SJ);O8r=r(TCt,"FlaxRobertaForMaskedLM"),TCt.forEach(t),V8r=r(UBe," (RoBERTa model)"),UBe.forEach(t),X8r=i(we),JE=n(we,"LI",{});var JBe=s(JE);hTe=n(JBe,"STRONG",{});var MCt=s(hTe);z8r=r(MCt,"roformer"),MCt.forEach(t),Q8r=r(JBe," \u2014 "),RJ=n(JBe,"A",{href:!0});var ECt=s(RJ);W8r=r(ECt,"FlaxRoFormerForMaskedLM"),ECt.forEach(t),H8r=r(JBe," (RoFormer model)"),JBe.forEach(t),U8r=i(we),YE=n(we,"LI",{});var YBe=s(YE);pTe=n(YBe,"STRONG",{});var CCt=s(pTe);J8r=r(CCt,"t5"),CCt.forEach(t),Y8r=r(YBe," \u2014 "),BJ=n(YBe,"A",{href:!0});var wCt=s(BJ);K8r=r(wCt,"FlaxT5ForConditionalGeneration"),wCt.forEach(t),Z8r=r(YBe," (T5 model)"),YBe.forEach(t),exr=i(we),KE=n(we,"LI",{});var KBe=s(KE);uTe=n(KBe,"STRONG",{});var ACt=s(uTe);oxr=r(ACt,"wav2vec2"),ACt.forEach(t),rxr=r(KBe," \u2014 "),PJ=n(KBe,"A",{href:!0});var yCt=s(PJ);txr=r(yCt,"FlaxWav2Vec2ForPreTraining"),yCt.forEach(t),axr=r(KBe," (Wav2Vec2 model)"),KBe.forEach(t),nxr=i(we),ZE=n(we,"LI",{});var ZBe=s(ZE);_Te=n(ZBe,"STRONG",{});var LCt=s(_Te);sxr=r(LCt,"xlm-roberta"),LCt.forEach(t),lxr=r(ZBe," \u2014 "),IJ=n(ZBe,"A",{href:!0});var xCt=s(IJ);ixr=r(xCt,"FlaxXLMRobertaForMaskedLM"),xCt.forEach(t),dxr=r(ZBe," (XLM-RoBERTa model)"),ZBe.forEach(t),we.forEach(t),cxr=i(Ol),T(eC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Xqe=i(f),Pc=n(f,"H2",{class:!0});var Yje=s(Pc);oC=n(Yje,"A",{id:!0,class:!0,href:!0});var $Ct=s(oC);bTe=n($Ct,"SPAN",{});var kCt=s(bTe);T(hx.$$.fragment,kCt),kCt.forEach(t),$Ct.forEach(t),fxr=i(Yje),vTe=n(Yje,"SPAN",{});var SCt=s(vTe);mxr=r(SCt,"FlaxAutoModelForMaskedLM"),SCt.forEach(t),Yje.forEach(t),zqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(px.$$.fragment,Vl),gxr=i(Vl),Ic=n(Vl,"P",{});var XZ=s(Ic);hxr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qJ=n(XZ,"A",{href:!0});var RCt=s(qJ);pxr=r(RCt,"from_pretrained()"),RCt.forEach(t),uxr=r(XZ," class method or the "),NJ=n(XZ,"A",{href:!0});var BCt=s(NJ);_xr=r(BCt,"from_config()"),BCt.forEach(t),bxr=r(XZ,` class
method.`),XZ.forEach(t),vxr=i(Vl),ux=n(Vl,"P",{});var Kje=s(ux);Fxr=r(Kje,"This class cannot be instantiated directly using "),FTe=n(Kje,"CODE",{});var PCt=s(FTe);Txr=r(PCt,"__init__()"),PCt.forEach(t),Mxr=r(Kje," (throws an error)."),Kje.forEach(t),Exr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var RA=s(Ot);T(_x.$$.fragment,RA),Cxr=i(RA),TTe=n(RA,"P",{});var ICt=s(TTe);wxr=r(ICt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ICt.forEach(t),Axr=i(RA),qc=n(RA,"P",{});var zZ=s(qc);yxr=r(zZ,`Note:
Loading a model from its configuration file does `),MTe=n(zZ,"STRONG",{});var qCt=s(MTe);Lxr=r(qCt,"not"),qCt.forEach(t),xxr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(zZ,"A",{href:!0});var NCt=s(jJ);$xr=r(NCt,"from_pretrained()"),NCt.forEach(t),kxr=r(zZ," to load the model weights."),zZ.forEach(t),Sxr=i(RA),T(rC.$$.fragment,RA),RA.forEach(t),Rxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(bx.$$.fragment,Xl),Bxr=i(Xl),ETe=n(Xl,"P",{});var jCt=s(ETe);Pxr=r(jCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jCt.forEach(t),Ixr=i(Xl),un=n(Xl,"P",{});var BA=s(un);qxr=r(BA,"The model class to instantiate is selected based on the "),CTe=n(BA,"CODE",{});var DCt=s(CTe);Nxr=r(DCt,"model_type"),DCt.forEach(t),jxr=r(BA,` property of the config object (either
passed as an argument or loaded from `),wTe=n(BA,"CODE",{});var GCt=s(wTe);Dxr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),Gxr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(BA,"CODE",{});var OCt=s(ATe);Oxr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),Vxr=r(BA,":"),BA.forEach(t),Xxr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);tC=n(Be,"LI",{});var ePe=s(tC);yTe=n(ePe,"STRONG",{});var VCt=s(yTe);zxr=r(VCt,"albert"),VCt.forEach(t),Qxr=r(ePe," \u2014 "),DJ=n(ePe,"A",{href:!0});var XCt=s(DJ);Wxr=r(XCt,"FlaxAlbertForMaskedLM"),XCt.forEach(t),Hxr=r(ePe," (ALBERT model)"),ePe.forEach(t),Uxr=i(Be),aC=n(Be,"LI",{});var oPe=s(aC);LTe=n(oPe,"STRONG",{});var zCt=s(LTe);Jxr=r(zCt,"bart"),zCt.forEach(t),Yxr=r(oPe," \u2014 "),GJ=n(oPe,"A",{href:!0});var QCt=s(GJ);Kxr=r(QCt,"FlaxBartForConditionalGeneration"),QCt.forEach(t),Zxr=r(oPe," (BART model)"),oPe.forEach(t),e9r=i(Be),nC=n(Be,"LI",{});var rPe=s(nC);xTe=n(rPe,"STRONG",{});var WCt=s(xTe);o9r=r(WCt,"bert"),WCt.forEach(t),r9r=r(rPe," \u2014 "),OJ=n(rPe,"A",{href:!0});var HCt=s(OJ);t9r=r(HCt,"FlaxBertForMaskedLM"),HCt.forEach(t),a9r=r(rPe," (BERT model)"),rPe.forEach(t),n9r=i(Be),sC=n(Be,"LI",{});var tPe=s(sC);$Te=n(tPe,"STRONG",{});var UCt=s($Te);s9r=r(UCt,"big_bird"),UCt.forEach(t),l9r=r(tPe," \u2014 "),VJ=n(tPe,"A",{href:!0});var JCt=s(VJ);i9r=r(JCt,"FlaxBigBirdForMaskedLM"),JCt.forEach(t),d9r=r(tPe," (BigBird model)"),tPe.forEach(t),c9r=i(Be),lC=n(Be,"LI",{});var aPe=s(lC);kTe=n(aPe,"STRONG",{});var YCt=s(kTe);f9r=r(YCt,"distilbert"),YCt.forEach(t),m9r=r(aPe," \u2014 "),XJ=n(aPe,"A",{href:!0});var KCt=s(XJ);g9r=r(KCt,"FlaxDistilBertForMaskedLM"),KCt.forEach(t),h9r=r(aPe," (DistilBERT model)"),aPe.forEach(t),p9r=i(Be),iC=n(Be,"LI",{});var nPe=s(iC);STe=n(nPe,"STRONG",{});var ZCt=s(STe);u9r=r(ZCt,"electra"),ZCt.forEach(t),_9r=r(nPe," \u2014 "),zJ=n(nPe,"A",{href:!0});var e3t=s(zJ);b9r=r(e3t,"FlaxElectraForMaskedLM"),e3t.forEach(t),v9r=r(nPe," (ELECTRA model)"),nPe.forEach(t),F9r=i(Be),dC=n(Be,"LI",{});var sPe=s(dC);RTe=n(sPe,"STRONG",{});var o3t=s(RTe);T9r=r(o3t,"mbart"),o3t.forEach(t),M9r=r(sPe," \u2014 "),QJ=n(sPe,"A",{href:!0});var r3t=s(QJ);E9r=r(r3t,"FlaxMBartForConditionalGeneration"),r3t.forEach(t),C9r=r(sPe," (mBART model)"),sPe.forEach(t),w9r=i(Be),cC=n(Be,"LI",{});var lPe=s(cC);BTe=n(lPe,"STRONG",{});var t3t=s(BTe);A9r=r(t3t,"roberta"),t3t.forEach(t),y9r=r(lPe," \u2014 "),WJ=n(lPe,"A",{href:!0});var a3t=s(WJ);L9r=r(a3t,"FlaxRobertaForMaskedLM"),a3t.forEach(t),x9r=r(lPe," (RoBERTa model)"),lPe.forEach(t),$9r=i(Be),fC=n(Be,"LI",{});var iPe=s(fC);PTe=n(iPe,"STRONG",{});var n3t=s(PTe);k9r=r(n3t,"roformer"),n3t.forEach(t),S9r=r(iPe," \u2014 "),HJ=n(iPe,"A",{href:!0});var s3t=s(HJ);R9r=r(s3t,"FlaxRoFormerForMaskedLM"),s3t.forEach(t),B9r=r(iPe," (RoFormer model)"),iPe.forEach(t),P9r=i(Be),mC=n(Be,"LI",{});var dPe=s(mC);ITe=n(dPe,"STRONG",{});var l3t=s(ITe);I9r=r(l3t,"xlm-roberta"),l3t.forEach(t),q9r=r(dPe," \u2014 "),UJ=n(dPe,"A",{href:!0});var i3t=s(UJ);N9r=r(i3t,"FlaxXLMRobertaForMaskedLM"),i3t.forEach(t),j9r=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),Be.forEach(t),D9r=i(Xl),T(gC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Qqe=i(f),Nc=n(f,"H2",{class:!0});var Zje=s(Nc);hC=n(Zje,"A",{id:!0,class:!0,href:!0});var d3t=s(hC);qTe=n(d3t,"SPAN",{});var c3t=s(qTe);T(vx.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),G9r=i(Zje),NTe=n(Zje,"SPAN",{});var f3t=s(NTe);O9r=r(f3t,"FlaxAutoModelForSeq2SeqLM"),f3t.forEach(t),Zje.forEach(t),Wqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(Fx.$$.fragment,zl),V9r=i(zl),jc=n(zl,"P",{});var QZ=s(jc);X9r=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JJ=n(QZ,"A",{href:!0});var m3t=s(JJ);z9r=r(m3t,"from_pretrained()"),m3t.forEach(t),Q9r=r(QZ," class method or the "),YJ=n(QZ,"A",{href:!0});var g3t=s(YJ);W9r=r(g3t,"from_config()"),g3t.forEach(t),H9r=r(QZ,` class
method.`),QZ.forEach(t),U9r=i(zl),Tx=n(zl,"P",{});var eDe=s(Tx);J9r=r(eDe,"This class cannot be instantiated directly using "),jTe=n(eDe,"CODE",{});var h3t=s(jTe);Y9r=r(h3t,"__init__()"),h3t.forEach(t),K9r=r(eDe," (throws an error)."),eDe.forEach(t),Z9r=i(zl),Vt=n(zl,"DIV",{class:!0});var PA=s(Vt);T(Mx.$$.fragment,PA),e$r=i(PA),DTe=n(PA,"P",{});var p3t=s(DTe);o$r=r(p3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p3t.forEach(t),r$r=i(PA),Dc=n(PA,"P",{});var WZ=s(Dc);t$r=r(WZ,`Note:
Loading a model from its configuration file does `),GTe=n(WZ,"STRONG",{});var u3t=s(GTe);a$r=r(u3t,"not"),u3t.forEach(t),n$r=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(WZ,"A",{href:!0});var _3t=s(KJ);s$r=r(_3t,"from_pretrained()"),_3t.forEach(t),l$r=r(WZ," to load the model weights."),WZ.forEach(t),i$r=i(PA),T(pC.$$.fragment,PA),PA.forEach(t),d$r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(Ex.$$.fragment,Ql),c$r=i(Ql),OTe=n(Ql,"P",{});var b3t=s(OTe);f$r=r(b3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b3t.forEach(t),m$r=i(Ql),_n=n(Ql,"P",{});var IA=s(_n);g$r=r(IA,"The model class to instantiate is selected based on the "),VTe=n(IA,"CODE",{});var v3t=s(VTe);h$r=r(v3t,"model_type"),v3t.forEach(t),p$r=r(IA,` property of the config object (either
passed as an argument or loaded from `),XTe=n(IA,"CODE",{});var F3t=s(XTe);u$r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),_$r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(IA,"CODE",{});var T3t=s(zTe);b$r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),v$r=r(IA,":"),IA.forEach(t),F$r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);uC=n(Ve,"LI",{});var cPe=s(uC);QTe=n(cPe,"STRONG",{});var M3t=s(QTe);T$r=r(M3t,"bart"),M3t.forEach(t),M$r=r(cPe," \u2014 "),ZJ=n(cPe,"A",{href:!0});var E3t=s(ZJ);E$r=r(E3t,"FlaxBartForConditionalGeneration"),E3t.forEach(t),C$r=r(cPe," (BART model)"),cPe.forEach(t),w$r=i(Ve),_C=n(Ve,"LI",{});var fPe=s(_C);WTe=n(fPe,"STRONG",{});var C3t=s(WTe);A$r=r(C3t,"blenderbot"),C3t.forEach(t),y$r=r(fPe," \u2014 "),eY=n(fPe,"A",{href:!0});var w3t=s(eY);L$r=r(w3t,"FlaxBlenderbotForConditionalGeneration"),w3t.forEach(t),x$r=r(fPe," (Blenderbot model)"),fPe.forEach(t),$$r=i(Ve),bC=n(Ve,"LI",{});var mPe=s(bC);HTe=n(mPe,"STRONG",{});var A3t=s(HTe);k$r=r(A3t,"blenderbot-small"),A3t.forEach(t),S$r=r(mPe," \u2014 "),oY=n(mPe,"A",{href:!0});var y3t=s(oY);R$r=r(y3t,"FlaxBlenderbotSmallForConditionalGeneration"),y3t.forEach(t),B$r=r(mPe," (BlenderbotSmall model)"),mPe.forEach(t),P$r=i(Ve),vC=n(Ve,"LI",{});var gPe=s(vC);UTe=n(gPe,"STRONG",{});var L3t=s(UTe);I$r=r(L3t,"encoder-decoder"),L3t.forEach(t),q$r=r(gPe," \u2014 "),rY=n(gPe,"A",{href:!0});var x3t=s(rY);N$r=r(x3t,"FlaxEncoderDecoderModel"),x3t.forEach(t),j$r=r(gPe," (Encoder decoder model)"),gPe.forEach(t),D$r=i(Ve),FC=n(Ve,"LI",{});var hPe=s(FC);JTe=n(hPe,"STRONG",{});var $3t=s(JTe);G$r=r($3t,"marian"),$3t.forEach(t),O$r=r(hPe," \u2014 "),tY=n(hPe,"A",{href:!0});var k3t=s(tY);V$r=r(k3t,"FlaxMarianMTModel"),k3t.forEach(t),X$r=r(hPe," (Marian model)"),hPe.forEach(t),z$r=i(Ve),TC=n(Ve,"LI",{});var pPe=s(TC);YTe=n(pPe,"STRONG",{});var S3t=s(YTe);Q$r=r(S3t,"mbart"),S3t.forEach(t),W$r=r(pPe," \u2014 "),aY=n(pPe,"A",{href:!0});var R3t=s(aY);H$r=r(R3t,"FlaxMBartForConditionalGeneration"),R3t.forEach(t),U$r=r(pPe," (mBART model)"),pPe.forEach(t),J$r=i(Ve),MC=n(Ve,"LI",{});var uPe=s(MC);KTe=n(uPe,"STRONG",{});var B3t=s(KTe);Y$r=r(B3t,"mt5"),B3t.forEach(t),K$r=r(uPe," \u2014 "),nY=n(uPe,"A",{href:!0});var P3t=s(nY);Z$r=r(P3t,"FlaxMT5ForConditionalGeneration"),P3t.forEach(t),ekr=r(uPe," (mT5 model)"),uPe.forEach(t),okr=i(Ve),EC=n(Ve,"LI",{});var _Pe=s(EC);ZTe=n(_Pe,"STRONG",{});var I3t=s(ZTe);rkr=r(I3t,"pegasus"),I3t.forEach(t),tkr=r(_Pe," \u2014 "),sY=n(_Pe,"A",{href:!0});var q3t=s(sY);akr=r(q3t,"FlaxPegasusForConditionalGeneration"),q3t.forEach(t),nkr=r(_Pe," (Pegasus model)"),_Pe.forEach(t),skr=i(Ve),CC=n(Ve,"LI",{});var bPe=s(CC);e7e=n(bPe,"STRONG",{});var N3t=s(e7e);lkr=r(N3t,"t5"),N3t.forEach(t),ikr=r(bPe," \u2014 "),lY=n(bPe,"A",{href:!0});var j3t=s(lY);dkr=r(j3t,"FlaxT5ForConditionalGeneration"),j3t.forEach(t),ckr=r(bPe," (T5 model)"),bPe.forEach(t),Ve.forEach(t),fkr=i(Ql),T(wC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Hqe=i(f),Gc=n(f,"H2",{class:!0});var oDe=s(Gc);AC=n(oDe,"A",{id:!0,class:!0,href:!0});var D3t=s(AC);o7e=n(D3t,"SPAN",{});var G3t=s(o7e);T(Cx.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),mkr=i(oDe),r7e=n(oDe,"SPAN",{});var O3t=s(r7e);gkr=r(O3t,"FlaxAutoModelForSequenceClassification"),O3t.forEach(t),oDe.forEach(t),Uqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(wx.$$.fragment,Wl),hkr=i(Wl),Oc=n(Wl,"P",{});var HZ=s(Oc);pkr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iY=n(HZ,"A",{href:!0});var V3t=s(iY);ukr=r(V3t,"from_pretrained()"),V3t.forEach(t),_kr=r(HZ," class method or the "),dY=n(HZ,"A",{href:!0});var X3t=s(dY);bkr=r(X3t,"from_config()"),X3t.forEach(t),vkr=r(HZ,` class
method.`),HZ.forEach(t),Fkr=i(Wl),Ax=n(Wl,"P",{});var rDe=s(Ax);Tkr=r(rDe,"This class cannot be instantiated directly using "),t7e=n(rDe,"CODE",{});var z3t=s(t7e);Mkr=r(z3t,"__init__()"),z3t.forEach(t),Ekr=r(rDe," (throws an error)."),rDe.forEach(t),Ckr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var qA=s(Xt);T(yx.$$.fragment,qA),wkr=i(qA),a7e=n(qA,"P",{});var Q3t=s(a7e);Akr=r(Q3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q3t.forEach(t),ykr=i(qA),Vc=n(qA,"P",{});var UZ=s(Vc);Lkr=r(UZ,`Note:
Loading a model from its configuration file does `),n7e=n(UZ,"STRONG",{});var W3t=s(n7e);xkr=r(W3t,"not"),W3t.forEach(t),$kr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(UZ,"A",{href:!0});var H3t=s(cY);kkr=r(H3t,"from_pretrained()"),H3t.forEach(t),Skr=r(UZ," to load the model weights."),UZ.forEach(t),Rkr=i(qA),T(yC.$$.fragment,qA),qA.forEach(t),Bkr=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Lx.$$.fragment,Hl),Pkr=i(Hl),s7e=n(Hl,"P",{});var U3t=s(s7e);Ikr=r(U3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U3t.forEach(t),qkr=i(Hl),bn=n(Hl,"P",{});var NA=s(bn);Nkr=r(NA,"The model class to instantiate is selected based on the "),l7e=n(NA,"CODE",{});var J3t=s(l7e);jkr=r(J3t,"model_type"),J3t.forEach(t),Dkr=r(NA,` property of the config object (either
passed as an argument or loaded from `),i7e=n(NA,"CODE",{});var Y3t=s(i7e);Gkr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Okr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(NA,"CODE",{});var K3t=s(d7e);Vkr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),Xkr=r(NA,":"),NA.forEach(t),zkr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);LC=n(Pe,"LI",{});var vPe=s(LC);c7e=n(vPe,"STRONG",{});var Z3t=s(c7e);Qkr=r(Z3t,"albert"),Z3t.forEach(t),Wkr=r(vPe," \u2014 "),fY=n(vPe,"A",{href:!0});var ewt=s(fY);Hkr=r(ewt,"FlaxAlbertForSequenceClassification"),ewt.forEach(t),Ukr=r(vPe," (ALBERT model)"),vPe.forEach(t),Jkr=i(Pe),xC=n(Pe,"LI",{});var FPe=s(xC);f7e=n(FPe,"STRONG",{});var owt=s(f7e);Ykr=r(owt,"bart"),owt.forEach(t),Kkr=r(FPe," \u2014 "),mY=n(FPe,"A",{href:!0});var rwt=s(mY);Zkr=r(rwt,"FlaxBartForSequenceClassification"),rwt.forEach(t),eSr=r(FPe," (BART model)"),FPe.forEach(t),oSr=i(Pe),$C=n(Pe,"LI",{});var TPe=s($C);m7e=n(TPe,"STRONG",{});var twt=s(m7e);rSr=r(twt,"bert"),twt.forEach(t),tSr=r(TPe," \u2014 "),gY=n(TPe,"A",{href:!0});var awt=s(gY);aSr=r(awt,"FlaxBertForSequenceClassification"),awt.forEach(t),nSr=r(TPe," (BERT model)"),TPe.forEach(t),sSr=i(Pe),kC=n(Pe,"LI",{});var MPe=s(kC);g7e=n(MPe,"STRONG",{});var nwt=s(g7e);lSr=r(nwt,"big_bird"),nwt.forEach(t),iSr=r(MPe," \u2014 "),hY=n(MPe,"A",{href:!0});var swt=s(hY);dSr=r(swt,"FlaxBigBirdForSequenceClassification"),swt.forEach(t),cSr=r(MPe," (BigBird model)"),MPe.forEach(t),fSr=i(Pe),SC=n(Pe,"LI",{});var EPe=s(SC);h7e=n(EPe,"STRONG",{});var lwt=s(h7e);mSr=r(lwt,"distilbert"),lwt.forEach(t),gSr=r(EPe," \u2014 "),pY=n(EPe,"A",{href:!0});var iwt=s(pY);hSr=r(iwt,"FlaxDistilBertForSequenceClassification"),iwt.forEach(t),pSr=r(EPe," (DistilBERT model)"),EPe.forEach(t),uSr=i(Pe),RC=n(Pe,"LI",{});var CPe=s(RC);p7e=n(CPe,"STRONG",{});var dwt=s(p7e);_Sr=r(dwt,"electra"),dwt.forEach(t),bSr=r(CPe," \u2014 "),uY=n(CPe,"A",{href:!0});var cwt=s(uY);vSr=r(cwt,"FlaxElectraForSequenceClassification"),cwt.forEach(t),FSr=r(CPe," (ELECTRA model)"),CPe.forEach(t),TSr=i(Pe),BC=n(Pe,"LI",{});var wPe=s(BC);u7e=n(wPe,"STRONG",{});var fwt=s(u7e);MSr=r(fwt,"mbart"),fwt.forEach(t),ESr=r(wPe," \u2014 "),_Y=n(wPe,"A",{href:!0});var mwt=s(_Y);CSr=r(mwt,"FlaxMBartForSequenceClassification"),mwt.forEach(t),wSr=r(wPe," (mBART model)"),wPe.forEach(t),ASr=i(Pe),PC=n(Pe,"LI",{});var APe=s(PC);_7e=n(APe,"STRONG",{});var gwt=s(_7e);ySr=r(gwt,"roberta"),gwt.forEach(t),LSr=r(APe," \u2014 "),bY=n(APe,"A",{href:!0});var hwt=s(bY);xSr=r(hwt,"FlaxRobertaForSequenceClassification"),hwt.forEach(t),$Sr=r(APe," (RoBERTa model)"),APe.forEach(t),kSr=i(Pe),IC=n(Pe,"LI",{});var yPe=s(IC);b7e=n(yPe,"STRONG",{});var pwt=s(b7e);SSr=r(pwt,"roformer"),pwt.forEach(t),RSr=r(yPe," \u2014 "),vY=n(yPe,"A",{href:!0});var uwt=s(vY);BSr=r(uwt,"FlaxRoFormerForSequenceClassification"),uwt.forEach(t),PSr=r(yPe," (RoFormer model)"),yPe.forEach(t),ISr=i(Pe),qC=n(Pe,"LI",{});var LPe=s(qC);v7e=n(LPe,"STRONG",{});var _wt=s(v7e);qSr=r(_wt,"xlm-roberta"),_wt.forEach(t),NSr=r(LPe," \u2014 "),FY=n(LPe,"A",{href:!0});var bwt=s(FY);jSr=r(bwt,"FlaxXLMRobertaForSequenceClassification"),bwt.forEach(t),DSr=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),Pe.forEach(t),GSr=i(Hl),T(NC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Jqe=i(f),Xc=n(f,"H2",{class:!0});var tDe=s(Xc);jC=n(tDe,"A",{id:!0,class:!0,href:!0});var vwt=s(jC);F7e=n(vwt,"SPAN",{});var Fwt=s(F7e);T(xx.$$.fragment,Fwt),Fwt.forEach(t),vwt.forEach(t),OSr=i(tDe),T7e=n(tDe,"SPAN",{});var Twt=s(T7e);VSr=r(Twt,"FlaxAutoModelForQuestionAnswering"),Twt.forEach(t),tDe.forEach(t),Yqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T($x.$$.fragment,Ul),XSr=i(Ul),zc=n(Ul,"P",{});var JZ=s(zc);zSr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TY=n(JZ,"A",{href:!0});var Mwt=s(TY);QSr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),WSr=r(JZ," class method or the "),MY=n(JZ,"A",{href:!0});var Ewt=s(MY);HSr=r(Ewt,"from_config()"),Ewt.forEach(t),USr=r(JZ,` class
method.`),JZ.forEach(t),JSr=i(Ul),kx=n(Ul,"P",{});var aDe=s(kx);YSr=r(aDe,"This class cannot be instantiated directly using "),M7e=n(aDe,"CODE",{});var Cwt=s(M7e);KSr=r(Cwt,"__init__()"),Cwt.forEach(t),ZSr=r(aDe," (throws an error)."),aDe.forEach(t),eRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var jA=s(zt);T(Sx.$$.fragment,jA),oRr=i(jA),E7e=n(jA,"P",{});var wwt=s(E7e);rRr=r(wwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wwt.forEach(t),tRr=i(jA),Qc=n(jA,"P",{});var YZ=s(Qc);aRr=r(YZ,`Note:
Loading a model from its configuration file does `),C7e=n(YZ,"STRONG",{});var Awt=s(C7e);nRr=r(Awt,"not"),Awt.forEach(t),sRr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(YZ,"A",{href:!0});var ywt=s(EY);lRr=r(ywt,"from_pretrained()"),ywt.forEach(t),iRr=r(YZ," to load the model weights."),YZ.forEach(t),dRr=i(jA),T(DC.$$.fragment,jA),jA.forEach(t),cRr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Rx.$$.fragment,Jl),fRr=i(Jl),w7e=n(Jl,"P",{});var Lwt=s(w7e);mRr=r(Lwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lwt.forEach(t),gRr=i(Jl),vn=n(Jl,"P",{});var DA=s(vn);hRr=r(DA,"The model class to instantiate is selected based on the "),A7e=n(DA,"CODE",{});var xwt=s(A7e);pRr=r(xwt,"model_type"),xwt.forEach(t),uRr=r(DA,` property of the config object (either
passed as an argument or loaded from `),y7e=n(DA,"CODE",{});var $wt=s(y7e);_Rr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),bRr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(DA,"CODE",{});var kwt=s(L7e);vRr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),FRr=r(DA,":"),DA.forEach(t),TRr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);GC=n(Ie,"LI",{});var xPe=s(GC);x7e=n(xPe,"STRONG",{});var Swt=s(x7e);MRr=r(Swt,"albert"),Swt.forEach(t),ERr=r(xPe," \u2014 "),CY=n(xPe,"A",{href:!0});var Rwt=s(CY);CRr=r(Rwt,"FlaxAlbertForQuestionAnswering"),Rwt.forEach(t),wRr=r(xPe," (ALBERT model)"),xPe.forEach(t),ARr=i(Ie),OC=n(Ie,"LI",{});var $Pe=s(OC);$7e=n($Pe,"STRONG",{});var Bwt=s($7e);yRr=r(Bwt,"bart"),Bwt.forEach(t),LRr=r($Pe," \u2014 "),wY=n($Pe,"A",{href:!0});var Pwt=s(wY);xRr=r(Pwt,"FlaxBartForQuestionAnswering"),Pwt.forEach(t),$Rr=r($Pe," (BART model)"),$Pe.forEach(t),kRr=i(Ie),VC=n(Ie,"LI",{});var kPe=s(VC);k7e=n(kPe,"STRONG",{});var Iwt=s(k7e);SRr=r(Iwt,"bert"),Iwt.forEach(t),RRr=r(kPe," \u2014 "),AY=n(kPe,"A",{href:!0});var qwt=s(AY);BRr=r(qwt,"FlaxBertForQuestionAnswering"),qwt.forEach(t),PRr=r(kPe," (BERT model)"),kPe.forEach(t),IRr=i(Ie),XC=n(Ie,"LI",{});var SPe=s(XC);S7e=n(SPe,"STRONG",{});var Nwt=s(S7e);qRr=r(Nwt,"big_bird"),Nwt.forEach(t),NRr=r(SPe," \u2014 "),yY=n(SPe,"A",{href:!0});var jwt=s(yY);jRr=r(jwt,"FlaxBigBirdForQuestionAnswering"),jwt.forEach(t),DRr=r(SPe," (BigBird model)"),SPe.forEach(t),GRr=i(Ie),zC=n(Ie,"LI",{});var RPe=s(zC);R7e=n(RPe,"STRONG",{});var Dwt=s(R7e);ORr=r(Dwt,"distilbert"),Dwt.forEach(t),VRr=r(RPe," \u2014 "),LY=n(RPe,"A",{href:!0});var Gwt=s(LY);XRr=r(Gwt,"FlaxDistilBertForQuestionAnswering"),Gwt.forEach(t),zRr=r(RPe," (DistilBERT model)"),RPe.forEach(t),QRr=i(Ie),QC=n(Ie,"LI",{});var BPe=s(QC);B7e=n(BPe,"STRONG",{});var Owt=s(B7e);WRr=r(Owt,"electra"),Owt.forEach(t),HRr=r(BPe," \u2014 "),xY=n(BPe,"A",{href:!0});var Vwt=s(xY);URr=r(Vwt,"FlaxElectraForQuestionAnswering"),Vwt.forEach(t),JRr=r(BPe," (ELECTRA model)"),BPe.forEach(t),YRr=i(Ie),WC=n(Ie,"LI",{});var PPe=s(WC);P7e=n(PPe,"STRONG",{});var Xwt=s(P7e);KRr=r(Xwt,"mbart"),Xwt.forEach(t),ZRr=r(PPe," \u2014 "),$Y=n(PPe,"A",{href:!0});var zwt=s($Y);eBr=r(zwt,"FlaxMBartForQuestionAnswering"),zwt.forEach(t),oBr=r(PPe," (mBART model)"),PPe.forEach(t),rBr=i(Ie),HC=n(Ie,"LI",{});var IPe=s(HC);I7e=n(IPe,"STRONG",{});var Qwt=s(I7e);tBr=r(Qwt,"roberta"),Qwt.forEach(t),aBr=r(IPe," \u2014 "),kY=n(IPe,"A",{href:!0});var Wwt=s(kY);nBr=r(Wwt,"FlaxRobertaForQuestionAnswering"),Wwt.forEach(t),sBr=r(IPe," (RoBERTa model)"),IPe.forEach(t),lBr=i(Ie),UC=n(Ie,"LI",{});var qPe=s(UC);q7e=n(qPe,"STRONG",{});var Hwt=s(q7e);iBr=r(Hwt,"roformer"),Hwt.forEach(t),dBr=r(qPe," \u2014 "),SY=n(qPe,"A",{href:!0});var Uwt=s(SY);cBr=r(Uwt,"FlaxRoFormerForQuestionAnswering"),Uwt.forEach(t),fBr=r(qPe," (RoFormer model)"),qPe.forEach(t),mBr=i(Ie),JC=n(Ie,"LI",{});var NPe=s(JC);N7e=n(NPe,"STRONG",{});var Jwt=s(N7e);gBr=r(Jwt,"xlm-roberta"),Jwt.forEach(t),hBr=r(NPe," \u2014 "),RY=n(NPe,"A",{href:!0});var Ywt=s(RY);pBr=r(Ywt,"FlaxXLMRobertaForQuestionAnswering"),Ywt.forEach(t),uBr=r(NPe," (XLM-RoBERTa model)"),NPe.forEach(t),Ie.forEach(t),_Br=i(Jl),T(YC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Kqe=i(f),Wc=n(f,"H2",{class:!0});var nDe=s(Wc);KC=n(nDe,"A",{id:!0,class:!0,href:!0});var Kwt=s(KC);j7e=n(Kwt,"SPAN",{});var Zwt=s(j7e);T(Bx.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),bBr=i(nDe),D7e=n(nDe,"SPAN",{});var eAt=s(D7e);vBr=r(eAt,"FlaxAutoModelForTokenClassification"),eAt.forEach(t),nDe.forEach(t),Zqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Px.$$.fragment,Yl),FBr=i(Yl),Hc=n(Yl,"P",{});var KZ=s(Hc);TBr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BY=n(KZ,"A",{href:!0});var oAt=s(BY);MBr=r(oAt,"from_pretrained()"),oAt.forEach(t),EBr=r(KZ," class method or the "),PY=n(KZ,"A",{href:!0});var rAt=s(PY);CBr=r(rAt,"from_config()"),rAt.forEach(t),wBr=r(KZ,` class
method.`),KZ.forEach(t),ABr=i(Yl),Ix=n(Yl,"P",{});var sDe=s(Ix);yBr=r(sDe,"This class cannot be instantiated directly using "),G7e=n(sDe,"CODE",{});var tAt=s(G7e);LBr=r(tAt,"__init__()"),tAt.forEach(t),xBr=r(sDe," (throws an error)."),sDe.forEach(t),$Br=i(Yl),Qt=n(Yl,"DIV",{class:!0});var GA=s(Qt);T(qx.$$.fragment,GA),kBr=i(GA),O7e=n(GA,"P",{});var aAt=s(O7e);SBr=r(aAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aAt.forEach(t),RBr=i(GA),Uc=n(GA,"P",{});var ZZ=s(Uc);BBr=r(ZZ,`Note:
Loading a model from its configuration file does `),V7e=n(ZZ,"STRONG",{});var nAt=s(V7e);PBr=r(nAt,"not"),nAt.forEach(t),IBr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(ZZ,"A",{href:!0});var sAt=s(IY);qBr=r(sAt,"from_pretrained()"),sAt.forEach(t),NBr=r(ZZ," to load the model weights."),ZZ.forEach(t),jBr=i(GA),T(ZC.$$.fragment,GA),GA.forEach(t),DBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Nx.$$.fragment,Kl),GBr=i(Kl),X7e=n(Kl,"P",{});var lAt=s(X7e);OBr=r(lAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lAt.forEach(t),VBr=i(Kl),Fn=n(Kl,"P",{});var OA=s(Fn);XBr=r(OA,"The model class to instantiate is selected based on the "),z7e=n(OA,"CODE",{});var iAt=s(z7e);zBr=r(iAt,"model_type"),iAt.forEach(t),QBr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Q7e=n(OA,"CODE",{});var dAt=s(Q7e);WBr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),HBr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(OA,"CODE",{});var cAt=s(W7e);UBr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),JBr=r(OA,":"),OA.forEach(t),YBr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);e3=n(Fo,"LI",{});var jPe=s(e3);H7e=n(jPe,"STRONG",{});var fAt=s(H7e);KBr=r(fAt,"albert"),fAt.forEach(t),ZBr=r(jPe," \u2014 "),qY=n(jPe,"A",{href:!0});var mAt=s(qY);ePr=r(mAt,"FlaxAlbertForTokenClassification"),mAt.forEach(t),oPr=r(jPe," (ALBERT model)"),jPe.forEach(t),rPr=i(Fo),o3=n(Fo,"LI",{});var DPe=s(o3);U7e=n(DPe,"STRONG",{});var gAt=s(U7e);tPr=r(gAt,"bert"),gAt.forEach(t),aPr=r(DPe," \u2014 "),NY=n(DPe,"A",{href:!0});var hAt=s(NY);nPr=r(hAt,"FlaxBertForTokenClassification"),hAt.forEach(t),sPr=r(DPe," (BERT model)"),DPe.forEach(t),lPr=i(Fo),r3=n(Fo,"LI",{});var GPe=s(r3);J7e=n(GPe,"STRONG",{});var pAt=s(J7e);iPr=r(pAt,"big_bird"),pAt.forEach(t),dPr=r(GPe," \u2014 "),jY=n(GPe,"A",{href:!0});var uAt=s(jY);cPr=r(uAt,"FlaxBigBirdForTokenClassification"),uAt.forEach(t),fPr=r(GPe," (BigBird model)"),GPe.forEach(t),mPr=i(Fo),t3=n(Fo,"LI",{});var OPe=s(t3);Y7e=n(OPe,"STRONG",{});var _At=s(Y7e);gPr=r(_At,"distilbert"),_At.forEach(t),hPr=r(OPe," \u2014 "),DY=n(OPe,"A",{href:!0});var bAt=s(DY);pPr=r(bAt,"FlaxDistilBertForTokenClassification"),bAt.forEach(t),uPr=r(OPe," (DistilBERT model)"),OPe.forEach(t),_Pr=i(Fo),a3=n(Fo,"LI",{});var VPe=s(a3);K7e=n(VPe,"STRONG",{});var vAt=s(K7e);bPr=r(vAt,"electra"),vAt.forEach(t),vPr=r(VPe," \u2014 "),GY=n(VPe,"A",{href:!0});var FAt=s(GY);FPr=r(FAt,"FlaxElectraForTokenClassification"),FAt.forEach(t),TPr=r(VPe," (ELECTRA model)"),VPe.forEach(t),MPr=i(Fo),n3=n(Fo,"LI",{});var XPe=s(n3);Z7e=n(XPe,"STRONG",{});var TAt=s(Z7e);EPr=r(TAt,"roberta"),TAt.forEach(t),CPr=r(XPe," \u2014 "),OY=n(XPe,"A",{href:!0});var MAt=s(OY);wPr=r(MAt,"FlaxRobertaForTokenClassification"),MAt.forEach(t),APr=r(XPe," (RoBERTa model)"),XPe.forEach(t),yPr=i(Fo),s3=n(Fo,"LI",{});var zPe=s(s3);eMe=n(zPe,"STRONG",{});var EAt=s(eMe);LPr=r(EAt,"roformer"),EAt.forEach(t),xPr=r(zPe," \u2014 "),VY=n(zPe,"A",{href:!0});var CAt=s(VY);$Pr=r(CAt,"FlaxRoFormerForTokenClassification"),CAt.forEach(t),kPr=r(zPe," (RoFormer model)"),zPe.forEach(t),SPr=i(Fo),l3=n(Fo,"LI",{});var QPe=s(l3);oMe=n(QPe,"STRONG",{});var wAt=s(oMe);RPr=r(wAt,"xlm-roberta"),wAt.forEach(t),BPr=r(QPe," \u2014 "),XY=n(QPe,"A",{href:!0});var AAt=s(XY);PPr=r(AAt,"FlaxXLMRobertaForTokenClassification"),AAt.forEach(t),IPr=r(QPe," (XLM-RoBERTa model)"),QPe.forEach(t),Fo.forEach(t),qPr=i(Kl),T(i3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),eNe=i(f),Jc=n(f,"H2",{class:!0});var lDe=s(Jc);d3=n(lDe,"A",{id:!0,class:!0,href:!0});var yAt=s(d3);rMe=n(yAt,"SPAN",{});var LAt=s(rMe);T(jx.$$.fragment,LAt),LAt.forEach(t),yAt.forEach(t),NPr=i(lDe),tMe=n(lDe,"SPAN",{});var xAt=s(tMe);jPr=r(xAt,"FlaxAutoModelForMultipleChoice"),xAt.forEach(t),lDe.forEach(t),oNe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Dx.$$.fragment,Zl),DPr=i(Zl),Yc=n(Zl,"P",{});var eee=s(Yc);GPr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zY=n(eee,"A",{href:!0});var $At=s(zY);OPr=r($At,"from_pretrained()"),$At.forEach(t),VPr=r(eee," class method or the "),QY=n(eee,"A",{href:!0});var kAt=s(QY);XPr=r(kAt,"from_config()"),kAt.forEach(t),zPr=r(eee,` class
method.`),eee.forEach(t),QPr=i(Zl),Gx=n(Zl,"P",{});var iDe=s(Gx);WPr=r(iDe,"This class cannot be instantiated directly using "),aMe=n(iDe,"CODE",{});var SAt=s(aMe);HPr=r(SAt,"__init__()"),SAt.forEach(t),UPr=r(iDe," (throws an error)."),iDe.forEach(t),JPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var VA=s(Wt);T(Ox.$$.fragment,VA),YPr=i(VA),nMe=n(VA,"P",{});var RAt=s(nMe);KPr=r(RAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RAt.forEach(t),ZPr=i(VA),Kc=n(VA,"P",{});var oee=s(Kc);eIr=r(oee,`Note:
Loading a model from its configuration file does `),sMe=n(oee,"STRONG",{});var BAt=s(sMe);oIr=r(BAt,"not"),BAt.forEach(t),rIr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(oee,"A",{href:!0});var PAt=s(WY);tIr=r(PAt,"from_pretrained()"),PAt.forEach(t),aIr=r(oee," to load the model weights."),oee.forEach(t),nIr=i(VA),T(c3.$$.fragment,VA),VA.forEach(t),sIr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Vx.$$.fragment,ei),lIr=i(ei),lMe=n(ei,"P",{});var IAt=s(lMe);iIr=r(IAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IAt.forEach(t),dIr=i(ei),Tn=n(ei,"P",{});var XA=s(Tn);cIr=r(XA,"The model class to instantiate is selected based on the "),iMe=n(XA,"CODE",{});var qAt=s(iMe);fIr=r(qAt,"model_type"),qAt.forEach(t),mIr=r(XA,` property of the config object (either
passed as an argument or loaded from `),dMe=n(XA,"CODE",{});var NAt=s(dMe);gIr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),hIr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(XA,"CODE",{});var jAt=s(cMe);pIr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),uIr=r(XA,":"),XA.forEach(t),_Ir=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);f3=n(To,"LI",{});var WPe=s(f3);fMe=n(WPe,"STRONG",{});var DAt=s(fMe);bIr=r(DAt,"albert"),DAt.forEach(t),vIr=r(WPe," \u2014 "),HY=n(WPe,"A",{href:!0});var GAt=s(HY);FIr=r(GAt,"FlaxAlbertForMultipleChoice"),GAt.forEach(t),TIr=r(WPe," (ALBERT model)"),WPe.forEach(t),MIr=i(To),m3=n(To,"LI",{});var HPe=s(m3);mMe=n(HPe,"STRONG",{});var OAt=s(mMe);EIr=r(OAt,"bert"),OAt.forEach(t),CIr=r(HPe," \u2014 "),UY=n(HPe,"A",{href:!0});var VAt=s(UY);wIr=r(VAt,"FlaxBertForMultipleChoice"),VAt.forEach(t),AIr=r(HPe," (BERT model)"),HPe.forEach(t),yIr=i(To),g3=n(To,"LI",{});var UPe=s(g3);gMe=n(UPe,"STRONG",{});var XAt=s(gMe);LIr=r(XAt,"big_bird"),XAt.forEach(t),xIr=r(UPe," \u2014 "),JY=n(UPe,"A",{href:!0});var zAt=s(JY);$Ir=r(zAt,"FlaxBigBirdForMultipleChoice"),zAt.forEach(t),kIr=r(UPe," (BigBird model)"),UPe.forEach(t),SIr=i(To),h3=n(To,"LI",{});var JPe=s(h3);hMe=n(JPe,"STRONG",{});var QAt=s(hMe);RIr=r(QAt,"distilbert"),QAt.forEach(t),BIr=r(JPe," \u2014 "),YY=n(JPe,"A",{href:!0});var WAt=s(YY);PIr=r(WAt,"FlaxDistilBertForMultipleChoice"),WAt.forEach(t),IIr=r(JPe," (DistilBERT model)"),JPe.forEach(t),qIr=i(To),p3=n(To,"LI",{});var YPe=s(p3);pMe=n(YPe,"STRONG",{});var HAt=s(pMe);NIr=r(HAt,"electra"),HAt.forEach(t),jIr=r(YPe," \u2014 "),KY=n(YPe,"A",{href:!0});var UAt=s(KY);DIr=r(UAt,"FlaxElectraForMultipleChoice"),UAt.forEach(t),GIr=r(YPe," (ELECTRA model)"),YPe.forEach(t),OIr=i(To),u3=n(To,"LI",{});var KPe=s(u3);uMe=n(KPe,"STRONG",{});var JAt=s(uMe);VIr=r(JAt,"roberta"),JAt.forEach(t),XIr=r(KPe," \u2014 "),ZY=n(KPe,"A",{href:!0});var YAt=s(ZY);zIr=r(YAt,"FlaxRobertaForMultipleChoice"),YAt.forEach(t),QIr=r(KPe," (RoBERTa model)"),KPe.forEach(t),WIr=i(To),_3=n(To,"LI",{});var ZPe=s(_3);_Me=n(ZPe,"STRONG",{});var KAt=s(_Me);HIr=r(KAt,"roformer"),KAt.forEach(t),UIr=r(ZPe," \u2014 "),eK=n(ZPe,"A",{href:!0});var ZAt=s(eK);JIr=r(ZAt,"FlaxRoFormerForMultipleChoice"),ZAt.forEach(t),YIr=r(ZPe," (RoFormer model)"),ZPe.forEach(t),KIr=i(To),b3=n(To,"LI",{});var eIe=s(b3);bMe=n(eIe,"STRONG",{});var e6t=s(bMe);ZIr=r(e6t,"xlm-roberta"),e6t.forEach(t),eqr=r(eIe," \u2014 "),oK=n(eIe,"A",{href:!0});var o6t=s(oK);oqr=r(o6t,"FlaxXLMRobertaForMultipleChoice"),o6t.forEach(t),rqr=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),To.forEach(t),tqr=i(ei),T(v3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),rNe=i(f),Zc=n(f,"H2",{class:!0});var dDe=s(Zc);F3=n(dDe,"A",{id:!0,class:!0,href:!0});var r6t=s(F3);vMe=n(r6t,"SPAN",{});var t6t=s(vMe);T(Xx.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),aqr=i(dDe),FMe=n(dDe,"SPAN",{});var a6t=s(FMe);nqr=r(a6t,"FlaxAutoModelForNextSentencePrediction"),a6t.forEach(t),dDe.forEach(t),tNe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(zx.$$.fragment,oi),sqr=i(oi),ef=n(oi,"P",{});var ree=s(ef);lqr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rK=n(ree,"A",{href:!0});var n6t=s(rK);iqr=r(n6t,"from_pretrained()"),n6t.forEach(t),dqr=r(ree," class method or the "),tK=n(ree,"A",{href:!0});var s6t=s(tK);cqr=r(s6t,"from_config()"),s6t.forEach(t),fqr=r(ree,` class
method.`),ree.forEach(t),mqr=i(oi),Qx=n(oi,"P",{});var cDe=s(Qx);gqr=r(cDe,"This class cannot be instantiated directly using "),TMe=n(cDe,"CODE",{});var l6t=s(TMe);hqr=r(l6t,"__init__()"),l6t.forEach(t),pqr=r(cDe," (throws an error)."),cDe.forEach(t),uqr=i(oi),Ht=n(oi,"DIV",{class:!0});var zA=s(Ht);T(Wx.$$.fragment,zA),_qr=i(zA),MMe=n(zA,"P",{});var i6t=s(MMe);bqr=r(i6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),i6t.forEach(t),vqr=i(zA),of=n(zA,"P",{});var tee=s(of);Fqr=r(tee,`Note:
Loading a model from its configuration file does `),EMe=n(tee,"STRONG",{});var d6t=s(EMe);Tqr=r(d6t,"not"),d6t.forEach(t),Mqr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(tee,"A",{href:!0});var c6t=s(aK);Eqr=r(c6t,"from_pretrained()"),c6t.forEach(t),Cqr=r(tee," to load the model weights."),tee.forEach(t),wqr=i(zA),T(T3.$$.fragment,zA),zA.forEach(t),Aqr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Hx.$$.fragment,ri),yqr=i(ri),CMe=n(ri,"P",{});var f6t=s(CMe);Lqr=r(f6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),f6t.forEach(t),xqr=i(ri),Mn=n(ri,"P",{});var QA=s(Mn);$qr=r(QA,"The model class to instantiate is selected based on the "),wMe=n(QA,"CODE",{});var m6t=s(wMe);kqr=r(m6t,"model_type"),m6t.forEach(t),Sqr=r(QA,` property of the config object (either
passed as an argument or loaded from `),AMe=n(QA,"CODE",{});var g6t=s(AMe);Rqr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),Bqr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(QA,"CODE",{});var h6t=s(yMe);Pqr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),Iqr=r(QA,":"),QA.forEach(t),qqr=i(ri),LMe=n(ri,"UL",{});var p6t=s(LMe);M3=n(p6t,"LI",{});var oIe=s(M3);xMe=n(oIe,"STRONG",{});var u6t=s(xMe);Nqr=r(u6t,"bert"),u6t.forEach(t),jqr=r(oIe," \u2014 "),nK=n(oIe,"A",{href:!0});var _6t=s(nK);Dqr=r(_6t,"FlaxBertForNextSentencePrediction"),_6t.forEach(t),Gqr=r(oIe," (BERT model)"),oIe.forEach(t),p6t.forEach(t),Oqr=i(ri),T(E3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),aNe=i(f),rf=n(f,"H2",{class:!0});var fDe=s(rf);C3=n(fDe,"A",{id:!0,class:!0,href:!0});var b6t=s(C3);$Me=n(b6t,"SPAN",{});var v6t=s($Me);T(Ux.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),Vqr=i(fDe),kMe=n(fDe,"SPAN",{});var F6t=s(kMe);Xqr=r(F6t,"FlaxAutoModelForImageClassification"),F6t.forEach(t),fDe.forEach(t),nNe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Jx.$$.fragment,ti),zqr=i(ti),tf=n(ti,"P",{});var aee=s(tf);Qqr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sK=n(aee,"A",{href:!0});var T6t=s(sK);Wqr=r(T6t,"from_pretrained()"),T6t.forEach(t),Hqr=r(aee," class method or the "),lK=n(aee,"A",{href:!0});var M6t=s(lK);Uqr=r(M6t,"from_config()"),M6t.forEach(t),Jqr=r(aee,` class
method.`),aee.forEach(t),Yqr=i(ti),Yx=n(ti,"P",{});var mDe=s(Yx);Kqr=r(mDe,"This class cannot be instantiated directly using "),SMe=n(mDe,"CODE",{});var E6t=s(SMe);Zqr=r(E6t,"__init__()"),E6t.forEach(t),eNr=r(mDe," (throws an error)."),mDe.forEach(t),oNr=i(ti),Ut=n(ti,"DIV",{class:!0});var WA=s(Ut);T(Kx.$$.fragment,WA),rNr=i(WA),RMe=n(WA,"P",{});var C6t=s(RMe);tNr=r(C6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C6t.forEach(t),aNr=i(WA),af=n(WA,"P",{});var nee=s(af);nNr=r(nee,`Note:
Loading a model from its configuration file does `),BMe=n(nee,"STRONG",{});var w6t=s(BMe);sNr=r(w6t,"not"),w6t.forEach(t),lNr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(nee,"A",{href:!0});var A6t=s(iK);iNr=r(A6t,"from_pretrained()"),A6t.forEach(t),dNr=r(nee," to load the model weights."),nee.forEach(t),cNr=i(WA),T(w3.$$.fragment,WA),WA.forEach(t),fNr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Zx.$$.fragment,ai),mNr=i(ai),PMe=n(ai,"P",{});var y6t=s(PMe);gNr=r(y6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y6t.forEach(t),hNr=i(ai),En=n(ai,"P",{});var HA=s(En);pNr=r(HA,"The model class to instantiate is selected based on the "),IMe=n(HA,"CODE",{});var L6t=s(IMe);uNr=r(L6t,"model_type"),L6t.forEach(t),_Nr=r(HA,` property of the config object (either
passed as an argument or loaded from `),qMe=n(HA,"CODE",{});var x6t=s(qMe);bNr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),vNr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(HA,"CODE",{});var $6t=s(NMe);FNr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),TNr=r(HA,":"),HA.forEach(t),MNr=i(ai),e9=n(ai,"UL",{});var gDe=s(e9);A3=n(gDe,"LI",{});var rIe=s(A3);jMe=n(rIe,"STRONG",{});var k6t=s(jMe);ENr=r(k6t,"beit"),k6t.forEach(t),CNr=r(rIe," \u2014 "),dK=n(rIe,"A",{href:!0});var S6t=s(dK);wNr=r(S6t,"FlaxBeitForImageClassification"),S6t.forEach(t),ANr=r(rIe," (BEiT model)"),rIe.forEach(t),yNr=i(gDe),y3=n(gDe,"LI",{});var tIe=s(y3);DMe=n(tIe,"STRONG",{});var R6t=s(DMe);LNr=r(R6t,"vit"),R6t.forEach(t),xNr=r(tIe," \u2014 "),cK=n(tIe,"A",{href:!0});var B6t=s(cK);$Nr=r(B6t,"FlaxViTForImageClassification"),B6t.forEach(t),kNr=r(tIe," (ViT model)"),tIe.forEach(t),gDe.forEach(t),SNr=i(ai),T(L3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),sNe=i(f),nf=n(f,"H2",{class:!0});var hDe=s(nf);x3=n(hDe,"A",{id:!0,class:!0,href:!0});var P6t=s(x3);GMe=n(P6t,"SPAN",{});var I6t=s(GMe);T(o9.$$.fragment,I6t),I6t.forEach(t),P6t.forEach(t),RNr=i(hDe),OMe=n(hDe,"SPAN",{});var q6t=s(OMe);BNr=r(q6t,"FlaxAutoModelForVision2Seq"),q6t.forEach(t),hDe.forEach(t),lNe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(r9.$$.fragment,ni),PNr=i(ni),sf=n(ni,"P",{});var see=s(sf);INr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fK=n(see,"A",{href:!0});var N6t=s(fK);qNr=r(N6t,"from_pretrained()"),N6t.forEach(t),NNr=r(see," class method or the "),mK=n(see,"A",{href:!0});var j6t=s(mK);jNr=r(j6t,"from_config()"),j6t.forEach(t),DNr=r(see,` class
method.`),see.forEach(t),GNr=i(ni),t9=n(ni,"P",{});var pDe=s(t9);ONr=r(pDe,"This class cannot be instantiated directly using "),VMe=n(pDe,"CODE",{});var D6t=s(VMe);VNr=r(D6t,"__init__()"),D6t.forEach(t),XNr=r(pDe," (throws an error)."),pDe.forEach(t),zNr=i(ni),Jt=n(ni,"DIV",{class:!0});var UA=s(Jt);T(a9.$$.fragment,UA),QNr=i(UA),XMe=n(UA,"P",{});var G6t=s(XMe);WNr=r(G6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G6t.forEach(t),HNr=i(UA),lf=n(UA,"P",{});var lee=s(lf);UNr=r(lee,`Note:
Loading a model from its configuration file does `),zMe=n(lee,"STRONG",{});var O6t=s(zMe);JNr=r(O6t,"not"),O6t.forEach(t),YNr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(lee,"A",{href:!0});var V6t=s(gK);KNr=r(V6t,"from_pretrained()"),V6t.forEach(t),ZNr=r(lee," to load the model weights."),lee.forEach(t),ejr=i(UA),T($3.$$.fragment,UA),UA.forEach(t),ojr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(n9.$$.fragment,si),rjr=i(si),QMe=n(si,"P",{});var X6t=s(QMe);tjr=r(X6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X6t.forEach(t),ajr=i(si),Cn=n(si,"P",{});var JA=s(Cn);njr=r(JA,"The model class to instantiate is selected based on the "),WMe=n(JA,"CODE",{});var z6t=s(WMe);sjr=r(z6t,"model_type"),z6t.forEach(t),ljr=r(JA,` property of the config object (either
passed as an argument or loaded from `),HMe=n(JA,"CODE",{});var Q6t=s(HMe);ijr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),djr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(JA,"CODE",{});var W6t=s(UMe);cjr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),fjr=r(JA,":"),JA.forEach(t),mjr=i(si),JMe=n(si,"UL",{});var H6t=s(JMe);k3=n(H6t,"LI",{});var aIe=s(k3);YMe=n(aIe,"STRONG",{});var U6t=s(YMe);gjr=r(U6t,"vision-encoder-decoder"),U6t.forEach(t),hjr=r(aIe," \u2014 "),hK=n(aIe,"A",{href:!0});var J6t=s(hK);pjr=r(J6t,"FlaxVisionEncoderDecoderModel"),J6t.forEach(t),ujr=r(aIe," (Vision Encoder decoder model)"),aIe.forEach(t),H6t.forEach(t),_jr=i(si),T(S3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(e8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(C$,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(w$,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig"),c(A$,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig"),c(y$,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig"),c(L$,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig"),c(x$,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c($$,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig"),c(k$,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(S$,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(R$,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(B$,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig"),c(P$,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig"),c(I$,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig"),c(q$,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig"),c(N$,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig"),c(j$,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig"),c(D$,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(G$,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(O$,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(V$,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig"),c(X$,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(z$,"href","/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Q$,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig"),c(W$,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig"),c(H$,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig"),c(U$,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig"),c(J$,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig"),c(Y$,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig"),c(K$,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Z$,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ek,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig"),c(ok,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig"),c(rk,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig"),c(tk,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig"),c(ak,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNConfig"),c(nk,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config"),c(sk,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(lk,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig"),c(ik,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig"),c(dk,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig"),c(ck,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(fk,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(mk,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gk,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig"),c(hk,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig"),c(pk,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeConfig"),c(uk,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig"),c(_k,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config"),c(bk,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig"),c(vk,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Fk,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig"),c(Tk,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Mk,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ek,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(Ck,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig"),c(wk,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config"),c(Ak,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(yk,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Lk,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig"),c(xk,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig"),c($k,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kk,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig"),c(Sk,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Rk,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Bk,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Pk,"href","/docs/transformers/pr_17205/en/model_doc/rag#transformers.RagConfig"),c(Ik,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmConfig"),c(qk,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig"),c(Nk,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig"),c(jk,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig"),c(Dk,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig"),c(Gk,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ok,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig"),c(Vk,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig"),c(Xk,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig"),c(zk,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig"),c(Qk,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig"),c(Wk,"href","/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Hk,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Uk,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Jk,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig"),c(Yk,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Kk,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig"),c(Zk,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config"),c(eS,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig"),c(oS,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig"),c(rS,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(tS,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRConfig"),c(aS,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(nS,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(sS,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig"),c(lS,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltConfig"),c(iS,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(dS,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(cS,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(fS,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig"),c(mS,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(gS,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(hS,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig"),c(pS,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig"),c(uS,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig"),c(_S,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(bS,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(vS,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(FS,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig"),c(TS,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig"),c(MS,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(ES,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(CS,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(wS,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AS,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartTokenizer"),c(yS,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartTokenizerFast"),c(LS,"href","/docs/transformers/pr_17205/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xS,"href","/docs/transformers/pr_17205/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c($S,"href","/docs/transformers/pr_17205/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(kS,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(SS,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(RS,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(BS,"href","/docs/transformers/pr_17205/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(PS,"href","/docs/transformers/pr_17205/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(IS,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(qS,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NS,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jS,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DS,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GS,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(OS,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VS,"href","/docs/transformers/pr_17205/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(XS,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertTokenizer"),c(zS,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineTokenizer"),c(WS,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPTokenizer"),c(HS,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(US,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(JS,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17205/en/model_doc/cpm#transformers.CpmTokenizer"),c(KS,"href","/docs/transformers/pr_17205/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(eR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rR,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaTokenizer"),c(tR,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(aR,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(nR,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(sR,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(lR,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(dR,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(cR,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraTokenizer"),c(fR,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mR,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(gR,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetTokenizer"),c(hR,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(pR,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uR,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_R,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(bR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17205/en/model_doc/herbert#transformers.HerbertTokenizer"),c(wR,"href","/docs/transformers/pr_17205/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c($R,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(kR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(SR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(RR,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(BR,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PR,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDTokenizer"),c(IR,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDTokenizerFast"),c(qR,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerTokenizer"),c(NR,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(jR,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeTokenizer"),c(DR,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(GR,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(VR,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianTokenizer"),c(XR,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartTokenizer"),c(zR,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(QR,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(WR,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(HR,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(UR,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17205/en/model_doc/mluke#transformers.MLukeTokenizer"),c(YR,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(KR,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(eB,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(oB,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.T5Tokenizer"),c(rB,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.T5TokenizerFast"),c(tB,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sB,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lB,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iB,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dB,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cB,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(fB,"href","/docs/transformers/pr_17205/en/model_doc/phobert#transformers.PhobertTokenizer"),c(mB,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartTokenizer"),c(gB,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(hB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(pB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17205/en/model_doc/rag#transformers.RagTokenizer"),c(_B,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmTokenizer"),c(bB,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmTokenizerFast"),c(vB,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerTokenizer"),c(FB,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(TB,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertTokenizer"),c(MB,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(CB,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yB,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(LB,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(xB,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c($B,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(kB,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterTokenizer"),c(SB,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(RB,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(BB,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.T5Tokenizer"),c(IB,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.T5TokenizerFast"),c(qB,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasTokenizer"),c(NB,"href","/docs/transformers/pr_17205/en/model_doc/tapex#transformers.TapexTokenizer"),c(jB,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(DB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(GB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(XB,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMTokenizer"),c(zB,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(QB,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMTokenizer"),c(WB,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(HB,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(UB,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(JB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KB,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(eP,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(oP,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoFeatureExtractor"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(rP,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(tP,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lP,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hP,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pP,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LP,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoProcessor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(xP,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c($P,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPProcessor"),c(kP,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(SP,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(RP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(IP,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(qP,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRProcessor"),c(NP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DP,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltProcessor"),c(GP,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(OP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VP,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoModel"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(XP,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zP,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QP,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WP,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertModel"),c(HP,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartModel"),c(UP,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitModel"),c(JP,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel"),c(YP,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(KP,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdModel"),c(ZP,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(eI,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oI,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rI,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertModel"),c(tI,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineModel"),c(aI,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPModel"),c(nI,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertModel"),c(sI,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextModel"),c(lI,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLModel"),c(iI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(dI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(cI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(fI,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaModel"),c(mI,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(gI,"href","/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(hI,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTModel"),c(pI,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrModel"),c(uI,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertModel"),c(_I,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(bI,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTModel"),c(vI,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraModel"),c(FI,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertModel"),c(TI,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaModel"),c(MI,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetModel"),c(EI,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTModel"),c(CI,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelModel"),c(wI,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelBaseModel"),c(AI,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNModel"),c(yI,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Model"),c(LI,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(xI,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJModel"),c($I,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertModel"),c(kI,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertModel"),c(SI,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(RI,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(BI,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PI,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDModel"),c(II,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerModel"),c(qI,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeModel"),c(NI,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertModel"),c(jI,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Model"),c(DI,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianModel"),c(GI,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerModel"),c(OI,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartModel"),c(VI,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XI,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zI,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel"),c(QI,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetModel"),c(WI,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Model"),c(HI,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UI,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JI,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTModel"),c(YI,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusModel"),c(KI,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZI,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(uq,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinModel"),c(_q,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Fq,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Tq,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Mq,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanModel"),c(Eq,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltModel"),c(Cq,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wq,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Aq,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTModel"),c(yq,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Lq,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xq,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMModel"),c($q,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMModel"),c(kq,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMModel"),c(Sq,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Rq,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Bq,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Pq,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetModel"),c(Iq,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosModel"),c(qq,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForPreTraining"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Nq,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jq,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dq,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gq,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Oq,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Vq,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForPreTraining"),c(Xq,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(zq,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Kq,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Zq,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaForPreTraining"),c(eN,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForPreTraining"),c(oN,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rN,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(tN,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aN,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nN,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sN,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lN,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(iN,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(dN,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(cN,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fN,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mN,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel"),c(gN,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(hN,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pN,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uN,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_N,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(bN,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(vN,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(FN,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(TN,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(MN,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(EN,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(CN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(AN,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForCausalLM"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(yN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($N,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForCausalLM"),c(kN,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertLMHeadModel"),c(SN,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(RN,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(BN,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(PN,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(IN,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(qN,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(NN,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jN,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(DN,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForCausalLM"),c(GN,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ON,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(VN,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(XN,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianForCausalLM"),c(zN,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForCausalLM"),c(QN,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(WN,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HN,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTForCausalLM"),c(UN,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(JN,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(YN,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(KN,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ej,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(oj,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(rj,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(tj,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(aj,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(nj,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sj,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(lj,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ij,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(dj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(cj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(fj,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u2,"id","transformers.AutoModelForMaskedLM"),c(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(mj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pj,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(vj,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yj,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(xj,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kj,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zj,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o1,"id","transformers.AutoModelForSeq2SeqLM"),c(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Uj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kj,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tD,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianMTModel"),c(lD,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSequenceClassification"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(pD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bD,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c($D,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForMultipleChoice"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(fG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForNextSentencePrediction"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(VG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QG,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(WG,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(HG,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(UG,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(JG,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForTokenClassification"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(tO,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForTokenClassification"),c(nO,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(lO,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(iO,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(dO,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(fO,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(gO,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(hO,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(pO,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(_O,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(bO,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(vO,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(MO,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(EO,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(AO,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(yO,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(xO,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c($O,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(kO,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(SO,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForQuestionAnswering"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(RO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(JO,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_V,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FV,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(TV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForImageClassification"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(wV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForImageClassification"),c(xV,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($V,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kV,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SV,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RV,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(BV,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(PV,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(IV,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(qV,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(NV,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(jV,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(DV,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(GV,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(OV,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForImageClassification"),c(VV,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanForImageClassification"),c(XV,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForVision2Seq"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(zV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForAudioClassification"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(UV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForAudioFrameClassification"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(fX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(mX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForCTC"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(gX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_X,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForCTC"),c(bX,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForCTC"),c(vX,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(CX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LX,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForAudioXVector"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(xX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(RX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForMaskedImageModeling"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(IX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DX,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GX,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.AutoModelForObjectDetection"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForObjectDetection"),c(QX,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.AutoModelForImageSegmentation"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(WX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.AutoModelForSemanticSegmentation"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oz,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rz,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tz,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.AutoModelForInstanceSegmentation"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(az,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.TFAutoModel"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(iz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertModel"),c(mz,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartModel"),c(gz,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertModel"),c(hz,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(pz,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uz,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertModel"),c(_z,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.TFCLIPModel"),c(bz,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertModel"),c(vz,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextModel"),c(Fz,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Tz,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Mz,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaModel"),c(Ez,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Cz,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(wz,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Az,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraModel"),c(yz,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Lz,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelModel"),c(xz,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c($z,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2Model"),c(kz,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJModel"),c(Sz,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.TFHubertModel"),c(Rz,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Bz,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDModel"),c(Pz,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerModel"),c(Iz,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertModel"),c(qz,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianModel"),c(Nz,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartModel"),c(jz,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Dz,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Gz,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5Model"),c(Oz,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Vz,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Xz,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertModel"),c(zz,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaModel"),c(Qz,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Wz,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Hz,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5Model"),c(Uz,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasModel"),c(Jz,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Yz,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTModel"),c(Kz,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Zz,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMModel"),c(oQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rQ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.TFAutoModelForPreTraining"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iQ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gQ,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pQ,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bQ,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.TFAutoModelForCausalLM"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(BQ,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IQ,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qQ,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(jQ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(DQ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(GQ,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.TFAutoModelForImageClassification"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(HQ,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(UQ,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForMaskedLM"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(eW,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(oW,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(aW,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(nW,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sW,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(lW,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iW,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(dW,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cW,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(fW,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(mW,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gW,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(hW,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pW,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(uW,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_W,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bW,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AW,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianMTModel"),c(LW,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c($W,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModelForSequenceClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(SW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForMultipleChoice"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(lH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(yH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(kH,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForTokenClassification"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(IH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(GH,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(XH,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(zH,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QH,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WH,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(HH,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(UH,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(JH,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(YH,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(oU,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(rU,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(tU,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(aU,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForQuestionAnswering"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(nU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(_U,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(AU,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForVision2Seq"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(SU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.FlaxAutoModel"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(IU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertModel"),c(DU,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartModel"),c(GU,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitModel"),c(OU,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertModel"),c(VU,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(XU,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(zU,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(QU,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WU,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(HU,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraModel"),c(UU,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(JU,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(YU,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(KU,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianModel"),c(ZU,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartModel"),c(eJ,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5Model"),c(oJ,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(rJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(tJ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(aJ,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5Model"),c(nJ,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(sJ,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTModel"),c(lJ,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(iJ,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(dJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.FlaxAutoModelForCausalLM"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(hJ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(pJ,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(uJ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(_J,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(bJ,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(vJ,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(FJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(TJ,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.FlaxAutoModelForPreTraining"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(AJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(LJ,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(xJ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c($J,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(IJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForMaskedLM"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(tY,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(aY,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForTokenClassification"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(NY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(jY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(DY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(GY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(OY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(VY,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(XY,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(KY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(eK,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForImageClassification"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(sK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(cK,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForVision2Seq"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(fK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,YA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,KA),e(Xe,yn),e(Xe,Ln),e(Ln,ZA),e(Xe,fi),e(Xe,xn),e(xn,e6),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,b$),e(Ae,gi),e(gi,v$),e(Ae,F$),b(f,Eo,_),b(f,Ea,_),e(Ea,T$),e(Ea,pf),e(pf,M$),e(Ea,uDe),b(f,nIe,_),b(f,hi,_),e(hi,uf),e(uf,iee),M(o6,iee,null),e(hi,_De),e(hi,dee),e(dee,bDe),b(f,sIe,_),b(f,$n,_),e($n,vDe),e($n,cee),e(cee,FDe),e($n,TDe),e($n,fee),e(fee,MDe),e($n,EDe),b(f,lIe,_),M(r6,f,_),b(f,iIe,_),b(f,E$,_),e(E$,CDe),b(f,dIe,_),M(_f,f,_),b(f,cIe,_),b(f,pi,_),e(pi,bf),e(bf,mee),M(t6,mee,null),e(pi,wDe),e(pi,gee),e(gee,ADe),b(f,fIe,_),b(f,Co,_),M(a6,Co,null),e(Co,yDe),e(Co,n6),e(n6,LDe),e(n6,C$),e(C$,xDe),e(n6,$De),e(Co,kDe),e(Co,s6),e(s6,SDe),e(s6,hee),e(hee,RDe),e(s6,BDe),e(Co,PDe),e(Co,Er),M(l6,Er,null),e(Er,IDe),e(Er,pee),e(pee,qDe),e(Er,NDe),e(Er,ui),e(ui,jDe),e(ui,uee),e(uee,DDe),e(ui,GDe),e(ui,_ee),e(_ee,ODe),e(ui,VDe),e(Er,XDe),e(Er,A),e(A,vf),e(vf,bee),e(bee,zDe),e(vf,QDe),e(vf,w$),e(w$,WDe),e(vf,HDe),e(A,UDe),e(A,Ff),e(Ff,vee),e(vee,JDe),e(Ff,YDe),e(Ff,A$),e(A$,KDe),e(Ff,ZDe),e(A,eGe),e(A,Tf),e(Tf,Fee),e(Fee,oGe),e(Tf,rGe),e(Tf,y$),e(y$,tGe),e(Tf,aGe),e(A,nGe),e(A,Mf),e(Mf,Tee),e(Tee,sGe),e(Mf,lGe),e(Mf,L$),e(L$,iGe),e(Mf,dGe),e(A,cGe),e(A,Ef),e(Ef,Mee),e(Mee,fGe),e(Ef,mGe),e(Ef,x$),e(x$,gGe),e(Ef,hGe),e(A,pGe),e(A,Cf),e(Cf,Eee),e(Eee,uGe),e(Cf,_Ge),e(Cf,$$),e($$,bGe),e(Cf,vGe),e(A,FGe),e(A,wf),e(wf,Cee),e(Cee,TGe),e(wf,MGe),e(wf,k$),e(k$,EGe),e(wf,CGe),e(A,wGe),e(A,Af),e(Af,wee),e(wee,AGe),e(Af,yGe),e(Af,S$),e(S$,LGe),e(Af,xGe),e(A,$Ge),e(A,yf),e(yf,Aee),e(Aee,kGe),e(yf,SGe),e(yf,R$),e(R$,RGe),e(yf,BGe),e(A,PGe),e(A,Lf),e(Lf,yee),e(yee,IGe),e(Lf,qGe),e(Lf,B$),e(B$,NGe),e(Lf,jGe),e(A,DGe),e(A,xf),e(xf,Lee),e(Lee,GGe),e(xf,OGe),e(xf,P$),e(P$,VGe),e(xf,XGe),e(A,zGe),e(A,$f),e($f,xee),e(xee,QGe),e($f,WGe),e($f,I$),e(I$,HGe),e($f,UGe),e(A,JGe),e(A,kf),e(kf,$ee),e($ee,YGe),e(kf,KGe),e(kf,q$),e(q$,ZGe),e(kf,eOe),e(A,oOe),e(A,Sf),e(Sf,kee),e(kee,rOe),e(Sf,tOe),e(Sf,N$),e(N$,aOe),e(Sf,nOe),e(A,sOe),e(A,Rf),e(Rf,See),e(See,lOe),e(Rf,iOe),e(Rf,j$),e(j$,dOe),e(Rf,cOe),e(A,fOe),e(A,Bf),e(Bf,Ree),e(Ree,mOe),e(Bf,gOe),e(Bf,D$),e(D$,hOe),e(Bf,pOe),e(A,uOe),e(A,Pf),e(Pf,Bee),e(Bee,_Oe),e(Pf,bOe),e(Pf,G$),e(G$,vOe),e(Pf,FOe),e(A,TOe),e(A,If),e(If,Pee),e(Pee,MOe),e(If,EOe),e(If,O$),e(O$,COe),e(If,wOe),e(A,AOe),e(A,qf),e(qf,Iee),e(Iee,yOe),e(qf,LOe),e(qf,V$),e(V$,xOe),e(qf,$Oe),e(A,kOe),e(A,Nf),e(Nf,qee),e(qee,SOe),e(Nf,ROe),e(Nf,X$),e(X$,BOe),e(Nf,POe),e(A,IOe),e(A,jf),e(jf,Nee),e(Nee,qOe),e(jf,NOe),e(jf,z$),e(z$,jOe),e(jf,DOe),e(A,GOe),e(A,Df),e(Df,jee),e(jee,OOe),e(Df,VOe),e(Df,Q$),e(Q$,XOe),e(Df,zOe),e(A,QOe),e(A,Gf),e(Gf,Dee),e(Dee,WOe),e(Gf,HOe),e(Gf,W$),e(W$,UOe),e(Gf,JOe),e(A,YOe),e(A,Of),e(Of,Gee),e(Gee,KOe),e(Of,ZOe),e(Of,H$),e(H$,eVe),e(Of,oVe),e(A,rVe),e(A,Vf),e(Vf,Oee),e(Oee,tVe),e(Vf,aVe),e(Vf,U$),e(U$,nVe),e(Vf,sVe),e(A,lVe),e(A,Xf),e(Xf,Vee),e(Vee,iVe),e(Xf,dVe),e(Xf,J$),e(J$,cVe),e(Xf,fVe),e(A,mVe),e(A,zf),e(zf,Xee),e(Xee,gVe),e(zf,hVe),e(zf,Y$),e(Y$,pVe),e(zf,uVe),e(A,_Ve),e(A,Qf),e(Qf,zee),e(zee,bVe),e(Qf,vVe),e(Qf,K$),e(K$,FVe),e(Qf,TVe),e(A,MVe),e(A,Wf),e(Wf,Qee),e(Qee,EVe),e(Wf,CVe),e(Wf,Z$),e(Z$,wVe),e(Wf,AVe),e(A,yVe),e(A,Hf),e(Hf,Wee),e(Wee,LVe),e(Hf,xVe),e(Hf,ek),e(ek,$Ve),e(Hf,kVe),e(A,SVe),e(A,Uf),e(Uf,Hee),e(Hee,RVe),e(Uf,BVe),e(Uf,ok),e(ok,PVe),e(Uf,IVe),e(A,qVe),e(A,Jf),e(Jf,Uee),e(Uee,NVe),e(Jf,jVe),e(Jf,rk),e(rk,DVe),e(Jf,GVe),e(A,OVe),e(A,Yf),e(Yf,Jee),e(Jee,VVe),e(Yf,XVe),e(Yf,tk),e(tk,zVe),e(Yf,QVe),e(A,WVe),e(A,Kf),e(Kf,Yee),e(Yee,HVe),e(Kf,UVe),e(Kf,ak),e(ak,JVe),e(Kf,YVe),e(A,KVe),e(A,Zf),e(Zf,Kee),e(Kee,ZVe),e(Zf,eXe),e(Zf,nk),e(nk,oXe),e(Zf,rXe),e(A,tXe),e(A,em),e(em,Zee),e(Zee,aXe),e(em,nXe),e(em,sk),e(sk,sXe),e(em,lXe),e(A,iXe),e(A,om),e(om,eoe),e(eoe,dXe),e(om,cXe),e(om,lk),e(lk,fXe),e(om,mXe),e(A,gXe),e(A,rm),e(rm,ooe),e(ooe,hXe),e(rm,pXe),e(rm,ik),e(ik,uXe),e(rm,_Xe),e(A,bXe),e(A,tm),e(tm,roe),e(roe,vXe),e(tm,FXe),e(tm,dk),e(dk,TXe),e(tm,MXe),e(A,EXe),e(A,am),e(am,toe),e(toe,CXe),e(am,wXe),e(am,ck),e(ck,AXe),e(am,yXe),e(A,LXe),e(A,nm),e(nm,aoe),e(aoe,xXe),e(nm,$Xe),e(nm,fk),e(fk,kXe),e(nm,SXe),e(A,RXe),e(A,sm),e(sm,noe),e(noe,BXe),e(sm,PXe),e(sm,mk),e(mk,IXe),e(sm,qXe),e(A,NXe),e(A,lm),e(lm,soe),e(soe,jXe),e(lm,DXe),e(lm,gk),e(gk,GXe),e(lm,OXe),e(A,VXe),e(A,im),e(im,loe),e(loe,XXe),e(im,zXe),e(im,hk),e(hk,QXe),e(im,WXe),e(A,HXe),e(A,dm),e(dm,ioe),e(ioe,UXe),e(dm,JXe),e(dm,pk),e(pk,YXe),e(dm,KXe),e(A,ZXe),e(A,cm),e(cm,doe),e(doe,eze),e(cm,oze),e(cm,uk),e(uk,rze),e(cm,tze),e(A,aze),e(A,fm),e(fm,coe),e(coe,nze),e(fm,sze),e(fm,_k),e(_k,lze),e(fm,ize),e(A,dze),e(A,mm),e(mm,foe),e(foe,cze),e(mm,fze),e(mm,bk),e(bk,mze),e(mm,gze),e(A,hze),e(A,gm),e(gm,moe),e(moe,pze),e(gm,uze),e(gm,vk),e(vk,_ze),e(gm,bze),e(A,vze),e(A,hm),e(hm,goe),e(goe,Fze),e(hm,Tze),e(hm,Fk),e(Fk,Mze),e(hm,Eze),e(A,Cze),e(A,pm),e(pm,hoe),e(hoe,wze),e(pm,Aze),e(pm,Tk),e(Tk,yze),e(pm,Lze),e(A,xze),e(A,um),e(um,poe),e(poe,$ze),e(um,kze),e(um,Mk),e(Mk,Sze),e(um,Rze),e(A,Bze),e(A,_m),e(_m,uoe),e(uoe,Pze),e(_m,Ize),e(_m,Ek),e(Ek,qze),e(_m,Nze),e(A,jze),e(A,bm),e(bm,_oe),e(_oe,Dze),e(bm,Gze),e(bm,Ck),e(Ck,Oze),e(bm,Vze),e(A,Xze),e(A,vm),e(vm,boe),e(boe,zze),e(vm,Qze),e(vm,wk),e(wk,Wze),e(vm,Hze),e(A,Uze),e(A,Fm),e(Fm,voe),e(voe,Jze),e(Fm,Yze),e(Fm,Ak),e(Ak,Kze),e(Fm,Zze),e(A,eQe),e(A,Tm),e(Tm,Foe),e(Foe,oQe),e(Tm,rQe),e(Tm,yk),e(yk,tQe),e(Tm,aQe),e(A,nQe),e(A,Mm),e(Mm,Toe),e(Toe,sQe),e(Mm,lQe),e(Mm,Lk),e(Lk,iQe),e(Mm,dQe),e(A,cQe),e(A,Em),e(Em,Moe),e(Moe,fQe),e(Em,mQe),e(Em,xk),e(xk,gQe),e(Em,hQe),e(A,pQe),e(A,Cm),e(Cm,Eoe),e(Eoe,uQe),e(Cm,_Qe),e(Cm,$k),e($k,bQe),e(Cm,vQe),e(A,FQe),e(A,wm),e(wm,Coe),e(Coe,TQe),e(wm,MQe),e(wm,kk),e(kk,EQe),e(wm,CQe),e(A,wQe),e(A,Am),e(Am,woe),e(woe,AQe),e(Am,yQe),e(Am,Sk),e(Sk,LQe),e(Am,xQe),e(A,$Qe),e(A,ym),e(ym,Aoe),e(Aoe,kQe),e(ym,SQe),e(ym,Rk),e(Rk,RQe),e(ym,BQe),e(A,PQe),e(A,Lm),e(Lm,yoe),e(yoe,IQe),e(Lm,qQe),e(Lm,Bk),e(Bk,NQe),e(Lm,jQe),e(A,DQe),e(A,xm),e(xm,Loe),e(Loe,GQe),e(xm,OQe),e(xm,Pk),e(Pk,VQe),e(xm,XQe),e(A,zQe),e(A,$m),e($m,xoe),e(xoe,QQe),e($m,WQe),e($m,Ik),e(Ik,HQe),e($m,UQe),e(A,JQe),e(A,km),e(km,$oe),e($oe,YQe),e(km,KQe),e(km,qk),e(qk,ZQe),e(km,eWe),e(A,oWe),e(A,Sm),e(Sm,koe),e(koe,rWe),e(Sm,tWe),e(Sm,Nk),e(Nk,aWe),e(Sm,nWe),e(A,sWe),e(A,Rm),e(Rm,Soe),e(Soe,lWe),e(Rm,iWe),e(Rm,jk),e(jk,dWe),e(Rm,cWe),e(A,fWe),e(A,Bm),e(Bm,Roe),e(Roe,mWe),e(Bm,gWe),e(Bm,Dk),e(Dk,hWe),e(Bm,pWe),e(A,uWe),e(A,Pm),e(Pm,Boe),e(Boe,_We),e(Pm,bWe),e(Pm,Gk),e(Gk,vWe),e(Pm,FWe),e(A,TWe),e(A,Im),e(Im,Poe),e(Poe,MWe),e(Im,EWe),e(Im,Ok),e(Ok,CWe),e(Im,wWe),e(A,AWe),e(A,qm),e(qm,Ioe),e(Ioe,yWe),e(qm,LWe),e(qm,Vk),e(Vk,xWe),e(qm,$We),e(A,kWe),e(A,Nm),e(Nm,qoe),e(qoe,SWe),e(Nm,RWe),e(Nm,Xk),e(Xk,BWe),e(Nm,PWe),e(A,IWe),e(A,jm),e(jm,Noe),e(Noe,qWe),e(jm,NWe),e(jm,zk),e(zk,jWe),e(jm,DWe),e(A,GWe),e(A,Dm),e(Dm,joe),e(joe,OWe),e(Dm,VWe),e(Dm,Qk),e(Qk,XWe),e(Dm,zWe),e(A,QWe),e(A,Gm),e(Gm,Doe),e(Doe,WWe),e(Gm,HWe),e(Gm,Wk),e(Wk,UWe),e(Gm,JWe),e(A,YWe),e(A,Om),e(Om,Goe),e(Goe,KWe),e(Om,ZWe),e(Om,Hk),e(Hk,eHe),e(Om,oHe),e(A,rHe),e(A,Vm),e(Vm,Ooe),e(Ooe,tHe),e(Vm,aHe),e(Vm,Uk),e(Uk,nHe),e(Vm,sHe),e(A,lHe),e(A,Xm),e(Xm,Voe),e(Voe,iHe),e(Xm,dHe),e(Xm,Jk),e(Jk,cHe),e(Xm,fHe),e(A,mHe),e(A,zm),e(zm,Xoe),e(Xoe,gHe),e(zm,hHe),e(zm,Yk),e(Yk,pHe),e(zm,uHe),e(A,_He),e(A,Qm),e(Qm,zoe),e(zoe,bHe),e(Qm,vHe),e(Qm,Kk),e(Kk,FHe),e(Qm,THe),e(A,MHe),e(A,Wm),e(Wm,Qoe),e(Qoe,EHe),e(Wm,CHe),e(Wm,Zk),e(Zk,wHe),e(Wm,AHe),e(A,yHe),e(A,Hm),e(Hm,Woe),e(Woe,LHe),e(Hm,xHe),e(Hm,eS),e(eS,$He),e(Hm,kHe),e(A,SHe),e(A,Um),e(Um,Hoe),e(Hoe,RHe),e(Um,BHe),e(Um,oS),e(oS,PHe),e(Um,IHe),e(A,qHe),e(A,Jm),e(Jm,Uoe),e(Uoe,NHe),e(Jm,jHe),e(Jm,rS),e(rS,DHe),e(Jm,GHe),e(A,OHe),e(A,Ym),e(Ym,Joe),e(Joe,VHe),e(Ym,XHe),e(Ym,tS),e(tS,zHe),e(Ym,QHe),e(A,WHe),e(A,Km),e(Km,Yoe),e(Yoe,HHe),e(Km,UHe),e(Km,aS),e(aS,JHe),e(Km,YHe),e(A,KHe),e(A,Zm),e(Zm,Koe),e(Koe,ZHe),e(Zm,eUe),e(Zm,nS),e(nS,oUe),e(Zm,rUe),e(A,tUe),e(A,eg),e(eg,Zoe),e(Zoe,aUe),e(eg,nUe),e(eg,sS),e(sS,sUe),e(eg,lUe),e(A,iUe),e(A,og),e(og,ere),e(ere,dUe),e(og,cUe),e(og,lS),e(lS,fUe),e(og,mUe),e(A,gUe),e(A,rg),e(rg,ore),e(ore,hUe),e(rg,pUe),e(rg,iS),e(iS,uUe),e(rg,_Ue),e(A,bUe),e(A,tg),e(tg,rre),e(rre,vUe),e(tg,FUe),e(tg,dS),e(dS,TUe),e(tg,MUe),e(A,EUe),e(A,ag),e(ag,tre),e(tre,CUe),e(ag,wUe),e(ag,cS),e(cS,AUe),e(ag,yUe),e(A,LUe),e(A,ng),e(ng,are),e(are,xUe),e(ng,$Ue),e(ng,fS),e(fS,kUe),e(ng,SUe),e(A,RUe),e(A,sg),e(sg,nre),e(nre,BUe),e(sg,PUe),e(sg,mS),e(mS,IUe),e(sg,qUe),e(A,NUe),e(A,lg),e(lg,sre),e(sre,jUe),e(lg,DUe),e(lg,gS),e(gS,GUe),e(lg,OUe),e(A,VUe),e(A,ig),e(ig,lre),e(lre,XUe),e(ig,zUe),e(ig,hS),e(hS,QUe),e(ig,WUe),e(A,HUe),e(A,dg),e(dg,ire),e(ire,UUe),e(dg,JUe),e(dg,pS),e(pS,YUe),e(dg,KUe),e(A,ZUe),e(A,cg),e(cg,dre),e(dre,eJe),e(cg,oJe),e(cg,uS),e(uS,rJe),e(cg,tJe),e(A,aJe),e(A,fg),e(fg,cre),e(cre,nJe),e(fg,sJe),e(fg,_S),e(_S,lJe),e(fg,iJe),e(A,dJe),e(A,mg),e(mg,fre),e(fre,cJe),e(mg,fJe),e(mg,bS),e(bS,mJe),e(mg,gJe),e(A,hJe),e(A,gg),e(gg,mre),e(mre,pJe),e(gg,uJe),e(gg,vS),e(vS,_Je),e(gg,bJe),e(A,vJe),e(A,hg),e(hg,gre),e(gre,FJe),e(hg,TJe),e(hg,FS),e(FS,MJe),e(hg,EJe),e(A,CJe),e(A,pg),e(pg,hre),e(hre,wJe),e(pg,AJe),e(pg,TS),e(TS,yJe),e(pg,LJe),e(A,xJe),e(A,ug),e(ug,pre),e(pre,$Je),e(ug,kJe),e(ug,MS),e(MS,SJe),e(ug,RJe),e(Er,BJe),M(_g,Er,null),e(Co,PJe),e(Co,bg),M(i6,bg,null),e(bg,IJe),e(bg,ure),e(ure,qJe),b(f,mIe,_),b(f,_i,_),e(_i,vg),e(vg,_re),M(d6,_re,null),e(_i,NJe),e(_i,bre),e(bre,jJe),b(f,gIe,_),b(f,wo,_),M(c6,wo,null),e(wo,DJe),e(wo,f6),e(f6,GJe),e(f6,ES),e(ES,OJe),e(f6,VJe),e(wo,XJe),e(wo,m6),e(m6,zJe),e(m6,vre),e(vre,QJe),e(m6,WJe),e(wo,HJe),e(wo,Cr),M(g6,Cr,null),e(Cr,UJe),e(Cr,Fre),e(Fre,JJe),e(Cr,YJe),e(Cr,Ca),e(Ca,KJe),e(Ca,Tre),e(Tre,ZJe),e(Ca,eYe),e(Ca,Mre),e(Mre,oYe),e(Ca,rYe),e(Ca,Ere),e(Ere,tYe),e(Ca,aYe),e(Cr,nYe),e(Cr,k),e(k,kn),e(kn,Cre),e(Cre,sYe),e(kn,lYe),e(kn,CS),e(CS,iYe),e(kn,dYe),e(kn,wS),e(wS,cYe),e(kn,fYe),e(k,mYe),e(k,Sn),e(Sn,wre),e(wre,gYe),e(Sn,hYe),e(Sn,AS),e(AS,pYe),e(Sn,uYe),e(Sn,yS),e(yS,_Ye),e(Sn,bYe),e(k,vYe),e(k,Rn),e(Rn,Are),e(Are,FYe),e(Rn,TYe),e(Rn,LS),e(LS,MYe),e(Rn,EYe),e(Rn,xS),e(xS,CYe),e(Rn,wYe),e(k,AYe),e(k,Fg),e(Fg,yre),e(yre,yYe),e(Fg,LYe),e(Fg,$S),e($S,xYe),e(Fg,$Ye),e(k,kYe),e(k,Bn),e(Bn,Lre),e(Lre,SYe),e(Bn,RYe),e(Bn,kS),e(kS,BYe),e(Bn,PYe),e(Bn,SS),e(SS,IYe),e(Bn,qYe),e(k,NYe),e(k,Tg),e(Tg,xre),e(xre,jYe),e(Tg,DYe),e(Tg,RS),e(RS,GYe),e(Tg,OYe),e(k,VYe),e(k,Mg),e(Mg,$re),e($re,XYe),e(Mg,zYe),e(Mg,BS),e(BS,QYe),e(Mg,WYe),e(k,HYe),e(k,Eg),e(Eg,kre),e(kre,UYe),e(Eg,JYe),e(Eg,PS),e(PS,YYe),e(Eg,KYe),e(k,ZYe),e(k,Pn),e(Pn,Sre),e(Sre,eKe),e(Pn,oKe),e(Pn,IS),e(IS,rKe),e(Pn,tKe),e(Pn,qS),e(qS,aKe),e(Pn,nKe),e(k,sKe),e(k,In),e(In,Rre),e(Rre,lKe),e(In,iKe),e(In,NS),e(NS,dKe),e(In,cKe),e(In,jS),e(jS,fKe),e(In,mKe),e(k,gKe),e(k,qn),e(qn,Bre),e(Bre,hKe),e(qn,pKe),e(qn,DS),e(DS,uKe),e(qn,_Ke),e(qn,GS),e(GS,bKe),e(qn,vKe),e(k,FKe),e(k,Cg),e(Cg,Pre),e(Pre,TKe),e(Cg,MKe),e(Cg,OS),e(OS,EKe),e(Cg,CKe),e(k,wKe),e(k,wg),e(wg,Ire),e(Ire,AKe),e(wg,yKe),e(wg,VS),e(VS,LKe),e(wg,xKe),e(k,$Ke),e(k,Nn),e(Nn,qre),e(qre,kKe),e(Nn,SKe),e(Nn,XS),e(XS,RKe),e(Nn,BKe),e(Nn,zS),e(zS,PKe),e(Nn,IKe),e(k,qKe),e(k,Ag),e(Ag,Nre),e(Nre,NKe),e(Ag,jKe),e(Ag,QS),e(QS,DKe),e(Ag,GKe),e(k,OKe),e(k,jn),e(jn,jre),e(jre,VKe),e(jn,XKe),e(jn,WS),e(WS,zKe),e(jn,QKe),e(jn,HS),e(HS,WKe),e(jn,HKe),e(k,UKe),e(k,Dn),e(Dn,Dre),e(Dre,JKe),e(Dn,YKe),e(Dn,US),e(US,KKe),e(Dn,ZKe),e(Dn,JS),e(JS,eZe),e(Dn,oZe),e(k,rZe),e(k,Gn),e(Gn,Gre),e(Gre,tZe),e(Gn,aZe),e(Gn,YS),e(YS,nZe),e(Gn,sZe),e(Gn,KS),e(KS,lZe),e(Gn,iZe),e(k,dZe),e(k,yg),e(yg,Ore),e(Ore,cZe),e(yg,fZe),e(yg,ZS),e(ZS,mZe),e(yg,gZe),e(k,hZe),e(k,On),e(On,Vre),e(Vre,pZe),e(On,uZe),e(On,eR),e(eR,_Ze),e(On,bZe),e(On,oR),e(oR,vZe),e(On,FZe),e(k,TZe),e(k,Vn),e(Vn,Xre),e(Xre,MZe),e(Vn,EZe),e(Vn,rR),e(rR,CZe),e(Vn,wZe),e(Vn,tR),e(tR,AZe),e(Vn,yZe),e(k,LZe),e(k,Xn),e(Xn,zre),e(zre,xZe),e(Xn,$Ze),e(Xn,aR),e(aR,kZe),e(Xn,SZe),e(Xn,nR),e(nR,RZe),e(Xn,BZe),e(k,PZe),e(k,zn),e(zn,Qre),e(Qre,IZe),e(zn,qZe),e(zn,sR),e(sR,NZe),e(zn,jZe),e(zn,lR),e(lR,DZe),e(zn,GZe),e(k,OZe),e(k,Qn),e(Qn,Wre),e(Wre,VZe),e(Qn,XZe),e(Qn,iR),e(iR,zZe),e(Qn,QZe),e(Qn,dR),e(dR,WZe),e(Qn,HZe),e(k,UZe),e(k,Wn),e(Wn,Hre),e(Hre,JZe),e(Wn,YZe),e(Wn,cR),e(cR,KZe),e(Wn,ZZe),e(Wn,fR),e(fR,eeo),e(Wn,oeo),e(k,reo),e(k,Lg),e(Lg,Ure),e(Ure,teo),e(Lg,aeo),e(Lg,mR),e(mR,neo),e(Lg,seo),e(k,leo),e(k,Hn),e(Hn,Jre),e(Jre,ieo),e(Hn,deo),e(Hn,gR),e(gR,ceo),e(Hn,feo),e(Hn,hR),e(hR,meo),e(Hn,geo),e(k,heo),e(k,xg),e(xg,Yre),e(Yre,peo),e(xg,ueo),e(xg,pR),e(pR,_eo),e(xg,beo),e(k,veo),e(k,Un),e(Un,Kre),e(Kre,Feo),e(Un,Teo),e(Un,uR),e(uR,Meo),e(Un,Eeo),e(Un,_R),e(_R,Ceo),e(Un,weo),e(k,Aeo),e(k,Jn),e(Jn,Zre),e(Zre,yeo),e(Jn,Leo),e(Jn,bR),e(bR,xeo),e(Jn,$eo),e(Jn,vR),e(vR,keo),e(Jn,Seo),e(k,Reo),e(k,Yn),e(Yn,ete),e(ete,Beo),e(Yn,Peo),e(Yn,FR),e(FR,Ieo),e(Yn,qeo),e(Yn,TR),e(TR,Neo),e(Yn,jeo),e(k,Deo),e(k,Kn),e(Kn,ote),e(ote,Geo),e(Kn,Oeo),e(Kn,MR),e(MR,Veo),e(Kn,Xeo),e(Kn,ER),e(ER,zeo),e(Kn,Qeo),e(k,Weo),e(k,Zn),e(Zn,rte),e(rte,Heo),e(Zn,Ueo),e(Zn,CR),e(CR,Jeo),e(Zn,Yeo),e(Zn,wR),e(wR,Keo),e(Zn,Zeo),e(k,eoo),e(k,$g),e($g,tte),e(tte,ooo),e($g,roo),e($g,AR),e(AR,too),e($g,aoo),e(k,noo),e(k,es),e(es,ate),e(ate,soo),e(es,loo),e(es,yR),e(yR,ioo),e(es,doo),e(es,LR),e(LR,coo),e(es,foo),e(k,moo),e(k,os),e(os,nte),e(nte,goo),e(os,hoo),e(os,xR),e(xR,poo),e(os,uoo),e(os,$R),e($R,_oo),e(os,boo),e(k,voo),e(k,rs),e(rs,ste),e(ste,Foo),e(rs,Too),e(rs,kR),e(kR,Moo),e(rs,Eoo),e(rs,SR),e(SR,Coo),e(rs,woo),e(k,Aoo),e(k,ts),e(ts,lte),e(lte,yoo),e(ts,Loo),e(ts,RR),e(RR,xoo),e(ts,$oo),e(ts,BR),e(BR,koo),e(ts,Soo),e(k,Roo),e(k,as),e(as,ite),e(ite,Boo),e(as,Poo),e(as,PR),e(PR,Ioo),e(as,qoo),e(as,IR),e(IR,Noo),e(as,joo),e(k,Doo),e(k,ns),e(ns,dte),e(dte,Goo),e(ns,Ooo),e(ns,qR),e(qR,Voo),e(ns,Xoo),e(ns,NR),e(NR,zoo),e(ns,Qoo),e(k,Woo),e(k,kg),e(kg,cte),e(cte,Hoo),e(kg,Uoo),e(kg,jR),e(jR,Joo),e(kg,Yoo),e(k,Koo),e(k,ss),e(ss,fte),e(fte,Zoo),e(ss,ero),e(ss,DR),e(DR,oro),e(ss,rro),e(ss,GR),e(GR,tro),e(ss,aro),e(k,nro),e(k,Sg),e(Sg,mte),e(mte,sro),e(Sg,lro),e(Sg,OR),e(OR,iro),e(Sg,dro),e(k,cro),e(k,Rg),e(Rg,gte),e(gte,fro),e(Rg,mro),e(Rg,VR),e(VR,gro),e(Rg,hro),e(k,pro),e(k,ls),e(ls,hte),e(hte,uro),e(ls,_ro),e(ls,XR),e(XR,bro),e(ls,vro),e(ls,zR),e(zR,Fro),e(ls,Tro),e(k,Mro),e(k,is),e(is,pte),e(pte,Ero),e(is,Cro),e(is,QR),e(QR,wro),e(is,Aro),e(is,WR),e(WR,yro),e(is,Lro),e(k,xro),e(k,ds),e(ds,ute),e(ute,$ro),e(ds,kro),e(ds,HR),e(HR,Sro),e(ds,Rro),e(ds,UR),e(UR,Bro),e(ds,Pro),e(k,Iro),e(k,Bg),e(Bg,_te),e(_te,qro),e(Bg,Nro),e(Bg,JR),e(JR,jro),e(Bg,Dro),e(k,Gro),e(k,cs),e(cs,bte),e(bte,Oro),e(cs,Vro),e(cs,YR),e(YR,Xro),e(cs,zro),e(cs,KR),e(KR,Qro),e(cs,Wro),e(k,Hro),e(k,fs),e(fs,vte),e(vte,Uro),e(fs,Jro),e(fs,ZR),e(ZR,Yro),e(fs,Kro),e(fs,eB),e(eB,Zro),e(fs,eto),e(k,oto),e(k,ms),e(ms,Fte),e(Fte,rto),e(ms,tto),e(ms,oB),e(oB,ato),e(ms,nto),e(ms,rB),e(rB,sto),e(ms,lto),e(k,ito),e(k,gs),e(gs,Tte),e(Tte,dto),e(gs,cto),e(gs,tB),e(tB,fto),e(gs,mto),e(gs,aB),e(aB,gto),e(gs,hto),e(k,pto),e(k,hs),e(hs,Mte),e(Mte,uto),e(hs,_to),e(hs,nB),e(nB,bto),e(hs,vto),e(hs,sB),e(sB,Fto),e(hs,Tto),e(k,Mto),e(k,Pg),e(Pg,Ete),e(Ete,Eto),e(Pg,Cto),e(Pg,lB),e(lB,wto),e(Pg,Ato),e(k,yto),e(k,ps),e(ps,Cte),e(Cte,Lto),e(ps,xto),e(ps,iB),e(iB,$to),e(ps,kto),e(ps,dB),e(dB,Sto),e(ps,Rto),e(k,Bto),e(k,Ig),e(Ig,wte),e(wte,Pto),e(Ig,Ito),e(Ig,cB),e(cB,qto),e(Ig,Nto),e(k,jto),e(k,qg),e(qg,Ate),e(Ate,Dto),e(qg,Gto),e(qg,fB),e(fB,Oto),e(qg,Vto),e(k,Xto),e(k,Ng),e(Ng,yte),e(yte,zto),e(Ng,Qto),e(Ng,mB),e(mB,Wto),e(Ng,Hto),e(k,Uto),e(k,jg),e(jg,Lte),e(Lte,Jto),e(jg,Yto),e(jg,gB),e(gB,Kto),e(jg,Zto),e(k,eao),e(k,us),e(us,xte),e(xte,oao),e(us,rao),e(us,hB),e(hB,tao),e(us,aao),e(us,pB),e(pB,nao),e(us,sao),e(k,lao),e(k,Dg),e(Dg,$te),e($te,iao),e(Dg,dao),e(Dg,uB),e(uB,cao),e(Dg,fao),e(k,mao),e(k,_s),e(_s,kte),e(kte,gao),e(_s,hao),e(_s,_B),e(_B,pao),e(_s,uao),e(_s,bB),e(bB,_ao),e(_s,bao),e(k,vao),e(k,bs),e(bs,Ste),e(Ste,Fao),e(bs,Tao),e(bs,vB),e(vB,Mao),e(bs,Eao),e(bs,FB),e(FB,Cao),e(bs,wao),e(k,Aao),e(k,vs),e(vs,Rte),e(Rte,yao),e(vs,Lao),e(vs,TB),e(TB,xao),e(vs,$ao),e(vs,MB),e(MB,kao),e(vs,Sao),e(k,Rao),e(k,Fs),e(Fs,Bte),e(Bte,Bao),e(Fs,Pao),e(Fs,EB),e(EB,Iao),e(Fs,qao),e(Fs,CB),e(CB,Nao),e(Fs,jao),e(k,Dao),e(k,Ts),e(Ts,Pte),e(Pte,Gao),e(Ts,Oao),e(Ts,wB),e(wB,Vao),e(Ts,Xao),e(Ts,AB),e(AB,zao),e(Ts,Qao),e(k,Wao),e(k,Ms),e(Ms,Ite),e(Ite,Hao),e(Ms,Uao),e(Ms,yB),e(yB,Jao),e(Ms,Yao),e(Ms,LB),e(LB,Kao),e(Ms,Zao),e(k,eno),e(k,Gg),e(Gg,qte),e(qte,ono),e(Gg,rno),e(Gg,xB),e(xB,tno),e(Gg,ano),e(k,nno),e(k,Og),e(Og,Nte),e(Nte,sno),e(Og,lno),e(Og,$B),e($B,ino),e(Og,dno),e(k,cno),e(k,Es),e(Es,jte),e(jte,fno),e(Es,mno),e(Es,kB),e(kB,gno),e(Es,hno),e(Es,SB),e(SB,pno),e(Es,uno),e(k,_no),e(k,Cs),e(Cs,Dte),e(Dte,bno),e(Cs,vno),e(Cs,RB),e(RB,Fno),e(Cs,Tno),e(Cs,BB),e(BB,Mno),e(Cs,Eno),e(k,Cno),e(k,ws),e(ws,Gte),e(Gte,wno),e(ws,Ano),e(ws,PB),e(PB,yno),e(ws,Lno),e(ws,IB),e(IB,xno),e(ws,$no),e(k,kno),e(k,Vg),e(Vg,Ote),e(Ote,Sno),e(Vg,Rno),e(Vg,qB),e(qB,Bno),e(Vg,Pno),e(k,Ino),e(k,Xg),e(Xg,Vte),e(Vte,qno),e(Xg,Nno),e(Xg,NB),e(NB,jno),e(Xg,Dno),e(k,Gno),e(k,zg),e(zg,Xte),e(Xte,Ono),e(zg,Vno),e(zg,jB),e(jB,Xno),e(zg,zno),e(k,Qno),e(k,As),e(As,zte),e(zte,Wno),e(As,Hno),e(As,DB),e(DB,Uno),e(As,Jno),e(As,GB),e(GB,Yno),e(As,Kno),e(k,Zno),e(k,Qg),e(Qg,Qte),e(Qte,eso),e(Qg,oso),e(Qg,OB),e(OB,rso),e(Qg,tso),e(k,aso),e(k,Wg),e(Wg,Wte),e(Wte,nso),e(Wg,sso),e(Wg,VB),e(VB,lso),e(Wg,iso),e(k,dso),e(k,ys),e(ys,Hte),e(Hte,cso),e(ys,fso),e(ys,XB),e(XB,mso),e(ys,gso),e(ys,zB),e(zB,hso),e(ys,pso),e(k,uso),e(k,Hg),e(Hg,Ute),e(Ute,_so),e(Hg,bso),e(Hg,QB),e(QB,vso),e(Hg,Fso),e(k,Tso),e(k,Ug),e(Ug,Jte),e(Jte,Mso),e(Ug,Eso),e(Ug,WB),e(WB,Cso),e(Ug,wso),e(k,Aso),e(k,Ls),e(Ls,Yte),e(Yte,yso),e(Ls,Lso),e(Ls,HB),e(HB,xso),e(Ls,$so),e(Ls,UB),e(UB,kso),e(Ls,Sso),e(k,Rso),e(k,xs),e(xs,Kte),e(Kte,Bso),e(xs,Pso),e(xs,JB),e(JB,Iso),e(xs,qso),e(xs,YB),e(YB,Nso),e(xs,jso),e(k,Dso),e(k,$s),e($s,Zte),e(Zte,Gso),e($s,Oso),e($s,KB),e(KB,Vso),e($s,Xso),e($s,ZB),e(ZB,zso),e($s,Qso),e(k,Wso),e(k,ks),e(ks,eae),e(eae,Hso),e(ks,Uso),e(ks,eP),e(eP,Jso),e(ks,Yso),e(ks,oP),e(oP,Kso),e(ks,Zso),e(Cr,elo),M(Jg,Cr,null),e(wo,olo),e(wo,Yg),M(h6,Yg,null),e(Yg,rlo),e(Yg,oae),e(oae,tlo),b(f,hIe,_),b(f,bi,_),e(bi,Kg),e(Kg,rae),M(p6,rae,null),e(bi,alo),e(bi,tae),e(tae,nlo),b(f,pIe,_),b(f,Ao,_),M(u6,Ao,null),e(Ao,slo),e(Ao,_6),e(_6,llo),e(_6,rP),e(rP,ilo),e(_6,dlo),e(Ao,clo),e(Ao,b6),e(b6,flo),e(b6,aae),e(aae,mlo),e(b6,glo),e(Ao,hlo),e(Ao,Qe),M(v6,Qe,null),e(Qe,plo),e(Qe,nae),e(nae,ulo),e(Qe,_lo),e(Qe,wa),e(wa,blo),e(wa,sae),e(sae,vlo),e(wa,Flo),e(wa,lae),e(lae,Tlo),e(wa,Mlo),e(wa,iae),e(iae,Elo),e(wa,Clo),e(Qe,wlo),e(Qe,Z),e(Z,Zg),e(Zg,dae),e(dae,Alo),e(Zg,ylo),e(Zg,tP),e(tP,Llo),e(Zg,xlo),e(Z,$lo),e(Z,eh),e(eh,cae),e(cae,klo),e(eh,Slo),e(eh,aP),e(aP,Rlo),e(eh,Blo),e(Z,Plo),e(Z,oh),e(oh,fae),e(fae,Ilo),e(oh,qlo),e(oh,nP),e(nP,Nlo),e(oh,jlo),e(Z,Dlo),e(Z,rh),e(rh,mae),e(mae,Glo),e(rh,Olo),e(rh,sP),e(sP,Vlo),e(rh,Xlo),e(Z,zlo),e(Z,th),e(th,gae),e(gae,Qlo),e(th,Wlo),e(th,lP),e(lP,Hlo),e(th,Ulo),e(Z,Jlo),e(Z,ah),e(ah,hae),e(hae,Ylo),e(ah,Klo),e(ah,iP),e(iP,Zlo),e(ah,eio),e(Z,oio),e(Z,nh),e(nh,pae),e(pae,rio),e(nh,tio),e(nh,dP),e(dP,aio),e(nh,nio),e(Z,sio),e(Z,sh),e(sh,uae),e(uae,lio),e(sh,iio),e(sh,cP),e(cP,dio),e(sh,cio),e(Z,fio),e(Z,lh),e(lh,_ae),e(_ae,mio),e(lh,gio),e(lh,fP),e(fP,hio),e(lh,pio),e(Z,uio),e(Z,ih),e(ih,bae),e(bae,_io),e(ih,bio),e(ih,mP),e(mP,vio),e(ih,Fio),e(Z,Tio),e(Z,dh),e(dh,vae),e(vae,Mio),e(dh,Eio),e(dh,gP),e(gP,Cio),e(dh,wio),e(Z,Aio),e(Z,ch),e(ch,Fae),e(Fae,yio),e(ch,Lio),e(ch,hP),e(hP,xio),e(ch,$io),e(Z,kio),e(Z,fh),e(fh,Tae),e(Tae,Sio),e(fh,Rio),e(fh,pP),e(pP,Bio),e(fh,Pio),e(Z,Iio),e(Z,mh),e(mh,Mae),e(Mae,qio),e(mh,Nio),e(mh,uP),e(uP,jio),e(mh,Dio),e(Z,Gio),e(Z,gh),e(gh,Eae),e(Eae,Oio),e(gh,Vio),e(gh,_P),e(_P,Xio),e(gh,zio),e(Z,Qio),e(Z,hh),e(hh,Cae),e(Cae,Wio),e(hh,Hio),e(hh,bP),e(bP,Uio),e(hh,Jio),e(Z,Yio),e(Z,ph),e(ph,wae),e(wae,Kio),e(ph,Zio),e(ph,vP),e(vP,edo),e(ph,odo),e(Z,rdo),e(Z,uh),e(uh,Aae),e(Aae,tdo),e(uh,ado),e(uh,FP),e(FP,ndo),e(uh,sdo),e(Z,ldo),e(Z,_h),e(_h,yae),e(yae,ido),e(_h,ddo),e(_h,TP),e(TP,cdo),e(_h,fdo),e(Z,mdo),e(Z,bh),e(bh,Lae),e(Lae,gdo),e(bh,hdo),e(bh,MP),e(MP,pdo),e(bh,udo),e(Z,_do),e(Z,vh),e(vh,xae),e(xae,bdo),e(vh,vdo),e(vh,EP),e(EP,Fdo),e(vh,Tdo),e(Z,Mdo),e(Z,Fh),e(Fh,$ae),e($ae,Edo),e(Fh,Cdo),e(Fh,CP),e(CP,wdo),e(Fh,Ado),e(Z,ydo),e(Z,Th),e(Th,kae),e(kae,Ldo),e(Th,xdo),e(Th,wP),e(wP,$do),e(Th,kdo),e(Z,Sdo),e(Z,Mh),e(Mh,Sae),e(Sae,Rdo),e(Mh,Bdo),e(Mh,AP),e(AP,Pdo),e(Mh,Ido),e(Z,qdo),e(Z,Eh),e(Eh,Rae),e(Rae,Ndo),e(Eh,jdo),e(Eh,yP),e(yP,Ddo),e(Eh,Gdo),e(Z,Odo),e(Z,Ch),e(Ch,Bae),e(Bae,Vdo),e(Ch,Xdo),e(Ch,LP),e(LP,zdo),e(Ch,Qdo),e(Qe,Wdo),M(wh,Qe,null),e(Qe,Hdo),M(Ah,Qe,null),e(Ao,Udo),e(Ao,yh),M(F6,yh,null),e(yh,Jdo),e(yh,Pae),e(Pae,Ydo),b(f,uIe,_),b(f,vi,_),e(vi,Lh),e(Lh,Iae),M(T6,Iae,null),e(vi,Kdo),e(vi,qae),e(qae,Zdo),b(f,_Ie,_),b(f,yo,_),M(M6,yo,null),e(yo,eco),e(yo,E6),e(E6,oco),e(E6,xP),e(xP,rco),e(E6,tco),e(yo,aco),e(yo,C6),e(C6,nco),e(C6,Nae),e(Nae,sco),e(C6,lco),e(yo,ico),e(yo,We),M(w6,We,null),e(We,dco),e(We,jae),e(jae,cco),e(We,fco),e(We,Fi),e(Fi,mco),e(Fi,Dae),e(Dae,gco),e(Fi,hco),e(Fi,Gae),e(Gae,pco),e(Fi,uco),e(We,_co),e(We,be),e(be,xh),e(xh,Oae),e(Oae,bco),e(xh,vco),e(xh,$P),e($P,Fco),e(xh,Tco),e(be,Mco),e(be,$h),e($h,Vae),e(Vae,Eco),e($h,Cco),e($h,Xae),e(Xae,wco),e($h,Aco),e(be,yco),e(be,kh),e(kh,zae),e(zae,Lco),e(kh,xco),e(kh,kP),e(kP,$co),e(kh,kco),e(be,Sco),e(be,Sh),e(Sh,Qae),e(Qae,Rco),e(Sh,Bco),e(Sh,SP),e(SP,Pco),e(Sh,Ico),e(be,qco),e(be,Rh),e(Rh,Wae),e(Wae,Nco),e(Rh,jco),e(Rh,RP),e(RP,Dco),e(Rh,Gco),e(be,Oco),e(be,Bh),e(Bh,Hae),e(Hae,Vco),e(Bh,Xco),e(Bh,BP),e(BP,zco),e(Bh,Qco),e(be,Wco),e(be,Ph),e(Ph,Uae),e(Uae,Hco),e(Ph,Uco),e(Ph,PP),e(PP,Jco),e(Ph,Yco),e(be,Kco),e(be,Ih),e(Ih,Jae),e(Jae,Zco),e(Ih,efo),e(Ih,IP),e(IP,ofo),e(Ih,rfo),e(be,tfo),e(be,qh),e(qh,Yae),e(Yae,afo),e(qh,nfo),e(qh,qP),e(qP,sfo),e(qh,lfo),e(be,ifo),e(be,Nh),e(Nh,Kae),e(Kae,dfo),e(Nh,cfo),e(Nh,NP),e(NP,ffo),e(Nh,mfo),e(be,gfo),e(be,jh),e(jh,Zae),e(Zae,hfo),e(jh,pfo),e(jh,jP),e(jP,ufo),e(jh,_fo),e(be,bfo),e(be,Dh),e(Dh,ene),e(ene,vfo),e(Dh,Ffo),e(Dh,DP),e(DP,Tfo),e(Dh,Mfo),e(be,Efo),e(be,Gh),e(Gh,one),e(one,Cfo),e(Gh,wfo),e(Gh,GP),e(GP,Afo),e(Gh,yfo),e(be,Lfo),e(be,Oh),e(Oh,rne),e(rne,xfo),e(Oh,$fo),e(Oh,OP),e(OP,kfo),e(Oh,Sfo),e(be,Rfo),e(be,Vh),e(Vh,tne),e(tne,Bfo),e(Vh,Pfo),e(Vh,VP),e(VP,Ifo),e(Vh,qfo),e(We,Nfo),M(Xh,We,null),e(We,jfo),M(zh,We,null),e(yo,Dfo),e(yo,Qh),M(A6,Qh,null),e(Qh,Gfo),e(Qh,ane),e(ane,Ofo),b(f,bIe,_),b(f,Ti,_),e(Ti,Wh),e(Wh,nne),M(y6,nne,null),e(Ti,Vfo),e(Ti,sne),e(sne,Xfo),b(f,vIe,_),b(f,Lo,_),M(L6,Lo,null),e(Lo,zfo),e(Lo,Mi),e(Mi,Qfo),e(Mi,XP),e(XP,Wfo),e(Mi,Hfo),e(Mi,zP),e(zP,Ufo),e(Mi,Jfo),e(Lo,Yfo),e(Lo,x6),e(x6,Kfo),e(x6,lne),e(lne,Zfo),e(x6,emo),e(Lo,omo),e(Lo,ot),M($6,ot,null),e(ot,rmo),e(ot,ine),e(ine,tmo),e(ot,amo),e(ot,Ei),e(Ei,nmo),e(Ei,dne),e(dne,smo),e(Ei,lmo),e(Ei,QP),e(QP,imo),e(Ei,dmo),e(ot,cmo),M(Hh,ot,null),e(Lo,fmo),e(Lo,He),M(k6,He,null),e(He,mmo),e(He,cne),e(cne,gmo),e(He,hmo),e(He,Aa),e(Aa,pmo),e(Aa,fne),e(fne,umo),e(Aa,_mo),e(Aa,mne),e(mne,bmo),e(Aa,vmo),e(Aa,gne),e(gne,Fmo),e(Aa,Tmo),e(He,Mmo),e(He,x),e(x,Uh),e(Uh,hne),e(hne,Emo),e(Uh,Cmo),e(Uh,WP),e(WP,wmo),e(Uh,Amo),e(x,ymo),e(x,Jh),e(Jh,pne),e(pne,Lmo),e(Jh,xmo),e(Jh,HP),e(HP,$mo),e(Jh,kmo),e(x,Smo),e(x,Yh),e(Yh,une),e(une,Rmo),e(Yh,Bmo),e(Yh,UP),e(UP,Pmo),e(Yh,Imo),e(x,qmo),e(x,Kh),e(Kh,_ne),e(_ne,Nmo),e(Kh,jmo),e(Kh,JP),e(JP,Dmo),e(Kh,Gmo),e(x,Omo),e(x,Zh),e(Zh,bne),e(bne,Vmo),e(Zh,Xmo),e(Zh,YP),e(YP,zmo),e(Zh,Qmo),e(x,Wmo),e(x,ep),e(ep,vne),e(vne,Hmo),e(ep,Umo),e(ep,KP),e(KP,Jmo),e(ep,Ymo),e(x,Kmo),e(x,op),e(op,Fne),e(Fne,Zmo),e(op,ego),e(op,ZP),e(ZP,ogo),e(op,rgo),e(x,tgo),e(x,rp),e(rp,Tne),e(Tne,ago),e(rp,ngo),e(rp,eI),e(eI,sgo),e(rp,lgo),e(x,igo),e(x,tp),e(tp,Mne),e(Mne,dgo),e(tp,cgo),e(tp,oI),e(oI,fgo),e(tp,mgo),e(x,ggo),e(x,ap),e(ap,Ene),e(Ene,hgo),e(ap,pgo),e(ap,rI),e(rI,ugo),e(ap,_go),e(x,bgo),e(x,np),e(np,Cne),e(Cne,vgo),e(np,Fgo),e(np,tI),e(tI,Tgo),e(np,Mgo),e(x,Ego),e(x,sp),e(sp,wne),e(wne,Cgo),e(sp,wgo),e(sp,aI),e(aI,Ago),e(sp,ygo),e(x,Lgo),e(x,lp),e(lp,Ane),e(Ane,xgo),e(lp,$go),e(lp,nI),e(nI,kgo),e(lp,Sgo),e(x,Rgo),e(x,ip),e(ip,yne),e(yne,Bgo),e(ip,Pgo),e(ip,sI),e(sI,Igo),e(ip,qgo),e(x,Ngo),e(x,dp),e(dp,Lne),e(Lne,jgo),e(dp,Dgo),e(dp,lI),e(lI,Ggo),e(dp,Ogo),e(x,Vgo),e(x,cp),e(cp,xne),e(xne,Xgo),e(cp,zgo),e(cp,iI),e(iI,Qgo),e(cp,Wgo),e(x,Hgo),e(x,fp),e(fp,$ne),e($ne,Ugo),e(fp,Jgo),e(fp,dI),e(dI,Ygo),e(fp,Kgo),e(x,Zgo),e(x,mp),e(mp,kne),e(kne,eho),e(mp,oho),e(mp,cI),e(cI,rho),e(mp,tho),e(x,aho),e(x,gp),e(gp,Sne),e(Sne,nho),e(gp,sho),e(gp,fI),e(fI,lho),e(gp,iho),e(x,dho),e(x,hp),e(hp,Rne),e(Rne,cho),e(hp,fho),e(hp,mI),e(mI,mho),e(hp,gho),e(x,hho),e(x,pp),e(pp,Bne),e(Bne,pho),e(pp,uho),e(pp,gI),e(gI,_ho),e(pp,bho),e(x,vho),e(x,up),e(up,Pne),e(Pne,Fho),e(up,Tho),e(up,hI),e(hI,Mho),e(up,Eho),e(x,Cho),e(x,_p),e(_p,Ine),e(Ine,who),e(_p,Aho),e(_p,pI),e(pI,yho),e(_p,Lho),e(x,xho),e(x,bp),e(bp,qne),e(qne,$ho),e(bp,kho),e(bp,uI),e(uI,Sho),e(bp,Rho),e(x,Bho),e(x,vp),e(vp,Nne),e(Nne,Pho),e(vp,Iho),e(vp,_I),e(_I,qho),e(vp,Nho),e(x,jho),e(x,Fp),e(Fp,jne),e(jne,Dho),e(Fp,Gho),e(Fp,bI),e(bI,Oho),e(Fp,Vho),e(x,Xho),e(x,Tp),e(Tp,Dne),e(Dne,zho),e(Tp,Qho),e(Tp,vI),e(vI,Who),e(Tp,Hho),e(x,Uho),e(x,Mp),e(Mp,Gne),e(Gne,Jho),e(Mp,Yho),e(Mp,FI),e(FI,Kho),e(Mp,Zho),e(x,epo),e(x,Ep),e(Ep,One),e(One,opo),e(Ep,rpo),e(Ep,TI),e(TI,tpo),e(Ep,apo),e(x,npo),e(x,Cp),e(Cp,Vne),e(Vne,spo),e(Cp,lpo),e(Cp,MI),e(MI,ipo),e(Cp,dpo),e(x,cpo),e(x,wp),e(wp,Xne),e(Xne,fpo),e(wp,mpo),e(wp,EI),e(EI,gpo),e(wp,hpo),e(x,ppo),e(x,Ss),e(Ss,zne),e(zne,upo),e(Ss,_po),e(Ss,CI),e(CI,bpo),e(Ss,vpo),e(Ss,wI),e(wI,Fpo),e(Ss,Tpo),e(x,Mpo),e(x,Ap),e(Ap,Qne),e(Qne,Epo),e(Ap,Cpo),e(Ap,AI),e(AI,wpo),e(Ap,Apo),e(x,ypo),e(x,yp),e(yp,Wne),e(Wne,Lpo),e(yp,xpo),e(yp,yI),e(yI,$po),e(yp,kpo),e(x,Spo),e(x,Lp),e(Lp,Hne),e(Hne,Rpo),e(Lp,Bpo),e(Lp,LI),e(LI,Ppo),e(Lp,Ipo),e(x,qpo),e(x,xp),e(xp,Une),e(Une,Npo),e(xp,jpo),e(xp,xI),e(xI,Dpo),e(xp,Gpo),e(x,Opo),e(x,$p),e($p,Jne),e(Jne,Vpo),e($p,Xpo),e($p,$I),e($I,zpo),e($p,Qpo),e(x,Wpo),e(x,kp),e(kp,Yne),e(Yne,Hpo),e(kp,Upo),e(kp,kI),e(kI,Jpo),e(kp,Ypo),e(x,Kpo),e(x,Sp),e(Sp,Kne),e(Kne,Zpo),e(Sp,euo),e(Sp,SI),e(SI,ouo),e(Sp,ruo),e(x,tuo),e(x,Rp),e(Rp,Zne),e(Zne,auo),e(Rp,nuo),e(Rp,RI),e(RI,suo),e(Rp,luo),e(x,iuo),e(x,Bp),e(Bp,ese),e(ese,duo),e(Bp,cuo),e(Bp,BI),e(BI,fuo),e(Bp,muo),e(x,guo),e(x,Pp),e(Pp,ose),e(ose,huo),e(Pp,puo),e(Pp,PI),e(PI,uuo),e(Pp,_uo),e(x,buo),e(x,Ip),e(Ip,rse),e(rse,vuo),e(Ip,Fuo),e(Ip,II),e(II,Tuo),e(Ip,Muo),e(x,Euo),e(x,qp),e(qp,tse),e(tse,Cuo),e(qp,wuo),e(qp,qI),e(qI,Auo),e(qp,yuo),e(x,Luo),e(x,Np),e(Np,ase),e(ase,xuo),e(Np,$uo),e(Np,NI),e(NI,kuo),e(Np,Suo),e(x,Ruo),e(x,jp),e(jp,nse),e(nse,Buo),e(jp,Puo),e(jp,jI),e(jI,Iuo),e(jp,quo),e(x,Nuo),e(x,Dp),e(Dp,sse),e(sse,juo),e(Dp,Duo),e(Dp,DI),e(DI,Guo),e(Dp,Ouo),e(x,Vuo),e(x,Gp),e(Gp,lse),e(lse,Xuo),e(Gp,zuo),e(Gp,GI),e(GI,Quo),e(Gp,Wuo),e(x,Huo),e(x,Op),e(Op,ise),e(ise,Uuo),e(Op,Juo),e(Op,OI),e(OI,Yuo),e(Op,Kuo),e(x,Zuo),e(x,Vp),e(Vp,dse),e(dse,e_o),e(Vp,o_o),e(Vp,VI),e(VI,r_o),e(Vp,t_o),e(x,a_o),e(x,Xp),e(Xp,cse),e(cse,n_o),e(Xp,s_o),e(Xp,XI),e(XI,l_o),e(Xp,i_o),e(x,d_o),e(x,zp),e(zp,fse),e(fse,c_o),e(zp,f_o),e(zp,zI),e(zI,m_o),e(zp,g_o),e(x,h_o),e(x,Qp),e(Qp,mse),e(mse,p_o),e(Qp,u_o),e(Qp,QI),e(QI,__o),e(Qp,b_o),e(x,v_o),e(x,Wp),e(Wp,gse),e(gse,F_o),e(Wp,T_o),e(Wp,WI),e(WI,M_o),e(Wp,E_o),e(x,C_o),e(x,Hp),e(Hp,hse),e(hse,w_o),e(Hp,A_o),e(Hp,HI),e(HI,y_o),e(Hp,L_o),e(x,x_o),e(x,Up),e(Up,pse),e(pse,$_o),e(Up,k_o),e(Up,UI),e(UI,S_o),e(Up,R_o),e(x,B_o),e(x,Jp),e(Jp,use),e(use,P_o),e(Jp,I_o),e(Jp,JI),e(JI,q_o),e(Jp,N_o),e(x,j_o),e(x,Yp),e(Yp,_se),e(_se,D_o),e(Yp,G_o),e(Yp,YI),e(YI,O_o),e(Yp,V_o),e(x,X_o),e(x,Kp),e(Kp,bse),e(bse,z_o),e(Kp,Q_o),e(Kp,KI),e(KI,W_o),e(Kp,H_o),e(x,U_o),e(x,Zp),e(Zp,vse),e(vse,J_o),e(Zp,Y_o),e(Zp,ZI),e(ZI,K_o),e(Zp,Z_o),e(x,e2o),e(x,eu),e(eu,Fse),e(Fse,o2o),e(eu,r2o),e(eu,eq),e(eq,t2o),e(eu,a2o),e(x,n2o),e(x,ou),e(ou,Tse),e(Tse,s2o),e(ou,l2o),e(ou,oq),e(oq,i2o),e(ou,d2o),e(x,c2o),e(x,ru),e(ru,Mse),e(Mse,f2o),e(ru,m2o),e(ru,rq),e(rq,g2o),e(ru,h2o),e(x,p2o),e(x,tu),e(tu,Ese),e(Ese,u2o),e(tu,_2o),e(tu,tq),e(tq,b2o),e(tu,v2o),e(x,F2o),e(x,au),e(au,Cse),e(Cse,T2o),e(au,M2o),e(au,aq),e(aq,E2o),e(au,C2o),e(x,w2o),e(x,nu),e(nu,wse),e(wse,A2o),e(nu,y2o),e(nu,nq),e(nq,L2o),e(nu,x2o),e(x,$2o),e(x,su),e(su,Ase),e(Ase,k2o),e(su,S2o),e(su,sq),e(sq,R2o),e(su,B2o),e(x,P2o),e(x,lu),e(lu,yse),e(yse,I2o),e(lu,q2o),e(lu,lq),e(lq,N2o),e(lu,j2o),e(x,D2o),e(x,iu),e(iu,Lse),e(Lse,G2o),e(iu,O2o),e(iu,iq),e(iq,V2o),e(iu,X2o),e(x,z2o),e(x,du),e(du,xse),e(xse,Q2o),e(du,W2o),e(du,dq),e(dq,H2o),e(du,U2o),e(x,J2o),e(x,cu),e(cu,$se),e($se,Y2o),e(cu,K2o),e(cu,cq),e(cq,Z2o),e(cu,e1o),e(x,o1o),e(x,fu),e(fu,kse),e(kse,r1o),e(fu,t1o),e(fu,fq),e(fq,a1o),e(fu,n1o),e(x,s1o),e(x,mu),e(mu,Sse),e(Sse,l1o),e(mu,i1o),e(mu,mq),e(mq,d1o),e(mu,c1o),e(x,f1o),e(x,gu),e(gu,Rse),e(Rse,m1o),e(gu,g1o),e(gu,gq),e(gq,h1o),e(gu,p1o),e(x,u1o),e(x,hu),e(hu,Bse),e(Bse,_1o),e(hu,b1o),e(hu,hq),e(hq,v1o),e(hu,F1o),e(x,T1o),e(x,pu),e(pu,Pse),e(Pse,M1o),e(pu,E1o),e(pu,pq),e(pq,C1o),e(pu,w1o),e(x,A1o),e(x,uu),e(uu,Ise),e(Ise,y1o),e(uu,L1o),e(uu,uq),e(uq,x1o),e(uu,$1o),e(x,k1o),e(x,_u),e(_u,qse),e(qse,S1o),e(_u,R1o),e(_u,_q),e(_q,B1o),e(_u,P1o),e(x,I1o),e(x,bu),e(bu,Nse),e(Nse,q1o),e(bu,N1o),e(bu,bq),e(bq,j1o),e(bu,D1o),e(x,G1o),e(x,vu),e(vu,jse),e(jse,O1o),e(vu,V1o),e(vu,vq),e(vq,X1o),e(vu,z1o),e(x,Q1o),e(x,Fu),e(Fu,Dse),e(Dse,W1o),e(Fu,H1o),e(Fu,Fq),e(Fq,U1o),e(Fu,J1o),e(x,Y1o),e(x,Tu),e(Tu,Gse),e(Gse,K1o),e(Tu,Z1o),e(Tu,Tq),e(Tq,ebo),e(Tu,obo),e(x,rbo),e(x,Mu),e(Mu,Ose),e(Ose,tbo),e(Mu,abo),e(Mu,Mq),e(Mq,nbo),e(Mu,sbo),e(x,lbo),e(x,Eu),e(Eu,Vse),e(Vse,ibo),e(Eu,dbo),e(Eu,Eq),e(Eq,cbo),e(Eu,fbo),e(x,mbo),e(x,Cu),e(Cu,Xse),e(Xse,gbo),e(Cu,hbo),e(Cu,Cq),e(Cq,pbo),e(Cu,ubo),e(x,_bo),e(x,wu),e(wu,zse),e(zse,bbo),e(wu,vbo),e(wu,wq),e(wq,Fbo),e(wu,Tbo),e(x,Mbo),e(x,Au),e(Au,Qse),e(Qse,Ebo),e(Au,Cbo),e(Au,Aq),e(Aq,wbo),e(Au,Abo),e(x,ybo),e(x,yu),e(yu,Wse),e(Wse,Lbo),e(yu,xbo),e(yu,yq),e(yq,$bo),e(yu,kbo),e(x,Sbo),e(x,Lu),e(Lu,Hse),e(Hse,Rbo),e(Lu,Bbo),e(Lu,Lq),e(Lq,Pbo),e(Lu,Ibo),e(x,qbo),e(x,xu),e(xu,Use),e(Use,Nbo),e(xu,jbo),e(xu,xq),e(xq,Dbo),e(xu,Gbo),e(x,Obo),e(x,$u),e($u,Jse),e(Jse,Vbo),e($u,Xbo),e($u,$q),e($q,zbo),e($u,Qbo),e(x,Wbo),e(x,ku),e(ku,Yse),e(Yse,Hbo),e(ku,Ubo),e(ku,kq),e(kq,Jbo),e(ku,Ybo),e(x,Kbo),e(x,Su),e(Su,Kse),e(Kse,Zbo),e(Su,e5o),e(Su,Sq),e(Sq,o5o),e(Su,r5o),e(x,t5o),e(x,Ru),e(Ru,Zse),e(Zse,a5o),e(Ru,n5o),e(Ru,Rq),e(Rq,s5o),e(Ru,l5o),e(x,i5o),e(x,Bu),e(Bu,ele),e(ele,d5o),e(Bu,c5o),e(Bu,Bq),e(Bq,f5o),e(Bu,m5o),e(x,g5o),e(x,Pu),e(Pu,ole),e(ole,h5o),e(Pu,p5o),e(Pu,Pq),e(Pq,u5o),e(Pu,_5o),e(x,b5o),e(x,Iu),e(Iu,rle),e(rle,v5o),e(Iu,F5o),e(Iu,Iq),e(Iq,T5o),e(Iu,M5o),e(x,E5o),e(x,qu),e(qu,tle),e(tle,C5o),e(qu,w5o),e(qu,qq),e(qq,A5o),e(qu,y5o),e(He,L5o),e(He,Nu),e(Nu,x5o),e(Nu,ale),e(ale,$5o),e(Nu,k5o),e(Nu,nle),e(nle,S5o),e(He,R5o),M(ju,He,null),b(f,FIe,_),b(f,Ci,_),e(Ci,Du),e(Du,sle),M(S6,sle,null),e(Ci,B5o),e(Ci,lle),e(lle,P5o),b(f,TIe,_),b(f,xo,_),M(R6,xo,null),e(xo,I5o),e(xo,wi),e(wi,q5o),e(wi,Nq),e(Nq,N5o),e(wi,j5o),e(wi,jq),e(jq,D5o),e(wi,G5o),e(xo,O5o),e(xo,B6),e(B6,V5o),e(B6,ile),e(ile,X5o),e(B6,z5o),e(xo,Q5o),e(xo,rt),M(P6,rt,null),e(rt,W5o),e(rt,dle),e(dle,H5o),e(rt,U5o),e(rt,Ai),e(Ai,J5o),e(Ai,cle),e(cle,Y5o),e(Ai,K5o),e(Ai,Dq),e(Dq,Z5o),e(Ai,evo),e(rt,ovo),M(Gu,rt,null),e(xo,rvo),e(xo,Ue),M(I6,Ue,null),e(Ue,tvo),e(Ue,fle),e(fle,avo),e(Ue,nvo),e(Ue,ya),e(ya,svo),e(ya,mle),e(mle,lvo),e(ya,ivo),e(ya,gle),e(gle,dvo),e(ya,cvo),e(ya,hle),e(hle,fvo),e(ya,mvo),e(Ue,gvo),e(Ue,G),e(G,Ou),e(Ou,ple),e(ple,hvo),e(Ou,pvo),e(Ou,Gq),e(Gq,uvo),e(Ou,_vo),e(G,bvo),e(G,Vu),e(Vu,ule),e(ule,vvo),e(Vu,Fvo),e(Vu,Oq),e(Oq,Tvo),e(Vu,Mvo),e(G,Evo),e(G,Xu),e(Xu,_le),e(_le,Cvo),e(Xu,wvo),e(Xu,Vq),e(Vq,Avo),e(Xu,yvo),e(G,Lvo),e(G,zu),e(zu,ble),e(ble,xvo),e(zu,$vo),e(zu,Xq),e(Xq,kvo),e(zu,Svo),e(G,Rvo),e(G,Qu),e(Qu,vle),e(vle,Bvo),e(Qu,Pvo),e(Qu,zq),e(zq,Ivo),e(Qu,qvo),e(G,Nvo),e(G,Wu),e(Wu,Fle),e(Fle,jvo),e(Wu,Dvo),e(Wu,Qq),e(Qq,Gvo),e(Wu,Ovo),e(G,Vvo),e(G,Hu),e(Hu,Tle),e(Tle,Xvo),e(Hu,zvo),e(Hu,Wq),e(Wq,Qvo),e(Hu,Wvo),e(G,Hvo),e(G,Uu),e(Uu,Mle),e(Mle,Uvo),e(Uu,Jvo),e(Uu,Hq),e(Hq,Yvo),e(Uu,Kvo),e(G,Zvo),e(G,Ju),e(Ju,Ele),e(Ele,eFo),e(Ju,oFo),e(Ju,Uq),e(Uq,rFo),e(Ju,tFo),e(G,aFo),e(G,Yu),e(Yu,Cle),e(Cle,nFo),e(Yu,sFo),e(Yu,Jq),e(Jq,lFo),e(Yu,iFo),e(G,dFo),e(G,Ku),e(Ku,wle),e(wle,cFo),e(Ku,fFo),e(Ku,Yq),e(Yq,mFo),e(Ku,gFo),e(G,hFo),e(G,Zu),e(Zu,Ale),e(Ale,pFo),e(Zu,uFo),e(Zu,Kq),e(Kq,_Fo),e(Zu,bFo),e(G,vFo),e(G,e_),e(e_,yle),e(yle,FFo),e(e_,TFo),e(e_,Zq),e(Zq,MFo),e(e_,EFo),e(G,CFo),e(G,o_),e(o_,Lle),e(Lle,wFo),e(o_,AFo),e(o_,eN),e(eN,yFo),e(o_,LFo),e(G,xFo),e(G,r_),e(r_,xle),e(xle,$Fo),e(r_,kFo),e(r_,oN),e(oN,SFo),e(r_,RFo),e(G,BFo),e(G,t_),e(t_,$le),e($le,PFo),e(t_,IFo),e(t_,rN),e(rN,qFo),e(t_,NFo),e(G,jFo),e(G,a_),e(a_,kle),e(kle,DFo),e(a_,GFo),e(a_,tN),e(tN,OFo),e(a_,VFo),e(G,XFo),e(G,n_),e(n_,Sle),e(Sle,zFo),e(n_,QFo),e(n_,aN),e(aN,WFo),e(n_,HFo),e(G,UFo),e(G,s_),e(s_,Rle),e(Rle,JFo),e(s_,YFo),e(s_,nN),e(nN,KFo),e(s_,ZFo),e(G,e0o),e(G,l_),e(l_,Ble),e(Ble,o0o),e(l_,r0o),e(l_,sN),e(sN,t0o),e(l_,a0o),e(G,n0o),e(G,i_),e(i_,Ple),e(Ple,s0o),e(i_,l0o),e(i_,lN),e(lN,i0o),e(i_,d0o),e(G,c0o),e(G,d_),e(d_,Ile),e(Ile,f0o),e(d_,m0o),e(d_,iN),e(iN,g0o),e(d_,h0o),e(G,p0o),e(G,c_),e(c_,qle),e(qle,u0o),e(c_,_0o),e(c_,dN),e(dN,b0o),e(c_,v0o),e(G,F0o),e(G,f_),e(f_,Nle),e(Nle,T0o),e(f_,M0o),e(f_,cN),e(cN,E0o),e(f_,C0o),e(G,w0o),e(G,m_),e(m_,jle),e(jle,A0o),e(m_,y0o),e(m_,fN),e(fN,L0o),e(m_,x0o),e(G,$0o),e(G,g_),e(g_,Dle),e(Dle,k0o),e(g_,S0o),e(g_,mN),e(mN,R0o),e(g_,B0o),e(G,P0o),e(G,h_),e(h_,Gle),e(Gle,I0o),e(h_,q0o),e(h_,gN),e(gN,N0o),e(h_,j0o),e(G,D0o),e(G,p_),e(p_,Ole),e(Ole,G0o),e(p_,O0o),e(p_,hN),e(hN,V0o),e(p_,X0o),e(G,z0o),e(G,u_),e(u_,Vle),e(Vle,Q0o),e(u_,W0o),e(u_,pN),e(pN,H0o),e(u_,U0o),e(G,J0o),e(G,__),e(__,Xle),e(Xle,Y0o),e(__,K0o),e(__,uN),e(uN,Z0o),e(__,eTo),e(G,oTo),e(G,b_),e(b_,zle),e(zle,rTo),e(b_,tTo),e(b_,_N),e(_N,aTo),e(b_,nTo),e(G,sTo),e(G,v_),e(v_,Qle),e(Qle,lTo),e(v_,iTo),e(v_,bN),e(bN,dTo),e(v_,cTo),e(G,fTo),e(G,F_),e(F_,Wle),e(Wle,mTo),e(F_,gTo),e(F_,vN),e(vN,hTo),e(F_,pTo),e(G,uTo),e(G,T_),e(T_,Hle),e(Hle,_To),e(T_,bTo),e(T_,FN),e(FN,vTo),e(T_,FTo),e(G,TTo),e(G,M_),e(M_,Ule),e(Ule,MTo),e(M_,ETo),e(M_,TN),e(TN,CTo),e(M_,wTo),e(G,ATo),e(G,E_),e(E_,Jle),e(Jle,yTo),e(E_,LTo),e(E_,MN),e(MN,xTo),e(E_,$To),e(G,kTo),e(G,C_),e(C_,Yle),e(Yle,STo),e(C_,RTo),e(C_,EN),e(EN,BTo),e(C_,PTo),e(G,ITo),e(G,w_),e(w_,Kle),e(Kle,qTo),e(w_,NTo),e(w_,CN),e(CN,jTo),e(w_,DTo),e(G,GTo),e(G,A_),e(A_,Zle),e(Zle,OTo),e(A_,VTo),e(A_,wN),e(wN,XTo),e(A_,zTo),e(G,QTo),e(G,y_),e(y_,eie),e(eie,WTo),e(y_,HTo),e(y_,AN),e(AN,UTo),e(y_,JTo),e(Ue,YTo),e(Ue,L_),e(L_,KTo),e(L_,oie),e(oie,ZTo),e(L_,e7o),e(L_,rie),e(rie,o7o),e(Ue,r7o),M(x_,Ue,null),b(f,MIe,_),b(f,yi,_),e(yi,$_),e($_,tie),M(q6,tie,null),e(yi,t7o),e(yi,aie),e(aie,a7o),b(f,EIe,_),b(f,$o,_),M(N6,$o,null),e($o,n7o),e($o,Li),e(Li,s7o),e(Li,yN),e(yN,l7o),e(Li,i7o),e(Li,LN),e(LN,d7o),e(Li,c7o),e($o,f7o),e($o,j6),e(j6,m7o),e(j6,nie),e(nie,g7o),e(j6,h7o),e($o,p7o),e($o,tt),M(D6,tt,null),e(tt,u7o),e(tt,sie),e(sie,_7o),e(tt,b7o),e(tt,xi),e(xi,v7o),e(xi,lie),e(lie,F7o),e(xi,T7o),e(xi,xN),e(xN,M7o),e(xi,E7o),e(tt,C7o),M(k_,tt,null),e($o,w7o),e($o,Je),M(G6,Je,null),e(Je,A7o),e(Je,iie),e(iie,y7o),e(Je,L7o),e(Je,La),e(La,x7o),e(La,die),e(die,$7o),e(La,k7o),e(La,cie),e(cie,S7o),e(La,R7o),e(La,fie),e(fie,B7o),e(La,P7o),e(Je,I7o),e(Je,z),e(z,S_),e(S_,mie),e(mie,q7o),e(S_,N7o),e(S_,$N),e($N,j7o),e(S_,D7o),e(z,G7o),e(z,R_),e(R_,gie),e(gie,O7o),e(R_,V7o),e(R_,kN),e(kN,X7o),e(R_,z7o),e(z,Q7o),e(z,B_),e(B_,hie),e(hie,W7o),e(B_,H7o),e(B_,SN),e(SN,U7o),e(B_,J7o),e(z,Y7o),e(z,P_),e(P_,pie),e(pie,K7o),e(P_,Z7o),e(P_,RN),e(RN,eMo),e(P_,oMo),e(z,rMo),e(z,I_),e(I_,uie),e(uie,tMo),e(I_,aMo),e(I_,BN),e(BN,nMo),e(I_,sMo),e(z,lMo),e(z,q_),e(q_,_ie),e(_ie,iMo),e(q_,dMo),e(q_,PN),e(PN,cMo),e(q_,fMo),e(z,mMo),e(z,N_),e(N_,bie),e(bie,gMo),e(N_,hMo),e(N_,IN),e(IN,pMo),e(N_,uMo),e(z,_Mo),e(z,j_),e(j_,vie),e(vie,bMo),e(j_,vMo),e(j_,qN),e(qN,FMo),e(j_,TMo),e(z,MMo),e(z,D_),e(D_,Fie),e(Fie,EMo),e(D_,CMo),e(D_,NN),e(NN,wMo),e(D_,AMo),e(z,yMo),e(z,G_),e(G_,Tie),e(Tie,LMo),e(G_,xMo),e(G_,jN),e(jN,$Mo),e(G_,kMo),e(z,SMo),e(z,O_),e(O_,Mie),e(Mie,RMo),e(O_,BMo),e(O_,DN),e(DN,PMo),e(O_,IMo),e(z,qMo),e(z,V_),e(V_,Eie),e(Eie,NMo),e(V_,jMo),e(V_,GN),e(GN,DMo),e(V_,GMo),e(z,OMo),e(z,X_),e(X_,Cie),e(Cie,VMo),e(X_,XMo),e(X_,ON),e(ON,zMo),e(X_,QMo),e(z,WMo),e(z,z_),e(z_,wie),e(wie,HMo),e(z_,UMo),e(z_,VN),e(VN,JMo),e(z_,YMo),e(z,KMo),e(z,Q_),e(Q_,Aie),e(Aie,ZMo),e(Q_,e4o),e(Q_,XN),e(XN,o4o),e(Q_,r4o),e(z,t4o),e(z,W_),e(W_,yie),e(yie,a4o),e(W_,n4o),e(W_,zN),e(zN,s4o),e(W_,l4o),e(z,i4o),e(z,H_),e(H_,Lie),e(Lie,d4o),e(H_,c4o),e(H_,QN),e(QN,f4o),e(H_,m4o),e(z,g4o),e(z,U_),e(U_,xie),e(xie,h4o),e(U_,p4o),e(U_,WN),e(WN,u4o),e(U_,_4o),e(z,b4o),e(z,J_),e(J_,$ie),e($ie,v4o),e(J_,F4o),e(J_,HN),e(HN,T4o),e(J_,M4o),e(z,E4o),e(z,Y_),e(Y_,kie),e(kie,C4o),e(Y_,w4o),e(Y_,UN),e(UN,A4o),e(Y_,y4o),e(z,L4o),e(z,K_),e(K_,Sie),e(Sie,x4o),e(K_,$4o),e(K_,JN),e(JN,k4o),e(K_,S4o),e(z,R4o),e(z,Z_),e(Z_,Rie),e(Rie,B4o),e(Z_,P4o),e(Z_,YN),e(YN,I4o),e(Z_,q4o),e(z,N4o),e(z,e2),e(e2,Bie),e(Bie,j4o),e(e2,D4o),e(e2,KN),e(KN,G4o),e(e2,O4o),e(z,V4o),e(z,o2),e(o2,Pie),e(Pie,X4o),e(o2,z4o),e(o2,ZN),e(ZN,Q4o),e(o2,W4o),e(z,H4o),e(z,r2),e(r2,Iie),e(Iie,U4o),e(r2,J4o),e(r2,ej),e(ej,Y4o),e(r2,K4o),e(z,Z4o),e(z,t2),e(t2,qie),e(qie,eEo),e(t2,oEo),e(t2,oj),e(oj,rEo),e(t2,tEo),e(z,aEo),e(z,a2),e(a2,Nie),e(Nie,nEo),e(a2,sEo),e(a2,rj),e(rj,lEo),e(a2,iEo),e(z,dEo),e(z,n2),e(n2,jie),e(jie,cEo),e(n2,fEo),e(n2,tj),e(tj,mEo),e(n2,gEo),e(z,hEo),e(z,s2),e(s2,Die),e(Die,pEo),e(s2,uEo),e(s2,aj),e(aj,_Eo),e(s2,bEo),e(z,vEo),e(z,l2),e(l2,Gie),e(Gie,FEo),e(l2,TEo),e(l2,nj),e(nj,MEo),e(l2,EEo),e(z,CEo),e(z,i2),e(i2,Oie),e(Oie,wEo),e(i2,AEo),e(i2,sj),e(sj,yEo),e(i2,LEo),e(z,xEo),e(z,d2),e(d2,Vie),e(Vie,$Eo),e(d2,kEo),e(d2,lj),e(lj,SEo),e(d2,REo),e(z,BEo),e(z,c2),e(c2,Xie),e(Xie,PEo),e(c2,IEo),e(c2,ij),e(ij,qEo),e(c2,NEo),e(z,jEo),e(z,f2),e(f2,zie),e(zie,DEo),e(f2,GEo),e(f2,dj),e(dj,OEo),e(f2,VEo),e(z,XEo),e(z,m2),e(m2,Qie),e(Qie,zEo),e(m2,QEo),e(m2,cj),e(cj,WEo),e(m2,HEo),e(z,UEo),e(z,g2),e(g2,Wie),e(Wie,JEo),e(g2,YEo),e(g2,fj),e(fj,KEo),e(g2,ZEo),e(Je,eCo),e(Je,h2),e(h2,oCo),e(h2,Hie),e(Hie,rCo),e(h2,tCo),e(h2,Uie),e(Uie,aCo),e(Je,nCo),M(p2,Je,null),b(f,CIe,_),b(f,$i,_),e($i,u2),e(u2,Jie),M(O6,Jie,null),e($i,sCo),e($i,Yie),e(Yie,lCo),b(f,wIe,_),b(f,ko,_),M(V6,ko,null),e(ko,iCo),e(ko,ki),e(ki,dCo),e(ki,mj),e(mj,cCo),e(ki,fCo),e(ki,gj),e(gj,mCo),e(ki,gCo),e(ko,hCo),e(ko,X6),e(X6,pCo),e(X6,Kie),e(Kie,uCo),e(X6,_Co),e(ko,bCo),e(ko,at),M(z6,at,null),e(at,vCo),e(at,Zie),e(Zie,FCo),e(at,TCo),e(at,Si),e(Si,MCo),e(Si,ede),e(ede,ECo),e(Si,CCo),e(Si,hj),e(hj,wCo),e(Si,ACo),e(at,yCo),M(_2,at,null),e(ko,LCo),e(ko,Ye),M(Q6,Ye,null),e(Ye,xCo),e(Ye,ode),e(ode,$Co),e(Ye,kCo),e(Ye,xa),e(xa,SCo),e(xa,rde),e(rde,RCo),e(xa,BCo),e(xa,tde),e(tde,PCo),e(xa,ICo),e(xa,ade),e(ade,qCo),e(xa,NCo),e(Ye,jCo),e(Ye,Q),e(Q,b2),e(b2,nde),e(nde,DCo),e(b2,GCo),e(b2,pj),e(pj,OCo),e(b2,VCo),e(Q,XCo),e(Q,v2),e(v2,sde),e(sde,zCo),e(v2,QCo),e(v2,uj),e(uj,WCo),e(v2,HCo),e(Q,UCo),e(Q,F2),e(F2,lde),e(lde,JCo),e(F2,YCo),e(F2,_j),e(_j,KCo),e(F2,ZCo),e(Q,e3o),e(Q,T2),e(T2,ide),e(ide,o3o),e(T2,r3o),e(T2,bj),e(bj,t3o),e(T2,a3o),e(Q,n3o),e(Q,M2),e(M2,dde),e(dde,s3o),e(M2,l3o),e(M2,vj),e(vj,i3o),e(M2,d3o),e(Q,c3o),e(Q,E2),e(E2,cde),e(cde,f3o),e(E2,m3o),e(E2,Fj),e(Fj,g3o),e(E2,h3o),e(Q,p3o),e(Q,C2),e(C2,fde),e(fde,u3o),e(C2,_3o),e(C2,Tj),e(Tj,b3o),e(C2,v3o),e(Q,F3o),e(Q,w2),e(w2,mde),e(mde,T3o),e(w2,M3o),e(w2,Mj),e(Mj,E3o),e(w2,C3o),e(Q,w3o),e(Q,A2),e(A2,gde),e(gde,A3o),e(A2,y3o),e(A2,Ej),e(Ej,L3o),e(A2,x3o),e(Q,$3o),e(Q,y2),e(y2,hde),e(hde,k3o),e(y2,S3o),e(y2,Cj),e(Cj,R3o),e(y2,B3o),e(Q,P3o),e(Q,L2),e(L2,pde),e(pde,I3o),e(L2,q3o),e(L2,wj),e(wj,N3o),e(L2,j3o),e(Q,D3o),e(Q,x2),e(x2,ude),e(ude,G3o),e(x2,O3o),e(x2,Aj),e(Aj,V3o),e(x2,X3o),e(Q,z3o),e(Q,$2),e($2,_de),e(_de,Q3o),e($2,W3o),e($2,yj),e(yj,H3o),e($2,U3o),e(Q,J3o),e(Q,k2),e(k2,bde),e(bde,Y3o),e(k2,K3o),e(k2,Lj),e(Lj,Z3o),e(k2,ewo),e(Q,owo),e(Q,S2),e(S2,vde),e(vde,rwo),e(S2,two),e(S2,xj),e(xj,awo),e(S2,nwo),e(Q,swo),e(Q,R2),e(R2,Fde),e(Fde,lwo),e(R2,iwo),e(R2,$j),e($j,dwo),e(R2,cwo),e(Q,fwo),e(Q,B2),e(B2,Tde),e(Tde,mwo),e(B2,gwo),e(B2,kj),e(kj,hwo),e(B2,pwo),e(Q,uwo),e(Q,P2),e(P2,Mde),e(Mde,_wo),e(P2,bwo),e(P2,Sj),e(Sj,vwo),e(P2,Fwo),e(Q,Two),e(Q,I2),e(I2,Ede),e(Ede,Mwo),e(I2,Ewo),e(I2,Rj),e(Rj,Cwo),e(I2,wwo),e(Q,Awo),e(Q,q2),e(q2,Cde),e(Cde,ywo),e(q2,Lwo),e(q2,Bj),e(Bj,xwo),e(q2,$wo),e(Q,kwo),e(Q,N2),e(N2,wde),e(wde,Swo),e(N2,Rwo),e(N2,Pj),e(Pj,Bwo),e(N2,Pwo),e(Q,Iwo),e(Q,j2),e(j2,Ade),e(Ade,qwo),e(j2,Nwo),e(j2,Ij),e(Ij,jwo),e(j2,Dwo),e(Q,Gwo),e(Q,D2),e(D2,yde),e(yde,Owo),e(D2,Vwo),e(D2,qj),e(qj,Xwo),e(D2,zwo),e(Q,Qwo),e(Q,G2),e(G2,Lde),e(Lde,Wwo),e(G2,Hwo),e(G2,Nj),e(Nj,Uwo),e(G2,Jwo),e(Q,Ywo),e(Q,O2),e(O2,xde),e(xde,Kwo),e(O2,Zwo),e(O2,jj),e(jj,eAo),e(O2,oAo),e(Q,rAo),e(Q,V2),e(V2,$de),e($de,tAo),e(V2,aAo),e(V2,Dj),e(Dj,nAo),e(V2,sAo),e(Q,lAo),e(Q,X2),e(X2,kde),e(kde,iAo),e(X2,dAo),e(X2,Gj),e(Gj,cAo),e(X2,fAo),e(Q,mAo),e(Q,z2),e(z2,Sde),e(Sde,gAo),e(z2,hAo),e(z2,Oj),e(Oj,pAo),e(z2,uAo),e(Q,_Ao),e(Q,Q2),e(Q2,Rde),e(Rde,bAo),e(Q2,vAo),e(Q2,Vj),e(Vj,FAo),e(Q2,TAo),e(Q,MAo),e(Q,W2),e(W2,Bde),e(Bde,EAo),e(W2,CAo),e(W2,Xj),e(Xj,wAo),e(W2,AAo),e(Q,yAo),e(Q,H2),e(H2,Pde),e(Pde,LAo),e(H2,xAo),e(H2,Ide),e(Ide,$Ao),e(H2,kAo),e(Q,SAo),e(Q,U2),e(U2,qde),e(qde,RAo),e(U2,BAo),e(U2,zj),e(zj,PAo),e(U2,IAo),e(Q,qAo),e(Q,J2),e(J2,Nde),e(Nde,NAo),e(J2,jAo),e(J2,Qj),e(Qj,DAo),e(J2,GAo),e(Q,OAo),e(Q,Y2),e(Y2,jde),e(jde,VAo),e(Y2,XAo),e(Y2,Wj),e(Wj,zAo),e(Y2,QAo),e(Q,WAo),e(Q,K2),e(K2,Dde),e(Dde,HAo),e(K2,UAo),e(K2,Hj),e(Hj,JAo),e(K2,YAo),e(Ye,KAo),e(Ye,Z2),e(Z2,ZAo),e(Z2,Gde),e(Gde,e6o),e(Z2,o6o),e(Z2,Ode),e(Ode,r6o),e(Ye,t6o),M(e1,Ye,null),b(f,AIe,_),b(f,Ri,_),e(Ri,o1),e(o1,Vde),M(W6,Vde,null),e(Ri,a6o),e(Ri,Xde),e(Xde,n6o),b(f,yIe,_),b(f,So,_),M(H6,So,null),e(So,s6o),e(So,Bi),e(Bi,l6o),e(Bi,Uj),e(Uj,i6o),e(Bi,d6o),e(Bi,Jj),e(Jj,c6o),e(Bi,f6o),e(So,m6o),e(So,U6),e(U6,g6o),e(U6,zde),e(zde,h6o),e(U6,p6o),e(So,u6o),e(So,nt),M(J6,nt,null),e(nt,_6o),e(nt,Qde),e(Qde,b6o),e(nt,v6o),e(nt,Pi),e(Pi,F6o),e(Pi,Wde),e(Wde,T6o),e(Pi,M6o),e(Pi,Yj),e(Yj,E6o),e(Pi,C6o),e(nt,w6o),M(r1,nt,null),e(So,A6o),e(So,Ke),M(Y6,Ke,null),e(Ke,y6o),e(Ke,Hde),e(Hde,L6o),e(Ke,x6o),e(Ke,$a),e($a,$6o),e($a,Ude),e(Ude,k6o),e($a,S6o),e($a,Jde),e(Jde,R6o),e($a,B6o),e($a,Yde),e(Yde,P6o),e($a,I6o),e(Ke,q6o),e(Ke,he),e(he,t1),e(t1,Kde),e(Kde,N6o),e(t1,j6o),e(t1,Kj),e(Kj,D6o),e(t1,G6o),e(he,O6o),e(he,a1),e(a1,Zde),e(Zde,V6o),e(a1,X6o),e(a1,Zj),e(Zj,z6o),e(a1,Q6o),e(he,W6o),e(he,n1),e(n1,ece),e(ece,H6o),e(n1,U6o),e(n1,eD),e(eD,J6o),e(n1,Y6o),e(he,K6o),e(he,s1),e(s1,oce),e(oce,Z6o),e(s1,eyo),e(s1,oD),e(oD,oyo),e(s1,ryo),e(he,tyo),e(he,l1),e(l1,rce),e(rce,ayo),e(l1,nyo),e(l1,rD),e(rD,syo),e(l1,lyo),e(he,iyo),e(he,i1),e(i1,tce),e(tce,dyo),e(i1,cyo),e(i1,tD),e(tD,fyo),e(i1,myo),e(he,gyo),e(he,d1),e(d1,ace),e(ace,hyo),e(d1,pyo),e(d1,aD),e(aD,uyo),e(d1,_yo),e(he,byo),e(he,c1),e(c1,nce),e(nce,vyo),e(c1,Fyo),e(c1,nD),e(nD,Tyo),e(c1,Myo),e(he,Eyo),e(he,f1),e(f1,sce),e(sce,Cyo),e(f1,wyo),e(f1,sD),e(sD,Ayo),e(f1,yyo),e(he,Lyo),e(he,m1),e(m1,lce),e(lce,xyo),e(m1,$yo),e(m1,lD),e(lD,kyo),e(m1,Syo),e(he,Ryo),e(he,g1),e(g1,ice),e(ice,Byo),e(g1,Pyo),e(g1,iD),e(iD,Iyo),e(g1,qyo),e(he,Nyo),e(he,h1),e(h1,dce),e(dce,jyo),e(h1,Dyo),e(h1,dD),e(dD,Gyo),e(h1,Oyo),e(he,Vyo),e(he,p1),e(p1,cce),e(cce,Xyo),e(p1,zyo),e(p1,cD),e(cD,Qyo),e(p1,Wyo),e(he,Hyo),e(he,u1),e(u1,fce),e(fce,Uyo),e(u1,Jyo),e(u1,fD),e(fD,Yyo),e(u1,Kyo),e(he,Zyo),e(he,_1),e(_1,mce),e(mce,eLo),e(_1,oLo),e(_1,mD),e(mD,rLo),e(_1,tLo),e(he,aLo),e(he,b1),e(b1,gce),e(gce,nLo),e(b1,sLo),e(b1,gD),e(gD,lLo),e(b1,iLo),e(he,dLo),e(he,v1),e(v1,hce),e(hce,cLo),e(v1,fLo),e(v1,hD),e(hD,mLo),e(v1,gLo),e(Ke,hLo),e(Ke,F1),e(F1,pLo),e(F1,pce),e(pce,uLo),e(F1,_Lo),e(F1,uce),e(uce,bLo),e(Ke,vLo),M(T1,Ke,null),b(f,LIe,_),b(f,Ii,_),e(Ii,M1),e(M1,_ce),M(K6,_ce,null),e(Ii,FLo),e(Ii,bce),e(bce,TLo),b(f,xIe,_),b(f,Ro,_),M(Z6,Ro,null),e(Ro,MLo),e(Ro,qi),e(qi,ELo),e(qi,pD),e(pD,CLo),e(qi,wLo),e(qi,uD),e(uD,ALo),e(qi,yLo),e(Ro,LLo),e(Ro,ey),e(ey,xLo),e(ey,vce),e(vce,$Lo),e(ey,kLo),e(Ro,SLo),e(Ro,st),M(oy,st,null),e(st,RLo),e(st,Fce),e(Fce,BLo),e(st,PLo),e(st,Ni),e(Ni,ILo),e(Ni,Tce),e(Tce,qLo),e(Ni,NLo),e(Ni,_D),e(_D,jLo),e(Ni,DLo),e(st,GLo),M(E1,st,null),e(Ro,OLo),e(Ro,Ze),M(ry,Ze,null),e(Ze,VLo),e(Ze,Mce),e(Mce,XLo),e(Ze,zLo),e(Ze,ka),e(ka,QLo),e(ka,Ece),e(Ece,WLo),e(ka,HLo),e(ka,Cce),e(Cce,ULo),e(ka,JLo),e(ka,wce),e(wce,YLo),e(ka,KLo),e(Ze,ZLo),e(Ze,q),e(q,C1),e(C1,Ace),e(Ace,e8o),e(C1,o8o),e(C1,bD),e(bD,r8o),e(C1,t8o),e(q,a8o),e(q,w1),e(w1,yce),e(yce,n8o),e(w1,s8o),e(w1,vD),e(vD,l8o),e(w1,i8o),e(q,d8o),e(q,A1),e(A1,Lce),e(Lce,c8o),e(A1,f8o),e(A1,FD),e(FD,m8o),e(A1,g8o),e(q,h8o),e(q,y1),e(y1,xce),e(xce,p8o),e(y1,u8o),e(y1,TD),e(TD,_8o),e(y1,b8o),e(q,v8o),e(q,L1),e(L1,$ce),e($ce,F8o),e(L1,T8o),e(L1,MD),e(MD,M8o),e(L1,E8o),e(q,C8o),e(q,x1),e(x1,kce),e(kce,w8o),e(x1,A8o),e(x1,ED),e(ED,y8o),e(x1,L8o),e(q,x8o),e(q,$1),e($1,Sce),e(Sce,$8o),e($1,k8o),e($1,CD),e(CD,S8o),e($1,R8o),e(q,B8o),e(q,k1),e(k1,Rce),e(Rce,P8o),e(k1,I8o),e(k1,wD),e(wD,q8o),e(k1,N8o),e(q,j8o),e(q,S1),e(S1,Bce),e(Bce,D8o),e(S1,G8o),e(S1,AD),e(AD,O8o),e(S1,V8o),e(q,X8o),e(q,R1),e(R1,Pce),e(Pce,z8o),e(R1,Q8o),e(R1,yD),e(yD,W8o),e(R1,H8o),e(q,U8o),e(q,B1),e(B1,Ice),e(Ice,J8o),e(B1,Y8o),e(B1,LD),e(LD,K8o),e(B1,Z8o),e(q,exo),e(q,P1),e(P1,qce),e(qce,oxo),e(P1,rxo),e(P1,xD),e(xD,txo),e(P1,axo),e(q,nxo),e(q,I1),e(I1,Nce),e(Nce,sxo),e(I1,lxo),e(I1,$D),e($D,ixo),e(I1,dxo),e(q,cxo),e(q,q1),e(q1,jce),e(jce,fxo),e(q1,mxo),e(q1,kD),e(kD,gxo),e(q1,hxo),e(q,pxo),e(q,N1),e(N1,Dce),e(Dce,uxo),e(N1,_xo),e(N1,SD),e(SD,bxo),e(N1,vxo),e(q,Fxo),e(q,j1),e(j1,Gce),e(Gce,Txo),e(j1,Mxo),e(j1,RD),e(RD,Exo),e(j1,Cxo),e(q,wxo),e(q,D1),e(D1,Oce),e(Oce,Axo),e(D1,yxo),e(D1,BD),e(BD,Lxo),e(D1,xxo),e(q,$xo),e(q,G1),e(G1,Vce),e(Vce,kxo),e(G1,Sxo),e(G1,PD),e(PD,Rxo),e(G1,Bxo),e(q,Pxo),e(q,O1),e(O1,Xce),e(Xce,Ixo),e(O1,qxo),e(O1,ID),e(ID,Nxo),e(O1,jxo),e(q,Dxo),e(q,V1),e(V1,zce),e(zce,Gxo),e(V1,Oxo),e(V1,qD),e(qD,Vxo),e(V1,Xxo),e(q,zxo),e(q,X1),e(X1,Qce),e(Qce,Qxo),e(X1,Wxo),e(X1,ND),e(ND,Hxo),e(X1,Uxo),e(q,Jxo),e(q,z1),e(z1,Wce),e(Wce,Yxo),e(z1,Kxo),e(z1,jD),e(jD,Zxo),e(z1,e9o),e(q,o9o),e(q,Q1),e(Q1,Hce),e(Hce,r9o),e(Q1,t9o),e(Q1,DD),e(DD,a9o),e(Q1,n9o),e(q,s9o),e(q,W1),e(W1,Uce),e(Uce,l9o),e(W1,i9o),e(W1,GD),e(GD,d9o),e(W1,c9o),e(q,f9o),e(q,H1),e(H1,Jce),e(Jce,m9o),e(H1,g9o),e(H1,OD),e(OD,h9o),e(H1,p9o),e(q,u9o),e(q,U1),e(U1,Yce),e(Yce,_9o),e(U1,b9o),e(U1,VD),e(VD,v9o),e(U1,F9o),e(q,T9o),e(q,J1),e(J1,Kce),e(Kce,M9o),e(J1,E9o),e(J1,XD),e(XD,C9o),e(J1,w9o),e(q,A9o),e(q,Y1),e(Y1,Zce),e(Zce,y9o),e(Y1,L9o),e(Y1,zD),e(zD,x9o),e(Y1,$9o),e(q,k9o),e(q,K1),e(K1,efe),e(efe,S9o),e(K1,R9o),e(K1,QD),e(QD,B9o),e(K1,P9o),e(q,I9o),e(q,Z1),e(Z1,ofe),e(ofe,q9o),e(Z1,N9o),e(Z1,WD),e(WD,j9o),e(Z1,D9o),e(q,G9o),e(q,eb),e(eb,rfe),e(rfe,O9o),e(eb,V9o),e(eb,HD),e(HD,X9o),e(eb,z9o),e(q,Q9o),e(q,ob),e(ob,tfe),e(tfe,W9o),e(ob,H9o),e(ob,UD),e(UD,U9o),e(ob,J9o),e(q,Y9o),e(q,rb),e(rb,afe),e(afe,K9o),e(rb,Z9o),e(rb,JD),e(JD,e$o),e(rb,o$o),e(q,r$o),e(q,tb),e(tb,nfe),e(nfe,t$o),e(tb,a$o),e(tb,YD),e(YD,n$o),e(tb,s$o),e(q,l$o),e(q,ab),e(ab,sfe),e(sfe,i$o),e(ab,d$o),e(ab,KD),e(KD,c$o),e(ab,f$o),e(q,m$o),e(q,nb),e(nb,lfe),e(lfe,g$o),e(nb,h$o),e(nb,ZD),e(ZD,p$o),e(nb,u$o),e(q,_$o),e(q,sb),e(sb,ife),e(ife,b$o),e(sb,v$o),e(sb,eG),e(eG,F$o),e(sb,T$o),e(q,M$o),e(q,lb),e(lb,dfe),e(dfe,E$o),e(lb,C$o),e(lb,oG),e(oG,w$o),e(lb,A$o),e(q,y$o),e(q,ib),e(ib,cfe),e(cfe,L$o),e(ib,x$o),e(ib,rG),e(rG,$$o),e(ib,k$o),e(q,S$o),e(q,db),e(db,ffe),e(ffe,R$o),e(db,B$o),e(db,tG),e(tG,P$o),e(db,I$o),e(q,q$o),e(q,cb),e(cb,mfe),e(mfe,N$o),e(cb,j$o),e(cb,aG),e(aG,D$o),e(cb,G$o),e(q,O$o),e(q,fb),e(fb,gfe),e(gfe,V$o),e(fb,X$o),e(fb,nG),e(nG,z$o),e(fb,Q$o),e(q,W$o),e(q,mb),e(mb,hfe),e(hfe,H$o),e(mb,U$o),e(mb,sG),e(sG,J$o),e(mb,Y$o),e(q,K$o),e(q,gb),e(gb,pfe),e(pfe,Z$o),e(gb,eko),e(gb,lG),e(lG,oko),e(gb,rko),e(q,tko),e(q,hb),e(hb,ufe),e(ufe,ako),e(hb,nko),e(hb,iG),e(iG,sko),e(hb,lko),e(q,iko),e(q,pb),e(pb,_fe),e(_fe,dko),e(pb,cko),e(pb,dG),e(dG,fko),e(pb,mko),e(q,gko),e(q,ub),e(ub,bfe),e(bfe,hko),e(ub,pko),e(ub,cG),e(cG,uko),e(ub,_ko),e(Ze,bko),e(Ze,_b),e(_b,vko),e(_b,vfe),e(vfe,Fko),e(_b,Tko),e(_b,Ffe),e(Ffe,Mko),e(Ze,Eko),M(bb,Ze,null),b(f,$Ie,_),b(f,ji,_),e(ji,vb),e(vb,Tfe),M(ty,Tfe,null),e(ji,Cko),e(ji,Mfe),e(Mfe,wko),b(f,kIe,_),b(f,Bo,_),M(ay,Bo,null),e(Bo,Ako),e(Bo,Di),e(Di,yko),e(Di,fG),e(fG,Lko),e(Di,xko),e(Di,mG),e(mG,$ko),e(Di,kko),e(Bo,Sko),e(Bo,ny),e(ny,Rko),e(ny,Efe),e(Efe,Bko),e(ny,Pko),e(Bo,Iko),e(Bo,lt),M(sy,lt,null),e(lt,qko),e(lt,Cfe),e(Cfe,Nko),e(lt,jko),e(lt,Gi),e(Gi,Dko),e(Gi,wfe),e(wfe,Gko),e(Gi,Oko),e(Gi,gG),e(gG,Vko),e(Gi,Xko),e(lt,zko),M(Fb,lt,null),e(Bo,Qko),e(Bo,eo),M(ly,eo,null),e(eo,Wko),e(eo,Afe),e(Afe,Hko),e(eo,Uko),e(eo,Sa),e(Sa,Jko),e(Sa,yfe),e(yfe,Yko),e(Sa,Kko),e(Sa,Lfe),e(Lfe,Zko),e(Sa,eSo),e(Sa,xfe),e(xfe,oSo),e(Sa,rSo),e(eo,tSo),e(eo,Y),e(Y,Tb),e(Tb,$fe),e($fe,aSo),e(Tb,nSo),e(Tb,hG),e(hG,sSo),e(Tb,lSo),e(Y,iSo),e(Y,Mb),e(Mb,kfe),e(kfe,dSo),e(Mb,cSo),e(Mb,pG),e(pG,fSo),e(Mb,mSo),e(Y,gSo),e(Y,Eb),e(Eb,Sfe),e(Sfe,hSo),e(Eb,pSo),e(Eb,uG),e(uG,uSo),e(Eb,_So),e(Y,bSo),e(Y,Cb),e(Cb,Rfe),e(Rfe,vSo),e(Cb,FSo),e(Cb,_G),e(_G,TSo),e(Cb,MSo),e(Y,ESo),e(Y,wb),e(wb,Bfe),e(Bfe,CSo),e(wb,wSo),e(wb,bG),e(bG,ASo),e(wb,ySo),e(Y,LSo),e(Y,Ab),e(Ab,Pfe),e(Pfe,xSo),e(Ab,$So),e(Ab,vG),e(vG,kSo),e(Ab,SSo),e(Y,RSo),e(Y,yb),e(yb,Ife),e(Ife,BSo),e(yb,PSo),e(yb,FG),e(FG,ISo),e(yb,qSo),e(Y,NSo),e(Y,Lb),e(Lb,qfe),e(qfe,jSo),e(Lb,DSo),e(Lb,TG),e(TG,GSo),e(Lb,OSo),e(Y,VSo),e(Y,xb),e(xb,Nfe),e(Nfe,XSo),e(xb,zSo),e(xb,MG),e(MG,QSo),e(xb,WSo),e(Y,HSo),e(Y,$b),e($b,jfe),e(jfe,USo),e($b,JSo),e($b,EG),e(EG,YSo),e($b,KSo),e(Y,ZSo),e(Y,kb),e(kb,Dfe),e(Dfe,eRo),e(kb,oRo),e(kb,CG),e(CG,rRo),e(kb,tRo),e(Y,aRo),e(Y,Sb),e(Sb,Gfe),e(Gfe,nRo),e(Sb,sRo),e(Sb,wG),e(wG,lRo),e(Sb,iRo),e(Y,dRo),e(Y,Rb),e(Rb,Ofe),e(Ofe,cRo),e(Rb,fRo),e(Rb,AG),e(AG,mRo),e(Rb,gRo),e(Y,hRo),e(Y,Bb),e(Bb,Vfe),e(Vfe,pRo),e(Bb,uRo),e(Bb,yG),e(yG,_Ro),e(Bb,bRo),e(Y,vRo),e(Y,Pb),e(Pb,Xfe),e(Xfe,FRo),e(Pb,TRo),e(Pb,LG),e(LG,MRo),e(Pb,ERo),e(Y,CRo),e(Y,Ib),e(Ib,zfe),e(zfe,wRo),e(Ib,ARo),e(Ib,xG),e(xG,yRo),e(Ib,LRo),e(Y,xRo),e(Y,qb),e(qb,Qfe),e(Qfe,$Ro),e(qb,kRo),e(qb,$G),e($G,SRo),e(qb,RRo),e(Y,BRo),e(Y,Nb),e(Nb,Wfe),e(Wfe,PRo),e(Nb,IRo),e(Nb,kG),e(kG,qRo),e(Nb,NRo),e(Y,jRo),e(Y,jb),e(jb,Hfe),e(Hfe,DRo),e(jb,GRo),e(jb,SG),e(SG,ORo),e(jb,VRo),e(Y,XRo),e(Y,Db),e(Db,Ufe),e(Ufe,zRo),e(Db,QRo),e(Db,RG),e(RG,WRo),e(Db,HRo),e(Y,URo),e(Y,Gb),e(Gb,Jfe),e(Jfe,JRo),e(Gb,YRo),e(Gb,BG),e(BG,KRo),e(Gb,ZRo),e(Y,eBo),e(Y,Ob),e(Ob,Yfe),e(Yfe,oBo),e(Ob,rBo),e(Ob,PG),e(PG,tBo),e(Ob,aBo),e(Y,nBo),e(Y,Vb),e(Vb,Kfe),e(Kfe,sBo),e(Vb,lBo),e(Vb,IG),e(IG,iBo),e(Vb,dBo),e(Y,cBo),e(Y,Xb),e(Xb,Zfe),e(Zfe,fBo),e(Xb,mBo),e(Xb,qG),e(qG,gBo),e(Xb,hBo),e(Y,pBo),e(Y,zb),e(zb,eme),e(eme,uBo),e(zb,_Bo),e(zb,NG),e(NG,bBo),e(zb,vBo),e(Y,FBo),e(Y,Qb),e(Qb,ome),e(ome,TBo),e(Qb,MBo),e(Qb,jG),e(jG,EBo),e(Qb,CBo),e(Y,wBo),e(Y,Wb),e(Wb,rme),e(rme,ABo),e(Wb,yBo),e(Wb,DG),e(DG,LBo),e(Wb,xBo),e(Y,$Bo),e(Y,Hb),e(Hb,tme),e(tme,kBo),e(Hb,SBo),e(Hb,GG),e(GG,RBo),e(Hb,BBo),e(Y,PBo),e(Y,Ub),e(Ub,ame),e(ame,IBo),e(Ub,qBo),e(Ub,OG),e(OG,NBo),e(Ub,jBo),e(eo,DBo),e(eo,Jb),e(Jb,GBo),e(Jb,nme),e(nme,OBo),e(Jb,VBo),e(Jb,sme),e(sme,XBo),e(eo,zBo),M(Yb,eo,null),b(f,SIe,_),b(f,Oi,_),e(Oi,Kb),e(Kb,lme),M(iy,lme,null),e(Oi,QBo),e(Oi,ime),e(ime,WBo),b(f,RIe,_),b(f,Po,_),M(dy,Po,null),e(Po,HBo),e(Po,Vi),e(Vi,UBo),e(Vi,VG),e(VG,JBo),e(Vi,YBo),e(Vi,XG),e(XG,KBo),e(Vi,ZBo),e(Po,ePo),e(Po,cy),e(cy,oPo),e(cy,dme),e(dme,rPo),e(cy,tPo),e(Po,aPo),e(Po,it),M(fy,it,null),e(it,nPo),e(it,cme),e(cme,sPo),e(it,lPo),e(it,Xi),e(Xi,iPo),e(Xi,fme),e(fme,dPo),e(Xi,cPo),e(Xi,zG),e(zG,fPo),e(Xi,mPo),e(it,gPo),M(Zb,it,null),e(Po,hPo),e(Po,oo),M(my,oo,null),e(oo,pPo),e(oo,mme),e(mme,uPo),e(oo,_Po),e(oo,Ra),e(Ra,bPo),e(Ra,gme),e(gme,vPo),e(Ra,FPo),e(Ra,hme),e(hme,TPo),e(Ra,MPo),e(Ra,pme),e(pme,EPo),e(Ra,CPo),e(oo,wPo),e(oo,Yr),e(Yr,e5),e(e5,ume),e(ume,APo),e(e5,yPo),e(e5,QG),e(QG,LPo),e(e5,xPo),e(Yr,$Po),e(Yr,o5),e(o5,_me),e(_me,kPo),e(o5,SPo),e(o5,WG),e(WG,RPo),e(o5,BPo),e(Yr,PPo),e(Yr,r5),e(r5,bme),e(bme,IPo),e(r5,qPo),e(r5,HG),e(HG,NPo),e(r5,jPo),e(Yr,DPo),e(Yr,t5),e(t5,vme),e(vme,GPo),e(t5,OPo),e(t5,UG),e(UG,VPo),e(t5,XPo),e(Yr,zPo),e(Yr,a5),e(a5,Fme),e(Fme,QPo),e(a5,WPo),e(a5,JG),e(JG,HPo),e(a5,UPo),e(oo,JPo),e(oo,n5),e(n5,YPo),e(n5,Tme),e(Tme,KPo),e(n5,ZPo),e(n5,Mme),e(Mme,eIo),e(oo,oIo),M(s5,oo,null),b(f,BIe,_),b(f,zi,_),e(zi,l5),e(l5,Eme),M(gy,Eme,null),e(zi,rIo),e(zi,Cme),e(Cme,tIo),b(f,PIe,_),b(f,Io,_),M(hy,Io,null),e(Io,aIo),e(Io,Qi),e(Qi,nIo),e(Qi,YG),e(YG,sIo),e(Qi,lIo),e(Qi,KG),e(KG,iIo),e(Qi,dIo),e(Io,cIo),e(Io,py),e(py,fIo),e(py,wme),e(wme,mIo),e(py,gIo),e(Io,hIo),e(Io,dt),M(uy,dt,null),e(dt,pIo),e(dt,Ame),e(Ame,uIo),e(dt,_Io),e(dt,Wi),e(Wi,bIo),e(Wi,yme),e(yme,vIo),e(Wi,FIo),e(Wi,ZG),e(ZG,TIo),e(Wi,MIo),e(dt,EIo),M(i5,dt,null),e(Io,CIo),e(Io,ro),M(_y,ro,null),e(ro,wIo),e(ro,Lme),e(Lme,AIo),e(ro,yIo),e(ro,Ba),e(Ba,LIo),e(Ba,xme),e(xme,xIo),e(Ba,$Io),e(Ba,$me),e($me,kIo),e(Ba,SIo),e(Ba,kme),e(kme,RIo),e(Ba,BIo),e(ro,PIo),e(ro,U),e(U,d5),e(d5,Sme),e(Sme,IIo),e(d5,qIo),e(d5,eO),e(eO,NIo),e(d5,jIo),e(U,DIo),e(U,c5),e(c5,Rme),e(Rme,GIo),e(c5,OIo),e(c5,oO),e(oO,VIo),e(c5,XIo),e(U,zIo),e(U,f5),e(f5,Bme),e(Bme,QIo),e(f5,WIo),e(f5,rO),e(rO,HIo),e(f5,UIo),e(U,JIo),e(U,m5),e(m5,Pme),e(Pme,YIo),e(m5,KIo),e(m5,tO),e(tO,ZIo),e(m5,eqo),e(U,oqo),e(U,g5),e(g5,Ime),e(Ime,rqo),e(g5,tqo),e(g5,aO),e(aO,aqo),e(g5,nqo),e(U,sqo),e(U,h5),e(h5,qme),e(qme,lqo),e(h5,iqo),e(h5,nO),e(nO,dqo),e(h5,cqo),e(U,fqo),e(U,p5),e(p5,Nme),e(Nme,mqo),e(p5,gqo),e(p5,sO),e(sO,hqo),e(p5,pqo),e(U,uqo),e(U,u5),e(u5,jme),e(jme,_qo),e(u5,bqo),e(u5,lO),e(lO,vqo),e(u5,Fqo),e(U,Tqo),e(U,_5),e(_5,Dme),e(Dme,Mqo),e(_5,Eqo),e(_5,iO),e(iO,Cqo),e(_5,wqo),e(U,Aqo),e(U,b5),e(b5,Gme),e(Gme,yqo),e(b5,Lqo),e(b5,dO),e(dO,xqo),e(b5,$qo),e(U,kqo),e(U,v5),e(v5,Ome),e(Ome,Sqo),e(v5,Rqo),e(v5,cO),e(cO,Bqo),e(v5,Pqo),e(U,Iqo),e(U,F5),e(F5,Vme),e(Vme,qqo),e(F5,Nqo),e(F5,fO),e(fO,jqo),e(F5,Dqo),e(U,Gqo),e(U,T5),e(T5,Xme),e(Xme,Oqo),e(T5,Vqo),e(T5,mO),e(mO,Xqo),e(T5,zqo),e(U,Qqo),e(U,M5),e(M5,zme),e(zme,Wqo),e(M5,Hqo),e(M5,gO),e(gO,Uqo),e(M5,Jqo),e(U,Yqo),e(U,E5),e(E5,Qme),e(Qme,Kqo),e(E5,Zqo),e(E5,hO),e(hO,eNo),e(E5,oNo),e(U,rNo),e(U,C5),e(C5,Wme),e(Wme,tNo),e(C5,aNo),e(C5,pO),e(pO,nNo),e(C5,sNo),e(U,lNo),e(U,w5),e(w5,Hme),e(Hme,iNo),e(w5,dNo),e(w5,uO),e(uO,cNo),e(w5,fNo),e(U,mNo),e(U,A5),e(A5,Ume),e(Ume,gNo),e(A5,hNo),e(A5,_O),e(_O,pNo),e(A5,uNo),e(U,_No),e(U,y5),e(y5,Jme),e(Jme,bNo),e(y5,vNo),e(y5,bO),e(bO,FNo),e(y5,TNo),e(U,MNo),e(U,L5),e(L5,Yme),e(Yme,ENo),e(L5,CNo),e(L5,vO),e(vO,wNo),e(L5,ANo),e(U,yNo),e(U,x5),e(x5,Kme),e(Kme,LNo),e(x5,xNo),e(x5,FO),e(FO,$No),e(x5,kNo),e(U,SNo),e(U,$5),e($5,Zme),e(Zme,RNo),e($5,BNo),e($5,TO),e(TO,PNo),e($5,INo),e(U,qNo),e(U,k5),e(k5,ege),e(ege,NNo),e(k5,jNo),e(k5,MO),e(MO,DNo),e(k5,GNo),e(U,ONo),e(U,S5),e(S5,oge),e(oge,VNo),e(S5,XNo),e(S5,EO),e(EO,zNo),e(S5,QNo),e(U,WNo),e(U,R5),e(R5,rge),e(rge,HNo),e(R5,UNo),e(R5,CO),e(CO,JNo),e(R5,YNo),e(U,KNo),e(U,B5),e(B5,tge),e(tge,ZNo),e(B5,ejo),e(B5,wO),e(wO,ojo),e(B5,rjo),e(U,tjo),e(U,P5),e(P5,age),e(age,ajo),e(P5,njo),e(P5,AO),e(AO,sjo),e(P5,ljo),e(U,ijo),e(U,I5),e(I5,nge),e(nge,djo),e(I5,cjo),e(I5,yO),e(yO,fjo),e(I5,mjo),e(U,gjo),e(U,q5),e(q5,sge),e(sge,hjo),e(q5,pjo),e(q5,LO),e(LO,ujo),e(q5,_jo),e(U,bjo),e(U,N5),e(N5,lge),e(lge,vjo),e(N5,Fjo),e(N5,xO),e(xO,Tjo),e(N5,Mjo),e(U,Ejo),e(U,j5),e(j5,ige),e(ige,Cjo),e(j5,wjo),e(j5,$O),e($O,Ajo),e(j5,yjo),e(U,Ljo),e(U,D5),e(D5,dge),e(dge,xjo),e(D5,$jo),e(D5,kO),e(kO,kjo),e(D5,Sjo),e(U,Rjo),e(U,G5),e(G5,cge),e(cge,Bjo),e(G5,Pjo),e(G5,SO),e(SO,Ijo),e(G5,qjo),e(ro,Njo),e(ro,O5),e(O5,jjo),e(O5,fge),e(fge,Djo),e(O5,Gjo),e(O5,mge),e(mge,Ojo),e(ro,Vjo),M(V5,ro,null),b(f,IIe,_),b(f,Hi,_),e(Hi,X5),e(X5,gge),M(by,gge,null),e(Hi,Xjo),e(Hi,hge),e(hge,zjo),b(f,qIe,_),b(f,qo,_),M(vy,qo,null),e(qo,Qjo),e(qo,Ui),e(Ui,Wjo),e(Ui,RO),e(RO,Hjo),e(Ui,Ujo),e(Ui,BO),e(BO,Jjo),e(Ui,Yjo),e(qo,Kjo),e(qo,Fy),e(Fy,Zjo),e(Fy,pge),e(pge,eDo),e(Fy,oDo),e(qo,rDo),e(qo,ct),M(Ty,ct,null),e(ct,tDo),e(ct,uge),e(uge,aDo),e(ct,nDo),e(ct,Ji),e(Ji,sDo),e(Ji,_ge),e(_ge,lDo),e(Ji,iDo),e(Ji,PO),e(PO,dDo),e(Ji,cDo),e(ct,fDo),M(z5,ct,null),e(qo,mDo),e(qo,to),M(My,to,null),e(to,gDo),e(to,bge),e(bge,hDo),e(to,pDo),e(to,Pa),e(Pa,uDo),e(Pa,vge),e(vge,_Do),e(Pa,bDo),e(Pa,Fge),e(Fge,vDo),e(Pa,FDo),e(Pa,Tge),e(Tge,TDo),e(Pa,MDo),e(to,EDo),e(to,O),e(O,Q5),e(Q5,Mge),e(Mge,CDo),e(Q5,wDo),e(Q5,IO),e(IO,ADo),e(Q5,yDo),e(O,LDo),e(O,W5),e(W5,Ege),e(Ege,xDo),e(W5,$Do),e(W5,qO),e(qO,kDo),e(W5,SDo),e(O,RDo),e(O,H5),e(H5,Cge),e(Cge,BDo),e(H5,PDo),e(H5,NO),e(NO,IDo),e(H5,qDo),e(O,NDo),e(O,U5),e(U5,wge),e(wge,jDo),e(U5,DDo),e(U5,jO),e(jO,GDo),e(U5,ODo),e(O,VDo),e(O,J5),e(J5,Age),e(Age,XDo),e(J5,zDo),e(J5,DO),e(DO,QDo),e(J5,WDo),e(O,HDo),e(O,Y5),e(Y5,yge),e(yge,UDo),e(Y5,JDo),e(Y5,GO),e(GO,YDo),e(Y5,KDo),e(O,ZDo),e(O,K5),e(K5,Lge),e(Lge,eGo),e(K5,oGo),e(K5,OO),e(OO,rGo),e(K5,tGo),e(O,aGo),e(O,Z5),e(Z5,xge),e(xge,nGo),e(Z5,sGo),e(Z5,VO),e(VO,lGo),e(Z5,iGo),e(O,dGo),e(O,ev),e(ev,$ge),e($ge,cGo),e(ev,fGo),e(ev,XO),e(XO,mGo),e(ev,gGo),e(O,hGo),e(O,ov),e(ov,kge),e(kge,pGo),e(ov,uGo),e(ov,zO),e(zO,_Go),e(ov,bGo),e(O,vGo),e(O,rv),e(rv,Sge),e(Sge,FGo),e(rv,TGo),e(rv,QO),e(QO,MGo),e(rv,EGo),e(O,CGo),e(O,tv),e(tv,Rge),e(Rge,wGo),e(tv,AGo),e(tv,WO),e(WO,yGo),e(tv,LGo),e(O,xGo),e(O,av),e(av,Bge),e(Bge,$Go),e(av,kGo),e(av,HO),e(HO,SGo),e(av,RGo),e(O,BGo),e(O,nv),e(nv,Pge),e(Pge,PGo),e(nv,IGo),e(nv,UO),e(UO,qGo),e(nv,NGo),e(O,jGo),e(O,sv),e(sv,Ige),e(Ige,DGo),e(sv,GGo),e(sv,JO),e(JO,OGo),e(sv,VGo),e(O,XGo),e(O,lv),e(lv,qge),e(qge,zGo),e(lv,QGo),e(lv,YO),e(YO,WGo),e(lv,HGo),e(O,UGo),e(O,iv),e(iv,Nge),e(Nge,JGo),e(iv,YGo),e(iv,KO),e(KO,KGo),e(iv,ZGo),e(O,eOo),e(O,dv),e(dv,jge),e(jge,oOo),e(dv,rOo),e(dv,ZO),e(ZO,tOo),e(dv,aOo),e(O,nOo),e(O,cv),e(cv,Dge),e(Dge,sOo),e(cv,lOo),e(cv,eV),e(eV,iOo),e(cv,dOo),e(O,cOo),e(O,fv),e(fv,Gge),e(Gge,fOo),e(fv,mOo),e(fv,oV),e(oV,gOo),e(fv,hOo),e(O,pOo),e(O,mv),e(mv,Oge),e(Oge,uOo),e(mv,_Oo),e(mv,rV),e(rV,bOo),e(mv,vOo),e(O,FOo),e(O,gv),e(gv,Vge),e(Vge,TOo),e(gv,MOo),e(gv,tV),e(tV,EOo),e(gv,COo),e(O,wOo),e(O,hv),e(hv,Xge),e(Xge,AOo),e(hv,yOo),e(hv,aV),e(aV,LOo),e(hv,xOo),e(O,$Oo),e(O,pv),e(pv,zge),e(zge,kOo),e(pv,SOo),e(pv,nV),e(nV,ROo),e(pv,BOo),e(O,POo),e(O,uv),e(uv,Qge),e(Qge,IOo),e(uv,qOo),e(uv,sV),e(sV,NOo),e(uv,jOo),e(O,DOo),e(O,_v),e(_v,Wge),e(Wge,GOo),e(_v,OOo),e(_v,lV),e(lV,VOo),e(_v,XOo),e(O,zOo),e(O,bv),e(bv,Hge),e(Hge,QOo),e(bv,WOo),e(bv,iV),e(iV,HOo),e(bv,UOo),e(O,JOo),e(O,vv),e(vv,Uge),e(Uge,YOo),e(vv,KOo),e(vv,dV),e(dV,ZOo),e(vv,eVo),e(O,oVo),e(O,Fv),e(Fv,Jge),e(Jge,rVo),e(Fv,tVo),e(Fv,cV),e(cV,aVo),e(Fv,nVo),e(O,sVo),e(O,Tv),e(Tv,Yge),e(Yge,lVo),e(Tv,iVo),e(Tv,fV),e(fV,dVo),e(Tv,cVo),e(O,fVo),e(O,Mv),e(Mv,Kge),e(Kge,mVo),e(Mv,gVo),e(Mv,mV),e(mV,hVo),e(Mv,pVo),e(O,uVo),e(O,Ev),e(Ev,Zge),e(Zge,_Vo),e(Ev,bVo),e(Ev,gV),e(gV,vVo),e(Ev,FVo),e(O,TVo),e(O,Cv),e(Cv,ehe),e(ehe,MVo),e(Cv,EVo),e(Cv,hV),e(hV,CVo),e(Cv,wVo),e(O,AVo),e(O,wv),e(wv,ohe),e(ohe,yVo),e(wv,LVo),e(wv,pV),e(pV,xVo),e(wv,$Vo),e(O,kVo),e(O,Av),e(Av,rhe),e(rhe,SVo),e(Av,RVo),e(Av,uV),e(uV,BVo),e(Av,PVo),e(O,IVo),e(O,yv),e(yv,the),e(the,qVo),e(yv,NVo),e(yv,_V),e(_V,jVo),e(yv,DVo),e(O,GVo),e(O,Lv),e(Lv,ahe),e(ahe,OVo),e(Lv,VVo),e(Lv,bV),e(bV,XVo),e(Lv,zVo),e(O,QVo),e(O,xv),e(xv,nhe),e(nhe,WVo),e(xv,HVo),e(xv,vV),e(vV,UVo),e(xv,JVo),e(O,YVo),e(O,$v),e($v,she),e(she,KVo),e($v,ZVo),e($v,FV),e(FV,eXo),e($v,oXo),e(to,rXo),e(to,kv),e(kv,tXo),e(kv,lhe),e(lhe,aXo),e(kv,nXo),e(kv,ihe),e(ihe,sXo),e(to,lXo),M(Sv,to,null),b(f,NIe,_),b(f,Yi,_),e(Yi,Rv),e(Rv,dhe),M(Ey,dhe,null),e(Yi,iXo),e(Yi,che),e(che,dXo),b(f,jIe,_),b(f,No,_),M(Cy,No,null),e(No,cXo),e(No,Ki),e(Ki,fXo),e(Ki,TV),e(TV,mXo),e(Ki,gXo),e(Ki,MV),e(MV,hXo),e(Ki,pXo),e(No,uXo),e(No,wy),e(wy,_Xo),e(wy,fhe),e(fhe,bXo),e(wy,vXo),e(No,FXo),e(No,ft),M(Ay,ft,null),e(ft,TXo),e(ft,mhe),e(mhe,MXo),e(ft,EXo),e(ft,Zi),e(Zi,CXo),e(Zi,ghe),e(ghe,wXo),e(Zi,AXo),e(Zi,EV),e(EV,yXo),e(Zi,LXo),e(ft,xXo),M(Bv,ft,null),e(No,$Xo),e(No,ao),M(yy,ao,null),e(ao,kXo),e(ao,hhe),e(hhe,SXo),e(ao,RXo),e(ao,Ia),e(Ia,BXo),e(Ia,phe),e(phe,PXo),e(Ia,IXo),e(Ia,uhe),e(uhe,qXo),e(Ia,NXo),e(Ia,_he),e(_he,jXo),e(Ia,DXo),e(ao,GXo),e(ao,bhe),e(bhe,Pv),e(Pv,vhe),e(vhe,OXo),e(Pv,VXo),e(Pv,CV),e(CV,XXo),e(Pv,zXo),e(ao,QXo),e(ao,Iv),e(Iv,WXo),e(Iv,Fhe),e(Fhe,HXo),e(Iv,UXo),e(Iv,The),e(The,JXo),e(ao,YXo),M(qv,ao,null),b(f,DIe,_),b(f,ed,_),e(ed,Nv),e(Nv,Mhe),M(Ly,Mhe,null),e(ed,KXo),e(ed,Ehe),e(Ehe,ZXo),b(f,GIe,_),b(f,jo,_),M(xy,jo,null),e(jo,ezo),e(jo,od),e(od,ozo),e(od,wV),e(wV,rzo),e(od,tzo),e(od,AV),e(AV,azo),e(od,nzo),e(jo,szo),e(jo,$y),e($y,lzo),e($y,Che),e(Che,izo),e($y,dzo),e(jo,czo),e(jo,mt),M(ky,mt,null),e(mt,fzo),e(mt,whe),e(whe,mzo),e(mt,gzo),e(mt,rd),e(rd,hzo),e(rd,Ahe),e(Ahe,pzo),e(rd,uzo),e(rd,yV),e(yV,_zo),e(rd,bzo),e(mt,vzo),M(jv,mt,null),e(jo,Fzo),e(jo,no),M(Sy,no,null),e(no,Tzo),e(no,yhe),e(yhe,Mzo),e(no,Ezo),e(no,qa),e(qa,Czo),e(qa,Lhe),e(Lhe,wzo),e(qa,Azo),e(qa,xhe),e(xhe,yzo),e(qa,Lzo),e(qa,$he),e($he,xzo),e(qa,$zo),e(no,kzo),e(no,ve),e(ve,Dv),e(Dv,khe),e(khe,Szo),e(Dv,Rzo),e(Dv,LV),e(LV,Bzo),e(Dv,Pzo),e(ve,Izo),e(ve,Gv),e(Gv,She),e(She,qzo),e(Gv,Nzo),e(Gv,xV),e(xV,jzo),e(Gv,Dzo),e(ve,Gzo),e(ve,Ov),e(Ov,Rhe),e(Rhe,Ozo),e(Ov,Vzo),e(Ov,$V),e($V,Xzo),e(Ov,zzo),e(ve,Qzo),e(ve,Rs),e(Rs,Bhe),e(Bhe,Wzo),e(Rs,Hzo),e(Rs,kV),e(kV,Uzo),e(Rs,Jzo),e(Rs,SV),e(SV,Yzo),e(Rs,Kzo),e(ve,Zzo),e(ve,Vv),e(Vv,Phe),e(Phe,eQo),e(Vv,oQo),e(Vv,RV),e(RV,rQo),e(Vv,tQo),e(ve,aQo),e(ve,Xv),e(Xv,Ihe),e(Ihe,nQo),e(Xv,sQo),e(Xv,BV),e(BV,lQo),e(Xv,iQo),e(ve,dQo),e(ve,gt),e(gt,qhe),e(qhe,cQo),e(gt,fQo),e(gt,PV),e(PV,mQo),e(gt,gQo),e(gt,IV),e(IV,hQo),e(gt,pQo),e(gt,qV),e(qV,uQo),e(gt,_Qo),e(ve,bQo),e(ve,zv),e(zv,Nhe),e(Nhe,vQo),e(zv,FQo),e(zv,NV),e(NV,TQo),e(zv,MQo),e(ve,EQo),e(ve,Qv),e(Qv,jhe),e(jhe,CQo),e(Qv,wQo),e(Qv,jV),e(jV,AQo),e(Qv,yQo),e(ve,LQo),e(ve,Wv),e(Wv,Dhe),e(Dhe,xQo),e(Wv,$Qo),e(Wv,DV),e(DV,kQo),e(Wv,SQo),e(ve,RQo),e(ve,Hv),e(Hv,Ghe),e(Ghe,BQo),e(Hv,PQo),e(Hv,GV),e(GV,IQo),e(Hv,qQo),e(ve,NQo),e(ve,Uv),e(Uv,Ohe),e(Ohe,jQo),e(Uv,DQo),e(Uv,OV),e(OV,GQo),e(Uv,OQo),e(ve,VQo),e(ve,Jv),e(Jv,Vhe),e(Vhe,XQo),e(Jv,zQo),e(Jv,VV),e(VV,QQo),e(Jv,WQo),e(ve,HQo),e(ve,Yv),e(Yv,Xhe),e(Xhe,UQo),e(Yv,JQo),e(Yv,XV),e(XV,YQo),e(Yv,KQo),e(no,ZQo),e(no,Kv),e(Kv,eWo),e(Kv,zhe),e(zhe,oWo),e(Kv,rWo),e(Kv,Qhe),e(Qhe,tWo),e(no,aWo),M(Zv,no,null),b(f,OIe,_),b(f,td,_),e(td,eF),e(eF,Whe),M(Ry,Whe,null),e(td,nWo),e(td,Hhe),e(Hhe,sWo),b(f,VIe,_),b(f,Do,_),M(By,Do,null),e(Do,lWo),e(Do,ad),e(ad,iWo),e(ad,zV),e(zV,dWo),e(ad,cWo),e(ad,QV),e(QV,fWo),e(ad,mWo),e(Do,gWo),e(Do,Py),e(Py,hWo),e(Py,Uhe),e(Uhe,pWo),e(Py,uWo),e(Do,_Wo),e(Do,ht),M(Iy,ht,null),e(ht,bWo),e(ht,Jhe),e(Jhe,vWo),e(ht,FWo),e(ht,nd),e(nd,TWo),e(nd,Yhe),e(Yhe,MWo),e(nd,EWo),e(nd,WV),e(WV,CWo),e(nd,wWo),e(ht,AWo),M(oF,ht,null),e(Do,yWo),e(Do,so),M(qy,so,null),e(so,LWo),e(so,Khe),e(Khe,xWo),e(so,$Wo),e(so,Na),e(Na,kWo),e(Na,Zhe),e(Zhe,SWo),e(Na,RWo),e(Na,epe),e(epe,BWo),e(Na,PWo),e(Na,ope),e(ope,IWo),e(Na,qWo),e(so,NWo),e(so,rpe),e(rpe,rF),e(rF,tpe),e(tpe,jWo),e(rF,DWo),e(rF,HV),e(HV,GWo),e(rF,OWo),e(so,VWo),e(so,tF),e(tF,XWo),e(tF,ape),e(ape,zWo),e(tF,QWo),e(tF,npe),e(npe,WWo),e(so,HWo),M(aF,so,null),b(f,XIe,_),b(f,sd,_),e(sd,nF),e(nF,spe),M(Ny,spe,null),e(sd,UWo),e(sd,lpe),e(lpe,JWo),b(f,zIe,_),b(f,Go,_),M(jy,Go,null),e(Go,YWo),e(Go,ld),e(ld,KWo),e(ld,UV),e(UV,ZWo),e(ld,eHo),e(ld,JV),e(JV,oHo),e(ld,rHo),e(Go,tHo),e(Go,Dy),e(Dy,aHo),e(Dy,ipe),e(ipe,nHo),e(Dy,sHo),e(Go,lHo),e(Go,pt),M(Gy,pt,null),e(pt,iHo),e(pt,dpe),e(dpe,dHo),e(pt,cHo),e(pt,id),e(id,fHo),e(id,cpe),e(cpe,mHo),e(id,gHo),e(id,YV),e(YV,hHo),e(id,pHo),e(pt,uHo),M(sF,pt,null),e(Go,_Ho),e(Go,lo),M(Oy,lo,null),e(lo,bHo),e(lo,fpe),e(fpe,vHo),e(lo,FHo),e(lo,ja),e(ja,THo),e(ja,mpe),e(mpe,MHo),e(ja,EHo),e(ja,gpe),e(gpe,CHo),e(ja,wHo),e(ja,hpe),e(hpe,AHo),e(ja,yHo),e(lo,LHo),e(lo,Ne),e(Ne,lF),e(lF,ppe),e(ppe,xHo),e(lF,$Ho),e(lF,KV),e(KV,kHo),e(lF,SHo),e(Ne,RHo),e(Ne,iF),e(iF,upe),e(upe,BHo),e(iF,PHo),e(iF,ZV),e(ZV,IHo),e(iF,qHo),e(Ne,NHo),e(Ne,dF),e(dF,_pe),e(_pe,jHo),e(dF,DHo),e(dF,eX),e(eX,GHo),e(dF,OHo),e(Ne,VHo),e(Ne,cF),e(cF,bpe),e(bpe,XHo),e(cF,zHo),e(cF,oX),e(oX,QHo),e(cF,WHo),e(Ne,HHo),e(Ne,fF),e(fF,vpe),e(vpe,UHo),e(fF,JHo),e(fF,rX),e(rX,YHo),e(fF,KHo),e(Ne,ZHo),e(Ne,mF),e(mF,Fpe),e(Fpe,eUo),e(mF,oUo),e(mF,tX),e(tX,rUo),e(mF,tUo),e(Ne,aUo),e(Ne,gF),e(gF,Tpe),e(Tpe,nUo),e(gF,sUo),e(gF,aX),e(aX,lUo),e(gF,iUo),e(Ne,dUo),e(Ne,hF),e(hF,Mpe),e(Mpe,cUo),e(hF,fUo),e(hF,nX),e(nX,mUo),e(hF,gUo),e(lo,hUo),e(lo,pF),e(pF,pUo),e(pF,Epe),e(Epe,uUo),e(pF,_Uo),e(pF,Cpe),e(Cpe,bUo),e(lo,vUo),M(uF,lo,null),b(f,QIe,_),b(f,dd,_),e(dd,_F),e(_F,wpe),M(Vy,wpe,null),e(dd,FUo),e(dd,Ape),e(Ape,TUo),b(f,WIe,_),b(f,Oo,_),M(Xy,Oo,null),e(Oo,MUo),e(Oo,cd),e(cd,EUo),e(cd,sX),e(sX,CUo),e(cd,wUo),e(cd,lX),e(lX,AUo),e(cd,yUo),e(Oo,LUo),e(Oo,zy),e(zy,xUo),e(zy,ype),e(ype,$Uo),e(zy,kUo),e(Oo,SUo),e(Oo,ut),M(Qy,ut,null),e(ut,RUo),e(ut,Lpe),e(Lpe,BUo),e(ut,PUo),e(ut,fd),e(fd,IUo),e(fd,xpe),e(xpe,qUo),e(fd,NUo),e(fd,iX),e(iX,jUo),e(fd,DUo),e(ut,GUo),M(bF,ut,null),e(Oo,OUo),e(Oo,io),M(Wy,io,null),e(io,VUo),e(io,$pe),e($pe,XUo),e(io,zUo),e(io,Da),e(Da,QUo),e(Da,kpe),e(kpe,WUo),e(Da,HUo),e(Da,Spe),e(Spe,UUo),e(Da,JUo),e(Da,Rpe),e(Rpe,YUo),e(Da,KUo),e(io,ZUo),e(io,Ga),e(Ga,vF),e(vF,Bpe),e(Bpe,eJo),e(vF,oJo),e(vF,dX),e(dX,rJo),e(vF,tJo),e(Ga,aJo),e(Ga,FF),e(FF,Ppe),e(Ppe,nJo),e(FF,sJo),e(FF,cX),e(cX,lJo),e(FF,iJo),e(Ga,dJo),e(Ga,TF),e(TF,Ipe),e(Ipe,cJo),e(TF,fJo),e(TF,fX),e(fX,mJo),e(TF,gJo),e(Ga,hJo),e(Ga,MF),e(MF,qpe),e(qpe,pJo),e(MF,uJo),e(MF,mX),e(mX,_Jo),e(MF,bJo),e(io,vJo),e(io,EF),e(EF,FJo),e(EF,Npe),e(Npe,TJo),e(EF,MJo),e(EF,jpe),e(jpe,EJo),e(io,CJo),M(CF,io,null),b(f,HIe,_),b(f,md,_),e(md,wF),e(wF,Dpe),M(Hy,Dpe,null),e(md,wJo),e(md,Gpe),e(Gpe,AJo),b(f,UIe,_),b(f,Vo,_),M(Uy,Vo,null),e(Vo,yJo),e(Vo,gd),e(gd,LJo),e(gd,gX),e(gX,xJo),e(gd,$Jo),e(gd,hX),e(hX,kJo),e(gd,SJo),e(Vo,RJo),e(Vo,Jy),e(Jy,BJo),e(Jy,Ope),e(Ope,PJo),e(Jy,IJo),e(Vo,qJo),e(Vo,_t),M(Yy,_t,null),e(_t,NJo),e(_t,Vpe),e(Vpe,jJo),e(_t,DJo),e(_t,hd),e(hd,GJo),e(hd,Xpe),e(Xpe,OJo),e(hd,VJo),e(hd,pX),e(pX,XJo),e(hd,zJo),e(_t,QJo),M(AF,_t,null),e(Vo,WJo),e(Vo,co),M(Ky,co,null),e(co,HJo),e(co,zpe),e(zpe,UJo),e(co,JJo),e(co,Oa),e(Oa,YJo),e(Oa,Qpe),e(Qpe,KJo),e(Oa,ZJo),e(Oa,Wpe),e(Wpe,eYo),e(Oa,oYo),e(Oa,Hpe),e(Hpe,rYo),e(Oa,tYo),e(co,aYo),e(co,je),e(je,yF),e(yF,Upe),e(Upe,nYo),e(yF,sYo),e(yF,uX),e(uX,lYo),e(yF,iYo),e(je,dYo),e(je,LF),e(LF,Jpe),e(Jpe,cYo),e(LF,fYo),e(LF,_X),e(_X,mYo),e(LF,gYo),e(je,hYo),e(je,xF),e(xF,Ype),e(Ype,pYo),e(xF,uYo),e(xF,bX),e(bX,_Yo),e(xF,bYo),e(je,vYo),e(je,$F),e($F,Kpe),e(Kpe,FYo),e($F,TYo),e($F,vX),e(vX,MYo),e($F,EYo),e(je,CYo),e(je,kF),e(kF,Zpe),e(Zpe,wYo),e(kF,AYo),e(kF,FX),e(FX,yYo),e(kF,LYo),e(je,xYo),e(je,SF),e(SF,eue),e(eue,$Yo),e(SF,kYo),e(SF,TX),e(TX,SYo),e(SF,RYo),e(je,BYo),e(je,RF),e(RF,oue),e(oue,PYo),e(RF,IYo),e(RF,MX),e(MX,qYo),e(RF,NYo),e(je,jYo),e(je,BF),e(BF,rue),e(rue,DYo),e(BF,GYo),e(BF,EX),e(EX,OYo),e(BF,VYo),e(co,XYo),e(co,PF),e(PF,zYo),e(PF,tue),e(tue,QYo),e(PF,WYo),e(PF,aue),e(aue,HYo),e(co,UYo),M(IF,co,null),b(f,JIe,_),b(f,pd,_),e(pd,qF),e(qF,nue),M(Zy,nue,null),e(pd,JYo),e(pd,sue),e(sue,YYo),b(f,YIe,_),b(f,Xo,_),M(eL,Xo,null),e(Xo,KYo),e(Xo,ud),e(ud,ZYo),e(ud,CX),e(CX,eKo),e(ud,oKo),e(ud,wX),e(wX,rKo),e(ud,tKo),e(Xo,aKo),e(Xo,oL),e(oL,nKo),e(oL,lue),e(lue,sKo),e(oL,lKo),e(Xo,iKo),e(Xo,bt),M(rL,bt,null),e(bt,dKo),e(bt,iue),e(iue,cKo),e(bt,fKo),e(bt,_d),e(_d,mKo),e(_d,due),e(due,gKo),e(_d,hKo),e(_d,AX),e(AX,pKo),e(_d,uKo),e(bt,_Ko),M(NF,bt,null),e(Xo,bKo),e(Xo,fo),M(tL,fo,null),e(fo,vKo),e(fo,cue),e(cue,FKo),e(fo,TKo),e(fo,Va),e(Va,MKo),e(Va,fue),e(fue,EKo),e(Va,CKo),e(Va,mue),e(mue,wKo),e(Va,AKo),e(Va,gue),e(gue,yKo),e(Va,LKo),e(fo,xKo),e(fo,aL),e(aL,jF),e(jF,hue),e(hue,$Ko),e(jF,kKo),e(jF,yX),e(yX,SKo),e(jF,RKo),e(aL,BKo),e(aL,DF),e(DF,pue),e(pue,PKo),e(DF,IKo),e(DF,LX),e(LX,qKo),e(DF,NKo),e(fo,jKo),e(fo,GF),e(GF,DKo),e(GF,uue),e(uue,GKo),e(GF,OKo),e(GF,_ue),e(_ue,VKo),e(fo,XKo),M(OF,fo,null),b(f,KIe,_),b(f,bd,_),e(bd,VF),e(VF,bue),M(nL,bue,null),e(bd,zKo),e(bd,vue),e(vue,QKo),b(f,ZIe,_),b(f,zo,_),M(sL,zo,null),e(zo,WKo),e(zo,vd),e(vd,HKo),e(vd,xX),e(xX,UKo),e(vd,JKo),e(vd,$X),e($X,YKo),e(vd,KKo),e(zo,ZKo),e(zo,lL),e(lL,eZo),e(lL,Fue),e(Fue,oZo),e(lL,rZo),e(zo,tZo),e(zo,vt),M(iL,vt,null),e(vt,aZo),e(vt,Tue),e(Tue,nZo),e(vt,sZo),e(vt,Fd),e(Fd,lZo),e(Fd,Mue),e(Mue,iZo),e(Fd,dZo),e(Fd,kX),e(kX,cZo),e(Fd,fZo),e(vt,mZo),M(XF,vt,null),e(zo,gZo),e(zo,mo),M(dL,mo,null),e(mo,hZo),e(mo,Eue),e(Eue,pZo),e(mo,uZo),e(mo,Xa),e(Xa,_Zo),e(Xa,Cue),e(Cue,bZo),e(Xa,vZo),e(Xa,wue),e(wue,FZo),e(Xa,TZo),e(Xa,Aue),e(Aue,MZo),e(Xa,EZo),e(mo,CZo),e(mo,za),e(za,zF),e(zF,yue),e(yue,wZo),e(zF,AZo),e(zF,SX),e(SX,yZo),e(zF,LZo),e(za,xZo),e(za,QF),e(QF,Lue),e(Lue,$Zo),e(QF,kZo),e(QF,RX),e(RX,SZo),e(QF,RZo),e(za,BZo),e(za,WF),e(WF,xue),e(xue,PZo),e(WF,IZo),e(WF,BX),e(BX,qZo),e(WF,NZo),e(za,jZo),e(za,HF),e(HF,$ue),e($ue,DZo),e(HF,GZo),e(HF,PX),e(PX,OZo),e(HF,VZo),e(mo,XZo),e(mo,UF),e(UF,zZo),e(UF,kue),e(kue,QZo),e(UF,WZo),e(UF,Sue),e(Sue,HZo),e(mo,UZo),M(JF,mo,null),b(f,eqe,_),b(f,Td,_),e(Td,YF),e(YF,Rue),M(cL,Rue,null),e(Td,JZo),e(Td,Bue),e(Bue,YZo),b(f,oqe,_),b(f,Qo,_),M(fL,Qo,null),e(Qo,KZo),e(Qo,Md),e(Md,ZZo),e(Md,IX),e(IX,eer),e(Md,oer),e(Md,qX),e(qX,rer),e(Md,ter),e(Qo,aer),e(Qo,mL),e(mL,ner),e(mL,Pue),e(Pue,ser),e(mL,ler),e(Qo,ier),e(Qo,Ft),M(gL,Ft,null),e(Ft,der),e(Ft,Iue),e(Iue,cer),e(Ft,fer),e(Ft,Ed),e(Ed,mer),e(Ed,que),e(que,ger),e(Ed,her),e(Ed,NX),e(NX,per),e(Ed,uer),e(Ft,_er),M(KF,Ft,null),e(Qo,ber),e(Qo,go),M(hL,go,null),e(go,ver),e(go,Nue),e(Nue,Fer),e(go,Ter),e(go,Qa),e(Qa,Mer),e(Qa,jue),e(jue,Eer),e(Qa,Cer),e(Qa,Due),e(Due,wer),e(Qa,Aer),e(Qa,Gue),e(Gue,yer),e(Qa,Ler),e(go,xer),e(go,Cd),e(Cd,ZF),e(ZF,Oue),e(Oue,$er),e(ZF,ker),e(ZF,jX),e(jX,Ser),e(ZF,Rer),e(Cd,Ber),e(Cd,e0),e(e0,Vue),e(Vue,Per),e(e0,Ier),e(e0,DX),e(DX,qer),e(e0,Ner),e(Cd,jer),e(Cd,o0),e(o0,Xue),e(Xue,Der),e(o0,Ger),e(o0,GX),e(GX,Oer),e(o0,Ver),e(go,Xer),e(go,r0),e(r0,zer),e(r0,zue),e(zue,Qer),e(r0,Wer),e(r0,Que),e(Que,Her),e(go,Uer),M(t0,go,null),b(f,rqe,_),b(f,wd,_),e(wd,a0),e(a0,Wue),M(pL,Wue,null),e(wd,Jer),e(wd,Hue),e(Hue,Yer),b(f,tqe,_),b(f,Wo,_),M(uL,Wo,null),e(Wo,Ker),e(Wo,Ad),e(Ad,Zer),e(Ad,OX),e(OX,eor),e(Ad,oor),e(Ad,VX),e(VX,ror),e(Ad,tor),e(Wo,aor),e(Wo,_L),e(_L,nor),e(_L,Uue),e(Uue,sor),e(_L,lor),e(Wo,ior),e(Wo,Tt),M(bL,Tt,null),e(Tt,dor),e(Tt,Jue),e(Jue,cor),e(Tt,mor),e(Tt,yd),e(yd,gor),e(yd,Yue),e(Yue,hor),e(yd,por),e(yd,XX),e(XX,uor),e(yd,_or),e(Tt,bor),M(n0,Tt,null),e(Wo,vor),e(Wo,ho),M(vL,ho,null),e(ho,For),e(ho,Kue),e(Kue,Tor),e(ho,Mor),e(ho,Wa),e(Wa,Eor),e(Wa,Zue),e(Zue,Cor),e(Wa,wor),e(Wa,e_e),e(e_e,Aor),e(Wa,yor),e(Wa,o_e),e(o_e,Lor),e(Wa,xor),e(ho,$or),e(ho,FL),e(FL,s0),e(s0,r_e),e(r_e,kor),e(s0,Sor),e(s0,zX),e(zX,Ror),e(s0,Bor),e(FL,Por),e(FL,l0),e(l0,t_e),e(t_e,Ior),e(l0,qor),e(l0,QX),e(QX,Nor),e(l0,jor),e(ho,Dor),e(ho,i0),e(i0,Gor),e(i0,a_e),e(a_e,Oor),e(i0,Vor),e(i0,n_e),e(n_e,Xor),e(ho,zor),M(d0,ho,null),b(f,aqe,_),b(f,Ld,_),e(Ld,c0),e(c0,s_e),M(TL,s_e,null),e(Ld,Qor),e(Ld,l_e),e(l_e,Wor),b(f,nqe,_),b(f,Ho,_),M(ML,Ho,null),e(Ho,Hor),e(Ho,xd),e(xd,Uor),e(xd,WX),e(WX,Jor),e(xd,Yor),e(xd,HX),e(HX,Kor),e(xd,Zor),e(Ho,err),e(Ho,EL),e(EL,orr),e(EL,i_e),e(i_e,rrr),e(EL,trr),e(Ho,arr),e(Ho,Mt),M(CL,Mt,null),e(Mt,nrr),e(Mt,d_e),e(d_e,srr),e(Mt,lrr),e(Mt,$d),e($d,irr),e($d,c_e),e(c_e,drr),e($d,crr),e($d,UX),e(UX,frr),e($d,mrr),e(Mt,grr),M(f0,Mt,null),e(Ho,hrr),e(Ho,po),M(wL,po,null),e(po,prr),e(po,f_e),e(f_e,urr),e(po,_rr),e(po,Ha),e(Ha,brr),e(Ha,m_e),e(m_e,vrr),e(Ha,Frr),e(Ha,g_e),e(g_e,Trr),e(Ha,Mrr),e(Ha,h_e),e(h_e,Err),e(Ha,Crr),e(po,wrr),e(po,p_e),e(p_e,m0),e(m0,u_e),e(u_e,Arr),e(m0,yrr),e(m0,JX),e(JX,Lrr),e(m0,xrr),e(po,$rr),e(po,g0),e(g0,krr),e(g0,__e),e(__e,Srr),e(g0,Rrr),e(g0,b_e),e(b_e,Brr),e(po,Prr),M(h0,po,null),b(f,sqe,_),b(f,kd,_),e(kd,p0),e(p0,v_e),M(AL,v_e,null),e(kd,Irr),e(kd,F_e),e(F_e,qrr),b(f,lqe,_),b(f,Uo,_),M(yL,Uo,null),e(Uo,Nrr),e(Uo,Sd),e(Sd,jrr),e(Sd,YX),e(YX,Drr),e(Sd,Grr),e(Sd,KX),e(KX,Orr),e(Sd,Vrr),e(Uo,Xrr),e(Uo,LL),e(LL,zrr),e(LL,T_e),e(T_e,Qrr),e(LL,Wrr),e(Uo,Hrr),e(Uo,Et),M(xL,Et,null),e(Et,Urr),e(Et,M_e),e(M_e,Jrr),e(Et,Yrr),e(Et,Rd),e(Rd,Krr),e(Rd,E_e),e(E_e,Zrr),e(Rd,etr),e(Rd,ZX),e(ZX,otr),e(Rd,rtr),e(Et,ttr),M(u0,Et,null),e(Uo,atr),e(Uo,uo),M($L,uo,null),e(uo,ntr),e(uo,C_e),e(C_e,str),e(uo,ltr),e(uo,Ua),e(Ua,itr),e(Ua,w_e),e(w_e,dtr),e(Ua,ctr),e(Ua,A_e),e(A_e,ftr),e(Ua,mtr),e(Ua,y_e),e(y_e,gtr),e(Ua,htr),e(uo,ptr),e(uo,Ja),e(Ja,_0),e(_0,L_e),e(L_e,utr),e(_0,_tr),e(_0,ez),e(ez,btr),e(_0,vtr),e(Ja,Ftr),e(Ja,b0),e(b0,x_e),e(x_e,Ttr),e(b0,Mtr),e(b0,oz),e(oz,Etr),e(b0,Ctr),e(Ja,wtr),e(Ja,v0),e(v0,$_e),e($_e,Atr),e(v0,ytr),e(v0,rz),e(rz,Ltr),e(v0,xtr),e(Ja,$tr),e(Ja,F0),e(F0,k_e),e(k_e,ktr),e(F0,Str),e(F0,tz),e(tz,Rtr),e(F0,Btr),e(uo,Ptr),e(uo,T0),e(T0,Itr),e(T0,S_e),e(S_e,qtr),e(T0,Ntr),e(T0,R_e),e(R_e,jtr),e(uo,Dtr),M(M0,uo,null),b(f,iqe,_),b(f,Bd,_),e(Bd,E0),e(E0,B_e),M(kL,B_e,null),e(Bd,Gtr),e(Bd,P_e),e(P_e,Otr),b(f,dqe,_),b(f,Jo,_),M(SL,Jo,null),e(Jo,Vtr),e(Jo,Pd),e(Pd,Xtr),e(Pd,az),e(az,ztr),e(Pd,Qtr),e(Pd,nz),e(nz,Wtr),e(Pd,Htr),e(Jo,Utr),e(Jo,RL),e(RL,Jtr),e(RL,I_e),e(I_e,Ytr),e(RL,Ktr),e(Jo,Ztr),e(Jo,Ct),M(BL,Ct,null),e(Ct,ear),e(Ct,q_e),e(q_e,oar),e(Ct,rar),e(Ct,Id),e(Id,tar),e(Id,N_e),e(N_e,aar),e(Id,nar),e(Id,sz),e(sz,sar),e(Id,lar),e(Ct,iar),M(C0,Ct,null),e(Jo,dar),e(Jo,_o),M(PL,_o,null),e(_o,car),e(_o,j_e),e(j_e,far),e(_o,mar),e(_o,Ya),e(Ya,gar),e(Ya,D_e),e(D_e,har),e(Ya,par),e(Ya,G_e),e(G_e,uar),e(Ya,_ar),e(Ya,O_e),e(O_e,bar),e(Ya,Far),e(_o,Tar),e(_o,V_e),e(V_e,w0),e(w0,X_e),e(X_e,Mar),e(w0,Ear),e(w0,lz),e(lz,Car),e(w0,war),e(_o,Aar),e(_o,A0),e(A0,yar),e(A0,z_e),e(z_e,Lar),e(A0,xar),e(A0,Q_e),e(Q_e,$ar),e(_o,kar),M(y0,_o,null),b(f,cqe,_),b(f,qd,_),e(qd,L0),e(L0,W_e),M(IL,W_e,null),e(qd,Sar),e(qd,H_e),e(H_e,Rar),b(f,fqe,_),b(f,Yo,_),M(qL,Yo,null),e(Yo,Bar),e(Yo,Nd),e(Nd,Par),e(Nd,iz),e(iz,Iar),e(Nd,qar),e(Nd,dz),e(dz,Nar),e(Nd,jar),e(Yo,Dar),e(Yo,NL),e(NL,Gar),e(NL,U_e),e(U_e,Oar),e(NL,Var),e(Yo,Xar),e(Yo,wt),M(jL,wt,null),e(wt,zar),e(wt,J_e),e(J_e,Qar),e(wt,War),e(wt,jd),e(jd,Har),e(jd,Y_e),e(Y_e,Uar),e(jd,Jar),e(jd,cz),e(cz,Yar),e(jd,Kar),e(wt,Zar),M(x0,wt,null),e(Yo,enr),e(Yo,wr),M(DL,wr,null),e(wr,onr),e(wr,K_e),e(K_e,rnr),e(wr,tnr),e(wr,Ka),e(Ka,anr),e(Ka,Z_e),e(Z_e,nnr),e(Ka,snr),e(Ka,e2e),e(e2e,lnr),e(Ka,inr),e(Ka,o2e),e(o2e,dnr),e(Ka,cnr),e(wr,fnr),e(wr,j),e(j,$0),e($0,r2e),e(r2e,mnr),e($0,gnr),e($0,fz),e(fz,hnr),e($0,pnr),e(j,unr),e(j,k0),e(k0,t2e),e(t2e,_nr),e(k0,bnr),e(k0,mz),e(mz,vnr),e(k0,Fnr),e(j,Tnr),e(j,S0),e(S0,a2e),e(a2e,Mnr),e(S0,Enr),e(S0,gz),e(gz,Cnr),e(S0,wnr),e(j,Anr),e(j,R0),e(R0,n2e),e(n2e,ynr),e(R0,Lnr),e(R0,hz),e(hz,xnr),e(R0,$nr),e(j,knr),e(j,B0),e(B0,s2e),e(s2e,Snr),e(B0,Rnr),e(B0,pz),e(pz,Bnr),e(B0,Pnr),e(j,Inr),e(j,P0),e(P0,l2e),e(l2e,qnr),e(P0,Nnr),e(P0,uz),e(uz,jnr),e(P0,Dnr),e(j,Gnr),e(j,I0),e(I0,i2e),e(i2e,Onr),e(I0,Vnr),e(I0,_z),e(_z,Xnr),e(I0,znr),e(j,Qnr),e(j,q0),e(q0,d2e),e(d2e,Wnr),e(q0,Hnr),e(q0,bz),e(bz,Unr),e(q0,Jnr),e(j,Ynr),e(j,N0),e(N0,c2e),e(c2e,Knr),e(N0,Znr),e(N0,vz),e(vz,esr),e(N0,osr),e(j,rsr),e(j,j0),e(j0,f2e),e(f2e,tsr),e(j0,asr),e(j0,Fz),e(Fz,nsr),e(j0,ssr),e(j,lsr),e(j,D0),e(D0,m2e),e(m2e,isr),e(D0,dsr),e(D0,Tz),e(Tz,csr),e(D0,fsr),e(j,msr),e(j,G0),e(G0,g2e),e(g2e,gsr),e(G0,hsr),e(G0,Mz),e(Mz,psr),e(G0,usr),e(j,_sr),e(j,O0),e(O0,h2e),e(h2e,bsr),e(O0,vsr),e(O0,Ez),e(Ez,Fsr),e(O0,Tsr),e(j,Msr),e(j,V0),e(V0,p2e),e(p2e,Esr),e(V0,Csr),e(V0,Cz),e(Cz,wsr),e(V0,Asr),e(j,ysr),e(j,X0),e(X0,u2e),e(u2e,Lsr),e(X0,xsr),e(X0,wz),e(wz,$sr),e(X0,ksr),e(j,Ssr),e(j,z0),e(z0,_2e),e(_2e,Rsr),e(z0,Bsr),e(z0,Az),e(Az,Psr),e(z0,Isr),e(j,qsr),e(j,Q0),e(Q0,b2e),e(b2e,Nsr),e(Q0,jsr),e(Q0,yz),e(yz,Dsr),e(Q0,Gsr),e(j,Osr),e(j,Bs),e(Bs,v2e),e(v2e,Vsr),e(Bs,Xsr),e(Bs,Lz),e(Lz,zsr),e(Bs,Qsr),e(Bs,xz),e(xz,Wsr),e(Bs,Hsr),e(j,Usr),e(j,W0),e(W0,F2e),e(F2e,Jsr),e(W0,Ysr),e(W0,$z),e($z,Ksr),e(W0,Zsr),e(j,elr),e(j,H0),e(H0,T2e),e(T2e,olr),e(H0,rlr),e(H0,kz),e(kz,tlr),e(H0,alr),e(j,nlr),e(j,U0),e(U0,M2e),e(M2e,slr),e(U0,llr),e(U0,Sz),e(Sz,ilr),e(U0,dlr),e(j,clr),e(j,J0),e(J0,E2e),e(E2e,flr),e(J0,mlr),e(J0,Rz),e(Rz,glr),e(J0,hlr),e(j,plr),e(j,Y0),e(Y0,C2e),e(C2e,ulr),e(Y0,_lr),e(Y0,Bz),e(Bz,blr),e(Y0,vlr),e(j,Flr),e(j,K0),e(K0,w2e),e(w2e,Tlr),e(K0,Mlr),e(K0,Pz),e(Pz,Elr),e(K0,Clr),e(j,wlr),e(j,Z0),e(Z0,A2e),e(A2e,Alr),e(Z0,ylr),e(Z0,Iz),e(Iz,Llr),e(Z0,xlr),e(j,$lr),e(j,eT),e(eT,y2e),e(y2e,klr),e(eT,Slr),e(eT,qz),e(qz,Rlr),e(eT,Blr),e(j,Plr),e(j,oT),e(oT,L2e),e(L2e,Ilr),e(oT,qlr),e(oT,Nz),e(Nz,Nlr),e(oT,jlr),e(j,Dlr),e(j,rT),e(rT,x2e),e(x2e,Glr),e(rT,Olr),e(rT,jz),e(jz,Vlr),e(rT,Xlr),e(j,zlr),e(j,tT),e(tT,$2e),e($2e,Qlr),e(tT,Wlr),e(tT,Dz),e(Dz,Hlr),e(tT,Ulr),e(j,Jlr),e(j,aT),e(aT,k2e),e(k2e,Ylr),e(aT,Klr),e(aT,Gz),e(Gz,Zlr),e(aT,eir),e(j,oir),e(j,nT),e(nT,S2e),e(S2e,rir),e(nT,tir),e(nT,Oz),e(Oz,air),e(nT,nir),e(j,sir),e(j,sT),e(sT,R2e),e(R2e,lir),e(sT,iir),e(sT,Vz),e(Vz,dir),e(sT,cir),e(j,fir),e(j,lT),e(lT,B2e),e(B2e,mir),e(lT,gir),e(lT,Xz),e(Xz,hir),e(lT,pir),e(j,uir),e(j,iT),e(iT,P2e),e(P2e,_ir),e(iT,bir),e(iT,zz),e(zz,vir),e(iT,Fir),e(j,Tir),e(j,dT),e(dT,I2e),e(I2e,Mir),e(dT,Eir),e(dT,Qz),e(Qz,Cir),e(dT,wir),e(j,Air),e(j,cT),e(cT,q2e),e(q2e,yir),e(cT,Lir),e(cT,Wz),e(Wz,xir),e(cT,$ir),e(j,kir),e(j,fT),e(fT,N2e),e(N2e,Sir),e(fT,Rir),e(fT,Hz),e(Hz,Bir),e(fT,Pir),e(j,Iir),e(j,mT),e(mT,j2e),e(j2e,qir),e(mT,Nir),e(mT,Uz),e(Uz,jir),e(mT,Dir),e(j,Gir),e(j,gT),e(gT,D2e),e(D2e,Oir),e(gT,Vir),e(gT,Jz),e(Jz,Xir),e(gT,zir),e(j,Qir),e(j,hT),e(hT,G2e),e(G2e,Wir),e(hT,Hir),e(hT,Yz),e(Yz,Uir),e(hT,Jir),e(j,Yir),e(j,pT),e(pT,O2e),e(O2e,Kir),e(pT,Zir),e(pT,Kz),e(Kz,edr),e(pT,odr),e(j,rdr),e(j,uT),e(uT,V2e),e(V2e,tdr),e(uT,adr),e(uT,Zz),e(Zz,ndr),e(uT,sdr),e(j,ldr),e(j,_T),e(_T,X2e),e(X2e,idr),e(_T,ddr),e(_T,eQ),e(eQ,cdr),e(_T,fdr),e(j,mdr),e(j,bT),e(bT,z2e),e(z2e,gdr),e(bT,hdr),e(bT,oQ),e(oQ,pdr),e(bT,udr),e(j,_dr),e(j,vT),e(vT,Q2e),e(Q2e,bdr),e(vT,vdr),e(vT,rQ),e(rQ,Fdr),e(vT,Tdr),e(wr,Mdr),M(FT,wr,null),b(f,mqe,_),b(f,Dd,_),e(Dd,TT),e(TT,W2e),M(GL,W2e,null),e(Dd,Edr),e(Dd,H2e),e(H2e,Cdr),b(f,gqe,_),b(f,Ko,_),M(OL,Ko,null),e(Ko,wdr),e(Ko,Gd),e(Gd,Adr),e(Gd,tQ),e(tQ,ydr),e(Gd,Ldr),e(Gd,aQ),e(aQ,xdr),e(Gd,$dr),e(Ko,kdr),e(Ko,VL),e(VL,Sdr),e(VL,U2e),e(U2e,Rdr),e(VL,Bdr),e(Ko,Pdr),e(Ko,At),M(XL,At,null),e(At,Idr),e(At,J2e),e(J2e,qdr),e(At,Ndr),e(At,Od),e(Od,jdr),e(Od,Y2e),e(Y2e,Ddr),e(Od,Gdr),e(Od,nQ),e(nQ,Odr),e(Od,Vdr),e(At,Xdr),M(MT,At,null),e(Ko,zdr),e(Ko,Ar),M(zL,Ar,null),e(Ar,Qdr),e(Ar,K2e),e(K2e,Wdr),e(Ar,Hdr),e(Ar,Za),e(Za,Udr),e(Za,Z2e),e(Z2e,Jdr),e(Za,Ydr),e(Za,e1e),e(e1e,Kdr),e(Za,Zdr),e(Za,o1e),e(o1e,ecr),e(Za,ocr),e(Ar,rcr),e(Ar,se),e(se,ET),e(ET,r1e),e(r1e,tcr),e(ET,acr),e(ET,sQ),e(sQ,ncr),e(ET,scr),e(se,lcr),e(se,CT),e(CT,t1e),e(t1e,icr),e(CT,dcr),e(CT,lQ),e(lQ,ccr),e(CT,fcr),e(se,mcr),e(se,wT),e(wT,a1e),e(a1e,gcr),e(wT,hcr),e(wT,iQ),e(iQ,pcr),e(wT,ucr),e(se,_cr),e(se,AT),e(AT,n1e),e(n1e,bcr),e(AT,vcr),e(AT,dQ),e(dQ,Fcr),e(AT,Tcr),e(se,Mcr),e(se,yT),e(yT,s1e),e(s1e,Ecr),e(yT,Ccr),e(yT,cQ),e(cQ,wcr),e(yT,Acr),e(se,ycr),e(se,LT),e(LT,l1e),e(l1e,Lcr),e(LT,xcr),e(LT,fQ),e(fQ,$cr),e(LT,kcr),e(se,Scr),e(se,xT),e(xT,i1e),e(i1e,Rcr),e(xT,Bcr),e(xT,mQ),e(mQ,Pcr),e(xT,Icr),e(se,qcr),e(se,$T),e($T,d1e),e(d1e,Ncr),e($T,jcr),e($T,gQ),e(gQ,Dcr),e($T,Gcr),e(se,Ocr),e(se,kT),e(kT,c1e),e(c1e,Vcr),e(kT,Xcr),e(kT,hQ),e(hQ,zcr),e(kT,Qcr),e(se,Wcr),e(se,ST),e(ST,f1e),e(f1e,Hcr),e(ST,Ucr),e(ST,pQ),e(pQ,Jcr),e(ST,Ycr),e(se,Kcr),e(se,RT),e(RT,m1e),e(m1e,Zcr),e(RT,efr),e(RT,uQ),e(uQ,ofr),e(RT,rfr),e(se,tfr),e(se,BT),e(BT,g1e),e(g1e,afr),e(BT,nfr),e(BT,_Q),e(_Q,sfr),e(BT,lfr),e(se,ifr),e(se,PT),e(PT,h1e),e(h1e,dfr),e(PT,cfr),e(PT,bQ),e(bQ,ffr),e(PT,mfr),e(se,gfr),e(se,IT),e(IT,p1e),e(p1e,hfr),e(IT,pfr),e(IT,vQ),e(vQ,ufr),e(IT,_fr),e(se,bfr),e(se,qT),e(qT,u1e),e(u1e,vfr),e(qT,Ffr),e(qT,FQ),e(FQ,Tfr),e(qT,Mfr),e(se,Efr),e(se,NT),e(NT,_1e),e(_1e,Cfr),e(NT,wfr),e(NT,TQ),e(TQ,Afr),e(NT,yfr),e(se,Lfr),e(se,jT),e(jT,b1e),e(b1e,xfr),e(jT,$fr),e(jT,MQ),e(MQ,kfr),e(jT,Sfr),e(se,Rfr),e(se,DT),e(DT,v1e),e(v1e,Bfr),e(DT,Pfr),e(DT,EQ),e(EQ,Ifr),e(DT,qfr),e(se,Nfr),e(se,GT),e(GT,F1e),e(F1e,jfr),e(GT,Dfr),e(GT,CQ),e(CQ,Gfr),e(GT,Ofr),e(se,Vfr),e(se,OT),e(OT,T1e),e(T1e,Xfr),e(OT,zfr),e(OT,wQ),e(wQ,Qfr),e(OT,Wfr),e(se,Hfr),e(se,VT),e(VT,M1e),e(M1e,Ufr),e(VT,Jfr),e(VT,AQ),e(AQ,Yfr),e(VT,Kfr),e(se,Zfr),e(se,XT),e(XT,E1e),e(E1e,emr),e(XT,omr),e(XT,yQ),e(yQ,rmr),e(XT,tmr),e(se,amr),e(se,zT),e(zT,C1e),e(C1e,nmr),e(zT,smr),e(zT,LQ),e(LQ,lmr),e(zT,imr),e(Ar,dmr),M(QT,Ar,null),b(f,hqe,_),b(f,Vd,_),e(Vd,WT),e(WT,w1e),M(QL,w1e,null),e(Vd,cmr),e(Vd,A1e),e(A1e,fmr),b(f,pqe,_),b(f,Zo,_),M(WL,Zo,null),e(Zo,mmr),e(Zo,Xd),e(Xd,gmr),e(Xd,xQ),e(xQ,hmr),e(Xd,pmr),e(Xd,$Q),e($Q,umr),e(Xd,_mr),e(Zo,bmr),e(Zo,HL),e(HL,vmr),e(HL,y1e),e(y1e,Fmr),e(HL,Tmr),e(Zo,Mmr),e(Zo,yt),M(UL,yt,null),e(yt,Emr),e(yt,L1e),e(L1e,Cmr),e(yt,wmr),e(yt,zd),e(zd,Amr),e(zd,x1e),e(x1e,ymr),e(zd,Lmr),e(zd,kQ),e(kQ,xmr),e(zd,$mr),e(yt,kmr),M(HT,yt,null),e(Zo,Smr),e(Zo,yr),M(JL,yr,null),e(yr,Rmr),e(yr,$1e),e($1e,Bmr),e(yr,Pmr),e(yr,en),e(en,Imr),e(en,k1e),e(k1e,qmr),e(en,Nmr),e(en,S1e),e(S1e,jmr),e(en,Dmr),e(en,R1e),e(R1e,Gmr),e(en,Omr),e(yr,Vmr),e(yr,Me),e(Me,UT),e(UT,B1e),e(B1e,Xmr),e(UT,zmr),e(UT,SQ),e(SQ,Qmr),e(UT,Wmr),e(Me,Hmr),e(Me,JT),e(JT,P1e),e(P1e,Umr),e(JT,Jmr),e(JT,RQ),e(RQ,Ymr),e(JT,Kmr),e(Me,Zmr),e(Me,YT),e(YT,I1e),e(I1e,egr),e(YT,ogr),e(YT,BQ),e(BQ,rgr),e(YT,tgr),e(Me,agr),e(Me,KT),e(KT,q1e),e(q1e,ngr),e(KT,sgr),e(KT,PQ),e(PQ,lgr),e(KT,igr),e(Me,dgr),e(Me,ZT),e(ZT,N1e),e(N1e,cgr),e(ZT,fgr),e(ZT,IQ),e(IQ,mgr),e(ZT,ggr),e(Me,hgr),e(Me,e7),e(e7,j1e),e(j1e,pgr),e(e7,ugr),e(e7,qQ),e(qQ,_gr),e(e7,bgr),e(Me,vgr),e(Me,o7),e(o7,D1e),e(D1e,Fgr),e(o7,Tgr),e(o7,NQ),e(NQ,Mgr),e(o7,Egr),e(Me,Cgr),e(Me,r7),e(r7,G1e),e(G1e,wgr),e(r7,Agr),e(r7,jQ),e(jQ,ygr),e(r7,Lgr),e(Me,xgr),e(Me,t7),e(t7,O1e),e(O1e,$gr),e(t7,kgr),e(t7,DQ),e(DQ,Sgr),e(t7,Rgr),e(Me,Bgr),e(Me,a7),e(a7,V1e),e(V1e,Pgr),e(a7,Igr),e(a7,GQ),e(GQ,qgr),e(a7,Ngr),e(Me,jgr),e(Me,n7),e(n7,X1e),e(X1e,Dgr),e(n7,Ggr),e(n7,OQ),e(OQ,Ogr),e(n7,Vgr),e(Me,Xgr),e(Me,s7),e(s7,z1e),e(z1e,zgr),e(s7,Qgr),e(s7,VQ),e(VQ,Wgr),e(s7,Hgr),e(yr,Ugr),M(l7,yr,null),b(f,uqe,_),b(f,Qd,_),e(Qd,i7),e(i7,Q1e),M(YL,Q1e,null),e(Qd,Jgr),e(Qd,W1e),e(W1e,Ygr),b(f,_qe,_),b(f,er,_),M(KL,er,null),e(er,Kgr),e(er,Wd),e(Wd,Zgr),e(Wd,XQ),e(XQ,ehr),e(Wd,ohr),e(Wd,zQ),e(zQ,rhr),e(Wd,thr),e(er,ahr),e(er,ZL),e(ZL,nhr),e(ZL,H1e),e(H1e,shr),e(ZL,lhr),e(er,ihr),e(er,Lt),M(e8,Lt,null),e(Lt,dhr),e(Lt,U1e),e(U1e,chr),e(Lt,fhr),e(Lt,Hd),e(Hd,mhr),e(Hd,J1e),e(J1e,ghr),e(Hd,hhr),e(Hd,QQ),e(QQ,phr),e(Hd,uhr),e(Lt,_hr),M(d7,Lt,null),e(er,bhr),e(er,Lr),M(o8,Lr,null),e(Lr,vhr),e(Lr,Y1e),e(Y1e,Fhr),e(Lr,Thr),e(Lr,on),e(on,Mhr),e(on,K1e),e(K1e,Ehr),e(on,Chr),e(on,Z1e),e(Z1e,whr),e(on,Ahr),e(on,ebe),e(ebe,yhr),e(on,Lhr),e(Lr,xhr),e(Lr,Ud),e(Ud,c7),e(c7,obe),e(obe,$hr),e(c7,khr),e(c7,WQ),e(WQ,Shr),e(c7,Rhr),e(Ud,Bhr),e(Ud,f7),e(f7,rbe),e(rbe,Phr),e(f7,Ihr),e(f7,HQ),e(HQ,qhr),e(f7,Nhr),e(Ud,jhr),e(Ud,m7),e(m7,tbe),e(tbe,Dhr),e(m7,Ghr),e(m7,UQ),e(UQ,Ohr),e(m7,Vhr),e(Lr,Xhr),M(g7,Lr,null),b(f,bqe,_),b(f,Jd,_),e(Jd,h7),e(h7,abe),M(r8,abe,null),e(Jd,zhr),e(Jd,nbe),e(nbe,Qhr),b(f,vqe,_),b(f,or,_),M(t8,or,null),e(or,Whr),e(or,Yd),e(Yd,Hhr),e(Yd,JQ),e(JQ,Uhr),e(Yd,Jhr),e(Yd,YQ),e(YQ,Yhr),e(Yd,Khr),e(or,Zhr),e(or,a8),e(a8,epr),e(a8,sbe),e(sbe,opr),e(a8,rpr),e(or,tpr),e(or,xt),M(n8,xt,null),e(xt,apr),e(xt,lbe),e(lbe,npr),e(xt,spr),e(xt,Kd),e(Kd,lpr),e(Kd,ibe),e(ibe,ipr),e(Kd,dpr),e(Kd,KQ),e(KQ,cpr),e(Kd,fpr),e(xt,mpr),M(p7,xt,null),e(or,gpr),e(or,xr),M(s8,xr,null),e(xr,hpr),e(xr,dbe),e(dbe,ppr),e(xr,upr),e(xr,rn),e(rn,_pr),e(rn,cbe),e(cbe,bpr),e(rn,vpr),e(rn,fbe),e(fbe,Fpr),e(rn,Tpr),e(rn,mbe),e(mbe,Mpr),e(rn,Epr),e(xr,Cpr),e(xr,ie),e(ie,u7),e(u7,gbe),e(gbe,wpr),e(u7,Apr),e(u7,ZQ),e(ZQ,ypr),e(u7,Lpr),e(ie,xpr),e(ie,_7),e(_7,hbe),e(hbe,$pr),e(_7,kpr),e(_7,eW),e(eW,Spr),e(_7,Rpr),e(ie,Bpr),e(ie,b7),e(b7,pbe),e(pbe,Ppr),e(b7,Ipr),e(b7,oW),e(oW,qpr),e(b7,Npr),e(ie,jpr),e(ie,v7),e(v7,ube),e(ube,Dpr),e(v7,Gpr),e(v7,rW),e(rW,Opr),e(v7,Vpr),e(ie,Xpr),e(ie,F7),e(F7,_be),e(_be,zpr),e(F7,Qpr),e(F7,tW),e(tW,Wpr),e(F7,Hpr),e(ie,Upr),e(ie,T7),e(T7,bbe),e(bbe,Jpr),e(T7,Ypr),e(T7,aW),e(aW,Kpr),e(T7,Zpr),e(ie,eur),e(ie,M7),e(M7,vbe),e(vbe,our),e(M7,rur),e(M7,nW),e(nW,tur),e(M7,aur),e(ie,nur),e(ie,E7),e(E7,Fbe),e(Fbe,sur),e(E7,lur),e(E7,sW),e(sW,iur),e(E7,dur),e(ie,cur),e(ie,C7),e(C7,Tbe),e(Tbe,fur),e(C7,mur),e(C7,lW),e(lW,gur),e(C7,hur),e(ie,pur),e(ie,w7),e(w7,Mbe),e(Mbe,uur),e(w7,_ur),e(w7,iW),e(iW,bur),e(w7,vur),e(ie,Fur),e(ie,A7),e(A7,Ebe),e(Ebe,Tur),e(A7,Mur),e(A7,dW),e(dW,Eur),e(A7,Cur),e(ie,wur),e(ie,y7),e(y7,Cbe),e(Cbe,Aur),e(y7,yur),e(y7,cW),e(cW,Lur),e(y7,xur),e(ie,$ur),e(ie,L7),e(L7,wbe),e(wbe,kur),e(L7,Sur),e(L7,fW),e(fW,Rur),e(L7,Bur),e(ie,Pur),e(ie,x7),e(x7,Abe),e(Abe,Iur),e(x7,qur),e(x7,mW),e(mW,Nur),e(x7,jur),e(ie,Dur),e(ie,$7),e($7,ybe),e(ybe,Gur),e($7,Our),e($7,gW),e(gW,Vur),e($7,Xur),e(ie,zur),e(ie,k7),e(k7,Lbe),e(Lbe,Qur),e(k7,Wur),e(k7,hW),e(hW,Hur),e(k7,Uur),e(ie,Jur),e(ie,S7),e(S7,xbe),e(xbe,Yur),e(S7,Kur),e(S7,pW),e(pW,Zur),e(S7,e_r),e(ie,o_r),e(ie,R7),e(R7,$be),e($be,r_r),e(R7,t_r),e(R7,uW),e(uW,a_r),e(R7,n_r),e(ie,s_r),e(ie,B7),e(B7,kbe),e(kbe,l_r),e(B7,i_r),e(B7,_W),e(_W,d_r),e(B7,c_r),e(ie,f_r),e(ie,P7),e(P7,Sbe),e(Sbe,m_r),e(P7,g_r),e(P7,bW),e(bW,h_r),e(P7,p_r),e(xr,u_r),M(I7,xr,null),b(f,Fqe,_),b(f,Zd,_),e(Zd,q7),e(q7,Rbe),M(l8,Rbe,null),e(Zd,__r),e(Zd,Bbe),e(Bbe,b_r),b(f,Tqe,_),b(f,rr,_),M(i8,rr,null),e(rr,v_r),e(rr,ec),e(ec,F_r),e(ec,vW),e(vW,T_r),e(ec,M_r),e(ec,FW),e(FW,E_r),e(ec,C_r),e(rr,w_r),e(rr,d8),e(d8,A_r),e(d8,Pbe),e(Pbe,y_r),e(d8,L_r),e(rr,x_r),e(rr,$t),M(c8,$t,null),e($t,$_r),e($t,Ibe),e(Ibe,k_r),e($t,S_r),e($t,oc),e(oc,R_r),e(oc,qbe),e(qbe,B_r),e(oc,P_r),e(oc,TW),e(TW,I_r),e(oc,q_r),e($t,N_r),M(N7,$t,null),e(rr,j_r),e(rr,$r),M(f8,$r,null),e($r,D_r),e($r,Nbe),e(Nbe,G_r),e($r,O_r),e($r,tn),e(tn,V_r),e(tn,jbe),e(jbe,X_r),e(tn,z_r),e(tn,Dbe),e(Dbe,Q_r),e(tn,W_r),e(tn,Gbe),e(Gbe,H_r),e(tn,U_r),e($r,J_r),e($r,ye),e(ye,j7),e(j7,Obe),e(Obe,Y_r),e(j7,K_r),e(j7,MW),e(MW,Z_r),e(j7,e2r),e(ye,o2r),e(ye,D7),e(D7,Vbe),e(Vbe,r2r),e(D7,t2r),e(D7,EW),e(EW,a2r),e(D7,n2r),e(ye,s2r),e(ye,G7),e(G7,Xbe),e(Xbe,l2r),e(G7,i2r),e(G7,CW),e(CW,d2r),e(G7,c2r),e(ye,f2r),e(ye,O7),e(O7,zbe),e(zbe,m2r),e(O7,g2r),e(O7,wW),e(wW,h2r),e(O7,p2r),e(ye,u2r),e(ye,V7),e(V7,Qbe),e(Qbe,_2r),e(V7,b2r),e(V7,AW),e(AW,v2r),e(V7,F2r),e(ye,T2r),e(ye,X7),e(X7,Wbe),e(Wbe,M2r),e(X7,E2r),e(X7,yW),e(yW,C2r),e(X7,w2r),e(ye,A2r),e(ye,z7),e(z7,Hbe),e(Hbe,y2r),e(z7,L2r),e(z7,LW),e(LW,x2r),e(z7,$2r),e(ye,k2r),e(ye,Q7),e(Q7,Ube),e(Ube,S2r),e(Q7,R2r),e(Q7,xW),e(xW,B2r),e(Q7,P2r),e(ye,I2r),e(ye,W7),e(W7,Jbe),e(Jbe,q2r),e(W7,N2r),e(W7,$W),e($W,j2r),e(W7,D2r),e(ye,G2r),e(ye,H7),e(H7,Ybe),e(Ybe,O2r),e(H7,V2r),e(H7,kW),e(kW,X2r),e(H7,z2r),e($r,Q2r),M(U7,$r,null),b(f,Mqe,_),b(f,rc,_),e(rc,J7),e(J7,Kbe),M(m8,Kbe,null),e(rc,W2r),e(rc,Zbe),e(Zbe,H2r),b(f,Eqe,_),b(f,tr,_),M(g8,tr,null),e(tr,U2r),e(tr,tc),e(tc,J2r),e(tc,SW),e(SW,Y2r),e(tc,K2r),e(tc,RW),e(RW,Z2r),e(tc,e1r),e(tr,o1r),e(tr,h8),e(h8,r1r),e(h8,e5e),e(e5e,t1r),e(h8,a1r),e(tr,n1r),e(tr,kt),M(p8,kt,null),e(kt,s1r),e(kt,o5e),e(o5e,l1r),e(kt,i1r),e(kt,ac),e(ac,d1r),e(ac,r5e),e(r5e,c1r),e(ac,f1r),e(ac,BW),e(BW,m1r),e(ac,g1r),e(kt,h1r),M(Y7,kt,null),e(tr,p1r),e(tr,kr),M(u8,kr,null),e(kr,u1r),e(kr,t5e),e(t5e,_1r),e(kr,b1r),e(kr,an),e(an,v1r),e(an,a5e),e(a5e,F1r),e(an,T1r),e(an,n5e),e(n5e,M1r),e(an,E1r),e(an,s5e),e(s5e,C1r),e(an,w1r),e(kr,A1r),e(kr,ee),e(ee,K7),e(K7,l5e),e(l5e,y1r),e(K7,L1r),e(K7,PW),e(PW,x1r),e(K7,$1r),e(ee,k1r),e(ee,Z7),e(Z7,i5e),e(i5e,S1r),e(Z7,R1r),e(Z7,IW),e(IW,B1r),e(Z7,P1r),e(ee,I1r),e(ee,eM),e(eM,d5e),e(d5e,q1r),e(eM,N1r),e(eM,qW),e(qW,j1r),e(eM,D1r),e(ee,G1r),e(ee,oM),e(oM,c5e),e(c5e,O1r),e(oM,V1r),e(oM,NW),e(NW,X1r),e(oM,z1r),e(ee,Q1r),e(ee,rM),e(rM,f5e),e(f5e,W1r),e(rM,H1r),e(rM,jW),e(jW,U1r),e(rM,J1r),e(ee,Y1r),e(ee,tM),e(tM,m5e),e(m5e,K1r),e(tM,Z1r),e(tM,DW),e(DW,ebr),e(tM,obr),e(ee,rbr),e(ee,aM),e(aM,g5e),e(g5e,tbr),e(aM,abr),e(aM,GW),e(GW,nbr),e(aM,sbr),e(ee,lbr),e(ee,nM),e(nM,h5e),e(h5e,ibr),e(nM,dbr),e(nM,OW),e(OW,cbr),e(nM,fbr),e(ee,mbr),e(ee,sM),e(sM,p5e),e(p5e,gbr),e(sM,hbr),e(sM,VW),e(VW,pbr),e(sM,ubr),e(ee,_br),e(ee,lM),e(lM,u5e),e(u5e,bbr),e(lM,vbr),e(lM,XW),e(XW,Fbr),e(lM,Tbr),e(ee,Mbr),e(ee,iM),e(iM,_5e),e(_5e,Ebr),e(iM,Cbr),e(iM,zW),e(zW,wbr),e(iM,Abr),e(ee,ybr),e(ee,dM),e(dM,b5e),e(b5e,Lbr),e(dM,xbr),e(dM,QW),e(QW,$br),e(dM,kbr),e(ee,Sbr),e(ee,cM),e(cM,v5e),e(v5e,Rbr),e(cM,Bbr),e(cM,WW),e(WW,Pbr),e(cM,Ibr),e(ee,qbr),e(ee,fM),e(fM,F5e),e(F5e,Nbr),e(fM,jbr),e(fM,HW),e(HW,Dbr),e(fM,Gbr),e(ee,Obr),e(ee,mM),e(mM,T5e),e(T5e,Vbr),e(mM,Xbr),e(mM,UW),e(UW,zbr),e(mM,Qbr),e(ee,Wbr),e(ee,gM),e(gM,M5e),e(M5e,Hbr),e(gM,Ubr),e(gM,JW),e(JW,Jbr),e(gM,Ybr),e(ee,Kbr),e(ee,hM),e(hM,E5e),e(E5e,Zbr),e(hM,e5r),e(hM,YW),e(YW,o5r),e(hM,r5r),e(ee,t5r),e(ee,pM),e(pM,C5e),e(C5e,a5r),e(pM,n5r),e(pM,KW),e(KW,s5r),e(pM,l5r),e(ee,i5r),e(ee,uM),e(uM,w5e),e(w5e,d5r),e(uM,c5r),e(uM,ZW),e(ZW,f5r),e(uM,m5r),e(ee,g5r),e(ee,_M),e(_M,A5e),e(A5e,h5r),e(_M,p5r),e(_M,eH),e(eH,u5r),e(_M,_5r),e(ee,b5r),e(ee,bM),e(bM,y5e),e(y5e,v5r),e(bM,F5r),e(bM,oH),e(oH,T5r),e(bM,M5r),e(ee,E5r),e(ee,vM),e(vM,L5e),e(L5e,C5r),e(vM,w5r),e(vM,rH),e(rH,A5r),e(vM,y5r),e(ee,L5r),e(ee,FM),e(FM,x5e),e(x5e,x5r),e(FM,$5r),e(FM,tH),e(tH,k5r),e(FM,S5r),e(ee,R5r),e(ee,TM),e(TM,$5e),e($5e,B5r),e(TM,P5r),e(TM,aH),e(aH,I5r),e(TM,q5r),e(ee,N5r),e(ee,MM),e(MM,k5e),e(k5e,j5r),e(MM,D5r),e(MM,nH),e(nH,G5r),e(MM,O5r),e(ee,V5r),e(ee,EM),e(EM,S5e),e(S5e,X5r),e(EM,z5r),e(EM,sH),e(sH,Q5r),e(EM,W5r),e(kr,H5r),M(CM,kr,null),b(f,Cqe,_),b(f,nc,_),e(nc,wM),e(wM,R5e),M(_8,R5e,null),e(nc,U5r),e(nc,B5e),e(B5e,J5r),b(f,wqe,_),b(f,ar,_),M(b8,ar,null),e(ar,Y5r),e(ar,sc),e(sc,K5r),e(sc,lH),e(lH,Z5r),e(sc,evr),e(sc,iH),e(iH,ovr),e(sc,rvr),e(ar,tvr),e(ar,v8),e(v8,avr),e(v8,P5e),e(P5e,nvr),e(v8,svr),e(ar,lvr),e(ar,St),M(F8,St,null),e(St,ivr),e(St,I5e),e(I5e,dvr),e(St,cvr),e(St,lc),e(lc,fvr),e(lc,q5e),e(q5e,mvr),e(lc,gvr),e(lc,dH),e(dH,hvr),e(lc,pvr),e(St,uvr),M(AM,St,null),e(ar,_vr),e(ar,Sr),M(T8,Sr,null),e(Sr,bvr),e(Sr,N5e),e(N5e,vvr),e(Sr,Fvr),e(Sr,nn),e(nn,Tvr),e(nn,j5e),e(j5e,Mvr),e(nn,Evr),e(nn,D5e),e(D5e,Cvr),e(nn,wvr),e(nn,G5e),e(G5e,Avr),e(nn,yvr),e(Sr,Lvr),e(Sr,pe),e(pe,yM),e(yM,O5e),e(O5e,xvr),e(yM,$vr),e(yM,cH),e(cH,kvr),e(yM,Svr),e(pe,Rvr),e(pe,LM),e(LM,V5e),e(V5e,Bvr),e(LM,Pvr),e(LM,fH),e(fH,Ivr),e(LM,qvr),e(pe,Nvr),e(pe,xM),e(xM,X5e),e(X5e,jvr),e(xM,Dvr),e(xM,mH),e(mH,Gvr),e(xM,Ovr),e(pe,Vvr),e(pe,$M),e($M,z5e),e(z5e,Xvr),e($M,zvr),e($M,gH),e(gH,Qvr),e($M,Wvr),e(pe,Hvr),e(pe,kM),e(kM,Q5e),e(Q5e,Uvr),e(kM,Jvr),e(kM,hH),e(hH,Yvr),e(kM,Kvr),e(pe,Zvr),e(pe,SM),e(SM,W5e),e(W5e,eFr),e(SM,oFr),e(SM,pH),e(pH,rFr),e(SM,tFr),e(pe,aFr),e(pe,RM),e(RM,H5e),e(H5e,nFr),e(RM,sFr),e(RM,uH),e(uH,lFr),e(RM,iFr),e(pe,dFr),e(pe,BM),e(BM,U5e),e(U5e,cFr),e(BM,fFr),e(BM,_H),e(_H,mFr),e(BM,gFr),e(pe,hFr),e(pe,PM),e(PM,J5e),e(J5e,pFr),e(PM,uFr),e(PM,bH),e(bH,_Fr),e(PM,bFr),e(pe,vFr),e(pe,IM),e(IM,Y5e),e(Y5e,FFr),e(IM,TFr),e(IM,vH),e(vH,MFr),e(IM,EFr),e(pe,CFr),e(pe,qM),e(qM,K5e),e(K5e,wFr),e(qM,AFr),e(qM,FH),e(FH,yFr),e(qM,LFr),e(pe,xFr),e(pe,NM),e(NM,Z5e),e(Z5e,$Fr),e(NM,kFr),e(NM,TH),e(TH,SFr),e(NM,RFr),e(pe,BFr),e(pe,jM),e(jM,eve),e(eve,PFr),e(jM,IFr),e(jM,MH),e(MH,qFr),e(jM,NFr),e(pe,jFr),e(pe,DM),e(DM,ove),e(ove,DFr),e(DM,GFr),e(DM,EH),e(EH,OFr),e(DM,VFr),e(pe,XFr),e(pe,GM),e(GM,rve),e(rve,zFr),e(GM,QFr),e(GM,CH),e(CH,WFr),e(GM,HFr),e(pe,UFr),e(pe,OM),e(OM,tve),e(tve,JFr),e(OM,YFr),e(OM,wH),e(wH,KFr),e(OM,ZFr),e(pe,e0r),e(pe,VM),e(VM,ave),e(ave,o0r),e(VM,r0r),e(VM,AH),e(AH,t0r),e(VM,a0r),e(Sr,n0r),M(XM,Sr,null),b(f,Aqe,_),b(f,ic,_),e(ic,zM),e(zM,nve),M(M8,nve,null),e(ic,s0r),e(ic,sve),e(sve,l0r),b(f,yqe,_),b(f,nr,_),M(E8,nr,null),e(nr,i0r),e(nr,dc),e(dc,d0r),e(dc,yH),e(yH,c0r),e(dc,f0r),e(dc,LH),e(LH,m0r),e(dc,g0r),e(nr,h0r),e(nr,C8),e(C8,p0r),e(C8,lve),e(lve,u0r),e(C8,_0r),e(nr,b0r),e(nr,Rt),M(w8,Rt,null),e(Rt,v0r),e(Rt,ive),e(ive,F0r),e(Rt,T0r),e(Rt,cc),e(cc,M0r),e(cc,dve),e(dve,E0r),e(cc,C0r),e(cc,xH),e(xH,w0r),e(cc,A0r),e(Rt,y0r),M(QM,Rt,null),e(nr,L0r),e(nr,Rr),M(A8,Rr,null),e(Rr,x0r),e(Rr,cve),e(cve,$0r),e(Rr,k0r),e(Rr,sn),e(sn,S0r),e(sn,fve),e(fve,R0r),e(sn,B0r),e(sn,mve),e(mve,P0r),e(sn,I0r),e(sn,gve),e(gve,q0r),e(sn,N0r),e(Rr,j0r),e(Rr,y8),e(y8,WM),e(WM,hve),e(hve,D0r),e(WM,G0r),e(WM,$H),e($H,O0r),e(WM,V0r),e(y8,X0r),e(y8,HM),e(HM,pve),e(pve,z0r),e(HM,Q0r),e(HM,kH),e(kH,W0r),e(HM,H0r),e(Rr,U0r),M(UM,Rr,null),b(f,Lqe,_),b(f,fc,_),e(fc,JM),e(JM,uve),M(L8,uve,null),e(fc,J0r),e(fc,_ve),e(_ve,Y0r),b(f,xqe,_),b(f,sr,_),M(x8,sr,null),e(sr,K0r),e(sr,mc),e(mc,Z0r),e(mc,SH),e(SH,eTr),e(mc,oTr),e(mc,RH),e(RH,rTr),e(mc,tTr),e(sr,aTr),e(sr,$8),e($8,nTr),e($8,bve),e(bve,sTr),e($8,lTr),e(sr,iTr),e(sr,Bt),M(k8,Bt,null),e(Bt,dTr),e(Bt,vve),e(vve,cTr),e(Bt,fTr),e(Bt,gc),e(gc,mTr),e(gc,Fve),e(Fve,gTr),e(gc,hTr),e(gc,BH),e(BH,pTr),e(gc,uTr),e(Bt,_Tr),M(YM,Bt,null),e(sr,bTr),e(sr,Br),M(S8,Br,null),e(Br,vTr),e(Br,Tve),e(Tve,FTr),e(Br,TTr),e(Br,ln),e(ln,MTr),e(ln,Mve),e(Mve,ETr),e(ln,CTr),e(ln,Eve),e(Eve,wTr),e(ln,ATr),e(ln,Cve),e(Cve,yTr),e(ln,LTr),e(Br,xTr),e(Br,wve),e(wve,KM),e(KM,Ave),e(Ave,$Tr),e(KM,kTr),e(KM,PH),e(PH,STr),e(KM,RTr),e(Br,BTr),M(ZM,Br,null),b(f,$qe,_),b(f,hc,_),e(hc,e4),e(e4,yve),M(R8,yve,null),e(hc,PTr),e(hc,Lve),e(Lve,ITr),b(f,kqe,_),b(f,lr,_),M(B8,lr,null),e(lr,qTr),e(lr,pc),e(pc,NTr),e(pc,IH),e(IH,jTr),e(pc,DTr),e(pc,qH),e(qH,GTr),e(pc,OTr),e(lr,VTr),e(lr,P8),e(P8,XTr),e(P8,xve),e(xve,zTr),e(P8,QTr),e(lr,WTr),e(lr,Pt),M(I8,Pt,null),e(Pt,HTr),e(Pt,$ve),e($ve,UTr),e(Pt,JTr),e(Pt,uc),e(uc,YTr),e(uc,kve),e(kve,KTr),e(uc,ZTr),e(uc,NH),e(NH,e7r),e(uc,o7r),e(Pt,r7r),M(o4,Pt,null),e(lr,t7r),e(lr,Pr),M(q8,Pr,null),e(Pr,a7r),e(Pr,Sve),e(Sve,n7r),e(Pr,s7r),e(Pr,dn),e(dn,l7r),e(dn,Rve),e(Rve,i7r),e(dn,d7r),e(dn,Bve),e(Bve,c7r),e(dn,f7r),e(dn,Pve),e(Pve,m7r),e(dn,g7r),e(Pr,h7r),e(Pr,de),e(de,r4),e(r4,Ive),e(Ive,p7r),e(r4,u7r),e(r4,jH),e(jH,_7r),e(r4,b7r),e(de,v7r),e(de,t4),e(t4,qve),e(qve,F7r),e(t4,T7r),e(t4,DH),e(DH,M7r),e(t4,E7r),e(de,C7r),e(de,a4),e(a4,Nve),e(Nve,w7r),e(a4,A7r),e(a4,GH),e(GH,y7r),e(a4,L7r),e(de,x7r),e(de,n4),e(n4,jve),e(jve,$7r),e(n4,k7r),e(n4,OH),e(OH,S7r),e(n4,R7r),e(de,B7r),e(de,s4),e(s4,Dve),e(Dve,P7r),e(s4,I7r),e(s4,VH),e(VH,q7r),e(s4,N7r),e(de,j7r),e(de,l4),e(l4,Gve),e(Gve,D7r),e(l4,G7r),e(l4,XH),e(XH,O7r),e(l4,V7r),e(de,X7r),e(de,i4),e(i4,Ove),e(Ove,z7r),e(i4,Q7r),e(i4,zH),e(zH,W7r),e(i4,H7r),e(de,U7r),e(de,d4),e(d4,Vve),e(Vve,J7r),e(d4,Y7r),e(d4,QH),e(QH,K7r),e(d4,Z7r),e(de,eMr),e(de,c4),e(c4,Xve),e(Xve,oMr),e(c4,rMr),e(c4,WH),e(WH,tMr),e(c4,aMr),e(de,nMr),e(de,f4),e(f4,zve),e(zve,sMr),e(f4,lMr),e(f4,HH),e(HH,iMr),e(f4,dMr),e(de,cMr),e(de,m4),e(m4,Qve),e(Qve,fMr),e(m4,mMr),e(m4,UH),e(UH,gMr),e(m4,hMr),e(de,pMr),e(de,g4),e(g4,Wve),e(Wve,uMr),e(g4,_Mr),e(g4,JH),e(JH,bMr),e(g4,vMr),e(de,FMr),e(de,h4),e(h4,Hve),e(Hve,TMr),e(h4,MMr),e(h4,YH),e(YH,EMr),e(h4,CMr),e(de,wMr),e(de,p4),e(p4,Uve),e(Uve,AMr),e(p4,yMr),e(p4,KH),e(KH,LMr),e(p4,xMr),e(de,$Mr),e(de,u4),e(u4,Jve),e(Jve,kMr),e(u4,SMr),e(u4,ZH),e(ZH,RMr),e(u4,BMr),e(de,PMr),e(de,_4),e(_4,Yve),e(Yve,IMr),e(_4,qMr),e(_4,eU),e(eU,NMr),e(_4,jMr),e(de,DMr),e(de,b4),e(b4,Kve),e(Kve,GMr),e(b4,OMr),e(b4,oU),e(oU,VMr),e(b4,XMr),e(de,zMr),e(de,v4),e(v4,Zve),e(Zve,QMr),e(v4,WMr),e(v4,rU),e(rU,HMr),e(v4,UMr),e(de,JMr),e(de,F4),e(F4,eFe),e(eFe,YMr),e(F4,KMr),e(F4,tU),e(tU,ZMr),e(F4,e4r),e(de,o4r),e(de,T4),e(T4,oFe),e(oFe,r4r),e(T4,t4r),e(T4,aU),e(aU,a4r),e(T4,n4r),e(Pr,s4r),M(M4,Pr,null),b(f,Sqe,_),b(f,_c,_),e(_c,E4),e(E4,rFe),M(N8,rFe,null),e(_c,l4r),e(_c,tFe),e(tFe,i4r),b(f,Rqe,_),b(f,ir,_),M(j8,ir,null),e(ir,d4r),e(ir,bc),e(bc,c4r),e(bc,nU),e(nU,f4r),e(bc,m4r),e(bc,sU),e(sU,g4r),e(bc,h4r),e(ir,p4r),e(ir,D8),e(D8,u4r),e(D8,aFe),e(aFe,_4r),e(D8,b4r),e(ir,v4r),e(ir,It),M(G8,It,null),e(It,F4r),e(It,nFe),e(nFe,T4r),e(It,M4r),e(It,vc),e(vc,E4r),e(vc,sFe),e(sFe,C4r),e(vc,w4r),e(vc,lU),e(lU,A4r),e(vc,y4r),e(It,L4r),M(C4,It,null),e(ir,x4r),e(ir,Ir),M(O8,Ir,null),e(Ir,$4r),e(Ir,lFe),e(lFe,k4r),e(Ir,S4r),e(Ir,cn),e(cn,R4r),e(cn,iFe),e(iFe,B4r),e(cn,P4r),e(cn,dFe),e(dFe,I4r),e(cn,q4r),e(cn,cFe),e(cFe,N4r),e(cn,j4r),e(Ir,D4r),e(Ir,ce),e(ce,w4),e(w4,fFe),e(fFe,G4r),e(w4,O4r),e(w4,iU),e(iU,V4r),e(w4,X4r),e(ce,z4r),e(ce,A4),e(A4,mFe),e(mFe,Q4r),e(A4,W4r),e(A4,dU),e(dU,H4r),e(A4,U4r),e(ce,J4r),e(ce,y4),e(y4,gFe),e(gFe,Y4r),e(y4,K4r),e(y4,cU),e(cU,Z4r),e(y4,eEr),e(ce,oEr),e(ce,L4),e(L4,hFe),e(hFe,rEr),e(L4,tEr),e(L4,fU),e(fU,aEr),e(L4,nEr),e(ce,sEr),e(ce,x4),e(x4,pFe),e(pFe,lEr),e(x4,iEr),e(x4,mU),e(mU,dEr),e(x4,cEr),e(ce,fEr),e(ce,$4),e($4,uFe),e(uFe,mEr),e($4,gEr),e($4,gU),e(gU,hEr),e($4,pEr),e(ce,uEr),e(ce,k4),e(k4,_Fe),e(_Fe,_Er),e(k4,bEr),e(k4,hU),e(hU,vEr),e(k4,FEr),e(ce,TEr),e(ce,S4),e(S4,bFe),e(bFe,MEr),e(S4,EEr),e(S4,pU),e(pU,CEr),e(S4,wEr),e(ce,AEr),e(ce,R4),e(R4,vFe),e(vFe,yEr),e(R4,LEr),e(R4,uU),e(uU,xEr),e(R4,$Er),e(ce,kEr),e(ce,B4),e(B4,FFe),e(FFe,SEr),e(B4,REr),e(B4,_U),e(_U,BEr),e(B4,PEr),e(ce,IEr),e(ce,P4),e(P4,TFe),e(TFe,qEr),e(P4,NEr),e(P4,bU),e(bU,jEr),e(P4,DEr),e(ce,GEr),e(ce,I4),e(I4,MFe),e(MFe,OEr),e(I4,VEr),e(I4,vU),e(vU,XEr),e(I4,zEr),e(ce,QEr),e(ce,q4),e(q4,EFe),e(EFe,WEr),e(q4,HEr),e(q4,FU),e(FU,UEr),e(q4,JEr),e(ce,YEr),e(ce,N4),e(N4,CFe),e(CFe,KEr),e(N4,ZEr),e(N4,TU),e(TU,eCr),e(N4,oCr),e(ce,rCr),e(ce,j4),e(j4,wFe),e(wFe,tCr),e(j4,aCr),e(j4,MU),e(MU,nCr),e(j4,sCr),e(ce,lCr),e(ce,D4),e(D4,AFe),e(AFe,iCr),e(D4,dCr),e(D4,EU),e(EU,cCr),e(D4,fCr),e(ce,mCr),e(ce,G4),e(G4,yFe),e(yFe,gCr),e(G4,hCr),e(G4,CU),e(CU,pCr),e(G4,uCr),e(ce,_Cr),e(ce,O4),e(O4,LFe),e(LFe,bCr),e(O4,vCr),e(O4,wU),e(wU,FCr),e(O4,TCr),e(ce,MCr),e(ce,V4),e(V4,xFe),e(xFe,ECr),e(V4,CCr),e(V4,AU),e(AU,wCr),e(V4,ACr),e(ce,yCr),e(ce,X4),e(X4,$Fe),e($Fe,LCr),e(X4,xCr),e(X4,yU),e(yU,$Cr),e(X4,kCr),e(Ir,SCr),M(z4,Ir,null),b(f,Bqe,_),b(f,Fc,_),e(Fc,Q4),e(Q4,kFe),M(V8,kFe,null),e(Fc,RCr),e(Fc,SFe),e(SFe,BCr),b(f,Pqe,_),b(f,dr,_),M(X8,dr,null),e(dr,PCr),e(dr,Tc),e(Tc,ICr),e(Tc,LU),e(LU,qCr),e(Tc,NCr),e(Tc,xU),e(xU,jCr),e(Tc,DCr),e(dr,GCr),e(dr,z8),e(z8,OCr),e(z8,RFe),e(RFe,VCr),e(z8,XCr),e(dr,zCr),e(dr,qt),M(Q8,qt,null),e(qt,QCr),e(qt,BFe),e(BFe,WCr),e(qt,HCr),e(qt,Mc),e(Mc,UCr),e(Mc,PFe),e(PFe,JCr),e(Mc,YCr),e(Mc,$U),e($U,KCr),e(Mc,ZCr),e(qt,e3r),M(W4,qt,null),e(dr,o3r),e(dr,qr),M(W8,qr,null),e(qr,r3r),e(qr,IFe),e(IFe,t3r),e(qr,a3r),e(qr,fn),e(fn,n3r),e(fn,qFe),e(qFe,s3r),e(fn,l3r),e(fn,NFe),e(NFe,i3r),e(fn,d3r),e(fn,jFe),e(jFe,c3r),e(fn,f3r),e(qr,m3r),e(qr,DFe),e(DFe,H4),e(H4,GFe),e(GFe,g3r),e(H4,h3r),e(H4,kU),e(kU,p3r),e(H4,u3r),e(qr,_3r),M(U4,qr,null),b(f,Iqe,_),b(f,Ec,_),e(Ec,J4),e(J4,OFe),M(H8,OFe,null),e(Ec,b3r),e(Ec,VFe),e(VFe,v3r),b(f,qqe,_),b(f,cr,_),M(U8,cr,null),e(cr,F3r),e(cr,Cc),e(Cc,T3r),e(Cc,SU),e(SU,M3r),e(Cc,E3r),e(Cc,RU),e(RU,C3r),e(Cc,w3r),e(cr,A3r),e(cr,J8),e(J8,y3r),e(J8,XFe),e(XFe,L3r),e(J8,x3r),e(cr,$3r),e(cr,Nt),M(Y8,Nt,null),e(Nt,k3r),e(Nt,zFe),e(zFe,S3r),e(Nt,R3r),e(Nt,wc),e(wc,B3r),e(wc,QFe),e(QFe,P3r),e(wc,I3r),e(wc,BU),e(BU,q3r),e(wc,N3r),e(Nt,j3r),M(Y4,Nt,null),e(cr,D3r),e(cr,Nr),M(K8,Nr,null),e(Nr,G3r),e(Nr,WFe),e(WFe,O3r),e(Nr,V3r),e(Nr,mn),e(mn,X3r),e(mn,HFe),e(HFe,z3r),e(mn,Q3r),e(mn,UFe),e(UFe,W3r),e(mn,H3r),e(mn,JFe),e(JFe,U3r),e(mn,J3r),e(Nr,Y3r),e(Nr,YFe),e(YFe,K4),e(K4,KFe),e(KFe,K3r),e(K4,Z3r),e(K4,PU),e(PU,ewr),e(K4,owr),e(Nr,rwr),M(Z4,Nr,null),b(f,Nqe,_),b(f,Ac,_),e(Ac,eE),e(eE,ZFe),M(Z8,ZFe,null),e(Ac,twr),e(Ac,e0e),e(e0e,awr),b(f,jqe,_),b(f,fr,_),M(ex,fr,null),e(fr,nwr),e(fr,yc),e(yc,swr),e(yc,IU),e(IU,lwr),e(yc,iwr),e(yc,qU),e(qU,dwr),e(yc,cwr),e(fr,fwr),e(fr,ox),e(ox,mwr),e(ox,o0e),e(o0e,gwr),e(ox,hwr),e(fr,pwr),e(fr,jt),M(rx,jt,null),e(jt,uwr),e(jt,r0e),e(r0e,_wr),e(jt,bwr),e(jt,Lc),e(Lc,vwr),e(Lc,t0e),e(t0e,Fwr),e(Lc,Twr),e(Lc,NU),e(NU,Mwr),e(Lc,Ewr),e(jt,Cwr),M(oE,jt,null),e(fr,wwr),e(fr,jr),M(tx,jr,null),e(jr,Awr),e(jr,a0e),e(a0e,ywr),e(jr,Lwr),e(jr,gn),e(gn,xwr),e(gn,n0e),e(n0e,$wr),e(gn,kwr),e(gn,s0e),e(s0e,Swr),e(gn,Rwr),e(gn,l0e),e(l0e,Bwr),e(gn,Pwr),e(jr,Iwr),e(jr,re),e(re,rE),e(rE,i0e),e(i0e,qwr),e(rE,Nwr),e(rE,jU),e(jU,jwr),e(rE,Dwr),e(re,Gwr),e(re,tE),e(tE,d0e),e(d0e,Owr),e(tE,Vwr),e(tE,DU),e(DU,Xwr),e(tE,zwr),e(re,Qwr),e(re,aE),e(aE,c0e),e(c0e,Wwr),e(aE,Hwr),e(aE,GU),e(GU,Uwr),e(aE,Jwr),e(re,Ywr),e(re,nE),e(nE,f0e),e(f0e,Kwr),e(nE,Zwr),e(nE,OU),e(OU,eAr),e(nE,oAr),e(re,rAr),e(re,sE),e(sE,m0e),e(m0e,tAr),e(sE,aAr),e(sE,VU),e(VU,nAr),e(sE,sAr),e(re,lAr),e(re,lE),e(lE,g0e),e(g0e,iAr),e(lE,dAr),e(lE,XU),e(XU,cAr),e(lE,fAr),e(re,mAr),e(re,iE),e(iE,h0e),e(h0e,gAr),e(iE,hAr),e(iE,zU),e(zU,pAr),e(iE,uAr),e(re,_Ar),e(re,dE),e(dE,p0e),e(p0e,bAr),e(dE,vAr),e(dE,QU),e(QU,FAr),e(dE,TAr),e(re,MAr),e(re,cE),e(cE,u0e),e(u0e,EAr),e(cE,CAr),e(cE,WU),e(WU,wAr),e(cE,AAr),e(re,yAr),e(re,fE),e(fE,_0e),e(_0e,LAr),e(fE,xAr),e(fE,HU),e(HU,$Ar),e(fE,kAr),e(re,SAr),e(re,mE),e(mE,b0e),e(b0e,RAr),e(mE,BAr),e(mE,UU),e(UU,PAr),e(mE,IAr),e(re,qAr),e(re,gE),e(gE,v0e),e(v0e,NAr),e(gE,jAr),e(gE,JU),e(JU,DAr),e(gE,GAr),e(re,OAr),e(re,hE),e(hE,F0e),e(F0e,VAr),e(hE,XAr),e(hE,YU),e(YU,zAr),e(hE,QAr),e(re,WAr),e(re,pE),e(pE,T0e),e(T0e,HAr),e(pE,UAr),e(pE,KU),e(KU,JAr),e(pE,YAr),e(re,KAr),e(re,uE),e(uE,M0e),e(M0e,ZAr),e(uE,e6r),e(uE,ZU),e(ZU,o6r),e(uE,r6r),e(re,t6r),e(re,_E),e(_E,E0e),e(E0e,a6r),e(_E,n6r),e(_E,eJ),e(eJ,s6r),e(_E,l6r),e(re,i6r),e(re,bE),e(bE,C0e),e(C0e,d6r),e(bE,c6r),e(bE,oJ),e(oJ,f6r),e(bE,m6r),e(re,g6r),e(re,vE),e(vE,w0e),e(w0e,h6r),e(vE,p6r),e(vE,rJ),e(rJ,u6r),e(vE,_6r),e(re,b6r),e(re,FE),e(FE,A0e),e(A0e,v6r),e(FE,F6r),e(FE,tJ),e(tJ,T6r),e(FE,M6r),e(re,E6r),e(re,TE),e(TE,y0e),e(y0e,C6r),e(TE,w6r),e(TE,aJ),e(aJ,A6r),e(TE,y6r),e(re,L6r),e(re,ME),e(ME,L0e),e(L0e,x6r),e(ME,$6r),e(ME,nJ),e(nJ,k6r),e(ME,S6r),e(re,R6r),e(re,EE),e(EE,x0e),e(x0e,B6r),e(EE,P6r),e(EE,sJ),e(sJ,I6r),e(EE,q6r),e(re,N6r),e(re,CE),e(CE,$0e),e($0e,j6r),e(CE,D6r),e(CE,lJ),e(lJ,G6r),e(CE,O6r),e(re,V6r),e(re,wE),e(wE,k0e),e(k0e,X6r),e(wE,z6r),e(wE,iJ),e(iJ,Q6r),e(wE,W6r),e(re,H6r),e(re,AE),e(AE,S0e),e(S0e,U6r),e(AE,J6r),e(AE,dJ),e(dJ,Y6r),e(AE,K6r),e(jr,Z6r),M(yE,jr,null),b(f,Dqe,_),b(f,xc,_),e(xc,LE),e(LE,R0e),M(ax,R0e,null),e(xc,eyr),e(xc,B0e),e(B0e,oyr),b(f,Gqe,_),b(f,mr,_),M(nx,mr,null),e(mr,ryr),e(mr,$c),e($c,tyr),e($c,cJ),e(cJ,ayr),e($c,nyr),e($c,fJ),e(fJ,syr),e($c,lyr),e(mr,iyr),e(mr,sx),e(sx,dyr),e(sx,P0e),e(P0e,cyr),e(sx,fyr),e(mr,myr),e(mr,Dt),M(lx,Dt,null),e(Dt,gyr),e(Dt,I0e),e(I0e,hyr),e(Dt,pyr),e(Dt,kc),e(kc,uyr),e(kc,q0e),e(q0e,_yr),e(kc,byr),e(kc,mJ),e(mJ,vyr),e(kc,Fyr),e(Dt,Tyr),M(xE,Dt,null),e(mr,Myr),e(mr,Dr),M(ix,Dr,null),e(Dr,Eyr),e(Dr,N0e),e(N0e,Cyr),e(Dr,wyr),e(Dr,hn),e(hn,Ayr),e(hn,j0e),e(j0e,yyr),e(hn,Lyr),e(hn,D0e),e(D0e,xyr),e(hn,$yr),e(hn,G0e),e(G0e,kyr),e(hn,Syr),e(Dr,Ryr),e(Dr,ke),e(ke,$E),e($E,O0e),e(O0e,Byr),e($E,Pyr),e($E,gJ),e(gJ,Iyr),e($E,qyr),e(ke,Nyr),e(ke,kE),e(kE,V0e),e(V0e,jyr),e(kE,Dyr),e(kE,hJ),e(hJ,Gyr),e(kE,Oyr),e(ke,Vyr),e(ke,SE),e(SE,X0e),e(X0e,Xyr),e(SE,zyr),e(SE,pJ),e(pJ,Qyr),e(SE,Wyr),e(ke,Hyr),e(ke,RE),e(RE,z0e),e(z0e,Uyr),e(RE,Jyr),e(RE,uJ),e(uJ,Yyr),e(RE,Kyr),e(ke,Zyr),e(ke,BE),e(BE,Q0e),e(Q0e,eLr),e(BE,oLr),e(BE,_J),e(_J,rLr),e(BE,tLr),e(ke,aLr),e(ke,PE),e(PE,W0e),e(W0e,nLr),e(PE,sLr),e(PE,bJ),e(bJ,lLr),e(PE,iLr),e(ke,dLr),e(ke,IE),e(IE,H0e),e(H0e,cLr),e(IE,fLr),e(IE,vJ),e(vJ,mLr),e(IE,gLr),e(ke,hLr),e(ke,qE),e(qE,U0e),e(U0e,pLr),e(qE,uLr),e(qE,FJ),e(FJ,_Lr),e(qE,bLr),e(ke,vLr),e(ke,NE),e(NE,J0e),e(J0e,FLr),e(NE,TLr),e(NE,TJ),e(TJ,MLr),e(NE,ELr),e(Dr,CLr),M(jE,Dr,null),b(f,Oqe,_),b(f,Sc,_),e(Sc,DE),e(DE,Y0e),M(dx,Y0e,null),e(Sc,wLr),e(Sc,K0e),e(K0e,ALr),b(f,Vqe,_),b(f,gr,_),M(cx,gr,null),e(gr,yLr),e(gr,Rc),e(Rc,LLr),e(Rc,MJ),e(MJ,xLr),e(Rc,$Lr),e(Rc,EJ),e(EJ,kLr),e(Rc,SLr),e(gr,RLr),e(gr,fx),e(fx,BLr),e(fx,Z0e),e(Z0e,PLr),e(fx,ILr),e(gr,qLr),e(gr,Gt),M(mx,Gt,null),e(Gt,NLr),e(Gt,eTe),e(eTe,jLr),e(Gt,DLr),e(Gt,Bc),e(Bc,GLr),e(Bc,oTe),e(oTe,OLr),e(Bc,VLr),e(Bc,CJ),e(CJ,XLr),e(Bc,zLr),e(Gt,QLr),M(GE,Gt,null),e(gr,WLr),e(gr,Gr),M(gx,Gr,null),e(Gr,HLr),e(Gr,rTe),e(rTe,ULr),e(Gr,JLr),e(Gr,pn),e(pn,YLr),e(pn,tTe),e(tTe,KLr),e(pn,ZLr),e(pn,aTe),e(aTe,e8r),e(pn,o8r),e(pn,nTe),e(nTe,r8r),e(pn,t8r),e(Gr,a8r),e(Gr,Ee),e(Ee,OE),e(OE,sTe),e(sTe,n8r),e(OE,s8r),e(OE,wJ),e(wJ,l8r),e(OE,i8r),e(Ee,d8r),e(Ee,VE),e(VE,lTe),e(lTe,c8r),e(VE,f8r),e(VE,AJ),e(AJ,m8r),e(VE,g8r),e(Ee,h8r),e(Ee,XE),e(XE,iTe),e(iTe,p8r),e(XE,u8r),e(XE,yJ),e(yJ,_8r),e(XE,b8r),e(Ee,v8r),e(Ee,zE),e(zE,dTe),e(dTe,F8r),e(zE,T8r),e(zE,LJ),e(LJ,M8r),e(zE,E8r),e(Ee,C8r),e(Ee,QE),e(QE,cTe),e(cTe,w8r),e(QE,A8r),e(QE,xJ),e(xJ,y8r),e(QE,L8r),e(Ee,x8r),e(Ee,WE),e(WE,fTe),e(fTe,$8r),e(WE,k8r),e(WE,$J),e($J,S8r),e(WE,R8r),e(Ee,B8r),e(Ee,HE),e(HE,mTe),e(mTe,P8r),e(HE,I8r),e(HE,kJ),e(kJ,q8r),e(HE,N8r),e(Ee,j8r),e(Ee,UE),e(UE,gTe),e(gTe,D8r),e(UE,G8r),e(UE,SJ),e(SJ,O8r),e(UE,V8r),e(Ee,X8r),e(Ee,JE),e(JE,hTe),e(hTe,z8r),e(JE,Q8r),e(JE,RJ),e(RJ,W8r),e(JE,H8r),e(Ee,U8r),e(Ee,YE),e(YE,pTe),e(pTe,J8r),e(YE,Y8r),e(YE,BJ),e(BJ,K8r),e(YE,Z8r),e(Ee,exr),e(Ee,KE),e(KE,uTe),e(uTe,oxr),e(KE,rxr),e(KE,PJ),e(PJ,txr),e(KE,axr),e(Ee,nxr),e(Ee,ZE),e(ZE,_Te),e(_Te,sxr),e(ZE,lxr),e(ZE,IJ),e(IJ,ixr),e(ZE,dxr),e(Gr,cxr),M(eC,Gr,null),b(f,Xqe,_),b(f,Pc,_),e(Pc,oC),e(oC,bTe),M(hx,bTe,null),e(Pc,fxr),e(Pc,vTe),e(vTe,mxr),b(f,zqe,_),b(f,hr,_),M(px,hr,null),e(hr,gxr),e(hr,Ic),e(Ic,hxr),e(Ic,qJ),e(qJ,pxr),e(Ic,uxr),e(Ic,NJ),e(NJ,_xr),e(Ic,bxr),e(hr,vxr),e(hr,ux),e(ux,Fxr),e(ux,FTe),e(FTe,Txr),e(ux,Mxr),e(hr,Exr),e(hr,Ot),M(_x,Ot,null),e(Ot,Cxr),e(Ot,TTe),e(TTe,wxr),e(Ot,Axr),e(Ot,qc),e(qc,yxr),e(qc,MTe),e(MTe,Lxr),e(qc,xxr),e(qc,jJ),e(jJ,$xr),e(qc,kxr),e(Ot,Sxr),M(rC,Ot,null),e(hr,Rxr),e(hr,Or),M(bx,Or,null),e(Or,Bxr),e(Or,ETe),e(ETe,Pxr),e(Or,Ixr),e(Or,un),e(un,qxr),e(un,CTe),e(CTe,Nxr),e(un,jxr),e(un,wTe),e(wTe,Dxr),e(un,Gxr),e(un,ATe),e(ATe,Oxr),e(un,Vxr),e(Or,Xxr),e(Or,Le),e(Le,tC),e(tC,yTe),e(yTe,zxr),e(tC,Qxr),e(tC,DJ),e(DJ,Wxr),e(tC,Hxr),e(Le,Uxr),e(Le,aC),e(aC,LTe),e(LTe,Jxr),e(aC,Yxr),e(aC,GJ),e(GJ,Kxr),e(aC,Zxr),e(Le,e9r),e(Le,nC),e(nC,xTe),e(xTe,o9r),e(nC,r9r),e(nC,OJ),e(OJ,t9r),e(nC,a9r),e(Le,n9r),e(Le,sC),e(sC,$Te),e($Te,s9r),e(sC,l9r),e(sC,VJ),e(VJ,i9r),e(sC,d9r),e(Le,c9r),e(Le,lC),e(lC,kTe),e(kTe,f9r),e(lC,m9r),e(lC,XJ),e(XJ,g9r),e(lC,h9r),e(Le,p9r),e(Le,iC),e(iC,STe),e(STe,u9r),e(iC,_9r),e(iC,zJ),e(zJ,b9r),e(iC,v9r),e(Le,F9r),e(Le,dC),e(dC,RTe),e(RTe,T9r),e(dC,M9r),e(dC,QJ),e(QJ,E9r),e(dC,C9r),e(Le,w9r),e(Le,cC),e(cC,BTe),e(BTe,A9r),e(cC,y9r),e(cC,WJ),e(WJ,L9r),e(cC,x9r),e(Le,$9r),e(Le,fC),e(fC,PTe),e(PTe,k9r),e(fC,S9r),e(fC,HJ),e(HJ,R9r),e(fC,B9r),e(Le,P9r),e(Le,mC),e(mC,ITe),e(ITe,I9r),e(mC,q9r),e(mC,UJ),e(UJ,N9r),e(mC,j9r),e(Or,D9r),M(gC,Or,null),b(f,Qqe,_),b(f,Nc,_),e(Nc,hC),e(hC,qTe),M(vx,qTe,null),e(Nc,G9r),e(Nc,NTe),e(NTe,O9r),b(f,Wqe,_),b(f,pr,_),M(Fx,pr,null),e(pr,V9r),e(pr,jc),e(jc,X9r),e(jc,JJ),e(JJ,z9r),e(jc,Q9r),e(jc,YJ),e(YJ,W9r),e(jc,H9r),e(pr,U9r),e(pr,Tx),e(Tx,J9r),e(Tx,jTe),e(jTe,Y9r),e(Tx,K9r),e(pr,Z9r),e(pr,Vt),M(Mx,Vt,null),e(Vt,e$r),e(Vt,DTe),e(DTe,o$r),e(Vt,r$r),e(Vt,Dc),e(Dc,t$r),e(Dc,GTe),e(GTe,a$r),e(Dc,n$r),e(Dc,KJ),e(KJ,s$r),e(Dc,l$r),e(Vt,i$r),M(pC,Vt,null),e(pr,d$r),e(pr,Vr),M(Ex,Vr,null),e(Vr,c$r),e(Vr,OTe),e(OTe,f$r),e(Vr,m$r),e(Vr,_n),e(_n,g$r),e(_n,VTe),e(VTe,h$r),e(_n,p$r),e(_n,XTe),e(XTe,u$r),e(_n,_$r),e(_n,zTe),e(zTe,b$r),e(_n,v$r),e(Vr,F$r),e(Vr,Se),e(Se,uC),e(uC,QTe),e(QTe,T$r),e(uC,M$r),e(uC,ZJ),e(ZJ,E$r),e(uC,C$r),e(Se,w$r),e(Se,_C),e(_C,WTe),e(WTe,A$r),e(_C,y$r),e(_C,eY),e(eY,L$r),e(_C,x$r),e(Se,$$r),e(Se,bC),e(bC,HTe),e(HTe,k$r),e(bC,S$r),e(bC,oY),e(oY,R$r),e(bC,B$r),e(Se,P$r),e(Se,vC),e(vC,UTe),e(UTe,I$r),e(vC,q$r),e(vC,rY),e(rY,N$r),e(vC,j$r),e(Se,D$r),e(Se,FC),e(FC,JTe),e(JTe,G$r),e(FC,O$r),e(FC,tY),e(tY,V$r),e(FC,X$r),e(Se,z$r),e(Se,TC),e(TC,YTe),e(YTe,Q$r),e(TC,W$r),e(TC,aY),e(aY,H$r),e(TC,U$r),e(Se,J$r),e(Se,MC),e(MC,KTe),e(KTe,Y$r),e(MC,K$r),e(MC,nY),e(nY,Z$r),e(MC,ekr),e(Se,okr),e(Se,EC),e(EC,ZTe),e(ZTe,rkr),e(EC,tkr),e(EC,sY),e(sY,akr),e(EC,nkr),e(Se,skr),e(Se,CC),e(CC,e7e),e(e7e,lkr),e(CC,ikr),e(CC,lY),e(lY,dkr),e(CC,ckr),e(Vr,fkr),M(wC,Vr,null),b(f,Hqe,_),b(f,Gc,_),e(Gc,AC),e(AC,o7e),M(Cx,o7e,null),e(Gc,mkr),e(Gc,r7e),e(r7e,gkr),b(f,Uqe,_),b(f,ur,_),M(wx,ur,null),e(ur,hkr),e(ur,Oc),e(Oc,pkr),e(Oc,iY),e(iY,ukr),e(Oc,_kr),e(Oc,dY),e(dY,bkr),e(Oc,vkr),e(ur,Fkr),e(ur,Ax),e(Ax,Tkr),e(Ax,t7e),e(t7e,Mkr),e(Ax,Ekr),e(ur,Ckr),e(ur,Xt),M(yx,Xt,null),e(Xt,wkr),e(Xt,a7e),e(a7e,Akr),e(Xt,ykr),e(Xt,Vc),e(Vc,Lkr),e(Vc,n7e),e(n7e,xkr),e(Vc,$kr),e(Vc,cY),e(cY,kkr),e(Vc,Skr),e(Xt,Rkr),M(yC,Xt,null),e(ur,Bkr),e(ur,Xr),M(Lx,Xr,null),e(Xr,Pkr),e(Xr,s7e),e(s7e,Ikr),e(Xr,qkr),e(Xr,bn),e(bn,Nkr),e(bn,l7e),e(l7e,jkr),e(bn,Dkr),e(bn,i7e),e(i7e,Gkr),e(bn,Okr),e(bn,d7e),e(d7e,Vkr),e(bn,Xkr),e(Xr,zkr),e(Xr,xe),e(xe,LC),e(LC,c7e),e(c7e,Qkr),e(LC,Wkr),e(LC,fY),e(fY,Hkr),e(LC,Ukr),e(xe,Jkr),e(xe,xC),e(xC,f7e),e(f7e,Ykr),e(xC,Kkr),e(xC,mY),e(mY,Zkr),e(xC,eSr),e(xe,oSr),e(xe,$C),e($C,m7e),e(m7e,rSr),e($C,tSr),e($C,gY),e(gY,aSr),e($C,nSr),e(xe,sSr),e(xe,kC),e(kC,g7e),e(g7e,lSr),e(kC,iSr),e(kC,hY),e(hY,dSr),e(kC,cSr),e(xe,fSr),e(xe,SC),e(SC,h7e),e(h7e,mSr),e(SC,gSr),e(SC,pY),e(pY,hSr),e(SC,pSr),e(xe,uSr),e(xe,RC),e(RC,p7e),e(p7e,_Sr),e(RC,bSr),e(RC,uY),e(uY,vSr),e(RC,FSr),e(xe,TSr),e(xe,BC),e(BC,u7e),e(u7e,MSr),e(BC,ESr),e(BC,_Y),e(_Y,CSr),e(BC,wSr),e(xe,ASr),e(xe,PC),e(PC,_7e),e(_7e,ySr),e(PC,LSr),e(PC,bY),e(bY,xSr),e(PC,$Sr),e(xe,kSr),e(xe,IC),e(IC,b7e),e(b7e,SSr),e(IC,RSr),e(IC,vY),e(vY,BSr),e(IC,PSr),e(xe,ISr),e(xe,qC),e(qC,v7e),e(v7e,qSr),e(qC,NSr),e(qC,FY),e(FY,jSr),e(qC,DSr),e(Xr,GSr),M(NC,Xr,null),b(f,Jqe,_),b(f,Xc,_),e(Xc,jC),e(jC,F7e),M(xx,F7e,null),e(Xc,OSr),e(Xc,T7e),e(T7e,VSr),b(f,Yqe,_),b(f,_r,_),M($x,_r,null),e(_r,XSr),e(_r,zc),e(zc,zSr),e(zc,TY),e(TY,QSr),e(zc,WSr),e(zc,MY),e(MY,HSr),e(zc,USr),e(_r,JSr),e(_r,kx),e(kx,YSr),e(kx,M7e),e(M7e,KSr),e(kx,ZSr),e(_r,eRr),e(_r,zt),M(Sx,zt,null),e(zt,oRr),e(zt,E7e),e(E7e,rRr),e(zt,tRr),e(zt,Qc),e(Qc,aRr),e(Qc,C7e),e(C7e,nRr),e(Qc,sRr),e(Qc,EY),e(EY,lRr),e(Qc,iRr),e(zt,dRr),M(DC,zt,null),e(_r,cRr),e(_r,zr),M(Rx,zr,null),e(zr,fRr),e(zr,w7e),e(w7e,mRr),e(zr,gRr),e(zr,vn),e(vn,hRr),e(vn,A7e),e(A7e,pRr),e(vn,uRr),e(vn,y7e),e(y7e,_Rr),e(vn,bRr),e(vn,L7e),e(L7e,vRr),e(vn,FRr),e(zr,TRr),e(zr,$e),e($e,GC),e(GC,x7e),e(x7e,MRr),e(GC,ERr),e(GC,CY),e(CY,CRr),e(GC,wRr),e($e,ARr),e($e,OC),e(OC,$7e),e($7e,yRr),e(OC,LRr),e(OC,wY),e(wY,xRr),e(OC,$Rr),e($e,kRr),e($e,VC),e(VC,k7e),e(k7e,SRr),e(VC,RRr),e(VC,AY),e(AY,BRr),e(VC,PRr),e($e,IRr),e($e,XC),e(XC,S7e),e(S7e,qRr),e(XC,NRr),e(XC,yY),e(yY,jRr),e(XC,DRr),e($e,GRr),e($e,zC),e(zC,R7e),e(R7e,ORr),e(zC,VRr),e(zC,LY),e(LY,XRr),e(zC,zRr),e($e,QRr),e($e,QC),e(QC,B7e),e(B7e,WRr),e(QC,HRr),e(QC,xY),e(xY,URr),e(QC,JRr),e($e,YRr),e($e,WC),e(WC,P7e),e(P7e,KRr),e(WC,ZRr),e(WC,$Y),e($Y,eBr),e(WC,oBr),e($e,rBr),e($e,HC),e(HC,I7e),e(I7e,tBr),e(HC,aBr),e(HC,kY),e(kY,nBr),e(HC,sBr),e($e,lBr),e($e,UC),e(UC,q7e),e(q7e,iBr),e(UC,dBr),e(UC,SY),e(SY,cBr),e(UC,fBr),e($e,mBr),e($e,JC),e(JC,N7e),e(N7e,gBr),e(JC,hBr),e(JC,RY),e(RY,pBr),e(JC,uBr),e(zr,_Br),M(YC,zr,null),b(f,Kqe,_),b(f,Wc,_),e(Wc,KC),e(KC,j7e),M(Bx,j7e,null),e(Wc,bBr),e(Wc,D7e),e(D7e,vBr),b(f,Zqe,_),b(f,br,_),M(Px,br,null),e(br,FBr),e(br,Hc),e(Hc,TBr),e(Hc,BY),e(BY,MBr),e(Hc,EBr),e(Hc,PY),e(PY,CBr),e(Hc,wBr),e(br,ABr),e(br,Ix),e(Ix,yBr),e(Ix,G7e),e(G7e,LBr),e(Ix,xBr),e(br,$Br),e(br,Qt),M(qx,Qt,null),e(Qt,kBr),e(Qt,O7e),e(O7e,SBr),e(Qt,RBr),e(Qt,Uc),e(Uc,BBr),e(Uc,V7e),e(V7e,PBr),e(Uc,IBr),e(Uc,IY),e(IY,qBr),e(Uc,NBr),e(Qt,jBr),M(ZC,Qt,null),e(br,DBr),e(br,Qr),M(Nx,Qr,null),e(Qr,GBr),e(Qr,X7e),e(X7e,OBr),e(Qr,VBr),e(Qr,Fn),e(Fn,XBr),e(Fn,z7e),e(z7e,zBr),e(Fn,QBr),e(Fn,Q7e),e(Q7e,WBr),e(Fn,HBr),e(Fn,W7e),e(W7e,UBr),e(Fn,JBr),e(Qr,YBr),e(Qr,De),e(De,e3),e(e3,H7e),e(H7e,KBr),e(e3,ZBr),e(e3,qY),e(qY,ePr),e(e3,oPr),e(De,rPr),e(De,o3),e(o3,U7e),e(U7e,tPr),e(o3,aPr),e(o3,NY),e(NY,nPr),e(o3,sPr),e(De,lPr),e(De,r3),e(r3,J7e),e(J7e,iPr),e(r3,dPr),e(r3,jY),e(jY,cPr),e(r3,fPr),e(De,mPr),e(De,t3),e(t3,Y7e),e(Y7e,gPr),e(t3,hPr),e(t3,DY),e(DY,pPr),e(t3,uPr),e(De,_Pr),e(De,a3),e(a3,K7e),e(K7e,bPr),e(a3,vPr),e(a3,GY),e(GY,FPr),e(a3,TPr),e(De,MPr),e(De,n3),e(n3,Z7e),e(Z7e,EPr),e(n3,CPr),e(n3,OY),e(OY,wPr),e(n3,APr),e(De,yPr),e(De,s3),e(s3,eMe),e(eMe,LPr),e(s3,xPr),e(s3,VY),e(VY,$Pr),e(s3,kPr),e(De,SPr),e(De,l3),e(l3,oMe),e(oMe,RPr),e(l3,BPr),e(l3,XY),e(XY,PPr),e(l3,IPr),e(Qr,qPr),M(i3,Qr,null),b(f,eNe,_),b(f,Jc,_),e(Jc,d3),e(d3,rMe),M(jx,rMe,null),e(Jc,NPr),e(Jc,tMe),e(tMe,jPr),b(f,oNe,_),b(f,vr,_),M(Dx,vr,null),e(vr,DPr),e(vr,Yc),e(Yc,GPr),e(Yc,zY),e(zY,OPr),e(Yc,VPr),e(Yc,QY),e(QY,XPr),e(Yc,zPr),e(vr,QPr),e(vr,Gx),e(Gx,WPr),e(Gx,aMe),e(aMe,HPr),e(Gx,UPr),e(vr,JPr),e(vr,Wt),M(Ox,Wt,null),e(Wt,YPr),e(Wt,nMe),e(nMe,KPr),e(Wt,ZPr),e(Wt,Kc),e(Kc,eIr),e(Kc,sMe),e(sMe,oIr),e(Kc,rIr),e(Kc,WY),e(WY,tIr),e(Kc,aIr),e(Wt,nIr),M(c3,Wt,null),e(vr,sIr),e(vr,Wr),M(Vx,Wr,null),e(Wr,lIr),e(Wr,lMe),e(lMe,iIr),e(Wr,dIr),e(Wr,Tn),e(Tn,cIr),e(Tn,iMe),e(iMe,fIr),e(Tn,mIr),e(Tn,dMe),e(dMe,gIr),e(Tn,hIr),e(Tn,cMe),e(cMe,pIr),e(Tn,uIr),e(Wr,_Ir),e(Wr,Ge),e(Ge,f3),e(f3,fMe),e(fMe,bIr),e(f3,vIr),e(f3,HY),e(HY,FIr),e(f3,TIr),e(Ge,MIr),e(Ge,m3),e(m3,mMe),e(mMe,EIr),e(m3,CIr),e(m3,UY),e(UY,wIr),e(m3,AIr),e(Ge,yIr),e(Ge,g3),e(g3,gMe),e(gMe,LIr),e(g3,xIr),e(g3,JY),e(JY,$Ir),e(g3,kIr),e(Ge,SIr),e(Ge,h3),e(h3,hMe),e(hMe,RIr),e(h3,BIr),e(h3,YY),e(YY,PIr),e(h3,IIr),e(Ge,qIr),e(Ge,p3),e(p3,pMe),e(pMe,NIr),e(p3,jIr),e(p3,KY),e(KY,DIr),e(p3,GIr),e(Ge,OIr),e(Ge,u3),e(u3,uMe),e(uMe,VIr),e(u3,XIr),e(u3,ZY),e(ZY,zIr),e(u3,QIr),e(Ge,WIr),e(Ge,_3),e(_3,_Me),e(_Me,HIr),e(_3,UIr),e(_3,eK),e(eK,JIr),e(_3,YIr),e(Ge,KIr),e(Ge,b3),e(b3,bMe),e(bMe,ZIr),e(b3,eqr),e(b3,oK),e(oK,oqr),e(b3,rqr),e(Wr,tqr),M(v3,Wr,null),b(f,rNe,_),b(f,Zc,_),e(Zc,F3),e(F3,vMe),M(Xx,vMe,null),e(Zc,aqr),e(Zc,FMe),e(FMe,nqr),b(f,tNe,_),b(f,Fr,_),M(zx,Fr,null),e(Fr,sqr),e(Fr,ef),e(ef,lqr),e(ef,rK),e(rK,iqr),e(ef,dqr),e(ef,tK),e(tK,cqr),e(ef,fqr),e(Fr,mqr),e(Fr,Qx),e(Qx,gqr),e(Qx,TMe),e(TMe,hqr),e(Qx,pqr),e(Fr,uqr),e(Fr,Ht),M(Wx,Ht,null),e(Ht,_qr),e(Ht,MMe),e(MMe,bqr),e(Ht,vqr),e(Ht,of),e(of,Fqr),e(of,EMe),e(EMe,Tqr),e(of,Mqr),e(of,aK),e(aK,Eqr),e(of,Cqr),e(Ht,wqr),M(T3,Ht,null),e(Fr,Aqr),e(Fr,Hr),M(Hx,Hr,null),e(Hr,yqr),e(Hr,CMe),e(CMe,Lqr),e(Hr,xqr),e(Hr,Mn),e(Mn,$qr),e(Mn,wMe),e(wMe,kqr),e(Mn,Sqr),e(Mn,AMe),e(AMe,Rqr),e(Mn,Bqr),e(Mn,yMe),e(yMe,Pqr),e(Mn,Iqr),e(Hr,qqr),e(Hr,LMe),e(LMe,M3),e(M3,xMe),e(xMe,Nqr),e(M3,jqr),e(M3,nK),e(nK,Dqr),e(M3,Gqr),e(Hr,Oqr),M(E3,Hr,null),b(f,aNe,_),b(f,rf,_),e(rf,C3),e(C3,$Me),M(Ux,$Me,null),e(rf,Vqr),e(rf,kMe),e(kMe,Xqr),b(f,nNe,_),b(f,Tr,_),M(Jx,Tr,null),e(Tr,zqr),e(Tr,tf),e(tf,Qqr),e(tf,sK),e(sK,Wqr),e(tf,Hqr),e(tf,lK),e(lK,Uqr),e(tf,Jqr),e(Tr,Yqr),e(Tr,Yx),e(Yx,Kqr),e(Yx,SMe),e(SMe,Zqr),e(Yx,eNr),e(Tr,oNr),e(Tr,Ut),M(Kx,Ut,null),e(Ut,rNr),e(Ut,RMe),e(RMe,tNr),e(Ut,aNr),e(Ut,af),e(af,nNr),e(af,BMe),e(BMe,sNr),e(af,lNr),e(af,iK),e(iK,iNr),e(af,dNr),e(Ut,cNr),M(w3,Ut,null),e(Tr,fNr),e(Tr,Ur),M(Zx,Ur,null),e(Ur,mNr),e(Ur,PMe),e(PMe,gNr),e(Ur,hNr),e(Ur,En),e(En,pNr),e(En,IMe),e(IMe,uNr),e(En,_Nr),e(En,qMe),e(qMe,bNr),e(En,vNr),e(En,NMe),e(NMe,FNr),e(En,TNr),e(Ur,MNr),e(Ur,e9),e(e9,A3),e(A3,jMe),e(jMe,ENr),e(A3,CNr),e(A3,dK),e(dK,wNr),e(A3,ANr),e(e9,yNr),e(e9,y3),e(y3,DMe),e(DMe,LNr),e(y3,xNr),e(y3,cK),e(cK,$Nr),e(y3,kNr),e(Ur,SNr),M(L3,Ur,null),b(f,sNe,_),b(f,nf,_),e(nf,x3),e(x3,GMe),M(o9,GMe,null),e(nf,RNr),e(nf,OMe),e(OMe,BNr),b(f,lNe,_),b(f,Mr,_),M(r9,Mr,null),e(Mr,PNr),e(Mr,sf),e(sf,INr),e(sf,fK),e(fK,qNr),e(sf,NNr),e(sf,mK),e(mK,jNr),e(sf,DNr),e(Mr,GNr),e(Mr,t9),e(t9,ONr),e(t9,VMe),e(VMe,VNr),e(t9,XNr),e(Mr,zNr),e(Mr,Jt),M(a9,Jt,null),e(Jt,QNr),e(Jt,XMe),e(XMe,WNr),e(Jt,HNr),e(Jt,lf),e(lf,UNr),e(lf,zMe),e(zMe,JNr),e(lf,YNr),e(lf,gK),e(gK,KNr),e(lf,ZNr),e(Jt,ejr),M($3,Jt,null),e(Mr,ojr),e(Mr,Jr),M(n9,Jr,null),e(Jr,rjr),e(Jr,QMe),e(QMe,tjr),e(Jr,ajr),e(Jr,Cn),e(Cn,njr),e(Cn,WMe),e(WMe,sjr),e(Cn,ljr),e(Cn,HMe),e(HMe,ijr),e(Cn,djr),e(Cn,UMe),e(UMe,cjr),e(Cn,fjr),e(Jr,mjr),e(Jr,JMe),e(JMe,k3),e(k3,YMe),e(YMe,gjr),e(k3,hjr),e(k3,hK),e(hK,pjr),e(k3,ujr),e(Jr,_jr),M(S3,Jr,null),iNe=!0},p(f,[_]){const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),_f.$set(s9);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),_g.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),Jg.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),wh.$set(e4e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),Ah.$set(l9);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),Xh.$set(o4e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),zh.$set(wn);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),Hh.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),ju.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),Gu.$set(a4e);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),x_.$set(i9);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),k_.$set(n4e);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),p2.$set(d9);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),_2.$set(s4e);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),e1.$set(c9);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),r1.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),T1.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),E1.$set(d4e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),bb.$set(df);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),Fb.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),Yb.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),Zb.$set(m4e);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),s5.$set(f9);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),i5.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),V5.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),z5.$set(p4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Sv.$set(Kr);const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),Bv.$set(m9);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),qv.$set(u4e);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),jv.$set(g9);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),Zv.$set(_4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),oF.$set(Zr);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),aF.$set(b4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),sF.$set(cf);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),uF.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),bF.$set(F4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),CF.$set(y);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),AF.$set(R3);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),IF.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),NF.$set(M4e);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),OF.$set(B3);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),XF.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),JF.$set(C4e);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),KF.$set(P3);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),t0.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),n0.$set(A4e);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),d0.$set(I3);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),f0.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),h0.$set(L4e);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),u0.$set(q3);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),M0.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),C0.$set($4e);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),y0.$set(N3);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),x0.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),FT.$set(S4e);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),MT.$set(j3);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),QT.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),HT.$set(B4e);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),l7.$set(D3);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),d7.$set(P4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),g7.$set(I4e);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),p7.$set(G3);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),I7.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),N7.$set(N4e);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),U7.$set(O3);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),Y7.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),CM.$set(D4e);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),AM.$set(V3);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),XM.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),QM.$set(O4e);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),UM.$set(X3);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),YM.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),ZM.$set(X4e);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),o4.$set(z3);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),M4.$set(z4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),C4.$set(Q4e);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),z4.$set(Q3);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),W4.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),U4.$set(H4e);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),Y4.$set(W3);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),Z4.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),oE.$set(J4e);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),yE.$set(H3);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),xE.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),jE.$set(K4e);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),GE.$set(U3);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),eC.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),rC.$set(eEe);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),gC.$set(J3);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),pC.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),wC.$set(rEe);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),yC.$set(Y3);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),NC.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),DC.$set(aEe);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),YC.$set(K3);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),ZC.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),i3.$set(sEe);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),c3.$set(Z3);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),v3.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),T3.$set(iEe);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),E3.$set(ew);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),w3.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),L3.$set(cEe);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),$3.$set(ow);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),S3.$set(fEe)},i(f){iNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(_f.$$.fragment,f),E(t6.$$.fragment,f),E(a6.$$.fragment,f),E(l6.$$.fragment,f),E(_g.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(g6.$$.fragment,f),E(Jg.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(v6.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(w6.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Hh.$$.fragment,f),E(k6.$$.fragment,f),E(ju.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(Gu.$$.fragment,f),E(I6.$$.fragment,f),E(x_.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(k_.$$.fragment,f),E(G6.$$.fragment,f),E(p2.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(_2.$$.fragment,f),E(Q6.$$.fragment,f),E(e1.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(r1.$$.fragment,f),E(Y6.$$.fragment,f),E(T1.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(E1.$$.fragment,f),E(ry.$$.fragment,f),E(bb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Fb.$$.fragment,f),E(ly.$$.fragment,f),E(Yb.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Zb.$$.fragment,f),E(my.$$.fragment,f),E(s5.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(i5.$$.fragment,f),E(_y.$$.fragment,f),E(V5.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(z5.$$.fragment,f),E(My.$$.fragment,f),E(Sv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Bv.$$.fragment,f),E(yy.$$.fragment,f),E(qv.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(jv.$$.fragment,f),E(Sy.$$.fragment,f),E(Zv.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(oF.$$.fragment,f),E(qy.$$.fragment,f),E(aF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(sF.$$.fragment,f),E(Oy.$$.fragment,f),E(uF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(bF.$$.fragment,f),E(Wy.$$.fragment,f),E(CF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(AF.$$.fragment,f),E(Ky.$$.fragment,f),E(IF.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(NF.$$.fragment,f),E(tL.$$.fragment,f),E(OF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(XF.$$.fragment,f),E(dL.$$.fragment,f),E(JF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(KF.$$.fragment,f),E(hL.$$.fragment,f),E(t0.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(n0.$$.fragment,f),E(vL.$$.fragment,f),E(d0.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(f0.$$.fragment,f),E(wL.$$.fragment,f),E(h0.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(u0.$$.fragment,f),E($L.$$.fragment,f),E(M0.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(C0.$$.fragment,f),E(PL.$$.fragment,f),E(y0.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(x0.$$.fragment,f),E(DL.$$.fragment,f),E(FT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(MT.$$.fragment,f),E(zL.$$.fragment,f),E(QT.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(HT.$$.fragment,f),E(JL.$$.fragment,f),E(l7.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(d7.$$.fragment,f),E(o8.$$.fragment,f),E(g7.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(p7.$$.fragment,f),E(s8.$$.fragment,f),E(I7.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(N7.$$.fragment,f),E(f8.$$.fragment,f),E(U7.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(Y7.$$.fragment,f),E(u8.$$.fragment,f),E(CM.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(AM.$$.fragment,f),E(T8.$$.fragment,f),E(XM.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(QM.$$.fragment,f),E(A8.$$.fragment,f),E(UM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(YM.$$.fragment,f),E(S8.$$.fragment,f),E(ZM.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(o4.$$.fragment,f),E(q8.$$.fragment,f),E(M4.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(C4.$$.fragment,f),E(O8.$$.fragment,f),E(z4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(W4.$$.fragment,f),E(W8.$$.fragment,f),E(U4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(Y4.$$.fragment,f),E(K8.$$.fragment,f),E(Z4.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(oE.$$.fragment,f),E(tx.$$.fragment,f),E(yE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(xE.$$.fragment,f),E(ix.$$.fragment,f),E(jE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(GE.$$.fragment,f),E(gx.$$.fragment,f),E(eC.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(rC.$$.fragment,f),E(bx.$$.fragment,f),E(gC.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(pC.$$.fragment,f),E(Ex.$$.fragment,f),E(wC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(yC.$$.fragment,f),E(Lx.$$.fragment,f),E(NC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(DC.$$.fragment,f),E(Rx.$$.fragment,f),E(YC.$$.fragment,f),E(Bx.$$.fragment,f),E(Px.$$.fragment,f),E(qx.$$.fragment,f),E(ZC.$$.fragment,f),E(Nx.$$.fragment,f),E(i3.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(c3.$$.fragment,f),E(Vx.$$.fragment,f),E(v3.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(T3.$$.fragment,f),E(Hx.$$.fragment,f),E(E3.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(w3.$$.fragment,f),E(Zx.$$.fragment,f),E(L3.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E($3.$$.fragment,f),E(n9.$$.fragment,f),E(S3.$$.fragment,f),iNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(_f.$$.fragment,f),C(t6.$$.fragment,f),C(a6.$$.fragment,f),C(l6.$$.fragment,f),C(_g.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(g6.$$.fragment,f),C(Jg.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(v6.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(w6.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Hh.$$.fragment,f),C(k6.$$.fragment,f),C(ju.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(Gu.$$.fragment,f),C(I6.$$.fragment,f),C(x_.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(k_.$$.fragment,f),C(G6.$$.fragment,f),C(p2.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(_2.$$.fragment,f),C(Q6.$$.fragment,f),C(e1.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(r1.$$.fragment,f),C(Y6.$$.fragment,f),C(T1.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(E1.$$.fragment,f),C(ry.$$.fragment,f),C(bb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Fb.$$.fragment,f),C(ly.$$.fragment,f),C(Yb.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Zb.$$.fragment,f),C(my.$$.fragment,f),C(s5.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(i5.$$.fragment,f),C(_y.$$.fragment,f),C(V5.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(z5.$$.fragment,f),C(My.$$.fragment,f),C(Sv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Bv.$$.fragment,f),C(yy.$$.fragment,f),C(qv.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(jv.$$.fragment,f),C(Sy.$$.fragment,f),C(Zv.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(oF.$$.fragment,f),C(qy.$$.fragment,f),C(aF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(sF.$$.fragment,f),C(Oy.$$.fragment,f),C(uF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(bF.$$.fragment,f),C(Wy.$$.fragment,f),C(CF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(AF.$$.fragment,f),C(Ky.$$.fragment,f),C(IF.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(NF.$$.fragment,f),C(tL.$$.fragment,f),C(OF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(XF.$$.fragment,f),C(dL.$$.fragment,f),C(JF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(KF.$$.fragment,f),C(hL.$$.fragment,f),C(t0.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(n0.$$.fragment,f),C(vL.$$.fragment,f),C(d0.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(f0.$$.fragment,f),C(wL.$$.fragment,f),C(h0.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(u0.$$.fragment,f),C($L.$$.fragment,f),C(M0.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(C0.$$.fragment,f),C(PL.$$.fragment,f),C(y0.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(x0.$$.fragment,f),C(DL.$$.fragment,f),C(FT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(MT.$$.fragment,f),C(zL.$$.fragment,f),C(QT.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(HT.$$.fragment,f),C(JL.$$.fragment,f),C(l7.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(d7.$$.fragment,f),C(o8.$$.fragment,f),C(g7.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(p7.$$.fragment,f),C(s8.$$.fragment,f),C(I7.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(N7.$$.fragment,f),C(f8.$$.fragment,f),C(U7.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(Y7.$$.fragment,f),C(u8.$$.fragment,f),C(CM.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(AM.$$.fragment,f),C(T8.$$.fragment,f),C(XM.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(QM.$$.fragment,f),C(A8.$$.fragment,f),C(UM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(YM.$$.fragment,f),C(S8.$$.fragment,f),C(ZM.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(o4.$$.fragment,f),C(q8.$$.fragment,f),C(M4.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(C4.$$.fragment,f),C(O8.$$.fragment,f),C(z4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(W4.$$.fragment,f),C(W8.$$.fragment,f),C(U4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(Y4.$$.fragment,f),C(K8.$$.fragment,f),C(Z4.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(oE.$$.fragment,f),C(tx.$$.fragment,f),C(yE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(xE.$$.fragment,f),C(ix.$$.fragment,f),C(jE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(GE.$$.fragment,f),C(gx.$$.fragment,f),C(eC.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(rC.$$.fragment,f),C(bx.$$.fragment,f),C(gC.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(pC.$$.fragment,f),C(Ex.$$.fragment,f),C(wC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(yC.$$.fragment,f),C(Lx.$$.fragment,f),C(NC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(DC.$$.fragment,f),C(Rx.$$.fragment,f),C(YC.$$.fragment,f),C(Bx.$$.fragment,f),C(Px.$$.fragment,f),C(qx.$$.fragment,f),C(ZC.$$.fragment,f),C(Nx.$$.fragment,f),C(i3.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(c3.$$.fragment,f),C(Vx.$$.fragment,f),C(v3.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(T3.$$.fragment,f),C(Hx.$$.fragment,f),C(E3.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(w3.$$.fragment,f),C(Zx.$$.fragment,f),C(L3.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C($3.$$.fragment,f),C(n9.$$.fragment,f),C(S3.$$.fragment,f),iNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(nIe),f&&t(hi),w(o6),f&&t(sIe),f&&t($n),f&&t(lIe),w(r6,f),f&&t(iIe),f&&t(E$),f&&t(dIe),w(_f,f),f&&t(cIe),f&&t(pi),w(t6),f&&t(fIe),f&&t(Co),w(a6),w(l6),w(_g),w(i6),f&&t(mIe),f&&t(_i),w(d6),f&&t(gIe),f&&t(wo),w(c6),w(g6),w(Jg),w(h6),f&&t(hIe),f&&t(bi),w(p6),f&&t(pIe),f&&t(Ao),w(u6),w(v6),w(wh),w(Ah),w(F6),f&&t(uIe),f&&t(vi),w(T6),f&&t(_Ie),f&&t(yo),w(M6),w(w6),w(Xh),w(zh),w(A6),f&&t(bIe),f&&t(Ti),w(y6),f&&t(vIe),f&&t(Lo),w(L6),w($6),w(Hh),w(k6),w(ju),f&&t(FIe),f&&t(Ci),w(S6),f&&t(TIe),f&&t(xo),w(R6),w(P6),w(Gu),w(I6),w(x_),f&&t(MIe),f&&t(yi),w(q6),f&&t(EIe),f&&t($o),w(N6),w(D6),w(k_),w(G6),w(p2),f&&t(CIe),f&&t($i),w(O6),f&&t(wIe),f&&t(ko),w(V6),w(z6),w(_2),w(Q6),w(e1),f&&t(AIe),f&&t(Ri),w(W6),f&&t(yIe),f&&t(So),w(H6),w(J6),w(r1),w(Y6),w(T1),f&&t(LIe),f&&t(Ii),w(K6),f&&t(xIe),f&&t(Ro),w(Z6),w(oy),w(E1),w(ry),w(bb),f&&t($Ie),f&&t(ji),w(ty),f&&t(kIe),f&&t(Bo),w(ay),w(sy),w(Fb),w(ly),w(Yb),f&&t(SIe),f&&t(Oi),w(iy),f&&t(RIe),f&&t(Po),w(dy),w(fy),w(Zb),w(my),w(s5),f&&t(BIe),f&&t(zi),w(gy),f&&t(PIe),f&&t(Io),w(hy),w(uy),w(i5),w(_y),w(V5),f&&t(IIe),f&&t(Hi),w(by),f&&t(qIe),f&&t(qo),w(vy),w(Ty),w(z5),w(My),w(Sv),f&&t(NIe),f&&t(Yi),w(Ey),f&&t(jIe),f&&t(No),w(Cy),w(Ay),w(Bv),w(yy),w(qv),f&&t(DIe),f&&t(ed),w(Ly),f&&t(GIe),f&&t(jo),w(xy),w(ky),w(jv),w(Sy),w(Zv),f&&t(OIe),f&&t(td),w(Ry),f&&t(VIe),f&&t(Do),w(By),w(Iy),w(oF),w(qy),w(aF),f&&t(XIe),f&&t(sd),w(Ny),f&&t(zIe),f&&t(Go),w(jy),w(Gy),w(sF),w(Oy),w(uF),f&&t(QIe),f&&t(dd),w(Vy),f&&t(WIe),f&&t(Oo),w(Xy),w(Qy),w(bF),w(Wy),w(CF),f&&t(HIe),f&&t(md),w(Hy),f&&t(UIe),f&&t(Vo),w(Uy),w(Yy),w(AF),w(Ky),w(IF),f&&t(JIe),f&&t(pd),w(Zy),f&&t(YIe),f&&t(Xo),w(eL),w(rL),w(NF),w(tL),w(OF),f&&t(KIe),f&&t(bd),w(nL),f&&t(ZIe),f&&t(zo),w(sL),w(iL),w(XF),w(dL),w(JF),f&&t(eqe),f&&t(Td),w(cL),f&&t(oqe),f&&t(Qo),w(fL),w(gL),w(KF),w(hL),w(t0),f&&t(rqe),f&&t(wd),w(pL),f&&t(tqe),f&&t(Wo),w(uL),w(bL),w(n0),w(vL),w(d0),f&&t(aqe),f&&t(Ld),w(TL),f&&t(nqe),f&&t(Ho),w(ML),w(CL),w(f0),w(wL),w(h0),f&&t(sqe),f&&t(kd),w(AL),f&&t(lqe),f&&t(Uo),w(yL),w(xL),w(u0),w($L),w(M0),f&&t(iqe),f&&t(Bd),w(kL),f&&t(dqe),f&&t(Jo),w(SL),w(BL),w(C0),w(PL),w(y0),f&&t(cqe),f&&t(qd),w(IL),f&&t(fqe),f&&t(Yo),w(qL),w(jL),w(x0),w(DL),w(FT),f&&t(mqe),f&&t(Dd),w(GL),f&&t(gqe),f&&t(Ko),w(OL),w(XL),w(MT),w(zL),w(QT),f&&t(hqe),f&&t(Vd),w(QL),f&&t(pqe),f&&t(Zo),w(WL),w(UL),w(HT),w(JL),w(l7),f&&t(uqe),f&&t(Qd),w(YL),f&&t(_qe),f&&t(er),w(KL),w(e8),w(d7),w(o8),w(g7),f&&t(bqe),f&&t(Jd),w(r8),f&&t(vqe),f&&t(or),w(t8),w(n8),w(p7),w(s8),w(I7),f&&t(Fqe),f&&t(Zd),w(l8),f&&t(Tqe),f&&t(rr),w(i8),w(c8),w(N7),w(f8),w(U7),f&&t(Mqe),f&&t(rc),w(m8),f&&t(Eqe),f&&t(tr),w(g8),w(p8),w(Y7),w(u8),w(CM),f&&t(Cqe),f&&t(nc),w(_8),f&&t(wqe),f&&t(ar),w(b8),w(F8),w(AM),w(T8),w(XM),f&&t(Aqe),f&&t(ic),w(M8),f&&t(yqe),f&&t(nr),w(E8),w(w8),w(QM),w(A8),w(UM),f&&t(Lqe),f&&t(fc),w(L8),f&&t(xqe),f&&t(sr),w(x8),w(k8),w(YM),w(S8),w(ZM),f&&t($qe),f&&t(hc),w(R8),f&&t(kqe),f&&t(lr),w(B8),w(I8),w(o4),w(q8),w(M4),f&&t(Sqe),f&&t(_c),w(N8),f&&t(Rqe),f&&t(ir),w(j8),w(G8),w(C4),w(O8),w(z4),f&&t(Bqe),f&&t(Fc),w(V8),f&&t(Pqe),f&&t(dr),w(X8),w(Q8),w(W4),w(W8),w(U4),f&&t(Iqe),f&&t(Ec),w(H8),f&&t(qqe),f&&t(cr),w(U8),w(Y8),w(Y4),w(K8),w(Z4),f&&t(Nqe),f&&t(Ac),w(Z8),f&&t(jqe),f&&t(fr),w(ex),w(rx),w(oE),w(tx),w(yE),f&&t(Dqe),f&&t(xc),w(ax),f&&t(Gqe),f&&t(mr),w(nx),w(lx),w(xE),w(ix),w(jE),f&&t(Oqe),f&&t(Sc),w(dx),f&&t(Vqe),f&&t(gr),w(cx),w(mx),w(GE),w(gx),w(eC),f&&t(Xqe),f&&t(Pc),w(hx),f&&t(zqe),f&&t(hr),w(px),w(_x),w(rC),w(bx),w(gC),f&&t(Qqe),f&&t(Nc),w(vx),f&&t(Wqe),f&&t(pr),w(Fx),w(Mx),w(pC),w(Ex),w(wC),f&&t(Hqe),f&&t(Gc),w(Cx),f&&t(Uqe),f&&t(ur),w(wx),w(yx),w(yC),w(Lx),w(NC),f&&t(Jqe),f&&t(Xc),w(xx),f&&t(Yqe),f&&t(_r),w($x),w(Sx),w(DC),w(Rx),w(YC),f&&t(Kqe),f&&t(Wc),w(Bx),f&&t(Zqe),f&&t(br),w(Px),w(qx),w(ZC),w(Nx),w(i3),f&&t(eNe),f&&t(Jc),w(jx),f&&t(oNe),f&&t(vr),w(Dx),w(Ox),w(c3),w(Vx),w(v3),f&&t(rNe),f&&t(Zc),w(Xx),f&&t(tNe),f&&t(Fr),w(zx),w(Wx),w(T3),w(Hx),w(E3),f&&t(aNe),f&&t(rf),w(Ux),f&&t(nNe),f&&t(Tr),w(Jx),w(Kx),w(w3),w(Zx),w(L3),f&&t(sNe),f&&t(nf),w(o9),f&&t(lNe),f&&t(Mr),w(r9),w(a9),w($3),w(n9),w(S3)}}}const e8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function o8t(L){return oyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class i8t extends Y6t{constructor(g){super();K6t(this,g,o8t,ZLt,Z6t,{})}}export{i8t as default,e8t as metadata};
