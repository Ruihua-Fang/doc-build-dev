import{S as _a,i as ba,s as va,e as r,k as p,w as T,t as i,M as Ta,c as a,d as o,m as f,a as s,x as M,h as l,b as d,F as e,g,y as w,q as $,o as V,B as y,v as Ma,L as Cr}from"../../chunks/vendor-6b77c823.js";import{T as xr}from"../../chunks/Tip-39098574.js";import{D as ze}from"../../chunks/Docstring-1088f2fb.js";import{C as Ir}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as et}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as Er}from"../../chunks/ExampleCodeBlock-5212b321.js";function wa(x){let c,b,u,h,v;return h=new Ir({props:{code:`from transformers import MobileViTModel, MobileViTConfig

# Initializing a MobileViT mobilevit-small style configuration
configuration = MobileViTConfig()

# Initializing a model from the mobilevit-small style configuration
model = MobileViTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTModel, MobileViTConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a MobileViT mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileViTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),b=i("Example:"),u=p(),T(h.$$.fragment)},l(n){c=a(n,"P",{});var _=s(c);b=l(_,"Example:"),_.forEach(o),u=f(n),M(h.$$.fragment,n)},m(n,_){g(n,c,_),e(c,b),g(n,u,_),w(h,n,_),v=!0},p:Cr,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){V(h.$$.fragment,n),v=!1},d(n){n&&o(c),n&&o(u),y(h,n)}}}function $a(x){let c,b;return{c(){c=r("p"),b=i(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){c=a(u,"P",{});var h=s(c);b=l(h,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),h.forEach(o)},m(u,h){g(u,c,h),e(c,b)},d(u){u&&o(c)}}}function Va(x){let c,b,u,h,v;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),h=i("Module"),v=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=a(n,"P",{});var _=s(c);b=l(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var P=s(u);h=l(P,"Module"),P.forEach(o),v=l(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(n,_){g(n,c,_),e(c,b),e(c,u),e(u,h),e(c,v)},d(n){n&&o(c)}}}function ya(x){let c,b,u,h,v;return h=new Ir({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("Matthijs/mobilevit-small")
model = MobileViTModel.from_pretrained("Matthijs/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){c=r("p"),b=i("Example:"),u=p(),T(h.$$.fragment)},l(n){c=a(n,"P",{});var _=s(c);b=l(_,"Example:"),_.forEach(o),u=f(n),M(h.$$.fragment,n)},m(n,_){g(n,c,_),e(c,b),g(n,u,_),w(h,n,_),v=!0},p:Cr,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){V(h.$$.fragment,n),v=!1},d(n){n&&o(c),n&&o(u),y(h,n)}}}function xa(x){let c,b,u,h,v;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),h=i("Module"),v=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=a(n,"P",{});var _=s(c);b=l(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var P=s(u);h=l(P,"Module"),P.forEach(o),v=l(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(n,_){g(n,c,_),e(c,b),e(c,u),e(u,h),e(c,v)},d(n){n&&o(c)}}}function Ea(x){let c,b,u,h,v;return h=new Ir({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("Matthijs/mobilevit-small")
model = MobileViTForImageClassification.from_pretrained("Matthijs/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){c=r("p"),b=i("Example:"),u=p(),T(h.$$.fragment)},l(n){c=a(n,"P",{});var _=s(c);b=l(_,"Example:"),_.forEach(o),u=f(n),M(h.$$.fragment,n)},m(n,_){g(n,c,_),e(c,b),g(n,u,_),w(h,n,_),v=!0},p:Cr,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){V(h.$$.fragment,n),v=!1},d(n){n&&o(c),n&&o(u),y(h,n)}}}function Ca(x){let c,b,u,h,v,n,_,P,Kt,yt,L,H,tt,ce,Qt,ot,Yt,xt,G,eo,de,to,oo,Et,Ae,ro,Ct,Le,rt,ao,It,qe,so,kt,N,at,st,no,io,nt,me,lo,Oe,co,mo,po,it,pe,fo,fe,ho,uo,jt,z,go,he,_o,bo,ue,vo,To,Pt,q,J,lt,ge,Mo,ct,wo,Ft,E,_e,$o,O,Vo,Se,yo,xo,be,Eo,Co,Io,S,ko,De,jo,Po,Re,Fo,No,zo,X,Nt,D,Z,dt,ve,Ao,mt,Lo,zt,C,Te,qo,pt,Oo,So,Me,Do,Be,Ro,Bo,Uo,A,we,Wo,ft,Ho,Go,K,At,R,Q,ht,$e,Jo,ut,Xo,Lt,F,Ve,Zo,ye,Ko,xe,Qo,Yo,er,k,Ee,tr,B,or,Ue,rr,ar,gt,sr,nr,ir,Y,lr,ee,qt,U,te,_t,Ce,cr,bt,dr,Ot,I,Ie,mr,vt,pr,fr,ke,hr,je,ur,gr,_r,j,Pe,br,W,vr,We,Tr,Mr,Tt,wr,$r,Vr,oe,yr,re,St;return n=new et({}),ce=new et({}),ge=new et({}),_e=new ze({props:{name:"class transformers.MobileViTConfig",anchor:"transformers.MobileViTConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 256"},{name:"patch_size",val:" = 2"},{name:"hidden_sizes",val:" = None"},{name:"neck_hidden_sizes",val:" = None"},{name:"num_attention_heads",val:" = 4"},{name:"mlp_ratio",val:" = 2.0"},{name:"expand_ratio",val:" = 4.0"},{name:"hidden_act",val:" = 'silu'"},{name:"conv_kernel_size",val:" = 3"},{name:"output_stride",val:" = 32"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"qkv_bias",val:" = True"},{name:"is_encoder_decoder",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <code>3</code>) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileViTConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>256</code>) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileViTConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>2</code>) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.MobileViTConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [144, 192, 240]) &#x2014;
Dimensionality (hidden size) of the Transformer encoders at each stage.`,name:"hidden_sizes"},{anchor:"transformers.MobileViTConfig.neck_hidden_sizes",description:`<strong>neck_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [16, 32, 64, 96, 128, 160, 640]) &#x2014;
The number of channels for the feature maps of the backbone.`,name:"neck_hidden_sizes"},{anchor:"transformers.MobileViTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MobileViTConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 2.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.MobileViTConfig.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
Expansion factor for the MobileNetv2 layers.`,name:"expand_ratio"},{anchor:"transformers.MobileViTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileViTConfig.conv_kernel_size",description:`<strong>conv_kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the convolutional kernel in the MobileViT layer.`,name:"conv_kernel_size"},{anchor:"transformers.MobileViTConfig.output_stride",description:`<strong>output_stride</strong> (<code>int</code>, <code>optional</code>, defaults to 32) &#x2014;
The ratio of the spatial resolution of the output to the resolution of the input image.`,name:"output_stride"},{anchor:"transformers.MobileViTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the Transformer encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.MobileViTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MobileViTConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileViTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileViTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MobileViTConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/configuration_mobilevit.py#L31"}}),X=new Er({props:{anchor:"transformers.MobileViTConfig.example",$$slots:{default:[wa]},$$scope:{ctx:x}}}),ve=new et({}),Te=new ze({props:{name:"class transformers.MobileViTFeatureExtractor",anchor:"transformers.MobileViTFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 288"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 256"},{name:"do_flip_channels",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileViTFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 288) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to (size, size). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileViTFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileViTFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileViTFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileViTFeatureExtractor.do_flip_channels",description:`<strong>do_flip_channels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR.`,name:"do_flip_channels"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L30"}}),we=new ze({props:{name:"__call__",anchor:"transformers.MobileViTFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileViTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17205/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L77",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17205/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17205/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),K=new xr({props:{warning:!0,$$slots:{default:[$a]},$$scope:{ctx:x}}}),$e=new et({}),Ve=new ze({props:{name:"class transformers.MobileViTModel",anchor:"transformers.MobileViTModel",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/modeling_mobilevit.py#L689"}}),Ee=new ze({props:{name:"forward",anchor:"transformers.MobileViTModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17205/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/modeling_mobilevit.py#L724",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Y=new xr({props:{$$slots:{default:[Va]},$$scope:{ctx:x}}}),ee=new Er({props:{anchor:"transformers.MobileViTModel.forward.example",$$slots:{default:[ya]},$$scope:{ctx:x}}}),Ce=new et({}),Ie=new ze({props:{name:"class transformers.MobileViTForImageClassification",anchor:"transformers.MobileViTForImageClassification",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/modeling_mobilevit.py#L777"}}),Pe=new ze({props:{name:"forward",anchor:"transformers.MobileViTForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17205/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/mobilevit/modeling_mobilevit.py#L793",returnDescription:`
<p>A <code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),oe=new xr({props:{$$slots:{default:[xa]},$$scope:{ctx:x}}}),re=new Er({props:{anchor:"transformers.MobileViTForImageClassification.forward.example",$$slots:{default:[Ea]},$$scope:{ctx:x}}}),{c(){c=r("meta"),b=p(),u=r("h1"),h=r("a"),v=r("span"),T(n.$$.fragment),_=p(),P=r("span"),Kt=i("MobileViT"),yt=p(),L=r("h2"),H=r("a"),tt=r("span"),T(ce.$$.fragment),Qt=p(),ot=r("span"),Yt=i("Overview"),xt=p(),G=r("p"),eo=i("The MobileViT model was proposed in "),de=r("a"),to=i("MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),oo=i(" by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),Et=p(),Ae=r("p"),ro=i("The abstract from the paper is the following:"),Ct=p(),Le=r("p"),rt=r("em"),ao=i("Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),It=p(),qe=r("p"),so=i("Tips:"),kt=p(),N=r("ul"),at=r("li"),st=r("p"),no=i("MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map."),io=p(),nt=r("li"),me=r("p"),lo=i("One can use "),Oe=r("a"),co=i("MobileViTFeatureExtractor"),mo=i(" to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),po=p(),it=r("li"),pe=r("p"),fo=i("The available checkpoints are pre-trained on "),fe=r("a"),ho=i("ImageNet"),uo=i(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),jt=p(),z=r("p"),go=i("This model was contributed by "),he=r("a"),_o=i("matthijs"),bo=i(". The original code and weights can be found "),ue=r("a"),vo=i("here"),To=i("."),Pt=p(),q=r("h2"),J=r("a"),lt=r("span"),T(ge.$$.fragment),Mo=p(),ct=r("span"),wo=i("MobileViTConfig"),Ft=p(),E=r("div"),T(_e.$$.fragment),$o=p(),O=r("p"),Vo=i("This is the configuration class to store the configuration of a "),Se=r("a"),yo=i("MobileViTModel"),xo=i(`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),be=r("a"),Eo=i("Matthijs/mobilevit-small"),Co=i(" architecture."),Io=p(),S=r("p"),ko=i("Configuration objects inherit from "),De=r("a"),jo=i("PretrainedConfig"),Po=i(` and can be used to control the model outputs. Read the
documentation from `),Re=r("a"),Fo=i("PretrainedConfig"),No=i(" for more information."),zo=p(),T(X.$$.fragment),Nt=p(),D=r("h2"),Z=r("a"),dt=r("span"),T(ve.$$.fragment),Ao=p(),mt=r("span"),Lo=i("MobileViTFeatureExtractor"),zt=p(),C=r("div"),T(Te.$$.fragment),qo=p(),pt=r("p"),Oo=i("Constructs a MobileViT feature extractor."),So=p(),Me=r("p"),Do=i("This feature extractor inherits from "),Be=r("a"),Ro=i("FeatureExtractionMixin"),Bo=i(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Uo=p(),A=r("div"),T(we.$$.fragment),Wo=p(),ft=r("p"),Ho=i("Main method to prepare for the model one or several image(s)."),Go=p(),T(K.$$.fragment),At=p(),R=r("h2"),Q=r("a"),ht=r("span"),T($e.$$.fragment),Jo=p(),ut=r("span"),Xo=i("MobileViTModel"),Lt=p(),F=r("div"),T(Ve.$$.fragment),Zo=p(),ye=r("p"),Ko=i(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),xe=r("a"),Qo=i("torch.nn.Module"),Yo=i(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),er=p(),k=r("div"),T(Ee.$$.fragment),tr=p(),B=r("p"),or=i("The "),Ue=r("a"),rr=i("MobileViTModel"),ar=i(" forward method, overrides the "),gt=r("code"),sr=i("__call__"),nr=i(" special method."),ir=p(),T(Y.$$.fragment),lr=p(),T(ee.$$.fragment),qt=p(),U=r("h2"),te=r("a"),_t=r("span"),T(Ce.$$.fragment),cr=p(),bt=r("span"),dr=i("MobileViTForImageClassification"),Ot=p(),I=r("div"),T(Ie.$$.fragment),mr=p(),vt=r("p"),pr=i(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),fr=p(),ke=r("p"),hr=i("This model is a PyTorch "),je=r("a"),ur=i("torch.nn.Module"),gr=i(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),_r=p(),j=r("div"),T(Pe.$$.fragment),br=p(),W=r("p"),vr=i("The "),We=r("a"),Tr=i("MobileViTForImageClassification"),Mr=i(" forward method, overrides the "),Tt=r("code"),wr=i("__call__"),$r=i(" special method."),Vr=p(),T(oe.$$.fragment),yr=p(),T(re.$$.fragment),this.h()},l(t){const m=Ta('[data-svelte="svelte-1phssyn"]',document.head);c=a(m,"META",{name:!0,content:!0}),m.forEach(o),b=f(t),u=a(t,"H1",{class:!0});var Fe=s(u);h=a(Fe,"A",{id:!0,class:!0,href:!0});var Mt=s(h);v=a(Mt,"SPAN",{});var wt=s(v);M(n.$$.fragment,wt),wt.forEach(o),Mt.forEach(o),_=f(Fe),P=a(Fe,"SPAN",{});var $t=s(P);Kt=l($t,"MobileViT"),$t.forEach(o),Fe.forEach(o),yt=f(t),L=a(t,"H2",{class:!0});var Ne=s(L);H=a(Ne,"A",{id:!0,class:!0,href:!0});var Vt=s(H);tt=a(Vt,"SPAN",{});var kr=s(tt);M(ce.$$.fragment,kr),kr.forEach(o),Vt.forEach(o),Qt=f(Ne),ot=a(Ne,"SPAN",{});var jr=s(ot);Yt=l(jr,"Overview"),jr.forEach(o),Ne.forEach(o),xt=f(t),G=a(t,"P",{});var Dt=s(G);eo=l(Dt,"The MobileViT model was proposed in "),de=a(Dt,"A",{href:!0,rel:!0});var Pr=s(de);to=l(Pr,"MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Pr.forEach(o),oo=l(Dt," by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),Dt.forEach(o),Et=f(t),Ae=a(t,"P",{});var Fr=s(Ae);ro=l(Fr,"The abstract from the paper is the following:"),Fr.forEach(o),Ct=f(t),Le=a(t,"P",{});var Nr=s(Le);rt=a(Nr,"EM",{});var zr=s(rt);ao=l(zr,"Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),zr.forEach(o),Nr.forEach(o),It=f(t),qe=a(t,"P",{});var Ar=s(qe);so=l(Ar,"Tips:"),Ar.forEach(o),kt=f(t),N=a(t,"UL",{});var He=s(N);at=a(He,"LI",{});var Lr=s(at);st=a(Lr,"P",{});var qr=s(st);no=l(qr,"MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map."),qr.forEach(o),Lr.forEach(o),io=f(He),nt=a(He,"LI",{});var Or=s(nt);me=a(Or,"P",{});var Rt=s(me);lo=l(Rt,"One can use "),Oe=a(Rt,"A",{href:!0});var Sr=s(Oe);co=l(Sr,"MobileViTFeatureExtractor"),Sr.forEach(o),mo=l(Rt," to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),Rt.forEach(o),Or.forEach(o),po=f(He),it=a(He,"LI",{});var Dr=s(it);pe=a(Dr,"P",{});var Bt=s(pe);fo=l(Bt,"The available checkpoints are pre-trained on "),fe=a(Bt,"A",{href:!0,rel:!0});var Rr=s(fe);ho=l(Rr,"ImageNet"),Rr.forEach(o),uo=l(Bt," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),Bt.forEach(o),Dr.forEach(o),He.forEach(o),jt=f(t),z=a(t,"P",{});var Ge=s(z);go=l(Ge,"This model was contributed by "),he=a(Ge,"A",{href:!0,rel:!0});var Br=s(he);_o=l(Br,"matthijs"),Br.forEach(o),bo=l(Ge,". The original code and weights can be found "),ue=a(Ge,"A",{href:!0,rel:!0});var Ur=s(ue);vo=l(Ur,"here"),Ur.forEach(o),To=l(Ge,"."),Ge.forEach(o),Pt=f(t),q=a(t,"H2",{class:!0});var Ut=s(q);J=a(Ut,"A",{id:!0,class:!0,href:!0});var Wr=s(J);lt=a(Wr,"SPAN",{});var Hr=s(lt);M(ge.$$.fragment,Hr),Hr.forEach(o),Wr.forEach(o),Mo=f(Ut),ct=a(Ut,"SPAN",{});var Gr=s(ct);wo=l(Gr,"MobileViTConfig"),Gr.forEach(o),Ut.forEach(o),Ft=f(t),E=a(t,"DIV",{class:!0});var ae=s(E);M(_e.$$.fragment,ae),$o=f(ae),O=a(ae,"P",{});var Je=s(O);Vo=l(Je,"This is the configuration class to store the configuration of a "),Se=a(Je,"A",{href:!0});var Jr=s(Se);yo=l(Jr,"MobileViTModel"),Jr.forEach(o),xo=l(Je,`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),be=a(Je,"A",{href:!0,rel:!0});var Xr=s(be);Eo=l(Xr,"Matthijs/mobilevit-small"),Xr.forEach(o),Co=l(Je," architecture."),Je.forEach(o),Io=f(ae),S=a(ae,"P",{});var Xe=s(S);ko=l(Xe,"Configuration objects inherit from "),De=a(Xe,"A",{href:!0});var Zr=s(De);jo=l(Zr,"PretrainedConfig"),Zr.forEach(o),Po=l(Xe,` and can be used to control the model outputs. Read the
documentation from `),Re=a(Xe,"A",{href:!0});var Kr=s(Re);Fo=l(Kr,"PretrainedConfig"),Kr.forEach(o),No=l(Xe," for more information."),Xe.forEach(o),zo=f(ae),M(X.$$.fragment,ae),ae.forEach(o),Nt=f(t),D=a(t,"H2",{class:!0});var Wt=s(D);Z=a(Wt,"A",{id:!0,class:!0,href:!0});var Qr=s(Z);dt=a(Qr,"SPAN",{});var Yr=s(dt);M(ve.$$.fragment,Yr),Yr.forEach(o),Qr.forEach(o),Ao=f(Wt),mt=a(Wt,"SPAN",{});var ea=s(mt);Lo=l(ea,"MobileViTFeatureExtractor"),ea.forEach(o),Wt.forEach(o),zt=f(t),C=a(t,"DIV",{class:!0});var se=s(C);M(Te.$$.fragment,se),qo=f(se),pt=a(se,"P",{});var ta=s(pt);Oo=l(ta,"Constructs a MobileViT feature extractor."),ta.forEach(o),So=f(se),Me=a(se,"P",{});var Ht=s(Me);Do=l(Ht,"This feature extractor inherits from "),Be=a(Ht,"A",{href:!0});var oa=s(Be);Ro=l(oa,"FeatureExtractionMixin"),oa.forEach(o),Bo=l(Ht,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Ht.forEach(o),Uo=f(se),A=a(se,"DIV",{class:!0});var Ze=s(A);M(we.$$.fragment,Ze),Wo=f(Ze),ft=a(Ze,"P",{});var ra=s(ft);Ho=l(ra,"Main method to prepare for the model one or several image(s)."),ra.forEach(o),Go=f(Ze),M(K.$$.fragment,Ze),Ze.forEach(o),se.forEach(o),At=f(t),R=a(t,"H2",{class:!0});var Gt=s(R);Q=a(Gt,"A",{id:!0,class:!0,href:!0});var aa=s(Q);ht=a(aa,"SPAN",{});var sa=s(ht);M($e.$$.fragment,sa),sa.forEach(o),aa.forEach(o),Jo=f(Gt),ut=a(Gt,"SPAN",{});var na=s(ut);Xo=l(na,"MobileViTModel"),na.forEach(o),Gt.forEach(o),Lt=f(t),F=a(t,"DIV",{class:!0});var Ke=s(F);M(Ve.$$.fragment,Ke),Zo=f(Ke),ye=a(Ke,"P",{});var Jt=s(ye);Ko=l(Jt,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),xe=a(Jt,"A",{href:!0,rel:!0});var ia=s(xe);Qo=l(ia,"torch.nn.Module"),ia.forEach(o),Yo=l(Jt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jt.forEach(o),er=f(Ke),k=a(Ke,"DIV",{class:!0});var ne=s(k);M(Ee.$$.fragment,ne),tr=f(ne),B=a(ne,"P",{});var Qe=s(B);or=l(Qe,"The "),Ue=a(Qe,"A",{href:!0});var la=s(Ue);rr=l(la,"MobileViTModel"),la.forEach(o),ar=l(Qe," forward method, overrides the "),gt=a(Qe,"CODE",{});var ca=s(gt);sr=l(ca,"__call__"),ca.forEach(o),nr=l(Qe," special method."),Qe.forEach(o),ir=f(ne),M(Y.$$.fragment,ne),lr=f(ne),M(ee.$$.fragment,ne),ne.forEach(o),Ke.forEach(o),qt=f(t),U=a(t,"H2",{class:!0});var Xt=s(U);te=a(Xt,"A",{id:!0,class:!0,href:!0});var da=s(te);_t=a(da,"SPAN",{});var ma=s(_t);M(Ce.$$.fragment,ma),ma.forEach(o),da.forEach(o),cr=f(Xt),bt=a(Xt,"SPAN",{});var pa=s(bt);dr=l(pa,"MobileViTForImageClassification"),pa.forEach(o),Xt.forEach(o),Ot=f(t),I=a(t,"DIV",{class:!0});var ie=s(I);M(Ie.$$.fragment,ie),mr=f(ie),vt=a(ie,"P",{});var fa=s(vt);pr=l(fa,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),fa.forEach(o),fr=f(ie),ke=a(ie,"P",{});var Zt=s(ke);hr=l(Zt,"This model is a PyTorch "),je=a(Zt,"A",{href:!0,rel:!0});var ha=s(je);ur=l(ha,"torch.nn.Module"),ha.forEach(o),gr=l(Zt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Zt.forEach(o),_r=f(ie),j=a(ie,"DIV",{class:!0});var le=s(j);M(Pe.$$.fragment,le),br=f(le),W=a(le,"P",{});var Ye=s(W);vr=l(Ye,"The "),We=a(Ye,"A",{href:!0});var ua=s(We);Tr=l(ua,"MobileViTForImageClassification"),ua.forEach(o),Mr=l(Ye," forward method, overrides the "),Tt=a(Ye,"CODE",{});var ga=s(Tt);wr=l(ga,"__call__"),ga.forEach(o),$r=l(Ye," special method."),Ye.forEach(o),Vr=f(le),M(oe.$$.fragment,le),yr=f(le),M(re.$$.fragment,le),le.forEach(o),ie.forEach(o),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(Ia)),d(h,"id","mobilevit"),d(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h,"href","#mobilevit"),d(u,"class","relative group"),d(H,"id","overview"),d(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H,"href","#overview"),d(L,"class","relative group"),d(de,"href","https://arxiv.org/abs/2110.02178"),d(de,"rel","nofollow"),d(Oe,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(fe,"href","http://www.image-net.org/challenges/LSVRC/2012/"),d(fe,"rel","nofollow"),d(he,"href","https://huggingface.co/Matthijs"),d(he,"rel","nofollow"),d(ue,"href","https://github.com/apple/ml-cvnets"),d(ue,"rel","nofollow"),d(J,"id","transformers.MobileViTConfig"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#transformers.MobileViTConfig"),d(q,"class","relative group"),d(Se,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel"),d(be,"href","https://huggingface.co/Matthijs/mobilevit-small"),d(be,"rel","nofollow"),d(De,"href","/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig"),d(Re,"href","/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig"),d(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"id","transformers.MobileViTFeatureExtractor"),d(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z,"href","#transformers.MobileViTFeatureExtractor"),d(D,"class","relative group"),d(Be,"href","/docs/transformers/pr_17205/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"id","transformers.MobileViTModel"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#transformers.MobileViTModel"),d(R,"class","relative group"),d(xe,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(xe,"rel","nofollow"),d(Ue,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel"),d(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"id","transformers.MobileViTForImageClassification"),d(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(te,"href","#transformers.MobileViTForImageClassification"),d(U,"class","relative group"),d(je,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(je,"rel","nofollow"),d(We,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,m){e(document.head,c),g(t,b,m),g(t,u,m),e(u,h),e(h,v),w(n,v,null),e(u,_),e(u,P),e(P,Kt),g(t,yt,m),g(t,L,m),e(L,H),e(H,tt),w(ce,tt,null),e(L,Qt),e(L,ot),e(ot,Yt),g(t,xt,m),g(t,G,m),e(G,eo),e(G,de),e(de,to),e(G,oo),g(t,Et,m),g(t,Ae,m),e(Ae,ro),g(t,Ct,m),g(t,Le,m),e(Le,rt),e(rt,ao),g(t,It,m),g(t,qe,m),e(qe,so),g(t,kt,m),g(t,N,m),e(N,at),e(at,st),e(st,no),e(N,io),e(N,nt),e(nt,me),e(me,lo),e(me,Oe),e(Oe,co),e(me,mo),e(N,po),e(N,it),e(it,pe),e(pe,fo),e(pe,fe),e(fe,ho),e(pe,uo),g(t,jt,m),g(t,z,m),e(z,go),e(z,he),e(he,_o),e(z,bo),e(z,ue),e(ue,vo),e(z,To),g(t,Pt,m),g(t,q,m),e(q,J),e(J,lt),w(ge,lt,null),e(q,Mo),e(q,ct),e(ct,wo),g(t,Ft,m),g(t,E,m),w(_e,E,null),e(E,$o),e(E,O),e(O,Vo),e(O,Se),e(Se,yo),e(O,xo),e(O,be),e(be,Eo),e(O,Co),e(E,Io),e(E,S),e(S,ko),e(S,De),e(De,jo),e(S,Po),e(S,Re),e(Re,Fo),e(S,No),e(E,zo),w(X,E,null),g(t,Nt,m),g(t,D,m),e(D,Z),e(Z,dt),w(ve,dt,null),e(D,Ao),e(D,mt),e(mt,Lo),g(t,zt,m),g(t,C,m),w(Te,C,null),e(C,qo),e(C,pt),e(pt,Oo),e(C,So),e(C,Me),e(Me,Do),e(Me,Be),e(Be,Ro),e(Me,Bo),e(C,Uo),e(C,A),w(we,A,null),e(A,Wo),e(A,ft),e(ft,Ho),e(A,Go),w(K,A,null),g(t,At,m),g(t,R,m),e(R,Q),e(Q,ht),w($e,ht,null),e(R,Jo),e(R,ut),e(ut,Xo),g(t,Lt,m),g(t,F,m),w(Ve,F,null),e(F,Zo),e(F,ye),e(ye,Ko),e(ye,xe),e(xe,Qo),e(ye,Yo),e(F,er),e(F,k),w(Ee,k,null),e(k,tr),e(k,B),e(B,or),e(B,Ue),e(Ue,rr),e(B,ar),e(B,gt),e(gt,sr),e(B,nr),e(k,ir),w(Y,k,null),e(k,lr),w(ee,k,null),g(t,qt,m),g(t,U,m),e(U,te),e(te,_t),w(Ce,_t,null),e(U,cr),e(U,bt),e(bt,dr),g(t,Ot,m),g(t,I,m),w(Ie,I,null),e(I,mr),e(I,vt),e(vt,pr),e(I,fr),e(I,ke),e(ke,hr),e(ke,je),e(je,ur),e(ke,gr),e(I,_r),e(I,j),w(Pe,j,null),e(j,br),e(j,W),e(W,vr),e(W,We),e(We,Tr),e(W,Mr),e(W,Tt),e(Tt,wr),e(W,$r),e(j,Vr),w(oe,j,null),e(j,yr),w(re,j,null),St=!0},p(t,[m]){const Fe={};m&2&&(Fe.$$scope={dirty:m,ctx:t}),X.$set(Fe);const Mt={};m&2&&(Mt.$$scope={dirty:m,ctx:t}),K.$set(Mt);const wt={};m&2&&(wt.$$scope={dirty:m,ctx:t}),Y.$set(wt);const $t={};m&2&&($t.$$scope={dirty:m,ctx:t}),ee.$set($t);const Ne={};m&2&&(Ne.$$scope={dirty:m,ctx:t}),oe.$set(Ne);const Vt={};m&2&&(Vt.$$scope={dirty:m,ctx:t}),re.$set(Vt)},i(t){St||($(n.$$.fragment,t),$(ce.$$.fragment,t),$(ge.$$.fragment,t),$(_e.$$.fragment,t),$(X.$$.fragment,t),$(ve.$$.fragment,t),$(Te.$$.fragment,t),$(we.$$.fragment,t),$(K.$$.fragment,t),$($e.$$.fragment,t),$(Ve.$$.fragment,t),$(Ee.$$.fragment,t),$(Y.$$.fragment,t),$(ee.$$.fragment,t),$(Ce.$$.fragment,t),$(Ie.$$.fragment,t),$(Pe.$$.fragment,t),$(oe.$$.fragment,t),$(re.$$.fragment,t),St=!0)},o(t){V(n.$$.fragment,t),V(ce.$$.fragment,t),V(ge.$$.fragment,t),V(_e.$$.fragment,t),V(X.$$.fragment,t),V(ve.$$.fragment,t),V(Te.$$.fragment,t),V(we.$$.fragment,t),V(K.$$.fragment,t),V($e.$$.fragment,t),V(Ve.$$.fragment,t),V(Ee.$$.fragment,t),V(Y.$$.fragment,t),V(ee.$$.fragment,t),V(Ce.$$.fragment,t),V(Ie.$$.fragment,t),V(Pe.$$.fragment,t),V(oe.$$.fragment,t),V(re.$$.fragment,t),St=!1},d(t){o(c),t&&o(b),t&&o(u),y(n),t&&o(yt),t&&o(L),y(ce),t&&o(xt),t&&o(G),t&&o(Et),t&&o(Ae),t&&o(Ct),t&&o(Le),t&&o(It),t&&o(qe),t&&o(kt),t&&o(N),t&&o(jt),t&&o(z),t&&o(Pt),t&&o(q),y(ge),t&&o(Ft),t&&o(E),y(_e),y(X),t&&o(Nt),t&&o(D),y(ve),t&&o(zt),t&&o(C),y(Te),y(we),y(K),t&&o(At),t&&o(R),y($e),t&&o(Lt),t&&o(F),y(Ve),y(Ee),y(Y),y(ee),t&&o(qt),t&&o(U),y(Ce),t&&o(Ot),t&&o(I),y(Ie),y(Pe),y(oe),y(re)}}}const Ia={local:"mobilevit",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileViTConfig",title:"MobileViTConfig"},{local:"transformers.MobileViTFeatureExtractor",title:"MobileViTFeatureExtractor"},{local:"transformers.MobileViTModel",title:"MobileViTModel"},{local:"transformers.MobileViTForImageClassification",title:"MobileViTForImageClassification"}],title:"MobileViT"};function ka(x){return Ma(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class La extends _a{constructor(c){super();ba(this,c,ka,Ca,va,{})}}export{La as default,Ia as metadata};
