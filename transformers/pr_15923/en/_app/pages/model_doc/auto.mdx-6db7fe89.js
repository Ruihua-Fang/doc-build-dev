import{S as V5t,i as z5t,s as W5t,e as a,k as l,w as f,t as o,M as Q5t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as $8r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function H5t($i){let J,Be,de,me,so,ce,ue,Go,Ii,$f,ca,ji,Di,DM,If,ye,co,Ni,On,NM,Gn,Xn,qM,qi,Vn,OM,Oi,jf,Na;return{c(){J=a("p"),Be=o("If your "),de=a("code"),me=o("NewModelConfig"),so=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Ii=a("code"),$f=o("model_type"),ca=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),DM=o(")."),If=l(),ye=a("p"),co=o("Likewise, if your "),Ni=a("code"),On=o("NewModel"),NM=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),qM=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),OM=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Na=o(")."),this.h()},l(fo){J=n(fo,"P",{});var ge=s(J);Be=r(ge,"If your "),de=n(ge,"CODE",{});var k8=s(de);me=r(k8,"NewModelConfig"),k8.forEach(t),so=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Gi=s(ce);ue=r(Gi,"PretrainedConfig"),Gi.forEach(t),Go=r(ge,`, make sure its
`),Ii=n(ge,"CODE",{});var R8=s(Ii);$f=r(R8,"model_type"),R8.forEach(t),ca=r(ge," attribute is set to the same key you use when registering the config (here "),ji=n(ge,"CODE",{});var S8=s(ji);Di=r(S8,'"new-model"'),S8.forEach(t),DM=r(ge,")."),ge.forEach(t),If=i(fo),ye=n(fo,"P",{});var Xo=s(ye);co=r(Xo,"Likewise, if your "),Ni=n(Xo,"CODE",{});var qa=s(Ni);On=r(qa,"NewModel"),qa.forEach(t),NM=r(Xo," is a subclass of "),Gn=n(Xo,"A",{href:!0});var P8=s(Gn);Xn=r(P8,"PreTrainedModel"),P8.forEach(t),qM=r(Xo,`, make sure its
`),qi=n(Xo,"CODE",{});var Df=s(qi);Vn=r(Df,"config_class"),Df.forEach(t),OM=r(Xo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(Xo,"CODE",{});var $8=s(Oi);jf=r($8,"NewModelConfig"),$8.forEach(t),Na=r(Xo,")."),Xo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ge){b(fo,J,ge),e(J,Be),e(J,de),e(de,me),e(J,so),e(J,ce),e(ce,ue),e(J,Go),e(J,Ii),e(Ii,$f),e(J,ca),e(J,ji),e(ji,Di),e(J,DM),b(fo,If,ge),b(fo,ye,ge),e(ye,co),e(ye,Ni),e(Ni,On),e(ye,NM),e(ye,Gn),e(Gn,Xn),e(ye,qM),e(ye,qi),e(qi,Vn),e(ye,OM),e(ye,Oi),e(Oi,jf),e(ye,Na)},d(fo){fo&&t(J),fo&&t(If),fo&&t(ye)}}}function U5t($i){let J,Be,de,me,so;return{c(){J=a("p"),Be=o("Passing "),de=a("code"),me=o("use_auth_token=True"),so=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),de=n(ue,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),so=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,de),e(de,me),e(J,so)},d(ce){ce&&t(J)}}}function J5t($i){let J,Be,de,me,so;return{c(){J=a("p"),Be=o("Passing "),de=a("code"),me=o("use_auth_token=True"),so=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),de=n(ue,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),so=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,de),e(de,me),e(J,so)},d(ce){ce&&t(J)}}}function Y5t($i){let J,Be,de,me,so,ce,ue,Go,Ii,$f,ca,ji,Di,DM,If,ye,co,Ni,On,NM,Gn,Xn,qM,qi,Vn,OM,Oi,jf,Na,fo,ge,k8,Gi,R8,S8,Xo,qa,P8,Df,$8,DSe,EBe,Xi,Nf,JW,GM,NSe,YW,qSe,yBe,zn,OSe,KW,GSe,XSe,ZW,VSe,zSe,wBe,XM,ABe,I8,WSe,LBe,qf,BBe,Vi,Of,eQ,VM,QSe,oQ,HSe,xBe,Vo,zM,USe,WM,JSe,j8,YSe,KSe,ZSe,QM,ePe,rQ,oPe,rPe,tPe,mo,HM,aPe,tQ,nPe,sPe,zi,lPe,aQ,iPe,dPe,nQ,cPe,fPe,mPe,v,Gf,sQ,gPe,hPe,D8,pPe,_Pe,uPe,Xf,lQ,bPe,vPe,N8,TPe,FPe,CPe,Vf,iQ,MPe,EPe,q8,yPe,wPe,APe,zf,dQ,LPe,BPe,O8,xPe,kPe,RPe,Wf,cQ,SPe,PPe,G8,$Pe,IPe,jPe,Qf,fQ,DPe,NPe,X8,qPe,OPe,GPe,Hf,mQ,XPe,VPe,V8,zPe,WPe,QPe,Uf,gQ,HPe,UPe,z8,JPe,YPe,KPe,Jf,hQ,ZPe,e$e,W8,o$e,r$e,t$e,Yf,pQ,a$e,n$e,Q8,s$e,l$e,i$e,Kf,_Q,d$e,c$e,H8,f$e,m$e,g$e,Zf,uQ,h$e,p$e,U8,_$e,u$e,b$e,em,bQ,v$e,T$e,J8,F$e,C$e,M$e,om,vQ,E$e,y$e,Y8,w$e,A$e,L$e,rm,TQ,B$e,x$e,K8,k$e,R$e,S$e,tm,FQ,P$e,$$e,Z8,I$e,j$e,D$e,am,CQ,N$e,q$e,e7,O$e,G$e,X$e,nm,MQ,V$e,z$e,o7,W$e,Q$e,H$e,sm,EQ,U$e,J$e,r7,Y$e,K$e,Z$e,lm,yQ,eIe,oIe,t7,rIe,tIe,aIe,im,wQ,nIe,sIe,a7,lIe,iIe,dIe,dm,AQ,cIe,fIe,n7,mIe,gIe,hIe,cm,LQ,pIe,_Ie,s7,uIe,bIe,vIe,fm,BQ,TIe,FIe,l7,CIe,MIe,EIe,mm,xQ,yIe,wIe,i7,AIe,LIe,BIe,gm,kQ,xIe,kIe,d7,RIe,SIe,PIe,hm,RQ,$Ie,IIe,c7,jIe,DIe,NIe,pm,SQ,qIe,OIe,f7,GIe,XIe,VIe,_m,PQ,zIe,WIe,m7,QIe,HIe,UIe,um,$Q,JIe,YIe,g7,KIe,ZIe,eje,bm,IQ,oje,rje,h7,tje,aje,nje,vm,jQ,sje,lje,p7,ije,dje,cje,Tm,DQ,fje,mje,_7,gje,hje,pje,Fm,NQ,_je,uje,u7,bje,vje,Tje,Cm,qQ,Fje,Cje,b7,Mje,Eje,yje,Mm,OQ,wje,Aje,v7,Lje,Bje,xje,Em,GQ,kje,Rje,T7,Sje,Pje,$je,ym,XQ,Ije,jje,F7,Dje,Nje,qje,wm,VQ,Oje,Gje,C7,Xje,Vje,zje,Am,zQ,Wje,Qje,M7,Hje,Uje,Jje,Lm,WQ,Yje,Kje,E7,Zje,eDe,oDe,Bm,QQ,rDe,tDe,y7,aDe,nDe,sDe,xm,HQ,lDe,iDe,w7,dDe,cDe,fDe,km,UQ,mDe,gDe,A7,hDe,pDe,_De,Rm,JQ,uDe,bDe,L7,vDe,TDe,FDe,Sm,YQ,CDe,MDe,B7,EDe,yDe,wDe,Pm,KQ,ADe,LDe,x7,BDe,xDe,kDe,$m,ZQ,RDe,SDe,k7,PDe,$De,IDe,Im,eH,jDe,DDe,R7,NDe,qDe,ODe,jm,oH,GDe,XDe,S7,VDe,zDe,WDe,Dm,rH,QDe,HDe,P7,UDe,JDe,YDe,Nm,tH,KDe,ZDe,$7,eNe,oNe,rNe,qm,aH,tNe,aNe,I7,nNe,sNe,lNe,Om,nH,iNe,dNe,j7,cNe,fNe,mNe,Gm,sH,gNe,hNe,D7,pNe,_Ne,uNe,Xm,lH,bNe,vNe,N7,TNe,FNe,CNe,Vm,iH,MNe,ENe,q7,yNe,wNe,ANe,zm,dH,LNe,BNe,O7,xNe,kNe,RNe,Wm,cH,SNe,PNe,G7,$Ne,INe,jNe,Qm,fH,DNe,NNe,X7,qNe,ONe,GNe,Hm,mH,XNe,VNe,V7,zNe,WNe,QNe,Um,gH,HNe,UNe,z7,JNe,YNe,KNe,Jm,hH,ZNe,eqe,W7,oqe,rqe,tqe,Ym,pH,aqe,nqe,Q7,sqe,lqe,iqe,Km,_H,dqe,cqe,H7,fqe,mqe,gqe,Zm,uH,hqe,pqe,U7,_qe,uqe,bqe,eg,bH,vqe,Tqe,J7,Fqe,Cqe,Mqe,og,vH,Eqe,yqe,Y7,wqe,Aqe,Lqe,rg,TH,Bqe,xqe,K7,kqe,Rqe,Sqe,tg,FH,Pqe,$qe,Z7,Iqe,jqe,Dqe,ag,CH,Nqe,qqe,eB,Oqe,Gqe,Xqe,ng,MH,Vqe,zqe,oB,Wqe,Qqe,Hqe,sg,EH,Uqe,Jqe,rB,Yqe,Kqe,Zqe,lg,yH,eOe,oOe,tB,rOe,tOe,aOe,ig,wH,nOe,sOe,aB,lOe,iOe,dOe,dg,AH,cOe,fOe,nB,mOe,gOe,hOe,cg,LH,pOe,_Oe,sB,uOe,bOe,vOe,fg,BH,TOe,FOe,lB,COe,MOe,EOe,mg,xH,yOe,wOe,iB,AOe,LOe,BOe,gg,kH,xOe,kOe,dB,ROe,SOe,POe,hg,RH,$Oe,IOe,cB,jOe,DOe,NOe,pg,SH,qOe,OOe,fB,GOe,XOe,VOe,_g,PH,zOe,WOe,mB,QOe,HOe,UOe,ug,$H,JOe,YOe,gB,KOe,ZOe,eGe,bg,IH,oGe,rGe,hB,tGe,aGe,nGe,vg,jH,sGe,lGe,pB,iGe,dGe,cGe,Tg,DH,fGe,mGe,_B,gGe,hGe,pGe,Fg,NH,_Ge,uGe,uB,bGe,vGe,TGe,Cg,qH,FGe,CGe,bB,MGe,EGe,yGe,Mg,OH,wGe,AGe,vB,LGe,BGe,xGe,Eg,GH,kGe,RGe,TB,SGe,PGe,$Ge,yg,XH,IGe,jGe,FB,DGe,NGe,qGe,wg,VH,OGe,GGe,CB,XGe,VGe,zGe,Ag,zH,WGe,QGe,MB,HGe,UGe,JGe,WH,YGe,KGe,UM,ZGe,Lg,JM,eXe,QH,oXe,kBe,Wi,Bg,HH,YM,rXe,UH,tXe,RBe,zo,KM,aXe,ZM,nXe,EB,sXe,lXe,iXe,eE,dXe,JH,cXe,fXe,mXe,go,oE,gXe,YH,hXe,pXe,Oa,_Xe,KH,uXe,bXe,ZH,vXe,TXe,eU,FXe,CXe,MXe,E,Wn,oU,EXe,yXe,yB,wXe,AXe,wB,LXe,BXe,xXe,Qn,rU,kXe,RXe,AB,SXe,PXe,LB,$Xe,IXe,jXe,Hn,tU,DXe,NXe,BB,qXe,OXe,xB,GXe,XXe,VXe,xg,aU,zXe,WXe,kB,QXe,HXe,UXe,Un,nU,JXe,YXe,RB,KXe,ZXe,SB,eVe,oVe,rVe,kg,sU,tVe,aVe,PB,nVe,sVe,lVe,Rg,lU,iVe,dVe,$B,cVe,fVe,mVe,Sg,iU,gVe,hVe,IB,pVe,_Ve,uVe,Jn,dU,bVe,vVe,jB,TVe,FVe,DB,CVe,MVe,EVe,Yn,cU,yVe,wVe,NB,AVe,LVe,qB,BVe,xVe,kVe,Kn,fU,RVe,SVe,OB,PVe,$Ve,GB,IVe,jVe,DVe,Pg,mU,NVe,qVe,XB,OVe,GVe,XVe,$g,gU,VVe,zVe,VB,WVe,QVe,HVe,Zn,hU,UVe,JVe,zB,YVe,KVe,WB,ZVe,eze,oze,Ig,pU,rze,tze,QB,aze,nze,sze,es,_U,lze,ize,HB,dze,cze,UB,fze,mze,gze,os,uU,hze,pze,JB,_ze,uze,YB,bze,vze,Tze,rs,bU,Fze,Cze,KB,Mze,Eze,vU,yze,wze,Aze,jg,TU,Lze,Bze,ZB,xze,kze,Rze,ts,FU,Sze,Pze,ex,$ze,Ize,ox,jze,Dze,Nze,Dg,CU,qze,Oze,rx,Gze,Xze,Vze,as,MU,zze,Wze,tx,Qze,Hze,ax,Uze,Jze,Yze,ns,EU,Kze,Zze,nx,eWe,oWe,sx,rWe,tWe,aWe,ss,yU,nWe,sWe,lx,lWe,iWe,ix,dWe,cWe,fWe,Ng,wU,mWe,gWe,dx,hWe,pWe,_We,ls,AU,uWe,bWe,cx,vWe,TWe,fx,FWe,CWe,MWe,qg,LU,EWe,yWe,mx,wWe,AWe,LWe,is,BU,BWe,xWe,gx,kWe,RWe,hx,SWe,PWe,$We,ds,xU,IWe,jWe,px,DWe,NWe,_x,qWe,OWe,GWe,cs,kU,XWe,VWe,ux,zWe,WWe,bx,QWe,HWe,UWe,fs,RU,JWe,YWe,vx,KWe,ZWe,Tx,eQe,oQe,rQe,Og,SU,tQe,aQe,Fx,nQe,sQe,lQe,ms,PU,iQe,dQe,Cx,cQe,fQe,Mx,mQe,gQe,hQe,gs,$U,pQe,_Qe,Ex,uQe,bQe,yx,vQe,TQe,FQe,hs,IU,CQe,MQe,wx,EQe,yQe,Ax,wQe,AQe,LQe,ps,jU,BQe,xQe,Lx,kQe,RQe,Bx,SQe,PQe,$Qe,_s,DU,IQe,jQe,xx,DQe,NQe,kx,qQe,OQe,GQe,us,NU,XQe,VQe,Rx,zQe,WQe,Sx,QQe,HQe,UQe,Gg,qU,JQe,YQe,Px,KQe,ZQe,eHe,bs,OU,oHe,rHe,$x,tHe,aHe,Ix,nHe,sHe,lHe,Xg,GU,iHe,dHe,jx,cHe,fHe,mHe,Vg,XU,gHe,hHe,Dx,pHe,_He,uHe,vs,VU,bHe,vHe,Nx,THe,FHe,qx,CHe,MHe,EHe,Ts,zU,yHe,wHe,Ox,AHe,LHe,Gx,BHe,xHe,kHe,zg,WU,RHe,SHe,Xx,PHe,$He,IHe,Fs,QU,jHe,DHe,Vx,NHe,qHe,zx,OHe,GHe,XHe,Cs,HU,VHe,zHe,Wx,WHe,QHe,Qx,HHe,UHe,JHe,Ms,UU,YHe,KHe,Hx,ZHe,eUe,Ux,oUe,rUe,tUe,Es,JU,aUe,nUe,Jx,sUe,lUe,Yx,iUe,dUe,cUe,ys,YU,fUe,mUe,Kx,gUe,hUe,Zx,pUe,_Ue,uUe,Wg,KU,bUe,vUe,ek,TUe,FUe,CUe,Qg,ZU,MUe,EUe,ok,yUe,wUe,AUe,Hg,eJ,LUe,BUe,rk,xUe,kUe,RUe,Ug,oJ,SUe,PUe,tk,$Ue,IUe,jUe,ws,rJ,DUe,NUe,ak,qUe,OUe,nk,GUe,XUe,VUe,Jg,tJ,zUe,WUe,sk,QUe,HUe,UUe,As,aJ,JUe,YUe,lk,KUe,ZUe,ik,eJe,oJe,rJe,Ls,nJ,tJe,aJe,dk,nJe,sJe,ck,lJe,iJe,dJe,Bs,sJ,cJe,fJe,fk,mJe,gJe,mk,hJe,pJe,_Je,xs,lJ,uJe,bJe,gk,vJe,TJe,hk,FJe,CJe,MJe,ks,iJ,EJe,yJe,pk,wJe,AJe,_k,LJe,BJe,xJe,Rs,dJ,kJe,RJe,uk,SJe,PJe,bk,$Je,IJe,jJe,Yg,cJ,DJe,NJe,vk,qJe,OJe,GJe,Kg,fJ,XJe,VJe,Tk,zJe,WJe,QJe,Ss,mJ,HJe,UJe,Fk,JJe,YJe,Ck,KJe,ZJe,eYe,Ps,gJ,oYe,rYe,Mk,tYe,aYe,Ek,nYe,sYe,lYe,$s,hJ,iYe,dYe,yk,cYe,fYe,wk,mYe,gYe,hYe,Zg,pJ,pYe,_Ye,Ak,uYe,bYe,vYe,eh,_J,TYe,FYe,Lk,CYe,MYe,EYe,oh,uJ,yYe,wYe,Bk,AYe,LYe,BYe,rh,bJ,xYe,kYe,xk,RYe,SYe,PYe,Is,vJ,$Ye,IYe,kk,jYe,DYe,Rk,NYe,qYe,OYe,th,TJ,GYe,XYe,Sk,VYe,zYe,WYe,ah,FJ,QYe,HYe,Pk,UYe,JYe,YYe,js,CJ,KYe,ZYe,$k,eKe,oKe,Ik,rKe,tKe,aKe,Ds,MJ,nKe,sKe,jk,lKe,iKe,Dk,dKe,cKe,fKe,EJ,mKe,gKe,rE,hKe,nh,tE,pKe,yJ,_Ke,SBe,Qi,sh,wJ,aE,uKe,AJ,bKe,PBe,Wo,nE,vKe,sE,TKe,Nk,FKe,CKe,MKe,lE,EKe,LJ,yKe,wKe,AKe,xe,iE,LKe,BJ,BKe,xKe,Ga,kKe,xJ,RKe,SKe,kJ,PKe,$Ke,RJ,IKe,jKe,DKe,ae,lh,SJ,NKe,qKe,qk,OKe,GKe,XKe,ih,PJ,VKe,zKe,Ok,WKe,QKe,HKe,dh,$J,UKe,JKe,Gk,YKe,KKe,ZKe,ch,IJ,eZe,oZe,Xk,rZe,tZe,aZe,fh,jJ,nZe,sZe,Vk,lZe,iZe,dZe,mh,DJ,cZe,fZe,zk,mZe,gZe,hZe,gh,NJ,pZe,_Ze,Wk,uZe,bZe,vZe,hh,qJ,TZe,FZe,Qk,CZe,MZe,EZe,ph,OJ,yZe,wZe,Hk,AZe,LZe,BZe,_h,GJ,xZe,kZe,Uk,RZe,SZe,PZe,uh,XJ,$Ze,IZe,Jk,jZe,DZe,NZe,bh,VJ,qZe,OZe,Yk,GZe,XZe,VZe,vh,zJ,zZe,WZe,Kk,QZe,HZe,UZe,Th,WJ,JZe,YZe,Zk,KZe,ZZe,eeo,Fh,QJ,oeo,reo,eR,teo,aeo,neo,Ch,HJ,seo,leo,oR,ieo,deo,ceo,Mh,feo,UJ,meo,geo,dE,heo,Eh,cE,peo,JJ,_eo,$Be,Hi,yh,YJ,fE,ueo,KJ,beo,IBe,Qo,mE,veo,gE,Teo,rR,Feo,Ceo,Meo,hE,Eeo,ZJ,yeo,weo,Aeo,ke,pE,Leo,eY,Beo,xeo,Ui,keo,oY,Reo,Seo,rY,Peo,$eo,Ieo,we,wh,tY,jeo,Deo,tR,Neo,qeo,Oeo,Ah,aY,Geo,Xeo,aR,Veo,zeo,Weo,Lh,nY,Qeo,Heo,nR,Ueo,Jeo,Yeo,Bh,sY,Keo,Zeo,sR,eoo,ooo,roo,xh,lY,too,aoo,lR,noo,soo,loo,kh,iY,ioo,doo,iR,coo,foo,moo,Rh,dY,goo,hoo,dR,poo,_oo,uoo,Sh,cY,boo,voo,cR,Too,Foo,Coo,Ph,Moo,fY,Eoo,yoo,_E,woo,$h,uE,Aoo,mY,Loo,jBe,Ji,Ih,gY,bE,Boo,hY,xoo,DBe,Ho,vE,koo,Yi,Roo,pY,Soo,Poo,_Y,$oo,Ioo,joo,TE,Doo,uY,Noo,qoo,Ooo,Gr,FE,Goo,bY,Xoo,Voo,Ki,zoo,vY,Woo,Qoo,TY,Hoo,Uoo,Joo,FY,Yoo,Koo,CE,Zoo,Re,ME,ero,CY,oro,rro,Xa,tro,MY,aro,nro,EY,sro,lro,yY,iro,dro,cro,F,jh,wY,fro,mro,fR,gro,hro,pro,Dh,AY,_ro,uro,mR,bro,vro,Tro,Nh,LY,Fro,Cro,gR,Mro,Ero,yro,qh,BY,wro,Aro,hR,Lro,Bro,xro,Oh,xY,kro,Rro,pR,Sro,Pro,$ro,Gh,kY,Iro,jro,_R,Dro,Nro,qro,Xh,RY,Oro,Gro,uR,Xro,Vro,zro,Vh,SY,Wro,Qro,bR,Hro,Uro,Jro,zh,PY,Yro,Kro,vR,Zro,eto,oto,Wh,$Y,rto,tto,TR,ato,nto,sto,Qh,IY,lto,ito,FR,dto,cto,fto,Hh,jY,mto,gto,CR,hto,pto,_to,Uh,DY,uto,bto,MR,vto,Tto,Fto,Jh,NY,Cto,Mto,ER,Eto,yto,wto,Yh,qY,Ato,Lto,yR,Bto,xto,kto,Kh,OY,Rto,Sto,wR,Pto,$to,Ito,Zh,GY,jto,Dto,AR,Nto,qto,Oto,ep,XY,Gto,Xto,LR,Vto,zto,Wto,op,VY,Qto,Hto,BR,Uto,Jto,Yto,rp,zY,Kto,Zto,xR,eao,oao,rao,tp,WY,tao,aao,kR,nao,sao,lao,ap,QY,iao,dao,RR,cao,fao,mao,np,HY,gao,hao,SR,pao,_ao,uao,sp,UY,bao,vao,PR,Tao,Fao,Cao,lp,JY,Mao,Eao,$R,yao,wao,Aao,ip,YY,Lao,Bao,IR,xao,kao,Rao,dp,KY,Sao,Pao,jR,$ao,Iao,jao,Ns,ZY,Dao,Nao,DR,qao,Oao,NR,Gao,Xao,Vao,cp,eK,zao,Wao,qR,Qao,Hao,Uao,fp,oK,Jao,Yao,OR,Kao,Zao,eno,mp,rK,ono,rno,GR,tno,ano,nno,gp,tK,sno,lno,XR,ino,dno,cno,hp,aK,fno,mno,VR,gno,hno,pno,pp,nK,_no,uno,zR,bno,vno,Tno,_p,sK,Fno,Cno,WR,Mno,Eno,yno,up,lK,wno,Ano,QR,Lno,Bno,xno,bp,iK,kno,Rno,HR,Sno,Pno,$no,vp,dK,Ino,jno,UR,Dno,Nno,qno,Tp,cK,Ono,Gno,JR,Xno,Vno,zno,Fp,fK,Wno,Qno,YR,Hno,Uno,Jno,Cp,mK,Yno,Kno,KR,Zno,eso,oso,Mp,gK,rso,tso,ZR,aso,nso,sso,Ep,hK,lso,iso,eS,dso,cso,fso,yp,pK,mso,gso,oS,hso,pso,_so,wp,_K,uso,bso,rS,vso,Tso,Fso,Ap,uK,Cso,Mso,tS,Eso,yso,wso,Lp,bK,Aso,Lso,aS,Bso,xso,kso,Bp,vK,Rso,Sso,nS,Pso,$so,Iso,xp,TK,jso,Dso,sS,Nso,qso,Oso,kp,FK,Gso,Xso,lS,Vso,zso,Wso,Rp,CK,Qso,Hso,iS,Uso,Jso,Yso,Sp,MK,Kso,Zso,dS,elo,olo,rlo,Pp,EK,tlo,alo,cS,nlo,slo,llo,$p,yK,ilo,dlo,fS,clo,flo,mlo,Ip,wK,glo,hlo,mS,plo,_lo,ulo,jp,AK,blo,vlo,gS,Tlo,Flo,Clo,Dp,LK,Mlo,Elo,hS,ylo,wlo,Alo,Np,BK,Llo,Blo,pS,xlo,klo,Rlo,qp,xK,Slo,Plo,_S,$lo,Ilo,jlo,Op,kK,Dlo,Nlo,uS,qlo,Olo,Glo,Gp,RK,Xlo,Vlo,bS,zlo,Wlo,Qlo,Xp,SK,Hlo,Ulo,vS,Jlo,Ylo,Klo,Vp,PK,Zlo,eio,TS,oio,rio,tio,zp,$K,aio,nio,FS,sio,lio,iio,Wp,IK,dio,cio,CS,fio,mio,gio,Qp,jK,hio,pio,MS,_io,uio,bio,Hp,DK,vio,Tio,ES,Fio,Cio,Mio,Up,NK,Eio,yio,yS,wio,Aio,Lio,Jp,qK,Bio,xio,wS,kio,Rio,Sio,Yp,OK,Pio,$io,AS,Iio,jio,Dio,Kp,GK,Nio,qio,LS,Oio,Gio,Xio,Zp,XK,Vio,zio,BS,Wio,Qio,Hio,e_,VK,Uio,Jio,xS,Yio,Kio,Zio,o_,zK,edo,odo,kS,rdo,tdo,ado,r_,WK,ndo,sdo,RS,ldo,ido,ddo,t_,QK,cdo,fdo,SS,mdo,gdo,hdo,a_,HK,pdo,_do,PS,udo,bdo,vdo,n_,UK,Tdo,Fdo,$S,Cdo,Mdo,Edo,s_,JK,ydo,wdo,IS,Ado,Ldo,Bdo,l_,YK,xdo,kdo,jS,Rdo,Sdo,Pdo,i_,KK,$do,Ido,DS,jdo,Ddo,Ndo,d_,ZK,qdo,Odo,NS,Gdo,Xdo,Vdo,c_,eZ,zdo,Wdo,qS,Qdo,Hdo,Udo,f_,oZ,Jdo,Ydo,OS,Kdo,Zdo,eco,m_,rZ,oco,rco,GS,tco,aco,nco,g_,tZ,sco,lco,XS,ico,dco,cco,h_,aZ,fco,mco,VS,gco,hco,pco,p_,_co,nZ,uco,bco,sZ,vco,Tco,lZ,Fco,Cco,EE,NBe,Zi,__,iZ,yE,Mco,dZ,Eco,qBe,Uo,wE,yco,ed,wco,cZ,Aco,Lco,fZ,Bco,xco,kco,AE,Rco,mZ,Sco,Pco,$co,Xr,LE,Ico,gZ,jco,Dco,od,Nco,hZ,qco,Oco,pZ,Gco,Xco,Vco,_Z,zco,Wco,BE,Qco,Se,xE,Hco,uZ,Uco,Jco,Va,Yco,bZ,Kco,Zco,vZ,efo,ofo,TZ,rfo,tfo,afo,k,u_,FZ,nfo,sfo,zS,lfo,ifo,dfo,b_,CZ,cfo,ffo,WS,mfo,gfo,hfo,v_,MZ,pfo,_fo,QS,ufo,bfo,vfo,T_,EZ,Tfo,Ffo,HS,Cfo,Mfo,Efo,F_,yZ,yfo,wfo,US,Afo,Lfo,Bfo,C_,wZ,xfo,kfo,JS,Rfo,Sfo,Pfo,M_,AZ,$fo,Ifo,YS,jfo,Dfo,Nfo,E_,LZ,qfo,Ofo,KS,Gfo,Xfo,Vfo,y_,BZ,zfo,Wfo,ZS,Qfo,Hfo,Ufo,w_,xZ,Jfo,Yfo,eP,Kfo,Zfo,emo,A_,kZ,omo,rmo,oP,tmo,amo,nmo,L_,RZ,smo,lmo,rP,imo,dmo,cmo,B_,SZ,fmo,mmo,tP,gmo,hmo,pmo,x_,PZ,_mo,umo,aP,bmo,vmo,Tmo,k_,$Z,Fmo,Cmo,nP,Mmo,Emo,ymo,R_,IZ,wmo,Amo,sP,Lmo,Bmo,xmo,S_,jZ,kmo,Rmo,lP,Smo,Pmo,$mo,P_,DZ,Imo,jmo,iP,Dmo,Nmo,qmo,$_,NZ,Omo,Gmo,dP,Xmo,Vmo,zmo,I_,qZ,Wmo,Qmo,cP,Hmo,Umo,Jmo,j_,OZ,Ymo,Kmo,fP,Zmo,ego,ogo,D_,GZ,rgo,tgo,mP,ago,ngo,sgo,N_,XZ,lgo,igo,gP,dgo,cgo,fgo,q_,VZ,mgo,ggo,hP,hgo,pgo,_go,O_,zZ,ugo,bgo,pP,vgo,Tgo,Fgo,G_,WZ,Cgo,Mgo,_P,Ego,ygo,wgo,X_,QZ,Ago,Lgo,uP,Bgo,xgo,kgo,V_,HZ,Rgo,Sgo,bP,Pgo,$go,Igo,z_,UZ,jgo,Dgo,vP,Ngo,qgo,Ogo,W_,JZ,Ggo,Xgo,TP,Vgo,zgo,Wgo,Q_,YZ,Qgo,Hgo,FP,Ugo,Jgo,Ygo,H_,KZ,Kgo,Zgo,CP,eho,oho,rho,U_,ZZ,tho,aho,MP,nho,sho,lho,J_,eee,iho,dho,EP,cho,fho,mho,Y_,oee,gho,hho,yP,pho,_ho,uho,K_,ree,bho,vho,wP,Tho,Fho,Cho,Z_,tee,Mho,Eho,AP,yho,who,Aho,eu,aee,Lho,Bho,LP,xho,kho,Rho,ou,nee,Sho,Pho,BP,$ho,Iho,jho,ru,Dho,see,Nho,qho,lee,Oho,Gho,iee,Xho,Vho,kE,OBe,rd,tu,dee,RE,zho,cee,Who,GBe,Jo,SE,Qho,td,Hho,fee,Uho,Jho,mee,Yho,Kho,Zho,PE,epo,gee,opo,rpo,tpo,Vr,$E,apo,hee,npo,spo,ad,lpo,pee,ipo,dpo,_ee,cpo,fpo,mpo,uee,gpo,hpo,IE,ppo,Pe,jE,_po,bee,upo,bpo,za,vpo,vee,Tpo,Fpo,Tee,Cpo,Mpo,Fee,Epo,ypo,wpo,$,au,Cee,Apo,Lpo,xP,Bpo,xpo,kpo,nu,Mee,Rpo,Spo,kP,Ppo,$po,Ipo,su,Eee,jpo,Dpo,RP,Npo,qpo,Opo,lu,yee,Gpo,Xpo,SP,Vpo,zpo,Wpo,iu,wee,Qpo,Hpo,PP,Upo,Jpo,Ypo,du,Aee,Kpo,Zpo,$P,e_o,o_o,r_o,cu,Lee,t_o,a_o,IP,n_o,s_o,l_o,fu,Bee,i_o,d_o,jP,c_o,f_o,m_o,mu,xee,g_o,h_o,DP,p_o,__o,u_o,gu,kee,b_o,v_o,NP,T_o,F_o,C_o,hu,Ree,M_o,E_o,qP,y_o,w_o,A_o,pu,See,L_o,B_o,OP,x_o,k_o,R_o,_u,Pee,S_o,P_o,GP,$_o,I_o,j_o,uu,$ee,D_o,N_o,XP,q_o,O_o,G_o,bu,Iee,X_o,V_o,VP,z_o,W_o,Q_o,vu,jee,H_o,U_o,zP,J_o,Y_o,K_o,Tu,Dee,Z_o,euo,WP,ouo,ruo,tuo,Fu,Nee,auo,nuo,QP,suo,luo,iuo,Cu,qee,duo,cuo,HP,fuo,muo,guo,Mu,Oee,huo,puo,UP,_uo,uuo,buo,Eu,Gee,vuo,Tuo,JP,Fuo,Cuo,Muo,yu,Xee,Euo,yuo,YP,wuo,Auo,Luo,wu,Vee,Buo,xuo,KP,kuo,Ruo,Suo,Au,zee,Puo,$uo,ZP,Iuo,juo,Duo,Lu,Wee,Nuo,quo,e$,Ouo,Guo,Xuo,Bu,Qee,Vuo,zuo,o$,Wuo,Quo,Huo,xu,Hee,Uuo,Juo,r$,Yuo,Kuo,Zuo,ku,Uee,e2o,o2o,t$,r2o,t2o,a2o,Ru,Jee,n2o,s2o,a$,l2o,i2o,d2o,Su,Yee,c2o,f2o,n$,m2o,g2o,h2o,Pu,Kee,p2o,_2o,s$,u2o,b2o,v2o,$u,Zee,T2o,F2o,l$,C2o,M2o,E2o,Iu,eoe,y2o,w2o,i$,A2o,L2o,B2o,ju,ooe,x2o,k2o,d$,R2o,S2o,P2o,Du,roe,$2o,I2o,c$,j2o,D2o,N2o,Nu,q2o,toe,O2o,G2o,aoe,X2o,V2o,noe,z2o,W2o,DE,XBe,nd,qu,soe,NE,Q2o,loe,H2o,VBe,Yo,qE,U2o,sd,J2o,ioe,Y2o,K2o,doe,Z2o,e1o,o1o,OE,r1o,coe,t1o,a1o,n1o,zr,GE,s1o,foe,l1o,i1o,ld,d1o,moe,c1o,f1o,goe,m1o,g1o,h1o,hoe,p1o,_1o,XE,u1o,$e,VE,b1o,poe,v1o,T1o,Wa,F1o,_oe,C1o,M1o,uoe,E1o,y1o,boe,w1o,A1o,L1o,I,Ou,voe,B1o,x1o,f$,k1o,R1o,S1o,Gu,Toe,P1o,$1o,m$,I1o,j1o,D1o,Xu,Foe,N1o,q1o,g$,O1o,G1o,X1o,Vu,Coe,V1o,z1o,h$,W1o,Q1o,H1o,zu,Moe,U1o,J1o,p$,Y1o,K1o,Z1o,Wu,Eoe,ebo,obo,_$,rbo,tbo,abo,Qu,yoe,nbo,sbo,u$,lbo,ibo,dbo,Hu,woe,cbo,fbo,b$,mbo,gbo,hbo,Uu,Aoe,pbo,_bo,v$,ubo,bbo,vbo,Ju,Loe,Tbo,Fbo,T$,Cbo,Mbo,Ebo,Yu,Boe,ybo,wbo,F$,Abo,Lbo,Bbo,Ku,xoe,xbo,kbo,C$,Rbo,Sbo,Pbo,Zu,koe,$bo,Ibo,M$,jbo,Dbo,Nbo,e2,Roe,qbo,Obo,E$,Gbo,Xbo,Vbo,o2,Soe,zbo,Wbo,y$,Qbo,Hbo,Ubo,r2,Poe,Jbo,Ybo,w$,Kbo,Zbo,e3o,t2,$oe,o3o,r3o,A$,t3o,a3o,n3o,a2,Ioe,s3o,l3o,L$,i3o,d3o,c3o,n2,joe,f3o,m3o,B$,g3o,h3o,p3o,s2,Doe,_3o,u3o,x$,b3o,v3o,T3o,l2,Noe,F3o,C3o,k$,M3o,E3o,y3o,i2,qoe,w3o,A3o,R$,L3o,B3o,x3o,d2,Ooe,k3o,R3o,S$,S3o,P3o,$3o,c2,Goe,I3o,j3o,P$,D3o,N3o,q3o,f2,Xoe,O3o,G3o,$$,X3o,V3o,z3o,m2,Voe,W3o,Q3o,I$,H3o,U3o,J3o,g2,zoe,Y3o,K3o,j$,Z3o,e5o,o5o,h2,Woe,r5o,t5o,D$,a5o,n5o,s5o,p2,Qoe,l5o,i5o,N$,d5o,c5o,f5o,_2,Hoe,m5o,g5o,q$,h5o,p5o,_5o,u2,Uoe,u5o,b5o,Joe,v5o,T5o,F5o,b2,Yoe,C5o,M5o,O$,E5o,y5o,w5o,v2,Koe,A5o,L5o,G$,B5o,x5o,k5o,T2,Zoe,R5o,S5o,X$,P5o,$5o,I5o,F2,ere,j5o,D5o,V$,N5o,q5o,O5o,C2,G5o,ore,X5o,V5o,rre,z5o,W5o,tre,Q5o,H5o,zE,zBe,id,M2,are,WE,U5o,nre,J5o,WBe,Ko,QE,Y5o,dd,K5o,sre,Z5o,evo,lre,ovo,rvo,tvo,HE,avo,ire,nvo,svo,lvo,Wr,UE,ivo,dre,dvo,cvo,cd,fvo,cre,mvo,gvo,fre,hvo,pvo,_vo,mre,uvo,bvo,JE,vvo,Ie,YE,Tvo,gre,Fvo,Cvo,Qa,Mvo,hre,Evo,yvo,pre,wvo,Avo,_re,Lvo,Bvo,xvo,ne,E2,ure,kvo,Rvo,z$,Svo,Pvo,$vo,y2,bre,Ivo,jvo,W$,Dvo,Nvo,qvo,w2,vre,Ovo,Gvo,Q$,Xvo,Vvo,zvo,A2,Tre,Wvo,Qvo,H$,Hvo,Uvo,Jvo,L2,Fre,Yvo,Kvo,U$,Zvo,eTo,oTo,B2,Cre,rTo,tTo,J$,aTo,nTo,sTo,x2,Mre,lTo,iTo,Y$,dTo,cTo,fTo,k2,Ere,mTo,gTo,K$,hTo,pTo,_To,R2,yre,uTo,bTo,Z$,vTo,TTo,FTo,S2,wre,CTo,MTo,eI,ETo,yTo,wTo,P2,Are,ATo,LTo,oI,BTo,xTo,kTo,$2,Lre,RTo,STo,rI,PTo,$To,ITo,I2,Bre,jTo,DTo,tI,NTo,qTo,OTo,j2,xre,GTo,XTo,aI,VTo,zTo,WTo,D2,kre,QTo,HTo,nI,UTo,JTo,YTo,N2,Rre,KTo,ZTo,sI,eFo,oFo,rFo,q2,tFo,Sre,aFo,nFo,Pre,sFo,lFo,$re,iFo,dFo,KE,QBe,fd,O2,Ire,ZE,cFo,jre,fFo,HBe,Zo,ey,mFo,md,gFo,Dre,hFo,pFo,Nre,_Fo,uFo,bFo,oy,vFo,qre,TFo,FFo,CFo,Qr,ry,MFo,Ore,EFo,yFo,gd,wFo,Gre,AFo,LFo,Xre,BFo,xFo,kFo,Vre,RFo,SFo,ty,PFo,je,ay,$Fo,zre,IFo,jFo,Ha,DFo,Wre,NFo,qFo,Qre,OFo,GFo,Hre,XFo,VFo,zFo,A,G2,Ure,WFo,QFo,lI,HFo,UFo,JFo,X2,Jre,YFo,KFo,iI,ZFo,e9o,o9o,V2,Yre,r9o,t9o,dI,a9o,n9o,s9o,z2,Kre,l9o,i9o,cI,d9o,c9o,f9o,W2,Zre,m9o,g9o,fI,h9o,p9o,_9o,Q2,ete,u9o,b9o,mI,v9o,T9o,F9o,H2,ote,C9o,M9o,gI,E9o,y9o,w9o,U2,rte,A9o,L9o,hI,B9o,x9o,k9o,J2,tte,R9o,S9o,pI,P9o,$9o,I9o,Y2,ate,j9o,D9o,_I,N9o,q9o,O9o,K2,nte,G9o,X9o,uI,V9o,z9o,W9o,Z2,ste,Q9o,H9o,bI,U9o,J9o,Y9o,e1,lte,K9o,Z9o,vI,eCo,oCo,rCo,o1,ite,tCo,aCo,TI,nCo,sCo,lCo,r1,dte,iCo,dCo,FI,cCo,fCo,mCo,t1,cte,gCo,hCo,CI,pCo,_Co,uCo,a1,fte,bCo,vCo,MI,TCo,FCo,CCo,n1,mte,MCo,ECo,EI,yCo,wCo,ACo,s1,gte,LCo,BCo,yI,xCo,kCo,RCo,l1,hte,SCo,PCo,wI,$Co,ICo,jCo,i1,pte,DCo,NCo,AI,qCo,OCo,GCo,d1,_te,XCo,VCo,LI,zCo,WCo,QCo,c1,ute,HCo,UCo,BI,JCo,YCo,KCo,f1,bte,ZCo,e4o,xI,o4o,r4o,t4o,m1,vte,a4o,n4o,kI,s4o,l4o,i4o,g1,Tte,d4o,c4o,RI,f4o,m4o,g4o,h1,Fte,h4o,p4o,SI,_4o,u4o,b4o,p1,Cte,v4o,T4o,PI,F4o,C4o,M4o,_1,Mte,E4o,y4o,$I,w4o,A4o,L4o,u1,Ete,B4o,x4o,II,k4o,R4o,S4o,b1,yte,P4o,$4o,jI,I4o,j4o,D4o,v1,wte,N4o,q4o,DI,O4o,G4o,X4o,T1,Ate,V4o,z4o,NI,W4o,Q4o,H4o,F1,Lte,U4o,J4o,qI,Y4o,K4o,Z4o,C1,Bte,eMo,oMo,OI,rMo,tMo,aMo,M1,xte,nMo,sMo,GI,lMo,iMo,dMo,E1,kte,cMo,fMo,XI,mMo,gMo,hMo,y1,Rte,pMo,_Mo,VI,uMo,bMo,vMo,w1,Ste,TMo,FMo,zI,CMo,MMo,EMo,A1,Pte,yMo,wMo,WI,AMo,LMo,BMo,L1,$te,xMo,kMo,QI,RMo,SMo,PMo,B1,Ite,$Mo,IMo,HI,jMo,DMo,NMo,x1,jte,qMo,OMo,UI,GMo,XMo,VMo,k1,Dte,zMo,WMo,JI,QMo,HMo,UMo,R1,Nte,JMo,YMo,YI,KMo,ZMo,eEo,S1,qte,oEo,rEo,KI,tEo,aEo,nEo,P1,sEo,Ote,lEo,iEo,Gte,dEo,cEo,Xte,fEo,mEo,ny,UBe,hd,$1,Vte,sy,gEo,zte,hEo,JBe,er,ly,pEo,pd,_Eo,Wte,uEo,bEo,Qte,vEo,TEo,FEo,iy,CEo,Hte,MEo,EEo,yEo,Hr,dy,wEo,Ute,AEo,LEo,_d,BEo,Jte,xEo,kEo,Yte,REo,SEo,PEo,Kte,$Eo,IEo,cy,jEo,De,fy,DEo,Zte,NEo,qEo,Ua,OEo,eae,GEo,XEo,oae,VEo,zEo,rae,WEo,QEo,HEo,O,I1,tae,UEo,JEo,ZI,YEo,KEo,ZEo,j1,aae,eyo,oyo,ej,ryo,tyo,ayo,D1,nae,nyo,syo,oj,lyo,iyo,dyo,N1,sae,cyo,fyo,rj,myo,gyo,hyo,q1,lae,pyo,_yo,tj,uyo,byo,vyo,O1,iae,Tyo,Fyo,aj,Cyo,Myo,Eyo,G1,dae,yyo,wyo,nj,Ayo,Lyo,Byo,X1,cae,xyo,kyo,sj,Ryo,Syo,Pyo,V1,fae,$yo,Iyo,lj,jyo,Dyo,Nyo,z1,mae,qyo,Oyo,ij,Gyo,Xyo,Vyo,W1,gae,zyo,Wyo,dj,Qyo,Hyo,Uyo,Q1,hae,Jyo,Yyo,cj,Kyo,Zyo,ewo,H1,pae,owo,rwo,fj,two,awo,nwo,U1,_ae,swo,lwo,mj,iwo,dwo,cwo,J1,uae,fwo,mwo,gj,gwo,hwo,pwo,Y1,bae,_wo,uwo,hj,bwo,vwo,Two,K1,vae,Fwo,Cwo,pj,Mwo,Ewo,ywo,Z1,Tae,wwo,Awo,_j,Lwo,Bwo,xwo,eb,Fae,kwo,Rwo,uj,Swo,Pwo,$wo,ob,Cae,Iwo,jwo,bj,Dwo,Nwo,qwo,rb,Mae,Owo,Gwo,vj,Xwo,Vwo,zwo,tb,Eae,Wwo,Qwo,Tj,Hwo,Uwo,Jwo,ab,yae,Ywo,Kwo,Fj,Zwo,e6o,o6o,nb,wae,r6o,t6o,Cj,a6o,n6o,s6o,sb,Aae,l6o,i6o,Mj,d6o,c6o,f6o,lb,Lae,m6o,g6o,Ej,h6o,p6o,_6o,ib,Bae,u6o,b6o,yj,v6o,T6o,F6o,db,xae,C6o,M6o,wj,E6o,y6o,w6o,cb,A6o,kae,L6o,B6o,Rae,x6o,k6o,Sae,R6o,S6o,my,YBe,ud,fb,Pae,gy,P6o,$ae,$6o,KBe,or,hy,I6o,bd,j6o,Iae,D6o,N6o,jae,q6o,O6o,G6o,py,X6o,Dae,V6o,z6o,W6o,Ur,_y,Q6o,Nae,H6o,U6o,vd,J6o,qae,Y6o,K6o,Oae,Z6o,eAo,oAo,Gae,rAo,tAo,uy,aAo,Ne,by,nAo,Xae,sAo,lAo,Ja,iAo,Vae,dAo,cAo,zae,fAo,mAo,Wae,gAo,hAo,pAo,da,mb,Qae,_Ao,uAo,Aj,bAo,vAo,TAo,gb,Hae,FAo,CAo,Lj,MAo,EAo,yAo,hb,Uae,wAo,AAo,Bj,LAo,BAo,xAo,pb,Jae,kAo,RAo,xj,SAo,PAo,$Ao,_b,Yae,IAo,jAo,kj,DAo,NAo,qAo,ub,OAo,Kae,GAo,XAo,Zae,VAo,zAo,ene,WAo,QAo,vy,ZBe,Td,bb,one,Ty,HAo,rne,UAo,exe,rr,Fy,JAo,Fd,YAo,tne,KAo,ZAo,ane,e0o,o0o,r0o,Cy,t0o,nne,a0o,n0o,s0o,Jr,My,l0o,sne,i0o,d0o,Cd,c0o,lne,f0o,m0o,ine,g0o,h0o,p0o,dne,_0o,u0o,Ey,b0o,qe,yy,v0o,cne,T0o,F0o,Ya,C0o,fne,M0o,E0o,mne,y0o,w0o,gne,A0o,L0o,B0o,N,vb,hne,x0o,k0o,Rj,R0o,S0o,P0o,Tb,pne,$0o,I0o,Sj,j0o,D0o,N0o,Fb,_ne,q0o,O0o,Pj,G0o,X0o,V0o,Cb,une,z0o,W0o,$j,Q0o,H0o,U0o,Mb,bne,J0o,Y0o,Ij,K0o,Z0o,eLo,Eb,vne,oLo,rLo,jj,tLo,aLo,nLo,yb,Tne,sLo,lLo,Dj,iLo,dLo,cLo,wb,Fne,fLo,mLo,Nj,gLo,hLo,pLo,Ab,Cne,_Lo,uLo,qj,bLo,vLo,TLo,Lb,Mne,FLo,CLo,Oj,MLo,ELo,yLo,Bb,Ene,wLo,ALo,Gj,LLo,BLo,xLo,xb,yne,kLo,RLo,Xj,SLo,PLo,$Lo,kb,wne,ILo,jLo,Vj,DLo,NLo,qLo,Rb,Ane,OLo,GLo,zj,XLo,VLo,zLo,Sb,Lne,WLo,QLo,Wj,HLo,ULo,JLo,Pb,Bne,YLo,KLo,Qj,ZLo,e8o,o8o,$b,xne,r8o,t8o,Hj,a8o,n8o,s8o,Ib,kne,l8o,i8o,Uj,d8o,c8o,f8o,jb,Rne,m8o,g8o,Jj,h8o,p8o,_8o,Db,Sne,u8o,b8o,Yj,v8o,T8o,F8o,Nb,Pne,C8o,M8o,Kj,E8o,y8o,w8o,qb,$ne,A8o,L8o,Zj,B8o,x8o,k8o,Ob,Ine,R8o,S8o,eD,P8o,$8o,I8o,Gb,jne,j8o,D8o,oD,N8o,q8o,O8o,Xb,Dne,G8o,X8o,rD,V8o,z8o,W8o,Vb,Nne,Q8o,H8o,tD,U8o,J8o,Y8o,zb,qne,K8o,Z8o,aD,e7o,o7o,r7o,Wb,One,t7o,a7o,nD,n7o,s7o,l7o,Qb,Gne,i7o,d7o,sD,c7o,f7o,m7o,Hb,Xne,g7o,h7o,lD,p7o,_7o,u7o,Ub,Vne,b7o,v7o,iD,T7o,F7o,C7o,Jb,zne,M7o,E7o,dD,y7o,w7o,A7o,Yb,Wne,L7o,B7o,cD,x7o,k7o,R7o,Kb,S7o,Qne,P7o,$7o,Hne,I7o,j7o,Une,D7o,N7o,wy,oxe,Md,Zb,Jne,Ay,q7o,Yne,O7o,rxe,tr,Ly,G7o,Ed,X7o,Kne,V7o,z7o,Zne,W7o,Q7o,H7o,By,U7o,ese,J7o,Y7o,K7o,Yr,xy,Z7o,ose,eBo,oBo,yd,rBo,rse,tBo,aBo,tse,nBo,sBo,lBo,ase,iBo,dBo,ky,cBo,Oe,Ry,fBo,nse,mBo,gBo,Ka,hBo,sse,pBo,_Bo,lse,uBo,bBo,ise,vBo,TBo,FBo,R,e3,dse,CBo,MBo,fD,EBo,yBo,wBo,o3,cse,ABo,LBo,mD,BBo,xBo,kBo,r3,fse,RBo,SBo,gD,PBo,$Bo,IBo,t3,mse,jBo,DBo,hD,NBo,qBo,OBo,a3,gse,GBo,XBo,pD,VBo,zBo,WBo,n3,hse,QBo,HBo,_D,UBo,JBo,YBo,s3,pse,KBo,ZBo,uD,exo,oxo,rxo,l3,_se,txo,axo,bD,nxo,sxo,lxo,i3,use,ixo,dxo,vD,cxo,fxo,mxo,d3,bse,gxo,hxo,TD,pxo,_xo,uxo,c3,vse,bxo,vxo,FD,Txo,Fxo,Cxo,f3,Tse,Mxo,Exo,CD,yxo,wxo,Axo,m3,Fse,Lxo,Bxo,MD,xxo,kxo,Rxo,g3,Cse,Sxo,Pxo,ED,$xo,Ixo,jxo,h3,Mse,Dxo,Nxo,yD,qxo,Oxo,Gxo,p3,Ese,Xxo,Vxo,wD,zxo,Wxo,Qxo,_3,yse,Hxo,Uxo,AD,Jxo,Yxo,Kxo,u3,wse,Zxo,eko,LD,oko,rko,tko,b3,Ase,ako,nko,BD,sko,lko,iko,v3,Lse,dko,cko,xD,fko,mko,gko,T3,Bse,hko,pko,kD,_ko,uko,bko,F3,xse,vko,Tko,RD,Fko,Cko,Mko,C3,kse,Eko,yko,SD,wko,Ako,Lko,M3,Rse,Bko,xko,PD,kko,Rko,Sko,E3,Sse,Pko,$ko,$D,Iko,jko,Dko,y3,Pse,Nko,qko,ID,Oko,Gko,Xko,w3,$se,Vko,zko,jD,Wko,Qko,Hko,A3,Ise,Uko,Jko,DD,Yko,Kko,Zko,L3,jse,eRo,oRo,ND,rRo,tRo,aRo,B3,Dse,nRo,sRo,qD,lRo,iRo,dRo,x3,Nse,cRo,fRo,OD,mRo,gRo,hRo,k3,qse,pRo,_Ro,GD,uRo,bRo,vRo,R3,Ose,TRo,FRo,XD,CRo,MRo,ERo,S3,Gse,yRo,wRo,VD,ARo,LRo,BRo,P3,Xse,xRo,kRo,zD,RRo,SRo,PRo,$3,Vse,$Ro,IRo,WD,jRo,DRo,NRo,I3,zse,qRo,ORo,QD,GRo,XRo,VRo,j3,Wse,zRo,WRo,HD,QRo,HRo,URo,D3,Qse,JRo,YRo,UD,KRo,ZRo,eSo,N3,oSo,Hse,rSo,tSo,Use,aSo,nSo,Jse,sSo,lSo,Sy,txe,wd,q3,Yse,Py,iSo,Kse,dSo,axe,ar,$y,cSo,Ad,fSo,Zse,mSo,gSo,ele,hSo,pSo,_So,Iy,uSo,ole,bSo,vSo,TSo,Kr,jy,FSo,rle,CSo,MSo,Ld,ESo,tle,ySo,wSo,ale,ASo,LSo,BSo,nle,xSo,kSo,Dy,RSo,Ge,Ny,SSo,sle,PSo,$So,Za,ISo,lle,jSo,DSo,ile,NSo,qSo,dle,OSo,GSo,XSo,cle,O3,fle,VSo,zSo,JD,WSo,QSo,HSo,G3,USo,mle,JSo,YSo,gle,KSo,ZSo,hle,ePo,oPo,qy,nxe,Bd,X3,ple,Oy,rPo,_le,tPo,sxe,nr,Gy,aPo,xd,nPo,ule,sPo,lPo,ble,iPo,dPo,cPo,Xy,fPo,vle,mPo,gPo,hPo,Zr,Vy,pPo,Tle,_Po,uPo,kd,bPo,Fle,vPo,TPo,Cle,FPo,CPo,MPo,Mle,EPo,yPo,zy,wPo,Xe,Wy,APo,Ele,LPo,BPo,en,xPo,yle,kPo,RPo,wle,SPo,PPo,Ale,$Po,IPo,jPo,be,V3,Lle,DPo,NPo,YD,qPo,OPo,GPo,z3,Ble,XPo,VPo,KD,zPo,WPo,QPo,qs,xle,HPo,UPo,ZD,JPo,YPo,eN,KPo,ZPo,e$o,W3,kle,o$o,r$o,oN,t$o,a$o,n$o,fa,Rle,s$o,l$o,rN,i$o,d$o,tN,c$o,f$o,aN,m$o,g$o,h$o,Q3,Sle,p$o,_$o,nN,u$o,b$o,v$o,H3,Ple,T$o,F$o,sN,C$o,M$o,E$o,U3,$le,y$o,w$o,lN,A$o,L$o,B$o,J3,Ile,x$o,k$o,iN,R$o,S$o,P$o,Y3,$$o,jle,I$o,j$o,Dle,D$o,N$o,Nle,q$o,O$o,Qy,lxe,Rd,K3,qle,Hy,G$o,Ole,X$o,ixe,sr,Uy,V$o,Sd,z$o,Gle,W$o,Q$o,Xle,H$o,U$o,J$o,Jy,Y$o,Vle,K$o,Z$o,eIo,et,Yy,oIo,zle,rIo,tIo,Pd,aIo,Wle,nIo,sIo,Qle,lIo,iIo,dIo,Hle,cIo,fIo,Ky,mIo,Ve,Zy,gIo,Ule,hIo,pIo,on,_Io,Jle,uIo,bIo,Yle,vIo,TIo,Kle,FIo,CIo,MIo,Zle,Z3,eie,EIo,yIo,dN,wIo,AIo,LIo,e5,BIo,oie,xIo,kIo,rie,RIo,SIo,tie,PIo,$Io,ew,dxe,$d,o5,aie,ow,IIo,nie,jIo,cxe,lr,rw,DIo,Id,NIo,sie,qIo,OIo,lie,GIo,XIo,VIo,tw,zIo,iie,WIo,QIo,HIo,ot,aw,UIo,die,JIo,YIo,jd,KIo,cie,ZIo,ejo,fie,ojo,rjo,tjo,mie,ajo,njo,nw,sjo,ze,sw,ljo,gie,ijo,djo,rn,cjo,hie,fjo,mjo,pie,gjo,hjo,_ie,pjo,_jo,ujo,Ae,r5,uie,bjo,vjo,cN,Tjo,Fjo,Cjo,t5,bie,Mjo,Ejo,fN,yjo,wjo,Ajo,a5,vie,Ljo,Bjo,mN,xjo,kjo,Rjo,n5,Tie,Sjo,Pjo,gN,$jo,Ijo,jjo,s5,Fie,Djo,Njo,hN,qjo,Ojo,Gjo,l5,Cie,Xjo,Vjo,pN,zjo,Wjo,Qjo,i5,Mie,Hjo,Ujo,_N,Jjo,Yjo,Kjo,d5,Eie,Zjo,eDo,uN,oDo,rDo,tDo,c5,aDo,yie,nDo,sDo,wie,lDo,iDo,Aie,dDo,cDo,lw,fxe,Dd,f5,Lie,iw,fDo,Bie,mDo,mxe,ir,dw,gDo,Nd,hDo,xie,pDo,_Do,kie,uDo,bDo,vDo,cw,TDo,Rie,FDo,CDo,MDo,rt,fw,EDo,Sie,yDo,wDo,qd,ADo,Pie,LDo,BDo,$ie,xDo,kDo,RDo,Iie,SDo,PDo,mw,$Do,We,gw,IDo,jie,jDo,DDo,tn,NDo,Die,qDo,ODo,Nie,GDo,XDo,qie,VDo,zDo,WDo,an,m5,Oie,QDo,HDo,bN,UDo,JDo,YDo,g5,Gie,KDo,ZDo,vN,eNo,oNo,rNo,h5,Xie,tNo,aNo,TN,nNo,sNo,lNo,p5,Vie,iNo,dNo,FN,cNo,fNo,mNo,_5,gNo,zie,hNo,pNo,Wie,_No,uNo,Qie,bNo,vNo,hw,gxe,Od,u5,Hie,pw,TNo,Uie,FNo,hxe,dr,_w,CNo,Gd,MNo,Jie,ENo,yNo,Yie,wNo,ANo,LNo,uw,BNo,Kie,xNo,kNo,RNo,tt,bw,SNo,Zie,PNo,$No,Xd,INo,ede,jNo,DNo,ode,NNo,qNo,ONo,rde,GNo,XNo,vw,VNo,Qe,Tw,zNo,tde,WNo,QNo,nn,HNo,ade,UNo,JNo,nde,YNo,KNo,sde,ZNo,eqo,oqo,Le,b5,lde,rqo,tqo,CN,aqo,nqo,sqo,v5,ide,lqo,iqo,MN,dqo,cqo,fqo,T5,dde,mqo,gqo,EN,hqo,pqo,_qo,F5,cde,uqo,bqo,yN,vqo,Tqo,Fqo,C5,fde,Cqo,Mqo,wN,Eqo,yqo,wqo,M5,mde,Aqo,Lqo,AN,Bqo,xqo,kqo,E5,gde,Rqo,Sqo,LN,Pqo,$qo,Iqo,y5,hde,jqo,Dqo,BN,Nqo,qqo,Oqo,w5,Gqo,pde,Xqo,Vqo,_de,zqo,Wqo,ude,Qqo,Hqo,Fw,pxe,Vd,A5,bde,Cw,Uqo,vde,Jqo,_xe,cr,Mw,Yqo,zd,Kqo,Tde,Zqo,eOo,Fde,oOo,rOo,tOo,Ew,aOo,Cde,nOo,sOo,lOo,at,yw,iOo,Mde,dOo,cOo,Wd,fOo,Ede,mOo,gOo,yde,hOo,pOo,_Oo,wde,uOo,bOo,ww,vOo,He,Aw,TOo,Ade,FOo,COo,sn,MOo,Lde,EOo,yOo,Bde,wOo,AOo,xde,LOo,BOo,xOo,Lw,L5,kde,kOo,ROo,xN,SOo,POo,$Oo,B5,Rde,IOo,jOo,kN,DOo,NOo,qOo,x5,OOo,Sde,GOo,XOo,Pde,VOo,zOo,$de,WOo,QOo,Bw,uxe,Qd,k5,Ide,xw,HOo,jde,UOo,bxe,fr,kw,JOo,Hd,YOo,Dde,KOo,ZOo,Nde,eGo,oGo,rGo,Rw,tGo,qde,aGo,nGo,sGo,nt,Sw,lGo,Ode,iGo,dGo,Ud,cGo,Gde,fGo,mGo,Xde,gGo,hGo,pGo,Vde,_Go,uGo,Pw,bGo,Ue,$w,vGo,zde,TGo,FGo,ln,CGo,Wde,MGo,EGo,Qde,yGo,wGo,Hde,AGo,LGo,BGo,dn,R5,Ude,xGo,kGo,RN,RGo,SGo,PGo,S5,Jde,$Go,IGo,SN,jGo,DGo,NGo,P5,Yde,qGo,OGo,PN,GGo,XGo,VGo,$5,Kde,zGo,WGo,$N,QGo,HGo,UGo,I5,JGo,Zde,YGo,KGo,ece,ZGo,eXo,oce,oXo,rXo,Iw,vxe,Jd,j5,rce,jw,tXo,tce,aXo,Txe,mr,Dw,nXo,Yd,sXo,ace,lXo,iXo,nce,dXo,cXo,fXo,Nw,mXo,sce,gXo,hXo,pXo,st,qw,_Xo,lce,uXo,bXo,Kd,vXo,ice,TXo,FXo,dce,CXo,MXo,EXo,cce,yXo,wXo,Ow,AXo,Je,Gw,LXo,fce,BXo,xXo,cn,kXo,mce,RXo,SXo,gce,PXo,$Xo,hce,IXo,jXo,DXo,Zd,D5,pce,NXo,qXo,IN,OXo,GXo,XXo,N5,_ce,VXo,zXo,jN,WXo,QXo,HXo,q5,uce,UXo,JXo,DN,YXo,KXo,ZXo,O5,eVo,bce,oVo,rVo,vce,tVo,aVo,Tce,nVo,sVo,Xw,Fxe,ec,G5,Fce,Vw,lVo,Cce,iVo,Cxe,gr,zw,dVo,oc,cVo,Mce,fVo,mVo,Ece,gVo,hVo,pVo,Ww,_Vo,yce,uVo,bVo,vVo,lt,Qw,TVo,wce,FVo,CVo,rc,MVo,Ace,EVo,yVo,Lce,wVo,AVo,LVo,Bce,BVo,xVo,Hw,kVo,Ye,Uw,RVo,xce,SVo,PVo,fn,$Vo,kce,IVo,jVo,Rce,DVo,NVo,Sce,qVo,OVo,GVo,Pce,X5,$ce,XVo,VVo,NN,zVo,WVo,QVo,V5,HVo,Ice,UVo,JVo,jce,YVo,KVo,Dce,ZVo,ezo,Jw,Mxe,tc,z5,Nce,Yw,ozo,qce,rzo,Exe,hr,Kw,tzo,ac,azo,Oce,nzo,szo,Gce,lzo,izo,dzo,Zw,czo,Xce,fzo,mzo,gzo,it,e6,hzo,Vce,pzo,_zo,nc,uzo,zce,bzo,vzo,Wce,Tzo,Fzo,Czo,Qce,Mzo,Ezo,o6,yzo,Ke,r6,wzo,Hce,Azo,Lzo,mn,Bzo,Uce,xzo,kzo,Jce,Rzo,Szo,Yce,Pzo,$zo,Izo,Kce,W5,Zce,jzo,Dzo,qN,Nzo,qzo,Ozo,Q5,Gzo,efe,Xzo,Vzo,ofe,zzo,Wzo,rfe,Qzo,Hzo,t6,yxe,sc,H5,tfe,a6,Uzo,afe,Jzo,wxe,pr,n6,Yzo,lc,Kzo,nfe,Zzo,eWo,sfe,oWo,rWo,tWo,s6,aWo,lfe,nWo,sWo,lWo,dt,l6,iWo,ife,dWo,cWo,ic,fWo,dfe,mWo,gWo,cfe,hWo,pWo,_Wo,ffe,uWo,bWo,i6,vWo,Ze,d6,TWo,mfe,FWo,CWo,gn,MWo,gfe,EWo,yWo,hfe,wWo,AWo,pfe,LWo,BWo,xWo,c6,U5,_fe,kWo,RWo,ON,SWo,PWo,$Wo,J5,ufe,IWo,jWo,GN,DWo,NWo,qWo,Y5,OWo,bfe,GWo,XWo,vfe,VWo,zWo,Tfe,WWo,QWo,f6,Axe,dc,K5,Ffe,m6,HWo,Cfe,UWo,Lxe,_r,g6,JWo,cc,YWo,Mfe,KWo,ZWo,Efe,eQo,oQo,rQo,h6,tQo,yfe,aQo,nQo,sQo,ct,p6,lQo,wfe,iQo,dQo,fc,cQo,Afe,fQo,mQo,Lfe,gQo,hQo,pQo,Bfe,_Qo,uQo,_6,bQo,eo,u6,vQo,xfe,TQo,FQo,hn,CQo,kfe,MQo,EQo,Rfe,yQo,wQo,Sfe,AQo,LQo,BQo,Pfe,Z5,$fe,xQo,kQo,XN,RQo,SQo,PQo,ev,$Qo,Ife,IQo,jQo,jfe,DQo,NQo,Dfe,qQo,OQo,b6,Bxe,mc,ov,Nfe,v6,GQo,qfe,XQo,xxe,ur,T6,VQo,gc,zQo,Ofe,WQo,QQo,Gfe,HQo,UQo,JQo,F6,YQo,Xfe,KQo,ZQo,eHo,ft,C6,oHo,Vfe,rHo,tHo,hc,aHo,zfe,nHo,sHo,Wfe,lHo,iHo,dHo,Qfe,cHo,fHo,M6,mHo,ho,E6,gHo,Hfe,hHo,pHo,pn,_Ho,Ufe,uHo,bHo,Jfe,vHo,THo,Yfe,FHo,CHo,MHo,B,rv,Kfe,EHo,yHo,VN,wHo,AHo,LHo,tv,Zfe,BHo,xHo,zN,kHo,RHo,SHo,av,eme,PHo,$Ho,WN,IHo,jHo,DHo,nv,ome,NHo,qHo,QN,OHo,GHo,XHo,sv,rme,VHo,zHo,HN,WHo,QHo,HHo,lv,tme,UHo,JHo,UN,YHo,KHo,ZHo,iv,ame,eUo,oUo,JN,rUo,tUo,aUo,dv,nme,nUo,sUo,YN,lUo,iUo,dUo,cv,sme,cUo,fUo,KN,mUo,gUo,hUo,fv,lme,pUo,_Uo,ZN,uUo,bUo,vUo,mv,ime,TUo,FUo,eq,CUo,MUo,EUo,gv,dme,yUo,wUo,oq,AUo,LUo,BUo,hv,cme,xUo,kUo,rq,RUo,SUo,PUo,pv,fme,$Uo,IUo,tq,jUo,DUo,NUo,_v,mme,qUo,OUo,aq,GUo,XUo,VUo,uv,gme,zUo,WUo,nq,QUo,HUo,UUo,Os,hme,JUo,YUo,sq,KUo,ZUo,lq,eJo,oJo,rJo,bv,pme,tJo,aJo,iq,nJo,sJo,lJo,vv,_me,iJo,dJo,dq,cJo,fJo,mJo,Tv,ume,gJo,hJo,cq,pJo,_Jo,uJo,Fv,bme,bJo,vJo,fq,TJo,FJo,CJo,Cv,vme,MJo,EJo,mq,yJo,wJo,AJo,Mv,Tme,LJo,BJo,gq,xJo,kJo,RJo,Ev,Fme,SJo,PJo,hq,$Jo,IJo,jJo,yv,Cme,DJo,NJo,pq,qJo,OJo,GJo,wv,Mme,XJo,VJo,_q,zJo,WJo,QJo,Av,Eme,HJo,UJo,uq,JJo,YJo,KJo,Lv,yme,ZJo,eYo,bq,oYo,rYo,tYo,Bv,wme,aYo,nYo,vq,sYo,lYo,iYo,xv,Ame,dYo,cYo,Tq,fYo,mYo,gYo,kv,Lme,hYo,pYo,Fq,_Yo,uYo,bYo,Rv,Bme,vYo,TYo,Cq,FYo,CYo,MYo,Sv,xme,EYo,yYo,Mq,wYo,AYo,LYo,Pv,kme,BYo,xYo,Eq,kYo,RYo,SYo,$v,Rme,PYo,$Yo,yq,IYo,jYo,DYo,Iv,Sme,NYo,qYo,wq,OYo,GYo,XYo,jv,Pme,VYo,zYo,Aq,WYo,QYo,HYo,Dv,$me,UYo,JYo,Lq,YYo,KYo,ZYo,Nv,Ime,eKo,oKo,Bq,rKo,tKo,aKo,qv,jme,nKo,sKo,xq,lKo,iKo,dKo,Ov,Dme,cKo,fKo,kq,mKo,gKo,hKo,Gv,Nme,pKo,_Ko,Rq,uKo,bKo,vKo,qme,TKo,FKo,y6,kxe,pc,Xv,Ome,w6,CKo,Gme,MKo,Rxe,br,A6,EKo,_c,yKo,Xme,wKo,AKo,Vme,LKo,BKo,xKo,L6,kKo,zme,RKo,SKo,PKo,mt,B6,$Ko,Wme,IKo,jKo,uc,DKo,Qme,NKo,qKo,Hme,OKo,GKo,XKo,Ume,VKo,zKo,x6,WKo,po,k6,QKo,Jme,HKo,UKo,_n,JKo,Yme,YKo,KKo,Kme,ZKo,eZo,Zme,oZo,rZo,tZo,H,Vv,ege,aZo,nZo,Sq,sZo,lZo,iZo,zv,oge,dZo,cZo,Pq,fZo,mZo,gZo,Wv,rge,hZo,pZo,$q,_Zo,uZo,bZo,Qv,tge,vZo,TZo,Iq,FZo,CZo,MZo,Hv,age,EZo,yZo,jq,wZo,AZo,LZo,Uv,nge,BZo,xZo,Dq,kZo,RZo,SZo,Jv,sge,PZo,$Zo,Nq,IZo,jZo,DZo,Yv,lge,NZo,qZo,qq,OZo,GZo,XZo,Kv,ige,VZo,zZo,Oq,WZo,QZo,HZo,Zv,dge,UZo,JZo,Gq,YZo,KZo,ZZo,eT,cge,eer,oer,Xq,rer,ter,aer,oT,fge,ner,ser,Vq,ler,ier,der,rT,mge,cer,fer,zq,mer,ger,her,tT,gge,per,_er,Wq,uer,ber,ver,aT,hge,Ter,Fer,Qq,Cer,Mer,Eer,nT,pge,yer,wer,Hq,Aer,Ler,Ber,sT,_ge,xer,ker,Uq,Rer,Ser,Per,lT,uge,$er,Ier,Jq,jer,Der,Ner,iT,bge,qer,Oer,Yq,Ger,Xer,Ver,dT,vge,zer,Wer,Kq,Qer,Her,Uer,cT,Tge,Jer,Yer,Zq,Ker,Zer,eor,fT,Fge,oor,ror,eO,tor,aor,nor,Cge,sor,lor,R6,Sxe,bc,mT,Mge,S6,ior,Ege,dor,Pxe,vr,P6,cor,vc,mor,yge,gor,hor,wge,por,_or,uor,$6,bor,Age,vor,Tor,For,gt,I6,Cor,Lge,Mor,Eor,Tc,yor,Bge,wor,Aor,xge,Lor,Bor,xor,kge,kor,Ror,j6,Sor,_o,D6,Por,Rge,$or,Ior,un,jor,Sge,Dor,Nor,Pge,qor,Oor,$ge,Gor,Xor,Vor,he,gT,Ige,zor,Wor,oO,Qor,Hor,Uor,hT,jge,Jor,Yor,rO,Kor,Zor,err,pT,Dge,orr,rrr,tO,trr,arr,nrr,_T,Nge,srr,lrr,aO,irr,drr,crr,uT,qge,frr,mrr,nO,grr,hrr,prr,bT,Oge,_rr,urr,sO,brr,vrr,Trr,vT,Gge,Frr,Crr,lO,Mrr,Err,yrr,TT,Xge,wrr,Arr,iO,Lrr,Brr,xrr,FT,Vge,krr,Rrr,dO,Srr,Prr,$rr,CT,zge,Irr,jrr,cO,Drr,Nrr,qrr,Wge,Orr,Grr,N6,$xe,Fc,MT,Qge,q6,Xrr,Hge,Vrr,Ixe,Tr,O6,zrr,Cc,Wrr,Uge,Qrr,Hrr,Jge,Urr,Jrr,Yrr,G6,Krr,Yge,Zrr,etr,otr,ht,X6,rtr,Kge,ttr,atr,Mc,ntr,Zge,str,ltr,ehe,itr,dtr,ctr,ohe,ftr,mtr,V6,gtr,uo,z6,htr,rhe,ptr,_tr,bn,utr,the,btr,vtr,ahe,Ttr,Ftr,nhe,Ctr,Mtr,Etr,W6,ET,she,ytr,wtr,fO,Atr,Ltr,Btr,yT,lhe,xtr,ktr,mO,Rtr,Str,Ptr,ihe,$tr,Itr,Q6,jxe,Ec,wT,dhe,H6,jtr,che,Dtr,Dxe,Fr,U6,Ntr,yc,qtr,fhe,Otr,Gtr,mhe,Xtr,Vtr,ztr,J6,Wtr,ghe,Qtr,Htr,Utr,pt,Y6,Jtr,hhe,Ytr,Ktr,wc,Ztr,phe,ear,oar,_he,rar,tar,aar,uhe,nar,sar,K6,lar,bo,Z6,iar,bhe,dar,car,vn,far,vhe,mar,gar,The,har,par,Fhe,_ar,uar,bar,Y,AT,Che,Tar,Far,gO,Car,Mar,Ear,LT,Mhe,yar,war,hO,Aar,Lar,Bar,BT,Ehe,xar,kar,pO,Rar,Sar,Par,xT,yhe,$ar,Iar,_O,jar,Dar,Nar,kT,whe,qar,Oar,uO,Gar,Xar,Var,RT,Ahe,zar,War,bO,Qar,Har,Uar,ST,Lhe,Jar,Yar,vO,Kar,Zar,enr,PT,Bhe,onr,rnr,TO,tnr,anr,nnr,$T,xhe,snr,lnr,FO,inr,dnr,cnr,IT,khe,fnr,mnr,CO,gnr,hnr,pnr,jT,Rhe,_nr,unr,MO,bnr,vnr,Tnr,DT,She,Fnr,Cnr,EO,Mnr,Enr,ynr,NT,Phe,wnr,Anr,yO,Lnr,Bnr,xnr,qT,$he,knr,Rnr,wO,Snr,Pnr,$nr,OT,Ihe,Inr,jnr,AO,Dnr,Nnr,qnr,GT,jhe,Onr,Gnr,LO,Xnr,Vnr,znr,XT,Dhe,Wnr,Qnr,BO,Hnr,Unr,Jnr,VT,Nhe,Ynr,Knr,xO,Znr,esr,osr,zT,qhe,rsr,tsr,kO,asr,nsr,ssr,WT,Ohe,lsr,isr,RO,dsr,csr,fsr,Ghe,msr,gsr,eA,Nxe,Ac,QT,Xhe,oA,hsr,Vhe,psr,qxe,Cr,rA,_sr,Lc,usr,zhe,bsr,vsr,Whe,Tsr,Fsr,Csr,tA,Msr,Qhe,Esr,ysr,wsr,_t,aA,Asr,Hhe,Lsr,Bsr,Bc,xsr,Uhe,ksr,Rsr,Jhe,Ssr,Psr,$sr,Yhe,Isr,jsr,nA,Dsr,vo,sA,Nsr,Khe,qsr,Osr,Tn,Gsr,Zhe,Xsr,Vsr,epe,zsr,Wsr,ope,Qsr,Hsr,Usr,pe,HT,rpe,Jsr,Ysr,SO,Ksr,Zsr,elr,UT,tpe,olr,rlr,PO,tlr,alr,nlr,JT,ape,slr,llr,$O,ilr,dlr,clr,YT,npe,flr,mlr,IO,glr,hlr,plr,KT,spe,_lr,ulr,jO,blr,vlr,Tlr,ZT,lpe,Flr,Clr,DO,Mlr,Elr,ylr,eF,ipe,wlr,Alr,NO,Llr,Blr,xlr,oF,dpe,klr,Rlr,qO,Slr,Plr,$lr,rF,cpe,Ilr,jlr,OO,Dlr,Nlr,qlr,tF,fpe,Olr,Glr,GO,Xlr,Vlr,zlr,mpe,Wlr,Qlr,lA,Oxe,xc,aF,gpe,iA,Hlr,hpe,Ulr,Gxe,Mr,dA,Jlr,kc,Ylr,ppe,Klr,Zlr,_pe,eir,oir,rir,cA,tir,upe,air,nir,sir,ut,fA,lir,bpe,iir,dir,Rc,cir,vpe,fir,mir,Tpe,gir,hir,pir,Fpe,_ir,uir,mA,bir,To,gA,vir,Cpe,Tir,Fir,Fn,Cir,Mpe,Mir,Eir,Epe,yir,wir,ype,Air,Lir,Bir,V,nF,wpe,xir,kir,XO,Rir,Sir,Pir,sF,Ape,$ir,Iir,VO,jir,Dir,Nir,lF,Lpe,qir,Oir,zO,Gir,Xir,Vir,iF,Bpe,zir,Wir,WO,Qir,Hir,Uir,dF,xpe,Jir,Yir,QO,Kir,Zir,edr,cF,kpe,odr,rdr,HO,tdr,adr,ndr,fF,Rpe,sdr,ldr,UO,idr,ddr,cdr,mF,Spe,fdr,mdr,JO,gdr,hdr,pdr,gF,Ppe,_dr,udr,YO,bdr,vdr,Tdr,hF,$pe,Fdr,Cdr,KO,Mdr,Edr,ydr,pF,Ipe,wdr,Adr,ZO,Ldr,Bdr,xdr,_F,jpe,kdr,Rdr,eG,Sdr,Pdr,$dr,uF,Dpe,Idr,jdr,oG,Ddr,Ndr,qdr,bF,Npe,Odr,Gdr,rG,Xdr,Vdr,zdr,vF,qpe,Wdr,Qdr,tG,Hdr,Udr,Jdr,TF,Ope,Ydr,Kdr,aG,Zdr,ecr,ocr,FF,Gpe,rcr,tcr,nG,acr,ncr,scr,CF,Xpe,lcr,icr,sG,dcr,ccr,fcr,MF,Vpe,mcr,gcr,lG,hcr,pcr,_cr,EF,zpe,ucr,bcr,iG,vcr,Tcr,Fcr,yF,Wpe,Ccr,Mcr,dG,Ecr,ycr,wcr,wF,Qpe,Acr,Lcr,cG,Bcr,xcr,kcr,AF,Hpe,Rcr,Scr,fG,Pcr,$cr,Icr,LF,Upe,jcr,Dcr,mG,Ncr,qcr,Ocr,BF,Jpe,Gcr,Xcr,gG,Vcr,zcr,Wcr,Ype,Qcr,Hcr,hA,Xxe,Sc,xF,Kpe,pA,Ucr,Zpe,Jcr,Vxe,Er,_A,Ycr,Pc,Kcr,e_e,Zcr,efr,o_e,ofr,rfr,tfr,uA,afr,r_e,nfr,sfr,lfr,bt,bA,ifr,t_e,dfr,cfr,$c,ffr,a_e,mfr,gfr,n_e,hfr,pfr,_fr,s_e,ufr,bfr,vA,vfr,Fo,TA,Tfr,l_e,Ffr,Cfr,Cn,Mfr,i_e,Efr,yfr,d_e,wfr,Afr,c_e,Lfr,Bfr,xfr,te,kF,f_e,kfr,Rfr,hG,Sfr,Pfr,$fr,RF,m_e,Ifr,jfr,pG,Dfr,Nfr,qfr,SF,g_e,Ofr,Gfr,_G,Xfr,Vfr,zfr,PF,h_e,Wfr,Qfr,uG,Hfr,Ufr,Jfr,$F,p_e,Yfr,Kfr,bG,Zfr,emr,omr,IF,__e,rmr,tmr,vG,amr,nmr,smr,jF,u_e,lmr,imr,TG,dmr,cmr,fmr,DF,b_e,mmr,gmr,FG,hmr,pmr,_mr,NF,v_e,umr,bmr,CG,vmr,Tmr,Fmr,qF,T_e,Cmr,Mmr,MG,Emr,ymr,wmr,OF,F_e,Amr,Lmr,EG,Bmr,xmr,kmr,GF,C_e,Rmr,Smr,yG,Pmr,$mr,Imr,XF,M_e,jmr,Dmr,wG,Nmr,qmr,Omr,VF,E_e,Gmr,Xmr,AG,Vmr,zmr,Wmr,zF,y_e,Qmr,Hmr,LG,Umr,Jmr,Ymr,WF,w_e,Kmr,Zmr,BG,egr,ogr,rgr,QF,A_e,tgr,agr,xG,ngr,sgr,lgr,L_e,igr,dgr,FA,zxe,Ic,HF,B_e,CA,cgr,x_e,fgr,Wxe,yr,MA,mgr,jc,ggr,k_e,hgr,pgr,R_e,_gr,ugr,bgr,EA,vgr,S_e,Tgr,Fgr,Cgr,vt,yA,Mgr,P_e,Egr,ygr,Dc,wgr,$_e,Agr,Lgr,I_e,Bgr,xgr,kgr,j_e,Rgr,Sgr,wA,Pgr,Co,AA,$gr,D_e,Igr,jgr,Mn,Dgr,N_e,Ngr,qgr,q_e,Ogr,Ggr,O_e,Xgr,Vgr,zgr,G_e,UF,X_e,Wgr,Qgr,kG,Hgr,Ugr,Jgr,V_e,Ygr,Kgr,LA,Qxe,Nc,JF,z_e,BA,Zgr,W_e,ehr,Hxe,wr,xA,ohr,qc,rhr,Q_e,thr,ahr,H_e,nhr,shr,lhr,kA,ihr,U_e,dhr,chr,fhr,Tt,RA,mhr,J_e,ghr,hhr,Oc,phr,Y_e,_hr,uhr,K_e,bhr,vhr,Thr,Z_e,Fhr,Chr,SA,Mhr,Mo,PA,Ehr,eue,yhr,whr,En,Ahr,oue,Lhr,Bhr,rue,xhr,khr,tue,Rhr,Shr,Phr,K,YF,aue,$hr,Ihr,RG,jhr,Dhr,Nhr,KF,nue,qhr,Ohr,SG,Ghr,Xhr,Vhr,ZF,sue,zhr,Whr,PG,Qhr,Hhr,Uhr,e9,lue,Jhr,Yhr,$G,Khr,Zhr,epr,o9,iue,opr,rpr,IG,tpr,apr,npr,r9,due,spr,lpr,jG,ipr,dpr,cpr,t9,cue,fpr,mpr,DG,gpr,hpr,ppr,a9,fue,_pr,upr,NG,bpr,vpr,Tpr,n9,mue,Fpr,Cpr,qG,Mpr,Epr,ypr,s9,gue,wpr,Apr,OG,Lpr,Bpr,xpr,l9,hue,kpr,Rpr,GG,Spr,Ppr,$pr,i9,pue,Ipr,jpr,XG,Dpr,Npr,qpr,d9,_ue,Opr,Gpr,VG,Xpr,Vpr,zpr,c9,uue,Wpr,Qpr,zG,Hpr,Upr,Jpr,f9,bue,Ypr,Kpr,WG,Zpr,e_r,o_r,m9,vue,r_r,t_r,QG,a_r,n_r,s_r,g9,Tue,l_r,i_r,HG,d_r,c_r,f_r,h9,Fue,m_r,g_r,UG,h_r,p_r,__r,p9,Cue,u_r,b_r,JG,v_r,T_r,F_r,_9,Mue,C_r,M_r,YG,E_r,y_r,w_r,Eue,A_r,L_r,$A,Uxe,Gc,u9,yue,IA,B_r,wue,x_r,Jxe,Ar,jA,k_r,Xc,R_r,Aue,S_r,P_r,Lue,$_r,I_r,j_r,DA,D_r,Bue,N_r,q_r,O_r,Ft,NA,G_r,xue,X_r,V_r,Vc,z_r,kue,W_r,Q_r,Rue,H_r,U_r,J_r,Sue,Y_r,K_r,qA,Z_r,Eo,OA,eur,Pue,our,rur,yn,tur,$ue,aur,nur,Iue,sur,lur,jue,iur,dur,cur,Z,b9,Due,fur,mur,KG,gur,hur,pur,v9,Nue,_ur,uur,ZG,bur,vur,Tur,T9,que,Fur,Cur,eX,Mur,Eur,yur,F9,Oue,wur,Aur,oX,Lur,Bur,xur,C9,Gue,kur,Rur,rX,Sur,Pur,$ur,M9,Xue,Iur,jur,tX,Dur,Nur,qur,E9,Vue,Our,Gur,aX,Xur,Vur,zur,y9,zue,Wur,Qur,nX,Hur,Uur,Jur,w9,Wue,Yur,Kur,sX,Zur,e2r,o2r,A9,Que,r2r,t2r,lX,a2r,n2r,s2r,L9,Hue,l2r,i2r,iX,d2r,c2r,f2r,B9,Uue,m2r,g2r,dX,h2r,p2r,_2r,x9,Jue,u2r,b2r,cX,v2r,T2r,F2r,k9,Yue,C2r,M2r,fX,E2r,y2r,w2r,R9,Kue,A2r,L2r,mX,B2r,x2r,k2r,S9,Zue,R2r,S2r,gX,P2r,$2r,I2r,P9,e2e,j2r,D2r,hX,N2r,q2r,O2r,$9,o2e,G2r,X2r,pX,V2r,z2r,W2r,I9,r2e,Q2r,H2r,_X,U2r,J2r,Y2r,t2e,K2r,Z2r,GA,Yxe,zc,j9,a2e,XA,e1r,n2e,o1r,Kxe,Lr,VA,r1r,Wc,t1r,s2e,a1r,n1r,l2e,s1r,l1r,i1r,zA,d1r,i2e,c1r,f1r,m1r,Ct,WA,g1r,d2e,h1r,p1r,Qc,_1r,c2e,u1r,b1r,f2e,v1r,T1r,F1r,m2e,C1r,M1r,QA,E1r,yo,HA,y1r,g2e,w1r,A1r,wn,L1r,h2e,B1r,x1r,p2e,k1r,R1r,_2e,S1r,P1r,$1r,u2e,D9,b2e,I1r,j1r,uX,D1r,N1r,q1r,v2e,O1r,G1r,UA,Zxe,Hc,N9,T2e,JA,X1r,F2e,V1r,eke,Br,YA,z1r,Uc,W1r,C2e,Q1r,H1r,M2e,U1r,J1r,Y1r,KA,K1r,E2e,Z1r,ebr,obr,Mt,ZA,rbr,y2e,tbr,abr,Jc,nbr,w2e,sbr,lbr,A2e,ibr,dbr,cbr,L2e,fbr,mbr,e0,gbr,wo,o0,hbr,B2e,pbr,_br,An,ubr,x2e,bbr,vbr,k2e,Tbr,Fbr,R2e,Cbr,Mbr,Ebr,S2e,q9,P2e,ybr,wbr,bX,Abr,Lbr,Bbr,$2e,xbr,kbr,r0,oke,Yc,O9,I2e,t0,Rbr,j2e,Sbr,rke,xr,a0,Pbr,Kc,$br,D2e,Ibr,jbr,N2e,Dbr,Nbr,qbr,n0,Obr,q2e,Gbr,Xbr,Vbr,Et,s0,zbr,O2e,Wbr,Qbr,Zc,Hbr,G2e,Ubr,Jbr,X2e,Ybr,Kbr,Zbr,V2e,e3r,o3r,l0,r3r,Ao,i0,t3r,z2e,a3r,n3r,Ln,s3r,W2e,l3r,i3r,Q2e,d3r,c3r,H2e,f3r,m3r,g3r,z,G9,U2e,h3r,p3r,vX,_3r,u3r,b3r,X9,J2e,v3r,T3r,TX,F3r,C3r,M3r,V9,Y2e,E3r,y3r,FX,w3r,A3r,L3r,z9,K2e,B3r,x3r,CX,k3r,R3r,S3r,W9,Z2e,P3r,$3r,MX,I3r,j3r,D3r,Q9,e1e,N3r,q3r,EX,O3r,G3r,X3r,H9,o1e,V3r,z3r,yX,W3r,Q3r,H3r,U9,r1e,U3r,J3r,wX,Y3r,K3r,Z3r,J9,t1e,e5r,o5r,AX,r5r,t5r,a5r,Y9,a1e,n5r,s5r,LX,l5r,i5r,d5r,K9,n1e,c5r,f5r,BX,m5r,g5r,h5r,Z9,s1e,p5r,_5r,xX,u5r,b5r,v5r,eC,l1e,T5r,F5r,kX,C5r,M5r,E5r,oC,i1e,y5r,w5r,RX,A5r,L5r,B5r,rC,d1e,x5r,k5r,SX,R5r,S5r,P5r,tC,c1e,$5r,I5r,PX,j5r,D5r,N5r,aC,f1e,q5r,O5r,$X,G5r,X5r,V5r,nC,m1e,z5r,W5r,IX,Q5r,H5r,U5r,sC,g1e,J5r,Y5r,jX,K5r,Z5r,evr,lC,h1e,ovr,rvr,DX,tvr,avr,nvr,iC,p1e,svr,lvr,NX,ivr,dvr,cvr,dC,_1e,fvr,mvr,qX,gvr,hvr,pvr,cC,u1e,_vr,uvr,OX,bvr,vvr,Tvr,fC,b1e,Fvr,Cvr,GX,Mvr,Evr,yvr,v1e,wvr,Avr,d0,tke,ef,mC,T1e,c0,Lvr,F1e,Bvr,ake,kr,f0,xvr,of,kvr,C1e,Rvr,Svr,M1e,Pvr,$vr,Ivr,m0,jvr,E1e,Dvr,Nvr,qvr,yt,g0,Ovr,y1e,Gvr,Xvr,rf,Vvr,w1e,zvr,Wvr,A1e,Qvr,Hvr,Uvr,L1e,Jvr,Yvr,h0,Kvr,Lo,p0,Zvr,B1e,eTr,oTr,Bn,rTr,x1e,tTr,aTr,k1e,nTr,sTr,R1e,lTr,iTr,dTr,xn,gC,S1e,cTr,fTr,XX,mTr,gTr,hTr,hC,P1e,pTr,_Tr,VX,uTr,bTr,vTr,pC,$1e,TTr,FTr,zX,CTr,MTr,ETr,_C,I1e,yTr,wTr,WX,ATr,LTr,BTr,j1e,xTr,kTr,_0,nke,tf,uC,D1e,u0,RTr,N1e,STr,ske,Rr,b0,PTr,af,$Tr,q1e,ITr,jTr,O1e,DTr,NTr,qTr,v0,OTr,G1e,GTr,XTr,VTr,wt,T0,zTr,X1e,WTr,QTr,nf,HTr,V1e,UTr,JTr,z1e,YTr,KTr,ZTr,W1e,eFr,oFr,F0,rFr,Bo,C0,tFr,Q1e,aFr,nFr,kn,sFr,H1e,lFr,iFr,U1e,dFr,cFr,J1e,fFr,mFr,gFr,fe,bC,Y1e,hFr,pFr,QX,_Fr,uFr,bFr,vC,K1e,vFr,TFr,HX,FFr,CFr,MFr,TC,Z1e,EFr,yFr,UX,wFr,AFr,LFr,FC,ebe,BFr,xFr,JX,kFr,RFr,SFr,CC,obe,PFr,$Fr,YX,IFr,jFr,DFr,MC,rbe,NFr,qFr,KX,OFr,GFr,XFr,EC,tbe,VFr,zFr,ZX,WFr,QFr,HFr,yC,abe,UFr,JFr,eV,YFr,KFr,ZFr,wC,nbe,e9r,o9r,oV,r9r,t9r,a9r,AC,sbe,n9r,s9r,rV,l9r,i9r,d9r,LC,lbe,c9r,f9r,tV,m9r,g9r,h9r,ibe,p9r,_9r,M0,lke,sf,BC,dbe,E0,u9r,cbe,b9r,ike,Sr,y0,v9r,lf,T9r,fbe,F9r,C9r,mbe,M9r,E9r,y9r,w0,w9r,gbe,A9r,L9r,B9r,At,A0,x9r,hbe,k9r,R9r,df,S9r,pbe,P9r,$9r,_be,I9r,j9r,D9r,ube,N9r,q9r,L0,O9r,xo,B0,G9r,bbe,X9r,V9r,Rn,z9r,vbe,W9r,Q9r,Tbe,H9r,U9r,Fbe,J9r,Y9r,K9r,ve,xC,Cbe,Z9r,eCr,aV,oCr,rCr,tCr,kC,Mbe,aCr,nCr,nV,sCr,lCr,iCr,RC,Ebe,dCr,cCr,sV,fCr,mCr,gCr,SC,ybe,hCr,pCr,lV,_Cr,uCr,bCr,PC,wbe,vCr,TCr,iV,FCr,CCr,MCr,$C,Abe,ECr,yCr,dV,wCr,ACr,LCr,IC,Lbe,BCr,xCr,cV,kCr,RCr,SCr,jC,Bbe,PCr,$Cr,fV,ICr,jCr,DCr,DC,xbe,NCr,qCr,mV,OCr,GCr,XCr,kbe,VCr,zCr,x0,dke,cf,NC,Rbe,k0,WCr,Sbe,QCr,cke,Pr,R0,HCr,ff,UCr,Pbe,JCr,YCr,$be,KCr,ZCr,e4r,S0,o4r,Ibe,r4r,t4r,a4r,Lt,P0,n4r,jbe,s4r,l4r,mf,i4r,Dbe,d4r,c4r,Nbe,f4r,m4r,g4r,qbe,h4r,p4r,$0,_4r,ko,I0,u4r,Obe,b4r,v4r,Sn,T4r,Gbe,F4r,C4r,Xbe,M4r,E4r,Vbe,y4r,w4r,A4r,Te,qC,zbe,L4r,B4r,gV,x4r,k4r,R4r,OC,Wbe,S4r,P4r,hV,$4r,I4r,j4r,GC,Qbe,D4r,N4r,pV,q4r,O4r,G4r,XC,Hbe,X4r,V4r,_V,z4r,W4r,Q4r,VC,Ube,H4r,U4r,uV,J4r,Y4r,K4r,zC,Jbe,Z4r,eMr,bV,oMr,rMr,tMr,WC,Ybe,aMr,nMr,vV,sMr,lMr,iMr,QC,Kbe,dMr,cMr,TV,fMr,mMr,gMr,HC,Zbe,hMr,pMr,FV,_Mr,uMr,bMr,e3e,vMr,TMr,j0,fke,gf,UC,o3e,D0,FMr,r3e,CMr,mke,$r,N0,MMr,hf,EMr,t3e,yMr,wMr,a3e,AMr,LMr,BMr,q0,xMr,n3e,kMr,RMr,SMr,Bt,O0,PMr,s3e,$Mr,IMr,pf,jMr,l3e,DMr,NMr,i3e,qMr,OMr,GMr,d3e,XMr,VMr,G0,zMr,Ro,X0,WMr,c3e,QMr,HMr,Pn,UMr,f3e,JMr,YMr,m3e,KMr,ZMr,g3e,eEr,oEr,rEr,Fe,JC,h3e,tEr,aEr,CV,nEr,sEr,lEr,YC,p3e,iEr,dEr,MV,cEr,fEr,mEr,KC,_3e,gEr,hEr,EV,pEr,_Er,uEr,ZC,u3e,bEr,vEr,yV,TEr,FEr,CEr,e4,b3e,MEr,EEr,wV,yEr,wEr,AEr,o4,v3e,LEr,BEr,AV,xEr,kEr,REr,r4,T3e,SEr,PEr,LV,$Er,IEr,jEr,t4,F3e,DEr,NEr,BV,qEr,OEr,GEr,a4,C3e,XEr,VEr,xV,zEr,WEr,QEr,M3e,HEr,UEr,V0,gke,_f,n4,E3e,z0,JEr,y3e,YEr,hke,Ir,W0,KEr,uf,ZEr,w3e,eyr,oyr,A3e,ryr,tyr,ayr,Q0,nyr,L3e,syr,lyr,iyr,xt,H0,dyr,B3e,cyr,fyr,bf,myr,x3e,gyr,hyr,k3e,pyr,_yr,uyr,R3e,byr,vyr,U0,Tyr,So,J0,Fyr,S3e,Cyr,Myr,$n,Eyr,P3e,yyr,wyr,$3e,Ayr,Lyr,I3e,Byr,xyr,kyr,Ce,s4,j3e,Ryr,Syr,kV,Pyr,$yr,Iyr,l4,D3e,jyr,Dyr,RV,Nyr,qyr,Oyr,i4,N3e,Gyr,Xyr,SV,Vyr,zyr,Wyr,d4,q3e,Qyr,Hyr,PV,Uyr,Jyr,Yyr,c4,O3e,Kyr,Zyr,$V,ewr,owr,rwr,f4,G3e,twr,awr,IV,nwr,swr,lwr,m4,X3e,iwr,dwr,jV,cwr,fwr,mwr,g4,V3e,gwr,hwr,DV,pwr,_wr,uwr,h4,z3e,bwr,vwr,NV,Twr,Fwr,Cwr,W3e,Mwr,Ewr,Y0,pke,vf,p4,Q3e,K0,ywr,H3e,wwr,_ke,jr,Z0,Awr,Tf,Lwr,U3e,Bwr,xwr,J3e,kwr,Rwr,Swr,eL,Pwr,Y3e,$wr,Iwr,jwr,kt,oL,Dwr,K3e,Nwr,qwr,Ff,Owr,Z3e,Gwr,Xwr,e5e,Vwr,zwr,Wwr,o5e,Qwr,Hwr,rL,Uwr,Po,tL,Jwr,r5e,Ywr,Kwr,In,Zwr,t5e,e6r,o6r,a5e,r6r,t6r,n5e,a6r,n6r,s6r,lo,_4,s5e,l6r,i6r,qV,d6r,c6r,f6r,u4,l5e,m6r,g6r,OV,h6r,p6r,_6r,b4,i5e,u6r,b6r,GV,v6r,T6r,F6r,v4,d5e,C6r,M6r,XV,E6r,y6r,w6r,T4,c5e,A6r,L6r,VV,B6r,x6r,k6r,F4,f5e,R6r,S6r,zV,P6r,$6r,I6r,C4,m5e,j6r,D6r,WV,N6r,q6r,O6r,g5e,G6r,X6r,aL,uke,Cf,M4,h5e,nL,V6r,p5e,z6r,bke,Dr,sL,W6r,Mf,Q6r,_5e,H6r,U6r,u5e,J6r,Y6r,K6r,lL,Z6r,b5e,eAr,oAr,rAr,Rt,iL,tAr,v5e,aAr,nAr,Ef,sAr,T5e,lAr,iAr,F5e,dAr,cAr,fAr,C5e,mAr,gAr,dL,hAr,$o,cL,pAr,M5e,_Ar,uAr,jn,bAr,E5e,vAr,TAr,y5e,FAr,CAr,w5e,MAr,EAr,yAr,io,E4,A5e,wAr,AAr,QV,LAr,BAr,xAr,y4,L5e,kAr,RAr,HV,SAr,PAr,$Ar,w4,B5e,IAr,jAr,UV,DAr,NAr,qAr,A4,x5e,OAr,GAr,JV,XAr,VAr,zAr,L4,k5e,WAr,QAr,YV,HAr,UAr,JAr,B4,R5e,YAr,KAr,KV,ZAr,e0r,o0r,x4,S5e,r0r,t0r,ZV,a0r,n0r,s0r,P5e,l0r,i0r,fL,vke,yf,k4,$5e,mL,d0r,I5e,c0r,Tke,Nr,gL,f0r,wf,m0r,j5e,g0r,h0r,D5e,p0r,_0r,u0r,hL,b0r,N5e,v0r,T0r,F0r,St,pL,C0r,q5e,M0r,E0r,Af,y0r,O5e,w0r,A0r,G5e,L0r,B0r,x0r,X5e,k0r,R0r,_L,S0r,Io,uL,P0r,V5e,$0r,I0r,Dn,j0r,z5e,D0r,N0r,W5e,q0r,O0r,Q5e,G0r,X0r,V0r,H5e,R4,U5e,z0r,W0r,ez,Q0r,H0r,U0r,J5e,J0r,Y0r,bL,Fke,Lf,S4,Y5e,vL,K0r,K5e,Z0r,Cke,qr,TL,eLr,Bf,oLr,Z5e,rLr,tLr,eve,aLr,nLr,sLr,FL,lLr,ove,iLr,dLr,cLr,Pt,CL,fLr,rve,mLr,gLr,xf,hLr,tve,pLr,_Lr,ave,uLr,bLr,vLr,nve,TLr,FLr,ML,CLr,jo,EL,MLr,sve,ELr,yLr,Nn,wLr,lve,ALr,LLr,ive,BLr,xLr,dve,kLr,RLr,SLr,yL,P4,cve,PLr,$Lr,oz,ILr,jLr,DLr,$4,fve,NLr,qLr,rz,OLr,GLr,XLr,mve,VLr,zLr,wL,Mke,kf,I4,gve,AL,WLr,hve,QLr,Eke,Or,LL,HLr,Rf,ULr,pve,JLr,YLr,_ve,KLr,ZLr,e8r,BL,o8r,uve,r8r,t8r,a8r,$t,xL,n8r,bve,s8r,l8r,Sf,i8r,vve,d8r,c8r,Tve,f8r,m8r,g8r,Fve,h8r,p8r,kL,_8r,Do,RL,u8r,Cve,b8r,v8r,qn,T8r,Mve,F8r,C8r,Eve,M8r,E8r,yve,y8r,w8r,A8r,wve,j4,Ave,L8r,B8r,tz,x8r,k8r,R8r,Lve,S8r,P8r,SL,yke;return ce=new X({}),Na=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),GM=new X({}),XM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new $8r({props:{warning:"&lcub;true}",$$slots:{default:[H5t]},$$scope:{ctx:$i}}}),VM=new X({}),zM=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L526"}}),HM=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),UM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),JM=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),YM=new X({}),KM=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L352"}}),oE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15923/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),rE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),tE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),aE=new X({}),nE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),iE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15923/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new $8r({props:{$$slots:{default:[U5t]},$$scope:{ctx:$i}}}),dE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),cE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),fE=new X({}),mE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L71"}}),pE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new $8r({props:{$$slots:{default:[J5t]},$$scope:{ctx:$i}}}),_E=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),uE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),bE=new X({}),vE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L697"}}),FE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ME=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yE=new X({}),wE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L704"}}),LE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),xE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new X({}),SE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L719"}}),$E=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),jE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NE=new X({}),qE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L726"}}),GE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),VE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new X({}),QE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L733"}}),UE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),YE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new X({}),ey=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L742"}}),ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L776"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L783"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L769"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L751"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L758"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Gy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L792"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L831"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L838"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L861"}}),fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L845"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L852"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L870"}}),Sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),$w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L877"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),zw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L824"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L799"}}),e6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),r6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new X({}),n6=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L806"}}),l6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),d6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m6=new X({}),g6=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L815"}}),p6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),u6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v6=new X({}),T6=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),C6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),E6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new X({}),A6=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),B6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),k6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new X({}),P6=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),I6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),D6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new X({}),O6=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),X6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new X({}),U6=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Y6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),NA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),y0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),R0=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),N0=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),O0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),W0=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),LL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),xL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),RL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),de=a("h1"),me=a("a"),so=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Ii=o("Auto Classes"),$f=l(),ca=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),DM=o("from_pretrained()"),If=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),co=a("p"),Ni=o("Instantiating one of "),On=a("a"),NM=o("AutoConfig"),Gn=o(", "),Xn=a("a"),qM=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),OM=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Na.$$.fragment),fo=l(),ge=a("p"),k8=o("will create a model that is an instance of "),Gi=a("a"),R8=o("BertModel"),S8=o("."),Xo=l(),qa=a("p"),P8=o("There is one class of "),Df=a("code"),$8=o("AutoModel"),DSe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EBe=l(),Xi=a("h2"),Nf=a("a"),JW=a("span"),f(GM.$$.fragment),NSe=l(),YW=a("span"),qSe=o("Extending the Auto Classes"),yBe=l(),zn=a("p"),OSe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KW=a("code"),GSe=o("NewModel"),XSe=o(", make sure you have a "),ZW=a("code"),VSe=o("NewModelConfig"),zSe=o(` then you can add those to the auto
classes like this:`),wBe=l(),f(XM.$$.fragment),ABe=l(),I8=a("p"),WSe=o("You will then be able to use the auto classes like you would usually do!"),LBe=l(),f(qf.$$.fragment),BBe=l(),Vi=a("h2"),Of=a("a"),eQ=a("span"),f(VM.$$.fragment),QSe=l(),oQ=a("span"),HSe=o("AutoConfig"),xBe=l(),Vo=a("div"),f(zM.$$.fragment),USe=l(),WM=a("p"),JSe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j8=a("a"),YSe=o("from_pretrained()"),KSe=o(" class method."),ZSe=l(),QM=a("p"),ePe=o("This class cannot be instantiated directly using "),rQ=a("code"),oPe=o("__init__()"),rPe=o(" (throws an error)."),tPe=l(),mo=a("div"),f(HM.$$.fragment),aPe=l(),tQ=a("p"),nPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sPe=l(),zi=a("p"),lPe=o("The configuration class to instantiate is selected based on the "),aQ=a("code"),iPe=o("model_type"),dPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nQ=a("code"),cPe=o("pretrained_model_name_or_path"),fPe=o(":"),mPe=l(),v=a("ul"),Gf=a("li"),sQ=a("strong"),gPe=o("albert"),hPe=o(" \u2014 "),D8=a("a"),pPe=o("AlbertConfig"),_Pe=o(" (ALBERT model)"),uPe=l(),Xf=a("li"),lQ=a("strong"),bPe=o("bart"),vPe=o(" \u2014 "),N8=a("a"),TPe=o("BartConfig"),FPe=o(" (BART model)"),CPe=l(),Vf=a("li"),iQ=a("strong"),MPe=o("beit"),EPe=o(" \u2014 "),q8=a("a"),yPe=o("BeitConfig"),wPe=o(" (BEiT model)"),APe=l(),zf=a("li"),dQ=a("strong"),LPe=o("bert"),BPe=o(" \u2014 "),O8=a("a"),xPe=o("BertConfig"),kPe=o(" (BERT model)"),RPe=l(),Wf=a("li"),cQ=a("strong"),SPe=o("bert-generation"),PPe=o(" \u2014 "),G8=a("a"),$Pe=o("BertGenerationConfig"),IPe=o(" (Bert Generation model)"),jPe=l(),Qf=a("li"),fQ=a("strong"),DPe=o("big_bird"),NPe=o(" \u2014 "),X8=a("a"),qPe=o("BigBirdConfig"),OPe=o(" (BigBird model)"),GPe=l(),Hf=a("li"),mQ=a("strong"),XPe=o("bigbird_pegasus"),VPe=o(" \u2014 "),V8=a("a"),zPe=o("BigBirdPegasusConfig"),WPe=o(" (BigBirdPegasus model)"),QPe=l(),Uf=a("li"),gQ=a("strong"),HPe=o("blenderbot"),UPe=o(" \u2014 "),z8=a("a"),JPe=o("BlenderbotConfig"),YPe=o(" (Blenderbot model)"),KPe=l(),Jf=a("li"),hQ=a("strong"),ZPe=o("blenderbot-small"),e$e=o(" \u2014 "),W8=a("a"),o$e=o("BlenderbotSmallConfig"),r$e=o(" (BlenderbotSmall model)"),t$e=l(),Yf=a("li"),pQ=a("strong"),a$e=o("camembert"),n$e=o(" \u2014 "),Q8=a("a"),s$e=o("CamembertConfig"),l$e=o(" (CamemBERT model)"),i$e=l(),Kf=a("li"),_Q=a("strong"),d$e=o("canine"),c$e=o(" \u2014 "),H8=a("a"),f$e=o("CanineConfig"),m$e=o(" (Canine model)"),g$e=l(),Zf=a("li"),uQ=a("strong"),h$e=o("clip"),p$e=o(" \u2014 "),U8=a("a"),_$e=o("CLIPConfig"),u$e=o(" (CLIP model)"),b$e=l(),em=a("li"),bQ=a("strong"),v$e=o("convbert"),T$e=o(" \u2014 "),J8=a("a"),F$e=o("ConvBertConfig"),C$e=o(" (ConvBERT model)"),M$e=l(),om=a("li"),vQ=a("strong"),E$e=o("convnext"),y$e=o(" \u2014 "),Y8=a("a"),w$e=o("ConvNextConfig"),A$e=o(" (ConvNext model)"),L$e=l(),rm=a("li"),TQ=a("strong"),B$e=o("ctrl"),x$e=o(" \u2014 "),K8=a("a"),k$e=o("CTRLConfig"),R$e=o(" (CTRL model)"),S$e=l(),tm=a("li"),FQ=a("strong"),P$e=o("data2vec-audio"),$$e=o(" \u2014 "),Z8=a("a"),I$e=o("Data2VecAudioConfig"),j$e=o(" (Data2VecAudio model)"),D$e=l(),am=a("li"),CQ=a("strong"),N$e=o("data2vec-text"),q$e=o(" \u2014 "),e7=a("a"),O$e=o("Data2VecTextConfig"),G$e=o(" (Data2VecText model)"),X$e=l(),nm=a("li"),MQ=a("strong"),V$e=o("deberta"),z$e=o(" \u2014 "),o7=a("a"),W$e=o("DebertaConfig"),Q$e=o(" (DeBERTa model)"),H$e=l(),sm=a("li"),EQ=a("strong"),U$e=o("deberta-v2"),J$e=o(" \u2014 "),r7=a("a"),Y$e=o("DebertaV2Config"),K$e=o(" (DeBERTa-v2 model)"),Z$e=l(),lm=a("li"),yQ=a("strong"),eIe=o("deit"),oIe=o(" \u2014 "),t7=a("a"),rIe=o("DeiTConfig"),tIe=o(" (DeiT model)"),aIe=l(),im=a("li"),wQ=a("strong"),nIe=o("detr"),sIe=o(" \u2014 "),a7=a("a"),lIe=o("DetrConfig"),iIe=o(" (DETR model)"),dIe=l(),dm=a("li"),AQ=a("strong"),cIe=o("distilbert"),fIe=o(" \u2014 "),n7=a("a"),mIe=o("DistilBertConfig"),gIe=o(" (DistilBERT model)"),hIe=l(),cm=a("li"),LQ=a("strong"),pIe=o("dpr"),_Ie=o(" \u2014 "),s7=a("a"),uIe=o("DPRConfig"),bIe=o(" (DPR model)"),vIe=l(),fm=a("li"),BQ=a("strong"),TIe=o("electra"),FIe=o(" \u2014 "),l7=a("a"),CIe=o("ElectraConfig"),MIe=o(" (ELECTRA model)"),EIe=l(),mm=a("li"),xQ=a("strong"),yIe=o("encoder-decoder"),wIe=o(" \u2014 "),i7=a("a"),AIe=o("EncoderDecoderConfig"),LIe=o(" (Encoder decoder model)"),BIe=l(),gm=a("li"),kQ=a("strong"),xIe=o("flaubert"),kIe=o(" \u2014 "),d7=a("a"),RIe=o("FlaubertConfig"),SIe=o(" (FlauBERT model)"),PIe=l(),hm=a("li"),RQ=a("strong"),$Ie=o("fnet"),IIe=o(" \u2014 "),c7=a("a"),jIe=o("FNetConfig"),DIe=o(" (FNet model)"),NIe=l(),pm=a("li"),SQ=a("strong"),qIe=o("fsmt"),OIe=o(" \u2014 "),f7=a("a"),GIe=o("FSMTConfig"),XIe=o(" (FairSeq Machine-Translation model)"),VIe=l(),_m=a("li"),PQ=a("strong"),zIe=o("funnel"),WIe=o(" \u2014 "),m7=a("a"),QIe=o("FunnelConfig"),HIe=o(" (Funnel Transformer model)"),UIe=l(),um=a("li"),$Q=a("strong"),JIe=o("gpt2"),YIe=o(" \u2014 "),g7=a("a"),KIe=o("GPT2Config"),ZIe=o(" (OpenAI GPT-2 model)"),eje=l(),bm=a("li"),IQ=a("strong"),oje=o("gpt_neo"),rje=o(" \u2014 "),h7=a("a"),tje=o("GPTNeoConfig"),aje=o(" (GPT Neo model)"),nje=l(),vm=a("li"),jQ=a("strong"),sje=o("gptj"),lje=o(" \u2014 "),p7=a("a"),ije=o("GPTJConfig"),dje=o(" (GPT-J model)"),cje=l(),Tm=a("li"),DQ=a("strong"),fje=o("hubert"),mje=o(" \u2014 "),_7=a("a"),gje=o("HubertConfig"),hje=o(" (Hubert model)"),pje=l(),Fm=a("li"),NQ=a("strong"),_je=o("ibert"),uje=o(" \u2014 "),u7=a("a"),bje=o("IBertConfig"),vje=o(" (I-BERT model)"),Tje=l(),Cm=a("li"),qQ=a("strong"),Fje=o("imagegpt"),Cje=o(" \u2014 "),b7=a("a"),Mje=o("ImageGPTConfig"),Eje=o(" (ImageGPT model)"),yje=l(),Mm=a("li"),OQ=a("strong"),wje=o("layoutlm"),Aje=o(" \u2014 "),v7=a("a"),Lje=o("LayoutLMConfig"),Bje=o(" (LayoutLM model)"),xje=l(),Em=a("li"),GQ=a("strong"),kje=o("layoutlmv2"),Rje=o(" \u2014 "),T7=a("a"),Sje=o("LayoutLMv2Config"),Pje=o(" (LayoutLMv2 model)"),$je=l(),ym=a("li"),XQ=a("strong"),Ije=o("led"),jje=o(" \u2014 "),F7=a("a"),Dje=o("LEDConfig"),Nje=o(" (LED model)"),qje=l(),wm=a("li"),VQ=a("strong"),Oje=o("longformer"),Gje=o(" \u2014 "),C7=a("a"),Xje=o("LongformerConfig"),Vje=o(" (Longformer model)"),zje=l(),Am=a("li"),zQ=a("strong"),Wje=o("luke"),Qje=o(" \u2014 "),M7=a("a"),Hje=o("LukeConfig"),Uje=o(" (LUKE model)"),Jje=l(),Lm=a("li"),WQ=a("strong"),Yje=o("lxmert"),Kje=o(" \u2014 "),E7=a("a"),Zje=o("LxmertConfig"),eDe=o(" (LXMERT model)"),oDe=l(),Bm=a("li"),QQ=a("strong"),rDe=o("m2m_100"),tDe=o(" \u2014 "),y7=a("a"),aDe=o("M2M100Config"),nDe=o(" (M2M100 model)"),sDe=l(),xm=a("li"),HQ=a("strong"),lDe=o("marian"),iDe=o(" \u2014 "),w7=a("a"),dDe=o("MarianConfig"),cDe=o(" (Marian model)"),fDe=l(),km=a("li"),UQ=a("strong"),mDe=o("maskformer"),gDe=o(" \u2014 "),A7=a("a"),hDe=o("MaskFormerConfig"),pDe=o(" (MaskFormer model)"),_De=l(),Rm=a("li"),JQ=a("strong"),uDe=o("mbart"),bDe=o(" \u2014 "),L7=a("a"),vDe=o("MBartConfig"),TDe=o(" (mBART model)"),FDe=l(),Sm=a("li"),YQ=a("strong"),CDe=o("megatron-bert"),MDe=o(" \u2014 "),B7=a("a"),EDe=o("MegatronBertConfig"),yDe=o(" (MegatronBert model)"),wDe=l(),Pm=a("li"),KQ=a("strong"),ADe=o("mobilebert"),LDe=o(" \u2014 "),x7=a("a"),BDe=o("MobileBertConfig"),xDe=o(" (MobileBERT model)"),kDe=l(),$m=a("li"),ZQ=a("strong"),RDe=o("mpnet"),SDe=o(" \u2014 "),k7=a("a"),PDe=o("MPNetConfig"),$De=o(" (MPNet model)"),IDe=l(),Im=a("li"),eH=a("strong"),jDe=o("mt5"),DDe=o(" \u2014 "),R7=a("a"),NDe=o("MT5Config"),qDe=o(" (mT5 model)"),ODe=l(),jm=a("li"),oH=a("strong"),GDe=o("nystromformer"),XDe=o(" \u2014 "),S7=a("a"),VDe=o("NystromformerConfig"),zDe=o(" (Nystromformer model)"),WDe=l(),Dm=a("li"),rH=a("strong"),QDe=o("openai-gpt"),HDe=o(" \u2014 "),P7=a("a"),UDe=o("OpenAIGPTConfig"),JDe=o(" (OpenAI GPT model)"),YDe=l(),Nm=a("li"),tH=a("strong"),KDe=o("pegasus"),ZDe=o(" \u2014 "),$7=a("a"),eNe=o("PegasusConfig"),oNe=o(" (Pegasus model)"),rNe=l(),qm=a("li"),aH=a("strong"),tNe=o("perceiver"),aNe=o(" \u2014 "),I7=a("a"),nNe=o("PerceiverConfig"),sNe=o(" (Perceiver model)"),lNe=l(),Om=a("li"),nH=a("strong"),iNe=o("plbart"),dNe=o(" \u2014 "),j7=a("a"),cNe=o("PLBartConfig"),fNe=o(" (PLBart model)"),mNe=l(),Gm=a("li"),sH=a("strong"),gNe=o("poolformer"),hNe=o(" \u2014 "),D7=a("a"),pNe=o("PoolFormerConfig"),_Ne=o(" (PoolFormer model)"),uNe=l(),Xm=a("li"),lH=a("strong"),bNe=o("prophetnet"),vNe=o(" \u2014 "),N7=a("a"),TNe=o("ProphetNetConfig"),FNe=o(" (ProphetNet model)"),CNe=l(),Vm=a("li"),iH=a("strong"),MNe=o("qdqbert"),ENe=o(" \u2014 "),q7=a("a"),yNe=o("QDQBertConfig"),wNe=o(" (QDQBert model)"),ANe=l(),zm=a("li"),dH=a("strong"),LNe=o("rag"),BNe=o(" \u2014 "),O7=a("a"),xNe=o("RagConfig"),kNe=o(" (RAG model)"),RNe=l(),Wm=a("li"),cH=a("strong"),SNe=o("realm"),PNe=o(" \u2014 "),G7=a("a"),$Ne=o("RealmConfig"),INe=o(" (Realm model)"),jNe=l(),Qm=a("li"),fH=a("strong"),DNe=o("reformer"),NNe=o(" \u2014 "),X7=a("a"),qNe=o("ReformerConfig"),ONe=o(" (Reformer model)"),GNe=l(),Hm=a("li"),mH=a("strong"),XNe=o("rembert"),VNe=o(" \u2014 "),V7=a("a"),zNe=o("RemBertConfig"),WNe=o(" (RemBERT model)"),QNe=l(),Um=a("li"),gH=a("strong"),HNe=o("retribert"),UNe=o(" \u2014 "),z7=a("a"),JNe=o("RetriBertConfig"),YNe=o(" (RetriBERT model)"),KNe=l(),Jm=a("li"),hH=a("strong"),ZNe=o("roberta"),eqe=o(" \u2014 "),W7=a("a"),oqe=o("RobertaConfig"),rqe=o(" (RoBERTa model)"),tqe=l(),Ym=a("li"),pH=a("strong"),aqe=o("roformer"),nqe=o(" \u2014 "),Q7=a("a"),sqe=o("RoFormerConfig"),lqe=o(" (RoFormer model)"),iqe=l(),Km=a("li"),_H=a("strong"),dqe=o("segformer"),cqe=o(" \u2014 "),H7=a("a"),fqe=o("SegformerConfig"),mqe=o(" (SegFormer model)"),gqe=l(),Zm=a("li"),uH=a("strong"),hqe=o("sew"),pqe=o(" \u2014 "),U7=a("a"),_qe=o("SEWConfig"),uqe=o(" (SEW model)"),bqe=l(),eg=a("li"),bH=a("strong"),vqe=o("sew-d"),Tqe=o(" \u2014 "),J7=a("a"),Fqe=o("SEWDConfig"),Cqe=o(" (SEW-D model)"),Mqe=l(),og=a("li"),vH=a("strong"),Eqe=o("speech-encoder-decoder"),yqe=o(" \u2014 "),Y7=a("a"),wqe=o("SpeechEncoderDecoderConfig"),Aqe=o(" (Speech Encoder decoder model)"),Lqe=l(),rg=a("li"),TH=a("strong"),Bqe=o("speech_to_text"),xqe=o(" \u2014 "),K7=a("a"),kqe=o("Speech2TextConfig"),Rqe=o(" (Speech2Text model)"),Sqe=l(),tg=a("li"),FH=a("strong"),Pqe=o("speech_to_text_2"),$qe=o(" \u2014 "),Z7=a("a"),Iqe=o("Speech2Text2Config"),jqe=o(" (Speech2Text2 model)"),Dqe=l(),ag=a("li"),CH=a("strong"),Nqe=o("splinter"),qqe=o(" \u2014 "),eB=a("a"),Oqe=o("SplinterConfig"),Gqe=o(" (Splinter model)"),Xqe=l(),ng=a("li"),MH=a("strong"),Vqe=o("squeezebert"),zqe=o(" \u2014 "),oB=a("a"),Wqe=o("SqueezeBertConfig"),Qqe=o(" (SqueezeBERT model)"),Hqe=l(),sg=a("li"),EH=a("strong"),Uqe=o("swin"),Jqe=o(" \u2014 "),rB=a("a"),Yqe=o("SwinConfig"),Kqe=o(" (Swin model)"),Zqe=l(),lg=a("li"),yH=a("strong"),eOe=o("t5"),oOe=o(" \u2014 "),tB=a("a"),rOe=o("T5Config"),tOe=o(" (T5 model)"),aOe=l(),ig=a("li"),wH=a("strong"),nOe=o("tapas"),sOe=o(" \u2014 "),aB=a("a"),lOe=o("TapasConfig"),iOe=o(" (TAPAS model)"),dOe=l(),dg=a("li"),AH=a("strong"),cOe=o("transfo-xl"),fOe=o(" \u2014 "),nB=a("a"),mOe=o("TransfoXLConfig"),gOe=o(" (Transformer-XL model)"),hOe=l(),cg=a("li"),LH=a("strong"),pOe=o("trocr"),_Oe=o(" \u2014 "),sB=a("a"),uOe=o("TrOCRConfig"),bOe=o(" (TrOCR model)"),vOe=l(),fg=a("li"),BH=a("strong"),TOe=o("unispeech"),FOe=o(" \u2014 "),lB=a("a"),COe=o("UniSpeechConfig"),MOe=o(" (UniSpeech model)"),EOe=l(),mg=a("li"),xH=a("strong"),yOe=o("unispeech-sat"),wOe=o(" \u2014 "),iB=a("a"),AOe=o("UniSpeechSatConfig"),LOe=o(" (UniSpeechSat model)"),BOe=l(),gg=a("li"),kH=a("strong"),xOe=o("vilt"),kOe=o(" \u2014 "),dB=a("a"),ROe=o("ViltConfig"),SOe=o(" (ViLT model)"),POe=l(),hg=a("li"),RH=a("strong"),$Oe=o("vision-encoder-decoder"),IOe=o(" \u2014 "),cB=a("a"),jOe=o("VisionEncoderDecoderConfig"),DOe=o(" (Vision Encoder decoder model)"),NOe=l(),pg=a("li"),SH=a("strong"),qOe=o("vision-text-dual-encoder"),OOe=o(" \u2014 "),fB=a("a"),GOe=o("VisionTextDualEncoderConfig"),XOe=o(" (VisionTextDualEncoder model)"),VOe=l(),_g=a("li"),PH=a("strong"),zOe=o("visual_bert"),WOe=o(" \u2014 "),mB=a("a"),QOe=o("VisualBertConfig"),HOe=o(" (VisualBert model)"),UOe=l(),ug=a("li"),$H=a("strong"),JOe=o("vit"),YOe=o(" \u2014 "),gB=a("a"),KOe=o("ViTConfig"),ZOe=o(" (ViT model)"),eGe=l(),bg=a("li"),IH=a("strong"),oGe=o("vit_mae"),rGe=o(" \u2014 "),hB=a("a"),tGe=o("ViTMAEConfig"),aGe=o(" (ViTMAE model)"),nGe=l(),vg=a("li"),jH=a("strong"),sGe=o("wav2vec2"),lGe=o(" \u2014 "),pB=a("a"),iGe=o("Wav2Vec2Config"),dGe=o(" (Wav2Vec2 model)"),cGe=l(),Tg=a("li"),DH=a("strong"),fGe=o("wavlm"),mGe=o(" \u2014 "),_B=a("a"),gGe=o("WavLMConfig"),hGe=o(" (WavLM model)"),pGe=l(),Fg=a("li"),NH=a("strong"),_Ge=o("xglm"),uGe=o(" \u2014 "),uB=a("a"),bGe=o("XGLMConfig"),vGe=o(" (XGLM model)"),TGe=l(),Cg=a("li"),qH=a("strong"),FGe=o("xlm"),CGe=o(" \u2014 "),bB=a("a"),MGe=o("XLMConfig"),EGe=o(" (XLM model)"),yGe=l(),Mg=a("li"),OH=a("strong"),wGe=o("xlm-prophetnet"),AGe=o(" \u2014 "),vB=a("a"),LGe=o("XLMProphetNetConfig"),BGe=o(" (XLMProphetNet model)"),xGe=l(),Eg=a("li"),GH=a("strong"),kGe=o("xlm-roberta"),RGe=o(" \u2014 "),TB=a("a"),SGe=o("XLMRobertaConfig"),PGe=o(" (XLM-RoBERTa model)"),$Ge=l(),yg=a("li"),XH=a("strong"),IGe=o("xlm-roberta-xl"),jGe=o(" \u2014 "),FB=a("a"),DGe=o("XLMRobertaXLConfig"),NGe=o(" (XLM-RoBERTa-XL model)"),qGe=l(),wg=a("li"),VH=a("strong"),OGe=o("xlnet"),GGe=o(" \u2014 "),CB=a("a"),XGe=o("XLNetConfig"),VGe=o(" (XLNet model)"),zGe=l(),Ag=a("li"),zH=a("strong"),WGe=o("yoso"),QGe=o(" \u2014 "),MB=a("a"),HGe=o("YosoConfig"),UGe=o(" (YOSO model)"),JGe=l(),WH=a("p"),YGe=o("Examples:"),KGe=l(),f(UM.$$.fragment),ZGe=l(),Lg=a("div"),f(JM.$$.fragment),eXe=l(),QH=a("p"),oXe=o("Register a new configuration for this class."),kBe=l(),Wi=a("h2"),Bg=a("a"),HH=a("span"),f(YM.$$.fragment),rXe=l(),UH=a("span"),tXe=o("AutoTokenizer"),RBe=l(),zo=a("div"),f(KM.$$.fragment),aXe=l(),ZM=a("p"),nXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),EB=a("a"),sXe=o("AutoTokenizer.from_pretrained()"),lXe=o(" class method."),iXe=l(),eE=a("p"),dXe=o("This class cannot be instantiated directly using "),JH=a("code"),cXe=o("__init__()"),fXe=o(" (throws an error)."),mXe=l(),go=a("div"),f(oE.$$.fragment),gXe=l(),YH=a("p"),hXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pXe=l(),Oa=a("p"),_Xe=o("The tokenizer class to instantiate is selected based on the "),KH=a("code"),uXe=o("model_type"),bXe=o(` property of the config object (either
passed as an argument or loaded from `),ZH=a("code"),vXe=o("pretrained_model_name_or_path"),TXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eU=a("code"),FXe=o("pretrained_model_name_or_path"),CXe=o(":"),MXe=l(),E=a("ul"),Wn=a("li"),oU=a("strong"),EXe=o("albert"),yXe=o(" \u2014 "),yB=a("a"),wXe=o("AlbertTokenizer"),AXe=o(" or "),wB=a("a"),LXe=o("AlbertTokenizerFast"),BXe=o(" (ALBERT model)"),xXe=l(),Qn=a("li"),rU=a("strong"),kXe=o("bart"),RXe=o(" \u2014 "),AB=a("a"),SXe=o("BartTokenizer"),PXe=o(" or "),LB=a("a"),$Xe=o("BartTokenizerFast"),IXe=o(" (BART model)"),jXe=l(),Hn=a("li"),tU=a("strong"),DXe=o("barthez"),NXe=o(" \u2014 "),BB=a("a"),qXe=o("BarthezTokenizer"),OXe=o(" or "),xB=a("a"),GXe=o("BarthezTokenizerFast"),XXe=o(" (BARThez model)"),VXe=l(),xg=a("li"),aU=a("strong"),zXe=o("bartpho"),WXe=o(" \u2014 "),kB=a("a"),QXe=o("BartphoTokenizer"),HXe=o(" (BARTpho model)"),UXe=l(),Un=a("li"),nU=a("strong"),JXe=o("bert"),YXe=o(" \u2014 "),RB=a("a"),KXe=o("BertTokenizer"),ZXe=o(" or "),SB=a("a"),eVe=o("BertTokenizerFast"),oVe=o(" (BERT model)"),rVe=l(),kg=a("li"),sU=a("strong"),tVe=o("bert-generation"),aVe=o(" \u2014 "),PB=a("a"),nVe=o("BertGenerationTokenizer"),sVe=o(" (Bert Generation model)"),lVe=l(),Rg=a("li"),lU=a("strong"),iVe=o("bert-japanese"),dVe=o(" \u2014 "),$B=a("a"),cVe=o("BertJapaneseTokenizer"),fVe=o(" (BertJapanese model)"),mVe=l(),Sg=a("li"),iU=a("strong"),gVe=o("bertweet"),hVe=o(" \u2014 "),IB=a("a"),pVe=o("BertweetTokenizer"),_Ve=o(" (Bertweet model)"),uVe=l(),Jn=a("li"),dU=a("strong"),bVe=o("big_bird"),vVe=o(" \u2014 "),jB=a("a"),TVe=o("BigBirdTokenizer"),FVe=o(" or "),DB=a("a"),CVe=o("BigBirdTokenizerFast"),MVe=o(" (BigBird model)"),EVe=l(),Yn=a("li"),cU=a("strong"),yVe=o("bigbird_pegasus"),wVe=o(" \u2014 "),NB=a("a"),AVe=o("PegasusTokenizer"),LVe=o(" or "),qB=a("a"),BVe=o("PegasusTokenizerFast"),xVe=o(" (BigBirdPegasus model)"),kVe=l(),Kn=a("li"),fU=a("strong"),RVe=o("blenderbot"),SVe=o(" \u2014 "),OB=a("a"),PVe=o("BlenderbotTokenizer"),$Ve=o(" or "),GB=a("a"),IVe=o("BlenderbotTokenizerFast"),jVe=o(" (Blenderbot model)"),DVe=l(),Pg=a("li"),mU=a("strong"),NVe=o("blenderbot-small"),qVe=o(" \u2014 "),XB=a("a"),OVe=o("BlenderbotSmallTokenizer"),GVe=o(" (BlenderbotSmall model)"),XVe=l(),$g=a("li"),gU=a("strong"),VVe=o("byt5"),zVe=o(" \u2014 "),VB=a("a"),WVe=o("ByT5Tokenizer"),QVe=o(" (ByT5 model)"),HVe=l(),Zn=a("li"),hU=a("strong"),UVe=o("camembert"),JVe=o(" \u2014 "),zB=a("a"),YVe=o("CamembertTokenizer"),KVe=o(" or "),WB=a("a"),ZVe=o("CamembertTokenizerFast"),eze=o(" (CamemBERT model)"),oze=l(),Ig=a("li"),pU=a("strong"),rze=o("canine"),tze=o(" \u2014 "),QB=a("a"),aze=o("CanineTokenizer"),nze=o(" (Canine model)"),sze=l(),es=a("li"),_U=a("strong"),lze=o("clip"),ize=o(" \u2014 "),HB=a("a"),dze=o("CLIPTokenizer"),cze=o(" or "),UB=a("a"),fze=o("CLIPTokenizerFast"),mze=o(" (CLIP model)"),gze=l(),os=a("li"),uU=a("strong"),hze=o("convbert"),pze=o(" \u2014 "),JB=a("a"),_ze=o("ConvBertTokenizer"),uze=o(" or "),YB=a("a"),bze=o("ConvBertTokenizerFast"),vze=o(" (ConvBERT model)"),Tze=l(),rs=a("li"),bU=a("strong"),Fze=o("cpm"),Cze=o(" \u2014 "),KB=a("a"),Mze=o("CpmTokenizer"),Eze=o(" or "),vU=a("code"),yze=o("CpmTokenizerFast"),wze=o(" (CPM model)"),Aze=l(),jg=a("li"),TU=a("strong"),Lze=o("ctrl"),Bze=o(" \u2014 "),ZB=a("a"),xze=o("CTRLTokenizer"),kze=o(" (CTRL model)"),Rze=l(),ts=a("li"),FU=a("strong"),Sze=o("deberta"),Pze=o(" \u2014 "),ex=a("a"),$ze=o("DebertaTokenizer"),Ize=o(" or "),ox=a("a"),jze=o("DebertaTokenizerFast"),Dze=o(" (DeBERTa model)"),Nze=l(),Dg=a("li"),CU=a("strong"),qze=o("deberta-v2"),Oze=o(" \u2014 "),rx=a("a"),Gze=o("DebertaV2Tokenizer"),Xze=o(" (DeBERTa-v2 model)"),Vze=l(),as=a("li"),MU=a("strong"),zze=o("distilbert"),Wze=o(" \u2014 "),tx=a("a"),Qze=o("DistilBertTokenizer"),Hze=o(" or "),ax=a("a"),Uze=o("DistilBertTokenizerFast"),Jze=o(" (DistilBERT model)"),Yze=l(),ns=a("li"),EU=a("strong"),Kze=o("dpr"),Zze=o(" \u2014 "),nx=a("a"),eWe=o("DPRQuestionEncoderTokenizer"),oWe=o(" or "),sx=a("a"),rWe=o("DPRQuestionEncoderTokenizerFast"),tWe=o(" (DPR model)"),aWe=l(),ss=a("li"),yU=a("strong"),nWe=o("electra"),sWe=o(" \u2014 "),lx=a("a"),lWe=o("ElectraTokenizer"),iWe=o(" or "),ix=a("a"),dWe=o("ElectraTokenizerFast"),cWe=o(" (ELECTRA model)"),fWe=l(),Ng=a("li"),wU=a("strong"),mWe=o("flaubert"),gWe=o(" \u2014 "),dx=a("a"),hWe=o("FlaubertTokenizer"),pWe=o(" (FlauBERT model)"),_We=l(),ls=a("li"),AU=a("strong"),uWe=o("fnet"),bWe=o(" \u2014 "),cx=a("a"),vWe=o("FNetTokenizer"),TWe=o(" or "),fx=a("a"),FWe=o("FNetTokenizerFast"),CWe=o(" (FNet model)"),MWe=l(),qg=a("li"),LU=a("strong"),EWe=o("fsmt"),yWe=o(" \u2014 "),mx=a("a"),wWe=o("FSMTTokenizer"),AWe=o(" (FairSeq Machine-Translation model)"),LWe=l(),is=a("li"),BU=a("strong"),BWe=o("funnel"),xWe=o(" \u2014 "),gx=a("a"),kWe=o("FunnelTokenizer"),RWe=o(" or "),hx=a("a"),SWe=o("FunnelTokenizerFast"),PWe=o(" (Funnel Transformer model)"),$We=l(),ds=a("li"),xU=a("strong"),IWe=o("gpt2"),jWe=o(" \u2014 "),px=a("a"),DWe=o("GPT2Tokenizer"),NWe=o(" or "),_x=a("a"),qWe=o("GPT2TokenizerFast"),OWe=o(" (OpenAI GPT-2 model)"),GWe=l(),cs=a("li"),kU=a("strong"),XWe=o("gpt_neo"),VWe=o(" \u2014 "),ux=a("a"),zWe=o("GPT2Tokenizer"),WWe=o(" or "),bx=a("a"),QWe=o("GPT2TokenizerFast"),HWe=o(" (GPT Neo model)"),UWe=l(),fs=a("li"),RU=a("strong"),JWe=o("herbert"),YWe=o(" \u2014 "),vx=a("a"),KWe=o("HerbertTokenizer"),ZWe=o(" or "),Tx=a("a"),eQe=o("HerbertTokenizerFast"),oQe=o(" (HerBERT model)"),rQe=l(),Og=a("li"),SU=a("strong"),tQe=o("hubert"),aQe=o(" \u2014 "),Fx=a("a"),nQe=o("Wav2Vec2CTCTokenizer"),sQe=o(" (Hubert model)"),lQe=l(),ms=a("li"),PU=a("strong"),iQe=o("ibert"),dQe=o(" \u2014 "),Cx=a("a"),cQe=o("RobertaTokenizer"),fQe=o(" or "),Mx=a("a"),mQe=o("RobertaTokenizerFast"),gQe=o(" (I-BERT model)"),hQe=l(),gs=a("li"),$U=a("strong"),pQe=o("layoutlm"),_Qe=o(" \u2014 "),Ex=a("a"),uQe=o("LayoutLMTokenizer"),bQe=o(" or "),yx=a("a"),vQe=o("LayoutLMTokenizerFast"),TQe=o(" (LayoutLM model)"),FQe=l(),hs=a("li"),IU=a("strong"),CQe=o("layoutlmv2"),MQe=o(" \u2014 "),wx=a("a"),EQe=o("LayoutLMv2Tokenizer"),yQe=o(" or "),Ax=a("a"),wQe=o("LayoutLMv2TokenizerFast"),AQe=o(" (LayoutLMv2 model)"),LQe=l(),ps=a("li"),jU=a("strong"),BQe=o("layoutxlm"),xQe=o(" \u2014 "),Lx=a("a"),kQe=o("LayoutXLMTokenizer"),RQe=o(" or "),Bx=a("a"),SQe=o("LayoutXLMTokenizerFast"),PQe=o(" (LayoutXLM model)"),$Qe=l(),_s=a("li"),DU=a("strong"),IQe=o("led"),jQe=o(" \u2014 "),xx=a("a"),DQe=o("LEDTokenizer"),NQe=o(" or "),kx=a("a"),qQe=o("LEDTokenizerFast"),OQe=o(" (LED model)"),GQe=l(),us=a("li"),NU=a("strong"),XQe=o("longformer"),VQe=o(" \u2014 "),Rx=a("a"),zQe=o("LongformerTokenizer"),WQe=o(" or "),Sx=a("a"),QQe=o("LongformerTokenizerFast"),HQe=o(" (Longformer model)"),UQe=l(),Gg=a("li"),qU=a("strong"),JQe=o("luke"),YQe=o(" \u2014 "),Px=a("a"),KQe=o("LukeTokenizer"),ZQe=o(" (LUKE model)"),eHe=l(),bs=a("li"),OU=a("strong"),oHe=o("lxmert"),rHe=o(" \u2014 "),$x=a("a"),tHe=o("LxmertTokenizer"),aHe=o(" or "),Ix=a("a"),nHe=o("LxmertTokenizerFast"),sHe=o(" (LXMERT model)"),lHe=l(),Xg=a("li"),GU=a("strong"),iHe=o("m2m_100"),dHe=o(" \u2014 "),jx=a("a"),cHe=o("M2M100Tokenizer"),fHe=o(" (M2M100 model)"),mHe=l(),Vg=a("li"),XU=a("strong"),gHe=o("marian"),hHe=o(" \u2014 "),Dx=a("a"),pHe=o("MarianTokenizer"),_He=o(" (Marian model)"),uHe=l(),vs=a("li"),VU=a("strong"),bHe=o("mbart"),vHe=o(" \u2014 "),Nx=a("a"),THe=o("MBartTokenizer"),FHe=o(" or "),qx=a("a"),CHe=o("MBartTokenizerFast"),MHe=o(" (mBART model)"),EHe=l(),Ts=a("li"),zU=a("strong"),yHe=o("mbart50"),wHe=o(" \u2014 "),Ox=a("a"),AHe=o("MBart50Tokenizer"),LHe=o(" or "),Gx=a("a"),BHe=o("MBart50TokenizerFast"),xHe=o(" (mBART-50 model)"),kHe=l(),zg=a("li"),WU=a("strong"),RHe=o("mluke"),SHe=o(" \u2014 "),Xx=a("a"),PHe=o("MLukeTokenizer"),$He=o(" (mLUKE model)"),IHe=l(),Fs=a("li"),QU=a("strong"),jHe=o("mobilebert"),DHe=o(" \u2014 "),Vx=a("a"),NHe=o("MobileBertTokenizer"),qHe=o(" or "),zx=a("a"),OHe=o("MobileBertTokenizerFast"),GHe=o(" (MobileBERT model)"),XHe=l(),Cs=a("li"),HU=a("strong"),VHe=o("mpnet"),zHe=o(" \u2014 "),Wx=a("a"),WHe=o("MPNetTokenizer"),QHe=o(" or "),Qx=a("a"),HHe=o("MPNetTokenizerFast"),UHe=o(" (MPNet model)"),JHe=l(),Ms=a("li"),UU=a("strong"),YHe=o("mt5"),KHe=o(" \u2014 "),Hx=a("a"),ZHe=o("MT5Tokenizer"),eUe=o(" or "),Ux=a("a"),oUe=o("MT5TokenizerFast"),rUe=o(" (mT5 model)"),tUe=l(),Es=a("li"),JU=a("strong"),aUe=o("openai-gpt"),nUe=o(" \u2014 "),Jx=a("a"),sUe=o("OpenAIGPTTokenizer"),lUe=o(" or "),Yx=a("a"),iUe=o("OpenAIGPTTokenizerFast"),dUe=o(" (OpenAI GPT model)"),cUe=l(),ys=a("li"),YU=a("strong"),fUe=o("pegasus"),mUe=o(" \u2014 "),Kx=a("a"),gUe=o("PegasusTokenizer"),hUe=o(" or "),Zx=a("a"),pUe=o("PegasusTokenizerFast"),_Ue=o(" (Pegasus model)"),uUe=l(),Wg=a("li"),KU=a("strong"),bUe=o("perceiver"),vUe=o(" \u2014 "),ek=a("a"),TUe=o("PerceiverTokenizer"),FUe=o(" (Perceiver model)"),CUe=l(),Qg=a("li"),ZU=a("strong"),MUe=o("phobert"),EUe=o(" \u2014 "),ok=a("a"),yUe=o("PhobertTokenizer"),wUe=o(" (PhoBERT model)"),AUe=l(),Hg=a("li"),eJ=a("strong"),LUe=o("plbart"),BUe=o(" \u2014 "),rk=a("a"),xUe=o("PLBartTokenizer"),kUe=o(" (PLBart model)"),RUe=l(),Ug=a("li"),oJ=a("strong"),SUe=o("prophetnet"),PUe=o(" \u2014 "),tk=a("a"),$Ue=o("ProphetNetTokenizer"),IUe=o(" (ProphetNet model)"),jUe=l(),ws=a("li"),rJ=a("strong"),DUe=o("qdqbert"),NUe=o(" \u2014 "),ak=a("a"),qUe=o("BertTokenizer"),OUe=o(" or "),nk=a("a"),GUe=o("BertTokenizerFast"),XUe=o(" (QDQBert model)"),VUe=l(),Jg=a("li"),tJ=a("strong"),zUe=o("rag"),WUe=o(" \u2014 "),sk=a("a"),QUe=o("RagTokenizer"),HUe=o(" (RAG model)"),UUe=l(),As=a("li"),aJ=a("strong"),JUe=o("realm"),YUe=o(" \u2014 "),lk=a("a"),KUe=o("RealmTokenizer"),ZUe=o(" or "),ik=a("a"),eJe=o("RealmTokenizerFast"),oJe=o(" (Realm model)"),rJe=l(),Ls=a("li"),nJ=a("strong"),tJe=o("reformer"),aJe=o(" \u2014 "),dk=a("a"),nJe=o("ReformerTokenizer"),sJe=o(" or "),ck=a("a"),lJe=o("ReformerTokenizerFast"),iJe=o(" (Reformer model)"),dJe=l(),Bs=a("li"),sJ=a("strong"),cJe=o("rembert"),fJe=o(" \u2014 "),fk=a("a"),mJe=o("RemBertTokenizer"),gJe=o(" or "),mk=a("a"),hJe=o("RemBertTokenizerFast"),pJe=o(" (RemBERT model)"),_Je=l(),xs=a("li"),lJ=a("strong"),uJe=o("retribert"),bJe=o(" \u2014 "),gk=a("a"),vJe=o("RetriBertTokenizer"),TJe=o(" or "),hk=a("a"),FJe=o("RetriBertTokenizerFast"),CJe=o(" (RetriBERT model)"),MJe=l(),ks=a("li"),iJ=a("strong"),EJe=o("roberta"),yJe=o(" \u2014 "),pk=a("a"),wJe=o("RobertaTokenizer"),AJe=o(" or "),_k=a("a"),LJe=o("RobertaTokenizerFast"),BJe=o(" (RoBERTa model)"),xJe=l(),Rs=a("li"),dJ=a("strong"),kJe=o("roformer"),RJe=o(" \u2014 "),uk=a("a"),SJe=o("RoFormerTokenizer"),PJe=o(" or "),bk=a("a"),$Je=o("RoFormerTokenizerFast"),IJe=o(" (RoFormer model)"),jJe=l(),Yg=a("li"),cJ=a("strong"),DJe=o("speech_to_text"),NJe=o(" \u2014 "),vk=a("a"),qJe=o("Speech2TextTokenizer"),OJe=o(" (Speech2Text model)"),GJe=l(),Kg=a("li"),fJ=a("strong"),XJe=o("speech_to_text_2"),VJe=o(" \u2014 "),Tk=a("a"),zJe=o("Speech2Text2Tokenizer"),WJe=o(" (Speech2Text2 model)"),QJe=l(),Ss=a("li"),mJ=a("strong"),HJe=o("splinter"),UJe=o(" \u2014 "),Fk=a("a"),JJe=o("SplinterTokenizer"),YJe=o(" or "),Ck=a("a"),KJe=o("SplinterTokenizerFast"),ZJe=o(" (Splinter model)"),eYe=l(),Ps=a("li"),gJ=a("strong"),oYe=o("squeezebert"),rYe=o(" \u2014 "),Mk=a("a"),tYe=o("SqueezeBertTokenizer"),aYe=o(" or "),Ek=a("a"),nYe=o("SqueezeBertTokenizerFast"),sYe=o(" (SqueezeBERT model)"),lYe=l(),$s=a("li"),hJ=a("strong"),iYe=o("t5"),dYe=o(" \u2014 "),yk=a("a"),cYe=o("T5Tokenizer"),fYe=o(" or "),wk=a("a"),mYe=o("T5TokenizerFast"),gYe=o(" (T5 model)"),hYe=l(),Zg=a("li"),pJ=a("strong"),pYe=o("tapas"),_Ye=o(" \u2014 "),Ak=a("a"),uYe=o("TapasTokenizer"),bYe=o(" (TAPAS model)"),vYe=l(),eh=a("li"),_J=a("strong"),TYe=o("transfo-xl"),FYe=o(" \u2014 "),Lk=a("a"),CYe=o("TransfoXLTokenizer"),MYe=o(" (Transformer-XL model)"),EYe=l(),oh=a("li"),uJ=a("strong"),yYe=o("wav2vec2"),wYe=o(" \u2014 "),Bk=a("a"),AYe=o("Wav2Vec2CTCTokenizer"),LYe=o(" (Wav2Vec2 model)"),BYe=l(),rh=a("li"),bJ=a("strong"),xYe=o("wav2vec2_phoneme"),kYe=o(" \u2014 "),xk=a("a"),RYe=o("Wav2Vec2PhonemeCTCTokenizer"),SYe=o(" (Wav2Vec2Phoneme model)"),PYe=l(),Is=a("li"),vJ=a("strong"),$Ye=o("xglm"),IYe=o(" \u2014 "),kk=a("a"),jYe=o("XGLMTokenizer"),DYe=o(" or "),Rk=a("a"),NYe=o("XGLMTokenizerFast"),qYe=o(" (XGLM model)"),OYe=l(),th=a("li"),TJ=a("strong"),GYe=o("xlm"),XYe=o(" \u2014 "),Sk=a("a"),VYe=o("XLMTokenizer"),zYe=o(" (XLM model)"),WYe=l(),ah=a("li"),FJ=a("strong"),QYe=o("xlm-prophetnet"),HYe=o(" \u2014 "),Pk=a("a"),UYe=o("XLMProphetNetTokenizer"),JYe=o(" (XLMProphetNet model)"),YYe=l(),js=a("li"),CJ=a("strong"),KYe=o("xlm-roberta"),ZYe=o(" \u2014 "),$k=a("a"),eKe=o("XLMRobertaTokenizer"),oKe=o(" or "),Ik=a("a"),rKe=o("XLMRobertaTokenizerFast"),tKe=o(" (XLM-RoBERTa model)"),aKe=l(),Ds=a("li"),MJ=a("strong"),nKe=o("xlnet"),sKe=o(" \u2014 "),jk=a("a"),lKe=o("XLNetTokenizer"),iKe=o(" or "),Dk=a("a"),dKe=o("XLNetTokenizerFast"),cKe=o(" (XLNet model)"),fKe=l(),EJ=a("p"),mKe=o("Examples:"),gKe=l(),f(rE.$$.fragment),hKe=l(),nh=a("div"),f(tE.$$.fragment),pKe=l(),yJ=a("p"),_Ke=o("Register a new tokenizer in this mapping."),SBe=l(),Qi=a("h2"),sh=a("a"),wJ=a("span"),f(aE.$$.fragment),uKe=l(),AJ=a("span"),bKe=o("AutoFeatureExtractor"),PBe=l(),Wo=a("div"),f(nE.$$.fragment),vKe=l(),sE=a("p"),TKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Nk=a("a"),FKe=o("AutoFeatureExtractor.from_pretrained()"),CKe=o(" class method."),MKe=l(),lE=a("p"),EKe=o("This class cannot be instantiated directly using "),LJ=a("code"),yKe=o("__init__()"),wKe=o(" (throws an error)."),AKe=l(),xe=a("div"),f(iE.$$.fragment),LKe=l(),BJ=a("p"),BKe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xKe=l(),Ga=a("p"),kKe=o("The feature extractor class to instantiate is selected based on the "),xJ=a("code"),RKe=o("model_type"),SKe=o(` property of the config object
(either passed as an argument or loaded from `),kJ=a("code"),PKe=o("pretrained_model_name_or_path"),$Ke=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RJ=a("code"),IKe=o("pretrained_model_name_or_path"),jKe=o(":"),DKe=l(),ae=a("ul"),lh=a("li"),SJ=a("strong"),NKe=o("beit"),qKe=o(" \u2014 "),qk=a("a"),OKe=o("BeitFeatureExtractor"),GKe=o(" (BEiT model)"),XKe=l(),ih=a("li"),PJ=a("strong"),VKe=o("clip"),zKe=o(" \u2014 "),Ok=a("a"),WKe=o("CLIPFeatureExtractor"),QKe=o(" (CLIP model)"),HKe=l(),dh=a("li"),$J=a("strong"),UKe=o("convnext"),JKe=o(" \u2014 "),Gk=a("a"),YKe=o("ConvNextFeatureExtractor"),KKe=o(" (ConvNext model)"),ZKe=l(),ch=a("li"),IJ=a("strong"),eZe=o("deit"),oZe=o(" \u2014 "),Xk=a("a"),rZe=o("DeiTFeatureExtractor"),tZe=o(" (DeiT model)"),aZe=l(),fh=a("li"),jJ=a("strong"),nZe=o("detr"),sZe=o(" \u2014 "),Vk=a("a"),lZe=o("DetrFeatureExtractor"),iZe=o(" (DETR model)"),dZe=l(),mh=a("li"),DJ=a("strong"),cZe=o("hubert"),fZe=o(" \u2014 "),zk=a("a"),mZe=o("Wav2Vec2FeatureExtractor"),gZe=o(" (Hubert model)"),hZe=l(),gh=a("li"),NJ=a("strong"),pZe=o("layoutlmv2"),_Ze=o(" \u2014 "),Wk=a("a"),uZe=o("LayoutLMv2FeatureExtractor"),bZe=o(" (LayoutLMv2 model)"),vZe=l(),hh=a("li"),qJ=a("strong"),TZe=o("maskformer"),FZe=o(" \u2014 "),Qk=a("a"),CZe=o("MaskFormerFeatureExtractor"),MZe=o(" (MaskFormer model)"),EZe=l(),ph=a("li"),OJ=a("strong"),yZe=o("perceiver"),wZe=o(" \u2014 "),Hk=a("a"),AZe=o("PerceiverFeatureExtractor"),LZe=o(" (Perceiver model)"),BZe=l(),_h=a("li"),GJ=a("strong"),xZe=o("poolformer"),kZe=o(" \u2014 "),Uk=a("a"),RZe=o("PoolFormerFeatureExtractor"),SZe=o(" (PoolFormer model)"),PZe=l(),uh=a("li"),XJ=a("strong"),$Ze=o("segformer"),IZe=o(" \u2014 "),Jk=a("a"),jZe=o("SegformerFeatureExtractor"),DZe=o(" (SegFormer model)"),NZe=l(),bh=a("li"),VJ=a("strong"),qZe=o("speech_to_text"),OZe=o(" \u2014 "),Yk=a("a"),GZe=o("Speech2TextFeatureExtractor"),XZe=o(" (Speech2Text model)"),VZe=l(),vh=a("li"),zJ=a("strong"),zZe=o("swin"),WZe=o(" \u2014 "),Kk=a("a"),QZe=o("ViTFeatureExtractor"),HZe=o(" (Swin model)"),UZe=l(),Th=a("li"),WJ=a("strong"),JZe=o("vit"),YZe=o(" \u2014 "),Zk=a("a"),KZe=o("ViTFeatureExtractor"),ZZe=o(" (ViT model)"),eeo=l(),Fh=a("li"),QJ=a("strong"),oeo=o("vit_mae"),reo=o(" \u2014 "),eR=a("a"),teo=o("ViTFeatureExtractor"),aeo=o(" (ViTMAE model)"),neo=l(),Ch=a("li"),HJ=a("strong"),seo=o("wav2vec2"),leo=o(" \u2014 "),oR=a("a"),ieo=o("Wav2Vec2FeatureExtractor"),deo=o(" (Wav2Vec2 model)"),ceo=l(),f(Mh.$$.fragment),feo=l(),UJ=a("p"),meo=o("Examples:"),geo=l(),f(dE.$$.fragment),heo=l(),Eh=a("div"),f(cE.$$.fragment),peo=l(),JJ=a("p"),_eo=o("Register a new feature extractor for this class."),$Be=l(),Hi=a("h2"),yh=a("a"),YJ=a("span"),f(fE.$$.fragment),ueo=l(),KJ=a("span"),beo=o("AutoProcessor"),IBe=l(),Qo=a("div"),f(mE.$$.fragment),veo=l(),gE=a("p"),Teo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rR=a("a"),Feo=o("AutoProcessor.from_pretrained()"),Ceo=o(" class method."),Meo=l(),hE=a("p"),Eeo=o("This class cannot be instantiated directly using "),ZJ=a("code"),yeo=o("__init__()"),weo=o(" (throws an error)."),Aeo=l(),ke=a("div"),f(pE.$$.fragment),Leo=l(),eY=a("p"),Beo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xeo=l(),Ui=a("p"),keo=o("The processor class to instantiate is selected based on the "),oY=a("code"),Reo=o("model_type"),Seo=o(` property of the config object (either
passed as an argument or loaded from `),rY=a("code"),Peo=o("pretrained_model_name_or_path"),$eo=o(" if possible):"),Ieo=l(),we=a("ul"),wh=a("li"),tY=a("strong"),jeo=o("clip"),Deo=o(" \u2014 "),tR=a("a"),Neo=o("CLIPProcessor"),qeo=o(" (CLIP model)"),Oeo=l(),Ah=a("li"),aY=a("strong"),Geo=o("layoutlmv2"),Xeo=o(" \u2014 "),aR=a("a"),Veo=o("LayoutLMv2Processor"),zeo=o(" (LayoutLMv2 model)"),Weo=l(),Lh=a("li"),nY=a("strong"),Qeo=o("layoutxlm"),Heo=o(" \u2014 "),nR=a("a"),Ueo=o("LayoutXLMProcessor"),Jeo=o(" (LayoutXLM model)"),Yeo=l(),Bh=a("li"),sY=a("strong"),Keo=o("speech_to_text"),Zeo=o(" \u2014 "),sR=a("a"),eoo=o("Speech2TextProcessor"),ooo=o(" (Speech2Text model)"),roo=l(),xh=a("li"),lY=a("strong"),too=o("speech_to_text_2"),aoo=o(" \u2014 "),lR=a("a"),noo=o("Speech2Text2Processor"),soo=o(" (Speech2Text2 model)"),loo=l(),kh=a("li"),iY=a("strong"),ioo=o("trocr"),doo=o(" \u2014 "),iR=a("a"),coo=o("TrOCRProcessor"),foo=o(" (TrOCR model)"),moo=l(),Rh=a("li"),dY=a("strong"),goo=o("vision-text-dual-encoder"),hoo=o(" \u2014 "),dR=a("a"),poo=o("VisionTextDualEncoderProcessor"),_oo=o(" (VisionTextDualEncoder model)"),uoo=l(),Sh=a("li"),cY=a("strong"),boo=o("wav2vec2"),voo=o(" \u2014 "),cR=a("a"),Too=o("Wav2Vec2Processor"),Foo=o(" (Wav2Vec2 model)"),Coo=l(),f(Ph.$$.fragment),Moo=l(),fY=a("p"),Eoo=o("Examples:"),yoo=l(),f(_E.$$.fragment),woo=l(),$h=a("div"),f(uE.$$.fragment),Aoo=l(),mY=a("p"),Loo=o("Register a new processor for this class."),jBe=l(),Ji=a("h2"),Ih=a("a"),gY=a("span"),f(bE.$$.fragment),Boo=l(),hY=a("span"),xoo=o("AutoModel"),DBe=l(),Ho=a("div"),f(vE.$$.fragment),koo=l(),Yi=a("p"),Roo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pY=a("code"),Soo=o("from_pretrained()"),Poo=o("class method or the "),_Y=a("code"),$oo=o("from_config()"),Ioo=o(`class
method.`),joo=l(),TE=a("p"),Doo=o("This class cannot be instantiated directly using "),uY=a("code"),Noo=o("__init__()"),qoo=o(" (throws an error)."),Ooo=l(),Gr=a("div"),f(FE.$$.fragment),Goo=l(),bY=a("p"),Xoo=o("Instantiates one of the base model classes of the library from a configuration."),Voo=l(),Ki=a("p"),zoo=o(`Note:
Loading a model from its configuration file does `),vY=a("strong"),Woo=o("not"),Qoo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("code"),Hoo=o("from_pretrained()"),Uoo=o("to load the model weights."),Joo=l(),FY=a("p"),Yoo=o("Examples:"),Koo=l(),f(CE.$$.fragment),Zoo=l(),Re=a("div"),f(ME.$$.fragment),ero=l(),CY=a("p"),oro=o("Instantiate one of the base model classes of the library from a pretrained model."),rro=l(),Xa=a("p"),tro=o("The model class to instantiate is selected based on the "),MY=a("code"),aro=o("model_type"),nro=o(` property of the config object (either
passed as an argument or loaded from `),EY=a("code"),sro=o("pretrained_model_name_or_path"),lro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yY=a("code"),iro=o("pretrained_model_name_or_path"),dro=o(":"),cro=l(),F=a("ul"),jh=a("li"),wY=a("strong"),fro=o("albert"),mro=o(" \u2014 "),fR=a("a"),gro=o("AlbertModel"),hro=o(" (ALBERT model)"),pro=l(),Dh=a("li"),AY=a("strong"),_ro=o("bart"),uro=o(" \u2014 "),mR=a("a"),bro=o("BartModel"),vro=o(" (BART model)"),Tro=l(),Nh=a("li"),LY=a("strong"),Fro=o("beit"),Cro=o(" \u2014 "),gR=a("a"),Mro=o("BeitModel"),Ero=o(" (BEiT model)"),yro=l(),qh=a("li"),BY=a("strong"),wro=o("bert"),Aro=o(" \u2014 "),hR=a("a"),Lro=o("BertModel"),Bro=o(" (BERT model)"),xro=l(),Oh=a("li"),xY=a("strong"),kro=o("bert-generation"),Rro=o(" \u2014 "),pR=a("a"),Sro=o("BertGenerationEncoder"),Pro=o(" (Bert Generation model)"),$ro=l(),Gh=a("li"),kY=a("strong"),Iro=o("big_bird"),jro=o(" \u2014 "),_R=a("a"),Dro=o("BigBirdModel"),Nro=o(" (BigBird model)"),qro=l(),Xh=a("li"),RY=a("strong"),Oro=o("bigbird_pegasus"),Gro=o(" \u2014 "),uR=a("a"),Xro=o("BigBirdPegasusModel"),Vro=o(" (BigBirdPegasus model)"),zro=l(),Vh=a("li"),SY=a("strong"),Wro=o("blenderbot"),Qro=o(" \u2014 "),bR=a("a"),Hro=o("BlenderbotModel"),Uro=o(" (Blenderbot model)"),Jro=l(),zh=a("li"),PY=a("strong"),Yro=o("blenderbot-small"),Kro=o(" \u2014 "),vR=a("a"),Zro=o("BlenderbotSmallModel"),eto=o(" (BlenderbotSmall model)"),oto=l(),Wh=a("li"),$Y=a("strong"),rto=o("camembert"),tto=o(" \u2014 "),TR=a("a"),ato=o("CamembertModel"),nto=o(" (CamemBERT model)"),sto=l(),Qh=a("li"),IY=a("strong"),lto=o("canine"),ito=o(" \u2014 "),FR=a("a"),dto=o("CanineModel"),cto=o(" (Canine model)"),fto=l(),Hh=a("li"),jY=a("strong"),mto=o("clip"),gto=o(" \u2014 "),CR=a("a"),hto=o("CLIPModel"),pto=o(" (CLIP model)"),_to=l(),Uh=a("li"),DY=a("strong"),uto=o("convbert"),bto=o(" \u2014 "),MR=a("a"),vto=o("ConvBertModel"),Tto=o(" (ConvBERT model)"),Fto=l(),Jh=a("li"),NY=a("strong"),Cto=o("convnext"),Mto=o(" \u2014 "),ER=a("a"),Eto=o("ConvNextModel"),yto=o(" (ConvNext model)"),wto=l(),Yh=a("li"),qY=a("strong"),Ato=o("ctrl"),Lto=o(" \u2014 "),yR=a("a"),Bto=o("CTRLModel"),xto=o(" (CTRL model)"),kto=l(),Kh=a("li"),OY=a("strong"),Rto=o("data2vec-audio"),Sto=o(" \u2014 "),wR=a("a"),Pto=o("Data2VecAudioModel"),$to=o(" (Data2VecAudio model)"),Ito=l(),Zh=a("li"),GY=a("strong"),jto=o("data2vec-text"),Dto=o(" \u2014 "),AR=a("a"),Nto=o("Data2VecTextModel"),qto=o(" (Data2VecText model)"),Oto=l(),ep=a("li"),XY=a("strong"),Gto=o("deberta"),Xto=o(" \u2014 "),LR=a("a"),Vto=o("DebertaModel"),zto=o(" (DeBERTa model)"),Wto=l(),op=a("li"),VY=a("strong"),Qto=o("deberta-v2"),Hto=o(" \u2014 "),BR=a("a"),Uto=o("DebertaV2Model"),Jto=o(" (DeBERTa-v2 model)"),Yto=l(),rp=a("li"),zY=a("strong"),Kto=o("deit"),Zto=o(" \u2014 "),xR=a("a"),eao=o("DeiTModel"),oao=o(" (DeiT model)"),rao=l(),tp=a("li"),WY=a("strong"),tao=o("detr"),aao=o(" \u2014 "),kR=a("a"),nao=o("DetrModel"),sao=o(" (DETR model)"),lao=l(),ap=a("li"),QY=a("strong"),iao=o("distilbert"),dao=o(" \u2014 "),RR=a("a"),cao=o("DistilBertModel"),fao=o(" (DistilBERT model)"),mao=l(),np=a("li"),HY=a("strong"),gao=o("dpr"),hao=o(" \u2014 "),SR=a("a"),pao=o("DPRQuestionEncoder"),_ao=o(" (DPR model)"),uao=l(),sp=a("li"),UY=a("strong"),bao=o("electra"),vao=o(" \u2014 "),PR=a("a"),Tao=o("ElectraModel"),Fao=o(" (ELECTRA model)"),Cao=l(),lp=a("li"),JY=a("strong"),Mao=o("flaubert"),Eao=o(" \u2014 "),$R=a("a"),yao=o("FlaubertModel"),wao=o(" (FlauBERT model)"),Aao=l(),ip=a("li"),YY=a("strong"),Lao=o("fnet"),Bao=o(" \u2014 "),IR=a("a"),xao=o("FNetModel"),kao=o(" (FNet model)"),Rao=l(),dp=a("li"),KY=a("strong"),Sao=o("fsmt"),Pao=o(" \u2014 "),jR=a("a"),$ao=o("FSMTModel"),Iao=o(" (FairSeq Machine-Translation model)"),jao=l(),Ns=a("li"),ZY=a("strong"),Dao=o("funnel"),Nao=o(" \u2014 "),DR=a("a"),qao=o("FunnelModel"),Oao=o(" or "),NR=a("a"),Gao=o("FunnelBaseModel"),Xao=o(" (Funnel Transformer model)"),Vao=l(),cp=a("li"),eK=a("strong"),zao=o("gpt2"),Wao=o(" \u2014 "),qR=a("a"),Qao=o("GPT2Model"),Hao=o(" (OpenAI GPT-2 model)"),Uao=l(),fp=a("li"),oK=a("strong"),Jao=o("gpt_neo"),Yao=o(" \u2014 "),OR=a("a"),Kao=o("GPTNeoModel"),Zao=o(" (GPT Neo model)"),eno=l(),mp=a("li"),rK=a("strong"),ono=o("gptj"),rno=o(" \u2014 "),GR=a("a"),tno=o("GPTJModel"),ano=o(" (GPT-J model)"),nno=l(),gp=a("li"),tK=a("strong"),sno=o("hubert"),lno=o(" \u2014 "),XR=a("a"),ino=o("HubertModel"),dno=o(" (Hubert model)"),cno=l(),hp=a("li"),aK=a("strong"),fno=o("ibert"),mno=o(" \u2014 "),VR=a("a"),gno=o("IBertModel"),hno=o(" (I-BERT model)"),pno=l(),pp=a("li"),nK=a("strong"),_no=o("imagegpt"),uno=o(" \u2014 "),zR=a("a"),bno=o("ImageGPTModel"),vno=o(" (ImageGPT model)"),Tno=l(),_p=a("li"),sK=a("strong"),Fno=o("layoutlm"),Cno=o(" \u2014 "),WR=a("a"),Mno=o("LayoutLMModel"),Eno=o(" (LayoutLM model)"),yno=l(),up=a("li"),lK=a("strong"),wno=o("layoutlmv2"),Ano=o(" \u2014 "),QR=a("a"),Lno=o("LayoutLMv2Model"),Bno=o(" (LayoutLMv2 model)"),xno=l(),bp=a("li"),iK=a("strong"),kno=o("led"),Rno=o(" \u2014 "),HR=a("a"),Sno=o("LEDModel"),Pno=o(" (LED model)"),$no=l(),vp=a("li"),dK=a("strong"),Ino=o("longformer"),jno=o(" \u2014 "),UR=a("a"),Dno=o("LongformerModel"),Nno=o(" (Longformer model)"),qno=l(),Tp=a("li"),cK=a("strong"),Ono=o("luke"),Gno=o(" \u2014 "),JR=a("a"),Xno=o("LukeModel"),Vno=o(" (LUKE model)"),zno=l(),Fp=a("li"),fK=a("strong"),Wno=o("lxmert"),Qno=o(" \u2014 "),YR=a("a"),Hno=o("LxmertModel"),Uno=o(" (LXMERT model)"),Jno=l(),Cp=a("li"),mK=a("strong"),Yno=o("m2m_100"),Kno=o(" \u2014 "),KR=a("a"),Zno=o("M2M100Model"),eso=o(" (M2M100 model)"),oso=l(),Mp=a("li"),gK=a("strong"),rso=o("marian"),tso=o(" \u2014 "),ZR=a("a"),aso=o("MarianModel"),nso=o(" (Marian model)"),sso=l(),Ep=a("li"),hK=a("strong"),lso=o("maskformer"),iso=o(" \u2014 "),eS=a("a"),dso=o("MaskFormerModel"),cso=o(" (MaskFormer model)"),fso=l(),yp=a("li"),pK=a("strong"),mso=o("mbart"),gso=o(" \u2014 "),oS=a("a"),hso=o("MBartModel"),pso=o(" (mBART model)"),_so=l(),wp=a("li"),_K=a("strong"),uso=o("megatron-bert"),bso=o(" \u2014 "),rS=a("a"),vso=o("MegatronBertModel"),Tso=o(" (MegatronBert model)"),Fso=l(),Ap=a("li"),uK=a("strong"),Cso=o("mobilebert"),Mso=o(" \u2014 "),tS=a("a"),Eso=o("MobileBertModel"),yso=o(" (MobileBERT model)"),wso=l(),Lp=a("li"),bK=a("strong"),Aso=o("mpnet"),Lso=o(" \u2014 "),aS=a("a"),Bso=o("MPNetModel"),xso=o(" (MPNet model)"),kso=l(),Bp=a("li"),vK=a("strong"),Rso=o("mt5"),Sso=o(" \u2014 "),nS=a("a"),Pso=o("MT5Model"),$so=o(" (mT5 model)"),Iso=l(),xp=a("li"),TK=a("strong"),jso=o("nystromformer"),Dso=o(" \u2014 "),sS=a("a"),Nso=o("NystromformerModel"),qso=o(" (Nystromformer model)"),Oso=l(),kp=a("li"),FK=a("strong"),Gso=o("openai-gpt"),Xso=o(" \u2014 "),lS=a("a"),Vso=o("OpenAIGPTModel"),zso=o(" (OpenAI GPT model)"),Wso=l(),Rp=a("li"),CK=a("strong"),Qso=o("pegasus"),Hso=o(" \u2014 "),iS=a("a"),Uso=o("PegasusModel"),Jso=o(" (Pegasus model)"),Yso=l(),Sp=a("li"),MK=a("strong"),Kso=o("perceiver"),Zso=o(" \u2014 "),dS=a("a"),elo=o("PerceiverModel"),olo=o(" (Perceiver model)"),rlo=l(),Pp=a("li"),EK=a("strong"),tlo=o("plbart"),alo=o(" \u2014 "),cS=a("a"),nlo=o("PLBartModel"),slo=o(" (PLBart model)"),llo=l(),$p=a("li"),yK=a("strong"),ilo=o("poolformer"),dlo=o(" \u2014 "),fS=a("a"),clo=o("PoolFormerModel"),flo=o(" (PoolFormer model)"),mlo=l(),Ip=a("li"),wK=a("strong"),glo=o("prophetnet"),hlo=o(" \u2014 "),mS=a("a"),plo=o("ProphetNetModel"),_lo=o(" (ProphetNet model)"),ulo=l(),jp=a("li"),AK=a("strong"),blo=o("qdqbert"),vlo=o(" \u2014 "),gS=a("a"),Tlo=o("QDQBertModel"),Flo=o(" (QDQBert model)"),Clo=l(),Dp=a("li"),LK=a("strong"),Mlo=o("reformer"),Elo=o(" \u2014 "),hS=a("a"),ylo=o("ReformerModel"),wlo=o(" (Reformer model)"),Alo=l(),Np=a("li"),BK=a("strong"),Llo=o("rembert"),Blo=o(" \u2014 "),pS=a("a"),xlo=o("RemBertModel"),klo=o(" (RemBERT model)"),Rlo=l(),qp=a("li"),xK=a("strong"),Slo=o("retribert"),Plo=o(" \u2014 "),_S=a("a"),$lo=o("RetriBertModel"),Ilo=o(" (RetriBERT model)"),jlo=l(),Op=a("li"),kK=a("strong"),Dlo=o("roberta"),Nlo=o(" \u2014 "),uS=a("a"),qlo=o("RobertaModel"),Olo=o(" (RoBERTa model)"),Glo=l(),Gp=a("li"),RK=a("strong"),Xlo=o("roformer"),Vlo=o(" \u2014 "),bS=a("a"),zlo=o("RoFormerModel"),Wlo=o(" (RoFormer model)"),Qlo=l(),Xp=a("li"),SK=a("strong"),Hlo=o("segformer"),Ulo=o(" \u2014 "),vS=a("a"),Jlo=o("SegformerModel"),Ylo=o(" (SegFormer model)"),Klo=l(),Vp=a("li"),PK=a("strong"),Zlo=o("sew"),eio=o(" \u2014 "),TS=a("a"),oio=o("SEWModel"),rio=o(" (SEW model)"),tio=l(),zp=a("li"),$K=a("strong"),aio=o("sew-d"),nio=o(" \u2014 "),FS=a("a"),sio=o("SEWDModel"),lio=o(" (SEW-D model)"),iio=l(),Wp=a("li"),IK=a("strong"),dio=o("speech_to_text"),cio=o(" \u2014 "),CS=a("a"),fio=o("Speech2TextModel"),mio=o(" (Speech2Text model)"),gio=l(),Qp=a("li"),jK=a("strong"),hio=o("splinter"),pio=o(" \u2014 "),MS=a("a"),_io=o("SplinterModel"),uio=o(" (Splinter model)"),bio=l(),Hp=a("li"),DK=a("strong"),vio=o("squeezebert"),Tio=o(" \u2014 "),ES=a("a"),Fio=o("SqueezeBertModel"),Cio=o(" (SqueezeBERT model)"),Mio=l(),Up=a("li"),NK=a("strong"),Eio=o("swin"),yio=o(" \u2014 "),yS=a("a"),wio=o("SwinModel"),Aio=o(" (Swin model)"),Lio=l(),Jp=a("li"),qK=a("strong"),Bio=o("t5"),xio=o(" \u2014 "),wS=a("a"),kio=o("T5Model"),Rio=o(" (T5 model)"),Sio=l(),Yp=a("li"),OK=a("strong"),Pio=o("tapas"),$io=o(" \u2014 "),AS=a("a"),Iio=o("TapasModel"),jio=o(" (TAPAS model)"),Dio=l(),Kp=a("li"),GK=a("strong"),Nio=o("transfo-xl"),qio=o(" \u2014 "),LS=a("a"),Oio=o("TransfoXLModel"),Gio=o(" (Transformer-XL model)"),Xio=l(),Zp=a("li"),XK=a("strong"),Vio=o("unispeech"),zio=o(" \u2014 "),BS=a("a"),Wio=o("UniSpeechModel"),Qio=o(" (UniSpeech model)"),Hio=l(),e_=a("li"),VK=a("strong"),Uio=o("unispeech-sat"),Jio=o(" \u2014 "),xS=a("a"),Yio=o("UniSpeechSatModel"),Kio=o(" (UniSpeechSat model)"),Zio=l(),o_=a("li"),zK=a("strong"),edo=o("vilt"),odo=o(" \u2014 "),kS=a("a"),rdo=o("ViltModel"),tdo=o(" (ViLT model)"),ado=l(),r_=a("li"),WK=a("strong"),ndo=o("vision-text-dual-encoder"),sdo=o(" \u2014 "),RS=a("a"),ldo=o("VisionTextDualEncoderModel"),ido=o(" (VisionTextDualEncoder model)"),ddo=l(),t_=a("li"),QK=a("strong"),cdo=o("visual_bert"),fdo=o(" \u2014 "),SS=a("a"),mdo=o("VisualBertModel"),gdo=o(" (VisualBert model)"),hdo=l(),a_=a("li"),HK=a("strong"),pdo=o("vit"),_do=o(" \u2014 "),PS=a("a"),udo=o("ViTModel"),bdo=o(" (ViT model)"),vdo=l(),n_=a("li"),UK=a("strong"),Tdo=o("vit_mae"),Fdo=o(" \u2014 "),$S=a("a"),Cdo=o("ViTMAEModel"),Mdo=o(" (ViTMAE model)"),Edo=l(),s_=a("li"),JK=a("strong"),ydo=o("wav2vec2"),wdo=o(" \u2014 "),IS=a("a"),Ado=o("Wav2Vec2Model"),Ldo=o(" (Wav2Vec2 model)"),Bdo=l(),l_=a("li"),YK=a("strong"),xdo=o("wavlm"),kdo=o(" \u2014 "),jS=a("a"),Rdo=o("WavLMModel"),Sdo=o(" (WavLM model)"),Pdo=l(),i_=a("li"),KK=a("strong"),$do=o("xglm"),Ido=o(" \u2014 "),DS=a("a"),jdo=o("XGLMModel"),Ddo=o(" (XGLM model)"),Ndo=l(),d_=a("li"),ZK=a("strong"),qdo=o("xlm"),Odo=o(" \u2014 "),NS=a("a"),Gdo=o("XLMModel"),Xdo=o(" (XLM model)"),Vdo=l(),c_=a("li"),eZ=a("strong"),zdo=o("xlm-prophetnet"),Wdo=o(" \u2014 "),qS=a("a"),Qdo=o("XLMProphetNetModel"),Hdo=o(" (XLMProphetNet model)"),Udo=l(),f_=a("li"),oZ=a("strong"),Jdo=o("xlm-roberta"),Ydo=o(" \u2014 "),OS=a("a"),Kdo=o("XLMRobertaModel"),Zdo=o(" (XLM-RoBERTa model)"),eco=l(),m_=a("li"),rZ=a("strong"),oco=o("xlm-roberta-xl"),rco=o(" \u2014 "),GS=a("a"),tco=o("XLMRobertaXLModel"),aco=o(" (XLM-RoBERTa-XL model)"),nco=l(),g_=a("li"),tZ=a("strong"),sco=o("xlnet"),lco=o(" \u2014 "),XS=a("a"),ico=o("XLNetModel"),dco=o(" (XLNet model)"),cco=l(),h_=a("li"),aZ=a("strong"),fco=o("yoso"),mco=o(" \u2014 "),VS=a("a"),gco=o("YosoModel"),hco=o(" (YOSO model)"),pco=l(),p_=a("p"),_co=o("The model is set in evaluation mode by default using "),nZ=a("code"),uco=o("model.eval()"),bco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sZ=a("code"),vco=o("model.train()"),Tco=l(),lZ=a("p"),Fco=o("Examples:"),Cco=l(),f(EE.$$.fragment),NBe=l(),Zi=a("h2"),__=a("a"),iZ=a("span"),f(yE.$$.fragment),Mco=l(),dZ=a("span"),Eco=o("AutoModelForPreTraining"),qBe=l(),Uo=a("div"),f(wE.$$.fragment),yco=l(),ed=a("p"),wco=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cZ=a("code"),Aco=o("from_pretrained()"),Lco=o("class method or the "),fZ=a("code"),Bco=o("from_config()"),xco=o(`class
method.`),kco=l(),AE=a("p"),Rco=o("This class cannot be instantiated directly using "),mZ=a("code"),Sco=o("__init__()"),Pco=o(" (throws an error)."),$co=l(),Xr=a("div"),f(LE.$$.fragment),Ico=l(),gZ=a("p"),jco=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dco=l(),od=a("p"),Nco=o(`Note:
Loading a model from its configuration file does `),hZ=a("strong"),qco=o("not"),Oco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("code"),Gco=o("from_pretrained()"),Xco=o("to load the model weights."),Vco=l(),_Z=a("p"),zco=o("Examples:"),Wco=l(),f(BE.$$.fragment),Qco=l(),Se=a("div"),f(xE.$$.fragment),Hco=l(),uZ=a("p"),Uco=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jco=l(),Va=a("p"),Yco=o("The model class to instantiate is selected based on the "),bZ=a("code"),Kco=o("model_type"),Zco=o(` property of the config object (either
passed as an argument or loaded from `),vZ=a("code"),efo=o("pretrained_model_name_or_path"),ofo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=a("code"),rfo=o("pretrained_model_name_or_path"),tfo=o(":"),afo=l(),k=a("ul"),u_=a("li"),FZ=a("strong"),nfo=o("albert"),sfo=o(" \u2014 "),zS=a("a"),lfo=o("AlbertForPreTraining"),ifo=o(" (ALBERT model)"),dfo=l(),b_=a("li"),CZ=a("strong"),cfo=o("bart"),ffo=o(" \u2014 "),WS=a("a"),mfo=o("BartForConditionalGeneration"),gfo=o(" (BART model)"),hfo=l(),v_=a("li"),MZ=a("strong"),pfo=o("bert"),_fo=o(" \u2014 "),QS=a("a"),ufo=o("BertForPreTraining"),bfo=o(" (BERT model)"),vfo=l(),T_=a("li"),EZ=a("strong"),Tfo=o("big_bird"),Ffo=o(" \u2014 "),HS=a("a"),Cfo=o("BigBirdForPreTraining"),Mfo=o(" (BigBird model)"),Efo=l(),F_=a("li"),yZ=a("strong"),yfo=o("camembert"),wfo=o(" \u2014 "),US=a("a"),Afo=o("CamembertForMaskedLM"),Lfo=o(" (CamemBERT model)"),Bfo=l(),C_=a("li"),wZ=a("strong"),xfo=o("ctrl"),kfo=o(" \u2014 "),JS=a("a"),Rfo=o("CTRLLMHeadModel"),Sfo=o(" (CTRL model)"),Pfo=l(),M_=a("li"),AZ=a("strong"),$fo=o("data2vec-text"),Ifo=o(" \u2014 "),YS=a("a"),jfo=o("Data2VecTextForMaskedLM"),Dfo=o(" (Data2VecText model)"),Nfo=l(),E_=a("li"),LZ=a("strong"),qfo=o("deberta"),Ofo=o(" \u2014 "),KS=a("a"),Gfo=o("DebertaForMaskedLM"),Xfo=o(" (DeBERTa model)"),Vfo=l(),y_=a("li"),BZ=a("strong"),zfo=o("deberta-v2"),Wfo=o(" \u2014 "),ZS=a("a"),Qfo=o("DebertaV2ForMaskedLM"),Hfo=o(" (DeBERTa-v2 model)"),Ufo=l(),w_=a("li"),xZ=a("strong"),Jfo=o("distilbert"),Yfo=o(" \u2014 "),eP=a("a"),Kfo=o("DistilBertForMaskedLM"),Zfo=o(" (DistilBERT model)"),emo=l(),A_=a("li"),kZ=a("strong"),omo=o("electra"),rmo=o(" \u2014 "),oP=a("a"),tmo=o("ElectraForPreTraining"),amo=o(" (ELECTRA model)"),nmo=l(),L_=a("li"),RZ=a("strong"),smo=o("flaubert"),lmo=o(" \u2014 "),rP=a("a"),imo=o("FlaubertWithLMHeadModel"),dmo=o(" (FlauBERT model)"),cmo=l(),B_=a("li"),SZ=a("strong"),fmo=o("fnet"),mmo=o(" \u2014 "),tP=a("a"),gmo=o("FNetForPreTraining"),hmo=o(" (FNet model)"),pmo=l(),x_=a("li"),PZ=a("strong"),_mo=o("fsmt"),umo=o(" \u2014 "),aP=a("a"),bmo=o("FSMTForConditionalGeneration"),vmo=o(" (FairSeq Machine-Translation model)"),Tmo=l(),k_=a("li"),$Z=a("strong"),Fmo=o("funnel"),Cmo=o(" \u2014 "),nP=a("a"),Mmo=o("FunnelForPreTraining"),Emo=o(" (Funnel Transformer model)"),ymo=l(),R_=a("li"),IZ=a("strong"),wmo=o("gpt2"),Amo=o(" \u2014 "),sP=a("a"),Lmo=o("GPT2LMHeadModel"),Bmo=o(" (OpenAI GPT-2 model)"),xmo=l(),S_=a("li"),jZ=a("strong"),kmo=o("ibert"),Rmo=o(" \u2014 "),lP=a("a"),Smo=o("IBertForMaskedLM"),Pmo=o(" (I-BERT model)"),$mo=l(),P_=a("li"),DZ=a("strong"),Imo=o("layoutlm"),jmo=o(" \u2014 "),iP=a("a"),Dmo=o("LayoutLMForMaskedLM"),Nmo=o(" (LayoutLM model)"),qmo=l(),$_=a("li"),NZ=a("strong"),Omo=o("longformer"),Gmo=o(" \u2014 "),dP=a("a"),Xmo=o("LongformerForMaskedLM"),Vmo=o(" (Longformer model)"),zmo=l(),I_=a("li"),qZ=a("strong"),Wmo=o("lxmert"),Qmo=o(" \u2014 "),cP=a("a"),Hmo=o("LxmertForPreTraining"),Umo=o(" (LXMERT model)"),Jmo=l(),j_=a("li"),OZ=a("strong"),Ymo=o("megatron-bert"),Kmo=o(" \u2014 "),fP=a("a"),Zmo=o("MegatronBertForPreTraining"),ego=o(" (MegatronBert model)"),ogo=l(),D_=a("li"),GZ=a("strong"),rgo=o("mobilebert"),tgo=o(" \u2014 "),mP=a("a"),ago=o("MobileBertForPreTraining"),ngo=o(" (MobileBERT model)"),sgo=l(),N_=a("li"),XZ=a("strong"),lgo=o("mpnet"),igo=o(" \u2014 "),gP=a("a"),dgo=o("MPNetForMaskedLM"),cgo=o(" (MPNet model)"),fgo=l(),q_=a("li"),VZ=a("strong"),mgo=o("openai-gpt"),ggo=o(" \u2014 "),hP=a("a"),hgo=o("OpenAIGPTLMHeadModel"),pgo=o(" (OpenAI GPT model)"),_go=l(),O_=a("li"),zZ=a("strong"),ugo=o("retribert"),bgo=o(" \u2014 "),pP=a("a"),vgo=o("RetriBertModel"),Tgo=o(" (RetriBERT model)"),Fgo=l(),G_=a("li"),WZ=a("strong"),Cgo=o("roberta"),Mgo=o(" \u2014 "),_P=a("a"),Ego=o("RobertaForMaskedLM"),ygo=o(" (RoBERTa model)"),wgo=l(),X_=a("li"),QZ=a("strong"),Ago=o("squeezebert"),Lgo=o(" \u2014 "),uP=a("a"),Bgo=o("SqueezeBertForMaskedLM"),xgo=o(" (SqueezeBERT model)"),kgo=l(),V_=a("li"),HZ=a("strong"),Rgo=o("t5"),Sgo=o(" \u2014 "),bP=a("a"),Pgo=o("T5ForConditionalGeneration"),$go=o(" (T5 model)"),Igo=l(),z_=a("li"),UZ=a("strong"),jgo=o("tapas"),Dgo=o(" \u2014 "),vP=a("a"),Ngo=o("TapasForMaskedLM"),qgo=o(" (TAPAS model)"),Ogo=l(),W_=a("li"),JZ=a("strong"),Ggo=o("transfo-xl"),Xgo=o(" \u2014 "),TP=a("a"),Vgo=o("TransfoXLLMHeadModel"),zgo=o(" (Transformer-XL model)"),Wgo=l(),Q_=a("li"),YZ=a("strong"),Qgo=o("unispeech"),Hgo=o(" \u2014 "),FP=a("a"),Ugo=o("UniSpeechForPreTraining"),Jgo=o(" (UniSpeech model)"),Ygo=l(),H_=a("li"),KZ=a("strong"),Kgo=o("unispeech-sat"),Zgo=o(" \u2014 "),CP=a("a"),eho=o("UniSpeechSatForPreTraining"),oho=o(" (UniSpeechSat model)"),rho=l(),U_=a("li"),ZZ=a("strong"),tho=o("visual_bert"),aho=o(" \u2014 "),MP=a("a"),nho=o("VisualBertForPreTraining"),sho=o(" (VisualBert model)"),lho=l(),J_=a("li"),eee=a("strong"),iho=o("vit_mae"),dho=o(" \u2014 "),EP=a("a"),cho=o("ViTMAEForPreTraining"),fho=o(" (ViTMAE model)"),mho=l(),Y_=a("li"),oee=a("strong"),gho=o("wav2vec2"),hho=o(" \u2014 "),yP=a("a"),pho=o("Wav2Vec2ForPreTraining"),_ho=o(" (Wav2Vec2 model)"),uho=l(),K_=a("li"),ree=a("strong"),bho=o("xlm"),vho=o(" \u2014 "),wP=a("a"),Tho=o("XLMWithLMHeadModel"),Fho=o(" (XLM model)"),Cho=l(),Z_=a("li"),tee=a("strong"),Mho=o("xlm-roberta"),Eho=o(" \u2014 "),AP=a("a"),yho=o("XLMRobertaForMaskedLM"),who=o(" (XLM-RoBERTa model)"),Aho=l(),eu=a("li"),aee=a("strong"),Lho=o("xlm-roberta-xl"),Bho=o(" \u2014 "),LP=a("a"),xho=o("XLMRobertaXLForMaskedLM"),kho=o(" (XLM-RoBERTa-XL model)"),Rho=l(),ou=a("li"),nee=a("strong"),Sho=o("xlnet"),Pho=o(" \u2014 "),BP=a("a"),$ho=o("XLNetLMHeadModel"),Iho=o(" (XLNet model)"),jho=l(),ru=a("p"),Dho=o("The model is set in evaluation mode by default using "),see=a("code"),Nho=o("model.eval()"),qho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=a("code"),Oho=o("model.train()"),Gho=l(),iee=a("p"),Xho=o("Examples:"),Vho=l(),f(kE.$$.fragment),OBe=l(),rd=a("h2"),tu=a("a"),dee=a("span"),f(RE.$$.fragment),zho=l(),cee=a("span"),Who=o("AutoModelForCausalLM"),GBe=l(),Jo=a("div"),f(SE.$$.fragment),Qho=l(),td=a("p"),Hho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fee=a("code"),Uho=o("from_pretrained()"),Jho=o("class method or the "),mee=a("code"),Yho=o("from_config()"),Kho=o(`class
method.`),Zho=l(),PE=a("p"),epo=o("This class cannot be instantiated directly using "),gee=a("code"),opo=o("__init__()"),rpo=o(" (throws an error)."),tpo=l(),Vr=a("div"),f($E.$$.fragment),apo=l(),hee=a("p"),npo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),spo=l(),ad=a("p"),lpo=o(`Note:
Loading a model from its configuration file does `),pee=a("strong"),ipo=o("not"),dpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("code"),cpo=o("from_pretrained()"),fpo=o("to load the model weights."),mpo=l(),uee=a("p"),gpo=o("Examples:"),hpo=l(),f(IE.$$.fragment),ppo=l(),Pe=a("div"),f(jE.$$.fragment),_po=l(),bee=a("p"),upo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bpo=l(),za=a("p"),vpo=o("The model class to instantiate is selected based on the "),vee=a("code"),Tpo=o("model_type"),Fpo=o(` property of the config object (either
passed as an argument or loaded from `),Tee=a("code"),Cpo=o("pretrained_model_name_or_path"),Mpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=a("code"),Epo=o("pretrained_model_name_or_path"),ypo=o(":"),wpo=l(),$=a("ul"),au=a("li"),Cee=a("strong"),Apo=o("bart"),Lpo=o(" \u2014 "),xP=a("a"),Bpo=o("BartForCausalLM"),xpo=o(" (BART model)"),kpo=l(),nu=a("li"),Mee=a("strong"),Rpo=o("bert"),Spo=o(" \u2014 "),kP=a("a"),Ppo=o("BertLMHeadModel"),$po=o(" (BERT model)"),Ipo=l(),su=a("li"),Eee=a("strong"),jpo=o("bert-generation"),Dpo=o(" \u2014 "),RP=a("a"),Npo=o("BertGenerationDecoder"),qpo=o(" (Bert Generation model)"),Opo=l(),lu=a("li"),yee=a("strong"),Gpo=o("big_bird"),Xpo=o(" \u2014 "),SP=a("a"),Vpo=o("BigBirdForCausalLM"),zpo=o(" (BigBird model)"),Wpo=l(),iu=a("li"),wee=a("strong"),Qpo=o("bigbird_pegasus"),Hpo=o(" \u2014 "),PP=a("a"),Upo=o("BigBirdPegasusForCausalLM"),Jpo=o(" (BigBirdPegasus model)"),Ypo=l(),du=a("li"),Aee=a("strong"),Kpo=o("blenderbot"),Zpo=o(" \u2014 "),$P=a("a"),e_o=o("BlenderbotForCausalLM"),o_o=o(" (Blenderbot model)"),r_o=l(),cu=a("li"),Lee=a("strong"),t_o=o("blenderbot-small"),a_o=o(" \u2014 "),IP=a("a"),n_o=o("BlenderbotSmallForCausalLM"),s_o=o(" (BlenderbotSmall model)"),l_o=l(),fu=a("li"),Bee=a("strong"),i_o=o("camembert"),d_o=o(" \u2014 "),jP=a("a"),c_o=o("CamembertForCausalLM"),f_o=o(" (CamemBERT model)"),m_o=l(),mu=a("li"),xee=a("strong"),g_o=o("ctrl"),h_o=o(" \u2014 "),DP=a("a"),p_o=o("CTRLLMHeadModel"),__o=o(" (CTRL model)"),u_o=l(),gu=a("li"),kee=a("strong"),b_o=o("data2vec-text"),v_o=o(" \u2014 "),NP=a("a"),T_o=o("Data2VecTextForCausalLM"),F_o=o(" (Data2VecText model)"),C_o=l(),hu=a("li"),Ree=a("strong"),M_o=o("electra"),E_o=o(" \u2014 "),qP=a("a"),y_o=o("ElectraForCausalLM"),w_o=o(" (ELECTRA model)"),A_o=l(),pu=a("li"),See=a("strong"),L_o=o("gpt2"),B_o=o(" \u2014 "),OP=a("a"),x_o=o("GPT2LMHeadModel"),k_o=o(" (OpenAI GPT-2 model)"),R_o=l(),_u=a("li"),Pee=a("strong"),S_o=o("gpt_neo"),P_o=o(" \u2014 "),GP=a("a"),$_o=o("GPTNeoForCausalLM"),I_o=o(" (GPT Neo model)"),j_o=l(),uu=a("li"),$ee=a("strong"),D_o=o("gptj"),N_o=o(" \u2014 "),XP=a("a"),q_o=o("GPTJForCausalLM"),O_o=o(" (GPT-J model)"),G_o=l(),bu=a("li"),Iee=a("strong"),X_o=o("marian"),V_o=o(" \u2014 "),VP=a("a"),z_o=o("MarianForCausalLM"),W_o=o(" (Marian model)"),Q_o=l(),vu=a("li"),jee=a("strong"),H_o=o("mbart"),U_o=o(" \u2014 "),zP=a("a"),J_o=o("MBartForCausalLM"),Y_o=o(" (mBART model)"),K_o=l(),Tu=a("li"),Dee=a("strong"),Z_o=o("megatron-bert"),euo=o(" \u2014 "),WP=a("a"),ouo=o("MegatronBertForCausalLM"),ruo=o(" (MegatronBert model)"),tuo=l(),Fu=a("li"),Nee=a("strong"),auo=o("openai-gpt"),nuo=o(" \u2014 "),QP=a("a"),suo=o("OpenAIGPTLMHeadModel"),luo=o(" (OpenAI GPT model)"),iuo=l(),Cu=a("li"),qee=a("strong"),duo=o("pegasus"),cuo=o(" \u2014 "),HP=a("a"),fuo=o("PegasusForCausalLM"),muo=o(" (Pegasus model)"),guo=l(),Mu=a("li"),Oee=a("strong"),huo=o("plbart"),puo=o(" \u2014 "),UP=a("a"),_uo=o("PLBartForCausalLM"),uuo=o(" (PLBart model)"),buo=l(),Eu=a("li"),Gee=a("strong"),vuo=o("prophetnet"),Tuo=o(" \u2014 "),JP=a("a"),Fuo=o("ProphetNetForCausalLM"),Cuo=o(" (ProphetNet model)"),Muo=l(),yu=a("li"),Xee=a("strong"),Euo=o("qdqbert"),yuo=o(" \u2014 "),YP=a("a"),wuo=o("QDQBertLMHeadModel"),Auo=o(" (QDQBert model)"),Luo=l(),wu=a("li"),Vee=a("strong"),Buo=o("reformer"),xuo=o(" \u2014 "),KP=a("a"),kuo=o("ReformerModelWithLMHead"),Ruo=o(" (Reformer model)"),Suo=l(),Au=a("li"),zee=a("strong"),Puo=o("rembert"),$uo=o(" \u2014 "),ZP=a("a"),Iuo=o("RemBertForCausalLM"),juo=o(" (RemBERT model)"),Duo=l(),Lu=a("li"),Wee=a("strong"),Nuo=o("roberta"),quo=o(" \u2014 "),e$=a("a"),Ouo=o("RobertaForCausalLM"),Guo=o(" (RoBERTa model)"),Xuo=l(),Bu=a("li"),Qee=a("strong"),Vuo=o("roformer"),zuo=o(" \u2014 "),o$=a("a"),Wuo=o("RoFormerForCausalLM"),Quo=o(" (RoFormer model)"),Huo=l(),xu=a("li"),Hee=a("strong"),Uuo=o("speech_to_text_2"),Juo=o(" \u2014 "),r$=a("a"),Yuo=o("Speech2Text2ForCausalLM"),Kuo=o(" (Speech2Text2 model)"),Zuo=l(),ku=a("li"),Uee=a("strong"),e2o=o("transfo-xl"),o2o=o(" \u2014 "),t$=a("a"),r2o=o("TransfoXLLMHeadModel"),t2o=o(" (Transformer-XL model)"),a2o=l(),Ru=a("li"),Jee=a("strong"),n2o=o("trocr"),s2o=o(" \u2014 "),a$=a("a"),l2o=o("TrOCRForCausalLM"),i2o=o(" (TrOCR model)"),d2o=l(),Su=a("li"),Yee=a("strong"),c2o=o("xglm"),f2o=o(" \u2014 "),n$=a("a"),m2o=o("XGLMForCausalLM"),g2o=o(" (XGLM model)"),h2o=l(),Pu=a("li"),Kee=a("strong"),p2o=o("xlm"),_2o=o(" \u2014 "),s$=a("a"),u2o=o("XLMWithLMHeadModel"),b2o=o(" (XLM model)"),v2o=l(),$u=a("li"),Zee=a("strong"),T2o=o("xlm-prophetnet"),F2o=o(" \u2014 "),l$=a("a"),C2o=o("XLMProphetNetForCausalLM"),M2o=o(" (XLMProphetNet model)"),E2o=l(),Iu=a("li"),eoe=a("strong"),y2o=o("xlm-roberta"),w2o=o(" \u2014 "),i$=a("a"),A2o=o("XLMRobertaForCausalLM"),L2o=o(" (XLM-RoBERTa model)"),B2o=l(),ju=a("li"),ooe=a("strong"),x2o=o("xlm-roberta-xl"),k2o=o(" \u2014 "),d$=a("a"),R2o=o("XLMRobertaXLForCausalLM"),S2o=o(" (XLM-RoBERTa-XL model)"),P2o=l(),Du=a("li"),roe=a("strong"),$2o=o("xlnet"),I2o=o(" \u2014 "),c$=a("a"),j2o=o("XLNetLMHeadModel"),D2o=o(" (XLNet model)"),N2o=l(),Nu=a("p"),q2o=o("The model is set in evaluation mode by default using "),toe=a("code"),O2o=o("model.eval()"),G2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aoe=a("code"),X2o=o("model.train()"),V2o=l(),noe=a("p"),z2o=o("Examples:"),W2o=l(),f(DE.$$.fragment),XBe=l(),nd=a("h2"),qu=a("a"),soe=a("span"),f(NE.$$.fragment),Q2o=l(),loe=a("span"),H2o=o("AutoModelForMaskedLM"),VBe=l(),Yo=a("div"),f(qE.$$.fragment),U2o=l(),sd=a("p"),J2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ioe=a("code"),Y2o=o("from_pretrained()"),K2o=o("class method or the "),doe=a("code"),Z2o=o("from_config()"),e1o=o(`class
method.`),o1o=l(),OE=a("p"),r1o=o("This class cannot be instantiated directly using "),coe=a("code"),t1o=o("__init__()"),a1o=o(" (throws an error)."),n1o=l(),zr=a("div"),f(GE.$$.fragment),s1o=l(),foe=a("p"),l1o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i1o=l(),ld=a("p"),d1o=o(`Note:
Loading a model from its configuration file does `),moe=a("strong"),c1o=o("not"),f1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("code"),m1o=o("from_pretrained()"),g1o=o("to load the model weights."),h1o=l(),hoe=a("p"),p1o=o("Examples:"),_1o=l(),f(XE.$$.fragment),u1o=l(),$e=a("div"),f(VE.$$.fragment),b1o=l(),poe=a("p"),v1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T1o=l(),Wa=a("p"),F1o=o("The model class to instantiate is selected based on the "),_oe=a("code"),C1o=o("model_type"),M1o=o(` property of the config object (either
passed as an argument or loaded from `),uoe=a("code"),E1o=o("pretrained_model_name_or_path"),y1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),boe=a("code"),w1o=o("pretrained_model_name_or_path"),A1o=o(":"),L1o=l(),I=a("ul"),Ou=a("li"),voe=a("strong"),B1o=o("albert"),x1o=o(" \u2014 "),f$=a("a"),k1o=o("AlbertForMaskedLM"),R1o=o(" (ALBERT model)"),S1o=l(),Gu=a("li"),Toe=a("strong"),P1o=o("bart"),$1o=o(" \u2014 "),m$=a("a"),I1o=o("BartForConditionalGeneration"),j1o=o(" (BART model)"),D1o=l(),Xu=a("li"),Foe=a("strong"),N1o=o("bert"),q1o=o(" \u2014 "),g$=a("a"),O1o=o("BertForMaskedLM"),G1o=o(" (BERT model)"),X1o=l(),Vu=a("li"),Coe=a("strong"),V1o=o("big_bird"),z1o=o(" \u2014 "),h$=a("a"),W1o=o("BigBirdForMaskedLM"),Q1o=o(" (BigBird model)"),H1o=l(),zu=a("li"),Moe=a("strong"),U1o=o("camembert"),J1o=o(" \u2014 "),p$=a("a"),Y1o=o("CamembertForMaskedLM"),K1o=o(" (CamemBERT model)"),Z1o=l(),Wu=a("li"),Eoe=a("strong"),ebo=o("convbert"),obo=o(" \u2014 "),_$=a("a"),rbo=o("ConvBertForMaskedLM"),tbo=o(" (ConvBERT model)"),abo=l(),Qu=a("li"),yoe=a("strong"),nbo=o("data2vec-text"),sbo=o(" \u2014 "),u$=a("a"),lbo=o("Data2VecTextForMaskedLM"),ibo=o(" (Data2VecText model)"),dbo=l(),Hu=a("li"),woe=a("strong"),cbo=o("deberta"),fbo=o(" \u2014 "),b$=a("a"),mbo=o("DebertaForMaskedLM"),gbo=o(" (DeBERTa model)"),hbo=l(),Uu=a("li"),Aoe=a("strong"),pbo=o("deberta-v2"),_bo=o(" \u2014 "),v$=a("a"),ubo=o("DebertaV2ForMaskedLM"),bbo=o(" (DeBERTa-v2 model)"),vbo=l(),Ju=a("li"),Loe=a("strong"),Tbo=o("distilbert"),Fbo=o(" \u2014 "),T$=a("a"),Cbo=o("DistilBertForMaskedLM"),Mbo=o(" (DistilBERT model)"),Ebo=l(),Yu=a("li"),Boe=a("strong"),ybo=o("electra"),wbo=o(" \u2014 "),F$=a("a"),Abo=o("ElectraForMaskedLM"),Lbo=o(" (ELECTRA model)"),Bbo=l(),Ku=a("li"),xoe=a("strong"),xbo=o("flaubert"),kbo=o(" \u2014 "),C$=a("a"),Rbo=o("FlaubertWithLMHeadModel"),Sbo=o(" (FlauBERT model)"),Pbo=l(),Zu=a("li"),koe=a("strong"),$bo=o("fnet"),Ibo=o(" \u2014 "),M$=a("a"),jbo=o("FNetForMaskedLM"),Dbo=o(" (FNet model)"),Nbo=l(),e2=a("li"),Roe=a("strong"),qbo=o("funnel"),Obo=o(" \u2014 "),E$=a("a"),Gbo=o("FunnelForMaskedLM"),Xbo=o(" (Funnel Transformer model)"),Vbo=l(),o2=a("li"),Soe=a("strong"),zbo=o("ibert"),Wbo=o(" \u2014 "),y$=a("a"),Qbo=o("IBertForMaskedLM"),Hbo=o(" (I-BERT model)"),Ubo=l(),r2=a("li"),Poe=a("strong"),Jbo=o("layoutlm"),Ybo=o(" \u2014 "),w$=a("a"),Kbo=o("LayoutLMForMaskedLM"),Zbo=o(" (LayoutLM model)"),e3o=l(),t2=a("li"),$oe=a("strong"),o3o=o("longformer"),r3o=o(" \u2014 "),A$=a("a"),t3o=o("LongformerForMaskedLM"),a3o=o(" (Longformer model)"),n3o=l(),a2=a("li"),Ioe=a("strong"),s3o=o("mbart"),l3o=o(" \u2014 "),L$=a("a"),i3o=o("MBartForConditionalGeneration"),d3o=o(" (mBART model)"),c3o=l(),n2=a("li"),joe=a("strong"),f3o=o("megatron-bert"),m3o=o(" \u2014 "),B$=a("a"),g3o=o("MegatronBertForMaskedLM"),h3o=o(" (MegatronBert model)"),p3o=l(),s2=a("li"),Doe=a("strong"),_3o=o("mobilebert"),u3o=o(" \u2014 "),x$=a("a"),b3o=o("MobileBertForMaskedLM"),v3o=o(" (MobileBERT model)"),T3o=l(),l2=a("li"),Noe=a("strong"),F3o=o("mpnet"),C3o=o(" \u2014 "),k$=a("a"),M3o=o("MPNetForMaskedLM"),E3o=o(" (MPNet model)"),y3o=l(),i2=a("li"),qoe=a("strong"),w3o=o("nystromformer"),A3o=o(" \u2014 "),R$=a("a"),L3o=o("NystromformerForMaskedLM"),B3o=o(" (Nystromformer model)"),x3o=l(),d2=a("li"),Ooe=a("strong"),k3o=o("perceiver"),R3o=o(" \u2014 "),S$=a("a"),S3o=o("PerceiverForMaskedLM"),P3o=o(" (Perceiver model)"),$3o=l(),c2=a("li"),Goe=a("strong"),I3o=o("qdqbert"),j3o=o(" \u2014 "),P$=a("a"),D3o=o("QDQBertForMaskedLM"),N3o=o(" (QDQBert model)"),q3o=l(),f2=a("li"),Xoe=a("strong"),O3o=o("reformer"),G3o=o(" \u2014 "),$$=a("a"),X3o=o("ReformerForMaskedLM"),V3o=o(" (Reformer model)"),z3o=l(),m2=a("li"),Voe=a("strong"),W3o=o("rembert"),Q3o=o(" \u2014 "),I$=a("a"),H3o=o("RemBertForMaskedLM"),U3o=o(" (RemBERT model)"),J3o=l(),g2=a("li"),zoe=a("strong"),Y3o=o("roberta"),K3o=o(" \u2014 "),j$=a("a"),Z3o=o("RobertaForMaskedLM"),e5o=o(" (RoBERTa model)"),o5o=l(),h2=a("li"),Woe=a("strong"),r5o=o("roformer"),t5o=o(" \u2014 "),D$=a("a"),a5o=o("RoFormerForMaskedLM"),n5o=o(" (RoFormer model)"),s5o=l(),p2=a("li"),Qoe=a("strong"),l5o=o("squeezebert"),i5o=o(" \u2014 "),N$=a("a"),d5o=o("SqueezeBertForMaskedLM"),c5o=o(" (SqueezeBERT model)"),f5o=l(),_2=a("li"),Hoe=a("strong"),m5o=o("tapas"),g5o=o(" \u2014 "),q$=a("a"),h5o=o("TapasForMaskedLM"),p5o=o(" (TAPAS model)"),_5o=l(),u2=a("li"),Uoe=a("strong"),u5o=o("wav2vec2"),b5o=o(" \u2014 "),Joe=a("code"),v5o=o("Wav2Vec2ForMaskedLM"),T5o=o("(Wav2Vec2 model)"),F5o=l(),b2=a("li"),Yoe=a("strong"),C5o=o("xlm"),M5o=o(" \u2014 "),O$=a("a"),E5o=o("XLMWithLMHeadModel"),y5o=o(" (XLM model)"),w5o=l(),v2=a("li"),Koe=a("strong"),A5o=o("xlm-roberta"),L5o=o(" \u2014 "),G$=a("a"),B5o=o("XLMRobertaForMaskedLM"),x5o=o(" (XLM-RoBERTa model)"),k5o=l(),T2=a("li"),Zoe=a("strong"),R5o=o("xlm-roberta-xl"),S5o=o(" \u2014 "),X$=a("a"),P5o=o("XLMRobertaXLForMaskedLM"),$5o=o(" (XLM-RoBERTa-XL model)"),I5o=l(),F2=a("li"),ere=a("strong"),j5o=o("yoso"),D5o=o(" \u2014 "),V$=a("a"),N5o=o("YosoForMaskedLM"),q5o=o(" (YOSO model)"),O5o=l(),C2=a("p"),G5o=o("The model is set in evaluation mode by default using "),ore=a("code"),X5o=o("model.eval()"),V5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),z5o=o("model.train()"),W5o=l(),tre=a("p"),Q5o=o("Examples:"),H5o=l(),f(zE.$$.fragment),zBe=l(),id=a("h2"),M2=a("a"),are=a("span"),f(WE.$$.fragment),U5o=l(),nre=a("span"),J5o=o("AutoModelForSeq2SeqLM"),WBe=l(),Ko=a("div"),f(QE.$$.fragment),Y5o=l(),dd=a("p"),K5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sre=a("code"),Z5o=o("from_pretrained()"),evo=o("class method or the "),lre=a("code"),ovo=o("from_config()"),rvo=o(`class
method.`),tvo=l(),HE=a("p"),avo=o("This class cannot be instantiated directly using "),ire=a("code"),nvo=o("__init__()"),svo=o(" (throws an error)."),lvo=l(),Wr=a("div"),f(UE.$$.fragment),ivo=l(),dre=a("p"),dvo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cvo=l(),cd=a("p"),fvo=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),mvo=o("not"),gvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("code"),hvo=o("from_pretrained()"),pvo=o("to load the model weights."),_vo=l(),mre=a("p"),uvo=o("Examples:"),bvo=l(),f(JE.$$.fragment),vvo=l(),Ie=a("div"),f(YE.$$.fragment),Tvo=l(),gre=a("p"),Fvo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cvo=l(),Qa=a("p"),Mvo=o("The model class to instantiate is selected based on the "),hre=a("code"),Evo=o("model_type"),yvo=o(` property of the config object (either
passed as an argument or loaded from `),pre=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=a("code"),Lvo=o("pretrained_model_name_or_path"),Bvo=o(":"),xvo=l(),ne=a("ul"),E2=a("li"),ure=a("strong"),kvo=o("bart"),Rvo=o(" \u2014 "),z$=a("a"),Svo=o("BartForConditionalGeneration"),Pvo=o(" (BART model)"),$vo=l(),y2=a("li"),bre=a("strong"),Ivo=o("bigbird_pegasus"),jvo=o(" \u2014 "),W$=a("a"),Dvo=o("BigBirdPegasusForConditionalGeneration"),Nvo=o(" (BigBirdPegasus model)"),qvo=l(),w2=a("li"),vre=a("strong"),Ovo=o("blenderbot"),Gvo=o(" \u2014 "),Q$=a("a"),Xvo=o("BlenderbotForConditionalGeneration"),Vvo=o(" (Blenderbot model)"),zvo=l(),A2=a("li"),Tre=a("strong"),Wvo=o("blenderbot-small"),Qvo=o(" \u2014 "),H$=a("a"),Hvo=o("BlenderbotSmallForConditionalGeneration"),Uvo=o(" (BlenderbotSmall model)"),Jvo=l(),L2=a("li"),Fre=a("strong"),Yvo=o("encoder-decoder"),Kvo=o(" \u2014 "),U$=a("a"),Zvo=o("EncoderDecoderModel"),eTo=o(" (Encoder decoder model)"),oTo=l(),B2=a("li"),Cre=a("strong"),rTo=o("fsmt"),tTo=o(" \u2014 "),J$=a("a"),aTo=o("FSMTForConditionalGeneration"),nTo=o(" (FairSeq Machine-Translation model)"),sTo=l(),x2=a("li"),Mre=a("strong"),lTo=o("led"),iTo=o(" \u2014 "),Y$=a("a"),dTo=o("LEDForConditionalGeneration"),cTo=o(" (LED model)"),fTo=l(),k2=a("li"),Ere=a("strong"),mTo=o("m2m_100"),gTo=o(" \u2014 "),K$=a("a"),hTo=o("M2M100ForConditionalGeneration"),pTo=o(" (M2M100 model)"),_To=l(),R2=a("li"),yre=a("strong"),uTo=o("marian"),bTo=o(" \u2014 "),Z$=a("a"),vTo=o("MarianMTModel"),TTo=o(" (Marian model)"),FTo=l(),S2=a("li"),wre=a("strong"),CTo=o("mbart"),MTo=o(" \u2014 "),eI=a("a"),ETo=o("MBartForConditionalGeneration"),yTo=o(" (mBART model)"),wTo=l(),P2=a("li"),Are=a("strong"),ATo=o("mt5"),LTo=o(" \u2014 "),oI=a("a"),BTo=o("MT5ForConditionalGeneration"),xTo=o(" (mT5 model)"),kTo=l(),$2=a("li"),Lre=a("strong"),RTo=o("pegasus"),STo=o(" \u2014 "),rI=a("a"),PTo=o("PegasusForConditionalGeneration"),$To=o(" (Pegasus model)"),ITo=l(),I2=a("li"),Bre=a("strong"),jTo=o("plbart"),DTo=o(" \u2014 "),tI=a("a"),NTo=o("PLBartForConditionalGeneration"),qTo=o(" (PLBart model)"),OTo=l(),j2=a("li"),xre=a("strong"),GTo=o("prophetnet"),XTo=o(" \u2014 "),aI=a("a"),VTo=o("ProphetNetForConditionalGeneration"),zTo=o(" (ProphetNet model)"),WTo=l(),D2=a("li"),kre=a("strong"),QTo=o("t5"),HTo=o(" \u2014 "),nI=a("a"),UTo=o("T5ForConditionalGeneration"),JTo=o(" (T5 model)"),YTo=l(),N2=a("li"),Rre=a("strong"),KTo=o("xlm-prophetnet"),ZTo=o(" \u2014 "),sI=a("a"),eFo=o("XLMProphetNetForConditionalGeneration"),oFo=o(" (XLMProphetNet model)"),rFo=l(),q2=a("p"),tFo=o("The model is set in evaluation mode by default using "),Sre=a("code"),aFo=o("model.eval()"),nFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pre=a("code"),sFo=o("model.train()"),lFo=l(),$re=a("p"),iFo=o("Examples:"),dFo=l(),f(KE.$$.fragment),QBe=l(),fd=a("h2"),O2=a("a"),Ire=a("span"),f(ZE.$$.fragment),cFo=l(),jre=a("span"),fFo=o("AutoModelForSequenceClassification"),HBe=l(),Zo=a("div"),f(ey.$$.fragment),mFo=l(),md=a("p"),gFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dre=a("code"),hFo=o("from_pretrained()"),pFo=o("class method or the "),Nre=a("code"),_Fo=o("from_config()"),uFo=o(`class
method.`),bFo=l(),oy=a("p"),vFo=o("This class cannot be instantiated directly using "),qre=a("code"),TFo=o("__init__()"),FFo=o(" (throws an error)."),CFo=l(),Qr=a("div"),f(ry.$$.fragment),MFo=l(),Ore=a("p"),EFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yFo=l(),gd=a("p"),wFo=o(`Note:
Loading a model from its configuration file does `),Gre=a("strong"),AFo=o("not"),LFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xre=a("code"),BFo=o("from_pretrained()"),xFo=o("to load the model weights."),kFo=l(),Vre=a("p"),RFo=o("Examples:"),SFo=l(),f(ty.$$.fragment),PFo=l(),je=a("div"),f(ay.$$.fragment),$Fo=l(),zre=a("p"),IFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jFo=l(),Ha=a("p"),DFo=o("The model class to instantiate is selected based on the "),Wre=a("code"),NFo=o("model_type"),qFo=o(` property of the config object (either
passed as an argument or loaded from `),Qre=a("code"),OFo=o("pretrained_model_name_or_path"),GFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=a("code"),XFo=o("pretrained_model_name_or_path"),VFo=o(":"),zFo=l(),A=a("ul"),G2=a("li"),Ure=a("strong"),WFo=o("albert"),QFo=o(" \u2014 "),lI=a("a"),HFo=o("AlbertForSequenceClassification"),UFo=o(" (ALBERT model)"),JFo=l(),X2=a("li"),Jre=a("strong"),YFo=o("bart"),KFo=o(" \u2014 "),iI=a("a"),ZFo=o("BartForSequenceClassification"),e9o=o(" (BART model)"),o9o=l(),V2=a("li"),Yre=a("strong"),r9o=o("bert"),t9o=o(" \u2014 "),dI=a("a"),a9o=o("BertForSequenceClassification"),n9o=o(" (BERT model)"),s9o=l(),z2=a("li"),Kre=a("strong"),l9o=o("big_bird"),i9o=o(" \u2014 "),cI=a("a"),d9o=o("BigBirdForSequenceClassification"),c9o=o(" (BigBird model)"),f9o=l(),W2=a("li"),Zre=a("strong"),m9o=o("bigbird_pegasus"),g9o=o(" \u2014 "),fI=a("a"),h9o=o("BigBirdPegasusForSequenceClassification"),p9o=o(" (BigBirdPegasus model)"),_9o=l(),Q2=a("li"),ete=a("strong"),u9o=o("camembert"),b9o=o(" \u2014 "),mI=a("a"),v9o=o("CamembertForSequenceClassification"),T9o=o(" (CamemBERT model)"),F9o=l(),H2=a("li"),ote=a("strong"),C9o=o("canine"),M9o=o(" \u2014 "),gI=a("a"),E9o=o("CanineForSequenceClassification"),y9o=o(" (Canine model)"),w9o=l(),U2=a("li"),rte=a("strong"),A9o=o("convbert"),L9o=o(" \u2014 "),hI=a("a"),B9o=o("ConvBertForSequenceClassification"),x9o=o(" (ConvBERT model)"),k9o=l(),J2=a("li"),tte=a("strong"),R9o=o("ctrl"),S9o=o(" \u2014 "),pI=a("a"),P9o=o("CTRLForSequenceClassification"),$9o=o(" (CTRL model)"),I9o=l(),Y2=a("li"),ate=a("strong"),j9o=o("data2vec-text"),D9o=o(" \u2014 "),_I=a("a"),N9o=o("Data2VecTextForSequenceClassification"),q9o=o(" (Data2VecText model)"),O9o=l(),K2=a("li"),nte=a("strong"),G9o=o("deberta"),X9o=o(" \u2014 "),uI=a("a"),V9o=o("DebertaForSequenceClassification"),z9o=o(" (DeBERTa model)"),W9o=l(),Z2=a("li"),ste=a("strong"),Q9o=o("deberta-v2"),H9o=o(" \u2014 "),bI=a("a"),U9o=o("DebertaV2ForSequenceClassification"),J9o=o(" (DeBERTa-v2 model)"),Y9o=l(),e1=a("li"),lte=a("strong"),K9o=o("distilbert"),Z9o=o(" \u2014 "),vI=a("a"),eCo=o("DistilBertForSequenceClassification"),oCo=o(" (DistilBERT model)"),rCo=l(),o1=a("li"),ite=a("strong"),tCo=o("electra"),aCo=o(" \u2014 "),TI=a("a"),nCo=o("ElectraForSequenceClassification"),sCo=o(" (ELECTRA model)"),lCo=l(),r1=a("li"),dte=a("strong"),iCo=o("flaubert"),dCo=o(" \u2014 "),FI=a("a"),cCo=o("FlaubertForSequenceClassification"),fCo=o(" (FlauBERT model)"),mCo=l(),t1=a("li"),cte=a("strong"),gCo=o("fnet"),hCo=o(" \u2014 "),CI=a("a"),pCo=o("FNetForSequenceClassification"),_Co=o(" (FNet model)"),uCo=l(),a1=a("li"),fte=a("strong"),bCo=o("funnel"),vCo=o(" \u2014 "),MI=a("a"),TCo=o("FunnelForSequenceClassification"),FCo=o(" (Funnel Transformer model)"),CCo=l(),n1=a("li"),mte=a("strong"),MCo=o("gpt2"),ECo=o(" \u2014 "),EI=a("a"),yCo=o("GPT2ForSequenceClassification"),wCo=o(" (OpenAI GPT-2 model)"),ACo=l(),s1=a("li"),gte=a("strong"),LCo=o("gpt_neo"),BCo=o(" \u2014 "),yI=a("a"),xCo=o("GPTNeoForSequenceClassification"),kCo=o(" (GPT Neo model)"),RCo=l(),l1=a("li"),hte=a("strong"),SCo=o("gptj"),PCo=o(" \u2014 "),wI=a("a"),$Co=o("GPTJForSequenceClassification"),ICo=o(" (GPT-J model)"),jCo=l(),i1=a("li"),pte=a("strong"),DCo=o("ibert"),NCo=o(" \u2014 "),AI=a("a"),qCo=o("IBertForSequenceClassification"),OCo=o(" (I-BERT model)"),GCo=l(),d1=a("li"),_te=a("strong"),XCo=o("layoutlm"),VCo=o(" \u2014 "),LI=a("a"),zCo=o("LayoutLMForSequenceClassification"),WCo=o(" (LayoutLM model)"),QCo=l(),c1=a("li"),ute=a("strong"),HCo=o("layoutlmv2"),UCo=o(" \u2014 "),BI=a("a"),JCo=o("LayoutLMv2ForSequenceClassification"),YCo=o(" (LayoutLMv2 model)"),KCo=l(),f1=a("li"),bte=a("strong"),ZCo=o("led"),e4o=o(" \u2014 "),xI=a("a"),o4o=o("LEDForSequenceClassification"),r4o=o(" (LED model)"),t4o=l(),m1=a("li"),vte=a("strong"),a4o=o("longformer"),n4o=o(" \u2014 "),kI=a("a"),s4o=o("LongformerForSequenceClassification"),l4o=o(" (Longformer model)"),i4o=l(),g1=a("li"),Tte=a("strong"),d4o=o("mbart"),c4o=o(" \u2014 "),RI=a("a"),f4o=o("MBartForSequenceClassification"),m4o=o(" (mBART model)"),g4o=l(),h1=a("li"),Fte=a("strong"),h4o=o("megatron-bert"),p4o=o(" \u2014 "),SI=a("a"),_4o=o("MegatronBertForSequenceClassification"),u4o=o(" (MegatronBert model)"),b4o=l(),p1=a("li"),Cte=a("strong"),v4o=o("mobilebert"),T4o=o(" \u2014 "),PI=a("a"),F4o=o("MobileBertForSequenceClassification"),C4o=o(" (MobileBERT model)"),M4o=l(),_1=a("li"),Mte=a("strong"),E4o=o("mpnet"),y4o=o(" \u2014 "),$I=a("a"),w4o=o("MPNetForSequenceClassification"),A4o=o(" (MPNet model)"),L4o=l(),u1=a("li"),Ete=a("strong"),B4o=o("nystromformer"),x4o=o(" \u2014 "),II=a("a"),k4o=o("NystromformerForSequenceClassification"),R4o=o(" (Nystromformer model)"),S4o=l(),b1=a("li"),yte=a("strong"),P4o=o("openai-gpt"),$4o=o(" \u2014 "),jI=a("a"),I4o=o("OpenAIGPTForSequenceClassification"),j4o=o(" (OpenAI GPT model)"),D4o=l(),v1=a("li"),wte=a("strong"),N4o=o("perceiver"),q4o=o(" \u2014 "),DI=a("a"),O4o=o("PerceiverForSequenceClassification"),G4o=o(" (Perceiver model)"),X4o=l(),T1=a("li"),Ate=a("strong"),V4o=o("plbart"),z4o=o(" \u2014 "),NI=a("a"),W4o=o("PLBartForSequenceClassification"),Q4o=o(" (PLBart model)"),H4o=l(),F1=a("li"),Lte=a("strong"),U4o=o("qdqbert"),J4o=o(" \u2014 "),qI=a("a"),Y4o=o("QDQBertForSequenceClassification"),K4o=o(" (QDQBert model)"),Z4o=l(),C1=a("li"),Bte=a("strong"),eMo=o("reformer"),oMo=o(" \u2014 "),OI=a("a"),rMo=o("ReformerForSequenceClassification"),tMo=o(" (Reformer model)"),aMo=l(),M1=a("li"),xte=a("strong"),nMo=o("rembert"),sMo=o(" \u2014 "),GI=a("a"),lMo=o("RemBertForSequenceClassification"),iMo=o(" (RemBERT model)"),dMo=l(),E1=a("li"),kte=a("strong"),cMo=o("roberta"),fMo=o(" \u2014 "),XI=a("a"),mMo=o("RobertaForSequenceClassification"),gMo=o(" (RoBERTa model)"),hMo=l(),y1=a("li"),Rte=a("strong"),pMo=o("roformer"),_Mo=o(" \u2014 "),VI=a("a"),uMo=o("RoFormerForSequenceClassification"),bMo=o(" (RoFormer model)"),vMo=l(),w1=a("li"),Ste=a("strong"),TMo=o("squeezebert"),FMo=o(" \u2014 "),zI=a("a"),CMo=o("SqueezeBertForSequenceClassification"),MMo=o(" (SqueezeBERT model)"),EMo=l(),A1=a("li"),Pte=a("strong"),yMo=o("tapas"),wMo=o(" \u2014 "),WI=a("a"),AMo=o("TapasForSequenceClassification"),LMo=o(" (TAPAS model)"),BMo=l(),L1=a("li"),$te=a("strong"),xMo=o("transfo-xl"),kMo=o(" \u2014 "),QI=a("a"),RMo=o("TransfoXLForSequenceClassification"),SMo=o(" (Transformer-XL model)"),PMo=l(),B1=a("li"),Ite=a("strong"),$Mo=o("xlm"),IMo=o(" \u2014 "),HI=a("a"),jMo=o("XLMForSequenceClassification"),DMo=o(" (XLM model)"),NMo=l(),x1=a("li"),jte=a("strong"),qMo=o("xlm-roberta"),OMo=o(" \u2014 "),UI=a("a"),GMo=o("XLMRobertaForSequenceClassification"),XMo=o(" (XLM-RoBERTa model)"),VMo=l(),k1=a("li"),Dte=a("strong"),zMo=o("xlm-roberta-xl"),WMo=o(" \u2014 "),JI=a("a"),QMo=o("XLMRobertaXLForSequenceClassification"),HMo=o(" (XLM-RoBERTa-XL model)"),UMo=l(),R1=a("li"),Nte=a("strong"),JMo=o("xlnet"),YMo=o(" \u2014 "),YI=a("a"),KMo=o("XLNetForSequenceClassification"),ZMo=o(" (XLNet model)"),eEo=l(),S1=a("li"),qte=a("strong"),oEo=o("yoso"),rEo=o(" \u2014 "),KI=a("a"),tEo=o("YosoForSequenceClassification"),aEo=o(" (YOSO model)"),nEo=l(),P1=a("p"),sEo=o("The model is set in evaluation mode by default using "),Ote=a("code"),lEo=o("model.eval()"),iEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gte=a("code"),dEo=o("model.train()"),cEo=l(),Xte=a("p"),fEo=o("Examples:"),mEo=l(),f(ny.$$.fragment),UBe=l(),hd=a("h2"),$1=a("a"),Vte=a("span"),f(sy.$$.fragment),gEo=l(),zte=a("span"),hEo=o("AutoModelForMultipleChoice"),JBe=l(),er=a("div"),f(ly.$$.fragment),pEo=l(),pd=a("p"),_Eo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wte=a("code"),uEo=o("from_pretrained()"),bEo=o("class method or the "),Qte=a("code"),vEo=o("from_config()"),TEo=o(`class
method.`),FEo=l(),iy=a("p"),CEo=o("This class cannot be instantiated directly using "),Hte=a("code"),MEo=o("__init__()"),EEo=o(" (throws an error)."),yEo=l(),Hr=a("div"),f(dy.$$.fragment),wEo=l(),Ute=a("p"),AEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LEo=l(),_d=a("p"),BEo=o(`Note:
Loading a model from its configuration file does `),Jte=a("strong"),xEo=o("not"),kEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=a("code"),REo=o("from_pretrained()"),SEo=o("to load the model weights."),PEo=l(),Kte=a("p"),$Eo=o("Examples:"),IEo=l(),f(cy.$$.fragment),jEo=l(),De=a("div"),f(fy.$$.fragment),DEo=l(),Zte=a("p"),NEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qEo=l(),Ua=a("p"),OEo=o("The model class to instantiate is selected based on the "),eae=a("code"),GEo=o("model_type"),XEo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),VEo=o("pretrained_model_name_or_path"),zEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),WEo=o("pretrained_model_name_or_path"),QEo=o(":"),HEo=l(),O=a("ul"),I1=a("li"),tae=a("strong"),UEo=o("albert"),JEo=o(" \u2014 "),ZI=a("a"),YEo=o("AlbertForMultipleChoice"),KEo=o(" (ALBERT model)"),ZEo=l(),j1=a("li"),aae=a("strong"),eyo=o("bert"),oyo=o(" \u2014 "),ej=a("a"),ryo=o("BertForMultipleChoice"),tyo=o(" (BERT model)"),ayo=l(),D1=a("li"),nae=a("strong"),nyo=o("big_bird"),syo=o(" \u2014 "),oj=a("a"),lyo=o("BigBirdForMultipleChoice"),iyo=o(" (BigBird model)"),dyo=l(),N1=a("li"),sae=a("strong"),cyo=o("camembert"),fyo=o(" \u2014 "),rj=a("a"),myo=o("CamembertForMultipleChoice"),gyo=o(" (CamemBERT model)"),hyo=l(),q1=a("li"),lae=a("strong"),pyo=o("canine"),_yo=o(" \u2014 "),tj=a("a"),uyo=o("CanineForMultipleChoice"),byo=o(" (Canine model)"),vyo=l(),O1=a("li"),iae=a("strong"),Tyo=o("convbert"),Fyo=o(" \u2014 "),aj=a("a"),Cyo=o("ConvBertForMultipleChoice"),Myo=o(" (ConvBERT model)"),Eyo=l(),G1=a("li"),dae=a("strong"),yyo=o("data2vec-text"),wyo=o(" \u2014 "),nj=a("a"),Ayo=o("Data2VecTextForMultipleChoice"),Lyo=o(" (Data2VecText model)"),Byo=l(),X1=a("li"),cae=a("strong"),xyo=o("distilbert"),kyo=o(" \u2014 "),sj=a("a"),Ryo=o("DistilBertForMultipleChoice"),Syo=o(" (DistilBERT model)"),Pyo=l(),V1=a("li"),fae=a("strong"),$yo=o("electra"),Iyo=o(" \u2014 "),lj=a("a"),jyo=o("ElectraForMultipleChoice"),Dyo=o(" (ELECTRA model)"),Nyo=l(),z1=a("li"),mae=a("strong"),qyo=o("flaubert"),Oyo=o(" \u2014 "),ij=a("a"),Gyo=o("FlaubertForMultipleChoice"),Xyo=o(" (FlauBERT model)"),Vyo=l(),W1=a("li"),gae=a("strong"),zyo=o("fnet"),Wyo=o(" \u2014 "),dj=a("a"),Qyo=o("FNetForMultipleChoice"),Hyo=o(" (FNet model)"),Uyo=l(),Q1=a("li"),hae=a("strong"),Jyo=o("funnel"),Yyo=o(" \u2014 "),cj=a("a"),Kyo=o("FunnelForMultipleChoice"),Zyo=o(" (Funnel Transformer model)"),ewo=l(),H1=a("li"),pae=a("strong"),owo=o("ibert"),rwo=o(" \u2014 "),fj=a("a"),two=o("IBertForMultipleChoice"),awo=o(" (I-BERT model)"),nwo=l(),U1=a("li"),_ae=a("strong"),swo=o("longformer"),lwo=o(" \u2014 "),mj=a("a"),iwo=o("LongformerForMultipleChoice"),dwo=o(" (Longformer model)"),cwo=l(),J1=a("li"),uae=a("strong"),fwo=o("megatron-bert"),mwo=o(" \u2014 "),gj=a("a"),gwo=o("MegatronBertForMultipleChoice"),hwo=o(" (MegatronBert model)"),pwo=l(),Y1=a("li"),bae=a("strong"),_wo=o("mobilebert"),uwo=o(" \u2014 "),hj=a("a"),bwo=o("MobileBertForMultipleChoice"),vwo=o(" (MobileBERT model)"),Two=l(),K1=a("li"),vae=a("strong"),Fwo=o("mpnet"),Cwo=o(" \u2014 "),pj=a("a"),Mwo=o("MPNetForMultipleChoice"),Ewo=o(" (MPNet model)"),ywo=l(),Z1=a("li"),Tae=a("strong"),wwo=o("nystromformer"),Awo=o(" \u2014 "),_j=a("a"),Lwo=o("NystromformerForMultipleChoice"),Bwo=o(" (Nystromformer model)"),xwo=l(),eb=a("li"),Fae=a("strong"),kwo=o("qdqbert"),Rwo=o(" \u2014 "),uj=a("a"),Swo=o("QDQBertForMultipleChoice"),Pwo=o(" (QDQBert model)"),$wo=l(),ob=a("li"),Cae=a("strong"),Iwo=o("rembert"),jwo=o(" \u2014 "),bj=a("a"),Dwo=o("RemBertForMultipleChoice"),Nwo=o(" (RemBERT model)"),qwo=l(),rb=a("li"),Mae=a("strong"),Owo=o("roberta"),Gwo=o(" \u2014 "),vj=a("a"),Xwo=o("RobertaForMultipleChoice"),Vwo=o(" (RoBERTa model)"),zwo=l(),tb=a("li"),Eae=a("strong"),Wwo=o("roformer"),Qwo=o(" \u2014 "),Tj=a("a"),Hwo=o("RoFormerForMultipleChoice"),Uwo=o(" (RoFormer model)"),Jwo=l(),ab=a("li"),yae=a("strong"),Ywo=o("squeezebert"),Kwo=o(" \u2014 "),Fj=a("a"),Zwo=o("SqueezeBertForMultipleChoice"),e6o=o(" (SqueezeBERT model)"),o6o=l(),nb=a("li"),wae=a("strong"),r6o=o("xlm"),t6o=o(" \u2014 "),Cj=a("a"),a6o=o("XLMForMultipleChoice"),n6o=o(" (XLM model)"),s6o=l(),sb=a("li"),Aae=a("strong"),l6o=o("xlm-roberta"),i6o=o(" \u2014 "),Mj=a("a"),d6o=o("XLMRobertaForMultipleChoice"),c6o=o(" (XLM-RoBERTa model)"),f6o=l(),lb=a("li"),Lae=a("strong"),m6o=o("xlm-roberta-xl"),g6o=o(" \u2014 "),Ej=a("a"),h6o=o("XLMRobertaXLForMultipleChoice"),p6o=o(" (XLM-RoBERTa-XL model)"),_6o=l(),ib=a("li"),Bae=a("strong"),u6o=o("xlnet"),b6o=o(" \u2014 "),yj=a("a"),v6o=o("XLNetForMultipleChoice"),T6o=o(" (XLNet model)"),F6o=l(),db=a("li"),xae=a("strong"),C6o=o("yoso"),M6o=o(" \u2014 "),wj=a("a"),E6o=o("YosoForMultipleChoice"),y6o=o(" (YOSO model)"),w6o=l(),cb=a("p"),A6o=o("The model is set in evaluation mode by default using "),kae=a("code"),L6o=o("model.eval()"),B6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=a("code"),x6o=o("model.train()"),k6o=l(),Sae=a("p"),R6o=o("Examples:"),S6o=l(),f(my.$$.fragment),YBe=l(),ud=a("h2"),fb=a("a"),Pae=a("span"),f(gy.$$.fragment),P6o=l(),$ae=a("span"),$6o=o("AutoModelForNextSentencePrediction"),KBe=l(),or=a("div"),f(hy.$$.fragment),I6o=l(),bd=a("p"),j6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Iae=a("code"),D6o=o("from_pretrained()"),N6o=o("class method or the "),jae=a("code"),q6o=o("from_config()"),O6o=o(`class
method.`),G6o=l(),py=a("p"),X6o=o("This class cannot be instantiated directly using "),Dae=a("code"),V6o=o("__init__()"),z6o=o(" (throws an error)."),W6o=l(),Ur=a("div"),f(_y.$$.fragment),Q6o=l(),Nae=a("p"),H6o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U6o=l(),vd=a("p"),J6o=o(`Note:
Loading a model from its configuration file does `),qae=a("strong"),Y6o=o("not"),K6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oae=a("code"),Z6o=o("from_pretrained()"),eAo=o("to load the model weights."),oAo=l(),Gae=a("p"),rAo=o("Examples:"),tAo=l(),f(uy.$$.fragment),aAo=l(),Ne=a("div"),f(by.$$.fragment),nAo=l(),Xae=a("p"),sAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lAo=l(),Ja=a("p"),iAo=o("The model class to instantiate is selected based on the "),Vae=a("code"),dAo=o("model_type"),cAo=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),fAo=o("pretrained_model_name_or_path"),mAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(":"),pAo=l(),da=a("ul"),mb=a("li"),Qae=a("strong"),_Ao=o("bert"),uAo=o(" \u2014 "),Aj=a("a"),bAo=o("BertForNextSentencePrediction"),vAo=o(" (BERT model)"),TAo=l(),gb=a("li"),Hae=a("strong"),FAo=o("fnet"),CAo=o(" \u2014 "),Lj=a("a"),MAo=o("FNetForNextSentencePrediction"),EAo=o(" (FNet model)"),yAo=l(),hb=a("li"),Uae=a("strong"),wAo=o("megatron-bert"),AAo=o(" \u2014 "),Bj=a("a"),LAo=o("MegatronBertForNextSentencePrediction"),BAo=o(" (MegatronBert model)"),xAo=l(),pb=a("li"),Jae=a("strong"),kAo=o("mobilebert"),RAo=o(" \u2014 "),xj=a("a"),SAo=o("MobileBertForNextSentencePrediction"),PAo=o(" (MobileBERT model)"),$Ao=l(),_b=a("li"),Yae=a("strong"),IAo=o("qdqbert"),jAo=o(" \u2014 "),kj=a("a"),DAo=o("QDQBertForNextSentencePrediction"),NAo=o(" (QDQBert model)"),qAo=l(),ub=a("p"),OAo=o("The model is set in evaluation mode by default using "),Kae=a("code"),GAo=o("model.eval()"),XAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=a("code"),VAo=o("model.train()"),zAo=l(),ene=a("p"),WAo=o("Examples:"),QAo=l(),f(vy.$$.fragment),ZBe=l(),Td=a("h2"),bb=a("a"),one=a("span"),f(Ty.$$.fragment),HAo=l(),rne=a("span"),UAo=o("AutoModelForTokenClassification"),exe=l(),rr=a("div"),f(Fy.$$.fragment),JAo=l(),Fd=a("p"),YAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=a("code"),KAo=o("from_pretrained()"),ZAo=o("class method or the "),ane=a("code"),e0o=o("from_config()"),o0o=o(`class
method.`),r0o=l(),Cy=a("p"),t0o=o("This class cannot be instantiated directly using "),nne=a("code"),a0o=o("__init__()"),n0o=o(" (throws an error)."),s0o=l(),Jr=a("div"),f(My.$$.fragment),l0o=l(),sne=a("p"),i0o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),d0o=l(),Cd=a("p"),c0o=o(`Note:
Loading a model from its configuration file does `),lne=a("strong"),f0o=o("not"),m0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ine=a("code"),g0o=o("from_pretrained()"),h0o=o("to load the model weights."),p0o=l(),dne=a("p"),_0o=o("Examples:"),u0o=l(),f(Ey.$$.fragment),b0o=l(),qe=a("div"),f(yy.$$.fragment),v0o=l(),cne=a("p"),T0o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),F0o=l(),Ya=a("p"),C0o=o("The model class to instantiate is selected based on the "),fne=a("code"),M0o=o("model_type"),E0o=o(` property of the config object (either
passed as an argument or loaded from `),mne=a("code"),y0o=o("pretrained_model_name_or_path"),w0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=a("code"),A0o=o("pretrained_model_name_or_path"),L0o=o(":"),B0o=l(),N=a("ul"),vb=a("li"),hne=a("strong"),x0o=o("albert"),k0o=o(" \u2014 "),Rj=a("a"),R0o=o("AlbertForTokenClassification"),S0o=o(" (ALBERT model)"),P0o=l(),Tb=a("li"),pne=a("strong"),$0o=o("bert"),I0o=o(" \u2014 "),Sj=a("a"),j0o=o("BertForTokenClassification"),D0o=o(" (BERT model)"),N0o=l(),Fb=a("li"),_ne=a("strong"),q0o=o("big_bird"),O0o=o(" \u2014 "),Pj=a("a"),G0o=o("BigBirdForTokenClassification"),X0o=o(" (BigBird model)"),V0o=l(),Cb=a("li"),une=a("strong"),z0o=o("camembert"),W0o=o(" \u2014 "),$j=a("a"),Q0o=o("CamembertForTokenClassification"),H0o=o(" (CamemBERT model)"),U0o=l(),Mb=a("li"),bne=a("strong"),J0o=o("canine"),Y0o=o(" \u2014 "),Ij=a("a"),K0o=o("CanineForTokenClassification"),Z0o=o(" (Canine model)"),eLo=l(),Eb=a("li"),vne=a("strong"),oLo=o("convbert"),rLo=o(" \u2014 "),jj=a("a"),tLo=o("ConvBertForTokenClassification"),aLo=o(" (ConvBERT model)"),nLo=l(),yb=a("li"),Tne=a("strong"),sLo=o("data2vec-text"),lLo=o(" \u2014 "),Dj=a("a"),iLo=o("Data2VecTextForTokenClassification"),dLo=o(" (Data2VecText model)"),cLo=l(),wb=a("li"),Fne=a("strong"),fLo=o("deberta"),mLo=o(" \u2014 "),Nj=a("a"),gLo=o("DebertaForTokenClassification"),hLo=o(" (DeBERTa model)"),pLo=l(),Ab=a("li"),Cne=a("strong"),_Lo=o("deberta-v2"),uLo=o(" \u2014 "),qj=a("a"),bLo=o("DebertaV2ForTokenClassification"),vLo=o(" (DeBERTa-v2 model)"),TLo=l(),Lb=a("li"),Mne=a("strong"),FLo=o("distilbert"),CLo=o(" \u2014 "),Oj=a("a"),MLo=o("DistilBertForTokenClassification"),ELo=o(" (DistilBERT model)"),yLo=l(),Bb=a("li"),Ene=a("strong"),wLo=o("electra"),ALo=o(" \u2014 "),Gj=a("a"),LLo=o("ElectraForTokenClassification"),BLo=o(" (ELECTRA model)"),xLo=l(),xb=a("li"),yne=a("strong"),kLo=o("flaubert"),RLo=o(" \u2014 "),Xj=a("a"),SLo=o("FlaubertForTokenClassification"),PLo=o(" (FlauBERT model)"),$Lo=l(),kb=a("li"),wne=a("strong"),ILo=o("fnet"),jLo=o(" \u2014 "),Vj=a("a"),DLo=o("FNetForTokenClassification"),NLo=o(" (FNet model)"),qLo=l(),Rb=a("li"),Ane=a("strong"),OLo=o("funnel"),GLo=o(" \u2014 "),zj=a("a"),XLo=o("FunnelForTokenClassification"),VLo=o(" (Funnel Transformer model)"),zLo=l(),Sb=a("li"),Lne=a("strong"),WLo=o("gpt2"),QLo=o(" \u2014 "),Wj=a("a"),HLo=o("GPT2ForTokenClassification"),ULo=o(" (OpenAI GPT-2 model)"),JLo=l(),Pb=a("li"),Bne=a("strong"),YLo=o("ibert"),KLo=o(" \u2014 "),Qj=a("a"),ZLo=o("IBertForTokenClassification"),e8o=o(" (I-BERT model)"),o8o=l(),$b=a("li"),xne=a("strong"),r8o=o("layoutlm"),t8o=o(" \u2014 "),Hj=a("a"),a8o=o("LayoutLMForTokenClassification"),n8o=o(" (LayoutLM model)"),s8o=l(),Ib=a("li"),kne=a("strong"),l8o=o("layoutlmv2"),i8o=o(" \u2014 "),Uj=a("a"),d8o=o("LayoutLMv2ForTokenClassification"),c8o=o(" (LayoutLMv2 model)"),f8o=l(),jb=a("li"),Rne=a("strong"),m8o=o("longformer"),g8o=o(" \u2014 "),Jj=a("a"),h8o=o("LongformerForTokenClassification"),p8o=o(" (Longformer model)"),_8o=l(),Db=a("li"),Sne=a("strong"),u8o=o("megatron-bert"),b8o=o(" \u2014 "),Yj=a("a"),v8o=o("MegatronBertForTokenClassification"),T8o=o(" (MegatronBert model)"),F8o=l(),Nb=a("li"),Pne=a("strong"),C8o=o("mobilebert"),M8o=o(" \u2014 "),Kj=a("a"),E8o=o("MobileBertForTokenClassification"),y8o=o(" (MobileBERT model)"),w8o=l(),qb=a("li"),$ne=a("strong"),A8o=o("mpnet"),L8o=o(" \u2014 "),Zj=a("a"),B8o=o("MPNetForTokenClassification"),x8o=o(" (MPNet model)"),k8o=l(),Ob=a("li"),Ine=a("strong"),R8o=o("nystromformer"),S8o=o(" \u2014 "),eD=a("a"),P8o=o("NystromformerForTokenClassification"),$8o=o(" (Nystromformer model)"),I8o=l(),Gb=a("li"),jne=a("strong"),j8o=o("qdqbert"),D8o=o(" \u2014 "),oD=a("a"),N8o=o("QDQBertForTokenClassification"),q8o=o(" (QDQBert model)"),O8o=l(),Xb=a("li"),Dne=a("strong"),G8o=o("rembert"),X8o=o(" \u2014 "),rD=a("a"),V8o=o("RemBertForTokenClassification"),z8o=o(" (RemBERT model)"),W8o=l(),Vb=a("li"),Nne=a("strong"),Q8o=o("roberta"),H8o=o(" \u2014 "),tD=a("a"),U8o=o("RobertaForTokenClassification"),J8o=o(" (RoBERTa model)"),Y8o=l(),zb=a("li"),qne=a("strong"),K8o=o("roformer"),Z8o=o(" \u2014 "),aD=a("a"),e7o=o("RoFormerForTokenClassification"),o7o=o(" (RoFormer model)"),r7o=l(),Wb=a("li"),One=a("strong"),t7o=o("squeezebert"),a7o=o(" \u2014 "),nD=a("a"),n7o=o("SqueezeBertForTokenClassification"),s7o=o(" (SqueezeBERT model)"),l7o=l(),Qb=a("li"),Gne=a("strong"),i7o=o("xlm"),d7o=o(" \u2014 "),sD=a("a"),c7o=o("XLMForTokenClassification"),f7o=o(" (XLM model)"),m7o=l(),Hb=a("li"),Xne=a("strong"),g7o=o("xlm-roberta"),h7o=o(" \u2014 "),lD=a("a"),p7o=o("XLMRobertaForTokenClassification"),_7o=o(" (XLM-RoBERTa model)"),u7o=l(),Ub=a("li"),Vne=a("strong"),b7o=o("xlm-roberta-xl"),v7o=o(" \u2014 "),iD=a("a"),T7o=o("XLMRobertaXLForTokenClassification"),F7o=o(" (XLM-RoBERTa-XL model)"),C7o=l(),Jb=a("li"),zne=a("strong"),M7o=o("xlnet"),E7o=o(" \u2014 "),dD=a("a"),y7o=o("XLNetForTokenClassification"),w7o=o(" (XLNet model)"),A7o=l(),Yb=a("li"),Wne=a("strong"),L7o=o("yoso"),B7o=o(" \u2014 "),cD=a("a"),x7o=o("YosoForTokenClassification"),k7o=o(" (YOSO model)"),R7o=l(),Kb=a("p"),S7o=o("The model is set in evaluation mode by default using "),Qne=a("code"),P7o=o("model.eval()"),$7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=a("code"),I7o=o("model.train()"),j7o=l(),Une=a("p"),D7o=o("Examples:"),N7o=l(),f(wy.$$.fragment),oxe=l(),Md=a("h2"),Zb=a("a"),Jne=a("span"),f(Ay.$$.fragment),q7o=l(),Yne=a("span"),O7o=o("AutoModelForQuestionAnswering"),rxe=l(),tr=a("div"),f(Ly.$$.fragment),G7o=l(),Ed=a("p"),X7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Kne=a("code"),V7o=o("from_pretrained()"),z7o=o("class method or the "),Zne=a("code"),W7o=o("from_config()"),Q7o=o(`class
method.`),H7o=l(),By=a("p"),U7o=o("This class cannot be instantiated directly using "),ese=a("code"),J7o=o("__init__()"),Y7o=o(" (throws an error)."),K7o=l(),Yr=a("div"),f(xy.$$.fragment),Z7o=l(),ose=a("p"),eBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oBo=l(),yd=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),rse=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("code"),nBo=o("from_pretrained()"),sBo=o("to load the model weights."),lBo=l(),ase=a("p"),iBo=o("Examples:"),dBo=l(),f(ky.$$.fragment),cBo=l(),Oe=a("div"),f(Ry.$$.fragment),fBo=l(),nse=a("p"),mBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gBo=l(),Ka=a("p"),hBo=o("The model class to instantiate is selected based on the "),sse=a("code"),pBo=o("model_type"),_Bo=o(` property of the config object (either
passed as an argument or loaded from `),lse=a("code"),uBo=o("pretrained_model_name_or_path"),bBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=a("code"),vBo=o("pretrained_model_name_or_path"),TBo=o(":"),FBo=l(),R=a("ul"),e3=a("li"),dse=a("strong"),CBo=o("albert"),MBo=o(" \u2014 "),fD=a("a"),EBo=o("AlbertForQuestionAnswering"),yBo=o(" (ALBERT model)"),wBo=l(),o3=a("li"),cse=a("strong"),ABo=o("bart"),LBo=o(" \u2014 "),mD=a("a"),BBo=o("BartForQuestionAnswering"),xBo=o(" (BART model)"),kBo=l(),r3=a("li"),fse=a("strong"),RBo=o("bert"),SBo=o(" \u2014 "),gD=a("a"),PBo=o("BertForQuestionAnswering"),$Bo=o(" (BERT model)"),IBo=l(),t3=a("li"),mse=a("strong"),jBo=o("big_bird"),DBo=o(" \u2014 "),hD=a("a"),NBo=o("BigBirdForQuestionAnswering"),qBo=o(" (BigBird model)"),OBo=l(),a3=a("li"),gse=a("strong"),GBo=o("bigbird_pegasus"),XBo=o(" \u2014 "),pD=a("a"),VBo=o("BigBirdPegasusForQuestionAnswering"),zBo=o(" (BigBirdPegasus model)"),WBo=l(),n3=a("li"),hse=a("strong"),QBo=o("camembert"),HBo=o(" \u2014 "),_D=a("a"),UBo=o("CamembertForQuestionAnswering"),JBo=o(" (CamemBERT model)"),YBo=l(),s3=a("li"),pse=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),uD=a("a"),exo=o("CanineForQuestionAnswering"),oxo=o(" (Canine model)"),rxo=l(),l3=a("li"),_se=a("strong"),txo=o("convbert"),axo=o(" \u2014 "),bD=a("a"),nxo=o("ConvBertForQuestionAnswering"),sxo=o(" (ConvBERT model)"),lxo=l(),i3=a("li"),use=a("strong"),ixo=o("data2vec-text"),dxo=o(" \u2014 "),vD=a("a"),cxo=o("Data2VecTextForQuestionAnswering"),fxo=o(" (Data2VecText model)"),mxo=l(),d3=a("li"),bse=a("strong"),gxo=o("deberta"),hxo=o(" \u2014 "),TD=a("a"),pxo=o("DebertaForQuestionAnswering"),_xo=o(" (DeBERTa model)"),uxo=l(),c3=a("li"),vse=a("strong"),bxo=o("deberta-v2"),vxo=o(" \u2014 "),FD=a("a"),Txo=o("DebertaV2ForQuestionAnswering"),Fxo=o(" (DeBERTa-v2 model)"),Cxo=l(),f3=a("li"),Tse=a("strong"),Mxo=o("distilbert"),Exo=o(" \u2014 "),CD=a("a"),yxo=o("DistilBertForQuestionAnswering"),wxo=o(" (DistilBERT model)"),Axo=l(),m3=a("li"),Fse=a("strong"),Lxo=o("electra"),Bxo=o(" \u2014 "),MD=a("a"),xxo=o("ElectraForQuestionAnswering"),kxo=o(" (ELECTRA model)"),Rxo=l(),g3=a("li"),Cse=a("strong"),Sxo=o("flaubert"),Pxo=o(" \u2014 "),ED=a("a"),$xo=o("FlaubertForQuestionAnsweringSimple"),Ixo=o(" (FlauBERT model)"),jxo=l(),h3=a("li"),Mse=a("strong"),Dxo=o("fnet"),Nxo=o(" \u2014 "),yD=a("a"),qxo=o("FNetForQuestionAnswering"),Oxo=o(" (FNet model)"),Gxo=l(),p3=a("li"),Ese=a("strong"),Xxo=o("funnel"),Vxo=o(" \u2014 "),wD=a("a"),zxo=o("FunnelForQuestionAnswering"),Wxo=o(" (Funnel Transformer model)"),Qxo=l(),_3=a("li"),yse=a("strong"),Hxo=o("gptj"),Uxo=o(" \u2014 "),AD=a("a"),Jxo=o("GPTJForQuestionAnswering"),Yxo=o(" (GPT-J model)"),Kxo=l(),u3=a("li"),wse=a("strong"),Zxo=o("ibert"),eko=o(" \u2014 "),LD=a("a"),oko=o("IBertForQuestionAnswering"),rko=o(" (I-BERT model)"),tko=l(),b3=a("li"),Ase=a("strong"),ako=o("layoutlmv2"),nko=o(" \u2014 "),BD=a("a"),sko=o("LayoutLMv2ForQuestionAnswering"),lko=o(" (LayoutLMv2 model)"),iko=l(),v3=a("li"),Lse=a("strong"),dko=o("led"),cko=o(" \u2014 "),xD=a("a"),fko=o("LEDForQuestionAnswering"),mko=o(" (LED model)"),gko=l(),T3=a("li"),Bse=a("strong"),hko=o("longformer"),pko=o(" \u2014 "),kD=a("a"),_ko=o("LongformerForQuestionAnswering"),uko=o(" (Longformer model)"),bko=l(),F3=a("li"),xse=a("strong"),vko=o("lxmert"),Tko=o(" \u2014 "),RD=a("a"),Fko=o("LxmertForQuestionAnswering"),Cko=o(" (LXMERT model)"),Mko=l(),C3=a("li"),kse=a("strong"),Eko=o("mbart"),yko=o(" \u2014 "),SD=a("a"),wko=o("MBartForQuestionAnswering"),Ako=o(" (mBART model)"),Lko=l(),M3=a("li"),Rse=a("strong"),Bko=o("megatron-bert"),xko=o(" \u2014 "),PD=a("a"),kko=o("MegatronBertForQuestionAnswering"),Rko=o(" (MegatronBert model)"),Sko=l(),E3=a("li"),Sse=a("strong"),Pko=o("mobilebert"),$ko=o(" \u2014 "),$D=a("a"),Iko=o("MobileBertForQuestionAnswering"),jko=o(" (MobileBERT model)"),Dko=l(),y3=a("li"),Pse=a("strong"),Nko=o("mpnet"),qko=o(" \u2014 "),ID=a("a"),Oko=o("MPNetForQuestionAnswering"),Gko=o(" (MPNet model)"),Xko=l(),w3=a("li"),$se=a("strong"),Vko=o("nystromformer"),zko=o(" \u2014 "),jD=a("a"),Wko=o("NystromformerForQuestionAnswering"),Qko=o(" (Nystromformer model)"),Hko=l(),A3=a("li"),Ise=a("strong"),Uko=o("qdqbert"),Jko=o(" \u2014 "),DD=a("a"),Yko=o("QDQBertForQuestionAnswering"),Kko=o(" (QDQBert model)"),Zko=l(),L3=a("li"),jse=a("strong"),eRo=o("reformer"),oRo=o(" \u2014 "),ND=a("a"),rRo=o("ReformerForQuestionAnswering"),tRo=o(" (Reformer model)"),aRo=l(),B3=a("li"),Dse=a("strong"),nRo=o("rembert"),sRo=o(" \u2014 "),qD=a("a"),lRo=o("RemBertForQuestionAnswering"),iRo=o(" (RemBERT model)"),dRo=l(),x3=a("li"),Nse=a("strong"),cRo=o("roberta"),fRo=o(" \u2014 "),OD=a("a"),mRo=o("RobertaForQuestionAnswering"),gRo=o(" (RoBERTa model)"),hRo=l(),k3=a("li"),qse=a("strong"),pRo=o("roformer"),_Ro=o(" \u2014 "),GD=a("a"),uRo=o("RoFormerForQuestionAnswering"),bRo=o(" (RoFormer model)"),vRo=l(),R3=a("li"),Ose=a("strong"),TRo=o("splinter"),FRo=o(" \u2014 "),XD=a("a"),CRo=o("SplinterForQuestionAnswering"),MRo=o(" (Splinter model)"),ERo=l(),S3=a("li"),Gse=a("strong"),yRo=o("squeezebert"),wRo=o(" \u2014 "),VD=a("a"),ARo=o("SqueezeBertForQuestionAnswering"),LRo=o(" (SqueezeBERT model)"),BRo=l(),P3=a("li"),Xse=a("strong"),xRo=o("xlm"),kRo=o(" \u2014 "),zD=a("a"),RRo=o("XLMForQuestionAnsweringSimple"),SRo=o(" (XLM model)"),PRo=l(),$3=a("li"),Vse=a("strong"),$Ro=o("xlm-roberta"),IRo=o(" \u2014 "),WD=a("a"),jRo=o("XLMRobertaForQuestionAnswering"),DRo=o(" (XLM-RoBERTa model)"),NRo=l(),I3=a("li"),zse=a("strong"),qRo=o("xlm-roberta-xl"),ORo=o(" \u2014 "),QD=a("a"),GRo=o("XLMRobertaXLForQuestionAnswering"),XRo=o(" (XLM-RoBERTa-XL model)"),VRo=l(),j3=a("li"),Wse=a("strong"),zRo=o("xlnet"),WRo=o(" \u2014 "),HD=a("a"),QRo=o("XLNetForQuestionAnsweringSimple"),HRo=o(" (XLNet model)"),URo=l(),D3=a("li"),Qse=a("strong"),JRo=o("yoso"),YRo=o(" \u2014 "),UD=a("a"),KRo=o("YosoForQuestionAnswering"),ZRo=o(" (YOSO model)"),eSo=l(),N3=a("p"),oSo=o("The model is set in evaluation mode by default using "),Hse=a("code"),rSo=o("model.eval()"),tSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),aSo=o("model.train()"),nSo=l(),Jse=a("p"),sSo=o("Examples:"),lSo=l(),f(Sy.$$.fragment),txe=l(),wd=a("h2"),q3=a("a"),Yse=a("span"),f(Py.$$.fragment),iSo=l(),Kse=a("span"),dSo=o("AutoModelForTableQuestionAnswering"),axe=l(),ar=a("div"),f($y.$$.fragment),cSo=l(),Ad=a("p"),fSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zse=a("code"),mSo=o("from_pretrained()"),gSo=o("class method or the "),ele=a("code"),hSo=o("from_config()"),pSo=o(`class
method.`),_So=l(),Iy=a("p"),uSo=o("This class cannot be instantiated directly using "),ole=a("code"),bSo=o("__init__()"),vSo=o(" (throws an error)."),TSo=l(),Kr=a("div"),f(jy.$$.fragment),FSo=l(),rle=a("p"),CSo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MSo=l(),Ld=a("p"),ESo=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),ySo=o("not"),wSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("code"),ASo=o("from_pretrained()"),LSo=o("to load the model weights."),BSo=l(),nle=a("p"),xSo=o("Examples:"),kSo=l(),f(Dy.$$.fragment),RSo=l(),Ge=a("div"),f(Ny.$$.fragment),SSo=l(),sle=a("p"),PSo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$So=l(),Za=a("p"),ISo=o("The model class to instantiate is selected based on the "),lle=a("code"),jSo=o("model_type"),DSo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),NSo=o("pretrained_model_name_or_path"),qSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),OSo=o("pretrained_model_name_or_path"),GSo=o(":"),XSo=l(),cle=a("ul"),O3=a("li"),fle=a("strong"),VSo=o("tapas"),zSo=o(" \u2014 "),JD=a("a"),WSo=o("TapasForQuestionAnswering"),QSo=o(" (TAPAS model)"),HSo=l(),G3=a("p"),USo=o("The model is set in evaluation mode by default using "),mle=a("code"),JSo=o("model.eval()"),YSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=a("code"),KSo=o("model.train()"),ZSo=l(),hle=a("p"),ePo=o("Examples:"),oPo=l(),f(qy.$$.fragment),nxe=l(),Bd=a("h2"),X3=a("a"),ple=a("span"),f(Oy.$$.fragment),rPo=l(),_le=a("span"),tPo=o("AutoModelForImageClassification"),sxe=l(),nr=a("div"),f(Gy.$$.fragment),aPo=l(),xd=a("p"),nPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ule=a("code"),sPo=o("from_pretrained()"),lPo=o("class method or the "),ble=a("code"),iPo=o("from_config()"),dPo=o(`class
method.`),cPo=l(),Xy=a("p"),fPo=o("This class cannot be instantiated directly using "),vle=a("code"),mPo=o("__init__()"),gPo=o(" (throws an error)."),hPo=l(),Zr=a("div"),f(Vy.$$.fragment),pPo=l(),Tle=a("p"),_Po=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uPo=l(),kd=a("p"),bPo=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),vPo=o("not"),TPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=a("code"),FPo=o("from_pretrained()"),CPo=o("to load the model weights."),MPo=l(),Mle=a("p"),EPo=o("Examples:"),yPo=l(),f(zy.$$.fragment),wPo=l(),Xe=a("div"),f(Wy.$$.fragment),APo=l(),Ele=a("p"),LPo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BPo=l(),en=a("p"),xPo=o("The model class to instantiate is selected based on the "),yle=a("code"),kPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),SPo=o("pretrained_model_name_or_path"),PPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),$Po=o("pretrained_model_name_or_path"),IPo=o(":"),jPo=l(),be=a("ul"),V3=a("li"),Lle=a("strong"),DPo=o("beit"),NPo=o(" \u2014 "),YD=a("a"),qPo=o("BeitForImageClassification"),OPo=o(" (BEiT model)"),GPo=l(),z3=a("li"),Ble=a("strong"),XPo=o("convnext"),VPo=o(" \u2014 "),KD=a("a"),zPo=o("ConvNextForImageClassification"),WPo=o(" (ConvNext model)"),QPo=l(),qs=a("li"),xle=a("strong"),HPo=o("deit"),UPo=o(" \u2014 "),ZD=a("a"),JPo=o("DeiTForImageClassification"),YPo=o(" or "),eN=a("a"),KPo=o("DeiTForImageClassificationWithTeacher"),ZPo=o(" (DeiT model)"),e$o=l(),W3=a("li"),kle=a("strong"),o$o=o("imagegpt"),r$o=o(" \u2014 "),oN=a("a"),t$o=o("ImageGPTForImageClassification"),a$o=o(" (ImageGPT model)"),n$o=l(),fa=a("li"),Rle=a("strong"),s$o=o("perceiver"),l$o=o(" \u2014 "),rN=a("a"),i$o=o("PerceiverForImageClassificationLearned"),d$o=o(" or "),tN=a("a"),c$o=o("PerceiverForImageClassificationFourier"),f$o=o(" or "),aN=a("a"),m$o=o("PerceiverForImageClassificationConvProcessing"),g$o=o(" (Perceiver model)"),h$o=l(),Q3=a("li"),Sle=a("strong"),p$o=o("poolformer"),_$o=o(" \u2014 "),nN=a("a"),u$o=o("PoolFormerForImageClassification"),b$o=o(" (PoolFormer model)"),v$o=l(),H3=a("li"),Ple=a("strong"),T$o=o("segformer"),F$o=o(" \u2014 "),sN=a("a"),C$o=o("SegformerForImageClassification"),M$o=o(" (SegFormer model)"),E$o=l(),U3=a("li"),$le=a("strong"),y$o=o("swin"),w$o=o(" \u2014 "),lN=a("a"),A$o=o("SwinForImageClassification"),L$o=o(" (Swin model)"),B$o=l(),J3=a("li"),Ile=a("strong"),x$o=o("vit"),k$o=o(" \u2014 "),iN=a("a"),R$o=o("ViTForImageClassification"),S$o=o(" (ViT model)"),P$o=l(),Y3=a("p"),$$o=o("The model is set in evaluation mode by default using "),jle=a("code"),I$o=o("model.eval()"),j$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dle=a("code"),D$o=o("model.train()"),N$o=l(),Nle=a("p"),q$o=o("Examples:"),O$o=l(),f(Qy.$$.fragment),lxe=l(),Rd=a("h2"),K3=a("a"),qle=a("span"),f(Hy.$$.fragment),G$o=l(),Ole=a("span"),X$o=o("AutoModelForVision2Seq"),ixe=l(),sr=a("div"),f(Uy.$$.fragment),V$o=l(),Sd=a("p"),z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gle=a("code"),W$o=o("from_pretrained()"),Q$o=o("class method or the "),Xle=a("code"),H$o=o("from_config()"),U$o=o(`class
method.`),J$o=l(),Jy=a("p"),Y$o=o("This class cannot be instantiated directly using "),Vle=a("code"),K$o=o("__init__()"),Z$o=o(" (throws an error)."),eIo=l(),et=a("div"),f(Yy.$$.fragment),oIo=l(),zle=a("p"),rIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tIo=l(),Pd=a("p"),aIo=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),nIo=o("not"),sIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qle=a("code"),lIo=o("from_pretrained()"),iIo=o("to load the model weights."),dIo=l(),Hle=a("p"),cIo=o("Examples:"),fIo=l(),f(Ky.$$.fragment),mIo=l(),Ve=a("div"),f(Zy.$$.fragment),gIo=l(),Ule=a("p"),hIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pIo=l(),on=a("p"),_Io=o("The model class to instantiate is selected based on the "),Jle=a("code"),uIo=o("model_type"),bIo=o(` property of the config object (either
passed as an argument or loaded from `),Yle=a("code"),vIo=o("pretrained_model_name_or_path"),TIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=a("code"),FIo=o("pretrained_model_name_or_path"),CIo=o(":"),MIo=l(),Zle=a("ul"),Z3=a("li"),eie=a("strong"),EIo=o("vision-encoder-decoder"),yIo=o(" \u2014 "),dN=a("a"),wIo=o("VisionEncoderDecoderModel"),AIo=o(" (Vision Encoder decoder model)"),LIo=l(),e5=a("p"),BIo=o("The model is set in evaluation mode by default using "),oie=a("code"),xIo=o("model.eval()"),kIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),RIo=o("model.train()"),SIo=l(),tie=a("p"),PIo=o("Examples:"),$Io=l(),f(ew.$$.fragment),dxe=l(),$d=a("h2"),o5=a("a"),aie=a("span"),f(ow.$$.fragment),IIo=l(),nie=a("span"),jIo=o("AutoModelForAudioClassification"),cxe=l(),lr=a("div"),f(rw.$$.fragment),DIo=l(),Id=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sie=a("code"),qIo=o("from_pretrained()"),OIo=o("class method or the "),lie=a("code"),GIo=o("from_config()"),XIo=o(`class
method.`),VIo=l(),tw=a("p"),zIo=o("This class cannot be instantiated directly using "),iie=a("code"),WIo=o("__init__()"),QIo=o(" (throws an error)."),HIo=l(),ot=a("div"),f(aw.$$.fragment),UIo=l(),die=a("p"),JIo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YIo=l(),jd=a("p"),KIo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),ZIo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("code"),ojo=o("from_pretrained()"),rjo=o("to load the model weights."),tjo=l(),mie=a("p"),ajo=o("Examples:"),njo=l(),f(nw.$$.fragment),sjo=l(),ze=a("div"),f(sw.$$.fragment),ljo=l(),gie=a("p"),ijo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),djo=l(),rn=a("p"),cjo=o("The model class to instantiate is selected based on the "),hie=a("code"),fjo=o("model_type"),mjo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(":"),ujo=l(),Ae=a("ul"),r5=a("li"),uie=a("strong"),bjo=o("data2vec-audio"),vjo=o(" \u2014 "),cN=a("a"),Tjo=o("Data2VecAudioForSequenceClassification"),Fjo=o(" (Data2VecAudio model)"),Cjo=l(),t5=a("li"),bie=a("strong"),Mjo=o("hubert"),Ejo=o(" \u2014 "),fN=a("a"),yjo=o("HubertForSequenceClassification"),wjo=o(" (Hubert model)"),Ajo=l(),a5=a("li"),vie=a("strong"),Ljo=o("sew"),Bjo=o(" \u2014 "),mN=a("a"),xjo=o("SEWForSequenceClassification"),kjo=o(" (SEW model)"),Rjo=l(),n5=a("li"),Tie=a("strong"),Sjo=o("sew-d"),Pjo=o(" \u2014 "),gN=a("a"),$jo=o("SEWDForSequenceClassification"),Ijo=o(" (SEW-D model)"),jjo=l(),s5=a("li"),Fie=a("strong"),Djo=o("unispeech"),Njo=o(" \u2014 "),hN=a("a"),qjo=o("UniSpeechForSequenceClassification"),Ojo=o(" (UniSpeech model)"),Gjo=l(),l5=a("li"),Cie=a("strong"),Xjo=o("unispeech-sat"),Vjo=o(" \u2014 "),pN=a("a"),zjo=o("UniSpeechSatForSequenceClassification"),Wjo=o(" (UniSpeechSat model)"),Qjo=l(),i5=a("li"),Mie=a("strong"),Hjo=o("wav2vec2"),Ujo=o(" \u2014 "),_N=a("a"),Jjo=o("Wav2Vec2ForSequenceClassification"),Yjo=o(" (Wav2Vec2 model)"),Kjo=l(),d5=a("li"),Eie=a("strong"),Zjo=o("wavlm"),eDo=o(" \u2014 "),uN=a("a"),oDo=o("WavLMForSequenceClassification"),rDo=o(" (WavLM model)"),tDo=l(),c5=a("p"),aDo=o("The model is set in evaluation mode by default using "),yie=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),lDo=o("model.train()"),iDo=l(),Aie=a("p"),dDo=o("Examples:"),cDo=l(),f(lw.$$.fragment),fxe=l(),Dd=a("h2"),f5=a("a"),Lie=a("span"),f(iw.$$.fragment),fDo=l(),Bie=a("span"),mDo=o("AutoModelForAudioFrameClassification"),mxe=l(),ir=a("div"),f(dw.$$.fragment),gDo=l(),Nd=a("p"),hDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xie=a("code"),pDo=o("from_pretrained()"),_Do=o("class method or the "),kie=a("code"),uDo=o("from_config()"),bDo=o(`class
method.`),vDo=l(),cw=a("p"),TDo=o("This class cannot be instantiated directly using "),Rie=a("code"),FDo=o("__init__()"),CDo=o(" (throws an error)."),MDo=l(),rt=a("div"),f(fw.$$.fragment),EDo=l(),Sie=a("p"),yDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wDo=l(),qd=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),LDo=o("not"),BDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("code"),xDo=o("from_pretrained()"),kDo=o("to load the model weights."),RDo=l(),Iie=a("p"),SDo=o("Examples:"),PDo=l(),f(mw.$$.fragment),$Do=l(),We=a("div"),f(gw.$$.fragment),IDo=l(),jie=a("p"),jDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),DDo=l(),tn=a("p"),NDo=o("The model class to instantiate is selected based on the "),Die=a("code"),qDo=o("model_type"),ODo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),GDo=o("pretrained_model_name_or_path"),XDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),VDo=o("pretrained_model_name_or_path"),zDo=o(":"),WDo=l(),an=a("ul"),m5=a("li"),Oie=a("strong"),QDo=o("data2vec-audio"),HDo=o(" \u2014 "),bN=a("a"),UDo=o("Data2VecAudioForAudioFrameClassification"),JDo=o(" (Data2VecAudio model)"),YDo=l(),g5=a("li"),Gie=a("strong"),KDo=o("unispeech-sat"),ZDo=o(" \u2014 "),vN=a("a"),eNo=o("UniSpeechSatForAudioFrameClassification"),oNo=o(" (UniSpeechSat model)"),rNo=l(),h5=a("li"),Xie=a("strong"),tNo=o("wav2vec2"),aNo=o(" \u2014 "),TN=a("a"),nNo=o("Wav2Vec2ForAudioFrameClassification"),sNo=o(" (Wav2Vec2 model)"),lNo=l(),p5=a("li"),Vie=a("strong"),iNo=o("wavlm"),dNo=o(" \u2014 "),FN=a("a"),cNo=o("WavLMForAudioFrameClassification"),fNo=o(" (WavLM model)"),mNo=l(),_5=a("p"),gNo=o("The model is set in evaluation mode by default using "),zie=a("code"),hNo=o("model.eval()"),pNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),_No=o("model.train()"),uNo=l(),Qie=a("p"),bNo=o("Examples:"),vNo=l(),f(hw.$$.fragment),gxe=l(),Od=a("h2"),u5=a("a"),Hie=a("span"),f(pw.$$.fragment),TNo=l(),Uie=a("span"),FNo=o("AutoModelForCTC"),hxe=l(),dr=a("div"),f(_w.$$.fragment),CNo=l(),Gd=a("p"),MNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jie=a("code"),ENo=o("from_pretrained()"),yNo=o("class method or the "),Yie=a("code"),wNo=o("from_config()"),ANo=o(`class
method.`),LNo=l(),uw=a("p"),BNo=o("This class cannot be instantiated directly using "),Kie=a("code"),xNo=o("__init__()"),kNo=o(" (throws an error)."),RNo=l(),tt=a("div"),f(bw.$$.fragment),SNo=l(),Zie=a("p"),PNo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$No=l(),Xd=a("p"),INo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),jNo=o("not"),DNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("code"),NNo=o("from_pretrained()"),qNo=o("to load the model weights."),ONo=l(),rde=a("p"),GNo=o("Examples:"),XNo=l(),f(vw.$$.fragment),VNo=l(),Qe=a("div"),f(Tw.$$.fragment),zNo=l(),tde=a("p"),WNo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),QNo=l(),nn=a("p"),HNo=o("The model class to instantiate is selected based on the "),ade=a("code"),UNo=o("model_type"),JNo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),YNo=o("pretrained_model_name_or_path"),KNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),ZNo=o("pretrained_model_name_or_path"),eqo=o(":"),oqo=l(),Le=a("ul"),b5=a("li"),lde=a("strong"),rqo=o("data2vec-audio"),tqo=o(" \u2014 "),CN=a("a"),aqo=o("Data2VecAudioForCTC"),nqo=o(" (Data2VecAudio model)"),sqo=l(),v5=a("li"),ide=a("strong"),lqo=o("hubert"),iqo=o(" \u2014 "),MN=a("a"),dqo=o("HubertForCTC"),cqo=o(" (Hubert model)"),fqo=l(),T5=a("li"),dde=a("strong"),mqo=o("sew"),gqo=o(" \u2014 "),EN=a("a"),hqo=o("SEWForCTC"),pqo=o(" (SEW model)"),_qo=l(),F5=a("li"),cde=a("strong"),uqo=o("sew-d"),bqo=o(" \u2014 "),yN=a("a"),vqo=o("SEWDForCTC"),Tqo=o(" (SEW-D model)"),Fqo=l(),C5=a("li"),fde=a("strong"),Cqo=o("unispeech"),Mqo=o(" \u2014 "),wN=a("a"),Eqo=o("UniSpeechForCTC"),yqo=o(" (UniSpeech model)"),wqo=l(),M5=a("li"),mde=a("strong"),Aqo=o("unispeech-sat"),Lqo=o(" \u2014 "),AN=a("a"),Bqo=o("UniSpeechSatForCTC"),xqo=o(" (UniSpeechSat model)"),kqo=l(),E5=a("li"),gde=a("strong"),Rqo=o("wav2vec2"),Sqo=o(" \u2014 "),LN=a("a"),Pqo=o("Wav2Vec2ForCTC"),$qo=o(" (Wav2Vec2 model)"),Iqo=l(),y5=a("li"),hde=a("strong"),jqo=o("wavlm"),Dqo=o(" \u2014 "),BN=a("a"),Nqo=o("WavLMForCTC"),qqo=o(" (WavLM model)"),Oqo=l(),w5=a("p"),Gqo=o("The model is set in evaluation mode by default using "),pde=a("code"),Xqo=o("model.eval()"),Vqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),zqo=o("model.train()"),Wqo=l(),ude=a("p"),Qqo=o("Examples:"),Hqo=l(),f(Fw.$$.fragment),pxe=l(),Vd=a("h2"),A5=a("a"),bde=a("span"),f(Cw.$$.fragment),Uqo=l(),vde=a("span"),Jqo=o("AutoModelForSpeechSeq2Seq"),_xe=l(),cr=a("div"),f(Mw.$$.fragment),Yqo=l(),zd=a("p"),Kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tde=a("code"),Zqo=o("from_pretrained()"),eOo=o("class method or the "),Fde=a("code"),oOo=o("from_config()"),rOo=o(`class
method.`),tOo=l(),Ew=a("p"),aOo=o("This class cannot be instantiated directly using "),Cde=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),at=a("div"),f(yw.$$.fragment),iOo=l(),Mde=a("p"),dOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cOo=l(),Wd=a("p"),fOo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),mOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=a("code"),hOo=o("from_pretrained()"),pOo=o("to load the model weights."),_Oo=l(),wde=a("p"),uOo=o("Examples:"),bOo=l(),f(ww.$$.fragment),vOo=l(),He=a("div"),f(Aw.$$.fragment),TOo=l(),Ade=a("p"),FOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),COo=l(),sn=a("p"),MOo=o("The model class to instantiate is selected based on the "),Lde=a("code"),EOo=o("model_type"),yOo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),wOo=o("pretrained_model_name_or_path"),AOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),LOo=o("pretrained_model_name_or_path"),BOo=o(":"),xOo=l(),Lw=a("ul"),L5=a("li"),kde=a("strong"),kOo=o("speech-encoder-decoder"),ROo=o(" \u2014 "),xN=a("a"),SOo=o("SpeechEncoderDecoderModel"),POo=o(" (Speech Encoder decoder model)"),$Oo=l(),B5=a("li"),Rde=a("strong"),IOo=o("speech_to_text"),jOo=o(" \u2014 "),kN=a("a"),DOo=o("Speech2TextForConditionalGeneration"),NOo=o(" (Speech2Text model)"),qOo=l(),x5=a("p"),OOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),GOo=o("model.eval()"),XOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),VOo=o("model.train()"),zOo=l(),$de=a("p"),WOo=o("Examples:"),QOo=l(),f(Bw.$$.fragment),uxe=l(),Qd=a("h2"),k5=a("a"),Ide=a("span"),f(xw.$$.fragment),HOo=l(),jde=a("span"),UOo=o("AutoModelForAudioXVector"),bxe=l(),fr=a("div"),f(kw.$$.fragment),JOo=l(),Hd=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dde=a("code"),KOo=o("from_pretrained()"),ZOo=o("class method or the "),Nde=a("code"),eGo=o("from_config()"),oGo=o(`class
method.`),rGo=l(),Rw=a("p"),tGo=o("This class cannot be instantiated directly using "),qde=a("code"),aGo=o("__init__()"),nGo=o(" (throws an error)."),sGo=l(),nt=a("div"),f(Sw.$$.fragment),lGo=l(),Ode=a("p"),iGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dGo=l(),Ud=a("p"),cGo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),fGo=o("not"),mGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),gGo=o("from_pretrained()"),hGo=o("to load the model weights."),pGo=l(),Vde=a("p"),_Go=o("Examples:"),uGo=l(),f(Pw.$$.fragment),bGo=l(),Ue=a("div"),f($w.$$.fragment),vGo=l(),zde=a("p"),TGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),FGo=l(),ln=a("p"),CGo=o("The model class to instantiate is selected based on the "),Wde=a("code"),MGo=o("model_type"),EGo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),yGo=o("pretrained_model_name_or_path"),wGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),AGo=o("pretrained_model_name_or_path"),LGo=o(":"),BGo=l(),dn=a("ul"),R5=a("li"),Ude=a("strong"),xGo=o("data2vec-audio"),kGo=o(" \u2014 "),RN=a("a"),RGo=o("Data2VecAudioForXVector"),SGo=o(" (Data2VecAudio model)"),PGo=l(),S5=a("li"),Jde=a("strong"),$Go=o("unispeech-sat"),IGo=o(" \u2014 "),SN=a("a"),jGo=o("UniSpeechSatForXVector"),DGo=o(" (UniSpeechSat model)"),NGo=l(),P5=a("li"),Yde=a("strong"),qGo=o("wav2vec2"),OGo=o(" \u2014 "),PN=a("a"),GGo=o("Wav2Vec2ForXVector"),XGo=o(" (Wav2Vec2 model)"),VGo=l(),$5=a("li"),Kde=a("strong"),zGo=o("wavlm"),WGo=o(" \u2014 "),$N=a("a"),QGo=o("WavLMForXVector"),HGo=o(" (WavLM model)"),UGo=l(),I5=a("p"),JGo=o("The model is set in evaluation mode by default using "),Zde=a("code"),YGo=o("model.eval()"),KGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),ZGo=o("model.train()"),eXo=l(),oce=a("p"),oXo=o("Examples:"),rXo=l(),f(Iw.$$.fragment),vxe=l(),Jd=a("h2"),j5=a("a"),rce=a("span"),f(jw.$$.fragment),tXo=l(),tce=a("span"),aXo=o("AutoModelForMaskedImageModeling"),Txe=l(),mr=a("div"),f(Dw.$$.fragment),nXo=l(),Yd=a("p"),sXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ace=a("code"),lXo=o("from_pretrained()"),iXo=o("class method or the "),nce=a("code"),dXo=o("from_config()"),cXo=o(`class
method.`),fXo=l(),Nw=a("p"),mXo=o("This class cannot be instantiated directly using "),sce=a("code"),gXo=o("__init__()"),hXo=o(" (throws an error)."),pXo=l(),st=a("div"),f(qw.$$.fragment),_Xo=l(),lce=a("p"),uXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bXo=l(),Kd=a("p"),vXo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),TXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=a("code"),CXo=o("from_pretrained()"),MXo=o("to load the model weights."),EXo=l(),cce=a("p"),yXo=o("Examples:"),wXo=l(),f(Ow.$$.fragment),AXo=l(),Je=a("div"),f(Gw.$$.fragment),LXo=l(),fce=a("p"),BXo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xXo=l(),cn=a("p"),kXo=o("The model class to instantiate is selected based on the "),mce=a("code"),RXo=o("model_type"),SXo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),PXo=o("pretrained_model_name_or_path"),$Xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),IXo=o("pretrained_model_name_or_path"),jXo=o(":"),DXo=l(),Zd=a("ul"),D5=a("li"),pce=a("strong"),NXo=o("deit"),qXo=o(" \u2014 "),IN=a("a"),OXo=o("DeiTForMaskedImageModeling"),GXo=o(" (DeiT model)"),XXo=l(),N5=a("li"),_ce=a("strong"),VXo=o("swin"),zXo=o(" \u2014 "),jN=a("a"),WXo=o("SwinForMaskedImageModeling"),QXo=o(" (Swin model)"),HXo=l(),q5=a("li"),uce=a("strong"),UXo=o("vit"),JXo=o(" \u2014 "),DN=a("a"),YXo=o("ViTForMaskedImageModeling"),KXo=o(" (ViT model)"),ZXo=l(),O5=a("p"),eVo=o("The model is set in evaluation mode by default using "),bce=a("code"),oVo=o("model.eval()"),rVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),tVo=o("model.train()"),aVo=l(),Tce=a("p"),nVo=o("Examples:"),sVo=l(),f(Xw.$$.fragment),Fxe=l(),ec=a("h2"),G5=a("a"),Fce=a("span"),f(Vw.$$.fragment),lVo=l(),Cce=a("span"),iVo=o("AutoModelForObjectDetection"),Cxe=l(),gr=a("div"),f(zw.$$.fragment),dVo=l(),oc=a("p"),cVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mce=a("code"),fVo=o("from_pretrained()"),mVo=o("class method or the "),Ece=a("code"),gVo=o("from_config()"),hVo=o(`class
method.`),pVo=l(),Ww=a("p"),_Vo=o("This class cannot be instantiated directly using "),yce=a("code"),uVo=o("__init__()"),bVo=o(" (throws an error)."),vVo=l(),lt=a("div"),f(Qw.$$.fragment),TVo=l(),wce=a("p"),FVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),CVo=l(),rc=a("p"),MVo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),EVo=o("not"),yVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=a("code"),wVo=o("from_pretrained()"),AVo=o("to load the model weights."),LVo=l(),Bce=a("p"),BVo=o("Examples:"),xVo=l(),f(Hw.$$.fragment),kVo=l(),Ye=a("div"),f(Uw.$$.fragment),RVo=l(),xce=a("p"),SVo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PVo=l(),fn=a("p"),$Vo=o("The model class to instantiate is selected based on the "),kce=a("code"),IVo=o("model_type"),jVo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),DVo=o("pretrained_model_name_or_path"),NVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),qVo=o("pretrained_model_name_or_path"),OVo=o(":"),GVo=l(),Pce=a("ul"),X5=a("li"),$ce=a("strong"),XVo=o("detr"),VVo=o(" \u2014 "),NN=a("a"),zVo=o("DetrForObjectDetection"),WVo=o(" (DETR model)"),QVo=l(),V5=a("p"),HVo=o("The model is set in evaluation mode by default using "),Ice=a("code"),UVo=o("model.eval()"),JVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=a("code"),YVo=o("model.train()"),KVo=l(),Dce=a("p"),ZVo=o("Examples:"),ezo=l(),f(Jw.$$.fragment),Mxe=l(),tc=a("h2"),z5=a("a"),Nce=a("span"),f(Yw.$$.fragment),ozo=l(),qce=a("span"),rzo=o("AutoModelForImageSegmentation"),Exe=l(),hr=a("div"),f(Kw.$$.fragment),tzo=l(),ac=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Oce=a("code"),nzo=o("from_pretrained()"),szo=o("class method or the "),Gce=a("code"),lzo=o("from_config()"),izo=o(`class
method.`),dzo=l(),Zw=a("p"),czo=o("This class cannot be instantiated directly using "),Xce=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),it=a("div"),f(e6.$$.fragment),hzo=l(),Vce=a("p"),pzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_zo=l(),nc=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=a("code"),Tzo=o("from_pretrained()"),Fzo=o("to load the model weights."),Czo=l(),Qce=a("p"),Mzo=o("Examples:"),Ezo=l(),f(o6.$$.fragment),yzo=l(),Ke=a("div"),f(r6.$$.fragment),wzo=l(),Hce=a("p"),Azo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Lzo=l(),mn=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Uce=a("code"),xzo=o("model_type"),kzo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),Rzo=o("pretrained_model_name_or_path"),Szo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(":"),Izo=l(),Kce=a("ul"),W5=a("li"),Zce=a("strong"),jzo=o("detr"),Dzo=o(" \u2014 "),qN=a("a"),Nzo=o("DetrForSegmentation"),qzo=o(" (DETR model)"),Ozo=l(),Q5=a("p"),Gzo=o("The model is set in evaluation mode by default using "),efe=a("code"),Xzo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),zzo=o("model.train()"),Wzo=l(),rfe=a("p"),Qzo=o("Examples:"),Hzo=l(),f(t6.$$.fragment),yxe=l(),sc=a("h2"),H5=a("a"),tfe=a("span"),f(a6.$$.fragment),Uzo=l(),afe=a("span"),Jzo=o("AutoModelForSemanticSegmentation"),wxe=l(),pr=a("div"),f(n6.$$.fragment),Yzo=l(),lc=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nfe=a("code"),Zzo=o("from_pretrained()"),eWo=o("class method or the "),sfe=a("code"),oWo=o("from_config()"),rWo=o(`class
method.`),tWo=l(),s6=a("p"),aWo=o("This class cannot be instantiated directly using "),lfe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),dt=a("div"),f(l6.$$.fragment),iWo=l(),ife=a("p"),dWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cWo=l(),ic=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=a("code"),hWo=o("from_pretrained()"),pWo=o("to load the model weights."),_Wo=l(),ffe=a("p"),uWo=o("Examples:"),bWo=l(),f(i6.$$.fragment),vWo=l(),Ze=a("div"),f(d6.$$.fragment),TWo=l(),mfe=a("p"),FWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),CWo=l(),gn=a("p"),MWo=o("The model class to instantiate is selected based on the "),gfe=a("code"),EWo=o("model_type"),yWo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),LWo=o("pretrained_model_name_or_path"),BWo=o(":"),xWo=l(),c6=a("ul"),U5=a("li"),_fe=a("strong"),kWo=o("beit"),RWo=o(" \u2014 "),ON=a("a"),SWo=o("BeitForSemanticSegmentation"),PWo=o(" (BEiT model)"),$Wo=l(),J5=a("li"),ufe=a("strong"),IWo=o("segformer"),jWo=o(" \u2014 "),GN=a("a"),DWo=o("SegformerForSemanticSegmentation"),NWo=o(" (SegFormer model)"),qWo=l(),Y5=a("p"),OWo=o("The model is set in evaluation mode by default using "),bfe=a("code"),GWo=o("model.eval()"),XWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),VWo=o("model.train()"),zWo=l(),Tfe=a("p"),WWo=o("Examples:"),QWo=l(),f(f6.$$.fragment),Axe=l(),dc=a("h2"),K5=a("a"),Ffe=a("span"),f(m6.$$.fragment),HWo=l(),Cfe=a("span"),UWo=o("AutoModelForInstanceSegmentation"),Lxe=l(),_r=a("div"),f(g6.$$.fragment),JWo=l(),cc=a("p"),YWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mfe=a("code"),KWo=o("from_pretrained()"),ZWo=o("class method or the "),Efe=a("code"),eQo=o("from_config()"),oQo=o(`class
method.`),rQo=l(),h6=a("p"),tQo=o("This class cannot be instantiated directly using "),yfe=a("code"),aQo=o("__init__()"),nQo=o(" (throws an error)."),sQo=l(),ct=a("div"),f(p6.$$.fragment),lQo=l(),wfe=a("p"),iQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dQo=l(),fc=a("p"),cQo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),fQo=o("not"),mQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=a("code"),gQo=o("from_pretrained()"),hQo=o("to load the model weights."),pQo=l(),Bfe=a("p"),_Qo=o("Examples:"),uQo=l(),f(_6.$$.fragment),bQo=l(),eo=a("div"),f(u6.$$.fragment),vQo=l(),xfe=a("p"),TQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FQo=l(),hn=a("p"),CQo=o("The model class to instantiate is selected based on the "),kfe=a("code"),MQo=o("model_type"),EQo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),yQo=o("pretrained_model_name_or_path"),wQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),AQo=o("pretrained_model_name_or_path"),LQo=o(":"),BQo=l(),Pfe=a("ul"),Z5=a("li"),$fe=a("strong"),xQo=o("maskformer"),kQo=o(" \u2014 "),XN=a("a"),RQo=o("MaskFormerForInstanceSegmentation"),SQo=o(" (MaskFormer model)"),PQo=l(),ev=a("p"),$Qo=o("The model is set in evaluation mode by default using "),Ife=a("code"),IQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),DQo=o("model.train()"),NQo=l(),Dfe=a("p"),qQo=o("Examples:"),OQo=l(),f(b6.$$.fragment),Bxe=l(),mc=a("h2"),ov=a("a"),Nfe=a("span"),f(v6.$$.fragment),GQo=l(),qfe=a("span"),XQo=o("TFAutoModel"),xxe=l(),ur=a("div"),f(T6.$$.fragment),VQo=l(),gc=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ofe=a("code"),WQo=o("from_pretrained()"),QQo=o("class method or the "),Gfe=a("code"),HQo=o("from_config()"),UQo=o(`class
method.`),JQo=l(),F6=a("p"),YQo=o("This class cannot be instantiated directly using "),Xfe=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eHo=l(),ft=a("div"),f(C6.$$.fragment),oHo=l(),Vfe=a("p"),rHo=o("Instantiates one of the base model classes of the library from a configuration."),tHo=l(),hc=a("p"),aHo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),nHo=o("not"),sHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=a("code"),lHo=o("from_pretrained()"),iHo=o("to load the model weights."),dHo=l(),Qfe=a("p"),cHo=o("Examples:"),fHo=l(),f(M6.$$.fragment),mHo=l(),ho=a("div"),f(E6.$$.fragment),gHo=l(),Hfe=a("p"),hHo=o("Instantiate one of the base model classes of the library from a pretrained model."),pHo=l(),pn=a("p"),_Ho=o("The model class to instantiate is selected based on the "),Ufe=a("code"),uHo=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),vHo=o("pretrained_model_name_or_path"),THo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),FHo=o("pretrained_model_name_or_path"),CHo=o(":"),MHo=l(),B=a("ul"),rv=a("li"),Kfe=a("strong"),EHo=o("albert"),yHo=o(" \u2014 "),VN=a("a"),wHo=o("TFAlbertModel"),AHo=o(" (ALBERT model)"),LHo=l(),tv=a("li"),Zfe=a("strong"),BHo=o("bart"),xHo=o(" \u2014 "),zN=a("a"),kHo=o("TFBartModel"),RHo=o(" (BART model)"),SHo=l(),av=a("li"),eme=a("strong"),PHo=o("bert"),$Ho=o(" \u2014 "),WN=a("a"),IHo=o("TFBertModel"),jHo=o(" (BERT model)"),DHo=l(),nv=a("li"),ome=a("strong"),NHo=o("blenderbot"),qHo=o(" \u2014 "),QN=a("a"),OHo=o("TFBlenderbotModel"),GHo=o(" (Blenderbot model)"),XHo=l(),sv=a("li"),rme=a("strong"),VHo=o("blenderbot-small"),zHo=o(" \u2014 "),HN=a("a"),WHo=o("TFBlenderbotSmallModel"),QHo=o(" (BlenderbotSmall model)"),HHo=l(),lv=a("li"),tme=a("strong"),UHo=o("camembert"),JHo=o(" \u2014 "),UN=a("a"),YHo=o("TFCamembertModel"),KHo=o(" (CamemBERT model)"),ZHo=l(),iv=a("li"),ame=a("strong"),eUo=o("clip"),oUo=o(" \u2014 "),JN=a("a"),rUo=o("TFCLIPModel"),tUo=o(" (CLIP model)"),aUo=l(),dv=a("li"),nme=a("strong"),nUo=o("convbert"),sUo=o(" \u2014 "),YN=a("a"),lUo=o("TFConvBertModel"),iUo=o(" (ConvBERT model)"),dUo=l(),cv=a("li"),sme=a("strong"),cUo=o("convnext"),fUo=o(" \u2014 "),KN=a("a"),mUo=o("TFConvNextModel"),gUo=o(" (ConvNext model)"),hUo=l(),fv=a("li"),lme=a("strong"),pUo=o("ctrl"),_Uo=o(" \u2014 "),ZN=a("a"),uUo=o("TFCTRLModel"),bUo=o(" (CTRL model)"),vUo=l(),mv=a("li"),ime=a("strong"),TUo=o("deberta"),FUo=o(" \u2014 "),eq=a("a"),CUo=o("TFDebertaModel"),MUo=o(" (DeBERTa model)"),EUo=l(),gv=a("li"),dme=a("strong"),yUo=o("deberta-v2"),wUo=o(" \u2014 "),oq=a("a"),AUo=o("TFDebertaV2Model"),LUo=o(" (DeBERTa-v2 model)"),BUo=l(),hv=a("li"),cme=a("strong"),xUo=o("distilbert"),kUo=o(" \u2014 "),rq=a("a"),RUo=o("TFDistilBertModel"),SUo=o(" (DistilBERT model)"),PUo=l(),pv=a("li"),fme=a("strong"),$Uo=o("dpr"),IUo=o(" \u2014 "),tq=a("a"),jUo=o("TFDPRQuestionEncoder"),DUo=o(" (DPR model)"),NUo=l(),_v=a("li"),mme=a("strong"),qUo=o("electra"),OUo=o(" \u2014 "),aq=a("a"),GUo=o("TFElectraModel"),XUo=o(" (ELECTRA model)"),VUo=l(),uv=a("li"),gme=a("strong"),zUo=o("flaubert"),WUo=o(" \u2014 "),nq=a("a"),QUo=o("TFFlaubertModel"),HUo=o(" (FlauBERT model)"),UUo=l(),Os=a("li"),hme=a("strong"),JUo=o("funnel"),YUo=o(" \u2014 "),sq=a("a"),KUo=o("TFFunnelModel"),ZUo=o(" or "),lq=a("a"),eJo=o("TFFunnelBaseModel"),oJo=o(" (Funnel Transformer model)"),rJo=l(),bv=a("li"),pme=a("strong"),tJo=o("gpt2"),aJo=o(" \u2014 "),iq=a("a"),nJo=o("TFGPT2Model"),sJo=o(" (OpenAI GPT-2 model)"),lJo=l(),vv=a("li"),_me=a("strong"),iJo=o("hubert"),dJo=o(" \u2014 "),dq=a("a"),cJo=o("TFHubertModel"),fJo=o(" (Hubert model)"),mJo=l(),Tv=a("li"),ume=a("strong"),gJo=o("layoutlm"),hJo=o(" \u2014 "),cq=a("a"),pJo=o("TFLayoutLMModel"),_Jo=o(" (LayoutLM model)"),uJo=l(),Fv=a("li"),bme=a("strong"),bJo=o("led"),vJo=o(" \u2014 "),fq=a("a"),TJo=o("TFLEDModel"),FJo=o(" (LED model)"),CJo=l(),Cv=a("li"),vme=a("strong"),MJo=o("longformer"),EJo=o(" \u2014 "),mq=a("a"),yJo=o("TFLongformerModel"),wJo=o(" (Longformer model)"),AJo=l(),Mv=a("li"),Tme=a("strong"),LJo=o("lxmert"),BJo=o(" \u2014 "),gq=a("a"),xJo=o("TFLxmertModel"),kJo=o(" (LXMERT model)"),RJo=l(),Ev=a("li"),Fme=a("strong"),SJo=o("marian"),PJo=o(" \u2014 "),hq=a("a"),$Jo=o("TFMarianModel"),IJo=o(" (Marian model)"),jJo=l(),yv=a("li"),Cme=a("strong"),DJo=o("mbart"),NJo=o(" \u2014 "),pq=a("a"),qJo=o("TFMBartModel"),OJo=o(" (mBART model)"),GJo=l(),wv=a("li"),Mme=a("strong"),XJo=o("mobilebert"),VJo=o(" \u2014 "),_q=a("a"),zJo=o("TFMobileBertModel"),WJo=o(" (MobileBERT model)"),QJo=l(),Av=a("li"),Eme=a("strong"),HJo=o("mpnet"),UJo=o(" \u2014 "),uq=a("a"),JJo=o("TFMPNetModel"),YJo=o(" (MPNet model)"),KJo=l(),Lv=a("li"),yme=a("strong"),ZJo=o("mt5"),eYo=o(" \u2014 "),bq=a("a"),oYo=o("TFMT5Model"),rYo=o(" (mT5 model)"),tYo=l(),Bv=a("li"),wme=a("strong"),aYo=o("openai-gpt"),nYo=o(" \u2014 "),vq=a("a"),sYo=o("TFOpenAIGPTModel"),lYo=o(" (OpenAI GPT model)"),iYo=l(),xv=a("li"),Ame=a("strong"),dYo=o("pegasus"),cYo=o(" \u2014 "),Tq=a("a"),fYo=o("TFPegasusModel"),mYo=o(" (Pegasus model)"),gYo=l(),kv=a("li"),Lme=a("strong"),hYo=o("rembert"),pYo=o(" \u2014 "),Fq=a("a"),_Yo=o("TFRemBertModel"),uYo=o(" (RemBERT model)"),bYo=l(),Rv=a("li"),Bme=a("strong"),vYo=o("roberta"),TYo=o(" \u2014 "),Cq=a("a"),FYo=o("TFRobertaModel"),CYo=o(" (RoBERTa model)"),MYo=l(),Sv=a("li"),xme=a("strong"),EYo=o("roformer"),yYo=o(" \u2014 "),Mq=a("a"),wYo=o("TFRoFormerModel"),AYo=o(" (RoFormer model)"),LYo=l(),Pv=a("li"),kme=a("strong"),BYo=o("speech_to_text"),xYo=o(" \u2014 "),Eq=a("a"),kYo=o("TFSpeech2TextModel"),RYo=o(" (Speech2Text model)"),SYo=l(),$v=a("li"),Rme=a("strong"),PYo=o("t5"),$Yo=o(" \u2014 "),yq=a("a"),IYo=o("TFT5Model"),jYo=o(" (T5 model)"),DYo=l(),Iv=a("li"),Sme=a("strong"),NYo=o("tapas"),qYo=o(" \u2014 "),wq=a("a"),OYo=o("TFTapasModel"),GYo=o(" (TAPAS model)"),XYo=l(),jv=a("li"),Pme=a("strong"),VYo=o("transfo-xl"),zYo=o(" \u2014 "),Aq=a("a"),WYo=o("TFTransfoXLModel"),QYo=o(" (Transformer-XL model)"),HYo=l(),Dv=a("li"),$me=a("strong"),UYo=o("vit"),JYo=o(" \u2014 "),Lq=a("a"),YYo=o("TFViTModel"),KYo=o(" (ViT model)"),ZYo=l(),Nv=a("li"),Ime=a("strong"),eKo=o("wav2vec2"),oKo=o(" \u2014 "),Bq=a("a"),rKo=o("TFWav2Vec2Model"),tKo=o(" (Wav2Vec2 model)"),aKo=l(),qv=a("li"),jme=a("strong"),nKo=o("xlm"),sKo=o(" \u2014 "),xq=a("a"),lKo=o("TFXLMModel"),iKo=o(" (XLM model)"),dKo=l(),Ov=a("li"),Dme=a("strong"),cKo=o("xlm-roberta"),fKo=o(" \u2014 "),kq=a("a"),mKo=o("TFXLMRobertaModel"),gKo=o(" (XLM-RoBERTa model)"),hKo=l(),Gv=a("li"),Nme=a("strong"),pKo=o("xlnet"),_Ko=o(" \u2014 "),Rq=a("a"),uKo=o("TFXLNetModel"),bKo=o(" (XLNet model)"),vKo=l(),qme=a("p"),TKo=o("Examples:"),FKo=l(),f(y6.$$.fragment),kxe=l(),pc=a("h2"),Xv=a("a"),Ome=a("span"),f(w6.$$.fragment),CKo=l(),Gme=a("span"),MKo=o("TFAutoModelForPreTraining"),Rxe=l(),br=a("div"),f(A6.$$.fragment),EKo=l(),_c=a("p"),yKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xme=a("code"),wKo=o("from_pretrained()"),AKo=o("class method or the "),Vme=a("code"),LKo=o("from_config()"),BKo=o(`class
method.`),xKo=l(),L6=a("p"),kKo=o("This class cannot be instantiated directly using "),zme=a("code"),RKo=o("__init__()"),SKo=o(" (throws an error)."),PKo=l(),mt=a("div"),f(B6.$$.fragment),$Ko=l(),Wme=a("p"),IKo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jKo=l(),uc=a("p"),DKo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),NKo=o("not"),qKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hme=a("code"),OKo=o("from_pretrained()"),GKo=o("to load the model weights."),XKo=l(),Ume=a("p"),VKo=o("Examples:"),zKo=l(),f(x6.$$.fragment),WKo=l(),po=a("div"),f(k6.$$.fragment),QKo=l(),Jme=a("p"),HKo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UKo=l(),_n=a("p"),JKo=o("The model class to instantiate is selected based on the "),Yme=a("code"),YKo=o("model_type"),KKo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(":"),tZo=l(),H=a("ul"),Vv=a("li"),ege=a("strong"),aZo=o("albert"),nZo=o(" \u2014 "),Sq=a("a"),sZo=o("TFAlbertForPreTraining"),lZo=o(" (ALBERT model)"),iZo=l(),zv=a("li"),oge=a("strong"),dZo=o("bart"),cZo=o(" \u2014 "),Pq=a("a"),fZo=o("TFBartForConditionalGeneration"),mZo=o(" (BART model)"),gZo=l(),Wv=a("li"),rge=a("strong"),hZo=o("bert"),pZo=o(" \u2014 "),$q=a("a"),_Zo=o("TFBertForPreTraining"),uZo=o(" (BERT model)"),bZo=l(),Qv=a("li"),tge=a("strong"),vZo=o("camembert"),TZo=o(" \u2014 "),Iq=a("a"),FZo=o("TFCamembertForMaskedLM"),CZo=o(" (CamemBERT model)"),MZo=l(),Hv=a("li"),age=a("strong"),EZo=o("ctrl"),yZo=o(" \u2014 "),jq=a("a"),wZo=o("TFCTRLLMHeadModel"),AZo=o(" (CTRL model)"),LZo=l(),Uv=a("li"),nge=a("strong"),BZo=o("distilbert"),xZo=o(" \u2014 "),Dq=a("a"),kZo=o("TFDistilBertForMaskedLM"),RZo=o(" (DistilBERT model)"),SZo=l(),Jv=a("li"),sge=a("strong"),PZo=o("electra"),$Zo=o(" \u2014 "),Nq=a("a"),IZo=o("TFElectraForPreTraining"),jZo=o(" (ELECTRA model)"),DZo=l(),Yv=a("li"),lge=a("strong"),NZo=o("flaubert"),qZo=o(" \u2014 "),qq=a("a"),OZo=o("TFFlaubertWithLMHeadModel"),GZo=o(" (FlauBERT model)"),XZo=l(),Kv=a("li"),ige=a("strong"),VZo=o("funnel"),zZo=o(" \u2014 "),Oq=a("a"),WZo=o("TFFunnelForPreTraining"),QZo=o(" (Funnel Transformer model)"),HZo=l(),Zv=a("li"),dge=a("strong"),UZo=o("gpt2"),JZo=o(" \u2014 "),Gq=a("a"),YZo=o("TFGPT2LMHeadModel"),KZo=o(" (OpenAI GPT-2 model)"),ZZo=l(),eT=a("li"),cge=a("strong"),eer=o("layoutlm"),oer=o(" \u2014 "),Xq=a("a"),rer=o("TFLayoutLMForMaskedLM"),ter=o(" (LayoutLM model)"),aer=l(),oT=a("li"),fge=a("strong"),ner=o("lxmert"),ser=o(" \u2014 "),Vq=a("a"),ler=o("TFLxmertForPreTraining"),ier=o(" (LXMERT model)"),der=l(),rT=a("li"),mge=a("strong"),cer=o("mobilebert"),fer=o(" \u2014 "),zq=a("a"),mer=o("TFMobileBertForPreTraining"),ger=o(" (MobileBERT model)"),her=l(),tT=a("li"),gge=a("strong"),per=o("mpnet"),_er=o(" \u2014 "),Wq=a("a"),uer=o("TFMPNetForMaskedLM"),ber=o(" (MPNet model)"),ver=l(),aT=a("li"),hge=a("strong"),Ter=o("openai-gpt"),Fer=o(" \u2014 "),Qq=a("a"),Cer=o("TFOpenAIGPTLMHeadModel"),Mer=o(" (OpenAI GPT model)"),Eer=l(),nT=a("li"),pge=a("strong"),yer=o("roberta"),wer=o(" \u2014 "),Hq=a("a"),Aer=o("TFRobertaForMaskedLM"),Ler=o(" (RoBERTa model)"),Ber=l(),sT=a("li"),_ge=a("strong"),xer=o("t5"),ker=o(" \u2014 "),Uq=a("a"),Rer=o("TFT5ForConditionalGeneration"),Ser=o(" (T5 model)"),Per=l(),lT=a("li"),uge=a("strong"),$er=o("tapas"),Ier=o(" \u2014 "),Jq=a("a"),jer=o("TFTapasForMaskedLM"),Der=o(" (TAPAS model)"),Ner=l(),iT=a("li"),bge=a("strong"),qer=o("transfo-xl"),Oer=o(" \u2014 "),Yq=a("a"),Ger=o("TFTransfoXLLMHeadModel"),Xer=o(" (Transformer-XL model)"),Ver=l(),dT=a("li"),vge=a("strong"),zer=o("xlm"),Wer=o(" \u2014 "),Kq=a("a"),Qer=o("TFXLMWithLMHeadModel"),Her=o(" (XLM model)"),Uer=l(),cT=a("li"),Tge=a("strong"),Jer=o("xlm-roberta"),Yer=o(" \u2014 "),Zq=a("a"),Ker=o("TFXLMRobertaForMaskedLM"),Zer=o(" (XLM-RoBERTa model)"),eor=l(),fT=a("li"),Fge=a("strong"),oor=o("xlnet"),ror=o(" \u2014 "),eO=a("a"),tor=o("TFXLNetLMHeadModel"),aor=o(" (XLNet model)"),nor=l(),Cge=a("p"),sor=o("Examples:"),lor=l(),f(R6.$$.fragment),Sxe=l(),bc=a("h2"),mT=a("a"),Mge=a("span"),f(S6.$$.fragment),ior=l(),Ege=a("span"),dor=o("TFAutoModelForCausalLM"),Pxe=l(),vr=a("div"),f(P6.$$.fragment),cor=l(),vc=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yge=a("code"),gor=o("from_pretrained()"),hor=o("class method or the "),wge=a("code"),por=o("from_config()"),_or=o(`class
method.`),uor=l(),$6=a("p"),bor=o("This class cannot be instantiated directly using "),Age=a("code"),vor=o("__init__()"),Tor=o(" (throws an error)."),For=l(),gt=a("div"),f(I6.$$.fragment),Cor=l(),Lge=a("p"),Mor=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eor=l(),Tc=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),wor=o("not"),Aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xge=a("code"),Lor=o("from_pretrained()"),Bor=o("to load the model weights."),xor=l(),kge=a("p"),kor=o("Examples:"),Ror=l(),f(j6.$$.fragment),Sor=l(),_o=a("div"),f(D6.$$.fragment),Por=l(),Rge=a("p"),$or=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ior=l(),un=a("p"),jor=o("The model class to instantiate is selected based on the "),Sge=a("code"),Dor=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),qor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),Gor=o("pretrained_model_name_or_path"),Xor=o(":"),Vor=l(),he=a("ul"),gT=a("li"),Ige=a("strong"),zor=o("bert"),Wor=o(" \u2014 "),oO=a("a"),Qor=o("TFBertLMHeadModel"),Hor=o(" (BERT model)"),Uor=l(),hT=a("li"),jge=a("strong"),Jor=o("ctrl"),Yor=o(" \u2014 "),rO=a("a"),Kor=o("TFCTRLLMHeadModel"),Zor=o(" (CTRL model)"),err=l(),pT=a("li"),Dge=a("strong"),orr=o("gpt2"),rrr=o(" \u2014 "),tO=a("a"),trr=o("TFGPT2LMHeadModel"),arr=o(" (OpenAI GPT-2 model)"),nrr=l(),_T=a("li"),Nge=a("strong"),srr=o("openai-gpt"),lrr=o(" \u2014 "),aO=a("a"),irr=o("TFOpenAIGPTLMHeadModel"),drr=o(" (OpenAI GPT model)"),crr=l(),uT=a("li"),qge=a("strong"),frr=o("rembert"),mrr=o(" \u2014 "),nO=a("a"),grr=o("TFRemBertForCausalLM"),hrr=o(" (RemBERT model)"),prr=l(),bT=a("li"),Oge=a("strong"),_rr=o("roberta"),urr=o(" \u2014 "),sO=a("a"),brr=o("TFRobertaForCausalLM"),vrr=o(" (RoBERTa model)"),Trr=l(),vT=a("li"),Gge=a("strong"),Frr=o("roformer"),Crr=o(" \u2014 "),lO=a("a"),Mrr=o("TFRoFormerForCausalLM"),Err=o(" (RoFormer model)"),yrr=l(),TT=a("li"),Xge=a("strong"),wrr=o("transfo-xl"),Arr=o(" \u2014 "),iO=a("a"),Lrr=o("TFTransfoXLLMHeadModel"),Brr=o(" (Transformer-XL model)"),xrr=l(),FT=a("li"),Vge=a("strong"),krr=o("xlm"),Rrr=o(" \u2014 "),dO=a("a"),Srr=o("TFXLMWithLMHeadModel"),Prr=o(" (XLM model)"),$rr=l(),CT=a("li"),zge=a("strong"),Irr=o("xlnet"),jrr=o(" \u2014 "),cO=a("a"),Drr=o("TFXLNetLMHeadModel"),Nrr=o(" (XLNet model)"),qrr=l(),Wge=a("p"),Orr=o("Examples:"),Grr=l(),f(N6.$$.fragment),$xe=l(),Fc=a("h2"),MT=a("a"),Qge=a("span"),f(q6.$$.fragment),Xrr=l(),Hge=a("span"),Vrr=o("TFAutoModelForImageClassification"),Ixe=l(),Tr=a("div"),f(O6.$$.fragment),zrr=l(),Cc=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uge=a("code"),Qrr=o("from_pretrained()"),Hrr=o("class method or the "),Jge=a("code"),Urr=o("from_config()"),Jrr=o(`class
method.`),Yrr=l(),G6=a("p"),Krr=o("This class cannot be instantiated directly using "),Yge=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),ht=a("div"),f(X6.$$.fragment),rtr=l(),Kge=a("p"),ttr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),atr=l(),Mc=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=a("code"),itr=o("from_pretrained()"),dtr=o("to load the model weights."),ctr=l(),ohe=a("p"),ftr=o("Examples:"),mtr=l(),f(V6.$$.fragment),gtr=l(),uo=a("div"),f(z6.$$.fragment),htr=l(),rhe=a("p"),ptr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_tr=l(),bn=a("p"),utr=o("The model class to instantiate is selected based on the "),the=a("code"),btr=o("model_type"),vtr=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),Ttr=o("pretrained_model_name_or_path"),Ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),Ctr=o("pretrained_model_name_or_path"),Mtr=o(":"),Etr=l(),W6=a("ul"),ET=a("li"),she=a("strong"),ytr=o("convnext"),wtr=o(" \u2014 "),fO=a("a"),Atr=o("TFConvNextForImageClassification"),Ltr=o(" (ConvNext model)"),Btr=l(),yT=a("li"),lhe=a("strong"),xtr=o("vit"),ktr=o(" \u2014 "),mO=a("a"),Rtr=o("TFViTForImageClassification"),Str=o(" (ViT model)"),Ptr=l(),ihe=a("p"),$tr=o("Examples:"),Itr=l(),f(Q6.$$.fragment),jxe=l(),Ec=a("h2"),wT=a("a"),dhe=a("span"),f(H6.$$.fragment),jtr=l(),che=a("span"),Dtr=o("TFAutoModelForMaskedLM"),Dxe=l(),Fr=a("div"),f(U6.$$.fragment),Ntr=l(),yc=a("p"),qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fhe=a("code"),Otr=o("from_pretrained()"),Gtr=o("class method or the "),mhe=a("code"),Xtr=o("from_config()"),Vtr=o(`class
method.`),ztr=l(),J6=a("p"),Wtr=o("This class cannot be instantiated directly using "),ghe=a("code"),Qtr=o("__init__()"),Htr=o(" (throws an error)."),Utr=l(),pt=a("div"),f(Y6.$$.fragment),Jtr=l(),hhe=a("p"),Ytr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ktr=l(),wc=a("p"),Ztr=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),ear=o("not"),oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=a("code"),rar=o("from_pretrained()"),tar=o("to load the model weights."),aar=l(),uhe=a("p"),nar=o("Examples:"),sar=l(),f(K6.$$.fragment),lar=l(),bo=a("div"),f(Z6.$$.fragment),iar=l(),bhe=a("p"),dar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),car=l(),vn=a("p"),far=o("The model class to instantiate is selected based on the "),vhe=a("code"),mar=o("model_type"),gar=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),har=o("pretrained_model_name_or_path"),par=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),_ar=o("pretrained_model_name_or_path"),uar=o(":"),bar=l(),Y=a("ul"),AT=a("li"),Che=a("strong"),Tar=o("albert"),Far=o(" \u2014 "),gO=a("a"),Car=o("TFAlbertForMaskedLM"),Mar=o(" (ALBERT model)"),Ear=l(),LT=a("li"),Mhe=a("strong"),yar=o("bert"),war=o(" \u2014 "),hO=a("a"),Aar=o("TFBertForMaskedLM"),Lar=o(" (BERT model)"),Bar=l(),BT=a("li"),Ehe=a("strong"),xar=o("camembert"),kar=o(" \u2014 "),pO=a("a"),Rar=o("TFCamembertForMaskedLM"),Sar=o(" (CamemBERT model)"),Par=l(),xT=a("li"),yhe=a("strong"),$ar=o("convbert"),Iar=o(" \u2014 "),_O=a("a"),jar=o("TFConvBertForMaskedLM"),Dar=o(" (ConvBERT model)"),Nar=l(),kT=a("li"),whe=a("strong"),qar=o("deberta"),Oar=o(" \u2014 "),uO=a("a"),Gar=o("TFDebertaForMaskedLM"),Xar=o(" (DeBERTa model)"),Var=l(),RT=a("li"),Ahe=a("strong"),zar=o("deberta-v2"),War=o(" \u2014 "),bO=a("a"),Qar=o("TFDebertaV2ForMaskedLM"),Har=o(" (DeBERTa-v2 model)"),Uar=l(),ST=a("li"),Lhe=a("strong"),Jar=o("distilbert"),Yar=o(" \u2014 "),vO=a("a"),Kar=o("TFDistilBertForMaskedLM"),Zar=o(" (DistilBERT model)"),enr=l(),PT=a("li"),Bhe=a("strong"),onr=o("electra"),rnr=o(" \u2014 "),TO=a("a"),tnr=o("TFElectraForMaskedLM"),anr=o(" (ELECTRA model)"),nnr=l(),$T=a("li"),xhe=a("strong"),snr=o("flaubert"),lnr=o(" \u2014 "),FO=a("a"),inr=o("TFFlaubertWithLMHeadModel"),dnr=o(" (FlauBERT model)"),cnr=l(),IT=a("li"),khe=a("strong"),fnr=o("funnel"),mnr=o(" \u2014 "),CO=a("a"),gnr=o("TFFunnelForMaskedLM"),hnr=o(" (Funnel Transformer model)"),pnr=l(),jT=a("li"),Rhe=a("strong"),_nr=o("layoutlm"),unr=o(" \u2014 "),MO=a("a"),bnr=o("TFLayoutLMForMaskedLM"),vnr=o(" (LayoutLM model)"),Tnr=l(),DT=a("li"),She=a("strong"),Fnr=o("longformer"),Cnr=o(" \u2014 "),EO=a("a"),Mnr=o("TFLongformerForMaskedLM"),Enr=o(" (Longformer model)"),ynr=l(),NT=a("li"),Phe=a("strong"),wnr=o("mobilebert"),Anr=o(" \u2014 "),yO=a("a"),Lnr=o("TFMobileBertForMaskedLM"),Bnr=o(" (MobileBERT model)"),xnr=l(),qT=a("li"),$he=a("strong"),knr=o("mpnet"),Rnr=o(" \u2014 "),wO=a("a"),Snr=o("TFMPNetForMaskedLM"),Pnr=o(" (MPNet model)"),$nr=l(),OT=a("li"),Ihe=a("strong"),Inr=o("rembert"),jnr=o(" \u2014 "),AO=a("a"),Dnr=o("TFRemBertForMaskedLM"),Nnr=o(" (RemBERT model)"),qnr=l(),GT=a("li"),jhe=a("strong"),Onr=o("roberta"),Gnr=o(" \u2014 "),LO=a("a"),Xnr=o("TFRobertaForMaskedLM"),Vnr=o(" (RoBERTa model)"),znr=l(),XT=a("li"),Dhe=a("strong"),Wnr=o("roformer"),Qnr=o(" \u2014 "),BO=a("a"),Hnr=o("TFRoFormerForMaskedLM"),Unr=o(" (RoFormer model)"),Jnr=l(),VT=a("li"),Nhe=a("strong"),Ynr=o("tapas"),Knr=o(" \u2014 "),xO=a("a"),Znr=o("TFTapasForMaskedLM"),esr=o(" (TAPAS model)"),osr=l(),zT=a("li"),qhe=a("strong"),rsr=o("xlm"),tsr=o(" \u2014 "),kO=a("a"),asr=o("TFXLMWithLMHeadModel"),nsr=o(" (XLM model)"),ssr=l(),WT=a("li"),Ohe=a("strong"),lsr=o("xlm-roberta"),isr=o(" \u2014 "),RO=a("a"),dsr=o("TFXLMRobertaForMaskedLM"),csr=o(" (XLM-RoBERTa model)"),fsr=l(),Ghe=a("p"),msr=o("Examples:"),gsr=l(),f(eA.$$.fragment),Nxe=l(),Ac=a("h2"),QT=a("a"),Xhe=a("span"),f(oA.$$.fragment),hsr=l(),Vhe=a("span"),psr=o("TFAutoModelForSeq2SeqLM"),qxe=l(),Cr=a("div"),f(rA.$$.fragment),_sr=l(),Lc=a("p"),usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zhe=a("code"),bsr=o("from_pretrained()"),vsr=o("class method or the "),Whe=a("code"),Tsr=o("from_config()"),Fsr=o(`class
method.`),Csr=l(),tA=a("p"),Msr=o("This class cannot be instantiated directly using "),Qhe=a("code"),Esr=o("__init__()"),ysr=o(" (throws an error)."),wsr=l(),_t=a("div"),f(aA.$$.fragment),Asr=l(),Hhe=a("p"),Lsr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bsr=l(),Bc=a("p"),xsr=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),ksr=o("not"),Rsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jhe=a("code"),Ssr=o("from_pretrained()"),Psr=o("to load the model weights."),$sr=l(),Yhe=a("p"),Isr=o("Examples:"),jsr=l(),f(nA.$$.fragment),Dsr=l(),vo=a("div"),f(sA.$$.fragment),Nsr=l(),Khe=a("p"),qsr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Osr=l(),Tn=a("p"),Gsr=o("The model class to instantiate is selected based on the "),Zhe=a("code"),Xsr=o("model_type"),Vsr=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),zsr=o("pretrained_model_name_or_path"),Wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),Qsr=o("pretrained_model_name_or_path"),Hsr=o(":"),Usr=l(),pe=a("ul"),HT=a("li"),rpe=a("strong"),Jsr=o("bart"),Ysr=o(" \u2014 "),SO=a("a"),Ksr=o("TFBartForConditionalGeneration"),Zsr=o(" (BART model)"),elr=l(),UT=a("li"),tpe=a("strong"),olr=o("blenderbot"),rlr=o(" \u2014 "),PO=a("a"),tlr=o("TFBlenderbotForConditionalGeneration"),alr=o(" (Blenderbot model)"),nlr=l(),JT=a("li"),ape=a("strong"),slr=o("blenderbot-small"),llr=o(" \u2014 "),$O=a("a"),ilr=o("TFBlenderbotSmallForConditionalGeneration"),dlr=o(" (BlenderbotSmall model)"),clr=l(),YT=a("li"),npe=a("strong"),flr=o("encoder-decoder"),mlr=o(" \u2014 "),IO=a("a"),glr=o("TFEncoderDecoderModel"),hlr=o(" (Encoder decoder model)"),plr=l(),KT=a("li"),spe=a("strong"),_lr=o("led"),ulr=o(" \u2014 "),jO=a("a"),blr=o("TFLEDForConditionalGeneration"),vlr=o(" (LED model)"),Tlr=l(),ZT=a("li"),lpe=a("strong"),Flr=o("marian"),Clr=o(" \u2014 "),DO=a("a"),Mlr=o("TFMarianMTModel"),Elr=o(" (Marian model)"),ylr=l(),eF=a("li"),ipe=a("strong"),wlr=o("mbart"),Alr=o(" \u2014 "),NO=a("a"),Llr=o("TFMBartForConditionalGeneration"),Blr=o(" (mBART model)"),xlr=l(),oF=a("li"),dpe=a("strong"),klr=o("mt5"),Rlr=o(" \u2014 "),qO=a("a"),Slr=o("TFMT5ForConditionalGeneration"),Plr=o(" (mT5 model)"),$lr=l(),rF=a("li"),cpe=a("strong"),Ilr=o("pegasus"),jlr=o(" \u2014 "),OO=a("a"),Dlr=o("TFPegasusForConditionalGeneration"),Nlr=o(" (Pegasus model)"),qlr=l(),tF=a("li"),fpe=a("strong"),Olr=o("t5"),Glr=o(" \u2014 "),GO=a("a"),Xlr=o("TFT5ForConditionalGeneration"),Vlr=o(" (T5 model)"),zlr=l(),mpe=a("p"),Wlr=o("Examples:"),Qlr=l(),f(lA.$$.fragment),Oxe=l(),xc=a("h2"),aF=a("a"),gpe=a("span"),f(iA.$$.fragment),Hlr=l(),hpe=a("span"),Ulr=o("TFAutoModelForSequenceClassification"),Gxe=l(),Mr=a("div"),f(dA.$$.fragment),Jlr=l(),kc=a("p"),Ylr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ppe=a("code"),Klr=o("from_pretrained()"),Zlr=o("class method or the "),_pe=a("code"),eir=o("from_config()"),oir=o(`class
method.`),rir=l(),cA=a("p"),tir=o("This class cannot be instantiated directly using "),upe=a("code"),air=o("__init__()"),nir=o(" (throws an error)."),sir=l(),ut=a("div"),f(fA.$$.fragment),lir=l(),bpe=a("p"),iir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dir=l(),Rc=a("p"),cir=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),fir=o("not"),mir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tpe=a("code"),gir=o("from_pretrained()"),hir=o("to load the model weights."),pir=l(),Fpe=a("p"),_ir=o("Examples:"),uir=l(),f(mA.$$.fragment),bir=l(),To=a("div"),f(gA.$$.fragment),vir=l(),Cpe=a("p"),Tir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fir=l(),Fn=a("p"),Cir=o("The model class to instantiate is selected based on the "),Mpe=a("code"),Mir=o("model_type"),Eir=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),yir=o("pretrained_model_name_or_path"),wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),Air=o("pretrained_model_name_or_path"),Lir=o(":"),Bir=l(),V=a("ul"),nF=a("li"),wpe=a("strong"),xir=o("albert"),kir=o(" \u2014 "),XO=a("a"),Rir=o("TFAlbertForSequenceClassification"),Sir=o(" (ALBERT model)"),Pir=l(),sF=a("li"),Ape=a("strong"),$ir=o("bert"),Iir=o(" \u2014 "),VO=a("a"),jir=o("TFBertForSequenceClassification"),Dir=o(" (BERT model)"),Nir=l(),lF=a("li"),Lpe=a("strong"),qir=o("camembert"),Oir=o(" \u2014 "),zO=a("a"),Gir=o("TFCamembertForSequenceClassification"),Xir=o(" (CamemBERT model)"),Vir=l(),iF=a("li"),Bpe=a("strong"),zir=o("convbert"),Wir=o(" \u2014 "),WO=a("a"),Qir=o("TFConvBertForSequenceClassification"),Hir=o(" (ConvBERT model)"),Uir=l(),dF=a("li"),xpe=a("strong"),Jir=o("ctrl"),Yir=o(" \u2014 "),QO=a("a"),Kir=o("TFCTRLForSequenceClassification"),Zir=o(" (CTRL model)"),edr=l(),cF=a("li"),kpe=a("strong"),odr=o("deberta"),rdr=o(" \u2014 "),HO=a("a"),tdr=o("TFDebertaForSequenceClassification"),adr=o(" (DeBERTa model)"),ndr=l(),fF=a("li"),Rpe=a("strong"),sdr=o("deberta-v2"),ldr=o(" \u2014 "),UO=a("a"),idr=o("TFDebertaV2ForSequenceClassification"),ddr=o(" (DeBERTa-v2 model)"),cdr=l(),mF=a("li"),Spe=a("strong"),fdr=o("distilbert"),mdr=o(" \u2014 "),JO=a("a"),gdr=o("TFDistilBertForSequenceClassification"),hdr=o(" (DistilBERT model)"),pdr=l(),gF=a("li"),Ppe=a("strong"),_dr=o("electra"),udr=o(" \u2014 "),YO=a("a"),bdr=o("TFElectraForSequenceClassification"),vdr=o(" (ELECTRA model)"),Tdr=l(),hF=a("li"),$pe=a("strong"),Fdr=o("flaubert"),Cdr=o(" \u2014 "),KO=a("a"),Mdr=o("TFFlaubertForSequenceClassification"),Edr=o(" (FlauBERT model)"),ydr=l(),pF=a("li"),Ipe=a("strong"),wdr=o("funnel"),Adr=o(" \u2014 "),ZO=a("a"),Ldr=o("TFFunnelForSequenceClassification"),Bdr=o(" (Funnel Transformer model)"),xdr=l(),_F=a("li"),jpe=a("strong"),kdr=o("gpt2"),Rdr=o(" \u2014 "),eG=a("a"),Sdr=o("TFGPT2ForSequenceClassification"),Pdr=o(" (OpenAI GPT-2 model)"),$dr=l(),uF=a("li"),Dpe=a("strong"),Idr=o("layoutlm"),jdr=o(" \u2014 "),oG=a("a"),Ddr=o("TFLayoutLMForSequenceClassification"),Ndr=o(" (LayoutLM model)"),qdr=l(),bF=a("li"),Npe=a("strong"),Odr=o("longformer"),Gdr=o(" \u2014 "),rG=a("a"),Xdr=o("TFLongformerForSequenceClassification"),Vdr=o(" (Longformer model)"),zdr=l(),vF=a("li"),qpe=a("strong"),Wdr=o("mobilebert"),Qdr=o(" \u2014 "),tG=a("a"),Hdr=o("TFMobileBertForSequenceClassification"),Udr=o(" (MobileBERT model)"),Jdr=l(),TF=a("li"),Ope=a("strong"),Ydr=o("mpnet"),Kdr=o(" \u2014 "),aG=a("a"),Zdr=o("TFMPNetForSequenceClassification"),ecr=o(" (MPNet model)"),ocr=l(),FF=a("li"),Gpe=a("strong"),rcr=o("openai-gpt"),tcr=o(" \u2014 "),nG=a("a"),acr=o("TFOpenAIGPTForSequenceClassification"),ncr=o(" (OpenAI GPT model)"),scr=l(),CF=a("li"),Xpe=a("strong"),lcr=o("rembert"),icr=o(" \u2014 "),sG=a("a"),dcr=o("TFRemBertForSequenceClassification"),ccr=o(" (RemBERT model)"),fcr=l(),MF=a("li"),Vpe=a("strong"),mcr=o("roberta"),gcr=o(" \u2014 "),lG=a("a"),hcr=o("TFRobertaForSequenceClassification"),pcr=o(" (RoBERTa model)"),_cr=l(),EF=a("li"),zpe=a("strong"),ucr=o("roformer"),bcr=o(" \u2014 "),iG=a("a"),vcr=o("TFRoFormerForSequenceClassification"),Tcr=o(" (RoFormer model)"),Fcr=l(),yF=a("li"),Wpe=a("strong"),Ccr=o("tapas"),Mcr=o(" \u2014 "),dG=a("a"),Ecr=o("TFTapasForSequenceClassification"),ycr=o(" (TAPAS model)"),wcr=l(),wF=a("li"),Qpe=a("strong"),Acr=o("transfo-xl"),Lcr=o(" \u2014 "),cG=a("a"),Bcr=o("TFTransfoXLForSequenceClassification"),xcr=o(" (Transformer-XL model)"),kcr=l(),AF=a("li"),Hpe=a("strong"),Rcr=o("xlm"),Scr=o(" \u2014 "),fG=a("a"),Pcr=o("TFXLMForSequenceClassification"),$cr=o(" (XLM model)"),Icr=l(),LF=a("li"),Upe=a("strong"),jcr=o("xlm-roberta"),Dcr=o(" \u2014 "),mG=a("a"),Ncr=o("TFXLMRobertaForSequenceClassification"),qcr=o(" (XLM-RoBERTa model)"),Ocr=l(),BF=a("li"),Jpe=a("strong"),Gcr=o("xlnet"),Xcr=o(" \u2014 "),gG=a("a"),Vcr=o("TFXLNetForSequenceClassification"),zcr=o(" (XLNet model)"),Wcr=l(),Ype=a("p"),Qcr=o("Examples:"),Hcr=l(),f(hA.$$.fragment),Xxe=l(),Sc=a("h2"),xF=a("a"),Kpe=a("span"),f(pA.$$.fragment),Ucr=l(),Zpe=a("span"),Jcr=o("TFAutoModelForMultipleChoice"),Vxe=l(),Er=a("div"),f(_A.$$.fragment),Ycr=l(),Pc=a("p"),Kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),e_e=a("code"),Zcr=o("from_pretrained()"),efr=o("class method or the "),o_e=a("code"),ofr=o("from_config()"),rfr=o(`class
method.`),tfr=l(),uA=a("p"),afr=o("This class cannot be instantiated directly using "),r_e=a("code"),nfr=o("__init__()"),sfr=o(" (throws an error)."),lfr=l(),bt=a("div"),f(bA.$$.fragment),ifr=l(),t_e=a("p"),dfr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cfr=l(),$c=a("p"),ffr=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),mfr=o("not"),gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n_e=a("code"),hfr=o("from_pretrained()"),pfr=o("to load the model weights."),_fr=l(),s_e=a("p"),ufr=o("Examples:"),bfr=l(),f(vA.$$.fragment),vfr=l(),Fo=a("div"),f(TA.$$.fragment),Tfr=l(),l_e=a("p"),Ffr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cfr=l(),Cn=a("p"),Mfr=o("The model class to instantiate is selected based on the "),i_e=a("code"),Efr=o("model_type"),yfr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),Lfr=o("pretrained_model_name_or_path"),Bfr=o(":"),xfr=l(),te=a("ul"),kF=a("li"),f_e=a("strong"),kfr=o("albert"),Rfr=o(" \u2014 "),hG=a("a"),Sfr=o("TFAlbertForMultipleChoice"),Pfr=o(" (ALBERT model)"),$fr=l(),RF=a("li"),m_e=a("strong"),Ifr=o("bert"),jfr=o(" \u2014 "),pG=a("a"),Dfr=o("TFBertForMultipleChoice"),Nfr=o(" (BERT model)"),qfr=l(),SF=a("li"),g_e=a("strong"),Ofr=o("camembert"),Gfr=o(" \u2014 "),_G=a("a"),Xfr=o("TFCamembertForMultipleChoice"),Vfr=o(" (CamemBERT model)"),zfr=l(),PF=a("li"),h_e=a("strong"),Wfr=o("convbert"),Qfr=o(" \u2014 "),uG=a("a"),Hfr=o("TFConvBertForMultipleChoice"),Ufr=o(" (ConvBERT model)"),Jfr=l(),$F=a("li"),p_e=a("strong"),Yfr=o("distilbert"),Kfr=o(" \u2014 "),bG=a("a"),Zfr=o("TFDistilBertForMultipleChoice"),emr=o(" (DistilBERT model)"),omr=l(),IF=a("li"),__e=a("strong"),rmr=o("electra"),tmr=o(" \u2014 "),vG=a("a"),amr=o("TFElectraForMultipleChoice"),nmr=o(" (ELECTRA model)"),smr=l(),jF=a("li"),u_e=a("strong"),lmr=o("flaubert"),imr=o(" \u2014 "),TG=a("a"),dmr=o("TFFlaubertForMultipleChoice"),cmr=o(" (FlauBERT model)"),fmr=l(),DF=a("li"),b_e=a("strong"),mmr=o("funnel"),gmr=o(" \u2014 "),FG=a("a"),hmr=o("TFFunnelForMultipleChoice"),pmr=o(" (Funnel Transformer model)"),_mr=l(),NF=a("li"),v_e=a("strong"),umr=o("longformer"),bmr=o(" \u2014 "),CG=a("a"),vmr=o("TFLongformerForMultipleChoice"),Tmr=o(" (Longformer model)"),Fmr=l(),qF=a("li"),T_e=a("strong"),Cmr=o("mobilebert"),Mmr=o(" \u2014 "),MG=a("a"),Emr=o("TFMobileBertForMultipleChoice"),ymr=o(" (MobileBERT model)"),wmr=l(),OF=a("li"),F_e=a("strong"),Amr=o("mpnet"),Lmr=o(" \u2014 "),EG=a("a"),Bmr=o("TFMPNetForMultipleChoice"),xmr=o(" (MPNet model)"),kmr=l(),GF=a("li"),C_e=a("strong"),Rmr=o("rembert"),Smr=o(" \u2014 "),yG=a("a"),Pmr=o("TFRemBertForMultipleChoice"),$mr=o(" (RemBERT model)"),Imr=l(),XF=a("li"),M_e=a("strong"),jmr=o("roberta"),Dmr=o(" \u2014 "),wG=a("a"),Nmr=o("TFRobertaForMultipleChoice"),qmr=o(" (RoBERTa model)"),Omr=l(),VF=a("li"),E_e=a("strong"),Gmr=o("roformer"),Xmr=o(" \u2014 "),AG=a("a"),Vmr=o("TFRoFormerForMultipleChoice"),zmr=o(" (RoFormer model)"),Wmr=l(),zF=a("li"),y_e=a("strong"),Qmr=o("xlm"),Hmr=o(" \u2014 "),LG=a("a"),Umr=o("TFXLMForMultipleChoice"),Jmr=o(" (XLM model)"),Ymr=l(),WF=a("li"),w_e=a("strong"),Kmr=o("xlm-roberta"),Zmr=o(" \u2014 "),BG=a("a"),egr=o("TFXLMRobertaForMultipleChoice"),ogr=o(" (XLM-RoBERTa model)"),rgr=l(),QF=a("li"),A_e=a("strong"),tgr=o("xlnet"),agr=o(" \u2014 "),xG=a("a"),ngr=o("TFXLNetForMultipleChoice"),sgr=o(" (XLNet model)"),lgr=l(),L_e=a("p"),igr=o("Examples:"),dgr=l(),f(FA.$$.fragment),zxe=l(),Ic=a("h2"),HF=a("a"),B_e=a("span"),f(CA.$$.fragment),cgr=l(),x_e=a("span"),fgr=o("TFAutoModelForTableQuestionAnswering"),Wxe=l(),yr=a("div"),f(MA.$$.fragment),mgr=l(),jc=a("p"),ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),k_e=a("code"),hgr=o("from_pretrained()"),pgr=o("class method or the "),R_e=a("code"),_gr=o("from_config()"),ugr=o(`class
method.`),bgr=l(),EA=a("p"),vgr=o("This class cannot be instantiated directly using "),S_e=a("code"),Tgr=o("__init__()"),Fgr=o(" (throws an error)."),Cgr=l(),vt=a("div"),f(yA.$$.fragment),Mgr=l(),P_e=a("p"),Egr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ygr=l(),Dc=a("p"),wgr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),Agr=o("not"),Lgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=a("code"),Bgr=o("from_pretrained()"),xgr=o("to load the model weights."),kgr=l(),j_e=a("p"),Rgr=o("Examples:"),Sgr=l(),f(wA.$$.fragment),Pgr=l(),Co=a("div"),f(AA.$$.fragment),$gr=l(),D_e=a("p"),Igr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jgr=l(),Mn=a("p"),Dgr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Ngr=o("model_type"),qgr=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),Ogr=o("pretrained_model_name_or_path"),Ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),Xgr=o("pretrained_model_name_or_path"),Vgr=o(":"),zgr=l(),G_e=a("ul"),UF=a("li"),X_e=a("strong"),Wgr=o("tapas"),Qgr=o(" \u2014 "),kG=a("a"),Hgr=o("TFTapasForQuestionAnswering"),Ugr=o(" (TAPAS model)"),Jgr=l(),V_e=a("p"),Ygr=o("Examples:"),Kgr=l(),f(LA.$$.fragment),Qxe=l(),Nc=a("h2"),JF=a("a"),z_e=a("span"),f(BA.$$.fragment),Zgr=l(),W_e=a("span"),ehr=o("TFAutoModelForTokenClassification"),Hxe=l(),wr=a("div"),f(xA.$$.fragment),ohr=l(),qc=a("p"),rhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Q_e=a("code"),thr=o("from_pretrained()"),ahr=o("class method or the "),H_e=a("code"),nhr=o("from_config()"),shr=o(`class
method.`),lhr=l(),kA=a("p"),ihr=o("This class cannot be instantiated directly using "),U_e=a("code"),dhr=o("__init__()"),chr=o(" (throws an error)."),fhr=l(),Tt=a("div"),f(RA.$$.fragment),mhr=l(),J_e=a("p"),ghr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hhr=l(),Oc=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),_hr=o("not"),uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=a("code"),bhr=o("from_pretrained()"),vhr=o("to load the model weights."),Thr=l(),Z_e=a("p"),Fhr=o("Examples:"),Chr=l(),f(SA.$$.fragment),Mhr=l(),Mo=a("div"),f(PA.$$.fragment),Ehr=l(),eue=a("p"),yhr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),whr=l(),En=a("p"),Ahr=o("The model class to instantiate is selected based on the "),oue=a("code"),Lhr=o("model_type"),Bhr=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),Rhr=o("pretrained_model_name_or_path"),Shr=o(":"),Phr=l(),K=a("ul"),YF=a("li"),aue=a("strong"),$hr=o("albert"),Ihr=o(" \u2014 "),RG=a("a"),jhr=o("TFAlbertForTokenClassification"),Dhr=o(" (ALBERT model)"),Nhr=l(),KF=a("li"),nue=a("strong"),qhr=o("bert"),Ohr=o(" \u2014 "),SG=a("a"),Ghr=o("TFBertForTokenClassification"),Xhr=o(" (BERT model)"),Vhr=l(),ZF=a("li"),sue=a("strong"),zhr=o("camembert"),Whr=o(" \u2014 "),PG=a("a"),Qhr=o("TFCamembertForTokenClassification"),Hhr=o(" (CamemBERT model)"),Uhr=l(),e9=a("li"),lue=a("strong"),Jhr=o("convbert"),Yhr=o(" \u2014 "),$G=a("a"),Khr=o("TFConvBertForTokenClassification"),Zhr=o(" (ConvBERT model)"),epr=l(),o9=a("li"),iue=a("strong"),opr=o("deberta"),rpr=o(" \u2014 "),IG=a("a"),tpr=o("TFDebertaForTokenClassification"),apr=o(" (DeBERTa model)"),npr=l(),r9=a("li"),due=a("strong"),spr=o("deberta-v2"),lpr=o(" \u2014 "),jG=a("a"),ipr=o("TFDebertaV2ForTokenClassification"),dpr=o(" (DeBERTa-v2 model)"),cpr=l(),t9=a("li"),cue=a("strong"),fpr=o("distilbert"),mpr=o(" \u2014 "),DG=a("a"),gpr=o("TFDistilBertForTokenClassification"),hpr=o(" (DistilBERT model)"),ppr=l(),a9=a("li"),fue=a("strong"),_pr=o("electra"),upr=o(" \u2014 "),NG=a("a"),bpr=o("TFElectraForTokenClassification"),vpr=o(" (ELECTRA model)"),Tpr=l(),n9=a("li"),mue=a("strong"),Fpr=o("flaubert"),Cpr=o(" \u2014 "),qG=a("a"),Mpr=o("TFFlaubertForTokenClassification"),Epr=o(" (FlauBERT model)"),ypr=l(),s9=a("li"),gue=a("strong"),wpr=o("funnel"),Apr=o(" \u2014 "),OG=a("a"),Lpr=o("TFFunnelForTokenClassification"),Bpr=o(" (Funnel Transformer model)"),xpr=l(),l9=a("li"),hue=a("strong"),kpr=o("layoutlm"),Rpr=o(" \u2014 "),GG=a("a"),Spr=o("TFLayoutLMForTokenClassification"),Ppr=o(" (LayoutLM model)"),$pr=l(),i9=a("li"),pue=a("strong"),Ipr=o("longformer"),jpr=o(" \u2014 "),XG=a("a"),Dpr=o("TFLongformerForTokenClassification"),Npr=o(" (Longformer model)"),qpr=l(),d9=a("li"),_ue=a("strong"),Opr=o("mobilebert"),Gpr=o(" \u2014 "),VG=a("a"),Xpr=o("TFMobileBertForTokenClassification"),Vpr=o(" (MobileBERT model)"),zpr=l(),c9=a("li"),uue=a("strong"),Wpr=o("mpnet"),Qpr=o(" \u2014 "),zG=a("a"),Hpr=o("TFMPNetForTokenClassification"),Upr=o(" (MPNet model)"),Jpr=l(),f9=a("li"),bue=a("strong"),Ypr=o("rembert"),Kpr=o(" \u2014 "),WG=a("a"),Zpr=o("TFRemBertForTokenClassification"),e_r=o(" (RemBERT model)"),o_r=l(),m9=a("li"),vue=a("strong"),r_r=o("roberta"),t_r=o(" \u2014 "),QG=a("a"),a_r=o("TFRobertaForTokenClassification"),n_r=o(" (RoBERTa model)"),s_r=l(),g9=a("li"),Tue=a("strong"),l_r=o("roformer"),i_r=o(" \u2014 "),HG=a("a"),d_r=o("TFRoFormerForTokenClassification"),c_r=o(" (RoFormer model)"),f_r=l(),h9=a("li"),Fue=a("strong"),m_r=o("xlm"),g_r=o(" \u2014 "),UG=a("a"),h_r=o("TFXLMForTokenClassification"),p_r=o(" (XLM model)"),__r=l(),p9=a("li"),Cue=a("strong"),u_r=o("xlm-roberta"),b_r=o(" \u2014 "),JG=a("a"),v_r=o("TFXLMRobertaForTokenClassification"),T_r=o(" (XLM-RoBERTa model)"),F_r=l(),_9=a("li"),Mue=a("strong"),C_r=o("xlnet"),M_r=o(" \u2014 "),YG=a("a"),E_r=o("TFXLNetForTokenClassification"),y_r=o(" (XLNet model)"),w_r=l(),Eue=a("p"),A_r=o("Examples:"),L_r=l(),f($A.$$.fragment),Uxe=l(),Gc=a("h2"),u9=a("a"),yue=a("span"),f(IA.$$.fragment),B_r=l(),wue=a("span"),x_r=o("TFAutoModelForQuestionAnswering"),Jxe=l(),Ar=a("div"),f(jA.$$.fragment),k_r=l(),Xc=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aue=a("code"),S_r=o("from_pretrained()"),P_r=o("class method or the "),Lue=a("code"),$_r=o("from_config()"),I_r=o(`class
method.`),j_r=l(),DA=a("p"),D_r=o("This class cannot be instantiated directly using "),Bue=a("code"),N_r=o("__init__()"),q_r=o(" (throws an error)."),O_r=l(),Ft=a("div"),f(NA.$$.fragment),G_r=l(),xue=a("p"),X_r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V_r=l(),Vc=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),W_r=o("not"),Q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rue=a("code"),H_r=o("from_pretrained()"),U_r=o("to load the model weights."),J_r=l(),Sue=a("p"),Y_r=o("Examples:"),K_r=l(),f(qA.$$.fragment),Z_r=l(),Eo=a("div"),f(OA.$$.fragment),eur=l(),Pue=a("p"),our=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rur=l(),yn=a("p"),tur=o("The model class to instantiate is selected based on the "),$ue=a("code"),aur=o("model_type"),nur=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),iur=o("pretrained_model_name_or_path"),dur=o(":"),cur=l(),Z=a("ul"),b9=a("li"),Due=a("strong"),fur=o("albert"),mur=o(" \u2014 "),KG=a("a"),gur=o("TFAlbertForQuestionAnswering"),hur=o(" (ALBERT model)"),pur=l(),v9=a("li"),Nue=a("strong"),_ur=o("bert"),uur=o(" \u2014 "),ZG=a("a"),bur=o("TFBertForQuestionAnswering"),vur=o(" (BERT model)"),Tur=l(),T9=a("li"),que=a("strong"),Fur=o("camembert"),Cur=o(" \u2014 "),eX=a("a"),Mur=o("TFCamembertForQuestionAnswering"),Eur=o(" (CamemBERT model)"),yur=l(),F9=a("li"),Oue=a("strong"),wur=o("convbert"),Aur=o(" \u2014 "),oX=a("a"),Lur=o("TFConvBertForQuestionAnswering"),Bur=o(" (ConvBERT model)"),xur=l(),C9=a("li"),Gue=a("strong"),kur=o("deberta"),Rur=o(" \u2014 "),rX=a("a"),Sur=o("TFDebertaForQuestionAnswering"),Pur=o(" (DeBERTa model)"),$ur=l(),M9=a("li"),Xue=a("strong"),Iur=o("deberta-v2"),jur=o(" \u2014 "),tX=a("a"),Dur=o("TFDebertaV2ForQuestionAnswering"),Nur=o(" (DeBERTa-v2 model)"),qur=l(),E9=a("li"),Vue=a("strong"),Our=o("distilbert"),Gur=o(" \u2014 "),aX=a("a"),Xur=o("TFDistilBertForQuestionAnswering"),Vur=o(" (DistilBERT model)"),zur=l(),y9=a("li"),zue=a("strong"),Wur=o("electra"),Qur=o(" \u2014 "),nX=a("a"),Hur=o("TFElectraForQuestionAnswering"),Uur=o(" (ELECTRA model)"),Jur=l(),w9=a("li"),Wue=a("strong"),Yur=o("flaubert"),Kur=o(" \u2014 "),sX=a("a"),Zur=o("TFFlaubertForQuestionAnsweringSimple"),e2r=o(" (FlauBERT model)"),o2r=l(),A9=a("li"),Que=a("strong"),r2r=o("funnel"),t2r=o(" \u2014 "),lX=a("a"),a2r=o("TFFunnelForQuestionAnswering"),n2r=o(" (Funnel Transformer model)"),s2r=l(),L9=a("li"),Hue=a("strong"),l2r=o("longformer"),i2r=o(" \u2014 "),iX=a("a"),d2r=o("TFLongformerForQuestionAnswering"),c2r=o(" (Longformer model)"),f2r=l(),B9=a("li"),Uue=a("strong"),m2r=o("mobilebert"),g2r=o(" \u2014 "),dX=a("a"),h2r=o("TFMobileBertForQuestionAnswering"),p2r=o(" (MobileBERT model)"),_2r=l(),x9=a("li"),Jue=a("strong"),u2r=o("mpnet"),b2r=o(" \u2014 "),cX=a("a"),v2r=o("TFMPNetForQuestionAnswering"),T2r=o(" (MPNet model)"),F2r=l(),k9=a("li"),Yue=a("strong"),C2r=o("rembert"),M2r=o(" \u2014 "),fX=a("a"),E2r=o("TFRemBertForQuestionAnswering"),y2r=o(" (RemBERT model)"),w2r=l(),R9=a("li"),Kue=a("strong"),A2r=o("roberta"),L2r=o(" \u2014 "),mX=a("a"),B2r=o("TFRobertaForQuestionAnswering"),x2r=o(" (RoBERTa model)"),k2r=l(),S9=a("li"),Zue=a("strong"),R2r=o("roformer"),S2r=o(" \u2014 "),gX=a("a"),P2r=o("TFRoFormerForQuestionAnswering"),$2r=o(" (RoFormer model)"),I2r=l(),P9=a("li"),e2e=a("strong"),j2r=o("xlm"),D2r=o(" \u2014 "),hX=a("a"),N2r=o("TFXLMForQuestionAnsweringSimple"),q2r=o(" (XLM model)"),O2r=l(),$9=a("li"),o2e=a("strong"),G2r=o("xlm-roberta"),X2r=o(" \u2014 "),pX=a("a"),V2r=o("TFXLMRobertaForQuestionAnswering"),z2r=o(" (XLM-RoBERTa model)"),W2r=l(),I9=a("li"),r2e=a("strong"),Q2r=o("xlnet"),H2r=o(" \u2014 "),_X=a("a"),U2r=o("TFXLNetForQuestionAnsweringSimple"),J2r=o(" (XLNet model)"),Y2r=l(),t2e=a("p"),K2r=o("Examples:"),Z2r=l(),f(GA.$$.fragment),Yxe=l(),zc=a("h2"),j9=a("a"),a2e=a("span"),f(XA.$$.fragment),e1r=l(),n2e=a("span"),o1r=o("TFAutoModelForVision2Seq"),Kxe=l(),Lr=a("div"),f(VA.$$.fragment),r1r=l(),Wc=a("p"),t1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),s2e=a("code"),a1r=o("from_pretrained()"),n1r=o("class method or the "),l2e=a("code"),s1r=o("from_config()"),l1r=o(`class
method.`),i1r=l(),zA=a("p"),d1r=o("This class cannot be instantiated directly using "),i2e=a("code"),c1r=o("__init__()"),f1r=o(" (throws an error)."),m1r=l(),Ct=a("div"),f(WA.$$.fragment),g1r=l(),d2e=a("p"),h1r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p1r=l(),Qc=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),u1r=o("not"),b1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=a("code"),v1r=o("from_pretrained()"),T1r=o("to load the model weights."),F1r=l(),m2e=a("p"),C1r=o("Examples:"),M1r=l(),f(QA.$$.fragment),E1r=l(),yo=a("div"),f(HA.$$.fragment),y1r=l(),g2e=a("p"),w1r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A1r=l(),wn=a("p"),L1r=o("The model class to instantiate is selected based on the "),h2e=a("code"),B1r=o("model_type"),x1r=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),k1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),S1r=o("pretrained_model_name_or_path"),P1r=o(":"),$1r=l(),u2e=a("ul"),D9=a("li"),b2e=a("strong"),I1r=o("vision-encoder-decoder"),j1r=o(" \u2014 "),uX=a("a"),D1r=o("TFVisionEncoderDecoderModel"),N1r=o(" (Vision Encoder decoder model)"),q1r=l(),v2e=a("p"),O1r=o("Examples:"),G1r=l(),f(UA.$$.fragment),Zxe=l(),Hc=a("h2"),N9=a("a"),T2e=a("span"),f(JA.$$.fragment),X1r=l(),F2e=a("span"),V1r=o("TFAutoModelForSpeechSeq2Seq"),eke=l(),Br=a("div"),f(YA.$$.fragment),z1r=l(),Uc=a("p"),W1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),C2e=a("code"),Q1r=o("from_pretrained()"),H1r=o("class method or the "),M2e=a("code"),U1r=o("from_config()"),J1r=o(`class
method.`),Y1r=l(),KA=a("p"),K1r=o("This class cannot be instantiated directly using "),E2e=a("code"),Z1r=o("__init__()"),ebr=o(" (throws an error)."),obr=l(),Mt=a("div"),f(ZA.$$.fragment),rbr=l(),y2e=a("p"),tbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),abr=l(),Jc=a("p"),nbr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),sbr=o("not"),lbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=a("code"),ibr=o("from_pretrained()"),dbr=o("to load the model weights."),cbr=l(),L2e=a("p"),fbr=o("Examples:"),mbr=l(),f(e0.$$.fragment),gbr=l(),wo=a("div"),f(o0.$$.fragment),hbr=l(),B2e=a("p"),pbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_br=l(),An=a("p"),ubr=o("The model class to instantiate is selected based on the "),x2e=a("code"),bbr=o("model_type"),vbr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Tbr=o("pretrained_model_name_or_path"),Fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),Cbr=o("pretrained_model_name_or_path"),Mbr=o(":"),Ebr=l(),S2e=a("ul"),q9=a("li"),P2e=a("strong"),ybr=o("speech_to_text"),wbr=o(" \u2014 "),bX=a("a"),Abr=o("TFSpeech2TextForConditionalGeneration"),Lbr=o(" (Speech2Text model)"),Bbr=l(),$2e=a("p"),xbr=o("Examples:"),kbr=l(),f(r0.$$.fragment),oke=l(),Yc=a("h2"),O9=a("a"),I2e=a("span"),f(t0.$$.fragment),Rbr=l(),j2e=a("span"),Sbr=o("FlaxAutoModel"),rke=l(),xr=a("div"),f(a0.$$.fragment),Pbr=l(),Kc=a("p"),$br=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D2e=a("code"),Ibr=o("from_pretrained()"),jbr=o("class method or the "),N2e=a("code"),Dbr=o("from_config()"),Nbr=o(`class
method.`),qbr=l(),n0=a("p"),Obr=o("This class cannot be instantiated directly using "),q2e=a("code"),Gbr=o("__init__()"),Xbr=o(" (throws an error)."),Vbr=l(),Et=a("div"),f(s0.$$.fragment),zbr=l(),O2e=a("p"),Wbr=o("Instantiates one of the base model classes of the library from a configuration."),Qbr=l(),Zc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=a("code"),Ybr=o("from_pretrained()"),Kbr=o("to load the model weights."),Zbr=l(),V2e=a("p"),e3r=o("Examples:"),o3r=l(),f(l0.$$.fragment),r3r=l(),Ao=a("div"),f(i0.$$.fragment),t3r=l(),z2e=a("p"),a3r=o("Instantiate one of the base model classes of the library from a pretrained model."),n3r=l(),Ln=a("p"),s3r=o("The model class to instantiate is selected based on the "),W2e=a("code"),l3r=o("model_type"),i3r=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),d3r=o("pretrained_model_name_or_path"),c3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),f3r=o("pretrained_model_name_or_path"),m3r=o(":"),g3r=l(),z=a("ul"),G9=a("li"),U2e=a("strong"),h3r=o("albert"),p3r=o(" \u2014 "),vX=a("a"),_3r=o("FlaxAlbertModel"),u3r=o(" (ALBERT model)"),b3r=l(),X9=a("li"),J2e=a("strong"),v3r=o("bart"),T3r=o(" \u2014 "),TX=a("a"),F3r=o("FlaxBartModel"),C3r=o(" (BART model)"),M3r=l(),V9=a("li"),Y2e=a("strong"),E3r=o("beit"),y3r=o(" \u2014 "),FX=a("a"),w3r=o("FlaxBeitModel"),A3r=o(" (BEiT model)"),L3r=l(),z9=a("li"),K2e=a("strong"),B3r=o("bert"),x3r=o(" \u2014 "),CX=a("a"),k3r=o("FlaxBertModel"),R3r=o(" (BERT model)"),S3r=l(),W9=a("li"),Z2e=a("strong"),P3r=o("big_bird"),$3r=o(" \u2014 "),MX=a("a"),I3r=o("FlaxBigBirdModel"),j3r=o(" (BigBird model)"),D3r=l(),Q9=a("li"),e1e=a("strong"),N3r=o("blenderbot"),q3r=o(" \u2014 "),EX=a("a"),O3r=o("FlaxBlenderbotModel"),G3r=o(" (Blenderbot model)"),X3r=l(),H9=a("li"),o1e=a("strong"),V3r=o("blenderbot-small"),z3r=o(" \u2014 "),yX=a("a"),W3r=o("FlaxBlenderbotSmallModel"),Q3r=o(" (BlenderbotSmall model)"),H3r=l(),U9=a("li"),r1e=a("strong"),U3r=o("clip"),J3r=o(" \u2014 "),wX=a("a"),Y3r=o("FlaxCLIPModel"),K3r=o(" (CLIP model)"),Z3r=l(),J9=a("li"),t1e=a("strong"),e5r=o("distilbert"),o5r=o(" \u2014 "),AX=a("a"),r5r=o("FlaxDistilBertModel"),t5r=o(" (DistilBERT model)"),a5r=l(),Y9=a("li"),a1e=a("strong"),n5r=o("electra"),s5r=o(" \u2014 "),LX=a("a"),l5r=o("FlaxElectraModel"),i5r=o(" (ELECTRA model)"),d5r=l(),K9=a("li"),n1e=a("strong"),c5r=o("gpt2"),f5r=o(" \u2014 "),BX=a("a"),m5r=o("FlaxGPT2Model"),g5r=o(" (OpenAI GPT-2 model)"),h5r=l(),Z9=a("li"),s1e=a("strong"),p5r=o("gpt_neo"),_5r=o(" \u2014 "),xX=a("a"),u5r=o("FlaxGPTNeoModel"),b5r=o(" (GPT Neo model)"),v5r=l(),eC=a("li"),l1e=a("strong"),T5r=o("gptj"),F5r=o(" \u2014 "),kX=a("a"),C5r=o("FlaxGPTJModel"),M5r=o(" (GPT-J model)"),E5r=l(),oC=a("li"),i1e=a("strong"),y5r=o("marian"),w5r=o(" \u2014 "),RX=a("a"),A5r=o("FlaxMarianModel"),L5r=o(" (Marian model)"),B5r=l(),rC=a("li"),d1e=a("strong"),x5r=o("mbart"),k5r=o(" \u2014 "),SX=a("a"),R5r=o("FlaxMBartModel"),S5r=o(" (mBART model)"),P5r=l(),tC=a("li"),c1e=a("strong"),$5r=o("mt5"),I5r=o(" \u2014 "),PX=a("a"),j5r=o("FlaxMT5Model"),D5r=o(" (mT5 model)"),N5r=l(),aC=a("li"),f1e=a("strong"),q5r=o("pegasus"),O5r=o(" \u2014 "),$X=a("a"),G5r=o("FlaxPegasusModel"),X5r=o(" (Pegasus model)"),V5r=l(),nC=a("li"),m1e=a("strong"),z5r=o("roberta"),W5r=o(" \u2014 "),IX=a("a"),Q5r=o("FlaxRobertaModel"),H5r=o(" (RoBERTa model)"),U5r=l(),sC=a("li"),g1e=a("strong"),J5r=o("roformer"),Y5r=o(" \u2014 "),jX=a("a"),K5r=o("FlaxRoFormerModel"),Z5r=o(" (RoFormer model)"),evr=l(),lC=a("li"),h1e=a("strong"),ovr=o("t5"),rvr=o(" \u2014 "),DX=a("a"),tvr=o("FlaxT5Model"),avr=o(" (T5 model)"),nvr=l(),iC=a("li"),p1e=a("strong"),svr=o("vision-text-dual-encoder"),lvr=o(" \u2014 "),NX=a("a"),ivr=o("FlaxVisionTextDualEncoderModel"),dvr=o(" (VisionTextDualEncoder model)"),cvr=l(),dC=a("li"),_1e=a("strong"),fvr=o("vit"),mvr=o(" \u2014 "),qX=a("a"),gvr=o("FlaxViTModel"),hvr=o(" (ViT model)"),pvr=l(),cC=a("li"),u1e=a("strong"),_vr=o("wav2vec2"),uvr=o(" \u2014 "),OX=a("a"),bvr=o("FlaxWav2Vec2Model"),vvr=o(" (Wav2Vec2 model)"),Tvr=l(),fC=a("li"),b1e=a("strong"),Fvr=o("xglm"),Cvr=o(" \u2014 "),GX=a("a"),Mvr=o("FlaxXGLMModel"),Evr=o(" (XGLM model)"),yvr=l(),v1e=a("p"),wvr=o("Examples:"),Avr=l(),f(d0.$$.fragment),tke=l(),ef=a("h2"),mC=a("a"),T1e=a("span"),f(c0.$$.fragment),Lvr=l(),F1e=a("span"),Bvr=o("FlaxAutoModelForCausalLM"),ake=l(),kr=a("div"),f(f0.$$.fragment),xvr=l(),of=a("p"),kvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C1e=a("code"),Rvr=o("from_pretrained()"),Svr=o("class method or the "),M1e=a("code"),Pvr=o("from_config()"),$vr=o(`class
method.`),Ivr=l(),m0=a("p"),jvr=o("This class cannot be instantiated directly using "),E1e=a("code"),Dvr=o("__init__()"),Nvr=o(" (throws an error)."),qvr=l(),yt=a("div"),f(g0.$$.fragment),Ovr=l(),y1e=a("p"),Gvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xvr=l(),rf=a("p"),Vvr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),zvr=o("not"),Wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=a("code"),Qvr=o("from_pretrained()"),Hvr=o("to load the model weights."),Uvr=l(),L1e=a("p"),Jvr=o("Examples:"),Yvr=l(),f(h0.$$.fragment),Kvr=l(),Lo=a("div"),f(p0.$$.fragment),Zvr=l(),B1e=a("p"),eTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oTr=l(),Bn=a("p"),rTr=o("The model class to instantiate is selected based on the "),x1e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),xn=a("ul"),gC=a("li"),S1e=a("strong"),cTr=o("gpt2"),fTr=o(" \u2014 "),XX=a("a"),mTr=o("FlaxGPT2LMHeadModel"),gTr=o(" (OpenAI GPT-2 model)"),hTr=l(),hC=a("li"),P1e=a("strong"),pTr=o("gpt_neo"),_Tr=o(" \u2014 "),VX=a("a"),uTr=o("FlaxGPTNeoForCausalLM"),bTr=o(" (GPT Neo model)"),vTr=l(),pC=a("li"),$1e=a("strong"),TTr=o("gptj"),FTr=o(" \u2014 "),zX=a("a"),CTr=o("FlaxGPTJForCausalLM"),MTr=o(" (GPT-J model)"),ETr=l(),_C=a("li"),I1e=a("strong"),yTr=o("xglm"),wTr=o(" \u2014 "),WX=a("a"),ATr=o("FlaxXGLMForCausalLM"),LTr=o(" (XGLM model)"),BTr=l(),j1e=a("p"),xTr=o("Examples:"),kTr=l(),f(_0.$$.fragment),nke=l(),tf=a("h2"),uC=a("a"),D1e=a("span"),f(u0.$$.fragment),RTr=l(),N1e=a("span"),STr=o("FlaxAutoModelForPreTraining"),ske=l(),Rr=a("div"),f(b0.$$.fragment),PTr=l(),af=a("p"),$Tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),q1e=a("code"),ITr=o("from_pretrained()"),jTr=o("class method or the "),O1e=a("code"),DTr=o("from_config()"),NTr=o(`class
method.`),qTr=l(),v0=a("p"),OTr=o("This class cannot be instantiated directly using "),G1e=a("code"),GTr=o("__init__()"),XTr=o(" (throws an error)."),VTr=l(),wt=a("div"),f(T0.$$.fragment),zTr=l(),X1e=a("p"),WTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QTr=l(),nf=a("p"),HTr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),UTr=o("not"),JTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z1e=a("code"),YTr=o("from_pretrained()"),KTr=o("to load the model weights."),ZTr=l(),W1e=a("p"),eFr=o("Examples:"),oFr=l(),f(F0.$$.fragment),rFr=l(),Bo=a("div"),f(C0.$$.fragment),tFr=l(),Q1e=a("p"),aFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nFr=l(),kn=a("p"),sFr=o("The model class to instantiate is selected based on the "),H1e=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(":"),gFr=l(),fe=a("ul"),bC=a("li"),Y1e=a("strong"),hFr=o("albert"),pFr=o(" \u2014 "),QX=a("a"),_Fr=o("FlaxAlbertForPreTraining"),uFr=o(" (ALBERT model)"),bFr=l(),vC=a("li"),K1e=a("strong"),vFr=o("bart"),TFr=o(" \u2014 "),HX=a("a"),FFr=o("FlaxBartForConditionalGeneration"),CFr=o(" (BART model)"),MFr=l(),TC=a("li"),Z1e=a("strong"),EFr=o("bert"),yFr=o(" \u2014 "),UX=a("a"),wFr=o("FlaxBertForPreTraining"),AFr=o(" (BERT model)"),LFr=l(),FC=a("li"),ebe=a("strong"),BFr=o("big_bird"),xFr=o(" \u2014 "),JX=a("a"),kFr=o("FlaxBigBirdForPreTraining"),RFr=o(" (BigBird model)"),SFr=l(),CC=a("li"),obe=a("strong"),PFr=o("electra"),$Fr=o(" \u2014 "),YX=a("a"),IFr=o("FlaxElectraForPreTraining"),jFr=o(" (ELECTRA model)"),DFr=l(),MC=a("li"),rbe=a("strong"),NFr=o("mbart"),qFr=o(" \u2014 "),KX=a("a"),OFr=o("FlaxMBartForConditionalGeneration"),GFr=o(" (mBART model)"),XFr=l(),EC=a("li"),tbe=a("strong"),VFr=o("mt5"),zFr=o(" \u2014 "),ZX=a("a"),WFr=o("FlaxMT5ForConditionalGeneration"),QFr=o(" (mT5 model)"),HFr=l(),yC=a("li"),abe=a("strong"),UFr=o("roberta"),JFr=o(" \u2014 "),eV=a("a"),YFr=o("FlaxRobertaForMaskedLM"),KFr=o(" (RoBERTa model)"),ZFr=l(),wC=a("li"),nbe=a("strong"),e9r=o("roformer"),o9r=o(" \u2014 "),oV=a("a"),r9r=o("FlaxRoFormerForMaskedLM"),t9r=o(" (RoFormer model)"),a9r=l(),AC=a("li"),sbe=a("strong"),n9r=o("t5"),s9r=o(" \u2014 "),rV=a("a"),l9r=o("FlaxT5ForConditionalGeneration"),i9r=o(" (T5 model)"),d9r=l(),LC=a("li"),lbe=a("strong"),c9r=o("wav2vec2"),f9r=o(" \u2014 "),tV=a("a"),m9r=o("FlaxWav2Vec2ForPreTraining"),g9r=o(" (Wav2Vec2 model)"),h9r=l(),ibe=a("p"),p9r=o("Examples:"),_9r=l(),f(M0.$$.fragment),lke=l(),sf=a("h2"),BC=a("a"),dbe=a("span"),f(E0.$$.fragment),u9r=l(),cbe=a("span"),b9r=o("FlaxAutoModelForMaskedLM"),ike=l(),Sr=a("div"),f(y0.$$.fragment),v9r=l(),lf=a("p"),T9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fbe=a("code"),F9r=o("from_pretrained()"),C9r=o("class method or the "),mbe=a("code"),M9r=o("from_config()"),E9r=o(`class
method.`),y9r=l(),w0=a("p"),w9r=o("This class cannot be instantiated directly using "),gbe=a("code"),A9r=o("__init__()"),L9r=o(" (throws an error)."),B9r=l(),At=a("div"),f(A0.$$.fragment),x9r=l(),hbe=a("p"),k9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R9r=l(),df=a("p"),S9r=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),P9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_be=a("code"),I9r=o("from_pretrained()"),j9r=o("to load the model weights."),D9r=l(),ube=a("p"),N9r=o("Examples:"),q9r=l(),f(L0.$$.fragment),O9r=l(),xo=a("div"),f(B0.$$.fragment),G9r=l(),bbe=a("p"),X9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V9r=l(),Rn=a("p"),z9r=o("The model class to instantiate is selected based on the "),vbe=a("code"),W9r=o("model_type"),Q9r=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),H9r=o("pretrained_model_name_or_path"),U9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(":"),K9r=l(),ve=a("ul"),xC=a("li"),Cbe=a("strong"),Z9r=o("albert"),eCr=o(" \u2014 "),aV=a("a"),oCr=o("FlaxAlbertForMaskedLM"),rCr=o(" (ALBERT model)"),tCr=l(),kC=a("li"),Mbe=a("strong"),aCr=o("bart"),nCr=o(" \u2014 "),nV=a("a"),sCr=o("FlaxBartForConditionalGeneration"),lCr=o(" (BART model)"),iCr=l(),RC=a("li"),Ebe=a("strong"),dCr=o("bert"),cCr=o(" \u2014 "),sV=a("a"),fCr=o("FlaxBertForMaskedLM"),mCr=o(" (BERT model)"),gCr=l(),SC=a("li"),ybe=a("strong"),hCr=o("big_bird"),pCr=o(" \u2014 "),lV=a("a"),_Cr=o("FlaxBigBirdForMaskedLM"),uCr=o(" (BigBird model)"),bCr=l(),PC=a("li"),wbe=a("strong"),vCr=o("distilbert"),TCr=o(" \u2014 "),iV=a("a"),FCr=o("FlaxDistilBertForMaskedLM"),CCr=o(" (DistilBERT model)"),MCr=l(),$C=a("li"),Abe=a("strong"),ECr=o("electra"),yCr=o(" \u2014 "),dV=a("a"),wCr=o("FlaxElectraForMaskedLM"),ACr=o(" (ELECTRA model)"),LCr=l(),IC=a("li"),Lbe=a("strong"),BCr=o("mbart"),xCr=o(" \u2014 "),cV=a("a"),kCr=o("FlaxMBartForConditionalGeneration"),RCr=o(" (mBART model)"),SCr=l(),jC=a("li"),Bbe=a("strong"),PCr=o("roberta"),$Cr=o(" \u2014 "),fV=a("a"),ICr=o("FlaxRobertaForMaskedLM"),jCr=o(" (RoBERTa model)"),DCr=l(),DC=a("li"),xbe=a("strong"),NCr=o("roformer"),qCr=o(" \u2014 "),mV=a("a"),OCr=o("FlaxRoFormerForMaskedLM"),GCr=o(" (RoFormer model)"),XCr=l(),kbe=a("p"),VCr=o("Examples:"),zCr=l(),f(x0.$$.fragment),dke=l(),cf=a("h2"),NC=a("a"),Rbe=a("span"),f(k0.$$.fragment),WCr=l(),Sbe=a("span"),QCr=o("FlaxAutoModelForSeq2SeqLM"),cke=l(),Pr=a("div"),f(R0.$$.fragment),HCr=l(),ff=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pbe=a("code"),JCr=o("from_pretrained()"),YCr=o("class method or the "),$be=a("code"),KCr=o("from_config()"),ZCr=o(`class
method.`),e4r=l(),S0=a("p"),o4r=o("This class cannot be instantiated directly using "),Ibe=a("code"),r4r=o("__init__()"),t4r=o(" (throws an error)."),a4r=l(),Lt=a("div"),f(P0.$$.fragment),n4r=l(),jbe=a("p"),s4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l4r=l(),mf=a("p"),i4r=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),d4r=o("not"),c4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=a("code"),f4r=o("from_pretrained()"),m4r=o("to load the model weights."),g4r=l(),qbe=a("p"),h4r=o("Examples:"),p4r=l(),f($0.$$.fragment),_4r=l(),ko=a("div"),f(I0.$$.fragment),u4r=l(),Obe=a("p"),b4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v4r=l(),Sn=a("p"),T4r=o("The model class to instantiate is selected based on the "),Gbe=a("code"),F4r=o("model_type"),C4r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),y4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),Te=a("ul"),qC=a("li"),zbe=a("strong"),L4r=o("bart"),B4r=o(" \u2014 "),gV=a("a"),x4r=o("FlaxBartForConditionalGeneration"),k4r=o(" (BART model)"),R4r=l(),OC=a("li"),Wbe=a("strong"),S4r=o("blenderbot"),P4r=o(" \u2014 "),hV=a("a"),$4r=o("FlaxBlenderbotForConditionalGeneration"),I4r=o(" (Blenderbot model)"),j4r=l(),GC=a("li"),Qbe=a("strong"),D4r=o("blenderbot-small"),N4r=o(" \u2014 "),pV=a("a"),q4r=o("FlaxBlenderbotSmallForConditionalGeneration"),O4r=o(" (BlenderbotSmall model)"),G4r=l(),XC=a("li"),Hbe=a("strong"),X4r=o("encoder-decoder"),V4r=o(" \u2014 "),_V=a("a"),z4r=o("FlaxEncoderDecoderModel"),W4r=o(" (Encoder decoder model)"),Q4r=l(),VC=a("li"),Ube=a("strong"),H4r=o("marian"),U4r=o(" \u2014 "),uV=a("a"),J4r=o("FlaxMarianMTModel"),Y4r=o(" (Marian model)"),K4r=l(),zC=a("li"),Jbe=a("strong"),Z4r=o("mbart"),eMr=o(" \u2014 "),bV=a("a"),oMr=o("FlaxMBartForConditionalGeneration"),rMr=o(" (mBART model)"),tMr=l(),WC=a("li"),Ybe=a("strong"),aMr=o("mt5"),nMr=o(" \u2014 "),vV=a("a"),sMr=o("FlaxMT5ForConditionalGeneration"),lMr=o(" (mT5 model)"),iMr=l(),QC=a("li"),Kbe=a("strong"),dMr=o("pegasus"),cMr=o(" \u2014 "),TV=a("a"),fMr=o("FlaxPegasusForConditionalGeneration"),mMr=o(" (Pegasus model)"),gMr=l(),HC=a("li"),Zbe=a("strong"),hMr=o("t5"),pMr=o(" \u2014 "),FV=a("a"),_Mr=o("FlaxT5ForConditionalGeneration"),uMr=o(" (T5 model)"),bMr=l(),e3e=a("p"),vMr=o("Examples:"),TMr=l(),f(j0.$$.fragment),fke=l(),gf=a("h2"),UC=a("a"),o3e=a("span"),f(D0.$$.fragment),FMr=l(),r3e=a("span"),CMr=o("FlaxAutoModelForSequenceClassification"),mke=l(),$r=a("div"),f(N0.$$.fragment),MMr=l(),hf=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),t3e=a("code"),yMr=o("from_pretrained()"),wMr=o("class method or the "),a3e=a("code"),AMr=o("from_config()"),LMr=o(`class
method.`),BMr=l(),q0=a("p"),xMr=o("This class cannot be instantiated directly using "),n3e=a("code"),kMr=o("__init__()"),RMr=o(" (throws an error)."),SMr=l(),Bt=a("div"),f(O0.$$.fragment),PMr=l(),s3e=a("p"),$Mr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IMr=l(),pf=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),DMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i3e=a("code"),qMr=o("from_pretrained()"),OMr=o("to load the model weights."),GMr=l(),d3e=a("p"),XMr=o("Examples:"),VMr=l(),f(G0.$$.fragment),zMr=l(),Ro=a("div"),f(X0.$$.fragment),WMr=l(),c3e=a("p"),QMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HMr=l(),Pn=a("p"),UMr=o("The model class to instantiate is selected based on the "),f3e=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(":"),rEr=l(),Fe=a("ul"),JC=a("li"),h3e=a("strong"),tEr=o("albert"),aEr=o(" \u2014 "),CV=a("a"),nEr=o("FlaxAlbertForSequenceClassification"),sEr=o(" (ALBERT model)"),lEr=l(),YC=a("li"),p3e=a("strong"),iEr=o("bart"),dEr=o(" \u2014 "),MV=a("a"),cEr=o("FlaxBartForSequenceClassification"),fEr=o(" (BART model)"),mEr=l(),KC=a("li"),_3e=a("strong"),gEr=o("bert"),hEr=o(" \u2014 "),EV=a("a"),pEr=o("FlaxBertForSequenceClassification"),_Er=o(" (BERT model)"),uEr=l(),ZC=a("li"),u3e=a("strong"),bEr=o("big_bird"),vEr=o(" \u2014 "),yV=a("a"),TEr=o("FlaxBigBirdForSequenceClassification"),FEr=o(" (BigBird model)"),CEr=l(),e4=a("li"),b3e=a("strong"),MEr=o("distilbert"),EEr=o(" \u2014 "),wV=a("a"),yEr=o("FlaxDistilBertForSequenceClassification"),wEr=o(" (DistilBERT model)"),AEr=l(),o4=a("li"),v3e=a("strong"),LEr=o("electra"),BEr=o(" \u2014 "),AV=a("a"),xEr=o("FlaxElectraForSequenceClassification"),kEr=o(" (ELECTRA model)"),REr=l(),r4=a("li"),T3e=a("strong"),SEr=o("mbart"),PEr=o(" \u2014 "),LV=a("a"),$Er=o("FlaxMBartForSequenceClassification"),IEr=o(" (mBART model)"),jEr=l(),t4=a("li"),F3e=a("strong"),DEr=o("roberta"),NEr=o(" \u2014 "),BV=a("a"),qEr=o("FlaxRobertaForSequenceClassification"),OEr=o(" (RoBERTa model)"),GEr=l(),a4=a("li"),C3e=a("strong"),XEr=o("roformer"),VEr=o(" \u2014 "),xV=a("a"),zEr=o("FlaxRoFormerForSequenceClassification"),WEr=o(" (RoFormer model)"),QEr=l(),M3e=a("p"),HEr=o("Examples:"),UEr=l(),f(V0.$$.fragment),gke=l(),_f=a("h2"),n4=a("a"),E3e=a("span"),f(z0.$$.fragment),JEr=l(),y3e=a("span"),YEr=o("FlaxAutoModelForQuestionAnswering"),hke=l(),Ir=a("div"),f(W0.$$.fragment),KEr=l(),uf=a("p"),ZEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w3e=a("code"),eyr=o("from_pretrained()"),oyr=o("class method or the "),A3e=a("code"),ryr=o("from_config()"),tyr=o(`class
method.`),ayr=l(),Q0=a("p"),nyr=o("This class cannot be instantiated directly using "),L3e=a("code"),syr=o("__init__()"),lyr=o(" (throws an error)."),iyr=l(),xt=a("div"),f(H0.$$.fragment),dyr=l(),B3e=a("p"),cyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fyr=l(),bf=a("p"),myr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),gyr=o("not"),hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k3e=a("code"),pyr=o("from_pretrained()"),_yr=o("to load the model weights."),uyr=l(),R3e=a("p"),byr=o("Examples:"),vyr=l(),f(U0.$$.fragment),Tyr=l(),So=a("div"),f(J0.$$.fragment),Fyr=l(),S3e=a("p"),Cyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Myr=l(),$n=a("p"),Eyr=o("The model class to instantiate is selected based on the "),P3e=a("code"),yyr=o("model_type"),wyr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),Ayr=o("pretrained_model_name_or_path"),Lyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),Byr=o("pretrained_model_name_or_path"),xyr=o(":"),kyr=l(),Ce=a("ul"),s4=a("li"),j3e=a("strong"),Ryr=o("albert"),Syr=o(" \u2014 "),kV=a("a"),Pyr=o("FlaxAlbertForQuestionAnswering"),$yr=o(" (ALBERT model)"),Iyr=l(),l4=a("li"),D3e=a("strong"),jyr=o("bart"),Dyr=o(" \u2014 "),RV=a("a"),Nyr=o("FlaxBartForQuestionAnswering"),qyr=o(" (BART model)"),Oyr=l(),i4=a("li"),N3e=a("strong"),Gyr=o("bert"),Xyr=o(" \u2014 "),SV=a("a"),Vyr=o("FlaxBertForQuestionAnswering"),zyr=o(" (BERT model)"),Wyr=l(),d4=a("li"),q3e=a("strong"),Qyr=o("big_bird"),Hyr=o(" \u2014 "),PV=a("a"),Uyr=o("FlaxBigBirdForQuestionAnswering"),Jyr=o(" (BigBird model)"),Yyr=l(),c4=a("li"),O3e=a("strong"),Kyr=o("distilbert"),Zyr=o(" \u2014 "),$V=a("a"),ewr=o("FlaxDistilBertForQuestionAnswering"),owr=o(" (DistilBERT model)"),rwr=l(),f4=a("li"),G3e=a("strong"),twr=o("electra"),awr=o(" \u2014 "),IV=a("a"),nwr=o("FlaxElectraForQuestionAnswering"),swr=o(" (ELECTRA model)"),lwr=l(),m4=a("li"),X3e=a("strong"),iwr=o("mbart"),dwr=o(" \u2014 "),jV=a("a"),cwr=o("FlaxMBartForQuestionAnswering"),fwr=o(" (mBART model)"),mwr=l(),g4=a("li"),V3e=a("strong"),gwr=o("roberta"),hwr=o(" \u2014 "),DV=a("a"),pwr=o("FlaxRobertaForQuestionAnswering"),_wr=o(" (RoBERTa model)"),uwr=l(),h4=a("li"),z3e=a("strong"),bwr=o("roformer"),vwr=o(" \u2014 "),NV=a("a"),Twr=o("FlaxRoFormerForQuestionAnswering"),Fwr=o(" (RoFormer model)"),Cwr=l(),W3e=a("p"),Mwr=o("Examples:"),Ewr=l(),f(Y0.$$.fragment),pke=l(),vf=a("h2"),p4=a("a"),Q3e=a("span"),f(K0.$$.fragment),ywr=l(),H3e=a("span"),wwr=o("FlaxAutoModelForTokenClassification"),_ke=l(),jr=a("div"),f(Z0.$$.fragment),Awr=l(),Tf=a("p"),Lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),U3e=a("code"),Bwr=o("from_pretrained()"),xwr=o("class method or the "),J3e=a("code"),kwr=o("from_config()"),Rwr=o(`class
method.`),Swr=l(),eL=a("p"),Pwr=o("This class cannot be instantiated directly using "),Y3e=a("code"),$wr=o("__init__()"),Iwr=o(" (throws an error)."),jwr=l(),kt=a("div"),f(oL.$$.fragment),Dwr=l(),K3e=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qwr=l(),Ff=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),Gwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=a("code"),Vwr=o("from_pretrained()"),zwr=o("to load the model weights."),Wwr=l(),o5e=a("p"),Qwr=o("Examples:"),Hwr=l(),f(rL.$$.fragment),Uwr=l(),Po=a("div"),f(tL.$$.fragment),Jwr=l(),r5e=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kwr=l(),In=a("p"),Zwr=o("The model class to instantiate is selected based on the "),t5e=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),lo=a("ul"),_4=a("li"),s5e=a("strong"),l6r=o("albert"),i6r=o(" \u2014 "),qV=a("a"),d6r=o("FlaxAlbertForTokenClassification"),c6r=o(" (ALBERT model)"),f6r=l(),u4=a("li"),l5e=a("strong"),m6r=o("bert"),g6r=o(" \u2014 "),OV=a("a"),h6r=o("FlaxBertForTokenClassification"),p6r=o(" (BERT model)"),_6r=l(),b4=a("li"),i5e=a("strong"),u6r=o("big_bird"),b6r=o(" \u2014 "),GV=a("a"),v6r=o("FlaxBigBirdForTokenClassification"),T6r=o(" (BigBird model)"),F6r=l(),v4=a("li"),d5e=a("strong"),C6r=o("distilbert"),M6r=o(" \u2014 "),XV=a("a"),E6r=o("FlaxDistilBertForTokenClassification"),y6r=o(" (DistilBERT model)"),w6r=l(),T4=a("li"),c5e=a("strong"),A6r=o("electra"),L6r=o(" \u2014 "),VV=a("a"),B6r=o("FlaxElectraForTokenClassification"),x6r=o(" (ELECTRA model)"),k6r=l(),F4=a("li"),f5e=a("strong"),R6r=o("roberta"),S6r=o(" \u2014 "),zV=a("a"),P6r=o("FlaxRobertaForTokenClassification"),$6r=o(" (RoBERTa model)"),I6r=l(),C4=a("li"),m5e=a("strong"),j6r=o("roformer"),D6r=o(" \u2014 "),WV=a("a"),N6r=o("FlaxRoFormerForTokenClassification"),q6r=o(" (RoFormer model)"),O6r=l(),g5e=a("p"),G6r=o("Examples:"),X6r=l(),f(aL.$$.fragment),uke=l(),Cf=a("h2"),M4=a("a"),h5e=a("span"),f(nL.$$.fragment),V6r=l(),p5e=a("span"),z6r=o("FlaxAutoModelForMultipleChoice"),bke=l(),Dr=a("div"),f(sL.$$.fragment),W6r=l(),Mf=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_5e=a("code"),H6r=o("from_pretrained()"),U6r=o("class method or the "),u5e=a("code"),J6r=o("from_config()"),Y6r=o(`class
method.`),K6r=l(),lL=a("p"),Z6r=o("This class cannot be instantiated directly using "),b5e=a("code"),eAr=o("__init__()"),oAr=o(" (throws an error)."),rAr=l(),Rt=a("div"),f(iL.$$.fragment),tAr=l(),v5e=a("p"),aAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nAr=l(),Ef=a("p"),sAr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),lAr=o("not"),iAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F5e=a("code"),dAr=o("from_pretrained()"),cAr=o("to load the model weights."),fAr=l(),C5e=a("p"),mAr=o("Examples:"),gAr=l(),f(dL.$$.fragment),hAr=l(),$o=a("div"),f(cL.$$.fragment),pAr=l(),M5e=a("p"),_Ar=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uAr=l(),jn=a("p"),bAr=o("The model class to instantiate is selected based on the "),E5e=a("code"),vAr=o("model_type"),TAr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),FAr=o("pretrained_model_name_or_path"),CAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),yAr=l(),io=a("ul"),E4=a("li"),A5e=a("strong"),wAr=o("albert"),AAr=o(" \u2014 "),QV=a("a"),LAr=o("FlaxAlbertForMultipleChoice"),BAr=o(" (ALBERT model)"),xAr=l(),y4=a("li"),L5e=a("strong"),kAr=o("bert"),RAr=o(" \u2014 "),HV=a("a"),SAr=o("FlaxBertForMultipleChoice"),PAr=o(" (BERT model)"),$Ar=l(),w4=a("li"),B5e=a("strong"),IAr=o("big_bird"),jAr=o(" \u2014 "),UV=a("a"),DAr=o("FlaxBigBirdForMultipleChoice"),NAr=o(" (BigBird model)"),qAr=l(),A4=a("li"),x5e=a("strong"),OAr=o("distilbert"),GAr=o(" \u2014 "),JV=a("a"),XAr=o("FlaxDistilBertForMultipleChoice"),VAr=o(" (DistilBERT model)"),zAr=l(),L4=a("li"),k5e=a("strong"),WAr=o("electra"),QAr=o(" \u2014 "),YV=a("a"),HAr=o("FlaxElectraForMultipleChoice"),UAr=o(" (ELECTRA model)"),JAr=l(),B4=a("li"),R5e=a("strong"),YAr=o("roberta"),KAr=o(" \u2014 "),KV=a("a"),ZAr=o("FlaxRobertaForMultipleChoice"),e0r=o(" (RoBERTa model)"),o0r=l(),x4=a("li"),S5e=a("strong"),r0r=o("roformer"),t0r=o(" \u2014 "),ZV=a("a"),a0r=o("FlaxRoFormerForMultipleChoice"),n0r=o(" (RoFormer model)"),s0r=l(),P5e=a("p"),l0r=o("Examples:"),i0r=l(),f(fL.$$.fragment),vke=l(),yf=a("h2"),k4=a("a"),$5e=a("span"),f(mL.$$.fragment),d0r=l(),I5e=a("span"),c0r=o("FlaxAutoModelForNextSentencePrediction"),Tke=l(),Nr=a("div"),f(gL.$$.fragment),f0r=l(),wf=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),j5e=a("code"),g0r=o("from_pretrained()"),h0r=o("class method or the "),D5e=a("code"),p0r=o("from_config()"),_0r=o(`class
method.`),u0r=l(),hL=a("p"),b0r=o("This class cannot be instantiated directly using "),N5e=a("code"),v0r=o("__init__()"),T0r=o(" (throws an error)."),F0r=l(),St=a("div"),f(pL.$$.fragment),C0r=l(),q5e=a("p"),M0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E0r=l(),Af=a("p"),y0r=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G5e=a("code"),L0r=o("from_pretrained()"),B0r=o("to load the model weights."),x0r=l(),X5e=a("p"),k0r=o("Examples:"),R0r=l(),f(_L.$$.fragment),S0r=l(),Io=a("div"),f(uL.$$.fragment),P0r=l(),V5e=a("p"),$0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I0r=l(),Dn=a("p"),j0r=o("The model class to instantiate is selected based on the "),z5e=a("code"),D0r=o("model_type"),N0r=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),q0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),G0r=o("pretrained_model_name_or_path"),X0r=o(":"),V0r=l(),H5e=a("ul"),R4=a("li"),U5e=a("strong"),z0r=o("bert"),W0r=o(" \u2014 "),ez=a("a"),Q0r=o("FlaxBertForNextSentencePrediction"),H0r=o(" (BERT model)"),U0r=l(),J5e=a("p"),J0r=o("Examples:"),Y0r=l(),f(bL.$$.fragment),Fke=l(),Lf=a("h2"),S4=a("a"),Y5e=a("span"),f(vL.$$.fragment),K0r=l(),K5e=a("span"),Z0r=o("FlaxAutoModelForImageClassification"),Cke=l(),qr=a("div"),f(TL.$$.fragment),eLr=l(),Bf=a("p"),oLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Z5e=a("code"),rLr=o("from_pretrained()"),tLr=o("class method or the "),eve=a("code"),aLr=o("from_config()"),nLr=o(`class
method.`),sLr=l(),FL=a("p"),lLr=o("This class cannot be instantiated directly using "),ove=a("code"),iLr=o("__init__()"),dLr=o(" (throws an error)."),cLr=l(),Pt=a("div"),f(CL.$$.fragment),fLr=l(),rve=a("p"),mLr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gLr=l(),xf=a("p"),hLr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),pLr=o("not"),_Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ave=a("code"),uLr=o("from_pretrained()"),bLr=o("to load the model weights."),vLr=l(),nve=a("p"),TLr=o("Examples:"),FLr=l(),f(ML.$$.fragment),CLr=l(),jo=a("div"),f(EL.$$.fragment),MLr=l(),sve=a("p"),ELr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yLr=l(),Nn=a("p"),wLr=o("The model class to instantiate is selected based on the "),lve=a("code"),ALr=o("model_type"),LLr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),BLr=o("pretrained_model_name_or_path"),xLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),kLr=o("pretrained_model_name_or_path"),RLr=o(":"),SLr=l(),yL=a("ul"),P4=a("li"),cve=a("strong"),PLr=o("beit"),$Lr=o(" \u2014 "),oz=a("a"),ILr=o("FlaxBeitForImageClassification"),jLr=o(" (BEiT model)"),DLr=l(),$4=a("li"),fve=a("strong"),NLr=o("vit"),qLr=o(" \u2014 "),rz=a("a"),OLr=o("FlaxViTForImageClassification"),GLr=o(" (ViT model)"),XLr=l(),mve=a("p"),VLr=o("Examples:"),zLr=l(),f(wL.$$.fragment),Mke=l(),kf=a("h2"),I4=a("a"),gve=a("span"),f(AL.$$.fragment),WLr=l(),hve=a("span"),QLr=o("FlaxAutoModelForVision2Seq"),Eke=l(),Or=a("div"),f(LL.$$.fragment),HLr=l(),Rf=a("p"),ULr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pve=a("code"),JLr=o("from_pretrained()"),YLr=o("class method or the "),_ve=a("code"),KLr=o("from_config()"),ZLr=o(`class
method.`),e8r=l(),BL=a("p"),o8r=o("This class cannot be instantiated directly using "),uve=a("code"),r8r=o("__init__()"),t8r=o(" (throws an error)."),a8r=l(),$t=a("div"),f(xL.$$.fragment),n8r=l(),bve=a("p"),s8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),l8r=l(),Sf=a("p"),i8r=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),d8r=o("not"),c8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tve=a("code"),f8r=o("from_pretrained()"),m8r=o("to load the model weights."),g8r=l(),Fve=a("p"),h8r=o("Examples:"),p8r=l(),f(kL.$$.fragment),_8r=l(),Do=a("div"),f(RL.$$.fragment),u8r=l(),Cve=a("p"),b8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v8r=l(),qn=a("p"),T8r=o("The model class to instantiate is selected based on the "),Mve=a("code"),F8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),y8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),wve=a("ul"),j4=a("li"),Ave=a("strong"),L8r=o("vision-encoder-decoder"),B8r=o(" \u2014 "),tz=a("a"),x8r=o("FlaxVisionEncoderDecoderModel"),k8r=o(" (Vision Encoder decoder model)"),R8r=l(),Lve=a("p"),S8r=o("Examples:"),P8r=l(),f(SL.$$.fragment),this.h()},l(d){const u=Q5t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(d),de=n(d,"H1",{class:!0});var PL=s(de);me=n(PL,"A",{id:!0,class:!0,href:!0});var Bve=s(me);so=n(Bve,"SPAN",{});var xve=s(so);m(ce.$$.fragment,xve),xve.forEach(t),Bve.forEach(t),ue=i(PL),Go=n(PL,"SPAN",{});var I8r=s(Go);Ii=r(I8r,"Auto Classes"),I8r.forEach(t),PL.forEach(t),$f=i(d),ca=n(d,"P",{});var wke=s(ca);ji=r(wke,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(wke,"CODE",{});var j8r=s(Di);DM=r(j8r,"from_pretrained()"),j8r.forEach(t),If=r(wke,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wke.forEach(t),ye=i(d),co=n(d,"P",{});var D4=s(co);Ni=r(D4,"Instantiating one of "),On=n(D4,"A",{href:!0});var D8r=s(On);NM=r(D8r,"AutoConfig"),D8r.forEach(t),Gn=r(D4,", "),Xn=n(D4,"A",{href:!0});var N8r=s(Xn);qM=r(N8r,"AutoModel"),N8r.forEach(t),qi=r(D4,`, and
`),Vn=n(D4,"A",{href:!0});var q8r=s(Vn);OM=r(q8r,"AutoTokenizer"),q8r.forEach(t),Oi=r(D4," will directly create a class of the relevant architecture. For instance"),D4.forEach(t),jf=i(d),m(Na.$$.fragment,d),fo=i(d),ge=n(d,"P",{});var Ake=s(ge);k8=r(Ake,"will create a model that is an instance of "),Gi=n(Ake,"A",{href:!0});var O8r=s(Gi);R8=r(O8r,"BertModel"),O8r.forEach(t),S8=r(Ake,"."),Ake.forEach(t),Xo=i(d),qa=n(d,"P",{});var Lke=s(qa);P8=r(Lke,"There is one class of "),Df=n(Lke,"CODE",{});var G8r=s(Df);$8=r(G8r,"AutoModel"),G8r.forEach(t),DSe=r(Lke," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Lke.forEach(t),EBe=i(d),Xi=n(d,"H2",{class:!0});var Bke=s(Xi);Nf=n(Bke,"A",{id:!0,class:!0,href:!0});var X8r=s(Nf);JW=n(X8r,"SPAN",{});var V8r=s(JW);m(GM.$$.fragment,V8r),V8r.forEach(t),X8r.forEach(t),NSe=i(Bke),YW=n(Bke,"SPAN",{});var z8r=s(YW);qSe=r(z8r,"Extending the Auto Classes"),z8r.forEach(t),Bke.forEach(t),yBe=i(d),zn=n(d,"P",{});var az=s(zn);OSe=r(az,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KW=n(az,"CODE",{});var W8r=s(KW);GSe=r(W8r,"NewModel"),W8r.forEach(t),XSe=r(az,", make sure you have a "),ZW=n(az,"CODE",{});var Q8r=s(ZW);VSe=r(Q8r,"NewModelConfig"),Q8r.forEach(t),zSe=r(az,` then you can add those to the auto
classes like this:`),az.forEach(t),wBe=i(d),m(XM.$$.fragment,d),ABe=i(d),I8=n(d,"P",{});var H8r=s(I8);WSe=r(H8r,"You will then be able to use the auto classes like you would usually do!"),H8r.forEach(t),LBe=i(d),m(qf.$$.fragment,d),BBe=i(d),Vi=n(d,"H2",{class:!0});var xke=s(Vi);Of=n(xke,"A",{id:!0,class:!0,href:!0});var U8r=s(Of);eQ=n(U8r,"SPAN",{});var J8r=s(eQ);m(VM.$$.fragment,J8r),J8r.forEach(t),U8r.forEach(t),QSe=i(xke),oQ=n(xke,"SPAN",{});var Y8r=s(oQ);HSe=r(Y8r,"AutoConfig"),Y8r.forEach(t),xke.forEach(t),xBe=i(d),Vo=n(d,"DIV",{class:!0});var Gs=s(Vo);m(zM.$$.fragment,Gs),USe=i(Gs),WM=n(Gs,"P",{});var kke=s(WM);JSe=r(kke,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j8=n(kke,"A",{href:!0});var K8r=s(j8);YSe=r(K8r,"from_pretrained()"),K8r.forEach(t),KSe=r(kke," class method."),kke.forEach(t),ZSe=i(Gs),QM=n(Gs,"P",{});var Rke=s(QM);ePe=r(Rke,"This class cannot be instantiated directly using "),rQ=n(Rke,"CODE",{});var Z8r=s(rQ);oPe=r(Z8r,"__init__()"),Z8r.forEach(t),rPe=r(Rke," (throws an error)."),Rke.forEach(t),tPe=i(Gs),mo=n(Gs,"DIV",{class:!0});var ma=s(mo);m(HM.$$.fragment,ma),aPe=i(ma),tQ=n(ma,"P",{});var e7r=s(tQ);nPe=r(e7r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e7r.forEach(t),sPe=i(ma),zi=n(ma,"P",{});var nz=s(zi);lPe=r(nz,"The configuration class to instantiate is selected based on the "),aQ=n(nz,"CODE",{});var o7r=s(aQ);iPe=r(o7r,"model_type"),o7r.forEach(t),dPe=r(nz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nQ=n(nz,"CODE",{});var r7r=s(nQ);cPe=r(r7r,"pretrained_model_name_or_path"),r7r.forEach(t),fPe=r(nz,":"),nz.forEach(t),mPe=i(ma),v=n(ma,"UL",{});var T=s(v);Gf=n(T,"LI",{});var kve=s(Gf);sQ=n(kve,"STRONG",{});var t7r=s(sQ);gPe=r(t7r,"albert"),t7r.forEach(t),hPe=r(kve," \u2014 "),D8=n(kve,"A",{href:!0});var a7r=s(D8);pPe=r(a7r,"AlbertConfig"),a7r.forEach(t),_Pe=r(kve," (ALBERT model)"),kve.forEach(t),uPe=i(T),Xf=n(T,"LI",{});var Rve=s(Xf);lQ=n(Rve,"STRONG",{});var n7r=s(lQ);bPe=r(n7r,"bart"),n7r.forEach(t),vPe=r(Rve," \u2014 "),N8=n(Rve,"A",{href:!0});var s7r=s(N8);TPe=r(s7r,"BartConfig"),s7r.forEach(t),FPe=r(Rve," (BART model)"),Rve.forEach(t),CPe=i(T),Vf=n(T,"LI",{});var Sve=s(Vf);iQ=n(Sve,"STRONG",{});var l7r=s(iQ);MPe=r(l7r,"beit"),l7r.forEach(t),EPe=r(Sve," \u2014 "),q8=n(Sve,"A",{href:!0});var i7r=s(q8);yPe=r(i7r,"BeitConfig"),i7r.forEach(t),wPe=r(Sve," (BEiT model)"),Sve.forEach(t),APe=i(T),zf=n(T,"LI",{});var Pve=s(zf);dQ=n(Pve,"STRONG",{});var d7r=s(dQ);LPe=r(d7r,"bert"),d7r.forEach(t),BPe=r(Pve," \u2014 "),O8=n(Pve,"A",{href:!0});var c7r=s(O8);xPe=r(c7r,"BertConfig"),c7r.forEach(t),kPe=r(Pve," (BERT model)"),Pve.forEach(t),RPe=i(T),Wf=n(T,"LI",{});var $ve=s(Wf);cQ=n($ve,"STRONG",{});var f7r=s(cQ);SPe=r(f7r,"bert-generation"),f7r.forEach(t),PPe=r($ve," \u2014 "),G8=n($ve,"A",{href:!0});var m7r=s(G8);$Pe=r(m7r,"BertGenerationConfig"),m7r.forEach(t),IPe=r($ve," (Bert Generation model)"),$ve.forEach(t),jPe=i(T),Qf=n(T,"LI",{});var Ive=s(Qf);fQ=n(Ive,"STRONG",{});var g7r=s(fQ);DPe=r(g7r,"big_bird"),g7r.forEach(t),NPe=r(Ive," \u2014 "),X8=n(Ive,"A",{href:!0});var h7r=s(X8);qPe=r(h7r,"BigBirdConfig"),h7r.forEach(t),OPe=r(Ive," (BigBird model)"),Ive.forEach(t),GPe=i(T),Hf=n(T,"LI",{});var jve=s(Hf);mQ=n(jve,"STRONG",{});var p7r=s(mQ);XPe=r(p7r,"bigbird_pegasus"),p7r.forEach(t),VPe=r(jve," \u2014 "),V8=n(jve,"A",{href:!0});var _7r=s(V8);zPe=r(_7r,"BigBirdPegasusConfig"),_7r.forEach(t),WPe=r(jve," (BigBirdPegasus model)"),jve.forEach(t),QPe=i(T),Uf=n(T,"LI",{});var Dve=s(Uf);gQ=n(Dve,"STRONG",{});var u7r=s(gQ);HPe=r(u7r,"blenderbot"),u7r.forEach(t),UPe=r(Dve," \u2014 "),z8=n(Dve,"A",{href:!0});var b7r=s(z8);JPe=r(b7r,"BlenderbotConfig"),b7r.forEach(t),YPe=r(Dve," (Blenderbot model)"),Dve.forEach(t),KPe=i(T),Jf=n(T,"LI",{});var Nve=s(Jf);hQ=n(Nve,"STRONG",{});var v7r=s(hQ);ZPe=r(v7r,"blenderbot-small"),v7r.forEach(t),e$e=r(Nve," \u2014 "),W8=n(Nve,"A",{href:!0});var T7r=s(W8);o$e=r(T7r,"BlenderbotSmallConfig"),T7r.forEach(t),r$e=r(Nve," (BlenderbotSmall model)"),Nve.forEach(t),t$e=i(T),Yf=n(T,"LI",{});var qve=s(Yf);pQ=n(qve,"STRONG",{});var F7r=s(pQ);a$e=r(F7r,"camembert"),F7r.forEach(t),n$e=r(qve," \u2014 "),Q8=n(qve,"A",{href:!0});var C7r=s(Q8);s$e=r(C7r,"CamembertConfig"),C7r.forEach(t),l$e=r(qve," (CamemBERT model)"),qve.forEach(t),i$e=i(T),Kf=n(T,"LI",{});var Ove=s(Kf);_Q=n(Ove,"STRONG",{});var M7r=s(_Q);d$e=r(M7r,"canine"),M7r.forEach(t),c$e=r(Ove," \u2014 "),H8=n(Ove,"A",{href:!0});var E7r=s(H8);f$e=r(E7r,"CanineConfig"),E7r.forEach(t),m$e=r(Ove," (Canine model)"),Ove.forEach(t),g$e=i(T),Zf=n(T,"LI",{});var Gve=s(Zf);uQ=n(Gve,"STRONG",{});var y7r=s(uQ);h$e=r(y7r,"clip"),y7r.forEach(t),p$e=r(Gve," \u2014 "),U8=n(Gve,"A",{href:!0});var w7r=s(U8);_$e=r(w7r,"CLIPConfig"),w7r.forEach(t),u$e=r(Gve," (CLIP model)"),Gve.forEach(t),b$e=i(T),em=n(T,"LI",{});var Xve=s(em);bQ=n(Xve,"STRONG",{});var A7r=s(bQ);v$e=r(A7r,"convbert"),A7r.forEach(t),T$e=r(Xve," \u2014 "),J8=n(Xve,"A",{href:!0});var L7r=s(J8);F$e=r(L7r,"ConvBertConfig"),L7r.forEach(t),C$e=r(Xve," (ConvBERT model)"),Xve.forEach(t),M$e=i(T),om=n(T,"LI",{});var Vve=s(om);vQ=n(Vve,"STRONG",{});var B7r=s(vQ);E$e=r(B7r,"convnext"),B7r.forEach(t),y$e=r(Vve," \u2014 "),Y8=n(Vve,"A",{href:!0});var x7r=s(Y8);w$e=r(x7r,"ConvNextConfig"),x7r.forEach(t),A$e=r(Vve," (ConvNext model)"),Vve.forEach(t),L$e=i(T),rm=n(T,"LI",{});var zve=s(rm);TQ=n(zve,"STRONG",{});var k7r=s(TQ);B$e=r(k7r,"ctrl"),k7r.forEach(t),x$e=r(zve," \u2014 "),K8=n(zve,"A",{href:!0});var R7r=s(K8);k$e=r(R7r,"CTRLConfig"),R7r.forEach(t),R$e=r(zve," (CTRL model)"),zve.forEach(t),S$e=i(T),tm=n(T,"LI",{});var Wve=s(tm);FQ=n(Wve,"STRONG",{});var S7r=s(FQ);P$e=r(S7r,"data2vec-audio"),S7r.forEach(t),$$e=r(Wve," \u2014 "),Z8=n(Wve,"A",{href:!0});var P7r=s(Z8);I$e=r(P7r,"Data2VecAudioConfig"),P7r.forEach(t),j$e=r(Wve," (Data2VecAudio model)"),Wve.forEach(t),D$e=i(T),am=n(T,"LI",{});var Qve=s(am);CQ=n(Qve,"STRONG",{});var $7r=s(CQ);N$e=r($7r,"data2vec-text"),$7r.forEach(t),q$e=r(Qve," \u2014 "),e7=n(Qve,"A",{href:!0});var I7r=s(e7);O$e=r(I7r,"Data2VecTextConfig"),I7r.forEach(t),G$e=r(Qve," (Data2VecText model)"),Qve.forEach(t),X$e=i(T),nm=n(T,"LI",{});var Hve=s(nm);MQ=n(Hve,"STRONG",{});var j7r=s(MQ);V$e=r(j7r,"deberta"),j7r.forEach(t),z$e=r(Hve," \u2014 "),o7=n(Hve,"A",{href:!0});var D7r=s(o7);W$e=r(D7r,"DebertaConfig"),D7r.forEach(t),Q$e=r(Hve," (DeBERTa model)"),Hve.forEach(t),H$e=i(T),sm=n(T,"LI",{});var Uve=s(sm);EQ=n(Uve,"STRONG",{});var N7r=s(EQ);U$e=r(N7r,"deberta-v2"),N7r.forEach(t),J$e=r(Uve," \u2014 "),r7=n(Uve,"A",{href:!0});var q7r=s(r7);Y$e=r(q7r,"DebertaV2Config"),q7r.forEach(t),K$e=r(Uve," (DeBERTa-v2 model)"),Uve.forEach(t),Z$e=i(T),lm=n(T,"LI",{});var Jve=s(lm);yQ=n(Jve,"STRONG",{});var O7r=s(yQ);eIe=r(O7r,"deit"),O7r.forEach(t),oIe=r(Jve," \u2014 "),t7=n(Jve,"A",{href:!0});var G7r=s(t7);rIe=r(G7r,"DeiTConfig"),G7r.forEach(t),tIe=r(Jve," (DeiT model)"),Jve.forEach(t),aIe=i(T),im=n(T,"LI",{});var Yve=s(im);wQ=n(Yve,"STRONG",{});var X7r=s(wQ);nIe=r(X7r,"detr"),X7r.forEach(t),sIe=r(Yve," \u2014 "),a7=n(Yve,"A",{href:!0});var V7r=s(a7);lIe=r(V7r,"DetrConfig"),V7r.forEach(t),iIe=r(Yve," (DETR model)"),Yve.forEach(t),dIe=i(T),dm=n(T,"LI",{});var Kve=s(dm);AQ=n(Kve,"STRONG",{});var z7r=s(AQ);cIe=r(z7r,"distilbert"),z7r.forEach(t),fIe=r(Kve," \u2014 "),n7=n(Kve,"A",{href:!0});var W7r=s(n7);mIe=r(W7r,"DistilBertConfig"),W7r.forEach(t),gIe=r(Kve," (DistilBERT model)"),Kve.forEach(t),hIe=i(T),cm=n(T,"LI",{});var Zve=s(cm);LQ=n(Zve,"STRONG",{});var Q7r=s(LQ);pIe=r(Q7r,"dpr"),Q7r.forEach(t),_Ie=r(Zve," \u2014 "),s7=n(Zve,"A",{href:!0});var H7r=s(s7);uIe=r(H7r,"DPRConfig"),H7r.forEach(t),bIe=r(Zve," (DPR model)"),Zve.forEach(t),vIe=i(T),fm=n(T,"LI",{});var eTe=s(fm);BQ=n(eTe,"STRONG",{});var U7r=s(BQ);TIe=r(U7r,"electra"),U7r.forEach(t),FIe=r(eTe," \u2014 "),l7=n(eTe,"A",{href:!0});var J7r=s(l7);CIe=r(J7r,"ElectraConfig"),J7r.forEach(t),MIe=r(eTe," (ELECTRA model)"),eTe.forEach(t),EIe=i(T),mm=n(T,"LI",{});var oTe=s(mm);xQ=n(oTe,"STRONG",{});var Y7r=s(xQ);yIe=r(Y7r,"encoder-decoder"),Y7r.forEach(t),wIe=r(oTe," \u2014 "),i7=n(oTe,"A",{href:!0});var K7r=s(i7);AIe=r(K7r,"EncoderDecoderConfig"),K7r.forEach(t),LIe=r(oTe," (Encoder decoder model)"),oTe.forEach(t),BIe=i(T),gm=n(T,"LI",{});var rTe=s(gm);kQ=n(rTe,"STRONG",{});var Z7r=s(kQ);xIe=r(Z7r,"flaubert"),Z7r.forEach(t),kIe=r(rTe," \u2014 "),d7=n(rTe,"A",{href:!0});var eBr=s(d7);RIe=r(eBr,"FlaubertConfig"),eBr.forEach(t),SIe=r(rTe," (FlauBERT model)"),rTe.forEach(t),PIe=i(T),hm=n(T,"LI",{});var tTe=s(hm);RQ=n(tTe,"STRONG",{});var oBr=s(RQ);$Ie=r(oBr,"fnet"),oBr.forEach(t),IIe=r(tTe," \u2014 "),c7=n(tTe,"A",{href:!0});var rBr=s(c7);jIe=r(rBr,"FNetConfig"),rBr.forEach(t),DIe=r(tTe," (FNet model)"),tTe.forEach(t),NIe=i(T),pm=n(T,"LI",{});var aTe=s(pm);SQ=n(aTe,"STRONG",{});var tBr=s(SQ);qIe=r(tBr,"fsmt"),tBr.forEach(t),OIe=r(aTe," \u2014 "),f7=n(aTe,"A",{href:!0});var aBr=s(f7);GIe=r(aBr,"FSMTConfig"),aBr.forEach(t),XIe=r(aTe," (FairSeq Machine-Translation model)"),aTe.forEach(t),VIe=i(T),_m=n(T,"LI",{});var nTe=s(_m);PQ=n(nTe,"STRONG",{});var nBr=s(PQ);zIe=r(nBr,"funnel"),nBr.forEach(t),WIe=r(nTe," \u2014 "),m7=n(nTe,"A",{href:!0});var sBr=s(m7);QIe=r(sBr,"FunnelConfig"),sBr.forEach(t),HIe=r(nTe," (Funnel Transformer model)"),nTe.forEach(t),UIe=i(T),um=n(T,"LI",{});var sTe=s(um);$Q=n(sTe,"STRONG",{});var lBr=s($Q);JIe=r(lBr,"gpt2"),lBr.forEach(t),YIe=r(sTe," \u2014 "),g7=n(sTe,"A",{href:!0});var iBr=s(g7);KIe=r(iBr,"GPT2Config"),iBr.forEach(t),ZIe=r(sTe," (OpenAI GPT-2 model)"),sTe.forEach(t),eje=i(T),bm=n(T,"LI",{});var lTe=s(bm);IQ=n(lTe,"STRONG",{});var dBr=s(IQ);oje=r(dBr,"gpt_neo"),dBr.forEach(t),rje=r(lTe," \u2014 "),h7=n(lTe,"A",{href:!0});var cBr=s(h7);tje=r(cBr,"GPTNeoConfig"),cBr.forEach(t),aje=r(lTe," (GPT Neo model)"),lTe.forEach(t),nje=i(T),vm=n(T,"LI",{});var iTe=s(vm);jQ=n(iTe,"STRONG",{});var fBr=s(jQ);sje=r(fBr,"gptj"),fBr.forEach(t),lje=r(iTe," \u2014 "),p7=n(iTe,"A",{href:!0});var mBr=s(p7);ije=r(mBr,"GPTJConfig"),mBr.forEach(t),dje=r(iTe," (GPT-J model)"),iTe.forEach(t),cje=i(T),Tm=n(T,"LI",{});var dTe=s(Tm);DQ=n(dTe,"STRONG",{});var gBr=s(DQ);fje=r(gBr,"hubert"),gBr.forEach(t),mje=r(dTe," \u2014 "),_7=n(dTe,"A",{href:!0});var hBr=s(_7);gje=r(hBr,"HubertConfig"),hBr.forEach(t),hje=r(dTe," (Hubert model)"),dTe.forEach(t),pje=i(T),Fm=n(T,"LI",{});var cTe=s(Fm);NQ=n(cTe,"STRONG",{});var pBr=s(NQ);_je=r(pBr,"ibert"),pBr.forEach(t),uje=r(cTe," \u2014 "),u7=n(cTe,"A",{href:!0});var _Br=s(u7);bje=r(_Br,"IBertConfig"),_Br.forEach(t),vje=r(cTe," (I-BERT model)"),cTe.forEach(t),Tje=i(T),Cm=n(T,"LI",{});var fTe=s(Cm);qQ=n(fTe,"STRONG",{});var uBr=s(qQ);Fje=r(uBr,"imagegpt"),uBr.forEach(t),Cje=r(fTe," \u2014 "),b7=n(fTe,"A",{href:!0});var bBr=s(b7);Mje=r(bBr,"ImageGPTConfig"),bBr.forEach(t),Eje=r(fTe," (ImageGPT model)"),fTe.forEach(t),yje=i(T),Mm=n(T,"LI",{});var mTe=s(Mm);OQ=n(mTe,"STRONG",{});var vBr=s(OQ);wje=r(vBr,"layoutlm"),vBr.forEach(t),Aje=r(mTe," \u2014 "),v7=n(mTe,"A",{href:!0});var TBr=s(v7);Lje=r(TBr,"LayoutLMConfig"),TBr.forEach(t),Bje=r(mTe," (LayoutLM model)"),mTe.forEach(t),xje=i(T),Em=n(T,"LI",{});var gTe=s(Em);GQ=n(gTe,"STRONG",{});var FBr=s(GQ);kje=r(FBr,"layoutlmv2"),FBr.forEach(t),Rje=r(gTe," \u2014 "),T7=n(gTe,"A",{href:!0});var CBr=s(T7);Sje=r(CBr,"LayoutLMv2Config"),CBr.forEach(t),Pje=r(gTe," (LayoutLMv2 model)"),gTe.forEach(t),$je=i(T),ym=n(T,"LI",{});var hTe=s(ym);XQ=n(hTe,"STRONG",{});var MBr=s(XQ);Ije=r(MBr,"led"),MBr.forEach(t),jje=r(hTe," \u2014 "),F7=n(hTe,"A",{href:!0});var EBr=s(F7);Dje=r(EBr,"LEDConfig"),EBr.forEach(t),Nje=r(hTe," (LED model)"),hTe.forEach(t),qje=i(T),wm=n(T,"LI",{});var pTe=s(wm);VQ=n(pTe,"STRONG",{});var yBr=s(VQ);Oje=r(yBr,"longformer"),yBr.forEach(t),Gje=r(pTe," \u2014 "),C7=n(pTe,"A",{href:!0});var wBr=s(C7);Xje=r(wBr,"LongformerConfig"),wBr.forEach(t),Vje=r(pTe," (Longformer model)"),pTe.forEach(t),zje=i(T),Am=n(T,"LI",{});var _Te=s(Am);zQ=n(_Te,"STRONG",{});var ABr=s(zQ);Wje=r(ABr,"luke"),ABr.forEach(t),Qje=r(_Te," \u2014 "),M7=n(_Te,"A",{href:!0});var LBr=s(M7);Hje=r(LBr,"LukeConfig"),LBr.forEach(t),Uje=r(_Te," (LUKE model)"),_Te.forEach(t),Jje=i(T),Lm=n(T,"LI",{});var uTe=s(Lm);WQ=n(uTe,"STRONG",{});var BBr=s(WQ);Yje=r(BBr,"lxmert"),BBr.forEach(t),Kje=r(uTe," \u2014 "),E7=n(uTe,"A",{href:!0});var xBr=s(E7);Zje=r(xBr,"LxmertConfig"),xBr.forEach(t),eDe=r(uTe," (LXMERT model)"),uTe.forEach(t),oDe=i(T),Bm=n(T,"LI",{});var bTe=s(Bm);QQ=n(bTe,"STRONG",{});var kBr=s(QQ);rDe=r(kBr,"m2m_100"),kBr.forEach(t),tDe=r(bTe," \u2014 "),y7=n(bTe,"A",{href:!0});var RBr=s(y7);aDe=r(RBr,"M2M100Config"),RBr.forEach(t),nDe=r(bTe," (M2M100 model)"),bTe.forEach(t),sDe=i(T),xm=n(T,"LI",{});var vTe=s(xm);HQ=n(vTe,"STRONG",{});var SBr=s(HQ);lDe=r(SBr,"marian"),SBr.forEach(t),iDe=r(vTe," \u2014 "),w7=n(vTe,"A",{href:!0});var PBr=s(w7);dDe=r(PBr,"MarianConfig"),PBr.forEach(t),cDe=r(vTe," (Marian model)"),vTe.forEach(t),fDe=i(T),km=n(T,"LI",{});var TTe=s(km);UQ=n(TTe,"STRONG",{});var $Br=s(UQ);mDe=r($Br,"maskformer"),$Br.forEach(t),gDe=r(TTe," \u2014 "),A7=n(TTe,"A",{href:!0});var IBr=s(A7);hDe=r(IBr,"MaskFormerConfig"),IBr.forEach(t),pDe=r(TTe," (MaskFormer model)"),TTe.forEach(t),_De=i(T),Rm=n(T,"LI",{});var FTe=s(Rm);JQ=n(FTe,"STRONG",{});var jBr=s(JQ);uDe=r(jBr,"mbart"),jBr.forEach(t),bDe=r(FTe," \u2014 "),L7=n(FTe,"A",{href:!0});var DBr=s(L7);vDe=r(DBr,"MBartConfig"),DBr.forEach(t),TDe=r(FTe," (mBART model)"),FTe.forEach(t),FDe=i(T),Sm=n(T,"LI",{});var CTe=s(Sm);YQ=n(CTe,"STRONG",{});var NBr=s(YQ);CDe=r(NBr,"megatron-bert"),NBr.forEach(t),MDe=r(CTe," \u2014 "),B7=n(CTe,"A",{href:!0});var qBr=s(B7);EDe=r(qBr,"MegatronBertConfig"),qBr.forEach(t),yDe=r(CTe," (MegatronBert model)"),CTe.forEach(t),wDe=i(T),Pm=n(T,"LI",{});var MTe=s(Pm);KQ=n(MTe,"STRONG",{});var OBr=s(KQ);ADe=r(OBr,"mobilebert"),OBr.forEach(t),LDe=r(MTe," \u2014 "),x7=n(MTe,"A",{href:!0});var GBr=s(x7);BDe=r(GBr,"MobileBertConfig"),GBr.forEach(t),xDe=r(MTe," (MobileBERT model)"),MTe.forEach(t),kDe=i(T),$m=n(T,"LI",{});var ETe=s($m);ZQ=n(ETe,"STRONG",{});var XBr=s(ZQ);RDe=r(XBr,"mpnet"),XBr.forEach(t),SDe=r(ETe," \u2014 "),k7=n(ETe,"A",{href:!0});var VBr=s(k7);PDe=r(VBr,"MPNetConfig"),VBr.forEach(t),$De=r(ETe," (MPNet model)"),ETe.forEach(t),IDe=i(T),Im=n(T,"LI",{});var yTe=s(Im);eH=n(yTe,"STRONG",{});var zBr=s(eH);jDe=r(zBr,"mt5"),zBr.forEach(t),DDe=r(yTe," \u2014 "),R7=n(yTe,"A",{href:!0});var WBr=s(R7);NDe=r(WBr,"MT5Config"),WBr.forEach(t),qDe=r(yTe," (mT5 model)"),yTe.forEach(t),ODe=i(T),jm=n(T,"LI",{});var wTe=s(jm);oH=n(wTe,"STRONG",{});var QBr=s(oH);GDe=r(QBr,"nystromformer"),QBr.forEach(t),XDe=r(wTe," \u2014 "),S7=n(wTe,"A",{href:!0});var HBr=s(S7);VDe=r(HBr,"NystromformerConfig"),HBr.forEach(t),zDe=r(wTe," (Nystromformer model)"),wTe.forEach(t),WDe=i(T),Dm=n(T,"LI",{});var ATe=s(Dm);rH=n(ATe,"STRONG",{});var UBr=s(rH);QDe=r(UBr,"openai-gpt"),UBr.forEach(t),HDe=r(ATe," \u2014 "),P7=n(ATe,"A",{href:!0});var JBr=s(P7);UDe=r(JBr,"OpenAIGPTConfig"),JBr.forEach(t),JDe=r(ATe," (OpenAI GPT model)"),ATe.forEach(t),YDe=i(T),Nm=n(T,"LI",{});var LTe=s(Nm);tH=n(LTe,"STRONG",{});var YBr=s(tH);KDe=r(YBr,"pegasus"),YBr.forEach(t),ZDe=r(LTe," \u2014 "),$7=n(LTe,"A",{href:!0});var KBr=s($7);eNe=r(KBr,"PegasusConfig"),KBr.forEach(t),oNe=r(LTe," (Pegasus model)"),LTe.forEach(t),rNe=i(T),qm=n(T,"LI",{});var BTe=s(qm);aH=n(BTe,"STRONG",{});var ZBr=s(aH);tNe=r(ZBr,"perceiver"),ZBr.forEach(t),aNe=r(BTe," \u2014 "),I7=n(BTe,"A",{href:!0});var exr=s(I7);nNe=r(exr,"PerceiverConfig"),exr.forEach(t),sNe=r(BTe," (Perceiver model)"),BTe.forEach(t),lNe=i(T),Om=n(T,"LI",{});var xTe=s(Om);nH=n(xTe,"STRONG",{});var oxr=s(nH);iNe=r(oxr,"plbart"),oxr.forEach(t),dNe=r(xTe," \u2014 "),j7=n(xTe,"A",{href:!0});var rxr=s(j7);cNe=r(rxr,"PLBartConfig"),rxr.forEach(t),fNe=r(xTe," (PLBart model)"),xTe.forEach(t),mNe=i(T),Gm=n(T,"LI",{});var kTe=s(Gm);sH=n(kTe,"STRONG",{});var txr=s(sH);gNe=r(txr,"poolformer"),txr.forEach(t),hNe=r(kTe," \u2014 "),D7=n(kTe,"A",{href:!0});var axr=s(D7);pNe=r(axr,"PoolFormerConfig"),axr.forEach(t),_Ne=r(kTe," (PoolFormer model)"),kTe.forEach(t),uNe=i(T),Xm=n(T,"LI",{});var RTe=s(Xm);lH=n(RTe,"STRONG",{});var nxr=s(lH);bNe=r(nxr,"prophetnet"),nxr.forEach(t),vNe=r(RTe," \u2014 "),N7=n(RTe,"A",{href:!0});var sxr=s(N7);TNe=r(sxr,"ProphetNetConfig"),sxr.forEach(t),FNe=r(RTe," (ProphetNet model)"),RTe.forEach(t),CNe=i(T),Vm=n(T,"LI",{});var STe=s(Vm);iH=n(STe,"STRONG",{});var lxr=s(iH);MNe=r(lxr,"qdqbert"),lxr.forEach(t),ENe=r(STe," \u2014 "),q7=n(STe,"A",{href:!0});var ixr=s(q7);yNe=r(ixr,"QDQBertConfig"),ixr.forEach(t),wNe=r(STe," (QDQBert model)"),STe.forEach(t),ANe=i(T),zm=n(T,"LI",{});var PTe=s(zm);dH=n(PTe,"STRONG",{});var dxr=s(dH);LNe=r(dxr,"rag"),dxr.forEach(t),BNe=r(PTe," \u2014 "),O7=n(PTe,"A",{href:!0});var cxr=s(O7);xNe=r(cxr,"RagConfig"),cxr.forEach(t),kNe=r(PTe," (RAG model)"),PTe.forEach(t),RNe=i(T),Wm=n(T,"LI",{});var $Te=s(Wm);cH=n($Te,"STRONG",{});var fxr=s(cH);SNe=r(fxr,"realm"),fxr.forEach(t),PNe=r($Te," \u2014 "),G7=n($Te,"A",{href:!0});var mxr=s(G7);$Ne=r(mxr,"RealmConfig"),mxr.forEach(t),INe=r($Te," (Realm model)"),$Te.forEach(t),jNe=i(T),Qm=n(T,"LI",{});var ITe=s(Qm);fH=n(ITe,"STRONG",{});var gxr=s(fH);DNe=r(gxr,"reformer"),gxr.forEach(t),NNe=r(ITe," \u2014 "),X7=n(ITe,"A",{href:!0});var hxr=s(X7);qNe=r(hxr,"ReformerConfig"),hxr.forEach(t),ONe=r(ITe," (Reformer model)"),ITe.forEach(t),GNe=i(T),Hm=n(T,"LI",{});var jTe=s(Hm);mH=n(jTe,"STRONG",{});var pxr=s(mH);XNe=r(pxr,"rembert"),pxr.forEach(t),VNe=r(jTe," \u2014 "),V7=n(jTe,"A",{href:!0});var _xr=s(V7);zNe=r(_xr,"RemBertConfig"),_xr.forEach(t),WNe=r(jTe," (RemBERT model)"),jTe.forEach(t),QNe=i(T),Um=n(T,"LI",{});var DTe=s(Um);gH=n(DTe,"STRONG",{});var uxr=s(gH);HNe=r(uxr,"retribert"),uxr.forEach(t),UNe=r(DTe," \u2014 "),z7=n(DTe,"A",{href:!0});var bxr=s(z7);JNe=r(bxr,"RetriBertConfig"),bxr.forEach(t),YNe=r(DTe," (RetriBERT model)"),DTe.forEach(t),KNe=i(T),Jm=n(T,"LI",{});var NTe=s(Jm);hH=n(NTe,"STRONG",{});var vxr=s(hH);ZNe=r(vxr,"roberta"),vxr.forEach(t),eqe=r(NTe," \u2014 "),W7=n(NTe,"A",{href:!0});var Txr=s(W7);oqe=r(Txr,"RobertaConfig"),Txr.forEach(t),rqe=r(NTe," (RoBERTa model)"),NTe.forEach(t),tqe=i(T),Ym=n(T,"LI",{});var qTe=s(Ym);pH=n(qTe,"STRONG",{});var Fxr=s(pH);aqe=r(Fxr,"roformer"),Fxr.forEach(t),nqe=r(qTe," \u2014 "),Q7=n(qTe,"A",{href:!0});var Cxr=s(Q7);sqe=r(Cxr,"RoFormerConfig"),Cxr.forEach(t),lqe=r(qTe," (RoFormer model)"),qTe.forEach(t),iqe=i(T),Km=n(T,"LI",{});var OTe=s(Km);_H=n(OTe,"STRONG",{});var Mxr=s(_H);dqe=r(Mxr,"segformer"),Mxr.forEach(t),cqe=r(OTe," \u2014 "),H7=n(OTe,"A",{href:!0});var Exr=s(H7);fqe=r(Exr,"SegformerConfig"),Exr.forEach(t),mqe=r(OTe," (SegFormer model)"),OTe.forEach(t),gqe=i(T),Zm=n(T,"LI",{});var GTe=s(Zm);uH=n(GTe,"STRONG",{});var yxr=s(uH);hqe=r(yxr,"sew"),yxr.forEach(t),pqe=r(GTe," \u2014 "),U7=n(GTe,"A",{href:!0});var wxr=s(U7);_qe=r(wxr,"SEWConfig"),wxr.forEach(t),uqe=r(GTe," (SEW model)"),GTe.forEach(t),bqe=i(T),eg=n(T,"LI",{});var XTe=s(eg);bH=n(XTe,"STRONG",{});var Axr=s(bH);vqe=r(Axr,"sew-d"),Axr.forEach(t),Tqe=r(XTe," \u2014 "),J7=n(XTe,"A",{href:!0});var Lxr=s(J7);Fqe=r(Lxr,"SEWDConfig"),Lxr.forEach(t),Cqe=r(XTe," (SEW-D model)"),XTe.forEach(t),Mqe=i(T),og=n(T,"LI",{});var VTe=s(og);vH=n(VTe,"STRONG",{});var Bxr=s(vH);Eqe=r(Bxr,"speech-encoder-decoder"),Bxr.forEach(t),yqe=r(VTe," \u2014 "),Y7=n(VTe,"A",{href:!0});var xxr=s(Y7);wqe=r(xxr,"SpeechEncoderDecoderConfig"),xxr.forEach(t),Aqe=r(VTe," (Speech Encoder decoder model)"),VTe.forEach(t),Lqe=i(T),rg=n(T,"LI",{});var zTe=s(rg);TH=n(zTe,"STRONG",{});var kxr=s(TH);Bqe=r(kxr,"speech_to_text"),kxr.forEach(t),xqe=r(zTe," \u2014 "),K7=n(zTe,"A",{href:!0});var Rxr=s(K7);kqe=r(Rxr,"Speech2TextConfig"),Rxr.forEach(t),Rqe=r(zTe," (Speech2Text model)"),zTe.forEach(t),Sqe=i(T),tg=n(T,"LI",{});var WTe=s(tg);FH=n(WTe,"STRONG",{});var Sxr=s(FH);Pqe=r(Sxr,"speech_to_text_2"),Sxr.forEach(t),$qe=r(WTe," \u2014 "),Z7=n(WTe,"A",{href:!0});var Pxr=s(Z7);Iqe=r(Pxr,"Speech2Text2Config"),Pxr.forEach(t),jqe=r(WTe," (Speech2Text2 model)"),WTe.forEach(t),Dqe=i(T),ag=n(T,"LI",{});var QTe=s(ag);CH=n(QTe,"STRONG",{});var $xr=s(CH);Nqe=r($xr,"splinter"),$xr.forEach(t),qqe=r(QTe," \u2014 "),eB=n(QTe,"A",{href:!0});var Ixr=s(eB);Oqe=r(Ixr,"SplinterConfig"),Ixr.forEach(t),Gqe=r(QTe," (Splinter model)"),QTe.forEach(t),Xqe=i(T),ng=n(T,"LI",{});var HTe=s(ng);MH=n(HTe,"STRONG",{});var jxr=s(MH);Vqe=r(jxr,"squeezebert"),jxr.forEach(t),zqe=r(HTe," \u2014 "),oB=n(HTe,"A",{href:!0});var Dxr=s(oB);Wqe=r(Dxr,"SqueezeBertConfig"),Dxr.forEach(t),Qqe=r(HTe," (SqueezeBERT model)"),HTe.forEach(t),Hqe=i(T),sg=n(T,"LI",{});var UTe=s(sg);EH=n(UTe,"STRONG",{});var Nxr=s(EH);Uqe=r(Nxr,"swin"),Nxr.forEach(t),Jqe=r(UTe," \u2014 "),rB=n(UTe,"A",{href:!0});var qxr=s(rB);Yqe=r(qxr,"SwinConfig"),qxr.forEach(t),Kqe=r(UTe," (Swin model)"),UTe.forEach(t),Zqe=i(T),lg=n(T,"LI",{});var JTe=s(lg);yH=n(JTe,"STRONG",{});var Oxr=s(yH);eOe=r(Oxr,"t5"),Oxr.forEach(t),oOe=r(JTe," \u2014 "),tB=n(JTe,"A",{href:!0});var Gxr=s(tB);rOe=r(Gxr,"T5Config"),Gxr.forEach(t),tOe=r(JTe," (T5 model)"),JTe.forEach(t),aOe=i(T),ig=n(T,"LI",{});var YTe=s(ig);wH=n(YTe,"STRONG",{});var Xxr=s(wH);nOe=r(Xxr,"tapas"),Xxr.forEach(t),sOe=r(YTe," \u2014 "),aB=n(YTe,"A",{href:!0});var Vxr=s(aB);lOe=r(Vxr,"TapasConfig"),Vxr.forEach(t),iOe=r(YTe," (TAPAS model)"),YTe.forEach(t),dOe=i(T),dg=n(T,"LI",{});var KTe=s(dg);AH=n(KTe,"STRONG",{});var zxr=s(AH);cOe=r(zxr,"transfo-xl"),zxr.forEach(t),fOe=r(KTe," \u2014 "),nB=n(KTe,"A",{href:!0});var Wxr=s(nB);mOe=r(Wxr,"TransfoXLConfig"),Wxr.forEach(t),gOe=r(KTe," (Transformer-XL model)"),KTe.forEach(t),hOe=i(T),cg=n(T,"LI",{});var ZTe=s(cg);LH=n(ZTe,"STRONG",{});var Qxr=s(LH);pOe=r(Qxr,"trocr"),Qxr.forEach(t),_Oe=r(ZTe," \u2014 "),sB=n(ZTe,"A",{href:!0});var Hxr=s(sB);uOe=r(Hxr,"TrOCRConfig"),Hxr.forEach(t),bOe=r(ZTe," (TrOCR model)"),ZTe.forEach(t),vOe=i(T),fg=n(T,"LI",{});var eFe=s(fg);BH=n(eFe,"STRONG",{});var Uxr=s(BH);TOe=r(Uxr,"unispeech"),Uxr.forEach(t),FOe=r(eFe," \u2014 "),lB=n(eFe,"A",{href:!0});var Jxr=s(lB);COe=r(Jxr,"UniSpeechConfig"),Jxr.forEach(t),MOe=r(eFe," (UniSpeech model)"),eFe.forEach(t),EOe=i(T),mg=n(T,"LI",{});var oFe=s(mg);xH=n(oFe,"STRONG",{});var Yxr=s(xH);yOe=r(Yxr,"unispeech-sat"),Yxr.forEach(t),wOe=r(oFe," \u2014 "),iB=n(oFe,"A",{href:!0});var Kxr=s(iB);AOe=r(Kxr,"UniSpeechSatConfig"),Kxr.forEach(t),LOe=r(oFe," (UniSpeechSat model)"),oFe.forEach(t),BOe=i(T),gg=n(T,"LI",{});var rFe=s(gg);kH=n(rFe,"STRONG",{});var Zxr=s(kH);xOe=r(Zxr,"vilt"),Zxr.forEach(t),kOe=r(rFe," \u2014 "),dB=n(rFe,"A",{href:!0});var ekr=s(dB);ROe=r(ekr,"ViltConfig"),ekr.forEach(t),SOe=r(rFe," (ViLT model)"),rFe.forEach(t),POe=i(T),hg=n(T,"LI",{});var tFe=s(hg);RH=n(tFe,"STRONG",{});var okr=s(RH);$Oe=r(okr,"vision-encoder-decoder"),okr.forEach(t),IOe=r(tFe," \u2014 "),cB=n(tFe,"A",{href:!0});var rkr=s(cB);jOe=r(rkr,"VisionEncoderDecoderConfig"),rkr.forEach(t),DOe=r(tFe," (Vision Encoder decoder model)"),tFe.forEach(t),NOe=i(T),pg=n(T,"LI",{});var aFe=s(pg);SH=n(aFe,"STRONG",{});var tkr=s(SH);qOe=r(tkr,"vision-text-dual-encoder"),tkr.forEach(t),OOe=r(aFe," \u2014 "),fB=n(aFe,"A",{href:!0});var akr=s(fB);GOe=r(akr,"VisionTextDualEncoderConfig"),akr.forEach(t),XOe=r(aFe," (VisionTextDualEncoder model)"),aFe.forEach(t),VOe=i(T),_g=n(T,"LI",{});var nFe=s(_g);PH=n(nFe,"STRONG",{});var nkr=s(PH);zOe=r(nkr,"visual_bert"),nkr.forEach(t),WOe=r(nFe," \u2014 "),mB=n(nFe,"A",{href:!0});var skr=s(mB);QOe=r(skr,"VisualBertConfig"),skr.forEach(t),HOe=r(nFe," (VisualBert model)"),nFe.forEach(t),UOe=i(T),ug=n(T,"LI",{});var sFe=s(ug);$H=n(sFe,"STRONG",{});var lkr=s($H);JOe=r(lkr,"vit"),lkr.forEach(t),YOe=r(sFe," \u2014 "),gB=n(sFe,"A",{href:!0});var ikr=s(gB);KOe=r(ikr,"ViTConfig"),ikr.forEach(t),ZOe=r(sFe," (ViT model)"),sFe.forEach(t),eGe=i(T),bg=n(T,"LI",{});var lFe=s(bg);IH=n(lFe,"STRONG",{});var dkr=s(IH);oGe=r(dkr,"vit_mae"),dkr.forEach(t),rGe=r(lFe," \u2014 "),hB=n(lFe,"A",{href:!0});var ckr=s(hB);tGe=r(ckr,"ViTMAEConfig"),ckr.forEach(t),aGe=r(lFe," (ViTMAE model)"),lFe.forEach(t),nGe=i(T),vg=n(T,"LI",{});var iFe=s(vg);jH=n(iFe,"STRONG",{});var fkr=s(jH);sGe=r(fkr,"wav2vec2"),fkr.forEach(t),lGe=r(iFe," \u2014 "),pB=n(iFe,"A",{href:!0});var mkr=s(pB);iGe=r(mkr,"Wav2Vec2Config"),mkr.forEach(t),dGe=r(iFe," (Wav2Vec2 model)"),iFe.forEach(t),cGe=i(T),Tg=n(T,"LI",{});var dFe=s(Tg);DH=n(dFe,"STRONG",{});var gkr=s(DH);fGe=r(gkr,"wavlm"),gkr.forEach(t),mGe=r(dFe," \u2014 "),_B=n(dFe,"A",{href:!0});var hkr=s(_B);gGe=r(hkr,"WavLMConfig"),hkr.forEach(t),hGe=r(dFe," (WavLM model)"),dFe.forEach(t),pGe=i(T),Fg=n(T,"LI",{});var cFe=s(Fg);NH=n(cFe,"STRONG",{});var pkr=s(NH);_Ge=r(pkr,"xglm"),pkr.forEach(t),uGe=r(cFe," \u2014 "),uB=n(cFe,"A",{href:!0});var _kr=s(uB);bGe=r(_kr,"XGLMConfig"),_kr.forEach(t),vGe=r(cFe," (XGLM model)"),cFe.forEach(t),TGe=i(T),Cg=n(T,"LI",{});var fFe=s(Cg);qH=n(fFe,"STRONG",{});var ukr=s(qH);FGe=r(ukr,"xlm"),ukr.forEach(t),CGe=r(fFe," \u2014 "),bB=n(fFe,"A",{href:!0});var bkr=s(bB);MGe=r(bkr,"XLMConfig"),bkr.forEach(t),EGe=r(fFe," (XLM model)"),fFe.forEach(t),yGe=i(T),Mg=n(T,"LI",{});var mFe=s(Mg);OH=n(mFe,"STRONG",{});var vkr=s(OH);wGe=r(vkr,"xlm-prophetnet"),vkr.forEach(t),AGe=r(mFe," \u2014 "),vB=n(mFe,"A",{href:!0});var Tkr=s(vB);LGe=r(Tkr,"XLMProphetNetConfig"),Tkr.forEach(t),BGe=r(mFe," (XLMProphetNet model)"),mFe.forEach(t),xGe=i(T),Eg=n(T,"LI",{});var gFe=s(Eg);GH=n(gFe,"STRONG",{});var Fkr=s(GH);kGe=r(Fkr,"xlm-roberta"),Fkr.forEach(t),RGe=r(gFe," \u2014 "),TB=n(gFe,"A",{href:!0});var Ckr=s(TB);SGe=r(Ckr,"XLMRobertaConfig"),Ckr.forEach(t),PGe=r(gFe," (XLM-RoBERTa model)"),gFe.forEach(t),$Ge=i(T),yg=n(T,"LI",{});var hFe=s(yg);XH=n(hFe,"STRONG",{});var Mkr=s(XH);IGe=r(Mkr,"xlm-roberta-xl"),Mkr.forEach(t),jGe=r(hFe," \u2014 "),FB=n(hFe,"A",{href:!0});var Ekr=s(FB);DGe=r(Ekr,"XLMRobertaXLConfig"),Ekr.forEach(t),NGe=r(hFe," (XLM-RoBERTa-XL model)"),hFe.forEach(t),qGe=i(T),wg=n(T,"LI",{});var pFe=s(wg);VH=n(pFe,"STRONG",{});var ykr=s(VH);OGe=r(ykr,"xlnet"),ykr.forEach(t),GGe=r(pFe," \u2014 "),CB=n(pFe,"A",{href:!0});var wkr=s(CB);XGe=r(wkr,"XLNetConfig"),wkr.forEach(t),VGe=r(pFe," (XLNet model)"),pFe.forEach(t),zGe=i(T),Ag=n(T,"LI",{});var _Fe=s(Ag);zH=n(_Fe,"STRONG",{});var Akr=s(zH);WGe=r(Akr,"yoso"),Akr.forEach(t),QGe=r(_Fe," \u2014 "),MB=n(_Fe,"A",{href:!0});var Lkr=s(MB);HGe=r(Lkr,"YosoConfig"),Lkr.forEach(t),UGe=r(_Fe," (YOSO model)"),_Fe.forEach(t),T.forEach(t),JGe=i(ma),WH=n(ma,"P",{});var Bkr=s(WH);YGe=r(Bkr,"Examples:"),Bkr.forEach(t),KGe=i(ma),m(UM.$$.fragment,ma),ma.forEach(t),ZGe=i(Gs),Lg=n(Gs,"DIV",{class:!0});var Ske=s(Lg);m(JM.$$.fragment,Ske),eXe=i(Ske),QH=n(Ske,"P",{});var xkr=s(QH);oXe=r(xkr,"Register a new configuration for this class."),xkr.forEach(t),Ske.forEach(t),Gs.forEach(t),kBe=i(d),Wi=n(d,"H2",{class:!0});var Pke=s(Wi);Bg=n(Pke,"A",{id:!0,class:!0,href:!0});var kkr=s(Bg);HH=n(kkr,"SPAN",{});var Rkr=s(HH);m(YM.$$.fragment,Rkr),Rkr.forEach(t),kkr.forEach(t),rXe=i(Pke),UH=n(Pke,"SPAN",{});var Skr=s(UH);tXe=r(Skr,"AutoTokenizer"),Skr.forEach(t),Pke.forEach(t),RBe=i(d),zo=n(d,"DIV",{class:!0});var Xs=s(zo);m(KM.$$.fragment,Xs),aXe=i(Xs),ZM=n(Xs,"P",{});var $ke=s(ZM);nXe=r($ke,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),EB=n($ke,"A",{href:!0});var Pkr=s(EB);sXe=r(Pkr,"AutoTokenizer.from_pretrained()"),Pkr.forEach(t),lXe=r($ke," class method."),$ke.forEach(t),iXe=i(Xs),eE=n(Xs,"P",{});var Ike=s(eE);dXe=r(Ike,"This class cannot be instantiated directly using "),JH=n(Ike,"CODE",{});var $kr=s(JH);cXe=r($kr,"__init__()"),$kr.forEach(t),fXe=r(Ike," (throws an error)."),Ike.forEach(t),mXe=i(Xs),go=n(Xs,"DIV",{class:!0});var ga=s(go);m(oE.$$.fragment,ga),gXe=i(ga),YH=n(ga,"P",{});var Ikr=s(YH);hXe=r(Ikr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ikr.forEach(t),pXe=i(ga),Oa=n(ga,"P",{});var N4=s(Oa);_Xe=r(N4,"The tokenizer class to instantiate is selected based on the "),KH=n(N4,"CODE",{});var jkr=s(KH);uXe=r(jkr,"model_type"),jkr.forEach(t),bXe=r(N4,` property of the config object (either
passed as an argument or loaded from `),ZH=n(N4,"CODE",{});var Dkr=s(ZH);vXe=r(Dkr,"pretrained_model_name_or_path"),Dkr.forEach(t),TXe=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eU=n(N4,"CODE",{});var Nkr=s(eU);FXe=r(Nkr,"pretrained_model_name_or_path"),Nkr.forEach(t),CXe=r(N4,":"),N4.forEach(t),MXe=i(ga),E=n(ga,"UL",{});var y=s(E);Wn=n(y,"LI",{});var $L=s(Wn);oU=n($L,"STRONG",{});var qkr=s(oU);EXe=r(qkr,"albert"),qkr.forEach(t),yXe=r($L," \u2014 "),yB=n($L,"A",{href:!0});var Okr=s(yB);wXe=r(Okr,"AlbertTokenizer"),Okr.forEach(t),AXe=r($L," or "),wB=n($L,"A",{href:!0});var Gkr=s(wB);LXe=r(Gkr,"AlbertTokenizerFast"),Gkr.forEach(t),BXe=r($L," (ALBERT model)"),$L.forEach(t),xXe=i(y),Qn=n(y,"LI",{});var IL=s(Qn);rU=n(IL,"STRONG",{});var Xkr=s(rU);kXe=r(Xkr,"bart"),Xkr.forEach(t),RXe=r(IL," \u2014 "),AB=n(IL,"A",{href:!0});var Vkr=s(AB);SXe=r(Vkr,"BartTokenizer"),Vkr.forEach(t),PXe=r(IL," or "),LB=n(IL,"A",{href:!0});var zkr=s(LB);$Xe=r(zkr,"BartTokenizerFast"),zkr.forEach(t),IXe=r(IL," (BART model)"),IL.forEach(t),jXe=i(y),Hn=n(y,"LI",{});var jL=s(Hn);tU=n(jL,"STRONG",{});var Wkr=s(tU);DXe=r(Wkr,"barthez"),Wkr.forEach(t),NXe=r(jL," \u2014 "),BB=n(jL,"A",{href:!0});var Qkr=s(BB);qXe=r(Qkr,"BarthezTokenizer"),Qkr.forEach(t),OXe=r(jL," or "),xB=n(jL,"A",{href:!0});var Hkr=s(xB);GXe=r(Hkr,"BarthezTokenizerFast"),Hkr.forEach(t),XXe=r(jL," (BARThez model)"),jL.forEach(t),VXe=i(y),xg=n(y,"LI",{});var uFe=s(xg);aU=n(uFe,"STRONG",{});var Ukr=s(aU);zXe=r(Ukr,"bartpho"),Ukr.forEach(t),WXe=r(uFe," \u2014 "),kB=n(uFe,"A",{href:!0});var Jkr=s(kB);QXe=r(Jkr,"BartphoTokenizer"),Jkr.forEach(t),HXe=r(uFe," (BARTpho model)"),uFe.forEach(t),UXe=i(y),Un=n(y,"LI",{});var DL=s(Un);nU=n(DL,"STRONG",{});var Ykr=s(nU);JXe=r(Ykr,"bert"),Ykr.forEach(t),YXe=r(DL," \u2014 "),RB=n(DL,"A",{href:!0});var Kkr=s(RB);KXe=r(Kkr,"BertTokenizer"),Kkr.forEach(t),ZXe=r(DL," or "),SB=n(DL,"A",{href:!0});var Zkr=s(SB);eVe=r(Zkr,"BertTokenizerFast"),Zkr.forEach(t),oVe=r(DL," (BERT model)"),DL.forEach(t),rVe=i(y),kg=n(y,"LI",{});var bFe=s(kg);sU=n(bFe,"STRONG",{});var eRr=s(sU);tVe=r(eRr,"bert-generation"),eRr.forEach(t),aVe=r(bFe," \u2014 "),PB=n(bFe,"A",{href:!0});var oRr=s(PB);nVe=r(oRr,"BertGenerationTokenizer"),oRr.forEach(t),sVe=r(bFe," (Bert Generation model)"),bFe.forEach(t),lVe=i(y),Rg=n(y,"LI",{});var vFe=s(Rg);lU=n(vFe,"STRONG",{});var rRr=s(lU);iVe=r(rRr,"bert-japanese"),rRr.forEach(t),dVe=r(vFe," \u2014 "),$B=n(vFe,"A",{href:!0});var tRr=s($B);cVe=r(tRr,"BertJapaneseTokenizer"),tRr.forEach(t),fVe=r(vFe," (BertJapanese model)"),vFe.forEach(t),mVe=i(y),Sg=n(y,"LI",{});var TFe=s(Sg);iU=n(TFe,"STRONG",{});var aRr=s(iU);gVe=r(aRr,"bertweet"),aRr.forEach(t),hVe=r(TFe," \u2014 "),IB=n(TFe,"A",{href:!0});var nRr=s(IB);pVe=r(nRr,"BertweetTokenizer"),nRr.forEach(t),_Ve=r(TFe," (Bertweet model)"),TFe.forEach(t),uVe=i(y),Jn=n(y,"LI",{});var NL=s(Jn);dU=n(NL,"STRONG",{});var sRr=s(dU);bVe=r(sRr,"big_bird"),sRr.forEach(t),vVe=r(NL," \u2014 "),jB=n(NL,"A",{href:!0});var lRr=s(jB);TVe=r(lRr,"BigBirdTokenizer"),lRr.forEach(t),FVe=r(NL," or "),DB=n(NL,"A",{href:!0});var iRr=s(DB);CVe=r(iRr,"BigBirdTokenizerFast"),iRr.forEach(t),MVe=r(NL," (BigBird model)"),NL.forEach(t),EVe=i(y),Yn=n(y,"LI",{});var qL=s(Yn);cU=n(qL,"STRONG",{});var dRr=s(cU);yVe=r(dRr,"bigbird_pegasus"),dRr.forEach(t),wVe=r(qL," \u2014 "),NB=n(qL,"A",{href:!0});var cRr=s(NB);AVe=r(cRr,"PegasusTokenizer"),cRr.forEach(t),LVe=r(qL," or "),qB=n(qL,"A",{href:!0});var fRr=s(qB);BVe=r(fRr,"PegasusTokenizerFast"),fRr.forEach(t),xVe=r(qL," (BigBirdPegasus model)"),qL.forEach(t),kVe=i(y),Kn=n(y,"LI",{});var OL=s(Kn);fU=n(OL,"STRONG",{});var mRr=s(fU);RVe=r(mRr,"blenderbot"),mRr.forEach(t),SVe=r(OL," \u2014 "),OB=n(OL,"A",{href:!0});var gRr=s(OB);PVe=r(gRr,"BlenderbotTokenizer"),gRr.forEach(t),$Ve=r(OL," or "),GB=n(OL,"A",{href:!0});var hRr=s(GB);IVe=r(hRr,"BlenderbotTokenizerFast"),hRr.forEach(t),jVe=r(OL," (Blenderbot model)"),OL.forEach(t),DVe=i(y),Pg=n(y,"LI",{});var FFe=s(Pg);mU=n(FFe,"STRONG",{});var pRr=s(mU);NVe=r(pRr,"blenderbot-small"),pRr.forEach(t),qVe=r(FFe," \u2014 "),XB=n(FFe,"A",{href:!0});var _Rr=s(XB);OVe=r(_Rr,"BlenderbotSmallTokenizer"),_Rr.forEach(t),GVe=r(FFe," (BlenderbotSmall model)"),FFe.forEach(t),XVe=i(y),$g=n(y,"LI",{});var CFe=s($g);gU=n(CFe,"STRONG",{});var uRr=s(gU);VVe=r(uRr,"byt5"),uRr.forEach(t),zVe=r(CFe," \u2014 "),VB=n(CFe,"A",{href:!0});var bRr=s(VB);WVe=r(bRr,"ByT5Tokenizer"),bRr.forEach(t),QVe=r(CFe," (ByT5 model)"),CFe.forEach(t),HVe=i(y),Zn=n(y,"LI",{});var GL=s(Zn);hU=n(GL,"STRONG",{});var vRr=s(hU);UVe=r(vRr,"camembert"),vRr.forEach(t),JVe=r(GL," \u2014 "),zB=n(GL,"A",{href:!0});var TRr=s(zB);YVe=r(TRr,"CamembertTokenizer"),TRr.forEach(t),KVe=r(GL," or "),WB=n(GL,"A",{href:!0});var FRr=s(WB);ZVe=r(FRr,"CamembertTokenizerFast"),FRr.forEach(t),eze=r(GL," (CamemBERT model)"),GL.forEach(t),oze=i(y),Ig=n(y,"LI",{});var MFe=s(Ig);pU=n(MFe,"STRONG",{});var CRr=s(pU);rze=r(CRr,"canine"),CRr.forEach(t),tze=r(MFe," \u2014 "),QB=n(MFe,"A",{href:!0});var MRr=s(QB);aze=r(MRr,"CanineTokenizer"),MRr.forEach(t),nze=r(MFe," (Canine model)"),MFe.forEach(t),sze=i(y),es=n(y,"LI",{});var XL=s(es);_U=n(XL,"STRONG",{});var ERr=s(_U);lze=r(ERr,"clip"),ERr.forEach(t),ize=r(XL," \u2014 "),HB=n(XL,"A",{href:!0});var yRr=s(HB);dze=r(yRr,"CLIPTokenizer"),yRr.forEach(t),cze=r(XL," or "),UB=n(XL,"A",{href:!0});var wRr=s(UB);fze=r(wRr,"CLIPTokenizerFast"),wRr.forEach(t),mze=r(XL," (CLIP model)"),XL.forEach(t),gze=i(y),os=n(y,"LI",{});var VL=s(os);uU=n(VL,"STRONG",{});var ARr=s(uU);hze=r(ARr,"convbert"),ARr.forEach(t),pze=r(VL," \u2014 "),JB=n(VL,"A",{href:!0});var LRr=s(JB);_ze=r(LRr,"ConvBertTokenizer"),LRr.forEach(t),uze=r(VL," or "),YB=n(VL,"A",{href:!0});var BRr=s(YB);bze=r(BRr,"ConvBertTokenizerFast"),BRr.forEach(t),vze=r(VL," (ConvBERT model)"),VL.forEach(t),Tze=i(y),rs=n(y,"LI",{});var zL=s(rs);bU=n(zL,"STRONG",{});var xRr=s(bU);Fze=r(xRr,"cpm"),xRr.forEach(t),Cze=r(zL," \u2014 "),KB=n(zL,"A",{href:!0});var kRr=s(KB);Mze=r(kRr,"CpmTokenizer"),kRr.forEach(t),Eze=r(zL," or "),vU=n(zL,"CODE",{});var RRr=s(vU);yze=r(RRr,"CpmTokenizerFast"),RRr.forEach(t),wze=r(zL," (CPM model)"),zL.forEach(t),Aze=i(y),jg=n(y,"LI",{});var EFe=s(jg);TU=n(EFe,"STRONG",{});var SRr=s(TU);Lze=r(SRr,"ctrl"),SRr.forEach(t),Bze=r(EFe," \u2014 "),ZB=n(EFe,"A",{href:!0});var PRr=s(ZB);xze=r(PRr,"CTRLTokenizer"),PRr.forEach(t),kze=r(EFe," (CTRL model)"),EFe.forEach(t),Rze=i(y),ts=n(y,"LI",{});var WL=s(ts);FU=n(WL,"STRONG",{});var $Rr=s(FU);Sze=r($Rr,"deberta"),$Rr.forEach(t),Pze=r(WL," \u2014 "),ex=n(WL,"A",{href:!0});var IRr=s(ex);$ze=r(IRr,"DebertaTokenizer"),IRr.forEach(t),Ize=r(WL," or "),ox=n(WL,"A",{href:!0});var jRr=s(ox);jze=r(jRr,"DebertaTokenizerFast"),jRr.forEach(t),Dze=r(WL," (DeBERTa model)"),WL.forEach(t),Nze=i(y),Dg=n(y,"LI",{});var yFe=s(Dg);CU=n(yFe,"STRONG",{});var DRr=s(CU);qze=r(DRr,"deberta-v2"),DRr.forEach(t),Oze=r(yFe," \u2014 "),rx=n(yFe,"A",{href:!0});var NRr=s(rx);Gze=r(NRr,"DebertaV2Tokenizer"),NRr.forEach(t),Xze=r(yFe," (DeBERTa-v2 model)"),yFe.forEach(t),Vze=i(y),as=n(y,"LI",{});var QL=s(as);MU=n(QL,"STRONG",{});var qRr=s(MU);zze=r(qRr,"distilbert"),qRr.forEach(t),Wze=r(QL," \u2014 "),tx=n(QL,"A",{href:!0});var ORr=s(tx);Qze=r(ORr,"DistilBertTokenizer"),ORr.forEach(t),Hze=r(QL," or "),ax=n(QL,"A",{href:!0});var GRr=s(ax);Uze=r(GRr,"DistilBertTokenizerFast"),GRr.forEach(t),Jze=r(QL," (DistilBERT model)"),QL.forEach(t),Yze=i(y),ns=n(y,"LI",{});var HL=s(ns);EU=n(HL,"STRONG",{});var XRr=s(EU);Kze=r(XRr,"dpr"),XRr.forEach(t),Zze=r(HL," \u2014 "),nx=n(HL,"A",{href:!0});var VRr=s(nx);eWe=r(VRr,"DPRQuestionEncoderTokenizer"),VRr.forEach(t),oWe=r(HL," or "),sx=n(HL,"A",{href:!0});var zRr=s(sx);rWe=r(zRr,"DPRQuestionEncoderTokenizerFast"),zRr.forEach(t),tWe=r(HL," (DPR model)"),HL.forEach(t),aWe=i(y),ss=n(y,"LI",{});var UL=s(ss);yU=n(UL,"STRONG",{});var WRr=s(yU);nWe=r(WRr,"electra"),WRr.forEach(t),sWe=r(UL," \u2014 "),lx=n(UL,"A",{href:!0});var QRr=s(lx);lWe=r(QRr,"ElectraTokenizer"),QRr.forEach(t),iWe=r(UL," or "),ix=n(UL,"A",{href:!0});var HRr=s(ix);dWe=r(HRr,"ElectraTokenizerFast"),HRr.forEach(t),cWe=r(UL," (ELECTRA model)"),UL.forEach(t),fWe=i(y),Ng=n(y,"LI",{});var wFe=s(Ng);wU=n(wFe,"STRONG",{});var URr=s(wU);mWe=r(URr,"flaubert"),URr.forEach(t),gWe=r(wFe," \u2014 "),dx=n(wFe,"A",{href:!0});var JRr=s(dx);hWe=r(JRr,"FlaubertTokenizer"),JRr.forEach(t),pWe=r(wFe," (FlauBERT model)"),wFe.forEach(t),_We=i(y),ls=n(y,"LI",{});var JL=s(ls);AU=n(JL,"STRONG",{});var YRr=s(AU);uWe=r(YRr,"fnet"),YRr.forEach(t),bWe=r(JL," \u2014 "),cx=n(JL,"A",{href:!0});var KRr=s(cx);vWe=r(KRr,"FNetTokenizer"),KRr.forEach(t),TWe=r(JL," or "),fx=n(JL,"A",{href:!0});var ZRr=s(fx);FWe=r(ZRr,"FNetTokenizerFast"),ZRr.forEach(t),CWe=r(JL," (FNet model)"),JL.forEach(t),MWe=i(y),qg=n(y,"LI",{});var AFe=s(qg);LU=n(AFe,"STRONG",{});var eSr=s(LU);EWe=r(eSr,"fsmt"),eSr.forEach(t),yWe=r(AFe," \u2014 "),mx=n(AFe,"A",{href:!0});var oSr=s(mx);wWe=r(oSr,"FSMTTokenizer"),oSr.forEach(t),AWe=r(AFe," (FairSeq Machine-Translation model)"),AFe.forEach(t),LWe=i(y),is=n(y,"LI",{});var YL=s(is);BU=n(YL,"STRONG",{});var rSr=s(BU);BWe=r(rSr,"funnel"),rSr.forEach(t),xWe=r(YL," \u2014 "),gx=n(YL,"A",{href:!0});var tSr=s(gx);kWe=r(tSr,"FunnelTokenizer"),tSr.forEach(t),RWe=r(YL," or "),hx=n(YL,"A",{href:!0});var aSr=s(hx);SWe=r(aSr,"FunnelTokenizerFast"),aSr.forEach(t),PWe=r(YL," (Funnel Transformer model)"),YL.forEach(t),$We=i(y),ds=n(y,"LI",{});var KL=s(ds);xU=n(KL,"STRONG",{});var nSr=s(xU);IWe=r(nSr,"gpt2"),nSr.forEach(t),jWe=r(KL," \u2014 "),px=n(KL,"A",{href:!0});var sSr=s(px);DWe=r(sSr,"GPT2Tokenizer"),sSr.forEach(t),NWe=r(KL," or "),_x=n(KL,"A",{href:!0});var lSr=s(_x);qWe=r(lSr,"GPT2TokenizerFast"),lSr.forEach(t),OWe=r(KL," (OpenAI GPT-2 model)"),KL.forEach(t),GWe=i(y),cs=n(y,"LI",{});var ZL=s(cs);kU=n(ZL,"STRONG",{});var iSr=s(kU);XWe=r(iSr,"gpt_neo"),iSr.forEach(t),VWe=r(ZL," \u2014 "),ux=n(ZL,"A",{href:!0});var dSr=s(ux);zWe=r(dSr,"GPT2Tokenizer"),dSr.forEach(t),WWe=r(ZL," or "),bx=n(ZL,"A",{href:!0});var cSr=s(bx);QWe=r(cSr,"GPT2TokenizerFast"),cSr.forEach(t),HWe=r(ZL," (GPT Neo model)"),ZL.forEach(t),UWe=i(y),fs=n(y,"LI",{});var e8=s(fs);RU=n(e8,"STRONG",{});var fSr=s(RU);JWe=r(fSr,"herbert"),fSr.forEach(t),YWe=r(e8," \u2014 "),vx=n(e8,"A",{href:!0});var mSr=s(vx);KWe=r(mSr,"HerbertTokenizer"),mSr.forEach(t),ZWe=r(e8," or "),Tx=n(e8,"A",{href:!0});var gSr=s(Tx);eQe=r(gSr,"HerbertTokenizerFast"),gSr.forEach(t),oQe=r(e8," (HerBERT model)"),e8.forEach(t),rQe=i(y),Og=n(y,"LI",{});var LFe=s(Og);SU=n(LFe,"STRONG",{});var hSr=s(SU);tQe=r(hSr,"hubert"),hSr.forEach(t),aQe=r(LFe," \u2014 "),Fx=n(LFe,"A",{href:!0});var pSr=s(Fx);nQe=r(pSr,"Wav2Vec2CTCTokenizer"),pSr.forEach(t),sQe=r(LFe," (Hubert model)"),LFe.forEach(t),lQe=i(y),ms=n(y,"LI",{});var o8=s(ms);PU=n(o8,"STRONG",{});var _Sr=s(PU);iQe=r(_Sr,"ibert"),_Sr.forEach(t),dQe=r(o8," \u2014 "),Cx=n(o8,"A",{href:!0});var uSr=s(Cx);cQe=r(uSr,"RobertaTokenizer"),uSr.forEach(t),fQe=r(o8," or "),Mx=n(o8,"A",{href:!0});var bSr=s(Mx);mQe=r(bSr,"RobertaTokenizerFast"),bSr.forEach(t),gQe=r(o8," (I-BERT model)"),o8.forEach(t),hQe=i(y),gs=n(y,"LI",{});var r8=s(gs);$U=n(r8,"STRONG",{});var vSr=s($U);pQe=r(vSr,"layoutlm"),vSr.forEach(t),_Qe=r(r8," \u2014 "),Ex=n(r8,"A",{href:!0});var TSr=s(Ex);uQe=r(TSr,"LayoutLMTokenizer"),TSr.forEach(t),bQe=r(r8," or "),yx=n(r8,"A",{href:!0});var FSr=s(yx);vQe=r(FSr,"LayoutLMTokenizerFast"),FSr.forEach(t),TQe=r(r8," (LayoutLM model)"),r8.forEach(t),FQe=i(y),hs=n(y,"LI",{});var t8=s(hs);IU=n(t8,"STRONG",{});var CSr=s(IU);CQe=r(CSr,"layoutlmv2"),CSr.forEach(t),MQe=r(t8," \u2014 "),wx=n(t8,"A",{href:!0});var MSr=s(wx);EQe=r(MSr,"LayoutLMv2Tokenizer"),MSr.forEach(t),yQe=r(t8," or "),Ax=n(t8,"A",{href:!0});var ESr=s(Ax);wQe=r(ESr,"LayoutLMv2TokenizerFast"),ESr.forEach(t),AQe=r(t8," (LayoutLMv2 model)"),t8.forEach(t),LQe=i(y),ps=n(y,"LI",{});var a8=s(ps);jU=n(a8,"STRONG",{});var ySr=s(jU);BQe=r(ySr,"layoutxlm"),ySr.forEach(t),xQe=r(a8," \u2014 "),Lx=n(a8,"A",{href:!0});var wSr=s(Lx);kQe=r(wSr,"LayoutXLMTokenizer"),wSr.forEach(t),RQe=r(a8," or "),Bx=n(a8,"A",{href:!0});var ASr=s(Bx);SQe=r(ASr,"LayoutXLMTokenizerFast"),ASr.forEach(t),PQe=r(a8," (LayoutXLM model)"),a8.forEach(t),$Qe=i(y),_s=n(y,"LI",{});var n8=s(_s);DU=n(n8,"STRONG",{});var LSr=s(DU);IQe=r(LSr,"led"),LSr.forEach(t),jQe=r(n8," \u2014 "),xx=n(n8,"A",{href:!0});var BSr=s(xx);DQe=r(BSr,"LEDTokenizer"),BSr.forEach(t),NQe=r(n8," or "),kx=n(n8,"A",{href:!0});var xSr=s(kx);qQe=r(xSr,"LEDTokenizerFast"),xSr.forEach(t),OQe=r(n8," (LED model)"),n8.forEach(t),GQe=i(y),us=n(y,"LI",{});var s8=s(us);NU=n(s8,"STRONG",{});var kSr=s(NU);XQe=r(kSr,"longformer"),kSr.forEach(t),VQe=r(s8," \u2014 "),Rx=n(s8,"A",{href:!0});var RSr=s(Rx);zQe=r(RSr,"LongformerTokenizer"),RSr.forEach(t),WQe=r(s8," or "),Sx=n(s8,"A",{href:!0});var SSr=s(Sx);QQe=r(SSr,"LongformerTokenizerFast"),SSr.forEach(t),HQe=r(s8," (Longformer model)"),s8.forEach(t),UQe=i(y),Gg=n(y,"LI",{});var BFe=s(Gg);qU=n(BFe,"STRONG",{});var PSr=s(qU);JQe=r(PSr,"luke"),PSr.forEach(t),YQe=r(BFe," \u2014 "),Px=n(BFe,"A",{href:!0});var $Sr=s(Px);KQe=r($Sr,"LukeTokenizer"),$Sr.forEach(t),ZQe=r(BFe," (LUKE model)"),BFe.forEach(t),eHe=i(y),bs=n(y,"LI",{});var l8=s(bs);OU=n(l8,"STRONG",{});var ISr=s(OU);oHe=r(ISr,"lxmert"),ISr.forEach(t),rHe=r(l8," \u2014 "),$x=n(l8,"A",{href:!0});var jSr=s($x);tHe=r(jSr,"LxmertTokenizer"),jSr.forEach(t),aHe=r(l8," or "),Ix=n(l8,"A",{href:!0});var DSr=s(Ix);nHe=r(DSr,"LxmertTokenizerFast"),DSr.forEach(t),sHe=r(l8," (LXMERT model)"),l8.forEach(t),lHe=i(y),Xg=n(y,"LI",{});var xFe=s(Xg);GU=n(xFe,"STRONG",{});var NSr=s(GU);iHe=r(NSr,"m2m_100"),NSr.forEach(t),dHe=r(xFe," \u2014 "),jx=n(xFe,"A",{href:!0});var qSr=s(jx);cHe=r(qSr,"M2M100Tokenizer"),qSr.forEach(t),fHe=r(xFe," (M2M100 model)"),xFe.forEach(t),mHe=i(y),Vg=n(y,"LI",{});var kFe=s(Vg);XU=n(kFe,"STRONG",{});var OSr=s(XU);gHe=r(OSr,"marian"),OSr.forEach(t),hHe=r(kFe," \u2014 "),Dx=n(kFe,"A",{href:!0});var GSr=s(Dx);pHe=r(GSr,"MarianTokenizer"),GSr.forEach(t),_He=r(kFe," (Marian model)"),kFe.forEach(t),uHe=i(y),vs=n(y,"LI",{});var i8=s(vs);VU=n(i8,"STRONG",{});var XSr=s(VU);bHe=r(XSr,"mbart"),XSr.forEach(t),vHe=r(i8," \u2014 "),Nx=n(i8,"A",{href:!0});var VSr=s(Nx);THe=r(VSr,"MBartTokenizer"),VSr.forEach(t),FHe=r(i8," or "),qx=n(i8,"A",{href:!0});var zSr=s(qx);CHe=r(zSr,"MBartTokenizerFast"),zSr.forEach(t),MHe=r(i8," (mBART model)"),i8.forEach(t),EHe=i(y),Ts=n(y,"LI",{});var d8=s(Ts);zU=n(d8,"STRONG",{});var WSr=s(zU);yHe=r(WSr,"mbart50"),WSr.forEach(t),wHe=r(d8," \u2014 "),Ox=n(d8,"A",{href:!0});var QSr=s(Ox);AHe=r(QSr,"MBart50Tokenizer"),QSr.forEach(t),LHe=r(d8," or "),Gx=n(d8,"A",{href:!0});var HSr=s(Gx);BHe=r(HSr,"MBart50TokenizerFast"),HSr.forEach(t),xHe=r(d8," (mBART-50 model)"),d8.forEach(t),kHe=i(y),zg=n(y,"LI",{});var RFe=s(zg);WU=n(RFe,"STRONG",{});var USr=s(WU);RHe=r(USr,"mluke"),USr.forEach(t),SHe=r(RFe," \u2014 "),Xx=n(RFe,"A",{href:!0});var JSr=s(Xx);PHe=r(JSr,"MLukeTokenizer"),JSr.forEach(t),$He=r(RFe," (mLUKE model)"),RFe.forEach(t),IHe=i(y),Fs=n(y,"LI",{});var c8=s(Fs);QU=n(c8,"STRONG",{});var YSr=s(QU);jHe=r(YSr,"mobilebert"),YSr.forEach(t),DHe=r(c8," \u2014 "),Vx=n(c8,"A",{href:!0});var KSr=s(Vx);NHe=r(KSr,"MobileBertTokenizer"),KSr.forEach(t),qHe=r(c8," or "),zx=n(c8,"A",{href:!0});var ZSr=s(zx);OHe=r(ZSr,"MobileBertTokenizerFast"),ZSr.forEach(t),GHe=r(c8," (MobileBERT model)"),c8.forEach(t),XHe=i(y),Cs=n(y,"LI",{});var f8=s(Cs);HU=n(f8,"STRONG",{});var ePr=s(HU);VHe=r(ePr,"mpnet"),ePr.forEach(t),zHe=r(f8," \u2014 "),Wx=n(f8,"A",{href:!0});var oPr=s(Wx);WHe=r(oPr,"MPNetTokenizer"),oPr.forEach(t),QHe=r(f8," or "),Qx=n(f8,"A",{href:!0});var rPr=s(Qx);HHe=r(rPr,"MPNetTokenizerFast"),rPr.forEach(t),UHe=r(f8," (MPNet model)"),f8.forEach(t),JHe=i(y),Ms=n(y,"LI",{});var m8=s(Ms);UU=n(m8,"STRONG",{});var tPr=s(UU);YHe=r(tPr,"mt5"),tPr.forEach(t),KHe=r(m8," \u2014 "),Hx=n(m8,"A",{href:!0});var aPr=s(Hx);ZHe=r(aPr,"MT5Tokenizer"),aPr.forEach(t),eUe=r(m8," or "),Ux=n(m8,"A",{href:!0});var nPr=s(Ux);oUe=r(nPr,"MT5TokenizerFast"),nPr.forEach(t),rUe=r(m8," (mT5 model)"),m8.forEach(t),tUe=i(y),Es=n(y,"LI",{});var g8=s(Es);JU=n(g8,"STRONG",{});var sPr=s(JU);aUe=r(sPr,"openai-gpt"),sPr.forEach(t),nUe=r(g8," \u2014 "),Jx=n(g8,"A",{href:!0});var lPr=s(Jx);sUe=r(lPr,"OpenAIGPTTokenizer"),lPr.forEach(t),lUe=r(g8," or "),Yx=n(g8,"A",{href:!0});var iPr=s(Yx);iUe=r(iPr,"OpenAIGPTTokenizerFast"),iPr.forEach(t),dUe=r(g8," (OpenAI GPT model)"),g8.forEach(t),cUe=i(y),ys=n(y,"LI",{});var h8=s(ys);YU=n(h8,"STRONG",{});var dPr=s(YU);fUe=r(dPr,"pegasus"),dPr.forEach(t),mUe=r(h8," \u2014 "),Kx=n(h8,"A",{href:!0});var cPr=s(Kx);gUe=r(cPr,"PegasusTokenizer"),cPr.forEach(t),hUe=r(h8," or "),Zx=n(h8,"A",{href:!0});var fPr=s(Zx);pUe=r(fPr,"PegasusTokenizerFast"),fPr.forEach(t),_Ue=r(h8," (Pegasus model)"),h8.forEach(t),uUe=i(y),Wg=n(y,"LI",{});var SFe=s(Wg);KU=n(SFe,"STRONG",{});var mPr=s(KU);bUe=r(mPr,"perceiver"),mPr.forEach(t),vUe=r(SFe," \u2014 "),ek=n(SFe,"A",{href:!0});var gPr=s(ek);TUe=r(gPr,"PerceiverTokenizer"),gPr.forEach(t),FUe=r(SFe," (Perceiver model)"),SFe.forEach(t),CUe=i(y),Qg=n(y,"LI",{});var PFe=s(Qg);ZU=n(PFe,"STRONG",{});var hPr=s(ZU);MUe=r(hPr,"phobert"),hPr.forEach(t),EUe=r(PFe," \u2014 "),ok=n(PFe,"A",{href:!0});var pPr=s(ok);yUe=r(pPr,"PhobertTokenizer"),pPr.forEach(t),wUe=r(PFe," (PhoBERT model)"),PFe.forEach(t),AUe=i(y),Hg=n(y,"LI",{});var $Fe=s(Hg);eJ=n($Fe,"STRONG",{});var _Pr=s(eJ);LUe=r(_Pr,"plbart"),_Pr.forEach(t),BUe=r($Fe," \u2014 "),rk=n($Fe,"A",{href:!0});var uPr=s(rk);xUe=r(uPr,"PLBartTokenizer"),uPr.forEach(t),kUe=r($Fe," (PLBart model)"),$Fe.forEach(t),RUe=i(y),Ug=n(y,"LI",{});var IFe=s(Ug);oJ=n(IFe,"STRONG",{});var bPr=s(oJ);SUe=r(bPr,"prophetnet"),bPr.forEach(t),PUe=r(IFe," \u2014 "),tk=n(IFe,"A",{href:!0});var vPr=s(tk);$Ue=r(vPr,"ProphetNetTokenizer"),vPr.forEach(t),IUe=r(IFe," (ProphetNet model)"),IFe.forEach(t),jUe=i(y),ws=n(y,"LI",{});var p8=s(ws);rJ=n(p8,"STRONG",{});var TPr=s(rJ);DUe=r(TPr,"qdqbert"),TPr.forEach(t),NUe=r(p8," \u2014 "),ak=n(p8,"A",{href:!0});var FPr=s(ak);qUe=r(FPr,"BertTokenizer"),FPr.forEach(t),OUe=r(p8," or "),nk=n(p8,"A",{href:!0});var CPr=s(nk);GUe=r(CPr,"BertTokenizerFast"),CPr.forEach(t),XUe=r(p8," (QDQBert model)"),p8.forEach(t),VUe=i(y),Jg=n(y,"LI",{});var jFe=s(Jg);tJ=n(jFe,"STRONG",{});var MPr=s(tJ);zUe=r(MPr,"rag"),MPr.forEach(t),WUe=r(jFe," \u2014 "),sk=n(jFe,"A",{href:!0});var EPr=s(sk);QUe=r(EPr,"RagTokenizer"),EPr.forEach(t),HUe=r(jFe," (RAG model)"),jFe.forEach(t),UUe=i(y),As=n(y,"LI",{});var _8=s(As);aJ=n(_8,"STRONG",{});var yPr=s(aJ);JUe=r(yPr,"realm"),yPr.forEach(t),YUe=r(_8," \u2014 "),lk=n(_8,"A",{href:!0});var wPr=s(lk);KUe=r(wPr,"RealmTokenizer"),wPr.forEach(t),ZUe=r(_8," or "),ik=n(_8,"A",{href:!0});var APr=s(ik);eJe=r(APr,"RealmTokenizerFast"),APr.forEach(t),oJe=r(_8," (Realm model)"),_8.forEach(t),rJe=i(y),Ls=n(y,"LI",{});var u8=s(Ls);nJ=n(u8,"STRONG",{});var LPr=s(nJ);tJe=r(LPr,"reformer"),LPr.forEach(t),aJe=r(u8," \u2014 "),dk=n(u8,"A",{href:!0});var BPr=s(dk);nJe=r(BPr,"ReformerTokenizer"),BPr.forEach(t),sJe=r(u8," or "),ck=n(u8,"A",{href:!0});var xPr=s(ck);lJe=r(xPr,"ReformerTokenizerFast"),xPr.forEach(t),iJe=r(u8," (Reformer model)"),u8.forEach(t),dJe=i(y),Bs=n(y,"LI",{});var b8=s(Bs);sJ=n(b8,"STRONG",{});var kPr=s(sJ);cJe=r(kPr,"rembert"),kPr.forEach(t),fJe=r(b8," \u2014 "),fk=n(b8,"A",{href:!0});var RPr=s(fk);mJe=r(RPr,"RemBertTokenizer"),RPr.forEach(t),gJe=r(b8," or "),mk=n(b8,"A",{href:!0});var SPr=s(mk);hJe=r(SPr,"RemBertTokenizerFast"),SPr.forEach(t),pJe=r(b8," (RemBERT model)"),b8.forEach(t),_Je=i(y),xs=n(y,"LI",{});var v8=s(xs);lJ=n(v8,"STRONG",{});var PPr=s(lJ);uJe=r(PPr,"retribert"),PPr.forEach(t),bJe=r(v8," \u2014 "),gk=n(v8,"A",{href:!0});var $Pr=s(gk);vJe=r($Pr,"RetriBertTokenizer"),$Pr.forEach(t),TJe=r(v8," or "),hk=n(v8,"A",{href:!0});var IPr=s(hk);FJe=r(IPr,"RetriBertTokenizerFast"),IPr.forEach(t),CJe=r(v8," (RetriBERT model)"),v8.forEach(t),MJe=i(y),ks=n(y,"LI",{});var T8=s(ks);iJ=n(T8,"STRONG",{});var jPr=s(iJ);EJe=r(jPr,"roberta"),jPr.forEach(t),yJe=r(T8," \u2014 "),pk=n(T8,"A",{href:!0});var DPr=s(pk);wJe=r(DPr,"RobertaTokenizer"),DPr.forEach(t),AJe=r(T8," or "),_k=n(T8,"A",{href:!0});var NPr=s(_k);LJe=r(NPr,"RobertaTokenizerFast"),NPr.forEach(t),BJe=r(T8," (RoBERTa model)"),T8.forEach(t),xJe=i(y),Rs=n(y,"LI",{});var F8=s(Rs);dJ=n(F8,"STRONG",{});var qPr=s(dJ);kJe=r(qPr,"roformer"),qPr.forEach(t),RJe=r(F8," \u2014 "),uk=n(F8,"A",{href:!0});var OPr=s(uk);SJe=r(OPr,"RoFormerTokenizer"),OPr.forEach(t),PJe=r(F8," or "),bk=n(F8,"A",{href:!0});var GPr=s(bk);$Je=r(GPr,"RoFormerTokenizerFast"),GPr.forEach(t),IJe=r(F8," (RoFormer model)"),F8.forEach(t),jJe=i(y),Yg=n(y,"LI",{});var DFe=s(Yg);cJ=n(DFe,"STRONG",{});var XPr=s(cJ);DJe=r(XPr,"speech_to_text"),XPr.forEach(t),NJe=r(DFe," \u2014 "),vk=n(DFe,"A",{href:!0});var VPr=s(vk);qJe=r(VPr,"Speech2TextTokenizer"),VPr.forEach(t),OJe=r(DFe," (Speech2Text model)"),DFe.forEach(t),GJe=i(y),Kg=n(y,"LI",{});var NFe=s(Kg);fJ=n(NFe,"STRONG",{});var zPr=s(fJ);XJe=r(zPr,"speech_to_text_2"),zPr.forEach(t),VJe=r(NFe," \u2014 "),Tk=n(NFe,"A",{href:!0});var WPr=s(Tk);zJe=r(WPr,"Speech2Text2Tokenizer"),WPr.forEach(t),WJe=r(NFe," (Speech2Text2 model)"),NFe.forEach(t),QJe=i(y),Ss=n(y,"LI",{});var C8=s(Ss);mJ=n(C8,"STRONG",{});var QPr=s(mJ);HJe=r(QPr,"splinter"),QPr.forEach(t),UJe=r(C8," \u2014 "),Fk=n(C8,"A",{href:!0});var HPr=s(Fk);JJe=r(HPr,"SplinterTokenizer"),HPr.forEach(t),YJe=r(C8," or "),Ck=n(C8,"A",{href:!0});var UPr=s(Ck);KJe=r(UPr,"SplinterTokenizerFast"),UPr.forEach(t),ZJe=r(C8," (Splinter model)"),C8.forEach(t),eYe=i(y),Ps=n(y,"LI",{});var M8=s(Ps);gJ=n(M8,"STRONG",{});var JPr=s(gJ);oYe=r(JPr,"squeezebert"),JPr.forEach(t),rYe=r(M8," \u2014 "),Mk=n(M8,"A",{href:!0});var YPr=s(Mk);tYe=r(YPr,"SqueezeBertTokenizer"),YPr.forEach(t),aYe=r(M8," or "),Ek=n(M8,"A",{href:!0});var KPr=s(Ek);nYe=r(KPr,"SqueezeBertTokenizerFast"),KPr.forEach(t),sYe=r(M8," (SqueezeBERT model)"),M8.forEach(t),lYe=i(y),$s=n(y,"LI",{});var E8=s($s);hJ=n(E8,"STRONG",{});var ZPr=s(hJ);iYe=r(ZPr,"t5"),ZPr.forEach(t),dYe=r(E8," \u2014 "),yk=n(E8,"A",{href:!0});var e$r=s(yk);cYe=r(e$r,"T5Tokenizer"),e$r.forEach(t),fYe=r(E8," or "),wk=n(E8,"A",{href:!0});var o$r=s(wk);mYe=r(o$r,"T5TokenizerFast"),o$r.forEach(t),gYe=r(E8," (T5 model)"),E8.forEach(t),hYe=i(y),Zg=n(y,"LI",{});var qFe=s(Zg);pJ=n(qFe,"STRONG",{});var r$r=s(pJ);pYe=r(r$r,"tapas"),r$r.forEach(t),_Ye=r(qFe," \u2014 "),Ak=n(qFe,"A",{href:!0});var t$r=s(Ak);uYe=r(t$r,"TapasTokenizer"),t$r.forEach(t),bYe=r(qFe," (TAPAS model)"),qFe.forEach(t),vYe=i(y),eh=n(y,"LI",{});var OFe=s(eh);_J=n(OFe,"STRONG",{});var a$r=s(_J);TYe=r(a$r,"transfo-xl"),a$r.forEach(t),FYe=r(OFe," \u2014 "),Lk=n(OFe,"A",{href:!0});var n$r=s(Lk);CYe=r(n$r,"TransfoXLTokenizer"),n$r.forEach(t),MYe=r(OFe," (Transformer-XL model)"),OFe.forEach(t),EYe=i(y),oh=n(y,"LI",{});var GFe=s(oh);uJ=n(GFe,"STRONG",{});var s$r=s(uJ);yYe=r(s$r,"wav2vec2"),s$r.forEach(t),wYe=r(GFe," \u2014 "),Bk=n(GFe,"A",{href:!0});var l$r=s(Bk);AYe=r(l$r,"Wav2Vec2CTCTokenizer"),l$r.forEach(t),LYe=r(GFe," (Wav2Vec2 model)"),GFe.forEach(t),BYe=i(y),rh=n(y,"LI",{});var XFe=s(rh);bJ=n(XFe,"STRONG",{});var i$r=s(bJ);xYe=r(i$r,"wav2vec2_phoneme"),i$r.forEach(t),kYe=r(XFe," \u2014 "),xk=n(XFe,"A",{href:!0});var d$r=s(xk);RYe=r(d$r,"Wav2Vec2PhonemeCTCTokenizer"),d$r.forEach(t),SYe=r(XFe," (Wav2Vec2Phoneme model)"),XFe.forEach(t),PYe=i(y),Is=n(y,"LI",{});var y8=s(Is);vJ=n(y8,"STRONG",{});var c$r=s(vJ);$Ye=r(c$r,"xglm"),c$r.forEach(t),IYe=r(y8," \u2014 "),kk=n(y8,"A",{href:!0});var f$r=s(kk);jYe=r(f$r,"XGLMTokenizer"),f$r.forEach(t),DYe=r(y8," or "),Rk=n(y8,"A",{href:!0});var m$r=s(Rk);NYe=r(m$r,"XGLMTokenizerFast"),m$r.forEach(t),qYe=r(y8," (XGLM model)"),y8.forEach(t),OYe=i(y),th=n(y,"LI",{});var VFe=s(th);TJ=n(VFe,"STRONG",{});var g$r=s(TJ);GYe=r(g$r,"xlm"),g$r.forEach(t),XYe=r(VFe," \u2014 "),Sk=n(VFe,"A",{href:!0});var h$r=s(Sk);VYe=r(h$r,"XLMTokenizer"),h$r.forEach(t),zYe=r(VFe," (XLM model)"),VFe.forEach(t),WYe=i(y),ah=n(y,"LI",{});var zFe=s(ah);FJ=n(zFe,"STRONG",{});var p$r=s(FJ);QYe=r(p$r,"xlm-prophetnet"),p$r.forEach(t),HYe=r(zFe," \u2014 "),Pk=n(zFe,"A",{href:!0});var _$r=s(Pk);UYe=r(_$r,"XLMProphetNetTokenizer"),_$r.forEach(t),JYe=r(zFe," (XLMProphetNet model)"),zFe.forEach(t),YYe=i(y),js=n(y,"LI",{});var w8=s(js);CJ=n(w8,"STRONG",{});var u$r=s(CJ);KYe=r(u$r,"xlm-roberta"),u$r.forEach(t),ZYe=r(w8," \u2014 "),$k=n(w8,"A",{href:!0});var b$r=s($k);eKe=r(b$r,"XLMRobertaTokenizer"),b$r.forEach(t),oKe=r(w8," or "),Ik=n(w8,"A",{href:!0});var v$r=s(Ik);rKe=r(v$r,"XLMRobertaTokenizerFast"),v$r.forEach(t),tKe=r(w8," (XLM-RoBERTa model)"),w8.forEach(t),aKe=i(y),Ds=n(y,"LI",{});var A8=s(Ds);MJ=n(A8,"STRONG",{});var T$r=s(MJ);nKe=r(T$r,"xlnet"),T$r.forEach(t),sKe=r(A8," \u2014 "),jk=n(A8,"A",{href:!0});var F$r=s(jk);lKe=r(F$r,"XLNetTokenizer"),F$r.forEach(t),iKe=r(A8," or "),Dk=n(A8,"A",{href:!0});var C$r=s(Dk);dKe=r(C$r,"XLNetTokenizerFast"),C$r.forEach(t),cKe=r(A8," (XLNet model)"),A8.forEach(t),y.forEach(t),fKe=i(ga),EJ=n(ga,"P",{});var M$r=s(EJ);mKe=r(M$r,"Examples:"),M$r.forEach(t),gKe=i(ga),m(rE.$$.fragment,ga),ga.forEach(t),hKe=i(Xs),nh=n(Xs,"DIV",{class:!0});var jke=s(nh);m(tE.$$.fragment,jke),pKe=i(jke),yJ=n(jke,"P",{});var E$r=s(yJ);_Ke=r(E$r,"Register a new tokenizer in this mapping."),E$r.forEach(t),jke.forEach(t),Xs.forEach(t),SBe=i(d),Qi=n(d,"H2",{class:!0});var Dke=s(Qi);sh=n(Dke,"A",{id:!0,class:!0,href:!0});var y$r=s(sh);wJ=n(y$r,"SPAN",{});var w$r=s(wJ);m(aE.$$.fragment,w$r),w$r.forEach(t),y$r.forEach(t),uKe=i(Dke),AJ=n(Dke,"SPAN",{});var A$r=s(AJ);bKe=r(A$r,"AutoFeatureExtractor"),A$r.forEach(t),Dke.forEach(t),PBe=i(d),Wo=n(d,"DIV",{class:!0});var Vs=s(Wo);m(nE.$$.fragment,Vs),vKe=i(Vs),sE=n(Vs,"P",{});var Nke=s(sE);TKe=r(Nke,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Nk=n(Nke,"A",{href:!0});var L$r=s(Nk);FKe=r(L$r,"AutoFeatureExtractor.from_pretrained()"),L$r.forEach(t),CKe=r(Nke," class method."),Nke.forEach(t),MKe=i(Vs),lE=n(Vs,"P",{});var qke=s(lE);EKe=r(qke,"This class cannot be instantiated directly using "),LJ=n(qke,"CODE",{});var B$r=s(LJ);yKe=r(B$r,"__init__()"),B$r.forEach(t),wKe=r(qke," (throws an error)."),qke.forEach(t),AKe=i(Vs),xe=n(Vs,"DIV",{class:!0});var It=s(xe);m(iE.$$.fragment,It),LKe=i(It),BJ=n(It,"P",{});var x$r=s(BJ);BKe=r(x$r,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),x$r.forEach(t),xKe=i(It),Ga=n(It,"P",{});var q4=s(Ga);kKe=r(q4,"The feature extractor class to instantiate is selected based on the "),xJ=n(q4,"CODE",{});var k$r=s(xJ);RKe=r(k$r,"model_type"),k$r.forEach(t),SKe=r(q4,` property of the config object
(either passed as an argument or loaded from `),kJ=n(q4,"CODE",{});var R$r=s(kJ);PKe=r(R$r,"pretrained_model_name_or_path"),R$r.forEach(t),$Ke=r(q4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RJ=n(q4,"CODE",{});var S$r=s(RJ);IKe=r(S$r,"pretrained_model_name_or_path"),S$r.forEach(t),jKe=r(q4,":"),q4.forEach(t),DKe=i(It),ae=n(It,"UL",{});var le=s(ae);lh=n(le,"LI",{});var WFe=s(lh);SJ=n(WFe,"STRONG",{});var P$r=s(SJ);NKe=r(P$r,"beit"),P$r.forEach(t),qKe=r(WFe," \u2014 "),qk=n(WFe,"A",{href:!0});var $$r=s(qk);OKe=r($$r,"BeitFeatureExtractor"),$$r.forEach(t),GKe=r(WFe," (BEiT model)"),WFe.forEach(t),XKe=i(le),ih=n(le,"LI",{});var QFe=s(ih);PJ=n(QFe,"STRONG",{});var I$r=s(PJ);VKe=r(I$r,"clip"),I$r.forEach(t),zKe=r(QFe," \u2014 "),Ok=n(QFe,"A",{href:!0});var j$r=s(Ok);WKe=r(j$r,"CLIPFeatureExtractor"),j$r.forEach(t),QKe=r(QFe," (CLIP model)"),QFe.forEach(t),HKe=i(le),dh=n(le,"LI",{});var HFe=s(dh);$J=n(HFe,"STRONG",{});var D$r=s($J);UKe=r(D$r,"convnext"),D$r.forEach(t),JKe=r(HFe," \u2014 "),Gk=n(HFe,"A",{href:!0});var N$r=s(Gk);YKe=r(N$r,"ConvNextFeatureExtractor"),N$r.forEach(t),KKe=r(HFe," (ConvNext model)"),HFe.forEach(t),ZKe=i(le),ch=n(le,"LI",{});var UFe=s(ch);IJ=n(UFe,"STRONG",{});var q$r=s(IJ);eZe=r(q$r,"deit"),q$r.forEach(t),oZe=r(UFe," \u2014 "),Xk=n(UFe,"A",{href:!0});var O$r=s(Xk);rZe=r(O$r,"DeiTFeatureExtractor"),O$r.forEach(t),tZe=r(UFe," (DeiT model)"),UFe.forEach(t),aZe=i(le),fh=n(le,"LI",{});var JFe=s(fh);jJ=n(JFe,"STRONG",{});var G$r=s(jJ);nZe=r(G$r,"detr"),G$r.forEach(t),sZe=r(JFe," \u2014 "),Vk=n(JFe,"A",{href:!0});var X$r=s(Vk);lZe=r(X$r,"DetrFeatureExtractor"),X$r.forEach(t),iZe=r(JFe," (DETR model)"),JFe.forEach(t),dZe=i(le),mh=n(le,"LI",{});var YFe=s(mh);DJ=n(YFe,"STRONG",{});var V$r=s(DJ);cZe=r(V$r,"hubert"),V$r.forEach(t),fZe=r(YFe," \u2014 "),zk=n(YFe,"A",{href:!0});var z$r=s(zk);mZe=r(z$r,"Wav2Vec2FeatureExtractor"),z$r.forEach(t),gZe=r(YFe," (Hubert model)"),YFe.forEach(t),hZe=i(le),gh=n(le,"LI",{});var KFe=s(gh);NJ=n(KFe,"STRONG",{});var W$r=s(NJ);pZe=r(W$r,"layoutlmv2"),W$r.forEach(t),_Ze=r(KFe," \u2014 "),Wk=n(KFe,"A",{href:!0});var Q$r=s(Wk);uZe=r(Q$r,"LayoutLMv2FeatureExtractor"),Q$r.forEach(t),bZe=r(KFe," (LayoutLMv2 model)"),KFe.forEach(t),vZe=i(le),hh=n(le,"LI",{});var ZFe=s(hh);qJ=n(ZFe,"STRONG",{});var H$r=s(qJ);TZe=r(H$r,"maskformer"),H$r.forEach(t),FZe=r(ZFe," \u2014 "),Qk=n(ZFe,"A",{href:!0});var U$r=s(Qk);CZe=r(U$r,"MaskFormerFeatureExtractor"),U$r.forEach(t),MZe=r(ZFe," (MaskFormer model)"),ZFe.forEach(t),EZe=i(le),ph=n(le,"LI",{});var e9e=s(ph);OJ=n(e9e,"STRONG",{});var J$r=s(OJ);yZe=r(J$r,"perceiver"),J$r.forEach(t),wZe=r(e9e," \u2014 "),Hk=n(e9e,"A",{href:!0});var Y$r=s(Hk);AZe=r(Y$r,"PerceiverFeatureExtractor"),Y$r.forEach(t),LZe=r(e9e," (Perceiver model)"),e9e.forEach(t),BZe=i(le),_h=n(le,"LI",{});var o9e=s(_h);GJ=n(o9e,"STRONG",{});var K$r=s(GJ);xZe=r(K$r,"poolformer"),K$r.forEach(t),kZe=r(o9e," \u2014 "),Uk=n(o9e,"A",{href:!0});var Z$r=s(Uk);RZe=r(Z$r,"PoolFormerFeatureExtractor"),Z$r.forEach(t),SZe=r(o9e," (PoolFormer model)"),o9e.forEach(t),PZe=i(le),uh=n(le,"LI",{});var r9e=s(uh);XJ=n(r9e,"STRONG",{});var eIr=s(XJ);$Ze=r(eIr,"segformer"),eIr.forEach(t),IZe=r(r9e," \u2014 "),Jk=n(r9e,"A",{href:!0});var oIr=s(Jk);jZe=r(oIr,"SegformerFeatureExtractor"),oIr.forEach(t),DZe=r(r9e," (SegFormer model)"),r9e.forEach(t),NZe=i(le),bh=n(le,"LI",{});var t9e=s(bh);VJ=n(t9e,"STRONG",{});var rIr=s(VJ);qZe=r(rIr,"speech_to_text"),rIr.forEach(t),OZe=r(t9e," \u2014 "),Yk=n(t9e,"A",{href:!0});var tIr=s(Yk);GZe=r(tIr,"Speech2TextFeatureExtractor"),tIr.forEach(t),XZe=r(t9e," (Speech2Text model)"),t9e.forEach(t),VZe=i(le),vh=n(le,"LI",{});var a9e=s(vh);zJ=n(a9e,"STRONG",{});var aIr=s(zJ);zZe=r(aIr,"swin"),aIr.forEach(t),WZe=r(a9e," \u2014 "),Kk=n(a9e,"A",{href:!0});var nIr=s(Kk);QZe=r(nIr,"ViTFeatureExtractor"),nIr.forEach(t),HZe=r(a9e," (Swin model)"),a9e.forEach(t),UZe=i(le),Th=n(le,"LI",{});var n9e=s(Th);WJ=n(n9e,"STRONG",{});var sIr=s(WJ);JZe=r(sIr,"vit"),sIr.forEach(t),YZe=r(n9e," \u2014 "),Zk=n(n9e,"A",{href:!0});var lIr=s(Zk);KZe=r(lIr,"ViTFeatureExtractor"),lIr.forEach(t),ZZe=r(n9e," (ViT model)"),n9e.forEach(t),eeo=i(le),Fh=n(le,"LI",{});var s9e=s(Fh);QJ=n(s9e,"STRONG",{});var iIr=s(QJ);oeo=r(iIr,"vit_mae"),iIr.forEach(t),reo=r(s9e," \u2014 "),eR=n(s9e,"A",{href:!0});var dIr=s(eR);teo=r(dIr,"ViTFeatureExtractor"),dIr.forEach(t),aeo=r(s9e," (ViTMAE model)"),s9e.forEach(t),neo=i(le),Ch=n(le,"LI",{});var l9e=s(Ch);HJ=n(l9e,"STRONG",{});var cIr=s(HJ);seo=r(cIr,"wav2vec2"),cIr.forEach(t),leo=r(l9e," \u2014 "),oR=n(l9e,"A",{href:!0});var fIr=s(oR);ieo=r(fIr,"Wav2Vec2FeatureExtractor"),fIr.forEach(t),deo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),le.forEach(t),ceo=i(It),m(Mh.$$.fragment,It),feo=i(It),UJ=n(It,"P",{});var mIr=s(UJ);meo=r(mIr,"Examples:"),mIr.forEach(t),geo=i(It),m(dE.$$.fragment,It),It.forEach(t),heo=i(Vs),Eh=n(Vs,"DIV",{class:!0});var Oke=s(Eh);m(cE.$$.fragment,Oke),peo=i(Oke),JJ=n(Oke,"P",{});var gIr=s(JJ);_eo=r(gIr,"Register a new feature extractor for this class."),gIr.forEach(t),Oke.forEach(t),Vs.forEach(t),$Be=i(d),Hi=n(d,"H2",{class:!0});var Gke=s(Hi);yh=n(Gke,"A",{id:!0,class:!0,href:!0});var hIr=s(yh);YJ=n(hIr,"SPAN",{});var pIr=s(YJ);m(fE.$$.fragment,pIr),pIr.forEach(t),hIr.forEach(t),ueo=i(Gke),KJ=n(Gke,"SPAN",{});var _Ir=s(KJ);beo=r(_Ir,"AutoProcessor"),_Ir.forEach(t),Gke.forEach(t),IBe=i(d),Qo=n(d,"DIV",{class:!0});var zs=s(Qo);m(mE.$$.fragment,zs),veo=i(zs),gE=n(zs,"P",{});var Xke=s(gE);Teo=r(Xke,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rR=n(Xke,"A",{href:!0});var uIr=s(rR);Feo=r(uIr,"AutoProcessor.from_pretrained()"),uIr.forEach(t),Ceo=r(Xke," class method."),Xke.forEach(t),Meo=i(zs),hE=n(zs,"P",{});var Vke=s(hE);Eeo=r(Vke,"This class cannot be instantiated directly using "),ZJ=n(Vke,"CODE",{});var bIr=s(ZJ);yeo=r(bIr,"__init__()"),bIr.forEach(t),weo=r(Vke," (throws an error)."),Vke.forEach(t),Aeo=i(zs),ke=n(zs,"DIV",{class:!0});var jt=s(ke);m(pE.$$.fragment,jt),Leo=i(jt),eY=n(jt,"P",{});var vIr=s(eY);Beo=r(vIr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vIr.forEach(t),xeo=i(jt),Ui=n(jt,"P",{});var sz=s(Ui);keo=r(sz,"The processor class to instantiate is selected based on the "),oY=n(sz,"CODE",{});var TIr=s(oY);Reo=r(TIr,"model_type"),TIr.forEach(t),Seo=r(sz,` property of the config object (either
passed as an argument or loaded from `),rY=n(sz,"CODE",{});var FIr=s(rY);Peo=r(FIr,"pretrained_model_name_or_path"),FIr.forEach(t),$eo=r(sz," if possible):"),sz.forEach(t),Ieo=i(jt),we=n(jt,"UL",{});var No=s(we);wh=n(No,"LI",{});var i9e=s(wh);tY=n(i9e,"STRONG",{});var CIr=s(tY);jeo=r(CIr,"clip"),CIr.forEach(t),Deo=r(i9e," \u2014 "),tR=n(i9e,"A",{href:!0});var MIr=s(tR);Neo=r(MIr,"CLIPProcessor"),MIr.forEach(t),qeo=r(i9e," (CLIP model)"),i9e.forEach(t),Oeo=i(No),Ah=n(No,"LI",{});var d9e=s(Ah);aY=n(d9e,"STRONG",{});var EIr=s(aY);Geo=r(EIr,"layoutlmv2"),EIr.forEach(t),Xeo=r(d9e," \u2014 "),aR=n(d9e,"A",{href:!0});var yIr=s(aR);Veo=r(yIr,"LayoutLMv2Processor"),yIr.forEach(t),zeo=r(d9e," (LayoutLMv2 model)"),d9e.forEach(t),Weo=i(No),Lh=n(No,"LI",{});var c9e=s(Lh);nY=n(c9e,"STRONG",{});var wIr=s(nY);Qeo=r(wIr,"layoutxlm"),wIr.forEach(t),Heo=r(c9e," \u2014 "),nR=n(c9e,"A",{href:!0});var AIr=s(nR);Ueo=r(AIr,"LayoutXLMProcessor"),AIr.forEach(t),Jeo=r(c9e," (LayoutXLM model)"),c9e.forEach(t),Yeo=i(No),Bh=n(No,"LI",{});var f9e=s(Bh);sY=n(f9e,"STRONG",{});var LIr=s(sY);Keo=r(LIr,"speech_to_text"),LIr.forEach(t),Zeo=r(f9e," \u2014 "),sR=n(f9e,"A",{href:!0});var BIr=s(sR);eoo=r(BIr,"Speech2TextProcessor"),BIr.forEach(t),ooo=r(f9e," (Speech2Text model)"),f9e.forEach(t),roo=i(No),xh=n(No,"LI",{});var m9e=s(xh);lY=n(m9e,"STRONG",{});var xIr=s(lY);too=r(xIr,"speech_to_text_2"),xIr.forEach(t),aoo=r(m9e," \u2014 "),lR=n(m9e,"A",{href:!0});var kIr=s(lR);noo=r(kIr,"Speech2Text2Processor"),kIr.forEach(t),soo=r(m9e," (Speech2Text2 model)"),m9e.forEach(t),loo=i(No),kh=n(No,"LI",{});var g9e=s(kh);iY=n(g9e,"STRONG",{});var RIr=s(iY);ioo=r(RIr,"trocr"),RIr.forEach(t),doo=r(g9e," \u2014 "),iR=n(g9e,"A",{href:!0});var SIr=s(iR);coo=r(SIr,"TrOCRProcessor"),SIr.forEach(t),foo=r(g9e," (TrOCR model)"),g9e.forEach(t),moo=i(No),Rh=n(No,"LI",{});var h9e=s(Rh);dY=n(h9e,"STRONG",{});var PIr=s(dY);goo=r(PIr,"vision-text-dual-encoder"),PIr.forEach(t),hoo=r(h9e," \u2014 "),dR=n(h9e,"A",{href:!0});var $Ir=s(dR);poo=r($Ir,"VisionTextDualEncoderProcessor"),$Ir.forEach(t),_oo=r(h9e," (VisionTextDualEncoder model)"),h9e.forEach(t),uoo=i(No),Sh=n(No,"LI",{});var p9e=s(Sh);cY=n(p9e,"STRONG",{});var IIr=s(cY);boo=r(IIr,"wav2vec2"),IIr.forEach(t),voo=r(p9e," \u2014 "),cR=n(p9e,"A",{href:!0});var jIr=s(cR);Too=r(jIr,"Wav2Vec2Processor"),jIr.forEach(t),Foo=r(p9e," (Wav2Vec2 model)"),p9e.forEach(t),No.forEach(t),Coo=i(jt),m(Ph.$$.fragment,jt),Moo=i(jt),fY=n(jt,"P",{});var DIr=s(fY);Eoo=r(DIr,"Examples:"),DIr.forEach(t),yoo=i(jt),m(_E.$$.fragment,jt),jt.forEach(t),woo=i(zs),$h=n(zs,"DIV",{class:!0});var zke=s($h);m(uE.$$.fragment,zke),Aoo=i(zke),mY=n(zke,"P",{});var NIr=s(mY);Loo=r(NIr,"Register a new processor for this class."),NIr.forEach(t),zke.forEach(t),zs.forEach(t),jBe=i(d),Ji=n(d,"H2",{class:!0});var Wke=s(Ji);Ih=n(Wke,"A",{id:!0,class:!0,href:!0});var qIr=s(Ih);gY=n(qIr,"SPAN",{});var OIr=s(gY);m(bE.$$.fragment,OIr),OIr.forEach(t),qIr.forEach(t),Boo=i(Wke),hY=n(Wke,"SPAN",{});var GIr=s(hY);xoo=r(GIr,"AutoModel"),GIr.forEach(t),Wke.forEach(t),DBe=i(d),Ho=n(d,"DIV",{class:!0});var Ws=s(Ho);m(vE.$$.fragment,Ws),koo=i(Ws),Yi=n(Ws,"P",{});var lz=s(Yi);Roo=r(lz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pY=n(lz,"CODE",{});var XIr=s(pY);Soo=r(XIr,"from_pretrained()"),XIr.forEach(t),Poo=r(lz,"class method or the "),_Y=n(lz,"CODE",{});var VIr=s(_Y);$oo=r(VIr,"from_config()"),VIr.forEach(t),Ioo=r(lz,`class
method.`),lz.forEach(t),joo=i(Ws),TE=n(Ws,"P",{});var Qke=s(TE);Doo=r(Qke,"This class cannot be instantiated directly using "),uY=n(Qke,"CODE",{});var zIr=s(uY);Noo=r(zIr,"__init__()"),zIr.forEach(t),qoo=r(Qke," (throws an error)."),Qke.forEach(t),Ooo=i(Ws),Gr=n(Ws,"DIV",{class:!0});var Qs=s(Gr);m(FE.$$.fragment,Qs),Goo=i(Qs),bY=n(Qs,"P",{});var WIr=s(bY);Xoo=r(WIr,"Instantiates one of the base model classes of the library from a configuration."),WIr.forEach(t),Voo=i(Qs),Ki=n(Qs,"P",{});var iz=s(Ki);zoo=r(iz,`Note:
Loading a model from its configuration file does `),vY=n(iz,"STRONG",{});var QIr=s(vY);Woo=r(QIr,"not"),QIr.forEach(t),Qoo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(iz,"CODE",{});var HIr=s(TY);Hoo=r(HIr,"from_pretrained()"),HIr.forEach(t),Uoo=r(iz,"to load the model weights."),iz.forEach(t),Joo=i(Qs),FY=n(Qs,"P",{});var UIr=s(FY);Yoo=r(UIr,"Examples:"),UIr.forEach(t),Koo=i(Qs),m(CE.$$.fragment,Qs),Qs.forEach(t),Zoo=i(Ws),Re=n(Ws,"DIV",{class:!0});var Dt=s(Re);m(ME.$$.fragment,Dt),ero=i(Dt),CY=n(Dt,"P",{});var JIr=s(CY);oro=r(JIr,"Instantiate one of the base model classes of the library from a pretrained model."),JIr.forEach(t),rro=i(Dt),Xa=n(Dt,"P",{});var O4=s(Xa);tro=r(O4,"The model class to instantiate is selected based on the "),MY=n(O4,"CODE",{});var YIr=s(MY);aro=r(YIr,"model_type"),YIr.forEach(t),nro=r(O4,` property of the config object (either
passed as an argument or loaded from `),EY=n(O4,"CODE",{});var KIr=s(EY);sro=r(KIr,"pretrained_model_name_or_path"),KIr.forEach(t),lro=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yY=n(O4,"CODE",{});var ZIr=s(yY);iro=r(ZIr,"pretrained_model_name_or_path"),ZIr.forEach(t),dro=r(O4,":"),O4.forEach(t),cro=i(Dt),F=n(Dt,"UL",{});var C=s(F);jh=n(C,"LI",{});var _9e=s(jh);wY=n(_9e,"STRONG",{});var ejr=s(wY);fro=r(ejr,"albert"),ejr.forEach(t),mro=r(_9e," \u2014 "),fR=n(_9e,"A",{href:!0});var ojr=s(fR);gro=r(ojr,"AlbertModel"),ojr.forEach(t),hro=r(_9e," (ALBERT model)"),_9e.forEach(t),pro=i(C),Dh=n(C,"LI",{});var u9e=s(Dh);AY=n(u9e,"STRONG",{});var rjr=s(AY);_ro=r(rjr,"bart"),rjr.forEach(t),uro=r(u9e," \u2014 "),mR=n(u9e,"A",{href:!0});var tjr=s(mR);bro=r(tjr,"BartModel"),tjr.forEach(t),vro=r(u9e," (BART model)"),u9e.forEach(t),Tro=i(C),Nh=n(C,"LI",{});var b9e=s(Nh);LY=n(b9e,"STRONG",{});var ajr=s(LY);Fro=r(ajr,"beit"),ajr.forEach(t),Cro=r(b9e," \u2014 "),gR=n(b9e,"A",{href:!0});var njr=s(gR);Mro=r(njr,"BeitModel"),njr.forEach(t),Ero=r(b9e," (BEiT model)"),b9e.forEach(t),yro=i(C),qh=n(C,"LI",{});var v9e=s(qh);BY=n(v9e,"STRONG",{});var sjr=s(BY);wro=r(sjr,"bert"),sjr.forEach(t),Aro=r(v9e," \u2014 "),hR=n(v9e,"A",{href:!0});var ljr=s(hR);Lro=r(ljr,"BertModel"),ljr.forEach(t),Bro=r(v9e," (BERT model)"),v9e.forEach(t),xro=i(C),Oh=n(C,"LI",{});var T9e=s(Oh);xY=n(T9e,"STRONG",{});var ijr=s(xY);kro=r(ijr,"bert-generation"),ijr.forEach(t),Rro=r(T9e," \u2014 "),pR=n(T9e,"A",{href:!0});var djr=s(pR);Sro=r(djr,"BertGenerationEncoder"),djr.forEach(t),Pro=r(T9e," (Bert Generation model)"),T9e.forEach(t),$ro=i(C),Gh=n(C,"LI",{});var F9e=s(Gh);kY=n(F9e,"STRONG",{});var cjr=s(kY);Iro=r(cjr,"big_bird"),cjr.forEach(t),jro=r(F9e," \u2014 "),_R=n(F9e,"A",{href:!0});var fjr=s(_R);Dro=r(fjr,"BigBirdModel"),fjr.forEach(t),Nro=r(F9e," (BigBird model)"),F9e.forEach(t),qro=i(C),Xh=n(C,"LI",{});var C9e=s(Xh);RY=n(C9e,"STRONG",{});var mjr=s(RY);Oro=r(mjr,"bigbird_pegasus"),mjr.forEach(t),Gro=r(C9e," \u2014 "),uR=n(C9e,"A",{href:!0});var gjr=s(uR);Xro=r(gjr,"BigBirdPegasusModel"),gjr.forEach(t),Vro=r(C9e," (BigBirdPegasus model)"),C9e.forEach(t),zro=i(C),Vh=n(C,"LI",{});var M9e=s(Vh);SY=n(M9e,"STRONG",{});var hjr=s(SY);Wro=r(hjr,"blenderbot"),hjr.forEach(t),Qro=r(M9e," \u2014 "),bR=n(M9e,"A",{href:!0});var pjr=s(bR);Hro=r(pjr,"BlenderbotModel"),pjr.forEach(t),Uro=r(M9e," (Blenderbot model)"),M9e.forEach(t),Jro=i(C),zh=n(C,"LI",{});var E9e=s(zh);PY=n(E9e,"STRONG",{});var _jr=s(PY);Yro=r(_jr,"blenderbot-small"),_jr.forEach(t),Kro=r(E9e," \u2014 "),vR=n(E9e,"A",{href:!0});var ujr=s(vR);Zro=r(ujr,"BlenderbotSmallModel"),ujr.forEach(t),eto=r(E9e," (BlenderbotSmall model)"),E9e.forEach(t),oto=i(C),Wh=n(C,"LI",{});var y9e=s(Wh);$Y=n(y9e,"STRONG",{});var bjr=s($Y);rto=r(bjr,"camembert"),bjr.forEach(t),tto=r(y9e," \u2014 "),TR=n(y9e,"A",{href:!0});var vjr=s(TR);ato=r(vjr,"CamembertModel"),vjr.forEach(t),nto=r(y9e," (CamemBERT model)"),y9e.forEach(t),sto=i(C),Qh=n(C,"LI",{});var w9e=s(Qh);IY=n(w9e,"STRONG",{});var Tjr=s(IY);lto=r(Tjr,"canine"),Tjr.forEach(t),ito=r(w9e," \u2014 "),FR=n(w9e,"A",{href:!0});var Fjr=s(FR);dto=r(Fjr,"CanineModel"),Fjr.forEach(t),cto=r(w9e," (Canine model)"),w9e.forEach(t),fto=i(C),Hh=n(C,"LI",{});var A9e=s(Hh);jY=n(A9e,"STRONG",{});var Cjr=s(jY);mto=r(Cjr,"clip"),Cjr.forEach(t),gto=r(A9e," \u2014 "),CR=n(A9e,"A",{href:!0});var Mjr=s(CR);hto=r(Mjr,"CLIPModel"),Mjr.forEach(t),pto=r(A9e," (CLIP model)"),A9e.forEach(t),_to=i(C),Uh=n(C,"LI",{});var L9e=s(Uh);DY=n(L9e,"STRONG",{});var Ejr=s(DY);uto=r(Ejr,"convbert"),Ejr.forEach(t),bto=r(L9e," \u2014 "),MR=n(L9e,"A",{href:!0});var yjr=s(MR);vto=r(yjr,"ConvBertModel"),yjr.forEach(t),Tto=r(L9e," (ConvBERT model)"),L9e.forEach(t),Fto=i(C),Jh=n(C,"LI",{});var B9e=s(Jh);NY=n(B9e,"STRONG",{});var wjr=s(NY);Cto=r(wjr,"convnext"),wjr.forEach(t),Mto=r(B9e," \u2014 "),ER=n(B9e,"A",{href:!0});var Ajr=s(ER);Eto=r(Ajr,"ConvNextModel"),Ajr.forEach(t),yto=r(B9e," (ConvNext model)"),B9e.forEach(t),wto=i(C),Yh=n(C,"LI",{});var x9e=s(Yh);qY=n(x9e,"STRONG",{});var Ljr=s(qY);Ato=r(Ljr,"ctrl"),Ljr.forEach(t),Lto=r(x9e," \u2014 "),yR=n(x9e,"A",{href:!0});var Bjr=s(yR);Bto=r(Bjr,"CTRLModel"),Bjr.forEach(t),xto=r(x9e," (CTRL model)"),x9e.forEach(t),kto=i(C),Kh=n(C,"LI",{});var k9e=s(Kh);OY=n(k9e,"STRONG",{});var xjr=s(OY);Rto=r(xjr,"data2vec-audio"),xjr.forEach(t),Sto=r(k9e," \u2014 "),wR=n(k9e,"A",{href:!0});var kjr=s(wR);Pto=r(kjr,"Data2VecAudioModel"),kjr.forEach(t),$to=r(k9e," (Data2VecAudio model)"),k9e.forEach(t),Ito=i(C),Zh=n(C,"LI",{});var R9e=s(Zh);GY=n(R9e,"STRONG",{});var Rjr=s(GY);jto=r(Rjr,"data2vec-text"),Rjr.forEach(t),Dto=r(R9e," \u2014 "),AR=n(R9e,"A",{href:!0});var Sjr=s(AR);Nto=r(Sjr,"Data2VecTextModel"),Sjr.forEach(t),qto=r(R9e," (Data2VecText model)"),R9e.forEach(t),Oto=i(C),ep=n(C,"LI",{});var S9e=s(ep);XY=n(S9e,"STRONG",{});var Pjr=s(XY);Gto=r(Pjr,"deberta"),Pjr.forEach(t),Xto=r(S9e," \u2014 "),LR=n(S9e,"A",{href:!0});var $jr=s(LR);Vto=r($jr,"DebertaModel"),$jr.forEach(t),zto=r(S9e," (DeBERTa model)"),S9e.forEach(t),Wto=i(C),op=n(C,"LI",{});var P9e=s(op);VY=n(P9e,"STRONG",{});var Ijr=s(VY);Qto=r(Ijr,"deberta-v2"),Ijr.forEach(t),Hto=r(P9e," \u2014 "),BR=n(P9e,"A",{href:!0});var jjr=s(BR);Uto=r(jjr,"DebertaV2Model"),jjr.forEach(t),Jto=r(P9e," (DeBERTa-v2 model)"),P9e.forEach(t),Yto=i(C),rp=n(C,"LI",{});var $9e=s(rp);zY=n($9e,"STRONG",{});var Djr=s(zY);Kto=r(Djr,"deit"),Djr.forEach(t),Zto=r($9e," \u2014 "),xR=n($9e,"A",{href:!0});var Njr=s(xR);eao=r(Njr,"DeiTModel"),Njr.forEach(t),oao=r($9e," (DeiT model)"),$9e.forEach(t),rao=i(C),tp=n(C,"LI",{});var I9e=s(tp);WY=n(I9e,"STRONG",{});var qjr=s(WY);tao=r(qjr,"detr"),qjr.forEach(t),aao=r(I9e," \u2014 "),kR=n(I9e,"A",{href:!0});var Ojr=s(kR);nao=r(Ojr,"DetrModel"),Ojr.forEach(t),sao=r(I9e," (DETR model)"),I9e.forEach(t),lao=i(C),ap=n(C,"LI",{});var j9e=s(ap);QY=n(j9e,"STRONG",{});var Gjr=s(QY);iao=r(Gjr,"distilbert"),Gjr.forEach(t),dao=r(j9e," \u2014 "),RR=n(j9e,"A",{href:!0});var Xjr=s(RR);cao=r(Xjr,"DistilBertModel"),Xjr.forEach(t),fao=r(j9e," (DistilBERT model)"),j9e.forEach(t),mao=i(C),np=n(C,"LI",{});var D9e=s(np);HY=n(D9e,"STRONG",{});var Vjr=s(HY);gao=r(Vjr,"dpr"),Vjr.forEach(t),hao=r(D9e," \u2014 "),SR=n(D9e,"A",{href:!0});var zjr=s(SR);pao=r(zjr,"DPRQuestionEncoder"),zjr.forEach(t),_ao=r(D9e," (DPR model)"),D9e.forEach(t),uao=i(C),sp=n(C,"LI",{});var N9e=s(sp);UY=n(N9e,"STRONG",{});var Wjr=s(UY);bao=r(Wjr,"electra"),Wjr.forEach(t),vao=r(N9e," \u2014 "),PR=n(N9e,"A",{href:!0});var Qjr=s(PR);Tao=r(Qjr,"ElectraModel"),Qjr.forEach(t),Fao=r(N9e," (ELECTRA model)"),N9e.forEach(t),Cao=i(C),lp=n(C,"LI",{});var q9e=s(lp);JY=n(q9e,"STRONG",{});var Hjr=s(JY);Mao=r(Hjr,"flaubert"),Hjr.forEach(t),Eao=r(q9e," \u2014 "),$R=n(q9e,"A",{href:!0});var Ujr=s($R);yao=r(Ujr,"FlaubertModel"),Ujr.forEach(t),wao=r(q9e," (FlauBERT model)"),q9e.forEach(t),Aao=i(C),ip=n(C,"LI",{});var O9e=s(ip);YY=n(O9e,"STRONG",{});var Jjr=s(YY);Lao=r(Jjr,"fnet"),Jjr.forEach(t),Bao=r(O9e," \u2014 "),IR=n(O9e,"A",{href:!0});var Yjr=s(IR);xao=r(Yjr,"FNetModel"),Yjr.forEach(t),kao=r(O9e," (FNet model)"),O9e.forEach(t),Rao=i(C),dp=n(C,"LI",{});var G9e=s(dp);KY=n(G9e,"STRONG",{});var Kjr=s(KY);Sao=r(Kjr,"fsmt"),Kjr.forEach(t),Pao=r(G9e," \u2014 "),jR=n(G9e,"A",{href:!0});var Zjr=s(jR);$ao=r(Zjr,"FSMTModel"),Zjr.forEach(t),Iao=r(G9e," (FairSeq Machine-Translation model)"),G9e.forEach(t),jao=i(C),Ns=n(C,"LI",{});var L8=s(Ns);ZY=n(L8,"STRONG",{});var eDr=s(ZY);Dao=r(eDr,"funnel"),eDr.forEach(t),Nao=r(L8," \u2014 "),DR=n(L8,"A",{href:!0});var oDr=s(DR);qao=r(oDr,"FunnelModel"),oDr.forEach(t),Oao=r(L8," or "),NR=n(L8,"A",{href:!0});var rDr=s(NR);Gao=r(rDr,"FunnelBaseModel"),rDr.forEach(t),Xao=r(L8," (Funnel Transformer model)"),L8.forEach(t),Vao=i(C),cp=n(C,"LI",{});var X9e=s(cp);eK=n(X9e,"STRONG",{});var tDr=s(eK);zao=r(tDr,"gpt2"),tDr.forEach(t),Wao=r(X9e," \u2014 "),qR=n(X9e,"A",{href:!0});var aDr=s(qR);Qao=r(aDr,"GPT2Model"),aDr.forEach(t),Hao=r(X9e," (OpenAI GPT-2 model)"),X9e.forEach(t),Uao=i(C),fp=n(C,"LI",{});var V9e=s(fp);oK=n(V9e,"STRONG",{});var nDr=s(oK);Jao=r(nDr,"gpt_neo"),nDr.forEach(t),Yao=r(V9e," \u2014 "),OR=n(V9e,"A",{href:!0});var sDr=s(OR);Kao=r(sDr,"GPTNeoModel"),sDr.forEach(t),Zao=r(V9e," (GPT Neo model)"),V9e.forEach(t),eno=i(C),mp=n(C,"LI",{});var z9e=s(mp);rK=n(z9e,"STRONG",{});var lDr=s(rK);ono=r(lDr,"gptj"),lDr.forEach(t),rno=r(z9e," \u2014 "),GR=n(z9e,"A",{href:!0});var iDr=s(GR);tno=r(iDr,"GPTJModel"),iDr.forEach(t),ano=r(z9e," (GPT-J model)"),z9e.forEach(t),nno=i(C),gp=n(C,"LI",{});var W9e=s(gp);tK=n(W9e,"STRONG",{});var dDr=s(tK);sno=r(dDr,"hubert"),dDr.forEach(t),lno=r(W9e," \u2014 "),XR=n(W9e,"A",{href:!0});var cDr=s(XR);ino=r(cDr,"HubertModel"),cDr.forEach(t),dno=r(W9e," (Hubert model)"),W9e.forEach(t),cno=i(C),hp=n(C,"LI",{});var Q9e=s(hp);aK=n(Q9e,"STRONG",{});var fDr=s(aK);fno=r(fDr,"ibert"),fDr.forEach(t),mno=r(Q9e," \u2014 "),VR=n(Q9e,"A",{href:!0});var mDr=s(VR);gno=r(mDr,"IBertModel"),mDr.forEach(t),hno=r(Q9e," (I-BERT model)"),Q9e.forEach(t),pno=i(C),pp=n(C,"LI",{});var H9e=s(pp);nK=n(H9e,"STRONG",{});var gDr=s(nK);_no=r(gDr,"imagegpt"),gDr.forEach(t),uno=r(H9e," \u2014 "),zR=n(H9e,"A",{href:!0});var hDr=s(zR);bno=r(hDr,"ImageGPTModel"),hDr.forEach(t),vno=r(H9e," (ImageGPT model)"),H9e.forEach(t),Tno=i(C),_p=n(C,"LI",{});var U9e=s(_p);sK=n(U9e,"STRONG",{});var pDr=s(sK);Fno=r(pDr,"layoutlm"),pDr.forEach(t),Cno=r(U9e," \u2014 "),WR=n(U9e,"A",{href:!0});var _Dr=s(WR);Mno=r(_Dr,"LayoutLMModel"),_Dr.forEach(t),Eno=r(U9e," (LayoutLM model)"),U9e.forEach(t),yno=i(C),up=n(C,"LI",{});var J9e=s(up);lK=n(J9e,"STRONG",{});var uDr=s(lK);wno=r(uDr,"layoutlmv2"),uDr.forEach(t),Ano=r(J9e," \u2014 "),QR=n(J9e,"A",{href:!0});var bDr=s(QR);Lno=r(bDr,"LayoutLMv2Model"),bDr.forEach(t),Bno=r(J9e," (LayoutLMv2 model)"),J9e.forEach(t),xno=i(C),bp=n(C,"LI",{});var Y9e=s(bp);iK=n(Y9e,"STRONG",{});var vDr=s(iK);kno=r(vDr,"led"),vDr.forEach(t),Rno=r(Y9e," \u2014 "),HR=n(Y9e,"A",{href:!0});var TDr=s(HR);Sno=r(TDr,"LEDModel"),TDr.forEach(t),Pno=r(Y9e," (LED model)"),Y9e.forEach(t),$no=i(C),vp=n(C,"LI",{});var K9e=s(vp);dK=n(K9e,"STRONG",{});var FDr=s(dK);Ino=r(FDr,"longformer"),FDr.forEach(t),jno=r(K9e," \u2014 "),UR=n(K9e,"A",{href:!0});var CDr=s(UR);Dno=r(CDr,"LongformerModel"),CDr.forEach(t),Nno=r(K9e," (Longformer model)"),K9e.forEach(t),qno=i(C),Tp=n(C,"LI",{});var Z9e=s(Tp);cK=n(Z9e,"STRONG",{});var MDr=s(cK);Ono=r(MDr,"luke"),MDr.forEach(t),Gno=r(Z9e," \u2014 "),JR=n(Z9e,"A",{href:!0});var EDr=s(JR);Xno=r(EDr,"LukeModel"),EDr.forEach(t),Vno=r(Z9e," (LUKE model)"),Z9e.forEach(t),zno=i(C),Fp=n(C,"LI",{});var eCe=s(Fp);fK=n(eCe,"STRONG",{});var yDr=s(fK);Wno=r(yDr,"lxmert"),yDr.forEach(t),Qno=r(eCe," \u2014 "),YR=n(eCe,"A",{href:!0});var wDr=s(YR);Hno=r(wDr,"LxmertModel"),wDr.forEach(t),Uno=r(eCe," (LXMERT model)"),eCe.forEach(t),Jno=i(C),Cp=n(C,"LI",{});var oCe=s(Cp);mK=n(oCe,"STRONG",{});var ADr=s(mK);Yno=r(ADr,"m2m_100"),ADr.forEach(t),Kno=r(oCe," \u2014 "),KR=n(oCe,"A",{href:!0});var LDr=s(KR);Zno=r(LDr,"M2M100Model"),LDr.forEach(t),eso=r(oCe," (M2M100 model)"),oCe.forEach(t),oso=i(C),Mp=n(C,"LI",{});var rCe=s(Mp);gK=n(rCe,"STRONG",{});var BDr=s(gK);rso=r(BDr,"marian"),BDr.forEach(t),tso=r(rCe," \u2014 "),ZR=n(rCe,"A",{href:!0});var xDr=s(ZR);aso=r(xDr,"MarianModel"),xDr.forEach(t),nso=r(rCe," (Marian model)"),rCe.forEach(t),sso=i(C),Ep=n(C,"LI",{});var tCe=s(Ep);hK=n(tCe,"STRONG",{});var kDr=s(hK);lso=r(kDr,"maskformer"),kDr.forEach(t),iso=r(tCe," \u2014 "),eS=n(tCe,"A",{href:!0});var RDr=s(eS);dso=r(RDr,"MaskFormerModel"),RDr.forEach(t),cso=r(tCe," (MaskFormer model)"),tCe.forEach(t),fso=i(C),yp=n(C,"LI",{});var aCe=s(yp);pK=n(aCe,"STRONG",{});var SDr=s(pK);mso=r(SDr,"mbart"),SDr.forEach(t),gso=r(aCe," \u2014 "),oS=n(aCe,"A",{href:!0});var PDr=s(oS);hso=r(PDr,"MBartModel"),PDr.forEach(t),pso=r(aCe," (mBART model)"),aCe.forEach(t),_so=i(C),wp=n(C,"LI",{});var nCe=s(wp);_K=n(nCe,"STRONG",{});var $Dr=s(_K);uso=r($Dr,"megatron-bert"),$Dr.forEach(t),bso=r(nCe," \u2014 "),rS=n(nCe,"A",{href:!0});var IDr=s(rS);vso=r(IDr,"MegatronBertModel"),IDr.forEach(t),Tso=r(nCe," (MegatronBert model)"),nCe.forEach(t),Fso=i(C),Ap=n(C,"LI",{});var sCe=s(Ap);uK=n(sCe,"STRONG",{});var jDr=s(uK);Cso=r(jDr,"mobilebert"),jDr.forEach(t),Mso=r(sCe," \u2014 "),tS=n(sCe,"A",{href:!0});var DDr=s(tS);Eso=r(DDr,"MobileBertModel"),DDr.forEach(t),yso=r(sCe," (MobileBERT model)"),sCe.forEach(t),wso=i(C),Lp=n(C,"LI",{});var lCe=s(Lp);bK=n(lCe,"STRONG",{});var NDr=s(bK);Aso=r(NDr,"mpnet"),NDr.forEach(t),Lso=r(lCe," \u2014 "),aS=n(lCe,"A",{href:!0});var qDr=s(aS);Bso=r(qDr,"MPNetModel"),qDr.forEach(t),xso=r(lCe," (MPNet model)"),lCe.forEach(t),kso=i(C),Bp=n(C,"LI",{});var iCe=s(Bp);vK=n(iCe,"STRONG",{});var ODr=s(vK);Rso=r(ODr,"mt5"),ODr.forEach(t),Sso=r(iCe," \u2014 "),nS=n(iCe,"A",{href:!0});var GDr=s(nS);Pso=r(GDr,"MT5Model"),GDr.forEach(t),$so=r(iCe," (mT5 model)"),iCe.forEach(t),Iso=i(C),xp=n(C,"LI",{});var dCe=s(xp);TK=n(dCe,"STRONG",{});var XDr=s(TK);jso=r(XDr,"nystromformer"),XDr.forEach(t),Dso=r(dCe," \u2014 "),sS=n(dCe,"A",{href:!0});var VDr=s(sS);Nso=r(VDr,"NystromformerModel"),VDr.forEach(t),qso=r(dCe," (Nystromformer model)"),dCe.forEach(t),Oso=i(C),kp=n(C,"LI",{});var cCe=s(kp);FK=n(cCe,"STRONG",{});var zDr=s(FK);Gso=r(zDr,"openai-gpt"),zDr.forEach(t),Xso=r(cCe," \u2014 "),lS=n(cCe,"A",{href:!0});var WDr=s(lS);Vso=r(WDr,"OpenAIGPTModel"),WDr.forEach(t),zso=r(cCe," (OpenAI GPT model)"),cCe.forEach(t),Wso=i(C),Rp=n(C,"LI",{});var fCe=s(Rp);CK=n(fCe,"STRONG",{});var QDr=s(CK);Qso=r(QDr,"pegasus"),QDr.forEach(t),Hso=r(fCe," \u2014 "),iS=n(fCe,"A",{href:!0});var HDr=s(iS);Uso=r(HDr,"PegasusModel"),HDr.forEach(t),Jso=r(fCe," (Pegasus model)"),fCe.forEach(t),Yso=i(C),Sp=n(C,"LI",{});var mCe=s(Sp);MK=n(mCe,"STRONG",{});var UDr=s(MK);Kso=r(UDr,"perceiver"),UDr.forEach(t),Zso=r(mCe," \u2014 "),dS=n(mCe,"A",{href:!0});var JDr=s(dS);elo=r(JDr,"PerceiverModel"),JDr.forEach(t),olo=r(mCe," (Perceiver model)"),mCe.forEach(t),rlo=i(C),Pp=n(C,"LI",{});var gCe=s(Pp);EK=n(gCe,"STRONG",{});var YDr=s(EK);tlo=r(YDr,"plbart"),YDr.forEach(t),alo=r(gCe," \u2014 "),cS=n(gCe,"A",{href:!0});var KDr=s(cS);nlo=r(KDr,"PLBartModel"),KDr.forEach(t),slo=r(gCe," (PLBart model)"),gCe.forEach(t),llo=i(C),$p=n(C,"LI",{});var hCe=s($p);yK=n(hCe,"STRONG",{});var ZDr=s(yK);ilo=r(ZDr,"poolformer"),ZDr.forEach(t),dlo=r(hCe," \u2014 "),fS=n(hCe,"A",{href:!0});var eNr=s(fS);clo=r(eNr,"PoolFormerModel"),eNr.forEach(t),flo=r(hCe," (PoolFormer model)"),hCe.forEach(t),mlo=i(C),Ip=n(C,"LI",{});var pCe=s(Ip);wK=n(pCe,"STRONG",{});var oNr=s(wK);glo=r(oNr,"prophetnet"),oNr.forEach(t),hlo=r(pCe," \u2014 "),mS=n(pCe,"A",{href:!0});var rNr=s(mS);plo=r(rNr,"ProphetNetModel"),rNr.forEach(t),_lo=r(pCe," (ProphetNet model)"),pCe.forEach(t),ulo=i(C),jp=n(C,"LI",{});var _Ce=s(jp);AK=n(_Ce,"STRONG",{});var tNr=s(AK);blo=r(tNr,"qdqbert"),tNr.forEach(t),vlo=r(_Ce," \u2014 "),gS=n(_Ce,"A",{href:!0});var aNr=s(gS);Tlo=r(aNr,"QDQBertModel"),aNr.forEach(t),Flo=r(_Ce," (QDQBert model)"),_Ce.forEach(t),Clo=i(C),Dp=n(C,"LI",{});var uCe=s(Dp);LK=n(uCe,"STRONG",{});var nNr=s(LK);Mlo=r(nNr,"reformer"),nNr.forEach(t),Elo=r(uCe," \u2014 "),hS=n(uCe,"A",{href:!0});var sNr=s(hS);ylo=r(sNr,"ReformerModel"),sNr.forEach(t),wlo=r(uCe," (Reformer model)"),uCe.forEach(t),Alo=i(C),Np=n(C,"LI",{});var bCe=s(Np);BK=n(bCe,"STRONG",{});var lNr=s(BK);Llo=r(lNr,"rembert"),lNr.forEach(t),Blo=r(bCe," \u2014 "),pS=n(bCe,"A",{href:!0});var iNr=s(pS);xlo=r(iNr,"RemBertModel"),iNr.forEach(t),klo=r(bCe," (RemBERT model)"),bCe.forEach(t),Rlo=i(C),qp=n(C,"LI",{});var vCe=s(qp);xK=n(vCe,"STRONG",{});var dNr=s(xK);Slo=r(dNr,"retribert"),dNr.forEach(t),Plo=r(vCe," \u2014 "),_S=n(vCe,"A",{href:!0});var cNr=s(_S);$lo=r(cNr,"RetriBertModel"),cNr.forEach(t),Ilo=r(vCe," (RetriBERT model)"),vCe.forEach(t),jlo=i(C),Op=n(C,"LI",{});var TCe=s(Op);kK=n(TCe,"STRONG",{});var fNr=s(kK);Dlo=r(fNr,"roberta"),fNr.forEach(t),Nlo=r(TCe," \u2014 "),uS=n(TCe,"A",{href:!0});var mNr=s(uS);qlo=r(mNr,"RobertaModel"),mNr.forEach(t),Olo=r(TCe," (RoBERTa model)"),TCe.forEach(t),Glo=i(C),Gp=n(C,"LI",{});var FCe=s(Gp);RK=n(FCe,"STRONG",{});var gNr=s(RK);Xlo=r(gNr,"roformer"),gNr.forEach(t),Vlo=r(FCe," \u2014 "),bS=n(FCe,"A",{href:!0});var hNr=s(bS);zlo=r(hNr,"RoFormerModel"),hNr.forEach(t),Wlo=r(FCe," (RoFormer model)"),FCe.forEach(t),Qlo=i(C),Xp=n(C,"LI",{});var CCe=s(Xp);SK=n(CCe,"STRONG",{});var pNr=s(SK);Hlo=r(pNr,"segformer"),pNr.forEach(t),Ulo=r(CCe," \u2014 "),vS=n(CCe,"A",{href:!0});var _Nr=s(vS);Jlo=r(_Nr,"SegformerModel"),_Nr.forEach(t),Ylo=r(CCe," (SegFormer model)"),CCe.forEach(t),Klo=i(C),Vp=n(C,"LI",{});var MCe=s(Vp);PK=n(MCe,"STRONG",{});var uNr=s(PK);Zlo=r(uNr,"sew"),uNr.forEach(t),eio=r(MCe," \u2014 "),TS=n(MCe,"A",{href:!0});var bNr=s(TS);oio=r(bNr,"SEWModel"),bNr.forEach(t),rio=r(MCe," (SEW model)"),MCe.forEach(t),tio=i(C),zp=n(C,"LI",{});var ECe=s(zp);$K=n(ECe,"STRONG",{});var vNr=s($K);aio=r(vNr,"sew-d"),vNr.forEach(t),nio=r(ECe," \u2014 "),FS=n(ECe,"A",{href:!0});var TNr=s(FS);sio=r(TNr,"SEWDModel"),TNr.forEach(t),lio=r(ECe," (SEW-D model)"),ECe.forEach(t),iio=i(C),Wp=n(C,"LI",{});var yCe=s(Wp);IK=n(yCe,"STRONG",{});var FNr=s(IK);dio=r(FNr,"speech_to_text"),FNr.forEach(t),cio=r(yCe," \u2014 "),CS=n(yCe,"A",{href:!0});var CNr=s(CS);fio=r(CNr,"Speech2TextModel"),CNr.forEach(t),mio=r(yCe," (Speech2Text model)"),yCe.forEach(t),gio=i(C),Qp=n(C,"LI",{});var wCe=s(Qp);jK=n(wCe,"STRONG",{});var MNr=s(jK);hio=r(MNr,"splinter"),MNr.forEach(t),pio=r(wCe," \u2014 "),MS=n(wCe,"A",{href:!0});var ENr=s(MS);_io=r(ENr,"SplinterModel"),ENr.forEach(t),uio=r(wCe," (Splinter model)"),wCe.forEach(t),bio=i(C),Hp=n(C,"LI",{});var ACe=s(Hp);DK=n(ACe,"STRONG",{});var yNr=s(DK);vio=r(yNr,"squeezebert"),yNr.forEach(t),Tio=r(ACe," \u2014 "),ES=n(ACe,"A",{href:!0});var wNr=s(ES);Fio=r(wNr,"SqueezeBertModel"),wNr.forEach(t),Cio=r(ACe," (SqueezeBERT model)"),ACe.forEach(t),Mio=i(C),Up=n(C,"LI",{});var LCe=s(Up);NK=n(LCe,"STRONG",{});var ANr=s(NK);Eio=r(ANr,"swin"),ANr.forEach(t),yio=r(LCe," \u2014 "),yS=n(LCe,"A",{href:!0});var LNr=s(yS);wio=r(LNr,"SwinModel"),LNr.forEach(t),Aio=r(LCe," (Swin model)"),LCe.forEach(t),Lio=i(C),Jp=n(C,"LI",{});var BCe=s(Jp);qK=n(BCe,"STRONG",{});var BNr=s(qK);Bio=r(BNr,"t5"),BNr.forEach(t),xio=r(BCe," \u2014 "),wS=n(BCe,"A",{href:!0});var xNr=s(wS);kio=r(xNr,"T5Model"),xNr.forEach(t),Rio=r(BCe," (T5 model)"),BCe.forEach(t),Sio=i(C),Yp=n(C,"LI",{});var xCe=s(Yp);OK=n(xCe,"STRONG",{});var kNr=s(OK);Pio=r(kNr,"tapas"),kNr.forEach(t),$io=r(xCe," \u2014 "),AS=n(xCe,"A",{href:!0});var RNr=s(AS);Iio=r(RNr,"TapasModel"),RNr.forEach(t),jio=r(xCe," (TAPAS model)"),xCe.forEach(t),Dio=i(C),Kp=n(C,"LI",{});var kCe=s(Kp);GK=n(kCe,"STRONG",{});var SNr=s(GK);Nio=r(SNr,"transfo-xl"),SNr.forEach(t),qio=r(kCe," \u2014 "),LS=n(kCe,"A",{href:!0});var PNr=s(LS);Oio=r(PNr,"TransfoXLModel"),PNr.forEach(t),Gio=r(kCe," (Transformer-XL model)"),kCe.forEach(t),Xio=i(C),Zp=n(C,"LI",{});var RCe=s(Zp);XK=n(RCe,"STRONG",{});var $Nr=s(XK);Vio=r($Nr,"unispeech"),$Nr.forEach(t),zio=r(RCe," \u2014 "),BS=n(RCe,"A",{href:!0});var INr=s(BS);Wio=r(INr,"UniSpeechModel"),INr.forEach(t),Qio=r(RCe," (UniSpeech model)"),RCe.forEach(t),Hio=i(C),e_=n(C,"LI",{});var SCe=s(e_);VK=n(SCe,"STRONG",{});var jNr=s(VK);Uio=r(jNr,"unispeech-sat"),jNr.forEach(t),Jio=r(SCe," \u2014 "),xS=n(SCe,"A",{href:!0});var DNr=s(xS);Yio=r(DNr,"UniSpeechSatModel"),DNr.forEach(t),Kio=r(SCe," (UniSpeechSat model)"),SCe.forEach(t),Zio=i(C),o_=n(C,"LI",{});var PCe=s(o_);zK=n(PCe,"STRONG",{});var NNr=s(zK);edo=r(NNr,"vilt"),NNr.forEach(t),odo=r(PCe," \u2014 "),kS=n(PCe,"A",{href:!0});var qNr=s(kS);rdo=r(qNr,"ViltModel"),qNr.forEach(t),tdo=r(PCe," (ViLT model)"),PCe.forEach(t),ado=i(C),r_=n(C,"LI",{});var $Ce=s(r_);WK=n($Ce,"STRONG",{});var ONr=s(WK);ndo=r(ONr,"vision-text-dual-encoder"),ONr.forEach(t),sdo=r($Ce," \u2014 "),RS=n($Ce,"A",{href:!0});var GNr=s(RS);ldo=r(GNr,"VisionTextDualEncoderModel"),GNr.forEach(t),ido=r($Ce," (VisionTextDualEncoder model)"),$Ce.forEach(t),ddo=i(C),t_=n(C,"LI",{});var ICe=s(t_);QK=n(ICe,"STRONG",{});var XNr=s(QK);cdo=r(XNr,"visual_bert"),XNr.forEach(t),fdo=r(ICe," \u2014 "),SS=n(ICe,"A",{href:!0});var VNr=s(SS);mdo=r(VNr,"VisualBertModel"),VNr.forEach(t),gdo=r(ICe," (VisualBert model)"),ICe.forEach(t),hdo=i(C),a_=n(C,"LI",{});var jCe=s(a_);HK=n(jCe,"STRONG",{});var zNr=s(HK);pdo=r(zNr,"vit"),zNr.forEach(t),_do=r(jCe," \u2014 "),PS=n(jCe,"A",{href:!0});var WNr=s(PS);udo=r(WNr,"ViTModel"),WNr.forEach(t),bdo=r(jCe," (ViT model)"),jCe.forEach(t),vdo=i(C),n_=n(C,"LI",{});var DCe=s(n_);UK=n(DCe,"STRONG",{});var QNr=s(UK);Tdo=r(QNr,"vit_mae"),QNr.forEach(t),Fdo=r(DCe," \u2014 "),$S=n(DCe,"A",{href:!0});var HNr=s($S);Cdo=r(HNr,"ViTMAEModel"),HNr.forEach(t),Mdo=r(DCe," (ViTMAE model)"),DCe.forEach(t),Edo=i(C),s_=n(C,"LI",{});var NCe=s(s_);JK=n(NCe,"STRONG",{});var UNr=s(JK);ydo=r(UNr,"wav2vec2"),UNr.forEach(t),wdo=r(NCe," \u2014 "),IS=n(NCe,"A",{href:!0});var JNr=s(IS);Ado=r(JNr,"Wav2Vec2Model"),JNr.forEach(t),Ldo=r(NCe," (Wav2Vec2 model)"),NCe.forEach(t),Bdo=i(C),l_=n(C,"LI",{});var qCe=s(l_);YK=n(qCe,"STRONG",{});var YNr=s(YK);xdo=r(YNr,"wavlm"),YNr.forEach(t),kdo=r(qCe," \u2014 "),jS=n(qCe,"A",{href:!0});var KNr=s(jS);Rdo=r(KNr,"WavLMModel"),KNr.forEach(t),Sdo=r(qCe," (WavLM model)"),qCe.forEach(t),Pdo=i(C),i_=n(C,"LI",{});var OCe=s(i_);KK=n(OCe,"STRONG",{});var ZNr=s(KK);$do=r(ZNr,"xglm"),ZNr.forEach(t),Ido=r(OCe," \u2014 "),DS=n(OCe,"A",{href:!0});var eqr=s(DS);jdo=r(eqr,"XGLMModel"),eqr.forEach(t),Ddo=r(OCe," (XGLM model)"),OCe.forEach(t),Ndo=i(C),d_=n(C,"LI",{});var GCe=s(d_);ZK=n(GCe,"STRONG",{});var oqr=s(ZK);qdo=r(oqr,"xlm"),oqr.forEach(t),Odo=r(GCe," \u2014 "),NS=n(GCe,"A",{href:!0});var rqr=s(NS);Gdo=r(rqr,"XLMModel"),rqr.forEach(t),Xdo=r(GCe," (XLM model)"),GCe.forEach(t),Vdo=i(C),c_=n(C,"LI",{});var XCe=s(c_);eZ=n(XCe,"STRONG",{});var tqr=s(eZ);zdo=r(tqr,"xlm-prophetnet"),tqr.forEach(t),Wdo=r(XCe," \u2014 "),qS=n(XCe,"A",{href:!0});var aqr=s(qS);Qdo=r(aqr,"XLMProphetNetModel"),aqr.forEach(t),Hdo=r(XCe," (XLMProphetNet model)"),XCe.forEach(t),Udo=i(C),f_=n(C,"LI",{});var VCe=s(f_);oZ=n(VCe,"STRONG",{});var nqr=s(oZ);Jdo=r(nqr,"xlm-roberta"),nqr.forEach(t),Ydo=r(VCe," \u2014 "),OS=n(VCe,"A",{href:!0});var sqr=s(OS);Kdo=r(sqr,"XLMRobertaModel"),sqr.forEach(t),Zdo=r(VCe," (XLM-RoBERTa model)"),VCe.forEach(t),eco=i(C),m_=n(C,"LI",{});var zCe=s(m_);rZ=n(zCe,"STRONG",{});var lqr=s(rZ);oco=r(lqr,"xlm-roberta-xl"),lqr.forEach(t),rco=r(zCe," \u2014 "),GS=n(zCe,"A",{href:!0});var iqr=s(GS);tco=r(iqr,"XLMRobertaXLModel"),iqr.forEach(t),aco=r(zCe," (XLM-RoBERTa-XL model)"),zCe.forEach(t),nco=i(C),g_=n(C,"LI",{});var WCe=s(g_);tZ=n(WCe,"STRONG",{});var dqr=s(tZ);sco=r(dqr,"xlnet"),dqr.forEach(t),lco=r(WCe," \u2014 "),XS=n(WCe,"A",{href:!0});var cqr=s(XS);ico=r(cqr,"XLNetModel"),cqr.forEach(t),dco=r(WCe," (XLNet model)"),WCe.forEach(t),cco=i(C),h_=n(C,"LI",{});var QCe=s(h_);aZ=n(QCe,"STRONG",{});var fqr=s(aZ);fco=r(fqr,"yoso"),fqr.forEach(t),mco=r(QCe," \u2014 "),VS=n(QCe,"A",{href:!0});var mqr=s(VS);gco=r(mqr,"YosoModel"),mqr.forEach(t),hco=r(QCe," (YOSO model)"),QCe.forEach(t),C.forEach(t),pco=i(Dt),p_=n(Dt,"P",{});var HCe=s(p_);_co=r(HCe,"The model is set in evaluation mode by default using "),nZ=n(HCe,"CODE",{});var gqr=s(nZ);uco=r(gqr,"model.eval()"),gqr.forEach(t),bco=r(HCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sZ=n(HCe,"CODE",{});var hqr=s(sZ);vco=r(hqr,"model.train()"),hqr.forEach(t),HCe.forEach(t),Tco=i(Dt),lZ=n(Dt,"P",{});var pqr=s(lZ);Fco=r(pqr,"Examples:"),pqr.forEach(t),Cco=i(Dt),m(EE.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),NBe=i(d),Zi=n(d,"H2",{class:!0});var Hke=s(Zi);__=n(Hke,"A",{id:!0,class:!0,href:!0});var _qr=s(__);iZ=n(_qr,"SPAN",{});var uqr=s(iZ);m(yE.$$.fragment,uqr),uqr.forEach(t),_qr.forEach(t),Mco=i(Hke),dZ=n(Hke,"SPAN",{});var bqr=s(dZ);Eco=r(bqr,"AutoModelForPreTraining"),bqr.forEach(t),Hke.forEach(t),qBe=i(d),Uo=n(d,"DIV",{class:!0});var Hs=s(Uo);m(wE.$$.fragment,Hs),yco=i(Hs),ed=n(Hs,"P",{});var dz=s(ed);wco=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cZ=n(dz,"CODE",{});var vqr=s(cZ);Aco=r(vqr,"from_pretrained()"),vqr.forEach(t),Lco=r(dz,"class method or the "),fZ=n(dz,"CODE",{});var Tqr=s(fZ);Bco=r(Tqr,"from_config()"),Tqr.forEach(t),xco=r(dz,`class
method.`),dz.forEach(t),kco=i(Hs),AE=n(Hs,"P",{});var Uke=s(AE);Rco=r(Uke,"This class cannot be instantiated directly using "),mZ=n(Uke,"CODE",{});var Fqr=s(mZ);Sco=r(Fqr,"__init__()"),Fqr.forEach(t),Pco=r(Uke," (throws an error)."),Uke.forEach(t),$co=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(LE.$$.fragment,Us),Ico=i(Us),gZ=n(Us,"P",{});var Cqr=s(gZ);jco=r(Cqr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cqr.forEach(t),Dco=i(Us),od=n(Us,"P",{});var cz=s(od);Nco=r(cz,`Note:
Loading a model from its configuration file does `),hZ=n(cz,"STRONG",{});var Mqr=s(hZ);qco=r(Mqr,"not"),Mqr.forEach(t),Oco=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(cz,"CODE",{});var Eqr=s(pZ);Gco=r(Eqr,"from_pretrained()"),Eqr.forEach(t),Xco=r(cz,"to load the model weights."),cz.forEach(t),Vco=i(Us),_Z=n(Us,"P",{});var yqr=s(_Z);zco=r(yqr,"Examples:"),yqr.forEach(t),Wco=i(Us),m(BE.$$.fragment,Us),Us.forEach(t),Qco=i(Hs),Se=n(Hs,"DIV",{class:!0});var Nt=s(Se);m(xE.$$.fragment,Nt),Hco=i(Nt),uZ=n(Nt,"P",{});var wqr=s(uZ);Uco=r(wqr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wqr.forEach(t),Jco=i(Nt),Va=n(Nt,"P",{});var G4=s(Va);Yco=r(G4,"The model class to instantiate is selected based on the "),bZ=n(G4,"CODE",{});var Aqr=s(bZ);Kco=r(Aqr,"model_type"),Aqr.forEach(t),Zco=r(G4,` property of the config object (either
passed as an argument or loaded from `),vZ=n(G4,"CODE",{});var Lqr=s(vZ);efo=r(Lqr,"pretrained_model_name_or_path"),Lqr.forEach(t),ofo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=n(G4,"CODE",{});var Bqr=s(TZ);rfo=r(Bqr,"pretrained_model_name_or_path"),Bqr.forEach(t),tfo=r(G4,":"),G4.forEach(t),afo=i(Nt),k=n(Nt,"UL",{});var S=s(k);u_=n(S,"LI",{});var UCe=s(u_);FZ=n(UCe,"STRONG",{});var xqr=s(FZ);nfo=r(xqr,"albert"),xqr.forEach(t),sfo=r(UCe," \u2014 "),zS=n(UCe,"A",{href:!0});var kqr=s(zS);lfo=r(kqr,"AlbertForPreTraining"),kqr.forEach(t),ifo=r(UCe," (ALBERT model)"),UCe.forEach(t),dfo=i(S),b_=n(S,"LI",{});var JCe=s(b_);CZ=n(JCe,"STRONG",{});var Rqr=s(CZ);cfo=r(Rqr,"bart"),Rqr.forEach(t),ffo=r(JCe," \u2014 "),WS=n(JCe,"A",{href:!0});var Sqr=s(WS);mfo=r(Sqr,"BartForConditionalGeneration"),Sqr.forEach(t),gfo=r(JCe," (BART model)"),JCe.forEach(t),hfo=i(S),v_=n(S,"LI",{});var YCe=s(v_);MZ=n(YCe,"STRONG",{});var Pqr=s(MZ);pfo=r(Pqr,"bert"),Pqr.forEach(t),_fo=r(YCe," \u2014 "),QS=n(YCe,"A",{href:!0});var $qr=s(QS);ufo=r($qr,"BertForPreTraining"),$qr.forEach(t),bfo=r(YCe," (BERT model)"),YCe.forEach(t),vfo=i(S),T_=n(S,"LI",{});var KCe=s(T_);EZ=n(KCe,"STRONG",{});var Iqr=s(EZ);Tfo=r(Iqr,"big_bird"),Iqr.forEach(t),Ffo=r(KCe," \u2014 "),HS=n(KCe,"A",{href:!0});var jqr=s(HS);Cfo=r(jqr,"BigBirdForPreTraining"),jqr.forEach(t),Mfo=r(KCe," (BigBird model)"),KCe.forEach(t),Efo=i(S),F_=n(S,"LI",{});var ZCe=s(F_);yZ=n(ZCe,"STRONG",{});var Dqr=s(yZ);yfo=r(Dqr,"camembert"),Dqr.forEach(t),wfo=r(ZCe," \u2014 "),US=n(ZCe,"A",{href:!0});var Nqr=s(US);Afo=r(Nqr,"CamembertForMaskedLM"),Nqr.forEach(t),Lfo=r(ZCe," (CamemBERT model)"),ZCe.forEach(t),Bfo=i(S),C_=n(S,"LI",{});var e4e=s(C_);wZ=n(e4e,"STRONG",{});var qqr=s(wZ);xfo=r(qqr,"ctrl"),qqr.forEach(t),kfo=r(e4e," \u2014 "),JS=n(e4e,"A",{href:!0});var Oqr=s(JS);Rfo=r(Oqr,"CTRLLMHeadModel"),Oqr.forEach(t),Sfo=r(e4e," (CTRL model)"),e4e.forEach(t),Pfo=i(S),M_=n(S,"LI",{});var o4e=s(M_);AZ=n(o4e,"STRONG",{});var Gqr=s(AZ);$fo=r(Gqr,"data2vec-text"),Gqr.forEach(t),Ifo=r(o4e," \u2014 "),YS=n(o4e,"A",{href:!0});var Xqr=s(YS);jfo=r(Xqr,"Data2VecTextForMaskedLM"),Xqr.forEach(t),Dfo=r(o4e," (Data2VecText model)"),o4e.forEach(t),Nfo=i(S),E_=n(S,"LI",{});var r4e=s(E_);LZ=n(r4e,"STRONG",{});var Vqr=s(LZ);qfo=r(Vqr,"deberta"),Vqr.forEach(t),Ofo=r(r4e," \u2014 "),KS=n(r4e,"A",{href:!0});var zqr=s(KS);Gfo=r(zqr,"DebertaForMaskedLM"),zqr.forEach(t),Xfo=r(r4e," (DeBERTa model)"),r4e.forEach(t),Vfo=i(S),y_=n(S,"LI",{});var t4e=s(y_);BZ=n(t4e,"STRONG",{});var Wqr=s(BZ);zfo=r(Wqr,"deberta-v2"),Wqr.forEach(t),Wfo=r(t4e," \u2014 "),ZS=n(t4e,"A",{href:!0});var Qqr=s(ZS);Qfo=r(Qqr,"DebertaV2ForMaskedLM"),Qqr.forEach(t),Hfo=r(t4e," (DeBERTa-v2 model)"),t4e.forEach(t),Ufo=i(S),w_=n(S,"LI",{});var a4e=s(w_);xZ=n(a4e,"STRONG",{});var Hqr=s(xZ);Jfo=r(Hqr,"distilbert"),Hqr.forEach(t),Yfo=r(a4e," \u2014 "),eP=n(a4e,"A",{href:!0});var Uqr=s(eP);Kfo=r(Uqr,"DistilBertForMaskedLM"),Uqr.forEach(t),Zfo=r(a4e," (DistilBERT model)"),a4e.forEach(t),emo=i(S),A_=n(S,"LI",{});var n4e=s(A_);kZ=n(n4e,"STRONG",{});var Jqr=s(kZ);omo=r(Jqr,"electra"),Jqr.forEach(t),rmo=r(n4e," \u2014 "),oP=n(n4e,"A",{href:!0});var Yqr=s(oP);tmo=r(Yqr,"ElectraForPreTraining"),Yqr.forEach(t),amo=r(n4e," (ELECTRA model)"),n4e.forEach(t),nmo=i(S),L_=n(S,"LI",{});var s4e=s(L_);RZ=n(s4e,"STRONG",{});var Kqr=s(RZ);smo=r(Kqr,"flaubert"),Kqr.forEach(t),lmo=r(s4e," \u2014 "),rP=n(s4e,"A",{href:!0});var Zqr=s(rP);imo=r(Zqr,"FlaubertWithLMHeadModel"),Zqr.forEach(t),dmo=r(s4e," (FlauBERT model)"),s4e.forEach(t),cmo=i(S),B_=n(S,"LI",{});var l4e=s(B_);SZ=n(l4e,"STRONG",{});var eOr=s(SZ);fmo=r(eOr,"fnet"),eOr.forEach(t),mmo=r(l4e," \u2014 "),tP=n(l4e,"A",{href:!0});var oOr=s(tP);gmo=r(oOr,"FNetForPreTraining"),oOr.forEach(t),hmo=r(l4e," (FNet model)"),l4e.forEach(t),pmo=i(S),x_=n(S,"LI",{});var i4e=s(x_);PZ=n(i4e,"STRONG",{});var rOr=s(PZ);_mo=r(rOr,"fsmt"),rOr.forEach(t),umo=r(i4e," \u2014 "),aP=n(i4e,"A",{href:!0});var tOr=s(aP);bmo=r(tOr,"FSMTForConditionalGeneration"),tOr.forEach(t),vmo=r(i4e," (FairSeq Machine-Translation model)"),i4e.forEach(t),Tmo=i(S),k_=n(S,"LI",{});var d4e=s(k_);$Z=n(d4e,"STRONG",{});var aOr=s($Z);Fmo=r(aOr,"funnel"),aOr.forEach(t),Cmo=r(d4e," \u2014 "),nP=n(d4e,"A",{href:!0});var nOr=s(nP);Mmo=r(nOr,"FunnelForPreTraining"),nOr.forEach(t),Emo=r(d4e," (Funnel Transformer model)"),d4e.forEach(t),ymo=i(S),R_=n(S,"LI",{});var c4e=s(R_);IZ=n(c4e,"STRONG",{});var sOr=s(IZ);wmo=r(sOr,"gpt2"),sOr.forEach(t),Amo=r(c4e," \u2014 "),sP=n(c4e,"A",{href:!0});var lOr=s(sP);Lmo=r(lOr,"GPT2LMHeadModel"),lOr.forEach(t),Bmo=r(c4e," (OpenAI GPT-2 model)"),c4e.forEach(t),xmo=i(S),S_=n(S,"LI",{});var f4e=s(S_);jZ=n(f4e,"STRONG",{});var iOr=s(jZ);kmo=r(iOr,"ibert"),iOr.forEach(t),Rmo=r(f4e," \u2014 "),lP=n(f4e,"A",{href:!0});var dOr=s(lP);Smo=r(dOr,"IBertForMaskedLM"),dOr.forEach(t),Pmo=r(f4e," (I-BERT model)"),f4e.forEach(t),$mo=i(S),P_=n(S,"LI",{});var m4e=s(P_);DZ=n(m4e,"STRONG",{});var cOr=s(DZ);Imo=r(cOr,"layoutlm"),cOr.forEach(t),jmo=r(m4e," \u2014 "),iP=n(m4e,"A",{href:!0});var fOr=s(iP);Dmo=r(fOr,"LayoutLMForMaskedLM"),fOr.forEach(t),Nmo=r(m4e," (LayoutLM model)"),m4e.forEach(t),qmo=i(S),$_=n(S,"LI",{});var g4e=s($_);NZ=n(g4e,"STRONG",{});var mOr=s(NZ);Omo=r(mOr,"longformer"),mOr.forEach(t),Gmo=r(g4e," \u2014 "),dP=n(g4e,"A",{href:!0});var gOr=s(dP);Xmo=r(gOr,"LongformerForMaskedLM"),gOr.forEach(t),Vmo=r(g4e," (Longformer model)"),g4e.forEach(t),zmo=i(S),I_=n(S,"LI",{});var h4e=s(I_);qZ=n(h4e,"STRONG",{});var hOr=s(qZ);Wmo=r(hOr,"lxmert"),hOr.forEach(t),Qmo=r(h4e," \u2014 "),cP=n(h4e,"A",{href:!0});var pOr=s(cP);Hmo=r(pOr,"LxmertForPreTraining"),pOr.forEach(t),Umo=r(h4e," (LXMERT model)"),h4e.forEach(t),Jmo=i(S),j_=n(S,"LI",{});var p4e=s(j_);OZ=n(p4e,"STRONG",{});var _Or=s(OZ);Ymo=r(_Or,"megatron-bert"),_Or.forEach(t),Kmo=r(p4e," \u2014 "),fP=n(p4e,"A",{href:!0});var uOr=s(fP);Zmo=r(uOr,"MegatronBertForPreTraining"),uOr.forEach(t),ego=r(p4e," (MegatronBert model)"),p4e.forEach(t),ogo=i(S),D_=n(S,"LI",{});var _4e=s(D_);GZ=n(_4e,"STRONG",{});var bOr=s(GZ);rgo=r(bOr,"mobilebert"),bOr.forEach(t),tgo=r(_4e," \u2014 "),mP=n(_4e,"A",{href:!0});var vOr=s(mP);ago=r(vOr,"MobileBertForPreTraining"),vOr.forEach(t),ngo=r(_4e," (MobileBERT model)"),_4e.forEach(t),sgo=i(S),N_=n(S,"LI",{});var u4e=s(N_);XZ=n(u4e,"STRONG",{});var TOr=s(XZ);lgo=r(TOr,"mpnet"),TOr.forEach(t),igo=r(u4e," \u2014 "),gP=n(u4e,"A",{href:!0});var FOr=s(gP);dgo=r(FOr,"MPNetForMaskedLM"),FOr.forEach(t),cgo=r(u4e," (MPNet model)"),u4e.forEach(t),fgo=i(S),q_=n(S,"LI",{});var b4e=s(q_);VZ=n(b4e,"STRONG",{});var COr=s(VZ);mgo=r(COr,"openai-gpt"),COr.forEach(t),ggo=r(b4e," \u2014 "),hP=n(b4e,"A",{href:!0});var MOr=s(hP);hgo=r(MOr,"OpenAIGPTLMHeadModel"),MOr.forEach(t),pgo=r(b4e," (OpenAI GPT model)"),b4e.forEach(t),_go=i(S),O_=n(S,"LI",{});var v4e=s(O_);zZ=n(v4e,"STRONG",{});var EOr=s(zZ);ugo=r(EOr,"retribert"),EOr.forEach(t),bgo=r(v4e," \u2014 "),pP=n(v4e,"A",{href:!0});var yOr=s(pP);vgo=r(yOr,"RetriBertModel"),yOr.forEach(t),Tgo=r(v4e," (RetriBERT model)"),v4e.forEach(t),Fgo=i(S),G_=n(S,"LI",{});var T4e=s(G_);WZ=n(T4e,"STRONG",{});var wOr=s(WZ);Cgo=r(wOr,"roberta"),wOr.forEach(t),Mgo=r(T4e," \u2014 "),_P=n(T4e,"A",{href:!0});var AOr=s(_P);Ego=r(AOr,"RobertaForMaskedLM"),AOr.forEach(t),ygo=r(T4e," (RoBERTa model)"),T4e.forEach(t),wgo=i(S),X_=n(S,"LI",{});var F4e=s(X_);QZ=n(F4e,"STRONG",{});var LOr=s(QZ);Ago=r(LOr,"squeezebert"),LOr.forEach(t),Lgo=r(F4e," \u2014 "),uP=n(F4e,"A",{href:!0});var BOr=s(uP);Bgo=r(BOr,"SqueezeBertForMaskedLM"),BOr.forEach(t),xgo=r(F4e," (SqueezeBERT model)"),F4e.forEach(t),kgo=i(S),V_=n(S,"LI",{});var C4e=s(V_);HZ=n(C4e,"STRONG",{});var xOr=s(HZ);Rgo=r(xOr,"t5"),xOr.forEach(t),Sgo=r(C4e," \u2014 "),bP=n(C4e,"A",{href:!0});var kOr=s(bP);Pgo=r(kOr,"T5ForConditionalGeneration"),kOr.forEach(t),$go=r(C4e," (T5 model)"),C4e.forEach(t),Igo=i(S),z_=n(S,"LI",{});var M4e=s(z_);UZ=n(M4e,"STRONG",{});var ROr=s(UZ);jgo=r(ROr,"tapas"),ROr.forEach(t),Dgo=r(M4e," \u2014 "),vP=n(M4e,"A",{href:!0});var SOr=s(vP);Ngo=r(SOr,"TapasForMaskedLM"),SOr.forEach(t),qgo=r(M4e," (TAPAS model)"),M4e.forEach(t),Ogo=i(S),W_=n(S,"LI",{});var E4e=s(W_);JZ=n(E4e,"STRONG",{});var POr=s(JZ);Ggo=r(POr,"transfo-xl"),POr.forEach(t),Xgo=r(E4e," \u2014 "),TP=n(E4e,"A",{href:!0});var $Or=s(TP);Vgo=r($Or,"TransfoXLLMHeadModel"),$Or.forEach(t),zgo=r(E4e," (Transformer-XL model)"),E4e.forEach(t),Wgo=i(S),Q_=n(S,"LI",{});var y4e=s(Q_);YZ=n(y4e,"STRONG",{});var IOr=s(YZ);Qgo=r(IOr,"unispeech"),IOr.forEach(t),Hgo=r(y4e," \u2014 "),FP=n(y4e,"A",{href:!0});var jOr=s(FP);Ugo=r(jOr,"UniSpeechForPreTraining"),jOr.forEach(t),Jgo=r(y4e," (UniSpeech model)"),y4e.forEach(t),Ygo=i(S),H_=n(S,"LI",{});var w4e=s(H_);KZ=n(w4e,"STRONG",{});var DOr=s(KZ);Kgo=r(DOr,"unispeech-sat"),DOr.forEach(t),Zgo=r(w4e," \u2014 "),CP=n(w4e,"A",{href:!0});var NOr=s(CP);eho=r(NOr,"UniSpeechSatForPreTraining"),NOr.forEach(t),oho=r(w4e," (UniSpeechSat model)"),w4e.forEach(t),rho=i(S),U_=n(S,"LI",{});var A4e=s(U_);ZZ=n(A4e,"STRONG",{});var qOr=s(ZZ);tho=r(qOr,"visual_bert"),qOr.forEach(t),aho=r(A4e," \u2014 "),MP=n(A4e,"A",{href:!0});var OOr=s(MP);nho=r(OOr,"VisualBertForPreTraining"),OOr.forEach(t),sho=r(A4e," (VisualBert model)"),A4e.forEach(t),lho=i(S),J_=n(S,"LI",{});var L4e=s(J_);eee=n(L4e,"STRONG",{});var GOr=s(eee);iho=r(GOr,"vit_mae"),GOr.forEach(t),dho=r(L4e," \u2014 "),EP=n(L4e,"A",{href:!0});var XOr=s(EP);cho=r(XOr,"ViTMAEForPreTraining"),XOr.forEach(t),fho=r(L4e," (ViTMAE model)"),L4e.forEach(t),mho=i(S),Y_=n(S,"LI",{});var B4e=s(Y_);oee=n(B4e,"STRONG",{});var VOr=s(oee);gho=r(VOr,"wav2vec2"),VOr.forEach(t),hho=r(B4e," \u2014 "),yP=n(B4e,"A",{href:!0});var zOr=s(yP);pho=r(zOr,"Wav2Vec2ForPreTraining"),zOr.forEach(t),_ho=r(B4e," (Wav2Vec2 model)"),B4e.forEach(t),uho=i(S),K_=n(S,"LI",{});var x4e=s(K_);ree=n(x4e,"STRONG",{});var WOr=s(ree);bho=r(WOr,"xlm"),WOr.forEach(t),vho=r(x4e," \u2014 "),wP=n(x4e,"A",{href:!0});var QOr=s(wP);Tho=r(QOr,"XLMWithLMHeadModel"),QOr.forEach(t),Fho=r(x4e," (XLM model)"),x4e.forEach(t),Cho=i(S),Z_=n(S,"LI",{});var k4e=s(Z_);tee=n(k4e,"STRONG",{});var HOr=s(tee);Mho=r(HOr,"xlm-roberta"),HOr.forEach(t),Eho=r(k4e," \u2014 "),AP=n(k4e,"A",{href:!0});var UOr=s(AP);yho=r(UOr,"XLMRobertaForMaskedLM"),UOr.forEach(t),who=r(k4e," (XLM-RoBERTa model)"),k4e.forEach(t),Aho=i(S),eu=n(S,"LI",{});var R4e=s(eu);aee=n(R4e,"STRONG",{});var JOr=s(aee);Lho=r(JOr,"xlm-roberta-xl"),JOr.forEach(t),Bho=r(R4e," \u2014 "),LP=n(R4e,"A",{href:!0});var YOr=s(LP);xho=r(YOr,"XLMRobertaXLForMaskedLM"),YOr.forEach(t),kho=r(R4e," (XLM-RoBERTa-XL model)"),R4e.forEach(t),Rho=i(S),ou=n(S,"LI",{});var S4e=s(ou);nee=n(S4e,"STRONG",{});var KOr=s(nee);Sho=r(KOr,"xlnet"),KOr.forEach(t),Pho=r(S4e," \u2014 "),BP=n(S4e,"A",{href:!0});var ZOr=s(BP);$ho=r(ZOr,"XLNetLMHeadModel"),ZOr.forEach(t),Iho=r(S4e," (XLNet model)"),S4e.forEach(t),S.forEach(t),jho=i(Nt),ru=n(Nt,"P",{});var P4e=s(ru);Dho=r(P4e,"The model is set in evaluation mode by default using "),see=n(P4e,"CODE",{});var eGr=s(see);Nho=r(eGr,"model.eval()"),eGr.forEach(t),qho=r(P4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=n(P4e,"CODE",{});var oGr=s(lee);Oho=r(oGr,"model.train()"),oGr.forEach(t),P4e.forEach(t),Gho=i(Nt),iee=n(Nt,"P",{});var rGr=s(iee);Xho=r(rGr,"Examples:"),rGr.forEach(t),Vho=i(Nt),m(kE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),OBe=i(d),rd=n(d,"H2",{class:!0});var Jke=s(rd);tu=n(Jke,"A",{id:!0,class:!0,href:!0});var tGr=s(tu);dee=n(tGr,"SPAN",{});var aGr=s(dee);m(RE.$$.fragment,aGr),aGr.forEach(t),tGr.forEach(t),zho=i(Jke),cee=n(Jke,"SPAN",{});var nGr=s(cee);Who=r(nGr,"AutoModelForCausalLM"),nGr.forEach(t),Jke.forEach(t),GBe=i(d),Jo=n(d,"DIV",{class:!0});var Js=s(Jo);m(SE.$$.fragment,Js),Qho=i(Js),td=n(Js,"P",{});var fz=s(td);Hho=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fee=n(fz,"CODE",{});var sGr=s(fee);Uho=r(sGr,"from_pretrained()"),sGr.forEach(t),Jho=r(fz,"class method or the "),mee=n(fz,"CODE",{});var lGr=s(mee);Yho=r(lGr,"from_config()"),lGr.forEach(t),Kho=r(fz,`class
method.`),fz.forEach(t),Zho=i(Js),PE=n(Js,"P",{});var Yke=s(PE);epo=r(Yke,"This class cannot be instantiated directly using "),gee=n(Yke,"CODE",{});var iGr=s(gee);opo=r(iGr,"__init__()"),iGr.forEach(t),rpo=r(Yke," (throws an error)."),Yke.forEach(t),tpo=i(Js),Vr=n(Js,"DIV",{class:!0});var Ys=s(Vr);m($E.$$.fragment,Ys),apo=i(Ys),hee=n(Ys,"P",{});var dGr=s(hee);npo=r(dGr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dGr.forEach(t),spo=i(Ys),ad=n(Ys,"P",{});var mz=s(ad);lpo=r(mz,`Note:
Loading a model from its configuration file does `),pee=n(mz,"STRONG",{});var cGr=s(pee);ipo=r(cGr,"not"),cGr.forEach(t),dpo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(mz,"CODE",{});var fGr=s(_ee);cpo=r(fGr,"from_pretrained()"),fGr.forEach(t),fpo=r(mz,"to load the model weights."),mz.forEach(t),mpo=i(Ys),uee=n(Ys,"P",{});var mGr=s(uee);gpo=r(mGr,"Examples:"),mGr.forEach(t),hpo=i(Ys),m(IE.$$.fragment,Ys),Ys.forEach(t),ppo=i(Js),Pe=n(Js,"DIV",{class:!0});var qt=s(Pe);m(jE.$$.fragment,qt),_po=i(qt),bee=n(qt,"P",{});var gGr=s(bee);upo=r(gGr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gGr.forEach(t),bpo=i(qt),za=n(qt,"P",{});var X4=s(za);vpo=r(X4,"The model class to instantiate is selected based on the "),vee=n(X4,"CODE",{});var hGr=s(vee);Tpo=r(hGr,"model_type"),hGr.forEach(t),Fpo=r(X4,` property of the config object (either
passed as an argument or loaded from `),Tee=n(X4,"CODE",{});var pGr=s(Tee);Cpo=r(pGr,"pretrained_model_name_or_path"),pGr.forEach(t),Mpo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=n(X4,"CODE",{});var _Gr=s(Fee);Epo=r(_Gr,"pretrained_model_name_or_path"),_Gr.forEach(t),ypo=r(X4,":"),X4.forEach(t),wpo=i(qt),$=n(qt,"UL",{});var j=s($);au=n(j,"LI",{});var $4e=s(au);Cee=n($4e,"STRONG",{});var uGr=s(Cee);Apo=r(uGr,"bart"),uGr.forEach(t),Lpo=r($4e," \u2014 "),xP=n($4e,"A",{href:!0});var bGr=s(xP);Bpo=r(bGr,"BartForCausalLM"),bGr.forEach(t),xpo=r($4e," (BART model)"),$4e.forEach(t),kpo=i(j),nu=n(j,"LI",{});var I4e=s(nu);Mee=n(I4e,"STRONG",{});var vGr=s(Mee);Rpo=r(vGr,"bert"),vGr.forEach(t),Spo=r(I4e," \u2014 "),kP=n(I4e,"A",{href:!0});var TGr=s(kP);Ppo=r(TGr,"BertLMHeadModel"),TGr.forEach(t),$po=r(I4e," (BERT model)"),I4e.forEach(t),Ipo=i(j),su=n(j,"LI",{});var j4e=s(su);Eee=n(j4e,"STRONG",{});var FGr=s(Eee);jpo=r(FGr,"bert-generation"),FGr.forEach(t),Dpo=r(j4e," \u2014 "),RP=n(j4e,"A",{href:!0});var CGr=s(RP);Npo=r(CGr,"BertGenerationDecoder"),CGr.forEach(t),qpo=r(j4e," (Bert Generation model)"),j4e.forEach(t),Opo=i(j),lu=n(j,"LI",{});var D4e=s(lu);yee=n(D4e,"STRONG",{});var MGr=s(yee);Gpo=r(MGr,"big_bird"),MGr.forEach(t),Xpo=r(D4e," \u2014 "),SP=n(D4e,"A",{href:!0});var EGr=s(SP);Vpo=r(EGr,"BigBirdForCausalLM"),EGr.forEach(t),zpo=r(D4e," (BigBird model)"),D4e.forEach(t),Wpo=i(j),iu=n(j,"LI",{});var N4e=s(iu);wee=n(N4e,"STRONG",{});var yGr=s(wee);Qpo=r(yGr,"bigbird_pegasus"),yGr.forEach(t),Hpo=r(N4e," \u2014 "),PP=n(N4e,"A",{href:!0});var wGr=s(PP);Upo=r(wGr,"BigBirdPegasusForCausalLM"),wGr.forEach(t),Jpo=r(N4e," (BigBirdPegasus model)"),N4e.forEach(t),Ypo=i(j),du=n(j,"LI",{});var q4e=s(du);Aee=n(q4e,"STRONG",{});var AGr=s(Aee);Kpo=r(AGr,"blenderbot"),AGr.forEach(t),Zpo=r(q4e," \u2014 "),$P=n(q4e,"A",{href:!0});var LGr=s($P);e_o=r(LGr,"BlenderbotForCausalLM"),LGr.forEach(t),o_o=r(q4e," (Blenderbot model)"),q4e.forEach(t),r_o=i(j),cu=n(j,"LI",{});var O4e=s(cu);Lee=n(O4e,"STRONG",{});var BGr=s(Lee);t_o=r(BGr,"blenderbot-small"),BGr.forEach(t),a_o=r(O4e," \u2014 "),IP=n(O4e,"A",{href:!0});var xGr=s(IP);n_o=r(xGr,"BlenderbotSmallForCausalLM"),xGr.forEach(t),s_o=r(O4e," (BlenderbotSmall model)"),O4e.forEach(t),l_o=i(j),fu=n(j,"LI",{});var G4e=s(fu);Bee=n(G4e,"STRONG",{});var kGr=s(Bee);i_o=r(kGr,"camembert"),kGr.forEach(t),d_o=r(G4e," \u2014 "),jP=n(G4e,"A",{href:!0});var RGr=s(jP);c_o=r(RGr,"CamembertForCausalLM"),RGr.forEach(t),f_o=r(G4e," (CamemBERT model)"),G4e.forEach(t),m_o=i(j),mu=n(j,"LI",{});var X4e=s(mu);xee=n(X4e,"STRONG",{});var SGr=s(xee);g_o=r(SGr,"ctrl"),SGr.forEach(t),h_o=r(X4e," \u2014 "),DP=n(X4e,"A",{href:!0});var PGr=s(DP);p_o=r(PGr,"CTRLLMHeadModel"),PGr.forEach(t),__o=r(X4e," (CTRL model)"),X4e.forEach(t),u_o=i(j),gu=n(j,"LI",{});var V4e=s(gu);kee=n(V4e,"STRONG",{});var $Gr=s(kee);b_o=r($Gr,"data2vec-text"),$Gr.forEach(t),v_o=r(V4e," \u2014 "),NP=n(V4e,"A",{href:!0});var IGr=s(NP);T_o=r(IGr,"Data2VecTextForCausalLM"),IGr.forEach(t),F_o=r(V4e," (Data2VecText model)"),V4e.forEach(t),C_o=i(j),hu=n(j,"LI",{});var z4e=s(hu);Ree=n(z4e,"STRONG",{});var jGr=s(Ree);M_o=r(jGr,"electra"),jGr.forEach(t),E_o=r(z4e," \u2014 "),qP=n(z4e,"A",{href:!0});var DGr=s(qP);y_o=r(DGr,"ElectraForCausalLM"),DGr.forEach(t),w_o=r(z4e," (ELECTRA model)"),z4e.forEach(t),A_o=i(j),pu=n(j,"LI",{});var W4e=s(pu);See=n(W4e,"STRONG",{});var NGr=s(See);L_o=r(NGr,"gpt2"),NGr.forEach(t),B_o=r(W4e," \u2014 "),OP=n(W4e,"A",{href:!0});var qGr=s(OP);x_o=r(qGr,"GPT2LMHeadModel"),qGr.forEach(t),k_o=r(W4e," (OpenAI GPT-2 model)"),W4e.forEach(t),R_o=i(j),_u=n(j,"LI",{});var Q4e=s(_u);Pee=n(Q4e,"STRONG",{});var OGr=s(Pee);S_o=r(OGr,"gpt_neo"),OGr.forEach(t),P_o=r(Q4e," \u2014 "),GP=n(Q4e,"A",{href:!0});var GGr=s(GP);$_o=r(GGr,"GPTNeoForCausalLM"),GGr.forEach(t),I_o=r(Q4e," (GPT Neo model)"),Q4e.forEach(t),j_o=i(j),uu=n(j,"LI",{});var H4e=s(uu);$ee=n(H4e,"STRONG",{});var XGr=s($ee);D_o=r(XGr,"gptj"),XGr.forEach(t),N_o=r(H4e," \u2014 "),XP=n(H4e,"A",{href:!0});var VGr=s(XP);q_o=r(VGr,"GPTJForCausalLM"),VGr.forEach(t),O_o=r(H4e," (GPT-J model)"),H4e.forEach(t),G_o=i(j),bu=n(j,"LI",{});var U4e=s(bu);Iee=n(U4e,"STRONG",{});var zGr=s(Iee);X_o=r(zGr,"marian"),zGr.forEach(t),V_o=r(U4e," \u2014 "),VP=n(U4e,"A",{href:!0});var WGr=s(VP);z_o=r(WGr,"MarianForCausalLM"),WGr.forEach(t),W_o=r(U4e," (Marian model)"),U4e.forEach(t),Q_o=i(j),vu=n(j,"LI",{});var J4e=s(vu);jee=n(J4e,"STRONG",{});var QGr=s(jee);H_o=r(QGr,"mbart"),QGr.forEach(t),U_o=r(J4e," \u2014 "),zP=n(J4e,"A",{href:!0});var HGr=s(zP);J_o=r(HGr,"MBartForCausalLM"),HGr.forEach(t),Y_o=r(J4e," (mBART model)"),J4e.forEach(t),K_o=i(j),Tu=n(j,"LI",{});var Y4e=s(Tu);Dee=n(Y4e,"STRONG",{});var UGr=s(Dee);Z_o=r(UGr,"megatron-bert"),UGr.forEach(t),euo=r(Y4e," \u2014 "),WP=n(Y4e,"A",{href:!0});var JGr=s(WP);ouo=r(JGr,"MegatronBertForCausalLM"),JGr.forEach(t),ruo=r(Y4e," (MegatronBert model)"),Y4e.forEach(t),tuo=i(j),Fu=n(j,"LI",{});var K4e=s(Fu);Nee=n(K4e,"STRONG",{});var YGr=s(Nee);auo=r(YGr,"openai-gpt"),YGr.forEach(t),nuo=r(K4e," \u2014 "),QP=n(K4e,"A",{href:!0});var KGr=s(QP);suo=r(KGr,"OpenAIGPTLMHeadModel"),KGr.forEach(t),luo=r(K4e," (OpenAI GPT model)"),K4e.forEach(t),iuo=i(j),Cu=n(j,"LI",{});var Z4e=s(Cu);qee=n(Z4e,"STRONG",{});var ZGr=s(qee);duo=r(ZGr,"pegasus"),ZGr.forEach(t),cuo=r(Z4e," \u2014 "),HP=n(Z4e,"A",{href:!0});var eXr=s(HP);fuo=r(eXr,"PegasusForCausalLM"),eXr.forEach(t),muo=r(Z4e," (Pegasus model)"),Z4e.forEach(t),guo=i(j),Mu=n(j,"LI",{});var eMe=s(Mu);Oee=n(eMe,"STRONG",{});var oXr=s(Oee);huo=r(oXr,"plbart"),oXr.forEach(t),puo=r(eMe," \u2014 "),UP=n(eMe,"A",{href:!0});var rXr=s(UP);_uo=r(rXr,"PLBartForCausalLM"),rXr.forEach(t),uuo=r(eMe," (PLBart model)"),eMe.forEach(t),buo=i(j),Eu=n(j,"LI",{});var oMe=s(Eu);Gee=n(oMe,"STRONG",{});var tXr=s(Gee);vuo=r(tXr,"prophetnet"),tXr.forEach(t),Tuo=r(oMe," \u2014 "),JP=n(oMe,"A",{href:!0});var aXr=s(JP);Fuo=r(aXr,"ProphetNetForCausalLM"),aXr.forEach(t),Cuo=r(oMe," (ProphetNet model)"),oMe.forEach(t),Muo=i(j),yu=n(j,"LI",{});var rMe=s(yu);Xee=n(rMe,"STRONG",{});var nXr=s(Xee);Euo=r(nXr,"qdqbert"),nXr.forEach(t),yuo=r(rMe," \u2014 "),YP=n(rMe,"A",{href:!0});var sXr=s(YP);wuo=r(sXr,"QDQBertLMHeadModel"),sXr.forEach(t),Auo=r(rMe," (QDQBert model)"),rMe.forEach(t),Luo=i(j),wu=n(j,"LI",{});var tMe=s(wu);Vee=n(tMe,"STRONG",{});var lXr=s(Vee);Buo=r(lXr,"reformer"),lXr.forEach(t),xuo=r(tMe," \u2014 "),KP=n(tMe,"A",{href:!0});var iXr=s(KP);kuo=r(iXr,"ReformerModelWithLMHead"),iXr.forEach(t),Ruo=r(tMe," (Reformer model)"),tMe.forEach(t),Suo=i(j),Au=n(j,"LI",{});var aMe=s(Au);zee=n(aMe,"STRONG",{});var dXr=s(zee);Puo=r(dXr,"rembert"),dXr.forEach(t),$uo=r(aMe," \u2014 "),ZP=n(aMe,"A",{href:!0});var cXr=s(ZP);Iuo=r(cXr,"RemBertForCausalLM"),cXr.forEach(t),juo=r(aMe," (RemBERT model)"),aMe.forEach(t),Duo=i(j),Lu=n(j,"LI",{});var nMe=s(Lu);Wee=n(nMe,"STRONG",{});var fXr=s(Wee);Nuo=r(fXr,"roberta"),fXr.forEach(t),quo=r(nMe," \u2014 "),e$=n(nMe,"A",{href:!0});var mXr=s(e$);Ouo=r(mXr,"RobertaForCausalLM"),mXr.forEach(t),Guo=r(nMe," (RoBERTa model)"),nMe.forEach(t),Xuo=i(j),Bu=n(j,"LI",{});var sMe=s(Bu);Qee=n(sMe,"STRONG",{});var gXr=s(Qee);Vuo=r(gXr,"roformer"),gXr.forEach(t),zuo=r(sMe," \u2014 "),o$=n(sMe,"A",{href:!0});var hXr=s(o$);Wuo=r(hXr,"RoFormerForCausalLM"),hXr.forEach(t),Quo=r(sMe," (RoFormer model)"),sMe.forEach(t),Huo=i(j),xu=n(j,"LI",{});var lMe=s(xu);Hee=n(lMe,"STRONG",{});var pXr=s(Hee);Uuo=r(pXr,"speech_to_text_2"),pXr.forEach(t),Juo=r(lMe," \u2014 "),r$=n(lMe,"A",{href:!0});var _Xr=s(r$);Yuo=r(_Xr,"Speech2Text2ForCausalLM"),_Xr.forEach(t),Kuo=r(lMe," (Speech2Text2 model)"),lMe.forEach(t),Zuo=i(j),ku=n(j,"LI",{});var iMe=s(ku);Uee=n(iMe,"STRONG",{});var uXr=s(Uee);e2o=r(uXr,"transfo-xl"),uXr.forEach(t),o2o=r(iMe," \u2014 "),t$=n(iMe,"A",{href:!0});var bXr=s(t$);r2o=r(bXr,"TransfoXLLMHeadModel"),bXr.forEach(t),t2o=r(iMe," (Transformer-XL model)"),iMe.forEach(t),a2o=i(j),Ru=n(j,"LI",{});var dMe=s(Ru);Jee=n(dMe,"STRONG",{});var vXr=s(Jee);n2o=r(vXr,"trocr"),vXr.forEach(t),s2o=r(dMe," \u2014 "),a$=n(dMe,"A",{href:!0});var TXr=s(a$);l2o=r(TXr,"TrOCRForCausalLM"),TXr.forEach(t),i2o=r(dMe," (TrOCR model)"),dMe.forEach(t),d2o=i(j),Su=n(j,"LI",{});var cMe=s(Su);Yee=n(cMe,"STRONG",{});var FXr=s(Yee);c2o=r(FXr,"xglm"),FXr.forEach(t),f2o=r(cMe," \u2014 "),n$=n(cMe,"A",{href:!0});var CXr=s(n$);m2o=r(CXr,"XGLMForCausalLM"),CXr.forEach(t),g2o=r(cMe," (XGLM model)"),cMe.forEach(t),h2o=i(j),Pu=n(j,"LI",{});var fMe=s(Pu);Kee=n(fMe,"STRONG",{});var MXr=s(Kee);p2o=r(MXr,"xlm"),MXr.forEach(t),_2o=r(fMe," \u2014 "),s$=n(fMe,"A",{href:!0});var EXr=s(s$);u2o=r(EXr,"XLMWithLMHeadModel"),EXr.forEach(t),b2o=r(fMe," (XLM model)"),fMe.forEach(t),v2o=i(j),$u=n(j,"LI",{});var mMe=s($u);Zee=n(mMe,"STRONG",{});var yXr=s(Zee);T2o=r(yXr,"xlm-prophetnet"),yXr.forEach(t),F2o=r(mMe," \u2014 "),l$=n(mMe,"A",{href:!0});var wXr=s(l$);C2o=r(wXr,"XLMProphetNetForCausalLM"),wXr.forEach(t),M2o=r(mMe," (XLMProphetNet model)"),mMe.forEach(t),E2o=i(j),Iu=n(j,"LI",{});var gMe=s(Iu);eoe=n(gMe,"STRONG",{});var AXr=s(eoe);y2o=r(AXr,"xlm-roberta"),AXr.forEach(t),w2o=r(gMe," \u2014 "),i$=n(gMe,"A",{href:!0});var LXr=s(i$);A2o=r(LXr,"XLMRobertaForCausalLM"),LXr.forEach(t),L2o=r(gMe," (XLM-RoBERTa model)"),gMe.forEach(t),B2o=i(j),ju=n(j,"LI",{});var hMe=s(ju);ooe=n(hMe,"STRONG",{});var BXr=s(ooe);x2o=r(BXr,"xlm-roberta-xl"),BXr.forEach(t),k2o=r(hMe," \u2014 "),d$=n(hMe,"A",{href:!0});var xXr=s(d$);R2o=r(xXr,"XLMRobertaXLForCausalLM"),xXr.forEach(t),S2o=r(hMe," (XLM-RoBERTa-XL model)"),hMe.forEach(t),P2o=i(j),Du=n(j,"LI",{});var pMe=s(Du);roe=n(pMe,"STRONG",{});var kXr=s(roe);$2o=r(kXr,"xlnet"),kXr.forEach(t),I2o=r(pMe," \u2014 "),c$=n(pMe,"A",{href:!0});var RXr=s(c$);j2o=r(RXr,"XLNetLMHeadModel"),RXr.forEach(t),D2o=r(pMe," (XLNet model)"),pMe.forEach(t),j.forEach(t),N2o=i(qt),Nu=n(qt,"P",{});var _Me=s(Nu);q2o=r(_Me,"The model is set in evaluation mode by default using "),toe=n(_Me,"CODE",{});var SXr=s(toe);O2o=r(SXr,"model.eval()"),SXr.forEach(t),G2o=r(_Me,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aoe=n(_Me,"CODE",{});var PXr=s(aoe);X2o=r(PXr,"model.train()"),PXr.forEach(t),_Me.forEach(t),V2o=i(qt),noe=n(qt,"P",{});var $Xr=s(noe);z2o=r($Xr,"Examples:"),$Xr.forEach(t),W2o=i(qt),m(DE.$$.fragment,qt),qt.forEach(t),Js.forEach(t),XBe=i(d),nd=n(d,"H2",{class:!0});var Kke=s(nd);qu=n(Kke,"A",{id:!0,class:!0,href:!0});var IXr=s(qu);soe=n(IXr,"SPAN",{});var jXr=s(soe);m(NE.$$.fragment,jXr),jXr.forEach(t),IXr.forEach(t),Q2o=i(Kke),loe=n(Kke,"SPAN",{});var DXr=s(loe);H2o=r(DXr,"AutoModelForMaskedLM"),DXr.forEach(t),Kke.forEach(t),VBe=i(d),Yo=n(d,"DIV",{class:!0});var Ks=s(Yo);m(qE.$$.fragment,Ks),U2o=i(Ks),sd=n(Ks,"P",{});var gz=s(sd);J2o=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ioe=n(gz,"CODE",{});var NXr=s(ioe);Y2o=r(NXr,"from_pretrained()"),NXr.forEach(t),K2o=r(gz,"class method or the "),doe=n(gz,"CODE",{});var qXr=s(doe);Z2o=r(qXr,"from_config()"),qXr.forEach(t),e1o=r(gz,`class
method.`),gz.forEach(t),o1o=i(Ks),OE=n(Ks,"P",{});var Zke=s(OE);r1o=r(Zke,"This class cannot be instantiated directly using "),coe=n(Zke,"CODE",{});var OXr=s(coe);t1o=r(OXr,"__init__()"),OXr.forEach(t),a1o=r(Zke," (throws an error)."),Zke.forEach(t),n1o=i(Ks),zr=n(Ks,"DIV",{class:!0});var Zs=s(zr);m(GE.$$.fragment,Zs),s1o=i(Zs),foe=n(Zs,"P",{});var GXr=s(foe);l1o=r(GXr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GXr.forEach(t),i1o=i(Zs),ld=n(Zs,"P",{});var hz=s(ld);d1o=r(hz,`Note:
Loading a model from its configuration file does `),moe=n(hz,"STRONG",{});var XXr=s(moe);c1o=r(XXr,"not"),XXr.forEach(t),f1o=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(hz,"CODE",{});var VXr=s(goe);m1o=r(VXr,"from_pretrained()"),VXr.forEach(t),g1o=r(hz,"to load the model weights."),hz.forEach(t),h1o=i(Zs),hoe=n(Zs,"P",{});var zXr=s(hoe);p1o=r(zXr,"Examples:"),zXr.forEach(t),_1o=i(Zs),m(XE.$$.fragment,Zs),Zs.forEach(t),u1o=i(Ks),$e=n(Ks,"DIV",{class:!0});var Ot=s($e);m(VE.$$.fragment,Ot),b1o=i(Ot),poe=n(Ot,"P",{});var WXr=s(poe);v1o=r(WXr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WXr.forEach(t),T1o=i(Ot),Wa=n(Ot,"P",{});var V4=s(Wa);F1o=r(V4,"The model class to instantiate is selected based on the "),_oe=n(V4,"CODE",{});var QXr=s(_oe);C1o=r(QXr,"model_type"),QXr.forEach(t),M1o=r(V4,` property of the config object (either
passed as an argument or loaded from `),uoe=n(V4,"CODE",{});var HXr=s(uoe);E1o=r(HXr,"pretrained_model_name_or_path"),HXr.forEach(t),y1o=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),boe=n(V4,"CODE",{});var UXr=s(boe);w1o=r(UXr,"pretrained_model_name_or_path"),UXr.forEach(t),A1o=r(V4,":"),V4.forEach(t),L1o=i(Ot),I=n(Ot,"UL",{});var D=s(I);Ou=n(D,"LI",{});var uMe=s(Ou);voe=n(uMe,"STRONG",{});var JXr=s(voe);B1o=r(JXr,"albert"),JXr.forEach(t),x1o=r(uMe," \u2014 "),f$=n(uMe,"A",{href:!0});var YXr=s(f$);k1o=r(YXr,"AlbertForMaskedLM"),YXr.forEach(t),R1o=r(uMe," (ALBERT model)"),uMe.forEach(t),S1o=i(D),Gu=n(D,"LI",{});var bMe=s(Gu);Toe=n(bMe,"STRONG",{});var KXr=s(Toe);P1o=r(KXr,"bart"),KXr.forEach(t),$1o=r(bMe," \u2014 "),m$=n(bMe,"A",{href:!0});var ZXr=s(m$);I1o=r(ZXr,"BartForConditionalGeneration"),ZXr.forEach(t),j1o=r(bMe," (BART model)"),bMe.forEach(t),D1o=i(D),Xu=n(D,"LI",{});var vMe=s(Xu);Foe=n(vMe,"STRONG",{});var eVr=s(Foe);N1o=r(eVr,"bert"),eVr.forEach(t),q1o=r(vMe," \u2014 "),g$=n(vMe,"A",{href:!0});var oVr=s(g$);O1o=r(oVr,"BertForMaskedLM"),oVr.forEach(t),G1o=r(vMe," (BERT model)"),vMe.forEach(t),X1o=i(D),Vu=n(D,"LI",{});var TMe=s(Vu);Coe=n(TMe,"STRONG",{});var rVr=s(Coe);V1o=r(rVr,"big_bird"),rVr.forEach(t),z1o=r(TMe," \u2014 "),h$=n(TMe,"A",{href:!0});var tVr=s(h$);W1o=r(tVr,"BigBirdForMaskedLM"),tVr.forEach(t),Q1o=r(TMe," (BigBird model)"),TMe.forEach(t),H1o=i(D),zu=n(D,"LI",{});var FMe=s(zu);Moe=n(FMe,"STRONG",{});var aVr=s(Moe);U1o=r(aVr,"camembert"),aVr.forEach(t),J1o=r(FMe," \u2014 "),p$=n(FMe,"A",{href:!0});var nVr=s(p$);Y1o=r(nVr,"CamembertForMaskedLM"),nVr.forEach(t),K1o=r(FMe," (CamemBERT model)"),FMe.forEach(t),Z1o=i(D),Wu=n(D,"LI",{});var CMe=s(Wu);Eoe=n(CMe,"STRONG",{});var sVr=s(Eoe);ebo=r(sVr,"convbert"),sVr.forEach(t),obo=r(CMe," \u2014 "),_$=n(CMe,"A",{href:!0});var lVr=s(_$);rbo=r(lVr,"ConvBertForMaskedLM"),lVr.forEach(t),tbo=r(CMe," (ConvBERT model)"),CMe.forEach(t),abo=i(D),Qu=n(D,"LI",{});var MMe=s(Qu);yoe=n(MMe,"STRONG",{});var iVr=s(yoe);nbo=r(iVr,"data2vec-text"),iVr.forEach(t),sbo=r(MMe," \u2014 "),u$=n(MMe,"A",{href:!0});var dVr=s(u$);lbo=r(dVr,"Data2VecTextForMaskedLM"),dVr.forEach(t),ibo=r(MMe," (Data2VecText model)"),MMe.forEach(t),dbo=i(D),Hu=n(D,"LI",{});var EMe=s(Hu);woe=n(EMe,"STRONG",{});var cVr=s(woe);cbo=r(cVr,"deberta"),cVr.forEach(t),fbo=r(EMe," \u2014 "),b$=n(EMe,"A",{href:!0});var fVr=s(b$);mbo=r(fVr,"DebertaForMaskedLM"),fVr.forEach(t),gbo=r(EMe," (DeBERTa model)"),EMe.forEach(t),hbo=i(D),Uu=n(D,"LI",{});var yMe=s(Uu);Aoe=n(yMe,"STRONG",{});var mVr=s(Aoe);pbo=r(mVr,"deberta-v2"),mVr.forEach(t),_bo=r(yMe," \u2014 "),v$=n(yMe,"A",{href:!0});var gVr=s(v$);ubo=r(gVr,"DebertaV2ForMaskedLM"),gVr.forEach(t),bbo=r(yMe," (DeBERTa-v2 model)"),yMe.forEach(t),vbo=i(D),Ju=n(D,"LI",{});var wMe=s(Ju);Loe=n(wMe,"STRONG",{});var hVr=s(Loe);Tbo=r(hVr,"distilbert"),hVr.forEach(t),Fbo=r(wMe," \u2014 "),T$=n(wMe,"A",{href:!0});var pVr=s(T$);Cbo=r(pVr,"DistilBertForMaskedLM"),pVr.forEach(t),Mbo=r(wMe," (DistilBERT model)"),wMe.forEach(t),Ebo=i(D),Yu=n(D,"LI",{});var AMe=s(Yu);Boe=n(AMe,"STRONG",{});var _Vr=s(Boe);ybo=r(_Vr,"electra"),_Vr.forEach(t),wbo=r(AMe," \u2014 "),F$=n(AMe,"A",{href:!0});var uVr=s(F$);Abo=r(uVr,"ElectraForMaskedLM"),uVr.forEach(t),Lbo=r(AMe," (ELECTRA model)"),AMe.forEach(t),Bbo=i(D),Ku=n(D,"LI",{});var LMe=s(Ku);xoe=n(LMe,"STRONG",{});var bVr=s(xoe);xbo=r(bVr,"flaubert"),bVr.forEach(t),kbo=r(LMe," \u2014 "),C$=n(LMe,"A",{href:!0});var vVr=s(C$);Rbo=r(vVr,"FlaubertWithLMHeadModel"),vVr.forEach(t),Sbo=r(LMe," (FlauBERT model)"),LMe.forEach(t),Pbo=i(D),Zu=n(D,"LI",{});var BMe=s(Zu);koe=n(BMe,"STRONG",{});var TVr=s(koe);$bo=r(TVr,"fnet"),TVr.forEach(t),Ibo=r(BMe," \u2014 "),M$=n(BMe,"A",{href:!0});var FVr=s(M$);jbo=r(FVr,"FNetForMaskedLM"),FVr.forEach(t),Dbo=r(BMe," (FNet model)"),BMe.forEach(t),Nbo=i(D),e2=n(D,"LI",{});var xMe=s(e2);Roe=n(xMe,"STRONG",{});var CVr=s(Roe);qbo=r(CVr,"funnel"),CVr.forEach(t),Obo=r(xMe," \u2014 "),E$=n(xMe,"A",{href:!0});var MVr=s(E$);Gbo=r(MVr,"FunnelForMaskedLM"),MVr.forEach(t),Xbo=r(xMe," (Funnel Transformer model)"),xMe.forEach(t),Vbo=i(D),o2=n(D,"LI",{});var kMe=s(o2);Soe=n(kMe,"STRONG",{});var EVr=s(Soe);zbo=r(EVr,"ibert"),EVr.forEach(t),Wbo=r(kMe," \u2014 "),y$=n(kMe,"A",{href:!0});var yVr=s(y$);Qbo=r(yVr,"IBertForMaskedLM"),yVr.forEach(t),Hbo=r(kMe," (I-BERT model)"),kMe.forEach(t),Ubo=i(D),r2=n(D,"LI",{});var RMe=s(r2);Poe=n(RMe,"STRONG",{});var wVr=s(Poe);Jbo=r(wVr,"layoutlm"),wVr.forEach(t),Ybo=r(RMe," \u2014 "),w$=n(RMe,"A",{href:!0});var AVr=s(w$);Kbo=r(AVr,"LayoutLMForMaskedLM"),AVr.forEach(t),Zbo=r(RMe," (LayoutLM model)"),RMe.forEach(t),e3o=i(D),t2=n(D,"LI",{});var SMe=s(t2);$oe=n(SMe,"STRONG",{});var LVr=s($oe);o3o=r(LVr,"longformer"),LVr.forEach(t),r3o=r(SMe," \u2014 "),A$=n(SMe,"A",{href:!0});var BVr=s(A$);t3o=r(BVr,"LongformerForMaskedLM"),BVr.forEach(t),a3o=r(SMe," (Longformer model)"),SMe.forEach(t),n3o=i(D),a2=n(D,"LI",{});var PMe=s(a2);Ioe=n(PMe,"STRONG",{});var xVr=s(Ioe);s3o=r(xVr,"mbart"),xVr.forEach(t),l3o=r(PMe," \u2014 "),L$=n(PMe,"A",{href:!0});var kVr=s(L$);i3o=r(kVr,"MBartForConditionalGeneration"),kVr.forEach(t),d3o=r(PMe," (mBART model)"),PMe.forEach(t),c3o=i(D),n2=n(D,"LI",{});var $Me=s(n2);joe=n($Me,"STRONG",{});var RVr=s(joe);f3o=r(RVr,"megatron-bert"),RVr.forEach(t),m3o=r($Me," \u2014 "),B$=n($Me,"A",{href:!0});var SVr=s(B$);g3o=r(SVr,"MegatronBertForMaskedLM"),SVr.forEach(t),h3o=r($Me," (MegatronBert model)"),$Me.forEach(t),p3o=i(D),s2=n(D,"LI",{});var IMe=s(s2);Doe=n(IMe,"STRONG",{});var PVr=s(Doe);_3o=r(PVr,"mobilebert"),PVr.forEach(t),u3o=r(IMe," \u2014 "),x$=n(IMe,"A",{href:!0});var $Vr=s(x$);b3o=r($Vr,"MobileBertForMaskedLM"),$Vr.forEach(t),v3o=r(IMe," (MobileBERT model)"),IMe.forEach(t),T3o=i(D),l2=n(D,"LI",{});var jMe=s(l2);Noe=n(jMe,"STRONG",{});var IVr=s(Noe);F3o=r(IVr,"mpnet"),IVr.forEach(t),C3o=r(jMe," \u2014 "),k$=n(jMe,"A",{href:!0});var jVr=s(k$);M3o=r(jVr,"MPNetForMaskedLM"),jVr.forEach(t),E3o=r(jMe," (MPNet model)"),jMe.forEach(t),y3o=i(D),i2=n(D,"LI",{});var DMe=s(i2);qoe=n(DMe,"STRONG",{});var DVr=s(qoe);w3o=r(DVr,"nystromformer"),DVr.forEach(t),A3o=r(DMe," \u2014 "),R$=n(DMe,"A",{href:!0});var NVr=s(R$);L3o=r(NVr,"NystromformerForMaskedLM"),NVr.forEach(t),B3o=r(DMe," (Nystromformer model)"),DMe.forEach(t),x3o=i(D),d2=n(D,"LI",{});var NMe=s(d2);Ooe=n(NMe,"STRONG",{});var qVr=s(Ooe);k3o=r(qVr,"perceiver"),qVr.forEach(t),R3o=r(NMe," \u2014 "),S$=n(NMe,"A",{href:!0});var OVr=s(S$);S3o=r(OVr,"PerceiverForMaskedLM"),OVr.forEach(t),P3o=r(NMe," (Perceiver model)"),NMe.forEach(t),$3o=i(D),c2=n(D,"LI",{});var qMe=s(c2);Goe=n(qMe,"STRONG",{});var GVr=s(Goe);I3o=r(GVr,"qdqbert"),GVr.forEach(t),j3o=r(qMe," \u2014 "),P$=n(qMe,"A",{href:!0});var XVr=s(P$);D3o=r(XVr,"QDQBertForMaskedLM"),XVr.forEach(t),N3o=r(qMe," (QDQBert model)"),qMe.forEach(t),q3o=i(D),f2=n(D,"LI",{});var OMe=s(f2);Xoe=n(OMe,"STRONG",{});var VVr=s(Xoe);O3o=r(VVr,"reformer"),VVr.forEach(t),G3o=r(OMe," \u2014 "),$$=n(OMe,"A",{href:!0});var zVr=s($$);X3o=r(zVr,"ReformerForMaskedLM"),zVr.forEach(t),V3o=r(OMe," (Reformer model)"),OMe.forEach(t),z3o=i(D),m2=n(D,"LI",{});var GMe=s(m2);Voe=n(GMe,"STRONG",{});var WVr=s(Voe);W3o=r(WVr,"rembert"),WVr.forEach(t),Q3o=r(GMe," \u2014 "),I$=n(GMe,"A",{href:!0});var QVr=s(I$);H3o=r(QVr,"RemBertForMaskedLM"),QVr.forEach(t),U3o=r(GMe," (RemBERT model)"),GMe.forEach(t),J3o=i(D),g2=n(D,"LI",{});var XMe=s(g2);zoe=n(XMe,"STRONG",{});var HVr=s(zoe);Y3o=r(HVr,"roberta"),HVr.forEach(t),K3o=r(XMe," \u2014 "),j$=n(XMe,"A",{href:!0});var UVr=s(j$);Z3o=r(UVr,"RobertaForMaskedLM"),UVr.forEach(t),e5o=r(XMe," (RoBERTa model)"),XMe.forEach(t),o5o=i(D),h2=n(D,"LI",{});var VMe=s(h2);Woe=n(VMe,"STRONG",{});var JVr=s(Woe);r5o=r(JVr,"roformer"),JVr.forEach(t),t5o=r(VMe," \u2014 "),D$=n(VMe,"A",{href:!0});var YVr=s(D$);a5o=r(YVr,"RoFormerForMaskedLM"),YVr.forEach(t),n5o=r(VMe," (RoFormer model)"),VMe.forEach(t),s5o=i(D),p2=n(D,"LI",{});var zMe=s(p2);Qoe=n(zMe,"STRONG",{});var KVr=s(Qoe);l5o=r(KVr,"squeezebert"),KVr.forEach(t),i5o=r(zMe," \u2014 "),N$=n(zMe,"A",{href:!0});var ZVr=s(N$);d5o=r(ZVr,"SqueezeBertForMaskedLM"),ZVr.forEach(t),c5o=r(zMe," (SqueezeBERT model)"),zMe.forEach(t),f5o=i(D),_2=n(D,"LI",{});var WMe=s(_2);Hoe=n(WMe,"STRONG",{});var ezr=s(Hoe);m5o=r(ezr,"tapas"),ezr.forEach(t),g5o=r(WMe," \u2014 "),q$=n(WMe,"A",{href:!0});var ozr=s(q$);h5o=r(ozr,"TapasForMaskedLM"),ozr.forEach(t),p5o=r(WMe," (TAPAS model)"),WMe.forEach(t),_5o=i(D),u2=n(D,"LI",{});var QMe=s(u2);Uoe=n(QMe,"STRONG",{});var rzr=s(Uoe);u5o=r(rzr,"wav2vec2"),rzr.forEach(t),b5o=r(QMe," \u2014 "),Joe=n(QMe,"CODE",{});var tzr=s(Joe);v5o=r(tzr,"Wav2Vec2ForMaskedLM"),tzr.forEach(t),T5o=r(QMe,"(Wav2Vec2 model)"),QMe.forEach(t),F5o=i(D),b2=n(D,"LI",{});var HMe=s(b2);Yoe=n(HMe,"STRONG",{});var azr=s(Yoe);C5o=r(azr,"xlm"),azr.forEach(t),M5o=r(HMe," \u2014 "),O$=n(HMe,"A",{href:!0});var nzr=s(O$);E5o=r(nzr,"XLMWithLMHeadModel"),nzr.forEach(t),y5o=r(HMe," (XLM model)"),HMe.forEach(t),w5o=i(D),v2=n(D,"LI",{});var UMe=s(v2);Koe=n(UMe,"STRONG",{});var szr=s(Koe);A5o=r(szr,"xlm-roberta"),szr.forEach(t),L5o=r(UMe," \u2014 "),G$=n(UMe,"A",{href:!0});var lzr=s(G$);B5o=r(lzr,"XLMRobertaForMaskedLM"),lzr.forEach(t),x5o=r(UMe," (XLM-RoBERTa model)"),UMe.forEach(t),k5o=i(D),T2=n(D,"LI",{});var JMe=s(T2);Zoe=n(JMe,"STRONG",{});var izr=s(Zoe);R5o=r(izr,"xlm-roberta-xl"),izr.forEach(t),S5o=r(JMe," \u2014 "),X$=n(JMe,"A",{href:!0});var dzr=s(X$);P5o=r(dzr,"XLMRobertaXLForMaskedLM"),dzr.forEach(t),$5o=r(JMe," (XLM-RoBERTa-XL model)"),JMe.forEach(t),I5o=i(D),F2=n(D,"LI",{});var YMe=s(F2);ere=n(YMe,"STRONG",{});var czr=s(ere);j5o=r(czr,"yoso"),czr.forEach(t),D5o=r(YMe," \u2014 "),V$=n(YMe,"A",{href:!0});var fzr=s(V$);N5o=r(fzr,"YosoForMaskedLM"),fzr.forEach(t),q5o=r(YMe," (YOSO model)"),YMe.forEach(t),D.forEach(t),O5o=i(Ot),C2=n(Ot,"P",{});var KMe=s(C2);G5o=r(KMe,"The model is set in evaluation mode by default using "),ore=n(KMe,"CODE",{});var mzr=s(ore);X5o=r(mzr,"model.eval()"),mzr.forEach(t),V5o=r(KMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n(KMe,"CODE",{});var gzr=s(rre);z5o=r(gzr,"model.train()"),gzr.forEach(t),KMe.forEach(t),W5o=i(Ot),tre=n(Ot,"P",{});var hzr=s(tre);Q5o=r(hzr,"Examples:"),hzr.forEach(t),H5o=i(Ot),m(zE.$$.fragment,Ot),Ot.forEach(t),Ks.forEach(t),zBe=i(d),id=n(d,"H2",{class:!0});var eRe=s(id);M2=n(eRe,"A",{id:!0,class:!0,href:!0});var pzr=s(M2);are=n(pzr,"SPAN",{});var _zr=s(are);m(WE.$$.fragment,_zr),_zr.forEach(t),pzr.forEach(t),U5o=i(eRe),nre=n(eRe,"SPAN",{});var uzr=s(nre);J5o=r(uzr,"AutoModelForSeq2SeqLM"),uzr.forEach(t),eRe.forEach(t),WBe=i(d),Ko=n(d,"DIV",{class:!0});var el=s(Ko);m(QE.$$.fragment,el),Y5o=i(el),dd=n(el,"P",{});var pz=s(dd);K5o=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sre=n(pz,"CODE",{});var bzr=s(sre);Z5o=r(bzr,"from_pretrained()"),bzr.forEach(t),evo=r(pz,"class method or the "),lre=n(pz,"CODE",{});var vzr=s(lre);ovo=r(vzr,"from_config()"),vzr.forEach(t),rvo=r(pz,`class
method.`),pz.forEach(t),tvo=i(el),HE=n(el,"P",{});var oRe=s(HE);avo=r(oRe,"This class cannot be instantiated directly using "),ire=n(oRe,"CODE",{});var Tzr=s(ire);nvo=r(Tzr,"__init__()"),Tzr.forEach(t),svo=r(oRe," (throws an error)."),oRe.forEach(t),lvo=i(el),Wr=n(el,"DIV",{class:!0});var ol=s(Wr);m(UE.$$.fragment,ol),ivo=i(ol),dre=n(ol,"P",{});var Fzr=s(dre);dvo=r(Fzr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fzr.forEach(t),cvo=i(ol),cd=n(ol,"P",{});var _z=s(cd);fvo=r(_z,`Note:
Loading a model from its configuration file does `),cre=n(_z,"STRONG",{});var Czr=s(cre);mvo=r(Czr,"not"),Czr.forEach(t),gvo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(_z,"CODE",{});var Mzr=s(fre);hvo=r(Mzr,"from_pretrained()"),Mzr.forEach(t),pvo=r(_z,"to load the model weights."),_z.forEach(t),_vo=i(ol),mre=n(ol,"P",{});var Ezr=s(mre);uvo=r(Ezr,"Examples:"),Ezr.forEach(t),bvo=i(ol),m(JE.$$.fragment,ol),ol.forEach(t),vvo=i(el),Ie=n(el,"DIV",{class:!0});var Gt=s(Ie);m(YE.$$.fragment,Gt),Tvo=i(Gt),gre=n(Gt,"P",{});var yzr=s(gre);Fvo=r(yzr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yzr.forEach(t),Cvo=i(Gt),Qa=n(Gt,"P",{});var z4=s(Qa);Mvo=r(z4,"The model class to instantiate is selected based on the "),hre=n(z4,"CODE",{});var wzr=s(hre);Evo=r(wzr,"model_type"),wzr.forEach(t),yvo=r(z4,` property of the config object (either
passed as an argument or loaded from `),pre=n(z4,"CODE",{});var Azr=s(pre);wvo=r(Azr,"pretrained_model_name_or_path"),Azr.forEach(t),Avo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=n(z4,"CODE",{});var Lzr=s(_re);Lvo=r(Lzr,"pretrained_model_name_or_path"),Lzr.forEach(t),Bvo=r(z4,":"),z4.forEach(t),xvo=i(Gt),ne=n(Gt,"UL",{});var ie=s(ne);E2=n(ie,"LI",{});var ZMe=s(E2);ure=n(ZMe,"STRONG",{});var Bzr=s(ure);kvo=r(Bzr,"bart"),Bzr.forEach(t),Rvo=r(ZMe," \u2014 "),z$=n(ZMe,"A",{href:!0});var xzr=s(z$);Svo=r(xzr,"BartForConditionalGeneration"),xzr.forEach(t),Pvo=r(ZMe," (BART model)"),ZMe.forEach(t),$vo=i(ie),y2=n(ie,"LI",{});var eEe=s(y2);bre=n(eEe,"STRONG",{});var kzr=s(bre);Ivo=r(kzr,"bigbird_pegasus"),kzr.forEach(t),jvo=r(eEe," \u2014 "),W$=n(eEe,"A",{href:!0});var Rzr=s(W$);Dvo=r(Rzr,"BigBirdPegasusForConditionalGeneration"),Rzr.forEach(t),Nvo=r(eEe," (BigBirdPegasus model)"),eEe.forEach(t),qvo=i(ie),w2=n(ie,"LI",{});var oEe=s(w2);vre=n(oEe,"STRONG",{});var Szr=s(vre);Ovo=r(Szr,"blenderbot"),Szr.forEach(t),Gvo=r(oEe," \u2014 "),Q$=n(oEe,"A",{href:!0});var Pzr=s(Q$);Xvo=r(Pzr,"BlenderbotForConditionalGeneration"),Pzr.forEach(t),Vvo=r(oEe," (Blenderbot model)"),oEe.forEach(t),zvo=i(ie),A2=n(ie,"LI",{});var rEe=s(A2);Tre=n(rEe,"STRONG",{});var $zr=s(Tre);Wvo=r($zr,"blenderbot-small"),$zr.forEach(t),Qvo=r(rEe," \u2014 "),H$=n(rEe,"A",{href:!0});var Izr=s(H$);Hvo=r(Izr,"BlenderbotSmallForConditionalGeneration"),Izr.forEach(t),Uvo=r(rEe," (BlenderbotSmall model)"),rEe.forEach(t),Jvo=i(ie),L2=n(ie,"LI",{});var tEe=s(L2);Fre=n(tEe,"STRONG",{});var jzr=s(Fre);Yvo=r(jzr,"encoder-decoder"),jzr.forEach(t),Kvo=r(tEe," \u2014 "),U$=n(tEe,"A",{href:!0});var Dzr=s(U$);Zvo=r(Dzr,"EncoderDecoderModel"),Dzr.forEach(t),eTo=r(tEe," (Encoder decoder model)"),tEe.forEach(t),oTo=i(ie),B2=n(ie,"LI",{});var aEe=s(B2);Cre=n(aEe,"STRONG",{});var Nzr=s(Cre);rTo=r(Nzr,"fsmt"),Nzr.forEach(t),tTo=r(aEe," \u2014 "),J$=n(aEe,"A",{href:!0});var qzr=s(J$);aTo=r(qzr,"FSMTForConditionalGeneration"),qzr.forEach(t),nTo=r(aEe," (FairSeq Machine-Translation model)"),aEe.forEach(t),sTo=i(ie),x2=n(ie,"LI",{});var nEe=s(x2);Mre=n(nEe,"STRONG",{});var Ozr=s(Mre);lTo=r(Ozr,"led"),Ozr.forEach(t),iTo=r(nEe," \u2014 "),Y$=n(nEe,"A",{href:!0});var Gzr=s(Y$);dTo=r(Gzr,"LEDForConditionalGeneration"),Gzr.forEach(t),cTo=r(nEe," (LED model)"),nEe.forEach(t),fTo=i(ie),k2=n(ie,"LI",{});var sEe=s(k2);Ere=n(sEe,"STRONG",{});var Xzr=s(Ere);mTo=r(Xzr,"m2m_100"),Xzr.forEach(t),gTo=r(sEe," \u2014 "),K$=n(sEe,"A",{href:!0});var Vzr=s(K$);hTo=r(Vzr,"M2M100ForConditionalGeneration"),Vzr.forEach(t),pTo=r(sEe," (M2M100 model)"),sEe.forEach(t),_To=i(ie),R2=n(ie,"LI",{});var lEe=s(R2);yre=n(lEe,"STRONG",{});var zzr=s(yre);uTo=r(zzr,"marian"),zzr.forEach(t),bTo=r(lEe," \u2014 "),Z$=n(lEe,"A",{href:!0});var Wzr=s(Z$);vTo=r(Wzr,"MarianMTModel"),Wzr.forEach(t),TTo=r(lEe," (Marian model)"),lEe.forEach(t),FTo=i(ie),S2=n(ie,"LI",{});var iEe=s(S2);wre=n(iEe,"STRONG",{});var Qzr=s(wre);CTo=r(Qzr,"mbart"),Qzr.forEach(t),MTo=r(iEe," \u2014 "),eI=n(iEe,"A",{href:!0});var Hzr=s(eI);ETo=r(Hzr,"MBartForConditionalGeneration"),Hzr.forEach(t),yTo=r(iEe," (mBART model)"),iEe.forEach(t),wTo=i(ie),P2=n(ie,"LI",{});var dEe=s(P2);Are=n(dEe,"STRONG",{});var Uzr=s(Are);ATo=r(Uzr,"mt5"),Uzr.forEach(t),LTo=r(dEe," \u2014 "),oI=n(dEe,"A",{href:!0});var Jzr=s(oI);BTo=r(Jzr,"MT5ForConditionalGeneration"),Jzr.forEach(t),xTo=r(dEe," (mT5 model)"),dEe.forEach(t),kTo=i(ie),$2=n(ie,"LI",{});var cEe=s($2);Lre=n(cEe,"STRONG",{});var Yzr=s(Lre);RTo=r(Yzr,"pegasus"),Yzr.forEach(t),STo=r(cEe," \u2014 "),rI=n(cEe,"A",{href:!0});var Kzr=s(rI);PTo=r(Kzr,"PegasusForConditionalGeneration"),Kzr.forEach(t),$To=r(cEe," (Pegasus model)"),cEe.forEach(t),ITo=i(ie),I2=n(ie,"LI",{});var fEe=s(I2);Bre=n(fEe,"STRONG",{});var Zzr=s(Bre);jTo=r(Zzr,"plbart"),Zzr.forEach(t),DTo=r(fEe," \u2014 "),tI=n(fEe,"A",{href:!0});var eWr=s(tI);NTo=r(eWr,"PLBartForConditionalGeneration"),eWr.forEach(t),qTo=r(fEe," (PLBart model)"),fEe.forEach(t),OTo=i(ie),j2=n(ie,"LI",{});var mEe=s(j2);xre=n(mEe,"STRONG",{});var oWr=s(xre);GTo=r(oWr,"prophetnet"),oWr.forEach(t),XTo=r(mEe," \u2014 "),aI=n(mEe,"A",{href:!0});var rWr=s(aI);VTo=r(rWr,"ProphetNetForConditionalGeneration"),rWr.forEach(t),zTo=r(mEe," (ProphetNet model)"),mEe.forEach(t),WTo=i(ie),D2=n(ie,"LI",{});var gEe=s(D2);kre=n(gEe,"STRONG",{});var tWr=s(kre);QTo=r(tWr,"t5"),tWr.forEach(t),HTo=r(gEe," \u2014 "),nI=n(gEe,"A",{href:!0});var aWr=s(nI);UTo=r(aWr,"T5ForConditionalGeneration"),aWr.forEach(t),JTo=r(gEe," (T5 model)"),gEe.forEach(t),YTo=i(ie),N2=n(ie,"LI",{});var hEe=s(N2);Rre=n(hEe,"STRONG",{});var nWr=s(Rre);KTo=r(nWr,"xlm-prophetnet"),nWr.forEach(t),ZTo=r(hEe," \u2014 "),sI=n(hEe,"A",{href:!0});var sWr=s(sI);eFo=r(sWr,"XLMProphetNetForConditionalGeneration"),sWr.forEach(t),oFo=r(hEe," (XLMProphetNet model)"),hEe.forEach(t),ie.forEach(t),rFo=i(Gt),q2=n(Gt,"P",{});var pEe=s(q2);tFo=r(pEe,"The model is set in evaluation mode by default using "),Sre=n(pEe,"CODE",{});var lWr=s(Sre);aFo=r(lWr,"model.eval()"),lWr.forEach(t),nFo=r(pEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pre=n(pEe,"CODE",{});var iWr=s(Pre);sFo=r(iWr,"model.train()"),iWr.forEach(t),pEe.forEach(t),lFo=i(Gt),$re=n(Gt,"P",{});var dWr=s($re);iFo=r(dWr,"Examples:"),dWr.forEach(t),dFo=i(Gt),m(KE.$$.fragment,Gt),Gt.forEach(t),el.forEach(t),QBe=i(d),fd=n(d,"H2",{class:!0});var rRe=s(fd);O2=n(rRe,"A",{id:!0,class:!0,href:!0});var cWr=s(O2);Ire=n(cWr,"SPAN",{});var fWr=s(Ire);m(ZE.$$.fragment,fWr),fWr.forEach(t),cWr.forEach(t),cFo=i(rRe),jre=n(rRe,"SPAN",{});var mWr=s(jre);fFo=r(mWr,"AutoModelForSequenceClassification"),mWr.forEach(t),rRe.forEach(t),HBe=i(d),Zo=n(d,"DIV",{class:!0});var rl=s(Zo);m(ey.$$.fragment,rl),mFo=i(rl),md=n(rl,"P",{});var uz=s(md);gFo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dre=n(uz,"CODE",{});var gWr=s(Dre);hFo=r(gWr,"from_pretrained()"),gWr.forEach(t),pFo=r(uz,"class method or the "),Nre=n(uz,"CODE",{});var hWr=s(Nre);_Fo=r(hWr,"from_config()"),hWr.forEach(t),uFo=r(uz,`class
method.`),uz.forEach(t),bFo=i(rl),oy=n(rl,"P",{});var tRe=s(oy);vFo=r(tRe,"This class cannot be instantiated directly using "),qre=n(tRe,"CODE",{});var pWr=s(qre);TFo=r(pWr,"__init__()"),pWr.forEach(t),FFo=r(tRe," (throws an error)."),tRe.forEach(t),CFo=i(rl),Qr=n(rl,"DIV",{class:!0});var tl=s(Qr);m(ry.$$.fragment,tl),MFo=i(tl),Ore=n(tl,"P",{});var _Wr=s(Ore);EFo=r(_Wr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Wr.forEach(t),yFo=i(tl),gd=n(tl,"P",{});var bz=s(gd);wFo=r(bz,`Note:
Loading a model from its configuration file does `),Gre=n(bz,"STRONG",{});var uWr=s(Gre);AFo=r(uWr,"not"),uWr.forEach(t),LFo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xre=n(bz,"CODE",{});var bWr=s(Xre);BFo=r(bWr,"from_pretrained()"),bWr.forEach(t),xFo=r(bz,"to load the model weights."),bz.forEach(t),kFo=i(tl),Vre=n(tl,"P",{});var vWr=s(Vre);RFo=r(vWr,"Examples:"),vWr.forEach(t),SFo=i(tl),m(ty.$$.fragment,tl),tl.forEach(t),PFo=i(rl),je=n(rl,"DIV",{class:!0});var Xt=s(je);m(ay.$$.fragment,Xt),$Fo=i(Xt),zre=n(Xt,"P",{});var TWr=s(zre);IFo=r(TWr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TWr.forEach(t),jFo=i(Xt),Ha=n(Xt,"P",{});var W4=s(Ha);DFo=r(W4,"The model class to instantiate is selected based on the "),Wre=n(W4,"CODE",{});var FWr=s(Wre);NFo=r(FWr,"model_type"),FWr.forEach(t),qFo=r(W4,` property of the config object (either
passed as an argument or loaded from `),Qre=n(W4,"CODE",{});var CWr=s(Qre);OFo=r(CWr,"pretrained_model_name_or_path"),CWr.forEach(t),GFo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=n(W4,"CODE",{});var MWr=s(Hre);XFo=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),VFo=r(W4,":"),W4.forEach(t),zFo=i(Xt),A=n(Xt,"UL",{});var L=s(A);G2=n(L,"LI",{});var _Ee=s(G2);Ure=n(_Ee,"STRONG",{});var EWr=s(Ure);WFo=r(EWr,"albert"),EWr.forEach(t),QFo=r(_Ee," \u2014 "),lI=n(_Ee,"A",{href:!0});var yWr=s(lI);HFo=r(yWr,"AlbertForSequenceClassification"),yWr.forEach(t),UFo=r(_Ee," (ALBERT model)"),_Ee.forEach(t),JFo=i(L),X2=n(L,"LI",{});var uEe=s(X2);Jre=n(uEe,"STRONG",{});var wWr=s(Jre);YFo=r(wWr,"bart"),wWr.forEach(t),KFo=r(uEe," \u2014 "),iI=n(uEe,"A",{href:!0});var AWr=s(iI);ZFo=r(AWr,"BartForSequenceClassification"),AWr.forEach(t),e9o=r(uEe," (BART model)"),uEe.forEach(t),o9o=i(L),V2=n(L,"LI",{});var bEe=s(V2);Yre=n(bEe,"STRONG",{});var LWr=s(Yre);r9o=r(LWr,"bert"),LWr.forEach(t),t9o=r(bEe," \u2014 "),dI=n(bEe,"A",{href:!0});var BWr=s(dI);a9o=r(BWr,"BertForSequenceClassification"),BWr.forEach(t),n9o=r(bEe," (BERT model)"),bEe.forEach(t),s9o=i(L),z2=n(L,"LI",{});var vEe=s(z2);Kre=n(vEe,"STRONG",{});var xWr=s(Kre);l9o=r(xWr,"big_bird"),xWr.forEach(t),i9o=r(vEe," \u2014 "),cI=n(vEe,"A",{href:!0});var kWr=s(cI);d9o=r(kWr,"BigBirdForSequenceClassification"),kWr.forEach(t),c9o=r(vEe," (BigBird model)"),vEe.forEach(t),f9o=i(L),W2=n(L,"LI",{});var TEe=s(W2);Zre=n(TEe,"STRONG",{});var RWr=s(Zre);m9o=r(RWr,"bigbird_pegasus"),RWr.forEach(t),g9o=r(TEe," \u2014 "),fI=n(TEe,"A",{href:!0});var SWr=s(fI);h9o=r(SWr,"BigBirdPegasusForSequenceClassification"),SWr.forEach(t),p9o=r(TEe," (BigBirdPegasus model)"),TEe.forEach(t),_9o=i(L),Q2=n(L,"LI",{});var FEe=s(Q2);ete=n(FEe,"STRONG",{});var PWr=s(ete);u9o=r(PWr,"camembert"),PWr.forEach(t),b9o=r(FEe," \u2014 "),mI=n(FEe,"A",{href:!0});var $Wr=s(mI);v9o=r($Wr,"CamembertForSequenceClassification"),$Wr.forEach(t),T9o=r(FEe," (CamemBERT model)"),FEe.forEach(t),F9o=i(L),H2=n(L,"LI",{});var CEe=s(H2);ote=n(CEe,"STRONG",{});var IWr=s(ote);C9o=r(IWr,"canine"),IWr.forEach(t),M9o=r(CEe," \u2014 "),gI=n(CEe,"A",{href:!0});var jWr=s(gI);E9o=r(jWr,"CanineForSequenceClassification"),jWr.forEach(t),y9o=r(CEe," (Canine model)"),CEe.forEach(t),w9o=i(L),U2=n(L,"LI",{});var MEe=s(U2);rte=n(MEe,"STRONG",{});var DWr=s(rte);A9o=r(DWr,"convbert"),DWr.forEach(t),L9o=r(MEe," \u2014 "),hI=n(MEe,"A",{href:!0});var NWr=s(hI);B9o=r(NWr,"ConvBertForSequenceClassification"),NWr.forEach(t),x9o=r(MEe," (ConvBERT model)"),MEe.forEach(t),k9o=i(L),J2=n(L,"LI",{});var EEe=s(J2);tte=n(EEe,"STRONG",{});var qWr=s(tte);R9o=r(qWr,"ctrl"),qWr.forEach(t),S9o=r(EEe," \u2014 "),pI=n(EEe,"A",{href:!0});var OWr=s(pI);P9o=r(OWr,"CTRLForSequenceClassification"),OWr.forEach(t),$9o=r(EEe," (CTRL model)"),EEe.forEach(t),I9o=i(L),Y2=n(L,"LI",{});var yEe=s(Y2);ate=n(yEe,"STRONG",{});var GWr=s(ate);j9o=r(GWr,"data2vec-text"),GWr.forEach(t),D9o=r(yEe," \u2014 "),_I=n(yEe,"A",{href:!0});var XWr=s(_I);N9o=r(XWr,"Data2VecTextForSequenceClassification"),XWr.forEach(t),q9o=r(yEe," (Data2VecText model)"),yEe.forEach(t),O9o=i(L),K2=n(L,"LI",{});var wEe=s(K2);nte=n(wEe,"STRONG",{});var VWr=s(nte);G9o=r(VWr,"deberta"),VWr.forEach(t),X9o=r(wEe," \u2014 "),uI=n(wEe,"A",{href:!0});var zWr=s(uI);V9o=r(zWr,"DebertaForSequenceClassification"),zWr.forEach(t),z9o=r(wEe," (DeBERTa model)"),wEe.forEach(t),W9o=i(L),Z2=n(L,"LI",{});var AEe=s(Z2);ste=n(AEe,"STRONG",{});var WWr=s(ste);Q9o=r(WWr,"deberta-v2"),WWr.forEach(t),H9o=r(AEe," \u2014 "),bI=n(AEe,"A",{href:!0});var QWr=s(bI);U9o=r(QWr,"DebertaV2ForSequenceClassification"),QWr.forEach(t),J9o=r(AEe," (DeBERTa-v2 model)"),AEe.forEach(t),Y9o=i(L),e1=n(L,"LI",{});var LEe=s(e1);lte=n(LEe,"STRONG",{});var HWr=s(lte);K9o=r(HWr,"distilbert"),HWr.forEach(t),Z9o=r(LEe," \u2014 "),vI=n(LEe,"A",{href:!0});var UWr=s(vI);eCo=r(UWr,"DistilBertForSequenceClassification"),UWr.forEach(t),oCo=r(LEe," (DistilBERT model)"),LEe.forEach(t),rCo=i(L),o1=n(L,"LI",{});var BEe=s(o1);ite=n(BEe,"STRONG",{});var JWr=s(ite);tCo=r(JWr,"electra"),JWr.forEach(t),aCo=r(BEe," \u2014 "),TI=n(BEe,"A",{href:!0});var YWr=s(TI);nCo=r(YWr,"ElectraForSequenceClassification"),YWr.forEach(t),sCo=r(BEe," (ELECTRA model)"),BEe.forEach(t),lCo=i(L),r1=n(L,"LI",{});var xEe=s(r1);dte=n(xEe,"STRONG",{});var KWr=s(dte);iCo=r(KWr,"flaubert"),KWr.forEach(t),dCo=r(xEe," \u2014 "),FI=n(xEe,"A",{href:!0});var ZWr=s(FI);cCo=r(ZWr,"FlaubertForSequenceClassification"),ZWr.forEach(t),fCo=r(xEe," (FlauBERT model)"),xEe.forEach(t),mCo=i(L),t1=n(L,"LI",{});var kEe=s(t1);cte=n(kEe,"STRONG",{});var eQr=s(cte);gCo=r(eQr,"fnet"),eQr.forEach(t),hCo=r(kEe," \u2014 "),CI=n(kEe,"A",{href:!0});var oQr=s(CI);pCo=r(oQr,"FNetForSequenceClassification"),oQr.forEach(t),_Co=r(kEe," (FNet model)"),kEe.forEach(t),uCo=i(L),a1=n(L,"LI",{});var REe=s(a1);fte=n(REe,"STRONG",{});var rQr=s(fte);bCo=r(rQr,"funnel"),rQr.forEach(t),vCo=r(REe," \u2014 "),MI=n(REe,"A",{href:!0});var tQr=s(MI);TCo=r(tQr,"FunnelForSequenceClassification"),tQr.forEach(t),FCo=r(REe," (Funnel Transformer model)"),REe.forEach(t),CCo=i(L),n1=n(L,"LI",{});var SEe=s(n1);mte=n(SEe,"STRONG",{});var aQr=s(mte);MCo=r(aQr,"gpt2"),aQr.forEach(t),ECo=r(SEe," \u2014 "),EI=n(SEe,"A",{href:!0});var nQr=s(EI);yCo=r(nQr,"GPT2ForSequenceClassification"),nQr.forEach(t),wCo=r(SEe," (OpenAI GPT-2 model)"),SEe.forEach(t),ACo=i(L),s1=n(L,"LI",{});var PEe=s(s1);gte=n(PEe,"STRONG",{});var sQr=s(gte);LCo=r(sQr,"gpt_neo"),sQr.forEach(t),BCo=r(PEe," \u2014 "),yI=n(PEe,"A",{href:!0});var lQr=s(yI);xCo=r(lQr,"GPTNeoForSequenceClassification"),lQr.forEach(t),kCo=r(PEe," (GPT Neo model)"),PEe.forEach(t),RCo=i(L),l1=n(L,"LI",{});var $Ee=s(l1);hte=n($Ee,"STRONG",{});var iQr=s(hte);SCo=r(iQr,"gptj"),iQr.forEach(t),PCo=r($Ee," \u2014 "),wI=n($Ee,"A",{href:!0});var dQr=s(wI);$Co=r(dQr,"GPTJForSequenceClassification"),dQr.forEach(t),ICo=r($Ee," (GPT-J model)"),$Ee.forEach(t),jCo=i(L),i1=n(L,"LI",{});var IEe=s(i1);pte=n(IEe,"STRONG",{});var cQr=s(pte);DCo=r(cQr,"ibert"),cQr.forEach(t),NCo=r(IEe," \u2014 "),AI=n(IEe,"A",{href:!0});var fQr=s(AI);qCo=r(fQr,"IBertForSequenceClassification"),fQr.forEach(t),OCo=r(IEe," (I-BERT model)"),IEe.forEach(t),GCo=i(L),d1=n(L,"LI",{});var jEe=s(d1);_te=n(jEe,"STRONG",{});var mQr=s(_te);XCo=r(mQr,"layoutlm"),mQr.forEach(t),VCo=r(jEe," \u2014 "),LI=n(jEe,"A",{href:!0});var gQr=s(LI);zCo=r(gQr,"LayoutLMForSequenceClassification"),gQr.forEach(t),WCo=r(jEe," (LayoutLM model)"),jEe.forEach(t),QCo=i(L),c1=n(L,"LI",{});var DEe=s(c1);ute=n(DEe,"STRONG",{});var hQr=s(ute);HCo=r(hQr,"layoutlmv2"),hQr.forEach(t),UCo=r(DEe," \u2014 "),BI=n(DEe,"A",{href:!0});var pQr=s(BI);JCo=r(pQr,"LayoutLMv2ForSequenceClassification"),pQr.forEach(t),YCo=r(DEe," (LayoutLMv2 model)"),DEe.forEach(t),KCo=i(L),f1=n(L,"LI",{});var NEe=s(f1);bte=n(NEe,"STRONG",{});var _Qr=s(bte);ZCo=r(_Qr,"led"),_Qr.forEach(t),e4o=r(NEe," \u2014 "),xI=n(NEe,"A",{href:!0});var uQr=s(xI);o4o=r(uQr,"LEDForSequenceClassification"),uQr.forEach(t),r4o=r(NEe," (LED model)"),NEe.forEach(t),t4o=i(L),m1=n(L,"LI",{});var qEe=s(m1);vte=n(qEe,"STRONG",{});var bQr=s(vte);a4o=r(bQr,"longformer"),bQr.forEach(t),n4o=r(qEe," \u2014 "),kI=n(qEe,"A",{href:!0});var vQr=s(kI);s4o=r(vQr,"LongformerForSequenceClassification"),vQr.forEach(t),l4o=r(qEe," (Longformer model)"),qEe.forEach(t),i4o=i(L),g1=n(L,"LI",{});var OEe=s(g1);Tte=n(OEe,"STRONG",{});var TQr=s(Tte);d4o=r(TQr,"mbart"),TQr.forEach(t),c4o=r(OEe," \u2014 "),RI=n(OEe,"A",{href:!0});var FQr=s(RI);f4o=r(FQr,"MBartForSequenceClassification"),FQr.forEach(t),m4o=r(OEe," (mBART model)"),OEe.forEach(t),g4o=i(L),h1=n(L,"LI",{});var GEe=s(h1);Fte=n(GEe,"STRONG",{});var CQr=s(Fte);h4o=r(CQr,"megatron-bert"),CQr.forEach(t),p4o=r(GEe," \u2014 "),SI=n(GEe,"A",{href:!0});var MQr=s(SI);_4o=r(MQr,"MegatronBertForSequenceClassification"),MQr.forEach(t),u4o=r(GEe," (MegatronBert model)"),GEe.forEach(t),b4o=i(L),p1=n(L,"LI",{});var XEe=s(p1);Cte=n(XEe,"STRONG",{});var EQr=s(Cte);v4o=r(EQr,"mobilebert"),EQr.forEach(t),T4o=r(XEe," \u2014 "),PI=n(XEe,"A",{href:!0});var yQr=s(PI);F4o=r(yQr,"MobileBertForSequenceClassification"),yQr.forEach(t),C4o=r(XEe," (MobileBERT model)"),XEe.forEach(t),M4o=i(L),_1=n(L,"LI",{});var VEe=s(_1);Mte=n(VEe,"STRONG",{});var wQr=s(Mte);E4o=r(wQr,"mpnet"),wQr.forEach(t),y4o=r(VEe," \u2014 "),$I=n(VEe,"A",{href:!0});var AQr=s($I);w4o=r(AQr,"MPNetForSequenceClassification"),AQr.forEach(t),A4o=r(VEe," (MPNet model)"),VEe.forEach(t),L4o=i(L),u1=n(L,"LI",{});var zEe=s(u1);Ete=n(zEe,"STRONG",{});var LQr=s(Ete);B4o=r(LQr,"nystromformer"),LQr.forEach(t),x4o=r(zEe," \u2014 "),II=n(zEe,"A",{href:!0});var BQr=s(II);k4o=r(BQr,"NystromformerForSequenceClassification"),BQr.forEach(t),R4o=r(zEe," (Nystromformer model)"),zEe.forEach(t),S4o=i(L),b1=n(L,"LI",{});var WEe=s(b1);yte=n(WEe,"STRONG",{});var xQr=s(yte);P4o=r(xQr,"openai-gpt"),xQr.forEach(t),$4o=r(WEe," \u2014 "),jI=n(WEe,"A",{href:!0});var kQr=s(jI);I4o=r(kQr,"OpenAIGPTForSequenceClassification"),kQr.forEach(t),j4o=r(WEe," (OpenAI GPT model)"),WEe.forEach(t),D4o=i(L),v1=n(L,"LI",{});var QEe=s(v1);wte=n(QEe,"STRONG",{});var RQr=s(wte);N4o=r(RQr,"perceiver"),RQr.forEach(t),q4o=r(QEe," \u2014 "),DI=n(QEe,"A",{href:!0});var SQr=s(DI);O4o=r(SQr,"PerceiverForSequenceClassification"),SQr.forEach(t),G4o=r(QEe," (Perceiver model)"),QEe.forEach(t),X4o=i(L),T1=n(L,"LI",{});var HEe=s(T1);Ate=n(HEe,"STRONG",{});var PQr=s(Ate);V4o=r(PQr,"plbart"),PQr.forEach(t),z4o=r(HEe," \u2014 "),NI=n(HEe,"A",{href:!0});var $Qr=s(NI);W4o=r($Qr,"PLBartForSequenceClassification"),$Qr.forEach(t),Q4o=r(HEe," (PLBart model)"),HEe.forEach(t),H4o=i(L),F1=n(L,"LI",{});var UEe=s(F1);Lte=n(UEe,"STRONG",{});var IQr=s(Lte);U4o=r(IQr,"qdqbert"),IQr.forEach(t),J4o=r(UEe," \u2014 "),qI=n(UEe,"A",{href:!0});var jQr=s(qI);Y4o=r(jQr,"QDQBertForSequenceClassification"),jQr.forEach(t),K4o=r(UEe," (QDQBert model)"),UEe.forEach(t),Z4o=i(L),C1=n(L,"LI",{});var JEe=s(C1);Bte=n(JEe,"STRONG",{});var DQr=s(Bte);eMo=r(DQr,"reformer"),DQr.forEach(t),oMo=r(JEe," \u2014 "),OI=n(JEe,"A",{href:!0});var NQr=s(OI);rMo=r(NQr,"ReformerForSequenceClassification"),NQr.forEach(t),tMo=r(JEe," (Reformer model)"),JEe.forEach(t),aMo=i(L),M1=n(L,"LI",{});var YEe=s(M1);xte=n(YEe,"STRONG",{});var qQr=s(xte);nMo=r(qQr,"rembert"),qQr.forEach(t),sMo=r(YEe," \u2014 "),GI=n(YEe,"A",{href:!0});var OQr=s(GI);lMo=r(OQr,"RemBertForSequenceClassification"),OQr.forEach(t),iMo=r(YEe," (RemBERT model)"),YEe.forEach(t),dMo=i(L),E1=n(L,"LI",{});var KEe=s(E1);kte=n(KEe,"STRONG",{});var GQr=s(kte);cMo=r(GQr,"roberta"),GQr.forEach(t),fMo=r(KEe," \u2014 "),XI=n(KEe,"A",{href:!0});var XQr=s(XI);mMo=r(XQr,"RobertaForSequenceClassification"),XQr.forEach(t),gMo=r(KEe," (RoBERTa model)"),KEe.forEach(t),hMo=i(L),y1=n(L,"LI",{});var ZEe=s(y1);Rte=n(ZEe,"STRONG",{});var VQr=s(Rte);pMo=r(VQr,"roformer"),VQr.forEach(t),_Mo=r(ZEe," \u2014 "),VI=n(ZEe,"A",{href:!0});var zQr=s(VI);uMo=r(zQr,"RoFormerForSequenceClassification"),zQr.forEach(t),bMo=r(ZEe," (RoFormer model)"),ZEe.forEach(t),vMo=i(L),w1=n(L,"LI",{});var eye=s(w1);Ste=n(eye,"STRONG",{});var WQr=s(Ste);TMo=r(WQr,"squeezebert"),WQr.forEach(t),FMo=r(eye," \u2014 "),zI=n(eye,"A",{href:!0});var QQr=s(zI);CMo=r(QQr,"SqueezeBertForSequenceClassification"),QQr.forEach(t),MMo=r(eye," (SqueezeBERT model)"),eye.forEach(t),EMo=i(L),A1=n(L,"LI",{});var oye=s(A1);Pte=n(oye,"STRONG",{});var HQr=s(Pte);yMo=r(HQr,"tapas"),HQr.forEach(t),wMo=r(oye," \u2014 "),WI=n(oye,"A",{href:!0});var UQr=s(WI);AMo=r(UQr,"TapasForSequenceClassification"),UQr.forEach(t),LMo=r(oye," (TAPAS model)"),oye.forEach(t),BMo=i(L),L1=n(L,"LI",{});var rye=s(L1);$te=n(rye,"STRONG",{});var JQr=s($te);xMo=r(JQr,"transfo-xl"),JQr.forEach(t),kMo=r(rye," \u2014 "),QI=n(rye,"A",{href:!0});var YQr=s(QI);RMo=r(YQr,"TransfoXLForSequenceClassification"),YQr.forEach(t),SMo=r(rye," (Transformer-XL model)"),rye.forEach(t),PMo=i(L),B1=n(L,"LI",{});var tye=s(B1);Ite=n(tye,"STRONG",{});var KQr=s(Ite);$Mo=r(KQr,"xlm"),KQr.forEach(t),IMo=r(tye," \u2014 "),HI=n(tye,"A",{href:!0});var ZQr=s(HI);jMo=r(ZQr,"XLMForSequenceClassification"),ZQr.forEach(t),DMo=r(tye," (XLM model)"),tye.forEach(t),NMo=i(L),x1=n(L,"LI",{});var aye=s(x1);jte=n(aye,"STRONG",{});var eHr=s(jte);qMo=r(eHr,"xlm-roberta"),eHr.forEach(t),OMo=r(aye," \u2014 "),UI=n(aye,"A",{href:!0});var oHr=s(UI);GMo=r(oHr,"XLMRobertaForSequenceClassification"),oHr.forEach(t),XMo=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),VMo=i(L),k1=n(L,"LI",{});var nye=s(k1);Dte=n(nye,"STRONG",{});var rHr=s(Dte);zMo=r(rHr,"xlm-roberta-xl"),rHr.forEach(t),WMo=r(nye," \u2014 "),JI=n(nye,"A",{href:!0});var tHr=s(JI);QMo=r(tHr,"XLMRobertaXLForSequenceClassification"),tHr.forEach(t),HMo=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),UMo=i(L),R1=n(L,"LI",{});var sye=s(R1);Nte=n(sye,"STRONG",{});var aHr=s(Nte);JMo=r(aHr,"xlnet"),aHr.forEach(t),YMo=r(sye," \u2014 "),YI=n(sye,"A",{href:!0});var nHr=s(YI);KMo=r(nHr,"XLNetForSequenceClassification"),nHr.forEach(t),ZMo=r(sye," (XLNet model)"),sye.forEach(t),eEo=i(L),S1=n(L,"LI",{});var lye=s(S1);qte=n(lye,"STRONG",{});var sHr=s(qte);oEo=r(sHr,"yoso"),sHr.forEach(t),rEo=r(lye," \u2014 "),KI=n(lye,"A",{href:!0});var lHr=s(KI);tEo=r(lHr,"YosoForSequenceClassification"),lHr.forEach(t),aEo=r(lye," (YOSO model)"),lye.forEach(t),L.forEach(t),nEo=i(Xt),P1=n(Xt,"P",{});var iye=s(P1);sEo=r(iye,"The model is set in evaluation mode by default using "),Ote=n(iye,"CODE",{});var iHr=s(Ote);lEo=r(iHr,"model.eval()"),iHr.forEach(t),iEo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gte=n(iye,"CODE",{});var dHr=s(Gte);dEo=r(dHr,"model.train()"),dHr.forEach(t),iye.forEach(t),cEo=i(Xt),Xte=n(Xt,"P",{});var cHr=s(Xte);fEo=r(cHr,"Examples:"),cHr.forEach(t),mEo=i(Xt),m(ny.$$.fragment,Xt),Xt.forEach(t),rl.forEach(t),UBe=i(d),hd=n(d,"H2",{class:!0});var aRe=s(hd);$1=n(aRe,"A",{id:!0,class:!0,href:!0});var fHr=s($1);Vte=n(fHr,"SPAN",{});var mHr=s(Vte);m(sy.$$.fragment,mHr),mHr.forEach(t),fHr.forEach(t),gEo=i(aRe),zte=n(aRe,"SPAN",{});var gHr=s(zte);hEo=r(gHr,"AutoModelForMultipleChoice"),gHr.forEach(t),aRe.forEach(t),JBe=i(d),er=n(d,"DIV",{class:!0});var al=s(er);m(ly.$$.fragment,al),pEo=i(al),pd=n(al,"P",{});var vz=s(pd);_Eo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wte=n(vz,"CODE",{});var hHr=s(Wte);uEo=r(hHr,"from_pretrained()"),hHr.forEach(t),bEo=r(vz,"class method or the "),Qte=n(vz,"CODE",{});var pHr=s(Qte);vEo=r(pHr,"from_config()"),pHr.forEach(t),TEo=r(vz,`class
method.`),vz.forEach(t),FEo=i(al),iy=n(al,"P",{});var nRe=s(iy);CEo=r(nRe,"This class cannot be instantiated directly using "),Hte=n(nRe,"CODE",{});var _Hr=s(Hte);MEo=r(_Hr,"__init__()"),_Hr.forEach(t),EEo=r(nRe," (throws an error)."),nRe.forEach(t),yEo=i(al),Hr=n(al,"DIV",{class:!0});var nl=s(Hr);m(dy.$$.fragment,nl),wEo=i(nl),Ute=n(nl,"P",{});var uHr=s(Ute);AEo=r(uHr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uHr.forEach(t),LEo=i(nl),_d=n(nl,"P",{});var Tz=s(_d);BEo=r(Tz,`Note:
Loading a model from its configuration file does `),Jte=n(Tz,"STRONG",{});var bHr=s(Jte);xEo=r(bHr,"not"),bHr.forEach(t),kEo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=n(Tz,"CODE",{});var vHr=s(Yte);REo=r(vHr,"from_pretrained()"),vHr.forEach(t),SEo=r(Tz,"to load the model weights."),Tz.forEach(t),PEo=i(nl),Kte=n(nl,"P",{});var THr=s(Kte);$Eo=r(THr,"Examples:"),THr.forEach(t),IEo=i(nl),m(cy.$$.fragment,nl),nl.forEach(t),jEo=i(al),De=n(al,"DIV",{class:!0});var Vt=s(De);m(fy.$$.fragment,Vt),DEo=i(Vt),Zte=n(Vt,"P",{});var FHr=s(Zte);NEo=r(FHr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FHr.forEach(t),qEo=i(Vt),Ua=n(Vt,"P",{});var Q4=s(Ua);OEo=r(Q4,"The model class to instantiate is selected based on the "),eae=n(Q4,"CODE",{});var CHr=s(eae);GEo=r(CHr,"model_type"),CHr.forEach(t),XEo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),oae=n(Q4,"CODE",{});var MHr=s(oae);VEo=r(MHr,"pretrained_model_name_or_path"),MHr.forEach(t),zEo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(Q4,"CODE",{});var EHr=s(rae);WEo=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),QEo=r(Q4,":"),Q4.forEach(t),HEo=i(Vt),O=n(Vt,"UL",{});var G=s(O);I1=n(G,"LI",{});var dye=s(I1);tae=n(dye,"STRONG",{});var yHr=s(tae);UEo=r(yHr,"albert"),yHr.forEach(t),JEo=r(dye," \u2014 "),ZI=n(dye,"A",{href:!0});var wHr=s(ZI);YEo=r(wHr,"AlbertForMultipleChoice"),wHr.forEach(t),KEo=r(dye," (ALBERT model)"),dye.forEach(t),ZEo=i(G),j1=n(G,"LI",{});var cye=s(j1);aae=n(cye,"STRONG",{});var AHr=s(aae);eyo=r(AHr,"bert"),AHr.forEach(t),oyo=r(cye," \u2014 "),ej=n(cye,"A",{href:!0});var LHr=s(ej);ryo=r(LHr,"BertForMultipleChoice"),LHr.forEach(t),tyo=r(cye," (BERT model)"),cye.forEach(t),ayo=i(G),D1=n(G,"LI",{});var fye=s(D1);nae=n(fye,"STRONG",{});var BHr=s(nae);nyo=r(BHr,"big_bird"),BHr.forEach(t),syo=r(fye," \u2014 "),oj=n(fye,"A",{href:!0});var xHr=s(oj);lyo=r(xHr,"BigBirdForMultipleChoice"),xHr.forEach(t),iyo=r(fye," (BigBird model)"),fye.forEach(t),dyo=i(G),N1=n(G,"LI",{});var mye=s(N1);sae=n(mye,"STRONG",{});var kHr=s(sae);cyo=r(kHr,"camembert"),kHr.forEach(t),fyo=r(mye," \u2014 "),rj=n(mye,"A",{href:!0});var RHr=s(rj);myo=r(RHr,"CamembertForMultipleChoice"),RHr.forEach(t),gyo=r(mye," (CamemBERT model)"),mye.forEach(t),hyo=i(G),q1=n(G,"LI",{});var gye=s(q1);lae=n(gye,"STRONG",{});var SHr=s(lae);pyo=r(SHr,"canine"),SHr.forEach(t),_yo=r(gye," \u2014 "),tj=n(gye,"A",{href:!0});var PHr=s(tj);uyo=r(PHr,"CanineForMultipleChoice"),PHr.forEach(t),byo=r(gye," (Canine model)"),gye.forEach(t),vyo=i(G),O1=n(G,"LI",{});var hye=s(O1);iae=n(hye,"STRONG",{});var $Hr=s(iae);Tyo=r($Hr,"convbert"),$Hr.forEach(t),Fyo=r(hye," \u2014 "),aj=n(hye,"A",{href:!0});var IHr=s(aj);Cyo=r(IHr,"ConvBertForMultipleChoice"),IHr.forEach(t),Myo=r(hye," (ConvBERT model)"),hye.forEach(t),Eyo=i(G),G1=n(G,"LI",{});var pye=s(G1);dae=n(pye,"STRONG",{});var jHr=s(dae);yyo=r(jHr,"data2vec-text"),jHr.forEach(t),wyo=r(pye," \u2014 "),nj=n(pye,"A",{href:!0});var DHr=s(nj);Ayo=r(DHr,"Data2VecTextForMultipleChoice"),DHr.forEach(t),Lyo=r(pye," (Data2VecText model)"),pye.forEach(t),Byo=i(G),X1=n(G,"LI",{});var _ye=s(X1);cae=n(_ye,"STRONG",{});var NHr=s(cae);xyo=r(NHr,"distilbert"),NHr.forEach(t),kyo=r(_ye," \u2014 "),sj=n(_ye,"A",{href:!0});var qHr=s(sj);Ryo=r(qHr,"DistilBertForMultipleChoice"),qHr.forEach(t),Syo=r(_ye," (DistilBERT model)"),_ye.forEach(t),Pyo=i(G),V1=n(G,"LI",{});var uye=s(V1);fae=n(uye,"STRONG",{});var OHr=s(fae);$yo=r(OHr,"electra"),OHr.forEach(t),Iyo=r(uye," \u2014 "),lj=n(uye,"A",{href:!0});var GHr=s(lj);jyo=r(GHr,"ElectraForMultipleChoice"),GHr.forEach(t),Dyo=r(uye," (ELECTRA model)"),uye.forEach(t),Nyo=i(G),z1=n(G,"LI",{});var bye=s(z1);mae=n(bye,"STRONG",{});var XHr=s(mae);qyo=r(XHr,"flaubert"),XHr.forEach(t),Oyo=r(bye," \u2014 "),ij=n(bye,"A",{href:!0});var VHr=s(ij);Gyo=r(VHr,"FlaubertForMultipleChoice"),VHr.forEach(t),Xyo=r(bye," (FlauBERT model)"),bye.forEach(t),Vyo=i(G),W1=n(G,"LI",{});var vye=s(W1);gae=n(vye,"STRONG",{});var zHr=s(gae);zyo=r(zHr,"fnet"),zHr.forEach(t),Wyo=r(vye," \u2014 "),dj=n(vye,"A",{href:!0});var WHr=s(dj);Qyo=r(WHr,"FNetForMultipleChoice"),WHr.forEach(t),Hyo=r(vye," (FNet model)"),vye.forEach(t),Uyo=i(G),Q1=n(G,"LI",{});var Tye=s(Q1);hae=n(Tye,"STRONG",{});var QHr=s(hae);Jyo=r(QHr,"funnel"),QHr.forEach(t),Yyo=r(Tye," \u2014 "),cj=n(Tye,"A",{href:!0});var HHr=s(cj);Kyo=r(HHr,"FunnelForMultipleChoice"),HHr.forEach(t),Zyo=r(Tye," (Funnel Transformer model)"),Tye.forEach(t),ewo=i(G),H1=n(G,"LI",{});var Fye=s(H1);pae=n(Fye,"STRONG",{});var UHr=s(pae);owo=r(UHr,"ibert"),UHr.forEach(t),rwo=r(Fye," \u2014 "),fj=n(Fye,"A",{href:!0});var JHr=s(fj);two=r(JHr,"IBertForMultipleChoice"),JHr.forEach(t),awo=r(Fye," (I-BERT model)"),Fye.forEach(t),nwo=i(G),U1=n(G,"LI",{});var Cye=s(U1);_ae=n(Cye,"STRONG",{});var YHr=s(_ae);swo=r(YHr,"longformer"),YHr.forEach(t),lwo=r(Cye," \u2014 "),mj=n(Cye,"A",{href:!0});var KHr=s(mj);iwo=r(KHr,"LongformerForMultipleChoice"),KHr.forEach(t),dwo=r(Cye," (Longformer model)"),Cye.forEach(t),cwo=i(G),J1=n(G,"LI",{});var Mye=s(J1);uae=n(Mye,"STRONG",{});var ZHr=s(uae);fwo=r(ZHr,"megatron-bert"),ZHr.forEach(t),mwo=r(Mye," \u2014 "),gj=n(Mye,"A",{href:!0});var eUr=s(gj);gwo=r(eUr,"MegatronBertForMultipleChoice"),eUr.forEach(t),hwo=r(Mye," (MegatronBert model)"),Mye.forEach(t),pwo=i(G),Y1=n(G,"LI",{});var Eye=s(Y1);bae=n(Eye,"STRONG",{});var oUr=s(bae);_wo=r(oUr,"mobilebert"),oUr.forEach(t),uwo=r(Eye," \u2014 "),hj=n(Eye,"A",{href:!0});var rUr=s(hj);bwo=r(rUr,"MobileBertForMultipleChoice"),rUr.forEach(t),vwo=r(Eye," (MobileBERT model)"),Eye.forEach(t),Two=i(G),K1=n(G,"LI",{});var yye=s(K1);vae=n(yye,"STRONG",{});var tUr=s(vae);Fwo=r(tUr,"mpnet"),tUr.forEach(t),Cwo=r(yye," \u2014 "),pj=n(yye,"A",{href:!0});var aUr=s(pj);Mwo=r(aUr,"MPNetForMultipleChoice"),aUr.forEach(t),Ewo=r(yye," (MPNet model)"),yye.forEach(t),ywo=i(G),Z1=n(G,"LI",{});var wye=s(Z1);Tae=n(wye,"STRONG",{});var nUr=s(Tae);wwo=r(nUr,"nystromformer"),nUr.forEach(t),Awo=r(wye," \u2014 "),_j=n(wye,"A",{href:!0});var sUr=s(_j);Lwo=r(sUr,"NystromformerForMultipleChoice"),sUr.forEach(t),Bwo=r(wye," (Nystromformer model)"),wye.forEach(t),xwo=i(G),eb=n(G,"LI",{});var Aye=s(eb);Fae=n(Aye,"STRONG",{});var lUr=s(Fae);kwo=r(lUr,"qdqbert"),lUr.forEach(t),Rwo=r(Aye," \u2014 "),uj=n(Aye,"A",{href:!0});var iUr=s(uj);Swo=r(iUr,"QDQBertForMultipleChoice"),iUr.forEach(t),Pwo=r(Aye," (QDQBert model)"),Aye.forEach(t),$wo=i(G),ob=n(G,"LI",{});var Lye=s(ob);Cae=n(Lye,"STRONG",{});var dUr=s(Cae);Iwo=r(dUr,"rembert"),dUr.forEach(t),jwo=r(Lye," \u2014 "),bj=n(Lye,"A",{href:!0});var cUr=s(bj);Dwo=r(cUr,"RemBertForMultipleChoice"),cUr.forEach(t),Nwo=r(Lye," (RemBERT model)"),Lye.forEach(t),qwo=i(G),rb=n(G,"LI",{});var Bye=s(rb);Mae=n(Bye,"STRONG",{});var fUr=s(Mae);Owo=r(fUr,"roberta"),fUr.forEach(t),Gwo=r(Bye," \u2014 "),vj=n(Bye,"A",{href:!0});var mUr=s(vj);Xwo=r(mUr,"RobertaForMultipleChoice"),mUr.forEach(t),Vwo=r(Bye," (RoBERTa model)"),Bye.forEach(t),zwo=i(G),tb=n(G,"LI",{});var xye=s(tb);Eae=n(xye,"STRONG",{});var gUr=s(Eae);Wwo=r(gUr,"roformer"),gUr.forEach(t),Qwo=r(xye," \u2014 "),Tj=n(xye,"A",{href:!0});var hUr=s(Tj);Hwo=r(hUr,"RoFormerForMultipleChoice"),hUr.forEach(t),Uwo=r(xye," (RoFormer model)"),xye.forEach(t),Jwo=i(G),ab=n(G,"LI",{});var kye=s(ab);yae=n(kye,"STRONG",{});var pUr=s(yae);Ywo=r(pUr,"squeezebert"),pUr.forEach(t),Kwo=r(kye," \u2014 "),Fj=n(kye,"A",{href:!0});var _Ur=s(Fj);Zwo=r(_Ur,"SqueezeBertForMultipleChoice"),_Ur.forEach(t),e6o=r(kye," (SqueezeBERT model)"),kye.forEach(t),o6o=i(G),nb=n(G,"LI",{});var Rye=s(nb);wae=n(Rye,"STRONG",{});var uUr=s(wae);r6o=r(uUr,"xlm"),uUr.forEach(t),t6o=r(Rye," \u2014 "),Cj=n(Rye,"A",{href:!0});var bUr=s(Cj);a6o=r(bUr,"XLMForMultipleChoice"),bUr.forEach(t),n6o=r(Rye," (XLM model)"),Rye.forEach(t),s6o=i(G),sb=n(G,"LI",{});var Sye=s(sb);Aae=n(Sye,"STRONG",{});var vUr=s(Aae);l6o=r(vUr,"xlm-roberta"),vUr.forEach(t),i6o=r(Sye," \u2014 "),Mj=n(Sye,"A",{href:!0});var TUr=s(Mj);d6o=r(TUr,"XLMRobertaForMultipleChoice"),TUr.forEach(t),c6o=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),f6o=i(G),lb=n(G,"LI",{});var Pye=s(lb);Lae=n(Pye,"STRONG",{});var FUr=s(Lae);m6o=r(FUr,"xlm-roberta-xl"),FUr.forEach(t),g6o=r(Pye," \u2014 "),Ej=n(Pye,"A",{href:!0});var CUr=s(Ej);h6o=r(CUr,"XLMRobertaXLForMultipleChoice"),CUr.forEach(t),p6o=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),_6o=i(G),ib=n(G,"LI",{});var $ye=s(ib);Bae=n($ye,"STRONG",{});var MUr=s(Bae);u6o=r(MUr,"xlnet"),MUr.forEach(t),b6o=r($ye," \u2014 "),yj=n($ye,"A",{href:!0});var EUr=s(yj);v6o=r(EUr,"XLNetForMultipleChoice"),EUr.forEach(t),T6o=r($ye," (XLNet model)"),$ye.forEach(t),F6o=i(G),db=n(G,"LI",{});var Iye=s(db);xae=n(Iye,"STRONG",{});var yUr=s(xae);C6o=r(yUr,"yoso"),yUr.forEach(t),M6o=r(Iye," \u2014 "),wj=n(Iye,"A",{href:!0});var wUr=s(wj);E6o=r(wUr,"YosoForMultipleChoice"),wUr.forEach(t),y6o=r(Iye," (YOSO model)"),Iye.forEach(t),G.forEach(t),w6o=i(Vt),cb=n(Vt,"P",{});var jye=s(cb);A6o=r(jye,"The model is set in evaluation mode by default using "),kae=n(jye,"CODE",{});var AUr=s(kae);L6o=r(AUr,"model.eval()"),AUr.forEach(t),B6o=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=n(jye,"CODE",{});var LUr=s(Rae);x6o=r(LUr,"model.train()"),LUr.forEach(t),jye.forEach(t),k6o=i(Vt),Sae=n(Vt,"P",{});var BUr=s(Sae);R6o=r(BUr,"Examples:"),BUr.forEach(t),S6o=i(Vt),m(my.$$.fragment,Vt),Vt.forEach(t),al.forEach(t),YBe=i(d),ud=n(d,"H2",{class:!0});var sRe=s(ud);fb=n(sRe,"A",{id:!0,class:!0,href:!0});var xUr=s(fb);Pae=n(xUr,"SPAN",{});var kUr=s(Pae);m(gy.$$.fragment,kUr),kUr.forEach(t),xUr.forEach(t),P6o=i(sRe),$ae=n(sRe,"SPAN",{});var RUr=s($ae);$6o=r(RUr,"AutoModelForNextSentencePrediction"),RUr.forEach(t),sRe.forEach(t),KBe=i(d),or=n(d,"DIV",{class:!0});var sl=s(or);m(hy.$$.fragment,sl),I6o=i(sl),bd=n(sl,"P",{});var Fz=s(bd);j6o=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Iae=n(Fz,"CODE",{});var SUr=s(Iae);D6o=r(SUr,"from_pretrained()"),SUr.forEach(t),N6o=r(Fz,"class method or the "),jae=n(Fz,"CODE",{});var PUr=s(jae);q6o=r(PUr,"from_config()"),PUr.forEach(t),O6o=r(Fz,`class
method.`),Fz.forEach(t),G6o=i(sl),py=n(sl,"P",{});var lRe=s(py);X6o=r(lRe,"This class cannot be instantiated directly using "),Dae=n(lRe,"CODE",{});var $Ur=s(Dae);V6o=r($Ur,"__init__()"),$Ur.forEach(t),z6o=r(lRe," (throws an error)."),lRe.forEach(t),W6o=i(sl),Ur=n(sl,"DIV",{class:!0});var ll=s(Ur);m(_y.$$.fragment,ll),Q6o=i(ll),Nae=n(ll,"P",{});var IUr=s(Nae);H6o=r(IUr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IUr.forEach(t),U6o=i(ll),vd=n(ll,"P",{});var Cz=s(vd);J6o=r(Cz,`Note:
Loading a model from its configuration file does `),qae=n(Cz,"STRONG",{});var jUr=s(qae);Y6o=r(jUr,"not"),jUr.forEach(t),K6o=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oae=n(Cz,"CODE",{});var DUr=s(Oae);Z6o=r(DUr,"from_pretrained()"),DUr.forEach(t),eAo=r(Cz,"to load the model weights."),Cz.forEach(t),oAo=i(ll),Gae=n(ll,"P",{});var NUr=s(Gae);rAo=r(NUr,"Examples:"),NUr.forEach(t),tAo=i(ll),m(uy.$$.fragment,ll),ll.forEach(t),aAo=i(sl),Ne=n(sl,"DIV",{class:!0});var zt=s(Ne);m(by.$$.fragment,zt),nAo=i(zt),Xae=n(zt,"P",{});var qUr=s(Xae);sAo=r(qUr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qUr.forEach(t),lAo=i(zt),Ja=n(zt,"P",{});var H4=s(Ja);iAo=r(H4,"The model class to instantiate is selected based on the "),Vae=n(H4,"CODE",{});var OUr=s(Vae);dAo=r(OUr,"model_type"),OUr.forEach(t),cAo=r(H4,` property of the config object (either
passed as an argument or loaded from `),zae=n(H4,"CODE",{});var GUr=s(zae);fAo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),mAo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=n(H4,"CODE",{});var XUr=s(Wae);gAo=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),hAo=r(H4,":"),H4.forEach(t),pAo=i(zt),da=n(zt,"UL",{});var il=s(da);mb=n(il,"LI",{});var Dye=s(mb);Qae=n(Dye,"STRONG",{});var VUr=s(Qae);_Ao=r(VUr,"bert"),VUr.forEach(t),uAo=r(Dye," \u2014 "),Aj=n(Dye,"A",{href:!0});var zUr=s(Aj);bAo=r(zUr,"BertForNextSentencePrediction"),zUr.forEach(t),vAo=r(Dye," (BERT model)"),Dye.forEach(t),TAo=i(il),gb=n(il,"LI",{});var Nye=s(gb);Hae=n(Nye,"STRONG",{});var WUr=s(Hae);FAo=r(WUr,"fnet"),WUr.forEach(t),CAo=r(Nye," \u2014 "),Lj=n(Nye,"A",{href:!0});var QUr=s(Lj);MAo=r(QUr,"FNetForNextSentencePrediction"),QUr.forEach(t),EAo=r(Nye," (FNet model)"),Nye.forEach(t),yAo=i(il),hb=n(il,"LI",{});var qye=s(hb);Uae=n(qye,"STRONG",{});var HUr=s(Uae);wAo=r(HUr,"megatron-bert"),HUr.forEach(t),AAo=r(qye," \u2014 "),Bj=n(qye,"A",{href:!0});var UUr=s(Bj);LAo=r(UUr,"MegatronBertForNextSentencePrediction"),UUr.forEach(t),BAo=r(qye," (MegatronBert model)"),qye.forEach(t),xAo=i(il),pb=n(il,"LI",{});var Oye=s(pb);Jae=n(Oye,"STRONG",{});var JUr=s(Jae);kAo=r(JUr,"mobilebert"),JUr.forEach(t),RAo=r(Oye," \u2014 "),xj=n(Oye,"A",{href:!0});var YUr=s(xj);SAo=r(YUr,"MobileBertForNextSentencePrediction"),YUr.forEach(t),PAo=r(Oye," (MobileBERT model)"),Oye.forEach(t),$Ao=i(il),_b=n(il,"LI",{});var Gye=s(_b);Yae=n(Gye,"STRONG",{});var KUr=s(Yae);IAo=r(KUr,"qdqbert"),KUr.forEach(t),jAo=r(Gye," \u2014 "),kj=n(Gye,"A",{href:!0});var ZUr=s(kj);DAo=r(ZUr,"QDQBertForNextSentencePrediction"),ZUr.forEach(t),NAo=r(Gye," (QDQBert model)"),Gye.forEach(t),il.forEach(t),qAo=i(zt),ub=n(zt,"P",{});var Xye=s(ub);OAo=r(Xye,"The model is set in evaluation mode by default using "),Kae=n(Xye,"CODE",{});var eJr=s(Kae);GAo=r(eJr,"model.eval()"),eJr.forEach(t),XAo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=n(Xye,"CODE",{});var oJr=s(Zae);VAo=r(oJr,"model.train()"),oJr.forEach(t),Xye.forEach(t),zAo=i(zt),ene=n(zt,"P",{});var rJr=s(ene);WAo=r(rJr,"Examples:"),rJr.forEach(t),QAo=i(zt),m(vy.$$.fragment,zt),zt.forEach(t),sl.forEach(t),ZBe=i(d),Td=n(d,"H2",{class:!0});var iRe=s(Td);bb=n(iRe,"A",{id:!0,class:!0,href:!0});var tJr=s(bb);one=n(tJr,"SPAN",{});var aJr=s(one);m(Ty.$$.fragment,aJr),aJr.forEach(t),tJr.forEach(t),HAo=i(iRe),rne=n(iRe,"SPAN",{});var nJr=s(rne);UAo=r(nJr,"AutoModelForTokenClassification"),nJr.forEach(t),iRe.forEach(t),exe=i(d),rr=n(d,"DIV",{class:!0});var dl=s(rr);m(Fy.$$.fragment,dl),JAo=i(dl),Fd=n(dl,"P",{});var Mz=s(Fd);YAo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=n(Mz,"CODE",{});var sJr=s(tne);KAo=r(sJr,"from_pretrained()"),sJr.forEach(t),ZAo=r(Mz,"class method or the "),ane=n(Mz,"CODE",{});var lJr=s(ane);e0o=r(lJr,"from_config()"),lJr.forEach(t),o0o=r(Mz,`class
method.`),Mz.forEach(t),r0o=i(dl),Cy=n(dl,"P",{});var dRe=s(Cy);t0o=r(dRe,"This class cannot be instantiated directly using "),nne=n(dRe,"CODE",{});var iJr=s(nne);a0o=r(iJr,"__init__()"),iJr.forEach(t),n0o=r(dRe," (throws an error)."),dRe.forEach(t),s0o=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(My.$$.fragment,cl),l0o=i(cl),sne=n(cl,"P",{});var dJr=s(sne);i0o=r(dJr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dJr.forEach(t),d0o=i(cl),Cd=n(cl,"P",{});var Ez=s(Cd);c0o=r(Ez,`Note:
Loading a model from its configuration file does `),lne=n(Ez,"STRONG",{});var cJr=s(lne);f0o=r(cJr,"not"),cJr.forEach(t),m0o=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),ine=n(Ez,"CODE",{});var fJr=s(ine);g0o=r(fJr,"from_pretrained()"),fJr.forEach(t),h0o=r(Ez,"to load the model weights."),Ez.forEach(t),p0o=i(cl),dne=n(cl,"P",{});var mJr=s(dne);_0o=r(mJr,"Examples:"),mJr.forEach(t),u0o=i(cl),m(Ey.$$.fragment,cl),cl.forEach(t),b0o=i(dl),qe=n(dl,"DIV",{class:!0});var Wt=s(qe);m(yy.$$.fragment,Wt),v0o=i(Wt),cne=n(Wt,"P",{});var gJr=s(cne);T0o=r(gJr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gJr.forEach(t),F0o=i(Wt),Ya=n(Wt,"P",{});var U4=s(Ya);C0o=r(U4,"The model class to instantiate is selected based on the "),fne=n(U4,"CODE",{});var hJr=s(fne);M0o=r(hJr,"model_type"),hJr.forEach(t),E0o=r(U4,` property of the config object (either
passed as an argument or loaded from `),mne=n(U4,"CODE",{});var pJr=s(mne);y0o=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),w0o=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=n(U4,"CODE",{});var _Jr=s(gne);A0o=r(_Jr,"pretrained_model_name_or_path"),_Jr.forEach(t),L0o=r(U4,":"),U4.forEach(t),B0o=i(Wt),N=n(Wt,"UL",{});var q=s(N);vb=n(q,"LI",{});var Vye=s(vb);hne=n(Vye,"STRONG",{});var uJr=s(hne);x0o=r(uJr,"albert"),uJr.forEach(t),k0o=r(Vye," \u2014 "),Rj=n(Vye,"A",{href:!0});var bJr=s(Rj);R0o=r(bJr,"AlbertForTokenClassification"),bJr.forEach(t),S0o=r(Vye," (ALBERT model)"),Vye.forEach(t),P0o=i(q),Tb=n(q,"LI",{});var zye=s(Tb);pne=n(zye,"STRONG",{});var vJr=s(pne);$0o=r(vJr,"bert"),vJr.forEach(t),I0o=r(zye," \u2014 "),Sj=n(zye,"A",{href:!0});var TJr=s(Sj);j0o=r(TJr,"BertForTokenClassification"),TJr.forEach(t),D0o=r(zye," (BERT model)"),zye.forEach(t),N0o=i(q),Fb=n(q,"LI",{});var Wye=s(Fb);_ne=n(Wye,"STRONG",{});var FJr=s(_ne);q0o=r(FJr,"big_bird"),FJr.forEach(t),O0o=r(Wye," \u2014 "),Pj=n(Wye,"A",{href:!0});var CJr=s(Pj);G0o=r(CJr,"BigBirdForTokenClassification"),CJr.forEach(t),X0o=r(Wye," (BigBird model)"),Wye.forEach(t),V0o=i(q),Cb=n(q,"LI",{});var Qye=s(Cb);une=n(Qye,"STRONG",{});var MJr=s(une);z0o=r(MJr,"camembert"),MJr.forEach(t),W0o=r(Qye," \u2014 "),$j=n(Qye,"A",{href:!0});var EJr=s($j);Q0o=r(EJr,"CamembertForTokenClassification"),EJr.forEach(t),H0o=r(Qye," (CamemBERT model)"),Qye.forEach(t),U0o=i(q),Mb=n(q,"LI",{});var Hye=s(Mb);bne=n(Hye,"STRONG",{});var yJr=s(bne);J0o=r(yJr,"canine"),yJr.forEach(t),Y0o=r(Hye," \u2014 "),Ij=n(Hye,"A",{href:!0});var wJr=s(Ij);K0o=r(wJr,"CanineForTokenClassification"),wJr.forEach(t),Z0o=r(Hye," (Canine model)"),Hye.forEach(t),eLo=i(q),Eb=n(q,"LI",{});var Uye=s(Eb);vne=n(Uye,"STRONG",{});var AJr=s(vne);oLo=r(AJr,"convbert"),AJr.forEach(t),rLo=r(Uye," \u2014 "),jj=n(Uye,"A",{href:!0});var LJr=s(jj);tLo=r(LJr,"ConvBertForTokenClassification"),LJr.forEach(t),aLo=r(Uye," (ConvBERT model)"),Uye.forEach(t),nLo=i(q),yb=n(q,"LI",{});var Jye=s(yb);Tne=n(Jye,"STRONG",{});var BJr=s(Tne);sLo=r(BJr,"data2vec-text"),BJr.forEach(t),lLo=r(Jye," \u2014 "),Dj=n(Jye,"A",{href:!0});var xJr=s(Dj);iLo=r(xJr,"Data2VecTextForTokenClassification"),xJr.forEach(t),dLo=r(Jye," (Data2VecText model)"),Jye.forEach(t),cLo=i(q),wb=n(q,"LI",{});var Yye=s(wb);Fne=n(Yye,"STRONG",{});var kJr=s(Fne);fLo=r(kJr,"deberta"),kJr.forEach(t),mLo=r(Yye," \u2014 "),Nj=n(Yye,"A",{href:!0});var RJr=s(Nj);gLo=r(RJr,"DebertaForTokenClassification"),RJr.forEach(t),hLo=r(Yye," (DeBERTa model)"),Yye.forEach(t),pLo=i(q),Ab=n(q,"LI",{});var Kye=s(Ab);Cne=n(Kye,"STRONG",{});var SJr=s(Cne);_Lo=r(SJr,"deberta-v2"),SJr.forEach(t),uLo=r(Kye," \u2014 "),qj=n(Kye,"A",{href:!0});var PJr=s(qj);bLo=r(PJr,"DebertaV2ForTokenClassification"),PJr.forEach(t),vLo=r(Kye," (DeBERTa-v2 model)"),Kye.forEach(t),TLo=i(q),Lb=n(q,"LI",{});var Zye=s(Lb);Mne=n(Zye,"STRONG",{});var $Jr=s(Mne);FLo=r($Jr,"distilbert"),$Jr.forEach(t),CLo=r(Zye," \u2014 "),Oj=n(Zye,"A",{href:!0});var IJr=s(Oj);MLo=r(IJr,"DistilBertForTokenClassification"),IJr.forEach(t),ELo=r(Zye," (DistilBERT model)"),Zye.forEach(t),yLo=i(q),Bb=n(q,"LI",{});var ewe=s(Bb);Ene=n(ewe,"STRONG",{});var jJr=s(Ene);wLo=r(jJr,"electra"),jJr.forEach(t),ALo=r(ewe," \u2014 "),Gj=n(ewe,"A",{href:!0});var DJr=s(Gj);LLo=r(DJr,"ElectraForTokenClassification"),DJr.forEach(t),BLo=r(ewe," (ELECTRA model)"),ewe.forEach(t),xLo=i(q),xb=n(q,"LI",{});var owe=s(xb);yne=n(owe,"STRONG",{});var NJr=s(yne);kLo=r(NJr,"flaubert"),NJr.forEach(t),RLo=r(owe," \u2014 "),Xj=n(owe,"A",{href:!0});var qJr=s(Xj);SLo=r(qJr,"FlaubertForTokenClassification"),qJr.forEach(t),PLo=r(owe," (FlauBERT model)"),owe.forEach(t),$Lo=i(q),kb=n(q,"LI",{});var rwe=s(kb);wne=n(rwe,"STRONG",{});var OJr=s(wne);ILo=r(OJr,"fnet"),OJr.forEach(t),jLo=r(rwe," \u2014 "),Vj=n(rwe,"A",{href:!0});var GJr=s(Vj);DLo=r(GJr,"FNetForTokenClassification"),GJr.forEach(t),NLo=r(rwe," (FNet model)"),rwe.forEach(t),qLo=i(q),Rb=n(q,"LI",{});var twe=s(Rb);Ane=n(twe,"STRONG",{});var XJr=s(Ane);OLo=r(XJr,"funnel"),XJr.forEach(t),GLo=r(twe," \u2014 "),zj=n(twe,"A",{href:!0});var VJr=s(zj);XLo=r(VJr,"FunnelForTokenClassification"),VJr.forEach(t),VLo=r(twe," (Funnel Transformer model)"),twe.forEach(t),zLo=i(q),Sb=n(q,"LI",{});var awe=s(Sb);Lne=n(awe,"STRONG",{});var zJr=s(Lne);WLo=r(zJr,"gpt2"),zJr.forEach(t),QLo=r(awe," \u2014 "),Wj=n(awe,"A",{href:!0});var WJr=s(Wj);HLo=r(WJr,"GPT2ForTokenClassification"),WJr.forEach(t),ULo=r(awe," (OpenAI GPT-2 model)"),awe.forEach(t),JLo=i(q),Pb=n(q,"LI",{});var nwe=s(Pb);Bne=n(nwe,"STRONG",{});var QJr=s(Bne);YLo=r(QJr,"ibert"),QJr.forEach(t),KLo=r(nwe," \u2014 "),Qj=n(nwe,"A",{href:!0});var HJr=s(Qj);ZLo=r(HJr,"IBertForTokenClassification"),HJr.forEach(t),e8o=r(nwe," (I-BERT model)"),nwe.forEach(t),o8o=i(q),$b=n(q,"LI",{});var swe=s($b);xne=n(swe,"STRONG",{});var UJr=s(xne);r8o=r(UJr,"layoutlm"),UJr.forEach(t),t8o=r(swe," \u2014 "),Hj=n(swe,"A",{href:!0});var JJr=s(Hj);a8o=r(JJr,"LayoutLMForTokenClassification"),JJr.forEach(t),n8o=r(swe," (LayoutLM model)"),swe.forEach(t),s8o=i(q),Ib=n(q,"LI",{});var lwe=s(Ib);kne=n(lwe,"STRONG",{});var YJr=s(kne);l8o=r(YJr,"layoutlmv2"),YJr.forEach(t),i8o=r(lwe," \u2014 "),Uj=n(lwe,"A",{href:!0});var KJr=s(Uj);d8o=r(KJr,"LayoutLMv2ForTokenClassification"),KJr.forEach(t),c8o=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),f8o=i(q),jb=n(q,"LI",{});var iwe=s(jb);Rne=n(iwe,"STRONG",{});var ZJr=s(Rne);m8o=r(ZJr,"longformer"),ZJr.forEach(t),g8o=r(iwe," \u2014 "),Jj=n(iwe,"A",{href:!0});var eYr=s(Jj);h8o=r(eYr,"LongformerForTokenClassification"),eYr.forEach(t),p8o=r(iwe," (Longformer model)"),iwe.forEach(t),_8o=i(q),Db=n(q,"LI",{});var dwe=s(Db);Sne=n(dwe,"STRONG",{});var oYr=s(Sne);u8o=r(oYr,"megatron-bert"),oYr.forEach(t),b8o=r(dwe," \u2014 "),Yj=n(dwe,"A",{href:!0});var rYr=s(Yj);v8o=r(rYr,"MegatronBertForTokenClassification"),rYr.forEach(t),T8o=r(dwe," (MegatronBert model)"),dwe.forEach(t),F8o=i(q),Nb=n(q,"LI",{});var cwe=s(Nb);Pne=n(cwe,"STRONG",{});var tYr=s(Pne);C8o=r(tYr,"mobilebert"),tYr.forEach(t),M8o=r(cwe," \u2014 "),Kj=n(cwe,"A",{href:!0});var aYr=s(Kj);E8o=r(aYr,"MobileBertForTokenClassification"),aYr.forEach(t),y8o=r(cwe," (MobileBERT model)"),cwe.forEach(t),w8o=i(q),qb=n(q,"LI",{});var fwe=s(qb);$ne=n(fwe,"STRONG",{});var nYr=s($ne);A8o=r(nYr,"mpnet"),nYr.forEach(t),L8o=r(fwe," \u2014 "),Zj=n(fwe,"A",{href:!0});var sYr=s(Zj);B8o=r(sYr,"MPNetForTokenClassification"),sYr.forEach(t),x8o=r(fwe," (MPNet model)"),fwe.forEach(t),k8o=i(q),Ob=n(q,"LI",{});var mwe=s(Ob);Ine=n(mwe,"STRONG",{});var lYr=s(Ine);R8o=r(lYr,"nystromformer"),lYr.forEach(t),S8o=r(mwe," \u2014 "),eD=n(mwe,"A",{href:!0});var iYr=s(eD);P8o=r(iYr,"NystromformerForTokenClassification"),iYr.forEach(t),$8o=r(mwe," (Nystromformer model)"),mwe.forEach(t),I8o=i(q),Gb=n(q,"LI",{});var gwe=s(Gb);jne=n(gwe,"STRONG",{});var dYr=s(jne);j8o=r(dYr,"qdqbert"),dYr.forEach(t),D8o=r(gwe," \u2014 "),oD=n(gwe,"A",{href:!0});var cYr=s(oD);N8o=r(cYr,"QDQBertForTokenClassification"),cYr.forEach(t),q8o=r(gwe," (QDQBert model)"),gwe.forEach(t),O8o=i(q),Xb=n(q,"LI",{});var hwe=s(Xb);Dne=n(hwe,"STRONG",{});var fYr=s(Dne);G8o=r(fYr,"rembert"),fYr.forEach(t),X8o=r(hwe," \u2014 "),rD=n(hwe,"A",{href:!0});var mYr=s(rD);V8o=r(mYr,"RemBertForTokenClassification"),mYr.forEach(t),z8o=r(hwe," (RemBERT model)"),hwe.forEach(t),W8o=i(q),Vb=n(q,"LI",{});var pwe=s(Vb);Nne=n(pwe,"STRONG",{});var gYr=s(Nne);Q8o=r(gYr,"roberta"),gYr.forEach(t),H8o=r(pwe," \u2014 "),tD=n(pwe,"A",{href:!0});var hYr=s(tD);U8o=r(hYr,"RobertaForTokenClassification"),hYr.forEach(t),J8o=r(pwe," (RoBERTa model)"),pwe.forEach(t),Y8o=i(q),zb=n(q,"LI",{});var _we=s(zb);qne=n(_we,"STRONG",{});var pYr=s(qne);K8o=r(pYr,"roformer"),pYr.forEach(t),Z8o=r(_we," \u2014 "),aD=n(_we,"A",{href:!0});var _Yr=s(aD);e7o=r(_Yr,"RoFormerForTokenClassification"),_Yr.forEach(t),o7o=r(_we," (RoFormer model)"),_we.forEach(t),r7o=i(q),Wb=n(q,"LI",{});var uwe=s(Wb);One=n(uwe,"STRONG",{});var uYr=s(One);t7o=r(uYr,"squeezebert"),uYr.forEach(t),a7o=r(uwe," \u2014 "),nD=n(uwe,"A",{href:!0});var bYr=s(nD);n7o=r(bYr,"SqueezeBertForTokenClassification"),bYr.forEach(t),s7o=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),l7o=i(q),Qb=n(q,"LI",{});var bwe=s(Qb);Gne=n(bwe,"STRONG",{});var vYr=s(Gne);i7o=r(vYr,"xlm"),vYr.forEach(t),d7o=r(bwe," \u2014 "),sD=n(bwe,"A",{href:!0});var TYr=s(sD);c7o=r(TYr,"XLMForTokenClassification"),TYr.forEach(t),f7o=r(bwe," (XLM model)"),bwe.forEach(t),m7o=i(q),Hb=n(q,"LI",{});var vwe=s(Hb);Xne=n(vwe,"STRONG",{});var FYr=s(Xne);g7o=r(FYr,"xlm-roberta"),FYr.forEach(t),h7o=r(vwe," \u2014 "),lD=n(vwe,"A",{href:!0});var CYr=s(lD);p7o=r(CYr,"XLMRobertaForTokenClassification"),CYr.forEach(t),_7o=r(vwe," (XLM-RoBERTa model)"),vwe.forEach(t),u7o=i(q),Ub=n(q,"LI",{});var Twe=s(Ub);Vne=n(Twe,"STRONG",{});var MYr=s(Vne);b7o=r(MYr,"xlm-roberta-xl"),MYr.forEach(t),v7o=r(Twe," \u2014 "),iD=n(Twe,"A",{href:!0});var EYr=s(iD);T7o=r(EYr,"XLMRobertaXLForTokenClassification"),EYr.forEach(t),F7o=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),C7o=i(q),Jb=n(q,"LI",{});var Fwe=s(Jb);zne=n(Fwe,"STRONG",{});var yYr=s(zne);M7o=r(yYr,"xlnet"),yYr.forEach(t),E7o=r(Fwe," \u2014 "),dD=n(Fwe,"A",{href:!0});var wYr=s(dD);y7o=r(wYr,"XLNetForTokenClassification"),wYr.forEach(t),w7o=r(Fwe," (XLNet model)"),Fwe.forEach(t),A7o=i(q),Yb=n(q,"LI",{});var Cwe=s(Yb);Wne=n(Cwe,"STRONG",{});var AYr=s(Wne);L7o=r(AYr,"yoso"),AYr.forEach(t),B7o=r(Cwe," \u2014 "),cD=n(Cwe,"A",{href:!0});var LYr=s(cD);x7o=r(LYr,"YosoForTokenClassification"),LYr.forEach(t),k7o=r(Cwe," (YOSO model)"),Cwe.forEach(t),q.forEach(t),R7o=i(Wt),Kb=n(Wt,"P",{});var Mwe=s(Kb);S7o=r(Mwe,"The model is set in evaluation mode by default using "),Qne=n(Mwe,"CODE",{});var BYr=s(Qne);P7o=r(BYr,"model.eval()"),BYr.forEach(t),$7o=r(Mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=n(Mwe,"CODE",{});var xYr=s(Hne);I7o=r(xYr,"model.train()"),xYr.forEach(t),Mwe.forEach(t),j7o=i(Wt),Une=n(Wt,"P",{});var kYr=s(Une);D7o=r(kYr,"Examples:"),kYr.forEach(t),N7o=i(Wt),m(wy.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),oxe=i(d),Md=n(d,"H2",{class:!0});var cRe=s(Md);Zb=n(cRe,"A",{id:!0,class:!0,href:!0});var RYr=s(Zb);Jne=n(RYr,"SPAN",{});var SYr=s(Jne);m(Ay.$$.fragment,SYr),SYr.forEach(t),RYr.forEach(t),q7o=i(cRe),Yne=n(cRe,"SPAN",{});var PYr=s(Yne);O7o=r(PYr,"AutoModelForQuestionAnswering"),PYr.forEach(t),cRe.forEach(t),rxe=i(d),tr=n(d,"DIV",{class:!0});var fl=s(tr);m(Ly.$$.fragment,fl),G7o=i(fl),Ed=n(fl,"P",{});var yz=s(Ed);X7o=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Kne=n(yz,"CODE",{});var $Yr=s(Kne);V7o=r($Yr,"from_pretrained()"),$Yr.forEach(t),z7o=r(yz,"class method or the "),Zne=n(yz,"CODE",{});var IYr=s(Zne);W7o=r(IYr,"from_config()"),IYr.forEach(t),Q7o=r(yz,`class
method.`),yz.forEach(t),H7o=i(fl),By=n(fl,"P",{});var fRe=s(By);U7o=r(fRe,"This class cannot be instantiated directly using "),ese=n(fRe,"CODE",{});var jYr=s(ese);J7o=r(jYr,"__init__()"),jYr.forEach(t),Y7o=r(fRe," (throws an error)."),fRe.forEach(t),K7o=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(xy.$$.fragment,ml),Z7o=i(ml),ose=n(ml,"P",{});var DYr=s(ose);eBo=r(DYr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DYr.forEach(t),oBo=i(ml),yd=n(ml,"P",{});var wz=s(yd);rBo=r(wz,`Note:
Loading a model from its configuration file does `),rse=n(wz,"STRONG",{});var NYr=s(rse);tBo=r(NYr,"not"),NYr.forEach(t),aBo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=n(wz,"CODE",{});var qYr=s(tse);nBo=r(qYr,"from_pretrained()"),qYr.forEach(t),sBo=r(wz,"to load the model weights."),wz.forEach(t),lBo=i(ml),ase=n(ml,"P",{});var OYr=s(ase);iBo=r(OYr,"Examples:"),OYr.forEach(t),dBo=i(ml),m(ky.$$.fragment,ml),ml.forEach(t),cBo=i(fl),Oe=n(fl,"DIV",{class:!0});var Qt=s(Oe);m(Ry.$$.fragment,Qt),fBo=i(Qt),nse=n(Qt,"P",{});var GYr=s(nse);mBo=r(GYr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GYr.forEach(t),gBo=i(Qt),Ka=n(Qt,"P",{});var J4=s(Ka);hBo=r(J4,"The model class to instantiate is selected based on the "),sse=n(J4,"CODE",{});var XYr=s(sse);pBo=r(XYr,"model_type"),XYr.forEach(t),_Bo=r(J4,` property of the config object (either
passed as an argument or loaded from `),lse=n(J4,"CODE",{});var VYr=s(lse);uBo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),bBo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=n(J4,"CODE",{});var zYr=s(ise);vBo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),TBo=r(J4,":"),J4.forEach(t),FBo=i(Qt),R=n(Qt,"UL",{});var P=s(R);e3=n(P,"LI",{});var Ewe=s(e3);dse=n(Ewe,"STRONG",{});var WYr=s(dse);CBo=r(WYr,"albert"),WYr.forEach(t),MBo=r(Ewe," \u2014 "),fD=n(Ewe,"A",{href:!0});var QYr=s(fD);EBo=r(QYr,"AlbertForQuestionAnswering"),QYr.forEach(t),yBo=r(Ewe," (ALBERT model)"),Ewe.forEach(t),wBo=i(P),o3=n(P,"LI",{});var ywe=s(o3);cse=n(ywe,"STRONG",{});var HYr=s(cse);ABo=r(HYr,"bart"),HYr.forEach(t),LBo=r(ywe," \u2014 "),mD=n(ywe,"A",{href:!0});var UYr=s(mD);BBo=r(UYr,"BartForQuestionAnswering"),UYr.forEach(t),xBo=r(ywe," (BART model)"),ywe.forEach(t),kBo=i(P),r3=n(P,"LI",{});var wwe=s(r3);fse=n(wwe,"STRONG",{});var JYr=s(fse);RBo=r(JYr,"bert"),JYr.forEach(t),SBo=r(wwe," \u2014 "),gD=n(wwe,"A",{href:!0});var YYr=s(gD);PBo=r(YYr,"BertForQuestionAnswering"),YYr.forEach(t),$Bo=r(wwe," (BERT model)"),wwe.forEach(t),IBo=i(P),t3=n(P,"LI",{});var Awe=s(t3);mse=n(Awe,"STRONG",{});var KYr=s(mse);jBo=r(KYr,"big_bird"),KYr.forEach(t),DBo=r(Awe," \u2014 "),hD=n(Awe,"A",{href:!0});var ZYr=s(hD);NBo=r(ZYr,"BigBirdForQuestionAnswering"),ZYr.forEach(t),qBo=r(Awe," (BigBird model)"),Awe.forEach(t),OBo=i(P),a3=n(P,"LI",{});var Lwe=s(a3);gse=n(Lwe,"STRONG",{});var eKr=s(gse);GBo=r(eKr,"bigbird_pegasus"),eKr.forEach(t),XBo=r(Lwe," \u2014 "),pD=n(Lwe,"A",{href:!0});var oKr=s(pD);VBo=r(oKr,"BigBirdPegasusForQuestionAnswering"),oKr.forEach(t),zBo=r(Lwe," (BigBirdPegasus model)"),Lwe.forEach(t),WBo=i(P),n3=n(P,"LI",{});var Bwe=s(n3);hse=n(Bwe,"STRONG",{});var rKr=s(hse);QBo=r(rKr,"camembert"),rKr.forEach(t),HBo=r(Bwe," \u2014 "),_D=n(Bwe,"A",{href:!0});var tKr=s(_D);UBo=r(tKr,"CamembertForQuestionAnswering"),tKr.forEach(t),JBo=r(Bwe," (CamemBERT model)"),Bwe.forEach(t),YBo=i(P),s3=n(P,"LI",{});var xwe=s(s3);pse=n(xwe,"STRONG",{});var aKr=s(pse);KBo=r(aKr,"canine"),aKr.forEach(t),ZBo=r(xwe," \u2014 "),uD=n(xwe,"A",{href:!0});var nKr=s(uD);exo=r(nKr,"CanineForQuestionAnswering"),nKr.forEach(t),oxo=r(xwe," (Canine model)"),xwe.forEach(t),rxo=i(P),l3=n(P,"LI",{});var kwe=s(l3);_se=n(kwe,"STRONG",{});var sKr=s(_se);txo=r(sKr,"convbert"),sKr.forEach(t),axo=r(kwe," \u2014 "),bD=n(kwe,"A",{href:!0});var lKr=s(bD);nxo=r(lKr,"ConvBertForQuestionAnswering"),lKr.forEach(t),sxo=r(kwe," (ConvBERT model)"),kwe.forEach(t),lxo=i(P),i3=n(P,"LI",{});var Rwe=s(i3);use=n(Rwe,"STRONG",{});var iKr=s(use);ixo=r(iKr,"data2vec-text"),iKr.forEach(t),dxo=r(Rwe," \u2014 "),vD=n(Rwe,"A",{href:!0});var dKr=s(vD);cxo=r(dKr,"Data2VecTextForQuestionAnswering"),dKr.forEach(t),fxo=r(Rwe," (Data2VecText model)"),Rwe.forEach(t),mxo=i(P),d3=n(P,"LI",{});var Swe=s(d3);bse=n(Swe,"STRONG",{});var cKr=s(bse);gxo=r(cKr,"deberta"),cKr.forEach(t),hxo=r(Swe," \u2014 "),TD=n(Swe,"A",{href:!0});var fKr=s(TD);pxo=r(fKr,"DebertaForQuestionAnswering"),fKr.forEach(t),_xo=r(Swe," (DeBERTa model)"),Swe.forEach(t),uxo=i(P),c3=n(P,"LI",{});var Pwe=s(c3);vse=n(Pwe,"STRONG",{});var mKr=s(vse);bxo=r(mKr,"deberta-v2"),mKr.forEach(t),vxo=r(Pwe," \u2014 "),FD=n(Pwe,"A",{href:!0});var gKr=s(FD);Txo=r(gKr,"DebertaV2ForQuestionAnswering"),gKr.forEach(t),Fxo=r(Pwe," (DeBERTa-v2 model)"),Pwe.forEach(t),Cxo=i(P),f3=n(P,"LI",{});var $we=s(f3);Tse=n($we,"STRONG",{});var hKr=s(Tse);Mxo=r(hKr,"distilbert"),hKr.forEach(t),Exo=r($we," \u2014 "),CD=n($we,"A",{href:!0});var pKr=s(CD);yxo=r(pKr,"DistilBertForQuestionAnswering"),pKr.forEach(t),wxo=r($we," (DistilBERT model)"),$we.forEach(t),Axo=i(P),m3=n(P,"LI",{});var Iwe=s(m3);Fse=n(Iwe,"STRONG",{});var _Kr=s(Fse);Lxo=r(_Kr,"electra"),_Kr.forEach(t),Bxo=r(Iwe," \u2014 "),MD=n(Iwe,"A",{href:!0});var uKr=s(MD);xxo=r(uKr,"ElectraForQuestionAnswering"),uKr.forEach(t),kxo=r(Iwe," (ELECTRA model)"),Iwe.forEach(t),Rxo=i(P),g3=n(P,"LI",{});var jwe=s(g3);Cse=n(jwe,"STRONG",{});var bKr=s(Cse);Sxo=r(bKr,"flaubert"),bKr.forEach(t),Pxo=r(jwe," \u2014 "),ED=n(jwe,"A",{href:!0});var vKr=s(ED);$xo=r(vKr,"FlaubertForQuestionAnsweringSimple"),vKr.forEach(t),Ixo=r(jwe," (FlauBERT model)"),jwe.forEach(t),jxo=i(P),h3=n(P,"LI",{});var Dwe=s(h3);Mse=n(Dwe,"STRONG",{});var TKr=s(Mse);Dxo=r(TKr,"fnet"),TKr.forEach(t),Nxo=r(Dwe," \u2014 "),yD=n(Dwe,"A",{href:!0});var FKr=s(yD);qxo=r(FKr,"FNetForQuestionAnswering"),FKr.forEach(t),Oxo=r(Dwe," (FNet model)"),Dwe.forEach(t),Gxo=i(P),p3=n(P,"LI",{});var Nwe=s(p3);Ese=n(Nwe,"STRONG",{});var CKr=s(Ese);Xxo=r(CKr,"funnel"),CKr.forEach(t),Vxo=r(Nwe," \u2014 "),wD=n(Nwe,"A",{href:!0});var MKr=s(wD);zxo=r(MKr,"FunnelForQuestionAnswering"),MKr.forEach(t),Wxo=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),Qxo=i(P),_3=n(P,"LI",{});var qwe=s(_3);yse=n(qwe,"STRONG",{});var EKr=s(yse);Hxo=r(EKr,"gptj"),EKr.forEach(t),Uxo=r(qwe," \u2014 "),AD=n(qwe,"A",{href:!0});var yKr=s(AD);Jxo=r(yKr,"GPTJForQuestionAnswering"),yKr.forEach(t),Yxo=r(qwe," (GPT-J model)"),qwe.forEach(t),Kxo=i(P),u3=n(P,"LI",{});var Owe=s(u3);wse=n(Owe,"STRONG",{});var wKr=s(wse);Zxo=r(wKr,"ibert"),wKr.forEach(t),eko=r(Owe," \u2014 "),LD=n(Owe,"A",{href:!0});var AKr=s(LD);oko=r(AKr,"IBertForQuestionAnswering"),AKr.forEach(t),rko=r(Owe," (I-BERT model)"),Owe.forEach(t),tko=i(P),b3=n(P,"LI",{});var Gwe=s(b3);Ase=n(Gwe,"STRONG",{});var LKr=s(Ase);ako=r(LKr,"layoutlmv2"),LKr.forEach(t),nko=r(Gwe," \u2014 "),BD=n(Gwe,"A",{href:!0});var BKr=s(BD);sko=r(BKr,"LayoutLMv2ForQuestionAnswering"),BKr.forEach(t),lko=r(Gwe," (LayoutLMv2 model)"),Gwe.forEach(t),iko=i(P),v3=n(P,"LI",{});var Xwe=s(v3);Lse=n(Xwe,"STRONG",{});var xKr=s(Lse);dko=r(xKr,"led"),xKr.forEach(t),cko=r(Xwe," \u2014 "),xD=n(Xwe,"A",{href:!0});var kKr=s(xD);fko=r(kKr,"LEDForQuestionAnswering"),kKr.forEach(t),mko=r(Xwe," (LED model)"),Xwe.forEach(t),gko=i(P),T3=n(P,"LI",{});var Vwe=s(T3);Bse=n(Vwe,"STRONG",{});var RKr=s(Bse);hko=r(RKr,"longformer"),RKr.forEach(t),pko=r(Vwe," \u2014 "),kD=n(Vwe,"A",{href:!0});var SKr=s(kD);_ko=r(SKr,"LongformerForQuestionAnswering"),SKr.forEach(t),uko=r(Vwe," (Longformer model)"),Vwe.forEach(t),bko=i(P),F3=n(P,"LI",{});var zwe=s(F3);xse=n(zwe,"STRONG",{});var PKr=s(xse);vko=r(PKr,"lxmert"),PKr.forEach(t),Tko=r(zwe," \u2014 "),RD=n(zwe,"A",{href:!0});var $Kr=s(RD);Fko=r($Kr,"LxmertForQuestionAnswering"),$Kr.forEach(t),Cko=r(zwe," (LXMERT model)"),zwe.forEach(t),Mko=i(P),C3=n(P,"LI",{});var Wwe=s(C3);kse=n(Wwe,"STRONG",{});var IKr=s(kse);Eko=r(IKr,"mbart"),IKr.forEach(t),yko=r(Wwe," \u2014 "),SD=n(Wwe,"A",{href:!0});var jKr=s(SD);wko=r(jKr,"MBartForQuestionAnswering"),jKr.forEach(t),Ako=r(Wwe," (mBART model)"),Wwe.forEach(t),Lko=i(P),M3=n(P,"LI",{});var Qwe=s(M3);Rse=n(Qwe,"STRONG",{});var DKr=s(Rse);Bko=r(DKr,"megatron-bert"),DKr.forEach(t),xko=r(Qwe," \u2014 "),PD=n(Qwe,"A",{href:!0});var NKr=s(PD);kko=r(NKr,"MegatronBertForQuestionAnswering"),NKr.forEach(t),Rko=r(Qwe," (MegatronBert model)"),Qwe.forEach(t),Sko=i(P),E3=n(P,"LI",{});var Hwe=s(E3);Sse=n(Hwe,"STRONG",{});var qKr=s(Sse);Pko=r(qKr,"mobilebert"),qKr.forEach(t),$ko=r(Hwe," \u2014 "),$D=n(Hwe,"A",{href:!0});var OKr=s($D);Iko=r(OKr,"MobileBertForQuestionAnswering"),OKr.forEach(t),jko=r(Hwe," (MobileBERT model)"),Hwe.forEach(t),Dko=i(P),y3=n(P,"LI",{});var Uwe=s(y3);Pse=n(Uwe,"STRONG",{});var GKr=s(Pse);Nko=r(GKr,"mpnet"),GKr.forEach(t),qko=r(Uwe," \u2014 "),ID=n(Uwe,"A",{href:!0});var XKr=s(ID);Oko=r(XKr,"MPNetForQuestionAnswering"),XKr.forEach(t),Gko=r(Uwe," (MPNet model)"),Uwe.forEach(t),Xko=i(P),w3=n(P,"LI",{});var Jwe=s(w3);$se=n(Jwe,"STRONG",{});var VKr=s($se);Vko=r(VKr,"nystromformer"),VKr.forEach(t),zko=r(Jwe," \u2014 "),jD=n(Jwe,"A",{href:!0});var zKr=s(jD);Wko=r(zKr,"NystromformerForQuestionAnswering"),zKr.forEach(t),Qko=r(Jwe," (Nystromformer model)"),Jwe.forEach(t),Hko=i(P),A3=n(P,"LI",{});var Ywe=s(A3);Ise=n(Ywe,"STRONG",{});var WKr=s(Ise);Uko=r(WKr,"qdqbert"),WKr.forEach(t),Jko=r(Ywe," \u2014 "),DD=n(Ywe,"A",{href:!0});var QKr=s(DD);Yko=r(QKr,"QDQBertForQuestionAnswering"),QKr.forEach(t),Kko=r(Ywe," (QDQBert model)"),Ywe.forEach(t),Zko=i(P),L3=n(P,"LI",{});var Kwe=s(L3);jse=n(Kwe,"STRONG",{});var HKr=s(jse);eRo=r(HKr,"reformer"),HKr.forEach(t),oRo=r(Kwe," \u2014 "),ND=n(Kwe,"A",{href:!0});var UKr=s(ND);rRo=r(UKr,"ReformerForQuestionAnswering"),UKr.forEach(t),tRo=r(Kwe," (Reformer model)"),Kwe.forEach(t),aRo=i(P),B3=n(P,"LI",{});var Zwe=s(B3);Dse=n(Zwe,"STRONG",{});var JKr=s(Dse);nRo=r(JKr,"rembert"),JKr.forEach(t),sRo=r(Zwe," \u2014 "),qD=n(Zwe,"A",{href:!0});var YKr=s(qD);lRo=r(YKr,"RemBertForQuestionAnswering"),YKr.forEach(t),iRo=r(Zwe," (RemBERT model)"),Zwe.forEach(t),dRo=i(P),x3=n(P,"LI",{});var e6e=s(x3);Nse=n(e6e,"STRONG",{});var KKr=s(Nse);cRo=r(KKr,"roberta"),KKr.forEach(t),fRo=r(e6e," \u2014 "),OD=n(e6e,"A",{href:!0});var ZKr=s(OD);mRo=r(ZKr,"RobertaForQuestionAnswering"),ZKr.forEach(t),gRo=r(e6e," (RoBERTa model)"),e6e.forEach(t),hRo=i(P),k3=n(P,"LI",{});var o6e=s(k3);qse=n(o6e,"STRONG",{});var eZr=s(qse);pRo=r(eZr,"roformer"),eZr.forEach(t),_Ro=r(o6e," \u2014 "),GD=n(o6e,"A",{href:!0});var oZr=s(GD);uRo=r(oZr,"RoFormerForQuestionAnswering"),oZr.forEach(t),bRo=r(o6e," (RoFormer model)"),o6e.forEach(t),vRo=i(P),R3=n(P,"LI",{});var r6e=s(R3);Ose=n(r6e,"STRONG",{});var rZr=s(Ose);TRo=r(rZr,"splinter"),rZr.forEach(t),FRo=r(r6e," \u2014 "),XD=n(r6e,"A",{href:!0});var tZr=s(XD);CRo=r(tZr,"SplinterForQuestionAnswering"),tZr.forEach(t),MRo=r(r6e," (Splinter model)"),r6e.forEach(t),ERo=i(P),S3=n(P,"LI",{});var t6e=s(S3);Gse=n(t6e,"STRONG",{});var aZr=s(Gse);yRo=r(aZr,"squeezebert"),aZr.forEach(t),wRo=r(t6e," \u2014 "),VD=n(t6e,"A",{href:!0});var nZr=s(VD);ARo=r(nZr,"SqueezeBertForQuestionAnswering"),nZr.forEach(t),LRo=r(t6e," (SqueezeBERT model)"),t6e.forEach(t),BRo=i(P),P3=n(P,"LI",{});var a6e=s(P3);Xse=n(a6e,"STRONG",{});var sZr=s(Xse);xRo=r(sZr,"xlm"),sZr.forEach(t),kRo=r(a6e," \u2014 "),zD=n(a6e,"A",{href:!0});var lZr=s(zD);RRo=r(lZr,"XLMForQuestionAnsweringSimple"),lZr.forEach(t),SRo=r(a6e," (XLM model)"),a6e.forEach(t),PRo=i(P),$3=n(P,"LI",{});var n6e=s($3);Vse=n(n6e,"STRONG",{});var iZr=s(Vse);$Ro=r(iZr,"xlm-roberta"),iZr.forEach(t),IRo=r(n6e," \u2014 "),WD=n(n6e,"A",{href:!0});var dZr=s(WD);jRo=r(dZr,"XLMRobertaForQuestionAnswering"),dZr.forEach(t),DRo=r(n6e," (XLM-RoBERTa model)"),n6e.forEach(t),NRo=i(P),I3=n(P,"LI",{});var s6e=s(I3);zse=n(s6e,"STRONG",{});var cZr=s(zse);qRo=r(cZr,"xlm-roberta-xl"),cZr.forEach(t),ORo=r(s6e," \u2014 "),QD=n(s6e,"A",{href:!0});var fZr=s(QD);GRo=r(fZr,"XLMRobertaXLForQuestionAnswering"),fZr.forEach(t),XRo=r(s6e," (XLM-RoBERTa-XL model)"),s6e.forEach(t),VRo=i(P),j3=n(P,"LI",{});var l6e=s(j3);Wse=n(l6e,"STRONG",{});var mZr=s(Wse);zRo=r(mZr,"xlnet"),mZr.forEach(t),WRo=r(l6e," \u2014 "),HD=n(l6e,"A",{href:!0});var gZr=s(HD);QRo=r(gZr,"XLNetForQuestionAnsweringSimple"),gZr.forEach(t),HRo=r(l6e," (XLNet model)"),l6e.forEach(t),URo=i(P),D3=n(P,"LI",{});var i6e=s(D3);Qse=n(i6e,"STRONG",{});var hZr=s(Qse);JRo=r(hZr,"yoso"),hZr.forEach(t),YRo=r(i6e," \u2014 "),UD=n(i6e,"A",{href:!0});var pZr=s(UD);KRo=r(pZr,"YosoForQuestionAnswering"),pZr.forEach(t),ZRo=r(i6e," (YOSO model)"),i6e.forEach(t),P.forEach(t),eSo=i(Qt),N3=n(Qt,"P",{});var d6e=s(N3);oSo=r(d6e,"The model is set in evaluation mode by default using "),Hse=n(d6e,"CODE",{});var _Zr=s(Hse);rSo=r(_Zr,"model.eval()"),_Zr.forEach(t),tSo=r(d6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(d6e,"CODE",{});var uZr=s(Use);aSo=r(uZr,"model.train()"),uZr.forEach(t),d6e.forEach(t),nSo=i(Qt),Jse=n(Qt,"P",{});var bZr=s(Jse);sSo=r(bZr,"Examples:"),bZr.forEach(t),lSo=i(Qt),m(Sy.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),txe=i(d),wd=n(d,"H2",{class:!0});var mRe=s(wd);q3=n(mRe,"A",{id:!0,class:!0,href:!0});var vZr=s(q3);Yse=n(vZr,"SPAN",{});var TZr=s(Yse);m(Py.$$.fragment,TZr),TZr.forEach(t),vZr.forEach(t),iSo=i(mRe),Kse=n(mRe,"SPAN",{});var FZr=s(Kse);dSo=r(FZr,"AutoModelForTableQuestionAnswering"),FZr.forEach(t),mRe.forEach(t),axe=i(d),ar=n(d,"DIV",{class:!0});var gl=s(ar);m($y.$$.fragment,gl),cSo=i(gl),Ad=n(gl,"P",{});var Az=s(Ad);fSo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zse=n(Az,"CODE",{});var CZr=s(Zse);mSo=r(CZr,"from_pretrained()"),CZr.forEach(t),gSo=r(Az,"class method or the "),ele=n(Az,"CODE",{});var MZr=s(ele);hSo=r(MZr,"from_config()"),MZr.forEach(t),pSo=r(Az,`class
method.`),Az.forEach(t),_So=i(gl),Iy=n(gl,"P",{});var gRe=s(Iy);uSo=r(gRe,"This class cannot be instantiated directly using "),ole=n(gRe,"CODE",{});var EZr=s(ole);bSo=r(EZr,"__init__()"),EZr.forEach(t),vSo=r(gRe," (throws an error)."),gRe.forEach(t),TSo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(jy.$$.fragment,hl),FSo=i(hl),rle=n(hl,"P",{});var yZr=s(rle);CSo=r(yZr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yZr.forEach(t),MSo=i(hl),Ld=n(hl,"P",{});var Lz=s(Ld);ESo=r(Lz,`Note:
Loading a model from its configuration file does `),tle=n(Lz,"STRONG",{});var wZr=s(tle);ySo=r(wZr,"not"),wZr.forEach(t),wSo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(Lz,"CODE",{});var AZr=s(ale);ASo=r(AZr,"from_pretrained()"),AZr.forEach(t),LSo=r(Lz,"to load the model weights."),Lz.forEach(t),BSo=i(hl),nle=n(hl,"P",{});var LZr=s(nle);xSo=r(LZr,"Examples:"),LZr.forEach(t),kSo=i(hl),m(Dy.$$.fragment,hl),hl.forEach(t),RSo=i(gl),Ge=n(gl,"DIV",{class:!0});var Ht=s(Ge);m(Ny.$$.fragment,Ht),SSo=i(Ht),sle=n(Ht,"P",{});var BZr=s(sle);PSo=r(BZr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BZr.forEach(t),$So=i(Ht),Za=n(Ht,"P",{});var Y4=s(Za);ISo=r(Y4,"The model class to instantiate is selected based on the "),lle=n(Y4,"CODE",{});var xZr=s(lle);jSo=r(xZr,"model_type"),xZr.forEach(t),DSo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),ile=n(Y4,"CODE",{});var kZr=s(ile);NSo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),qSo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(Y4,"CODE",{});var RZr=s(dle);OSo=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),GSo=r(Y4,":"),Y4.forEach(t),XSo=i(Ht),cle=n(Ht,"UL",{});var SZr=s(cle);O3=n(SZr,"LI",{});var c6e=s(O3);fle=n(c6e,"STRONG",{});var PZr=s(fle);VSo=r(PZr,"tapas"),PZr.forEach(t),zSo=r(c6e," \u2014 "),JD=n(c6e,"A",{href:!0});var $Zr=s(JD);WSo=r($Zr,"TapasForQuestionAnswering"),$Zr.forEach(t),QSo=r(c6e," (TAPAS model)"),c6e.forEach(t),SZr.forEach(t),HSo=i(Ht),G3=n(Ht,"P",{});var f6e=s(G3);USo=r(f6e,"The model is set in evaluation mode by default using "),mle=n(f6e,"CODE",{});var IZr=s(mle);JSo=r(IZr,"model.eval()"),IZr.forEach(t),YSo=r(f6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=n(f6e,"CODE",{});var jZr=s(gle);KSo=r(jZr,"model.train()"),jZr.forEach(t),f6e.forEach(t),ZSo=i(Ht),hle=n(Ht,"P",{});var DZr=s(hle);ePo=r(DZr,"Examples:"),DZr.forEach(t),oPo=i(Ht),m(qy.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),nxe=i(d),Bd=n(d,"H2",{class:!0});var hRe=s(Bd);X3=n(hRe,"A",{id:!0,class:!0,href:!0});var NZr=s(X3);ple=n(NZr,"SPAN",{});var qZr=s(ple);m(Oy.$$.fragment,qZr),qZr.forEach(t),NZr.forEach(t),rPo=i(hRe),_le=n(hRe,"SPAN",{});var OZr=s(_le);tPo=r(OZr,"AutoModelForImageClassification"),OZr.forEach(t),hRe.forEach(t),sxe=i(d),nr=n(d,"DIV",{class:!0});var pl=s(nr);m(Gy.$$.fragment,pl),aPo=i(pl),xd=n(pl,"P",{});var Bz=s(xd);nPo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ule=n(Bz,"CODE",{});var GZr=s(ule);sPo=r(GZr,"from_pretrained()"),GZr.forEach(t),lPo=r(Bz,"class method or the "),ble=n(Bz,"CODE",{});var XZr=s(ble);iPo=r(XZr,"from_config()"),XZr.forEach(t),dPo=r(Bz,`class
method.`),Bz.forEach(t),cPo=i(pl),Xy=n(pl,"P",{});var pRe=s(Xy);fPo=r(pRe,"This class cannot be instantiated directly using "),vle=n(pRe,"CODE",{});var VZr=s(vle);mPo=r(VZr,"__init__()"),VZr.forEach(t),gPo=r(pRe," (throws an error)."),pRe.forEach(t),hPo=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(Vy.$$.fragment,_l),pPo=i(_l),Tle=n(_l,"P",{});var zZr=s(Tle);_Po=r(zZr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zZr.forEach(t),uPo=i(_l),kd=n(_l,"P",{});var xz=s(kd);bPo=r(xz,`Note:
Loading a model from its configuration file does `),Fle=n(xz,"STRONG",{});var WZr=s(Fle);vPo=r(WZr,"not"),WZr.forEach(t),TPo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=n(xz,"CODE",{});var QZr=s(Cle);FPo=r(QZr,"from_pretrained()"),QZr.forEach(t),CPo=r(xz,"to load the model weights."),xz.forEach(t),MPo=i(_l),Mle=n(_l,"P",{});var HZr=s(Mle);EPo=r(HZr,"Examples:"),HZr.forEach(t),yPo=i(_l),m(zy.$$.fragment,_l),_l.forEach(t),wPo=i(pl),Xe=n(pl,"DIV",{class:!0});var Ut=s(Xe);m(Wy.$$.fragment,Ut),APo=i(Ut),Ele=n(Ut,"P",{});var UZr=s(Ele);LPo=r(UZr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UZr.forEach(t),BPo=i(Ut),en=n(Ut,"P",{});var K4=s(en);xPo=r(K4,"The model class to instantiate is selected based on the "),yle=n(K4,"CODE",{});var JZr=s(yle);kPo=r(JZr,"model_type"),JZr.forEach(t),RPo=r(K4,` property of the config object (either
passed as an argument or loaded from `),wle=n(K4,"CODE",{});var YZr=s(wle);SPo=r(YZr,"pretrained_model_name_or_path"),YZr.forEach(t),PPo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=n(K4,"CODE",{});var KZr=s(Ale);$Po=r(KZr,"pretrained_model_name_or_path"),KZr.forEach(t),IPo=r(K4,":"),K4.forEach(t),jPo=i(Ut),be=n(Ut,"UL",{});var oo=s(be);V3=n(oo,"LI",{});var m6e=s(V3);Lle=n(m6e,"STRONG",{});var ZZr=s(Lle);DPo=r(ZZr,"beit"),ZZr.forEach(t),NPo=r(m6e," \u2014 "),YD=n(m6e,"A",{href:!0});var eet=s(YD);qPo=r(eet,"BeitForImageClassification"),eet.forEach(t),OPo=r(m6e," (BEiT model)"),m6e.forEach(t),GPo=i(oo),z3=n(oo,"LI",{});var g6e=s(z3);Ble=n(g6e,"STRONG",{});var oet=s(Ble);XPo=r(oet,"convnext"),oet.forEach(t),VPo=r(g6e," \u2014 "),KD=n(g6e,"A",{href:!0});var ret=s(KD);zPo=r(ret,"ConvNextForImageClassification"),ret.forEach(t),WPo=r(g6e," (ConvNext model)"),g6e.forEach(t),QPo=i(oo),qs=n(oo,"LI",{});var B8=s(qs);xle=n(B8,"STRONG",{});var tet=s(xle);HPo=r(tet,"deit"),tet.forEach(t),UPo=r(B8," \u2014 "),ZD=n(B8,"A",{href:!0});var aet=s(ZD);JPo=r(aet,"DeiTForImageClassification"),aet.forEach(t),YPo=r(B8," or "),eN=n(B8,"A",{href:!0});var net=s(eN);KPo=r(net,"DeiTForImageClassificationWithTeacher"),net.forEach(t),ZPo=r(B8," (DeiT model)"),B8.forEach(t),e$o=i(oo),W3=n(oo,"LI",{});var h6e=s(W3);kle=n(h6e,"STRONG",{});var set=s(kle);o$o=r(set,"imagegpt"),set.forEach(t),r$o=r(h6e," \u2014 "),oN=n(h6e,"A",{href:!0});var iet=s(oN);t$o=r(iet,"ImageGPTForImageClassification"),iet.forEach(t),a$o=r(h6e," (ImageGPT model)"),h6e.forEach(t),n$o=i(oo),fa=n(oo,"LI",{});var Pf=s(fa);Rle=n(Pf,"STRONG",{});var det=s(Rle);s$o=r(det,"perceiver"),det.forEach(t),l$o=r(Pf," \u2014 "),rN=n(Pf,"A",{href:!0});var cet=s(rN);i$o=r(cet,"PerceiverForImageClassificationLearned"),cet.forEach(t),d$o=r(Pf," or "),tN=n(Pf,"A",{href:!0});var fet=s(tN);c$o=r(fet,"PerceiverForImageClassificationFourier"),fet.forEach(t),f$o=r(Pf," or "),aN=n(Pf,"A",{href:!0});var met=s(aN);m$o=r(met,"PerceiverForImageClassificationConvProcessing"),met.forEach(t),g$o=r(Pf," (Perceiver model)"),Pf.forEach(t),h$o=i(oo),Q3=n(oo,"LI",{});var p6e=s(Q3);Sle=n(p6e,"STRONG",{});var get=s(Sle);p$o=r(get,"poolformer"),get.forEach(t),_$o=r(p6e," \u2014 "),nN=n(p6e,"A",{href:!0});var het=s(nN);u$o=r(het,"PoolFormerForImageClassification"),het.forEach(t),b$o=r(p6e," (PoolFormer model)"),p6e.forEach(t),v$o=i(oo),H3=n(oo,"LI",{});var _6e=s(H3);Ple=n(_6e,"STRONG",{});var pet=s(Ple);T$o=r(pet,"segformer"),pet.forEach(t),F$o=r(_6e," \u2014 "),sN=n(_6e,"A",{href:!0});var _et=s(sN);C$o=r(_et,"SegformerForImageClassification"),_et.forEach(t),M$o=r(_6e," (SegFormer model)"),_6e.forEach(t),E$o=i(oo),U3=n(oo,"LI",{});var u6e=s(U3);$le=n(u6e,"STRONG",{});var uet=s($le);y$o=r(uet,"swin"),uet.forEach(t),w$o=r(u6e," \u2014 "),lN=n(u6e,"A",{href:!0});var bet=s(lN);A$o=r(bet,"SwinForImageClassification"),bet.forEach(t),L$o=r(u6e," (Swin model)"),u6e.forEach(t),B$o=i(oo),J3=n(oo,"LI",{});var b6e=s(J3);Ile=n(b6e,"STRONG",{});var vet=s(Ile);x$o=r(vet,"vit"),vet.forEach(t),k$o=r(b6e," \u2014 "),iN=n(b6e,"A",{href:!0});var Tet=s(iN);R$o=r(Tet,"ViTForImageClassification"),Tet.forEach(t),S$o=r(b6e," (ViT model)"),b6e.forEach(t),oo.forEach(t),P$o=i(Ut),Y3=n(Ut,"P",{});var v6e=s(Y3);$$o=r(v6e,"The model is set in evaluation mode by default using "),jle=n(v6e,"CODE",{});var Fet=s(jle);I$o=r(Fet,"model.eval()"),Fet.forEach(t),j$o=r(v6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dle=n(v6e,"CODE",{});var Cet=s(Dle);D$o=r(Cet,"model.train()"),Cet.forEach(t),v6e.forEach(t),N$o=i(Ut),Nle=n(Ut,"P",{});var Met=s(Nle);q$o=r(Met,"Examples:"),Met.forEach(t),O$o=i(Ut),m(Qy.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),lxe=i(d),Rd=n(d,"H2",{class:!0});var _Re=s(Rd);K3=n(_Re,"A",{id:!0,class:!0,href:!0});var Eet=s(K3);qle=n(Eet,"SPAN",{});var yet=s(qle);m(Hy.$$.fragment,yet),yet.forEach(t),Eet.forEach(t),G$o=i(_Re),Ole=n(_Re,"SPAN",{});var wet=s(Ole);X$o=r(wet,"AutoModelForVision2Seq"),wet.forEach(t),_Re.forEach(t),ixe=i(d),sr=n(d,"DIV",{class:!0});var ul=s(sr);m(Uy.$$.fragment,ul),V$o=i(ul),Sd=n(ul,"P",{});var kz=s(Sd);z$o=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gle=n(kz,"CODE",{});var Aet=s(Gle);W$o=r(Aet,"from_pretrained()"),Aet.forEach(t),Q$o=r(kz,"class method or the "),Xle=n(kz,"CODE",{});var Let=s(Xle);H$o=r(Let,"from_config()"),Let.forEach(t),U$o=r(kz,`class
method.`),kz.forEach(t),J$o=i(ul),Jy=n(ul,"P",{});var uRe=s(Jy);Y$o=r(uRe,"This class cannot be instantiated directly using "),Vle=n(uRe,"CODE",{});var Bet=s(Vle);K$o=r(Bet,"__init__()"),Bet.forEach(t),Z$o=r(uRe," (throws an error)."),uRe.forEach(t),eIo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(Yy.$$.fragment,bl),oIo=i(bl),zle=n(bl,"P",{});var xet=s(zle);rIo=r(xet,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xet.forEach(t),tIo=i(bl),Pd=n(bl,"P",{});var Rz=s(Pd);aIo=r(Rz,`Note:
Loading a model from its configuration file does `),Wle=n(Rz,"STRONG",{});var ket=s(Wle);nIo=r(ket,"not"),ket.forEach(t),sIo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qle=n(Rz,"CODE",{});var Ret=s(Qle);lIo=r(Ret,"from_pretrained()"),Ret.forEach(t),iIo=r(Rz,"to load the model weights."),Rz.forEach(t),dIo=i(bl),Hle=n(bl,"P",{});var Set=s(Hle);cIo=r(Set,"Examples:"),Set.forEach(t),fIo=i(bl),m(Ky.$$.fragment,bl),bl.forEach(t),mIo=i(ul),Ve=n(ul,"DIV",{class:!0});var Jt=s(Ve);m(Zy.$$.fragment,Jt),gIo=i(Jt),Ule=n(Jt,"P",{});var Pet=s(Ule);hIo=r(Pet,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pet.forEach(t),pIo=i(Jt),on=n(Jt,"P",{});var Z4=s(on);_Io=r(Z4,"The model class to instantiate is selected based on the "),Jle=n(Z4,"CODE",{});var $et=s(Jle);uIo=r($et,"model_type"),$et.forEach(t),bIo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Yle=n(Z4,"CODE",{});var Iet=s(Yle);vIo=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),TIo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=n(Z4,"CODE",{});var jet=s(Kle);FIo=r(jet,"pretrained_model_name_or_path"),jet.forEach(t),CIo=r(Z4,":"),Z4.forEach(t),MIo=i(Jt),Zle=n(Jt,"UL",{});var Det=s(Zle);Z3=n(Det,"LI",{});var T6e=s(Z3);eie=n(T6e,"STRONG",{});var Net=s(eie);EIo=r(Net,"vision-encoder-decoder"),Net.forEach(t),yIo=r(T6e," \u2014 "),dN=n(T6e,"A",{href:!0});var qet=s(dN);wIo=r(qet,"VisionEncoderDecoderModel"),qet.forEach(t),AIo=r(T6e," (Vision Encoder decoder model)"),T6e.forEach(t),Det.forEach(t),LIo=i(Jt),e5=n(Jt,"P",{});var F6e=s(e5);BIo=r(F6e,"The model is set in evaluation mode by default using "),oie=n(F6e,"CODE",{});var Oet=s(oie);xIo=r(Oet,"model.eval()"),Oet.forEach(t),kIo=r(F6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(F6e,"CODE",{});var Get=s(rie);RIo=r(Get,"model.train()"),Get.forEach(t),F6e.forEach(t),SIo=i(Jt),tie=n(Jt,"P",{});var Xet=s(tie);PIo=r(Xet,"Examples:"),Xet.forEach(t),$Io=i(Jt),m(ew.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),dxe=i(d),$d=n(d,"H2",{class:!0});var bRe=s($d);o5=n(bRe,"A",{id:!0,class:!0,href:!0});var Vet=s(o5);aie=n(Vet,"SPAN",{});var zet=s(aie);m(ow.$$.fragment,zet),zet.forEach(t),Vet.forEach(t),IIo=i(bRe),nie=n(bRe,"SPAN",{});var Wet=s(nie);jIo=r(Wet,"AutoModelForAudioClassification"),Wet.forEach(t),bRe.forEach(t),cxe=i(d),lr=n(d,"DIV",{class:!0});var vl=s(lr);m(rw.$$.fragment,vl),DIo=i(vl),Id=n(vl,"P",{});var Sz=s(Id);NIo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sie=n(Sz,"CODE",{});var Qet=s(sie);qIo=r(Qet,"from_pretrained()"),Qet.forEach(t),OIo=r(Sz,"class method or the "),lie=n(Sz,"CODE",{});var Het=s(lie);GIo=r(Het,"from_config()"),Het.forEach(t),XIo=r(Sz,`class
method.`),Sz.forEach(t),VIo=i(vl),tw=n(vl,"P",{});var vRe=s(tw);zIo=r(vRe,"This class cannot be instantiated directly using "),iie=n(vRe,"CODE",{});var Uet=s(iie);WIo=r(Uet,"__init__()"),Uet.forEach(t),QIo=r(vRe," (throws an error)."),vRe.forEach(t),HIo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(aw.$$.fragment,Tl),UIo=i(Tl),die=n(Tl,"P",{});var Jet=s(die);JIo=r(Jet,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jet.forEach(t),YIo=i(Tl),jd=n(Tl,"P",{});var Pz=s(jd);KIo=r(Pz,`Note:
Loading a model from its configuration file does `),cie=n(Pz,"STRONG",{});var Yet=s(cie);ZIo=r(Yet,"not"),Yet.forEach(t),ejo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(Pz,"CODE",{});var Ket=s(fie);ojo=r(Ket,"from_pretrained()"),Ket.forEach(t),rjo=r(Pz,"to load the model weights."),Pz.forEach(t),tjo=i(Tl),mie=n(Tl,"P",{});var Zet=s(mie);ajo=r(Zet,"Examples:"),Zet.forEach(t),njo=i(Tl),m(nw.$$.fragment,Tl),Tl.forEach(t),sjo=i(vl),ze=n(vl,"DIV",{class:!0});var Yt=s(ze);m(sw.$$.fragment,Yt),ljo=i(Yt),gie=n(Yt,"P",{});var eot=s(gie);ijo=r(eot,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),eot.forEach(t),djo=i(Yt),rn=n(Yt,"P",{});var eM=s(rn);cjo=r(eM,"The model class to instantiate is selected based on the "),hie=n(eM,"CODE",{});var oot=s(hie);fjo=r(oot,"model_type"),oot.forEach(t),mjo=r(eM,` property of the config object (either
passed as an argument or loaded from `),pie=n(eM,"CODE",{});var rot=s(pie);gjo=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),hjo=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n(eM,"CODE",{});var tot=s(_ie);pjo=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),_jo=r(eM,":"),eM.forEach(t),ujo=i(Yt),Ae=n(Yt,"UL",{});var qo=s(Ae);r5=n(qo,"LI",{});var C6e=s(r5);uie=n(C6e,"STRONG",{});var aot=s(uie);bjo=r(aot,"data2vec-audio"),aot.forEach(t),vjo=r(C6e," \u2014 "),cN=n(C6e,"A",{href:!0});var not=s(cN);Tjo=r(not,"Data2VecAudioForSequenceClassification"),not.forEach(t),Fjo=r(C6e," (Data2VecAudio model)"),C6e.forEach(t),Cjo=i(qo),t5=n(qo,"LI",{});var M6e=s(t5);bie=n(M6e,"STRONG",{});var sot=s(bie);Mjo=r(sot,"hubert"),sot.forEach(t),Ejo=r(M6e," \u2014 "),fN=n(M6e,"A",{href:!0});var lot=s(fN);yjo=r(lot,"HubertForSequenceClassification"),lot.forEach(t),wjo=r(M6e," (Hubert model)"),M6e.forEach(t),Ajo=i(qo),a5=n(qo,"LI",{});var E6e=s(a5);vie=n(E6e,"STRONG",{});var iot=s(vie);Ljo=r(iot,"sew"),iot.forEach(t),Bjo=r(E6e," \u2014 "),mN=n(E6e,"A",{href:!0});var dot=s(mN);xjo=r(dot,"SEWForSequenceClassification"),dot.forEach(t),kjo=r(E6e," (SEW model)"),E6e.forEach(t),Rjo=i(qo),n5=n(qo,"LI",{});var y6e=s(n5);Tie=n(y6e,"STRONG",{});var cot=s(Tie);Sjo=r(cot,"sew-d"),cot.forEach(t),Pjo=r(y6e," \u2014 "),gN=n(y6e,"A",{href:!0});var fot=s(gN);$jo=r(fot,"SEWDForSequenceClassification"),fot.forEach(t),Ijo=r(y6e," (SEW-D model)"),y6e.forEach(t),jjo=i(qo),s5=n(qo,"LI",{});var w6e=s(s5);Fie=n(w6e,"STRONG",{});var mot=s(Fie);Djo=r(mot,"unispeech"),mot.forEach(t),Njo=r(w6e," \u2014 "),hN=n(w6e,"A",{href:!0});var got=s(hN);qjo=r(got,"UniSpeechForSequenceClassification"),got.forEach(t),Ojo=r(w6e," (UniSpeech model)"),w6e.forEach(t),Gjo=i(qo),l5=n(qo,"LI",{});var A6e=s(l5);Cie=n(A6e,"STRONG",{});var hot=s(Cie);Xjo=r(hot,"unispeech-sat"),hot.forEach(t),Vjo=r(A6e," \u2014 "),pN=n(A6e,"A",{href:!0});var pot=s(pN);zjo=r(pot,"UniSpeechSatForSequenceClassification"),pot.forEach(t),Wjo=r(A6e," (UniSpeechSat model)"),A6e.forEach(t),Qjo=i(qo),i5=n(qo,"LI",{});var L6e=s(i5);Mie=n(L6e,"STRONG",{});var _ot=s(Mie);Hjo=r(_ot,"wav2vec2"),_ot.forEach(t),Ujo=r(L6e," \u2014 "),_N=n(L6e,"A",{href:!0});var uot=s(_N);Jjo=r(uot,"Wav2Vec2ForSequenceClassification"),uot.forEach(t),Yjo=r(L6e," (Wav2Vec2 model)"),L6e.forEach(t),Kjo=i(qo),d5=n(qo,"LI",{});var B6e=s(d5);Eie=n(B6e,"STRONG",{});var bot=s(Eie);Zjo=r(bot,"wavlm"),bot.forEach(t),eDo=r(B6e," \u2014 "),uN=n(B6e,"A",{href:!0});var vot=s(uN);oDo=r(vot,"WavLMForSequenceClassification"),vot.forEach(t),rDo=r(B6e," (WavLM model)"),B6e.forEach(t),qo.forEach(t),tDo=i(Yt),c5=n(Yt,"P",{});var x6e=s(c5);aDo=r(x6e,"The model is set in evaluation mode by default using "),yie=n(x6e,"CODE",{});var Tot=s(yie);nDo=r(Tot,"model.eval()"),Tot.forEach(t),sDo=r(x6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(x6e,"CODE",{});var Fot=s(wie);lDo=r(Fot,"model.train()"),Fot.forEach(t),x6e.forEach(t),iDo=i(Yt),Aie=n(Yt,"P",{});var Cot=s(Aie);dDo=r(Cot,"Examples:"),Cot.forEach(t),cDo=i(Yt),m(lw.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),fxe=i(d),Dd=n(d,"H2",{class:!0});var TRe=s(Dd);f5=n(TRe,"A",{id:!0,class:!0,href:!0});var Mot=s(f5);Lie=n(Mot,"SPAN",{});var Eot=s(Lie);m(iw.$$.fragment,Eot),Eot.forEach(t),Mot.forEach(t),fDo=i(TRe),Bie=n(TRe,"SPAN",{});var yot=s(Bie);mDo=r(yot,"AutoModelForAudioFrameClassification"),yot.forEach(t),TRe.forEach(t),mxe=i(d),ir=n(d,"DIV",{class:!0});var Fl=s(ir);m(dw.$$.fragment,Fl),gDo=i(Fl),Nd=n(Fl,"P",{});var $z=s(Nd);hDo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xie=n($z,"CODE",{});var wot=s(xie);pDo=r(wot,"from_pretrained()"),wot.forEach(t),_Do=r($z,"class method or the "),kie=n($z,"CODE",{});var Aot=s(kie);uDo=r(Aot,"from_config()"),Aot.forEach(t),bDo=r($z,`class
method.`),$z.forEach(t),vDo=i(Fl),cw=n(Fl,"P",{});var FRe=s(cw);TDo=r(FRe,"This class cannot be instantiated directly using "),Rie=n(FRe,"CODE",{});var Lot=s(Rie);FDo=r(Lot,"__init__()"),Lot.forEach(t),CDo=r(FRe," (throws an error)."),FRe.forEach(t),MDo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(fw.$$.fragment,Cl),EDo=i(Cl),Sie=n(Cl,"P",{});var Bot=s(Sie);yDo=r(Bot,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Bot.forEach(t),wDo=i(Cl),qd=n(Cl,"P",{});var Iz=s(qd);ADo=r(Iz,`Note:
Loading a model from its configuration file does `),Pie=n(Iz,"STRONG",{});var xot=s(Pie);LDo=r(xot,"not"),xot.forEach(t),BDo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(Iz,"CODE",{});var kot=s($ie);xDo=r(kot,"from_pretrained()"),kot.forEach(t),kDo=r(Iz,"to load the model weights."),Iz.forEach(t),RDo=i(Cl),Iie=n(Cl,"P",{});var Rot=s(Iie);SDo=r(Rot,"Examples:"),Rot.forEach(t),PDo=i(Cl),m(mw.$$.fragment,Cl),Cl.forEach(t),$Do=i(Fl),We=n(Fl,"DIV",{class:!0});var Kt=s(We);m(gw.$$.fragment,Kt),IDo=i(Kt),jie=n(Kt,"P",{});var Sot=s(jie);jDo=r(Sot,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sot.forEach(t),DDo=i(Kt),tn=n(Kt,"P",{});var oM=s(tn);NDo=r(oM,"The model class to instantiate is selected based on the "),Die=n(oM,"CODE",{});var Pot=s(Die);qDo=r(Pot,"model_type"),Pot.forEach(t),ODo=r(oM,` property of the config object (either
passed as an argument or loaded from `),Nie=n(oM,"CODE",{});var $ot=s(Nie);GDo=r($ot,"pretrained_model_name_or_path"),$ot.forEach(t),XDo=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(oM,"CODE",{});var Iot=s(qie);VDo=r(Iot,"pretrained_model_name_or_path"),Iot.forEach(t),zDo=r(oM,":"),oM.forEach(t),WDo=i(Kt),an=n(Kt,"UL",{});var rM=s(an);m5=n(rM,"LI",{});var k6e=s(m5);Oie=n(k6e,"STRONG",{});var jot=s(Oie);QDo=r(jot,"data2vec-audio"),jot.forEach(t),HDo=r(k6e," \u2014 "),bN=n(k6e,"A",{href:!0});var Dot=s(bN);UDo=r(Dot,"Data2VecAudioForAudioFrameClassification"),Dot.forEach(t),JDo=r(k6e," (Data2VecAudio model)"),k6e.forEach(t),YDo=i(rM),g5=n(rM,"LI",{});var R6e=s(g5);Gie=n(R6e,"STRONG",{});var Not=s(Gie);KDo=r(Not,"unispeech-sat"),Not.forEach(t),ZDo=r(R6e," \u2014 "),vN=n(R6e,"A",{href:!0});var qot=s(vN);eNo=r(qot,"UniSpeechSatForAudioFrameClassification"),qot.forEach(t),oNo=r(R6e," (UniSpeechSat model)"),R6e.forEach(t),rNo=i(rM),h5=n(rM,"LI",{});var S6e=s(h5);Xie=n(S6e,"STRONG",{});var Oot=s(Xie);tNo=r(Oot,"wav2vec2"),Oot.forEach(t),aNo=r(S6e," \u2014 "),TN=n(S6e,"A",{href:!0});var Got=s(TN);nNo=r(Got,"Wav2Vec2ForAudioFrameClassification"),Got.forEach(t),sNo=r(S6e," (Wav2Vec2 model)"),S6e.forEach(t),lNo=i(rM),p5=n(rM,"LI",{});var P6e=s(p5);Vie=n(P6e,"STRONG",{});var Xot=s(Vie);iNo=r(Xot,"wavlm"),Xot.forEach(t),dNo=r(P6e," \u2014 "),FN=n(P6e,"A",{href:!0});var Vot=s(FN);cNo=r(Vot,"WavLMForAudioFrameClassification"),Vot.forEach(t),fNo=r(P6e," (WavLM model)"),P6e.forEach(t),rM.forEach(t),mNo=i(Kt),_5=n(Kt,"P",{});var $6e=s(_5);gNo=r($6e,"The model is set in evaluation mode by default using "),zie=n($6e,"CODE",{});var zot=s(zie);hNo=r(zot,"model.eval()"),zot.forEach(t),pNo=r($6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n($6e,"CODE",{});var Wot=s(Wie);_No=r(Wot,"model.train()"),Wot.forEach(t),$6e.forEach(t),uNo=i(Kt),Qie=n(Kt,"P",{});var Qot=s(Qie);bNo=r(Qot,"Examples:"),Qot.forEach(t),vNo=i(Kt),m(hw.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),gxe=i(d),Od=n(d,"H2",{class:!0});var CRe=s(Od);u5=n(CRe,"A",{id:!0,class:!0,href:!0});var Hot=s(u5);Hie=n(Hot,"SPAN",{});var Uot=s(Hie);m(pw.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),TNo=i(CRe),Uie=n(CRe,"SPAN",{});var Jot=s(Uie);FNo=r(Jot,"AutoModelForCTC"),Jot.forEach(t),CRe.forEach(t),hxe=i(d),dr=n(d,"DIV",{class:!0});var Ml=s(dr);m(_w.$$.fragment,Ml),CNo=i(Ml),Gd=n(Ml,"P",{});var jz=s(Gd);MNo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jie=n(jz,"CODE",{});var Yot=s(Jie);ENo=r(Yot,"from_pretrained()"),Yot.forEach(t),yNo=r(jz,"class method or the "),Yie=n(jz,"CODE",{});var Kot=s(Yie);wNo=r(Kot,"from_config()"),Kot.forEach(t),ANo=r(jz,`class
method.`),jz.forEach(t),LNo=i(Ml),uw=n(Ml,"P",{});var MRe=s(uw);BNo=r(MRe,"This class cannot be instantiated directly using "),Kie=n(MRe,"CODE",{});var Zot=s(Kie);xNo=r(Zot,"__init__()"),Zot.forEach(t),kNo=r(MRe," (throws an error)."),MRe.forEach(t),RNo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(bw.$$.fragment,El),SNo=i(El),Zie=n(El,"P",{});var ert=s(Zie);PNo=r(ert,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ert.forEach(t),$No=i(El),Xd=n(El,"P",{});var Dz=s(Xd);INo=r(Dz,`Note:
Loading a model from its configuration file does `),ede=n(Dz,"STRONG",{});var ort=s(ede);jNo=r(ort,"not"),ort.forEach(t),DNo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(Dz,"CODE",{});var rrt=s(ode);NNo=r(rrt,"from_pretrained()"),rrt.forEach(t),qNo=r(Dz,"to load the model weights."),Dz.forEach(t),ONo=i(El),rde=n(El,"P",{});var trt=s(rde);GNo=r(trt,"Examples:"),trt.forEach(t),XNo=i(El),m(vw.$$.fragment,El),El.forEach(t),VNo=i(Ml),Qe=n(Ml,"DIV",{class:!0});var Zt=s(Qe);m(Tw.$$.fragment,Zt),zNo=i(Zt),tde=n(Zt,"P",{});var art=s(tde);WNo=r(art,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),art.forEach(t),QNo=i(Zt),nn=n(Zt,"P",{});var tM=s(nn);HNo=r(tM,"The model class to instantiate is selected based on the "),ade=n(tM,"CODE",{});var nrt=s(ade);UNo=r(nrt,"model_type"),nrt.forEach(t),JNo=r(tM,` property of the config object (either
passed as an argument or loaded from `),nde=n(tM,"CODE",{});var srt=s(nde);YNo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),KNo=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(tM,"CODE",{});var lrt=s(sde);ZNo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),eqo=r(tM,":"),tM.forEach(t),oqo=i(Zt),Le=n(Zt,"UL",{});var Oo=s(Le);b5=n(Oo,"LI",{});var I6e=s(b5);lde=n(I6e,"STRONG",{});var irt=s(lde);rqo=r(irt,"data2vec-audio"),irt.forEach(t),tqo=r(I6e," \u2014 "),CN=n(I6e,"A",{href:!0});var drt=s(CN);aqo=r(drt,"Data2VecAudioForCTC"),drt.forEach(t),nqo=r(I6e," (Data2VecAudio model)"),I6e.forEach(t),sqo=i(Oo),v5=n(Oo,"LI",{});var j6e=s(v5);ide=n(j6e,"STRONG",{});var crt=s(ide);lqo=r(crt,"hubert"),crt.forEach(t),iqo=r(j6e," \u2014 "),MN=n(j6e,"A",{href:!0});var frt=s(MN);dqo=r(frt,"HubertForCTC"),frt.forEach(t),cqo=r(j6e," (Hubert model)"),j6e.forEach(t),fqo=i(Oo),T5=n(Oo,"LI",{});var D6e=s(T5);dde=n(D6e,"STRONG",{});var mrt=s(dde);mqo=r(mrt,"sew"),mrt.forEach(t),gqo=r(D6e," \u2014 "),EN=n(D6e,"A",{href:!0});var grt=s(EN);hqo=r(grt,"SEWForCTC"),grt.forEach(t),pqo=r(D6e," (SEW model)"),D6e.forEach(t),_qo=i(Oo),F5=n(Oo,"LI",{});var N6e=s(F5);cde=n(N6e,"STRONG",{});var hrt=s(cde);uqo=r(hrt,"sew-d"),hrt.forEach(t),bqo=r(N6e," \u2014 "),yN=n(N6e,"A",{href:!0});var prt=s(yN);vqo=r(prt,"SEWDForCTC"),prt.forEach(t),Tqo=r(N6e," (SEW-D model)"),N6e.forEach(t),Fqo=i(Oo),C5=n(Oo,"LI",{});var q6e=s(C5);fde=n(q6e,"STRONG",{});var _rt=s(fde);Cqo=r(_rt,"unispeech"),_rt.forEach(t),Mqo=r(q6e," \u2014 "),wN=n(q6e,"A",{href:!0});var urt=s(wN);Eqo=r(urt,"UniSpeechForCTC"),urt.forEach(t),yqo=r(q6e," (UniSpeech model)"),q6e.forEach(t),wqo=i(Oo),M5=n(Oo,"LI",{});var O6e=s(M5);mde=n(O6e,"STRONG",{});var brt=s(mde);Aqo=r(brt,"unispeech-sat"),brt.forEach(t),Lqo=r(O6e," \u2014 "),AN=n(O6e,"A",{href:!0});var vrt=s(AN);Bqo=r(vrt,"UniSpeechSatForCTC"),vrt.forEach(t),xqo=r(O6e," (UniSpeechSat model)"),O6e.forEach(t),kqo=i(Oo),E5=n(Oo,"LI",{});var G6e=s(E5);gde=n(G6e,"STRONG",{});var Trt=s(gde);Rqo=r(Trt,"wav2vec2"),Trt.forEach(t),Sqo=r(G6e," \u2014 "),LN=n(G6e,"A",{href:!0});var Frt=s(LN);Pqo=r(Frt,"Wav2Vec2ForCTC"),Frt.forEach(t),$qo=r(G6e," (Wav2Vec2 model)"),G6e.forEach(t),Iqo=i(Oo),y5=n(Oo,"LI",{});var X6e=s(y5);hde=n(X6e,"STRONG",{});var Crt=s(hde);jqo=r(Crt,"wavlm"),Crt.forEach(t),Dqo=r(X6e," \u2014 "),BN=n(X6e,"A",{href:!0});var Mrt=s(BN);Nqo=r(Mrt,"WavLMForCTC"),Mrt.forEach(t),qqo=r(X6e," (WavLM model)"),X6e.forEach(t),Oo.forEach(t),Oqo=i(Zt),w5=n(Zt,"P",{});var V6e=s(w5);Gqo=r(V6e,"The model is set in evaluation mode by default using "),pde=n(V6e,"CODE",{});var Ert=s(pde);Xqo=r(Ert,"model.eval()"),Ert.forEach(t),Vqo=r(V6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(V6e,"CODE",{});var yrt=s(_de);zqo=r(yrt,"model.train()"),yrt.forEach(t),V6e.forEach(t),Wqo=i(Zt),ude=n(Zt,"P",{});var wrt=s(ude);Qqo=r(wrt,"Examples:"),wrt.forEach(t),Hqo=i(Zt),m(Fw.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),pxe=i(d),Vd=n(d,"H2",{class:!0});var ERe=s(Vd);A5=n(ERe,"A",{id:!0,class:!0,href:!0});var Art=s(A5);bde=n(Art,"SPAN",{});var Lrt=s(bde);m(Cw.$$.fragment,Lrt),Lrt.forEach(t),Art.forEach(t),Uqo=i(ERe),vde=n(ERe,"SPAN",{});var Brt=s(vde);Jqo=r(Brt,"AutoModelForSpeechSeq2Seq"),Brt.forEach(t),ERe.forEach(t),_xe=i(d),cr=n(d,"DIV",{class:!0});var yl=s(cr);m(Mw.$$.fragment,yl),Yqo=i(yl),zd=n(yl,"P",{});var Nz=s(zd);Kqo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tde=n(Nz,"CODE",{});var xrt=s(Tde);Zqo=r(xrt,"from_pretrained()"),xrt.forEach(t),eOo=r(Nz,"class method or the "),Fde=n(Nz,"CODE",{});var krt=s(Fde);oOo=r(krt,"from_config()"),krt.forEach(t),rOo=r(Nz,`class
method.`),Nz.forEach(t),tOo=i(yl),Ew=n(yl,"P",{});var yRe=s(Ew);aOo=r(yRe,"This class cannot be instantiated directly using "),Cde=n(yRe,"CODE",{});var Rrt=s(Cde);nOo=r(Rrt,"__init__()"),Rrt.forEach(t),sOo=r(yRe," (throws an error)."),yRe.forEach(t),lOo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(yw.$$.fragment,wl),iOo=i(wl),Mde=n(wl,"P",{});var Srt=s(Mde);dOo=r(Srt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Srt.forEach(t),cOo=i(wl),Wd=n(wl,"P",{});var qz=s(Wd);fOo=r(qz,`Note:
Loading a model from its configuration file does `),Ede=n(qz,"STRONG",{});var Prt=s(Ede);mOo=r(Prt,"not"),Prt.forEach(t),gOo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=n(qz,"CODE",{});var $rt=s(yde);hOo=r($rt,"from_pretrained()"),$rt.forEach(t),pOo=r(qz,"to load the model weights."),qz.forEach(t),_Oo=i(wl),wde=n(wl,"P",{});var Irt=s(wde);uOo=r(Irt,"Examples:"),Irt.forEach(t),bOo=i(wl),m(ww.$$.fragment,wl),wl.forEach(t),vOo=i(yl),He=n(yl,"DIV",{class:!0});var ea=s(He);m(Aw.$$.fragment,ea),TOo=i(ea),Ade=n(ea,"P",{});var jrt=s(Ade);FOo=r(jrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jrt.forEach(t),COo=i(ea),sn=n(ea,"P",{});var aM=s(sn);MOo=r(aM,"The model class to instantiate is selected based on the "),Lde=n(aM,"CODE",{});var Drt=s(Lde);EOo=r(Drt,"model_type"),Drt.forEach(t),yOo=r(aM,` property of the config object (either
passed as an argument or loaded from `),Bde=n(aM,"CODE",{});var Nrt=s(Bde);wOo=r(Nrt,"pretrained_model_name_or_path"),Nrt.forEach(t),AOo=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(aM,"CODE",{});var qrt=s(xde);LOo=r(qrt,"pretrained_model_name_or_path"),qrt.forEach(t),BOo=r(aM,":"),aM.forEach(t),xOo=i(ea),Lw=n(ea,"UL",{});var wRe=s(Lw);L5=n(wRe,"LI",{});var z6e=s(L5);kde=n(z6e,"STRONG",{});var Ort=s(kde);kOo=r(Ort,"speech-encoder-decoder"),Ort.forEach(t),ROo=r(z6e," \u2014 "),xN=n(z6e,"A",{href:!0});var Grt=s(xN);SOo=r(Grt,"SpeechEncoderDecoderModel"),Grt.forEach(t),POo=r(z6e," (Speech Encoder decoder model)"),z6e.forEach(t),$Oo=i(wRe),B5=n(wRe,"LI",{});var W6e=s(B5);Rde=n(W6e,"STRONG",{});var Xrt=s(Rde);IOo=r(Xrt,"speech_to_text"),Xrt.forEach(t),jOo=r(W6e," \u2014 "),kN=n(W6e,"A",{href:!0});var Vrt=s(kN);DOo=r(Vrt,"Speech2TextForConditionalGeneration"),Vrt.forEach(t),NOo=r(W6e," (Speech2Text model)"),W6e.forEach(t),wRe.forEach(t),qOo=i(ea),x5=n(ea,"P",{});var Q6e=s(x5);OOo=r(Q6e,"The model is set in evaluation mode by default using "),Sde=n(Q6e,"CODE",{});var zrt=s(Sde);GOo=r(zrt,"model.eval()"),zrt.forEach(t),XOo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(Q6e,"CODE",{});var Wrt=s(Pde);VOo=r(Wrt,"model.train()"),Wrt.forEach(t),Q6e.forEach(t),zOo=i(ea),$de=n(ea,"P",{});var Qrt=s($de);WOo=r(Qrt,"Examples:"),Qrt.forEach(t),QOo=i(ea),m(Bw.$$.fragment,ea),ea.forEach(t),yl.forEach(t),uxe=i(d),Qd=n(d,"H2",{class:!0});var ARe=s(Qd);k5=n(ARe,"A",{id:!0,class:!0,href:!0});var Hrt=s(k5);Ide=n(Hrt,"SPAN",{});var Urt=s(Ide);m(xw.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),HOo=i(ARe),jde=n(ARe,"SPAN",{});var Jrt=s(jde);UOo=r(Jrt,"AutoModelForAudioXVector"),Jrt.forEach(t),ARe.forEach(t),bxe=i(d),fr=n(d,"DIV",{class:!0});var Al=s(fr);m(kw.$$.fragment,Al),JOo=i(Al),Hd=n(Al,"P",{});var Oz=s(Hd);YOo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dde=n(Oz,"CODE",{});var Yrt=s(Dde);KOo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),ZOo=r(Oz,"class method or the "),Nde=n(Oz,"CODE",{});var Krt=s(Nde);eGo=r(Krt,"from_config()"),Krt.forEach(t),oGo=r(Oz,`class
method.`),Oz.forEach(t),rGo=i(Al),Rw=n(Al,"P",{});var LRe=s(Rw);tGo=r(LRe,"This class cannot be instantiated directly using "),qde=n(LRe,"CODE",{});var Zrt=s(qde);aGo=r(Zrt,"__init__()"),Zrt.forEach(t),nGo=r(LRe," (throws an error)."),LRe.forEach(t),sGo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(Sw.$$.fragment,Ll),lGo=i(Ll),Ode=n(Ll,"P",{});var ett=s(Ode);iGo=r(ett,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ett.forEach(t),dGo=i(Ll),Ud=n(Ll,"P",{});var Gz=s(Ud);cGo=r(Gz,`Note:
Loading a model from its configuration file does `),Gde=n(Gz,"STRONG",{});var ott=s(Gde);fGo=r(ott,"not"),ott.forEach(t),mGo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(Gz,"CODE",{});var rtt=s(Xde);gGo=r(rtt,"from_pretrained()"),rtt.forEach(t),hGo=r(Gz,"to load the model weights."),Gz.forEach(t),pGo=i(Ll),Vde=n(Ll,"P",{});var ttt=s(Vde);_Go=r(ttt,"Examples:"),ttt.forEach(t),uGo=i(Ll),m(Pw.$$.fragment,Ll),Ll.forEach(t),bGo=i(Al),Ue=n(Al,"DIV",{class:!0});var oa=s(Ue);m($w.$$.fragment,oa),vGo=i(oa),zde=n(oa,"P",{});var att=s(zde);TGo=r(att,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),att.forEach(t),FGo=i(oa),ln=n(oa,"P",{});var nM=s(ln);CGo=r(nM,"The model class to instantiate is selected based on the "),Wde=n(nM,"CODE",{});var ntt=s(Wde);MGo=r(ntt,"model_type"),ntt.forEach(t),EGo=r(nM,` property of the config object (either
passed as an argument or loaded from `),Qde=n(nM,"CODE",{});var stt=s(Qde);yGo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),wGo=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(nM,"CODE",{});var ltt=s(Hde);AGo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),LGo=r(nM,":"),nM.forEach(t),BGo=i(oa),dn=n(oa,"UL",{});var sM=s(dn);R5=n(sM,"LI",{});var H6e=s(R5);Ude=n(H6e,"STRONG",{});var itt=s(Ude);xGo=r(itt,"data2vec-audio"),itt.forEach(t),kGo=r(H6e," \u2014 "),RN=n(H6e,"A",{href:!0});var dtt=s(RN);RGo=r(dtt,"Data2VecAudioForXVector"),dtt.forEach(t),SGo=r(H6e," (Data2VecAudio model)"),H6e.forEach(t),PGo=i(sM),S5=n(sM,"LI",{});var U6e=s(S5);Jde=n(U6e,"STRONG",{});var ctt=s(Jde);$Go=r(ctt,"unispeech-sat"),ctt.forEach(t),IGo=r(U6e," \u2014 "),SN=n(U6e,"A",{href:!0});var ftt=s(SN);jGo=r(ftt,"UniSpeechSatForXVector"),ftt.forEach(t),DGo=r(U6e," (UniSpeechSat model)"),U6e.forEach(t),NGo=i(sM),P5=n(sM,"LI",{});var J6e=s(P5);Yde=n(J6e,"STRONG",{});var mtt=s(Yde);qGo=r(mtt,"wav2vec2"),mtt.forEach(t),OGo=r(J6e," \u2014 "),PN=n(J6e,"A",{href:!0});var gtt=s(PN);GGo=r(gtt,"Wav2Vec2ForXVector"),gtt.forEach(t),XGo=r(J6e," (Wav2Vec2 model)"),J6e.forEach(t),VGo=i(sM),$5=n(sM,"LI",{});var Y6e=s($5);Kde=n(Y6e,"STRONG",{});var htt=s(Kde);zGo=r(htt,"wavlm"),htt.forEach(t),WGo=r(Y6e," \u2014 "),$N=n(Y6e,"A",{href:!0});var ptt=s($N);QGo=r(ptt,"WavLMForXVector"),ptt.forEach(t),HGo=r(Y6e," (WavLM model)"),Y6e.forEach(t),sM.forEach(t),UGo=i(oa),I5=n(oa,"P",{});var K6e=s(I5);JGo=r(K6e,"The model is set in evaluation mode by default using "),Zde=n(K6e,"CODE",{});var _tt=s(Zde);YGo=r(_tt,"model.eval()"),_tt.forEach(t),KGo=r(K6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(K6e,"CODE",{});var utt=s(ece);ZGo=r(utt,"model.train()"),utt.forEach(t),K6e.forEach(t),eXo=i(oa),oce=n(oa,"P",{});var btt=s(oce);oXo=r(btt,"Examples:"),btt.forEach(t),rXo=i(oa),m(Iw.$$.fragment,oa),oa.forEach(t),Al.forEach(t),vxe=i(d),Jd=n(d,"H2",{class:!0});var BRe=s(Jd);j5=n(BRe,"A",{id:!0,class:!0,href:!0});var vtt=s(j5);rce=n(vtt,"SPAN",{});var Ttt=s(rce);m(jw.$$.fragment,Ttt),Ttt.forEach(t),vtt.forEach(t),tXo=i(BRe),tce=n(BRe,"SPAN",{});var Ftt=s(tce);aXo=r(Ftt,"AutoModelForMaskedImageModeling"),Ftt.forEach(t),BRe.forEach(t),Txe=i(d),mr=n(d,"DIV",{class:!0});var Bl=s(mr);m(Dw.$$.fragment,Bl),nXo=i(Bl),Yd=n(Bl,"P",{});var Xz=s(Yd);sXo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ace=n(Xz,"CODE",{});var Ctt=s(ace);lXo=r(Ctt,"from_pretrained()"),Ctt.forEach(t),iXo=r(Xz,"class method or the "),nce=n(Xz,"CODE",{});var Mtt=s(nce);dXo=r(Mtt,"from_config()"),Mtt.forEach(t),cXo=r(Xz,`class
method.`),Xz.forEach(t),fXo=i(Bl),Nw=n(Bl,"P",{});var xRe=s(Nw);mXo=r(xRe,"This class cannot be instantiated directly using "),sce=n(xRe,"CODE",{});var Ett=s(sce);gXo=r(Ett,"__init__()"),Ett.forEach(t),hXo=r(xRe," (throws an error)."),xRe.forEach(t),pXo=i(Bl),st=n(Bl,"DIV",{class:!0});var xl=s(st);m(qw.$$.fragment,xl),_Xo=i(xl),lce=n(xl,"P",{});var ytt=s(lce);uXo=r(ytt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ytt.forEach(t),bXo=i(xl),Kd=n(xl,"P",{});var Vz=s(Kd);vXo=r(Vz,`Note:
Loading a model from its configuration file does `),ice=n(Vz,"STRONG",{});var wtt=s(ice);TXo=r(wtt,"not"),wtt.forEach(t),FXo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=n(Vz,"CODE",{});var Att=s(dce);CXo=r(Att,"from_pretrained()"),Att.forEach(t),MXo=r(Vz,"to load the model weights."),Vz.forEach(t),EXo=i(xl),cce=n(xl,"P",{});var Ltt=s(cce);yXo=r(Ltt,"Examples:"),Ltt.forEach(t),wXo=i(xl),m(Ow.$$.fragment,xl),xl.forEach(t),AXo=i(Bl),Je=n(Bl,"DIV",{class:!0});var ra=s(Je);m(Gw.$$.fragment,ra),LXo=i(ra),fce=n(ra,"P",{});var Btt=s(fce);BXo=r(Btt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Btt.forEach(t),xXo=i(ra),cn=n(ra,"P",{});var lM=s(cn);kXo=r(lM,"The model class to instantiate is selected based on the "),mce=n(lM,"CODE",{});var xtt=s(mce);RXo=r(xtt,"model_type"),xtt.forEach(t),SXo=r(lM,` property of the config object (either
passed as an argument or loaded from `),gce=n(lM,"CODE",{});var ktt=s(gce);PXo=r(ktt,"pretrained_model_name_or_path"),ktt.forEach(t),$Xo=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(lM,"CODE",{});var Rtt=s(hce);IXo=r(Rtt,"pretrained_model_name_or_path"),Rtt.forEach(t),jXo=r(lM,":"),lM.forEach(t),DXo=i(ra),Zd=n(ra,"UL",{});var zz=s(Zd);D5=n(zz,"LI",{});var Z6e=s(D5);pce=n(Z6e,"STRONG",{});var Stt=s(pce);NXo=r(Stt,"deit"),Stt.forEach(t),qXo=r(Z6e," \u2014 "),IN=n(Z6e,"A",{href:!0});var Ptt=s(IN);OXo=r(Ptt,"DeiTForMaskedImageModeling"),Ptt.forEach(t),GXo=r(Z6e," (DeiT model)"),Z6e.forEach(t),XXo=i(zz),N5=n(zz,"LI",{});var eAe=s(N5);_ce=n(eAe,"STRONG",{});var $tt=s(_ce);VXo=r($tt,"swin"),$tt.forEach(t),zXo=r(eAe," \u2014 "),jN=n(eAe,"A",{href:!0});var Itt=s(jN);WXo=r(Itt,"SwinForMaskedImageModeling"),Itt.forEach(t),QXo=r(eAe," (Swin model)"),eAe.forEach(t),HXo=i(zz),q5=n(zz,"LI",{});var oAe=s(q5);uce=n(oAe,"STRONG",{});var jtt=s(uce);UXo=r(jtt,"vit"),jtt.forEach(t),JXo=r(oAe," \u2014 "),DN=n(oAe,"A",{href:!0});var Dtt=s(DN);YXo=r(Dtt,"ViTForMaskedImageModeling"),Dtt.forEach(t),KXo=r(oAe," (ViT model)"),oAe.forEach(t),zz.forEach(t),ZXo=i(ra),O5=n(ra,"P",{});var rAe=s(O5);eVo=r(rAe,"The model is set in evaluation mode by default using "),bce=n(rAe,"CODE",{});var Ntt=s(bce);oVo=r(Ntt,"model.eval()"),Ntt.forEach(t),rVo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(rAe,"CODE",{});var qtt=s(vce);tVo=r(qtt,"model.train()"),qtt.forEach(t),rAe.forEach(t),aVo=i(ra),Tce=n(ra,"P",{});var Ott=s(Tce);nVo=r(Ott,"Examples:"),Ott.forEach(t),sVo=i(ra),m(Xw.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),Fxe=i(d),ec=n(d,"H2",{class:!0});var kRe=s(ec);G5=n(kRe,"A",{id:!0,class:!0,href:!0});var Gtt=s(G5);Fce=n(Gtt,"SPAN",{});var Xtt=s(Fce);m(Vw.$$.fragment,Xtt),Xtt.forEach(t),Gtt.forEach(t),lVo=i(kRe),Cce=n(kRe,"SPAN",{});var Vtt=s(Cce);iVo=r(Vtt,"AutoModelForObjectDetection"),Vtt.forEach(t),kRe.forEach(t),Cxe=i(d),gr=n(d,"DIV",{class:!0});var kl=s(gr);m(zw.$$.fragment,kl),dVo=i(kl),oc=n(kl,"P",{});var Wz=s(oc);cVo=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mce=n(Wz,"CODE",{});var ztt=s(Mce);fVo=r(ztt,"from_pretrained()"),ztt.forEach(t),mVo=r(Wz,"class method or the "),Ece=n(Wz,"CODE",{});var Wtt=s(Ece);gVo=r(Wtt,"from_config()"),Wtt.forEach(t),hVo=r(Wz,`class
method.`),Wz.forEach(t),pVo=i(kl),Ww=n(kl,"P",{});var RRe=s(Ww);_Vo=r(RRe,"This class cannot be instantiated directly using "),yce=n(RRe,"CODE",{});var Qtt=s(yce);uVo=r(Qtt,"__init__()"),Qtt.forEach(t),bVo=r(RRe," (throws an error)."),RRe.forEach(t),vVo=i(kl),lt=n(kl,"DIV",{class:!0});var Rl=s(lt);m(Qw.$$.fragment,Rl),TVo=i(Rl),wce=n(Rl,"P",{});var Htt=s(wce);FVo=r(Htt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Htt.forEach(t),CVo=i(Rl),rc=n(Rl,"P",{});var Qz=s(rc);MVo=r(Qz,`Note:
Loading a model from its configuration file does `),Ace=n(Qz,"STRONG",{});var Utt=s(Ace);EVo=r(Utt,"not"),Utt.forEach(t),yVo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=n(Qz,"CODE",{});var Jtt=s(Lce);wVo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),AVo=r(Qz,"to load the model weights."),Qz.forEach(t),LVo=i(Rl),Bce=n(Rl,"P",{});var Ytt=s(Bce);BVo=r(Ytt,"Examples:"),Ytt.forEach(t),xVo=i(Rl),m(Hw.$$.fragment,Rl),Rl.forEach(t),kVo=i(kl),Ye=n(kl,"DIV",{class:!0});var ta=s(Ye);m(Uw.$$.fragment,ta),RVo=i(ta),xce=n(ta,"P",{});var Ktt=s(xce);SVo=r(Ktt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ktt.forEach(t),PVo=i(ta),fn=n(ta,"P",{});var iM=s(fn);$Vo=r(iM,"The model class to instantiate is selected based on the "),kce=n(iM,"CODE",{});var Ztt=s(kce);IVo=r(Ztt,"model_type"),Ztt.forEach(t),jVo=r(iM,` property of the config object (either
passed as an argument or loaded from `),Rce=n(iM,"CODE",{});var eat=s(Rce);DVo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),NVo=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(iM,"CODE",{});var oat=s(Sce);qVo=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),OVo=r(iM,":"),iM.forEach(t),GVo=i(ta),Pce=n(ta,"UL",{});var rat=s(Pce);X5=n(rat,"LI",{});var tAe=s(X5);$ce=n(tAe,"STRONG",{});var tat=s($ce);XVo=r(tat,"detr"),tat.forEach(t),VVo=r(tAe," \u2014 "),NN=n(tAe,"A",{href:!0});var aat=s(NN);zVo=r(aat,"DetrForObjectDetection"),aat.forEach(t),WVo=r(tAe," (DETR model)"),tAe.forEach(t),rat.forEach(t),QVo=i(ta),V5=n(ta,"P",{});var aAe=s(V5);HVo=r(aAe,"The model is set in evaluation mode by default using "),Ice=n(aAe,"CODE",{});var nat=s(Ice);UVo=r(nat,"model.eval()"),nat.forEach(t),JVo=r(aAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=n(aAe,"CODE",{});var sat=s(jce);YVo=r(sat,"model.train()"),sat.forEach(t),aAe.forEach(t),KVo=i(ta),Dce=n(ta,"P",{});var lat=s(Dce);ZVo=r(lat,"Examples:"),lat.forEach(t),ezo=i(ta),m(Jw.$$.fragment,ta),ta.forEach(t),kl.forEach(t),Mxe=i(d),tc=n(d,"H2",{class:!0});var SRe=s(tc);z5=n(SRe,"A",{id:!0,class:!0,href:!0});var iat=s(z5);Nce=n(iat,"SPAN",{});var dat=s(Nce);m(Yw.$$.fragment,dat),dat.forEach(t),iat.forEach(t),ozo=i(SRe),qce=n(SRe,"SPAN",{});var cat=s(qce);rzo=r(cat,"AutoModelForImageSegmentation"),cat.forEach(t),SRe.forEach(t),Exe=i(d),hr=n(d,"DIV",{class:!0});var Sl=s(hr);m(Kw.$$.fragment,Sl),tzo=i(Sl),ac=n(Sl,"P",{});var Hz=s(ac);azo=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Oce=n(Hz,"CODE",{});var fat=s(Oce);nzo=r(fat,"from_pretrained()"),fat.forEach(t),szo=r(Hz,"class method or the "),Gce=n(Hz,"CODE",{});var mat=s(Gce);lzo=r(mat,"from_config()"),mat.forEach(t),izo=r(Hz,`class
method.`),Hz.forEach(t),dzo=i(Sl),Zw=n(Sl,"P",{});var PRe=s(Zw);czo=r(PRe,"This class cannot be instantiated directly using "),Xce=n(PRe,"CODE",{});var gat=s(Xce);fzo=r(gat,"__init__()"),gat.forEach(t),mzo=r(PRe," (throws an error)."),PRe.forEach(t),gzo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(e6.$$.fragment,Pl),hzo=i(Pl),Vce=n(Pl,"P",{});var hat=s(Vce);pzo=r(hat,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hat.forEach(t),_zo=i(Pl),nc=n(Pl,"P",{});var Uz=s(nc);uzo=r(Uz,`Note:
Loading a model from its configuration file does `),zce=n(Uz,"STRONG",{});var pat=s(zce);bzo=r(pat,"not"),pat.forEach(t),vzo=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=n(Uz,"CODE",{});var _at=s(Wce);Tzo=r(_at,"from_pretrained()"),_at.forEach(t),Fzo=r(Uz,"to load the model weights."),Uz.forEach(t),Czo=i(Pl),Qce=n(Pl,"P",{});var uat=s(Qce);Mzo=r(uat,"Examples:"),uat.forEach(t),Ezo=i(Pl),m(o6.$$.fragment,Pl),Pl.forEach(t),yzo=i(Sl),Ke=n(Sl,"DIV",{class:!0});var aa=s(Ke);m(r6.$$.fragment,aa),wzo=i(aa),Hce=n(aa,"P",{});var bat=s(Hce);Azo=r(bat,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),bat.forEach(t),Lzo=i(aa),mn=n(aa,"P",{});var dM=s(mn);Bzo=r(dM,"The model class to instantiate is selected based on the "),Uce=n(dM,"CODE",{});var vat=s(Uce);xzo=r(vat,"model_type"),vat.forEach(t),kzo=r(dM,` property of the config object (either
passed as an argument or loaded from `),Jce=n(dM,"CODE",{});var Tat=s(Jce);Rzo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Szo=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(dM,"CODE",{});var Fat=s(Yce);Pzo=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),$zo=r(dM,":"),dM.forEach(t),Izo=i(aa),Kce=n(aa,"UL",{});var Cat=s(Kce);W5=n(Cat,"LI",{});var nAe=s(W5);Zce=n(nAe,"STRONG",{});var Mat=s(Zce);jzo=r(Mat,"detr"),Mat.forEach(t),Dzo=r(nAe," \u2014 "),qN=n(nAe,"A",{href:!0});var Eat=s(qN);Nzo=r(Eat,"DetrForSegmentation"),Eat.forEach(t),qzo=r(nAe," (DETR model)"),nAe.forEach(t),Cat.forEach(t),Ozo=i(aa),Q5=n(aa,"P",{});var sAe=s(Q5);Gzo=r(sAe,"The model is set in evaluation mode by default using "),efe=n(sAe,"CODE",{});var yat=s(efe);Xzo=r(yat,"model.eval()"),yat.forEach(t),Vzo=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(sAe,"CODE",{});var wat=s(ofe);zzo=r(wat,"model.train()"),wat.forEach(t),sAe.forEach(t),Wzo=i(aa),rfe=n(aa,"P",{});var Aat=s(rfe);Qzo=r(Aat,"Examples:"),Aat.forEach(t),Hzo=i(aa),m(t6.$$.fragment,aa),aa.forEach(t),Sl.forEach(t),yxe=i(d),sc=n(d,"H2",{class:!0});var $Re=s(sc);H5=n($Re,"A",{id:!0,class:!0,href:!0});var Lat=s(H5);tfe=n(Lat,"SPAN",{});var Bat=s(tfe);m(a6.$$.fragment,Bat),Bat.forEach(t),Lat.forEach(t),Uzo=i($Re),afe=n($Re,"SPAN",{});var xat=s(afe);Jzo=r(xat,"AutoModelForSemanticSegmentation"),xat.forEach(t),$Re.forEach(t),wxe=i(d),pr=n(d,"DIV",{class:!0});var $l=s(pr);m(n6.$$.fragment,$l),Yzo=i($l),lc=n($l,"P",{});var Jz=s(lc);Kzo=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nfe=n(Jz,"CODE",{});var kat=s(nfe);Zzo=r(kat,"from_pretrained()"),kat.forEach(t),eWo=r(Jz,"class method or the "),sfe=n(Jz,"CODE",{});var Rat=s(sfe);oWo=r(Rat,"from_config()"),Rat.forEach(t),rWo=r(Jz,`class
method.`),Jz.forEach(t),tWo=i($l),s6=n($l,"P",{});var IRe=s(s6);aWo=r(IRe,"This class cannot be instantiated directly using "),lfe=n(IRe,"CODE",{});var Sat=s(lfe);nWo=r(Sat,"__init__()"),Sat.forEach(t),sWo=r(IRe," (throws an error)."),IRe.forEach(t),lWo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(l6.$$.fragment,Il),iWo=i(Il),ife=n(Il,"P",{});var Pat=s(ife);dWo=r(Pat,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pat.forEach(t),cWo=i(Il),ic=n(Il,"P",{});var Yz=s(ic);fWo=r(Yz,`Note:
Loading a model from its configuration file does `),dfe=n(Yz,"STRONG",{});var $at=s(dfe);mWo=r($at,"not"),$at.forEach(t),gWo=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=n(Yz,"CODE",{});var Iat=s(cfe);hWo=r(Iat,"from_pretrained()"),Iat.forEach(t),pWo=r(Yz,"to load the model weights."),Yz.forEach(t),_Wo=i(Il),ffe=n(Il,"P",{});var jat=s(ffe);uWo=r(jat,"Examples:"),jat.forEach(t),bWo=i(Il),m(i6.$$.fragment,Il),Il.forEach(t),vWo=i($l),Ze=n($l,"DIV",{class:!0});var na=s(Ze);m(d6.$$.fragment,na),TWo=i(na),mfe=n(na,"P",{});var Dat=s(mfe);FWo=r(Dat,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dat.forEach(t),CWo=i(na),gn=n(na,"P",{});var cM=s(gn);MWo=r(cM,"The model class to instantiate is selected based on the "),gfe=n(cM,"CODE",{});var Nat=s(gfe);EWo=r(Nat,"model_type"),Nat.forEach(t),yWo=r(cM,` property of the config object (either
passed as an argument or loaded from `),hfe=n(cM,"CODE",{});var qat=s(hfe);wWo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),AWo=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(cM,"CODE",{});var Oat=s(pfe);LWo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),BWo=r(cM,":"),cM.forEach(t),xWo=i(na),c6=n(na,"UL",{});var jRe=s(c6);U5=n(jRe,"LI",{});var lAe=s(U5);_fe=n(lAe,"STRONG",{});var Gat=s(_fe);kWo=r(Gat,"beit"),Gat.forEach(t),RWo=r(lAe," \u2014 "),ON=n(lAe,"A",{href:!0});var Xat=s(ON);SWo=r(Xat,"BeitForSemanticSegmentation"),Xat.forEach(t),PWo=r(lAe," (BEiT model)"),lAe.forEach(t),$Wo=i(jRe),J5=n(jRe,"LI",{});var iAe=s(J5);ufe=n(iAe,"STRONG",{});var Vat=s(ufe);IWo=r(Vat,"segformer"),Vat.forEach(t),jWo=r(iAe," \u2014 "),GN=n(iAe,"A",{href:!0});var zat=s(GN);DWo=r(zat,"SegformerForSemanticSegmentation"),zat.forEach(t),NWo=r(iAe," (SegFormer model)"),iAe.forEach(t),jRe.forEach(t),qWo=i(na),Y5=n(na,"P",{});var dAe=s(Y5);OWo=r(dAe,"The model is set in evaluation mode by default using "),bfe=n(dAe,"CODE",{});var Wat=s(bfe);GWo=r(Wat,"model.eval()"),Wat.forEach(t),XWo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(dAe,"CODE",{});var Qat=s(vfe);VWo=r(Qat,"model.train()"),Qat.forEach(t),dAe.forEach(t),zWo=i(na),Tfe=n(na,"P",{});var Hat=s(Tfe);WWo=r(Hat,"Examples:"),Hat.forEach(t),QWo=i(na),m(f6.$$.fragment,na),na.forEach(t),$l.forEach(t),Axe=i(d),dc=n(d,"H2",{class:!0});var DRe=s(dc);K5=n(DRe,"A",{id:!0,class:!0,href:!0});var Uat=s(K5);Ffe=n(Uat,"SPAN",{});var Jat=s(Ffe);m(m6.$$.fragment,Jat),Jat.forEach(t),Uat.forEach(t),HWo=i(DRe),Cfe=n(DRe,"SPAN",{});var Yat=s(Cfe);UWo=r(Yat,"AutoModelForInstanceSegmentation"),Yat.forEach(t),DRe.forEach(t),Lxe=i(d),_r=n(d,"DIV",{class:!0});var jl=s(_r);m(g6.$$.fragment,jl),JWo=i(jl),cc=n(jl,"P",{});var Kz=s(cc);YWo=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mfe=n(Kz,"CODE",{});var Kat=s(Mfe);KWo=r(Kat,"from_pretrained()"),Kat.forEach(t),ZWo=r(Kz,"class method or the "),Efe=n(Kz,"CODE",{});var Zat=s(Efe);eQo=r(Zat,"from_config()"),Zat.forEach(t),oQo=r(Kz,`class
method.`),Kz.forEach(t),rQo=i(jl),h6=n(jl,"P",{});var NRe=s(h6);tQo=r(NRe,"This class cannot be instantiated directly using "),yfe=n(NRe,"CODE",{});var ent=s(yfe);aQo=r(ent,"__init__()"),ent.forEach(t),nQo=r(NRe," (throws an error)."),NRe.forEach(t),sQo=i(jl),ct=n(jl,"DIV",{class:!0});var Dl=s(ct);m(p6.$$.fragment,Dl),lQo=i(Dl),wfe=n(Dl,"P",{});var ont=s(wfe);iQo=r(ont,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ont.forEach(t),dQo=i(Dl),fc=n(Dl,"P",{});var Zz=s(fc);cQo=r(Zz,`Note:
Loading a model from its configuration file does `),Afe=n(Zz,"STRONG",{});var rnt=s(Afe);fQo=r(rnt,"not"),rnt.forEach(t),mQo=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=n(Zz,"CODE",{});var tnt=s(Lfe);gQo=r(tnt,"from_pretrained()"),tnt.forEach(t),hQo=r(Zz,"to load the model weights."),Zz.forEach(t),pQo=i(Dl),Bfe=n(Dl,"P",{});var ant=s(Bfe);_Qo=r(ant,"Examples:"),ant.forEach(t),uQo=i(Dl),m(_6.$$.fragment,Dl),Dl.forEach(t),bQo=i(jl),eo=n(jl,"DIV",{class:!0});var sa=s(eo);m(u6.$$.fragment,sa),vQo=i(sa),xfe=n(sa,"P",{});var nnt=s(xfe);TQo=r(nnt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),nnt.forEach(t),FQo=i(sa),hn=n(sa,"P",{});var fM=s(hn);CQo=r(fM,"The model class to instantiate is selected based on the "),kfe=n(fM,"CODE",{});var snt=s(kfe);MQo=r(snt,"model_type"),snt.forEach(t),EQo=r(fM,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(fM,"CODE",{});var lnt=s(Rfe);yQo=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),wQo=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(fM,"CODE",{});var int=s(Sfe);AQo=r(int,"pretrained_model_name_or_path"),int.forEach(t),LQo=r(fM,":"),fM.forEach(t),BQo=i(sa),Pfe=n(sa,"UL",{});var dnt=s(Pfe);Z5=n(dnt,"LI",{});var cAe=s(Z5);$fe=n(cAe,"STRONG",{});var cnt=s($fe);xQo=r(cnt,"maskformer"),cnt.forEach(t),kQo=r(cAe," \u2014 "),XN=n(cAe,"A",{href:!0});var fnt=s(XN);RQo=r(fnt,"MaskFormerForInstanceSegmentation"),fnt.forEach(t),SQo=r(cAe," (MaskFormer model)"),cAe.forEach(t),dnt.forEach(t),PQo=i(sa),ev=n(sa,"P",{});var fAe=s(ev);$Qo=r(fAe,"The model is set in evaluation mode by default using "),Ife=n(fAe,"CODE",{});var mnt=s(Ife);IQo=r(mnt,"model.eval()"),mnt.forEach(t),jQo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(fAe,"CODE",{});var gnt=s(jfe);DQo=r(gnt,"model.train()"),gnt.forEach(t),fAe.forEach(t),NQo=i(sa),Dfe=n(sa,"P",{});var hnt=s(Dfe);qQo=r(hnt,"Examples:"),hnt.forEach(t),OQo=i(sa),m(b6.$$.fragment,sa),sa.forEach(t),jl.forEach(t),Bxe=i(d),mc=n(d,"H2",{class:!0});var qRe=s(mc);ov=n(qRe,"A",{id:!0,class:!0,href:!0});var pnt=s(ov);Nfe=n(pnt,"SPAN",{});var _nt=s(Nfe);m(v6.$$.fragment,_nt),_nt.forEach(t),pnt.forEach(t),GQo=i(qRe),qfe=n(qRe,"SPAN",{});var unt=s(qfe);XQo=r(unt,"TFAutoModel"),unt.forEach(t),qRe.forEach(t),xxe=i(d),ur=n(d,"DIV",{class:!0});var Nl=s(ur);m(T6.$$.fragment,Nl),VQo=i(Nl),gc=n(Nl,"P",{});var eW=s(gc);zQo=r(eW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ofe=n(eW,"CODE",{});var bnt=s(Ofe);WQo=r(bnt,"from_pretrained()"),bnt.forEach(t),QQo=r(eW,"class method or the "),Gfe=n(eW,"CODE",{});var vnt=s(Gfe);HQo=r(vnt,"from_config()"),vnt.forEach(t),UQo=r(eW,`class
method.`),eW.forEach(t),JQo=i(Nl),F6=n(Nl,"P",{});var ORe=s(F6);YQo=r(ORe,"This class cannot be instantiated directly using "),Xfe=n(ORe,"CODE",{});var Tnt=s(Xfe);KQo=r(Tnt,"__init__()"),Tnt.forEach(t),ZQo=r(ORe," (throws an error)."),ORe.forEach(t),eHo=i(Nl),ft=n(Nl,"DIV",{class:!0});var ql=s(ft);m(C6.$$.fragment,ql),oHo=i(ql),Vfe=n(ql,"P",{});var Fnt=s(Vfe);rHo=r(Fnt,"Instantiates one of the base model classes of the library from a configuration."),Fnt.forEach(t),tHo=i(ql),hc=n(ql,"P",{});var oW=s(hc);aHo=r(oW,`Note:
Loading a model from its configuration file does `),zfe=n(oW,"STRONG",{});var Cnt=s(zfe);nHo=r(Cnt,"not"),Cnt.forEach(t),sHo=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=n(oW,"CODE",{});var Mnt=s(Wfe);lHo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),iHo=r(oW,"to load the model weights."),oW.forEach(t),dHo=i(ql),Qfe=n(ql,"P",{});var Ent=s(Qfe);cHo=r(Ent,"Examples:"),Ent.forEach(t),fHo=i(ql),m(M6.$$.fragment,ql),ql.forEach(t),mHo=i(Nl),ho=n(Nl,"DIV",{class:!0});var ha=s(ho);m(E6.$$.fragment,ha),gHo=i(ha),Hfe=n(ha,"P",{});var ynt=s(Hfe);hHo=r(ynt,"Instantiate one of the base model classes of the library from a pretrained model."),ynt.forEach(t),pHo=i(ha),pn=n(ha,"P",{});var mM=s(pn);_Ho=r(mM,"The model class to instantiate is selected based on the "),Ufe=n(mM,"CODE",{});var wnt=s(Ufe);uHo=r(wnt,"model_type"),wnt.forEach(t),bHo=r(mM,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(mM,"CODE",{});var Ant=s(Jfe);vHo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),THo=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(mM,"CODE",{});var Lnt=s(Yfe);FHo=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),CHo=r(mM,":"),mM.forEach(t),MHo=i(ha),B=n(ha,"UL",{});var x=s(B);rv=n(x,"LI",{});var mAe=s(rv);Kfe=n(mAe,"STRONG",{});var Bnt=s(Kfe);EHo=r(Bnt,"albert"),Bnt.forEach(t),yHo=r(mAe," \u2014 "),VN=n(mAe,"A",{href:!0});var xnt=s(VN);wHo=r(xnt,"TFAlbertModel"),xnt.forEach(t),AHo=r(mAe," (ALBERT model)"),mAe.forEach(t),LHo=i(x),tv=n(x,"LI",{});var gAe=s(tv);Zfe=n(gAe,"STRONG",{});var knt=s(Zfe);BHo=r(knt,"bart"),knt.forEach(t),xHo=r(gAe," \u2014 "),zN=n(gAe,"A",{href:!0});var Rnt=s(zN);kHo=r(Rnt,"TFBartModel"),Rnt.forEach(t),RHo=r(gAe," (BART model)"),gAe.forEach(t),SHo=i(x),av=n(x,"LI",{});var hAe=s(av);eme=n(hAe,"STRONG",{});var Snt=s(eme);PHo=r(Snt,"bert"),Snt.forEach(t),$Ho=r(hAe," \u2014 "),WN=n(hAe,"A",{href:!0});var Pnt=s(WN);IHo=r(Pnt,"TFBertModel"),Pnt.forEach(t),jHo=r(hAe," (BERT model)"),hAe.forEach(t),DHo=i(x),nv=n(x,"LI",{});var pAe=s(nv);ome=n(pAe,"STRONG",{});var $nt=s(ome);NHo=r($nt,"blenderbot"),$nt.forEach(t),qHo=r(pAe," \u2014 "),QN=n(pAe,"A",{href:!0});var Int=s(QN);OHo=r(Int,"TFBlenderbotModel"),Int.forEach(t),GHo=r(pAe," (Blenderbot model)"),pAe.forEach(t),XHo=i(x),sv=n(x,"LI",{});var _Ae=s(sv);rme=n(_Ae,"STRONG",{});var jnt=s(rme);VHo=r(jnt,"blenderbot-small"),jnt.forEach(t),zHo=r(_Ae," \u2014 "),HN=n(_Ae,"A",{href:!0});var Dnt=s(HN);WHo=r(Dnt,"TFBlenderbotSmallModel"),Dnt.forEach(t),QHo=r(_Ae," (BlenderbotSmall model)"),_Ae.forEach(t),HHo=i(x),lv=n(x,"LI",{});var uAe=s(lv);tme=n(uAe,"STRONG",{});var Nnt=s(tme);UHo=r(Nnt,"camembert"),Nnt.forEach(t),JHo=r(uAe," \u2014 "),UN=n(uAe,"A",{href:!0});var qnt=s(UN);YHo=r(qnt,"TFCamembertModel"),qnt.forEach(t),KHo=r(uAe," (CamemBERT model)"),uAe.forEach(t),ZHo=i(x),iv=n(x,"LI",{});var bAe=s(iv);ame=n(bAe,"STRONG",{});var Ont=s(ame);eUo=r(Ont,"clip"),Ont.forEach(t),oUo=r(bAe," \u2014 "),JN=n(bAe,"A",{href:!0});var Gnt=s(JN);rUo=r(Gnt,"TFCLIPModel"),Gnt.forEach(t),tUo=r(bAe," (CLIP model)"),bAe.forEach(t),aUo=i(x),dv=n(x,"LI",{});var vAe=s(dv);nme=n(vAe,"STRONG",{});var Xnt=s(nme);nUo=r(Xnt,"convbert"),Xnt.forEach(t),sUo=r(vAe," \u2014 "),YN=n(vAe,"A",{href:!0});var Vnt=s(YN);lUo=r(Vnt,"TFConvBertModel"),Vnt.forEach(t),iUo=r(vAe," (ConvBERT model)"),vAe.forEach(t),dUo=i(x),cv=n(x,"LI",{});var TAe=s(cv);sme=n(TAe,"STRONG",{});var znt=s(sme);cUo=r(znt,"convnext"),znt.forEach(t),fUo=r(TAe," \u2014 "),KN=n(TAe,"A",{href:!0});var Wnt=s(KN);mUo=r(Wnt,"TFConvNextModel"),Wnt.forEach(t),gUo=r(TAe," (ConvNext model)"),TAe.forEach(t),hUo=i(x),fv=n(x,"LI",{});var FAe=s(fv);lme=n(FAe,"STRONG",{});var Qnt=s(lme);pUo=r(Qnt,"ctrl"),Qnt.forEach(t),_Uo=r(FAe," \u2014 "),ZN=n(FAe,"A",{href:!0});var Hnt=s(ZN);uUo=r(Hnt,"TFCTRLModel"),Hnt.forEach(t),bUo=r(FAe," (CTRL model)"),FAe.forEach(t),vUo=i(x),mv=n(x,"LI",{});var CAe=s(mv);ime=n(CAe,"STRONG",{});var Unt=s(ime);TUo=r(Unt,"deberta"),Unt.forEach(t),FUo=r(CAe," \u2014 "),eq=n(CAe,"A",{href:!0});var Jnt=s(eq);CUo=r(Jnt,"TFDebertaModel"),Jnt.forEach(t),MUo=r(CAe," (DeBERTa model)"),CAe.forEach(t),EUo=i(x),gv=n(x,"LI",{});var MAe=s(gv);dme=n(MAe,"STRONG",{});var Ynt=s(dme);yUo=r(Ynt,"deberta-v2"),Ynt.forEach(t),wUo=r(MAe," \u2014 "),oq=n(MAe,"A",{href:!0});var Knt=s(oq);AUo=r(Knt,"TFDebertaV2Model"),Knt.forEach(t),LUo=r(MAe," (DeBERTa-v2 model)"),MAe.forEach(t),BUo=i(x),hv=n(x,"LI",{});var EAe=s(hv);cme=n(EAe,"STRONG",{});var Znt=s(cme);xUo=r(Znt,"distilbert"),Znt.forEach(t),kUo=r(EAe," \u2014 "),rq=n(EAe,"A",{href:!0});var est=s(rq);RUo=r(est,"TFDistilBertModel"),est.forEach(t),SUo=r(EAe," (DistilBERT model)"),EAe.forEach(t),PUo=i(x),pv=n(x,"LI",{});var yAe=s(pv);fme=n(yAe,"STRONG",{});var ost=s(fme);$Uo=r(ost,"dpr"),ost.forEach(t),IUo=r(yAe," \u2014 "),tq=n(yAe,"A",{href:!0});var rst=s(tq);jUo=r(rst,"TFDPRQuestionEncoder"),rst.forEach(t),DUo=r(yAe," (DPR model)"),yAe.forEach(t),NUo=i(x),_v=n(x,"LI",{});var wAe=s(_v);mme=n(wAe,"STRONG",{});var tst=s(mme);qUo=r(tst,"electra"),tst.forEach(t),OUo=r(wAe," \u2014 "),aq=n(wAe,"A",{href:!0});var ast=s(aq);GUo=r(ast,"TFElectraModel"),ast.forEach(t),XUo=r(wAe," (ELECTRA model)"),wAe.forEach(t),VUo=i(x),uv=n(x,"LI",{});var AAe=s(uv);gme=n(AAe,"STRONG",{});var nst=s(gme);zUo=r(nst,"flaubert"),nst.forEach(t),WUo=r(AAe," \u2014 "),nq=n(AAe,"A",{href:!0});var sst=s(nq);QUo=r(sst,"TFFlaubertModel"),sst.forEach(t),HUo=r(AAe," (FlauBERT model)"),AAe.forEach(t),UUo=i(x),Os=n(x,"LI",{});var x8=s(Os);hme=n(x8,"STRONG",{});var lst=s(hme);JUo=r(lst,"funnel"),lst.forEach(t),YUo=r(x8," \u2014 "),sq=n(x8,"A",{href:!0});var ist=s(sq);KUo=r(ist,"TFFunnelModel"),ist.forEach(t),ZUo=r(x8," or "),lq=n(x8,"A",{href:!0});var dst=s(lq);eJo=r(dst,"TFFunnelBaseModel"),dst.forEach(t),oJo=r(x8," (Funnel Transformer model)"),x8.forEach(t),rJo=i(x),bv=n(x,"LI",{});var LAe=s(bv);pme=n(LAe,"STRONG",{});var cst=s(pme);tJo=r(cst,"gpt2"),cst.forEach(t),aJo=r(LAe," \u2014 "),iq=n(LAe,"A",{href:!0});var fst=s(iq);nJo=r(fst,"TFGPT2Model"),fst.forEach(t),sJo=r(LAe," (OpenAI GPT-2 model)"),LAe.forEach(t),lJo=i(x),vv=n(x,"LI",{});var BAe=s(vv);_me=n(BAe,"STRONG",{});var mst=s(_me);iJo=r(mst,"hubert"),mst.forEach(t),dJo=r(BAe," \u2014 "),dq=n(BAe,"A",{href:!0});var gst=s(dq);cJo=r(gst,"TFHubertModel"),gst.forEach(t),fJo=r(BAe," (Hubert model)"),BAe.forEach(t),mJo=i(x),Tv=n(x,"LI",{});var xAe=s(Tv);ume=n(xAe,"STRONG",{});var hst=s(ume);gJo=r(hst,"layoutlm"),hst.forEach(t),hJo=r(xAe," \u2014 "),cq=n(xAe,"A",{href:!0});var pst=s(cq);pJo=r(pst,"TFLayoutLMModel"),pst.forEach(t),_Jo=r(xAe," (LayoutLM model)"),xAe.forEach(t),uJo=i(x),Fv=n(x,"LI",{});var kAe=s(Fv);bme=n(kAe,"STRONG",{});var _st=s(bme);bJo=r(_st,"led"),_st.forEach(t),vJo=r(kAe," \u2014 "),fq=n(kAe,"A",{href:!0});var ust=s(fq);TJo=r(ust,"TFLEDModel"),ust.forEach(t),FJo=r(kAe," (LED model)"),kAe.forEach(t),CJo=i(x),Cv=n(x,"LI",{});var RAe=s(Cv);vme=n(RAe,"STRONG",{});var bst=s(vme);MJo=r(bst,"longformer"),bst.forEach(t),EJo=r(RAe," \u2014 "),mq=n(RAe,"A",{href:!0});var vst=s(mq);yJo=r(vst,"TFLongformerModel"),vst.forEach(t),wJo=r(RAe," (Longformer model)"),RAe.forEach(t),AJo=i(x),Mv=n(x,"LI",{});var SAe=s(Mv);Tme=n(SAe,"STRONG",{});var Tst=s(Tme);LJo=r(Tst,"lxmert"),Tst.forEach(t),BJo=r(SAe," \u2014 "),gq=n(SAe,"A",{href:!0});var Fst=s(gq);xJo=r(Fst,"TFLxmertModel"),Fst.forEach(t),kJo=r(SAe," (LXMERT model)"),SAe.forEach(t),RJo=i(x),Ev=n(x,"LI",{});var PAe=s(Ev);Fme=n(PAe,"STRONG",{});var Cst=s(Fme);SJo=r(Cst,"marian"),Cst.forEach(t),PJo=r(PAe," \u2014 "),hq=n(PAe,"A",{href:!0});var Mst=s(hq);$Jo=r(Mst,"TFMarianModel"),Mst.forEach(t),IJo=r(PAe," (Marian model)"),PAe.forEach(t),jJo=i(x),yv=n(x,"LI",{});var $Ae=s(yv);Cme=n($Ae,"STRONG",{});var Est=s(Cme);DJo=r(Est,"mbart"),Est.forEach(t),NJo=r($Ae," \u2014 "),pq=n($Ae,"A",{href:!0});var yst=s(pq);qJo=r(yst,"TFMBartModel"),yst.forEach(t),OJo=r($Ae," (mBART model)"),$Ae.forEach(t),GJo=i(x),wv=n(x,"LI",{});var IAe=s(wv);Mme=n(IAe,"STRONG",{});var wst=s(Mme);XJo=r(wst,"mobilebert"),wst.forEach(t),VJo=r(IAe," \u2014 "),_q=n(IAe,"A",{href:!0});var Ast=s(_q);zJo=r(Ast,"TFMobileBertModel"),Ast.forEach(t),WJo=r(IAe," (MobileBERT model)"),IAe.forEach(t),QJo=i(x),Av=n(x,"LI",{});var jAe=s(Av);Eme=n(jAe,"STRONG",{});var Lst=s(Eme);HJo=r(Lst,"mpnet"),Lst.forEach(t),UJo=r(jAe," \u2014 "),uq=n(jAe,"A",{href:!0});var Bst=s(uq);JJo=r(Bst,"TFMPNetModel"),Bst.forEach(t),YJo=r(jAe," (MPNet model)"),jAe.forEach(t),KJo=i(x),Lv=n(x,"LI",{});var DAe=s(Lv);yme=n(DAe,"STRONG",{});var xst=s(yme);ZJo=r(xst,"mt5"),xst.forEach(t),eYo=r(DAe," \u2014 "),bq=n(DAe,"A",{href:!0});var kst=s(bq);oYo=r(kst,"TFMT5Model"),kst.forEach(t),rYo=r(DAe," (mT5 model)"),DAe.forEach(t),tYo=i(x),Bv=n(x,"LI",{});var NAe=s(Bv);wme=n(NAe,"STRONG",{});var Rst=s(wme);aYo=r(Rst,"openai-gpt"),Rst.forEach(t),nYo=r(NAe," \u2014 "),vq=n(NAe,"A",{href:!0});var Sst=s(vq);sYo=r(Sst,"TFOpenAIGPTModel"),Sst.forEach(t),lYo=r(NAe," (OpenAI GPT model)"),NAe.forEach(t),iYo=i(x),xv=n(x,"LI",{});var qAe=s(xv);Ame=n(qAe,"STRONG",{});var Pst=s(Ame);dYo=r(Pst,"pegasus"),Pst.forEach(t),cYo=r(qAe," \u2014 "),Tq=n(qAe,"A",{href:!0});var $st=s(Tq);fYo=r($st,"TFPegasusModel"),$st.forEach(t),mYo=r(qAe," (Pegasus model)"),qAe.forEach(t),gYo=i(x),kv=n(x,"LI",{});var OAe=s(kv);Lme=n(OAe,"STRONG",{});var Ist=s(Lme);hYo=r(Ist,"rembert"),Ist.forEach(t),pYo=r(OAe," \u2014 "),Fq=n(OAe,"A",{href:!0});var jst=s(Fq);_Yo=r(jst,"TFRemBertModel"),jst.forEach(t),uYo=r(OAe," (RemBERT model)"),OAe.forEach(t),bYo=i(x),Rv=n(x,"LI",{});var GAe=s(Rv);Bme=n(GAe,"STRONG",{});var Dst=s(Bme);vYo=r(Dst,"roberta"),Dst.forEach(t),TYo=r(GAe," \u2014 "),Cq=n(GAe,"A",{href:!0});var Nst=s(Cq);FYo=r(Nst,"TFRobertaModel"),Nst.forEach(t),CYo=r(GAe," (RoBERTa model)"),GAe.forEach(t),MYo=i(x),Sv=n(x,"LI",{});var XAe=s(Sv);xme=n(XAe,"STRONG",{});var qst=s(xme);EYo=r(qst,"roformer"),qst.forEach(t),yYo=r(XAe," \u2014 "),Mq=n(XAe,"A",{href:!0});var Ost=s(Mq);wYo=r(Ost,"TFRoFormerModel"),Ost.forEach(t),AYo=r(XAe," (RoFormer model)"),XAe.forEach(t),LYo=i(x),Pv=n(x,"LI",{});var VAe=s(Pv);kme=n(VAe,"STRONG",{});var Gst=s(kme);BYo=r(Gst,"speech_to_text"),Gst.forEach(t),xYo=r(VAe," \u2014 "),Eq=n(VAe,"A",{href:!0});var Xst=s(Eq);kYo=r(Xst,"TFSpeech2TextModel"),Xst.forEach(t),RYo=r(VAe," (Speech2Text model)"),VAe.forEach(t),SYo=i(x),$v=n(x,"LI",{});var zAe=s($v);Rme=n(zAe,"STRONG",{});var Vst=s(Rme);PYo=r(Vst,"t5"),Vst.forEach(t),$Yo=r(zAe," \u2014 "),yq=n(zAe,"A",{href:!0});var zst=s(yq);IYo=r(zst,"TFT5Model"),zst.forEach(t),jYo=r(zAe," (T5 model)"),zAe.forEach(t),DYo=i(x),Iv=n(x,"LI",{});var WAe=s(Iv);Sme=n(WAe,"STRONG",{});var Wst=s(Sme);NYo=r(Wst,"tapas"),Wst.forEach(t),qYo=r(WAe," \u2014 "),wq=n(WAe,"A",{href:!0});var Qst=s(wq);OYo=r(Qst,"TFTapasModel"),Qst.forEach(t),GYo=r(WAe," (TAPAS model)"),WAe.forEach(t),XYo=i(x),jv=n(x,"LI",{});var QAe=s(jv);Pme=n(QAe,"STRONG",{});var Hst=s(Pme);VYo=r(Hst,"transfo-xl"),Hst.forEach(t),zYo=r(QAe," \u2014 "),Aq=n(QAe,"A",{href:!0});var Ust=s(Aq);WYo=r(Ust,"TFTransfoXLModel"),Ust.forEach(t),QYo=r(QAe," (Transformer-XL model)"),QAe.forEach(t),HYo=i(x),Dv=n(x,"LI",{});var HAe=s(Dv);$me=n(HAe,"STRONG",{});var Jst=s($me);UYo=r(Jst,"vit"),Jst.forEach(t),JYo=r(HAe," \u2014 "),Lq=n(HAe,"A",{href:!0});var Yst=s(Lq);YYo=r(Yst,"TFViTModel"),Yst.forEach(t),KYo=r(HAe," (ViT model)"),HAe.forEach(t),ZYo=i(x),Nv=n(x,"LI",{});var UAe=s(Nv);Ime=n(UAe,"STRONG",{});var Kst=s(Ime);eKo=r(Kst,"wav2vec2"),Kst.forEach(t),oKo=r(UAe," \u2014 "),Bq=n(UAe,"A",{href:!0});var Zst=s(Bq);rKo=r(Zst,"TFWav2Vec2Model"),Zst.forEach(t),tKo=r(UAe," (Wav2Vec2 model)"),UAe.forEach(t),aKo=i(x),qv=n(x,"LI",{});var JAe=s(qv);jme=n(JAe,"STRONG",{});var elt=s(jme);nKo=r(elt,"xlm"),elt.forEach(t),sKo=r(JAe," \u2014 "),xq=n(JAe,"A",{href:!0});var olt=s(xq);lKo=r(olt,"TFXLMModel"),olt.forEach(t),iKo=r(JAe," (XLM model)"),JAe.forEach(t),dKo=i(x),Ov=n(x,"LI",{});var YAe=s(Ov);Dme=n(YAe,"STRONG",{});var rlt=s(Dme);cKo=r(rlt,"xlm-roberta"),rlt.forEach(t),fKo=r(YAe," \u2014 "),kq=n(YAe,"A",{href:!0});var tlt=s(kq);mKo=r(tlt,"TFXLMRobertaModel"),tlt.forEach(t),gKo=r(YAe," (XLM-RoBERTa model)"),YAe.forEach(t),hKo=i(x),Gv=n(x,"LI",{});var KAe=s(Gv);Nme=n(KAe,"STRONG",{});var alt=s(Nme);pKo=r(alt,"xlnet"),alt.forEach(t),_Ko=r(KAe," \u2014 "),Rq=n(KAe,"A",{href:!0});var nlt=s(Rq);uKo=r(nlt,"TFXLNetModel"),nlt.forEach(t),bKo=r(KAe," (XLNet model)"),KAe.forEach(t),x.forEach(t),vKo=i(ha),qme=n(ha,"P",{});var slt=s(qme);TKo=r(slt,"Examples:"),slt.forEach(t),FKo=i(ha),m(y6.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),kxe=i(d),pc=n(d,"H2",{class:!0});var GRe=s(pc);Xv=n(GRe,"A",{id:!0,class:!0,href:!0});var llt=s(Xv);Ome=n(llt,"SPAN",{});var ilt=s(Ome);m(w6.$$.fragment,ilt),ilt.forEach(t),llt.forEach(t),CKo=i(GRe),Gme=n(GRe,"SPAN",{});var dlt=s(Gme);MKo=r(dlt,"TFAutoModelForPreTraining"),dlt.forEach(t),GRe.forEach(t),Rxe=i(d),br=n(d,"DIV",{class:!0});var Ol=s(br);m(A6.$$.fragment,Ol),EKo=i(Ol),_c=n(Ol,"P",{});var rW=s(_c);yKo=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xme=n(rW,"CODE",{});var clt=s(Xme);wKo=r(clt,"from_pretrained()"),clt.forEach(t),AKo=r(rW,"class method or the "),Vme=n(rW,"CODE",{});var flt=s(Vme);LKo=r(flt,"from_config()"),flt.forEach(t),BKo=r(rW,`class
method.`),rW.forEach(t),xKo=i(Ol),L6=n(Ol,"P",{});var XRe=s(L6);kKo=r(XRe,"This class cannot be instantiated directly using "),zme=n(XRe,"CODE",{});var mlt=s(zme);RKo=r(mlt,"__init__()"),mlt.forEach(t),SKo=r(XRe," (throws an error)."),XRe.forEach(t),PKo=i(Ol),mt=n(Ol,"DIV",{class:!0});var Gl=s(mt);m(B6.$$.fragment,Gl),$Ko=i(Gl),Wme=n(Gl,"P",{});var glt=s(Wme);IKo=r(glt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),glt.forEach(t),jKo=i(Gl),uc=n(Gl,"P",{});var tW=s(uc);DKo=r(tW,`Note:
Loading a model from its configuration file does `),Qme=n(tW,"STRONG",{});var hlt=s(Qme);NKo=r(hlt,"not"),hlt.forEach(t),qKo=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hme=n(tW,"CODE",{});var plt=s(Hme);OKo=r(plt,"from_pretrained()"),plt.forEach(t),GKo=r(tW,"to load the model weights."),tW.forEach(t),XKo=i(Gl),Ume=n(Gl,"P",{});var _lt=s(Ume);VKo=r(_lt,"Examples:"),_lt.forEach(t),zKo=i(Gl),m(x6.$$.fragment,Gl),Gl.forEach(t),WKo=i(Ol),po=n(Ol,"DIV",{class:!0});var pa=s(po);m(k6.$$.fragment,pa),QKo=i(pa),Jme=n(pa,"P",{});var ult=s(Jme);HKo=r(ult,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ult.forEach(t),UKo=i(pa),_n=n(pa,"P",{});var gM=s(_n);JKo=r(gM,"The model class to instantiate is selected based on the "),Yme=n(gM,"CODE",{});var blt=s(Yme);YKo=r(blt,"model_type"),blt.forEach(t),KKo=r(gM,` property of the config object (either
passed as an argument or loaded from `),Kme=n(gM,"CODE",{});var vlt=s(Kme);ZKo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),eZo=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(gM,"CODE",{});var Tlt=s(Zme);oZo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),rZo=r(gM,":"),gM.forEach(t),tZo=i(pa),H=n(pa,"UL",{});var U=s(H);Vv=n(U,"LI",{});var ZAe=s(Vv);ege=n(ZAe,"STRONG",{});var Flt=s(ege);aZo=r(Flt,"albert"),Flt.forEach(t),nZo=r(ZAe," \u2014 "),Sq=n(ZAe,"A",{href:!0});var Clt=s(Sq);sZo=r(Clt,"TFAlbertForPreTraining"),Clt.forEach(t),lZo=r(ZAe," (ALBERT model)"),ZAe.forEach(t),iZo=i(U),zv=n(U,"LI",{});var e0e=s(zv);oge=n(e0e,"STRONG",{});var Mlt=s(oge);dZo=r(Mlt,"bart"),Mlt.forEach(t),cZo=r(e0e," \u2014 "),Pq=n(e0e,"A",{href:!0});var Elt=s(Pq);fZo=r(Elt,"TFBartForConditionalGeneration"),Elt.forEach(t),mZo=r(e0e," (BART model)"),e0e.forEach(t),gZo=i(U),Wv=n(U,"LI",{});var o0e=s(Wv);rge=n(o0e,"STRONG",{});var ylt=s(rge);hZo=r(ylt,"bert"),ylt.forEach(t),pZo=r(o0e," \u2014 "),$q=n(o0e,"A",{href:!0});var wlt=s($q);_Zo=r(wlt,"TFBertForPreTraining"),wlt.forEach(t),uZo=r(o0e," (BERT model)"),o0e.forEach(t),bZo=i(U),Qv=n(U,"LI",{});var r0e=s(Qv);tge=n(r0e,"STRONG",{});var Alt=s(tge);vZo=r(Alt,"camembert"),Alt.forEach(t),TZo=r(r0e," \u2014 "),Iq=n(r0e,"A",{href:!0});var Llt=s(Iq);FZo=r(Llt,"TFCamembertForMaskedLM"),Llt.forEach(t),CZo=r(r0e," (CamemBERT model)"),r0e.forEach(t),MZo=i(U),Hv=n(U,"LI",{});var t0e=s(Hv);age=n(t0e,"STRONG",{});var Blt=s(age);EZo=r(Blt,"ctrl"),Blt.forEach(t),yZo=r(t0e," \u2014 "),jq=n(t0e,"A",{href:!0});var xlt=s(jq);wZo=r(xlt,"TFCTRLLMHeadModel"),xlt.forEach(t),AZo=r(t0e," (CTRL model)"),t0e.forEach(t),LZo=i(U),Uv=n(U,"LI",{});var a0e=s(Uv);nge=n(a0e,"STRONG",{});var klt=s(nge);BZo=r(klt,"distilbert"),klt.forEach(t),xZo=r(a0e," \u2014 "),Dq=n(a0e,"A",{href:!0});var Rlt=s(Dq);kZo=r(Rlt,"TFDistilBertForMaskedLM"),Rlt.forEach(t),RZo=r(a0e," (DistilBERT model)"),a0e.forEach(t),SZo=i(U),Jv=n(U,"LI",{});var n0e=s(Jv);sge=n(n0e,"STRONG",{});var Slt=s(sge);PZo=r(Slt,"electra"),Slt.forEach(t),$Zo=r(n0e," \u2014 "),Nq=n(n0e,"A",{href:!0});var Plt=s(Nq);IZo=r(Plt,"TFElectraForPreTraining"),Plt.forEach(t),jZo=r(n0e," (ELECTRA model)"),n0e.forEach(t),DZo=i(U),Yv=n(U,"LI",{});var s0e=s(Yv);lge=n(s0e,"STRONG",{});var $lt=s(lge);NZo=r($lt,"flaubert"),$lt.forEach(t),qZo=r(s0e," \u2014 "),qq=n(s0e,"A",{href:!0});var Ilt=s(qq);OZo=r(Ilt,"TFFlaubertWithLMHeadModel"),Ilt.forEach(t),GZo=r(s0e," (FlauBERT model)"),s0e.forEach(t),XZo=i(U),Kv=n(U,"LI",{});var l0e=s(Kv);ige=n(l0e,"STRONG",{});var jlt=s(ige);VZo=r(jlt,"funnel"),jlt.forEach(t),zZo=r(l0e," \u2014 "),Oq=n(l0e,"A",{href:!0});var Dlt=s(Oq);WZo=r(Dlt,"TFFunnelForPreTraining"),Dlt.forEach(t),QZo=r(l0e," (Funnel Transformer model)"),l0e.forEach(t),HZo=i(U),Zv=n(U,"LI",{});var i0e=s(Zv);dge=n(i0e,"STRONG",{});var Nlt=s(dge);UZo=r(Nlt,"gpt2"),Nlt.forEach(t),JZo=r(i0e," \u2014 "),Gq=n(i0e,"A",{href:!0});var qlt=s(Gq);YZo=r(qlt,"TFGPT2LMHeadModel"),qlt.forEach(t),KZo=r(i0e," (OpenAI GPT-2 model)"),i0e.forEach(t),ZZo=i(U),eT=n(U,"LI",{});var d0e=s(eT);cge=n(d0e,"STRONG",{});var Olt=s(cge);eer=r(Olt,"layoutlm"),Olt.forEach(t),oer=r(d0e," \u2014 "),Xq=n(d0e,"A",{href:!0});var Glt=s(Xq);rer=r(Glt,"TFLayoutLMForMaskedLM"),Glt.forEach(t),ter=r(d0e," (LayoutLM model)"),d0e.forEach(t),aer=i(U),oT=n(U,"LI",{});var c0e=s(oT);fge=n(c0e,"STRONG",{});var Xlt=s(fge);ner=r(Xlt,"lxmert"),Xlt.forEach(t),ser=r(c0e," \u2014 "),Vq=n(c0e,"A",{href:!0});var Vlt=s(Vq);ler=r(Vlt,"TFLxmertForPreTraining"),Vlt.forEach(t),ier=r(c0e," (LXMERT model)"),c0e.forEach(t),der=i(U),rT=n(U,"LI",{});var f0e=s(rT);mge=n(f0e,"STRONG",{});var zlt=s(mge);cer=r(zlt,"mobilebert"),zlt.forEach(t),fer=r(f0e," \u2014 "),zq=n(f0e,"A",{href:!0});var Wlt=s(zq);mer=r(Wlt,"TFMobileBertForPreTraining"),Wlt.forEach(t),ger=r(f0e," (MobileBERT model)"),f0e.forEach(t),her=i(U),tT=n(U,"LI",{});var m0e=s(tT);gge=n(m0e,"STRONG",{});var Qlt=s(gge);per=r(Qlt,"mpnet"),Qlt.forEach(t),_er=r(m0e," \u2014 "),Wq=n(m0e,"A",{href:!0});var Hlt=s(Wq);uer=r(Hlt,"TFMPNetForMaskedLM"),Hlt.forEach(t),ber=r(m0e," (MPNet model)"),m0e.forEach(t),ver=i(U),aT=n(U,"LI",{});var g0e=s(aT);hge=n(g0e,"STRONG",{});var Ult=s(hge);Ter=r(Ult,"openai-gpt"),Ult.forEach(t),Fer=r(g0e," \u2014 "),Qq=n(g0e,"A",{href:!0});var Jlt=s(Qq);Cer=r(Jlt,"TFOpenAIGPTLMHeadModel"),Jlt.forEach(t),Mer=r(g0e," (OpenAI GPT model)"),g0e.forEach(t),Eer=i(U),nT=n(U,"LI",{});var h0e=s(nT);pge=n(h0e,"STRONG",{});var Ylt=s(pge);yer=r(Ylt,"roberta"),Ylt.forEach(t),wer=r(h0e," \u2014 "),Hq=n(h0e,"A",{href:!0});var Klt=s(Hq);Aer=r(Klt,"TFRobertaForMaskedLM"),Klt.forEach(t),Ler=r(h0e," (RoBERTa model)"),h0e.forEach(t),Ber=i(U),sT=n(U,"LI",{});var p0e=s(sT);_ge=n(p0e,"STRONG",{});var Zlt=s(_ge);xer=r(Zlt,"t5"),Zlt.forEach(t),ker=r(p0e," \u2014 "),Uq=n(p0e,"A",{href:!0});var eit=s(Uq);Rer=r(eit,"TFT5ForConditionalGeneration"),eit.forEach(t),Ser=r(p0e," (T5 model)"),p0e.forEach(t),Per=i(U),lT=n(U,"LI",{});var _0e=s(lT);uge=n(_0e,"STRONG",{});var oit=s(uge);$er=r(oit,"tapas"),oit.forEach(t),Ier=r(_0e," \u2014 "),Jq=n(_0e,"A",{href:!0});var rit=s(Jq);jer=r(rit,"TFTapasForMaskedLM"),rit.forEach(t),Der=r(_0e," (TAPAS model)"),_0e.forEach(t),Ner=i(U),iT=n(U,"LI",{});var u0e=s(iT);bge=n(u0e,"STRONG",{});var tit=s(bge);qer=r(tit,"transfo-xl"),tit.forEach(t),Oer=r(u0e," \u2014 "),Yq=n(u0e,"A",{href:!0});var ait=s(Yq);Ger=r(ait,"TFTransfoXLLMHeadModel"),ait.forEach(t),Xer=r(u0e," (Transformer-XL model)"),u0e.forEach(t),Ver=i(U),dT=n(U,"LI",{});var b0e=s(dT);vge=n(b0e,"STRONG",{});var nit=s(vge);zer=r(nit,"xlm"),nit.forEach(t),Wer=r(b0e," \u2014 "),Kq=n(b0e,"A",{href:!0});var sit=s(Kq);Qer=r(sit,"TFXLMWithLMHeadModel"),sit.forEach(t),Her=r(b0e," (XLM model)"),b0e.forEach(t),Uer=i(U),cT=n(U,"LI",{});var v0e=s(cT);Tge=n(v0e,"STRONG",{});var lit=s(Tge);Jer=r(lit,"xlm-roberta"),lit.forEach(t),Yer=r(v0e," \u2014 "),Zq=n(v0e,"A",{href:!0});var iit=s(Zq);Ker=r(iit,"TFXLMRobertaForMaskedLM"),iit.forEach(t),Zer=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),eor=i(U),fT=n(U,"LI",{});var T0e=s(fT);Fge=n(T0e,"STRONG",{});var dit=s(Fge);oor=r(dit,"xlnet"),dit.forEach(t),ror=r(T0e," \u2014 "),eO=n(T0e,"A",{href:!0});var cit=s(eO);tor=r(cit,"TFXLNetLMHeadModel"),cit.forEach(t),aor=r(T0e," (XLNet model)"),T0e.forEach(t),U.forEach(t),nor=i(pa),Cge=n(pa,"P",{});var fit=s(Cge);sor=r(fit,"Examples:"),fit.forEach(t),lor=i(pa),m(R6.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),Sxe=i(d),bc=n(d,"H2",{class:!0});var VRe=s(bc);mT=n(VRe,"A",{id:!0,class:!0,href:!0});var mit=s(mT);Mge=n(mit,"SPAN",{});var git=s(Mge);m(S6.$$.fragment,git),git.forEach(t),mit.forEach(t),ior=i(VRe),Ege=n(VRe,"SPAN",{});var hit=s(Ege);dor=r(hit,"TFAutoModelForCausalLM"),hit.forEach(t),VRe.forEach(t),Pxe=i(d),vr=n(d,"DIV",{class:!0});var Xl=s(vr);m(P6.$$.fragment,Xl),cor=i(Xl),vc=n(Xl,"P",{});var aW=s(vc);mor=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yge=n(aW,"CODE",{});var pit=s(yge);gor=r(pit,"from_pretrained()"),pit.forEach(t),hor=r(aW,"class method or the "),wge=n(aW,"CODE",{});var _it=s(wge);por=r(_it,"from_config()"),_it.forEach(t),_or=r(aW,`class
method.`),aW.forEach(t),uor=i(Xl),$6=n(Xl,"P",{});var zRe=s($6);bor=r(zRe,"This class cannot be instantiated directly using "),Age=n(zRe,"CODE",{});var uit=s(Age);vor=r(uit,"__init__()"),uit.forEach(t),Tor=r(zRe," (throws an error)."),zRe.forEach(t),For=i(Xl),gt=n(Xl,"DIV",{class:!0});var Vl=s(gt);m(I6.$$.fragment,Vl),Cor=i(Vl),Lge=n(Vl,"P",{});var bit=s(Lge);Mor=r(bit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bit.forEach(t),Eor=i(Vl),Tc=n(Vl,"P",{});var nW=s(Tc);yor=r(nW,`Note:
Loading a model from its configuration file does `),Bge=n(nW,"STRONG",{});var vit=s(Bge);wor=r(vit,"not"),vit.forEach(t),Aor=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xge=n(nW,"CODE",{});var Tit=s(xge);Lor=r(Tit,"from_pretrained()"),Tit.forEach(t),Bor=r(nW,"to load the model weights."),nW.forEach(t),xor=i(Vl),kge=n(Vl,"P",{});var Fit=s(kge);kor=r(Fit,"Examples:"),Fit.forEach(t),Ror=i(Vl),m(j6.$$.fragment,Vl),Vl.forEach(t),Sor=i(Xl),_o=n(Xl,"DIV",{class:!0});var _a=s(_o);m(D6.$$.fragment,_a),Por=i(_a),Rge=n(_a,"P",{});var Cit=s(Rge);$or=r(Cit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cit.forEach(t),Ior=i(_a),un=n(_a,"P",{});var hM=s(un);jor=r(hM,"The model class to instantiate is selected based on the "),Sge=n(hM,"CODE",{});var Mit=s(Sge);Dor=r(Mit,"model_type"),Mit.forEach(t),Nor=r(hM,` property of the config object (either
passed as an argument or loaded from `),Pge=n(hM,"CODE",{});var Eit=s(Pge);qor=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),Oor=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(hM,"CODE",{});var yit=s($ge);Gor=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),Xor=r(hM,":"),hM.forEach(t),Vor=i(_a),he=n(_a,"UL",{});var Me=s(he);gT=n(Me,"LI",{});var F0e=s(gT);Ige=n(F0e,"STRONG",{});var wit=s(Ige);zor=r(wit,"bert"),wit.forEach(t),Wor=r(F0e," \u2014 "),oO=n(F0e,"A",{href:!0});var Ait=s(oO);Qor=r(Ait,"TFBertLMHeadModel"),Ait.forEach(t),Hor=r(F0e," (BERT model)"),F0e.forEach(t),Uor=i(Me),hT=n(Me,"LI",{});var C0e=s(hT);jge=n(C0e,"STRONG",{});var Lit=s(jge);Jor=r(Lit,"ctrl"),Lit.forEach(t),Yor=r(C0e," \u2014 "),rO=n(C0e,"A",{href:!0});var Bit=s(rO);Kor=r(Bit,"TFCTRLLMHeadModel"),Bit.forEach(t),Zor=r(C0e," (CTRL model)"),C0e.forEach(t),err=i(Me),pT=n(Me,"LI",{});var M0e=s(pT);Dge=n(M0e,"STRONG",{});var xit=s(Dge);orr=r(xit,"gpt2"),xit.forEach(t),rrr=r(M0e," \u2014 "),tO=n(M0e,"A",{href:!0});var kit=s(tO);trr=r(kit,"TFGPT2LMHeadModel"),kit.forEach(t),arr=r(M0e," (OpenAI GPT-2 model)"),M0e.forEach(t),nrr=i(Me),_T=n(Me,"LI",{});var E0e=s(_T);Nge=n(E0e,"STRONG",{});var Rit=s(Nge);srr=r(Rit,"openai-gpt"),Rit.forEach(t),lrr=r(E0e," \u2014 "),aO=n(E0e,"A",{href:!0});var Sit=s(aO);irr=r(Sit,"TFOpenAIGPTLMHeadModel"),Sit.forEach(t),drr=r(E0e," (OpenAI GPT model)"),E0e.forEach(t),crr=i(Me),uT=n(Me,"LI",{});var y0e=s(uT);qge=n(y0e,"STRONG",{});var Pit=s(qge);frr=r(Pit,"rembert"),Pit.forEach(t),mrr=r(y0e," \u2014 "),nO=n(y0e,"A",{href:!0});var $it=s(nO);grr=r($it,"TFRemBertForCausalLM"),$it.forEach(t),hrr=r(y0e," (RemBERT model)"),y0e.forEach(t),prr=i(Me),bT=n(Me,"LI",{});var w0e=s(bT);Oge=n(w0e,"STRONG",{});var Iit=s(Oge);_rr=r(Iit,"roberta"),Iit.forEach(t),urr=r(w0e," \u2014 "),sO=n(w0e,"A",{href:!0});var jit=s(sO);brr=r(jit,"TFRobertaForCausalLM"),jit.forEach(t),vrr=r(w0e," (RoBERTa model)"),w0e.forEach(t),Trr=i(Me),vT=n(Me,"LI",{});var A0e=s(vT);Gge=n(A0e,"STRONG",{});var Dit=s(Gge);Frr=r(Dit,"roformer"),Dit.forEach(t),Crr=r(A0e," \u2014 "),lO=n(A0e,"A",{href:!0});var Nit=s(lO);Mrr=r(Nit,"TFRoFormerForCausalLM"),Nit.forEach(t),Err=r(A0e," (RoFormer model)"),A0e.forEach(t),yrr=i(Me),TT=n(Me,"LI",{});var L0e=s(TT);Xge=n(L0e,"STRONG",{});var qit=s(Xge);wrr=r(qit,"transfo-xl"),qit.forEach(t),Arr=r(L0e," \u2014 "),iO=n(L0e,"A",{href:!0});var Oit=s(iO);Lrr=r(Oit,"TFTransfoXLLMHeadModel"),Oit.forEach(t),Brr=r(L0e," (Transformer-XL model)"),L0e.forEach(t),xrr=i(Me),FT=n(Me,"LI",{});var B0e=s(FT);Vge=n(B0e,"STRONG",{});var Git=s(Vge);krr=r(Git,"xlm"),Git.forEach(t),Rrr=r(B0e," \u2014 "),dO=n(B0e,"A",{href:!0});var Xit=s(dO);Srr=r(Xit,"TFXLMWithLMHeadModel"),Xit.forEach(t),Prr=r(B0e," (XLM model)"),B0e.forEach(t),$rr=i(Me),CT=n(Me,"LI",{});var x0e=s(CT);zge=n(x0e,"STRONG",{});var Vit=s(zge);Irr=r(Vit,"xlnet"),Vit.forEach(t),jrr=r(x0e," \u2014 "),cO=n(x0e,"A",{href:!0});var zit=s(cO);Drr=r(zit,"TFXLNetLMHeadModel"),zit.forEach(t),Nrr=r(x0e," (XLNet model)"),x0e.forEach(t),Me.forEach(t),qrr=i(_a),Wge=n(_a,"P",{});var Wit=s(Wge);Orr=r(Wit,"Examples:"),Wit.forEach(t),Grr=i(_a),m(N6.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),$xe=i(d),Fc=n(d,"H2",{class:!0});var WRe=s(Fc);MT=n(WRe,"A",{id:!0,class:!0,href:!0});var Qit=s(MT);Qge=n(Qit,"SPAN",{});var Hit=s(Qge);m(q6.$$.fragment,Hit),Hit.forEach(t),Qit.forEach(t),Xrr=i(WRe),Hge=n(WRe,"SPAN",{});var Uit=s(Hge);Vrr=r(Uit,"TFAutoModelForImageClassification"),Uit.forEach(t),WRe.forEach(t),Ixe=i(d),Tr=n(d,"DIV",{class:!0});var zl=s(Tr);m(O6.$$.fragment,zl),zrr=i(zl),Cc=n(zl,"P",{});var sW=s(Cc);Wrr=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uge=n(sW,"CODE",{});var Jit=s(Uge);Qrr=r(Jit,"from_pretrained()"),Jit.forEach(t),Hrr=r(sW,"class method or the "),Jge=n(sW,"CODE",{});var Yit=s(Jge);Urr=r(Yit,"from_config()"),Yit.forEach(t),Jrr=r(sW,`class
method.`),sW.forEach(t),Yrr=i(zl),G6=n(zl,"P",{});var QRe=s(G6);Krr=r(QRe,"This class cannot be instantiated directly using "),Yge=n(QRe,"CODE",{});var Kit=s(Yge);Zrr=r(Kit,"__init__()"),Kit.forEach(t),etr=r(QRe," (throws an error)."),QRe.forEach(t),otr=i(zl),ht=n(zl,"DIV",{class:!0});var Wl=s(ht);m(X6.$$.fragment,Wl),rtr=i(Wl),Kge=n(Wl,"P",{});var Zit=s(Kge);ttr=r(Zit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zit.forEach(t),atr=i(Wl),Mc=n(Wl,"P",{});var lW=s(Mc);ntr=r(lW,`Note:
Loading a model from its configuration file does `),Zge=n(lW,"STRONG",{});var edt=s(Zge);str=r(edt,"not"),edt.forEach(t),ltr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=n(lW,"CODE",{});var odt=s(ehe);itr=r(odt,"from_pretrained()"),odt.forEach(t),dtr=r(lW,"to load the model weights."),lW.forEach(t),ctr=i(Wl),ohe=n(Wl,"P",{});var rdt=s(ohe);ftr=r(rdt,"Examples:"),rdt.forEach(t),mtr=i(Wl),m(V6.$$.fragment,Wl),Wl.forEach(t),gtr=i(zl),uo=n(zl,"DIV",{class:!0});var ua=s(uo);m(z6.$$.fragment,ua),htr=i(ua),rhe=n(ua,"P",{});var tdt=s(rhe);ptr=r(tdt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tdt.forEach(t),_tr=i(ua),bn=n(ua,"P",{});var pM=s(bn);utr=r(pM,"The model class to instantiate is selected based on the "),the=n(pM,"CODE",{});var adt=s(the);btr=r(adt,"model_type"),adt.forEach(t),vtr=r(pM,` property of the config object (either
passed as an argument or loaded from `),ahe=n(pM,"CODE",{});var ndt=s(ahe);Ttr=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),Ftr=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(pM,"CODE",{});var sdt=s(nhe);Ctr=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),Mtr=r(pM,":"),pM.forEach(t),Etr=i(ua),W6=n(ua,"UL",{});var HRe=s(W6);ET=n(HRe,"LI",{});var k0e=s(ET);she=n(k0e,"STRONG",{});var ldt=s(she);ytr=r(ldt,"convnext"),ldt.forEach(t),wtr=r(k0e," \u2014 "),fO=n(k0e,"A",{href:!0});var idt=s(fO);Atr=r(idt,"TFConvNextForImageClassification"),idt.forEach(t),Ltr=r(k0e," (ConvNext model)"),k0e.forEach(t),Btr=i(HRe),yT=n(HRe,"LI",{});var R0e=s(yT);lhe=n(R0e,"STRONG",{});var ddt=s(lhe);xtr=r(ddt,"vit"),ddt.forEach(t),ktr=r(R0e," \u2014 "),mO=n(R0e,"A",{href:!0});var cdt=s(mO);Rtr=r(cdt,"TFViTForImageClassification"),cdt.forEach(t),Str=r(R0e," (ViT model)"),R0e.forEach(t),HRe.forEach(t),Ptr=i(ua),ihe=n(ua,"P",{});var fdt=s(ihe);$tr=r(fdt,"Examples:"),fdt.forEach(t),Itr=i(ua),m(Q6.$$.fragment,ua),ua.forEach(t),zl.forEach(t),jxe=i(d),Ec=n(d,"H2",{class:!0});var URe=s(Ec);wT=n(URe,"A",{id:!0,class:!0,href:!0});var mdt=s(wT);dhe=n(mdt,"SPAN",{});var gdt=s(dhe);m(H6.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),jtr=i(URe),che=n(URe,"SPAN",{});var hdt=s(che);Dtr=r(hdt,"TFAutoModelForMaskedLM"),hdt.forEach(t),URe.forEach(t),Dxe=i(d),Fr=n(d,"DIV",{class:!0});var Ql=s(Fr);m(U6.$$.fragment,Ql),Ntr=i(Ql),yc=n(Ql,"P",{});var iW=s(yc);qtr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fhe=n(iW,"CODE",{});var pdt=s(fhe);Otr=r(pdt,"from_pretrained()"),pdt.forEach(t),Gtr=r(iW,"class method or the "),mhe=n(iW,"CODE",{});var _dt=s(mhe);Xtr=r(_dt,"from_config()"),_dt.forEach(t),Vtr=r(iW,`class
method.`),iW.forEach(t),ztr=i(Ql),J6=n(Ql,"P",{});var JRe=s(J6);Wtr=r(JRe,"This class cannot be instantiated directly using "),ghe=n(JRe,"CODE",{});var udt=s(ghe);Qtr=r(udt,"__init__()"),udt.forEach(t),Htr=r(JRe," (throws an error)."),JRe.forEach(t),Utr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(Y6.$$.fragment,Hl),Jtr=i(Hl),hhe=n(Hl,"P",{});var bdt=s(hhe);Ytr=r(bdt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bdt.forEach(t),Ktr=i(Hl),wc=n(Hl,"P",{});var dW=s(wc);Ztr=r(dW,`Note:
Loading a model from its configuration file does `),phe=n(dW,"STRONG",{});var vdt=s(phe);ear=r(vdt,"not"),vdt.forEach(t),oar=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=n(dW,"CODE",{});var Tdt=s(_he);rar=r(Tdt,"from_pretrained()"),Tdt.forEach(t),tar=r(dW,"to load the model weights."),dW.forEach(t),aar=i(Hl),uhe=n(Hl,"P",{});var Fdt=s(uhe);nar=r(Fdt,"Examples:"),Fdt.forEach(t),sar=i(Hl),m(K6.$$.fragment,Hl),Hl.forEach(t),lar=i(Ql),bo=n(Ql,"DIV",{class:!0});var ba=s(bo);m(Z6.$$.fragment,ba),iar=i(ba),bhe=n(ba,"P",{});var Cdt=s(bhe);dar=r(Cdt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cdt.forEach(t),car=i(ba),vn=n(ba,"P",{});var _M=s(vn);far=r(_M,"The model class to instantiate is selected based on the "),vhe=n(_M,"CODE",{});var Mdt=s(vhe);mar=r(Mdt,"model_type"),Mdt.forEach(t),gar=r(_M,` property of the config object (either
passed as an argument or loaded from `),The=n(_M,"CODE",{});var Edt=s(The);har=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),par=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(_M,"CODE",{});var ydt=s(Fhe);_ar=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),uar=r(_M,":"),_M.forEach(t),bar=i(ba),Y=n(ba,"UL",{});var ee=s(Y);AT=n(ee,"LI",{});var S0e=s(AT);Che=n(S0e,"STRONG",{});var wdt=s(Che);Tar=r(wdt,"albert"),wdt.forEach(t),Far=r(S0e," \u2014 "),gO=n(S0e,"A",{href:!0});var Adt=s(gO);Car=r(Adt,"TFAlbertForMaskedLM"),Adt.forEach(t),Mar=r(S0e," (ALBERT model)"),S0e.forEach(t),Ear=i(ee),LT=n(ee,"LI",{});var P0e=s(LT);Mhe=n(P0e,"STRONG",{});var Ldt=s(Mhe);yar=r(Ldt,"bert"),Ldt.forEach(t),war=r(P0e," \u2014 "),hO=n(P0e,"A",{href:!0});var Bdt=s(hO);Aar=r(Bdt,"TFBertForMaskedLM"),Bdt.forEach(t),Lar=r(P0e," (BERT model)"),P0e.forEach(t),Bar=i(ee),BT=n(ee,"LI",{});var $0e=s(BT);Ehe=n($0e,"STRONG",{});var xdt=s(Ehe);xar=r(xdt,"camembert"),xdt.forEach(t),kar=r($0e," \u2014 "),pO=n($0e,"A",{href:!0});var kdt=s(pO);Rar=r(kdt,"TFCamembertForMaskedLM"),kdt.forEach(t),Sar=r($0e," (CamemBERT model)"),$0e.forEach(t),Par=i(ee),xT=n(ee,"LI",{});var I0e=s(xT);yhe=n(I0e,"STRONG",{});var Rdt=s(yhe);$ar=r(Rdt,"convbert"),Rdt.forEach(t),Iar=r(I0e," \u2014 "),_O=n(I0e,"A",{href:!0});var Sdt=s(_O);jar=r(Sdt,"TFConvBertForMaskedLM"),Sdt.forEach(t),Dar=r(I0e," (ConvBERT model)"),I0e.forEach(t),Nar=i(ee),kT=n(ee,"LI",{});var j0e=s(kT);whe=n(j0e,"STRONG",{});var Pdt=s(whe);qar=r(Pdt,"deberta"),Pdt.forEach(t),Oar=r(j0e," \u2014 "),uO=n(j0e,"A",{href:!0});var $dt=s(uO);Gar=r($dt,"TFDebertaForMaskedLM"),$dt.forEach(t),Xar=r(j0e," (DeBERTa model)"),j0e.forEach(t),Var=i(ee),RT=n(ee,"LI",{});var D0e=s(RT);Ahe=n(D0e,"STRONG",{});var Idt=s(Ahe);zar=r(Idt,"deberta-v2"),Idt.forEach(t),War=r(D0e," \u2014 "),bO=n(D0e,"A",{href:!0});var jdt=s(bO);Qar=r(jdt,"TFDebertaV2ForMaskedLM"),jdt.forEach(t),Har=r(D0e," (DeBERTa-v2 model)"),D0e.forEach(t),Uar=i(ee),ST=n(ee,"LI",{});var N0e=s(ST);Lhe=n(N0e,"STRONG",{});var Ddt=s(Lhe);Jar=r(Ddt,"distilbert"),Ddt.forEach(t),Yar=r(N0e," \u2014 "),vO=n(N0e,"A",{href:!0});var Ndt=s(vO);Kar=r(Ndt,"TFDistilBertForMaskedLM"),Ndt.forEach(t),Zar=r(N0e," (DistilBERT model)"),N0e.forEach(t),enr=i(ee),PT=n(ee,"LI",{});var q0e=s(PT);Bhe=n(q0e,"STRONG",{});var qdt=s(Bhe);onr=r(qdt,"electra"),qdt.forEach(t),rnr=r(q0e," \u2014 "),TO=n(q0e,"A",{href:!0});var Odt=s(TO);tnr=r(Odt,"TFElectraForMaskedLM"),Odt.forEach(t),anr=r(q0e," (ELECTRA model)"),q0e.forEach(t),nnr=i(ee),$T=n(ee,"LI",{});var O0e=s($T);xhe=n(O0e,"STRONG",{});var Gdt=s(xhe);snr=r(Gdt,"flaubert"),Gdt.forEach(t),lnr=r(O0e," \u2014 "),FO=n(O0e,"A",{href:!0});var Xdt=s(FO);inr=r(Xdt,"TFFlaubertWithLMHeadModel"),Xdt.forEach(t),dnr=r(O0e," (FlauBERT model)"),O0e.forEach(t),cnr=i(ee),IT=n(ee,"LI",{});var G0e=s(IT);khe=n(G0e,"STRONG",{});var Vdt=s(khe);fnr=r(Vdt,"funnel"),Vdt.forEach(t),mnr=r(G0e," \u2014 "),CO=n(G0e,"A",{href:!0});var zdt=s(CO);gnr=r(zdt,"TFFunnelForMaskedLM"),zdt.forEach(t),hnr=r(G0e," (Funnel Transformer model)"),G0e.forEach(t),pnr=i(ee),jT=n(ee,"LI",{});var X0e=s(jT);Rhe=n(X0e,"STRONG",{});var Wdt=s(Rhe);_nr=r(Wdt,"layoutlm"),Wdt.forEach(t),unr=r(X0e," \u2014 "),MO=n(X0e,"A",{href:!0});var Qdt=s(MO);bnr=r(Qdt,"TFLayoutLMForMaskedLM"),Qdt.forEach(t),vnr=r(X0e," (LayoutLM model)"),X0e.forEach(t),Tnr=i(ee),DT=n(ee,"LI",{});var V0e=s(DT);She=n(V0e,"STRONG",{});var Hdt=s(She);Fnr=r(Hdt,"longformer"),Hdt.forEach(t),Cnr=r(V0e," \u2014 "),EO=n(V0e,"A",{href:!0});var Udt=s(EO);Mnr=r(Udt,"TFLongformerForMaskedLM"),Udt.forEach(t),Enr=r(V0e," (Longformer model)"),V0e.forEach(t),ynr=i(ee),NT=n(ee,"LI",{});var z0e=s(NT);Phe=n(z0e,"STRONG",{});var Jdt=s(Phe);wnr=r(Jdt,"mobilebert"),Jdt.forEach(t),Anr=r(z0e," \u2014 "),yO=n(z0e,"A",{href:!0});var Ydt=s(yO);Lnr=r(Ydt,"TFMobileBertForMaskedLM"),Ydt.forEach(t),Bnr=r(z0e," (MobileBERT model)"),z0e.forEach(t),xnr=i(ee),qT=n(ee,"LI",{});var W0e=s(qT);$he=n(W0e,"STRONG",{});var Kdt=s($he);knr=r(Kdt,"mpnet"),Kdt.forEach(t),Rnr=r(W0e," \u2014 "),wO=n(W0e,"A",{href:!0});var Zdt=s(wO);Snr=r(Zdt,"TFMPNetForMaskedLM"),Zdt.forEach(t),Pnr=r(W0e," (MPNet model)"),W0e.forEach(t),$nr=i(ee),OT=n(ee,"LI",{});var Q0e=s(OT);Ihe=n(Q0e,"STRONG",{});var ect=s(Ihe);Inr=r(ect,"rembert"),ect.forEach(t),jnr=r(Q0e," \u2014 "),AO=n(Q0e,"A",{href:!0});var oct=s(AO);Dnr=r(oct,"TFRemBertForMaskedLM"),oct.forEach(t),Nnr=r(Q0e," (RemBERT model)"),Q0e.forEach(t),qnr=i(ee),GT=n(ee,"LI",{});var H0e=s(GT);jhe=n(H0e,"STRONG",{});var rct=s(jhe);Onr=r(rct,"roberta"),rct.forEach(t),Gnr=r(H0e," \u2014 "),LO=n(H0e,"A",{href:!0});var tct=s(LO);Xnr=r(tct,"TFRobertaForMaskedLM"),tct.forEach(t),Vnr=r(H0e," (RoBERTa model)"),H0e.forEach(t),znr=i(ee),XT=n(ee,"LI",{});var U0e=s(XT);Dhe=n(U0e,"STRONG",{});var act=s(Dhe);Wnr=r(act,"roformer"),act.forEach(t),Qnr=r(U0e," \u2014 "),BO=n(U0e,"A",{href:!0});var nct=s(BO);Hnr=r(nct,"TFRoFormerForMaskedLM"),nct.forEach(t),Unr=r(U0e," (RoFormer model)"),U0e.forEach(t),Jnr=i(ee),VT=n(ee,"LI",{});var J0e=s(VT);Nhe=n(J0e,"STRONG",{});var sct=s(Nhe);Ynr=r(sct,"tapas"),sct.forEach(t),Knr=r(J0e," \u2014 "),xO=n(J0e,"A",{href:!0});var lct=s(xO);Znr=r(lct,"TFTapasForMaskedLM"),lct.forEach(t),esr=r(J0e," (TAPAS model)"),J0e.forEach(t),osr=i(ee),zT=n(ee,"LI",{});var Y0e=s(zT);qhe=n(Y0e,"STRONG",{});var ict=s(qhe);rsr=r(ict,"xlm"),ict.forEach(t),tsr=r(Y0e," \u2014 "),kO=n(Y0e,"A",{href:!0});var dct=s(kO);asr=r(dct,"TFXLMWithLMHeadModel"),dct.forEach(t),nsr=r(Y0e," (XLM model)"),Y0e.forEach(t),ssr=i(ee),WT=n(ee,"LI",{});var K0e=s(WT);Ohe=n(K0e,"STRONG",{});var cct=s(Ohe);lsr=r(cct,"xlm-roberta"),cct.forEach(t),isr=r(K0e," \u2014 "),RO=n(K0e,"A",{href:!0});var fct=s(RO);dsr=r(fct,"TFXLMRobertaForMaskedLM"),fct.forEach(t),csr=r(K0e," (XLM-RoBERTa model)"),K0e.forEach(t),ee.forEach(t),fsr=i(ba),Ghe=n(ba,"P",{});var mct=s(Ghe);msr=r(mct,"Examples:"),mct.forEach(t),gsr=i(ba),m(eA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),Nxe=i(d),Ac=n(d,"H2",{class:!0});var YRe=s(Ac);QT=n(YRe,"A",{id:!0,class:!0,href:!0});var gct=s(QT);Xhe=n(gct,"SPAN",{});var hct=s(Xhe);m(oA.$$.fragment,hct),hct.forEach(t),gct.forEach(t),hsr=i(YRe),Vhe=n(YRe,"SPAN",{});var pct=s(Vhe);psr=r(pct,"TFAutoModelForSeq2SeqLM"),pct.forEach(t),YRe.forEach(t),qxe=i(d),Cr=n(d,"DIV",{class:!0});var Ul=s(Cr);m(rA.$$.fragment,Ul),_sr=i(Ul),Lc=n(Ul,"P",{});var cW=s(Lc);usr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zhe=n(cW,"CODE",{});var _ct=s(zhe);bsr=r(_ct,"from_pretrained()"),_ct.forEach(t),vsr=r(cW,"class method or the "),Whe=n(cW,"CODE",{});var uct=s(Whe);Tsr=r(uct,"from_config()"),uct.forEach(t),Fsr=r(cW,`class
method.`),cW.forEach(t),Csr=i(Ul),tA=n(Ul,"P",{});var KRe=s(tA);Msr=r(KRe,"This class cannot be instantiated directly using "),Qhe=n(KRe,"CODE",{});var bct=s(Qhe);Esr=r(bct,"__init__()"),bct.forEach(t),ysr=r(KRe," (throws an error)."),KRe.forEach(t),wsr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(aA.$$.fragment,Jl),Asr=i(Jl),Hhe=n(Jl,"P",{});var vct=s(Hhe);Lsr=r(vct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vct.forEach(t),Bsr=i(Jl),Bc=n(Jl,"P",{});var fW=s(Bc);xsr=r(fW,`Note:
Loading a model from its configuration file does `),Uhe=n(fW,"STRONG",{});var Tct=s(Uhe);ksr=r(Tct,"not"),Tct.forEach(t),Rsr=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jhe=n(fW,"CODE",{});var Fct=s(Jhe);Ssr=r(Fct,"from_pretrained()"),Fct.forEach(t),Psr=r(fW,"to load the model weights."),fW.forEach(t),$sr=i(Jl),Yhe=n(Jl,"P",{});var Cct=s(Yhe);Isr=r(Cct,"Examples:"),Cct.forEach(t),jsr=i(Jl),m(nA.$$.fragment,Jl),Jl.forEach(t),Dsr=i(Ul),vo=n(Ul,"DIV",{class:!0});var va=s(vo);m(sA.$$.fragment,va),Nsr=i(va),Khe=n(va,"P",{});var Mct=s(Khe);qsr=r(Mct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mct.forEach(t),Osr=i(va),Tn=n(va,"P",{});var uM=s(Tn);Gsr=r(uM,"The model class to instantiate is selected based on the "),Zhe=n(uM,"CODE",{});var Ect=s(Zhe);Xsr=r(Ect,"model_type"),Ect.forEach(t),Vsr=r(uM,` property of the config object (either
passed as an argument or loaded from `),epe=n(uM,"CODE",{});var yct=s(epe);zsr=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),Wsr=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(uM,"CODE",{});var wct=s(ope);Qsr=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),Hsr=r(uM,":"),uM.forEach(t),Usr=i(va),pe=n(va,"UL",{});var Ee=s(pe);HT=n(Ee,"LI",{});var Z0e=s(HT);rpe=n(Z0e,"STRONG",{});var Act=s(rpe);Jsr=r(Act,"bart"),Act.forEach(t),Ysr=r(Z0e," \u2014 "),SO=n(Z0e,"A",{href:!0});var Lct=s(SO);Ksr=r(Lct,"TFBartForConditionalGeneration"),Lct.forEach(t),Zsr=r(Z0e," (BART model)"),Z0e.forEach(t),elr=i(Ee),UT=n(Ee,"LI",{});var eLe=s(UT);tpe=n(eLe,"STRONG",{});var Bct=s(tpe);olr=r(Bct,"blenderbot"),Bct.forEach(t),rlr=r(eLe," \u2014 "),PO=n(eLe,"A",{href:!0});var xct=s(PO);tlr=r(xct,"TFBlenderbotForConditionalGeneration"),xct.forEach(t),alr=r(eLe," (Blenderbot model)"),eLe.forEach(t),nlr=i(Ee),JT=n(Ee,"LI",{});var oLe=s(JT);ape=n(oLe,"STRONG",{});var kct=s(ape);slr=r(kct,"blenderbot-small"),kct.forEach(t),llr=r(oLe," \u2014 "),$O=n(oLe,"A",{href:!0});var Rct=s($O);ilr=r(Rct,"TFBlenderbotSmallForConditionalGeneration"),Rct.forEach(t),dlr=r(oLe," (BlenderbotSmall model)"),oLe.forEach(t),clr=i(Ee),YT=n(Ee,"LI",{});var rLe=s(YT);npe=n(rLe,"STRONG",{});var Sct=s(npe);flr=r(Sct,"encoder-decoder"),Sct.forEach(t),mlr=r(rLe," \u2014 "),IO=n(rLe,"A",{href:!0});var Pct=s(IO);glr=r(Pct,"TFEncoderDecoderModel"),Pct.forEach(t),hlr=r(rLe," (Encoder decoder model)"),rLe.forEach(t),plr=i(Ee),KT=n(Ee,"LI",{});var tLe=s(KT);spe=n(tLe,"STRONG",{});var $ct=s(spe);_lr=r($ct,"led"),$ct.forEach(t),ulr=r(tLe," \u2014 "),jO=n(tLe,"A",{href:!0});var Ict=s(jO);blr=r(Ict,"TFLEDForConditionalGeneration"),Ict.forEach(t),vlr=r(tLe," (LED model)"),tLe.forEach(t),Tlr=i(Ee),ZT=n(Ee,"LI",{});var aLe=s(ZT);lpe=n(aLe,"STRONG",{});var jct=s(lpe);Flr=r(jct,"marian"),jct.forEach(t),Clr=r(aLe," \u2014 "),DO=n(aLe,"A",{href:!0});var Dct=s(DO);Mlr=r(Dct,"TFMarianMTModel"),Dct.forEach(t),Elr=r(aLe," (Marian model)"),aLe.forEach(t),ylr=i(Ee),eF=n(Ee,"LI",{});var nLe=s(eF);ipe=n(nLe,"STRONG",{});var Nct=s(ipe);wlr=r(Nct,"mbart"),Nct.forEach(t),Alr=r(nLe," \u2014 "),NO=n(nLe,"A",{href:!0});var qct=s(NO);Llr=r(qct,"TFMBartForConditionalGeneration"),qct.forEach(t),Blr=r(nLe," (mBART model)"),nLe.forEach(t),xlr=i(Ee),oF=n(Ee,"LI",{});var sLe=s(oF);dpe=n(sLe,"STRONG",{});var Oct=s(dpe);klr=r(Oct,"mt5"),Oct.forEach(t),Rlr=r(sLe," \u2014 "),qO=n(sLe,"A",{href:!0});var Gct=s(qO);Slr=r(Gct,"TFMT5ForConditionalGeneration"),Gct.forEach(t),Plr=r(sLe," (mT5 model)"),sLe.forEach(t),$lr=i(Ee),rF=n(Ee,"LI",{});var lLe=s(rF);cpe=n(lLe,"STRONG",{});var Xct=s(cpe);Ilr=r(Xct,"pegasus"),Xct.forEach(t),jlr=r(lLe," \u2014 "),OO=n(lLe,"A",{href:!0});var Vct=s(OO);Dlr=r(Vct,"TFPegasusForConditionalGeneration"),Vct.forEach(t),Nlr=r(lLe," (Pegasus model)"),lLe.forEach(t),qlr=i(Ee),tF=n(Ee,"LI",{});var iLe=s(tF);fpe=n(iLe,"STRONG",{});var zct=s(fpe);Olr=r(zct,"t5"),zct.forEach(t),Glr=r(iLe," \u2014 "),GO=n(iLe,"A",{href:!0});var Wct=s(GO);Xlr=r(Wct,"TFT5ForConditionalGeneration"),Wct.forEach(t),Vlr=r(iLe," (T5 model)"),iLe.forEach(t),Ee.forEach(t),zlr=i(va),mpe=n(va,"P",{});var Qct=s(mpe);Wlr=r(Qct,"Examples:"),Qct.forEach(t),Qlr=i(va),m(lA.$$.fragment,va),va.forEach(t),Ul.forEach(t),Oxe=i(d),xc=n(d,"H2",{class:!0});var ZRe=s(xc);aF=n(ZRe,"A",{id:!0,class:!0,href:!0});var Hct=s(aF);gpe=n(Hct,"SPAN",{});var Uct=s(gpe);m(iA.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),Hlr=i(ZRe),hpe=n(ZRe,"SPAN",{});var Jct=s(hpe);Ulr=r(Jct,"TFAutoModelForSequenceClassification"),Jct.forEach(t),ZRe.forEach(t),Gxe=i(d),Mr=n(d,"DIV",{class:!0});var Yl=s(Mr);m(dA.$$.fragment,Yl),Jlr=i(Yl),kc=n(Yl,"P",{});var mW=s(kc);Ylr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ppe=n(mW,"CODE",{});var Yct=s(ppe);Klr=r(Yct,"from_pretrained()"),Yct.forEach(t),Zlr=r(mW,"class method or the "),_pe=n(mW,"CODE",{});var Kct=s(_pe);eir=r(Kct,"from_config()"),Kct.forEach(t),oir=r(mW,`class
method.`),mW.forEach(t),rir=i(Yl),cA=n(Yl,"P",{});var eSe=s(cA);tir=r(eSe,"This class cannot be instantiated directly using "),upe=n(eSe,"CODE",{});var Zct=s(upe);air=r(Zct,"__init__()"),Zct.forEach(t),nir=r(eSe," (throws an error)."),eSe.forEach(t),sir=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(fA.$$.fragment,Kl),lir=i(Kl),bpe=n(Kl,"P",{});var eft=s(bpe);iir=r(eft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eft.forEach(t),dir=i(Kl),Rc=n(Kl,"P",{});var gW=s(Rc);cir=r(gW,`Note:
Loading a model from its configuration file does `),vpe=n(gW,"STRONG",{});var oft=s(vpe);fir=r(oft,"not"),oft.forEach(t),mir=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tpe=n(gW,"CODE",{});var rft=s(Tpe);gir=r(rft,"from_pretrained()"),rft.forEach(t),hir=r(gW,"to load the model weights."),gW.forEach(t),pir=i(Kl),Fpe=n(Kl,"P",{});var tft=s(Fpe);_ir=r(tft,"Examples:"),tft.forEach(t),uir=i(Kl),m(mA.$$.fragment,Kl),Kl.forEach(t),bir=i(Yl),To=n(Yl,"DIV",{class:!0});var Ta=s(To);m(gA.$$.fragment,Ta),vir=i(Ta),Cpe=n(Ta,"P",{});var aft=s(Cpe);Tir=r(aft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aft.forEach(t),Fir=i(Ta),Fn=n(Ta,"P",{});var bM=s(Fn);Cir=r(bM,"The model class to instantiate is selected based on the "),Mpe=n(bM,"CODE",{});var nft=s(Mpe);Mir=r(nft,"model_type"),nft.forEach(t),Eir=r(bM,` property of the config object (either
passed as an argument or loaded from `),Epe=n(bM,"CODE",{});var sft=s(Epe);yir=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),wir=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(bM,"CODE",{});var lft=s(ype);Air=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),Lir=r(bM,":"),bM.forEach(t),Bir=i(Ta),V=n(Ta,"UL",{});var W=s(V);nF=n(W,"LI",{});var dLe=s(nF);wpe=n(dLe,"STRONG",{});var ift=s(wpe);xir=r(ift,"albert"),ift.forEach(t),kir=r(dLe," \u2014 "),XO=n(dLe,"A",{href:!0});var dft=s(XO);Rir=r(dft,"TFAlbertForSequenceClassification"),dft.forEach(t),Sir=r(dLe," (ALBERT model)"),dLe.forEach(t),Pir=i(W),sF=n(W,"LI",{});var cLe=s(sF);Ape=n(cLe,"STRONG",{});var cft=s(Ape);$ir=r(cft,"bert"),cft.forEach(t),Iir=r(cLe," \u2014 "),VO=n(cLe,"A",{href:!0});var fft=s(VO);jir=r(fft,"TFBertForSequenceClassification"),fft.forEach(t),Dir=r(cLe," (BERT model)"),cLe.forEach(t),Nir=i(W),lF=n(W,"LI",{});var fLe=s(lF);Lpe=n(fLe,"STRONG",{});var mft=s(Lpe);qir=r(mft,"camembert"),mft.forEach(t),Oir=r(fLe," \u2014 "),zO=n(fLe,"A",{href:!0});var gft=s(zO);Gir=r(gft,"TFCamembertForSequenceClassification"),gft.forEach(t),Xir=r(fLe," (CamemBERT model)"),fLe.forEach(t),Vir=i(W),iF=n(W,"LI",{});var mLe=s(iF);Bpe=n(mLe,"STRONG",{});var hft=s(Bpe);zir=r(hft,"convbert"),hft.forEach(t),Wir=r(mLe," \u2014 "),WO=n(mLe,"A",{href:!0});var pft=s(WO);Qir=r(pft,"TFConvBertForSequenceClassification"),pft.forEach(t),Hir=r(mLe," (ConvBERT model)"),mLe.forEach(t),Uir=i(W),dF=n(W,"LI",{});var gLe=s(dF);xpe=n(gLe,"STRONG",{});var _ft=s(xpe);Jir=r(_ft,"ctrl"),_ft.forEach(t),Yir=r(gLe," \u2014 "),QO=n(gLe,"A",{href:!0});var uft=s(QO);Kir=r(uft,"TFCTRLForSequenceClassification"),uft.forEach(t),Zir=r(gLe," (CTRL model)"),gLe.forEach(t),edr=i(W),cF=n(W,"LI",{});var hLe=s(cF);kpe=n(hLe,"STRONG",{});var bft=s(kpe);odr=r(bft,"deberta"),bft.forEach(t),rdr=r(hLe," \u2014 "),HO=n(hLe,"A",{href:!0});var vft=s(HO);tdr=r(vft,"TFDebertaForSequenceClassification"),vft.forEach(t),adr=r(hLe," (DeBERTa model)"),hLe.forEach(t),ndr=i(W),fF=n(W,"LI",{});var pLe=s(fF);Rpe=n(pLe,"STRONG",{});var Tft=s(Rpe);sdr=r(Tft,"deberta-v2"),Tft.forEach(t),ldr=r(pLe," \u2014 "),UO=n(pLe,"A",{href:!0});var Fft=s(UO);idr=r(Fft,"TFDebertaV2ForSequenceClassification"),Fft.forEach(t),ddr=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),cdr=i(W),mF=n(W,"LI",{});var _Le=s(mF);Spe=n(_Le,"STRONG",{});var Cft=s(Spe);fdr=r(Cft,"distilbert"),Cft.forEach(t),mdr=r(_Le," \u2014 "),JO=n(_Le,"A",{href:!0});var Mft=s(JO);gdr=r(Mft,"TFDistilBertForSequenceClassification"),Mft.forEach(t),hdr=r(_Le," (DistilBERT model)"),_Le.forEach(t),pdr=i(W),gF=n(W,"LI",{});var uLe=s(gF);Ppe=n(uLe,"STRONG",{});var Eft=s(Ppe);_dr=r(Eft,"electra"),Eft.forEach(t),udr=r(uLe," \u2014 "),YO=n(uLe,"A",{href:!0});var yft=s(YO);bdr=r(yft,"TFElectraForSequenceClassification"),yft.forEach(t),vdr=r(uLe," (ELECTRA model)"),uLe.forEach(t),Tdr=i(W),hF=n(W,"LI",{});var bLe=s(hF);$pe=n(bLe,"STRONG",{});var wft=s($pe);Fdr=r(wft,"flaubert"),wft.forEach(t),Cdr=r(bLe," \u2014 "),KO=n(bLe,"A",{href:!0});var Aft=s(KO);Mdr=r(Aft,"TFFlaubertForSequenceClassification"),Aft.forEach(t),Edr=r(bLe," (FlauBERT model)"),bLe.forEach(t),ydr=i(W),pF=n(W,"LI",{});var vLe=s(pF);Ipe=n(vLe,"STRONG",{});var Lft=s(Ipe);wdr=r(Lft,"funnel"),Lft.forEach(t),Adr=r(vLe," \u2014 "),ZO=n(vLe,"A",{href:!0});var Bft=s(ZO);Ldr=r(Bft,"TFFunnelForSequenceClassification"),Bft.forEach(t),Bdr=r(vLe," (Funnel Transformer model)"),vLe.forEach(t),xdr=i(W),_F=n(W,"LI",{});var TLe=s(_F);jpe=n(TLe,"STRONG",{});var xft=s(jpe);kdr=r(xft,"gpt2"),xft.forEach(t),Rdr=r(TLe," \u2014 "),eG=n(TLe,"A",{href:!0});var kft=s(eG);Sdr=r(kft,"TFGPT2ForSequenceClassification"),kft.forEach(t),Pdr=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),$dr=i(W),uF=n(W,"LI",{});var FLe=s(uF);Dpe=n(FLe,"STRONG",{});var Rft=s(Dpe);Idr=r(Rft,"layoutlm"),Rft.forEach(t),jdr=r(FLe," \u2014 "),oG=n(FLe,"A",{href:!0});var Sft=s(oG);Ddr=r(Sft,"TFLayoutLMForSequenceClassification"),Sft.forEach(t),Ndr=r(FLe," (LayoutLM model)"),FLe.forEach(t),qdr=i(W),bF=n(W,"LI",{});var CLe=s(bF);Npe=n(CLe,"STRONG",{});var Pft=s(Npe);Odr=r(Pft,"longformer"),Pft.forEach(t),Gdr=r(CLe," \u2014 "),rG=n(CLe,"A",{href:!0});var $ft=s(rG);Xdr=r($ft,"TFLongformerForSequenceClassification"),$ft.forEach(t),Vdr=r(CLe," (Longformer model)"),CLe.forEach(t),zdr=i(W),vF=n(W,"LI",{});var MLe=s(vF);qpe=n(MLe,"STRONG",{});var Ift=s(qpe);Wdr=r(Ift,"mobilebert"),Ift.forEach(t),Qdr=r(MLe," \u2014 "),tG=n(MLe,"A",{href:!0});var jft=s(tG);Hdr=r(jft,"TFMobileBertForSequenceClassification"),jft.forEach(t),Udr=r(MLe," (MobileBERT model)"),MLe.forEach(t),Jdr=i(W),TF=n(W,"LI",{});var ELe=s(TF);Ope=n(ELe,"STRONG",{});var Dft=s(Ope);Ydr=r(Dft,"mpnet"),Dft.forEach(t),Kdr=r(ELe," \u2014 "),aG=n(ELe,"A",{href:!0});var Nft=s(aG);Zdr=r(Nft,"TFMPNetForSequenceClassification"),Nft.forEach(t),ecr=r(ELe," (MPNet model)"),ELe.forEach(t),ocr=i(W),FF=n(W,"LI",{});var yLe=s(FF);Gpe=n(yLe,"STRONG",{});var qft=s(Gpe);rcr=r(qft,"openai-gpt"),qft.forEach(t),tcr=r(yLe," \u2014 "),nG=n(yLe,"A",{href:!0});var Oft=s(nG);acr=r(Oft,"TFOpenAIGPTForSequenceClassification"),Oft.forEach(t),ncr=r(yLe," (OpenAI GPT model)"),yLe.forEach(t),scr=i(W),CF=n(W,"LI",{});var wLe=s(CF);Xpe=n(wLe,"STRONG",{});var Gft=s(Xpe);lcr=r(Gft,"rembert"),Gft.forEach(t),icr=r(wLe," \u2014 "),sG=n(wLe,"A",{href:!0});var Xft=s(sG);dcr=r(Xft,"TFRemBertForSequenceClassification"),Xft.forEach(t),ccr=r(wLe," (RemBERT model)"),wLe.forEach(t),fcr=i(W),MF=n(W,"LI",{});var ALe=s(MF);Vpe=n(ALe,"STRONG",{});var Vft=s(Vpe);mcr=r(Vft,"roberta"),Vft.forEach(t),gcr=r(ALe," \u2014 "),lG=n(ALe,"A",{href:!0});var zft=s(lG);hcr=r(zft,"TFRobertaForSequenceClassification"),zft.forEach(t),pcr=r(ALe," (RoBERTa model)"),ALe.forEach(t),_cr=i(W),EF=n(W,"LI",{});var LLe=s(EF);zpe=n(LLe,"STRONG",{});var Wft=s(zpe);ucr=r(Wft,"roformer"),Wft.forEach(t),bcr=r(LLe," \u2014 "),iG=n(LLe,"A",{href:!0});var Qft=s(iG);vcr=r(Qft,"TFRoFormerForSequenceClassification"),Qft.forEach(t),Tcr=r(LLe," (RoFormer model)"),LLe.forEach(t),Fcr=i(W),yF=n(W,"LI",{});var BLe=s(yF);Wpe=n(BLe,"STRONG",{});var Hft=s(Wpe);Ccr=r(Hft,"tapas"),Hft.forEach(t),Mcr=r(BLe," \u2014 "),dG=n(BLe,"A",{href:!0});var Uft=s(dG);Ecr=r(Uft,"TFTapasForSequenceClassification"),Uft.forEach(t),ycr=r(BLe," (TAPAS model)"),BLe.forEach(t),wcr=i(W),wF=n(W,"LI",{});var xLe=s(wF);Qpe=n(xLe,"STRONG",{});var Jft=s(Qpe);Acr=r(Jft,"transfo-xl"),Jft.forEach(t),Lcr=r(xLe," \u2014 "),cG=n(xLe,"A",{href:!0});var Yft=s(cG);Bcr=r(Yft,"TFTransfoXLForSequenceClassification"),Yft.forEach(t),xcr=r(xLe," (Transformer-XL model)"),xLe.forEach(t),kcr=i(W),AF=n(W,"LI",{});var kLe=s(AF);Hpe=n(kLe,"STRONG",{});var Kft=s(Hpe);Rcr=r(Kft,"xlm"),Kft.forEach(t),Scr=r(kLe," \u2014 "),fG=n(kLe,"A",{href:!0});var Zft=s(fG);Pcr=r(Zft,"TFXLMForSequenceClassification"),Zft.forEach(t),$cr=r(kLe," (XLM model)"),kLe.forEach(t),Icr=i(W),LF=n(W,"LI",{});var RLe=s(LF);Upe=n(RLe,"STRONG",{});var emt=s(Upe);jcr=r(emt,"xlm-roberta"),emt.forEach(t),Dcr=r(RLe," \u2014 "),mG=n(RLe,"A",{href:!0});var omt=s(mG);Ncr=r(omt,"TFXLMRobertaForSequenceClassification"),omt.forEach(t),qcr=r(RLe," (XLM-RoBERTa model)"),RLe.forEach(t),Ocr=i(W),BF=n(W,"LI",{});var SLe=s(BF);Jpe=n(SLe,"STRONG",{});var rmt=s(Jpe);Gcr=r(rmt,"xlnet"),rmt.forEach(t),Xcr=r(SLe," \u2014 "),gG=n(SLe,"A",{href:!0});var tmt=s(gG);Vcr=r(tmt,"TFXLNetForSequenceClassification"),tmt.forEach(t),zcr=r(SLe," (XLNet model)"),SLe.forEach(t),W.forEach(t),Wcr=i(Ta),Ype=n(Ta,"P",{});var amt=s(Ype);Qcr=r(amt,"Examples:"),amt.forEach(t),Hcr=i(Ta),m(hA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),Xxe=i(d),Sc=n(d,"H2",{class:!0});var oSe=s(Sc);xF=n(oSe,"A",{id:!0,class:!0,href:!0});var nmt=s(xF);Kpe=n(nmt,"SPAN",{});var smt=s(Kpe);m(pA.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),Ucr=i(oSe),Zpe=n(oSe,"SPAN",{});var lmt=s(Zpe);Jcr=r(lmt,"TFAutoModelForMultipleChoice"),lmt.forEach(t),oSe.forEach(t),Vxe=i(d),Er=n(d,"DIV",{class:!0});var Zl=s(Er);m(_A.$$.fragment,Zl),Ycr=i(Zl),Pc=n(Zl,"P",{});var hW=s(Pc);Kcr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),e_e=n(hW,"CODE",{});var imt=s(e_e);Zcr=r(imt,"from_pretrained()"),imt.forEach(t),efr=r(hW,"class method or the "),o_e=n(hW,"CODE",{});var dmt=s(o_e);ofr=r(dmt,"from_config()"),dmt.forEach(t),rfr=r(hW,`class
method.`),hW.forEach(t),tfr=i(Zl),uA=n(Zl,"P",{});var rSe=s(uA);afr=r(rSe,"This class cannot be instantiated directly using "),r_e=n(rSe,"CODE",{});var cmt=s(r_e);nfr=r(cmt,"__init__()"),cmt.forEach(t),sfr=r(rSe," (throws an error)."),rSe.forEach(t),lfr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(bA.$$.fragment,ei),ifr=i(ei),t_e=n(ei,"P",{});var fmt=s(t_e);dfr=r(fmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fmt.forEach(t),cfr=i(ei),$c=n(ei,"P",{});var pW=s($c);ffr=r(pW,`Note:
Loading a model from its configuration file does `),a_e=n(pW,"STRONG",{});var mmt=s(a_e);mfr=r(mmt,"not"),mmt.forEach(t),gfr=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n_e=n(pW,"CODE",{});var gmt=s(n_e);hfr=r(gmt,"from_pretrained()"),gmt.forEach(t),pfr=r(pW,"to load the model weights."),pW.forEach(t),_fr=i(ei),s_e=n(ei,"P",{});var hmt=s(s_e);ufr=r(hmt,"Examples:"),hmt.forEach(t),bfr=i(ei),m(vA.$$.fragment,ei),ei.forEach(t),vfr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Fa=s(Fo);m(TA.$$.fragment,Fa),Tfr=i(Fa),l_e=n(Fa,"P",{});var pmt=s(l_e);Ffr=r(pmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pmt.forEach(t),Cfr=i(Fa),Cn=n(Fa,"P",{});var vM=s(Cn);Mfr=r(vM,"The model class to instantiate is selected based on the "),i_e=n(vM,"CODE",{});var _mt=s(i_e);Efr=r(_mt,"model_type"),_mt.forEach(t),yfr=r(vM,` property of the config object (either
passed as an argument or loaded from `),d_e=n(vM,"CODE",{});var umt=s(d_e);wfr=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),Afr=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(vM,"CODE",{});var bmt=s(c_e);Lfr=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),Bfr=r(vM,":"),vM.forEach(t),xfr=i(Fa),te=n(Fa,"UL",{});var se=s(te);kF=n(se,"LI",{});var PLe=s(kF);f_e=n(PLe,"STRONG",{});var vmt=s(f_e);kfr=r(vmt,"albert"),vmt.forEach(t),Rfr=r(PLe," \u2014 "),hG=n(PLe,"A",{href:!0});var Tmt=s(hG);Sfr=r(Tmt,"TFAlbertForMultipleChoice"),Tmt.forEach(t),Pfr=r(PLe," (ALBERT model)"),PLe.forEach(t),$fr=i(se),RF=n(se,"LI",{});var $Le=s(RF);m_e=n($Le,"STRONG",{});var Fmt=s(m_e);Ifr=r(Fmt,"bert"),Fmt.forEach(t),jfr=r($Le," \u2014 "),pG=n($Le,"A",{href:!0});var Cmt=s(pG);Dfr=r(Cmt,"TFBertForMultipleChoice"),Cmt.forEach(t),Nfr=r($Le," (BERT model)"),$Le.forEach(t),qfr=i(se),SF=n(se,"LI",{});var ILe=s(SF);g_e=n(ILe,"STRONG",{});var Mmt=s(g_e);Ofr=r(Mmt,"camembert"),Mmt.forEach(t),Gfr=r(ILe," \u2014 "),_G=n(ILe,"A",{href:!0});var Emt=s(_G);Xfr=r(Emt,"TFCamembertForMultipleChoice"),Emt.forEach(t),Vfr=r(ILe," (CamemBERT model)"),ILe.forEach(t),zfr=i(se),PF=n(se,"LI",{});var jLe=s(PF);h_e=n(jLe,"STRONG",{});var ymt=s(h_e);Wfr=r(ymt,"convbert"),ymt.forEach(t),Qfr=r(jLe," \u2014 "),uG=n(jLe,"A",{href:!0});var wmt=s(uG);Hfr=r(wmt,"TFConvBertForMultipleChoice"),wmt.forEach(t),Ufr=r(jLe," (ConvBERT model)"),jLe.forEach(t),Jfr=i(se),$F=n(se,"LI",{});var DLe=s($F);p_e=n(DLe,"STRONG",{});var Amt=s(p_e);Yfr=r(Amt,"distilbert"),Amt.forEach(t),Kfr=r(DLe," \u2014 "),bG=n(DLe,"A",{href:!0});var Lmt=s(bG);Zfr=r(Lmt,"TFDistilBertForMultipleChoice"),Lmt.forEach(t),emr=r(DLe," (DistilBERT model)"),DLe.forEach(t),omr=i(se),IF=n(se,"LI",{});var NLe=s(IF);__e=n(NLe,"STRONG",{});var Bmt=s(__e);rmr=r(Bmt,"electra"),Bmt.forEach(t),tmr=r(NLe," \u2014 "),vG=n(NLe,"A",{href:!0});var xmt=s(vG);amr=r(xmt,"TFElectraForMultipleChoice"),xmt.forEach(t),nmr=r(NLe," (ELECTRA model)"),NLe.forEach(t),smr=i(se),jF=n(se,"LI",{});var qLe=s(jF);u_e=n(qLe,"STRONG",{});var kmt=s(u_e);lmr=r(kmt,"flaubert"),kmt.forEach(t),imr=r(qLe," \u2014 "),TG=n(qLe,"A",{href:!0});var Rmt=s(TG);dmr=r(Rmt,"TFFlaubertForMultipleChoice"),Rmt.forEach(t),cmr=r(qLe," (FlauBERT model)"),qLe.forEach(t),fmr=i(se),DF=n(se,"LI",{});var OLe=s(DF);b_e=n(OLe,"STRONG",{});var Smt=s(b_e);mmr=r(Smt,"funnel"),Smt.forEach(t),gmr=r(OLe," \u2014 "),FG=n(OLe,"A",{href:!0});var Pmt=s(FG);hmr=r(Pmt,"TFFunnelForMultipleChoice"),Pmt.forEach(t),pmr=r(OLe," (Funnel Transformer model)"),OLe.forEach(t),_mr=i(se),NF=n(se,"LI",{});var GLe=s(NF);v_e=n(GLe,"STRONG",{});var $mt=s(v_e);umr=r($mt,"longformer"),$mt.forEach(t),bmr=r(GLe," \u2014 "),CG=n(GLe,"A",{href:!0});var Imt=s(CG);vmr=r(Imt,"TFLongformerForMultipleChoice"),Imt.forEach(t),Tmr=r(GLe," (Longformer model)"),GLe.forEach(t),Fmr=i(se),qF=n(se,"LI",{});var XLe=s(qF);T_e=n(XLe,"STRONG",{});var jmt=s(T_e);Cmr=r(jmt,"mobilebert"),jmt.forEach(t),Mmr=r(XLe," \u2014 "),MG=n(XLe,"A",{href:!0});var Dmt=s(MG);Emr=r(Dmt,"TFMobileBertForMultipleChoice"),Dmt.forEach(t),ymr=r(XLe," (MobileBERT model)"),XLe.forEach(t),wmr=i(se),OF=n(se,"LI",{});var VLe=s(OF);F_e=n(VLe,"STRONG",{});var Nmt=s(F_e);Amr=r(Nmt,"mpnet"),Nmt.forEach(t),Lmr=r(VLe," \u2014 "),EG=n(VLe,"A",{href:!0});var qmt=s(EG);Bmr=r(qmt,"TFMPNetForMultipleChoice"),qmt.forEach(t),xmr=r(VLe," (MPNet model)"),VLe.forEach(t),kmr=i(se),GF=n(se,"LI",{});var zLe=s(GF);C_e=n(zLe,"STRONG",{});var Omt=s(C_e);Rmr=r(Omt,"rembert"),Omt.forEach(t),Smr=r(zLe," \u2014 "),yG=n(zLe,"A",{href:!0});var Gmt=s(yG);Pmr=r(Gmt,"TFRemBertForMultipleChoice"),Gmt.forEach(t),$mr=r(zLe," (RemBERT model)"),zLe.forEach(t),Imr=i(se),XF=n(se,"LI",{});var WLe=s(XF);M_e=n(WLe,"STRONG",{});var Xmt=s(M_e);jmr=r(Xmt,"roberta"),Xmt.forEach(t),Dmr=r(WLe," \u2014 "),wG=n(WLe,"A",{href:!0});var Vmt=s(wG);Nmr=r(Vmt,"TFRobertaForMultipleChoice"),Vmt.forEach(t),qmr=r(WLe," (RoBERTa model)"),WLe.forEach(t),Omr=i(se),VF=n(se,"LI",{});var QLe=s(VF);E_e=n(QLe,"STRONG",{});var zmt=s(E_e);Gmr=r(zmt,"roformer"),zmt.forEach(t),Xmr=r(QLe," \u2014 "),AG=n(QLe,"A",{href:!0});var Wmt=s(AG);Vmr=r(Wmt,"TFRoFormerForMultipleChoice"),Wmt.forEach(t),zmr=r(QLe," (RoFormer model)"),QLe.forEach(t),Wmr=i(se),zF=n(se,"LI",{});var HLe=s(zF);y_e=n(HLe,"STRONG",{});var Qmt=s(y_e);Qmr=r(Qmt,"xlm"),Qmt.forEach(t),Hmr=r(HLe," \u2014 "),LG=n(HLe,"A",{href:!0});var Hmt=s(LG);Umr=r(Hmt,"TFXLMForMultipleChoice"),Hmt.forEach(t),Jmr=r(HLe," (XLM model)"),HLe.forEach(t),Ymr=i(se),WF=n(se,"LI",{});var ULe=s(WF);w_e=n(ULe,"STRONG",{});var Umt=s(w_e);Kmr=r(Umt,"xlm-roberta"),Umt.forEach(t),Zmr=r(ULe," \u2014 "),BG=n(ULe,"A",{href:!0});var Jmt=s(BG);egr=r(Jmt,"TFXLMRobertaForMultipleChoice"),Jmt.forEach(t),ogr=r(ULe," (XLM-RoBERTa model)"),ULe.forEach(t),rgr=i(se),QF=n(se,"LI",{});var JLe=s(QF);A_e=n(JLe,"STRONG",{});var Ymt=s(A_e);tgr=r(Ymt,"xlnet"),Ymt.forEach(t),agr=r(JLe," \u2014 "),xG=n(JLe,"A",{href:!0});var Kmt=s(xG);ngr=r(Kmt,"TFXLNetForMultipleChoice"),Kmt.forEach(t),sgr=r(JLe," (XLNet model)"),JLe.forEach(t),se.forEach(t),lgr=i(Fa),L_e=n(Fa,"P",{});var Zmt=s(L_e);igr=r(Zmt,"Examples:"),Zmt.forEach(t),dgr=i(Fa),m(FA.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),zxe=i(d),Ic=n(d,"H2",{class:!0});var tSe=s(Ic);HF=n(tSe,"A",{id:!0,class:!0,href:!0});var egt=s(HF);B_e=n(egt,"SPAN",{});var ogt=s(B_e);m(CA.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),cgr=i(tSe),x_e=n(tSe,"SPAN",{});var rgt=s(x_e);fgr=r(rgt,"TFAutoModelForTableQuestionAnswering"),rgt.forEach(t),tSe.forEach(t),Wxe=i(d),yr=n(d,"DIV",{class:!0});var oi=s(yr);m(MA.$$.fragment,oi),mgr=i(oi),jc=n(oi,"P",{});var _W=s(jc);ggr=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),k_e=n(_W,"CODE",{});var tgt=s(k_e);hgr=r(tgt,"from_pretrained()"),tgt.forEach(t),pgr=r(_W,"class method or the "),R_e=n(_W,"CODE",{});var agt=s(R_e);_gr=r(agt,"from_config()"),agt.forEach(t),ugr=r(_W,`class
method.`),_W.forEach(t),bgr=i(oi),EA=n(oi,"P",{});var aSe=s(EA);vgr=r(aSe,"This class cannot be instantiated directly using "),S_e=n(aSe,"CODE",{});var ngt=s(S_e);Tgr=r(ngt,"__init__()"),ngt.forEach(t),Fgr=r(aSe," (throws an error)."),aSe.forEach(t),Cgr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(yA.$$.fragment,ri),Mgr=i(ri),P_e=n(ri,"P",{});var sgt=s(P_e);Egr=r(sgt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sgt.forEach(t),ygr=i(ri),Dc=n(ri,"P",{});var uW=s(Dc);wgr=r(uW,`Note:
Loading a model from its configuration file does `),$_e=n(uW,"STRONG",{});var lgt=s($_e);Agr=r(lgt,"not"),lgt.forEach(t),Lgr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=n(uW,"CODE",{});var igt=s(I_e);Bgr=r(igt,"from_pretrained()"),igt.forEach(t),xgr=r(uW,"to load the model weights."),uW.forEach(t),kgr=i(ri),j_e=n(ri,"P",{});var dgt=s(j_e);Rgr=r(dgt,"Examples:"),dgt.forEach(t),Sgr=i(ri),m(wA.$$.fragment,ri),ri.forEach(t),Pgr=i(oi),Co=n(oi,"DIV",{class:!0});var Ca=s(Co);m(AA.$$.fragment,Ca),$gr=i(Ca),D_e=n(Ca,"P",{});var cgt=s(D_e);Igr=r(cgt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cgt.forEach(t),jgr=i(Ca),Mn=n(Ca,"P",{});var TM=s(Mn);Dgr=r(TM,"The model class to instantiate is selected based on the "),N_e=n(TM,"CODE",{});var fgt=s(N_e);Ngr=r(fgt,"model_type"),fgt.forEach(t),qgr=r(TM,` property of the config object (either
passed as an argument or loaded from `),q_e=n(TM,"CODE",{});var mgt=s(q_e);Ogr=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),Ggr=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(TM,"CODE",{});var ggt=s(O_e);Xgr=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),Vgr=r(TM,":"),TM.forEach(t),zgr=i(Ca),G_e=n(Ca,"UL",{});var hgt=s(G_e);UF=n(hgt,"LI",{});var YLe=s(UF);X_e=n(YLe,"STRONG",{});var pgt=s(X_e);Wgr=r(pgt,"tapas"),pgt.forEach(t),Qgr=r(YLe," \u2014 "),kG=n(YLe,"A",{href:!0});var _gt=s(kG);Hgr=r(_gt,"TFTapasForQuestionAnswering"),_gt.forEach(t),Ugr=r(YLe," (TAPAS model)"),YLe.forEach(t),hgt.forEach(t),Jgr=i(Ca),V_e=n(Ca,"P",{});var ugt=s(V_e);Ygr=r(ugt,"Examples:"),ugt.forEach(t),Kgr=i(Ca),m(LA.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),Qxe=i(d),Nc=n(d,"H2",{class:!0});var nSe=s(Nc);JF=n(nSe,"A",{id:!0,class:!0,href:!0});var bgt=s(JF);z_e=n(bgt,"SPAN",{});var vgt=s(z_e);m(BA.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),Zgr=i(nSe),W_e=n(nSe,"SPAN",{});var Tgt=s(W_e);ehr=r(Tgt,"TFAutoModelForTokenClassification"),Tgt.forEach(t),nSe.forEach(t),Hxe=i(d),wr=n(d,"DIV",{class:!0});var ti=s(wr);m(xA.$$.fragment,ti),ohr=i(ti),qc=n(ti,"P",{});var bW=s(qc);rhr=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Q_e=n(bW,"CODE",{});var Fgt=s(Q_e);thr=r(Fgt,"from_pretrained()"),Fgt.forEach(t),ahr=r(bW,"class method or the "),H_e=n(bW,"CODE",{});var Cgt=s(H_e);nhr=r(Cgt,"from_config()"),Cgt.forEach(t),shr=r(bW,`class
method.`),bW.forEach(t),lhr=i(ti),kA=n(ti,"P",{});var sSe=s(kA);ihr=r(sSe,"This class cannot be instantiated directly using "),U_e=n(sSe,"CODE",{});var Mgt=s(U_e);dhr=r(Mgt,"__init__()"),Mgt.forEach(t),chr=r(sSe," (throws an error)."),sSe.forEach(t),fhr=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(RA.$$.fragment,ai),mhr=i(ai),J_e=n(ai,"P",{});var Egt=s(J_e);ghr=r(Egt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Egt.forEach(t),hhr=i(ai),Oc=n(ai,"P",{});var vW=s(Oc);phr=r(vW,`Note:
Loading a model from its configuration file does `),Y_e=n(vW,"STRONG",{});var ygt=s(Y_e);_hr=r(ygt,"not"),ygt.forEach(t),uhr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=n(vW,"CODE",{});var wgt=s(K_e);bhr=r(wgt,"from_pretrained()"),wgt.forEach(t),vhr=r(vW,"to load the model weights."),vW.forEach(t),Thr=i(ai),Z_e=n(ai,"P",{});var Agt=s(Z_e);Fhr=r(Agt,"Examples:"),Agt.forEach(t),Chr=i(ai),m(SA.$$.fragment,ai),ai.forEach(t),Mhr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ma=s(Mo);m(PA.$$.fragment,Ma),Ehr=i(Ma),eue=n(Ma,"P",{});var Lgt=s(eue);yhr=r(Lgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lgt.forEach(t),whr=i(Ma),En=n(Ma,"P",{});var FM=s(En);Ahr=r(FM,"The model class to instantiate is selected based on the "),oue=n(FM,"CODE",{});var Bgt=s(oue);Lhr=r(Bgt,"model_type"),Bgt.forEach(t),Bhr=r(FM,` property of the config object (either
passed as an argument or loaded from `),rue=n(FM,"CODE",{});var xgt=s(rue);xhr=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),khr=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(FM,"CODE",{});var kgt=s(tue);Rhr=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),Shr=r(FM,":"),FM.forEach(t),Phr=i(Ma),K=n(Ma,"UL",{});var oe=s(K);YF=n(oe,"LI",{});var KLe=s(YF);aue=n(KLe,"STRONG",{});var Rgt=s(aue);$hr=r(Rgt,"albert"),Rgt.forEach(t),Ihr=r(KLe," \u2014 "),RG=n(KLe,"A",{href:!0});var Sgt=s(RG);jhr=r(Sgt,"TFAlbertForTokenClassification"),Sgt.forEach(t),Dhr=r(KLe," (ALBERT model)"),KLe.forEach(t),Nhr=i(oe),KF=n(oe,"LI",{});var ZLe=s(KF);nue=n(ZLe,"STRONG",{});var Pgt=s(nue);qhr=r(Pgt,"bert"),Pgt.forEach(t),Ohr=r(ZLe," \u2014 "),SG=n(ZLe,"A",{href:!0});var $gt=s(SG);Ghr=r($gt,"TFBertForTokenClassification"),$gt.forEach(t),Xhr=r(ZLe," (BERT model)"),ZLe.forEach(t),Vhr=i(oe),ZF=n(oe,"LI",{});var e8e=s(ZF);sue=n(e8e,"STRONG",{});var Igt=s(sue);zhr=r(Igt,"camembert"),Igt.forEach(t),Whr=r(e8e," \u2014 "),PG=n(e8e,"A",{href:!0});var jgt=s(PG);Qhr=r(jgt,"TFCamembertForTokenClassification"),jgt.forEach(t),Hhr=r(e8e," (CamemBERT model)"),e8e.forEach(t),Uhr=i(oe),e9=n(oe,"LI",{});var o8e=s(e9);lue=n(o8e,"STRONG",{});var Dgt=s(lue);Jhr=r(Dgt,"convbert"),Dgt.forEach(t),Yhr=r(o8e," \u2014 "),$G=n(o8e,"A",{href:!0});var Ngt=s($G);Khr=r(Ngt,"TFConvBertForTokenClassification"),Ngt.forEach(t),Zhr=r(o8e," (ConvBERT model)"),o8e.forEach(t),epr=i(oe),o9=n(oe,"LI",{});var r8e=s(o9);iue=n(r8e,"STRONG",{});var qgt=s(iue);opr=r(qgt,"deberta"),qgt.forEach(t),rpr=r(r8e," \u2014 "),IG=n(r8e,"A",{href:!0});var Ogt=s(IG);tpr=r(Ogt,"TFDebertaForTokenClassification"),Ogt.forEach(t),apr=r(r8e," (DeBERTa model)"),r8e.forEach(t),npr=i(oe),r9=n(oe,"LI",{});var t8e=s(r9);due=n(t8e,"STRONG",{});var Ggt=s(due);spr=r(Ggt,"deberta-v2"),Ggt.forEach(t),lpr=r(t8e," \u2014 "),jG=n(t8e,"A",{href:!0});var Xgt=s(jG);ipr=r(Xgt,"TFDebertaV2ForTokenClassification"),Xgt.forEach(t),dpr=r(t8e," (DeBERTa-v2 model)"),t8e.forEach(t),cpr=i(oe),t9=n(oe,"LI",{});var a8e=s(t9);cue=n(a8e,"STRONG",{});var Vgt=s(cue);fpr=r(Vgt,"distilbert"),Vgt.forEach(t),mpr=r(a8e," \u2014 "),DG=n(a8e,"A",{href:!0});var zgt=s(DG);gpr=r(zgt,"TFDistilBertForTokenClassification"),zgt.forEach(t),hpr=r(a8e," (DistilBERT model)"),a8e.forEach(t),ppr=i(oe),a9=n(oe,"LI",{});var n8e=s(a9);fue=n(n8e,"STRONG",{});var Wgt=s(fue);_pr=r(Wgt,"electra"),Wgt.forEach(t),upr=r(n8e," \u2014 "),NG=n(n8e,"A",{href:!0});var Qgt=s(NG);bpr=r(Qgt,"TFElectraForTokenClassification"),Qgt.forEach(t),vpr=r(n8e," (ELECTRA model)"),n8e.forEach(t),Tpr=i(oe),n9=n(oe,"LI",{});var s8e=s(n9);mue=n(s8e,"STRONG",{});var Hgt=s(mue);Fpr=r(Hgt,"flaubert"),Hgt.forEach(t),Cpr=r(s8e," \u2014 "),qG=n(s8e,"A",{href:!0});var Ugt=s(qG);Mpr=r(Ugt,"TFFlaubertForTokenClassification"),Ugt.forEach(t),Epr=r(s8e," (FlauBERT model)"),s8e.forEach(t),ypr=i(oe),s9=n(oe,"LI",{});var l8e=s(s9);gue=n(l8e,"STRONG",{});var Jgt=s(gue);wpr=r(Jgt,"funnel"),Jgt.forEach(t),Apr=r(l8e," \u2014 "),OG=n(l8e,"A",{href:!0});var Ygt=s(OG);Lpr=r(Ygt,"TFFunnelForTokenClassification"),Ygt.forEach(t),Bpr=r(l8e," (Funnel Transformer model)"),l8e.forEach(t),xpr=i(oe),l9=n(oe,"LI",{});var i8e=s(l9);hue=n(i8e,"STRONG",{});var Kgt=s(hue);kpr=r(Kgt,"layoutlm"),Kgt.forEach(t),Rpr=r(i8e," \u2014 "),GG=n(i8e,"A",{href:!0});var Zgt=s(GG);Spr=r(Zgt,"TFLayoutLMForTokenClassification"),Zgt.forEach(t),Ppr=r(i8e," (LayoutLM model)"),i8e.forEach(t),$pr=i(oe),i9=n(oe,"LI",{});var d8e=s(i9);pue=n(d8e,"STRONG",{});var eht=s(pue);Ipr=r(eht,"longformer"),eht.forEach(t),jpr=r(d8e," \u2014 "),XG=n(d8e,"A",{href:!0});var oht=s(XG);Dpr=r(oht,"TFLongformerForTokenClassification"),oht.forEach(t),Npr=r(d8e," (Longformer model)"),d8e.forEach(t),qpr=i(oe),d9=n(oe,"LI",{});var c8e=s(d9);_ue=n(c8e,"STRONG",{});var rht=s(_ue);Opr=r(rht,"mobilebert"),rht.forEach(t),Gpr=r(c8e," \u2014 "),VG=n(c8e,"A",{href:!0});var tht=s(VG);Xpr=r(tht,"TFMobileBertForTokenClassification"),tht.forEach(t),Vpr=r(c8e," (MobileBERT model)"),c8e.forEach(t),zpr=i(oe),c9=n(oe,"LI",{});var f8e=s(c9);uue=n(f8e,"STRONG",{});var aht=s(uue);Wpr=r(aht,"mpnet"),aht.forEach(t),Qpr=r(f8e," \u2014 "),zG=n(f8e,"A",{href:!0});var nht=s(zG);Hpr=r(nht,"TFMPNetForTokenClassification"),nht.forEach(t),Upr=r(f8e," (MPNet model)"),f8e.forEach(t),Jpr=i(oe),f9=n(oe,"LI",{});var m8e=s(f9);bue=n(m8e,"STRONG",{});var sht=s(bue);Ypr=r(sht,"rembert"),sht.forEach(t),Kpr=r(m8e," \u2014 "),WG=n(m8e,"A",{href:!0});var lht=s(WG);Zpr=r(lht,"TFRemBertForTokenClassification"),lht.forEach(t),e_r=r(m8e," (RemBERT model)"),m8e.forEach(t),o_r=i(oe),m9=n(oe,"LI",{});var g8e=s(m9);vue=n(g8e,"STRONG",{});var iht=s(vue);r_r=r(iht,"roberta"),iht.forEach(t),t_r=r(g8e," \u2014 "),QG=n(g8e,"A",{href:!0});var dht=s(QG);a_r=r(dht,"TFRobertaForTokenClassification"),dht.forEach(t),n_r=r(g8e," (RoBERTa model)"),g8e.forEach(t),s_r=i(oe),g9=n(oe,"LI",{});var h8e=s(g9);Tue=n(h8e,"STRONG",{});var cht=s(Tue);l_r=r(cht,"roformer"),cht.forEach(t),i_r=r(h8e," \u2014 "),HG=n(h8e,"A",{href:!0});var fht=s(HG);d_r=r(fht,"TFRoFormerForTokenClassification"),fht.forEach(t),c_r=r(h8e," (RoFormer model)"),h8e.forEach(t),f_r=i(oe),h9=n(oe,"LI",{});var p8e=s(h9);Fue=n(p8e,"STRONG",{});var mht=s(Fue);m_r=r(mht,"xlm"),mht.forEach(t),g_r=r(p8e," \u2014 "),UG=n(p8e,"A",{href:!0});var ght=s(UG);h_r=r(ght,"TFXLMForTokenClassification"),ght.forEach(t),p_r=r(p8e," (XLM model)"),p8e.forEach(t),__r=i(oe),p9=n(oe,"LI",{});var _8e=s(p9);Cue=n(_8e,"STRONG",{});var hht=s(Cue);u_r=r(hht,"xlm-roberta"),hht.forEach(t),b_r=r(_8e," \u2014 "),JG=n(_8e,"A",{href:!0});var pht=s(JG);v_r=r(pht,"TFXLMRobertaForTokenClassification"),pht.forEach(t),T_r=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),F_r=i(oe),_9=n(oe,"LI",{});var u8e=s(_9);Mue=n(u8e,"STRONG",{});var _ht=s(Mue);C_r=r(_ht,"xlnet"),_ht.forEach(t),M_r=r(u8e," \u2014 "),YG=n(u8e,"A",{href:!0});var uht=s(YG);E_r=r(uht,"TFXLNetForTokenClassification"),uht.forEach(t),y_r=r(u8e," (XLNet model)"),u8e.forEach(t),oe.forEach(t),w_r=i(Ma),Eue=n(Ma,"P",{});var bht=s(Eue);A_r=r(bht,"Examples:"),bht.forEach(t),L_r=i(Ma),m($A.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),Uxe=i(d),Gc=n(d,"H2",{class:!0});var lSe=s(Gc);u9=n(lSe,"A",{id:!0,class:!0,href:!0});var vht=s(u9);yue=n(vht,"SPAN",{});var Tht=s(yue);m(IA.$$.fragment,Tht),Tht.forEach(t),vht.forEach(t),B_r=i(lSe),wue=n(lSe,"SPAN",{});var Fht=s(wue);x_r=r(Fht,"TFAutoModelForQuestionAnswering"),Fht.forEach(t),lSe.forEach(t),Jxe=i(d),Ar=n(d,"DIV",{class:!0});var ni=s(Ar);m(jA.$$.fragment,ni),k_r=i(ni),Xc=n(ni,"P",{});var TW=s(Xc);R_r=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aue=n(TW,"CODE",{});var Cht=s(Aue);S_r=r(Cht,"from_pretrained()"),Cht.forEach(t),P_r=r(TW,"class method or the "),Lue=n(TW,"CODE",{});var Mht=s(Lue);$_r=r(Mht,"from_config()"),Mht.forEach(t),I_r=r(TW,`class
method.`),TW.forEach(t),j_r=i(ni),DA=n(ni,"P",{});var iSe=s(DA);D_r=r(iSe,"This class cannot be instantiated directly using "),Bue=n(iSe,"CODE",{});var Eht=s(Bue);N_r=r(Eht,"__init__()"),Eht.forEach(t),q_r=r(iSe," (throws an error)."),iSe.forEach(t),O_r=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(NA.$$.fragment,si),G_r=i(si),xue=n(si,"P",{});var yht=s(xue);X_r=r(yht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yht.forEach(t),V_r=i(si),Vc=n(si,"P",{});var FW=s(Vc);z_r=r(FW,`Note:
Loading a model from its configuration file does `),kue=n(FW,"STRONG",{});var wht=s(kue);W_r=r(wht,"not"),wht.forEach(t),Q_r=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rue=n(FW,"CODE",{});var Aht=s(Rue);H_r=r(Aht,"from_pretrained()"),Aht.forEach(t),U_r=r(FW,"to load the model weights."),FW.forEach(t),J_r=i(si),Sue=n(si,"P",{});var Lht=s(Sue);Y_r=r(Lht,"Examples:"),Lht.forEach(t),K_r=i(si),m(qA.$$.fragment,si),si.forEach(t),Z_r=i(ni),Eo=n(ni,"DIV",{class:!0});var Ea=s(Eo);m(OA.$$.fragment,Ea),eur=i(Ea),Pue=n(Ea,"P",{});var Bht=s(Pue);our=r(Bht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bht.forEach(t),rur=i(Ea),yn=n(Ea,"P",{});var CM=s(yn);tur=r(CM,"The model class to instantiate is selected based on the "),$ue=n(CM,"CODE",{});var xht=s($ue);aur=r(xht,"model_type"),xht.forEach(t),nur=r(CM,` property of the config object (either
passed as an argument or loaded from `),Iue=n(CM,"CODE",{});var kht=s(Iue);sur=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),lur=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(CM,"CODE",{});var Rht=s(jue);iur=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),dur=r(CM,":"),CM.forEach(t),cur=i(Ea),Z=n(Ea,"UL",{});var re=s(Z);b9=n(re,"LI",{});var b8e=s(b9);Due=n(b8e,"STRONG",{});var Sht=s(Due);fur=r(Sht,"albert"),Sht.forEach(t),mur=r(b8e," \u2014 "),KG=n(b8e,"A",{href:!0});var Pht=s(KG);gur=r(Pht,"TFAlbertForQuestionAnswering"),Pht.forEach(t),hur=r(b8e," (ALBERT model)"),b8e.forEach(t),pur=i(re),v9=n(re,"LI",{});var v8e=s(v9);Nue=n(v8e,"STRONG",{});var $ht=s(Nue);_ur=r($ht,"bert"),$ht.forEach(t),uur=r(v8e," \u2014 "),ZG=n(v8e,"A",{href:!0});var Iht=s(ZG);bur=r(Iht,"TFBertForQuestionAnswering"),Iht.forEach(t),vur=r(v8e," (BERT model)"),v8e.forEach(t),Tur=i(re),T9=n(re,"LI",{});var T8e=s(T9);que=n(T8e,"STRONG",{});var jht=s(que);Fur=r(jht,"camembert"),jht.forEach(t),Cur=r(T8e," \u2014 "),eX=n(T8e,"A",{href:!0});var Dht=s(eX);Mur=r(Dht,"TFCamembertForQuestionAnswering"),Dht.forEach(t),Eur=r(T8e," (CamemBERT model)"),T8e.forEach(t),yur=i(re),F9=n(re,"LI",{});var F8e=s(F9);Oue=n(F8e,"STRONG",{});var Nht=s(Oue);wur=r(Nht,"convbert"),Nht.forEach(t),Aur=r(F8e," \u2014 "),oX=n(F8e,"A",{href:!0});var qht=s(oX);Lur=r(qht,"TFConvBertForQuestionAnswering"),qht.forEach(t),Bur=r(F8e," (ConvBERT model)"),F8e.forEach(t),xur=i(re),C9=n(re,"LI",{});var C8e=s(C9);Gue=n(C8e,"STRONG",{});var Oht=s(Gue);kur=r(Oht,"deberta"),Oht.forEach(t),Rur=r(C8e," \u2014 "),rX=n(C8e,"A",{href:!0});var Ght=s(rX);Sur=r(Ght,"TFDebertaForQuestionAnswering"),Ght.forEach(t),Pur=r(C8e," (DeBERTa model)"),C8e.forEach(t),$ur=i(re),M9=n(re,"LI",{});var M8e=s(M9);Xue=n(M8e,"STRONG",{});var Xht=s(Xue);Iur=r(Xht,"deberta-v2"),Xht.forEach(t),jur=r(M8e," \u2014 "),tX=n(M8e,"A",{href:!0});var Vht=s(tX);Dur=r(Vht,"TFDebertaV2ForQuestionAnswering"),Vht.forEach(t),Nur=r(M8e," (DeBERTa-v2 model)"),M8e.forEach(t),qur=i(re),E9=n(re,"LI",{});var E8e=s(E9);Vue=n(E8e,"STRONG",{});var zht=s(Vue);Our=r(zht,"distilbert"),zht.forEach(t),Gur=r(E8e," \u2014 "),aX=n(E8e,"A",{href:!0});var Wht=s(aX);Xur=r(Wht,"TFDistilBertForQuestionAnswering"),Wht.forEach(t),Vur=r(E8e," (DistilBERT model)"),E8e.forEach(t),zur=i(re),y9=n(re,"LI",{});var y8e=s(y9);zue=n(y8e,"STRONG",{});var Qht=s(zue);Wur=r(Qht,"electra"),Qht.forEach(t),Qur=r(y8e," \u2014 "),nX=n(y8e,"A",{href:!0});var Hht=s(nX);Hur=r(Hht,"TFElectraForQuestionAnswering"),Hht.forEach(t),Uur=r(y8e," (ELECTRA model)"),y8e.forEach(t),Jur=i(re),w9=n(re,"LI",{});var w8e=s(w9);Wue=n(w8e,"STRONG",{});var Uht=s(Wue);Yur=r(Uht,"flaubert"),Uht.forEach(t),Kur=r(w8e," \u2014 "),sX=n(w8e,"A",{href:!0});var Jht=s(sX);Zur=r(Jht,"TFFlaubertForQuestionAnsweringSimple"),Jht.forEach(t),e2r=r(w8e," (FlauBERT model)"),w8e.forEach(t),o2r=i(re),A9=n(re,"LI",{});var A8e=s(A9);Que=n(A8e,"STRONG",{});var Yht=s(Que);r2r=r(Yht,"funnel"),Yht.forEach(t),t2r=r(A8e," \u2014 "),lX=n(A8e,"A",{href:!0});var Kht=s(lX);a2r=r(Kht,"TFFunnelForQuestionAnswering"),Kht.forEach(t),n2r=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),s2r=i(re),L9=n(re,"LI",{});var L8e=s(L9);Hue=n(L8e,"STRONG",{});var Zht=s(Hue);l2r=r(Zht,"longformer"),Zht.forEach(t),i2r=r(L8e," \u2014 "),iX=n(L8e,"A",{href:!0});var ept=s(iX);d2r=r(ept,"TFLongformerForQuestionAnswering"),ept.forEach(t),c2r=r(L8e," (Longformer model)"),L8e.forEach(t),f2r=i(re),B9=n(re,"LI",{});var B8e=s(B9);Uue=n(B8e,"STRONG",{});var opt=s(Uue);m2r=r(opt,"mobilebert"),opt.forEach(t),g2r=r(B8e," \u2014 "),dX=n(B8e,"A",{href:!0});var rpt=s(dX);h2r=r(rpt,"TFMobileBertForQuestionAnswering"),rpt.forEach(t),p2r=r(B8e," (MobileBERT model)"),B8e.forEach(t),_2r=i(re),x9=n(re,"LI",{});var x8e=s(x9);Jue=n(x8e,"STRONG",{});var tpt=s(Jue);u2r=r(tpt,"mpnet"),tpt.forEach(t),b2r=r(x8e," \u2014 "),cX=n(x8e,"A",{href:!0});var apt=s(cX);v2r=r(apt,"TFMPNetForQuestionAnswering"),apt.forEach(t),T2r=r(x8e," (MPNet model)"),x8e.forEach(t),F2r=i(re),k9=n(re,"LI",{});var k8e=s(k9);Yue=n(k8e,"STRONG",{});var npt=s(Yue);C2r=r(npt,"rembert"),npt.forEach(t),M2r=r(k8e," \u2014 "),fX=n(k8e,"A",{href:!0});var spt=s(fX);E2r=r(spt,"TFRemBertForQuestionAnswering"),spt.forEach(t),y2r=r(k8e," (RemBERT model)"),k8e.forEach(t),w2r=i(re),R9=n(re,"LI",{});var R8e=s(R9);Kue=n(R8e,"STRONG",{});var lpt=s(Kue);A2r=r(lpt,"roberta"),lpt.forEach(t),L2r=r(R8e," \u2014 "),mX=n(R8e,"A",{href:!0});var ipt=s(mX);B2r=r(ipt,"TFRobertaForQuestionAnswering"),ipt.forEach(t),x2r=r(R8e," (RoBERTa model)"),R8e.forEach(t),k2r=i(re),S9=n(re,"LI",{});var S8e=s(S9);Zue=n(S8e,"STRONG",{});var dpt=s(Zue);R2r=r(dpt,"roformer"),dpt.forEach(t),S2r=r(S8e," \u2014 "),gX=n(S8e,"A",{href:!0});var cpt=s(gX);P2r=r(cpt,"TFRoFormerForQuestionAnswering"),cpt.forEach(t),$2r=r(S8e," (RoFormer model)"),S8e.forEach(t),I2r=i(re),P9=n(re,"LI",{});var P8e=s(P9);e2e=n(P8e,"STRONG",{});var fpt=s(e2e);j2r=r(fpt,"xlm"),fpt.forEach(t),D2r=r(P8e," \u2014 "),hX=n(P8e,"A",{href:!0});var mpt=s(hX);N2r=r(mpt,"TFXLMForQuestionAnsweringSimple"),mpt.forEach(t),q2r=r(P8e," (XLM model)"),P8e.forEach(t),O2r=i(re),$9=n(re,"LI",{});var $8e=s($9);o2e=n($8e,"STRONG",{});var gpt=s(o2e);G2r=r(gpt,"xlm-roberta"),gpt.forEach(t),X2r=r($8e," \u2014 "),pX=n($8e,"A",{href:!0});var hpt=s(pX);V2r=r(hpt,"TFXLMRobertaForQuestionAnswering"),hpt.forEach(t),z2r=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),W2r=i(re),I9=n(re,"LI",{});var I8e=s(I9);r2e=n(I8e,"STRONG",{});var ppt=s(r2e);Q2r=r(ppt,"xlnet"),ppt.forEach(t),H2r=r(I8e," \u2014 "),_X=n(I8e,"A",{href:!0});var _pt=s(_X);U2r=r(_pt,"TFXLNetForQuestionAnsweringSimple"),_pt.forEach(t),J2r=r(I8e," (XLNet model)"),I8e.forEach(t),re.forEach(t),Y2r=i(Ea),t2e=n(Ea,"P",{});var upt=s(t2e);K2r=r(upt,"Examples:"),upt.forEach(t),Z2r=i(Ea),m(GA.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),Yxe=i(d),zc=n(d,"H2",{class:!0});var dSe=s(zc);j9=n(dSe,"A",{id:!0,class:!0,href:!0});var bpt=s(j9);a2e=n(bpt,"SPAN",{});var vpt=s(a2e);m(XA.$$.fragment,vpt),vpt.forEach(t),bpt.forEach(t),e1r=i(dSe),n2e=n(dSe,"SPAN",{});var Tpt=s(n2e);o1r=r(Tpt,"TFAutoModelForVision2Seq"),Tpt.forEach(t),dSe.forEach(t),Kxe=i(d),Lr=n(d,"DIV",{class:!0});var li=s(Lr);m(VA.$$.fragment,li),r1r=i(li),Wc=n(li,"P",{});var CW=s(Wc);t1r=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),s2e=n(CW,"CODE",{});var Fpt=s(s2e);a1r=r(Fpt,"from_pretrained()"),Fpt.forEach(t),n1r=r(CW,"class method or the "),l2e=n(CW,"CODE",{});var Cpt=s(l2e);s1r=r(Cpt,"from_config()"),Cpt.forEach(t),l1r=r(CW,`class
method.`),CW.forEach(t),i1r=i(li),zA=n(li,"P",{});var cSe=s(zA);d1r=r(cSe,"This class cannot be instantiated directly using "),i2e=n(cSe,"CODE",{});var Mpt=s(i2e);c1r=r(Mpt,"__init__()"),Mpt.forEach(t),f1r=r(cSe," (throws an error)."),cSe.forEach(t),m1r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(WA.$$.fragment,ii),g1r=i(ii),d2e=n(ii,"P",{});var Ept=s(d2e);h1r=r(Ept,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ept.forEach(t),p1r=i(ii),Qc=n(ii,"P",{});var MW=s(Qc);_1r=r(MW,`Note:
Loading a model from its configuration file does `),c2e=n(MW,"STRONG",{});var ypt=s(c2e);u1r=r(ypt,"not"),ypt.forEach(t),b1r=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=n(MW,"CODE",{});var wpt=s(f2e);v1r=r(wpt,"from_pretrained()"),wpt.forEach(t),T1r=r(MW,"to load the model weights."),MW.forEach(t),F1r=i(ii),m2e=n(ii,"P",{});var Apt=s(m2e);C1r=r(Apt,"Examples:"),Apt.forEach(t),M1r=i(ii),m(QA.$$.fragment,ii),ii.forEach(t),E1r=i(li),yo=n(li,"DIV",{class:!0});var ya=s(yo);m(HA.$$.fragment,ya),y1r=i(ya),g2e=n(ya,"P",{});var Lpt=s(g2e);w1r=r(Lpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lpt.forEach(t),A1r=i(ya),wn=n(ya,"P",{});var MM=s(wn);L1r=r(MM,"The model class to instantiate is selected based on the "),h2e=n(MM,"CODE",{});var Bpt=s(h2e);B1r=r(Bpt,"model_type"),Bpt.forEach(t),x1r=r(MM,` property of the config object (either
passed as an argument or loaded from `),p2e=n(MM,"CODE",{});var xpt=s(p2e);k1r=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),R1r=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(MM,"CODE",{});var kpt=s(_2e);S1r=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),P1r=r(MM,":"),MM.forEach(t),$1r=i(ya),u2e=n(ya,"UL",{});var Rpt=s(u2e);D9=n(Rpt,"LI",{});var j8e=s(D9);b2e=n(j8e,"STRONG",{});var Spt=s(b2e);I1r=r(Spt,"vision-encoder-decoder"),Spt.forEach(t),j1r=r(j8e," \u2014 "),uX=n(j8e,"A",{href:!0});var Ppt=s(uX);D1r=r(Ppt,"TFVisionEncoderDecoderModel"),Ppt.forEach(t),N1r=r(j8e," (Vision Encoder decoder model)"),j8e.forEach(t),Rpt.forEach(t),q1r=i(ya),v2e=n(ya,"P",{});var $pt=s(v2e);O1r=r($pt,"Examples:"),$pt.forEach(t),G1r=i(ya),m(UA.$$.fragment,ya),ya.forEach(t),li.forEach(t),Zxe=i(d),Hc=n(d,"H2",{class:!0});var fSe=s(Hc);N9=n(fSe,"A",{id:!0,class:!0,href:!0});var Ipt=s(N9);T2e=n(Ipt,"SPAN",{});var jpt=s(T2e);m(JA.$$.fragment,jpt),jpt.forEach(t),Ipt.forEach(t),X1r=i(fSe),F2e=n(fSe,"SPAN",{});var Dpt=s(F2e);V1r=r(Dpt,"TFAutoModelForSpeechSeq2Seq"),Dpt.forEach(t),fSe.forEach(t),eke=i(d),Br=n(d,"DIV",{class:!0});var di=s(Br);m(YA.$$.fragment,di),z1r=i(di),Uc=n(di,"P",{});var EW=s(Uc);W1r=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),C2e=n(EW,"CODE",{});var Npt=s(C2e);Q1r=r(Npt,"from_pretrained()"),Npt.forEach(t),H1r=r(EW,"class method or the "),M2e=n(EW,"CODE",{});var qpt=s(M2e);U1r=r(qpt,"from_config()"),qpt.forEach(t),J1r=r(EW,`class
method.`),EW.forEach(t),Y1r=i(di),KA=n(di,"P",{});var mSe=s(KA);K1r=r(mSe,"This class cannot be instantiated directly using "),E2e=n(mSe,"CODE",{});var Opt=s(E2e);Z1r=r(Opt,"__init__()"),Opt.forEach(t),ebr=r(mSe," (throws an error)."),mSe.forEach(t),obr=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m(ZA.$$.fragment,ci),rbr=i(ci),y2e=n(ci,"P",{});var Gpt=s(y2e);tbr=r(Gpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gpt.forEach(t),abr=i(ci),Jc=n(ci,"P",{});var yW=s(Jc);nbr=r(yW,`Note:
Loading a model from its configuration file does `),w2e=n(yW,"STRONG",{});var Xpt=s(w2e);sbr=r(Xpt,"not"),Xpt.forEach(t),lbr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=n(yW,"CODE",{});var Vpt=s(A2e);ibr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),dbr=r(yW,"to load the model weights."),yW.forEach(t),cbr=i(ci),L2e=n(ci,"P",{});var zpt=s(L2e);fbr=r(zpt,"Examples:"),zpt.forEach(t),mbr=i(ci),m(e0.$$.fragment,ci),ci.forEach(t),gbr=i(di),wo=n(di,"DIV",{class:!0});var wa=s(wo);m(o0.$$.fragment,wa),hbr=i(wa),B2e=n(wa,"P",{});var Wpt=s(B2e);pbr=r(Wpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wpt.forEach(t),_br=i(wa),An=n(wa,"P",{});var EM=s(An);ubr=r(EM,"The model class to instantiate is selected based on the "),x2e=n(EM,"CODE",{});var Qpt=s(x2e);bbr=r(Qpt,"model_type"),Qpt.forEach(t),vbr=r(EM,` property of the config object (either
passed as an argument or loaded from `),k2e=n(EM,"CODE",{});var Hpt=s(k2e);Tbr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Fbr=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(EM,"CODE",{});var Upt=s(R2e);Cbr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Mbr=r(EM,":"),EM.forEach(t),Ebr=i(wa),S2e=n(wa,"UL",{});var Jpt=s(S2e);q9=n(Jpt,"LI",{});var D8e=s(q9);P2e=n(D8e,"STRONG",{});var Ypt=s(P2e);ybr=r(Ypt,"speech_to_text"),Ypt.forEach(t),wbr=r(D8e," \u2014 "),bX=n(D8e,"A",{href:!0});var Kpt=s(bX);Abr=r(Kpt,"TFSpeech2TextForConditionalGeneration"),Kpt.forEach(t),Lbr=r(D8e," (Speech2Text model)"),D8e.forEach(t),Jpt.forEach(t),Bbr=i(wa),$2e=n(wa,"P",{});var Zpt=s($2e);xbr=r(Zpt,"Examples:"),Zpt.forEach(t),kbr=i(wa),m(r0.$$.fragment,wa),wa.forEach(t),di.forEach(t),oke=i(d),Yc=n(d,"H2",{class:!0});var gSe=s(Yc);O9=n(gSe,"A",{id:!0,class:!0,href:!0});var e_t=s(O9);I2e=n(e_t,"SPAN",{});var o_t=s(I2e);m(t0.$$.fragment,o_t),o_t.forEach(t),e_t.forEach(t),Rbr=i(gSe),j2e=n(gSe,"SPAN",{});var r_t=s(j2e);Sbr=r(r_t,"FlaxAutoModel"),r_t.forEach(t),gSe.forEach(t),rke=i(d),xr=n(d,"DIV",{class:!0});var fi=s(xr);m(a0.$$.fragment,fi),Pbr=i(fi),Kc=n(fi,"P",{});var wW=s(Kc);$br=r(wW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D2e=n(wW,"CODE",{});var t_t=s(D2e);Ibr=r(t_t,"from_pretrained()"),t_t.forEach(t),jbr=r(wW,"class method or the "),N2e=n(wW,"CODE",{});var a_t=s(N2e);Dbr=r(a_t,"from_config()"),a_t.forEach(t),Nbr=r(wW,`class
method.`),wW.forEach(t),qbr=i(fi),n0=n(fi,"P",{});var hSe=s(n0);Obr=r(hSe,"This class cannot be instantiated directly using "),q2e=n(hSe,"CODE",{});var n_t=s(q2e);Gbr=r(n_t,"__init__()"),n_t.forEach(t),Xbr=r(hSe," (throws an error)."),hSe.forEach(t),Vbr=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(s0.$$.fragment,mi),zbr=i(mi),O2e=n(mi,"P",{});var s_t=s(O2e);Wbr=r(s_t,"Instantiates one of the base model classes of the library from a configuration."),s_t.forEach(t),Qbr=i(mi),Zc=n(mi,"P",{});var AW=s(Zc);Hbr=r(AW,`Note:
Loading a model from its configuration file does `),G2e=n(AW,"STRONG",{});var l_t=s(G2e);Ubr=r(l_t,"not"),l_t.forEach(t),Jbr=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=n(AW,"CODE",{});var i_t=s(X2e);Ybr=r(i_t,"from_pretrained()"),i_t.forEach(t),Kbr=r(AW,"to load the model weights."),AW.forEach(t),Zbr=i(mi),V2e=n(mi,"P",{});var d_t=s(V2e);e3r=r(d_t,"Examples:"),d_t.forEach(t),o3r=i(mi),m(l0.$$.fragment,mi),mi.forEach(t),r3r=i(fi),Ao=n(fi,"DIV",{class:!0});var Aa=s(Ao);m(i0.$$.fragment,Aa),t3r=i(Aa),z2e=n(Aa,"P",{});var c_t=s(z2e);a3r=r(c_t,"Instantiate one of the base model classes of the library from a pretrained model."),c_t.forEach(t),n3r=i(Aa),Ln=n(Aa,"P",{});var yM=s(Ln);s3r=r(yM,"The model class to instantiate is selected based on the "),W2e=n(yM,"CODE",{});var f_t=s(W2e);l3r=r(f_t,"model_type"),f_t.forEach(t),i3r=r(yM,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(yM,"CODE",{});var m_t=s(Q2e);d3r=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),c3r=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(yM,"CODE",{});var g_t=s(H2e);f3r=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),m3r=r(yM,":"),yM.forEach(t),g3r=i(Aa),z=n(Aa,"UL",{});var Q=s(z);G9=n(Q,"LI",{});var N8e=s(G9);U2e=n(N8e,"STRONG",{});var h_t=s(U2e);h3r=r(h_t,"albert"),h_t.forEach(t),p3r=r(N8e," \u2014 "),vX=n(N8e,"A",{href:!0});var p_t=s(vX);_3r=r(p_t,"FlaxAlbertModel"),p_t.forEach(t),u3r=r(N8e," (ALBERT model)"),N8e.forEach(t),b3r=i(Q),X9=n(Q,"LI",{});var q8e=s(X9);J2e=n(q8e,"STRONG",{});var __t=s(J2e);v3r=r(__t,"bart"),__t.forEach(t),T3r=r(q8e," \u2014 "),TX=n(q8e,"A",{href:!0});var u_t=s(TX);F3r=r(u_t,"FlaxBartModel"),u_t.forEach(t),C3r=r(q8e," (BART model)"),q8e.forEach(t),M3r=i(Q),V9=n(Q,"LI",{});var O8e=s(V9);Y2e=n(O8e,"STRONG",{});var b_t=s(Y2e);E3r=r(b_t,"beit"),b_t.forEach(t),y3r=r(O8e," \u2014 "),FX=n(O8e,"A",{href:!0});var v_t=s(FX);w3r=r(v_t,"FlaxBeitModel"),v_t.forEach(t),A3r=r(O8e," (BEiT model)"),O8e.forEach(t),L3r=i(Q),z9=n(Q,"LI",{});var G8e=s(z9);K2e=n(G8e,"STRONG",{});var T_t=s(K2e);B3r=r(T_t,"bert"),T_t.forEach(t),x3r=r(G8e," \u2014 "),CX=n(G8e,"A",{href:!0});var F_t=s(CX);k3r=r(F_t,"FlaxBertModel"),F_t.forEach(t),R3r=r(G8e," (BERT model)"),G8e.forEach(t),S3r=i(Q),W9=n(Q,"LI",{});var X8e=s(W9);Z2e=n(X8e,"STRONG",{});var C_t=s(Z2e);P3r=r(C_t,"big_bird"),C_t.forEach(t),$3r=r(X8e," \u2014 "),MX=n(X8e,"A",{href:!0});var M_t=s(MX);I3r=r(M_t,"FlaxBigBirdModel"),M_t.forEach(t),j3r=r(X8e," (BigBird model)"),X8e.forEach(t),D3r=i(Q),Q9=n(Q,"LI",{});var V8e=s(Q9);e1e=n(V8e,"STRONG",{});var E_t=s(e1e);N3r=r(E_t,"blenderbot"),E_t.forEach(t),q3r=r(V8e," \u2014 "),EX=n(V8e,"A",{href:!0});var y_t=s(EX);O3r=r(y_t,"FlaxBlenderbotModel"),y_t.forEach(t),G3r=r(V8e," (Blenderbot model)"),V8e.forEach(t),X3r=i(Q),H9=n(Q,"LI",{});var z8e=s(H9);o1e=n(z8e,"STRONG",{});var w_t=s(o1e);V3r=r(w_t,"blenderbot-small"),w_t.forEach(t),z3r=r(z8e," \u2014 "),yX=n(z8e,"A",{href:!0});var A_t=s(yX);W3r=r(A_t,"FlaxBlenderbotSmallModel"),A_t.forEach(t),Q3r=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),H3r=i(Q),U9=n(Q,"LI",{});var W8e=s(U9);r1e=n(W8e,"STRONG",{});var L_t=s(r1e);U3r=r(L_t,"clip"),L_t.forEach(t),J3r=r(W8e," \u2014 "),wX=n(W8e,"A",{href:!0});var B_t=s(wX);Y3r=r(B_t,"FlaxCLIPModel"),B_t.forEach(t),K3r=r(W8e," (CLIP model)"),W8e.forEach(t),Z3r=i(Q),J9=n(Q,"LI",{});var Q8e=s(J9);t1e=n(Q8e,"STRONG",{});var x_t=s(t1e);e5r=r(x_t,"distilbert"),x_t.forEach(t),o5r=r(Q8e," \u2014 "),AX=n(Q8e,"A",{href:!0});var k_t=s(AX);r5r=r(k_t,"FlaxDistilBertModel"),k_t.forEach(t),t5r=r(Q8e," (DistilBERT model)"),Q8e.forEach(t),a5r=i(Q),Y9=n(Q,"LI",{});var H8e=s(Y9);a1e=n(H8e,"STRONG",{});var R_t=s(a1e);n5r=r(R_t,"electra"),R_t.forEach(t),s5r=r(H8e," \u2014 "),LX=n(H8e,"A",{href:!0});var S_t=s(LX);l5r=r(S_t,"FlaxElectraModel"),S_t.forEach(t),i5r=r(H8e," (ELECTRA model)"),H8e.forEach(t),d5r=i(Q),K9=n(Q,"LI",{});var U8e=s(K9);n1e=n(U8e,"STRONG",{});var P_t=s(n1e);c5r=r(P_t,"gpt2"),P_t.forEach(t),f5r=r(U8e," \u2014 "),BX=n(U8e,"A",{href:!0});var $_t=s(BX);m5r=r($_t,"FlaxGPT2Model"),$_t.forEach(t),g5r=r(U8e," (OpenAI GPT-2 model)"),U8e.forEach(t),h5r=i(Q),Z9=n(Q,"LI",{});var J8e=s(Z9);s1e=n(J8e,"STRONG",{});var I_t=s(s1e);p5r=r(I_t,"gpt_neo"),I_t.forEach(t),_5r=r(J8e," \u2014 "),xX=n(J8e,"A",{href:!0});var j_t=s(xX);u5r=r(j_t,"FlaxGPTNeoModel"),j_t.forEach(t),b5r=r(J8e," (GPT Neo model)"),J8e.forEach(t),v5r=i(Q),eC=n(Q,"LI",{});var Y8e=s(eC);l1e=n(Y8e,"STRONG",{});var D_t=s(l1e);T5r=r(D_t,"gptj"),D_t.forEach(t),F5r=r(Y8e," \u2014 "),kX=n(Y8e,"A",{href:!0});var N_t=s(kX);C5r=r(N_t,"FlaxGPTJModel"),N_t.forEach(t),M5r=r(Y8e," (GPT-J model)"),Y8e.forEach(t),E5r=i(Q),oC=n(Q,"LI",{});var K8e=s(oC);i1e=n(K8e,"STRONG",{});var q_t=s(i1e);y5r=r(q_t,"marian"),q_t.forEach(t),w5r=r(K8e," \u2014 "),RX=n(K8e,"A",{href:!0});var O_t=s(RX);A5r=r(O_t,"FlaxMarianModel"),O_t.forEach(t),L5r=r(K8e," (Marian model)"),K8e.forEach(t),B5r=i(Q),rC=n(Q,"LI",{});var Z8e=s(rC);d1e=n(Z8e,"STRONG",{});var G_t=s(d1e);x5r=r(G_t,"mbart"),G_t.forEach(t),k5r=r(Z8e," \u2014 "),SX=n(Z8e,"A",{href:!0});var X_t=s(SX);R5r=r(X_t,"FlaxMBartModel"),X_t.forEach(t),S5r=r(Z8e," (mBART model)"),Z8e.forEach(t),P5r=i(Q),tC=n(Q,"LI",{});var e7e=s(tC);c1e=n(e7e,"STRONG",{});var V_t=s(c1e);$5r=r(V_t,"mt5"),V_t.forEach(t),I5r=r(e7e," \u2014 "),PX=n(e7e,"A",{href:!0});var z_t=s(PX);j5r=r(z_t,"FlaxMT5Model"),z_t.forEach(t),D5r=r(e7e," (mT5 model)"),e7e.forEach(t),N5r=i(Q),aC=n(Q,"LI",{});var o7e=s(aC);f1e=n(o7e,"STRONG",{});var W_t=s(f1e);q5r=r(W_t,"pegasus"),W_t.forEach(t),O5r=r(o7e," \u2014 "),$X=n(o7e,"A",{href:!0});var Q_t=s($X);G5r=r(Q_t,"FlaxPegasusModel"),Q_t.forEach(t),X5r=r(o7e," (Pegasus model)"),o7e.forEach(t),V5r=i(Q),nC=n(Q,"LI",{});var r7e=s(nC);m1e=n(r7e,"STRONG",{});var H_t=s(m1e);z5r=r(H_t,"roberta"),H_t.forEach(t),W5r=r(r7e," \u2014 "),IX=n(r7e,"A",{href:!0});var U_t=s(IX);Q5r=r(U_t,"FlaxRobertaModel"),U_t.forEach(t),H5r=r(r7e," (RoBERTa model)"),r7e.forEach(t),U5r=i(Q),sC=n(Q,"LI",{});var t7e=s(sC);g1e=n(t7e,"STRONG",{});var J_t=s(g1e);J5r=r(J_t,"roformer"),J_t.forEach(t),Y5r=r(t7e," \u2014 "),jX=n(t7e,"A",{href:!0});var Y_t=s(jX);K5r=r(Y_t,"FlaxRoFormerModel"),Y_t.forEach(t),Z5r=r(t7e," (RoFormer model)"),t7e.forEach(t),evr=i(Q),lC=n(Q,"LI",{});var a7e=s(lC);h1e=n(a7e,"STRONG",{});var K_t=s(h1e);ovr=r(K_t,"t5"),K_t.forEach(t),rvr=r(a7e," \u2014 "),DX=n(a7e,"A",{href:!0});var Z_t=s(DX);tvr=r(Z_t,"FlaxT5Model"),Z_t.forEach(t),avr=r(a7e," (T5 model)"),a7e.forEach(t),nvr=i(Q),iC=n(Q,"LI",{});var n7e=s(iC);p1e=n(n7e,"STRONG",{});var eut=s(p1e);svr=r(eut,"vision-text-dual-encoder"),eut.forEach(t),lvr=r(n7e," \u2014 "),NX=n(n7e,"A",{href:!0});var out=s(NX);ivr=r(out,"FlaxVisionTextDualEncoderModel"),out.forEach(t),dvr=r(n7e," (VisionTextDualEncoder model)"),n7e.forEach(t),cvr=i(Q),dC=n(Q,"LI",{});var s7e=s(dC);_1e=n(s7e,"STRONG",{});var rut=s(_1e);fvr=r(rut,"vit"),rut.forEach(t),mvr=r(s7e," \u2014 "),qX=n(s7e,"A",{href:!0});var tut=s(qX);gvr=r(tut,"FlaxViTModel"),tut.forEach(t),hvr=r(s7e," (ViT model)"),s7e.forEach(t),pvr=i(Q),cC=n(Q,"LI",{});var l7e=s(cC);u1e=n(l7e,"STRONG",{});var aut=s(u1e);_vr=r(aut,"wav2vec2"),aut.forEach(t),uvr=r(l7e," \u2014 "),OX=n(l7e,"A",{href:!0});var nut=s(OX);bvr=r(nut,"FlaxWav2Vec2Model"),nut.forEach(t),vvr=r(l7e," (Wav2Vec2 model)"),l7e.forEach(t),Tvr=i(Q),fC=n(Q,"LI",{});var i7e=s(fC);b1e=n(i7e,"STRONG",{});var sut=s(b1e);Fvr=r(sut,"xglm"),sut.forEach(t),Cvr=r(i7e," \u2014 "),GX=n(i7e,"A",{href:!0});var lut=s(GX);Mvr=r(lut,"FlaxXGLMModel"),lut.forEach(t),Evr=r(i7e," (XGLM model)"),i7e.forEach(t),Q.forEach(t),yvr=i(Aa),v1e=n(Aa,"P",{});var iut=s(v1e);wvr=r(iut,"Examples:"),iut.forEach(t),Avr=i(Aa),m(d0.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),tke=i(d),ef=n(d,"H2",{class:!0});var pSe=s(ef);mC=n(pSe,"A",{id:!0,class:!0,href:!0});var dut=s(mC);T1e=n(dut,"SPAN",{});var cut=s(T1e);m(c0.$$.fragment,cut),cut.forEach(t),dut.forEach(t),Lvr=i(pSe),F1e=n(pSe,"SPAN",{});var fut=s(F1e);Bvr=r(fut,"FlaxAutoModelForCausalLM"),fut.forEach(t),pSe.forEach(t),ake=i(d),kr=n(d,"DIV",{class:!0});var gi=s(kr);m(f0.$$.fragment,gi),xvr=i(gi),of=n(gi,"P",{});var LW=s(of);kvr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C1e=n(LW,"CODE",{});var mut=s(C1e);Rvr=r(mut,"from_pretrained()"),mut.forEach(t),Svr=r(LW,"class method or the "),M1e=n(LW,"CODE",{});var gut=s(M1e);Pvr=r(gut,"from_config()"),gut.forEach(t),$vr=r(LW,`class
method.`),LW.forEach(t),Ivr=i(gi),m0=n(gi,"P",{});var _Se=s(m0);jvr=r(_Se,"This class cannot be instantiated directly using "),E1e=n(_Se,"CODE",{});var hut=s(E1e);Dvr=r(hut,"__init__()"),hut.forEach(t),Nvr=r(_Se," (throws an error)."),_Se.forEach(t),qvr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(g0.$$.fragment,hi),Ovr=i(hi),y1e=n(hi,"P",{});var put=s(y1e);Gvr=r(put,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),put.forEach(t),Xvr=i(hi),rf=n(hi,"P",{});var BW=s(rf);Vvr=r(BW,`Note:
Loading a model from its configuration file does `),w1e=n(BW,"STRONG",{});var _ut=s(w1e);zvr=r(_ut,"not"),_ut.forEach(t),Wvr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=n(BW,"CODE",{});var uut=s(A1e);Qvr=r(uut,"from_pretrained()"),uut.forEach(t),Hvr=r(BW,"to load the model weights."),BW.forEach(t),Uvr=i(hi),L1e=n(hi,"P",{});var but=s(L1e);Jvr=r(but,"Examples:"),but.forEach(t),Yvr=i(hi),m(h0.$$.fragment,hi),hi.forEach(t),Kvr=i(gi),Lo=n(gi,"DIV",{class:!0});var La=s(Lo);m(p0.$$.fragment,La),Zvr=i(La),B1e=n(La,"P",{});var vut=s(B1e);eTr=r(vut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vut.forEach(t),oTr=i(La),Bn=n(La,"P",{});var wM=s(Bn);rTr=r(wM,"The model class to instantiate is selected based on the "),x1e=n(wM,"CODE",{});var Tut=s(x1e);tTr=r(Tut,"model_type"),Tut.forEach(t),aTr=r(wM,` property of the config object (either
passed as an argument or loaded from `),k1e=n(wM,"CODE",{});var Fut=s(k1e);nTr=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),sTr=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(wM,"CODE",{});var Cut=s(R1e);lTr=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),iTr=r(wM,":"),wM.forEach(t),dTr=i(La),xn=n(La,"UL",{});var AM=s(xn);gC=n(AM,"LI",{});var d7e=s(gC);S1e=n(d7e,"STRONG",{});var Mut=s(S1e);cTr=r(Mut,"gpt2"),Mut.forEach(t),fTr=r(d7e," \u2014 "),XX=n(d7e,"A",{href:!0});var Eut=s(XX);mTr=r(Eut,"FlaxGPT2LMHeadModel"),Eut.forEach(t),gTr=r(d7e," (OpenAI GPT-2 model)"),d7e.forEach(t),hTr=i(AM),hC=n(AM,"LI",{});var c7e=s(hC);P1e=n(c7e,"STRONG",{});var yut=s(P1e);pTr=r(yut,"gpt_neo"),yut.forEach(t),_Tr=r(c7e," \u2014 "),VX=n(c7e,"A",{href:!0});var wut=s(VX);uTr=r(wut,"FlaxGPTNeoForCausalLM"),wut.forEach(t),bTr=r(c7e," (GPT Neo model)"),c7e.forEach(t),vTr=i(AM),pC=n(AM,"LI",{});var f7e=s(pC);$1e=n(f7e,"STRONG",{});var Aut=s($1e);TTr=r(Aut,"gptj"),Aut.forEach(t),FTr=r(f7e," \u2014 "),zX=n(f7e,"A",{href:!0});var Lut=s(zX);CTr=r(Lut,"FlaxGPTJForCausalLM"),Lut.forEach(t),MTr=r(f7e," (GPT-J model)"),f7e.forEach(t),ETr=i(AM),_C=n(AM,"LI",{});var m7e=s(_C);I1e=n(m7e,"STRONG",{});var But=s(I1e);yTr=r(But,"xglm"),But.forEach(t),wTr=r(m7e," \u2014 "),WX=n(m7e,"A",{href:!0});var xut=s(WX);ATr=r(xut,"FlaxXGLMForCausalLM"),xut.forEach(t),LTr=r(m7e," (XGLM model)"),m7e.forEach(t),AM.forEach(t),BTr=i(La),j1e=n(La,"P",{});var kut=s(j1e);xTr=r(kut,"Examples:"),kut.forEach(t),kTr=i(La),m(_0.$$.fragment,La),La.forEach(t),gi.forEach(t),nke=i(d),tf=n(d,"H2",{class:!0});var uSe=s(tf);uC=n(uSe,"A",{id:!0,class:!0,href:!0});var Rut=s(uC);D1e=n(Rut,"SPAN",{});var Sut=s(D1e);m(u0.$$.fragment,Sut),Sut.forEach(t),Rut.forEach(t),RTr=i(uSe),N1e=n(uSe,"SPAN",{});var Put=s(N1e);STr=r(Put,"FlaxAutoModelForPreTraining"),Put.forEach(t),uSe.forEach(t),ske=i(d),Rr=n(d,"DIV",{class:!0});var pi=s(Rr);m(b0.$$.fragment,pi),PTr=i(pi),af=n(pi,"P",{});var xW=s(af);$Tr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),q1e=n(xW,"CODE",{});var $ut=s(q1e);ITr=r($ut,"from_pretrained()"),$ut.forEach(t),jTr=r(xW,"class method or the "),O1e=n(xW,"CODE",{});var Iut=s(O1e);DTr=r(Iut,"from_config()"),Iut.forEach(t),NTr=r(xW,`class
method.`),xW.forEach(t),qTr=i(pi),v0=n(pi,"P",{});var bSe=s(v0);OTr=r(bSe,"This class cannot be instantiated directly using "),G1e=n(bSe,"CODE",{});var jut=s(G1e);GTr=r(jut,"__init__()"),jut.forEach(t),XTr=r(bSe," (throws an error)."),bSe.forEach(t),VTr=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(T0.$$.fragment,_i),zTr=i(_i),X1e=n(_i,"P",{});var Dut=s(X1e);WTr=r(Dut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dut.forEach(t),QTr=i(_i),nf=n(_i,"P",{});var kW=s(nf);HTr=r(kW,`Note:
Loading a model from its configuration file does `),V1e=n(kW,"STRONG",{});var Nut=s(V1e);UTr=r(Nut,"not"),Nut.forEach(t),JTr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),z1e=n(kW,"CODE",{});var qut=s(z1e);YTr=r(qut,"from_pretrained()"),qut.forEach(t),KTr=r(kW,"to load the model weights."),kW.forEach(t),ZTr=i(_i),W1e=n(_i,"P",{});var Out=s(W1e);eFr=r(Out,"Examples:"),Out.forEach(t),oFr=i(_i),m(F0.$$.fragment,_i),_i.forEach(t),rFr=i(pi),Bo=n(pi,"DIV",{class:!0});var Ba=s(Bo);m(C0.$$.fragment,Ba),tFr=i(Ba),Q1e=n(Ba,"P",{});var Gut=s(Q1e);aFr=r(Gut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gut.forEach(t),nFr=i(Ba),kn=n(Ba,"P",{});var LM=s(kn);sFr=r(LM,"The model class to instantiate is selected based on the "),H1e=n(LM,"CODE",{});var Xut=s(H1e);lFr=r(Xut,"model_type"),Xut.forEach(t),iFr=r(LM,` property of the config object (either
passed as an argument or loaded from `),U1e=n(LM,"CODE",{});var Vut=s(U1e);dFr=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),cFr=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(LM,"CODE",{});var zut=s(J1e);fFr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),mFr=r(LM,":"),LM.forEach(t),gFr=i(Ba),fe=n(Ba,"UL",{});var _e=s(fe);bC=n(_e,"LI",{});var g7e=s(bC);Y1e=n(g7e,"STRONG",{});var Wut=s(Y1e);hFr=r(Wut,"albert"),Wut.forEach(t),pFr=r(g7e," \u2014 "),QX=n(g7e,"A",{href:!0});var Qut=s(QX);_Fr=r(Qut,"FlaxAlbertForPreTraining"),Qut.forEach(t),uFr=r(g7e," (ALBERT model)"),g7e.forEach(t),bFr=i(_e),vC=n(_e,"LI",{});var h7e=s(vC);K1e=n(h7e,"STRONG",{});var Hut=s(K1e);vFr=r(Hut,"bart"),Hut.forEach(t),TFr=r(h7e," \u2014 "),HX=n(h7e,"A",{href:!0});var Uut=s(HX);FFr=r(Uut,"FlaxBartForConditionalGeneration"),Uut.forEach(t),CFr=r(h7e," (BART model)"),h7e.forEach(t),MFr=i(_e),TC=n(_e,"LI",{});var p7e=s(TC);Z1e=n(p7e,"STRONG",{});var Jut=s(Z1e);EFr=r(Jut,"bert"),Jut.forEach(t),yFr=r(p7e," \u2014 "),UX=n(p7e,"A",{href:!0});var Yut=s(UX);wFr=r(Yut,"FlaxBertForPreTraining"),Yut.forEach(t),AFr=r(p7e," (BERT model)"),p7e.forEach(t),LFr=i(_e),FC=n(_e,"LI",{});var _7e=s(FC);ebe=n(_7e,"STRONG",{});var Kut=s(ebe);BFr=r(Kut,"big_bird"),Kut.forEach(t),xFr=r(_7e," \u2014 "),JX=n(_7e,"A",{href:!0});var Zut=s(JX);kFr=r(Zut,"FlaxBigBirdForPreTraining"),Zut.forEach(t),RFr=r(_7e," (BigBird model)"),_7e.forEach(t),SFr=i(_e),CC=n(_e,"LI",{});var u7e=s(CC);obe=n(u7e,"STRONG",{});var e2t=s(obe);PFr=r(e2t,"electra"),e2t.forEach(t),$Fr=r(u7e," \u2014 "),YX=n(u7e,"A",{href:!0});var o2t=s(YX);IFr=r(o2t,"FlaxElectraForPreTraining"),o2t.forEach(t),jFr=r(u7e," (ELECTRA model)"),u7e.forEach(t),DFr=i(_e),MC=n(_e,"LI",{});var b7e=s(MC);rbe=n(b7e,"STRONG",{});var r2t=s(rbe);NFr=r(r2t,"mbart"),r2t.forEach(t),qFr=r(b7e," \u2014 "),KX=n(b7e,"A",{href:!0});var t2t=s(KX);OFr=r(t2t,"FlaxMBartForConditionalGeneration"),t2t.forEach(t),GFr=r(b7e," (mBART model)"),b7e.forEach(t),XFr=i(_e),EC=n(_e,"LI",{});var v7e=s(EC);tbe=n(v7e,"STRONG",{});var a2t=s(tbe);VFr=r(a2t,"mt5"),a2t.forEach(t),zFr=r(v7e," \u2014 "),ZX=n(v7e,"A",{href:!0});var n2t=s(ZX);WFr=r(n2t,"FlaxMT5ForConditionalGeneration"),n2t.forEach(t),QFr=r(v7e," (mT5 model)"),v7e.forEach(t),HFr=i(_e),yC=n(_e,"LI",{});var T7e=s(yC);abe=n(T7e,"STRONG",{});var s2t=s(abe);UFr=r(s2t,"roberta"),s2t.forEach(t),JFr=r(T7e," \u2014 "),eV=n(T7e,"A",{href:!0});var l2t=s(eV);YFr=r(l2t,"FlaxRobertaForMaskedLM"),l2t.forEach(t),KFr=r(T7e," (RoBERTa model)"),T7e.forEach(t),ZFr=i(_e),wC=n(_e,"LI",{});var F7e=s(wC);nbe=n(F7e,"STRONG",{});var i2t=s(nbe);e9r=r(i2t,"roformer"),i2t.forEach(t),o9r=r(F7e," \u2014 "),oV=n(F7e,"A",{href:!0});var d2t=s(oV);r9r=r(d2t,"FlaxRoFormerForMaskedLM"),d2t.forEach(t),t9r=r(F7e," (RoFormer model)"),F7e.forEach(t),a9r=i(_e),AC=n(_e,"LI",{});var C7e=s(AC);sbe=n(C7e,"STRONG",{});var c2t=s(sbe);n9r=r(c2t,"t5"),c2t.forEach(t),s9r=r(C7e," \u2014 "),rV=n(C7e,"A",{href:!0});var f2t=s(rV);l9r=r(f2t,"FlaxT5ForConditionalGeneration"),f2t.forEach(t),i9r=r(C7e," (T5 model)"),C7e.forEach(t),d9r=i(_e),LC=n(_e,"LI",{});var M7e=s(LC);lbe=n(M7e,"STRONG",{});var m2t=s(lbe);c9r=r(m2t,"wav2vec2"),m2t.forEach(t),f9r=r(M7e," \u2014 "),tV=n(M7e,"A",{href:!0});var g2t=s(tV);m9r=r(g2t,"FlaxWav2Vec2ForPreTraining"),g2t.forEach(t),g9r=r(M7e," (Wav2Vec2 model)"),M7e.forEach(t),_e.forEach(t),h9r=i(Ba),ibe=n(Ba,"P",{});var h2t=s(ibe);p9r=r(h2t,"Examples:"),h2t.forEach(t),_9r=i(Ba),m(M0.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),lke=i(d),sf=n(d,"H2",{class:!0});var vSe=s(sf);BC=n(vSe,"A",{id:!0,class:!0,href:!0});var p2t=s(BC);dbe=n(p2t,"SPAN",{});var _2t=s(dbe);m(E0.$$.fragment,_2t),_2t.forEach(t),p2t.forEach(t),u9r=i(vSe),cbe=n(vSe,"SPAN",{});var u2t=s(cbe);b9r=r(u2t,"FlaxAutoModelForMaskedLM"),u2t.forEach(t),vSe.forEach(t),ike=i(d),Sr=n(d,"DIV",{class:!0});var ui=s(Sr);m(y0.$$.fragment,ui),v9r=i(ui),lf=n(ui,"P",{});var RW=s(lf);T9r=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fbe=n(RW,"CODE",{});var b2t=s(fbe);F9r=r(b2t,"from_pretrained()"),b2t.forEach(t),C9r=r(RW,"class method or the "),mbe=n(RW,"CODE",{});var v2t=s(mbe);M9r=r(v2t,"from_config()"),v2t.forEach(t),E9r=r(RW,`class
method.`),RW.forEach(t),y9r=i(ui),w0=n(ui,"P",{});var TSe=s(w0);w9r=r(TSe,"This class cannot be instantiated directly using "),gbe=n(TSe,"CODE",{});var T2t=s(gbe);A9r=r(T2t,"__init__()"),T2t.forEach(t),L9r=r(TSe," (throws an error)."),TSe.forEach(t),B9r=i(ui),At=n(ui,"DIV",{class:!0});var bi=s(At);m(A0.$$.fragment,bi),x9r=i(bi),hbe=n(bi,"P",{});var F2t=s(hbe);k9r=r(F2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F2t.forEach(t),R9r=i(bi),df=n(bi,"P",{});var SW=s(df);S9r=r(SW,`Note:
Loading a model from its configuration file does `),pbe=n(SW,"STRONG",{});var C2t=s(pbe);P9r=r(C2t,"not"),C2t.forEach(t),$9r=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_be=n(SW,"CODE",{});var M2t=s(_be);I9r=r(M2t,"from_pretrained()"),M2t.forEach(t),j9r=r(SW,"to load the model weights."),SW.forEach(t),D9r=i(bi),ube=n(bi,"P",{});var E2t=s(ube);N9r=r(E2t,"Examples:"),E2t.forEach(t),q9r=i(bi),m(L0.$$.fragment,bi),bi.forEach(t),O9r=i(ui),xo=n(ui,"DIV",{class:!0});var xa=s(xo);m(B0.$$.fragment,xa),G9r=i(xa),bbe=n(xa,"P",{});var y2t=s(bbe);X9r=r(y2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y2t.forEach(t),V9r=i(xa),Rn=n(xa,"P",{});var BM=s(Rn);z9r=r(BM,"The model class to instantiate is selected based on the "),vbe=n(BM,"CODE",{});var w2t=s(vbe);W9r=r(w2t,"model_type"),w2t.forEach(t),Q9r=r(BM,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(BM,"CODE",{});var A2t=s(Tbe);H9r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),U9r=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(BM,"CODE",{});var L2t=s(Fbe);J9r=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),Y9r=r(BM,":"),BM.forEach(t),K9r=i(xa),ve=n(xa,"UL",{});var ro=s(ve);xC=n(ro,"LI",{});var E7e=s(xC);Cbe=n(E7e,"STRONG",{});var B2t=s(Cbe);Z9r=r(B2t,"albert"),B2t.forEach(t),eCr=r(E7e," \u2014 "),aV=n(E7e,"A",{href:!0});var x2t=s(aV);oCr=r(x2t,"FlaxAlbertForMaskedLM"),x2t.forEach(t),rCr=r(E7e," (ALBERT model)"),E7e.forEach(t),tCr=i(ro),kC=n(ro,"LI",{});var y7e=s(kC);Mbe=n(y7e,"STRONG",{});var k2t=s(Mbe);aCr=r(k2t,"bart"),k2t.forEach(t),nCr=r(y7e," \u2014 "),nV=n(y7e,"A",{href:!0});var R2t=s(nV);sCr=r(R2t,"FlaxBartForConditionalGeneration"),R2t.forEach(t),lCr=r(y7e," (BART model)"),y7e.forEach(t),iCr=i(ro),RC=n(ro,"LI",{});var w7e=s(RC);Ebe=n(w7e,"STRONG",{});var S2t=s(Ebe);dCr=r(S2t,"bert"),S2t.forEach(t),cCr=r(w7e," \u2014 "),sV=n(w7e,"A",{href:!0});var P2t=s(sV);fCr=r(P2t,"FlaxBertForMaskedLM"),P2t.forEach(t),mCr=r(w7e," (BERT model)"),w7e.forEach(t),gCr=i(ro),SC=n(ro,"LI",{});var A7e=s(SC);ybe=n(A7e,"STRONG",{});var $2t=s(ybe);hCr=r($2t,"big_bird"),$2t.forEach(t),pCr=r(A7e," \u2014 "),lV=n(A7e,"A",{href:!0});var I2t=s(lV);_Cr=r(I2t,"FlaxBigBirdForMaskedLM"),I2t.forEach(t),uCr=r(A7e," (BigBird model)"),A7e.forEach(t),bCr=i(ro),PC=n(ro,"LI",{});var L7e=s(PC);wbe=n(L7e,"STRONG",{});var j2t=s(wbe);vCr=r(j2t,"distilbert"),j2t.forEach(t),TCr=r(L7e," \u2014 "),iV=n(L7e,"A",{href:!0});var D2t=s(iV);FCr=r(D2t,"FlaxDistilBertForMaskedLM"),D2t.forEach(t),CCr=r(L7e," (DistilBERT model)"),L7e.forEach(t),MCr=i(ro),$C=n(ro,"LI",{});var B7e=s($C);Abe=n(B7e,"STRONG",{});var N2t=s(Abe);ECr=r(N2t,"electra"),N2t.forEach(t),yCr=r(B7e," \u2014 "),dV=n(B7e,"A",{href:!0});var q2t=s(dV);wCr=r(q2t,"FlaxElectraForMaskedLM"),q2t.forEach(t),ACr=r(B7e," (ELECTRA model)"),B7e.forEach(t),LCr=i(ro),IC=n(ro,"LI",{});var x7e=s(IC);Lbe=n(x7e,"STRONG",{});var O2t=s(Lbe);BCr=r(O2t,"mbart"),O2t.forEach(t),xCr=r(x7e," \u2014 "),cV=n(x7e,"A",{href:!0});var G2t=s(cV);kCr=r(G2t,"FlaxMBartForConditionalGeneration"),G2t.forEach(t),RCr=r(x7e," (mBART model)"),x7e.forEach(t),SCr=i(ro),jC=n(ro,"LI",{});var k7e=s(jC);Bbe=n(k7e,"STRONG",{});var X2t=s(Bbe);PCr=r(X2t,"roberta"),X2t.forEach(t),$Cr=r(k7e," \u2014 "),fV=n(k7e,"A",{href:!0});var V2t=s(fV);ICr=r(V2t,"FlaxRobertaForMaskedLM"),V2t.forEach(t),jCr=r(k7e," (RoBERTa model)"),k7e.forEach(t),DCr=i(ro),DC=n(ro,"LI",{});var R7e=s(DC);xbe=n(R7e,"STRONG",{});var z2t=s(xbe);NCr=r(z2t,"roformer"),z2t.forEach(t),qCr=r(R7e," \u2014 "),mV=n(R7e,"A",{href:!0});var W2t=s(mV);OCr=r(W2t,"FlaxRoFormerForMaskedLM"),W2t.forEach(t),GCr=r(R7e," (RoFormer model)"),R7e.forEach(t),ro.forEach(t),XCr=i(xa),kbe=n(xa,"P",{});var Q2t=s(kbe);VCr=r(Q2t,"Examples:"),Q2t.forEach(t),zCr=i(xa),m(x0.$$.fragment,xa),xa.forEach(t),ui.forEach(t),dke=i(d),cf=n(d,"H2",{class:!0});var FSe=s(cf);NC=n(FSe,"A",{id:!0,class:!0,href:!0});var H2t=s(NC);Rbe=n(H2t,"SPAN",{});var U2t=s(Rbe);m(k0.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),WCr=i(FSe),Sbe=n(FSe,"SPAN",{});var J2t=s(Sbe);QCr=r(J2t,"FlaxAutoModelForSeq2SeqLM"),J2t.forEach(t),FSe.forEach(t),cke=i(d),Pr=n(d,"DIV",{class:!0});var vi=s(Pr);m(R0.$$.fragment,vi),HCr=i(vi),ff=n(vi,"P",{});var PW=s(ff);UCr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pbe=n(PW,"CODE",{});var Y2t=s(Pbe);JCr=r(Y2t,"from_pretrained()"),Y2t.forEach(t),YCr=r(PW,"class method or the "),$be=n(PW,"CODE",{});var K2t=s($be);KCr=r(K2t,"from_config()"),K2t.forEach(t),ZCr=r(PW,`class
method.`),PW.forEach(t),e4r=i(vi),S0=n(vi,"P",{});var CSe=s(S0);o4r=r(CSe,"This class cannot be instantiated directly using "),Ibe=n(CSe,"CODE",{});var Z2t=s(Ibe);r4r=r(Z2t,"__init__()"),Z2t.forEach(t),t4r=r(CSe," (throws an error)."),CSe.forEach(t),a4r=i(vi),Lt=n(vi,"DIV",{class:!0});var Ti=s(Lt);m(P0.$$.fragment,Ti),n4r=i(Ti),jbe=n(Ti,"P",{});var e1t=s(jbe);s4r=r(e1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e1t.forEach(t),l4r=i(Ti),mf=n(Ti,"P",{});var $W=s(mf);i4r=r($W,`Note:
Loading a model from its configuration file does `),Dbe=n($W,"STRONG",{});var o1t=s(Dbe);d4r=r(o1t,"not"),o1t.forEach(t),c4r=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=n($W,"CODE",{});var r1t=s(Nbe);f4r=r(r1t,"from_pretrained()"),r1t.forEach(t),m4r=r($W,"to load the model weights."),$W.forEach(t),g4r=i(Ti),qbe=n(Ti,"P",{});var t1t=s(qbe);h4r=r(t1t,"Examples:"),t1t.forEach(t),p4r=i(Ti),m($0.$$.fragment,Ti),Ti.forEach(t),_4r=i(vi),ko=n(vi,"DIV",{class:!0});var ka=s(ko);m(I0.$$.fragment,ka),u4r=i(ka),Obe=n(ka,"P",{});var a1t=s(Obe);b4r=r(a1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a1t.forEach(t),v4r=i(ka),Sn=n(ka,"P",{});var xM=s(Sn);T4r=r(xM,"The model class to instantiate is selected based on the "),Gbe=n(xM,"CODE",{});var n1t=s(Gbe);F4r=r(n1t,"model_type"),n1t.forEach(t),C4r=r(xM,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(xM,"CODE",{});var s1t=s(Xbe);M4r=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),E4r=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(xM,"CODE",{});var l1t=s(Vbe);y4r=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),w4r=r(xM,":"),xM.forEach(t),A4r=i(ka),Te=n(ka,"UL",{});var to=s(Te);qC=n(to,"LI",{});var S7e=s(qC);zbe=n(S7e,"STRONG",{});var i1t=s(zbe);L4r=r(i1t,"bart"),i1t.forEach(t),B4r=r(S7e," \u2014 "),gV=n(S7e,"A",{href:!0});var d1t=s(gV);x4r=r(d1t,"FlaxBartForConditionalGeneration"),d1t.forEach(t),k4r=r(S7e," (BART model)"),S7e.forEach(t),R4r=i(to),OC=n(to,"LI",{});var P7e=s(OC);Wbe=n(P7e,"STRONG",{});var c1t=s(Wbe);S4r=r(c1t,"blenderbot"),c1t.forEach(t),P4r=r(P7e," \u2014 "),hV=n(P7e,"A",{href:!0});var f1t=s(hV);$4r=r(f1t,"FlaxBlenderbotForConditionalGeneration"),f1t.forEach(t),I4r=r(P7e," (Blenderbot model)"),P7e.forEach(t),j4r=i(to),GC=n(to,"LI",{});var $7e=s(GC);Qbe=n($7e,"STRONG",{});var m1t=s(Qbe);D4r=r(m1t,"blenderbot-small"),m1t.forEach(t),N4r=r($7e," \u2014 "),pV=n($7e,"A",{href:!0});var g1t=s(pV);q4r=r(g1t,"FlaxBlenderbotSmallForConditionalGeneration"),g1t.forEach(t),O4r=r($7e," (BlenderbotSmall model)"),$7e.forEach(t),G4r=i(to),XC=n(to,"LI",{});var I7e=s(XC);Hbe=n(I7e,"STRONG",{});var h1t=s(Hbe);X4r=r(h1t,"encoder-decoder"),h1t.forEach(t),V4r=r(I7e," \u2014 "),_V=n(I7e,"A",{href:!0});var p1t=s(_V);z4r=r(p1t,"FlaxEncoderDecoderModel"),p1t.forEach(t),W4r=r(I7e," (Encoder decoder model)"),I7e.forEach(t),Q4r=i(to),VC=n(to,"LI",{});var j7e=s(VC);Ube=n(j7e,"STRONG",{});var _1t=s(Ube);H4r=r(_1t,"marian"),_1t.forEach(t),U4r=r(j7e," \u2014 "),uV=n(j7e,"A",{href:!0});var u1t=s(uV);J4r=r(u1t,"FlaxMarianMTModel"),u1t.forEach(t),Y4r=r(j7e," (Marian model)"),j7e.forEach(t),K4r=i(to),zC=n(to,"LI",{});var D7e=s(zC);Jbe=n(D7e,"STRONG",{});var b1t=s(Jbe);Z4r=r(b1t,"mbart"),b1t.forEach(t),eMr=r(D7e," \u2014 "),bV=n(D7e,"A",{href:!0});var v1t=s(bV);oMr=r(v1t,"FlaxMBartForConditionalGeneration"),v1t.forEach(t),rMr=r(D7e," (mBART model)"),D7e.forEach(t),tMr=i(to),WC=n(to,"LI",{});var N7e=s(WC);Ybe=n(N7e,"STRONG",{});var T1t=s(Ybe);aMr=r(T1t,"mt5"),T1t.forEach(t),nMr=r(N7e," \u2014 "),vV=n(N7e,"A",{href:!0});var F1t=s(vV);sMr=r(F1t,"FlaxMT5ForConditionalGeneration"),F1t.forEach(t),lMr=r(N7e," (mT5 model)"),N7e.forEach(t),iMr=i(to),QC=n(to,"LI",{});var q7e=s(QC);Kbe=n(q7e,"STRONG",{});var C1t=s(Kbe);dMr=r(C1t,"pegasus"),C1t.forEach(t),cMr=r(q7e," \u2014 "),TV=n(q7e,"A",{href:!0});var M1t=s(TV);fMr=r(M1t,"FlaxPegasusForConditionalGeneration"),M1t.forEach(t),mMr=r(q7e," (Pegasus model)"),q7e.forEach(t),gMr=i(to),HC=n(to,"LI",{});var O7e=s(HC);Zbe=n(O7e,"STRONG",{});var E1t=s(Zbe);hMr=r(E1t,"t5"),E1t.forEach(t),pMr=r(O7e," \u2014 "),FV=n(O7e,"A",{href:!0});var y1t=s(FV);_Mr=r(y1t,"FlaxT5ForConditionalGeneration"),y1t.forEach(t),uMr=r(O7e," (T5 model)"),O7e.forEach(t),to.forEach(t),bMr=i(ka),e3e=n(ka,"P",{});var w1t=s(e3e);vMr=r(w1t,"Examples:"),w1t.forEach(t),TMr=i(ka),m(j0.$$.fragment,ka),ka.forEach(t),vi.forEach(t),fke=i(d),gf=n(d,"H2",{class:!0});var MSe=s(gf);UC=n(MSe,"A",{id:!0,class:!0,href:!0});var A1t=s(UC);o3e=n(A1t,"SPAN",{});var L1t=s(o3e);m(D0.$$.fragment,L1t),L1t.forEach(t),A1t.forEach(t),FMr=i(MSe),r3e=n(MSe,"SPAN",{});var B1t=s(r3e);CMr=r(B1t,"FlaxAutoModelForSequenceClassification"),B1t.forEach(t),MSe.forEach(t),mke=i(d),$r=n(d,"DIV",{class:!0});var Fi=s($r);m(N0.$$.fragment,Fi),MMr=i(Fi),hf=n(Fi,"P",{});var IW=s(hf);EMr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),t3e=n(IW,"CODE",{});var x1t=s(t3e);yMr=r(x1t,"from_pretrained()"),x1t.forEach(t),wMr=r(IW,"class method or the "),a3e=n(IW,"CODE",{});var k1t=s(a3e);AMr=r(k1t,"from_config()"),k1t.forEach(t),LMr=r(IW,`class
method.`),IW.forEach(t),BMr=i(Fi),q0=n(Fi,"P",{});var ESe=s(q0);xMr=r(ESe,"This class cannot be instantiated directly using "),n3e=n(ESe,"CODE",{});var R1t=s(n3e);kMr=r(R1t,"__init__()"),R1t.forEach(t),RMr=r(ESe," (throws an error)."),ESe.forEach(t),SMr=i(Fi),Bt=n(Fi,"DIV",{class:!0});var Ci=s(Bt);m(O0.$$.fragment,Ci),PMr=i(Ci),s3e=n(Ci,"P",{});var S1t=s(s3e);$Mr=r(S1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S1t.forEach(t),IMr=i(Ci),pf=n(Ci,"P",{});var jW=s(pf);jMr=r(jW,`Note:
Loading a model from its configuration file does `),l3e=n(jW,"STRONG",{});var P1t=s(l3e);DMr=r(P1t,"not"),P1t.forEach(t),NMr=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),i3e=n(jW,"CODE",{});var $1t=s(i3e);qMr=r($1t,"from_pretrained()"),$1t.forEach(t),OMr=r(jW,"to load the model weights."),jW.forEach(t),GMr=i(Ci),d3e=n(Ci,"P",{});var I1t=s(d3e);XMr=r(I1t,"Examples:"),I1t.forEach(t),VMr=i(Ci),m(G0.$$.fragment,Ci),Ci.forEach(t),zMr=i(Fi),Ro=n(Fi,"DIV",{class:!0});var Ra=s(Ro);m(X0.$$.fragment,Ra),WMr=i(Ra),c3e=n(Ra,"P",{});var j1t=s(c3e);QMr=r(j1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j1t.forEach(t),HMr=i(Ra),Pn=n(Ra,"P",{});var kM=s(Pn);UMr=r(kM,"The model class to instantiate is selected based on the "),f3e=n(kM,"CODE",{});var D1t=s(f3e);JMr=r(D1t,"model_type"),D1t.forEach(t),YMr=r(kM,` property of the config object (either
passed as an argument or loaded from `),m3e=n(kM,"CODE",{});var N1t=s(m3e);KMr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),ZMr=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=n(kM,"CODE",{});var q1t=s(g3e);eEr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),oEr=r(kM,":"),kM.forEach(t),rEr=i(Ra),Fe=n(Ra,"UL",{});var ao=s(Fe);JC=n(ao,"LI",{});var G7e=s(JC);h3e=n(G7e,"STRONG",{});var O1t=s(h3e);tEr=r(O1t,"albert"),O1t.forEach(t),aEr=r(G7e," \u2014 "),CV=n(G7e,"A",{href:!0});var G1t=s(CV);nEr=r(G1t,"FlaxAlbertForSequenceClassification"),G1t.forEach(t),sEr=r(G7e," (ALBERT model)"),G7e.forEach(t),lEr=i(ao),YC=n(ao,"LI",{});var X7e=s(YC);p3e=n(X7e,"STRONG",{});var X1t=s(p3e);iEr=r(X1t,"bart"),X1t.forEach(t),dEr=r(X7e," \u2014 "),MV=n(X7e,"A",{href:!0});var V1t=s(MV);cEr=r(V1t,"FlaxBartForSequenceClassification"),V1t.forEach(t),fEr=r(X7e," (BART model)"),X7e.forEach(t),mEr=i(ao),KC=n(ao,"LI",{});var V7e=s(KC);_3e=n(V7e,"STRONG",{});var z1t=s(_3e);gEr=r(z1t,"bert"),z1t.forEach(t),hEr=r(V7e," \u2014 "),EV=n(V7e,"A",{href:!0});var W1t=s(EV);pEr=r(W1t,"FlaxBertForSequenceClassification"),W1t.forEach(t),_Er=r(V7e," (BERT model)"),V7e.forEach(t),uEr=i(ao),ZC=n(ao,"LI",{});var z7e=s(ZC);u3e=n(z7e,"STRONG",{});var Q1t=s(u3e);bEr=r(Q1t,"big_bird"),Q1t.forEach(t),vEr=r(z7e," \u2014 "),yV=n(z7e,"A",{href:!0});var H1t=s(yV);TEr=r(H1t,"FlaxBigBirdForSequenceClassification"),H1t.forEach(t),FEr=r(z7e," (BigBird model)"),z7e.forEach(t),CEr=i(ao),e4=n(ao,"LI",{});var W7e=s(e4);b3e=n(W7e,"STRONG",{});var U1t=s(b3e);MEr=r(U1t,"distilbert"),U1t.forEach(t),EEr=r(W7e," \u2014 "),wV=n(W7e,"A",{href:!0});var J1t=s(wV);yEr=r(J1t,"FlaxDistilBertForSequenceClassification"),J1t.forEach(t),wEr=r(W7e," (DistilBERT model)"),W7e.forEach(t),AEr=i(ao),o4=n(ao,"LI",{});var Q7e=s(o4);v3e=n(Q7e,"STRONG",{});var Y1t=s(v3e);LEr=r(Y1t,"electra"),Y1t.forEach(t),BEr=r(Q7e," \u2014 "),AV=n(Q7e,"A",{href:!0});var K1t=s(AV);xEr=r(K1t,"FlaxElectraForSequenceClassification"),K1t.forEach(t),kEr=r(Q7e," (ELECTRA model)"),Q7e.forEach(t),REr=i(ao),r4=n(ao,"LI",{});var H7e=s(r4);T3e=n(H7e,"STRONG",{});var Z1t=s(T3e);SEr=r(Z1t,"mbart"),Z1t.forEach(t),PEr=r(H7e," \u2014 "),LV=n(H7e,"A",{href:!0});var ebt=s(LV);$Er=r(ebt,"FlaxMBartForSequenceClassification"),ebt.forEach(t),IEr=r(H7e," (mBART model)"),H7e.forEach(t),jEr=i(ao),t4=n(ao,"LI",{});var U7e=s(t4);F3e=n(U7e,"STRONG",{});var obt=s(F3e);DEr=r(obt,"roberta"),obt.forEach(t),NEr=r(U7e," \u2014 "),BV=n(U7e,"A",{href:!0});var rbt=s(BV);qEr=r(rbt,"FlaxRobertaForSequenceClassification"),rbt.forEach(t),OEr=r(U7e," (RoBERTa model)"),U7e.forEach(t),GEr=i(ao),a4=n(ao,"LI",{});var J7e=s(a4);C3e=n(J7e,"STRONG",{});var tbt=s(C3e);XEr=r(tbt,"roformer"),tbt.forEach(t),VEr=r(J7e," \u2014 "),xV=n(J7e,"A",{href:!0});var abt=s(xV);zEr=r(abt,"FlaxRoFormerForSequenceClassification"),abt.forEach(t),WEr=r(J7e," (RoFormer model)"),J7e.forEach(t),ao.forEach(t),QEr=i(Ra),M3e=n(Ra,"P",{});var nbt=s(M3e);HEr=r(nbt,"Examples:"),nbt.forEach(t),UEr=i(Ra),m(V0.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),gke=i(d),_f=n(d,"H2",{class:!0});var ySe=s(_f);n4=n(ySe,"A",{id:!0,class:!0,href:!0});var sbt=s(n4);E3e=n(sbt,"SPAN",{});var lbt=s(E3e);m(z0.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),JEr=i(ySe),y3e=n(ySe,"SPAN",{});var ibt=s(y3e);YEr=r(ibt,"FlaxAutoModelForQuestionAnswering"),ibt.forEach(t),ySe.forEach(t),hke=i(d),Ir=n(d,"DIV",{class:!0});var Mi=s(Ir);m(W0.$$.fragment,Mi),KEr=i(Mi),uf=n(Mi,"P",{});var DW=s(uf);ZEr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w3e=n(DW,"CODE",{});var dbt=s(w3e);eyr=r(dbt,"from_pretrained()"),dbt.forEach(t),oyr=r(DW,"class method or the "),A3e=n(DW,"CODE",{});var cbt=s(A3e);ryr=r(cbt,"from_config()"),cbt.forEach(t),tyr=r(DW,`class
method.`),DW.forEach(t),ayr=i(Mi),Q0=n(Mi,"P",{});var wSe=s(Q0);nyr=r(wSe,"This class cannot be instantiated directly using "),L3e=n(wSe,"CODE",{});var fbt=s(L3e);syr=r(fbt,"__init__()"),fbt.forEach(t),lyr=r(wSe," (throws an error)."),wSe.forEach(t),iyr=i(Mi),xt=n(Mi,"DIV",{class:!0});var Ei=s(xt);m(H0.$$.fragment,Ei),dyr=i(Ei),B3e=n(Ei,"P",{});var mbt=s(B3e);cyr=r(mbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mbt.forEach(t),fyr=i(Ei),bf=n(Ei,"P",{});var NW=s(bf);myr=r(NW,`Note:
Loading a model from its configuration file does `),x3e=n(NW,"STRONG",{});var gbt=s(x3e);gyr=r(gbt,"not"),gbt.forEach(t),hyr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),k3e=n(NW,"CODE",{});var hbt=s(k3e);pyr=r(hbt,"from_pretrained()"),hbt.forEach(t),_yr=r(NW,"to load the model weights."),NW.forEach(t),uyr=i(Ei),R3e=n(Ei,"P",{});var pbt=s(R3e);byr=r(pbt,"Examples:"),pbt.forEach(t),vyr=i(Ei),m(U0.$$.fragment,Ei),Ei.forEach(t),Tyr=i(Mi),So=n(Mi,"DIV",{class:!0});var Sa=s(So);m(J0.$$.fragment,Sa),Fyr=i(Sa),S3e=n(Sa,"P",{});var _bt=s(S3e);Cyr=r(_bt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_bt.forEach(t),Myr=i(Sa),$n=n(Sa,"P",{});var RM=s($n);Eyr=r(RM,"The model class to instantiate is selected based on the "),P3e=n(RM,"CODE",{});var ubt=s(P3e);yyr=r(ubt,"model_type"),ubt.forEach(t),wyr=r(RM,` property of the config object (either
passed as an argument or loaded from `),$3e=n(RM,"CODE",{});var bbt=s($3e);Ayr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Lyr=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(RM,"CODE",{});var vbt=s(I3e);Byr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),xyr=r(RM,":"),RM.forEach(t),kyr=i(Sa),Ce=n(Sa,"UL",{});var no=s(Ce);s4=n(no,"LI",{});var Y7e=s(s4);j3e=n(Y7e,"STRONG",{});var Tbt=s(j3e);Ryr=r(Tbt,"albert"),Tbt.forEach(t),Syr=r(Y7e," \u2014 "),kV=n(Y7e,"A",{href:!0});var Fbt=s(kV);Pyr=r(Fbt,"FlaxAlbertForQuestionAnswering"),Fbt.forEach(t),$yr=r(Y7e," (ALBERT model)"),Y7e.forEach(t),Iyr=i(no),l4=n(no,"LI",{});var K7e=s(l4);D3e=n(K7e,"STRONG",{});var Cbt=s(D3e);jyr=r(Cbt,"bart"),Cbt.forEach(t),Dyr=r(K7e," \u2014 "),RV=n(K7e,"A",{href:!0});var Mbt=s(RV);Nyr=r(Mbt,"FlaxBartForQuestionAnswering"),Mbt.forEach(t),qyr=r(K7e," (BART model)"),K7e.forEach(t),Oyr=i(no),i4=n(no,"LI",{});var Z7e=s(i4);N3e=n(Z7e,"STRONG",{});var Ebt=s(N3e);Gyr=r(Ebt,"bert"),Ebt.forEach(t),Xyr=r(Z7e," \u2014 "),SV=n(Z7e,"A",{href:!0});var ybt=s(SV);Vyr=r(ybt,"FlaxBertForQuestionAnswering"),ybt.forEach(t),zyr=r(Z7e," (BERT model)"),Z7e.forEach(t),Wyr=i(no),d4=n(no,"LI",{});var eBe=s(d4);q3e=n(eBe,"STRONG",{});var wbt=s(q3e);Qyr=r(wbt,"big_bird"),wbt.forEach(t),Hyr=r(eBe," \u2014 "),PV=n(eBe,"A",{href:!0});var Abt=s(PV);Uyr=r(Abt,"FlaxBigBirdForQuestionAnswering"),Abt.forEach(t),Jyr=r(eBe," (BigBird model)"),eBe.forEach(t),Yyr=i(no),c4=n(no,"LI",{});var oBe=s(c4);O3e=n(oBe,"STRONG",{});var Lbt=s(O3e);Kyr=r(Lbt,"distilbert"),Lbt.forEach(t),Zyr=r(oBe," \u2014 "),$V=n(oBe,"A",{href:!0});var Bbt=s($V);ewr=r(Bbt,"FlaxDistilBertForQuestionAnswering"),Bbt.forEach(t),owr=r(oBe," (DistilBERT model)"),oBe.forEach(t),rwr=i(no),f4=n(no,"LI",{});var rBe=s(f4);G3e=n(rBe,"STRONG",{});var xbt=s(G3e);twr=r(xbt,"electra"),xbt.forEach(t),awr=r(rBe," \u2014 "),IV=n(rBe,"A",{href:!0});var kbt=s(IV);nwr=r(kbt,"FlaxElectraForQuestionAnswering"),kbt.forEach(t),swr=r(rBe," (ELECTRA model)"),rBe.forEach(t),lwr=i(no),m4=n(no,"LI",{});var tBe=s(m4);X3e=n(tBe,"STRONG",{});var Rbt=s(X3e);iwr=r(Rbt,"mbart"),Rbt.forEach(t),dwr=r(tBe," \u2014 "),jV=n(tBe,"A",{href:!0});var Sbt=s(jV);cwr=r(Sbt,"FlaxMBartForQuestionAnswering"),Sbt.forEach(t),fwr=r(tBe," (mBART model)"),tBe.forEach(t),mwr=i(no),g4=n(no,"LI",{});var aBe=s(g4);V3e=n(aBe,"STRONG",{});var Pbt=s(V3e);gwr=r(Pbt,"roberta"),Pbt.forEach(t),hwr=r(aBe," \u2014 "),DV=n(aBe,"A",{href:!0});var $bt=s(DV);pwr=r($bt,"FlaxRobertaForQuestionAnswering"),$bt.forEach(t),_wr=r(aBe," (RoBERTa model)"),aBe.forEach(t),uwr=i(no),h4=n(no,"LI",{});var nBe=s(h4);z3e=n(nBe,"STRONG",{});var Ibt=s(z3e);bwr=r(Ibt,"roformer"),Ibt.forEach(t),vwr=r(nBe," \u2014 "),NV=n(nBe,"A",{href:!0});var jbt=s(NV);Twr=r(jbt,"FlaxRoFormerForQuestionAnswering"),jbt.forEach(t),Fwr=r(nBe," (RoFormer model)"),nBe.forEach(t),no.forEach(t),Cwr=i(Sa),W3e=n(Sa,"P",{});var Dbt=s(W3e);Mwr=r(Dbt,"Examples:"),Dbt.forEach(t),Ewr=i(Sa),m(Y0.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),pke=i(d),vf=n(d,"H2",{class:!0});var ASe=s(vf);p4=n(ASe,"A",{id:!0,class:!0,href:!0});var Nbt=s(p4);Q3e=n(Nbt,"SPAN",{});var qbt=s(Q3e);m(K0.$$.fragment,qbt),qbt.forEach(t),Nbt.forEach(t),ywr=i(ASe),H3e=n(ASe,"SPAN",{});var Obt=s(H3e);wwr=r(Obt,"FlaxAutoModelForTokenClassification"),Obt.forEach(t),ASe.forEach(t),_ke=i(d),jr=n(d,"DIV",{class:!0});var yi=s(jr);m(Z0.$$.fragment,yi),Awr=i(yi),Tf=n(yi,"P",{});var qW=s(Tf);Lwr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),U3e=n(qW,"CODE",{});var Gbt=s(U3e);Bwr=r(Gbt,"from_pretrained()"),Gbt.forEach(t),xwr=r(qW,"class method or the "),J3e=n(qW,"CODE",{});var Xbt=s(J3e);kwr=r(Xbt,"from_config()"),Xbt.forEach(t),Rwr=r(qW,`class
method.`),qW.forEach(t),Swr=i(yi),eL=n(yi,"P",{});var LSe=s(eL);Pwr=r(LSe,"This class cannot be instantiated directly using "),Y3e=n(LSe,"CODE",{});var Vbt=s(Y3e);$wr=r(Vbt,"__init__()"),Vbt.forEach(t),Iwr=r(LSe," (throws an error)."),LSe.forEach(t),jwr=i(yi),kt=n(yi,"DIV",{class:!0});var wi=s(kt);m(oL.$$.fragment,wi),Dwr=i(wi),K3e=n(wi,"P",{});var zbt=s(K3e);Nwr=r(zbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zbt.forEach(t),qwr=i(wi),Ff=n(wi,"P",{});var OW=s(Ff);Owr=r(OW,`Note:
Loading a model from its configuration file does `),Z3e=n(OW,"STRONG",{});var Wbt=s(Z3e);Gwr=r(Wbt,"not"),Wbt.forEach(t),Xwr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=n(OW,"CODE",{});var Qbt=s(e5e);Vwr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),zwr=r(OW,"to load the model weights."),OW.forEach(t),Wwr=i(wi),o5e=n(wi,"P",{});var Hbt=s(o5e);Qwr=r(Hbt,"Examples:"),Hbt.forEach(t),Hwr=i(wi),m(rL.$$.fragment,wi),wi.forEach(t),Uwr=i(yi),Po=n(yi,"DIV",{class:!0});var Pa=s(Po);m(tL.$$.fragment,Pa),Jwr=i(Pa),r5e=n(Pa,"P",{});var Ubt=s(r5e);Ywr=r(Ubt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ubt.forEach(t),Kwr=i(Pa),In=n(Pa,"P",{});var SM=s(In);Zwr=r(SM,"The model class to instantiate is selected based on the "),t5e=n(SM,"CODE",{});var Jbt=s(t5e);e6r=r(Jbt,"model_type"),Jbt.forEach(t),o6r=r(SM,` property of the config object (either
passed as an argument or loaded from `),a5e=n(SM,"CODE",{});var Ybt=s(a5e);r6r=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),t6r=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(SM,"CODE",{});var Kbt=s(n5e);a6r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),n6r=r(SM,":"),SM.forEach(t),s6r=i(Pa),lo=n(Pa,"UL",{});var la=s(lo);_4=n(la,"LI",{});var sBe=s(_4);s5e=n(sBe,"STRONG",{});var Zbt=s(s5e);l6r=r(Zbt,"albert"),Zbt.forEach(t),i6r=r(sBe," \u2014 "),qV=n(sBe,"A",{href:!0});var e3t=s(qV);d6r=r(e3t,"FlaxAlbertForTokenClassification"),e3t.forEach(t),c6r=r(sBe," (ALBERT model)"),sBe.forEach(t),f6r=i(la),u4=n(la,"LI",{});var lBe=s(u4);l5e=n(lBe,"STRONG",{});var o3t=s(l5e);m6r=r(o3t,"bert"),o3t.forEach(t),g6r=r(lBe," \u2014 "),OV=n(lBe,"A",{href:!0});var r3t=s(OV);h6r=r(r3t,"FlaxBertForTokenClassification"),r3t.forEach(t),p6r=r(lBe," (BERT model)"),lBe.forEach(t),_6r=i(la),b4=n(la,"LI",{});var iBe=s(b4);i5e=n(iBe,"STRONG",{});var t3t=s(i5e);u6r=r(t3t,"big_bird"),t3t.forEach(t),b6r=r(iBe," \u2014 "),GV=n(iBe,"A",{href:!0});var a3t=s(GV);v6r=r(a3t,"FlaxBigBirdForTokenClassification"),a3t.forEach(t),T6r=r(iBe," (BigBird model)"),iBe.forEach(t),F6r=i(la),v4=n(la,"LI",{});var dBe=s(v4);d5e=n(dBe,"STRONG",{});var n3t=s(d5e);C6r=r(n3t,"distilbert"),n3t.forEach(t),M6r=r(dBe," \u2014 "),XV=n(dBe,"A",{href:!0});var s3t=s(XV);E6r=r(s3t,"FlaxDistilBertForTokenClassification"),s3t.forEach(t),y6r=r(dBe," (DistilBERT model)"),dBe.forEach(t),w6r=i(la),T4=n(la,"LI",{});var cBe=s(T4);c5e=n(cBe,"STRONG",{});var l3t=s(c5e);A6r=r(l3t,"electra"),l3t.forEach(t),L6r=r(cBe," \u2014 "),VV=n(cBe,"A",{href:!0});var i3t=s(VV);B6r=r(i3t,"FlaxElectraForTokenClassification"),i3t.forEach(t),x6r=r(cBe," (ELECTRA model)"),cBe.forEach(t),k6r=i(la),F4=n(la,"LI",{});var fBe=s(F4);f5e=n(fBe,"STRONG",{});var d3t=s(f5e);R6r=r(d3t,"roberta"),d3t.forEach(t),S6r=r(fBe," \u2014 "),zV=n(fBe,"A",{href:!0});var c3t=s(zV);P6r=r(c3t,"FlaxRobertaForTokenClassification"),c3t.forEach(t),$6r=r(fBe," (RoBERTa model)"),fBe.forEach(t),I6r=i(la),C4=n(la,"LI",{});var mBe=s(C4);m5e=n(mBe,"STRONG",{});var f3t=s(m5e);j6r=r(f3t,"roformer"),f3t.forEach(t),D6r=r(mBe," \u2014 "),WV=n(mBe,"A",{href:!0});var m3t=s(WV);N6r=r(m3t,"FlaxRoFormerForTokenClassification"),m3t.forEach(t),q6r=r(mBe," (RoFormer model)"),mBe.forEach(t),la.forEach(t),O6r=i(Pa),g5e=n(Pa,"P",{});var g3t=s(g5e);G6r=r(g3t,"Examples:"),g3t.forEach(t),X6r=i(Pa),m(aL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),uke=i(d),Cf=n(d,"H2",{class:!0});var BSe=s(Cf);M4=n(BSe,"A",{id:!0,class:!0,href:!0});var h3t=s(M4);h5e=n(h3t,"SPAN",{});var p3t=s(h5e);m(nL.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),V6r=i(BSe),p5e=n(BSe,"SPAN",{});var _3t=s(p5e);z6r=r(_3t,"FlaxAutoModelForMultipleChoice"),_3t.forEach(t),BSe.forEach(t),bke=i(d),Dr=n(d,"DIV",{class:!0});var Ai=s(Dr);m(sL.$$.fragment,Ai),W6r=i(Ai),Mf=n(Ai,"P",{});var GW=s(Mf);Q6r=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_5e=n(GW,"CODE",{});var u3t=s(_5e);H6r=r(u3t,"from_pretrained()"),u3t.forEach(t),U6r=r(GW,"class method or the "),u5e=n(GW,"CODE",{});var b3t=s(u5e);J6r=r(b3t,"from_config()"),b3t.forEach(t),Y6r=r(GW,`class
method.`),GW.forEach(t),K6r=i(Ai),lL=n(Ai,"P",{});var xSe=s(lL);Z6r=r(xSe,"This class cannot be instantiated directly using "),b5e=n(xSe,"CODE",{});var v3t=s(b5e);eAr=r(v3t,"__init__()"),v3t.forEach(t),oAr=r(xSe," (throws an error)."),xSe.forEach(t),rAr=i(Ai),Rt=n(Ai,"DIV",{class:!0});var Li=s(Rt);m(iL.$$.fragment,Li),tAr=i(Li),v5e=n(Li,"P",{});var T3t=s(v5e);aAr=r(T3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T3t.forEach(t),nAr=i(Li),Ef=n(Li,"P",{});var XW=s(Ef);sAr=r(XW,`Note:
Loading a model from its configuration file does `),T5e=n(XW,"STRONG",{});var F3t=s(T5e);lAr=r(F3t,"not"),F3t.forEach(t),iAr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),F5e=n(XW,"CODE",{});var C3t=s(F5e);dAr=r(C3t,"from_pretrained()"),C3t.forEach(t),cAr=r(XW,"to load the model weights."),XW.forEach(t),fAr=i(Li),C5e=n(Li,"P",{});var M3t=s(C5e);mAr=r(M3t,"Examples:"),M3t.forEach(t),gAr=i(Li),m(dL.$$.fragment,Li),Li.forEach(t),hAr=i(Ai),$o=n(Ai,"DIV",{class:!0});var $a=s($o);m(cL.$$.fragment,$a),pAr=i($a),M5e=n($a,"P",{});var E3t=s(M5e);_Ar=r(E3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E3t.forEach(t),uAr=i($a),jn=n($a,"P",{});var PM=s(jn);bAr=r(PM,"The model class to instantiate is selected based on the "),E5e=n(PM,"CODE",{});var y3t=s(E5e);vAr=r(y3t,"model_type"),y3t.forEach(t),TAr=r(PM,` property of the config object (either
passed as an argument or loaded from `),y5e=n(PM,"CODE",{});var w3t=s(y5e);FAr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),CAr=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(PM,"CODE",{});var A3t=s(w5e);MAr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),EAr=r(PM,":"),PM.forEach(t),yAr=i($a),io=n($a,"UL",{});var ia=s(io);E4=n(ia,"LI",{});var gBe=s(E4);A5e=n(gBe,"STRONG",{});var L3t=s(A5e);wAr=r(L3t,"albert"),L3t.forEach(t),AAr=r(gBe," \u2014 "),QV=n(gBe,"A",{href:!0});var B3t=s(QV);LAr=r(B3t,"FlaxAlbertForMultipleChoice"),B3t.forEach(t),BAr=r(gBe," (ALBERT model)"),gBe.forEach(t),xAr=i(ia),y4=n(ia,"LI",{});var hBe=s(y4);L5e=n(hBe,"STRONG",{});var x3t=s(L5e);kAr=r(x3t,"bert"),x3t.forEach(t),RAr=r(hBe," \u2014 "),HV=n(hBe,"A",{href:!0});var k3t=s(HV);SAr=r(k3t,"FlaxBertForMultipleChoice"),k3t.forEach(t),PAr=r(hBe," (BERT model)"),hBe.forEach(t),$Ar=i(ia),w4=n(ia,"LI",{});var pBe=s(w4);B5e=n(pBe,"STRONG",{});var R3t=s(B5e);IAr=r(R3t,"big_bird"),R3t.forEach(t),jAr=r(pBe," \u2014 "),UV=n(pBe,"A",{href:!0});var S3t=s(UV);DAr=r(S3t,"FlaxBigBirdForMultipleChoice"),S3t.forEach(t),NAr=r(pBe," (BigBird model)"),pBe.forEach(t),qAr=i(ia),A4=n(ia,"LI",{});var _Be=s(A4);x5e=n(_Be,"STRONG",{});var P3t=s(x5e);OAr=r(P3t,"distilbert"),P3t.forEach(t),GAr=r(_Be," \u2014 "),JV=n(_Be,"A",{href:!0});var $3t=s(JV);XAr=r($3t,"FlaxDistilBertForMultipleChoice"),$3t.forEach(t),VAr=r(_Be," (DistilBERT model)"),_Be.forEach(t),zAr=i(ia),L4=n(ia,"LI",{});var uBe=s(L4);k5e=n(uBe,"STRONG",{});var I3t=s(k5e);WAr=r(I3t,"electra"),I3t.forEach(t),QAr=r(uBe," \u2014 "),YV=n(uBe,"A",{href:!0});var j3t=s(YV);HAr=r(j3t,"FlaxElectraForMultipleChoice"),j3t.forEach(t),UAr=r(uBe," (ELECTRA model)"),uBe.forEach(t),JAr=i(ia),B4=n(ia,"LI",{});var bBe=s(B4);R5e=n(bBe,"STRONG",{});var D3t=s(R5e);YAr=r(D3t,"roberta"),D3t.forEach(t),KAr=r(bBe," \u2014 "),KV=n(bBe,"A",{href:!0});var N3t=s(KV);ZAr=r(N3t,"FlaxRobertaForMultipleChoice"),N3t.forEach(t),e0r=r(bBe," (RoBERTa model)"),bBe.forEach(t),o0r=i(ia),x4=n(ia,"LI",{});var vBe=s(x4);S5e=n(vBe,"STRONG",{});var q3t=s(S5e);r0r=r(q3t,"roformer"),q3t.forEach(t),t0r=r(vBe," \u2014 "),ZV=n(vBe,"A",{href:!0});var O3t=s(ZV);a0r=r(O3t,"FlaxRoFormerForMultipleChoice"),O3t.forEach(t),n0r=r(vBe," (RoFormer model)"),vBe.forEach(t),ia.forEach(t),s0r=i($a),P5e=n($a,"P",{});var G3t=s(P5e);l0r=r(G3t,"Examples:"),G3t.forEach(t),i0r=i($a),m(fL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),vke=i(d),yf=n(d,"H2",{class:!0});var kSe=s(yf);k4=n(kSe,"A",{id:!0,class:!0,href:!0});var X3t=s(k4);$5e=n(X3t,"SPAN",{});var V3t=s($5e);m(mL.$$.fragment,V3t),V3t.forEach(t),X3t.forEach(t),d0r=i(kSe),I5e=n(kSe,"SPAN",{});var z3t=s(I5e);c0r=r(z3t,"FlaxAutoModelForNextSentencePrediction"),z3t.forEach(t),kSe.forEach(t),Tke=i(d),Nr=n(d,"DIV",{class:!0});var Bi=s(Nr);m(gL.$$.fragment,Bi),f0r=i(Bi),wf=n(Bi,"P",{});var VW=s(wf);m0r=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),j5e=n(VW,"CODE",{});var W3t=s(j5e);g0r=r(W3t,"from_pretrained()"),W3t.forEach(t),h0r=r(VW,"class method or the "),D5e=n(VW,"CODE",{});var Q3t=s(D5e);p0r=r(Q3t,"from_config()"),Q3t.forEach(t),_0r=r(VW,`class
method.`),VW.forEach(t),u0r=i(Bi),hL=n(Bi,"P",{});var RSe=s(hL);b0r=r(RSe,"This class cannot be instantiated directly using "),N5e=n(RSe,"CODE",{});var H3t=s(N5e);v0r=r(H3t,"__init__()"),H3t.forEach(t),T0r=r(RSe," (throws an error)."),RSe.forEach(t),F0r=i(Bi),St=n(Bi,"DIV",{class:!0});var xi=s(St);m(pL.$$.fragment,xi),C0r=i(xi),q5e=n(xi,"P",{});var U3t=s(q5e);M0r=r(U3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U3t.forEach(t),E0r=i(xi),Af=n(xi,"P",{});var zW=s(Af);y0r=r(zW,`Note:
Loading a model from its configuration file does `),O5e=n(zW,"STRONG",{});var J3t=s(O5e);w0r=r(J3t,"not"),J3t.forEach(t),A0r=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),G5e=n(zW,"CODE",{});var Y3t=s(G5e);L0r=r(Y3t,"from_pretrained()"),Y3t.forEach(t),B0r=r(zW,"to load the model weights."),zW.forEach(t),x0r=i(xi),X5e=n(xi,"P",{});var K3t=s(X5e);k0r=r(K3t,"Examples:"),K3t.forEach(t),R0r=i(xi),m(_L.$$.fragment,xi),xi.forEach(t),S0r=i(Bi),Io=n(Bi,"DIV",{class:!0});var Ia=s(Io);m(uL.$$.fragment,Ia),P0r=i(Ia),V5e=n(Ia,"P",{});var Z3t=s(V5e);$0r=r(Z3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Z3t.forEach(t),I0r=i(Ia),Dn=n(Ia,"P",{});var $M=s(Dn);j0r=r($M,"The model class to instantiate is selected based on the "),z5e=n($M,"CODE",{});var e5t=s(z5e);D0r=r(e5t,"model_type"),e5t.forEach(t),N0r=r($M,` property of the config object (either
passed as an argument or loaded from `),W5e=n($M,"CODE",{});var o5t=s(W5e);q0r=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),O0r=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n($M,"CODE",{});var r5t=s(Q5e);G0r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),X0r=r($M,":"),$M.forEach(t),V0r=i(Ia),H5e=n(Ia,"UL",{});var t5t=s(H5e);R4=n(t5t,"LI",{});var TBe=s(R4);U5e=n(TBe,"STRONG",{});var a5t=s(U5e);z0r=r(a5t,"bert"),a5t.forEach(t),W0r=r(TBe," \u2014 "),ez=n(TBe,"A",{href:!0});var n5t=s(ez);Q0r=r(n5t,"FlaxBertForNextSentencePrediction"),n5t.forEach(t),H0r=r(TBe," (BERT model)"),TBe.forEach(t),t5t.forEach(t),U0r=i(Ia),J5e=n(Ia,"P",{});var s5t=s(J5e);J0r=r(s5t,"Examples:"),s5t.forEach(t),Y0r=i(Ia),m(bL.$$.fragment,Ia),Ia.forEach(t),Bi.forEach(t),Fke=i(d),Lf=n(d,"H2",{class:!0});var SSe=s(Lf);S4=n(SSe,"A",{id:!0,class:!0,href:!0});var l5t=s(S4);Y5e=n(l5t,"SPAN",{});var i5t=s(Y5e);m(vL.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),K0r=i(SSe),K5e=n(SSe,"SPAN",{});var d5t=s(K5e);Z0r=r(d5t,"FlaxAutoModelForImageClassification"),d5t.forEach(t),SSe.forEach(t),Cke=i(d),qr=n(d,"DIV",{class:!0});var ki=s(qr);m(TL.$$.fragment,ki),eLr=i(ki),Bf=n(ki,"P",{});var WW=s(Bf);oLr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Z5e=n(WW,"CODE",{});var c5t=s(Z5e);rLr=r(c5t,"from_pretrained()"),c5t.forEach(t),tLr=r(WW,"class method or the "),eve=n(WW,"CODE",{});var f5t=s(eve);aLr=r(f5t,"from_config()"),f5t.forEach(t),nLr=r(WW,`class
method.`),WW.forEach(t),sLr=i(ki),FL=n(ki,"P",{});var PSe=s(FL);lLr=r(PSe,"This class cannot be instantiated directly using "),ove=n(PSe,"CODE",{});var m5t=s(ove);iLr=r(m5t,"__init__()"),m5t.forEach(t),dLr=r(PSe," (throws an error)."),PSe.forEach(t),cLr=i(ki),Pt=n(ki,"DIV",{class:!0});var Ri=s(Pt);m(CL.$$.fragment,Ri),fLr=i(Ri),rve=n(Ri,"P",{});var g5t=s(rve);mLr=r(g5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g5t.forEach(t),gLr=i(Ri),xf=n(Ri,"P",{});var QW=s(xf);hLr=r(QW,`Note:
Loading a model from its configuration file does `),tve=n(QW,"STRONG",{});var h5t=s(tve);pLr=r(h5t,"not"),h5t.forEach(t),_Lr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ave=n(QW,"CODE",{});var p5t=s(ave);uLr=r(p5t,"from_pretrained()"),p5t.forEach(t),bLr=r(QW,"to load the model weights."),QW.forEach(t),vLr=i(Ri),nve=n(Ri,"P",{});var _5t=s(nve);TLr=r(_5t,"Examples:"),_5t.forEach(t),FLr=i(Ri),m(ML.$$.fragment,Ri),Ri.forEach(t),CLr=i(ki),jo=n(ki,"DIV",{class:!0});var ja=s(jo);m(EL.$$.fragment,ja),MLr=i(ja),sve=n(ja,"P",{});var u5t=s(sve);ELr=r(u5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u5t.forEach(t),yLr=i(ja),Nn=n(ja,"P",{});var IM=s(Nn);wLr=r(IM,"The model class to instantiate is selected based on the "),lve=n(IM,"CODE",{});var b5t=s(lve);ALr=r(b5t,"model_type"),b5t.forEach(t),LLr=r(IM,` property of the config object (either
passed as an argument or loaded from `),ive=n(IM,"CODE",{});var v5t=s(ive);BLr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),xLr=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(IM,"CODE",{});var T5t=s(dve);kLr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),RLr=r(IM,":"),IM.forEach(t),SLr=i(ja),yL=n(ja,"UL",{});var $Se=s(yL);P4=n($Se,"LI",{});var FBe=s(P4);cve=n(FBe,"STRONG",{});var F5t=s(cve);PLr=r(F5t,"beit"),F5t.forEach(t),$Lr=r(FBe," \u2014 "),oz=n(FBe,"A",{href:!0});var C5t=s(oz);ILr=r(C5t,"FlaxBeitForImageClassification"),C5t.forEach(t),jLr=r(FBe," (BEiT model)"),FBe.forEach(t),DLr=i($Se),$4=n($Se,"LI",{});var CBe=s($4);fve=n(CBe,"STRONG",{});var M5t=s(fve);NLr=r(M5t,"vit"),M5t.forEach(t),qLr=r(CBe," \u2014 "),rz=n(CBe,"A",{href:!0});var E5t=s(rz);OLr=r(E5t,"FlaxViTForImageClassification"),E5t.forEach(t),GLr=r(CBe," (ViT model)"),CBe.forEach(t),$Se.forEach(t),XLr=i(ja),mve=n(ja,"P",{});var y5t=s(mve);VLr=r(y5t,"Examples:"),y5t.forEach(t),zLr=i(ja),m(wL.$$.fragment,ja),ja.forEach(t),ki.forEach(t),Mke=i(d),kf=n(d,"H2",{class:!0});var ISe=s(kf);I4=n(ISe,"A",{id:!0,class:!0,href:!0});var w5t=s(I4);gve=n(w5t,"SPAN",{});var A5t=s(gve);m(AL.$$.fragment,A5t),A5t.forEach(t),w5t.forEach(t),WLr=i(ISe),hve=n(ISe,"SPAN",{});var L5t=s(hve);QLr=r(L5t,"FlaxAutoModelForVision2Seq"),L5t.forEach(t),ISe.forEach(t),Eke=i(d),Or=n(d,"DIV",{class:!0});var Si=s(Or);m(LL.$$.fragment,Si),HLr=i(Si),Rf=n(Si,"P",{});var HW=s(Rf);ULr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pve=n(HW,"CODE",{});var B5t=s(pve);JLr=r(B5t,"from_pretrained()"),B5t.forEach(t),YLr=r(HW,"class method or the "),_ve=n(HW,"CODE",{});var x5t=s(_ve);KLr=r(x5t,"from_config()"),x5t.forEach(t),ZLr=r(HW,`class
method.`),HW.forEach(t),e8r=i(Si),BL=n(Si,"P",{});var jSe=s(BL);o8r=r(jSe,"This class cannot be instantiated directly using "),uve=n(jSe,"CODE",{});var k5t=s(uve);r8r=r(k5t,"__init__()"),k5t.forEach(t),t8r=r(jSe," (throws an error)."),jSe.forEach(t),a8r=i(Si),$t=n(Si,"DIV",{class:!0});var Pi=s($t);m(xL.$$.fragment,Pi),n8r=i(Pi),bve=n(Pi,"P",{});var R5t=s(bve);s8r=r(R5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),R5t.forEach(t),l8r=i(Pi),Sf=n(Pi,"P",{});var UW=s(Sf);i8r=r(UW,`Note:
Loading a model from its configuration file does `),vve=n(UW,"STRONG",{});var S5t=s(vve);d8r=r(S5t,"not"),S5t.forEach(t),c8r=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tve=n(UW,"CODE",{});var P5t=s(Tve);f8r=r(P5t,"from_pretrained()"),P5t.forEach(t),m8r=r(UW,"to load the model weights."),UW.forEach(t),g8r=i(Pi),Fve=n(Pi,"P",{});var $5t=s(Fve);h8r=r($5t,"Examples:"),$5t.forEach(t),p8r=i(Pi),m(kL.$$.fragment,Pi),Pi.forEach(t),_8r=i(Si),Do=n(Si,"DIV",{class:!0});var Da=s(Do);m(RL.$$.fragment,Da),u8r=i(Da),Cve=n(Da,"P",{});var I5t=s(Cve);b8r=r(I5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),I5t.forEach(t),v8r=i(Da),qn=n(Da,"P",{});var jM=s(qn);T8r=r(jM,"The model class to instantiate is selected based on the "),Mve=n(jM,"CODE",{});var j5t=s(Mve);F8r=r(j5t,"model_type"),j5t.forEach(t),C8r=r(jM,` property of the config object (either
passed as an argument or loaded from `),Eve=n(jM,"CODE",{});var D5t=s(Eve);M8r=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),E8r=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(jM,"CODE",{});var N5t=s(yve);y8r=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),w8r=r(jM,":"),jM.forEach(t),A8r=i(Da),wve=n(Da,"UL",{});var q5t=s(wve);j4=n(q5t,"LI",{});var MBe=s(j4);Ave=n(MBe,"STRONG",{});var O5t=s(Ave);L8r=r(O5t,"vision-encoder-decoder"),O5t.forEach(t),B8r=r(MBe," \u2014 "),tz=n(MBe,"A",{href:!0});var G5t=s(tz);x8r=r(G5t,"FlaxVisionEncoderDecoderModel"),G5t.forEach(t),k8r=r(MBe," (Vision Encoder decoder model)"),MBe.forEach(t),q5t.forEach(t),R8r=i(Da),Lve=n(Da,"P",{});var X5t=s(Lve);S8r=r(X5t,"Examples:"),X5t.forEach(t),P8r=i(Da),m(SL.$$.fragment,Da),Da.forEach(t),Si.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(K5t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(de,"class","relative group"),c(On,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoConfig"),c(Xn,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoTokenizer"),c(Gi,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Xi,"class","relative group"),c(Of,"id","transformers.AutoConfig"),c(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Of,"href","#transformers.AutoConfig"),c(Vi,"class","relative group"),c(j8,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(D8,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig"),c(N8,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig"),c(q8,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig"),c(O8,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig"),c(G8,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(X8,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig"),c(V8,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(z8,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(W8,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Q8,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig"),c(H8,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig"),c(U8,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig"),c(J8,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig"),c(Y8,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig"),c(K8,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig"),c(Z8,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(e7,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(o7,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig"),c(r7,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(t7,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig"),c(a7,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig"),c(n7,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig"),c(s7,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig"),c(l7,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig"),c(i7,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(d7,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig"),c(c7,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig"),c(f7,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig"),c(m7,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig"),c(g7,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config"),c(h7,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(p7,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig"),c(_7,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig"),c(u7,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig"),c(b7,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(v7,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(T7,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(F7,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig"),c(C7,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig"),c(M7,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeConfig"),c(E7,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig"),c(y7,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config"),c(w7,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig"),c(A7,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(L7,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig"),c(B7,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(x7,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(k7,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig"),c(R7,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config"),c(S7,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(P7,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c($7,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig"),c(I7,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j7,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig"),c(D7,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(N7,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(q7,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(O7,"href","/docs/transformers/pr_15923/en/model_doc/rag#transformers.RagConfig"),c(G7,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmConfig"),c(X7,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig"),c(V7,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig"),c(z7,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig"),c(W7,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig"),c(Q7,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig"),c(H7,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig"),c(U7,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig"),c(J7,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig"),c(Y7,"href","/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(K7,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Z7,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(eB,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig"),c(oB,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(rB,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig"),c(tB,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config"),c(aB,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig"),c(nB,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sB,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRConfig"),c(lB,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(iB,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dB,"href","/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltConfig"),c(cB,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(fB,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(mB,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gB,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig"),c(hB,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(pB,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_B,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig"),c(uB,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig"),c(bB,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig"),c(vB,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(TB,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(FB,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CB,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig"),c(MB,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Lg,"class","docstring"),c(Vo,"class","docstring"),c(Bg,"id","transformers.AutoTokenizer"),c(Bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bg,"href","#transformers.AutoTokenizer"),c(Wi,"class","relative group"),c(EB,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yB,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertTokenizer"),c(wB,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AB,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartTokenizer"),c(LB,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartTokenizerFast"),c(BB,"href","/docs/transformers/pr_15923/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xB,"href","/docs/transformers/pr_15923/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(kB,"href","/docs/transformers/pr_15923/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(RB,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizerFast"),c(PB,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c($B,"href","/docs/transformers/pr_15923/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(IB,"href","/docs/transformers/pr_15923/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(jB,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(DB,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NB,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qB,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(XB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VB,"href","/docs/transformers/pr_15923/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(zB,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertTokenizer"),c(WB,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QB,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineTokenizer"),c(HB,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPTokenizer"),c(UB,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(JB,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(YB,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(KB,"href","/docs/transformers/pr_15923/en/model_doc/cpm#transformers.CpmTokenizer"),c(ZB,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ex,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ox,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(rx,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(tx,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ax,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(nx,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(sx,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(lx,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraTokenizer"),c(ix,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(dx,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(cx,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetTokenizer"),c(fx,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(mx,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(gx,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelTokenizer"),c(hx,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(px,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_x,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ux,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bx,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vx,"href","/docs/transformers/pr_15923/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Tx,"href","/docs/transformers/pr_15923/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Cx,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Mx,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ex,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(yx,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wx,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Ax,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Lx,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Bx,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xx,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDTokenizer"),c(kx,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDTokenizerFast"),c(Rx,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Sx,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Px,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeTokenizer"),c($x,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Ix,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jx,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Dx,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianTokenizer"),c(Nx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartTokenizer"),c(qx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Ox,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Gx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Xx,"href","/docs/transformers/pr_15923/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Vx,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(zx,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Wx,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Qx,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Hx,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5Tokenizer"),c(Ux,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Jx,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Yx,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Kx,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Zx,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ek,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ok,"href","/docs/transformers/pr_15923/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rk,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tk,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(ak,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizer"),c(nk,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizerFast"),c(sk,"href","/docs/transformers/pr_15923/en/model_doc/rag#transformers.RagTokenizer"),c(lk,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmTokenizer"),c(ik,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dk,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ck,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fk,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mk,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gk,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hk,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pk,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_k,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uk,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bk,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Tk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Fk,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Ck,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Mk,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Ek,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yk,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5Tokenizer"),c(wk,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ak,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasTokenizer"),c(Lk,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Bk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kk,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Rk,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Sk,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMTokenizer"),c(Pk,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($k,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ik,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jk,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Dk,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(nh,"class","docstring"),c(zo,"class","docstring"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Qi,"class","relative group"),c(Nk,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qk,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Ok,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Gk,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Xk,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Vk,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(zk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Wk,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Qk,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Hk,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Uk,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eR,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oR,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xe,"class","docstring"),c(Eh,"class","docstring"),c(Wo,"class","docstring"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Hi,"class","relative group"),c(rR,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(tR,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPProcessor"),c(aR,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(nR,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(sR,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(lR,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(iR,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRProcessor"),c(dR,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(cR,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ke,"class","docstring"),c($h,"class","docstring"),c(Qo,"class","docstring"),c(Ih,"id","transformers.AutoModel"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoModel"),c(Ji,"class","relative group"),c(Gr,"class","docstring"),c(fR,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertModel"),c(mR,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartModel"),c(gR,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitModel"),c(hR,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel"),c(pR,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(_R,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdModel"),c(uR,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(bR,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(vR,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(TR,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertModel"),c(FR,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineModel"),c(CR,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPModel"),c(MR,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertModel"),c(ER,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextModel"),c(yR,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLModel"),c(wR,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(AR,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(LR,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaModel"),c(BR,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(xR,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTModel"),c(kR,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrModel"),c(RR,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertModel"),c(SR,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(PR,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraModel"),c($R,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertModel"),c(IR,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetModel"),c(jR,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTModel"),c(DR,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelModel"),c(NR,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qR,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Model"),c(OR,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(GR,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJModel"),c(XR,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertModel"),c(VR,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertModel"),c(zR,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(WR,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(QR,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(HR,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDModel"),c(UR,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerModel"),c(JR,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeModel"),c(YR,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertModel"),c(KR,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZR,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianModel"),c(eS,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oS,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartModel"),c(rS,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tS,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aS,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetModel"),c(nS,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Model"),c(sS,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lS,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iS,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusModel"),c(dS,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverModel"),c(cS,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartModel"),c(fS,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mS,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gS,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hS,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModel"),c(pS,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertModel"),c(_S,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel"),c(uS,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaModel"),c(bS,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerModel"),c(vS,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerModel"),c(TS,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWModel"),c(FS,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDModel"),c(CS,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(MS,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterModel"),c(ES,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yS,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinModel"),c(wS,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Model"),c(AS,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasModel"),c(LS,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(BS,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xS,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kS,"href","/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltModel"),c(RS,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(SS,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertModel"),c(PS,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTModel"),c($S,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(IS,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(jS,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMModel"),c(DS,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMModel"),c(NS,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMModel"),c(qS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(OS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(GS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(XS,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetModel"),c(VS,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoModel"),c(Re,"class","docstring"),c(Ho,"class","docstring"),c(__,"id","transformers.AutoModelForPreTraining"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModelForPreTraining"),c(Zi,"class","relative group"),c(Xr,"class","docstring"),c(zS,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForPreTraining"),c(WS,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QS,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForPreTraining"),c(HS,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(US,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JS,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(YS,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KS,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZS,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eP,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oP,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rP,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tP,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForPreTraining"),c(aP,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nP,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(sP,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lP,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(iP,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dP,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cP,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(fP,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(mP,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(gP,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hP,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pP,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel"),c(_P,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uP,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bP,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vP,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TP,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FP,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(CP,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(MP,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(EP,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(yP,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wP,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BP,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Se,"class","docstring"),c(Uo,"class","docstring"),c(tu,"id","transformers.AutoModelForCausalLM"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForCausalLM"),c(rd,"class","relative group"),c(Vr,"class","docstring"),c(xP,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForCausalLM"),c(kP,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertLMHeadModel"),c(RP,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(SP,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(PP,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($P,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(IP,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(jP,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(DP,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(NP,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(qP,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForCausalLM"),c(OP,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(GP,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(XP,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(VP,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianForCausalLM"),c(zP,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForCausalLM"),c(WP,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(QP,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HP,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(UP,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(JP,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(YP,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(KP,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ZP,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(e$,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(o$,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(r$,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(t$,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(a$,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(n$,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(s$,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(l$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(i$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(d$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(c$,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Pe,"class","docstring"),c(Jo,"class","docstring"),c(qu,"id","transformers.AutoModelForMaskedLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(zr,"class","docstring"),c(f$,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(m$,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(g$,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMaskedLM"),c(h$,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(p$,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_$,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(u$,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(b$,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(v$,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(T$,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(F$,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(C$,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(M$,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(E$,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(y$,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(w$,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(A$,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(L$,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(B$,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(x$,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(k$,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(R$,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(S$,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(P$,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($$,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(I$,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(j$,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(D$,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(N$,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(q$,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(O$,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(G$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(X$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(V$,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMaskedLM"),c($e,"class","docstring"),c(Yo,"class","docstring"),c(M2,"id","transformers.AutoModelForSeq2SeqLM"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForSeq2SeqLM"),c(id,"class","relative group"),c(Wr,"class","docstring"),c(z$,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(W$,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Q$,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(H$,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(U$,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(J$,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Y$,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(K$,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Z$,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianMTModel"),c(eI,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oI,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tI,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aI,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nI,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ie,"class","docstring"),c(Ko,"class","docstring"),c(O2,"id","transformers.AutoModelForSequenceClassification"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForSequenceClassification"),c(fd,"class","relative group"),c(Qr,"class","docstring"),c(lI,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(iI,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dI,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForSequenceClassification"),c(cI,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(fI,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(mI,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(gI,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(hI,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(pI,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_I,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(vI,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(TI,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FI,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CI,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MI,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EI,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yI,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wI,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AI,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LI,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(BI,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xI,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kI,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(RI,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SI,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PI,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($I,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(II,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jI,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DI,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NI,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qI,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(OI,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GI,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(XI,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VI,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zI,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(WI,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QI,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HI,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UI,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(je,"class","docstring"),c(Zo,"class","docstring"),c($1,"id","transformers.AutoModelForMultipleChoice"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForMultipleChoice"),c(hd,"class","relative group"),c(Hr,"class","docstring"),c(ZI,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ej,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMultipleChoice"),c(oj,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(rj,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(tj,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(aj,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(nj,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(sj,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(lj,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ij,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(dj,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(cj,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(fj,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(mj,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(gj,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(hj,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(pj,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(_j,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(uj,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(bj,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(vj,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Tj,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Fj,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Cj,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Mj,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Ej,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yj,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wj,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(De,"class","docstring"),c(er,"class","docstring"),c(fb,"id","transformers.AutoModelForNextSentencePrediction"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForNextSentencePrediction"),c(ud,"class","relative group"),c(Ur,"class","docstring"),c(Aj,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Lj,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Bj,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(xj,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kj,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ne,"class","docstring"),c(or,"class","docstring"),c(bb,"id","transformers.AutoModelForTokenClassification"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForTokenClassification"),c(Td,"class","relative group"),c(Jr,"class","docstring"),c(Rj,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Sj,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForTokenClassification"),c(Pj,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c($j,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Ij,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jj,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Dj,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Nj,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qj,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Oj,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Gj,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Xj,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Vj,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zj,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Wj,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Qj,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Hj,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Uj,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Jj,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Yj,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Kj,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Zj,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(eD,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(oD,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(rD,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(tD,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(aD,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(nD,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(sD,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(lD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(iD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(dD,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(cD,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(qe,"class","docstring"),c(rr,"class","docstring"),c(Zb,"id","transformers.AutoModelForQuestionAnswering"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForQuestionAnswering"),c(Md,"class","relative group"),c(Yr,"class","docstring"),c(fD,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(mD,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(gD,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(hD,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(pD,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(_D,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(uD,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(bD,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(vD,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(TD,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yD,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(PD,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(WD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(UD,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(q3,"id","transformers.AutoModelForTableQuestionAnswering"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(wd,"class","relative group"),c(Kr,"class","docstring"),c(JD,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Ge,"class","docstring"),c(ar,"class","docstring"),c(X3,"id","transformers.AutoModelForImageClassification"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(Zr,"class","docstring"),c(YD,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForImageClassification"),c(KD,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ZD,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassification"),c(eN,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(oN,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(rN,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tN,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aN,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nN,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sN,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lN,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForImageClassification"),c(iN,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForImageClassification"),c(Xe,"class","docstring"),c(nr,"class","docstring"),c(K3,"id","transformers.AutoModelForVision2Seq"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.AutoModelForVision2Seq"),c(Rd,"class","relative group"),c(et,"class","docstring"),c(dN,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(o5,"id","transformers.AutoModelForAudioClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(ot,"class","docstring"),c(cN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(fN,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mN,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(gN,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(hN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(pN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(_N,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(uN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ze,"class","docstring"),c(lr,"class","docstring"),c(f5,"id","transformers.AutoModelForAudioFrameClassification"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.AutoModelForAudioFrameClassification"),c(Dd,"class","relative group"),c(rt,"class","docstring"),c(bN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(vN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(TN,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(We,"class","docstring"),c(ir,"class","docstring"),c(u5,"id","transformers.AutoModelForCTC"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.AutoModelForCTC"),c(Od,"class","relative group"),c(tt,"class","docstring"),c(CN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MN,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForCTC"),c(EN,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForCTC"),c(yN,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(AN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(LN,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(BN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Qe,"class","docstring"),c(dr,"class","docstring"),c(A5,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Vd,"class","relative group"),c(at,"class","docstring"),c(xN,"href","/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(kN,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(He,"class","docstring"),c(cr,"class","docstring"),c(k5,"id","transformers.AutoModelForAudioXVector"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForAudioXVector"),c(Qd,"class","relative group"),c(nt,"class","docstring"),c(RN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(PN,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c($N,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Ue,"class","docstring"),c(fr,"class","docstring"),c(j5,"id","transformers.AutoModelForMaskedImageModeling"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.AutoModelForMaskedImageModeling"),c(Jd,"class","relative group"),c(st,"class","docstring"),c(IN,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jN,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(DN,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(Je,"class","docstring"),c(mr,"class","docstring"),c(G5,"id","transformers.AutoModelForObjectDetection"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForObjectDetection"),c(ec,"class","relative group"),c(lt,"class","docstring"),c(NN,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ye,"class","docstring"),c(gr,"class","docstring"),c(z5,"id","transformers.AutoModelForImageSegmentation"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.AutoModelForImageSegmentation"),c(tc,"class","relative group"),c(it,"class","docstring"),c(qN,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForSegmentation"),c(Ke,"class","docstring"),c(hr,"class","docstring"),c(H5,"id","transformers.AutoModelForSemanticSegmentation"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.AutoModelForSemanticSegmentation"),c(sc,"class","relative group"),c(dt,"class","docstring"),c(ON,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(GN,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ze,"class","docstring"),c(pr,"class","docstring"),c(K5,"id","transformers.AutoModelForInstanceSegmentation"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForInstanceSegmentation"),c(dc,"class","relative group"),c(ct,"class","docstring"),c(XN,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(eo,"class","docstring"),c(_r,"class","docstring"),c(ov,"id","transformers.TFAutoModel"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.TFAutoModel"),c(mc,"class","relative group"),c(ft,"class","docstring"),c(VN,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertModel"),c(zN,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartModel"),c(WN,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertModel"),c(QN,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(HN,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(UN,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertModel"),c(JN,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.TFCLIPModel"),c(YN,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertModel"),c(KN,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextModel"),c(ZN,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eq,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaModel"),c(oq,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(rq,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(tq,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(aq,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraModel"),c(nq,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(sq,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelModel"),c(lq,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(iq,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2Model"),c(dq,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.TFHubertModel"),c(cq,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(fq,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDModel"),c(mq,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerModel"),c(gq,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertModel"),c(hq,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianModel"),c(pq,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartModel"),c(_q,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uq,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetModel"),c(bq,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5Model"),c(vq,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Tq,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Fq,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertModel"),c(Cq,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaModel"),c(Mq,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Eq,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(yq,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5Model"),c(wq,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasModel"),c(Aq,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Lq,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTModel"),c(Bq,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xq,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMModel"),c(kq,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Rq,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(ur,"class","docstring"),c(Xv,"id","transformers.TFAutoModelForPreTraining"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.TFAutoModelForPreTraining"),c(pc,"class","relative group"),c(mt,"class","docstring"),c(Sq,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Pq,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($q,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Iq,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jq,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qq,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Oq,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Gq,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Xq,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Vq,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(zq,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Wq,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Qq,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Hq,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Uq,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Jq,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Yq,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Kq,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Zq,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eO,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(br,"class","docstring"),c(mT,"id","transformers.TFAutoModelForCausalLM"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForCausalLM"),c(bc,"class","relative group"),c(gt,"class","docstring"),c(oO,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(rO,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tO,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aO,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nO,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(sO,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(lO,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(iO,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dO,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cO,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(vr,"class","docstring"),c(MT,"id","transformers.TFAutoModelForImageClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.TFAutoModelForImageClassification"),c(Fc,"class","relative group"),c(ht,"class","docstring"),c(fO,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mO,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Tr,"class","docstring"),c(wT,"id","transformers.TFAutoModelForMaskedLM"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForMaskedLM"),c(Ec,"class","relative group"),c(pt,"class","docstring"),c(gO,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hO,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_O,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uO,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bO,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vO,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FO,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CO,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MO,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EO,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AO,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BO,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xO,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kO,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Fr,"class","docstring"),c(QT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Ac,"class","relative group"),c(_t,"class","docstring"),c(SO,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($O,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jO,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianMTModel"),c(NO,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Cr,"class","docstring"),c(aF,"id","transformers.TFAutoModelForSequenceClassification"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.TFAutoModelForSequenceClassification"),c(xc,"class","relative group"),c(ut,"class","docstring"),c(XO,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HO,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UO,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KO,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(sG,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(Mr,"class","docstring"),c(xF,"id","transformers.TFAutoModelForMultipleChoice"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.TFAutoModelForMultipleChoice"),c(Sc,"class","relative group"),c(bt,"class","docstring"),c(hG,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(TG,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CG,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MG,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AG,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(LG,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BG,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xG,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(Er,"class","docstring"),c(HF,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ic,"class","relative group"),c(vt,"class","docstring"),c(kG,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(yr,"class","docstring"),c(JF,"id","transformers.TFAutoModelForTokenClassification"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(Tt,"class","docstring"),c(RG,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(SG,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(PG,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c($G,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jG,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DG,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NG,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(qG,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(OG,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(GG,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(XG,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(VG,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(WG,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(HG,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(UG,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(JG,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(YG,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(wr,"class","docstring"),c(u9,"id","transformers.TFAutoModelForQuestionAnswering"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Gc,"class","relative group"),c(Ft,"class","docstring"),c(KG,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(lX,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Ar,"class","docstring"),c(j9,"id","transformers.TFAutoModelForVision2Seq"),c(j9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j9,"href","#transformers.TFAutoModelForVision2Seq"),c(zc,"class","relative group"),c(Ct,"class","docstring"),c(uX,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(Lr,"class","docstring"),c(N9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(N9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Hc,"class","relative group"),c(Mt,"class","docstring"),c(bX,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(Br,"class","docstring"),c(O9,"id","transformers.FlaxAutoModel"),c(O9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O9,"href","#transformers.FlaxAutoModel"),c(Yc,"class","relative group"),c(Et,"class","docstring"),c(vX,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TX,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartModel"),c(FX,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitModel"),c(CX,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertModel"),c(MX,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(EX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(wX,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.FlaxCLIPModel"),c(AX,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(LX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraModel"),c(BX,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(xX,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(kX,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RX,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianModel"),c(SX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PX,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5Model"),c($X,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(IX,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jX,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DX,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5Model"),c(NX,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qX,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTModel"),c(OX,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(GX,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ao,"class","docstring"),c(xr,"class","docstring"),c(mC,"id","transformers.FlaxAutoModelForCausalLM"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForCausalLM"),c(ef,"class","relative group"),c(yt,"class","docstring"),c(XX,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(VX,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zX,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(WX,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(kr,"class","docstring"),c(uC,"id","transformers.FlaxAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForPreTraining"),c(tf,"class","relative group"),c(wt,"class","docstring"),c(QX,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(HX,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UX,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(JX,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(YX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(KX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rV,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Bo,"class","docstring"),c(Rr,"class","docstring"),c(BC,"id","transformers.FlaxAutoModelForMaskedLM"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(sf,"class","relative group"),c(At,"class","docstring"),c(aV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(nV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(iV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(cV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xo,"class","docstring"),c(Sr,"class","docstring"),c(NC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(cf,"class","relative group"),c(Lt,"class","docstring"),c(gV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uV,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(bV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Pr,"class","docstring"),c(UC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(gf,"class","relative group"),c(Bt,"class","docstring"),c(CV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(MV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(EV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(wV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(AV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(LV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(xV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ro,"class","docstring"),c($r,"class","docstring"),c(n4,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(_f,"class","relative group"),c(xt,"class","docstring"),c(kV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c($V,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(So,"class","docstring"),c(Ir,"class","docstring"),c(p4,"id","transformers.FlaxAutoModelForTokenClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.FlaxAutoModelForTokenClassification"),c(vf,"class","relative group"),c(kt,"class","docstring"),c(qV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(OV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(GV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(XV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(VV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(zV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Po,"class","docstring"),c(jr,"class","docstring"),c(M4,"id","transformers.FlaxAutoModelForMultipleChoice"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Cf,"class","relative group"),c(Rt,"class","docstring"),c(QV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($o,"class","docstring"),c(Dr,"class","docstring"),c(k4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(yf,"class","relative group"),c(St,"class","docstring"),c(ez,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Nr,"class","docstring"),c(S4,"id","transformers.FlaxAutoModelForImageClassification"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.FlaxAutoModelForImageClassification"),c(Lf,"class","relative group"),c(Pt,"class","docstring"),c(oz,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(rz,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(qr,"class","docstring"),c(I4,"id","transformers.FlaxAutoModelForVision2Seq"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.FlaxAutoModelForVision2Seq"),c(kf,"class","relative group"),c($t,"class","docstring"),c(tz,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Or,"class","docstring")},m(d,u){e(document.head,J),b(d,Be,u),b(d,de,u),e(de,me),e(me,so),g(ce,so,null),e(de,ue),e(de,Go),e(Go,Ii),b(d,$f,u),b(d,ca,u),e(ca,ji),e(ca,Di),e(Di,DM),e(ca,If),b(d,ye,u),b(d,co,u),e(co,Ni),e(co,On),e(On,NM),e(co,Gn),e(co,Xn),e(Xn,qM),e(co,qi),e(co,Vn),e(Vn,OM),e(co,Oi),b(d,jf,u),g(Na,d,u),b(d,fo,u),b(d,ge,u),e(ge,k8),e(ge,Gi),e(Gi,R8),e(ge,S8),b(d,Xo,u),b(d,qa,u),e(qa,P8),e(qa,Df),e(Df,$8),e(qa,DSe),b(d,EBe,u),b(d,Xi,u),e(Xi,Nf),e(Nf,JW),g(GM,JW,null),e(Xi,NSe),e(Xi,YW),e(YW,qSe),b(d,yBe,u),b(d,zn,u),e(zn,OSe),e(zn,KW),e(KW,GSe),e(zn,XSe),e(zn,ZW),e(ZW,VSe),e(zn,zSe),b(d,wBe,u),g(XM,d,u),b(d,ABe,u),b(d,I8,u),e(I8,WSe),b(d,LBe,u),g(qf,d,u),b(d,BBe,u),b(d,Vi,u),e(Vi,Of),e(Of,eQ),g(VM,eQ,null),e(Vi,QSe),e(Vi,oQ),e(oQ,HSe),b(d,xBe,u),b(d,Vo,u),g(zM,Vo,null),e(Vo,USe),e(Vo,WM),e(WM,JSe),e(WM,j8),e(j8,YSe),e(WM,KSe),e(Vo,ZSe),e(Vo,QM),e(QM,ePe),e(QM,rQ),e(rQ,oPe),e(QM,rPe),e(Vo,tPe),e(Vo,mo),g(HM,mo,null),e(mo,aPe),e(mo,tQ),e(tQ,nPe),e(mo,sPe),e(mo,zi),e(zi,lPe),e(zi,aQ),e(aQ,iPe),e(zi,dPe),e(zi,nQ),e(nQ,cPe),e(zi,fPe),e(mo,mPe),e(mo,v),e(v,Gf),e(Gf,sQ),e(sQ,gPe),e(Gf,hPe),e(Gf,D8),e(D8,pPe),e(Gf,_Pe),e(v,uPe),e(v,Xf),e(Xf,lQ),e(lQ,bPe),e(Xf,vPe),e(Xf,N8),e(N8,TPe),e(Xf,FPe),e(v,CPe),e(v,Vf),e(Vf,iQ),e(iQ,MPe),e(Vf,EPe),e(Vf,q8),e(q8,yPe),e(Vf,wPe),e(v,APe),e(v,zf),e(zf,dQ),e(dQ,LPe),e(zf,BPe),e(zf,O8),e(O8,xPe),e(zf,kPe),e(v,RPe),e(v,Wf),e(Wf,cQ),e(cQ,SPe),e(Wf,PPe),e(Wf,G8),e(G8,$Pe),e(Wf,IPe),e(v,jPe),e(v,Qf),e(Qf,fQ),e(fQ,DPe),e(Qf,NPe),e(Qf,X8),e(X8,qPe),e(Qf,OPe),e(v,GPe),e(v,Hf),e(Hf,mQ),e(mQ,XPe),e(Hf,VPe),e(Hf,V8),e(V8,zPe),e(Hf,WPe),e(v,QPe),e(v,Uf),e(Uf,gQ),e(gQ,HPe),e(Uf,UPe),e(Uf,z8),e(z8,JPe),e(Uf,YPe),e(v,KPe),e(v,Jf),e(Jf,hQ),e(hQ,ZPe),e(Jf,e$e),e(Jf,W8),e(W8,o$e),e(Jf,r$e),e(v,t$e),e(v,Yf),e(Yf,pQ),e(pQ,a$e),e(Yf,n$e),e(Yf,Q8),e(Q8,s$e),e(Yf,l$e),e(v,i$e),e(v,Kf),e(Kf,_Q),e(_Q,d$e),e(Kf,c$e),e(Kf,H8),e(H8,f$e),e(Kf,m$e),e(v,g$e),e(v,Zf),e(Zf,uQ),e(uQ,h$e),e(Zf,p$e),e(Zf,U8),e(U8,_$e),e(Zf,u$e),e(v,b$e),e(v,em),e(em,bQ),e(bQ,v$e),e(em,T$e),e(em,J8),e(J8,F$e),e(em,C$e),e(v,M$e),e(v,om),e(om,vQ),e(vQ,E$e),e(om,y$e),e(om,Y8),e(Y8,w$e),e(om,A$e),e(v,L$e),e(v,rm),e(rm,TQ),e(TQ,B$e),e(rm,x$e),e(rm,K8),e(K8,k$e),e(rm,R$e),e(v,S$e),e(v,tm),e(tm,FQ),e(FQ,P$e),e(tm,$$e),e(tm,Z8),e(Z8,I$e),e(tm,j$e),e(v,D$e),e(v,am),e(am,CQ),e(CQ,N$e),e(am,q$e),e(am,e7),e(e7,O$e),e(am,G$e),e(v,X$e),e(v,nm),e(nm,MQ),e(MQ,V$e),e(nm,z$e),e(nm,o7),e(o7,W$e),e(nm,Q$e),e(v,H$e),e(v,sm),e(sm,EQ),e(EQ,U$e),e(sm,J$e),e(sm,r7),e(r7,Y$e),e(sm,K$e),e(v,Z$e),e(v,lm),e(lm,yQ),e(yQ,eIe),e(lm,oIe),e(lm,t7),e(t7,rIe),e(lm,tIe),e(v,aIe),e(v,im),e(im,wQ),e(wQ,nIe),e(im,sIe),e(im,a7),e(a7,lIe),e(im,iIe),e(v,dIe),e(v,dm),e(dm,AQ),e(AQ,cIe),e(dm,fIe),e(dm,n7),e(n7,mIe),e(dm,gIe),e(v,hIe),e(v,cm),e(cm,LQ),e(LQ,pIe),e(cm,_Ie),e(cm,s7),e(s7,uIe),e(cm,bIe),e(v,vIe),e(v,fm),e(fm,BQ),e(BQ,TIe),e(fm,FIe),e(fm,l7),e(l7,CIe),e(fm,MIe),e(v,EIe),e(v,mm),e(mm,xQ),e(xQ,yIe),e(mm,wIe),e(mm,i7),e(i7,AIe),e(mm,LIe),e(v,BIe),e(v,gm),e(gm,kQ),e(kQ,xIe),e(gm,kIe),e(gm,d7),e(d7,RIe),e(gm,SIe),e(v,PIe),e(v,hm),e(hm,RQ),e(RQ,$Ie),e(hm,IIe),e(hm,c7),e(c7,jIe),e(hm,DIe),e(v,NIe),e(v,pm),e(pm,SQ),e(SQ,qIe),e(pm,OIe),e(pm,f7),e(f7,GIe),e(pm,XIe),e(v,VIe),e(v,_m),e(_m,PQ),e(PQ,zIe),e(_m,WIe),e(_m,m7),e(m7,QIe),e(_m,HIe),e(v,UIe),e(v,um),e(um,$Q),e($Q,JIe),e(um,YIe),e(um,g7),e(g7,KIe),e(um,ZIe),e(v,eje),e(v,bm),e(bm,IQ),e(IQ,oje),e(bm,rje),e(bm,h7),e(h7,tje),e(bm,aje),e(v,nje),e(v,vm),e(vm,jQ),e(jQ,sje),e(vm,lje),e(vm,p7),e(p7,ije),e(vm,dje),e(v,cje),e(v,Tm),e(Tm,DQ),e(DQ,fje),e(Tm,mje),e(Tm,_7),e(_7,gje),e(Tm,hje),e(v,pje),e(v,Fm),e(Fm,NQ),e(NQ,_je),e(Fm,uje),e(Fm,u7),e(u7,bje),e(Fm,vje),e(v,Tje),e(v,Cm),e(Cm,qQ),e(qQ,Fje),e(Cm,Cje),e(Cm,b7),e(b7,Mje),e(Cm,Eje),e(v,yje),e(v,Mm),e(Mm,OQ),e(OQ,wje),e(Mm,Aje),e(Mm,v7),e(v7,Lje),e(Mm,Bje),e(v,xje),e(v,Em),e(Em,GQ),e(GQ,kje),e(Em,Rje),e(Em,T7),e(T7,Sje),e(Em,Pje),e(v,$je),e(v,ym),e(ym,XQ),e(XQ,Ije),e(ym,jje),e(ym,F7),e(F7,Dje),e(ym,Nje),e(v,qje),e(v,wm),e(wm,VQ),e(VQ,Oje),e(wm,Gje),e(wm,C7),e(C7,Xje),e(wm,Vje),e(v,zje),e(v,Am),e(Am,zQ),e(zQ,Wje),e(Am,Qje),e(Am,M7),e(M7,Hje),e(Am,Uje),e(v,Jje),e(v,Lm),e(Lm,WQ),e(WQ,Yje),e(Lm,Kje),e(Lm,E7),e(E7,Zje),e(Lm,eDe),e(v,oDe),e(v,Bm),e(Bm,QQ),e(QQ,rDe),e(Bm,tDe),e(Bm,y7),e(y7,aDe),e(Bm,nDe),e(v,sDe),e(v,xm),e(xm,HQ),e(HQ,lDe),e(xm,iDe),e(xm,w7),e(w7,dDe),e(xm,cDe),e(v,fDe),e(v,km),e(km,UQ),e(UQ,mDe),e(km,gDe),e(km,A7),e(A7,hDe),e(km,pDe),e(v,_De),e(v,Rm),e(Rm,JQ),e(JQ,uDe),e(Rm,bDe),e(Rm,L7),e(L7,vDe),e(Rm,TDe),e(v,FDe),e(v,Sm),e(Sm,YQ),e(YQ,CDe),e(Sm,MDe),e(Sm,B7),e(B7,EDe),e(Sm,yDe),e(v,wDe),e(v,Pm),e(Pm,KQ),e(KQ,ADe),e(Pm,LDe),e(Pm,x7),e(x7,BDe),e(Pm,xDe),e(v,kDe),e(v,$m),e($m,ZQ),e(ZQ,RDe),e($m,SDe),e($m,k7),e(k7,PDe),e($m,$De),e(v,IDe),e(v,Im),e(Im,eH),e(eH,jDe),e(Im,DDe),e(Im,R7),e(R7,NDe),e(Im,qDe),e(v,ODe),e(v,jm),e(jm,oH),e(oH,GDe),e(jm,XDe),e(jm,S7),e(S7,VDe),e(jm,zDe),e(v,WDe),e(v,Dm),e(Dm,rH),e(rH,QDe),e(Dm,HDe),e(Dm,P7),e(P7,UDe),e(Dm,JDe),e(v,YDe),e(v,Nm),e(Nm,tH),e(tH,KDe),e(Nm,ZDe),e(Nm,$7),e($7,eNe),e(Nm,oNe),e(v,rNe),e(v,qm),e(qm,aH),e(aH,tNe),e(qm,aNe),e(qm,I7),e(I7,nNe),e(qm,sNe),e(v,lNe),e(v,Om),e(Om,nH),e(nH,iNe),e(Om,dNe),e(Om,j7),e(j7,cNe),e(Om,fNe),e(v,mNe),e(v,Gm),e(Gm,sH),e(sH,gNe),e(Gm,hNe),e(Gm,D7),e(D7,pNe),e(Gm,_Ne),e(v,uNe),e(v,Xm),e(Xm,lH),e(lH,bNe),e(Xm,vNe),e(Xm,N7),e(N7,TNe),e(Xm,FNe),e(v,CNe),e(v,Vm),e(Vm,iH),e(iH,MNe),e(Vm,ENe),e(Vm,q7),e(q7,yNe),e(Vm,wNe),e(v,ANe),e(v,zm),e(zm,dH),e(dH,LNe),e(zm,BNe),e(zm,O7),e(O7,xNe),e(zm,kNe),e(v,RNe),e(v,Wm),e(Wm,cH),e(cH,SNe),e(Wm,PNe),e(Wm,G7),e(G7,$Ne),e(Wm,INe),e(v,jNe),e(v,Qm),e(Qm,fH),e(fH,DNe),e(Qm,NNe),e(Qm,X7),e(X7,qNe),e(Qm,ONe),e(v,GNe),e(v,Hm),e(Hm,mH),e(mH,XNe),e(Hm,VNe),e(Hm,V7),e(V7,zNe),e(Hm,WNe),e(v,QNe),e(v,Um),e(Um,gH),e(gH,HNe),e(Um,UNe),e(Um,z7),e(z7,JNe),e(Um,YNe),e(v,KNe),e(v,Jm),e(Jm,hH),e(hH,ZNe),e(Jm,eqe),e(Jm,W7),e(W7,oqe),e(Jm,rqe),e(v,tqe),e(v,Ym),e(Ym,pH),e(pH,aqe),e(Ym,nqe),e(Ym,Q7),e(Q7,sqe),e(Ym,lqe),e(v,iqe),e(v,Km),e(Km,_H),e(_H,dqe),e(Km,cqe),e(Km,H7),e(H7,fqe),e(Km,mqe),e(v,gqe),e(v,Zm),e(Zm,uH),e(uH,hqe),e(Zm,pqe),e(Zm,U7),e(U7,_qe),e(Zm,uqe),e(v,bqe),e(v,eg),e(eg,bH),e(bH,vqe),e(eg,Tqe),e(eg,J7),e(J7,Fqe),e(eg,Cqe),e(v,Mqe),e(v,og),e(og,vH),e(vH,Eqe),e(og,yqe),e(og,Y7),e(Y7,wqe),e(og,Aqe),e(v,Lqe),e(v,rg),e(rg,TH),e(TH,Bqe),e(rg,xqe),e(rg,K7),e(K7,kqe),e(rg,Rqe),e(v,Sqe),e(v,tg),e(tg,FH),e(FH,Pqe),e(tg,$qe),e(tg,Z7),e(Z7,Iqe),e(tg,jqe),e(v,Dqe),e(v,ag),e(ag,CH),e(CH,Nqe),e(ag,qqe),e(ag,eB),e(eB,Oqe),e(ag,Gqe),e(v,Xqe),e(v,ng),e(ng,MH),e(MH,Vqe),e(ng,zqe),e(ng,oB),e(oB,Wqe),e(ng,Qqe),e(v,Hqe),e(v,sg),e(sg,EH),e(EH,Uqe),e(sg,Jqe),e(sg,rB),e(rB,Yqe),e(sg,Kqe),e(v,Zqe),e(v,lg),e(lg,yH),e(yH,eOe),e(lg,oOe),e(lg,tB),e(tB,rOe),e(lg,tOe),e(v,aOe),e(v,ig),e(ig,wH),e(wH,nOe),e(ig,sOe),e(ig,aB),e(aB,lOe),e(ig,iOe),e(v,dOe),e(v,dg),e(dg,AH),e(AH,cOe),e(dg,fOe),e(dg,nB),e(nB,mOe),e(dg,gOe),e(v,hOe),e(v,cg),e(cg,LH),e(LH,pOe),e(cg,_Oe),e(cg,sB),e(sB,uOe),e(cg,bOe),e(v,vOe),e(v,fg),e(fg,BH),e(BH,TOe),e(fg,FOe),e(fg,lB),e(lB,COe),e(fg,MOe),e(v,EOe),e(v,mg),e(mg,xH),e(xH,yOe),e(mg,wOe),e(mg,iB),e(iB,AOe),e(mg,LOe),e(v,BOe),e(v,gg),e(gg,kH),e(kH,xOe),e(gg,kOe),e(gg,dB),e(dB,ROe),e(gg,SOe),e(v,POe),e(v,hg),e(hg,RH),e(RH,$Oe),e(hg,IOe),e(hg,cB),e(cB,jOe),e(hg,DOe),e(v,NOe),e(v,pg),e(pg,SH),e(SH,qOe),e(pg,OOe),e(pg,fB),e(fB,GOe),e(pg,XOe),e(v,VOe),e(v,_g),e(_g,PH),e(PH,zOe),e(_g,WOe),e(_g,mB),e(mB,QOe),e(_g,HOe),e(v,UOe),e(v,ug),e(ug,$H),e($H,JOe),e(ug,YOe),e(ug,gB),e(gB,KOe),e(ug,ZOe),e(v,eGe),e(v,bg),e(bg,IH),e(IH,oGe),e(bg,rGe),e(bg,hB),e(hB,tGe),e(bg,aGe),e(v,nGe),e(v,vg),e(vg,jH),e(jH,sGe),e(vg,lGe),e(vg,pB),e(pB,iGe),e(vg,dGe),e(v,cGe),e(v,Tg),e(Tg,DH),e(DH,fGe),e(Tg,mGe),e(Tg,_B),e(_B,gGe),e(Tg,hGe),e(v,pGe),e(v,Fg),e(Fg,NH),e(NH,_Ge),e(Fg,uGe),e(Fg,uB),e(uB,bGe),e(Fg,vGe),e(v,TGe),e(v,Cg),e(Cg,qH),e(qH,FGe),e(Cg,CGe),e(Cg,bB),e(bB,MGe),e(Cg,EGe),e(v,yGe),e(v,Mg),e(Mg,OH),e(OH,wGe),e(Mg,AGe),e(Mg,vB),e(vB,LGe),e(Mg,BGe),e(v,xGe),e(v,Eg),e(Eg,GH),e(GH,kGe),e(Eg,RGe),e(Eg,TB),e(TB,SGe),e(Eg,PGe),e(v,$Ge),e(v,yg),e(yg,XH),e(XH,IGe),e(yg,jGe),e(yg,FB),e(FB,DGe),e(yg,NGe),e(v,qGe),e(v,wg),e(wg,VH),e(VH,OGe),e(wg,GGe),e(wg,CB),e(CB,XGe),e(wg,VGe),e(v,zGe),e(v,Ag),e(Ag,zH),e(zH,WGe),e(Ag,QGe),e(Ag,MB),e(MB,HGe),e(Ag,UGe),e(mo,JGe),e(mo,WH),e(WH,YGe),e(mo,KGe),g(UM,mo,null),e(Vo,ZGe),e(Vo,Lg),g(JM,Lg,null),e(Lg,eXe),e(Lg,QH),e(QH,oXe),b(d,kBe,u),b(d,Wi,u),e(Wi,Bg),e(Bg,HH),g(YM,HH,null),e(Wi,rXe),e(Wi,UH),e(UH,tXe),b(d,RBe,u),b(d,zo,u),g(KM,zo,null),e(zo,aXe),e(zo,ZM),e(ZM,nXe),e(ZM,EB),e(EB,sXe),e(ZM,lXe),e(zo,iXe),e(zo,eE),e(eE,dXe),e(eE,JH),e(JH,cXe),e(eE,fXe),e(zo,mXe),e(zo,go),g(oE,go,null),e(go,gXe),e(go,YH),e(YH,hXe),e(go,pXe),e(go,Oa),e(Oa,_Xe),e(Oa,KH),e(KH,uXe),e(Oa,bXe),e(Oa,ZH),e(ZH,vXe),e(Oa,TXe),e(Oa,eU),e(eU,FXe),e(Oa,CXe),e(go,MXe),e(go,E),e(E,Wn),e(Wn,oU),e(oU,EXe),e(Wn,yXe),e(Wn,yB),e(yB,wXe),e(Wn,AXe),e(Wn,wB),e(wB,LXe),e(Wn,BXe),e(E,xXe),e(E,Qn),e(Qn,rU),e(rU,kXe),e(Qn,RXe),e(Qn,AB),e(AB,SXe),e(Qn,PXe),e(Qn,LB),e(LB,$Xe),e(Qn,IXe),e(E,jXe),e(E,Hn),e(Hn,tU),e(tU,DXe),e(Hn,NXe),e(Hn,BB),e(BB,qXe),e(Hn,OXe),e(Hn,xB),e(xB,GXe),e(Hn,XXe),e(E,VXe),e(E,xg),e(xg,aU),e(aU,zXe),e(xg,WXe),e(xg,kB),e(kB,QXe),e(xg,HXe),e(E,UXe),e(E,Un),e(Un,nU),e(nU,JXe),e(Un,YXe),e(Un,RB),e(RB,KXe),e(Un,ZXe),e(Un,SB),e(SB,eVe),e(Un,oVe),e(E,rVe),e(E,kg),e(kg,sU),e(sU,tVe),e(kg,aVe),e(kg,PB),e(PB,nVe),e(kg,sVe),e(E,lVe),e(E,Rg),e(Rg,lU),e(lU,iVe),e(Rg,dVe),e(Rg,$B),e($B,cVe),e(Rg,fVe),e(E,mVe),e(E,Sg),e(Sg,iU),e(iU,gVe),e(Sg,hVe),e(Sg,IB),e(IB,pVe),e(Sg,_Ve),e(E,uVe),e(E,Jn),e(Jn,dU),e(dU,bVe),e(Jn,vVe),e(Jn,jB),e(jB,TVe),e(Jn,FVe),e(Jn,DB),e(DB,CVe),e(Jn,MVe),e(E,EVe),e(E,Yn),e(Yn,cU),e(cU,yVe),e(Yn,wVe),e(Yn,NB),e(NB,AVe),e(Yn,LVe),e(Yn,qB),e(qB,BVe),e(Yn,xVe),e(E,kVe),e(E,Kn),e(Kn,fU),e(fU,RVe),e(Kn,SVe),e(Kn,OB),e(OB,PVe),e(Kn,$Ve),e(Kn,GB),e(GB,IVe),e(Kn,jVe),e(E,DVe),e(E,Pg),e(Pg,mU),e(mU,NVe),e(Pg,qVe),e(Pg,XB),e(XB,OVe),e(Pg,GVe),e(E,XVe),e(E,$g),e($g,gU),e(gU,VVe),e($g,zVe),e($g,VB),e(VB,WVe),e($g,QVe),e(E,HVe),e(E,Zn),e(Zn,hU),e(hU,UVe),e(Zn,JVe),e(Zn,zB),e(zB,YVe),e(Zn,KVe),e(Zn,WB),e(WB,ZVe),e(Zn,eze),e(E,oze),e(E,Ig),e(Ig,pU),e(pU,rze),e(Ig,tze),e(Ig,QB),e(QB,aze),e(Ig,nze),e(E,sze),e(E,es),e(es,_U),e(_U,lze),e(es,ize),e(es,HB),e(HB,dze),e(es,cze),e(es,UB),e(UB,fze),e(es,mze),e(E,gze),e(E,os),e(os,uU),e(uU,hze),e(os,pze),e(os,JB),e(JB,_ze),e(os,uze),e(os,YB),e(YB,bze),e(os,vze),e(E,Tze),e(E,rs),e(rs,bU),e(bU,Fze),e(rs,Cze),e(rs,KB),e(KB,Mze),e(rs,Eze),e(rs,vU),e(vU,yze),e(rs,wze),e(E,Aze),e(E,jg),e(jg,TU),e(TU,Lze),e(jg,Bze),e(jg,ZB),e(ZB,xze),e(jg,kze),e(E,Rze),e(E,ts),e(ts,FU),e(FU,Sze),e(ts,Pze),e(ts,ex),e(ex,$ze),e(ts,Ize),e(ts,ox),e(ox,jze),e(ts,Dze),e(E,Nze),e(E,Dg),e(Dg,CU),e(CU,qze),e(Dg,Oze),e(Dg,rx),e(rx,Gze),e(Dg,Xze),e(E,Vze),e(E,as),e(as,MU),e(MU,zze),e(as,Wze),e(as,tx),e(tx,Qze),e(as,Hze),e(as,ax),e(ax,Uze),e(as,Jze),e(E,Yze),e(E,ns),e(ns,EU),e(EU,Kze),e(ns,Zze),e(ns,nx),e(nx,eWe),e(ns,oWe),e(ns,sx),e(sx,rWe),e(ns,tWe),e(E,aWe),e(E,ss),e(ss,yU),e(yU,nWe),e(ss,sWe),e(ss,lx),e(lx,lWe),e(ss,iWe),e(ss,ix),e(ix,dWe),e(ss,cWe),e(E,fWe),e(E,Ng),e(Ng,wU),e(wU,mWe),e(Ng,gWe),e(Ng,dx),e(dx,hWe),e(Ng,pWe),e(E,_We),e(E,ls),e(ls,AU),e(AU,uWe),e(ls,bWe),e(ls,cx),e(cx,vWe),e(ls,TWe),e(ls,fx),e(fx,FWe),e(ls,CWe),e(E,MWe),e(E,qg),e(qg,LU),e(LU,EWe),e(qg,yWe),e(qg,mx),e(mx,wWe),e(qg,AWe),e(E,LWe),e(E,is),e(is,BU),e(BU,BWe),e(is,xWe),e(is,gx),e(gx,kWe),e(is,RWe),e(is,hx),e(hx,SWe),e(is,PWe),e(E,$We),e(E,ds),e(ds,xU),e(xU,IWe),e(ds,jWe),e(ds,px),e(px,DWe),e(ds,NWe),e(ds,_x),e(_x,qWe),e(ds,OWe),e(E,GWe),e(E,cs),e(cs,kU),e(kU,XWe),e(cs,VWe),e(cs,ux),e(ux,zWe),e(cs,WWe),e(cs,bx),e(bx,QWe),e(cs,HWe),e(E,UWe),e(E,fs),e(fs,RU),e(RU,JWe),e(fs,YWe),e(fs,vx),e(vx,KWe),e(fs,ZWe),e(fs,Tx),e(Tx,eQe),e(fs,oQe),e(E,rQe),e(E,Og),e(Og,SU),e(SU,tQe),e(Og,aQe),e(Og,Fx),e(Fx,nQe),e(Og,sQe),e(E,lQe),e(E,ms),e(ms,PU),e(PU,iQe),e(ms,dQe),e(ms,Cx),e(Cx,cQe),e(ms,fQe),e(ms,Mx),e(Mx,mQe),e(ms,gQe),e(E,hQe),e(E,gs),e(gs,$U),e($U,pQe),e(gs,_Qe),e(gs,Ex),e(Ex,uQe),e(gs,bQe),e(gs,yx),e(yx,vQe),e(gs,TQe),e(E,FQe),e(E,hs),e(hs,IU),e(IU,CQe),e(hs,MQe),e(hs,wx),e(wx,EQe),e(hs,yQe),e(hs,Ax),e(Ax,wQe),e(hs,AQe),e(E,LQe),e(E,ps),e(ps,jU),e(jU,BQe),e(ps,xQe),e(ps,Lx),e(Lx,kQe),e(ps,RQe),e(ps,Bx),e(Bx,SQe),e(ps,PQe),e(E,$Qe),e(E,_s),e(_s,DU),e(DU,IQe),e(_s,jQe),e(_s,xx),e(xx,DQe),e(_s,NQe),e(_s,kx),e(kx,qQe),e(_s,OQe),e(E,GQe),e(E,us),e(us,NU),e(NU,XQe),e(us,VQe),e(us,Rx),e(Rx,zQe),e(us,WQe),e(us,Sx),e(Sx,QQe),e(us,HQe),e(E,UQe),e(E,Gg),e(Gg,qU),e(qU,JQe),e(Gg,YQe),e(Gg,Px),e(Px,KQe),e(Gg,ZQe),e(E,eHe),e(E,bs),e(bs,OU),e(OU,oHe),e(bs,rHe),e(bs,$x),e($x,tHe),e(bs,aHe),e(bs,Ix),e(Ix,nHe),e(bs,sHe),e(E,lHe),e(E,Xg),e(Xg,GU),e(GU,iHe),e(Xg,dHe),e(Xg,jx),e(jx,cHe),e(Xg,fHe),e(E,mHe),e(E,Vg),e(Vg,XU),e(XU,gHe),e(Vg,hHe),e(Vg,Dx),e(Dx,pHe),e(Vg,_He),e(E,uHe),e(E,vs),e(vs,VU),e(VU,bHe),e(vs,vHe),e(vs,Nx),e(Nx,THe),e(vs,FHe),e(vs,qx),e(qx,CHe),e(vs,MHe),e(E,EHe),e(E,Ts),e(Ts,zU),e(zU,yHe),e(Ts,wHe),e(Ts,Ox),e(Ox,AHe),e(Ts,LHe),e(Ts,Gx),e(Gx,BHe),e(Ts,xHe),e(E,kHe),e(E,zg),e(zg,WU),e(WU,RHe),e(zg,SHe),e(zg,Xx),e(Xx,PHe),e(zg,$He),e(E,IHe),e(E,Fs),e(Fs,QU),e(QU,jHe),e(Fs,DHe),e(Fs,Vx),e(Vx,NHe),e(Fs,qHe),e(Fs,zx),e(zx,OHe),e(Fs,GHe),e(E,XHe),e(E,Cs),e(Cs,HU),e(HU,VHe),e(Cs,zHe),e(Cs,Wx),e(Wx,WHe),e(Cs,QHe),e(Cs,Qx),e(Qx,HHe),e(Cs,UHe),e(E,JHe),e(E,Ms),e(Ms,UU),e(UU,YHe),e(Ms,KHe),e(Ms,Hx),e(Hx,ZHe),e(Ms,eUe),e(Ms,Ux),e(Ux,oUe),e(Ms,rUe),e(E,tUe),e(E,Es),e(Es,JU),e(JU,aUe),e(Es,nUe),e(Es,Jx),e(Jx,sUe),e(Es,lUe),e(Es,Yx),e(Yx,iUe),e(Es,dUe),e(E,cUe),e(E,ys),e(ys,YU),e(YU,fUe),e(ys,mUe),e(ys,Kx),e(Kx,gUe),e(ys,hUe),e(ys,Zx),e(Zx,pUe),e(ys,_Ue),e(E,uUe),e(E,Wg),e(Wg,KU),e(KU,bUe),e(Wg,vUe),e(Wg,ek),e(ek,TUe),e(Wg,FUe),e(E,CUe),e(E,Qg),e(Qg,ZU),e(ZU,MUe),e(Qg,EUe),e(Qg,ok),e(ok,yUe),e(Qg,wUe),e(E,AUe),e(E,Hg),e(Hg,eJ),e(eJ,LUe),e(Hg,BUe),e(Hg,rk),e(rk,xUe),e(Hg,kUe),e(E,RUe),e(E,Ug),e(Ug,oJ),e(oJ,SUe),e(Ug,PUe),e(Ug,tk),e(tk,$Ue),e(Ug,IUe),e(E,jUe),e(E,ws),e(ws,rJ),e(rJ,DUe),e(ws,NUe),e(ws,ak),e(ak,qUe),e(ws,OUe),e(ws,nk),e(nk,GUe),e(ws,XUe),e(E,VUe),e(E,Jg),e(Jg,tJ),e(tJ,zUe),e(Jg,WUe),e(Jg,sk),e(sk,QUe),e(Jg,HUe),e(E,UUe),e(E,As),e(As,aJ),e(aJ,JUe),e(As,YUe),e(As,lk),e(lk,KUe),e(As,ZUe),e(As,ik),e(ik,eJe),e(As,oJe),e(E,rJe),e(E,Ls),e(Ls,nJ),e(nJ,tJe),e(Ls,aJe),e(Ls,dk),e(dk,nJe),e(Ls,sJe),e(Ls,ck),e(ck,lJe),e(Ls,iJe),e(E,dJe),e(E,Bs),e(Bs,sJ),e(sJ,cJe),e(Bs,fJe),e(Bs,fk),e(fk,mJe),e(Bs,gJe),e(Bs,mk),e(mk,hJe),e(Bs,pJe),e(E,_Je),e(E,xs),e(xs,lJ),e(lJ,uJe),e(xs,bJe),e(xs,gk),e(gk,vJe),e(xs,TJe),e(xs,hk),e(hk,FJe),e(xs,CJe),e(E,MJe),e(E,ks),e(ks,iJ),e(iJ,EJe),e(ks,yJe),e(ks,pk),e(pk,wJe),e(ks,AJe),e(ks,_k),e(_k,LJe),e(ks,BJe),e(E,xJe),e(E,Rs),e(Rs,dJ),e(dJ,kJe),e(Rs,RJe),e(Rs,uk),e(uk,SJe),e(Rs,PJe),e(Rs,bk),e(bk,$Je),e(Rs,IJe),e(E,jJe),e(E,Yg),e(Yg,cJ),e(cJ,DJe),e(Yg,NJe),e(Yg,vk),e(vk,qJe),e(Yg,OJe),e(E,GJe),e(E,Kg),e(Kg,fJ),e(fJ,XJe),e(Kg,VJe),e(Kg,Tk),e(Tk,zJe),e(Kg,WJe),e(E,QJe),e(E,Ss),e(Ss,mJ),e(mJ,HJe),e(Ss,UJe),e(Ss,Fk),e(Fk,JJe),e(Ss,YJe),e(Ss,Ck),e(Ck,KJe),e(Ss,ZJe),e(E,eYe),e(E,Ps),e(Ps,gJ),e(gJ,oYe),e(Ps,rYe),e(Ps,Mk),e(Mk,tYe),e(Ps,aYe),e(Ps,Ek),e(Ek,nYe),e(Ps,sYe),e(E,lYe),e(E,$s),e($s,hJ),e(hJ,iYe),e($s,dYe),e($s,yk),e(yk,cYe),e($s,fYe),e($s,wk),e(wk,mYe),e($s,gYe),e(E,hYe),e(E,Zg),e(Zg,pJ),e(pJ,pYe),e(Zg,_Ye),e(Zg,Ak),e(Ak,uYe),e(Zg,bYe),e(E,vYe),e(E,eh),e(eh,_J),e(_J,TYe),e(eh,FYe),e(eh,Lk),e(Lk,CYe),e(eh,MYe),e(E,EYe),e(E,oh),e(oh,uJ),e(uJ,yYe),e(oh,wYe),e(oh,Bk),e(Bk,AYe),e(oh,LYe),e(E,BYe),e(E,rh),e(rh,bJ),e(bJ,xYe),e(rh,kYe),e(rh,xk),e(xk,RYe),e(rh,SYe),e(E,PYe),e(E,Is),e(Is,vJ),e(vJ,$Ye),e(Is,IYe),e(Is,kk),e(kk,jYe),e(Is,DYe),e(Is,Rk),e(Rk,NYe),e(Is,qYe),e(E,OYe),e(E,th),e(th,TJ),e(TJ,GYe),e(th,XYe),e(th,Sk),e(Sk,VYe),e(th,zYe),e(E,WYe),e(E,ah),e(ah,FJ),e(FJ,QYe),e(ah,HYe),e(ah,Pk),e(Pk,UYe),e(ah,JYe),e(E,YYe),e(E,js),e(js,CJ),e(CJ,KYe),e(js,ZYe),e(js,$k),e($k,eKe),e(js,oKe),e(js,Ik),e(Ik,rKe),e(js,tKe),e(E,aKe),e(E,Ds),e(Ds,MJ),e(MJ,nKe),e(Ds,sKe),e(Ds,jk),e(jk,lKe),e(Ds,iKe),e(Ds,Dk),e(Dk,dKe),e(Ds,cKe),e(go,fKe),e(go,EJ),e(EJ,mKe),e(go,gKe),g(rE,go,null),e(zo,hKe),e(zo,nh),g(tE,nh,null),e(nh,pKe),e(nh,yJ),e(yJ,_Ke),b(d,SBe,u),b(d,Qi,u),e(Qi,sh),e(sh,wJ),g(aE,wJ,null),e(Qi,uKe),e(Qi,AJ),e(AJ,bKe),b(d,PBe,u),b(d,Wo,u),g(nE,Wo,null),e(Wo,vKe),e(Wo,sE),e(sE,TKe),e(sE,Nk),e(Nk,FKe),e(sE,CKe),e(Wo,MKe),e(Wo,lE),e(lE,EKe),e(lE,LJ),e(LJ,yKe),e(lE,wKe),e(Wo,AKe),e(Wo,xe),g(iE,xe,null),e(xe,LKe),e(xe,BJ),e(BJ,BKe),e(xe,xKe),e(xe,Ga),e(Ga,kKe),e(Ga,xJ),e(xJ,RKe),e(Ga,SKe),e(Ga,kJ),e(kJ,PKe),e(Ga,$Ke),e(Ga,RJ),e(RJ,IKe),e(Ga,jKe),e(xe,DKe),e(xe,ae),e(ae,lh),e(lh,SJ),e(SJ,NKe),e(lh,qKe),e(lh,qk),e(qk,OKe),e(lh,GKe),e(ae,XKe),e(ae,ih),e(ih,PJ),e(PJ,VKe),e(ih,zKe),e(ih,Ok),e(Ok,WKe),e(ih,QKe),e(ae,HKe),e(ae,dh),e(dh,$J),e($J,UKe),e(dh,JKe),e(dh,Gk),e(Gk,YKe),e(dh,KKe),e(ae,ZKe),e(ae,ch),e(ch,IJ),e(IJ,eZe),e(ch,oZe),e(ch,Xk),e(Xk,rZe),e(ch,tZe),e(ae,aZe),e(ae,fh),e(fh,jJ),e(jJ,nZe),e(fh,sZe),e(fh,Vk),e(Vk,lZe),e(fh,iZe),e(ae,dZe),e(ae,mh),e(mh,DJ),e(DJ,cZe),e(mh,fZe),e(mh,zk),e(zk,mZe),e(mh,gZe),e(ae,hZe),e(ae,gh),e(gh,NJ),e(NJ,pZe),e(gh,_Ze),e(gh,Wk),e(Wk,uZe),e(gh,bZe),e(ae,vZe),e(ae,hh),e(hh,qJ),e(qJ,TZe),e(hh,FZe),e(hh,Qk),e(Qk,CZe),e(hh,MZe),e(ae,EZe),e(ae,ph),e(ph,OJ),e(OJ,yZe),e(ph,wZe),e(ph,Hk),e(Hk,AZe),e(ph,LZe),e(ae,BZe),e(ae,_h),e(_h,GJ),e(GJ,xZe),e(_h,kZe),e(_h,Uk),e(Uk,RZe),e(_h,SZe),e(ae,PZe),e(ae,uh),e(uh,XJ),e(XJ,$Ze),e(uh,IZe),e(uh,Jk),e(Jk,jZe),e(uh,DZe),e(ae,NZe),e(ae,bh),e(bh,VJ),e(VJ,qZe),e(bh,OZe),e(bh,Yk),e(Yk,GZe),e(bh,XZe),e(ae,VZe),e(ae,vh),e(vh,zJ),e(zJ,zZe),e(vh,WZe),e(vh,Kk),e(Kk,QZe),e(vh,HZe),e(ae,UZe),e(ae,Th),e(Th,WJ),e(WJ,JZe),e(Th,YZe),e(Th,Zk),e(Zk,KZe),e(Th,ZZe),e(ae,eeo),e(ae,Fh),e(Fh,QJ),e(QJ,oeo),e(Fh,reo),e(Fh,eR),e(eR,teo),e(Fh,aeo),e(ae,neo),e(ae,Ch),e(Ch,HJ),e(HJ,seo),e(Ch,leo),e(Ch,oR),e(oR,ieo),e(Ch,deo),e(xe,ceo),g(Mh,xe,null),e(xe,feo),e(xe,UJ),e(UJ,meo),e(xe,geo),g(dE,xe,null),e(Wo,heo),e(Wo,Eh),g(cE,Eh,null),e(Eh,peo),e(Eh,JJ),e(JJ,_eo),b(d,$Be,u),b(d,Hi,u),e(Hi,yh),e(yh,YJ),g(fE,YJ,null),e(Hi,ueo),e(Hi,KJ),e(KJ,beo),b(d,IBe,u),b(d,Qo,u),g(mE,Qo,null),e(Qo,veo),e(Qo,gE),e(gE,Teo),e(gE,rR),e(rR,Feo),e(gE,Ceo),e(Qo,Meo),e(Qo,hE),e(hE,Eeo),e(hE,ZJ),e(ZJ,yeo),e(hE,weo),e(Qo,Aeo),e(Qo,ke),g(pE,ke,null),e(ke,Leo),e(ke,eY),e(eY,Beo),e(ke,xeo),e(ke,Ui),e(Ui,keo),e(Ui,oY),e(oY,Reo),e(Ui,Seo),e(Ui,rY),e(rY,Peo),e(Ui,$eo),e(ke,Ieo),e(ke,we),e(we,wh),e(wh,tY),e(tY,jeo),e(wh,Deo),e(wh,tR),e(tR,Neo),e(wh,qeo),e(we,Oeo),e(we,Ah),e(Ah,aY),e(aY,Geo),e(Ah,Xeo),e(Ah,aR),e(aR,Veo),e(Ah,zeo),e(we,Weo),e(we,Lh),e(Lh,nY),e(nY,Qeo),e(Lh,Heo),e(Lh,nR),e(nR,Ueo),e(Lh,Jeo),e(we,Yeo),e(we,Bh),e(Bh,sY),e(sY,Keo),e(Bh,Zeo),e(Bh,sR),e(sR,eoo),e(Bh,ooo),e(we,roo),e(we,xh),e(xh,lY),e(lY,too),e(xh,aoo),e(xh,lR),e(lR,noo),e(xh,soo),e(we,loo),e(we,kh),e(kh,iY),e(iY,ioo),e(kh,doo),e(kh,iR),e(iR,coo),e(kh,foo),e(we,moo),e(we,Rh),e(Rh,dY),e(dY,goo),e(Rh,hoo),e(Rh,dR),e(dR,poo),e(Rh,_oo),e(we,uoo),e(we,Sh),e(Sh,cY),e(cY,boo),e(Sh,voo),e(Sh,cR),e(cR,Too),e(Sh,Foo),e(ke,Coo),g(Ph,ke,null),e(ke,Moo),e(ke,fY),e(fY,Eoo),e(ke,yoo),g(_E,ke,null),e(Qo,woo),e(Qo,$h),g(uE,$h,null),e($h,Aoo),e($h,mY),e(mY,Loo),b(d,jBe,u),b(d,Ji,u),e(Ji,Ih),e(Ih,gY),g(bE,gY,null),e(Ji,Boo),e(Ji,hY),e(hY,xoo),b(d,DBe,u),b(d,Ho,u),g(vE,Ho,null),e(Ho,koo),e(Ho,Yi),e(Yi,Roo),e(Yi,pY),e(pY,Soo),e(Yi,Poo),e(Yi,_Y),e(_Y,$oo),e(Yi,Ioo),e(Ho,joo),e(Ho,TE),e(TE,Doo),e(TE,uY),e(uY,Noo),e(TE,qoo),e(Ho,Ooo),e(Ho,Gr),g(FE,Gr,null),e(Gr,Goo),e(Gr,bY),e(bY,Xoo),e(Gr,Voo),e(Gr,Ki),e(Ki,zoo),e(Ki,vY),e(vY,Woo),e(Ki,Qoo),e(Ki,TY),e(TY,Hoo),e(Ki,Uoo),e(Gr,Joo),e(Gr,FY),e(FY,Yoo),e(Gr,Koo),g(CE,Gr,null),e(Ho,Zoo),e(Ho,Re),g(ME,Re,null),e(Re,ero),e(Re,CY),e(CY,oro),e(Re,rro),e(Re,Xa),e(Xa,tro),e(Xa,MY),e(MY,aro),e(Xa,nro),e(Xa,EY),e(EY,sro),e(Xa,lro),e(Xa,yY),e(yY,iro),e(Xa,dro),e(Re,cro),e(Re,F),e(F,jh),e(jh,wY),e(wY,fro),e(jh,mro),e(jh,fR),e(fR,gro),e(jh,hro),e(F,pro),e(F,Dh),e(Dh,AY),e(AY,_ro),e(Dh,uro),e(Dh,mR),e(mR,bro),e(Dh,vro),e(F,Tro),e(F,Nh),e(Nh,LY),e(LY,Fro),e(Nh,Cro),e(Nh,gR),e(gR,Mro),e(Nh,Ero),e(F,yro),e(F,qh),e(qh,BY),e(BY,wro),e(qh,Aro),e(qh,hR),e(hR,Lro),e(qh,Bro),e(F,xro),e(F,Oh),e(Oh,xY),e(xY,kro),e(Oh,Rro),e(Oh,pR),e(pR,Sro),e(Oh,Pro),e(F,$ro),e(F,Gh),e(Gh,kY),e(kY,Iro),e(Gh,jro),e(Gh,_R),e(_R,Dro),e(Gh,Nro),e(F,qro),e(F,Xh),e(Xh,RY),e(RY,Oro),e(Xh,Gro),e(Xh,uR),e(uR,Xro),e(Xh,Vro),e(F,zro),e(F,Vh),e(Vh,SY),e(SY,Wro),e(Vh,Qro),e(Vh,bR),e(bR,Hro),e(Vh,Uro),e(F,Jro),e(F,zh),e(zh,PY),e(PY,Yro),e(zh,Kro),e(zh,vR),e(vR,Zro),e(zh,eto),e(F,oto),e(F,Wh),e(Wh,$Y),e($Y,rto),e(Wh,tto),e(Wh,TR),e(TR,ato),e(Wh,nto),e(F,sto),e(F,Qh),e(Qh,IY),e(IY,lto),e(Qh,ito),e(Qh,FR),e(FR,dto),e(Qh,cto),e(F,fto),e(F,Hh),e(Hh,jY),e(jY,mto),e(Hh,gto),e(Hh,CR),e(CR,hto),e(Hh,pto),e(F,_to),e(F,Uh),e(Uh,DY),e(DY,uto),e(Uh,bto),e(Uh,MR),e(MR,vto),e(Uh,Tto),e(F,Fto),e(F,Jh),e(Jh,NY),e(NY,Cto),e(Jh,Mto),e(Jh,ER),e(ER,Eto),e(Jh,yto),e(F,wto),e(F,Yh),e(Yh,qY),e(qY,Ato),e(Yh,Lto),e(Yh,yR),e(yR,Bto),e(Yh,xto),e(F,kto),e(F,Kh),e(Kh,OY),e(OY,Rto),e(Kh,Sto),e(Kh,wR),e(wR,Pto),e(Kh,$to),e(F,Ito),e(F,Zh),e(Zh,GY),e(GY,jto),e(Zh,Dto),e(Zh,AR),e(AR,Nto),e(Zh,qto),e(F,Oto),e(F,ep),e(ep,XY),e(XY,Gto),e(ep,Xto),e(ep,LR),e(LR,Vto),e(ep,zto),e(F,Wto),e(F,op),e(op,VY),e(VY,Qto),e(op,Hto),e(op,BR),e(BR,Uto),e(op,Jto),e(F,Yto),e(F,rp),e(rp,zY),e(zY,Kto),e(rp,Zto),e(rp,xR),e(xR,eao),e(rp,oao),e(F,rao),e(F,tp),e(tp,WY),e(WY,tao),e(tp,aao),e(tp,kR),e(kR,nao),e(tp,sao),e(F,lao),e(F,ap),e(ap,QY),e(QY,iao),e(ap,dao),e(ap,RR),e(RR,cao),e(ap,fao),e(F,mao),e(F,np),e(np,HY),e(HY,gao),e(np,hao),e(np,SR),e(SR,pao),e(np,_ao),e(F,uao),e(F,sp),e(sp,UY),e(UY,bao),e(sp,vao),e(sp,PR),e(PR,Tao),e(sp,Fao),e(F,Cao),e(F,lp),e(lp,JY),e(JY,Mao),e(lp,Eao),e(lp,$R),e($R,yao),e(lp,wao),e(F,Aao),e(F,ip),e(ip,YY),e(YY,Lao),e(ip,Bao),e(ip,IR),e(IR,xao),e(ip,kao),e(F,Rao),e(F,dp),e(dp,KY),e(KY,Sao),e(dp,Pao),e(dp,jR),e(jR,$ao),e(dp,Iao),e(F,jao),e(F,Ns),e(Ns,ZY),e(ZY,Dao),e(Ns,Nao),e(Ns,DR),e(DR,qao),e(Ns,Oao),e(Ns,NR),e(NR,Gao),e(Ns,Xao),e(F,Vao),e(F,cp),e(cp,eK),e(eK,zao),e(cp,Wao),e(cp,qR),e(qR,Qao),e(cp,Hao),e(F,Uao),e(F,fp),e(fp,oK),e(oK,Jao),e(fp,Yao),e(fp,OR),e(OR,Kao),e(fp,Zao),e(F,eno),e(F,mp),e(mp,rK),e(rK,ono),e(mp,rno),e(mp,GR),e(GR,tno),e(mp,ano),e(F,nno),e(F,gp),e(gp,tK),e(tK,sno),e(gp,lno),e(gp,XR),e(XR,ino),e(gp,dno),e(F,cno),e(F,hp),e(hp,aK),e(aK,fno),e(hp,mno),e(hp,VR),e(VR,gno),e(hp,hno),e(F,pno),e(F,pp),e(pp,nK),e(nK,_no),e(pp,uno),e(pp,zR),e(zR,bno),e(pp,vno),e(F,Tno),e(F,_p),e(_p,sK),e(sK,Fno),e(_p,Cno),e(_p,WR),e(WR,Mno),e(_p,Eno),e(F,yno),e(F,up),e(up,lK),e(lK,wno),e(up,Ano),e(up,QR),e(QR,Lno),e(up,Bno),e(F,xno),e(F,bp),e(bp,iK),e(iK,kno),e(bp,Rno),e(bp,HR),e(HR,Sno),e(bp,Pno),e(F,$no),e(F,vp),e(vp,dK),e(dK,Ino),e(vp,jno),e(vp,UR),e(UR,Dno),e(vp,Nno),e(F,qno),e(F,Tp),e(Tp,cK),e(cK,Ono),e(Tp,Gno),e(Tp,JR),e(JR,Xno),e(Tp,Vno),e(F,zno),e(F,Fp),e(Fp,fK),e(fK,Wno),e(Fp,Qno),e(Fp,YR),e(YR,Hno),e(Fp,Uno),e(F,Jno),e(F,Cp),e(Cp,mK),e(mK,Yno),e(Cp,Kno),e(Cp,KR),e(KR,Zno),e(Cp,eso),e(F,oso),e(F,Mp),e(Mp,gK),e(gK,rso),e(Mp,tso),e(Mp,ZR),e(ZR,aso),e(Mp,nso),e(F,sso),e(F,Ep),e(Ep,hK),e(hK,lso),e(Ep,iso),e(Ep,eS),e(eS,dso),e(Ep,cso),e(F,fso),e(F,yp),e(yp,pK),e(pK,mso),e(yp,gso),e(yp,oS),e(oS,hso),e(yp,pso),e(F,_so),e(F,wp),e(wp,_K),e(_K,uso),e(wp,bso),e(wp,rS),e(rS,vso),e(wp,Tso),e(F,Fso),e(F,Ap),e(Ap,uK),e(uK,Cso),e(Ap,Mso),e(Ap,tS),e(tS,Eso),e(Ap,yso),e(F,wso),e(F,Lp),e(Lp,bK),e(bK,Aso),e(Lp,Lso),e(Lp,aS),e(aS,Bso),e(Lp,xso),e(F,kso),e(F,Bp),e(Bp,vK),e(vK,Rso),e(Bp,Sso),e(Bp,nS),e(nS,Pso),e(Bp,$so),e(F,Iso),e(F,xp),e(xp,TK),e(TK,jso),e(xp,Dso),e(xp,sS),e(sS,Nso),e(xp,qso),e(F,Oso),e(F,kp),e(kp,FK),e(FK,Gso),e(kp,Xso),e(kp,lS),e(lS,Vso),e(kp,zso),e(F,Wso),e(F,Rp),e(Rp,CK),e(CK,Qso),e(Rp,Hso),e(Rp,iS),e(iS,Uso),e(Rp,Jso),e(F,Yso),e(F,Sp),e(Sp,MK),e(MK,Kso),e(Sp,Zso),e(Sp,dS),e(dS,elo),e(Sp,olo),e(F,rlo),e(F,Pp),e(Pp,EK),e(EK,tlo),e(Pp,alo),e(Pp,cS),e(cS,nlo),e(Pp,slo),e(F,llo),e(F,$p),e($p,yK),e(yK,ilo),e($p,dlo),e($p,fS),e(fS,clo),e($p,flo),e(F,mlo),e(F,Ip),e(Ip,wK),e(wK,glo),e(Ip,hlo),e(Ip,mS),e(mS,plo),e(Ip,_lo),e(F,ulo),e(F,jp),e(jp,AK),e(AK,blo),e(jp,vlo),e(jp,gS),e(gS,Tlo),e(jp,Flo),e(F,Clo),e(F,Dp),e(Dp,LK),e(LK,Mlo),e(Dp,Elo),e(Dp,hS),e(hS,ylo),e(Dp,wlo),e(F,Alo),e(F,Np),e(Np,BK),e(BK,Llo),e(Np,Blo),e(Np,pS),e(pS,xlo),e(Np,klo),e(F,Rlo),e(F,qp),e(qp,xK),e(xK,Slo),e(qp,Plo),e(qp,_S),e(_S,$lo),e(qp,Ilo),e(F,jlo),e(F,Op),e(Op,kK),e(kK,Dlo),e(Op,Nlo),e(Op,uS),e(uS,qlo),e(Op,Olo),e(F,Glo),e(F,Gp),e(Gp,RK),e(RK,Xlo),e(Gp,Vlo),e(Gp,bS),e(bS,zlo),e(Gp,Wlo),e(F,Qlo),e(F,Xp),e(Xp,SK),e(SK,Hlo),e(Xp,Ulo),e(Xp,vS),e(vS,Jlo),e(Xp,Ylo),e(F,Klo),e(F,Vp),e(Vp,PK),e(PK,Zlo),e(Vp,eio),e(Vp,TS),e(TS,oio),e(Vp,rio),e(F,tio),e(F,zp),e(zp,$K),e($K,aio),e(zp,nio),e(zp,FS),e(FS,sio),e(zp,lio),e(F,iio),e(F,Wp),e(Wp,IK),e(IK,dio),e(Wp,cio),e(Wp,CS),e(CS,fio),e(Wp,mio),e(F,gio),e(F,Qp),e(Qp,jK),e(jK,hio),e(Qp,pio),e(Qp,MS),e(MS,_io),e(Qp,uio),e(F,bio),e(F,Hp),e(Hp,DK),e(DK,vio),e(Hp,Tio),e(Hp,ES),e(ES,Fio),e(Hp,Cio),e(F,Mio),e(F,Up),e(Up,NK),e(NK,Eio),e(Up,yio),e(Up,yS),e(yS,wio),e(Up,Aio),e(F,Lio),e(F,Jp),e(Jp,qK),e(qK,Bio),e(Jp,xio),e(Jp,wS),e(wS,kio),e(Jp,Rio),e(F,Sio),e(F,Yp),e(Yp,OK),e(OK,Pio),e(Yp,$io),e(Yp,AS),e(AS,Iio),e(Yp,jio),e(F,Dio),e(F,Kp),e(Kp,GK),e(GK,Nio),e(Kp,qio),e(Kp,LS),e(LS,Oio),e(Kp,Gio),e(F,Xio),e(F,Zp),e(Zp,XK),e(XK,Vio),e(Zp,zio),e(Zp,BS),e(BS,Wio),e(Zp,Qio),e(F,Hio),e(F,e_),e(e_,VK),e(VK,Uio),e(e_,Jio),e(e_,xS),e(xS,Yio),e(e_,Kio),e(F,Zio),e(F,o_),e(o_,zK),e(zK,edo),e(o_,odo),e(o_,kS),e(kS,rdo),e(o_,tdo),e(F,ado),e(F,r_),e(r_,WK),e(WK,ndo),e(r_,sdo),e(r_,RS),e(RS,ldo),e(r_,ido),e(F,ddo),e(F,t_),e(t_,QK),e(QK,cdo),e(t_,fdo),e(t_,SS),e(SS,mdo),e(t_,gdo),e(F,hdo),e(F,a_),e(a_,HK),e(HK,pdo),e(a_,_do),e(a_,PS),e(PS,udo),e(a_,bdo),e(F,vdo),e(F,n_),e(n_,UK),e(UK,Tdo),e(n_,Fdo),e(n_,$S),e($S,Cdo),e(n_,Mdo),e(F,Edo),e(F,s_),e(s_,JK),e(JK,ydo),e(s_,wdo),e(s_,IS),e(IS,Ado),e(s_,Ldo),e(F,Bdo),e(F,l_),e(l_,YK),e(YK,xdo),e(l_,kdo),e(l_,jS),e(jS,Rdo),e(l_,Sdo),e(F,Pdo),e(F,i_),e(i_,KK),e(KK,$do),e(i_,Ido),e(i_,DS),e(DS,jdo),e(i_,Ddo),e(F,Ndo),e(F,d_),e(d_,ZK),e(ZK,qdo),e(d_,Odo),e(d_,NS),e(NS,Gdo),e(d_,Xdo),e(F,Vdo),e(F,c_),e(c_,eZ),e(eZ,zdo),e(c_,Wdo),e(c_,qS),e(qS,Qdo),e(c_,Hdo),e(F,Udo),e(F,f_),e(f_,oZ),e(oZ,Jdo),e(f_,Ydo),e(f_,OS),e(OS,Kdo),e(f_,Zdo),e(F,eco),e(F,m_),e(m_,rZ),e(rZ,oco),e(m_,rco),e(m_,GS),e(GS,tco),e(m_,aco),e(F,nco),e(F,g_),e(g_,tZ),e(tZ,sco),e(g_,lco),e(g_,XS),e(XS,ico),e(g_,dco),e(F,cco),e(F,h_),e(h_,aZ),e(aZ,fco),e(h_,mco),e(h_,VS),e(VS,gco),e(h_,hco),e(Re,pco),e(Re,p_),e(p_,_co),e(p_,nZ),e(nZ,uco),e(p_,bco),e(p_,sZ),e(sZ,vco),e(Re,Tco),e(Re,lZ),e(lZ,Fco),e(Re,Cco),g(EE,Re,null),b(d,NBe,u),b(d,Zi,u),e(Zi,__),e(__,iZ),g(yE,iZ,null),e(Zi,Mco),e(Zi,dZ),e(dZ,Eco),b(d,qBe,u),b(d,Uo,u),g(wE,Uo,null),e(Uo,yco),e(Uo,ed),e(ed,wco),e(ed,cZ),e(cZ,Aco),e(ed,Lco),e(ed,fZ),e(fZ,Bco),e(ed,xco),e(Uo,kco),e(Uo,AE),e(AE,Rco),e(AE,mZ),e(mZ,Sco),e(AE,Pco),e(Uo,$co),e(Uo,Xr),g(LE,Xr,null),e(Xr,Ico),e(Xr,gZ),e(gZ,jco),e(Xr,Dco),e(Xr,od),e(od,Nco),e(od,hZ),e(hZ,qco),e(od,Oco),e(od,pZ),e(pZ,Gco),e(od,Xco),e(Xr,Vco),e(Xr,_Z),e(_Z,zco),e(Xr,Wco),g(BE,Xr,null),e(Uo,Qco),e(Uo,Se),g(xE,Se,null),e(Se,Hco),e(Se,uZ),e(uZ,Uco),e(Se,Jco),e(Se,Va),e(Va,Yco),e(Va,bZ),e(bZ,Kco),e(Va,Zco),e(Va,vZ),e(vZ,efo),e(Va,ofo),e(Va,TZ),e(TZ,rfo),e(Va,tfo),e(Se,afo),e(Se,k),e(k,u_),e(u_,FZ),e(FZ,nfo),e(u_,sfo),e(u_,zS),e(zS,lfo),e(u_,ifo),e(k,dfo),e(k,b_),e(b_,CZ),e(CZ,cfo),e(b_,ffo),e(b_,WS),e(WS,mfo),e(b_,gfo),e(k,hfo),e(k,v_),e(v_,MZ),e(MZ,pfo),e(v_,_fo),e(v_,QS),e(QS,ufo),e(v_,bfo),e(k,vfo),e(k,T_),e(T_,EZ),e(EZ,Tfo),e(T_,Ffo),e(T_,HS),e(HS,Cfo),e(T_,Mfo),e(k,Efo),e(k,F_),e(F_,yZ),e(yZ,yfo),e(F_,wfo),e(F_,US),e(US,Afo),e(F_,Lfo),e(k,Bfo),e(k,C_),e(C_,wZ),e(wZ,xfo),e(C_,kfo),e(C_,JS),e(JS,Rfo),e(C_,Sfo),e(k,Pfo),e(k,M_),e(M_,AZ),e(AZ,$fo),e(M_,Ifo),e(M_,YS),e(YS,jfo),e(M_,Dfo),e(k,Nfo),e(k,E_),e(E_,LZ),e(LZ,qfo),e(E_,Ofo),e(E_,KS),e(KS,Gfo),e(E_,Xfo),e(k,Vfo),e(k,y_),e(y_,BZ),e(BZ,zfo),e(y_,Wfo),e(y_,ZS),e(ZS,Qfo),e(y_,Hfo),e(k,Ufo),e(k,w_),e(w_,xZ),e(xZ,Jfo),e(w_,Yfo),e(w_,eP),e(eP,Kfo),e(w_,Zfo),e(k,emo),e(k,A_),e(A_,kZ),e(kZ,omo),e(A_,rmo),e(A_,oP),e(oP,tmo),e(A_,amo),e(k,nmo),e(k,L_),e(L_,RZ),e(RZ,smo),e(L_,lmo),e(L_,rP),e(rP,imo),e(L_,dmo),e(k,cmo),e(k,B_),e(B_,SZ),e(SZ,fmo),e(B_,mmo),e(B_,tP),e(tP,gmo),e(B_,hmo),e(k,pmo),e(k,x_),e(x_,PZ),e(PZ,_mo),e(x_,umo),e(x_,aP),e(aP,bmo),e(x_,vmo),e(k,Tmo),e(k,k_),e(k_,$Z),e($Z,Fmo),e(k_,Cmo),e(k_,nP),e(nP,Mmo),e(k_,Emo),e(k,ymo),e(k,R_),e(R_,IZ),e(IZ,wmo),e(R_,Amo),e(R_,sP),e(sP,Lmo),e(R_,Bmo),e(k,xmo),e(k,S_),e(S_,jZ),e(jZ,kmo),e(S_,Rmo),e(S_,lP),e(lP,Smo),e(S_,Pmo),e(k,$mo),e(k,P_),e(P_,DZ),e(DZ,Imo),e(P_,jmo),e(P_,iP),e(iP,Dmo),e(P_,Nmo),e(k,qmo),e(k,$_),e($_,NZ),e(NZ,Omo),e($_,Gmo),e($_,dP),e(dP,Xmo),e($_,Vmo),e(k,zmo),e(k,I_),e(I_,qZ),e(qZ,Wmo),e(I_,Qmo),e(I_,cP),e(cP,Hmo),e(I_,Umo),e(k,Jmo),e(k,j_),e(j_,OZ),e(OZ,Ymo),e(j_,Kmo),e(j_,fP),e(fP,Zmo),e(j_,ego),e(k,ogo),e(k,D_),e(D_,GZ),e(GZ,rgo),e(D_,tgo),e(D_,mP),e(mP,ago),e(D_,ngo),e(k,sgo),e(k,N_),e(N_,XZ),e(XZ,lgo),e(N_,igo),e(N_,gP),e(gP,dgo),e(N_,cgo),e(k,fgo),e(k,q_),e(q_,VZ),e(VZ,mgo),e(q_,ggo),e(q_,hP),e(hP,hgo),e(q_,pgo),e(k,_go),e(k,O_),e(O_,zZ),e(zZ,ugo),e(O_,bgo),e(O_,pP),e(pP,vgo),e(O_,Tgo),e(k,Fgo),e(k,G_),e(G_,WZ),e(WZ,Cgo),e(G_,Mgo),e(G_,_P),e(_P,Ego),e(G_,ygo),e(k,wgo),e(k,X_),e(X_,QZ),e(QZ,Ago),e(X_,Lgo),e(X_,uP),e(uP,Bgo),e(X_,xgo),e(k,kgo),e(k,V_),e(V_,HZ),e(HZ,Rgo),e(V_,Sgo),e(V_,bP),e(bP,Pgo),e(V_,$go),e(k,Igo),e(k,z_),e(z_,UZ),e(UZ,jgo),e(z_,Dgo),e(z_,vP),e(vP,Ngo),e(z_,qgo),e(k,Ogo),e(k,W_),e(W_,JZ),e(JZ,Ggo),e(W_,Xgo),e(W_,TP),e(TP,Vgo),e(W_,zgo),e(k,Wgo),e(k,Q_),e(Q_,YZ),e(YZ,Qgo),e(Q_,Hgo),e(Q_,FP),e(FP,Ugo),e(Q_,Jgo),e(k,Ygo),e(k,H_),e(H_,KZ),e(KZ,Kgo),e(H_,Zgo),e(H_,CP),e(CP,eho),e(H_,oho),e(k,rho),e(k,U_),e(U_,ZZ),e(ZZ,tho),e(U_,aho),e(U_,MP),e(MP,nho),e(U_,sho),e(k,lho),e(k,J_),e(J_,eee),e(eee,iho),e(J_,dho),e(J_,EP),e(EP,cho),e(J_,fho),e(k,mho),e(k,Y_),e(Y_,oee),e(oee,gho),e(Y_,hho),e(Y_,yP),e(yP,pho),e(Y_,_ho),e(k,uho),e(k,K_),e(K_,ree),e(ree,bho),e(K_,vho),e(K_,wP),e(wP,Tho),e(K_,Fho),e(k,Cho),e(k,Z_),e(Z_,tee),e(tee,Mho),e(Z_,Eho),e(Z_,AP),e(AP,yho),e(Z_,who),e(k,Aho),e(k,eu),e(eu,aee),e(aee,Lho),e(eu,Bho),e(eu,LP),e(LP,xho),e(eu,kho),e(k,Rho),e(k,ou),e(ou,nee),e(nee,Sho),e(ou,Pho),e(ou,BP),e(BP,$ho),e(ou,Iho),e(Se,jho),e(Se,ru),e(ru,Dho),e(ru,see),e(see,Nho),e(ru,qho),e(ru,lee),e(lee,Oho),e(Se,Gho),e(Se,iee),e(iee,Xho),e(Se,Vho),g(kE,Se,null),b(d,OBe,u),b(d,rd,u),e(rd,tu),e(tu,dee),g(RE,dee,null),e(rd,zho),e(rd,cee),e(cee,Who),b(d,GBe,u),b(d,Jo,u),g(SE,Jo,null),e(Jo,Qho),e(Jo,td),e(td,Hho),e(td,fee),e(fee,Uho),e(td,Jho),e(td,mee),e(mee,Yho),e(td,Kho),e(Jo,Zho),e(Jo,PE),e(PE,epo),e(PE,gee),e(gee,opo),e(PE,rpo),e(Jo,tpo),e(Jo,Vr),g($E,Vr,null),e(Vr,apo),e(Vr,hee),e(hee,npo),e(Vr,spo),e(Vr,ad),e(ad,lpo),e(ad,pee),e(pee,ipo),e(ad,dpo),e(ad,_ee),e(_ee,cpo),e(ad,fpo),e(Vr,mpo),e(Vr,uee),e(uee,gpo),e(Vr,hpo),g(IE,Vr,null),e(Jo,ppo),e(Jo,Pe),g(jE,Pe,null),e(Pe,_po),e(Pe,bee),e(bee,upo),e(Pe,bpo),e(Pe,za),e(za,vpo),e(za,vee),e(vee,Tpo),e(za,Fpo),e(za,Tee),e(Tee,Cpo),e(za,Mpo),e(za,Fee),e(Fee,Epo),e(za,ypo),e(Pe,wpo),e(Pe,$),e($,au),e(au,Cee),e(Cee,Apo),e(au,Lpo),e(au,xP),e(xP,Bpo),e(au,xpo),e($,kpo),e($,nu),e(nu,Mee),e(Mee,Rpo),e(nu,Spo),e(nu,kP),e(kP,Ppo),e(nu,$po),e($,Ipo),e($,su),e(su,Eee),e(Eee,jpo),e(su,Dpo),e(su,RP),e(RP,Npo),e(su,qpo),e($,Opo),e($,lu),e(lu,yee),e(yee,Gpo),e(lu,Xpo),e(lu,SP),e(SP,Vpo),e(lu,zpo),e($,Wpo),e($,iu),e(iu,wee),e(wee,Qpo),e(iu,Hpo),e(iu,PP),e(PP,Upo),e(iu,Jpo),e($,Ypo),e($,du),e(du,Aee),e(Aee,Kpo),e(du,Zpo),e(du,$P),e($P,e_o),e(du,o_o),e($,r_o),e($,cu),e(cu,Lee),e(Lee,t_o),e(cu,a_o),e(cu,IP),e(IP,n_o),e(cu,s_o),e($,l_o),e($,fu),e(fu,Bee),e(Bee,i_o),e(fu,d_o),e(fu,jP),e(jP,c_o),e(fu,f_o),e($,m_o),e($,mu),e(mu,xee),e(xee,g_o),e(mu,h_o),e(mu,DP),e(DP,p_o),e(mu,__o),e($,u_o),e($,gu),e(gu,kee),e(kee,b_o),e(gu,v_o),e(gu,NP),e(NP,T_o),e(gu,F_o),e($,C_o),e($,hu),e(hu,Ree),e(Ree,M_o),e(hu,E_o),e(hu,qP),e(qP,y_o),e(hu,w_o),e($,A_o),e($,pu),e(pu,See),e(See,L_o),e(pu,B_o),e(pu,OP),e(OP,x_o),e(pu,k_o),e($,R_o),e($,_u),e(_u,Pee),e(Pee,S_o),e(_u,P_o),e(_u,GP),e(GP,$_o),e(_u,I_o),e($,j_o),e($,uu),e(uu,$ee),e($ee,D_o),e(uu,N_o),e(uu,XP),e(XP,q_o),e(uu,O_o),e($,G_o),e($,bu),e(bu,Iee),e(Iee,X_o),e(bu,V_o),e(bu,VP),e(VP,z_o),e(bu,W_o),e($,Q_o),e($,vu),e(vu,jee),e(jee,H_o),e(vu,U_o),e(vu,zP),e(zP,J_o),e(vu,Y_o),e($,K_o),e($,Tu),e(Tu,Dee),e(Dee,Z_o),e(Tu,euo),e(Tu,WP),e(WP,ouo),e(Tu,ruo),e($,tuo),e($,Fu),e(Fu,Nee),e(Nee,auo),e(Fu,nuo),e(Fu,QP),e(QP,suo),e(Fu,luo),e($,iuo),e($,Cu),e(Cu,qee),e(qee,duo),e(Cu,cuo),e(Cu,HP),e(HP,fuo),e(Cu,muo),e($,guo),e($,Mu),e(Mu,Oee),e(Oee,huo),e(Mu,puo),e(Mu,UP),e(UP,_uo),e(Mu,uuo),e($,buo),e($,Eu),e(Eu,Gee),e(Gee,vuo),e(Eu,Tuo),e(Eu,JP),e(JP,Fuo),e(Eu,Cuo),e($,Muo),e($,yu),e(yu,Xee),e(Xee,Euo),e(yu,yuo),e(yu,YP),e(YP,wuo),e(yu,Auo),e($,Luo),e($,wu),e(wu,Vee),e(Vee,Buo),e(wu,xuo),e(wu,KP),e(KP,kuo),e(wu,Ruo),e($,Suo),e($,Au),e(Au,zee),e(zee,Puo),e(Au,$uo),e(Au,ZP),e(ZP,Iuo),e(Au,juo),e($,Duo),e($,Lu),e(Lu,Wee),e(Wee,Nuo),e(Lu,quo),e(Lu,e$),e(e$,Ouo),e(Lu,Guo),e($,Xuo),e($,Bu),e(Bu,Qee),e(Qee,Vuo),e(Bu,zuo),e(Bu,o$),e(o$,Wuo),e(Bu,Quo),e($,Huo),e($,xu),e(xu,Hee),e(Hee,Uuo),e(xu,Juo),e(xu,r$),e(r$,Yuo),e(xu,Kuo),e($,Zuo),e($,ku),e(ku,Uee),e(Uee,e2o),e(ku,o2o),e(ku,t$),e(t$,r2o),e(ku,t2o),e($,a2o),e($,Ru),e(Ru,Jee),e(Jee,n2o),e(Ru,s2o),e(Ru,a$),e(a$,l2o),e(Ru,i2o),e($,d2o),e($,Su),e(Su,Yee),e(Yee,c2o),e(Su,f2o),e(Su,n$),e(n$,m2o),e(Su,g2o),e($,h2o),e($,Pu),e(Pu,Kee),e(Kee,p2o),e(Pu,_2o),e(Pu,s$),e(s$,u2o),e(Pu,b2o),e($,v2o),e($,$u),e($u,Zee),e(Zee,T2o),e($u,F2o),e($u,l$),e(l$,C2o),e($u,M2o),e($,E2o),e($,Iu),e(Iu,eoe),e(eoe,y2o),e(Iu,w2o),e(Iu,i$),e(i$,A2o),e(Iu,L2o),e($,B2o),e($,ju),e(ju,ooe),e(ooe,x2o),e(ju,k2o),e(ju,d$),e(d$,R2o),e(ju,S2o),e($,P2o),e($,Du),e(Du,roe),e(roe,$2o),e(Du,I2o),e(Du,c$),e(c$,j2o),e(Du,D2o),e(Pe,N2o),e(Pe,Nu),e(Nu,q2o),e(Nu,toe),e(toe,O2o),e(Nu,G2o),e(Nu,aoe),e(aoe,X2o),e(Pe,V2o),e(Pe,noe),e(noe,z2o),e(Pe,W2o),g(DE,Pe,null),b(d,XBe,u),b(d,nd,u),e(nd,qu),e(qu,soe),g(NE,soe,null),e(nd,Q2o),e(nd,loe),e(loe,H2o),b(d,VBe,u),b(d,Yo,u),g(qE,Yo,null),e(Yo,U2o),e(Yo,sd),e(sd,J2o),e(sd,ioe),e(ioe,Y2o),e(sd,K2o),e(sd,doe),e(doe,Z2o),e(sd,e1o),e(Yo,o1o),e(Yo,OE),e(OE,r1o),e(OE,coe),e(coe,t1o),e(OE,a1o),e(Yo,n1o),e(Yo,zr),g(GE,zr,null),e(zr,s1o),e(zr,foe),e(foe,l1o),e(zr,i1o),e(zr,ld),e(ld,d1o),e(ld,moe),e(moe,c1o),e(ld,f1o),e(ld,goe),e(goe,m1o),e(ld,g1o),e(zr,h1o),e(zr,hoe),e(hoe,p1o),e(zr,_1o),g(XE,zr,null),e(Yo,u1o),e(Yo,$e),g(VE,$e,null),e($e,b1o),e($e,poe),e(poe,v1o),e($e,T1o),e($e,Wa),e(Wa,F1o),e(Wa,_oe),e(_oe,C1o),e(Wa,M1o),e(Wa,uoe),e(uoe,E1o),e(Wa,y1o),e(Wa,boe),e(boe,w1o),e(Wa,A1o),e($e,L1o),e($e,I),e(I,Ou),e(Ou,voe),e(voe,B1o),e(Ou,x1o),e(Ou,f$),e(f$,k1o),e(Ou,R1o),e(I,S1o),e(I,Gu),e(Gu,Toe),e(Toe,P1o),e(Gu,$1o),e(Gu,m$),e(m$,I1o),e(Gu,j1o),e(I,D1o),e(I,Xu),e(Xu,Foe),e(Foe,N1o),e(Xu,q1o),e(Xu,g$),e(g$,O1o),e(Xu,G1o),e(I,X1o),e(I,Vu),e(Vu,Coe),e(Coe,V1o),e(Vu,z1o),e(Vu,h$),e(h$,W1o),e(Vu,Q1o),e(I,H1o),e(I,zu),e(zu,Moe),e(Moe,U1o),e(zu,J1o),e(zu,p$),e(p$,Y1o),e(zu,K1o),e(I,Z1o),e(I,Wu),e(Wu,Eoe),e(Eoe,ebo),e(Wu,obo),e(Wu,_$),e(_$,rbo),e(Wu,tbo),e(I,abo),e(I,Qu),e(Qu,yoe),e(yoe,nbo),e(Qu,sbo),e(Qu,u$),e(u$,lbo),e(Qu,ibo),e(I,dbo),e(I,Hu),e(Hu,woe),e(woe,cbo),e(Hu,fbo),e(Hu,b$),e(b$,mbo),e(Hu,gbo),e(I,hbo),e(I,Uu),e(Uu,Aoe),e(Aoe,pbo),e(Uu,_bo),e(Uu,v$),e(v$,ubo),e(Uu,bbo),e(I,vbo),e(I,Ju),e(Ju,Loe),e(Loe,Tbo),e(Ju,Fbo),e(Ju,T$),e(T$,Cbo),e(Ju,Mbo),e(I,Ebo),e(I,Yu),e(Yu,Boe),e(Boe,ybo),e(Yu,wbo),e(Yu,F$),e(F$,Abo),e(Yu,Lbo),e(I,Bbo),e(I,Ku),e(Ku,xoe),e(xoe,xbo),e(Ku,kbo),e(Ku,C$),e(C$,Rbo),e(Ku,Sbo),e(I,Pbo),e(I,Zu),e(Zu,koe),e(koe,$bo),e(Zu,Ibo),e(Zu,M$),e(M$,jbo),e(Zu,Dbo),e(I,Nbo),e(I,e2),e(e2,Roe),e(Roe,qbo),e(e2,Obo),e(e2,E$),e(E$,Gbo),e(e2,Xbo),e(I,Vbo),e(I,o2),e(o2,Soe),e(Soe,zbo),e(o2,Wbo),e(o2,y$),e(y$,Qbo),e(o2,Hbo),e(I,Ubo),e(I,r2),e(r2,Poe),e(Poe,Jbo),e(r2,Ybo),e(r2,w$),e(w$,Kbo),e(r2,Zbo),e(I,e3o),e(I,t2),e(t2,$oe),e($oe,o3o),e(t2,r3o),e(t2,A$),e(A$,t3o),e(t2,a3o),e(I,n3o),e(I,a2),e(a2,Ioe),e(Ioe,s3o),e(a2,l3o),e(a2,L$),e(L$,i3o),e(a2,d3o),e(I,c3o),e(I,n2),e(n2,joe),e(joe,f3o),e(n2,m3o),e(n2,B$),e(B$,g3o),e(n2,h3o),e(I,p3o),e(I,s2),e(s2,Doe),e(Doe,_3o),e(s2,u3o),e(s2,x$),e(x$,b3o),e(s2,v3o),e(I,T3o),e(I,l2),e(l2,Noe),e(Noe,F3o),e(l2,C3o),e(l2,k$),e(k$,M3o),e(l2,E3o),e(I,y3o),e(I,i2),e(i2,qoe),e(qoe,w3o),e(i2,A3o),e(i2,R$),e(R$,L3o),e(i2,B3o),e(I,x3o),e(I,d2),e(d2,Ooe),e(Ooe,k3o),e(d2,R3o),e(d2,S$),e(S$,S3o),e(d2,P3o),e(I,$3o),e(I,c2),e(c2,Goe),e(Goe,I3o),e(c2,j3o),e(c2,P$),e(P$,D3o),e(c2,N3o),e(I,q3o),e(I,f2),e(f2,Xoe),e(Xoe,O3o),e(f2,G3o),e(f2,$$),e($$,X3o),e(f2,V3o),e(I,z3o),e(I,m2),e(m2,Voe),e(Voe,W3o),e(m2,Q3o),e(m2,I$),e(I$,H3o),e(m2,U3o),e(I,J3o),e(I,g2),e(g2,zoe),e(zoe,Y3o),e(g2,K3o),e(g2,j$),e(j$,Z3o),e(g2,e5o),e(I,o5o),e(I,h2),e(h2,Woe),e(Woe,r5o),e(h2,t5o),e(h2,D$),e(D$,a5o),e(h2,n5o),e(I,s5o),e(I,p2),e(p2,Qoe),e(Qoe,l5o),e(p2,i5o),e(p2,N$),e(N$,d5o),e(p2,c5o),e(I,f5o),e(I,_2),e(_2,Hoe),e(Hoe,m5o),e(_2,g5o),e(_2,q$),e(q$,h5o),e(_2,p5o),e(I,_5o),e(I,u2),e(u2,Uoe),e(Uoe,u5o),e(u2,b5o),e(u2,Joe),e(Joe,v5o),e(u2,T5o),e(I,F5o),e(I,b2),e(b2,Yoe),e(Yoe,C5o),e(b2,M5o),e(b2,O$),e(O$,E5o),e(b2,y5o),e(I,w5o),e(I,v2),e(v2,Koe),e(Koe,A5o),e(v2,L5o),e(v2,G$),e(G$,B5o),e(v2,x5o),e(I,k5o),e(I,T2),e(T2,Zoe),e(Zoe,R5o),e(T2,S5o),e(T2,X$),e(X$,P5o),e(T2,$5o),e(I,I5o),e(I,F2),e(F2,ere),e(ere,j5o),e(F2,D5o),e(F2,V$),e(V$,N5o),e(F2,q5o),e($e,O5o),e($e,C2),e(C2,G5o),e(C2,ore),e(ore,X5o),e(C2,V5o),e(C2,rre),e(rre,z5o),e($e,W5o),e($e,tre),e(tre,Q5o),e($e,H5o),g(zE,$e,null),b(d,zBe,u),b(d,id,u),e(id,M2),e(M2,are),g(WE,are,null),e(id,U5o),e(id,nre),e(nre,J5o),b(d,WBe,u),b(d,Ko,u),g(QE,Ko,null),e(Ko,Y5o),e(Ko,dd),e(dd,K5o),e(dd,sre),e(sre,Z5o),e(dd,evo),e(dd,lre),e(lre,ovo),e(dd,rvo),e(Ko,tvo),e(Ko,HE),e(HE,avo),e(HE,ire),e(ire,nvo),e(HE,svo),e(Ko,lvo),e(Ko,Wr),g(UE,Wr,null),e(Wr,ivo),e(Wr,dre),e(dre,dvo),e(Wr,cvo),e(Wr,cd),e(cd,fvo),e(cd,cre),e(cre,mvo),e(cd,gvo),e(cd,fre),e(fre,hvo),e(cd,pvo),e(Wr,_vo),e(Wr,mre),e(mre,uvo),e(Wr,bvo),g(JE,Wr,null),e(Ko,vvo),e(Ko,Ie),g(YE,Ie,null),e(Ie,Tvo),e(Ie,gre),e(gre,Fvo),e(Ie,Cvo),e(Ie,Qa),e(Qa,Mvo),e(Qa,hre),e(hre,Evo),e(Qa,yvo),e(Qa,pre),e(pre,wvo),e(Qa,Avo),e(Qa,_re),e(_re,Lvo),e(Qa,Bvo),e(Ie,xvo),e(Ie,ne),e(ne,E2),e(E2,ure),e(ure,kvo),e(E2,Rvo),e(E2,z$),e(z$,Svo),e(E2,Pvo),e(ne,$vo),e(ne,y2),e(y2,bre),e(bre,Ivo),e(y2,jvo),e(y2,W$),e(W$,Dvo),e(y2,Nvo),e(ne,qvo),e(ne,w2),e(w2,vre),e(vre,Ovo),e(w2,Gvo),e(w2,Q$),e(Q$,Xvo),e(w2,Vvo),e(ne,zvo),e(ne,A2),e(A2,Tre),e(Tre,Wvo),e(A2,Qvo),e(A2,H$),e(H$,Hvo),e(A2,Uvo),e(ne,Jvo),e(ne,L2),e(L2,Fre),e(Fre,Yvo),e(L2,Kvo),e(L2,U$),e(U$,Zvo),e(L2,eTo),e(ne,oTo),e(ne,B2),e(B2,Cre),e(Cre,rTo),e(B2,tTo),e(B2,J$),e(J$,aTo),e(B2,nTo),e(ne,sTo),e(ne,x2),e(x2,Mre),e(Mre,lTo),e(x2,iTo),e(x2,Y$),e(Y$,dTo),e(x2,cTo),e(ne,fTo),e(ne,k2),e(k2,Ere),e(Ere,mTo),e(k2,gTo),e(k2,K$),e(K$,hTo),e(k2,pTo),e(ne,_To),e(ne,R2),e(R2,yre),e(yre,uTo),e(R2,bTo),e(R2,Z$),e(Z$,vTo),e(R2,TTo),e(ne,FTo),e(ne,S2),e(S2,wre),e(wre,CTo),e(S2,MTo),e(S2,eI),e(eI,ETo),e(S2,yTo),e(ne,wTo),e(ne,P2),e(P2,Are),e(Are,ATo),e(P2,LTo),e(P2,oI),e(oI,BTo),e(P2,xTo),e(ne,kTo),e(ne,$2),e($2,Lre),e(Lre,RTo),e($2,STo),e($2,rI),e(rI,PTo),e($2,$To),e(ne,ITo),e(ne,I2),e(I2,Bre),e(Bre,jTo),e(I2,DTo),e(I2,tI),e(tI,NTo),e(I2,qTo),e(ne,OTo),e(ne,j2),e(j2,xre),e(xre,GTo),e(j2,XTo),e(j2,aI),e(aI,VTo),e(j2,zTo),e(ne,WTo),e(ne,D2),e(D2,kre),e(kre,QTo),e(D2,HTo),e(D2,nI),e(nI,UTo),e(D2,JTo),e(ne,YTo),e(ne,N2),e(N2,Rre),e(Rre,KTo),e(N2,ZTo),e(N2,sI),e(sI,eFo),e(N2,oFo),e(Ie,rFo),e(Ie,q2),e(q2,tFo),e(q2,Sre),e(Sre,aFo),e(q2,nFo),e(q2,Pre),e(Pre,sFo),e(Ie,lFo),e(Ie,$re),e($re,iFo),e(Ie,dFo),g(KE,Ie,null),b(d,QBe,u),b(d,fd,u),e(fd,O2),e(O2,Ire),g(ZE,Ire,null),e(fd,cFo),e(fd,jre),e(jre,fFo),b(d,HBe,u),b(d,Zo,u),g(ey,Zo,null),e(Zo,mFo),e(Zo,md),e(md,gFo),e(md,Dre),e(Dre,hFo),e(md,pFo),e(md,Nre),e(Nre,_Fo),e(md,uFo),e(Zo,bFo),e(Zo,oy),e(oy,vFo),e(oy,qre),e(qre,TFo),e(oy,FFo),e(Zo,CFo),e(Zo,Qr),g(ry,Qr,null),e(Qr,MFo),e(Qr,Ore),e(Ore,EFo),e(Qr,yFo),e(Qr,gd),e(gd,wFo),e(gd,Gre),e(Gre,AFo),e(gd,LFo),e(gd,Xre),e(Xre,BFo),e(gd,xFo),e(Qr,kFo),e(Qr,Vre),e(Vre,RFo),e(Qr,SFo),g(ty,Qr,null),e(Zo,PFo),e(Zo,je),g(ay,je,null),e(je,$Fo),e(je,zre),e(zre,IFo),e(je,jFo),e(je,Ha),e(Ha,DFo),e(Ha,Wre),e(Wre,NFo),e(Ha,qFo),e(Ha,Qre),e(Qre,OFo),e(Ha,GFo),e(Ha,Hre),e(Hre,XFo),e(Ha,VFo),e(je,zFo),e(je,A),e(A,G2),e(G2,Ure),e(Ure,WFo),e(G2,QFo),e(G2,lI),e(lI,HFo),e(G2,UFo),e(A,JFo),e(A,X2),e(X2,Jre),e(Jre,YFo),e(X2,KFo),e(X2,iI),e(iI,ZFo),e(X2,e9o),e(A,o9o),e(A,V2),e(V2,Yre),e(Yre,r9o),e(V2,t9o),e(V2,dI),e(dI,a9o),e(V2,n9o),e(A,s9o),e(A,z2),e(z2,Kre),e(Kre,l9o),e(z2,i9o),e(z2,cI),e(cI,d9o),e(z2,c9o),e(A,f9o),e(A,W2),e(W2,Zre),e(Zre,m9o),e(W2,g9o),e(W2,fI),e(fI,h9o),e(W2,p9o),e(A,_9o),e(A,Q2),e(Q2,ete),e(ete,u9o),e(Q2,b9o),e(Q2,mI),e(mI,v9o),e(Q2,T9o),e(A,F9o),e(A,H2),e(H2,ote),e(ote,C9o),e(H2,M9o),e(H2,gI),e(gI,E9o),e(H2,y9o),e(A,w9o),e(A,U2),e(U2,rte),e(rte,A9o),e(U2,L9o),e(U2,hI),e(hI,B9o),e(U2,x9o),e(A,k9o),e(A,J2),e(J2,tte),e(tte,R9o),e(J2,S9o),e(J2,pI),e(pI,P9o),e(J2,$9o),e(A,I9o),e(A,Y2),e(Y2,ate),e(ate,j9o),e(Y2,D9o),e(Y2,_I),e(_I,N9o),e(Y2,q9o),e(A,O9o),e(A,K2),e(K2,nte),e(nte,G9o),e(K2,X9o),e(K2,uI),e(uI,V9o),e(K2,z9o),e(A,W9o),e(A,Z2),e(Z2,ste),e(ste,Q9o),e(Z2,H9o),e(Z2,bI),e(bI,U9o),e(Z2,J9o),e(A,Y9o),e(A,e1),e(e1,lte),e(lte,K9o),e(e1,Z9o),e(e1,vI),e(vI,eCo),e(e1,oCo),e(A,rCo),e(A,o1),e(o1,ite),e(ite,tCo),e(o1,aCo),e(o1,TI),e(TI,nCo),e(o1,sCo),e(A,lCo),e(A,r1),e(r1,dte),e(dte,iCo),e(r1,dCo),e(r1,FI),e(FI,cCo),e(r1,fCo),e(A,mCo),e(A,t1),e(t1,cte),e(cte,gCo),e(t1,hCo),e(t1,CI),e(CI,pCo),e(t1,_Co),e(A,uCo),e(A,a1),e(a1,fte),e(fte,bCo),e(a1,vCo),e(a1,MI),e(MI,TCo),e(a1,FCo),e(A,CCo),e(A,n1),e(n1,mte),e(mte,MCo),e(n1,ECo),e(n1,EI),e(EI,yCo),e(n1,wCo),e(A,ACo),e(A,s1),e(s1,gte),e(gte,LCo),e(s1,BCo),e(s1,yI),e(yI,xCo),e(s1,kCo),e(A,RCo),e(A,l1),e(l1,hte),e(hte,SCo),e(l1,PCo),e(l1,wI),e(wI,$Co),e(l1,ICo),e(A,jCo),e(A,i1),e(i1,pte),e(pte,DCo),e(i1,NCo),e(i1,AI),e(AI,qCo),e(i1,OCo),e(A,GCo),e(A,d1),e(d1,_te),e(_te,XCo),e(d1,VCo),e(d1,LI),e(LI,zCo),e(d1,WCo),e(A,QCo),e(A,c1),e(c1,ute),e(ute,HCo),e(c1,UCo),e(c1,BI),e(BI,JCo),e(c1,YCo),e(A,KCo),e(A,f1),e(f1,bte),e(bte,ZCo),e(f1,e4o),e(f1,xI),e(xI,o4o),e(f1,r4o),e(A,t4o),e(A,m1),e(m1,vte),e(vte,a4o),e(m1,n4o),e(m1,kI),e(kI,s4o),e(m1,l4o),e(A,i4o),e(A,g1),e(g1,Tte),e(Tte,d4o),e(g1,c4o),e(g1,RI),e(RI,f4o),e(g1,m4o),e(A,g4o),e(A,h1),e(h1,Fte),e(Fte,h4o),e(h1,p4o),e(h1,SI),e(SI,_4o),e(h1,u4o),e(A,b4o),e(A,p1),e(p1,Cte),e(Cte,v4o),e(p1,T4o),e(p1,PI),e(PI,F4o),e(p1,C4o),e(A,M4o),e(A,_1),e(_1,Mte),e(Mte,E4o),e(_1,y4o),e(_1,$I),e($I,w4o),e(_1,A4o),e(A,L4o),e(A,u1),e(u1,Ete),e(Ete,B4o),e(u1,x4o),e(u1,II),e(II,k4o),e(u1,R4o),e(A,S4o),e(A,b1),e(b1,yte),e(yte,P4o),e(b1,$4o),e(b1,jI),e(jI,I4o),e(b1,j4o),e(A,D4o),e(A,v1),e(v1,wte),e(wte,N4o),e(v1,q4o),e(v1,DI),e(DI,O4o),e(v1,G4o),e(A,X4o),e(A,T1),e(T1,Ate),e(Ate,V4o),e(T1,z4o),e(T1,NI),e(NI,W4o),e(T1,Q4o),e(A,H4o),e(A,F1),e(F1,Lte),e(Lte,U4o),e(F1,J4o),e(F1,qI),e(qI,Y4o),e(F1,K4o),e(A,Z4o),e(A,C1),e(C1,Bte),e(Bte,eMo),e(C1,oMo),e(C1,OI),e(OI,rMo),e(C1,tMo),e(A,aMo),e(A,M1),e(M1,xte),e(xte,nMo),e(M1,sMo),e(M1,GI),e(GI,lMo),e(M1,iMo),e(A,dMo),e(A,E1),e(E1,kte),e(kte,cMo),e(E1,fMo),e(E1,XI),e(XI,mMo),e(E1,gMo),e(A,hMo),e(A,y1),e(y1,Rte),e(Rte,pMo),e(y1,_Mo),e(y1,VI),e(VI,uMo),e(y1,bMo),e(A,vMo),e(A,w1),e(w1,Ste),e(Ste,TMo),e(w1,FMo),e(w1,zI),e(zI,CMo),e(w1,MMo),e(A,EMo),e(A,A1),e(A1,Pte),e(Pte,yMo),e(A1,wMo),e(A1,WI),e(WI,AMo),e(A1,LMo),e(A,BMo),e(A,L1),e(L1,$te),e($te,xMo),e(L1,kMo),e(L1,QI),e(QI,RMo),e(L1,SMo),e(A,PMo),e(A,B1),e(B1,Ite),e(Ite,$Mo),e(B1,IMo),e(B1,HI),e(HI,jMo),e(B1,DMo),e(A,NMo),e(A,x1),e(x1,jte),e(jte,qMo),e(x1,OMo),e(x1,UI),e(UI,GMo),e(x1,XMo),e(A,VMo),e(A,k1),e(k1,Dte),e(Dte,zMo),e(k1,WMo),e(k1,JI),e(JI,QMo),e(k1,HMo),e(A,UMo),e(A,R1),e(R1,Nte),e(Nte,JMo),e(R1,YMo),e(R1,YI),e(YI,KMo),e(R1,ZMo),e(A,eEo),e(A,S1),e(S1,qte),e(qte,oEo),e(S1,rEo),e(S1,KI),e(KI,tEo),e(S1,aEo),e(je,nEo),e(je,P1),e(P1,sEo),e(P1,Ote),e(Ote,lEo),e(P1,iEo),e(P1,Gte),e(Gte,dEo),e(je,cEo),e(je,Xte),e(Xte,fEo),e(je,mEo),g(ny,je,null),b(d,UBe,u),b(d,hd,u),e(hd,$1),e($1,Vte),g(sy,Vte,null),e(hd,gEo),e(hd,zte),e(zte,hEo),b(d,JBe,u),b(d,er,u),g(ly,er,null),e(er,pEo),e(er,pd),e(pd,_Eo),e(pd,Wte),e(Wte,uEo),e(pd,bEo),e(pd,Qte),e(Qte,vEo),e(pd,TEo),e(er,FEo),e(er,iy),e(iy,CEo),e(iy,Hte),e(Hte,MEo),e(iy,EEo),e(er,yEo),e(er,Hr),g(dy,Hr,null),e(Hr,wEo),e(Hr,Ute),e(Ute,AEo),e(Hr,LEo),e(Hr,_d),e(_d,BEo),e(_d,Jte),e(Jte,xEo),e(_d,kEo),e(_d,Yte),e(Yte,REo),e(_d,SEo),e(Hr,PEo),e(Hr,Kte),e(Kte,$Eo),e(Hr,IEo),g(cy,Hr,null),e(er,jEo),e(er,De),g(fy,De,null),e(De,DEo),e(De,Zte),e(Zte,NEo),e(De,qEo),e(De,Ua),e(Ua,OEo),e(Ua,eae),e(eae,GEo),e(Ua,XEo),e(Ua,oae),e(oae,VEo),e(Ua,zEo),e(Ua,rae),e(rae,WEo),e(Ua,QEo),e(De,HEo),e(De,O),e(O,I1),e(I1,tae),e(tae,UEo),e(I1,JEo),e(I1,ZI),e(ZI,YEo),e(I1,KEo),e(O,ZEo),e(O,j1),e(j1,aae),e(aae,eyo),e(j1,oyo),e(j1,ej),e(ej,ryo),e(j1,tyo),e(O,ayo),e(O,D1),e(D1,nae),e(nae,nyo),e(D1,syo),e(D1,oj),e(oj,lyo),e(D1,iyo),e(O,dyo),e(O,N1),e(N1,sae),e(sae,cyo),e(N1,fyo),e(N1,rj),e(rj,myo),e(N1,gyo),e(O,hyo),e(O,q1),e(q1,lae),e(lae,pyo),e(q1,_yo),e(q1,tj),e(tj,uyo),e(q1,byo),e(O,vyo),e(O,O1),e(O1,iae),e(iae,Tyo),e(O1,Fyo),e(O1,aj),e(aj,Cyo),e(O1,Myo),e(O,Eyo),e(O,G1),e(G1,dae),e(dae,yyo),e(G1,wyo),e(G1,nj),e(nj,Ayo),e(G1,Lyo),e(O,Byo),e(O,X1),e(X1,cae),e(cae,xyo),e(X1,kyo),e(X1,sj),e(sj,Ryo),e(X1,Syo),e(O,Pyo),e(O,V1),e(V1,fae),e(fae,$yo),e(V1,Iyo),e(V1,lj),e(lj,jyo),e(V1,Dyo),e(O,Nyo),e(O,z1),e(z1,mae),e(mae,qyo),e(z1,Oyo),e(z1,ij),e(ij,Gyo),e(z1,Xyo),e(O,Vyo),e(O,W1),e(W1,gae),e(gae,zyo),e(W1,Wyo),e(W1,dj),e(dj,Qyo),e(W1,Hyo),e(O,Uyo),e(O,Q1),e(Q1,hae),e(hae,Jyo),e(Q1,Yyo),e(Q1,cj),e(cj,Kyo),e(Q1,Zyo),e(O,ewo),e(O,H1),e(H1,pae),e(pae,owo),e(H1,rwo),e(H1,fj),e(fj,two),e(H1,awo),e(O,nwo),e(O,U1),e(U1,_ae),e(_ae,swo),e(U1,lwo),e(U1,mj),e(mj,iwo),e(U1,dwo),e(O,cwo),e(O,J1),e(J1,uae),e(uae,fwo),e(J1,mwo),e(J1,gj),e(gj,gwo),e(J1,hwo),e(O,pwo),e(O,Y1),e(Y1,bae),e(bae,_wo),e(Y1,uwo),e(Y1,hj),e(hj,bwo),e(Y1,vwo),e(O,Two),e(O,K1),e(K1,vae),e(vae,Fwo),e(K1,Cwo),e(K1,pj),e(pj,Mwo),e(K1,Ewo),e(O,ywo),e(O,Z1),e(Z1,Tae),e(Tae,wwo),e(Z1,Awo),e(Z1,_j),e(_j,Lwo),e(Z1,Bwo),e(O,xwo),e(O,eb),e(eb,Fae),e(Fae,kwo),e(eb,Rwo),e(eb,uj),e(uj,Swo),e(eb,Pwo),e(O,$wo),e(O,ob),e(ob,Cae),e(Cae,Iwo),e(ob,jwo),e(ob,bj),e(bj,Dwo),e(ob,Nwo),e(O,qwo),e(O,rb),e(rb,Mae),e(Mae,Owo),e(rb,Gwo),e(rb,vj),e(vj,Xwo),e(rb,Vwo),e(O,zwo),e(O,tb),e(tb,Eae),e(Eae,Wwo),e(tb,Qwo),e(tb,Tj),e(Tj,Hwo),e(tb,Uwo),e(O,Jwo),e(O,ab),e(ab,yae),e(yae,Ywo),e(ab,Kwo),e(ab,Fj),e(Fj,Zwo),e(ab,e6o),e(O,o6o),e(O,nb),e(nb,wae),e(wae,r6o),e(nb,t6o),e(nb,Cj),e(Cj,a6o),e(nb,n6o),e(O,s6o),e(O,sb),e(sb,Aae),e(Aae,l6o),e(sb,i6o),e(sb,Mj),e(Mj,d6o),e(sb,c6o),e(O,f6o),e(O,lb),e(lb,Lae),e(Lae,m6o),e(lb,g6o),e(lb,Ej),e(Ej,h6o),e(lb,p6o),e(O,_6o),e(O,ib),e(ib,Bae),e(Bae,u6o),e(ib,b6o),e(ib,yj),e(yj,v6o),e(ib,T6o),e(O,F6o),e(O,db),e(db,xae),e(xae,C6o),e(db,M6o),e(db,wj),e(wj,E6o),e(db,y6o),e(De,w6o),e(De,cb),e(cb,A6o),e(cb,kae),e(kae,L6o),e(cb,B6o),e(cb,Rae),e(Rae,x6o),e(De,k6o),e(De,Sae),e(Sae,R6o),e(De,S6o),g(my,De,null),b(d,YBe,u),b(d,ud,u),e(ud,fb),e(fb,Pae),g(gy,Pae,null),e(ud,P6o),e(ud,$ae),e($ae,$6o),b(d,KBe,u),b(d,or,u),g(hy,or,null),e(or,I6o),e(or,bd),e(bd,j6o),e(bd,Iae),e(Iae,D6o),e(bd,N6o),e(bd,jae),e(jae,q6o),e(bd,O6o),e(or,G6o),e(or,py),e(py,X6o),e(py,Dae),e(Dae,V6o),e(py,z6o),e(or,W6o),e(or,Ur),g(_y,Ur,null),e(Ur,Q6o),e(Ur,Nae),e(Nae,H6o),e(Ur,U6o),e(Ur,vd),e(vd,J6o),e(vd,qae),e(qae,Y6o),e(vd,K6o),e(vd,Oae),e(Oae,Z6o),e(vd,eAo),e(Ur,oAo),e(Ur,Gae),e(Gae,rAo),e(Ur,tAo),g(uy,Ur,null),e(or,aAo),e(or,Ne),g(by,Ne,null),e(Ne,nAo),e(Ne,Xae),e(Xae,sAo),e(Ne,lAo),e(Ne,Ja),e(Ja,iAo),e(Ja,Vae),e(Vae,dAo),e(Ja,cAo),e(Ja,zae),e(zae,fAo),e(Ja,mAo),e(Ja,Wae),e(Wae,gAo),e(Ja,hAo),e(Ne,pAo),e(Ne,da),e(da,mb),e(mb,Qae),e(Qae,_Ao),e(mb,uAo),e(mb,Aj),e(Aj,bAo),e(mb,vAo),e(da,TAo),e(da,gb),e(gb,Hae),e(Hae,FAo),e(gb,CAo),e(gb,Lj),e(Lj,MAo),e(gb,EAo),e(da,yAo),e(da,hb),e(hb,Uae),e(Uae,wAo),e(hb,AAo),e(hb,Bj),e(Bj,LAo),e(hb,BAo),e(da,xAo),e(da,pb),e(pb,Jae),e(Jae,kAo),e(pb,RAo),e(pb,xj),e(xj,SAo),e(pb,PAo),e(da,$Ao),e(da,_b),e(_b,Yae),e(Yae,IAo),e(_b,jAo),e(_b,kj),e(kj,DAo),e(_b,NAo),e(Ne,qAo),e(Ne,ub),e(ub,OAo),e(ub,Kae),e(Kae,GAo),e(ub,XAo),e(ub,Zae),e(Zae,VAo),e(Ne,zAo),e(Ne,ene),e(ene,WAo),e(Ne,QAo),g(vy,Ne,null),b(d,ZBe,u),b(d,Td,u),e(Td,bb),e(bb,one),g(Ty,one,null),e(Td,HAo),e(Td,rne),e(rne,UAo),b(d,exe,u),b(d,rr,u),g(Fy,rr,null),e(rr,JAo),e(rr,Fd),e(Fd,YAo),e(Fd,tne),e(tne,KAo),e(Fd,ZAo),e(Fd,ane),e(ane,e0o),e(Fd,o0o),e(rr,r0o),e(rr,Cy),e(Cy,t0o),e(Cy,nne),e(nne,a0o),e(Cy,n0o),e(rr,s0o),e(rr,Jr),g(My,Jr,null),e(Jr,l0o),e(Jr,sne),e(sne,i0o),e(Jr,d0o),e(Jr,Cd),e(Cd,c0o),e(Cd,lne),e(lne,f0o),e(Cd,m0o),e(Cd,ine),e(ine,g0o),e(Cd,h0o),e(Jr,p0o),e(Jr,dne),e(dne,_0o),e(Jr,u0o),g(Ey,Jr,null),e(rr,b0o),e(rr,qe),g(yy,qe,null),e(qe,v0o),e(qe,cne),e(cne,T0o),e(qe,F0o),e(qe,Ya),e(Ya,C0o),e(Ya,fne),e(fne,M0o),e(Ya,E0o),e(Ya,mne),e(mne,y0o),e(Ya,w0o),e(Ya,gne),e(gne,A0o),e(Ya,L0o),e(qe,B0o),e(qe,N),e(N,vb),e(vb,hne),e(hne,x0o),e(vb,k0o),e(vb,Rj),e(Rj,R0o),e(vb,S0o),e(N,P0o),e(N,Tb),e(Tb,pne),e(pne,$0o),e(Tb,I0o),e(Tb,Sj),e(Sj,j0o),e(Tb,D0o),e(N,N0o),e(N,Fb),e(Fb,_ne),e(_ne,q0o),e(Fb,O0o),e(Fb,Pj),e(Pj,G0o),e(Fb,X0o),e(N,V0o),e(N,Cb),e(Cb,une),e(une,z0o),e(Cb,W0o),e(Cb,$j),e($j,Q0o),e(Cb,H0o),e(N,U0o),e(N,Mb),e(Mb,bne),e(bne,J0o),e(Mb,Y0o),e(Mb,Ij),e(Ij,K0o),e(Mb,Z0o),e(N,eLo),e(N,Eb),e(Eb,vne),e(vne,oLo),e(Eb,rLo),e(Eb,jj),e(jj,tLo),e(Eb,aLo),e(N,nLo),e(N,yb),e(yb,Tne),e(Tne,sLo),e(yb,lLo),e(yb,Dj),e(Dj,iLo),e(yb,dLo),e(N,cLo),e(N,wb),e(wb,Fne),e(Fne,fLo),e(wb,mLo),e(wb,Nj),e(Nj,gLo),e(wb,hLo),e(N,pLo),e(N,Ab),e(Ab,Cne),e(Cne,_Lo),e(Ab,uLo),e(Ab,qj),e(qj,bLo),e(Ab,vLo),e(N,TLo),e(N,Lb),e(Lb,Mne),e(Mne,FLo),e(Lb,CLo),e(Lb,Oj),e(Oj,MLo),e(Lb,ELo),e(N,yLo),e(N,Bb),e(Bb,Ene),e(Ene,wLo),e(Bb,ALo),e(Bb,Gj),e(Gj,LLo),e(Bb,BLo),e(N,xLo),e(N,xb),e(xb,yne),e(yne,kLo),e(xb,RLo),e(xb,Xj),e(Xj,SLo),e(xb,PLo),e(N,$Lo),e(N,kb),e(kb,wne),e(wne,ILo),e(kb,jLo),e(kb,Vj),e(Vj,DLo),e(kb,NLo),e(N,qLo),e(N,Rb),e(Rb,Ane),e(Ane,OLo),e(Rb,GLo),e(Rb,zj),e(zj,XLo),e(Rb,VLo),e(N,zLo),e(N,Sb),e(Sb,Lne),e(Lne,WLo),e(Sb,QLo),e(Sb,Wj),e(Wj,HLo),e(Sb,ULo),e(N,JLo),e(N,Pb),e(Pb,Bne),e(Bne,YLo),e(Pb,KLo),e(Pb,Qj),e(Qj,ZLo),e(Pb,e8o),e(N,o8o),e(N,$b),e($b,xne),e(xne,r8o),e($b,t8o),e($b,Hj),e(Hj,a8o),e($b,n8o),e(N,s8o),e(N,Ib),e(Ib,kne),e(kne,l8o),e(Ib,i8o),e(Ib,Uj),e(Uj,d8o),e(Ib,c8o),e(N,f8o),e(N,jb),e(jb,Rne),e(Rne,m8o),e(jb,g8o),e(jb,Jj),e(Jj,h8o),e(jb,p8o),e(N,_8o),e(N,Db),e(Db,Sne),e(Sne,u8o),e(Db,b8o),e(Db,Yj),e(Yj,v8o),e(Db,T8o),e(N,F8o),e(N,Nb),e(Nb,Pne),e(Pne,C8o),e(Nb,M8o),e(Nb,Kj),e(Kj,E8o),e(Nb,y8o),e(N,w8o),e(N,qb),e(qb,$ne),e($ne,A8o),e(qb,L8o),e(qb,Zj),e(Zj,B8o),e(qb,x8o),e(N,k8o),e(N,Ob),e(Ob,Ine),e(Ine,R8o),e(Ob,S8o),e(Ob,eD),e(eD,P8o),e(Ob,$8o),e(N,I8o),e(N,Gb),e(Gb,jne),e(jne,j8o),e(Gb,D8o),e(Gb,oD),e(oD,N8o),e(Gb,q8o),e(N,O8o),e(N,Xb),e(Xb,Dne),e(Dne,G8o),e(Xb,X8o),e(Xb,rD),e(rD,V8o),e(Xb,z8o),e(N,W8o),e(N,Vb),e(Vb,Nne),e(Nne,Q8o),e(Vb,H8o),e(Vb,tD),e(tD,U8o),e(Vb,J8o),e(N,Y8o),e(N,zb),e(zb,qne),e(qne,K8o),e(zb,Z8o),e(zb,aD),e(aD,e7o),e(zb,o7o),e(N,r7o),e(N,Wb),e(Wb,One),e(One,t7o),e(Wb,a7o),e(Wb,nD),e(nD,n7o),e(Wb,s7o),e(N,l7o),e(N,Qb),e(Qb,Gne),e(Gne,i7o),e(Qb,d7o),e(Qb,sD),e(sD,c7o),e(Qb,f7o),e(N,m7o),e(N,Hb),e(Hb,Xne),e(Xne,g7o),e(Hb,h7o),e(Hb,lD),e(lD,p7o),e(Hb,_7o),e(N,u7o),e(N,Ub),e(Ub,Vne),e(Vne,b7o),e(Ub,v7o),e(Ub,iD),e(iD,T7o),e(Ub,F7o),e(N,C7o),e(N,Jb),e(Jb,zne),e(zne,M7o),e(Jb,E7o),e(Jb,dD),e(dD,y7o),e(Jb,w7o),e(N,A7o),e(N,Yb),e(Yb,Wne),e(Wne,L7o),e(Yb,B7o),e(Yb,cD),e(cD,x7o),e(Yb,k7o),e(qe,R7o),e(qe,Kb),e(Kb,S7o),e(Kb,Qne),e(Qne,P7o),e(Kb,$7o),e(Kb,Hne),e(Hne,I7o),e(qe,j7o),e(qe,Une),e(Une,D7o),e(qe,N7o),g(wy,qe,null),b(d,oxe,u),b(d,Md,u),e(Md,Zb),e(Zb,Jne),g(Ay,Jne,null),e(Md,q7o),e(Md,Yne),e(Yne,O7o),b(d,rxe,u),b(d,tr,u),g(Ly,tr,null),e(tr,G7o),e(tr,Ed),e(Ed,X7o),e(Ed,Kne),e(Kne,V7o),e(Ed,z7o),e(Ed,Zne),e(Zne,W7o),e(Ed,Q7o),e(tr,H7o),e(tr,By),e(By,U7o),e(By,ese),e(ese,J7o),e(By,Y7o),e(tr,K7o),e(tr,Yr),g(xy,Yr,null),e(Yr,Z7o),e(Yr,ose),e(ose,eBo),e(Yr,oBo),e(Yr,yd),e(yd,rBo),e(yd,rse),e(rse,tBo),e(yd,aBo),e(yd,tse),e(tse,nBo),e(yd,sBo),e(Yr,lBo),e(Yr,ase),e(ase,iBo),e(Yr,dBo),g(ky,Yr,null),e(tr,cBo),e(tr,Oe),g(Ry,Oe,null),e(Oe,fBo),e(Oe,nse),e(nse,mBo),e(Oe,gBo),e(Oe,Ka),e(Ka,hBo),e(Ka,sse),e(sse,pBo),e(Ka,_Bo),e(Ka,lse),e(lse,uBo),e(Ka,bBo),e(Ka,ise),e(ise,vBo),e(Ka,TBo),e(Oe,FBo),e(Oe,R),e(R,e3),e(e3,dse),e(dse,CBo),e(e3,MBo),e(e3,fD),e(fD,EBo),e(e3,yBo),e(R,wBo),e(R,o3),e(o3,cse),e(cse,ABo),e(o3,LBo),e(o3,mD),e(mD,BBo),e(o3,xBo),e(R,kBo),e(R,r3),e(r3,fse),e(fse,RBo),e(r3,SBo),e(r3,gD),e(gD,PBo),e(r3,$Bo),e(R,IBo),e(R,t3),e(t3,mse),e(mse,jBo),e(t3,DBo),e(t3,hD),e(hD,NBo),e(t3,qBo),e(R,OBo),e(R,a3),e(a3,gse),e(gse,GBo),e(a3,XBo),e(a3,pD),e(pD,VBo),e(a3,zBo),e(R,WBo),e(R,n3),e(n3,hse),e(hse,QBo),e(n3,HBo),e(n3,_D),e(_D,UBo),e(n3,JBo),e(R,YBo),e(R,s3),e(s3,pse),e(pse,KBo),e(s3,ZBo),e(s3,uD),e(uD,exo),e(s3,oxo),e(R,rxo),e(R,l3),e(l3,_se),e(_se,txo),e(l3,axo),e(l3,bD),e(bD,nxo),e(l3,sxo),e(R,lxo),e(R,i3),e(i3,use),e(use,ixo),e(i3,dxo),e(i3,vD),e(vD,cxo),e(i3,fxo),e(R,mxo),e(R,d3),e(d3,bse),e(bse,gxo),e(d3,hxo),e(d3,TD),e(TD,pxo),e(d3,_xo),e(R,uxo),e(R,c3),e(c3,vse),e(vse,bxo),e(c3,vxo),e(c3,FD),e(FD,Txo),e(c3,Fxo),e(R,Cxo),e(R,f3),e(f3,Tse),e(Tse,Mxo),e(f3,Exo),e(f3,CD),e(CD,yxo),e(f3,wxo),e(R,Axo),e(R,m3),e(m3,Fse),e(Fse,Lxo),e(m3,Bxo),e(m3,MD),e(MD,xxo),e(m3,kxo),e(R,Rxo),e(R,g3),e(g3,Cse),e(Cse,Sxo),e(g3,Pxo),e(g3,ED),e(ED,$xo),e(g3,Ixo),e(R,jxo),e(R,h3),e(h3,Mse),e(Mse,Dxo),e(h3,Nxo),e(h3,yD),e(yD,qxo),e(h3,Oxo),e(R,Gxo),e(R,p3),e(p3,Ese),e(Ese,Xxo),e(p3,Vxo),e(p3,wD),e(wD,zxo),e(p3,Wxo),e(R,Qxo),e(R,_3),e(_3,yse),e(yse,Hxo),e(_3,Uxo),e(_3,AD),e(AD,Jxo),e(_3,Yxo),e(R,Kxo),e(R,u3),e(u3,wse),e(wse,Zxo),e(u3,eko),e(u3,LD),e(LD,oko),e(u3,rko),e(R,tko),e(R,b3),e(b3,Ase),e(Ase,ako),e(b3,nko),e(b3,BD),e(BD,sko),e(b3,lko),e(R,iko),e(R,v3),e(v3,Lse),e(Lse,dko),e(v3,cko),e(v3,xD),e(xD,fko),e(v3,mko),e(R,gko),e(R,T3),e(T3,Bse),e(Bse,hko),e(T3,pko),e(T3,kD),e(kD,_ko),e(T3,uko),e(R,bko),e(R,F3),e(F3,xse),e(xse,vko),e(F3,Tko),e(F3,RD),e(RD,Fko),e(F3,Cko),e(R,Mko),e(R,C3),e(C3,kse),e(kse,Eko),e(C3,yko),e(C3,SD),e(SD,wko),e(C3,Ako),e(R,Lko),e(R,M3),e(M3,Rse),e(Rse,Bko),e(M3,xko),e(M3,PD),e(PD,kko),e(M3,Rko),e(R,Sko),e(R,E3),e(E3,Sse),e(Sse,Pko),e(E3,$ko),e(E3,$D),e($D,Iko),e(E3,jko),e(R,Dko),e(R,y3),e(y3,Pse),e(Pse,Nko),e(y3,qko),e(y3,ID),e(ID,Oko),e(y3,Gko),e(R,Xko),e(R,w3),e(w3,$se),e($se,Vko),e(w3,zko),e(w3,jD),e(jD,Wko),e(w3,Qko),e(R,Hko),e(R,A3),e(A3,Ise),e(Ise,Uko),e(A3,Jko),e(A3,DD),e(DD,Yko),e(A3,Kko),e(R,Zko),e(R,L3),e(L3,jse),e(jse,eRo),e(L3,oRo),e(L3,ND),e(ND,rRo),e(L3,tRo),e(R,aRo),e(R,B3),e(B3,Dse),e(Dse,nRo),e(B3,sRo),e(B3,qD),e(qD,lRo),e(B3,iRo),e(R,dRo),e(R,x3),e(x3,Nse),e(Nse,cRo),e(x3,fRo),e(x3,OD),e(OD,mRo),e(x3,gRo),e(R,hRo),e(R,k3),e(k3,qse),e(qse,pRo),e(k3,_Ro),e(k3,GD),e(GD,uRo),e(k3,bRo),e(R,vRo),e(R,R3),e(R3,Ose),e(Ose,TRo),e(R3,FRo),e(R3,XD),e(XD,CRo),e(R3,MRo),e(R,ERo),e(R,S3),e(S3,Gse),e(Gse,yRo),e(S3,wRo),e(S3,VD),e(VD,ARo),e(S3,LRo),e(R,BRo),e(R,P3),e(P3,Xse),e(Xse,xRo),e(P3,kRo),e(P3,zD),e(zD,RRo),e(P3,SRo),e(R,PRo),e(R,$3),e($3,Vse),e(Vse,$Ro),e($3,IRo),e($3,WD),e(WD,jRo),e($3,DRo),e(R,NRo),e(R,I3),e(I3,zse),e(zse,qRo),e(I3,ORo),e(I3,QD),e(QD,GRo),e(I3,XRo),e(R,VRo),e(R,j3),e(j3,Wse),e(Wse,zRo),e(j3,WRo),e(j3,HD),e(HD,QRo),e(j3,HRo),e(R,URo),e(R,D3),e(D3,Qse),e(Qse,JRo),e(D3,YRo),e(D3,UD),e(UD,KRo),e(D3,ZRo),e(Oe,eSo),e(Oe,N3),e(N3,oSo),e(N3,Hse),e(Hse,rSo),e(N3,tSo),e(N3,Use),e(Use,aSo),e(Oe,nSo),e(Oe,Jse),e(Jse,sSo),e(Oe,lSo),g(Sy,Oe,null),b(d,txe,u),b(d,wd,u),e(wd,q3),e(q3,Yse),g(Py,Yse,null),e(wd,iSo),e(wd,Kse),e(Kse,dSo),b(d,axe,u),b(d,ar,u),g($y,ar,null),e(ar,cSo),e(ar,Ad),e(Ad,fSo),e(Ad,Zse),e(Zse,mSo),e(Ad,gSo),e(Ad,ele),e(ele,hSo),e(Ad,pSo),e(ar,_So),e(ar,Iy),e(Iy,uSo),e(Iy,ole),e(ole,bSo),e(Iy,vSo),e(ar,TSo),e(ar,Kr),g(jy,Kr,null),e(Kr,FSo),e(Kr,rle),e(rle,CSo),e(Kr,MSo),e(Kr,Ld),e(Ld,ESo),e(Ld,tle),e(tle,ySo),e(Ld,wSo),e(Ld,ale),e(ale,ASo),e(Ld,LSo),e(Kr,BSo),e(Kr,nle),e(nle,xSo),e(Kr,kSo),g(Dy,Kr,null),e(ar,RSo),e(ar,Ge),g(Ny,Ge,null),e(Ge,SSo),e(Ge,sle),e(sle,PSo),e(Ge,$So),e(Ge,Za),e(Za,ISo),e(Za,lle),e(lle,jSo),e(Za,DSo),e(Za,ile),e(ile,NSo),e(Za,qSo),e(Za,dle),e(dle,OSo),e(Za,GSo),e(Ge,XSo),e(Ge,cle),e(cle,O3),e(O3,fle),e(fle,VSo),e(O3,zSo),e(O3,JD),e(JD,WSo),e(O3,QSo),e(Ge,HSo),e(Ge,G3),e(G3,USo),e(G3,mle),e(mle,JSo),e(G3,YSo),e(G3,gle),e(gle,KSo),e(Ge,ZSo),e(Ge,hle),e(hle,ePo),e(Ge,oPo),g(qy,Ge,null),b(d,nxe,u),b(d,Bd,u),e(Bd,X3),e(X3,ple),g(Oy,ple,null),e(Bd,rPo),e(Bd,_le),e(_le,tPo),b(d,sxe,u),b(d,nr,u),g(Gy,nr,null),e(nr,aPo),e(nr,xd),e(xd,nPo),e(xd,ule),e(ule,sPo),e(xd,lPo),e(xd,ble),e(ble,iPo),e(xd,dPo),e(nr,cPo),e(nr,Xy),e(Xy,fPo),e(Xy,vle),e(vle,mPo),e(Xy,gPo),e(nr,hPo),e(nr,Zr),g(Vy,Zr,null),e(Zr,pPo),e(Zr,Tle),e(Tle,_Po),e(Zr,uPo),e(Zr,kd),e(kd,bPo),e(kd,Fle),e(Fle,vPo),e(kd,TPo),e(kd,Cle),e(Cle,FPo),e(kd,CPo),e(Zr,MPo),e(Zr,Mle),e(Mle,EPo),e(Zr,yPo),g(zy,Zr,null),e(nr,wPo),e(nr,Xe),g(Wy,Xe,null),e(Xe,APo),e(Xe,Ele),e(Ele,LPo),e(Xe,BPo),e(Xe,en),e(en,xPo),e(en,yle),e(yle,kPo),e(en,RPo),e(en,wle),e(wle,SPo),e(en,PPo),e(en,Ale),e(Ale,$Po),e(en,IPo),e(Xe,jPo),e(Xe,be),e(be,V3),e(V3,Lle),e(Lle,DPo),e(V3,NPo),e(V3,YD),e(YD,qPo),e(V3,OPo),e(be,GPo),e(be,z3),e(z3,Ble),e(Ble,XPo),e(z3,VPo),e(z3,KD),e(KD,zPo),e(z3,WPo),e(be,QPo),e(be,qs),e(qs,xle),e(xle,HPo),e(qs,UPo),e(qs,ZD),e(ZD,JPo),e(qs,YPo),e(qs,eN),e(eN,KPo),e(qs,ZPo),e(be,e$o),e(be,W3),e(W3,kle),e(kle,o$o),e(W3,r$o),e(W3,oN),e(oN,t$o),e(W3,a$o),e(be,n$o),e(be,fa),e(fa,Rle),e(Rle,s$o),e(fa,l$o),e(fa,rN),e(rN,i$o),e(fa,d$o),e(fa,tN),e(tN,c$o),e(fa,f$o),e(fa,aN),e(aN,m$o),e(fa,g$o),e(be,h$o),e(be,Q3),e(Q3,Sle),e(Sle,p$o),e(Q3,_$o),e(Q3,nN),e(nN,u$o),e(Q3,b$o),e(be,v$o),e(be,H3),e(H3,Ple),e(Ple,T$o),e(H3,F$o),e(H3,sN),e(sN,C$o),e(H3,M$o),e(be,E$o),e(be,U3),e(U3,$le),e($le,y$o),e(U3,w$o),e(U3,lN),e(lN,A$o),e(U3,L$o),e(be,B$o),e(be,J3),e(J3,Ile),e(Ile,x$o),e(J3,k$o),e(J3,iN),e(iN,R$o),e(J3,S$o),e(Xe,P$o),e(Xe,Y3),e(Y3,$$o),e(Y3,jle),e(jle,I$o),e(Y3,j$o),e(Y3,Dle),e(Dle,D$o),e(Xe,N$o),e(Xe,Nle),e(Nle,q$o),e(Xe,O$o),g(Qy,Xe,null),b(d,lxe,u),b(d,Rd,u),e(Rd,K3),e(K3,qle),g(Hy,qle,null),e(Rd,G$o),e(Rd,Ole),e(Ole,X$o),b(d,ixe,u),b(d,sr,u),g(Uy,sr,null),e(sr,V$o),e(sr,Sd),e(Sd,z$o),e(Sd,Gle),e(Gle,W$o),e(Sd,Q$o),e(Sd,Xle),e(Xle,H$o),e(Sd,U$o),e(sr,J$o),e(sr,Jy),e(Jy,Y$o),e(Jy,Vle),e(Vle,K$o),e(Jy,Z$o),e(sr,eIo),e(sr,et),g(Yy,et,null),e(et,oIo),e(et,zle),e(zle,rIo),e(et,tIo),e(et,Pd),e(Pd,aIo),e(Pd,Wle),e(Wle,nIo),e(Pd,sIo),e(Pd,Qle),e(Qle,lIo),e(Pd,iIo),e(et,dIo),e(et,Hle),e(Hle,cIo),e(et,fIo),g(Ky,et,null),e(sr,mIo),e(sr,Ve),g(Zy,Ve,null),e(Ve,gIo),e(Ve,Ule),e(Ule,hIo),e(Ve,pIo),e(Ve,on),e(on,_Io),e(on,Jle),e(Jle,uIo),e(on,bIo),e(on,Yle),e(Yle,vIo),e(on,TIo),e(on,Kle),e(Kle,FIo),e(on,CIo),e(Ve,MIo),e(Ve,Zle),e(Zle,Z3),e(Z3,eie),e(eie,EIo),e(Z3,yIo),e(Z3,dN),e(dN,wIo),e(Z3,AIo),e(Ve,LIo),e(Ve,e5),e(e5,BIo),e(e5,oie),e(oie,xIo),e(e5,kIo),e(e5,rie),e(rie,RIo),e(Ve,SIo),e(Ve,tie),e(tie,PIo),e(Ve,$Io),g(ew,Ve,null),b(d,dxe,u),b(d,$d,u),e($d,o5),e(o5,aie),g(ow,aie,null),e($d,IIo),e($d,nie),e(nie,jIo),b(d,cxe,u),b(d,lr,u),g(rw,lr,null),e(lr,DIo),e(lr,Id),e(Id,NIo),e(Id,sie),e(sie,qIo),e(Id,OIo),e(Id,lie),e(lie,GIo),e(Id,XIo),e(lr,VIo),e(lr,tw),e(tw,zIo),e(tw,iie),e(iie,WIo),e(tw,QIo),e(lr,HIo),e(lr,ot),g(aw,ot,null),e(ot,UIo),e(ot,die),e(die,JIo),e(ot,YIo),e(ot,jd),e(jd,KIo),e(jd,cie),e(cie,ZIo),e(jd,ejo),e(jd,fie),e(fie,ojo),e(jd,rjo),e(ot,tjo),e(ot,mie),e(mie,ajo),e(ot,njo),g(nw,ot,null),e(lr,sjo),e(lr,ze),g(sw,ze,null),e(ze,ljo),e(ze,gie),e(gie,ijo),e(ze,djo),e(ze,rn),e(rn,cjo),e(rn,hie),e(hie,fjo),e(rn,mjo),e(rn,pie),e(pie,gjo),e(rn,hjo),e(rn,_ie),e(_ie,pjo),e(rn,_jo),e(ze,ujo),e(ze,Ae),e(Ae,r5),e(r5,uie),e(uie,bjo),e(r5,vjo),e(r5,cN),e(cN,Tjo),e(r5,Fjo),e(Ae,Cjo),e(Ae,t5),e(t5,bie),e(bie,Mjo),e(t5,Ejo),e(t5,fN),e(fN,yjo),e(t5,wjo),e(Ae,Ajo),e(Ae,a5),e(a5,vie),e(vie,Ljo),e(a5,Bjo),e(a5,mN),e(mN,xjo),e(a5,kjo),e(Ae,Rjo),e(Ae,n5),e(n5,Tie),e(Tie,Sjo),e(n5,Pjo),e(n5,gN),e(gN,$jo),e(n5,Ijo),e(Ae,jjo),e(Ae,s5),e(s5,Fie),e(Fie,Djo),e(s5,Njo),e(s5,hN),e(hN,qjo),e(s5,Ojo),e(Ae,Gjo),e(Ae,l5),e(l5,Cie),e(Cie,Xjo),e(l5,Vjo),e(l5,pN),e(pN,zjo),e(l5,Wjo),e(Ae,Qjo),e(Ae,i5),e(i5,Mie),e(Mie,Hjo),e(i5,Ujo),e(i5,_N),e(_N,Jjo),e(i5,Yjo),e(Ae,Kjo),e(Ae,d5),e(d5,Eie),e(Eie,Zjo),e(d5,eDo),e(d5,uN),e(uN,oDo),e(d5,rDo),e(ze,tDo),e(ze,c5),e(c5,aDo),e(c5,yie),e(yie,nDo),e(c5,sDo),e(c5,wie),e(wie,lDo),e(ze,iDo),e(ze,Aie),e(Aie,dDo),e(ze,cDo),g(lw,ze,null),b(d,fxe,u),b(d,Dd,u),e(Dd,f5),e(f5,Lie),g(iw,Lie,null),e(Dd,fDo),e(Dd,Bie),e(Bie,mDo),b(d,mxe,u),b(d,ir,u),g(dw,ir,null),e(ir,gDo),e(ir,Nd),e(Nd,hDo),e(Nd,xie),e(xie,pDo),e(Nd,_Do),e(Nd,kie),e(kie,uDo),e(Nd,bDo),e(ir,vDo),e(ir,cw),e(cw,TDo),e(cw,Rie),e(Rie,FDo),e(cw,CDo),e(ir,MDo),e(ir,rt),g(fw,rt,null),e(rt,EDo),e(rt,Sie),e(Sie,yDo),e(rt,wDo),e(rt,qd),e(qd,ADo),e(qd,Pie),e(Pie,LDo),e(qd,BDo),e(qd,$ie),e($ie,xDo),e(qd,kDo),e(rt,RDo),e(rt,Iie),e(Iie,SDo),e(rt,PDo),g(mw,rt,null),e(ir,$Do),e(ir,We),g(gw,We,null),e(We,IDo),e(We,jie),e(jie,jDo),e(We,DDo),e(We,tn),e(tn,NDo),e(tn,Die),e(Die,qDo),e(tn,ODo),e(tn,Nie),e(Nie,GDo),e(tn,XDo),e(tn,qie),e(qie,VDo),e(tn,zDo),e(We,WDo),e(We,an),e(an,m5),e(m5,Oie),e(Oie,QDo),e(m5,HDo),e(m5,bN),e(bN,UDo),e(m5,JDo),e(an,YDo),e(an,g5),e(g5,Gie),e(Gie,KDo),e(g5,ZDo),e(g5,vN),e(vN,eNo),e(g5,oNo),e(an,rNo),e(an,h5),e(h5,Xie),e(Xie,tNo),e(h5,aNo),e(h5,TN),e(TN,nNo),e(h5,sNo),e(an,lNo),e(an,p5),e(p5,Vie),e(Vie,iNo),e(p5,dNo),e(p5,FN),e(FN,cNo),e(p5,fNo),e(We,mNo),e(We,_5),e(_5,gNo),e(_5,zie),e(zie,hNo),e(_5,pNo),e(_5,Wie),e(Wie,_No),e(We,uNo),e(We,Qie),e(Qie,bNo),e(We,vNo),g(hw,We,null),b(d,gxe,u),b(d,Od,u),e(Od,u5),e(u5,Hie),g(pw,Hie,null),e(Od,TNo),e(Od,Uie),e(Uie,FNo),b(d,hxe,u),b(d,dr,u),g(_w,dr,null),e(dr,CNo),e(dr,Gd),e(Gd,MNo),e(Gd,Jie),e(Jie,ENo),e(Gd,yNo),e(Gd,Yie),e(Yie,wNo),e(Gd,ANo),e(dr,LNo),e(dr,uw),e(uw,BNo),e(uw,Kie),e(Kie,xNo),e(uw,kNo),e(dr,RNo),e(dr,tt),g(bw,tt,null),e(tt,SNo),e(tt,Zie),e(Zie,PNo),e(tt,$No),e(tt,Xd),e(Xd,INo),e(Xd,ede),e(ede,jNo),e(Xd,DNo),e(Xd,ode),e(ode,NNo),e(Xd,qNo),e(tt,ONo),e(tt,rde),e(rde,GNo),e(tt,XNo),g(vw,tt,null),e(dr,VNo),e(dr,Qe),g(Tw,Qe,null),e(Qe,zNo),e(Qe,tde),e(tde,WNo),e(Qe,QNo),e(Qe,nn),e(nn,HNo),e(nn,ade),e(ade,UNo),e(nn,JNo),e(nn,nde),e(nde,YNo),e(nn,KNo),e(nn,sde),e(sde,ZNo),e(nn,eqo),e(Qe,oqo),e(Qe,Le),e(Le,b5),e(b5,lde),e(lde,rqo),e(b5,tqo),e(b5,CN),e(CN,aqo),e(b5,nqo),e(Le,sqo),e(Le,v5),e(v5,ide),e(ide,lqo),e(v5,iqo),e(v5,MN),e(MN,dqo),e(v5,cqo),e(Le,fqo),e(Le,T5),e(T5,dde),e(dde,mqo),e(T5,gqo),e(T5,EN),e(EN,hqo),e(T5,pqo),e(Le,_qo),e(Le,F5),e(F5,cde),e(cde,uqo),e(F5,bqo),e(F5,yN),e(yN,vqo),e(F5,Tqo),e(Le,Fqo),e(Le,C5),e(C5,fde),e(fde,Cqo),e(C5,Mqo),e(C5,wN),e(wN,Eqo),e(C5,yqo),e(Le,wqo),e(Le,M5),e(M5,mde),e(mde,Aqo),e(M5,Lqo),e(M5,AN),e(AN,Bqo),e(M5,xqo),e(Le,kqo),e(Le,E5),e(E5,gde),e(gde,Rqo),e(E5,Sqo),e(E5,LN),e(LN,Pqo),e(E5,$qo),e(Le,Iqo),e(Le,y5),e(y5,hde),e(hde,jqo),e(y5,Dqo),e(y5,BN),e(BN,Nqo),e(y5,qqo),e(Qe,Oqo),e(Qe,w5),e(w5,Gqo),e(w5,pde),e(pde,Xqo),e(w5,Vqo),e(w5,_de),e(_de,zqo),e(Qe,Wqo),e(Qe,ude),e(ude,Qqo),e(Qe,Hqo),g(Fw,Qe,null),b(d,pxe,u),b(d,Vd,u),e(Vd,A5),e(A5,bde),g(Cw,bde,null),e(Vd,Uqo),e(Vd,vde),e(vde,Jqo),b(d,_xe,u),b(d,cr,u),g(Mw,cr,null),e(cr,Yqo),e(cr,zd),e(zd,Kqo),e(zd,Tde),e(Tde,Zqo),e(zd,eOo),e(zd,Fde),e(Fde,oOo),e(zd,rOo),e(cr,tOo),e(cr,Ew),e(Ew,aOo),e(Ew,Cde),e(Cde,nOo),e(Ew,sOo),e(cr,lOo),e(cr,at),g(yw,at,null),e(at,iOo),e(at,Mde),e(Mde,dOo),e(at,cOo),e(at,Wd),e(Wd,fOo),e(Wd,Ede),e(Ede,mOo),e(Wd,gOo),e(Wd,yde),e(yde,hOo),e(Wd,pOo),e(at,_Oo),e(at,wde),e(wde,uOo),e(at,bOo),g(ww,at,null),e(cr,vOo),e(cr,He),g(Aw,He,null),e(He,TOo),e(He,Ade),e(Ade,FOo),e(He,COo),e(He,sn),e(sn,MOo),e(sn,Lde),e(Lde,EOo),e(sn,yOo),e(sn,Bde),e(Bde,wOo),e(sn,AOo),e(sn,xde),e(xde,LOo),e(sn,BOo),e(He,xOo),e(He,Lw),e(Lw,L5),e(L5,kde),e(kde,kOo),e(L5,ROo),e(L5,xN),e(xN,SOo),e(L5,POo),e(Lw,$Oo),e(Lw,B5),e(B5,Rde),e(Rde,IOo),e(B5,jOo),e(B5,kN),e(kN,DOo),e(B5,NOo),e(He,qOo),e(He,x5),e(x5,OOo),e(x5,Sde),e(Sde,GOo),e(x5,XOo),e(x5,Pde),e(Pde,VOo),e(He,zOo),e(He,$de),e($de,WOo),e(He,QOo),g(Bw,He,null),b(d,uxe,u),b(d,Qd,u),e(Qd,k5),e(k5,Ide),g(xw,Ide,null),e(Qd,HOo),e(Qd,jde),e(jde,UOo),b(d,bxe,u),b(d,fr,u),g(kw,fr,null),e(fr,JOo),e(fr,Hd),e(Hd,YOo),e(Hd,Dde),e(Dde,KOo),e(Hd,ZOo),e(Hd,Nde),e(Nde,eGo),e(Hd,oGo),e(fr,rGo),e(fr,Rw),e(Rw,tGo),e(Rw,qde),e(qde,aGo),e(Rw,nGo),e(fr,sGo),e(fr,nt),g(Sw,nt,null),e(nt,lGo),e(nt,Ode),e(Ode,iGo),e(nt,dGo),e(nt,Ud),e(Ud,cGo),e(Ud,Gde),e(Gde,fGo),e(Ud,mGo),e(Ud,Xde),e(Xde,gGo),e(Ud,hGo),e(nt,pGo),e(nt,Vde),e(Vde,_Go),e(nt,uGo),g(Pw,nt,null),e(fr,bGo),e(fr,Ue),g($w,Ue,null),e(Ue,vGo),e(Ue,zde),e(zde,TGo),e(Ue,FGo),e(Ue,ln),e(ln,CGo),e(ln,Wde),e(Wde,MGo),e(ln,EGo),e(ln,Qde),e(Qde,yGo),e(ln,wGo),e(ln,Hde),e(Hde,AGo),e(ln,LGo),e(Ue,BGo),e(Ue,dn),e(dn,R5),e(R5,Ude),e(Ude,xGo),e(R5,kGo),e(R5,RN),e(RN,RGo),e(R5,SGo),e(dn,PGo),e(dn,S5),e(S5,Jde),e(Jde,$Go),e(S5,IGo),e(S5,SN),e(SN,jGo),e(S5,DGo),e(dn,NGo),e(dn,P5),e(P5,Yde),e(Yde,qGo),e(P5,OGo),e(P5,PN),e(PN,GGo),e(P5,XGo),e(dn,VGo),e(dn,$5),e($5,Kde),e(Kde,zGo),e($5,WGo),e($5,$N),e($N,QGo),e($5,HGo),e(Ue,UGo),e(Ue,I5),e(I5,JGo),e(I5,Zde),e(Zde,YGo),e(I5,KGo),e(I5,ece),e(ece,ZGo),e(Ue,eXo),e(Ue,oce),e(oce,oXo),e(Ue,rXo),g(Iw,Ue,null),b(d,vxe,u),b(d,Jd,u),e(Jd,j5),e(j5,rce),g(jw,rce,null),e(Jd,tXo),e(Jd,tce),e(tce,aXo),b(d,Txe,u),b(d,mr,u),g(Dw,mr,null),e(mr,nXo),e(mr,Yd),e(Yd,sXo),e(Yd,ace),e(ace,lXo),e(Yd,iXo),e(Yd,nce),e(nce,dXo),e(Yd,cXo),e(mr,fXo),e(mr,Nw),e(Nw,mXo),e(Nw,sce),e(sce,gXo),e(Nw,hXo),e(mr,pXo),e(mr,st),g(qw,st,null),e(st,_Xo),e(st,lce),e(lce,uXo),e(st,bXo),e(st,Kd),e(Kd,vXo),e(Kd,ice),e(ice,TXo),e(Kd,FXo),e(Kd,dce),e(dce,CXo),e(Kd,MXo),e(st,EXo),e(st,cce),e(cce,yXo),e(st,wXo),g(Ow,st,null),e(mr,AXo),e(mr,Je),g(Gw,Je,null),e(Je,LXo),e(Je,fce),e(fce,BXo),e(Je,xXo),e(Je,cn),e(cn,kXo),e(cn,mce),e(mce,RXo),e(cn,SXo),e(cn,gce),e(gce,PXo),e(cn,$Xo),e(cn,hce),e(hce,IXo),e(cn,jXo),e(Je,DXo),e(Je,Zd),e(Zd,D5),e(D5,pce),e(pce,NXo),e(D5,qXo),e(D5,IN),e(IN,OXo),e(D5,GXo),e(Zd,XXo),e(Zd,N5),e(N5,_ce),e(_ce,VXo),e(N5,zXo),e(N5,jN),e(jN,WXo),e(N5,QXo),e(Zd,HXo),e(Zd,q5),e(q5,uce),e(uce,UXo),e(q5,JXo),e(q5,DN),e(DN,YXo),e(q5,KXo),e(Je,ZXo),e(Je,O5),e(O5,eVo),e(O5,bce),e(bce,oVo),e(O5,rVo),e(O5,vce),e(vce,tVo),e(Je,aVo),e(Je,Tce),e(Tce,nVo),e(Je,sVo),g(Xw,Je,null),b(d,Fxe,u),b(d,ec,u),e(ec,G5),e(G5,Fce),g(Vw,Fce,null),e(ec,lVo),e(ec,Cce),e(Cce,iVo),b(d,Cxe,u),b(d,gr,u),g(zw,gr,null),e(gr,dVo),e(gr,oc),e(oc,cVo),e(oc,Mce),e(Mce,fVo),e(oc,mVo),e(oc,Ece),e(Ece,gVo),e(oc,hVo),e(gr,pVo),e(gr,Ww),e(Ww,_Vo),e(Ww,yce),e(yce,uVo),e(Ww,bVo),e(gr,vVo),e(gr,lt),g(Qw,lt,null),e(lt,TVo),e(lt,wce),e(wce,FVo),e(lt,CVo),e(lt,rc),e(rc,MVo),e(rc,Ace),e(Ace,EVo),e(rc,yVo),e(rc,Lce),e(Lce,wVo),e(rc,AVo),e(lt,LVo),e(lt,Bce),e(Bce,BVo),e(lt,xVo),g(Hw,lt,null),e(gr,kVo),e(gr,Ye),g(Uw,Ye,null),e(Ye,RVo),e(Ye,xce),e(xce,SVo),e(Ye,PVo),e(Ye,fn),e(fn,$Vo),e(fn,kce),e(kce,IVo),e(fn,jVo),e(fn,Rce),e(Rce,DVo),e(fn,NVo),e(fn,Sce),e(Sce,qVo),e(fn,OVo),e(Ye,GVo),e(Ye,Pce),e(Pce,X5),e(X5,$ce),e($ce,XVo),e(X5,VVo),e(X5,NN),e(NN,zVo),e(X5,WVo),e(Ye,QVo),e(Ye,V5),e(V5,HVo),e(V5,Ice),e(Ice,UVo),e(V5,JVo),e(V5,jce),e(jce,YVo),e(Ye,KVo),e(Ye,Dce),e(Dce,ZVo),e(Ye,ezo),g(Jw,Ye,null),b(d,Mxe,u),b(d,tc,u),e(tc,z5),e(z5,Nce),g(Yw,Nce,null),e(tc,ozo),e(tc,qce),e(qce,rzo),b(d,Exe,u),b(d,hr,u),g(Kw,hr,null),e(hr,tzo),e(hr,ac),e(ac,azo),e(ac,Oce),e(Oce,nzo),e(ac,szo),e(ac,Gce),e(Gce,lzo),e(ac,izo),e(hr,dzo),e(hr,Zw),e(Zw,czo),e(Zw,Xce),e(Xce,fzo),e(Zw,mzo),e(hr,gzo),e(hr,it),g(e6,it,null),e(it,hzo),e(it,Vce),e(Vce,pzo),e(it,_zo),e(it,nc),e(nc,uzo),e(nc,zce),e(zce,bzo),e(nc,vzo),e(nc,Wce),e(Wce,Tzo),e(nc,Fzo),e(it,Czo),e(it,Qce),e(Qce,Mzo),e(it,Ezo),g(o6,it,null),e(hr,yzo),e(hr,Ke),g(r6,Ke,null),e(Ke,wzo),e(Ke,Hce),e(Hce,Azo),e(Ke,Lzo),e(Ke,mn),e(mn,Bzo),e(mn,Uce),e(Uce,xzo),e(mn,kzo),e(mn,Jce),e(Jce,Rzo),e(mn,Szo),e(mn,Yce),e(Yce,Pzo),e(mn,$zo),e(Ke,Izo),e(Ke,Kce),e(Kce,W5),e(W5,Zce),e(Zce,jzo),e(W5,Dzo),e(W5,qN),e(qN,Nzo),e(W5,qzo),e(Ke,Ozo),e(Ke,Q5),e(Q5,Gzo),e(Q5,efe),e(efe,Xzo),e(Q5,Vzo),e(Q5,ofe),e(ofe,zzo),e(Ke,Wzo),e(Ke,rfe),e(rfe,Qzo),e(Ke,Hzo),g(t6,Ke,null),b(d,yxe,u),b(d,sc,u),e(sc,H5),e(H5,tfe),g(a6,tfe,null),e(sc,Uzo),e(sc,afe),e(afe,Jzo),b(d,wxe,u),b(d,pr,u),g(n6,pr,null),e(pr,Yzo),e(pr,lc),e(lc,Kzo),e(lc,nfe),e(nfe,Zzo),e(lc,eWo),e(lc,sfe),e(sfe,oWo),e(lc,rWo),e(pr,tWo),e(pr,s6),e(s6,aWo),e(s6,lfe),e(lfe,nWo),e(s6,sWo),e(pr,lWo),e(pr,dt),g(l6,dt,null),e(dt,iWo),e(dt,ife),e(ife,dWo),e(dt,cWo),e(dt,ic),e(ic,fWo),e(ic,dfe),e(dfe,mWo),e(ic,gWo),e(ic,cfe),e(cfe,hWo),e(ic,pWo),e(dt,_Wo),e(dt,ffe),e(ffe,uWo),e(dt,bWo),g(i6,dt,null),e(pr,vWo),e(pr,Ze),g(d6,Ze,null),e(Ze,TWo),e(Ze,mfe),e(mfe,FWo),e(Ze,CWo),e(Ze,gn),e(gn,MWo),e(gn,gfe),e(gfe,EWo),e(gn,yWo),e(gn,hfe),e(hfe,wWo),e(gn,AWo),e(gn,pfe),e(pfe,LWo),e(gn,BWo),e(Ze,xWo),e(Ze,c6),e(c6,U5),e(U5,_fe),e(_fe,kWo),e(U5,RWo),e(U5,ON),e(ON,SWo),e(U5,PWo),e(c6,$Wo),e(c6,J5),e(J5,ufe),e(ufe,IWo),e(J5,jWo),e(J5,GN),e(GN,DWo),e(J5,NWo),e(Ze,qWo),e(Ze,Y5),e(Y5,OWo),e(Y5,bfe),e(bfe,GWo),e(Y5,XWo),e(Y5,vfe),e(vfe,VWo),e(Ze,zWo),e(Ze,Tfe),e(Tfe,WWo),e(Ze,QWo),g(f6,Ze,null),b(d,Axe,u),b(d,dc,u),e(dc,K5),e(K5,Ffe),g(m6,Ffe,null),e(dc,HWo),e(dc,Cfe),e(Cfe,UWo),b(d,Lxe,u),b(d,_r,u),g(g6,_r,null),e(_r,JWo),e(_r,cc),e(cc,YWo),e(cc,Mfe),e(Mfe,KWo),e(cc,ZWo),e(cc,Efe),e(Efe,eQo),e(cc,oQo),e(_r,rQo),e(_r,h6),e(h6,tQo),e(h6,yfe),e(yfe,aQo),e(h6,nQo),e(_r,sQo),e(_r,ct),g(p6,ct,null),e(ct,lQo),e(ct,wfe),e(wfe,iQo),e(ct,dQo),e(ct,fc),e(fc,cQo),e(fc,Afe),e(Afe,fQo),e(fc,mQo),e(fc,Lfe),e(Lfe,gQo),e(fc,hQo),e(ct,pQo),e(ct,Bfe),e(Bfe,_Qo),e(ct,uQo),g(_6,ct,null),e(_r,bQo),e(_r,eo),g(u6,eo,null),e(eo,vQo),e(eo,xfe),e(xfe,TQo),e(eo,FQo),e(eo,hn),e(hn,CQo),e(hn,kfe),e(kfe,MQo),e(hn,EQo),e(hn,Rfe),e(Rfe,yQo),e(hn,wQo),e(hn,Sfe),e(Sfe,AQo),e(hn,LQo),e(eo,BQo),e(eo,Pfe),e(Pfe,Z5),e(Z5,$fe),e($fe,xQo),e(Z5,kQo),e(Z5,XN),e(XN,RQo),e(Z5,SQo),e(eo,PQo),e(eo,ev),e(ev,$Qo),e(ev,Ife),e(Ife,IQo),e(ev,jQo),e(ev,jfe),e(jfe,DQo),e(eo,NQo),e(eo,Dfe),e(Dfe,qQo),e(eo,OQo),g(b6,eo,null),b(d,Bxe,u),b(d,mc,u),e(mc,ov),e(ov,Nfe),g(v6,Nfe,null),e(mc,GQo),e(mc,qfe),e(qfe,XQo),b(d,xxe,u),b(d,ur,u),g(T6,ur,null),e(ur,VQo),e(ur,gc),e(gc,zQo),e(gc,Ofe),e(Ofe,WQo),e(gc,QQo),e(gc,Gfe),e(Gfe,HQo),e(gc,UQo),e(ur,JQo),e(ur,F6),e(F6,YQo),e(F6,Xfe),e(Xfe,KQo),e(F6,ZQo),e(ur,eHo),e(ur,ft),g(C6,ft,null),e(ft,oHo),e(ft,Vfe),e(Vfe,rHo),e(ft,tHo),e(ft,hc),e(hc,aHo),e(hc,zfe),e(zfe,nHo),e(hc,sHo),e(hc,Wfe),e(Wfe,lHo),e(hc,iHo),e(ft,dHo),e(ft,Qfe),e(Qfe,cHo),e(ft,fHo),g(M6,ft,null),e(ur,mHo),e(ur,ho),g(E6,ho,null),e(ho,gHo),e(ho,Hfe),e(Hfe,hHo),e(ho,pHo),e(ho,pn),e(pn,_Ho),e(pn,Ufe),e(Ufe,uHo),e(pn,bHo),e(pn,Jfe),e(Jfe,vHo),e(pn,THo),e(pn,Yfe),e(Yfe,FHo),e(pn,CHo),e(ho,MHo),e(ho,B),e(B,rv),e(rv,Kfe),e(Kfe,EHo),e(rv,yHo),e(rv,VN),e(VN,wHo),e(rv,AHo),e(B,LHo),e(B,tv),e(tv,Zfe),e(Zfe,BHo),e(tv,xHo),e(tv,zN),e(zN,kHo),e(tv,RHo),e(B,SHo),e(B,av),e(av,eme),e(eme,PHo),e(av,$Ho),e(av,WN),e(WN,IHo),e(av,jHo),e(B,DHo),e(B,nv),e(nv,ome),e(ome,NHo),e(nv,qHo),e(nv,QN),e(QN,OHo),e(nv,GHo),e(B,XHo),e(B,sv),e(sv,rme),e(rme,VHo),e(sv,zHo),e(sv,HN),e(HN,WHo),e(sv,QHo),e(B,HHo),e(B,lv),e(lv,tme),e(tme,UHo),e(lv,JHo),e(lv,UN),e(UN,YHo),e(lv,KHo),e(B,ZHo),e(B,iv),e(iv,ame),e(ame,eUo),e(iv,oUo),e(iv,JN),e(JN,rUo),e(iv,tUo),e(B,aUo),e(B,dv),e(dv,nme),e(nme,nUo),e(dv,sUo),e(dv,YN),e(YN,lUo),e(dv,iUo),e(B,dUo),e(B,cv),e(cv,sme),e(sme,cUo),e(cv,fUo),e(cv,KN),e(KN,mUo),e(cv,gUo),e(B,hUo),e(B,fv),e(fv,lme),e(lme,pUo),e(fv,_Uo),e(fv,ZN),e(ZN,uUo),e(fv,bUo),e(B,vUo),e(B,mv),e(mv,ime),e(ime,TUo),e(mv,FUo),e(mv,eq),e(eq,CUo),e(mv,MUo),e(B,EUo),e(B,gv),e(gv,dme),e(dme,yUo),e(gv,wUo),e(gv,oq),e(oq,AUo),e(gv,LUo),e(B,BUo),e(B,hv),e(hv,cme),e(cme,xUo),e(hv,kUo),e(hv,rq),e(rq,RUo),e(hv,SUo),e(B,PUo),e(B,pv),e(pv,fme),e(fme,$Uo),e(pv,IUo),e(pv,tq),e(tq,jUo),e(pv,DUo),e(B,NUo),e(B,_v),e(_v,mme),e(mme,qUo),e(_v,OUo),e(_v,aq),e(aq,GUo),e(_v,XUo),e(B,VUo),e(B,uv),e(uv,gme),e(gme,zUo),e(uv,WUo),e(uv,nq),e(nq,QUo),e(uv,HUo),e(B,UUo),e(B,Os),e(Os,hme),e(hme,JUo),e(Os,YUo),e(Os,sq),e(sq,KUo),e(Os,ZUo),e(Os,lq),e(lq,eJo),e(Os,oJo),e(B,rJo),e(B,bv),e(bv,pme),e(pme,tJo),e(bv,aJo),e(bv,iq),e(iq,nJo),e(bv,sJo),e(B,lJo),e(B,vv),e(vv,_me),e(_me,iJo),e(vv,dJo),e(vv,dq),e(dq,cJo),e(vv,fJo),e(B,mJo),e(B,Tv),e(Tv,ume),e(ume,gJo),e(Tv,hJo),e(Tv,cq),e(cq,pJo),e(Tv,_Jo),e(B,uJo),e(B,Fv),e(Fv,bme),e(bme,bJo),e(Fv,vJo),e(Fv,fq),e(fq,TJo),e(Fv,FJo),e(B,CJo),e(B,Cv),e(Cv,vme),e(vme,MJo),e(Cv,EJo),e(Cv,mq),e(mq,yJo),e(Cv,wJo),e(B,AJo),e(B,Mv),e(Mv,Tme),e(Tme,LJo),e(Mv,BJo),e(Mv,gq),e(gq,xJo),e(Mv,kJo),e(B,RJo),e(B,Ev),e(Ev,Fme),e(Fme,SJo),e(Ev,PJo),e(Ev,hq),e(hq,$Jo),e(Ev,IJo),e(B,jJo),e(B,yv),e(yv,Cme),e(Cme,DJo),e(yv,NJo),e(yv,pq),e(pq,qJo),e(yv,OJo),e(B,GJo),e(B,wv),e(wv,Mme),e(Mme,XJo),e(wv,VJo),e(wv,_q),e(_q,zJo),e(wv,WJo),e(B,QJo),e(B,Av),e(Av,Eme),e(Eme,HJo),e(Av,UJo),e(Av,uq),e(uq,JJo),e(Av,YJo),e(B,KJo),e(B,Lv),e(Lv,yme),e(yme,ZJo),e(Lv,eYo),e(Lv,bq),e(bq,oYo),e(Lv,rYo),e(B,tYo),e(B,Bv),e(Bv,wme),e(wme,aYo),e(Bv,nYo),e(Bv,vq),e(vq,sYo),e(Bv,lYo),e(B,iYo),e(B,xv),e(xv,Ame),e(Ame,dYo),e(xv,cYo),e(xv,Tq),e(Tq,fYo),e(xv,mYo),e(B,gYo),e(B,kv),e(kv,Lme),e(Lme,hYo),e(kv,pYo),e(kv,Fq),e(Fq,_Yo),e(kv,uYo),e(B,bYo),e(B,Rv),e(Rv,Bme),e(Bme,vYo),e(Rv,TYo),e(Rv,Cq),e(Cq,FYo),e(Rv,CYo),e(B,MYo),e(B,Sv),e(Sv,xme),e(xme,EYo),e(Sv,yYo),e(Sv,Mq),e(Mq,wYo),e(Sv,AYo),e(B,LYo),e(B,Pv),e(Pv,kme),e(kme,BYo),e(Pv,xYo),e(Pv,Eq),e(Eq,kYo),e(Pv,RYo),e(B,SYo),e(B,$v),e($v,Rme),e(Rme,PYo),e($v,$Yo),e($v,yq),e(yq,IYo),e($v,jYo),e(B,DYo),e(B,Iv),e(Iv,Sme),e(Sme,NYo),e(Iv,qYo),e(Iv,wq),e(wq,OYo),e(Iv,GYo),e(B,XYo),e(B,jv),e(jv,Pme),e(Pme,VYo),e(jv,zYo),e(jv,Aq),e(Aq,WYo),e(jv,QYo),e(B,HYo),e(B,Dv),e(Dv,$me),e($me,UYo),e(Dv,JYo),e(Dv,Lq),e(Lq,YYo),e(Dv,KYo),e(B,ZYo),e(B,Nv),e(Nv,Ime),e(Ime,eKo),e(Nv,oKo),e(Nv,Bq),e(Bq,rKo),e(Nv,tKo),e(B,aKo),e(B,qv),e(qv,jme),e(jme,nKo),e(qv,sKo),e(qv,xq),e(xq,lKo),e(qv,iKo),e(B,dKo),e(B,Ov),e(Ov,Dme),e(Dme,cKo),e(Ov,fKo),e(Ov,kq),e(kq,mKo),e(Ov,gKo),e(B,hKo),e(B,Gv),e(Gv,Nme),e(Nme,pKo),e(Gv,_Ko),e(Gv,Rq),e(Rq,uKo),e(Gv,bKo),e(ho,vKo),e(ho,qme),e(qme,TKo),e(ho,FKo),g(y6,ho,null),b(d,kxe,u),b(d,pc,u),e(pc,Xv),e(Xv,Ome),g(w6,Ome,null),e(pc,CKo),e(pc,Gme),e(Gme,MKo),b(d,Rxe,u),b(d,br,u),g(A6,br,null),e(br,EKo),e(br,_c),e(_c,yKo),e(_c,Xme),e(Xme,wKo),e(_c,AKo),e(_c,Vme),e(Vme,LKo),e(_c,BKo),e(br,xKo),e(br,L6),e(L6,kKo),e(L6,zme),e(zme,RKo),e(L6,SKo),e(br,PKo),e(br,mt),g(B6,mt,null),e(mt,$Ko),e(mt,Wme),e(Wme,IKo),e(mt,jKo),e(mt,uc),e(uc,DKo),e(uc,Qme),e(Qme,NKo),e(uc,qKo),e(uc,Hme),e(Hme,OKo),e(uc,GKo),e(mt,XKo),e(mt,Ume),e(Ume,VKo),e(mt,zKo),g(x6,mt,null),e(br,WKo),e(br,po),g(k6,po,null),e(po,QKo),e(po,Jme),e(Jme,HKo),e(po,UKo),e(po,_n),e(_n,JKo),e(_n,Yme),e(Yme,YKo),e(_n,KKo),e(_n,Kme),e(Kme,ZKo),e(_n,eZo),e(_n,Zme),e(Zme,oZo),e(_n,rZo),e(po,tZo),e(po,H),e(H,Vv),e(Vv,ege),e(ege,aZo),e(Vv,nZo),e(Vv,Sq),e(Sq,sZo),e(Vv,lZo),e(H,iZo),e(H,zv),e(zv,oge),e(oge,dZo),e(zv,cZo),e(zv,Pq),e(Pq,fZo),e(zv,mZo),e(H,gZo),e(H,Wv),e(Wv,rge),e(rge,hZo),e(Wv,pZo),e(Wv,$q),e($q,_Zo),e(Wv,uZo),e(H,bZo),e(H,Qv),e(Qv,tge),e(tge,vZo),e(Qv,TZo),e(Qv,Iq),e(Iq,FZo),e(Qv,CZo),e(H,MZo),e(H,Hv),e(Hv,age),e(age,EZo),e(Hv,yZo),e(Hv,jq),e(jq,wZo),e(Hv,AZo),e(H,LZo),e(H,Uv),e(Uv,nge),e(nge,BZo),e(Uv,xZo),e(Uv,Dq),e(Dq,kZo),e(Uv,RZo),e(H,SZo),e(H,Jv),e(Jv,sge),e(sge,PZo),e(Jv,$Zo),e(Jv,Nq),e(Nq,IZo),e(Jv,jZo),e(H,DZo),e(H,Yv),e(Yv,lge),e(lge,NZo),e(Yv,qZo),e(Yv,qq),e(qq,OZo),e(Yv,GZo),e(H,XZo),e(H,Kv),e(Kv,ige),e(ige,VZo),e(Kv,zZo),e(Kv,Oq),e(Oq,WZo),e(Kv,QZo),e(H,HZo),e(H,Zv),e(Zv,dge),e(dge,UZo),e(Zv,JZo),e(Zv,Gq),e(Gq,YZo),e(Zv,KZo),e(H,ZZo),e(H,eT),e(eT,cge),e(cge,eer),e(eT,oer),e(eT,Xq),e(Xq,rer),e(eT,ter),e(H,aer),e(H,oT),e(oT,fge),e(fge,ner),e(oT,ser),e(oT,Vq),e(Vq,ler),e(oT,ier),e(H,der),e(H,rT),e(rT,mge),e(mge,cer),e(rT,fer),e(rT,zq),e(zq,mer),e(rT,ger),e(H,her),e(H,tT),e(tT,gge),e(gge,per),e(tT,_er),e(tT,Wq),e(Wq,uer),e(tT,ber),e(H,ver),e(H,aT),e(aT,hge),e(hge,Ter),e(aT,Fer),e(aT,Qq),e(Qq,Cer),e(aT,Mer),e(H,Eer),e(H,nT),e(nT,pge),e(pge,yer),e(nT,wer),e(nT,Hq),e(Hq,Aer),e(nT,Ler),e(H,Ber),e(H,sT),e(sT,_ge),e(_ge,xer),e(sT,ker),e(sT,Uq),e(Uq,Rer),e(sT,Ser),e(H,Per),e(H,lT),e(lT,uge),e(uge,$er),e(lT,Ier),e(lT,Jq),e(Jq,jer),e(lT,Der),e(H,Ner),e(H,iT),e(iT,bge),e(bge,qer),e(iT,Oer),e(iT,Yq),e(Yq,Ger),e(iT,Xer),e(H,Ver),e(H,dT),e(dT,vge),e(vge,zer),e(dT,Wer),e(dT,Kq),e(Kq,Qer),e(dT,Her),e(H,Uer),e(H,cT),e(cT,Tge),e(Tge,Jer),e(cT,Yer),e(cT,Zq),e(Zq,Ker),e(cT,Zer),e(H,eor),e(H,fT),e(fT,Fge),e(Fge,oor),e(fT,ror),e(fT,eO),e(eO,tor),e(fT,aor),e(po,nor),e(po,Cge),e(Cge,sor),e(po,lor),g(R6,po,null),b(d,Sxe,u),b(d,bc,u),e(bc,mT),e(mT,Mge),g(S6,Mge,null),e(bc,ior),e(bc,Ege),e(Ege,dor),b(d,Pxe,u),b(d,vr,u),g(P6,vr,null),e(vr,cor),e(vr,vc),e(vc,mor),e(vc,yge),e(yge,gor),e(vc,hor),e(vc,wge),e(wge,por),e(vc,_or),e(vr,uor),e(vr,$6),e($6,bor),e($6,Age),e(Age,vor),e($6,Tor),e(vr,For),e(vr,gt),g(I6,gt,null),e(gt,Cor),e(gt,Lge),e(Lge,Mor),e(gt,Eor),e(gt,Tc),e(Tc,yor),e(Tc,Bge),e(Bge,wor),e(Tc,Aor),e(Tc,xge),e(xge,Lor),e(Tc,Bor),e(gt,xor),e(gt,kge),e(kge,kor),e(gt,Ror),g(j6,gt,null),e(vr,Sor),e(vr,_o),g(D6,_o,null),e(_o,Por),e(_o,Rge),e(Rge,$or),e(_o,Ior),e(_o,un),e(un,jor),e(un,Sge),e(Sge,Dor),e(un,Nor),e(un,Pge),e(Pge,qor),e(un,Oor),e(un,$ge),e($ge,Gor),e(un,Xor),e(_o,Vor),e(_o,he),e(he,gT),e(gT,Ige),e(Ige,zor),e(gT,Wor),e(gT,oO),e(oO,Qor),e(gT,Hor),e(he,Uor),e(he,hT),e(hT,jge),e(jge,Jor),e(hT,Yor),e(hT,rO),e(rO,Kor),e(hT,Zor),e(he,err),e(he,pT),e(pT,Dge),e(Dge,orr),e(pT,rrr),e(pT,tO),e(tO,trr),e(pT,arr),e(he,nrr),e(he,_T),e(_T,Nge),e(Nge,srr),e(_T,lrr),e(_T,aO),e(aO,irr),e(_T,drr),e(he,crr),e(he,uT),e(uT,qge),e(qge,frr),e(uT,mrr),e(uT,nO),e(nO,grr),e(uT,hrr),e(he,prr),e(he,bT),e(bT,Oge),e(Oge,_rr),e(bT,urr),e(bT,sO),e(sO,brr),e(bT,vrr),e(he,Trr),e(he,vT),e(vT,Gge),e(Gge,Frr),e(vT,Crr),e(vT,lO),e(lO,Mrr),e(vT,Err),e(he,yrr),e(he,TT),e(TT,Xge),e(Xge,wrr),e(TT,Arr),e(TT,iO),e(iO,Lrr),e(TT,Brr),e(he,xrr),e(he,FT),e(FT,Vge),e(Vge,krr),e(FT,Rrr),e(FT,dO),e(dO,Srr),e(FT,Prr),e(he,$rr),e(he,CT),e(CT,zge),e(zge,Irr),e(CT,jrr),e(CT,cO),e(cO,Drr),e(CT,Nrr),e(_o,qrr),e(_o,Wge),e(Wge,Orr),e(_o,Grr),g(N6,_o,null),b(d,$xe,u),b(d,Fc,u),e(Fc,MT),e(MT,Qge),g(q6,Qge,null),e(Fc,Xrr),e(Fc,Hge),e(Hge,Vrr),b(d,Ixe,u),b(d,Tr,u),g(O6,Tr,null),e(Tr,zrr),e(Tr,Cc),e(Cc,Wrr),e(Cc,Uge),e(Uge,Qrr),e(Cc,Hrr),e(Cc,Jge),e(Jge,Urr),e(Cc,Jrr),e(Tr,Yrr),e(Tr,G6),e(G6,Krr),e(G6,Yge),e(Yge,Zrr),e(G6,etr),e(Tr,otr),e(Tr,ht),g(X6,ht,null),e(ht,rtr),e(ht,Kge),e(Kge,ttr),e(ht,atr),e(ht,Mc),e(Mc,ntr),e(Mc,Zge),e(Zge,str),e(Mc,ltr),e(Mc,ehe),e(ehe,itr),e(Mc,dtr),e(ht,ctr),e(ht,ohe),e(ohe,ftr),e(ht,mtr),g(V6,ht,null),e(Tr,gtr),e(Tr,uo),g(z6,uo,null),e(uo,htr),e(uo,rhe),e(rhe,ptr),e(uo,_tr),e(uo,bn),e(bn,utr),e(bn,the),e(the,btr),e(bn,vtr),e(bn,ahe),e(ahe,Ttr),e(bn,Ftr),e(bn,nhe),e(nhe,Ctr),e(bn,Mtr),e(uo,Etr),e(uo,W6),e(W6,ET),e(ET,she),e(she,ytr),e(ET,wtr),e(ET,fO),e(fO,Atr),e(ET,Ltr),e(W6,Btr),e(W6,yT),e(yT,lhe),e(lhe,xtr),e(yT,ktr),e(yT,mO),e(mO,Rtr),e(yT,Str),e(uo,Ptr),e(uo,ihe),e(ihe,$tr),e(uo,Itr),g(Q6,uo,null),b(d,jxe,u),b(d,Ec,u),e(Ec,wT),e(wT,dhe),g(H6,dhe,null),e(Ec,jtr),e(Ec,che),e(che,Dtr),b(d,Dxe,u),b(d,Fr,u),g(U6,Fr,null),e(Fr,Ntr),e(Fr,yc),e(yc,qtr),e(yc,fhe),e(fhe,Otr),e(yc,Gtr),e(yc,mhe),e(mhe,Xtr),e(yc,Vtr),e(Fr,ztr),e(Fr,J6),e(J6,Wtr),e(J6,ghe),e(ghe,Qtr),e(J6,Htr),e(Fr,Utr),e(Fr,pt),g(Y6,pt,null),e(pt,Jtr),e(pt,hhe),e(hhe,Ytr),e(pt,Ktr),e(pt,wc),e(wc,Ztr),e(wc,phe),e(phe,ear),e(wc,oar),e(wc,_he),e(_he,rar),e(wc,tar),e(pt,aar),e(pt,uhe),e(uhe,nar),e(pt,sar),g(K6,pt,null),e(Fr,lar),e(Fr,bo),g(Z6,bo,null),e(bo,iar),e(bo,bhe),e(bhe,dar),e(bo,car),e(bo,vn),e(vn,far),e(vn,vhe),e(vhe,mar),e(vn,gar),e(vn,The),e(The,har),e(vn,par),e(vn,Fhe),e(Fhe,_ar),e(vn,uar),e(bo,bar),e(bo,Y),e(Y,AT),e(AT,Che),e(Che,Tar),e(AT,Far),e(AT,gO),e(gO,Car),e(AT,Mar),e(Y,Ear),e(Y,LT),e(LT,Mhe),e(Mhe,yar),e(LT,war),e(LT,hO),e(hO,Aar),e(LT,Lar),e(Y,Bar),e(Y,BT),e(BT,Ehe),e(Ehe,xar),e(BT,kar),e(BT,pO),e(pO,Rar),e(BT,Sar),e(Y,Par),e(Y,xT),e(xT,yhe),e(yhe,$ar),e(xT,Iar),e(xT,_O),e(_O,jar),e(xT,Dar),e(Y,Nar),e(Y,kT),e(kT,whe),e(whe,qar),e(kT,Oar),e(kT,uO),e(uO,Gar),e(kT,Xar),e(Y,Var),e(Y,RT),e(RT,Ahe),e(Ahe,zar),e(RT,War),e(RT,bO),e(bO,Qar),e(RT,Har),e(Y,Uar),e(Y,ST),e(ST,Lhe),e(Lhe,Jar),e(ST,Yar),e(ST,vO),e(vO,Kar),e(ST,Zar),e(Y,enr),e(Y,PT),e(PT,Bhe),e(Bhe,onr),e(PT,rnr),e(PT,TO),e(TO,tnr),e(PT,anr),e(Y,nnr),e(Y,$T),e($T,xhe),e(xhe,snr),e($T,lnr),e($T,FO),e(FO,inr),e($T,dnr),e(Y,cnr),e(Y,IT),e(IT,khe),e(khe,fnr),e(IT,mnr),e(IT,CO),e(CO,gnr),e(IT,hnr),e(Y,pnr),e(Y,jT),e(jT,Rhe),e(Rhe,_nr),e(jT,unr),e(jT,MO),e(MO,bnr),e(jT,vnr),e(Y,Tnr),e(Y,DT),e(DT,She),e(She,Fnr),e(DT,Cnr),e(DT,EO),e(EO,Mnr),e(DT,Enr),e(Y,ynr),e(Y,NT),e(NT,Phe),e(Phe,wnr),e(NT,Anr),e(NT,yO),e(yO,Lnr),e(NT,Bnr),e(Y,xnr),e(Y,qT),e(qT,$he),e($he,knr),e(qT,Rnr),e(qT,wO),e(wO,Snr),e(qT,Pnr),e(Y,$nr),e(Y,OT),e(OT,Ihe),e(Ihe,Inr),e(OT,jnr),e(OT,AO),e(AO,Dnr),e(OT,Nnr),e(Y,qnr),e(Y,GT),e(GT,jhe),e(jhe,Onr),e(GT,Gnr),e(GT,LO),e(LO,Xnr),e(GT,Vnr),e(Y,znr),e(Y,XT),e(XT,Dhe),e(Dhe,Wnr),e(XT,Qnr),e(XT,BO),e(BO,Hnr),e(XT,Unr),e(Y,Jnr),e(Y,VT),e(VT,Nhe),e(Nhe,Ynr),e(VT,Knr),e(VT,xO),e(xO,Znr),e(VT,esr),e(Y,osr),e(Y,zT),e(zT,qhe),e(qhe,rsr),e(zT,tsr),e(zT,kO),e(kO,asr),e(zT,nsr),e(Y,ssr),e(Y,WT),e(WT,Ohe),e(Ohe,lsr),e(WT,isr),e(WT,RO),e(RO,dsr),e(WT,csr),e(bo,fsr),e(bo,Ghe),e(Ghe,msr),e(bo,gsr),g(eA,bo,null),b(d,Nxe,u),b(d,Ac,u),e(Ac,QT),e(QT,Xhe),g(oA,Xhe,null),e(Ac,hsr),e(Ac,Vhe),e(Vhe,psr),b(d,qxe,u),b(d,Cr,u),g(rA,Cr,null),e(Cr,_sr),e(Cr,Lc),e(Lc,usr),e(Lc,zhe),e(zhe,bsr),e(Lc,vsr),e(Lc,Whe),e(Whe,Tsr),e(Lc,Fsr),e(Cr,Csr),e(Cr,tA),e(tA,Msr),e(tA,Qhe),e(Qhe,Esr),e(tA,ysr),e(Cr,wsr),e(Cr,_t),g(aA,_t,null),e(_t,Asr),e(_t,Hhe),e(Hhe,Lsr),e(_t,Bsr),e(_t,Bc),e(Bc,xsr),e(Bc,Uhe),e(Uhe,ksr),e(Bc,Rsr),e(Bc,Jhe),e(Jhe,Ssr),e(Bc,Psr),e(_t,$sr),e(_t,Yhe),e(Yhe,Isr),e(_t,jsr),g(nA,_t,null),e(Cr,Dsr),e(Cr,vo),g(sA,vo,null),e(vo,Nsr),e(vo,Khe),e(Khe,qsr),e(vo,Osr),e(vo,Tn),e(Tn,Gsr),e(Tn,Zhe),e(Zhe,Xsr),e(Tn,Vsr),e(Tn,epe),e(epe,zsr),e(Tn,Wsr),e(Tn,ope),e(ope,Qsr),e(Tn,Hsr),e(vo,Usr),e(vo,pe),e(pe,HT),e(HT,rpe),e(rpe,Jsr),e(HT,Ysr),e(HT,SO),e(SO,Ksr),e(HT,Zsr),e(pe,elr),e(pe,UT),e(UT,tpe),e(tpe,olr),e(UT,rlr),e(UT,PO),e(PO,tlr),e(UT,alr),e(pe,nlr),e(pe,JT),e(JT,ape),e(ape,slr),e(JT,llr),e(JT,$O),e($O,ilr),e(JT,dlr),e(pe,clr),e(pe,YT),e(YT,npe),e(npe,flr),e(YT,mlr),e(YT,IO),e(IO,glr),e(YT,hlr),e(pe,plr),e(pe,KT),e(KT,spe),e(spe,_lr),e(KT,ulr),e(KT,jO),e(jO,blr),e(KT,vlr),e(pe,Tlr),e(pe,ZT),e(ZT,lpe),e(lpe,Flr),e(ZT,Clr),e(ZT,DO),e(DO,Mlr),e(ZT,Elr),e(pe,ylr),e(pe,eF),e(eF,ipe),e(ipe,wlr),e(eF,Alr),e(eF,NO),e(NO,Llr),e(eF,Blr),e(pe,xlr),e(pe,oF),e(oF,dpe),e(dpe,klr),e(oF,Rlr),e(oF,qO),e(qO,Slr),e(oF,Plr),e(pe,$lr),e(pe,rF),e(rF,cpe),e(cpe,Ilr),e(rF,jlr),e(rF,OO),e(OO,Dlr),e(rF,Nlr),e(pe,qlr),e(pe,tF),e(tF,fpe),e(fpe,Olr),e(tF,Glr),e(tF,GO),e(GO,Xlr),e(tF,Vlr),e(vo,zlr),e(vo,mpe),e(mpe,Wlr),e(vo,Qlr),g(lA,vo,null),b(d,Oxe,u),b(d,xc,u),e(xc,aF),e(aF,gpe),g(iA,gpe,null),e(xc,Hlr),e(xc,hpe),e(hpe,Ulr),b(d,Gxe,u),b(d,Mr,u),g(dA,Mr,null),e(Mr,Jlr),e(Mr,kc),e(kc,Ylr),e(kc,ppe),e(ppe,Klr),e(kc,Zlr),e(kc,_pe),e(_pe,eir),e(kc,oir),e(Mr,rir),e(Mr,cA),e(cA,tir),e(cA,upe),e(upe,air),e(cA,nir),e(Mr,sir),e(Mr,ut),g(fA,ut,null),e(ut,lir),e(ut,bpe),e(bpe,iir),e(ut,dir),e(ut,Rc),e(Rc,cir),e(Rc,vpe),e(vpe,fir),e(Rc,mir),e(Rc,Tpe),e(Tpe,gir),e(Rc,hir),e(ut,pir),e(ut,Fpe),e(Fpe,_ir),e(ut,uir),g(mA,ut,null),e(Mr,bir),e(Mr,To),g(gA,To,null),e(To,vir),e(To,Cpe),e(Cpe,Tir),e(To,Fir),e(To,Fn),e(Fn,Cir),e(Fn,Mpe),e(Mpe,Mir),e(Fn,Eir),e(Fn,Epe),e(Epe,yir),e(Fn,wir),e(Fn,ype),e(ype,Air),e(Fn,Lir),e(To,Bir),e(To,V),e(V,nF),e(nF,wpe),e(wpe,xir),e(nF,kir),e(nF,XO),e(XO,Rir),e(nF,Sir),e(V,Pir),e(V,sF),e(sF,Ape),e(Ape,$ir),e(sF,Iir),e(sF,VO),e(VO,jir),e(sF,Dir),e(V,Nir),e(V,lF),e(lF,Lpe),e(Lpe,qir),e(lF,Oir),e(lF,zO),e(zO,Gir),e(lF,Xir),e(V,Vir),e(V,iF),e(iF,Bpe),e(Bpe,zir),e(iF,Wir),e(iF,WO),e(WO,Qir),e(iF,Hir),e(V,Uir),e(V,dF),e(dF,xpe),e(xpe,Jir),e(dF,Yir),e(dF,QO),e(QO,Kir),e(dF,Zir),e(V,edr),e(V,cF),e(cF,kpe),e(kpe,odr),e(cF,rdr),e(cF,HO),e(HO,tdr),e(cF,adr),e(V,ndr),e(V,fF),e(fF,Rpe),e(Rpe,sdr),e(fF,ldr),e(fF,UO),e(UO,idr),e(fF,ddr),e(V,cdr),e(V,mF),e(mF,Spe),e(Spe,fdr),e(mF,mdr),e(mF,JO),e(JO,gdr),e(mF,hdr),e(V,pdr),e(V,gF),e(gF,Ppe),e(Ppe,_dr),e(gF,udr),e(gF,YO),e(YO,bdr),e(gF,vdr),e(V,Tdr),e(V,hF),e(hF,$pe),e($pe,Fdr),e(hF,Cdr),e(hF,KO),e(KO,Mdr),e(hF,Edr),e(V,ydr),e(V,pF),e(pF,Ipe),e(Ipe,wdr),e(pF,Adr),e(pF,ZO),e(ZO,Ldr),e(pF,Bdr),e(V,xdr),e(V,_F),e(_F,jpe),e(jpe,kdr),e(_F,Rdr),e(_F,eG),e(eG,Sdr),e(_F,Pdr),e(V,$dr),e(V,uF),e(uF,Dpe),e(Dpe,Idr),e(uF,jdr),e(uF,oG),e(oG,Ddr),e(uF,Ndr),e(V,qdr),e(V,bF),e(bF,Npe),e(Npe,Odr),e(bF,Gdr),e(bF,rG),e(rG,Xdr),e(bF,Vdr),e(V,zdr),e(V,vF),e(vF,qpe),e(qpe,Wdr),e(vF,Qdr),e(vF,tG),e(tG,Hdr),e(vF,Udr),e(V,Jdr),e(V,TF),e(TF,Ope),e(Ope,Ydr),e(TF,Kdr),e(TF,aG),e(aG,Zdr),e(TF,ecr),e(V,ocr),e(V,FF),e(FF,Gpe),e(Gpe,rcr),e(FF,tcr),e(FF,nG),e(nG,acr),e(FF,ncr),e(V,scr),e(V,CF),e(CF,Xpe),e(Xpe,lcr),e(CF,icr),e(CF,sG),e(sG,dcr),e(CF,ccr),e(V,fcr),e(V,MF),e(MF,Vpe),e(Vpe,mcr),e(MF,gcr),e(MF,lG),e(lG,hcr),e(MF,pcr),e(V,_cr),e(V,EF),e(EF,zpe),e(zpe,ucr),e(EF,bcr),e(EF,iG),e(iG,vcr),e(EF,Tcr),e(V,Fcr),e(V,yF),e(yF,Wpe),e(Wpe,Ccr),e(yF,Mcr),e(yF,dG),e(dG,Ecr),e(yF,ycr),e(V,wcr),e(V,wF),e(wF,Qpe),e(Qpe,Acr),e(wF,Lcr),e(wF,cG),e(cG,Bcr),e(wF,xcr),e(V,kcr),e(V,AF),e(AF,Hpe),e(Hpe,Rcr),e(AF,Scr),e(AF,fG),e(fG,Pcr),e(AF,$cr),e(V,Icr),e(V,LF),e(LF,Upe),e(Upe,jcr),e(LF,Dcr),e(LF,mG),e(mG,Ncr),e(LF,qcr),e(V,Ocr),e(V,BF),e(BF,Jpe),e(Jpe,Gcr),e(BF,Xcr),e(BF,gG),e(gG,Vcr),e(BF,zcr),e(To,Wcr),e(To,Ype),e(Ype,Qcr),e(To,Hcr),g(hA,To,null),b(d,Xxe,u),b(d,Sc,u),e(Sc,xF),e(xF,Kpe),g(pA,Kpe,null),e(Sc,Ucr),e(Sc,Zpe),e(Zpe,Jcr),b(d,Vxe,u),b(d,Er,u),g(_A,Er,null),e(Er,Ycr),e(Er,Pc),e(Pc,Kcr),e(Pc,e_e),e(e_e,Zcr),e(Pc,efr),e(Pc,o_e),e(o_e,ofr),e(Pc,rfr),e(Er,tfr),e(Er,uA),e(uA,afr),e(uA,r_e),e(r_e,nfr),e(uA,sfr),e(Er,lfr),e(Er,bt),g(bA,bt,null),e(bt,ifr),e(bt,t_e),e(t_e,dfr),e(bt,cfr),e(bt,$c),e($c,ffr),e($c,a_e),e(a_e,mfr),e($c,gfr),e($c,n_e),e(n_e,hfr),e($c,pfr),e(bt,_fr),e(bt,s_e),e(s_e,ufr),e(bt,bfr),g(vA,bt,null),e(Er,vfr),e(Er,Fo),g(TA,Fo,null),e(Fo,Tfr),e(Fo,l_e),e(l_e,Ffr),e(Fo,Cfr),e(Fo,Cn),e(Cn,Mfr),e(Cn,i_e),e(i_e,Efr),e(Cn,yfr),e(Cn,d_e),e(d_e,wfr),e(Cn,Afr),e(Cn,c_e),e(c_e,Lfr),e(Cn,Bfr),e(Fo,xfr),e(Fo,te),e(te,kF),e(kF,f_e),e(f_e,kfr),e(kF,Rfr),e(kF,hG),e(hG,Sfr),e(kF,Pfr),e(te,$fr),e(te,RF),e(RF,m_e),e(m_e,Ifr),e(RF,jfr),e(RF,pG),e(pG,Dfr),e(RF,Nfr),e(te,qfr),e(te,SF),e(SF,g_e),e(g_e,Ofr),e(SF,Gfr),e(SF,_G),e(_G,Xfr),e(SF,Vfr),e(te,zfr),e(te,PF),e(PF,h_e),e(h_e,Wfr),e(PF,Qfr),e(PF,uG),e(uG,Hfr),e(PF,Ufr),e(te,Jfr),e(te,$F),e($F,p_e),e(p_e,Yfr),e($F,Kfr),e($F,bG),e(bG,Zfr),e($F,emr),e(te,omr),e(te,IF),e(IF,__e),e(__e,rmr),e(IF,tmr),e(IF,vG),e(vG,amr),e(IF,nmr),e(te,smr),e(te,jF),e(jF,u_e),e(u_e,lmr),e(jF,imr),e(jF,TG),e(TG,dmr),e(jF,cmr),e(te,fmr),e(te,DF),e(DF,b_e),e(b_e,mmr),e(DF,gmr),e(DF,FG),e(FG,hmr),e(DF,pmr),e(te,_mr),e(te,NF),e(NF,v_e),e(v_e,umr),e(NF,bmr),e(NF,CG),e(CG,vmr),e(NF,Tmr),e(te,Fmr),e(te,qF),e(qF,T_e),e(T_e,Cmr),e(qF,Mmr),e(qF,MG),e(MG,Emr),e(qF,ymr),e(te,wmr),e(te,OF),e(OF,F_e),e(F_e,Amr),e(OF,Lmr),e(OF,EG),e(EG,Bmr),e(OF,xmr),e(te,kmr),e(te,GF),e(GF,C_e),e(C_e,Rmr),e(GF,Smr),e(GF,yG),e(yG,Pmr),e(GF,$mr),e(te,Imr),e(te,XF),e(XF,M_e),e(M_e,jmr),e(XF,Dmr),e(XF,wG),e(wG,Nmr),e(XF,qmr),e(te,Omr),e(te,VF),e(VF,E_e),e(E_e,Gmr),e(VF,Xmr),e(VF,AG),e(AG,Vmr),e(VF,zmr),e(te,Wmr),e(te,zF),e(zF,y_e),e(y_e,Qmr),e(zF,Hmr),e(zF,LG),e(LG,Umr),e(zF,Jmr),e(te,Ymr),e(te,WF),e(WF,w_e),e(w_e,Kmr),e(WF,Zmr),e(WF,BG),e(BG,egr),e(WF,ogr),e(te,rgr),e(te,QF),e(QF,A_e),e(A_e,tgr),e(QF,agr),e(QF,xG),e(xG,ngr),e(QF,sgr),e(Fo,lgr),e(Fo,L_e),e(L_e,igr),e(Fo,dgr),g(FA,Fo,null),b(d,zxe,u),b(d,Ic,u),e(Ic,HF),e(HF,B_e),g(CA,B_e,null),e(Ic,cgr),e(Ic,x_e),e(x_e,fgr),b(d,Wxe,u),b(d,yr,u),g(MA,yr,null),e(yr,mgr),e(yr,jc),e(jc,ggr),e(jc,k_e),e(k_e,hgr),e(jc,pgr),e(jc,R_e),e(R_e,_gr),e(jc,ugr),e(yr,bgr),e(yr,EA),e(EA,vgr),e(EA,S_e),e(S_e,Tgr),e(EA,Fgr),e(yr,Cgr),e(yr,vt),g(yA,vt,null),e(vt,Mgr),e(vt,P_e),e(P_e,Egr),e(vt,ygr),e(vt,Dc),e(Dc,wgr),e(Dc,$_e),e($_e,Agr),e(Dc,Lgr),e(Dc,I_e),e(I_e,Bgr),e(Dc,xgr),e(vt,kgr),e(vt,j_e),e(j_e,Rgr),e(vt,Sgr),g(wA,vt,null),e(yr,Pgr),e(yr,Co),g(AA,Co,null),e(Co,$gr),e(Co,D_e),e(D_e,Igr),e(Co,jgr),e(Co,Mn),e(Mn,Dgr),e(Mn,N_e),e(N_e,Ngr),e(Mn,qgr),e(Mn,q_e),e(q_e,Ogr),e(Mn,Ggr),e(Mn,O_e),e(O_e,Xgr),e(Mn,Vgr),e(Co,zgr),e(Co,G_e),e(G_e,UF),e(UF,X_e),e(X_e,Wgr),e(UF,Qgr),e(UF,kG),e(kG,Hgr),e(UF,Ugr),e(Co,Jgr),e(Co,V_e),e(V_e,Ygr),e(Co,Kgr),g(LA,Co,null),b(d,Qxe,u),b(d,Nc,u),e(Nc,JF),e(JF,z_e),g(BA,z_e,null),e(Nc,Zgr),e(Nc,W_e),e(W_e,ehr),b(d,Hxe,u),b(d,wr,u),g(xA,wr,null),e(wr,ohr),e(wr,qc),e(qc,rhr),e(qc,Q_e),e(Q_e,thr),e(qc,ahr),e(qc,H_e),e(H_e,nhr),e(qc,shr),e(wr,lhr),e(wr,kA),e(kA,ihr),e(kA,U_e),e(U_e,dhr),e(kA,chr),e(wr,fhr),e(wr,Tt),g(RA,Tt,null),e(Tt,mhr),e(Tt,J_e),e(J_e,ghr),e(Tt,hhr),e(Tt,Oc),e(Oc,phr),e(Oc,Y_e),e(Y_e,_hr),e(Oc,uhr),e(Oc,K_e),e(K_e,bhr),e(Oc,vhr),e(Tt,Thr),e(Tt,Z_e),e(Z_e,Fhr),e(Tt,Chr),g(SA,Tt,null),e(wr,Mhr),e(wr,Mo),g(PA,Mo,null),e(Mo,Ehr),e(Mo,eue),e(eue,yhr),e(Mo,whr),e(Mo,En),e(En,Ahr),e(En,oue),e(oue,Lhr),e(En,Bhr),e(En,rue),e(rue,xhr),e(En,khr),e(En,tue),e(tue,Rhr),e(En,Shr),e(Mo,Phr),e(Mo,K),e(K,YF),e(YF,aue),e(aue,$hr),e(YF,Ihr),e(YF,RG),e(RG,jhr),e(YF,Dhr),e(K,Nhr),e(K,KF),e(KF,nue),e(nue,qhr),e(KF,Ohr),e(KF,SG),e(SG,Ghr),e(KF,Xhr),e(K,Vhr),e(K,ZF),e(ZF,sue),e(sue,zhr),e(ZF,Whr),e(ZF,PG),e(PG,Qhr),e(ZF,Hhr),e(K,Uhr),e(K,e9),e(e9,lue),e(lue,Jhr),e(e9,Yhr),e(e9,$G),e($G,Khr),e(e9,Zhr),e(K,epr),e(K,o9),e(o9,iue),e(iue,opr),e(o9,rpr),e(o9,IG),e(IG,tpr),e(o9,apr),e(K,npr),e(K,r9),e(r9,due),e(due,spr),e(r9,lpr),e(r9,jG),e(jG,ipr),e(r9,dpr),e(K,cpr),e(K,t9),e(t9,cue),e(cue,fpr),e(t9,mpr),e(t9,DG),e(DG,gpr),e(t9,hpr),e(K,ppr),e(K,a9),e(a9,fue),e(fue,_pr),e(a9,upr),e(a9,NG),e(NG,bpr),e(a9,vpr),e(K,Tpr),e(K,n9),e(n9,mue),e(mue,Fpr),e(n9,Cpr),e(n9,qG),e(qG,Mpr),e(n9,Epr),e(K,ypr),e(K,s9),e(s9,gue),e(gue,wpr),e(s9,Apr),e(s9,OG),e(OG,Lpr),e(s9,Bpr),e(K,xpr),e(K,l9),e(l9,hue),e(hue,kpr),e(l9,Rpr),e(l9,GG),e(GG,Spr),e(l9,Ppr),e(K,$pr),e(K,i9),e(i9,pue),e(pue,Ipr),e(i9,jpr),e(i9,XG),e(XG,Dpr),e(i9,Npr),e(K,qpr),e(K,d9),e(d9,_ue),e(_ue,Opr),e(d9,Gpr),e(d9,VG),e(VG,Xpr),e(d9,Vpr),e(K,zpr),e(K,c9),e(c9,uue),e(uue,Wpr),e(c9,Qpr),e(c9,zG),e(zG,Hpr),e(c9,Upr),e(K,Jpr),e(K,f9),e(f9,bue),e(bue,Ypr),e(f9,Kpr),e(f9,WG),e(WG,Zpr),e(f9,e_r),e(K,o_r),e(K,m9),e(m9,vue),e(vue,r_r),e(m9,t_r),e(m9,QG),e(QG,a_r),e(m9,n_r),e(K,s_r),e(K,g9),e(g9,Tue),e(Tue,l_r),e(g9,i_r),e(g9,HG),e(HG,d_r),e(g9,c_r),e(K,f_r),e(K,h9),e(h9,Fue),e(Fue,m_r),e(h9,g_r),e(h9,UG),e(UG,h_r),e(h9,p_r),e(K,__r),e(K,p9),e(p9,Cue),e(Cue,u_r),e(p9,b_r),e(p9,JG),e(JG,v_r),e(p9,T_r),e(K,F_r),e(K,_9),e(_9,Mue),e(Mue,C_r),e(_9,M_r),e(_9,YG),e(YG,E_r),e(_9,y_r),e(Mo,w_r),e(Mo,Eue),e(Eue,A_r),e(Mo,L_r),g($A,Mo,null),b(d,Uxe,u),b(d,Gc,u),e(Gc,u9),e(u9,yue),g(IA,yue,null),e(Gc,B_r),e(Gc,wue),e(wue,x_r),b(d,Jxe,u),b(d,Ar,u),g(jA,Ar,null),e(Ar,k_r),e(Ar,Xc),e(Xc,R_r),e(Xc,Aue),e(Aue,S_r),e(Xc,P_r),e(Xc,Lue),e(Lue,$_r),e(Xc,I_r),e(Ar,j_r),e(Ar,DA),e(DA,D_r),e(DA,Bue),e(Bue,N_r),e(DA,q_r),e(Ar,O_r),e(Ar,Ft),g(NA,Ft,null),e(Ft,G_r),e(Ft,xue),e(xue,X_r),e(Ft,V_r),e(Ft,Vc),e(Vc,z_r),e(Vc,kue),e(kue,W_r),e(Vc,Q_r),e(Vc,Rue),e(Rue,H_r),e(Vc,U_r),e(Ft,J_r),e(Ft,Sue),e(Sue,Y_r),e(Ft,K_r),g(qA,Ft,null),e(Ar,Z_r),e(Ar,Eo),g(OA,Eo,null),e(Eo,eur),e(Eo,Pue),e(Pue,our),e(Eo,rur),e(Eo,yn),e(yn,tur),e(yn,$ue),e($ue,aur),e(yn,nur),e(yn,Iue),e(Iue,sur),e(yn,lur),e(yn,jue),e(jue,iur),e(yn,dur),e(Eo,cur),e(Eo,Z),e(Z,b9),e(b9,Due),e(Due,fur),e(b9,mur),e(b9,KG),e(KG,gur),e(b9,hur),e(Z,pur),e(Z,v9),e(v9,Nue),e(Nue,_ur),e(v9,uur),e(v9,ZG),e(ZG,bur),e(v9,vur),e(Z,Tur),e(Z,T9),e(T9,que),e(que,Fur),e(T9,Cur),e(T9,eX),e(eX,Mur),e(T9,Eur),e(Z,yur),e(Z,F9),e(F9,Oue),e(Oue,wur),e(F9,Aur),e(F9,oX),e(oX,Lur),e(F9,Bur),e(Z,xur),e(Z,C9),e(C9,Gue),e(Gue,kur),e(C9,Rur),e(C9,rX),e(rX,Sur),e(C9,Pur),e(Z,$ur),e(Z,M9),e(M9,Xue),e(Xue,Iur),e(M9,jur),e(M9,tX),e(tX,Dur),e(M9,Nur),e(Z,qur),e(Z,E9),e(E9,Vue),e(Vue,Our),e(E9,Gur),e(E9,aX),e(aX,Xur),e(E9,Vur),e(Z,zur),e(Z,y9),e(y9,zue),e(zue,Wur),e(y9,Qur),e(y9,nX),e(nX,Hur),e(y9,Uur),e(Z,Jur),e(Z,w9),e(w9,Wue),e(Wue,Yur),e(w9,Kur),e(w9,sX),e(sX,Zur),e(w9,e2r),e(Z,o2r),e(Z,A9),e(A9,Que),e(Que,r2r),e(A9,t2r),e(A9,lX),e(lX,a2r),e(A9,n2r),e(Z,s2r),e(Z,L9),e(L9,Hue),e(Hue,l2r),e(L9,i2r),e(L9,iX),e(iX,d2r),e(L9,c2r),e(Z,f2r),e(Z,B9),e(B9,Uue),e(Uue,m2r),e(B9,g2r),e(B9,dX),e(dX,h2r),e(B9,p2r),e(Z,_2r),e(Z,x9),e(x9,Jue),e(Jue,u2r),e(x9,b2r),e(x9,cX),e(cX,v2r),e(x9,T2r),e(Z,F2r),e(Z,k9),e(k9,Yue),e(Yue,C2r),e(k9,M2r),e(k9,fX),e(fX,E2r),e(k9,y2r),e(Z,w2r),e(Z,R9),e(R9,Kue),e(Kue,A2r),e(R9,L2r),e(R9,mX),e(mX,B2r),e(R9,x2r),e(Z,k2r),e(Z,S9),e(S9,Zue),e(Zue,R2r),e(S9,S2r),e(S9,gX),e(gX,P2r),e(S9,$2r),e(Z,I2r),e(Z,P9),e(P9,e2e),e(e2e,j2r),e(P9,D2r),e(P9,hX),e(hX,N2r),e(P9,q2r),e(Z,O2r),e(Z,$9),e($9,o2e),e(o2e,G2r),e($9,X2r),e($9,pX),e(pX,V2r),e($9,z2r),e(Z,W2r),e(Z,I9),e(I9,r2e),e(r2e,Q2r),e(I9,H2r),e(I9,_X),e(_X,U2r),e(I9,J2r),e(Eo,Y2r),e(Eo,t2e),e(t2e,K2r),e(Eo,Z2r),g(GA,Eo,null),b(d,Yxe,u),b(d,zc,u),e(zc,j9),e(j9,a2e),g(XA,a2e,null),e(zc,e1r),e(zc,n2e),e(n2e,o1r),b(d,Kxe,u),b(d,Lr,u),g(VA,Lr,null),e(Lr,r1r),e(Lr,Wc),e(Wc,t1r),e(Wc,s2e),e(s2e,a1r),e(Wc,n1r),e(Wc,l2e),e(l2e,s1r),e(Wc,l1r),e(Lr,i1r),e(Lr,zA),e(zA,d1r),e(zA,i2e),e(i2e,c1r),e(zA,f1r),e(Lr,m1r),e(Lr,Ct),g(WA,Ct,null),e(Ct,g1r),e(Ct,d2e),e(d2e,h1r),e(Ct,p1r),e(Ct,Qc),e(Qc,_1r),e(Qc,c2e),e(c2e,u1r),e(Qc,b1r),e(Qc,f2e),e(f2e,v1r),e(Qc,T1r),e(Ct,F1r),e(Ct,m2e),e(m2e,C1r),e(Ct,M1r),g(QA,Ct,null),e(Lr,E1r),e(Lr,yo),g(HA,yo,null),e(yo,y1r),e(yo,g2e),e(g2e,w1r),e(yo,A1r),e(yo,wn),e(wn,L1r),e(wn,h2e),e(h2e,B1r),e(wn,x1r),e(wn,p2e),e(p2e,k1r),e(wn,R1r),e(wn,_2e),e(_2e,S1r),e(wn,P1r),e(yo,$1r),e(yo,u2e),e(u2e,D9),e(D9,b2e),e(b2e,I1r),e(D9,j1r),e(D9,uX),e(uX,D1r),e(D9,N1r),e(yo,q1r),e(yo,v2e),e(v2e,O1r),e(yo,G1r),g(UA,yo,null),b(d,Zxe,u),b(d,Hc,u),e(Hc,N9),e(N9,T2e),g(JA,T2e,null),e(Hc,X1r),e(Hc,F2e),e(F2e,V1r),b(d,eke,u),b(d,Br,u),g(YA,Br,null),e(Br,z1r),e(Br,Uc),e(Uc,W1r),e(Uc,C2e),e(C2e,Q1r),e(Uc,H1r),e(Uc,M2e),e(M2e,U1r),e(Uc,J1r),e(Br,Y1r),e(Br,KA),e(KA,K1r),e(KA,E2e),e(E2e,Z1r),e(KA,ebr),e(Br,obr),e(Br,Mt),g(ZA,Mt,null),e(Mt,rbr),e(Mt,y2e),e(y2e,tbr),e(Mt,abr),e(Mt,Jc),e(Jc,nbr),e(Jc,w2e),e(w2e,sbr),e(Jc,lbr),e(Jc,A2e),e(A2e,ibr),e(Jc,dbr),e(Mt,cbr),e(Mt,L2e),e(L2e,fbr),e(Mt,mbr),g(e0,Mt,null),e(Br,gbr),e(Br,wo),g(o0,wo,null),e(wo,hbr),e(wo,B2e),e(B2e,pbr),e(wo,_br),e(wo,An),e(An,ubr),e(An,x2e),e(x2e,bbr),e(An,vbr),e(An,k2e),e(k2e,Tbr),e(An,Fbr),e(An,R2e),e(R2e,Cbr),e(An,Mbr),e(wo,Ebr),e(wo,S2e),e(S2e,q9),e(q9,P2e),e(P2e,ybr),e(q9,wbr),e(q9,bX),e(bX,Abr),e(q9,Lbr),e(wo,Bbr),e(wo,$2e),e($2e,xbr),e(wo,kbr),g(r0,wo,null),b(d,oke,u),b(d,Yc,u),e(Yc,O9),e(O9,I2e),g(t0,I2e,null),e(Yc,Rbr),e(Yc,j2e),e(j2e,Sbr),b(d,rke,u),b(d,xr,u),g(a0,xr,null),e(xr,Pbr),e(xr,Kc),e(Kc,$br),e(Kc,D2e),e(D2e,Ibr),e(Kc,jbr),e(Kc,N2e),e(N2e,Dbr),e(Kc,Nbr),e(xr,qbr),e(xr,n0),e(n0,Obr),e(n0,q2e),e(q2e,Gbr),e(n0,Xbr),e(xr,Vbr),e(xr,Et),g(s0,Et,null),e(Et,zbr),e(Et,O2e),e(O2e,Wbr),e(Et,Qbr),e(Et,Zc),e(Zc,Hbr),e(Zc,G2e),e(G2e,Ubr),e(Zc,Jbr),e(Zc,X2e),e(X2e,Ybr),e(Zc,Kbr),e(Et,Zbr),e(Et,V2e),e(V2e,e3r),e(Et,o3r),g(l0,Et,null),e(xr,r3r),e(xr,Ao),g(i0,Ao,null),e(Ao,t3r),e(Ao,z2e),e(z2e,a3r),e(Ao,n3r),e(Ao,Ln),e(Ln,s3r),e(Ln,W2e),e(W2e,l3r),e(Ln,i3r),e(Ln,Q2e),e(Q2e,d3r),e(Ln,c3r),e(Ln,H2e),e(H2e,f3r),e(Ln,m3r),e(Ao,g3r),e(Ao,z),e(z,G9),e(G9,U2e),e(U2e,h3r),e(G9,p3r),e(G9,vX),e(vX,_3r),e(G9,u3r),e(z,b3r),e(z,X9),e(X9,J2e),e(J2e,v3r),e(X9,T3r),e(X9,TX),e(TX,F3r),e(X9,C3r),e(z,M3r),e(z,V9),e(V9,Y2e),e(Y2e,E3r),e(V9,y3r),e(V9,FX),e(FX,w3r),e(V9,A3r),e(z,L3r),e(z,z9),e(z9,K2e),e(K2e,B3r),e(z9,x3r),e(z9,CX),e(CX,k3r),e(z9,R3r),e(z,S3r),e(z,W9),e(W9,Z2e),e(Z2e,P3r),e(W9,$3r),e(W9,MX),e(MX,I3r),e(W9,j3r),e(z,D3r),e(z,Q9),e(Q9,e1e),e(e1e,N3r),e(Q9,q3r),e(Q9,EX),e(EX,O3r),e(Q9,G3r),e(z,X3r),e(z,H9),e(H9,o1e),e(o1e,V3r),e(H9,z3r),e(H9,yX),e(yX,W3r),e(H9,Q3r),e(z,H3r),e(z,U9),e(U9,r1e),e(r1e,U3r),e(U9,J3r),e(U9,wX),e(wX,Y3r),e(U9,K3r),e(z,Z3r),e(z,J9),e(J9,t1e),e(t1e,e5r),e(J9,o5r),e(J9,AX),e(AX,r5r),e(J9,t5r),e(z,a5r),e(z,Y9),e(Y9,a1e),e(a1e,n5r),e(Y9,s5r),e(Y9,LX),e(LX,l5r),e(Y9,i5r),e(z,d5r),e(z,K9),e(K9,n1e),e(n1e,c5r),e(K9,f5r),e(K9,BX),e(BX,m5r),e(K9,g5r),e(z,h5r),e(z,Z9),e(Z9,s1e),e(s1e,p5r),e(Z9,_5r),e(Z9,xX),e(xX,u5r),e(Z9,b5r),e(z,v5r),e(z,eC),e(eC,l1e),e(l1e,T5r),e(eC,F5r),e(eC,kX),e(kX,C5r),e(eC,M5r),e(z,E5r),e(z,oC),e(oC,i1e),e(i1e,y5r),e(oC,w5r),e(oC,RX),e(RX,A5r),e(oC,L5r),e(z,B5r),e(z,rC),e(rC,d1e),e(d1e,x5r),e(rC,k5r),e(rC,SX),e(SX,R5r),e(rC,S5r),e(z,P5r),e(z,tC),e(tC,c1e),e(c1e,$5r),e(tC,I5r),e(tC,PX),e(PX,j5r),e(tC,D5r),e(z,N5r),e(z,aC),e(aC,f1e),e(f1e,q5r),e(aC,O5r),e(aC,$X),e($X,G5r),e(aC,X5r),e(z,V5r),e(z,nC),e(nC,m1e),e(m1e,z5r),e(nC,W5r),e(nC,IX),e(IX,Q5r),e(nC,H5r),e(z,U5r),e(z,sC),e(sC,g1e),e(g1e,J5r),e(sC,Y5r),e(sC,jX),e(jX,K5r),e(sC,Z5r),e(z,evr),e(z,lC),e(lC,h1e),e(h1e,ovr),e(lC,rvr),e(lC,DX),e(DX,tvr),e(lC,avr),e(z,nvr),e(z,iC),e(iC,p1e),e(p1e,svr),e(iC,lvr),e(iC,NX),e(NX,ivr),e(iC,dvr),e(z,cvr),e(z,dC),e(dC,_1e),e(_1e,fvr),e(dC,mvr),e(dC,qX),e(qX,gvr),e(dC,hvr),e(z,pvr),e(z,cC),e(cC,u1e),e(u1e,_vr),e(cC,uvr),e(cC,OX),e(OX,bvr),e(cC,vvr),e(z,Tvr),e(z,fC),e(fC,b1e),e(b1e,Fvr),e(fC,Cvr),e(fC,GX),e(GX,Mvr),e(fC,Evr),e(Ao,yvr),e(Ao,v1e),e(v1e,wvr),e(Ao,Avr),g(d0,Ao,null),b(d,tke,u),b(d,ef,u),e(ef,mC),e(mC,T1e),g(c0,T1e,null),e(ef,Lvr),e(ef,F1e),e(F1e,Bvr),b(d,ake,u),b(d,kr,u),g(f0,kr,null),e(kr,xvr),e(kr,of),e(of,kvr),e(of,C1e),e(C1e,Rvr),e(of,Svr),e(of,M1e),e(M1e,Pvr),e(of,$vr),e(kr,Ivr),e(kr,m0),e(m0,jvr),e(m0,E1e),e(E1e,Dvr),e(m0,Nvr),e(kr,qvr),e(kr,yt),g(g0,yt,null),e(yt,Ovr),e(yt,y1e),e(y1e,Gvr),e(yt,Xvr),e(yt,rf),e(rf,Vvr),e(rf,w1e),e(w1e,zvr),e(rf,Wvr),e(rf,A1e),e(A1e,Qvr),e(rf,Hvr),e(yt,Uvr),e(yt,L1e),e(L1e,Jvr),e(yt,Yvr),g(h0,yt,null),e(kr,Kvr),e(kr,Lo),g(p0,Lo,null),e(Lo,Zvr),e(Lo,B1e),e(B1e,eTr),e(Lo,oTr),e(Lo,Bn),e(Bn,rTr),e(Bn,x1e),e(x1e,tTr),e(Bn,aTr),e(Bn,k1e),e(k1e,nTr),e(Bn,sTr),e(Bn,R1e),e(R1e,lTr),e(Bn,iTr),e(Lo,dTr),e(Lo,xn),e(xn,gC),e(gC,S1e),e(S1e,cTr),e(gC,fTr),e(gC,XX),e(XX,mTr),e(gC,gTr),e(xn,hTr),e(xn,hC),e(hC,P1e),e(P1e,pTr),e(hC,_Tr),e(hC,VX),e(VX,uTr),e(hC,bTr),e(xn,vTr),e(xn,pC),e(pC,$1e),e($1e,TTr),e(pC,FTr),e(pC,zX),e(zX,CTr),e(pC,MTr),e(xn,ETr),e(xn,_C),e(_C,I1e),e(I1e,yTr),e(_C,wTr),e(_C,WX),e(WX,ATr),e(_C,LTr),e(Lo,BTr),e(Lo,j1e),e(j1e,xTr),e(Lo,kTr),g(_0,Lo,null),b(d,nke,u),b(d,tf,u),e(tf,uC),e(uC,D1e),g(u0,D1e,null),e(tf,RTr),e(tf,N1e),e(N1e,STr),b(d,ske,u),b(d,Rr,u),g(b0,Rr,null),e(Rr,PTr),e(Rr,af),e(af,$Tr),e(af,q1e),e(q1e,ITr),e(af,jTr),e(af,O1e),e(O1e,DTr),e(af,NTr),e(Rr,qTr),e(Rr,v0),e(v0,OTr),e(v0,G1e),e(G1e,GTr),e(v0,XTr),e(Rr,VTr),e(Rr,wt),g(T0,wt,null),e(wt,zTr),e(wt,X1e),e(X1e,WTr),e(wt,QTr),e(wt,nf),e(nf,HTr),e(nf,V1e),e(V1e,UTr),e(nf,JTr),e(nf,z1e),e(z1e,YTr),e(nf,KTr),e(wt,ZTr),e(wt,W1e),e(W1e,eFr),e(wt,oFr),g(F0,wt,null),e(Rr,rFr),e(Rr,Bo),g(C0,Bo,null),e(Bo,tFr),e(Bo,Q1e),e(Q1e,aFr),e(Bo,nFr),e(Bo,kn),e(kn,sFr),e(kn,H1e),e(H1e,lFr),e(kn,iFr),e(kn,U1e),e(U1e,dFr),e(kn,cFr),e(kn,J1e),e(J1e,fFr),e(kn,mFr),e(Bo,gFr),e(Bo,fe),e(fe,bC),e(bC,Y1e),e(Y1e,hFr),e(bC,pFr),e(bC,QX),e(QX,_Fr),e(bC,uFr),e(fe,bFr),e(fe,vC),e(vC,K1e),e(K1e,vFr),e(vC,TFr),e(vC,HX),e(HX,FFr),e(vC,CFr),e(fe,MFr),e(fe,TC),e(TC,Z1e),e(Z1e,EFr),e(TC,yFr),e(TC,UX),e(UX,wFr),e(TC,AFr),e(fe,LFr),e(fe,FC),e(FC,ebe),e(ebe,BFr),e(FC,xFr),e(FC,JX),e(JX,kFr),e(FC,RFr),e(fe,SFr),e(fe,CC),e(CC,obe),e(obe,PFr),e(CC,$Fr),e(CC,YX),e(YX,IFr),e(CC,jFr),e(fe,DFr),e(fe,MC),e(MC,rbe),e(rbe,NFr),e(MC,qFr),e(MC,KX),e(KX,OFr),e(MC,GFr),e(fe,XFr),e(fe,EC),e(EC,tbe),e(tbe,VFr),e(EC,zFr),e(EC,ZX),e(ZX,WFr),e(EC,QFr),e(fe,HFr),e(fe,yC),e(yC,abe),e(abe,UFr),e(yC,JFr),e(yC,eV),e(eV,YFr),e(yC,KFr),e(fe,ZFr),e(fe,wC),e(wC,nbe),e(nbe,e9r),e(wC,o9r),e(wC,oV),e(oV,r9r),e(wC,t9r),e(fe,a9r),e(fe,AC),e(AC,sbe),e(sbe,n9r),e(AC,s9r),e(AC,rV),e(rV,l9r),e(AC,i9r),e(fe,d9r),e(fe,LC),e(LC,lbe),e(lbe,c9r),e(LC,f9r),e(LC,tV),e(tV,m9r),e(LC,g9r),e(Bo,h9r),e(Bo,ibe),e(ibe,p9r),e(Bo,_9r),g(M0,Bo,null),b(d,lke,u),b(d,sf,u),e(sf,BC),e(BC,dbe),g(E0,dbe,null),e(sf,u9r),e(sf,cbe),e(cbe,b9r),b(d,ike,u),b(d,Sr,u),g(y0,Sr,null),e(Sr,v9r),e(Sr,lf),e(lf,T9r),e(lf,fbe),e(fbe,F9r),e(lf,C9r),e(lf,mbe),e(mbe,M9r),e(lf,E9r),e(Sr,y9r),e(Sr,w0),e(w0,w9r),e(w0,gbe),e(gbe,A9r),e(w0,L9r),e(Sr,B9r),e(Sr,At),g(A0,At,null),e(At,x9r),e(At,hbe),e(hbe,k9r),e(At,R9r),e(At,df),e(df,S9r),e(df,pbe),e(pbe,P9r),e(df,$9r),e(df,_be),e(_be,I9r),e(df,j9r),e(At,D9r),e(At,ube),e(ube,N9r),e(At,q9r),g(L0,At,null),e(Sr,O9r),e(Sr,xo),g(B0,xo,null),e(xo,G9r),e(xo,bbe),e(bbe,X9r),e(xo,V9r),e(xo,Rn),e(Rn,z9r),e(Rn,vbe),e(vbe,W9r),e(Rn,Q9r),e(Rn,Tbe),e(Tbe,H9r),e(Rn,U9r),e(Rn,Fbe),e(Fbe,J9r),e(Rn,Y9r),e(xo,K9r),e(xo,ve),e(ve,xC),e(xC,Cbe),e(Cbe,Z9r),e(xC,eCr),e(xC,aV),e(aV,oCr),e(xC,rCr),e(ve,tCr),e(ve,kC),e(kC,Mbe),e(Mbe,aCr),e(kC,nCr),e(kC,nV),e(nV,sCr),e(kC,lCr),e(ve,iCr),e(ve,RC),e(RC,Ebe),e(Ebe,dCr),e(RC,cCr),e(RC,sV),e(sV,fCr),e(RC,mCr),e(ve,gCr),e(ve,SC),e(SC,ybe),e(ybe,hCr),e(SC,pCr),e(SC,lV),e(lV,_Cr),e(SC,uCr),e(ve,bCr),e(ve,PC),e(PC,wbe),e(wbe,vCr),e(PC,TCr),e(PC,iV),e(iV,FCr),e(PC,CCr),e(ve,MCr),e(ve,$C),e($C,Abe),e(Abe,ECr),e($C,yCr),e($C,dV),e(dV,wCr),e($C,ACr),e(ve,LCr),e(ve,IC),e(IC,Lbe),e(Lbe,BCr),e(IC,xCr),e(IC,cV),e(cV,kCr),e(IC,RCr),e(ve,SCr),e(ve,jC),e(jC,Bbe),e(Bbe,PCr),e(jC,$Cr),e(jC,fV),e(fV,ICr),e(jC,jCr),e(ve,DCr),e(ve,DC),e(DC,xbe),e(xbe,NCr),e(DC,qCr),e(DC,mV),e(mV,OCr),e(DC,GCr),e(xo,XCr),e(xo,kbe),e(kbe,VCr),e(xo,zCr),g(x0,xo,null),b(d,dke,u),b(d,cf,u),e(cf,NC),e(NC,Rbe),g(k0,Rbe,null),e(cf,WCr),e(cf,Sbe),e(Sbe,QCr),b(d,cke,u),b(d,Pr,u),g(R0,Pr,null),e(Pr,HCr),e(Pr,ff),e(ff,UCr),e(ff,Pbe),e(Pbe,JCr),e(ff,YCr),e(ff,$be),e($be,KCr),e(ff,ZCr),e(Pr,e4r),e(Pr,S0),e(S0,o4r),e(S0,Ibe),e(Ibe,r4r),e(S0,t4r),e(Pr,a4r),e(Pr,Lt),g(P0,Lt,null),e(Lt,n4r),e(Lt,jbe),e(jbe,s4r),e(Lt,l4r),e(Lt,mf),e(mf,i4r),e(mf,Dbe),e(Dbe,d4r),e(mf,c4r),e(mf,Nbe),e(Nbe,f4r),e(mf,m4r),e(Lt,g4r),e(Lt,qbe),e(qbe,h4r),e(Lt,p4r),g($0,Lt,null),e(Pr,_4r),e(Pr,ko),g(I0,ko,null),e(ko,u4r),e(ko,Obe),e(Obe,b4r),e(ko,v4r),e(ko,Sn),e(Sn,T4r),e(Sn,Gbe),e(Gbe,F4r),e(Sn,C4r),e(Sn,Xbe),e(Xbe,M4r),e(Sn,E4r),e(Sn,Vbe),e(Vbe,y4r),e(Sn,w4r),e(ko,A4r),e(ko,Te),e(Te,qC),e(qC,zbe),e(zbe,L4r),e(qC,B4r),e(qC,gV),e(gV,x4r),e(qC,k4r),e(Te,R4r),e(Te,OC),e(OC,Wbe),e(Wbe,S4r),e(OC,P4r),e(OC,hV),e(hV,$4r),e(OC,I4r),e(Te,j4r),e(Te,GC),e(GC,Qbe),e(Qbe,D4r),e(GC,N4r),e(GC,pV),e(pV,q4r),e(GC,O4r),e(Te,G4r),e(Te,XC),e(XC,Hbe),e(Hbe,X4r),e(XC,V4r),e(XC,_V),e(_V,z4r),e(XC,W4r),e(Te,Q4r),e(Te,VC),e(VC,Ube),e(Ube,H4r),e(VC,U4r),e(VC,uV),e(uV,J4r),e(VC,Y4r),e(Te,K4r),e(Te,zC),e(zC,Jbe),e(Jbe,Z4r),e(zC,eMr),e(zC,bV),e(bV,oMr),e(zC,rMr),e(Te,tMr),e(Te,WC),e(WC,Ybe),e(Ybe,aMr),e(WC,nMr),e(WC,vV),e(vV,sMr),e(WC,lMr),e(Te,iMr),e(Te,QC),e(QC,Kbe),e(Kbe,dMr),e(QC,cMr),e(QC,TV),e(TV,fMr),e(QC,mMr),e(Te,gMr),e(Te,HC),e(HC,Zbe),e(Zbe,hMr),e(HC,pMr),e(HC,FV),e(FV,_Mr),e(HC,uMr),e(ko,bMr),e(ko,e3e),e(e3e,vMr),e(ko,TMr),g(j0,ko,null),b(d,fke,u),b(d,gf,u),e(gf,UC),e(UC,o3e),g(D0,o3e,null),e(gf,FMr),e(gf,r3e),e(r3e,CMr),b(d,mke,u),b(d,$r,u),g(N0,$r,null),e($r,MMr),e($r,hf),e(hf,EMr),e(hf,t3e),e(t3e,yMr),e(hf,wMr),e(hf,a3e),e(a3e,AMr),e(hf,LMr),e($r,BMr),e($r,q0),e(q0,xMr),e(q0,n3e),e(n3e,kMr),e(q0,RMr),e($r,SMr),e($r,Bt),g(O0,Bt,null),e(Bt,PMr),e(Bt,s3e),e(s3e,$Mr),e(Bt,IMr),e(Bt,pf),e(pf,jMr),e(pf,l3e),e(l3e,DMr),e(pf,NMr),e(pf,i3e),e(i3e,qMr),e(pf,OMr),e(Bt,GMr),e(Bt,d3e),e(d3e,XMr),e(Bt,VMr),g(G0,Bt,null),e($r,zMr),e($r,Ro),g(X0,Ro,null),e(Ro,WMr),e(Ro,c3e),e(c3e,QMr),e(Ro,HMr),e(Ro,Pn),e(Pn,UMr),e(Pn,f3e),e(f3e,JMr),e(Pn,YMr),e(Pn,m3e),e(m3e,KMr),e(Pn,ZMr),e(Pn,g3e),e(g3e,eEr),e(Pn,oEr),e(Ro,rEr),e(Ro,Fe),e(Fe,JC),e(JC,h3e),e(h3e,tEr),e(JC,aEr),e(JC,CV),e(CV,nEr),e(JC,sEr),e(Fe,lEr),e(Fe,YC),e(YC,p3e),e(p3e,iEr),e(YC,dEr),e(YC,MV),e(MV,cEr),e(YC,fEr),e(Fe,mEr),e(Fe,KC),e(KC,_3e),e(_3e,gEr),e(KC,hEr),e(KC,EV),e(EV,pEr),e(KC,_Er),e(Fe,uEr),e(Fe,ZC),e(ZC,u3e),e(u3e,bEr),e(ZC,vEr),e(ZC,yV),e(yV,TEr),e(ZC,FEr),e(Fe,CEr),e(Fe,e4),e(e4,b3e),e(b3e,MEr),e(e4,EEr),e(e4,wV),e(wV,yEr),e(e4,wEr),e(Fe,AEr),e(Fe,o4),e(o4,v3e),e(v3e,LEr),e(o4,BEr),e(o4,AV),e(AV,xEr),e(o4,kEr),e(Fe,REr),e(Fe,r4),e(r4,T3e),e(T3e,SEr),e(r4,PEr),e(r4,LV),e(LV,$Er),e(r4,IEr),e(Fe,jEr),e(Fe,t4),e(t4,F3e),e(F3e,DEr),e(t4,NEr),e(t4,BV),e(BV,qEr),e(t4,OEr),e(Fe,GEr),e(Fe,a4),e(a4,C3e),e(C3e,XEr),e(a4,VEr),e(a4,xV),e(xV,zEr),e(a4,WEr),e(Ro,QEr),e(Ro,M3e),e(M3e,HEr),e(Ro,UEr),g(V0,Ro,null),b(d,gke,u),b(d,_f,u),e(_f,n4),e(n4,E3e),g(z0,E3e,null),e(_f,JEr),e(_f,y3e),e(y3e,YEr),b(d,hke,u),b(d,Ir,u),g(W0,Ir,null),e(Ir,KEr),e(Ir,uf),e(uf,ZEr),e(uf,w3e),e(w3e,eyr),e(uf,oyr),e(uf,A3e),e(A3e,ryr),e(uf,tyr),e(Ir,ayr),e(Ir,Q0),e(Q0,nyr),e(Q0,L3e),e(L3e,syr),e(Q0,lyr),e(Ir,iyr),e(Ir,xt),g(H0,xt,null),e(xt,dyr),e(xt,B3e),e(B3e,cyr),e(xt,fyr),e(xt,bf),e(bf,myr),e(bf,x3e),e(x3e,gyr),e(bf,hyr),e(bf,k3e),e(k3e,pyr),e(bf,_yr),e(xt,uyr),e(xt,R3e),e(R3e,byr),e(xt,vyr),g(U0,xt,null),e(Ir,Tyr),e(Ir,So),g(J0,So,null),e(So,Fyr),e(So,S3e),e(S3e,Cyr),e(So,Myr),e(So,$n),e($n,Eyr),e($n,P3e),e(P3e,yyr),e($n,wyr),e($n,$3e),e($3e,Ayr),e($n,Lyr),e($n,I3e),e(I3e,Byr),e($n,xyr),e(So,kyr),e(So,Ce),e(Ce,s4),e(s4,j3e),e(j3e,Ryr),e(s4,Syr),e(s4,kV),e(kV,Pyr),e(s4,$yr),e(Ce,Iyr),e(Ce,l4),e(l4,D3e),e(D3e,jyr),e(l4,Dyr),e(l4,RV),e(RV,Nyr),e(l4,qyr),e(Ce,Oyr),e(Ce,i4),e(i4,N3e),e(N3e,Gyr),e(i4,Xyr),e(i4,SV),e(SV,Vyr),e(i4,zyr),e(Ce,Wyr),e(Ce,d4),e(d4,q3e),e(q3e,Qyr),e(d4,Hyr),e(d4,PV),e(PV,Uyr),e(d4,Jyr),e(Ce,Yyr),e(Ce,c4),e(c4,O3e),e(O3e,Kyr),e(c4,Zyr),e(c4,$V),e($V,ewr),e(c4,owr),e(Ce,rwr),e(Ce,f4),e(f4,G3e),e(G3e,twr),e(f4,awr),e(f4,IV),e(IV,nwr),e(f4,swr),e(Ce,lwr),e(Ce,m4),e(m4,X3e),e(X3e,iwr),e(m4,dwr),e(m4,jV),e(jV,cwr),e(m4,fwr),e(Ce,mwr),e(Ce,g4),e(g4,V3e),e(V3e,gwr),e(g4,hwr),e(g4,DV),e(DV,pwr),e(g4,_wr),e(Ce,uwr),e(Ce,h4),e(h4,z3e),e(z3e,bwr),e(h4,vwr),e(h4,NV),e(NV,Twr),e(h4,Fwr),e(So,Cwr),e(So,W3e),e(W3e,Mwr),e(So,Ewr),g(Y0,So,null),b(d,pke,u),b(d,vf,u),e(vf,p4),e(p4,Q3e),g(K0,Q3e,null),e(vf,ywr),e(vf,H3e),e(H3e,wwr),b(d,_ke,u),b(d,jr,u),g(Z0,jr,null),e(jr,Awr),e(jr,Tf),e(Tf,Lwr),e(Tf,U3e),e(U3e,Bwr),e(Tf,xwr),e(Tf,J3e),e(J3e,kwr),e(Tf,Rwr),e(jr,Swr),e(jr,eL),e(eL,Pwr),e(eL,Y3e),e(Y3e,$wr),e(eL,Iwr),e(jr,jwr),e(jr,kt),g(oL,kt,null),e(kt,Dwr),e(kt,K3e),e(K3e,Nwr),e(kt,qwr),e(kt,Ff),e(Ff,Owr),e(Ff,Z3e),e(Z3e,Gwr),e(Ff,Xwr),e(Ff,e5e),e(e5e,Vwr),e(Ff,zwr),e(kt,Wwr),e(kt,o5e),e(o5e,Qwr),e(kt,Hwr),g(rL,kt,null),e(jr,Uwr),e(jr,Po),g(tL,Po,null),e(Po,Jwr),e(Po,r5e),e(r5e,Ywr),e(Po,Kwr),e(Po,In),e(In,Zwr),e(In,t5e),e(t5e,e6r),e(In,o6r),e(In,a5e),e(a5e,r6r),e(In,t6r),e(In,n5e),e(n5e,a6r),e(In,n6r),e(Po,s6r),e(Po,lo),e(lo,_4),e(_4,s5e),e(s5e,l6r),e(_4,i6r),e(_4,qV),e(qV,d6r),e(_4,c6r),e(lo,f6r),e(lo,u4),e(u4,l5e),e(l5e,m6r),e(u4,g6r),e(u4,OV),e(OV,h6r),e(u4,p6r),e(lo,_6r),e(lo,b4),e(b4,i5e),e(i5e,u6r),e(b4,b6r),e(b4,GV),e(GV,v6r),e(b4,T6r),e(lo,F6r),e(lo,v4),e(v4,d5e),e(d5e,C6r),e(v4,M6r),e(v4,XV),e(XV,E6r),e(v4,y6r),e(lo,w6r),e(lo,T4),e(T4,c5e),e(c5e,A6r),e(T4,L6r),e(T4,VV),e(VV,B6r),e(T4,x6r),e(lo,k6r),e(lo,F4),e(F4,f5e),e(f5e,R6r),e(F4,S6r),e(F4,zV),e(zV,P6r),e(F4,$6r),e(lo,I6r),e(lo,C4),e(C4,m5e),e(m5e,j6r),e(C4,D6r),e(C4,WV),e(WV,N6r),e(C4,q6r),e(Po,O6r),e(Po,g5e),e(g5e,G6r),e(Po,X6r),g(aL,Po,null),b(d,uke,u),b(d,Cf,u),e(Cf,M4),e(M4,h5e),g(nL,h5e,null),e(Cf,V6r),e(Cf,p5e),e(p5e,z6r),b(d,bke,u),b(d,Dr,u),g(sL,Dr,null),e(Dr,W6r),e(Dr,Mf),e(Mf,Q6r),e(Mf,_5e),e(_5e,H6r),e(Mf,U6r),e(Mf,u5e),e(u5e,J6r),e(Mf,Y6r),e(Dr,K6r),e(Dr,lL),e(lL,Z6r),e(lL,b5e),e(b5e,eAr),e(lL,oAr),e(Dr,rAr),e(Dr,Rt),g(iL,Rt,null),e(Rt,tAr),e(Rt,v5e),e(v5e,aAr),e(Rt,nAr),e(Rt,Ef),e(Ef,sAr),e(Ef,T5e),e(T5e,lAr),e(Ef,iAr),e(Ef,F5e),e(F5e,dAr),e(Ef,cAr),e(Rt,fAr),e(Rt,C5e),e(C5e,mAr),e(Rt,gAr),g(dL,Rt,null),e(Dr,hAr),e(Dr,$o),g(cL,$o,null),e($o,pAr),e($o,M5e),e(M5e,_Ar),e($o,uAr),e($o,jn),e(jn,bAr),e(jn,E5e),e(E5e,vAr),e(jn,TAr),e(jn,y5e),e(y5e,FAr),e(jn,CAr),e(jn,w5e),e(w5e,MAr),e(jn,EAr),e($o,yAr),e($o,io),e(io,E4),e(E4,A5e),e(A5e,wAr),e(E4,AAr),e(E4,QV),e(QV,LAr),e(E4,BAr),e(io,xAr),e(io,y4),e(y4,L5e),e(L5e,kAr),e(y4,RAr),e(y4,HV),e(HV,SAr),e(y4,PAr),e(io,$Ar),e(io,w4),e(w4,B5e),e(B5e,IAr),e(w4,jAr),e(w4,UV),e(UV,DAr),e(w4,NAr),e(io,qAr),e(io,A4),e(A4,x5e),e(x5e,OAr),e(A4,GAr),e(A4,JV),e(JV,XAr),e(A4,VAr),e(io,zAr),e(io,L4),e(L4,k5e),e(k5e,WAr),e(L4,QAr),e(L4,YV),e(YV,HAr),e(L4,UAr),e(io,JAr),e(io,B4),e(B4,R5e),e(R5e,YAr),e(B4,KAr),e(B4,KV),e(KV,ZAr),e(B4,e0r),e(io,o0r),e(io,x4),e(x4,S5e),e(S5e,r0r),e(x4,t0r),e(x4,ZV),e(ZV,a0r),e(x4,n0r),e($o,s0r),e($o,P5e),e(P5e,l0r),e($o,i0r),g(fL,$o,null),b(d,vke,u),b(d,yf,u),e(yf,k4),e(k4,$5e),g(mL,$5e,null),e(yf,d0r),e(yf,I5e),e(I5e,c0r),b(d,Tke,u),b(d,Nr,u),g(gL,Nr,null),e(Nr,f0r),e(Nr,wf),e(wf,m0r),e(wf,j5e),e(j5e,g0r),e(wf,h0r),e(wf,D5e),e(D5e,p0r),e(wf,_0r),e(Nr,u0r),e(Nr,hL),e(hL,b0r),e(hL,N5e),e(N5e,v0r),e(hL,T0r),e(Nr,F0r),e(Nr,St),g(pL,St,null),e(St,C0r),e(St,q5e),e(q5e,M0r),e(St,E0r),e(St,Af),e(Af,y0r),e(Af,O5e),e(O5e,w0r),e(Af,A0r),e(Af,G5e),e(G5e,L0r),e(Af,B0r),e(St,x0r),e(St,X5e),e(X5e,k0r),e(St,R0r),g(_L,St,null),e(Nr,S0r),e(Nr,Io),g(uL,Io,null),e(Io,P0r),e(Io,V5e),e(V5e,$0r),e(Io,I0r),e(Io,Dn),e(Dn,j0r),e(Dn,z5e),e(z5e,D0r),e(Dn,N0r),e(Dn,W5e),e(W5e,q0r),e(Dn,O0r),e(Dn,Q5e),e(Q5e,G0r),e(Dn,X0r),e(Io,V0r),e(Io,H5e),e(H5e,R4),e(R4,U5e),e(U5e,z0r),e(R4,W0r),e(R4,ez),e(ez,Q0r),e(R4,H0r),e(Io,U0r),e(Io,J5e),e(J5e,J0r),e(Io,Y0r),g(bL,Io,null),b(d,Fke,u),b(d,Lf,u),e(Lf,S4),e(S4,Y5e),g(vL,Y5e,null),e(Lf,K0r),e(Lf,K5e),e(K5e,Z0r),b(d,Cke,u),b(d,qr,u),g(TL,qr,null),e(qr,eLr),e(qr,Bf),e(Bf,oLr),e(Bf,Z5e),e(Z5e,rLr),e(Bf,tLr),e(Bf,eve),e(eve,aLr),e(Bf,nLr),e(qr,sLr),e(qr,FL),e(FL,lLr),e(FL,ove),e(ove,iLr),e(FL,dLr),e(qr,cLr),e(qr,Pt),g(CL,Pt,null),e(Pt,fLr),e(Pt,rve),e(rve,mLr),e(Pt,gLr),e(Pt,xf),e(xf,hLr),e(xf,tve),e(tve,pLr),e(xf,_Lr),e(xf,ave),e(ave,uLr),e(xf,bLr),e(Pt,vLr),e(Pt,nve),e(nve,TLr),e(Pt,FLr),g(ML,Pt,null),e(qr,CLr),e(qr,jo),g(EL,jo,null),e(jo,MLr),e(jo,sve),e(sve,ELr),e(jo,yLr),e(jo,Nn),e(Nn,wLr),e(Nn,lve),e(lve,ALr),e(Nn,LLr),e(Nn,ive),e(ive,BLr),e(Nn,xLr),e(Nn,dve),e(dve,kLr),e(Nn,RLr),e(jo,SLr),e(jo,yL),e(yL,P4),e(P4,cve),e(cve,PLr),e(P4,$Lr),e(P4,oz),e(oz,ILr),e(P4,jLr),e(yL,DLr),e(yL,$4),e($4,fve),e(fve,NLr),e($4,qLr),e($4,rz),e(rz,OLr),e($4,GLr),e(jo,XLr),e(jo,mve),e(mve,VLr),e(jo,zLr),g(wL,jo,null),b(d,Mke,u),b(d,kf,u),e(kf,I4),e(I4,gve),g(AL,gve,null),e(kf,WLr),e(kf,hve),e(hve,QLr),b(d,Eke,u),b(d,Or,u),g(LL,Or,null),e(Or,HLr),e(Or,Rf),e(Rf,ULr),e(Rf,pve),e(pve,JLr),e(Rf,YLr),e(Rf,_ve),e(_ve,KLr),e(Rf,ZLr),e(Or,e8r),e(Or,BL),e(BL,o8r),e(BL,uve),e(uve,r8r),e(BL,t8r),e(Or,a8r),e(Or,$t),g(xL,$t,null),e($t,n8r),e($t,bve),e(bve,s8r),e($t,l8r),e($t,Sf),e(Sf,i8r),e(Sf,vve),e(vve,d8r),e(Sf,c8r),e(Sf,Tve),e(Tve,f8r),e(Sf,m8r),e($t,g8r),e($t,Fve),e(Fve,h8r),e($t,p8r),g(kL,$t,null),e(Or,_8r),e(Or,Do),g(RL,Do,null),e(Do,u8r),e(Do,Cve),e(Cve,b8r),e(Do,v8r),e(Do,qn),e(qn,T8r),e(qn,Mve),e(Mve,F8r),e(qn,C8r),e(qn,Eve),e(Eve,M8r),e(qn,E8r),e(qn,yve),e(yve,y8r),e(qn,w8r),e(Do,A8r),e(Do,wve),e(wve,j4),e(j4,Ave),e(Ave,L8r),e(j4,B8r),e(j4,tz),e(tz,x8r),e(j4,k8r),e(Do,R8r),e(Do,Lve),e(Lve,S8r),e(Do,P8r),g(SL,Do,null),yke=!0},p(d,[u]){const PL={};u&2&&(PL.$$scope={dirty:u,ctx:d}),qf.$set(PL);const Bve={};u&2&&(Bve.$$scope={dirty:u,ctx:d}),Mh.$set(Bve);const xve={};u&2&&(xve.$$scope={dirty:u,ctx:d}),Ph.$set(xve)},i(d){yke||(h(ce.$$.fragment,d),h(Na.$$.fragment,d),h(GM.$$.fragment,d),h(XM.$$.fragment,d),h(qf.$$.fragment,d),h(VM.$$.fragment,d),h(zM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(iE.$$.fragment,d),h(Mh.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(pE.$$.fragment,d),h(Ph.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(DE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(ey.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(g6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(u6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(Z6.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(ZA.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(u0.$$.fragment,d),h(b0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(N0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(z0.$$.fragment,d),h(W0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(K0.$$.fragment,d),h(Z0.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(LL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),yke=!0)},o(d){p(ce.$$.fragment,d),p(Na.$$.fragment,d),p(GM.$$.fragment,d),p(XM.$$.fragment,d),p(qf.$$.fragment,d),p(VM.$$.fragment,d),p(zM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(iE.$$.fragment,d),p(Mh.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(pE.$$.fragment,d),p(Ph.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(DE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(ey.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(g6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(u6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(k6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p(P6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(N6.$$.fragment,d),p(q6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(V6.$$.fragment,d),p(z6.$$.fragment,d),p(Q6.$$.fragment,d),p(H6.$$.fragment,d),p(U6.$$.fragment,d),p(Y6.$$.fragment,d),p(K6.$$.fragment,d),p(Z6.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(ZA.$$.fragment,d),p(e0.$$.fragment,d),p(o0.$$.fragment,d),p(r0.$$.fragment,d),p(t0.$$.fragment,d),p(a0.$$.fragment,d),p(s0.$$.fragment,d),p(l0.$$.fragment,d),p(i0.$$.fragment,d),p(d0.$$.fragment,d),p(c0.$$.fragment,d),p(f0.$$.fragment,d),p(g0.$$.fragment,d),p(h0.$$.fragment,d),p(p0.$$.fragment,d),p(_0.$$.fragment,d),p(u0.$$.fragment,d),p(b0.$$.fragment,d),p(T0.$$.fragment,d),p(F0.$$.fragment,d),p(C0.$$.fragment,d),p(M0.$$.fragment,d),p(E0.$$.fragment,d),p(y0.$$.fragment,d),p(A0.$$.fragment,d),p(L0.$$.fragment,d),p(B0.$$.fragment,d),p(x0.$$.fragment,d),p(k0.$$.fragment,d),p(R0.$$.fragment,d),p(P0.$$.fragment,d),p($0.$$.fragment,d),p(I0.$$.fragment,d),p(j0.$$.fragment,d),p(D0.$$.fragment,d),p(N0.$$.fragment,d),p(O0.$$.fragment,d),p(G0.$$.fragment,d),p(X0.$$.fragment,d),p(V0.$$.fragment,d),p(z0.$$.fragment,d),p(W0.$$.fragment,d),p(H0.$$.fragment,d),p(U0.$$.fragment,d),p(J0.$$.fragment,d),p(Y0.$$.fragment,d),p(K0.$$.fragment,d),p(Z0.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(LL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(RL.$$.fragment,d),p(SL.$$.fragment,d),yke=!1},d(d){t(J),d&&t(Be),d&&t(de),_(ce),d&&t($f),d&&t(ca),d&&t(ye),d&&t(co),d&&t(jf),_(Na,d),d&&t(fo),d&&t(ge),d&&t(Xo),d&&t(qa),d&&t(EBe),d&&t(Xi),_(GM),d&&t(yBe),d&&t(zn),d&&t(wBe),_(XM,d),d&&t(ABe),d&&t(I8),d&&t(LBe),_(qf,d),d&&t(BBe),d&&t(Vi),_(VM),d&&t(xBe),d&&t(Vo),_(zM),_(HM),_(UM),_(JM),d&&t(kBe),d&&t(Wi),_(YM),d&&t(RBe),d&&t(zo),_(KM),_(oE),_(rE),_(tE),d&&t(SBe),d&&t(Qi),_(aE),d&&t(PBe),d&&t(Wo),_(nE),_(iE),_(Mh),_(dE),_(cE),d&&t($Be),d&&t(Hi),_(fE),d&&t(IBe),d&&t(Qo),_(mE),_(pE),_(Ph),_(_E),_(uE),d&&t(jBe),d&&t(Ji),_(bE),d&&t(DBe),d&&t(Ho),_(vE),_(FE),_(CE),_(ME),_(EE),d&&t(NBe),d&&t(Zi),_(yE),d&&t(qBe),d&&t(Uo),_(wE),_(LE),_(BE),_(xE),_(kE),d&&t(OBe),d&&t(rd),_(RE),d&&t(GBe),d&&t(Jo),_(SE),_($E),_(IE),_(jE),_(DE),d&&t(XBe),d&&t(nd),_(NE),d&&t(VBe),d&&t(Yo),_(qE),_(GE),_(XE),_(VE),_(zE),d&&t(zBe),d&&t(id),_(WE),d&&t(WBe),d&&t(Ko),_(QE),_(UE),_(JE),_(YE),_(KE),d&&t(QBe),d&&t(fd),_(ZE),d&&t(HBe),d&&t(Zo),_(ey),_(ry),_(ty),_(ay),_(ny),d&&t(UBe),d&&t(hd),_(sy),d&&t(JBe),d&&t(er),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(YBe),d&&t(ud),_(gy),d&&t(KBe),d&&t(or),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(ZBe),d&&t(Td),_(Ty),d&&t(exe),d&&t(rr),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(oxe),d&&t(Md),_(Ay),d&&t(rxe),d&&t(tr),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(txe),d&&t(wd),_(Py),d&&t(axe),d&&t(ar),_($y),_(jy),_(Dy),_(Ny),_(qy),d&&t(nxe),d&&t(Bd),_(Oy),d&&t(sxe),d&&t(nr),_(Gy),_(Vy),_(zy),_(Wy),_(Qy),d&&t(lxe),d&&t(Rd),_(Hy),d&&t(ixe),d&&t(sr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),d&&t(dxe),d&&t($d),_(ow),d&&t(cxe),d&&t(lr),_(rw),_(aw),_(nw),_(sw),_(lw),d&&t(fxe),d&&t(Dd),_(iw),d&&t(mxe),d&&t(ir),_(dw),_(fw),_(mw),_(gw),_(hw),d&&t(gxe),d&&t(Od),_(pw),d&&t(hxe),d&&t(dr),_(_w),_(bw),_(vw),_(Tw),_(Fw),d&&t(pxe),d&&t(Vd),_(Cw),d&&t(_xe),d&&t(cr),_(Mw),_(yw),_(ww),_(Aw),_(Bw),d&&t(uxe),d&&t(Qd),_(xw),d&&t(bxe),d&&t(fr),_(kw),_(Sw),_(Pw),_($w),_(Iw),d&&t(vxe),d&&t(Jd),_(jw),d&&t(Txe),d&&t(mr),_(Dw),_(qw),_(Ow),_(Gw),_(Xw),d&&t(Fxe),d&&t(ec),_(Vw),d&&t(Cxe),d&&t(gr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),d&&t(Mxe),d&&t(tc),_(Yw),d&&t(Exe),d&&t(hr),_(Kw),_(e6),_(o6),_(r6),_(t6),d&&t(yxe),d&&t(sc),_(a6),d&&t(wxe),d&&t(pr),_(n6),_(l6),_(i6),_(d6),_(f6),d&&t(Axe),d&&t(dc),_(m6),d&&t(Lxe),d&&t(_r),_(g6),_(p6),_(_6),_(u6),_(b6),d&&t(Bxe),d&&t(mc),_(v6),d&&t(xxe),d&&t(ur),_(T6),_(C6),_(M6),_(E6),_(y6),d&&t(kxe),d&&t(pc),_(w6),d&&t(Rxe),d&&t(br),_(A6),_(B6),_(x6),_(k6),_(R6),d&&t(Sxe),d&&t(bc),_(S6),d&&t(Pxe),d&&t(vr),_(P6),_(I6),_(j6),_(D6),_(N6),d&&t($xe),d&&t(Fc),_(q6),d&&t(Ixe),d&&t(Tr),_(O6),_(X6),_(V6),_(z6),_(Q6),d&&t(jxe),d&&t(Ec),_(H6),d&&t(Dxe),d&&t(Fr),_(U6),_(Y6),_(K6),_(Z6),_(eA),d&&t(Nxe),d&&t(Ac),_(oA),d&&t(qxe),d&&t(Cr),_(rA),_(aA),_(nA),_(sA),_(lA),d&&t(Oxe),d&&t(xc),_(iA),d&&t(Gxe),d&&t(Mr),_(dA),_(fA),_(mA),_(gA),_(hA),d&&t(Xxe),d&&t(Sc),_(pA),d&&t(Vxe),d&&t(Er),_(_A),_(bA),_(vA),_(TA),_(FA),d&&t(zxe),d&&t(Ic),_(CA),d&&t(Wxe),d&&t(yr),_(MA),_(yA),_(wA),_(AA),_(LA),d&&t(Qxe),d&&t(Nc),_(BA),d&&t(Hxe),d&&t(wr),_(xA),_(RA),_(SA),_(PA),_($A),d&&t(Uxe),d&&t(Gc),_(IA),d&&t(Jxe),d&&t(Ar),_(jA),_(NA),_(qA),_(OA),_(GA),d&&t(Yxe),d&&t(zc),_(XA),d&&t(Kxe),d&&t(Lr),_(VA),_(WA),_(QA),_(HA),_(UA),d&&t(Zxe),d&&t(Hc),_(JA),d&&t(eke),d&&t(Br),_(YA),_(ZA),_(e0),_(o0),_(r0),d&&t(oke),d&&t(Yc),_(t0),d&&t(rke),d&&t(xr),_(a0),_(s0),_(l0),_(i0),_(d0),d&&t(tke),d&&t(ef),_(c0),d&&t(ake),d&&t(kr),_(f0),_(g0),_(h0),_(p0),_(_0),d&&t(nke),d&&t(tf),_(u0),d&&t(ske),d&&t(Rr),_(b0),_(T0),_(F0),_(C0),_(M0),d&&t(lke),d&&t(sf),_(E0),d&&t(ike),d&&t(Sr),_(y0),_(A0),_(L0),_(B0),_(x0),d&&t(dke),d&&t(cf),_(k0),d&&t(cke),d&&t(Pr),_(R0),_(P0),_($0),_(I0),_(j0),d&&t(fke),d&&t(gf),_(D0),d&&t(mke),d&&t($r),_(N0),_(O0),_(G0),_(X0),_(V0),d&&t(gke),d&&t(_f),_(z0),d&&t(hke),d&&t(Ir),_(W0),_(H0),_(U0),_(J0),_(Y0),d&&t(pke),d&&t(vf),_(K0),d&&t(_ke),d&&t(jr),_(Z0),_(oL),_(rL),_(tL),_(aL),d&&t(uke),d&&t(Cf),_(nL),d&&t(bke),d&&t(Dr),_(sL),_(iL),_(dL),_(cL),_(fL),d&&t(vke),d&&t(yf),_(mL),d&&t(Tke),d&&t(Nr),_(gL),_(pL),_(_L),_(uL),_(bL),d&&t(Fke),d&&t(Lf),_(vL),d&&t(Cke),d&&t(qr),_(TL),_(CL),_(ML),_(EL),_(wL),d&&t(Mke),d&&t(kf),_(AL),d&&t(Eke),d&&t(Or),_(LL),_(xL),_(kL),_(RL),_(SL)}}}const K5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Z5t($i,J,Be){let{fw:de}=J;return $i.$$set=me=>{"fw"in me&&Be(0,de=me.fw)},[de]}class svt extends V5t{constructor(J){super();z5t(this,J,Z5t,Y5t,W5t,{fw:0})}}export{svt as default,K5t as metadata};
